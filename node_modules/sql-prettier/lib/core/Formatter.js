"use strict";

exports.__esModule = true;

var _includes = require("lodash/includes");

var _includes2 = _interopRequireDefault(_includes);

var _trimEnd = require("lodash/trimEnd");

var _trimEnd2 = _interopRequireDefault(_trimEnd);

var _tokenTypes = require("./tokenTypes");

var _tokenTypes2 = _interopRequireDefault(_tokenTypes);

var _Indentation = require("./Indentation");

var _Indentation2 = _interopRequireDefault(_Indentation);

var _InlineBlock = require("./InlineBlock");

var _InlineBlock2 = _interopRequireDefault(_InlineBlock);

var _Params = require("./Params");

var _Params2 = _interopRequireDefault(_Params);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Formatter = function () {
    /**
     * @param {Object} cfg
     *   @param {Object} cfg.indent
     *   @param {Object} cfg.params
     * @param {Tokenizer} tokenizer
     */
    function Formatter(cfg, tokenizer) {
        _classCallCheck(this, Formatter);

        this.cfg = cfg || {};
        this.indentation = new _Indentation2["default"](this.cfg.indent);
        this.inlineBlock = new _InlineBlock2["default"]();
        this.params = new _Params2["default"](this.cfg.params);
        this.tokenizer = tokenizer;
        this.previousReservedWord = {};
        this.tokens = [];
        this.index = 0;
    }

    /**
     * Formats whitespaces in a SQL string to make it easier to read.
     *
     * @param {String} query The SQL query string
     * @return {String} formatted query
     */


    Formatter.prototype.format = function format(query) {
        this.tokens = this.tokenizer.tokenize(query);
        var formattedQuery = this.getFormattedQueryFromTokens();

        return formattedQuery.trim();
    };

    Formatter.prototype.getFormattedQueryFromTokens = function getFormattedQueryFromTokens() {
        var _this = this;

        var formattedQuery = "";

        this.tokens.forEach(function (token, index) {
            _this.index = index;

            // 根据当前词，判断是否需要左右对齐新风格格式化。如select需要。create table不需要

            var _useStandardFormat = (0, _tokenTypes.useStandardFormat)(token.value),
                success = _useStandardFormat.success,
                standardMode = _useStandardFormat.standardMode;

            if (success) {
                _this.indentation.changeIndentMode(standardMode);
            }

            if (token.type === _tokenTypes2["default"].WHITESPACE) {
                // ignore (we do our own whitespace formatting)
            } else if (token.type === _tokenTypes2["default"].LINE_COMMENT) {
                formattedQuery = _this.formatLineComment(token, formattedQuery);
            } else if (token.type === _tokenTypes2["default"].BLOCK_COMMENT) {
                formattedQuery = _this.formatBlockComment(token, formattedQuery);
            }
            // 顶层词汇如Select强制换行
            else if (token.type === _tokenTypes2["default"].RESERVED_TOPLEVEL) {
                    formattedQuery = _this.formatToplevelReservedWord(token, formattedQuery);
                    _this.previousReservedWord = token;
                }
                // 换行词汇
                else if (token.type === _tokenTypes2["default"].RESERVED_NEWLINE) {
                        formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);
                        _this.previousReservedWord = token;
                    } else if (token.type === _tokenTypes2["default"].RESERVED) {
                        // append token with whitespace bebind
                        formattedQuery = _this.formatWithSpaces(token, formattedQuery);
                        _this.previousReservedWord = token;
                    } else if (token.type === _tokenTypes2["default"].OPEN_PAREN) {
                        formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);
                    } else if (token.type === _tokenTypes2["default"].CLOSE_PAREN) {
                        formattedQuery = _this.formatClosingParentheses(token, formattedQuery);
                    } else if (token.type === _tokenTypes2["default"].OPEN_CONDITION) {
                        formattedQuery = _this.formatOpenCondition(token, formattedQuery);
                        _this.previousReservedWord = token;
                    } else if (token.type === _tokenTypes2["default"].CLOSE_CONDITION) {
                        formattedQuery = _this.formatCloseCondition(token, formattedQuery);
                        _this.previousReservedWord = token;
                    } else if (token.type === _tokenTypes2["default"].CONDITION_WORDS) {
                        formattedQuery = _this.formatCondition(token, formattedQuery);
                        _this.previousReservedWord = token;
                    } else if (token.type === _tokenTypes2["default"].PLACEHOLDER) {
                        formattedQuery = _this.formatPlaceholder(token, formattedQuery);
                    } else if (token.value === ",") {
                        formattedQuery = _this.formatComma(token, formattedQuery);
                    } else if (token.value === ":") {
                        formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);
                    } else if (token.value === ".") {
                        formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);
                    } else if (token.value === ";") {
                        formattedQuery = _this.formatQuerySeparator(token, formattedQuery);
                        _this.previousReservedWord = token;
                    } else {
                        formattedQuery = _this.formatWithSpaces(token, formattedQuery);
                    }
        });
        return formattedQuery;
    };

    Formatter.prototype.formatLineComment = function formatLineComment(token, query) {
        return this.addNewline(query + token.value, true);
    };

    Formatter.prototype.formatBlockComment = function formatBlockComment(token, query) {
        return this.addNewline(this.addNewline(query, true) + this.indentComment(token.value));
    };

    Formatter.prototype.indentComment = function indentComment(comment) {
        return comment.replace(/\n/g, "\n" + this.indentation.getIndent());
    };

    Formatter.prototype.formatToplevelReservedWord = function formatToplevelReservedWord(token, query) {
        // 消除上一个顶层词带来的影响因子
        this.indentation.decreaseTopLevel();
        query = this.addNewline(query);
        // 消除如order     by写法，替换成order by
        query += this.equalizeWhitespace(token.value);
        // 添加顶层词汇 影响作用域
        this.indentation.increaseToplevel(token.value);
        // top level word 
        return this.trimQueryInLine(query);
    };

    Formatter.prototype.formatNewlineReservedWord = function formatNewlineReservedWord(token, query) {
        return this.formatToplevelReservedWord(token, query);
    };

    // Replace any sequence of whitespace characters with single space


    Formatter.prototype.equalizeWhitespace = function equalizeWhitespace(string) {
        return string.replace(/\s+/g, " ");
    };

    // Opening parentheses increase the block indent level and start a new line


    Formatter.prototype.formatOpeningParentheses = function formatOpeningParentheses(token, query) {
        // Take out the preceding space unless there was whitespace there in the original query
        // or another opening parens or line comment
        var preserveWhitespaceFor = [_tokenTypes2["default"].WHITESPACE, _tokenTypes2["default"].OPEN_PAREN, _tokenTypes2["default"].LINE_COMMENT];
        if (!(0, _includes2["default"])(preserveWhitespaceFor, this.previousToken().type)) {
            query = (0, _trimEnd2["default"])(query);
        }
        query += token.value;

        this.inlineBlock.beginIfPossible(this.tokens, this.index);

        // 判断parentheses之间，是否需要换行
        if (!this.inlineBlock.isActive()) {
            // 换行需要判断是因为超长，还是因为子查询。两者对齐方式不同，详见inlineBlock.isInlineBlock注释
            var isSubquery = this.inlineBlock.isSubQuery(this.tokens, this.index);
            var lastLineWord = query.split('\n').pop();
            var defaultIndent = lastLineWord.length;
            if (!isSubquery) {
                var words = lastLineWord.split(' ').filter(Boolean);
                // 兼容count( ss )。括号紧贴前置词，会导致split计算异常
                var lastWord = words.slice(-1).pop();
                var isEndWithBrackets = lastWord === '(';
                // 即取括号前的关键词
                var wordBeforeBrackets = isEndWithBrackets ? words.slice(-2, -1).pop() : lastWord;
                // 括号结尾，则取的是倒数第二个词，长度2的空格，标示括号加前置的一个空格。否则无需额外计算
                if (wordBeforeBrackets) defaultIndent = defaultIndent - wordBeforeBrackets.length - (isEndWithBrackets ? 2 : 0); // 
            }

            this.indentation.increaseBlockLevel(defaultIndent);
            query = this.addNewline(query);
        }
        return query;
    };

    // Closing parentheses decrease the block indent level


    Formatter.prototype.formatClosingParentheses = function formatClosingParentheses(token, query) {
        if (this.inlineBlock.isActive()) {
            this.inlineBlock.end();
            return this.formatWithSpaceAfter(token, query);
        } else {
            this.indentation.decreaseBlockLevel();
            return this.formatWithSpaces(token, this.addNewline(query));
        }
    };

    // 目前只处理case when场景，作为函数使用，但是有换行格式化规范


    Formatter.prototype.formatOpenCondition = function formatOpenCondition(token, query) {
        var newQuery = this.formatWithSpaces(token, query);
        var defaultIndent = newQuery.split('\n').pop().length;
        // indetTypes中压入一项，所以return时，多送一个indent，保证when else的上下对齐
        this.indentation.increaseCaseLevel(defaultIndent);

        return newQuery + this.indentation.indent;
    };

    Formatter.prototype.formatCloseCondition = function formatCloseCondition(token, query) {
        this.indentation.decreaseCaseLevel();
        return this.addNewline(query) + token.value + " ";
    };

    // case end 中的when、else等条件换行词


    Formatter.prototype.formatCondition = function formatCondition(token, query) {
        // the first line in case end, do not need newline.
        if (this.previousReservedWord.type === _tokenTypes2["default"].OPEN_CONDITION) {
            return this.formatWithSpaces(token, query);
        }
        return this.addNewline(query) + token.value + " ";
    };

    Formatter.prototype.formatPlaceholder = function formatPlaceholder(token, query) {
        return query + this.params.get(token) + " ";
    };

    // Commas start a new line (unless within inline parentheses or SQL "LIMIT" clause)


    Formatter.prototype.formatComma = function formatComma(token, query) {
        if (this.inlineBlock.isActive() || /^LIMIT$/i.test(this.previousReservedWord.value)) {
            return query + token.value;
        }
        return this.addNewline(query) + token.value;
    };

    Formatter.prototype.formatWithSpaceAfter = function formatWithSpaceAfter(token, query) {
        return this.trimTrailingWhitespace(query) + token.value + " ";
    };

    Formatter.prototype.formatWithoutSpaces = function formatWithoutSpaces(token, query) {
        return this.trimTrailingWhitespace(query) + token.value;
    };

    Formatter.prototype.formatWithSpaces = function formatWithSpaces(token, query) {
        return query + token.value + " ";
    };

    Formatter.prototype.formatQuerySeparator = function formatQuerySeparator(token, query) {
        return this.trimTrailingWhitespace(query) + token.value + "\n";
    };

    /** 是否换行取决于，是否在Select子项内，除注释与逗号，其他都不换行 */


    Formatter.prototype.addNewline = function addNewline(query) {
        var forceNewLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        this.indentation.setSkipTopLevelEffectIndent(false);
        if (this.previousReservedWord.value === ';') {
            // statement之间多空一行
            return (0, _trimEnd2["default"])(query) + "\n" + "\n" + this.indentation.getIndent();
        }
        return (0, _trimEnd2["default"])(query) + "\n" + this.indentation.getIndent();
    };

    Formatter.prototype.trimQueryInLine = function trimQueryInLine(query) {
        return (0, _trimEnd2["default"])(query) + this.indentation.getIndent();
    };

    Formatter.prototype.trimTrailingWhitespace = function trimTrailingWhitespace(query) {
        if (this.previousNonWhitespaceToken().type === _tokenTypes2["default"].LINE_COMMENT) {
            return (0, _trimEnd2["default"])(query) + "\n";
        } else {
            return (0, _trimEnd2["default"])(query);
        }
    };

    Formatter.prototype.previousNonWhitespaceToken = function previousNonWhitespaceToken() {
        var n = 1;
        while (this.previousToken(n).type === _tokenTypes2["default"].WHITESPACE) {
            n++;
        }
        return this.previousToken(n);
    };

    Formatter.prototype.previousToken = function previousToken() {
        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

        return this.tokens[this.index - offset] || {};
    };

    return Formatter;
}();

exports["default"] = Formatter;
module.exports = exports["default"];