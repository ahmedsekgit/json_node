import includes from "lodash/includes";
import trimEnd from "lodash/trimEnd";
import tokenTypes, {useStandardFormat} from "./tokenTypes";
import Indentation from "./Indentation";
import InlineBlock from "./InlineBlock";
import Params from "./Params";

export default class Formatter {
    /**
     * @param {Object} cfg
     *   @param {Object} cfg.indent
     *   @param {Object} cfg.params
     * @param {Tokenizer} tokenizer
     */
    constructor(cfg, tokenizer) {
        this.cfg = cfg || {};
        this.indentation = new Indentation(this.cfg.indent);
        this.inlineBlock = new InlineBlock();
        this.params = new Params(this.cfg.params);
        this.tokenizer = tokenizer;
        this.previousReservedWord = {};
        this.tokens = [];
        this.index = 0;
    }

    /**
     * Formats whitespaces in a SQL string to make it easier to read.
     *
     * @param {String} query The SQL query string
     * @return {String} formatted query
     */
    format(query) {
        this.tokens = this.tokenizer.tokenize(query);
        const formattedQuery = this.getFormattedQueryFromTokens();

        return formattedQuery.trim();
    }

    getFormattedQueryFromTokens() {
        let formattedQuery = "";

        this.tokens.forEach((token, index) => {
            this.index = index;

            // 根据当前词，判断是否需要左右对齐新风格格式化。如select需要。create table不需要
            const {success, standardMode} = useStandardFormat(token.value);
            if(success) {
                this.indentation.changeIndentMode(standardMode)
            }

            if (token.type === tokenTypes.WHITESPACE) {
                // ignore (we do our own whitespace formatting)
            }
            else if (token.type === tokenTypes.LINE_COMMENT) {
                formattedQuery = this.formatLineComment(token, formattedQuery);
            }
            else if (token.type === tokenTypes.BLOCK_COMMENT) {
                formattedQuery = this.formatBlockComment(token, formattedQuery);
            }
            // 顶层词汇如Select强制换行
            else if (token.type === tokenTypes.RESERVED_TOPLEVEL) {
                formattedQuery = this.formatToplevelReservedWord(token, formattedQuery);
                this.previousReservedWord = token;
            }
            // 换行词汇
            else if (token.type === tokenTypes.RESERVED_NEWLINE) {
                formattedQuery = this.formatNewlineReservedWord(token, formattedQuery);
                this.previousReservedWord = token;
            }
            else if (token.type === tokenTypes.RESERVED) {
                // append token with whitespace bebind
                formattedQuery = this.formatWithSpaces(token, formattedQuery);
                this.previousReservedWord = token;
            }
            else if (token.type === tokenTypes.OPEN_PAREN) {
                formattedQuery = this.formatOpeningParentheses(token, formattedQuery);
            }
            else if (token.type === tokenTypes.CLOSE_PAREN) {
                formattedQuery = this.formatClosingParentheses(token, formattedQuery);
            }
            else if (token.type === tokenTypes.OPEN_CONDITION) {
                formattedQuery = this.formatOpenCondition(token, formattedQuery);
                this.previousReservedWord = token;
            }
            else if (token.type === tokenTypes.CLOSE_CONDITION) {
                formattedQuery = this.formatCloseCondition(token, formattedQuery);
                this.previousReservedWord = token;
            }
            else if (token.type === tokenTypes.CONDITION_WORDS) {
                formattedQuery = this.formatCondition(token, formattedQuery);
                this.previousReservedWord = token;
            }
            else if (token.type === tokenTypes.PLACEHOLDER) {
                formattedQuery = this.formatPlaceholder(token, formattedQuery);
            }
            else if (token.value === ",") {
                formattedQuery = this.formatComma(token, formattedQuery);
            }
            else if (token.value === ":") {
                formattedQuery = this.formatWithSpaceAfter(token, formattedQuery);
            }
            else if (token.value === ".") {
                formattedQuery = this.formatWithoutSpaces(token, formattedQuery);
            }
            else if (token.value === ";") {
                formattedQuery = this.formatQuerySeparator(token, formattedQuery);
                this.previousReservedWord = token;
            }
            else {
                formattedQuery = this.formatWithSpaces(token, formattedQuery);
            }
        });
        return formattedQuery;
    }

    formatLineComment(token, query) {
        return this.addNewline(query + token.value, true);
    }

    formatBlockComment(token, query) {
        return this.addNewline(this.addNewline(query, true) + this.indentComment(token.value));
    }

    indentComment(comment) {
        return comment.replace(/\n/g, "\n" + this.indentation.getIndent());
    }

    formatToplevelReservedWord(token, query) {
        // 消除上一个顶层词带来的影响因子
        this.indentation.decreaseTopLevel();
        query = this.addNewline(query);
        // 消除如order     by写法，替换成order by
        query += this.equalizeWhitespace(token.value);
        // 添加顶层词汇 影响作用域
        this.indentation.increaseToplevel(token.value);
        // top level word 
        return this.trimQueryInLine(query);
    }

    formatNewlineReservedWord(token, query) {
        return this.formatToplevelReservedWord(token, query)
    }

    // Replace any sequence of whitespace characters with single space
    equalizeWhitespace(string) {
        return string.replace(/\s+/g, " ");
    }

    // Opening parentheses increase the block indent level and start a new line
    formatOpeningParentheses(token, query) {
        // Take out the preceding space unless there was whitespace there in the original query
        // or another opening parens or line comment
        const preserveWhitespaceFor = [
            tokenTypes.WHITESPACE,
            tokenTypes.OPEN_PAREN,
            tokenTypes.LINE_COMMENT
        ];
        if (!includes(preserveWhitespaceFor, this.previousToken().type)) {    
            query = trimEnd(query);
        }
        query += token.value;

        this.inlineBlock.beginIfPossible(this.tokens, this.index);

        // 判断parentheses之间，是否需要换行
        if (!this.inlineBlock.isActive()) {
            // 换行需要判断是因为超长，还是因为子查询。两者对齐方式不同，详见inlineBlock.isInlineBlock注释
            const isSubquery = this.inlineBlock.isSubQuery(this.tokens, this.index);
            const lastLineWord = query.split('\n').pop()
            let defaultIndent = lastLineWord.length;
            if(!isSubquery) {
                const words = lastLineWord.split(' ').filter(Boolean);
                // 兼容count( ss )。括号紧贴前置词，会导致split计算异常
                const lastWord = words.slice(-1).pop();
                const isEndWithBrackets = lastWord === '(';
                // 即取括号前的关键词
                const wordBeforeBrackets = isEndWithBrackets ? words.slice(-2, -1).pop() : lastWord;
                // 括号结尾，则取的是倒数第二个词，长度2的空格，标示括号加前置的一个空格。否则无需额外计算
                if(wordBeforeBrackets) defaultIndent = defaultIndent - wordBeforeBrackets.length - (isEndWithBrackets ? 2 : 0) // 
            }
            
            this.indentation.increaseBlockLevel(defaultIndent); 
            query = this.addNewline(query);
        }
        return query;
    }

    // Closing parentheses decrease the block indent level
    formatClosingParentheses(token, query) {
        if (this.inlineBlock.isActive()) {
            this.inlineBlock.end();
            return this.formatWithSpaceAfter(token, query);
        }
        else {
            this.indentation.decreaseBlockLevel();
            return this.formatWithSpaces(token, this.addNewline(query));
        }
    }

    // 目前只处理case when场景，作为函数使用，但是有换行格式化规范
    formatOpenCondition(token, query) {
        const newQuery = this.formatWithSpaces(token, query);
        const defaultIndent = newQuery.split('\n').pop().length;
        // indetTypes中压入一项，所以return时，多送一个indent，保证when else的上下对齐
        this.indentation.increaseCaseLevel(defaultIndent);

        return newQuery + this.indentation.indent;
    }

    formatCloseCondition(token, query) {
        this.indentation.decreaseCaseLevel();
        return this.addNewline(query) + token.value + " ";
    }

    // case end 中的when、else等条件换行词
    formatCondition(token, query) {
        // the first line in case end, do not need newline.
        if (this.previousReservedWord.type === tokenTypes.OPEN_CONDITION) {
            return this.formatWithSpaces(token, query);
        }
        return this.addNewline(query) + token.value + " ";
    }

    formatPlaceholder(token, query) {
        return query + this.params.get(token) + " ";
    }

    // Commas start a new line (unless within inline parentheses or SQL "LIMIT" clause)
    formatComma(token, query) {
        if (this.inlineBlock.isActive() || (/^LIMIT$/i.test(this.previousReservedWord.value))) {
            return query + token.value;
        }
        return this.addNewline(query) + token.value;
    }

    formatWithSpaceAfter(token, query) {
        return this.trimTrailingWhitespace(query) + token.value + " ";
    }

    formatWithoutSpaces(token, query) {
        return this.trimTrailingWhitespace(query) + token.value;
    }

    formatWithSpaces(token, query) {
        return query + token.value + " ";
    }

    formatQuerySeparator(token, query) {
        return this.trimTrailingWhitespace(query) + token.value + "\n";
    }

    /** 是否换行取决于，是否在Select子项内，除注释与逗号，其他都不换行 */
    addNewline(query, forceNewLine = false) {
        this.indentation.setSkipTopLevelEffectIndent(false);
        if(this.previousReservedWord.value === ';') {
            // statement之间多空一行
            return trimEnd(query) + "\n" + "\n" + this.indentation.getIndent();
        }
        return trimEnd(query) + "\n" + this.indentation.getIndent();
    }

    trimQueryInLine(query) {
        return trimEnd(query) + this.indentation.getIndent();
    }

    trimTrailingWhitespace(query) {
        if (this.previousNonWhitespaceToken().type === tokenTypes.LINE_COMMENT) {
            return trimEnd(query) + "\n";
        }
        else {
            return trimEnd(query);
        }
    }

    previousNonWhitespaceToken() {
        let n = 1;
        while (this.previousToken(n).type === tokenTypes.WHITESPACE) {
            n++;
        }
        return this.previousToken(n);
    }

    previousToken(offset = 1) {
        return this.tokens[this.index - offset] || {};
    }
}
