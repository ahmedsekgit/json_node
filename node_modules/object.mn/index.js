module.exports = {
  version: require('./package.json').version,
  
  set(object, path, value, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (!value && value !== 0) throw new TypeError('You didn\'t set a value!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    try {
      path = path.split(split ?? '/');
      let data = object;
      
      if (!path[0].length) {
        if (typeof value !== 'object') throw new TypeError('Value has to be an object!');
        for (let key in value) {
          data = data[key] = (value[key] ?? {})
        }
        return ck(object, callback);
      }
      
      while (path.length > 1) {
        let key = path.shift();
        data = data[key] = (data[key] ?? {});
      }
      data[path] = value;
      
      return ck(object, callback);
    } catch(err) { return err; }
  },
  
  get(object, path, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    try {
      path = path.split(split ?? '/');
      if (!path[0].length) return ck(object, callback);
      
      let data = path.reduce((a, b) => (a ?? {})[b], object);
      if (callback && typeof callback == 'function') return callback(data);
      else return data;
    } catch(err) { return null; }
  },
  
  delete(object, path, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    try {
      path = path.split(split ?? '/');
      let data = object;
      
      if (!path[0].length) {
        delete object; object = {};
        delete data; data = {};
        return ck(object, callback);
      }
      
      while (path.length > 1) {
        let key = path.shift();
        data = data[key] = (data[key] ?? {});
      }
      delete data[path];
      
      return ck(object, callback);
    } catch(err) { return null; }
  },
  
  update(object, path, values, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (!values || typeof values !== 'object') throw new TypeError('The value has to be in object!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    if (path == split) {
      this.set(object, path, values, split);
      return ck(object, callback);
    }
    
    if (!Object.keys(object).length) {
      this.set(object, path, values, split);
      return ck(object, callback);
    }
    
    Object.keys(values).forEach(key => {
      return this.set(object, (path + split + key), values[key], split);
    });
    
    return ck(object, callback);
  },
  
  has(object, path, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    let data = this.get(object, path, split);
    return ck(Boolean(data), callback);
  },
  
  push(object, path, values, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    try {
      let data = this.get(object, path, split);
      if (!Array.isArray(data)) data = [];
      values = Array.isArray(values) ? values : [values];
      data.push(...values); this.set(object, path, data, split);
      
      return ck(object, callback);
    } catch (err) { return null; }
  },
  
  keys(object, path, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    let data = Object.keys(this.get(object, path, split) ?? {});
    return ck(data, callback);
  },
  
  toJSON(object, path, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    let data = JSON.stringify(this.get(object, path, split) ?? {});
    return ck(data, callback);
  },
  
  values(object, path, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    let data = Object.values(this.get(object, path, split) ?? {});
    return ck(data, callback);
  },
  
  entries(object, path, split, callback) {
    if (typeof object !== 'object') throw new TypeError('You have not defined any valid objects!');
    if (!path || typeof path !== 'string') throw new TypeError('The path has to be a string!');
    if (typeof split == 'function') {
      callback = split;
      split = null;
    }
    if (
      split &&
      typeof split !== 'string' &&
      typeof split !== 'function'
    ) throw new TypeError('Provide a valid split!');
    
    let data = Object.entries(this.get(object, path, split) ?? {});
    return ck(data, callback);
  }
};

function ck(object, callback) {
  if (callback && typeof callback == 'function') return callback(object);
  else return object;
}