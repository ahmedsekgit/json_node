/* JsonSearch - https://www.npmjs.com/package/search-array @license */
var JsonSearch = (function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  function tokenizeQuery(query, keys) {
    var tokens = [];
    /* inspired by https://stackoverflow.com/a/366532/3559463
     * regex named groups:
     *   n: captures negate (symbol - exists or not)
     *   q: captures actual query (exlcuding ' or ")
     *        capture groups 4 and 5 also capture the query
     *   k: captures searched key (in queries like key:something)
     */

    var searchTokenRegex = new RegExp("(?<n>-)?(?:(?<k>".concat(keys.join('|'), "):)?(?<q>\"([^\"]*)\"|'([^']*)'|[^\\s\"']+)"), 'ig');
    var token;

    while ((token = searchTokenRegex.exec(query)) !== null) {
      var q = token[5] || token[4] || token.groups.q;
      var key = token.groups.k;
      var isNegate = token.groups.n !== undefined;
      tokens.push({
        q: q,
        key: key,
        isNegate: isNegate
      });
    }

    return tokens;
  }

  /**
   * Escape regex special characters in srting
   * @param  {string} input string
   * @return {String} escpaed string
   */

  function RegExpEscape(string) {
    return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
  }
  /**
   * Escape regex special characters in srting
   * @param  {query} input search queries
   * @param  {searchKeys} Array of acceptable search keys
   * @param  {searchKeysToObjectKeyMap} map of searchKeys to object keys
   * @return {Object} regexes based on query and keys
   */


  function filterQueries(query, searchKeys, searchKeysToObjectKeyMap) {
    var tokens = tokenizeQuery(query, searchKeys);
    var containsTextRegex = tokens.filter(function (token) {
      return token.key === undefined && !token.isNegate;
    }).map(function (token) {
      return RegExpEscape(token.q);
    }).join('|');
    var notcontainsTextRegex = tokens.filter(function (token) {
      return token.key === undefined && token.isNegate;
    }).map(function (token) {
      return RegExpEscape(token.q);
    }).join('|');
    var containsKeyRegexs = tokens.filter(function (token) {
      return token.key !== undefined && !token.isNegate;
    }).map(function (token) {
      return {
        key: searchKeysToObjectKeyMap[token.key],
        regex: new RegExp(RegExpEscape(token.q), 'i')
      };
    });
    var notContainsKeyRegexs = tokens.filter(function (token) {
      return token.key !== undefined && token.isNegate;
    }).map(function (token) {
      return {
        key: searchKeysToObjectKeyMap[token.key],
        regex: new RegExp(RegExpEscape(token.q), 'i')
      };
    });
    return {
      textSearch: containsTextRegex ? new RegExp(containsTextRegex, 'i') : undefined,
      textSearchNegate: notcontainsTextRegex ? new RegExp(notcontainsTextRegex, 'i') : undefined,
      keySearch: containsKeyRegexs,
      keySearchNegate: notContainsKeyRegexs
    };
  }
  /**
   * Test the value against the regex. It automatically detects type of value (Array or String) and performs apropriate test
   * @param  {value} String or Array to test the regex in
   * @param  {regex} RegExp to test with
   * @return {Boolean} True if regex matched the value
   */


  function test(value, regex) {
    if (Array.isArray(value)) {
      return value.find(function (item) {
        return regex.test(item);
      }) !== undefined;
    } else {
      return regex.test(value);
    }
  }

  var JsonSearch = /*#__PURE__*/function () {
    function JsonSearch(jsonArray) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, JsonSearch);

      this.jsonArray = jsonArray;
      this.indice = options.indice || {};
      if (this.jsonArray.length <= 0) return;
      if (Object.keys(this.indice).length > 0) return;
      this.setKeys(jsonArray[0]);
    }

    _createClass(JsonSearch, [{
      key: "setKeys",
      value: function setKeys(item) {
        for (var o in item) {
          if (typeof item[o] === 'string') this.indice[o] = o;
          if (Array.isArray(item[o])) this.indice[o] = o;
        }
      }
    }, {
      key: "filterFunc",
      value: function filterFunc(query) {
        var _this = this;

        if (!query) return function () {
          return true;
        }; // search index keys

        var searchKeys = Object.keys(this.indice);
        var queryFuncs = filterQueries(query, searchKeys, this.indice);
        return function (item) {
          var itemMatched = true;
          var keyFound;
          var negatedKeywordNotFound = true; // here i have combined two separate for{} blocks for optimization purpose
          // ideally, we should have a for{} block for testing normal search and
          // another for{} block for negated search block (like what we have for indexed search)
          // but I used different variables to do both searches in one for block

          for (var _i = 0, _Object$entries = Object.entries(_this.indice); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                objectKey = _Object$entries$_i[1];

            var value = item[objectKey];

            if (queryFuncs.textSearchNegate) {
              negatedKeywordNotFound = negatedKeywordNotFound && !test(value, queryFuncs.textSearchNegate);
            }

            if (!negatedKeywordNotFound) return false;

            if (queryFuncs.textSearch) {
              keyFound = keyFound || test(value, queryFuncs.textSearch);
            }
          }

          if (keyFound === false) return false; // find indexed search

          var _iterator = _createForOfIteratorHelper(queryFuncs.keySearch),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _step$value = _step.value,
                  key = _step$value.key,
                  regex = _step$value.regex;
              var _value = item[key];
              itemMatched = itemMatched && test(_value, regex);
              if (!itemMatched) return false;
            } // find negated indexed search

          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          var _iterator2 = _createForOfIteratorHelper(queryFuncs.keySearchNegate),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _step2$value = _step2.value,
                  _key = _step2$value.key,
                  _regex = _step2$value.regex;
              var _value2 = item[_key];
              itemMatched = itemMatched && !test(_value2, _regex);
              if (!itemMatched) return false;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          return itemMatched;
        };
      }
      /**
       * Search the jsonArray for the query and returns array of found objects
       * @param  {q} query string
       * @return {Array} array of found objects
       */

    }, {
      key: "query",
      value: function query(q) {
        return this.jsonArray.filter(this.filterFunc(q));
      }
    }]);

    return JsonSearch;
  }();

  return JsonSearch;

})();
//# sourceMappingURL=JsonSearch.js.map
