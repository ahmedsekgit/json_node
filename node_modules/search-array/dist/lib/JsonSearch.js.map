{"version":3,"file":"JsonSearch.js","sources":["../../src/QueryTokenizer.js","../../src/JsonSearch.js"],"sourcesContent":["export default function tokenizeQuery (query, keys) {\r\n  const tokens = []\r\n  /* inspired by https://stackoverflow.com/a/366532/3559463\r\n   * regex named groups:\r\n   *   n: captures negate (symbol - exists or not)\r\n   *   q: captures actual query (exlcuding ' or \")\r\n   *        capture groups 4 and 5 also capture the query\r\n   *   k: captures searched key (in queries like key:something)\r\n   */\r\n  const searchTokenRegex = new RegExp(`(?<n>-)?(?:(?<k>${keys.join('|')}):)?(?<q>\"([^\"]*)\"|'([^']*)'|[^\\\\s\"']+)`, 'ig')\r\n\r\n  let token\r\n  while ((token = searchTokenRegex.exec(query)) !== null) {\r\n    const q = token[5] || token[4] || token.groups.q\r\n    const key = token.groups.k\r\n    const isNegate = token.groups.n !== undefined\r\n    tokens.push({ q, key, isNegate })\r\n  }\r\n  return tokens\r\n}\n","/**\n * JsonSearch - https://www.npmjs.com/package/search-array\n * @license MIT\n */\nimport tokenizeQuery from './QueryTokenizer.js'\n\n/**\n * Escape regex special characters in srting\n * @param  {string} input string\n * @return {String} escpaed string\n */\nfunction RegExpEscape (string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n}\n\n/**\n * Escape regex special characters in srting\n * @param  {query} input search queries\n * @param  {searchKeys} Array of acceptable search keys\n * @param  {searchKeysToObjectKeyMap} map of searchKeys to object keys\n * @return {Object} regexes based on query and keys\n */\nfunction filterQueries (query, searchKeys, searchKeysToObjectKeyMap) {\n  const tokens = tokenizeQuery(query, searchKeys)\n\n  const containsTextRegex = tokens.filter(token => token.key === undefined && !token.isNegate).map(token => RegExpEscape(token.q)).join('|')\n  const notcontainsTextRegex = tokens.filter(token => token.key === undefined && token.isNegate).map(token => RegExpEscape(token.q)).join('|')\n  const containsKeyRegexs = tokens.filter(token => token.key !== undefined && !token.isNegate).map(token => { return { key: searchKeysToObjectKeyMap[token.key], regex: new RegExp(RegExpEscape(token.q), 'i') } })\n  const notContainsKeyRegexs = tokens.filter(token => token.key !== undefined && token.isNegate).map(token => { return { key: searchKeysToObjectKeyMap[token.key], regex: new RegExp(RegExpEscape(token.q), 'i') } })\n\n  return {\n    textSearch: containsTextRegex ? new RegExp(containsTextRegex, 'i') : undefined,\n    textSearchNegate: notcontainsTextRegex ? new RegExp(notcontainsTextRegex, 'i') : undefined,\n    keySearch: containsKeyRegexs,\n    keySearchNegate: notContainsKeyRegexs\n  }\n}\n\n/**\n * Test the value against the regex. It automatically detects type of value (Array or String) and performs apropriate test\n * @param  {value} String or Array to test the regex in\n * @param  {regex} RegExp to test with\n * @return {Boolean} True if regex matched the value\n */\nfunction test (value, regex) {\n  if (Array.isArray(value)) { return (value.find(item => regex.test(item)) !== undefined) } else { return regex.test(value) }\n}\n\nexport default class JsonSearch {\n  constructor (jsonArray, options = {}) {\n    this.jsonArray = jsonArray\n    this.indice = options.indice || {}\n    if (this.jsonArray.length <= 0) return\n    if (Object.keys(this.indice).length > 0) return\n    this.setKeys(jsonArray[0])\n  }\n\n  setKeys (item) {\n    for (const o in item) {\n      if (typeof item[o] === 'string') this.indice[o] = o\n      if (Array.isArray(item[o])) this.indice[o] = o\n    }\n  }\n\n  filterFunc (query) {\n    if (!query) return () => true\n\n    // search index keys\n    const searchKeys = Object.keys(this.indice)\n    const queryFuncs = filterQueries(query, searchKeys, this.indice)\n    return item => {\n      let itemMatched = true\n      let keyFound\n\n      let negatedKeywordNotFound = true\n      // here i have combined two separate for{} blocks for optimization purpose\n      // ideally, we should have a for{} block for testing normal search and\n      // another for{} block for negated search block (like what we have for indexed search)\n      // but I used different variables to do both searches in one for block\n      for (const [, objectKey] of Object.entries(this.indice)) {\n        const value = item[objectKey]\n\n        if (queryFuncs.textSearchNegate) {\n          negatedKeywordNotFound = negatedKeywordNotFound && !test(value, queryFuncs.textSearchNegate)\n        }\n        if (!negatedKeywordNotFound) return false\n\n        if (queryFuncs.textSearch) {\n          keyFound = keyFound || test(value, queryFuncs.textSearch)\n        }\n      }\n      if (keyFound === false) return false\n\n      // find indexed search\n      for (const { key, regex } of queryFuncs.keySearch) {\n        const value = item[key]\n        itemMatched = itemMatched && test(value, regex)\n        if (!itemMatched) return false\n      }\n      // find negated indexed search\n      for (const { key, regex } of queryFuncs.keySearchNegate) {\n        const value = item[key]\n        itemMatched = itemMatched && !test(value, regex)\n        if (!itemMatched) return false\n      }\n\n      return itemMatched\n    }\n  }\n\n  /**\n   * Search the jsonArray for the query and returns array of found objects\n   * @param  {q} query string\n   * @return {Array} array of found objects\n   */\n  query (q) {\n    return this.jsonArray.filter(this.filterFunc(q))\n  }\n}\n"],"names":["tokenizeQuery","query","keys","tokens","searchTokenRegex","RegExp","join","token","exec","q","groups","key","k","isNegate","n","undefined","push","RegExpEscape","string","replace","filterQueries","searchKeys","searchKeysToObjectKeyMap","containsTextRegex","filter","map","notcontainsTextRegex","containsKeyRegexs","regex","notContainsKeyRegexs","textSearch","textSearchNegate","keySearch","keySearchNegate","test","value","Array","isArray","find","item","JsonSearch","jsonArray","options","indice","length","Object","setKeys","o","queryFuncs","itemMatched","keyFound","negatedKeywordNotFound","entries","objectKey","filterFunc"],"mappings":"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"}