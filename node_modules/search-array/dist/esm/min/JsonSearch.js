/**
 * JsonSearch - https://www.npmjs.com/package/search-array
 * @license MIT
 */
import tokenizeQuery from"./QueryTokenizer.js";function RegExpEscape(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}function filterQueries(e,t,r){const i=tokenizeQuery(e,t);var s=i.filter(e=>void 0===e.key&&!e.isNegate).map(e=>RegExpEscape(e.q)).join("|"),n=i.filter(e=>void 0===e.key&&e.isNegate).map(e=>RegExpEscape(e.q)).join("|"),e=i.filter(e=>void 0!==e.key&&!e.isNegate).map(e=>({key:r[e.key],regex:new RegExp(RegExpEscape(e.q),"i")})),t=i.filter(e=>void 0!==e.key&&e.isNegate).map(e=>({key:r[e.key],regex:new RegExp(RegExpEscape(e.q),"i")}));return{textSearch:s?new RegExp(s,"i"):void 0,textSearchNegate:n?new RegExp(n,"i"):void 0,keySearch:e,keySearchNegate:t}}function test(e,t){return Array.isArray(e)?void 0!==e.find(e=>t.test(e)):t.test(e)}export default class JsonSearch{constructor(e,t={}){this.jsonArray=e,this.indice=t.indice||{},this.jsonArray.length<=0||0<Object.keys(this.indice).length||this.setKeys(e[0])}setKeys(e){for(const t in e)"string"==typeof e[t]&&(this.indice[t]=t),Array.isArray(e[t])&&(this.indice[t]=t)}filterFunc(e){if(!e)return()=>!0;const y=filterQueries(e,Object.keys(this.indice),this.indice);return e=>{let t=!0,r,i=!0;for(var[,s]of Object.entries(this.indice)){s=e[s];if(y.textSearchNegate&&(i=i&&!test(s,y.textSearchNegate)),!i)return!1;y.textSearch&&(r=r||test(s,y.textSearch))}if(!1===r)return!1;for(var{key:n,regex:a}of y.keySearch){n=e[n];if(t=t&&test(n,a),!t)return!1}for(var{key:c,regex:o}of y.keySearchNegate){c=e[c];if(t=t&&!test(c,o),!t)return!1}return t}}query(e){return this.jsonArray.filter(this.filterFunc(e))}}