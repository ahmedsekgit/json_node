============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 1
============================================================
file: bkp-helper.js
============================================================
content: var fs = require('fs');
var path = require('path');
const util = require('util');
var beautify = require('beautify');
var db = require('../database');
var config = require('./../config');
const mysql = require("mysql");
const createCsvWriter = require("csv-writer").createObjectCsvWriter;
const Json2csvParser = require("json2csv").Parser;

const exec = util.promisify(require('child_process').exec);
const {
    execSync
} = require("child_process");

var chalk = require('chalk');
const log = console.log;

const fse = require('fs-extra');

var srcDir = '/db_bkps/';
var destDir = '/home/sea/the_db_news_bkp/';

var arr_schema = ['id', 'keyword', 'link', 'title', 'description', 'reg_date'];
var dir_store = './db_bkps/json/';

module.exports = {
     tryDbBkp:function(app_homedir) {
    try {
        console.log(chalk.yellow('********* starting bkp-helper tryDbBkp:function(app_homedir) *********'));
        var str_bkp = `mysqldump -u${config.database.user}  -p${config.database.password}  ${config.database.db} > ./db_bkps/bkp_${config.database.db}_${config.database.table}.sql`;
        log(chalk.yellow(" trying to backup ... :" + str_bkp));
        console.log(chalk.yellow('app_homedir'));
        console.log(chalk.yellow(app_homedir));

        execSync(str_bkp);
        
          var sql = `SELECT * FROM ${config.database.db}.${config.database.table}`;
            db.query(sql, function(err, data, fields) {
            if (err) throw err;
           
            const jsonData = JSON.parse(JSON.stringify(data));
      

            const json2csvParser = new Json2csvParser({ header: true});
            const csv = json2csvParser.parse(jsonData);

             var new_file_name = `bkp_${config.database.db}_${config.database.table}.json`;

              var txt = JSON.stringify(data, null, 2);

              try {
                  fs.writeFileSync(dir_store + new_file_name, txt, 'utf-8');
              } catch (err) {
                  if (err.code === 'ENOENT') {
                      console.log('File not found!');
                  } else {
                      fs.appendFileSync(dir_store + new_file_name + '__LOG__ERR__.txt', err);
                      return true;
                  }
              }

            fs.writeFile(`${app_homedir}/db_bkps/CSVs/bkp_${config.database.db}_${config.database.table}.csv`, csv, function(error) {
              if (error) throw error;
              /*console.log("Write to bezkoder_mysql_fs.csv successfully!");*/
              console.log(`Write to /db_bkps/CSVs/bkp_${config.database.db}_${config.database.table}.csv successfully!`);
            });
          });
          
        // To copy a folder or file

        srcDir = app_homedir + srcDir;
        log(chalk.yellow(srcDir));
        log(chalk.yellow(destDir));
        fse.copySync(srcDir, destDir, 
        {
            overwrite: true
        }, 
        function(err) 
        {
            if (err) 
            {
                console.error(err);
            } 
            else 
            {
                log(chalk.yellow("success copyin db bkps to /home/sea/the_db_news_bkp!"));
            }
        });

    } 
    catch (err)
    {
        console.error(err);
    }
        console.log(chalk.yellow('********* Ending bkp-helper tryDbBkp:function(app_homedir) *********'));

},

  unset_key_value:function(arr_objs, key) {
      var arrOutputTmp = new Array();

      arr_objs.forEach(function(data) {
          delete data[key];
          arrOutputTmp.push(data);
      });
      return arrOutputTmp;
  },
  cachingData_test_001: function(table,create=0) 
  {
    return 'bla bla bla';
  },

  cachingData: function(table,create=0) 
  {
        var arrOutput = new Array();
        var new_file_name = `bkp_${config.database.db}_${table}.json`;
  
        fileObjs = fs.readdirSync(dir_store, { withFileTypes: true });

            //listing all files using forEach
            fileObjs.forEach(function(fileObj) 
            {
                file = fileObj.name;
                // Do whatever you want to do with the file
                if (file == new_file_name) 
                {
                    const readFileLines = filename =>
                        fs.readFileSync(filename)
                        .toString('UTF8');

                    file_content = readFileLines(dir_store + '/' + file);

                    arrOutput = JSON.parse(file_content);

                        if(create == 1)
                        {
                            if (typeof file_content != 'undefined' &&
                                file_content != '' &&
                                file_content != null) 
                            {
                                /*creation temporary table for tests*/
                                tsModel.table.createTable(table,function(returned_data) 
                                {
                                    console.log(chalk.yellow('tsModel.table.createTable'));
                                    console.log('returned_data');
                                    console.dir(returned_data);

                                });
                                /*storing table data in database*/
                                let array = new Array();

                                array = unset_key_value(arrOutput, 'reg_date');

                                array = arrOutput.map(obj => Object.values(obj));

                                tsModel.table.createData(config.database.table, array, function(err, returned_data) 
                                {
                                    if (err) throw err;

                                    log(chalk.yellow(returned_data.affectedRows + " record created"));



                                });

                              }

                        }/*else*/

                }/*file == new_file_name*/
            });/*files.forEach(function(file) */
            return arrOutput;
       
    }/*cachingData: function*/
}


============================================================


============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 2
============================================================
file: expo_2.js
============================================================
content: const mysql = require("mysql");
const createCsvWriter = require("csv-writer").createObjectCsvWriter;

// Create a connection to the database
const connection = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "123",
  database: "db_test"
});

// open the MySQL connection
connection.connect(error => {
  if (error) throw error;

  // query data from MySQL
  connection.query("SELECT * FROM general_test", function(error, data, fields) {
    if (error) throw error;

    const jsonData = JSON.parse(JSON.stringify(data));
    console.log("jsonData", jsonData);

    const csvWriter = createCsvWriter({
      path: "bezkoder_mysql_csvWriter.csv",
      header: [
        { id: "id", title: "id" },
        { id: "keyword", title: "keyword" },
        { id: "link", title: "link" },
        { id: "title", title: "title" },
        { id: "description", title: "description" },
        { id: "reg_date", title: "reg_date" }
      ]
    });

    csvWriter
      .writeRecords(jsonData)
      .then(() =>
        console.log("Write to bezkoder_mysql_csvWriter.csv successfully!")
      );
  });
});

============================================================


============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 3
============================================================
file: expo_3.js
============================================================
content: const mysql = require("mysql");
const Json2csvParser = require("json2csv").Parser;
const fs = require("fs");

// Create a connection to the database
const connection = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "123",
  database: "db_test"
});

// open the MySQL connection
connection.connect(error => {
  if (error) throw error;

  // query data from MySQL
  connection.query("SELECT * FROM general_test", function(error, data, fields) {
    if (error) throw error;

    const jsonData = JSON.parse(JSON.stringify(data));
    console.log("jsonData", jsonData);

    const json2csvParser = new Json2csvParser({ header: true});
    const csv = json2csvParser.parse(jsonData);

    fs.writeFile("bezkoder_mysql_fs.csv", csv, function(error) {
      if (error) throw error;
      console.log("Write to bezkoder_mysql_fs.csv successfully!");
    });
  });
});

============================================================


============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 4
============================================================
file: export_to_json_to_csv_sample.js
============================================================
content: const mysql = require("mysql");
const fastcsv = require("fast-csv");
const fs = require("fs");
const ws = fs.createWriteStream("bezkoder_mysql_fastcsv.csv");

// Create a connection to the database
const connection = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "123",
  database: "db_test"
});

// open the MySQL connection
connection.connect(error => {
  if (error) throw error;

  // query data from MySQL
  connection.query("SELECT * FROM general_test", function(error, data, fields) {
    if (error) throw error;

    const jsonData = JSON.parse(JSON.stringify(data));
    console.log("jsonData", jsonData);

    fastcsv
      .write(jsonData, { headers: true })
      .on("finish", function() {
        console.log("Write to bezkoder_mysql_fastcsv.csv successfully!");
      })
      .pipe(ws);
  });
});

============================================================


============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 5
============================================================
file: image-middleware.js
============================================================
content: var multer = require('multer');

module.exports.image={
    storage:function(){
        var storage = multer.diskStorage({
        destination: function (req, file, cb) {
          cb(null, 'public/images/')
        },
        filename: function (req, file, cb) {
            cb(null, file.originalname)
        }
      })
      return storage;
},
allowedImage:function(req, file, cb) {
    // Accept images only
    if (!file.originalname.match(/\.(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)) {
        req.fileValidationError = 'Only image files are allowed!';
        return cb(new Error('Only image files are allowed!'), false);
    }
    cb(null, true);
}}
============================================================


============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 6
============================================================
file: ts-helper-controller.js
============================================================
content: var fs = require('fs');
var path = require('path');
const util = require('util');
var beautify = require('beautify');
const Json2csvParser = require("json2csv").Parser;
const createCsvWriter = require("csv-writer").createObjectCsvWriter;
var tsModel = require('./ts-helper-model');
var config = require('./../config');
var chalk = require('chalk');
const log = console.log;

var arr_schema = ['id', 'keyword', 'link', 'title', 'description', 'reg_date'];
var dir_store = './db_bkps/json/';

function unset_key_value(arr_objs, key) {
    var arrOutputTmp = new Array();

    arr_objs.forEach(function(data) {
        delete data[key];
        arrOutputTmp.push(data);
    });
    return arrOutputTmp;
}

module.exports.table = {
    displayTest:function(text) {
        // display text as test
        console.log(chalk.yellow(' displayTest:function(text) ts-helper'));
        console.log('text');
        console.dir(text);
        return 1;

    },
     cleanText:function(text) {
        // clean it and return
    },

    isWithinRange(text, min, max) {
        // check if text is between min and max length
    },

    readData :function(table) {

        tsModel.table.readData(function(table,tsdata) 
            {
                console.log('tsModel.table.readData(function(table,tsdata)');
                tsdata.forEach(function(data) {
                    console.dir(data);

                });
            });
    },
    storeData: function(table) {
        var arrOutput = new Array();
        tsModel.table.readData(function(table, returned_data) 
        {
            console.log('tsModel.table.storeData(function(data)');
            returned_data.forEach(function(data) 
            {
                var objTemp = new Object();
                objTemp.id = null;
                objTemp.keyword = null;
                objTemp.link = null;
                objTemp.title = null;
                objTemp.description = null;
                objTemp.reg_date = null;
                for (let key in data) 
                {
                    if (arr_schema.includes(key)) 
                    {
                        objTemp[key] = data[key];
                    }
                }

                arrOutput.push(objTemp);

            });
            var new_file_name = `bkp_${config.database.db}_${config.database.table}.json`;

            var txt = JSON.stringify(arrOutput, null, 2);

            try {
                fs.writeFileSync(dir_store + new_file_name, txt, 'utf-8');
            } catch (err) {
                if (err.code === 'ENOENT') {
                    console.log('File not found!');
                } else {
                    fs.appendFileSync(dir_store + new_file_name + '__LOG__ERR__.txt', err);
                    return true;
                }
            }

        });

    },
    checkData: function(table,create=0) {
        var arrOutput = new Array();
        var new_file_name = `bkp_${config.database.db}_${table}.json`;

        fs.readdir(dir_store, function(err, files) {
            //handling error
            if (err) {
                return console.log('Unable to scan directory: ' + err);
            }
            //listing all files using forEach
            files.forEach(function(file) {
                // Do whatever you want to do with the file
                if (file == new_file_name) {
                    const readFileLines = filename =>
                        fs.readFileSync(filename)
                        .toString('UTF8');

                    file_content = readFileLines(dir_store + '/' + file);
                        if(create)
                        {
                            if (typeof file_content != 'undefined' &&
                                file_content != '' &&
                                file_content != null) {
                                /*creation temporary table for tests*/
                                tsModel.table.createTable(table,function(returned_data) {
                                    console.log(chalk.yellow('tsModel.table.createTable'));
                                    console.log('returned_data');
                                    console.dir(returned_data);

                                });
                        }


                        arrOutput = JSON.parse(file_content);
                        let array = new Array();
                        array = unset_key_value(arrOutput, 'reg_date');
                        array = arrOutput.map(obj => Object.values(obj));
                        console.log(chalk.yellow('----------array checkData ----------'));
                        tsModel.table.createData(config.database.table, array, function(err, returned_data) {
                            if (err) throw err;
                            console.log(chalk.yellow('returned_data.insertId ' + returned_data.insertId));

                            log(chalk.yellow(returned_data.affectedRows + " record created"));
                            console.log('returned_data');
                            console.dir(returned_data);


                        });

                    }

                }
            });
        });
    }
}
============================================================


============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 7
============================================================
file: ts-helper-model.js
============================================================
content: var db = require('../database');
var config = require('./../config');


module.exports.table = {
    readData: function(table, callback) {
        var sql = `SELECT * FROM ${config.database.db}.${table}`;
        db.query(sql, function(err, data, fields) {
            if (err) throw err;
            return callback(data);
        });
    },
    createData: function(proposal_t, inputData, callback) {

        //var sql = `INSERT INTO ${config.database.db}.${proposal_t} SET ?`;
        var sql = `INSERT INTO ${config.database.db}.${proposal_t} (id,keyword,link,title,description ) VALUES ?`;
        db.query(sql, [inputData], function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    },
    updateData: function(inputData, updateId, callback) {

        var sql = `UPDATE ${config.database.db}.${config.database.table} SET ? WHERE id= ?`;
        db.query(sql, [inputData, updateId], function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    },
    deleteData: function(deleteId, callback) {

       log(chalk.yellow('ts-model deleteData this Id is a deleted id :', deleteId)); 

        var sql = `DELETE FROM ${config.database.db}.${config.database.table} WHERE id = ?`;
        db.query(sql, [deleteId], function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    },
    createTable: function(table,callback) {
        let tmp_table = table;
        //var tmp_table = config.database.table;
        //var tmp_table = 'table_0001';
    var sql_create  = `CREATE TABLE ${tmp_table}(
                      id int unsigned NOT NULL AUTO_INCREMENT,
                      keyword text  NULL,
                      link text NULL,
                      title  text NULL,
                      description text NULL,
                      reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                      UNIQUE KEY id (id)
                  )`;
        db.query(sql_create, function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    },

} 
============================================================


============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 8
============================================================
file: upload.js
============================================================
content: const multer = require("multer");

const csvFilter = (req, file, cb) => {
  if (file.mimetype.includes("csv")) {
    cb(null, true);
  } else {
    cb("Please upload only csv file.", false);
  }
};

var storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, __basedir + "/extra/uploads/csvs/");
  },
  filename: (req, file, cb) => {
    console.log(file.originalname);
    cb(null, `${Date.now()}-bezkoder-${file.originalname}`);
  },
});

var uploadFile = multer({ storage: storage, fileFilter: csvFilter });
module.exports = uploadFile;

============================================================


============================================================
path : __home__sea__nodeapp_test__middlewares__
============================================================
============================================================
id: 9
============================================================
file: write_data_to_json_sample.js
============================================================
content: var fs = require('fs');

var data = {}
data.table = []
for (i=0; i <26 ; i++){
   var obj = {
       id: i,
       square: i * i
   }
   data.table.push(obj)
}
fs.writeFile ("input.json", JSON.stringify(data), function(err) {
    if (err) throw err;
    console.log('complete');
    }
);
============================================================


