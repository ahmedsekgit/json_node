============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 1
============================================================
file: create-model.js
============================================================
content: var db = require('../database');
var config = require('./../config');
module.exports = {
    createData: function(inputData, callback) {
        var sql = `INSERT INTO ${config.database.db}.${config.database.table} SET ?`;
        db.query(sql, inputData, function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    }
}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 2
============================================================
file: crud-model.js
============================================================
content: module.exports = {


    createCrud: function() {
        data = "Form data was inserted";
        return data;
    },
    fetchCrud: function() {
        data = "data was fetched";
        return data;
    },
    editCrud: function(editData) {
        data = "Data is edited by id: " + editData;
        return data;
    },
    UpdateCrud: function(updateId) {
        data = "Data was updated by id: " + updateId;
        return data;
    },
    deleteCrud: function(deleteId) {
        data = "Data was deleted by id: " + deleteId;
        return data;
    }
}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 3
============================================================
file: crud_mongo_model.js
============================================================
content: var mongoose = require('mongoose');
var db = require('../database_mongodb');

// create an schema
var userSchema = new mongoose.Schema({
    fullName: String,
    emailAddress: String,
    city: String,
    country: String
});

var schema = new mongoose.Schema(userSchema);

try {
    if (mongoose.model('users')) {
        var userTable = mongoose.model('users');
    }
} catch (e) {
    if (e.name === 'MissingSchemaError') {

        var userTable = mongoose.model('users', schema);
    }
}

module.exports = {
    createData: function(inputData, callback) {

        userData = new userTable(inputData);
        userData.save(function(err, data) {
            if (err) throw err;
            return callback(data);
        })

    },
    fetchData: function(callback) {
        var userData = userTable.find({});
        userData.exec(function(err, data) {
            if (err) throw err;
            return callback(data);
        })

    },
    editData: function(editId, callback) {
        var userData = userTable.findById(editId);
        userData.exec(function(err, data) {
            if (err) throw err;
            return callback(data);
        })
    },
    updateData: function(inputData, editId, callback) {

        userData = userTable.findByIdAndUpdate(editId, inputData);
        userData.exec(function(err, data) {
            if (err) throw err;
            return callback(data);
        })
    },
    deleteData: function(deleteId, callback) {

        userData = userTable.findByIdAndDelete(deleteId);
        userData.exec(function(err, data) {
            if (err) throw err;
            return callback(data);
        })
    }
}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 4
============================================================
file: delete-model.js
============================================================
content: var db = require('../database');
var config = require('./../config');
var  chalk  = require('chalk');
const log = console.log;

module.exports = {
    deleteData: function(deleteId, callback) {

       log(chalk.yellow('delete-model deleteData this Id is a deleted id :', deleteId)); 

        var sql = `DELETE FROM ${config.database.db}.${config.database.table} WHERE id = ?`;
        db.query(sql, [deleteId], function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    }
}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 5
============================================================
file: fetch-model.js
============================================================
content: var mongoose = require('mongoose');
var db = require('../database_mongodb');
var config = require('./../config');

// create an schema
var userSchema = new mongoose.Schema({
            id:String,
            keyword: String,
            link: String,
            title: String,
            description: String,
            reg_date : String
}, {
    collection: config.database.table
});

userTable=mongoose.model(config.database.table,userSchema);
        
module.exports={
     
     fetchData:function(callback){
        var userData=userTable.find({});
        console.log('********fetchData userTable_fetch fech model *****');

        userData.exec(function(err, data){
            if(err) throw err;
            return callback(data);
        })
        
     }
}
/*=============================================================0*/
/*=============================================================0*/
/*=============================================================0*/
/*=============================================================0*/
/*=============================================================0*/

// create an schema
/*
var userSchema = new mongoose.Schema({
    full_name: String,
    email_address: String,
    city: String,
    country: String
});
var schema = new mongoose.Schema(userSchema);

try {
    if (mongoose.model('users')) {
        var userTable_fetch = mongoose.model('users');
    }
} catch (e) {
    if (e.name === 'MissingSchemaError') {

        var userTable_fetch = mongoose.model('users', schema);
    }
}

module.exports = {

    fetchData: function(callback) {
        var userData = userTable_fetch.find({});
        userData.exec(function(err, data) {
            if (err) throw err;
            return callback(data);
        });

    }
}
*/
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 6
============================================================
file: file-model.js
============================================================
content: var db = require('../database');
var config = require('./../config');
var  chalk  = require('chalk');
const log = console.log;

function storeData(data) {
    var sql = `insert into ${config.database.db}.${config.database.table}(title,description) values ('` + data.title + "','" + data.description + "');";
    return db.query(sql, (err, result) => {
        if (err) throw err;
        if (result) {
            console.log(data.title + "-" + data.description + "-" + data.id);
        }
        return result.insertId;
    });

}

function updateData(data) {
    var sql = `update ${config.database.db}.${config.database.table} set ${config.database.db}.${config.database.table}.title='` + data.title + `', ${config.database.db}.${config.database.table}.description = '` + data.description + `' where ${config.database.db}.${config.database.table}.id = ` + data.id + ";";
    return db.query(sql, function(err, result) {
        if (err) throw err;
        if (result) {
            data.id = result.insertId;
            console.log(data.title + "-" + data.description + "-" + data.id);

        }
        return result.changedRows;
    });
}


module.exports = {
    readData: function(callback) {
        var sql = `SELECT * FROM ${config.database.db}.${config.database.table}`;
        db.query(sql, function(err, data, fields) {
            if (err) throw err;
            return callback(data);
        });
    },
    storeData: function(inputData, callback) {
        console.log('inputData');
        
        log(chalk.yellow('file-model storeData inputData :'));
        log(chalk.yellow(inputData));

        var sql = `INSERT INTO ${config.database.db}.${config.database.table} SET ?`;
        db.query(sql, inputData, function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    }

}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 7
============================================================
file: image-model.js
============================================================
content: var db = require('../database');

module.exports = {
    storeImage: function(inputValues, callback) {

        // check unique email address
        var sql = 'SELECT * FROM images WHERE image_name =?';
        db.query(sql, inputValues.image_name, function(err, data, fields) {
            if (err) throw err
            if (data.length > 1) {
                var msg = inputValues.image_name + " is already exist";
            } else {
                // save users data into database
                var sql = 'INSERT INTO images SET ?';
                db.query(sql, inputValues, function(err, data) {
                    if (err) throw err;
                });
                var msg = inputValues.image_name + "is uploaded successfully";
            }
            return callback(msg)
        })
    },
    displayImage: function(callback) {
        // check unique email address
        var sql = 'SELECT image_name FROM images';
        db.query(sql, function(err, data, fields) {
            if (err) throw err
            return callback(data);
        })
    }
}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 8
============================================================
file: js_arr_objs.js
============================================================
content: /*
arr_from_obj(obj) return arrObj with obj

add_obj_to_arr(myArray, new_obj) return sorted arrObj + newobj

arrObj_dupKey(myArray, obj, key) return 1 if dup key else 0

updateByKey(myArray,key,value,obj) return array if find o.key == value > update value

_updateObjByObj(srcObj, targetObj) return resObj target val receive src val if same keys

updateObjByObj(srcObj, targetObj)return resObj target val receive src val if same keys

readAll(myArray) console.log(Object.entries(myArray[each item])

readByKey(myArray,key,value) retrun return myArray[objIndex] if findindex if o.key == value

removeByKey(myArray,key,value) return myArray after remove Obj index if o.key == value

sortByKey(myArray, key) retur sorted myArray by given key

filterObjects(array, { keys, values }) return resArray 
    example : 
    const arr = [
    { a: 34, b: 2 },
    { b: 1 },
    { c: 34 },
    { a: 'c', d: 45 }
]

const filteredByValue = objarr.filterObjects(arr, { values: [45] }) 
// [ { a: 'c', d: 45 } ]
const filteredByKey = objarr.filterObjects(arr, { keys: ['a'] }) 
// [ { a: 34, b: 2 }, { a: 'c', d: 45 } ]
const filteredByKeyAndValue = objarr.filterObjects(arr, { keys: ['a'], values: [34] }) 
// [ { a: 34, b: 2 } ]

getObjValueByKey(array, key) 

    example:
    const arr = [
    {name:'Anna',age: 20},
    {name:'Jim',age: 60},
    {name:'Daniel'},
    {name:'Anait',age: 16},
    {name:'Diana',age: 30},
]

const namesArray = objarr.getObjValueByKey(arr, 'name') 
// [ 'Anna', 'Jim', 'Daniel', 'Anait', 'Diana' ]
const agesArray = objarr.getObjValueByKey(arr, 'age') 
// [ 20, 60, 16, 30 ]
};
 
removeMatches(array)

    example
    const arr = [
    { a: null, helloStr: 'hello world' },
    {},
    { a: 34 },
    {},
    { a: null, helloStr: 'hello world' },
    { a: 34 }
]

const uniqueArray = objarr.removeMatches(arr) 
// [ { a: null, helloStr: 'hello world' }, {}, { a: 34 } ]

sortedByKey(array, key, sortMode = 0)
const sortedByName = objarr.sortedByKey(arr,'name')
// [
//     { name: 'Anait', age: 16 },
//     { name: 'Anna', age: 20 }, 
//     { name: 'Daniel' },        
//     { name: 'Diana', age: 30 },
//     { name: 'Jim', age: 60 }
// ]
const sortAscending = objarr.sortedByKey(arr,'age',1)

// [
//     { name: 'Anait', age: 16 },
//     { name: 'Anna', age: 20 },
//     { name: 'Diana', age: 30 },
//     { name: 'Jim', age: 60 }
// ]

const sortDescending = objarr.sortedByKey(arr,'age',-1)

// [
//     { name: 'Jim', age: 60 },
//     { name: 'Diana', age: 30 },
//     { name: 'Anna', age: 20 },
//     { name: 'Anait', age: 16 }
// ]

*/
module.exports = {
    ObjByObjArrObj:function(myArray,key,val,objSrc)
    {
      
        try 
        {
            myArray.forEach( function(elObj, index) {
                if (elObj[key] == val) 
                {
                    let ObjT = module.exports.updateObjByObj(objSrc,elObj);
                    myArray[index] = ObjT;
                    throw 'Break';
                }
                });
        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }
       
        return myArray ;

    },
    ArrHasObj:function(myArray,key,val)
    {
        if(myArray.some(o => o[key] == val))
        {
            return true;
        } 
        else
        {
            return false;
        }
    },
    arr_from_obj: function(obj) {
        let keyValues = Object.entries(obj); //convert object to keyValues ["key1", "value1"] ["key2", "value2"]

        //splice(index, how match i have to remove at index, array)
        keyValues.splice(0, 0, ["id", 1]); // insert key value at the index you want like 0.
        let newObj = Object.fromEntries(keyValues) // convert key values to obj {key1: "value1", newKey: "newValue", key2: "value2"}
        
        let tmp_arr = Array.from([newObj]);
        /*
        	obj = Object.assign({ id: 1 }, obj);
          	let tmp_arr = Array.from([obj]);
        	console.log(Array.isArray(tmp_arr));
    	*/
        return tmp_arr;
    },

    add_obj_to_arr: function(myArray, new_obj) 
    {
        var max_id = Math.max.apply(Math, myArray.map(function(obj) {
            return obj.id;
        }));
        //console.log("Finding max id: ", max_id);
        new_obj = Object.assign({
            id: max_id + 1
        }, new_obj);
        myArray.push(new_obj);
        myArray = module.exports.sortedByKey(myArray,"id",1);
        return myArray;
    },
    add_obj_to_arr_node: function(myArray, new_obj) 
    {
        var retResult = [];
        var max_id = Math.max.apply(Math, myArray.map(function(obj) {
            return obj.id;
        }));
        //console.log("Finding max id: ", max_id);
        new_obj = Object.assign({
            id: max_id + 1
        }, new_obj);
        myArray.push(new_obj);
        retResult["insertObj"] = new_obj;
        myArray = module.exports.sortedByKey(myArray,"id",1);
        retResult["records"] = myArray;
        return retResult;
    },
    arrObj_dupKey: function(myArray, obj, key)
    {
        const arrayOfObjCopy = [...myArray];    
        arrayOfObjCopy.push(obj);
        unique = [...new Set(arrayOfObjCopy.map(o => o[key]))];
        if(unique.length ==  arrayOfObjCopy.length)
        {
            return 0;
        }
        else
        {
            return 1;
        }
    },

    updateByKey:function(myArray,key,value,obj)
    {
    	//Find index of specific object using findIndex method.    
    	objIndex = myArray.findIndex((o => o[key] == value));
    	let obj_tmp = {};
    		obj_tmp[key] = value;
    	obj = Object.assign(obj_tmp, obj);
    	myArray[objIndex] = obj;

    	return myArray = module.exports.sortedByKey(myArray,"id",1);
    },

    updateObjByObjhas:function(srcObj, targetObj) {
      const resObj = {};
      Object.keys(targetObj)
            .forEach(k => resObj[k] = (srcObj.hasOwnProperty(k) ? srcObj[k] : targetObj[k]));
      return resObj;
    },

    updateObjByObj:function(srcObj, targetObj) {
      const resObj = {};
      Object.keys(targetObj)
            .forEach(k => resObj[k] = (srcObj[k] ?? targetObj[k]));
      return resObj;
    },

    readAll:function(myArray)
    {
    	myArray.forEach(function (arrayItem) {
    	//var x = arrayItem.prop1 + 2;
    	console.log(Object.entries(arrayItem))
    	//console.log(arrayItem);
		});

    },

    readByKey:function(myArray,key,val)
    {
        var resObj = {};
    	try 
        {
            myArray.forEach( function(elObj, index) {

                if (elObj[key] == val) 
                {
                    resObj = elObj;
                    throw 'Break';
                }
                });
        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }
       return resObj;
    },

    removeByKey:function(myArray,key,value)
    {
        try 
        {
            myArray.forEach( function(elObj, index) 
            {
                if (elObj[key] == value) 
                {
                    myArray.splice(index, 1);
                    throw 'Break';
                }
            });
        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }
       
        return myArray ;
    },

    sortByKey:function(myArray, key) {
        myArray.sort(function(a, b) {
            var keyA = a[key],
                keyB = b[key];
            // Compare the 2 keys
            if (keyA < keyB) return -1;
            if (keyA > keyB) return 1;
            return 0;
        });
        return myArray;
    },

    filterObjects:function(array, { keys, values }) {
        const resArray = []
        if (!keys) {
            array.forEach((item) => {
                Object.keys(item).forEach((key) => {
                    values.forEach(value => {
                        if (item[key] === value) {
                            resArray.push(item)
                        }
                    });
                })
            })
            return resArray
        }

        array.forEach((item, i) => {
            keys.forEach(key => {
                if (item[key]) {
                    if (!values) {
                        return resArray.push(item)
                    }

                    values.forEach(value => {
                        if (item[key] === value) {
                            return resArray.push(item)
                        }
                    })
                }
            });
        })

        return resArray
    },

    getObjValueByKey:function(array, key) {
        const resArray = []

        array.forEach((item) => {
            Object.keys(item).forEach((itemKey) => {
                if (itemKey === key) {
                    resArray.push(item[itemKey])
                }
            })
        })

        return resArray
    },

    removeMatches:function(array) {
        const res = [...new Set(array.map(JSON.stringify))].map(JSON.parse);
        return res;
    },

    sortedByKey:function(array, key, sortMode = 0) {
        if (sortMode !== 0 && sortMode !== 1 && sortMode !== -1) {
            throw new Error('sortMode can only take values: 0, 1, -1')
        }

        const res = []

        array.forEach(item => {
            if (item[key]) {
                res.push(item)
            }
        });

        if (sortMode === 0) {
            res.sort(function (a, b) {
                if (a[key] > b[key]) {
                    return 1;
                }

                if (a[key] < b[key]) {
                    return -1;
                }

                return 0;
            })
        } else if (sortMode === 1) {
            res.sort((a, b) => a[key] - b[key])
        } else if (sortMode === -1) {
            res.sort((a, b) => b[key] - a[key])
        }

        return res
    }
};
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 9
============================================================
file: js_files.js
============================================================
content: const fs = require('fs');
var JSONStream = require('JSONStream');
var es = require('event-stream');
module.exports = {
    OverWriteFile(FilePath, StrData)
    { 
        fs.writeFileSync(FilePath, StrData);
    },

    AppendToFile(FilePath, StrData)
    {
         
        fs.appendFile(FilePath, StrData,function(err){
        if(err) throw err;
        });
        
    },
    ReadFileSync(FileName)
    {
        if (!(fs.existsSync(FileName))) 
        {
            console.log("ReadFileSync: "+FileName + " not found");
            return 0;
        }
        else
        {   
            let rawdata = fs.readFileSync(FileName);
            return rawdata;
            
        }
    },

    ArrObjFromFile: function(FileName) {
        if (!(fs.existsSync(FileName))) 
        {
            console.log("ArrObjFromFile: "+FileName + " not found");
            return 0;
        }
        else
        {   //console.log("ArrObjFromFile: getting arrObjs from "+FileName + " ");
            let tmp_arr = [];
            const rawdata = fs.readFileSync(FileName);
                   tmp_arr= JSON.parse(rawdata);
            return tmp_arr;
        }
    },

    ArrObjToFile: function(FileName, myArray) {
        fs.writeFileSync(FileName, JSON.stringify(myArray, null, 2), 'utf-8');
        
    },

    DeleteFile(FilePath)
    {
        if (!(fs.existsSync(FilePath))) 
        {
            //console.log("DeleteFile: "+FilePath +' not found!');
            return 0;
        }
        else
        {  
            fs.unlink(FilePath, function (err) {
              if (err) throw err;
              console.log("DeleteFile: "+FilePath +' deleted!');
            }); 
        }
    },
    
    CreateEmptyFile : function (FilePath) 
    {   
        if (!(fs.existsSync(FilePath))) 
        {
            // create an empty file
            fs.open(FilePath, 'w', (err, file) => {
                if (err) {
                    throw err;
                }             
            });
        }
        
    },

    CreateEmptyDirRec : function (FilePath) 
    {   
        if (!(fs.existsSync(FilePath))) 
        {
            fs.mkdirSync(FilePath, { recursive: true }, 0755);
        } 
        
    },
    
    AppendToFileArrObj(FilePath, StrData)
    {
        StrData = JSON.stringify(StrData, null, 2);
        fs.appendFile(FilePath, StrData,function(err){
        if(err) throw err;
        });
        
    },

    RenameFile(FileName, NewFileName)
    {
        if (!(fs.existsSync(FileName))) 
        {
            console.log("RenameFile: "+FileName + " not found");
            return 0;
        }
        else
        {  
            fs.rename(FileName, NewFileName, function (err) {
              if (err) throw err;
              console.log("RenameFile: "+FileName +' Renamed! to '+NewFileName);
            }); 
        }
    },

    ReadFileToString(FileName)
    {
        if (!(fs.existsSync(FileName))) 
        {
            console.log("ReadFileToString: "+FileName + " not found");
            return 0;
        }
        else
        {   
            return fs.readFileSync(FileName, 'utf8');
            
        }
    },
    
    RemoveDuplicInFile(FileName, Spliter)
    {
        if (!(fs.existsSync(FileName))) 
        {
            //console.log("RemoveDuplicInFile: "+FileName + " not found");
            return 0;
        }
        else
        {  
    
            let Str1 = this.ReadFileToString(FileName);
            let Arr1 = Str1.split(Spliter);
            let Arr2 = this.ArrUnique(Arr1);
            this.ArrObjToFile(FileName,Arr2);
        }
    },

    ArrUnique: function(myArray)
    {
       let uniqueArray = myArray.filter(function(elem, pos) {
                return myArray.indexOf(elem) == pos;
            });
       return uniqueArray;
    },

    FilegetStream: function(FileName)  
    {
        var getStream = function() {
            var jsonData = FileName,
                stream = fs.createReadStream(jsonData, {
                    encoding: 'utf8'
                }),
                parser = JSONStream.parse('*');
            return stream.pipe(parser);
        };

        getStream()
            .pipe(es.mapSync(function(data) {
                //console.dir("JSONStream");
                //console.dir(data);
            }));
    }, 

    FileExists: function(FilePath)
    {
        if (fs.existsSync(FilePath))
            return 1;
        else
            return 0;
    },

    rmDir : function(dirPath, removeSelf) 
    {
        try 
        {
            var files = fs.readdirSync(dirPath);
        } 
        catch (e) 
        {
            return;
        }
        if (files.length > 0)
            for (var i = 0; i < files.length; i++) 
            {
                var filePath = dirPath + '/' + files[i];
                if (fs.statSync(filePath).isFile())
                    fs.unlinkSync(filePath);
                else
                    rmDir(filePath);
            }
        if (removeSelf)
        {
            fs.rmdirSync(dirPath);
        }
    },

     URLData : function(URL) 
    {
        const request = require('request');
        const cheerio = require('cheerio');

        request(URL, function (err, res, body) {
                if(err)
                {
                    console.log(err);
                }
                else
                {
                        
                    const arr = [];
                    let $ = cheerio.load(body);
                    console.dir($);
   
                    $('div._1HmYoV > div.col-10-12>div.bhgxx2>div._3O0U0u').each(function(index){
                          
                        const data = $(this).find('div._1UoZlX>a').attr('href');
                        const name = $(this).find('div._1-2Iqu>div.col-7-12>div._3wU53n').text();
                        const obj = {
                            data : data,
                            name : name
                        };
                        console.log(obj);
                        arr.push(JSON.stringify(obj));
                    });
                    console.log(arr.toString());
                    fs.writeFile('data.txt', arr, function (err) {
                        if(err) {
                            console.log(err);
                        }
                            else{
                                console.log("success");
                            }
                    });
              
                }
            });
                                
    }
};
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 10
============================================================
file: json_create_model.js
============================================================
content: var js = require('./js_arr_objs.js');
var jsf = require('./js_files.js');
var config = require('./../config');
const fs = require('fs');

var FileName = config.JSON_PATH;

var DefaultObjDefinition =
{
    "keyword": null,
    "link": null,
    title: '',
    description : '',
    reg_date: new Date().toISOString()
};

module.exports = {
    readData:function()
    {
        try 
        {
            myArray = jsf.ArrObjFromFile(FileName);
            //throw 'Break';

        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }
        return myArray ;

    },
    createData:function(inputData)
    {

        var arrResult = [];
        var resArray = [];
        try 
        {   
            myArray = jsf.ArrObjFromFile(FileName);
            var resObj = js.updateObjByObj(inputData, DefaultObjDefinition);
            /*in case inpudata contains an id field*/
            let bool_dup = js.arrObj_dupKey(myArray, resObj, "id");

            if(!bool_dup)
            {
                arrResult = js.add_obj_to_arr_node(myArray, resObj);
                var last_elem = arrResult["insertObj"];
                var resArray = arrResult["records"];
                jsf.ArrObjToFile(FileName, resArray);
                // File destination.txt will be created or overwritten by default.
                var dest_copy = FileName.replace(/\.json/gi, "_JSON_BKP\.json");
                fs.copyFile(FileName, dest_copy, (err) => {
                  if (err) throw err;
                  console.log(dest_copy + ' was updated');
                });
                return last_elem;
            }
            
            //throw 'Break';

        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }

    }
}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 11
============================================================
file: json_delete_model.js
============================================================
content: var js = require('./js_arr_objs.js');
var jsf = require('./js_files.js');
var config = require('./../config');

var FileName = config.JSON_PATH;

module.exports = {

    deleteData:function(deleteId)
    {
      var resArray =[]  ;
      
        try 
        {   
            myArray = jsf.ArrObjFromFile(FileName);
            
            resArray = js.removeByKey(myArray,"id",deleteId);

            //throw 'Break';

        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }

        jsf.ArrObjToFile(FileName, resArray);
      return resArray;

    }

}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 12
============================================================
file: json_read_model.js
============================================================
content: var js = require('./js_arr_objs.js');
var jsf = require('./js_files.js');
var config = require('./../config');

var FileName = config.JSON_PATH;

module.exports = {
    readData:function()
    {
        try 
        {
            myArray = jsf.ArrObjFromFile(FileName);
            //throw 'Break';

        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }
        return myArray ;

    },
    readDataId:function(id)
    {
      
        try 
        {   
            myArray = jsf.ArrObjFromFile(FileName);
            if(js.ArrHasObj(myArray,"id",id))
            {
                var record = js.readByKey(myArray,"id",id);
                return record;
            } 
            
            //throw 'Break';

        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }

    }
}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 13
============================================================
file: json_update_model.js
============================================================
content: var js = require('./js_arr_objs.js');
var jsf = require('./js_files.js');
var config = require('./../config');
const fs = require('fs');

var FileName = config.JSON_PATH;

module.exports = {
    editData:function(editId)
    {
        var record = {};
        try 
        {   
            myArray = jsf.ArrObjFromFile(FileName);
            if(js.ArrHasObj(myArray,"id",editId))
            {   
                record = js.readByKey(myArray,"id",editId);
                
            } 
            
            //throw 'Break';

        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }
        return record;
    },
    updateData:function(inputData, updateId)
    {
      var resArray =[]  ;
      
        try 
        {   
            myArray = jsf.ArrObjFromFile(FileName);
            if(js.ArrHasObj(myArray,"id",updateId))
            {
                resArray = js.ObjByObjArrObj(myArray,"id",updateId, inputData);

            } 
            
            //throw 'Break';

        } 
        catch (e) 
        {
            if (e !== 'Break') throw e;
        }
        var record = js.readByKey(resArray,"id",updateId);

        jsf.ArrObjToFile(FileName, resArray);
        // File destination.txt will be created or overwritten by default.
        var dest_copy = FileName.replace(/\.json/gi, "_JSON_BKP\.json");
        fs.copyFile(FileName, dest_copy, (err) => {
          if (err) throw err;
          console.log(dest_copy + ' was updated');
        });

      return resArray;

    },

}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 14
============================================================
file: link-model.js
============================================================
content: var db = require('../database');
var mysql = require('mysql');
var config = require('./../config');
var  chalk  = require('chalk');
const log = console.log;

module.exports = {
    showData: function(showId, callback) {

        var sql = `SELECT * FROM ${config.database.db}.${config.database.table} WHERE id=${showId}`;
        db.query(sql, function(err, data) {
            if (err) throw err;
            return callback(data[0]);
        });
    },
    search_term_Data: function(inputData, callback) {
        var search_term = inputData.search_term;
        var search_keyword = inputData.search_keyword;
        var rendu_nbr = inputData.rendu_nbr;

        //var sql = "SELECT * FROM search WHERE title LIKE '%"+ mysql.escape(search_keyword) +
        //"%' and description LIKE '%"+ mysql.escape(search_term) + "%' ";
        if (typeof search_keyword !== 'undefined' && search_keyword !== "" && search_keyword !== null) {
            var search_key = search_keyword.trim();
            //var search_key=$("#search_keyword").val();
            //var search_terms = search_key.split( /,\s*/ );

            var search_terms = search_key.split(/ \s*/);

            //remove repeated values
            var uniq_search_terms = [...new Set(search_terms)];
            //convert array to string  replace commas by spaces  
            uniq_search_terms = uniq_search_terms.join(" ");

            var search_default = [search_term.trim(), uniq_search_terms].join(" ");

        } else {
            var search_default = search_term;
        }

        var search_default = search_default.trim();
        var keywords_vals = search_default;


        /*constructing sql search request*/
        var search_terms = search_default.split(/ \s*/);

        let sLen = search_terms.length;


        var txt_sql = "";
        var parts = [];

        txt_sql = `SELECT ${config.database.db}.${config.database.table}.id, 
                            ${config.database.db}.${config.database.table}.title, 
                            ${config.database.db}.${config.database.table}.description, 
                            ${config.database.db}.${config.database.table}.link, 
                            ${config.database.db}.${config.database.table}.reg_date, (`;

        for (let i = 0; i < sLen; i++) {
            let keyword = search_terms[i].trim();
            parts.push('( LOWER( title )   LIKE \"%' + keyword + '%\")');
            parts.push('( LOWER( description )   LIKE \"%' + keyword + '%\")');

        }

        //convert array to string  replace commas by spaces  

        let constructed_str = parts.join(" + ");
        txt_sql += constructed_str;
        txt_sql += `) AS best_match FROM ${config.database.db}.${config.database.table} 
                    HAVING best_match >= 1 ORDER BY best_match DESC`;

        txt_sql += " LIMIT " + rendu_nbr + "";
         log(chalk.yellow("txt_sql link-model search_term_Data"));
         log(chalk.yellow(txt_sql));
        /* var sql = 'SELECT * FROM search WHERE title LIKE \"%'+search_keyword+
         '%\" and description LIKE \"%'+search_term+ '%\"';*/

        db.query(txt_sql, function(err, data, fields) {
            if (err) throw err;
            data["keywords_vals"] = keywords_vals;

            return callback(data);
        });
    },/*end of search_term data*/
    
    showLinksList: function(callback) {

        var sql = `SELECT * FROM ${config.database.db}.${config.database.table}`;
        db.query(sql, function(err, data, fields) {
            if (err) throw err;
            return callback(data);
        });
    }

}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 15
============================================================
file: read-model.js
============================================================
content: var db = require('../database');
var config = require('./../config');

module.exports = {
    readData: function(callback) {
        var sql = `SELECT * FROM ${config.database.db}.${config.database.table}`;
        db.query(sql, function(err, data, fields) {
            if (err) throw err;
            return callback(data);
        });
    }

}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 16
============================================================
file: search-model.js
============================================================
content: var db = require('../database');
var mysql = require('mysql');
var config = require('./../config');
var  chalk  = require('chalk');
const log = console.log;

module.exports = {

    search_term_Data: function(inputData, callback) {
        var search_term = inputData.search_term;
        var search_keyword = inputData.search_keyword;
        var rendu_nbr = inputData.rendu_nbr;

        //var sql = "SELECT * FROM search WHERE title LIKE '%"+ mysql.escape(search_keyword) +
        //"%' and description LIKE '%"+ mysql.escape(search_term) + "%' ";
        if (typeof search_keyword !== 'undefined' && search_keyword !== "" && search_keyword !== null) {
            var search_key = search_keyword.trim();
            //var search_key=$("#search_keyword").val();
            //var search_terms = search_key.split( /,\s*/ );

            var search_terms = search_key.split(/ \s*/);

            //remove repeated values
            var uniq_search_terms = [...new Set(search_terms)];
            //convert array to string  replace commas by spaces  
            uniq_search_terms = uniq_search_terms.join(" ");

            var search_default = [search_term.trim(), uniq_search_terms].join(" ");

        } else {
            var search_default = search_term;
        }

        var search_default = search_default.trim();
        var keywords_vals = search_default;

        /*constructing sql search request*/
        var search_terms = search_default.split(/ \s*/);

        let sLen = search_terms.length;

        var txt_sql = "";
        var parts = [];

        txt_sql = `SELECT ${config.database.db}.${config.database.table}.id, 
                            ${config.database.db}.${config.database.table}.title, 
                            ${config.database.db}.${config.database.table}.description, 
                            ${config.database.db}.${config.database.table}.link, 
                            ${config.database.db}.${config.database.table}.reg_date, (`;

        for (let i = 0; i < sLen; i++) {
            let keyword = search_terms[i].trim();
            parts.push('( LOWER( title )   LIKE \"%' + keyword + '%\")');
            parts.push('( LOWER( description )   LIKE \"%' + keyword + '%\")');
        }

        //convert array to string  replace commas by spaces  

        let constructed_str = parts.join(" + ");
        txt_sql += constructed_str;
        txt_sql += `) AS best_match FROM ${config.database.db}.${config.database.table} 
                        HAVING best_match >= 1 ORDER BY best_match DESC`;

        txt_sql += " LIMIT " + rendu_nbr + "";

        /* var sql = 'SELECT * FROM search WHERE title LIKE \"%'+search_keyword+
         '%\" and description LIKE \"%'+search_term+ '%\"';*/
         log(chalk.yellow("txt_sql search-model search_term_Data"));
         log(chalk.yellow(txt_sql));

        db.query(txt_sql, function(err, data, fields) {
            if (err) throw err;
            data["keywords_vals"] = keywords_vals;

            return callback(data);
        });
    }

}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 17
============================================================
file: sequelize-model.js
============================================================
content: var dbConfig = require('./../config');

const Sequelize = require("sequelize");
const sequelize = new Sequelize(dbConfig.DB, dbConfig.USER, dbConfig.PASSWORD, {
  host: dbConfig.HOST,
  dialect: dbConfig.dialect,
  operatorsAliases: false,

  pool: {
    max: dbConfig.pool.max,
    min: dbConfig.pool.min,
    acquire: dbConfig.pool.acquire,
    idle: dbConfig.pool.idle
  }
});
const db = {};
db.Sequelize = Sequelize;
db.sequelize = sequelize;

var general_table = dbConfig.database.table;
var general_table_bkp = dbConfig.database.table + `_bkps`;

const Tutorial = sequelize.define(`${general_table}`, {
     id: {
         type: Sequelize.INTEGER,
         primaryKey: true
     },
    keyword : Sequelize.TEXT,
    link : Sequelize.TEXT,
    title : Sequelize.TEXT,
    description : Sequelize.TEXT,
    reg_date: {
        type: 'TIMESTAMP',
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        allowNull: false
      },
    created_at: {
        type: 'TIMESTAMP',
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        allowNull: false
      },
      updated_at: {
        type: 'TIMESTAMP',
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        allowNull: false
      }
}, 
{
    tableName: `${general_table}`,
    freezeTableName: true,
    timestamps: false
});

const Tutorial_bkp = sequelize.define(`${general_table_bkp}`, {
     id: {
         type: Sequelize.INTEGER,
         primaryKey: true
     },
    keyword : Sequelize.TEXT,
    link : Sequelize.TEXT,
    title : Sequelize.TEXT,
    description : Sequelize.TEXT,
    reg_date: {
        type: 'TIMESTAMP',
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        allowNull: false
      },
    created_at: {
        type: 'TIMESTAMP',
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        allowNull: false
      },
      updated_at: {
        type: 'TIMESTAMP',
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        allowNull: false
      }
}
, 
{indexes: [{unique: true, fields: ['id']}]}
,
{
    tableName: `${general_table_bkp}`,
    freezeTableName: true,
    timestamps: false
});

//Tutorial.removeAttribute('id');
db.tutorials = Tutorial;
db.tutorials_bkp = Tutorial_bkp;



module.exports = db;
/*
var Foo = sequelize.define('foo', {
 // instantiating will automatically set the flag to true if not set
 flag: { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true},

 // default values for dates => current time
 myDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },

 // setting allowNull to false will add NOT NULL to the column, which means an error will be
 // thrown from the DB when the query is executed if the column is null. If you want to check that a value
 // is not null before querying the DB, look at the validations section below.
 title: { type: Sequelize.STRING, allowNull: false},

 // Creating two objects with the same value will throw an error. The unique property can be either a
 // boolean, or a string. If you provide the same string for multiple columns, they will form a
 // composite unique key.
 someUnique: {type: Sequelize.STRING, unique: true},
 uniqueOne: { type: Sequelize.STRING,  unique: 'compositeIndex'},
 uniqueTwo: { type: Sequelize.INTEGER, unique: 'compositeIndex'}

 // The unique property is simply a shorthand to create a unique index.
 someUnique: {type: Sequelize.STRING, unique: true}
 // It's exactly the same as creating the index in the model's options.
 {someUnique: {type: Sequelize.STRING}},
 {indexes: [{unique: true, fields: ['someUnique']}]}

 // Go on reading for further information about primary keys
 identifier: { type: Sequelize.STRING, primaryKey: true},

 // autoIncrement can be used to create auto_incrementing integer columns
 incrementMe: { type: Sequelize.INTEGER, autoIncrement: true },

 // Comments can be specified for each field for MySQL and PG
 hasComment: { type: Sequelize.INTEGER, comment: "I'm a comment!" },

 // You can specify a custom field name via the "field" attribute:
 fieldWithUnderscores: { type: Sequelize.STRING, field: "field_with_underscores" },

 // It is possible to create foreign keys:
 bar_id: {
   type: Sequelize.INTEGER,

   references: {
     // This is a reference to another model
     model: Bar,

     // This is the column name of the referenced model
     key: 'id',

     // This declares when to check the foreign key constraint. PostgreSQL only.
     deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE
   }
 }
});*/

============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 18
============================================================
file: ts-model.js
============================================================
content: var db = require('../database');
var config = require('./../config');
var tmp_table = config.database.table;
//var tmp_table = 'table_0001';
var sql_create  = `CREATE TABLE ${tmp_table}(
                      id int unsigned DEFAULT NULL,
                      keyword text  NULL,
                      link text NULL,
                      title  text NULL,
                      description text NULL,
                      reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                      UNIQUE KEY id (id)
                  )`;

module.exports = {
    readData: function(callback) {
        var sql = `SELECT * FROM ${config.database.db}.${config.database.table}`;
        db.query(sql, function(err, data, fields) {
            if (err) throw err;
            return callback(data);
        });
    },
    storeData: function(callback) {
        var sql = `SELECT * FROM ${config.database.db}.${config.database.table}`;
        db.query(sql, function(err, data, fields) {
            if (err) throw err;
            return callback(data);
        });
    },
    checkData: function(callback) {
        var sql = `SELECT * FROM ${config.database.db}.${config.database.table}`;
        db.query(sql, function(err, data, fields) {
            if (err) throw err;
            return callback(data);
        });
    },
    createData: function(proposal_t, inputData, callback) {

        //var sql = `INSERT INTO ${config.database.db}.${proposal_t} SET ?`;
        var sql = `INSERT INTO ${config.database.db}.${proposal_t} (id,keyword,link,title,description ) VALUES ?`;
        db.query(sql, [inputData], function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    },
    updateData: function(inputData, updateId, callback) {

        var sql = `UPDATE ${config.database.db}.${config.database.table} SET ? WHERE id= ?`;
        db.query(sql, [inputData, updateId], function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    },
    deleteData: function(deleteId, callback) {

       log(chalk.yellow('ts-model deleteData this Id is a deleted id :', deleteId)); 

        var sql = `DELETE FROM ${config.database.db}.${config.database.table} WHERE id = ?`;
        db.query(sql, [deleteId], function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    },
    createTable: function(callback) {
        db.query(sql_create, function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    },

}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 19
============================================================
file: update-model.js
============================================================
content: var db = require('../database');
var config = require('./../config');
module.exports = {
    editData: function(editId, callback) {

        var sql = `SELECT * FROM ${config.database.db}.${config.database.table} WHERE id=${editId}`;
        db.query(sql, function(err, data) {
            if (err) throw err;
            return callback(data[0]);
        });
    },
    updateData: function(inputData, updateId, callback) {

        var sql = `UPDATE ${config.database.db}.${config.database.table} SET ? WHERE id= ?`;
        db.query(sql, [inputData, updateId], function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    }
}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 20
============================================================
file: update-mongo-model.js
============================================================
content: var mongoose = require('mongoose');
var db = require('../database_mongodb');

// create an schema
var userSchema = new mongoose.Schema({
    fullName: String,
    emailAddress: String,
    city: String,
    country: String
});
var schema = new mongoose.Schema(userSchema);

try {
    if (mongoose.model('users')) {
        var userTable = mongoose.model('users');
    }
} catch (e) {
    if (e.name === 'MissingSchemaError') {

        var userTable = mongoose.model('users', schema);
    }
}

module.exports = {

    editData: function(editId, callback) {
        var userData = userTable.findById(editId);
        userData.exec(function(err, data) {
            if (err) throw err;
            return callback(data);
        })
    },
    updateData: function(inputData, editId, callback) {

        userData = userTable.findByIdAndUpdate(editId, inputData);
        userData.exec(function(err, data) {
            if (err) throw err;
            return callback(data);
        })
    }

}
============================================================


============================================================
path : __home__sea__json_node__models__
============================================================
============================================================
id: 21
============================================================
file: user-model.js
============================================================
content: var mongoose = require('mongoose');
var db = require('../database_mongodb');

// create an schema
var userSchema = new mongoose.Schema({
    full_name: String,
    email_address: String,
    city: String,
    country: String
});

try {
    if (mongoose.model('users')) return mongoose.model('users');
} catch (e) {
    if (e.name === 'MissingSchemaError') {
        var schema = new mongoose.Schema(userSchema);
        var userTable = mongoose.model('users', schema);
    }
}

module.exports = {
    createData: function(inputData, callback) {

        userData = new userTable(inputData);
        userData.save(function(err, data) {
            if (err) throw err;
            return callback(data);
        });
    }
}
============================================================


