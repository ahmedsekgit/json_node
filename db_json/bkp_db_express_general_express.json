[
  {
    "id": 1,
    "keyword": null,
    "link": "                        ",
    "title": "express  == operation is not working on ids in express                        ",
    "description": "Mongoose uses the mongodb-native driver, which uses the custom ObjectID type.\r\nYou can compare ObjectIDs with the .equals() method.\r\nWith your example, results.userId.equals(AnotherMongoDocument._id).\r\nThe ObjectID type also has a toString() method, if you wish to store a stringified version of the ObjectID in JSON \r\nformat, or a cookie.\r\n\r\nIf you use ObjectID = require(\"mongodb\").ObjectID (requires the mongodb-native \r\nlibrary) you can check if results.userId is a valid identifier with \r\n  results.userId instanceof ObjectID.\r\n\r\n                    ",
    "reg_date": "2021-11-01T14:51:52.000Z"
  },
  {
    "id": 2,
    "keyword": null,
    "link": null,
    "title": "express  Express use middleware for specific routes",
    "description": "router.get('/route', middleware1, middleware2, ..., middlewareX)\n//app.get will see only exact match ex.> \"/book\" here app.get will not allow /book/1, etc \n//but app.use is different see below\n\n//what is difference between app.use and app.all\n//app.use takes only 1 callback while app.all takes multiple callbacks\n//app.use will only see whether url starts with specified path But, app.all() will match the complete path\n\napp.use( \"/book\" , middleware);\n// will match /book\n// will match /book/author\n// will match /book/subject\n\napp.all( \"/book\" , handler);\n// will match /book\n// won't match /book/author   \n// won't match /book/subject    \n\napp.all( \"/book/*\" , handler);\n// won't match /book        \n// will match /book/author\n// will match /book/subject",
    "reg_date": "2021-10-22T11:18:21.000Z"
  },
  {
    "id": 3,
    "keyword": null,
    "link": null,
    "title": "express  How to Create a Secure REST API with Node.js and Express",
    "description": "/*\n    This code comes from Vincent Lab\n    And it has a video version linked here: https://www.youtube.com/watch?v=Tw5LupcpKS4\n*/\n\n// Import dependencie\nconst express = require(\"express\");\n\n// Setup the express server\nconst app = express();\nconst port = 3000;\n\n// Import middlewares into express\napp.use(express.json({ limit: \"100mb\" }));\n\n// Import routes\nconst authRouter = require(\"./routes/auth\");\nconst messagesRouter = require(\"./routes/messages\");\n\n// Setup all the routes\napp.use(\"/api/messages\", messagesRouter);\napp.use(\"/api/auth\", authRouter);\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Listening on port ${port}...`);\n});",
    "reg_date": "2021-10-22T11:18:21.000Z"
  },
  {
    "id": 4,
    "keyword": null,
    "link": null,
    "title": "express  How to Delete Comment from Post on Node, express and Mongoose and Ajax",
    "description": "// How to Delete Comment from Post on Node, express and Mongoose and Ajax\n\nYou need to know both the postId and the commentId to be able to delete the comment from posts collection. Also it would be good to delete the comment inside the comments collection.\n\nSo change your delete route to include postId and commentId as req.params. You can delete a comment from posts using the findByIdAndUpdate method and $pull operator.\n\nrouter.delete(\"/comments/:postId/:commentId\", async function (req, res) {\n  try {\n    const post = await Post.findByIdAndUpdate(\n      req.params.postId,\n      {\n        $pull: { comments: req.params.commentId },\n      },\n      { new: true }\n    );\n\n    if (!post) {\n      return res.status(400).send(\"Post not found\");\n    }\n\n    await Comment.findByIdAndDelete(req.params.commentId);\n\n    res.send(\"Success\");\n  } catch (err) {\n    console.log(err);\n    res.status(500).send(\"Something went wrong\");\n  }\n});\nTEST\n\nLet's say we have this post document with 3 comments.\n\nPosts:\n\n{\n    \"_id\" : ObjectId(\"5e8b10c49ae619486094ed10\"),\n    \"comments\" : [\n        ObjectId(\"5e8b104f9ae619486094ed0d\"),\n        ObjectId(\"5e8b10599ae619486094ed0e\"),\n        ObjectId(\"5e8b105e9ae619486094ed0f\")\n    ],\n    \"title\" : \"Title\",\n    \"description\" : \"Description...\",\n    \"from\" : \"From\",\n    \"postImage\" : \"Post Image\",\n    \"createdAt\" : ISODate(\"2020-04-06T14:21:40.884+03:00\")\n}\nComments:\n\n{\n    \"_id\" : ObjectId(\"5e8b105e9ae619486094ed0f\"),\n    \"message\" : \"Comment 3\"\n},\n\n{\n    \"_id\" : ObjectId(\"5e8b10599ae619486094ed0e\"),\n    \"message\" : \"Comment 2\"\n},\n{\n    \"_id\" : ObjectId(\"5e8b104f9ae619486094ed0d\"),\n    \"message\" : \"Comment 1\"\n}\nIf we want to delete the comment with _id:5e8b10599ae619486094ed0e, we need to send a DELETE request to our route using url like this:\n\nhttp://localhost:3000/posts/comments/5e8b10c49ae619486094ed10/5e8b10599ae619486094ed0e\n5e8b10c49ae619486094ed10 is the postId, 5e8b10599ae619486094ed0e is the commentId.\n\nResult will be like this:\n\nPosts:\n\n{\n    \"_id\" : ObjectId(\"5e8b10c49ae619486094ed10\"),\n    \"comments\" : [\n        ObjectId(\"5e8b104f9ae619486094ed0d\"),\n        ObjectId(\"5e8b105e9ae619486094ed0f\")\n    ],\n    \"title\" : \"Title\",\n    \"description\" : \"Description...\",\n    \"from\" : \"From\",\n    \"postImage\" : \"Post Image\",\n    \"createdAt\" : ISODate(\"2020-04-06T14:21:40.884+03:00\")\n}\nComments:\n\n{\n    \"_id\" : ObjectId(\"5e8b105e9ae619486094ed0f\"),\n    \"message\" : \"Comment 3\"\n},\n{\n    \"_id\" : ObjectId(\"5e8b104f9ae619486094ed0d\"),\n    \"message\" : \"Comment 1\"\n}\nShare\nFollow\nanswered Apr 6 '20 at 11:37\n\nSuleymanSah\n12.8k55 gold badges1717 silver badges4242 bronze badges\n1\n@SuleymanSahThank you so much for taking your time to explain to me how it works, i really appreciate it. I did exactly what you said with the code you gave me above, and changed my link to include post id like this ` <a class=\"delete-comment\" href=\"#\" data-id=\"<%=post.id%>/<%=item._id%>\">Delete</a> ` and everything is – Chukwuma Kingsley Apr 6 '20 at 11:58\n",
    "reg_date": "2021-10-22T11:18:21.000Z"
  },
  {
    "id": 5,
    "keyword": null,
    "link": null,
    "title": "express  How to access the request body when POSTing using Node.js and Express",
    "description": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));const express = require('express');\n\nconst app = express();\n\napp.use(express.json({extended: false})); //This is the line that you want to add\n\napp.post('/postroute', (req, res) => {\n    console.log('body :', req.body);\n    res.sendStatus(200);\n});",
    "reg_date": "2021-10-22T11:18:21.000Z"
  },
  {
    "id": 6,
    "keyword": null,
    "link": null,
    "title": "express  How to send form data from react to express",
    "description": "const reactData = [{ id: 1, name:' Tom'}, { id: 2, name:' Sarah'}];\nconst url = localhost:4000/api/users/register;\n\nlet sendData = () => {\naxios.post(url, reactData)\n   .then(res => console.log('Data send'))\n   .catch(err => console.log(err.data))\n}const url = localhost:4000/api/users/register;\nconst usersData= [];\n\nlet getData = () => {\naxios.get(url)\n   .then(res => usersData.push(res.data))\n   .catch(err => console.log(err.data))\n}",
    "reg_date": "2021-10-22T11:18:21.000Z"
  },
  {
    "id": 7,
    "keyword": null,
    "link": null,
    "title": "express  How to setup Google OAuth2 login with Express Step 1 config.js",
    "description": "// STEP 1. Install dependencies and make config.js\n// project for understanding google authorization with express\n//set up your Node.JS project, and install the following dependencies:\n// cookie-parser\n// ejs\n// express\n// google-auth-library\n// googleapis\n// jsonwebtoken\n// In the Credentials section of the Google Developer Console, \n// create an OAuth Client ID credential of type Web Application.\n// Create a file named config.js with the following contents,\n// Fill in the client_id, project_id, and client_secret properties \n// with the information for your project.\n////////////////////////// config.js \n\nconst port = 3002;\nconst baseURL = `http://localhost:${port}`;\nmodule.exports = {\n  // The secret for the encryption of the jsonwebtoken\n  JWTsecret: 'mysecret',\n  baseURL: baseURL,\n  port: port,\n  // The credentials and information for OAuth2\n  oauth2Credentials: {\n    client_id: \"\",\n    project_id: \"\", // The name of your project\n    auth_uri: \"https://accounts.google.com/o/oauth2/auth\",\n    token_uri: \"https://oauth2.googleapis.com/token\",\n    auth_provider_x509_cert_url: \"https://www.googleapis.com/oauth2/v1/certs\",\n    client_secret: \"\",\n    redirect_uris: [\n      `${baseURL}/auth_callback`\n    ],\n    scopes: [\n      'https://www.googleapis.com/auth/youtube.readonly'\n    ]\n  }\n};\n// STEP 4. ///////////////////////////////////////////////\n// Lastly create the data.ejs template in order \n// to display the data.\n//////////////////////////////////////////////////////////\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Express Google OAuth2 Tutorial by Aidan Lovelace</title>\n</head>\n<body>\n  <ul>\n    <% subscriptions.forEach(function (subscription) { %>\n      <li><%= subscription.snippet.title %></li>\n    <% }) %>\n  </ul>\n</body>\n</html>\n",
    "reg_date": "2021-10-22T11:18:21.000Z"
  },
  {
    "id": 8,
    "keyword": null,
    "link": null,
    "title": "express  How to use express generator",
    "description": "npm i express$ npm install express-generator -g\nnpx express-generator --view=no-view my-app# You can run the application generator with the npx command (available in Node.js 8.2.0).\n$ npx express-generator\n# For earlier Node versions, install the application generator as a global npm package and then launch it:\n$ npm install -g express-generator\n# For example, the following creates an Express app named myapp. The app will be created in a folder named myapp in the current working directory and the view engine will be set to Pug:\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/bin\n   create : myapp/bin/www\n# Then install dependencies:\n$ cd myapp\nnpm install\n# On MacOS or Linux, run the app with this command:\n$ DEBUG=myapp:* npm start\n# On Windows Command Prompt, use this command:\n$ set DEBUG=myapp:* & npm start\n# On Windows PowerShell, use this command:\n$env:DEBUG='myapp:*'; npm start## Command\n$ npx express-generator\n\n: 'For earlier Node versions, install the application generator as a global\nnpm package and then launch it':\n$ npm install -g express-generator\n$ express\n\n## Display the command options with the -h option:\n$ express -h# Scaffold an app with Express application generator\n\n# Install express-generator globally by typing the following \n# into a bash terminal (from any directory). \n# open a bash terminal and install globally by typing:  \n$ npm install -g express-generator@4.16.1\n\n# Prepend the command with sudo if you are using MacOS or Linux.\n$ sudo npm install -g express-generator\n\n# Note: You may need to close your bash terminal and start a \n# new session before you can use the express command after this installation.\n# First create a main folder for your server \n\n$ mkdir MyNameFolder \n# enter the folder\n$ cd MyNameFolder\n\n# Scaffold out an Express application \n# Here we create a server folder of your own name \n# myservernameServer\n\n# To scaffold out an Express application, \n# type the following at the prompt: \n# view generator now pug as jade is now pug  \n\n$ express --view=pug mysitenameServer \n\n# NOTE: If the \"express\" command does not work for you even after \n# you have installed express-generator globally, you can use command\n\n$ npx express-generator@4.16.1 mysitenameServer\n\n# move into the mysitenameServer folder - type: \n\n$ cd mysitenameServer\n\n# type the following at terminal prompt to install all Node dependencies:\n\n$ npm install \n\n# RUNNING APP \n# MacOS or Linux\n\n$ DEBUG=mysitenameServer:* npm start\n\n# On Windows prompt\n\n$ set DEBUG=mysitenameServer:* & npm start\n\n# Windows PowerShell\n\n$ env:DEBUG='mysitenameServer:*'; npm start\n\n# Then load http://localhost:3000/ in your browser to access the app.\n# The generated app has the following directory structure:\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n\n",
    "reg_date": "2021-10-22T11:18:21.000Z"
  },
  {
    "id": 9,
    "keyword": null,
    "link": null,
    "title": "express  ISS proxy express",
    "description": "iisexpress-proxy https://localhost:51123 to 3000\n",
    "reg_date": "2021-10-22T11:18:22.000Z"
  },
  {
    "id": 10,
    "keyword": null,
    "link": null,
    "title": "express  MIME type Error CSS in nodejs Express",
    "description": "app.use(express.static(__dirname + '/public'));\n",
    "reg_date": "2021-10-22T11:18:22.000Z"
  },
  {
    "id": 11,
    "keyword": null,
    "link": null,
    "title": "express  PayloadTooLargeError: request entity too large using express json middleware",
    "description": "app.use(bodyParser.json({\n  limit: '50mb'\n}));\n\napp.use(bodyParser.urlencoded({\n  limit: '50mb',\n  parameterLimit: 100000,\n  extended: true \n}));\napp.use(express.json({limit: '50mb'}));\napp.use(express.urlencoded({limit: '50mb'}));",
    "reg_date": "2021-10-22T11:18:22.000Z"
  },
  {
    "id": 12,
    "keyword": null,
    "link": null,
    "title": "express  Programação web com Node e Express Beneficiando-se da stack JavaScript",
    "description": "const fs = require('fs');\nconst path = require('path');\nconst Sequelize = require('sequelize');\nconst config = require('../../config/database.js');\n\nconst db = {};\nconst sequelize = new Sequelize(config);\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => (file.indexOf('.') !== 0) && (file !== path.basename(__filename)) && (file.slice(-3) === '.js'))\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n",
    "reg_date": "2021-10-22T11:18:22.000Z"
  },
  {
    "id": 13,
    "keyword": null,
    "link": null,
    "title": "express  Render raw html in response with Express",
    "description": "res.set('Content-Type', 'text/html');\nres.send(Buffer.from('<h2>Test String</h2>'));",
    "reg_date": "2021-10-22T11:18:22.000Z"
  },
  {
    "id": 14,
    "keyword": null,
    "link": null,
    "title": "express  Run project in visual studio with iis express",
    "description": "In the solution folder view:\n\n- Right click on your website/ web app\n- Click on \"Set as Startup Project\"\n- Configure as needed (IIS Local as default)",
    "reg_date": "2021-10-22T11:18:22.000Z"
  },
  {
    "id": 15,
    "keyword": null,
    "link": null,
    "title": "express  Set up google OAuth2 Login with Express",
    "description": "/// STEP 2. make main.ejs \n// include get route, get some data callback, get some data \nconst express = require('express');\nconst google = require('googleapis').google;\nconst jwt = require('jsonwebtoken');\n// Google's OAuth2 client\nconst OAuth2 = google.auth.OAuth2;\n// Including our config file\nconst CONFIG = require('./config');\n// Creating our express application\nconst app = express();\n// Allowing ourselves to use cookies\nconst cookieParser = require('cookie-parser');\napp.use(cookieParser());\n// Setting up Views\napp.set('view engine', 'ejs');\napp.set('views', __dirname);\n////////// app.get '/' Route /////////////////////////\n// GET route where we’ll put our link to log in with google.\napp.get('/', function (req, res) {\n  // Create an OAuth2 client object from the credentials in our config file\n  const oauth2Client = new OAuth2(CONFIG.oauth2Credentials.client_id, CONFIG.oauth2Credentials.client_secret, CONFIG.oauth2Credentials.redirect_uris[0]);\n  // Obtain the google login link to which we'll send our users to give us access\n  const loginLink = oauth2Client.generateAuthUrl({\n    access_type: 'offline', // Indicates that we need to be able to access data continously without the user constantly giving us consent\n    scope: CONFIG.oauth2Credentials.scopes // Using the access scopes from our config file\n  });\n  return res.render(\"index\", { loginLink: loginLink });\n});\n/////////////////////////////////////////////////////////////\n//  Redirect user to /get_some_data page,\napp.get('/auth_callback', function (req, res) {\n  // Create an OAuth2 client object from the credentials in our config file\n  const oauth2Client = new OAuth2(CONFIG.oauth2Credentials.client_id, CONFIG.oauth2Credentials.client_secret, CONFIG.oauth2Credentials.redirect_uris[0]);\n\n  if (req.query.error) {\n    // The user did not give us permission.\n    return res.redirect('/');\n  } else {\n    oauth2Client.getToken(req.query.code, function(err, token) {\n      if (err)\n        return res.redirect('/');\n      \n      // Store the credentials given by google into a jsonwebtoken in a cookie called 'jwt'\n      res.cookie('jwt', jwt.sign(token, CONFIG.JWTsecret));\n      return res.redirect('/get_some_data'); // renders index template with login link \n    });\n  }\n});\n/////////////// get_some_data page ////////////////////////////\n// In aidan's example, 5 user subscribed channels are displayed.\n// Needs to create OAuth2 client then add user’s credentials \n// to access anything. Then Gets subscriptions, sends to template. \n///////////////////////////////////////////////////////////////\napp.get('/get_some_data', function (req, res) {\n  if (!req.cookies.jwt) {\n    // We haven't logged in\n    return res.redirect('/');\n  }\n  // Create an OAuth2 client object from the credentials in our config file\n  const oauth2Client = new OAuth2(CONFIG.oauth2Credentials.client_id, CONFIG.oauth2Credentials.client_secret, CONFIG.oauth2Credentials.redirect_uris[0]);\n  // Add this specific user's credentials to our OAuth2 client\n  oauth2Client.credentials = jwt.verify(req.cookies.jwt, CONFIG.JWTsecret);\n  // Get the youtube service\n  const service = google.youtube('v3');\n  // Get five of the user's subscriptions (the channels they're subscribed to)\n  service.subscriptions.list({\n    auth: oauth2Client,\n    mine: true,\n    part: 'snippet,contentDetails',\n    maxResults: 5\n  }).then(response => {\n    // Render the data view, passing the subscriptions to it\n    return res.render('data', { subscriptions: response.data.items });\n  });\n});\n// Listen on the port defined in the config file\napp.listen(CONFIG.port, function () {\n  console.log(`Listening on port ${CONFIG.port}`);\n});// STEP 4. ///////////////////////////////////////////////\n// Lastly create the data.ejs template in order \n// to display the data.\n//////////////////////////////////////////////////////////\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Express Google OAuth2 Tutorial by Aidan Lovelace</title>\n</head>\n<body>\n  <ul>\n    <% subscriptions.forEach(function (subscription) { %>\n      <li><%= subscription.snippet.title %></li>\n    <% }) %>\n  </ul>\n</body>\n</html>\n//////// STEP 3. //////////////////////////////////////\n////// Create base html(ish) file named index.ejs /////\n// with a login link to the page we passed to the file.\n/////////////// index.ejs /////////////////////////////\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Express Google OAuth2 Tutorial by Aidan Lovelace</title>\n</head>\n<body>\n  <a href=\"<%= loginLink %>\">Login</a>\n</body>\n</html>\n// STEP 1. Install dependencies and make config.js\n// project for understanding google authorization with express\n//set up your Node.JS project, and install the following dependencies:\n// cookie-parser\n// ejs\n// express\n// google-auth-library\n// googleapis\n// jsonwebtoken\n// In the Credentials section of the Google Developer Console, \n// create an OAuth Client ID credential of type Web Application.\n// Create a file named config.js with the following contents,\n// Fill in the client_id, project_id, and client_secret properties \n// with the information for your project.\n////////////////////////// config.js \n\nconst port = 3002;\nconst baseURL = `http://localhost:${port}`;\nmodule.exports = {\n  // The secret for the encryption of the jsonwebtoken\n  JWTsecret: 'mysecret',\n  baseURL: baseURL,\n  port: port,\n  // The credentials and information for OAuth2\n  oauth2Credentials: {\n    client_id: \"\",\n    project_id: \"\", // The name of your project\n    auth_uri: \"https://accounts.google.com/o/oauth2/auth\",\n    token_uri: \"https://oauth2.googleapis.com/token\",\n    auth_provider_x509_cert_url: \"https://www.googleapis.com/oauth2/v1/certs\",\n    client_secret: \"\",\n    redirect_uris: [\n      `${baseURL}/auth_callback`\n    ],\n    scopes: [\n      'https://www.googleapis.com/auth/youtube.readonly'\n    ]\n  }\n};\n",
    "reg_date": "2021-10-22T11:18:22.000Z"
  },
  {
    "id": 16,
    "keyword": null,
    "link": null,
    "title": "express  Setup Google OAuth2 login with Express",
    "description": "/// STEP 2. make main.ejs \n// include get route, get some data callback, get some data \nconst express = require('express');\nconst google = require('googleapis').google;\nconst jwt = require('jsonwebtoken');\n// Google's OAuth2 client\nconst OAuth2 = google.auth.OAuth2;\n// Including our config file\nconst CONFIG = require('./config');\n// Creating our express application\nconst app = express();\n// Allowing ourselves to use cookies\nconst cookieParser = require('cookie-parser');\napp.use(cookieParser());\n// Setting up Views\napp.set('view engine', 'ejs');\napp.set('views', __dirname);\n////////// app.get '/' Route /////////////////////////\n// GET route where we’ll put our link to log in with google.\napp.get('/', function (req, res) {\n  // Create an OAuth2 client object from the credentials in our config file\n  const oauth2Client = new OAuth2(CONFIG.oauth2Credentials.client_id, CONFIG.oauth2Credentials.client_secret, CONFIG.oauth2Credentials.redirect_uris[0]);\n  // Obtain the google login link to which we'll send our users to give us access\n  const loginLink = oauth2Client.generateAuthUrl({\n    access_type: 'offline', // Indicates that we need to be able to access data continously without the user constantly giving us consent\n    scope: CONFIG.oauth2Credentials.scopes // Using the access scopes from our config file\n  });\n  return res.render(\"index\", { loginLink: loginLink });\n});\n/////////////////////////////////////////////////////////////\n//  Redirect user to /get_some_data page,\napp.get('/auth_callback', function (req, res) {\n  // Create an OAuth2 client object from the credentials in our config file\n  const oauth2Client = new OAuth2(CONFIG.oauth2Credentials.client_id, CONFIG.oauth2Credentials.client_secret, CONFIG.oauth2Credentials.redirect_uris[0]);\n\n  if (req.query.error) {\n    // The user did not give us permission.\n    return res.redirect('/');\n  } else {\n    oauth2Client.getToken(req.query.code, function(err, token) {\n      if (err)\n        return res.redirect('/');\n      \n      // Store the credentials given by google into a jsonwebtoken in a cookie called 'jwt'\n      res.cookie('jwt', jwt.sign(token, CONFIG.JWTsecret));\n      return res.redirect('/get_some_data'); // renders index template with login link \n    });\n  }\n});\n/////////////// get_some_data page ////////////////////////////\n// In aidan's example, 5 user subscribed channels are displayed.\n// Needs to create OAuth2 client then add user’s credentials \n// to access anything. Then Gets subscriptions, sends to template. \n///////////////////////////////////////////////////////////////\napp.get('/get_some_data', function (req, res) {\n  if (!req.cookies.jwt) {\n    // We haven't logged in\n    return res.redirect('/');\n  }\n  // Create an OAuth2 client object from the credentials in our config file\n  const oauth2Client = new OAuth2(CONFIG.oauth2Credentials.client_id, CONFIG.oauth2Credentials.client_secret, CONFIG.oauth2Credentials.redirect_uris[0]);\n  // Add this specific user's credentials to our OAuth2 client\n  oauth2Client.credentials = jwt.verify(req.cookies.jwt, CONFIG.JWTsecret);\n  // Get the youtube service\n  const service = google.youtube('v3');\n  // Get five of the user's subscriptions (the channels they're subscribed to)\n  service.subscriptions.list({\n    auth: oauth2Client,\n    mine: true,\n    part: 'snippet,contentDetails',\n    maxResults: 5\n  }).then(response => {\n    // Render the data view, passing the subscriptions to it\n    return res.render('data', { subscriptions: response.data.items });\n  });\n});\n// Listen on the port defined in the config file\napp.listen(CONFIG.port, function () {\n  console.log(`Listening on port ${CONFIG.port}`);\n});//////// STEP 3. //////////////////////////////////////\n////// Create base html(ish) file named index.ejs /////\n// with a login link to the page we passed to the file.\n/////////////// index.ejs /////////////////////////////\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Express Google OAuth2 Tutorial by Aidan Lovelace</title>\n</head>\n<body>\n  <a href=\"<%= loginLink %>\">Login</a>\n</body>\n</html>\n// STEP 4. ///////////////////////////////////////////////\n// Lastly create the data.ejs template in order \n// to display the data.\n//////////////////////////////////////////////////////////\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Express Google OAuth2 Tutorial by Aidan Lovelace</title>\n</head>\n<body>\n  <ul>\n    <% subscriptions.forEach(function (subscription) { %>\n      <li><%= subscription.snippet.title %></li>\n    <% }) %>\n  </ul>\n</body>\n</html>\n",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 17,
    "keyword": null,
    "link": null,
    "title": "express  accept Post with no midleWare express",
    "description": "const express=require('express');\nconst app=express();\n//accept Post with no midleWare express\napp.post(\"/register/\",function(req,res){\n    var bodyStr = '';\n    req.on(\"data\",function(chunk){\n        bodyStr += chunk.toString();\n    });\n    req.on(\"end\",function(){\n        res.send(bodyStr);\n    });\n\n});",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 18,
    "keyword": null,
    "link": null,
    "title": "express  access-control-allow-origin nodejs express",
    "description": "// Add headers\napp.use(function (req, res, next) {\n\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true);\n\n    // Pass to next layer of middleware\n    next();\n});app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 19,
    "keyword": null,
    "link": null,
    "title": "express  add express and cors to nodejs app",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n/*index.js*/                                                         \nconst express = require( 'express' );                                                             \nconst cors = require( 'cors' );\nconst app = express();                                                                                          const port = 3030;\n//cors is enabled through out the entire app                                                                                  \napp.use( cors() );\napp.get( '/users', (request, response, next) => {                                                                                                                                                                                                                                                                            res.json( { info: 'cors is enabled' }});\napp.listen( port, () => {                                                              \n  console.log(`App is running on ${port}`)                                                      \n  });",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 20,
    "keyword": null,
    "link": null,
    "title": "express  add multiple params to express params",
    "description": "app.get('/hello/:firstname/:lastname', (req, res) => {\n\tconsole.log(req.params);\n\tres.send('hello ' + req.params.firstname + ' ' + req.params.lastname);\n});app.get('/fruit/:fruitName/:fruitColor', function(req, res) {\n    var data = {\n        \"fruit\": {\n            \"apple\": req.params.fruitName,\n            \"color\": req.params.fruitColor\n        }\n    }; \n\n    send.json(data);\n});\n",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 21,
    "keyword": null,
    "link": null,
    "title": "express  adding session to express",
    "description": "app.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true, maxAge: 60000 }\n}))\n",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 22,
    "keyword": null,
    "link": null,
    "title": "express  allow cors express",
    "description": "// Add headers\napp.use(function (req, res, next) {\n\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true);\n\n    // Pass to next layer of middleware\n    next();\n});app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})// CORS (Cross-Origin Resource Sharing) headers to support Cross-site HTTP requests\n\napp.all('*', function(req, res, next) {\n       res.header(\"Access-Control-Allow-Origin\", \"*\");\n       res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n       res.header('Access-Control-Allow-Headers', 'Content-Type');\n       next();\n});\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 23,
    "keyword": null,
    "link": null,
    "title": "express  apex express 18 forgot password",
    "description": "connect SYS as SYSADMIN\n\n",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 24,
    "keyword": null,
    "link": null,
    "title": "express  app.js express template",
    "description": "const express = require(\"express\")\nconst bodyParser = require(\"body-parser\");\nconst app = express();\n\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\n\n\napp.get(\"/\", (req, res) => {\n    res.send(\"Hello\");\n})\n\napp.listen(3000, ()=> {\n    console.log(\"Server started on port 3000\");\n})",
    "reg_date": "2021-10-22T11:18:23.000Z"
  },
  {
    "id": 25,
    "keyword": null,
    "link": null,
    "title": "express  appwrite express",
    "description": "//IMPORTS\nimport express from \"express\";\nimport router from \"./routes/routes.js\";\nimport sdk from \"node-appwrite\";\nimport cors from \"cors\";\n\nconst app = express();\n\n//MIDDLEWARE TO TRANSFER DATA\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json({ limit: \"30mb\", extended: true }));\napp.use(cors());\n\n//CONSTANTS\nconst PORT = process.env.PORT || 5000;\n\n//MIDDLEWARES\napp.use(\"/\", router);\n\n//CONNECTION WITH APPWRITE DATABASE\n\nlet client = new sdk.Client();\n// export const database = new sdk.Database(client);\n\nclient\n  .setEndpoint(\"\") // Your API Endpoint\n  .setProject(\"\") // Your project ID\n  .setKey(\n    \"\"\n  ); // Your secret API key\n\n// LISTENING TO PORT\napp.listen(PORT, () => {\n  console.log(`Server Running on port ${PORT}`);\n});\n",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 26,
    "keyword": null,
    "link": null,
    "title": "express  authfunctions express",
    "description": "const express = require(\"express\");\nconst auth = require(\"@authfunctions/express\");\nconst app = express();\napp.use(express.json());\n\n//make \"/auth\" our url for the router\napp.use(\"/auth\", auth.AuthRouter);\n\napp.listen(3000);",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 27,
    "keyword": null,
    "link": null,
    "title": "express  basic express graphql",
    "description": "const express = require(\"express\");\nconst expressGraphQL = require(\"express-graphql\").graphqlHTTP;\n\nconst app = express();\n\napp.use(\n  \"/graphql\",\n  expressGraphQL({\n    graphiql: true,\n  })\n);\n\napp.listen(5000, () => console.log(\"Server run on http://localhost:5000/\"));",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 28,
    "keyword": null,
    "link": null,
    "title": "express  body parser express",
    "description": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n$ npm install body-parser// Express v4.16.0 and higher\n// --------------------------\nconst express = require('express');\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// For Express version less than 4.16.0\n// ------------------------------------\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));var express = require(\"express\");\nvar app = express();\nvar bodyParser = require(\"body-parser\");\napp.use(bodyParser.urlencoded({extended: true}));// Express/Connect top-level generic\n// This example demonstrates adding a generic JSON and URL-encoded parser as a top-level middleware, which will parse the bodies of all incoming requests. \n// This is the simplest setup.\n\nvar express = require('express')\nvar bodyParser = require('body-parser') \nvar app = express() \n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false })) \n\n// parse application/json\napp.use(bodyParser.json()) \n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')  \n  res.write('you posted:\\n')  \nres.end(JSON.stringify(req.body, null, 2))})app.use(express.json()); //Used to parse JSON bodies",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 29,
    "keyword": null,
    "link": null,
    "title": "express  bodyparser express",
    "description": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n$ npm install body-parser// Express v4.16.0 and higher\n// --------------------------\nconst express = require('express');\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// For Express version less than 4.16.0\n// ------------------------------------\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));var express = require(\"express\");\nvar app = express();\nvar bodyParser = require(\"body-parser\");\napp.use(bodyParser.urlencoded({extended: true}));// Express/Connect top-level generic\n// This example demonstrates adding a generic JSON and URL-encoded parser as a top-level middleware, which will parse the bodies of all incoming requests. \n// This is the simplest setup.\n\nvar express = require('express')\nvar bodyParser = require('body-parser') \nvar app = express() \n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false })) \n\n// parse application/json\napp.use(bodyParser.json()) \n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')  \n  res.write('you posted:\\n')  \nres.end(JSON.stringify(req.body, null, 2))})var express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\n",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 30,
    "keyword": null,
    "link": null,
    "title": "express  bodyparser express deprecated",
    "description": "The package bodyParser is deprecated. You will get this warning with these lines of code:\n\napp.use(bodyparser.json()); \napp.use(bodyParser.urlencoded({extended: true}));\n\nIf you are using Express 4.16+ you can now replace those lines with:\n\napp.use(express.json()); \napp.use(express.urlencoded()); //Parse URL-encoded bodiesconst express = require('express');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(bodyParser.urlencoded({ extended: true }))//body-parser package is depreciated, to parse express now you just need these\napp.use(express.json()); //Used to parse JSON bodies\napp.use(express.urlencoded()); //Parse URL-encoded bodiesIf you are using the latest express module use this:\n\napp.use(express.json())\napp.use(express.urlencoded({extended: true}))const app = express()\napp.use(express.json({ limit: \"2mb\" }));\napp.use(express.urlencoded({ extended: true }));",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 31,
    "keyword": null,
    "link": null,
    "title": "express  build an api in nodejs using express to send emails using the gmail rest api without client libraries",
    "description": "def send_message(service, user_id, message):\n  try:\n    message = service.users().messages().send(userId=user_id, body=message).execute()\n\n    print('Message Id: %s' % message['id'])\n\n    return message\n  except Exception as e:\n    print('An error occurred: %s' % e)\n    return None\n\n\ndef create_message_with_attachment(sender, to, subject, message_text, file):\n  message = MIMEMultipart()\n  message['to'] = to\n  message['from'] = sender\n  message['subject'] = subject\n\n  msg = MIMEText(message_text)\n  message.attach(msg)\n\n  content_type, encoding = mimetypes.guess_type(file)\n\n  if content_type is None or encoding is not None:\n    content_type = 'application/octet-stream'\n\n  main_type, sub_type = content_type.split('/', 1)\n\n  if main_type == 'text':\n    fp = open(file, 'rb')\n    msg = MIMEText(fp.read().decode(\"utf-8\"), _subtype=sub_type)\n    fp.close()\n  elif main_type == 'image':\n    fp = open(file, 'rb')\n    msg = MIMEImage(fp.read(), _subtype=sub_type)\n    fp.close()\n  elif main_type == 'audio':\n    fp = open(file, 'rb')\n    msg = MIMEAudio(fp.read(), _subtype=sub_type)\n    fp.close()\n  else:\n    fp = open(file, 'rb')\n    msg = MIMEBase(main_type, sub_type)\n    msg.set_payload(fp.read())\n    fp.close()\n  filename = os.path.basename(file)\n  msg.add_header('Content-Disposition', 'attachment', filename=filename)\n  message.attach(msg)\n\n  raw_message = base64.urlsafe_b64encode(message.as_string().encode(\"utf-8\"))\n  return {'raw': raw_message.decode(\"utf-8\")}/**\n* @param $service Google_Service_Gmail an authorized Gmail API service instance.\n* @param $userId string User's email address or \"me\"\n* @param $message Google_Service_Gmail_Message\n* @return null|Google_Service_Gmail_Message\n*/\nfunction sendMessage($service, $userId, $message) {\n try {\n   $message = $service->users_messages->send($userId, $message);\n   print 'Message with ID: ' . $message->getId() . ' sent.';\n   return $message;\n } catch (Exception $e) {\n   print 'An error occurred: ' . $e->getMessage();\n }\n\n return null;\n}",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 32,
    "keyword": null,
    "link": null,
    "title": "express  check express version",
    "description": "local packages:\n~$ npm list\n\nglobally installed packages:\n~$ npm list -g\n\nspecific package:\n~$ npm list <package>npm view <package> versionCheck that from package.json",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 33,
    "keyword": null,
    "link": null,
    "title": "express  connect express to mongodb",
    "description": "npm i mongoose\n\nconst mongoose = require(\"mongoose\");\n\nmongoose\n  .connect(\n    \"your mongodb URI\",\n    {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n      useUnifiedTopology: true,\n    }\n  )\n  .then(() => console.log(\"mongodb connected\"))\n  .catch((err) => {\n    console.log(err.message);\n    process.exit(1);\n  });//using mongoose\nnpm i mongoose\n\nconst mongoose = require(\"mongoose\");\n\nmongoose\n  .connect(\n    \"your mongodb URI\",\n    {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n      useUnifiedTopology: true,\n    }\n  )\n  .then(() => console.log(\"mongodb connected\"))\n  .catch((err) => {\n    console.err(err.message);\n    process.exit(1);\n  });var MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', function (err, client) {\n  if (err) throw err\n\n  var db = client.db('animals')\n\n  db.collection('mammals').find().toArray(function (err, result) {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\nvar mysql = require('mysql')\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\n",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 34,
    "keyword": null,
    "link": null,
    "title": "express  connect mongo to express api",
    "description": "npm i mongoose\n\nconst mongoose = require(\"mongoose\");\n\nmongoose\n  .connect(\n    \"your mongodb URI\",\n    {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n      useUnifiedTopology: true,\n    }\n  )\n  .then(() => console.log(\"mongodb connected\"))\n  .catch((err) => {\n    console.log(err.message);\n    process.exit(1);\n  });//using mongoose\nnpm i mongoose\n\nconst mongoose = require(\"mongoose\");\n\nmongoose\n  .connect(\n    \"your mongodb URI\",\n    {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n      useUnifiedTopology: true,\n    }\n  )\n  .then(() => console.log(\"mongodb connected\"))\n  .catch((err) => {\n    console.err(err.message);\n    process.exit(1);\n  });",
    "reg_date": "2021-10-22T11:18:24.000Z"
  },
  {
    "id": 35,
    "keyword": null,
    "link": null,
    "title": "express  connecting mongoose with express js",
    "description": "//connect with mongodb\nmongoose.connect('mongodb://localhost:27017/your_db_name', {useNewUrlParser: true});\n//you can also specify with user and pass\nmongoose.connect('mongodb://username:password@host:port/database?options...', {useNewUrlParser: true});\n//or goto docs https://mongoosejs.com/docs/connections.htmlconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/test', {useNewUrlParser: true, useUnifiedTopology: true});\n",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 36,
    "keyword": null,
    "link": null,
    "title": "express  cors express",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})// CORS (Cross-Origin Resource Sharing) headers to support Cross-site HTTP requests\n\napp.all('*', function(req, res, next) {\n       res.header(\"Access-Control-Allow-Origin\", \"*\");\n       res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n       res.header('Access-Control-Allow-Headers', 'Content-Type');\n       next();\n});\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});//install\nnpm install cors\n//use\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar allowedOrigins = ['http://localhost:3000',\n                      'http://yourapp.com'];\napp.use(cors({  \n  origin: function(origin, callback){\n    // allow requests with no origin     \n    // (like mobile apps or curl requests)    \n    if(!origin) \n      return callback(null, true);    \n    if(allowedOrigins.indexOf(origin) === -1){\n      var msg = 'The CORS policy for this site does not ' +                \n          'allow access from the specified Origin.';      \n      return callback(new Error(msg), false);    \n    }    \n    return callback(null, true);  \n  }\n}));",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 37,
    "keyword": null,
    "link": null,
    "title": "express  create express server local",
    "description": "// this is your code\n// ZDev1#4511 on discord if you want more help!\n// first you should install express in the terminal\n// `npm i express`.\nconst express = require('express');\nconst app = express();\n\n// route\napp.get('/', (req,res)=>{\n  // Sending This is the home page! in the page\n  res.send('This is the home page!');\n});\n\n// Listening to the port\nlet PORT = 3000;\napp.listen(PORT)\n\n// FINISH!// create directory\n\n//npm init -y\n//npm i express --save\n\n//create public directory\n//create server.js\n\n// <---- In the server js file --->\n\n'use strict';\n\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));// to connect with frontend html\napp.use(express.json());//body parse\n\napp.get('/', function(req,res){\n\tres.send('This is the Homepage');\n  \t//res.sendFile('index.html');\n});\n\napp.listen(3000);\n",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 38,
    "keyword": null,
    "link": null,
    "title": "express  create mongodb express server npm",
    "description": "npm install mongo-express\n",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 39,
    "keyword": null,
    "link": null,
    "title": "express  create server with express js",
    "description": "// npm init\n// npm i express\n\nconst express = require('express');\nconst server = express();\n\nconst PORT = 3000;\n\n// Body parser\nserver.use(express.json());\n\n// Homme page\nserver.get('/', (req, res) => {\n  return res.send(\"<h1 style='text-align: center;'>Hello,<br />from the Express.js server!</h1>\");\n})\n\n// About page\nserver.get('/about', (req, res) => {\n  return res.send('<h2 style=\"text-align:center\">About us</h2>');\n})\n\n// 404 page\nserver.use((req, res, next) =>{\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile(__dirname + '/error404.html');\n    return;\n  }\n  // respond with json\n  else if (req.accepts('json')){\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  // respond with text\n  else {\n    res.type('txt').send('Error 404 - Not found');\n  }\n});\n\n// Listening to the port\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});const express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)// create directory\n\n//npm init -y\n//npm i express --save\n\n//create public directory\n//create server.js\n\n// <---- In the server js file --->\n\n'use strict';\n\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));// to connect with frontend html\napp.use(express.json());//body parse\n\napp.get('/', function(req,res){\n\tres.send('This is the Homepage');\n  \t//res.sendFile('index.html');\n});\n\napp.listen(3000);\n",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 40,
    "keyword": null,
    "link": null,
    "title": "express  default express structure",
    "description": "const express = require('express')\nconst cors = require('cors')\nconst bodyParser = require('body-parser')\nrequire('dotenv').config()\nconst ObjectId = require(\"mongodb\").ObjectId;\n\nconst app = express()\napp.use(cors())\napp.use(express.json())\nconst port = process.env.PORT || 5000;\n\napp.get('/', (req, res)=>{\n    res.send('welcome to backend')\n})\n\napp.listen(port, () => {\n    console.log(`App listening at localhost:${port}`);\n})",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 41,
    "keyword": null,
    "link": null,
    "title": "express  difference between res.send and res.json in express",
    "description": "res.send()\n\nSending a response can be achieved by calling the res.send() method.\nThe signature of this method looks like this: res.send([body]) where the body \ncan be any of the following: Buffer, String, an Object and an Array.\nThis method automatically sets the Content-Type response header as well\nbased on the argument passed to the send() method\n\n\nres.json()\nIt send a JSON response. This method is identical to res.send() when an object \nor array is passed, but it also converts non-objects to json.\n\n\nmain difference between res.json and res.send comes into picture when you \nhave to pass non objects as a response. res.json will convert non objects \n(ex. null, undefined etc) as well which are actually not a valid JSON whereas \nres.send will not convert them.",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 42,
    "keyword": null,
    "link": null,
    "title": "express  download binary files in express",
    "description": "var options = {\n    method: 'GET',\n    host: 'localhost',\n    port: port,\n    path: '/file'\n  };\n\nvar request = http.request(options, function(response) { \n  var data = []; \n\n  response.on('data', function(chunk) { \n    data.push(chunk); \n  }); \n\n  response.on('end', function() { \n    data = Buffer.concat(data); // do something with data \n  }); \n}); \n\nrequest.end();\n",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 43,
    "keyword": null,
    "link": null,
    "title": "express  ejs express layouts",
    "description": "let express = require('express');\nlet app = express();\n\napp.set('view engine', 'ejs');\n\napp.get('/', (req, res) => {\n  res.render('index', {foo: 'FOO'});\n});\n\napp.listen(4000, () => console.log('Example app listening on port 4000!'));var express = require('express');\nvar expressLayouts = require('express-ejs-layouts'); \nvar app = express(); app.set('view engine', 'ejs');\napp.use(expressLayouts); \napp.get('/', function(req, res) { \n  var locals = {    \n    title: 'Page Title',    \n    description: 'Page Description',    \n    header: 'Page Header'  };\n  res.render('the-view', locals);\n}); app.listen(3000);",
    "reg_date": "2021-10-22T11:18:25.000Z"
  },
  {
    "id": 44,
    "keyword": null,
    "link": null,
    "title": "express  err handling express",
    "description": "app.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\napp.get('/', function (req, res, next) {\n  fs.readFile('/file-does-not-exist', function (err, data) {\n    if (err) {\n      next(err) // Pass errors to Express.\n    } else {\n      res.send(data)\n    }\n  })\n})\n",
    "reg_date": "2021-10-22T11:18:26.000Z"
  },
  {
    "id": 45,
    "keyword": null,
    "link": null,
    "title": "express  example of validating fields on your own in express",
    "description": "const User = require('./models/user')\n\nexports.createUser = (req, res, next) => {\n  /** Here you need to validate user input. \n   Let's say only Name and email are required field\n */\n  \n  const { userName, email, phone, status } = req.body\n  if (userName && email &&  isValidEmail(email)) { \n    \n    // isValidEmail is some custom email function to validate email which you might need write on your own or use npm module\n    User.create({\n      userName,\n      email,\n      phone,\n      status,   \n    })\n    .then(user => res.json(user))\n    .catch(next)\n  }\n}",
    "reg_date": "2021-10-22T11:18:26.000Z"
  },
  {
    "id": 46,
    "keyword": null,
    "link": null,
    "title": "express  express.bodyparser express 4",
    "description": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n// Express v4.16.0 and higher\n// --------------------------\nconst express = require('express');\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// For Express version less than 4.16.0\n// ------------------------------------\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));",
    "reg_date": "2021-10-22T11:18:26.000Z"
  },
  {
    "id": 47,
    "keyword": null,
    "link": null,
    "title": "express  express 404",
    "description": "// Dopo tutte le altre route\n\napp.get('*', function(req, res, next) {\n    var err = new Error();\n    err.status = 404;\n    next(err);\n});\n\napp.use(function(err, req, res, next) {\n    if (err.status === 404) {\n        var data = {\n            title: '404 Not Found',\n            content: 'Oops, page not found!';\n        };\n        res.render('pages/404', data);\n    } else {\n        return next();\n    }\n});\n\napp.use(function(req, res, next){\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile('index.html');\n    return;\n  }\n\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n\n  // default to plain-text. send()\n  res.type('txt').send('404 - Not found');\n});app.use(function(req, res, next){\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.render('404', { url: req.url });\n    return;\n  }\n\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({ error: 'Not found' });\n    return;\n  }\n\n  // default to plain-text. send()\n  res.type('txt').send('Not found');\n});app.use(function (req, res, next) {\n  res.status(404).send(\"Sorry can't find that!\")\n})\n",
    "reg_date": "2021-10-22T11:18:26.000Z"
  },
  {
    "id": 48,
    "keyword": null,
    "link": null,
    "title": "express  express and node",
    "description": "basic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           // Load HTTP module\nconst http = require(\"http\");\n\nconst hostname = \"127.0.0.1\";\nconst port = 8000;\n\n// Create HTTP server \nconst server = http.createServer((req, res) => {\n\n   // Set the response HTTP header with HTTP status and Content type\n   res.writeHead(200, {'Content-Type': 'text/plain'});\n   \n   // Send the response body \"Hello World\"\n   res.end('Hello World\\n');\n});\n\n// Prints a log once the server starts listening\nserver.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n})\n",
    "reg_date": "2021-10-22T11:18:26.000Z"
  },
  {
    "id": 49,
    "keyword": null,
    "link": null,
    "title": "express  express and node pakages",
    "description": "var express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n   res.send('Hello World');\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n   \n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})var express = require('express');\nvar app = express();\n\n// This responds with \"Hello World\" on the homepage\napp.get('/', function (req, res) {\n   console.log(\"Got a GET request for the homepage\");\n   res.send('Hello GET');\n})\n\n// This responds a POST request for the homepage\napp.post('/', function (req, res) {\n   console.log(\"Got a POST request for the homepage\");\n   res.send('Hello POST');\n})\n\n// This responds a DELETE request for the /del_user page.\napp.delete('/del_user', function (req, res) {\n   console.log(\"Got a DELETE request for /del_user\");\n   res.send('Hello DELETE');\n})\n\n// This responds a GET request for the /list_user page.\napp.get('/list_user', function (req, res) {\n   console.log(\"Got a GET request for /list_user\");\n   res.send('Page Listing');\n})\n\n// This responds a GET request for abcd, abxcd, ab123cd, and so on\napp.get('/ab*cd', function(req, res) {   \n   console.log(\"Got a GET request for /ab*cd\");\n   res.send('Page Pattern Match');\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n   \n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})var express = require('express');\nvar app = express();\n\napp.use(express.static('public'));\n\napp.get('/', function (req, res) {\n   res.send('Hello World');\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n\n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})",
    "reg_date": "2021-10-22T11:18:26.000Z"
  },
  {
    "id": 50,
    "keyword": null,
    "link": null,
    "title": "express  express api",
    "description": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\napp.get('/', (req, res) => {\n  req.header('User-Agent')\n})\n// Use the Request.header() method to access\n//one individual request header’s valueExpress.js, or simply Express, is a web application framework for Node.js,\nreleased as free and open-source software under the MIT License.\n\nIt is designed for building web applications and APIs.\nIt has been called the de facto standard server framework for Node.js.app.render('email', function (err, html) {\n  // ...\n})\n\napp.render('email', { name: 'Tobi' }, function (err, html) {\n  // ...\n})\napp.get('/index', (req, res) => {\n    res.render('index')\n})",
    "reg_date": "2021-10-22T11:18:26.000Z"
  },
  {
    "id": 51,
    "keyword": null,
    "link": null,
    "title": "express  express authorization middleware",
    "description": "const express = require('express');\nconst jwt = require('jsonwebtoken');\n\napp.set('view engine', 'ejs');\n// Simple page that a user must be authorized to access\n// using JSON web tokens:\napp.get('/lockedpage', authToken, (req, res) => {\n\tres.render('lockedpage', { user: req.user });\n});\n\nfunction authToken(req, res, next) {\n  const token = req.cookies['auth-token'];\n  if (token == null) return res.redirect('/login');\n  jwt.verify(token, process.env.ACCESS_SECRET, (err, user) => {\n      if (err) return res.redirect('/login');\n      req.user = user;\n      next();\n  })\n}",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 52,
    "keyword": null,
    "link": null,
    "title": "express  express basic routing syntax",
    "description": "var express = require('express')\nvar router = express.Router()\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds')\n})\n\nmodule.exports = router\nconst express = require('express');\nconst mysql = require('mysql');\n\n// Connecting with database\nconst db = mysql.createConnection({\n  host: 'localhost',\t\t\t\t\t// The host you're using\n  user: 'yourusername',\t\t\t\t\t// The username you use to enter database\n  password: 'yourpassword'\t\t\t\t// Your password to your username\n});\n\ndb.connect((error) => {\n  if(error) {\n    throw error;\n  }\n  console.log('MySQL Connected');\n});\n\nconst app = express();\n\napp.get('yourroute', (request, response) => {\n  let sql = 'SELECT * FROM yourtable';\n  let query = db.query(sql, (error, result) => {\n    if(error) {\n      throw error;\n    }\n    console.log(result)\t\t\t\t\t// Use the result you get back here\n  })\n});\n\napp.listen('3000', () => {\n  console.log('Server is listening on port 3000');\n});\n\napp.METHOD(PATH, HANDLER)\n",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 53,
    "keyword": null,
    "link": null,
    "title": "express  express body-parser deprecated",
    "description": "The package bodyParser is deprecated. You will get this warning with these lines of code:\n\napp.use(bodyparser.json()); \napp.use(bodyParser.urlencoded({extended: true}));\n\nIf you are using Express 4.16+ you can now replace those lines with:\n\napp.use(express.json()); \napp.use(express.urlencoded()); //Parse URL-encoded bodiesconst express = require('express');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(bodyParser.urlencoded({ extended: true }))If you are using the latest express module use this:\n\napp.use(express.json())\napp.use(express.urlencoded({extended: true}))body-parser has been deprecated from express v4.* \nUse body-parser package instead.\nnpm i body-parser\n\nimport bodyParser from \"body-parser\";//for typscript code only, use require for js\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));/** @format */\n\nconst express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst bodyParser = require(\"body-parser\");\nconst PORT = process.env.PORT || 3000;\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// parse application/json\napp.use(bodyParser.json());\n\n//connecting to db\ntry {\n    mongoose.connect('mongodb://localhost/YOUR_DB_NAME', {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      \tuseCreateIndex: true,\n      }, () =>\n      console.log(\"connected\"));\n  } catch (error) {\n    console.log(\"could not connect\");\n  }\n\napp.get(\"/\", (req, res) => {\n  res.send(\"home\");\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));\n",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 54,
    "keyword": null,
    "link": null,
    "title": "express  express body-parser is depreciated",
    "description": "//body-parser package is depreciated, to parse express now you just need these\napp.use(express.json()); //Used to parse JSON bodies\napp.use(express.urlencoded()); //Parse URL-encoded bodies",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 55,
    "keyword": null,
    "link": null,
    "title": "express  express body parser",
    "description": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n$ npm install body-parser// Express v4.16.0 and higher\n// --------------------------\nconst express = require('express');\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// For Express version less than 4.16.0\n// ------------------------------------\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));var express = require(\"express\");\nvar app = express();\nvar bodyParser = require(\"body-parser\");\napp.use(bodyParser.urlencoded({extended: true}));// Express/Connect top-level generic\n// This example demonstrates adding a generic JSON and URL-encoded parser as a top-level middleware, which will parse the bodies of all incoming requests. \n// This is the simplest setup.\n\nvar express = require('express')\nvar bodyParser = require('body-parser') \nvar app = express() \n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false })) \n\n// parse application/json\napp.use(bodyParser.json()) \n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')  \n  res.write('you posted:\\n')  \nres.end(JSON.stringify(req.body, null, 2))})$ npm install body-parser\n",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 56,
    "keyword": null,
    "link": null,
    "title": "express  express bodyparser",
    "description": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n// Express v4.16.0 and higher\n// --------------------------\nconst express = require('express');\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// For Express version less than 4.16.0\n// ------------------------------------\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));var express = require('express')\n  var bodyParser = require('body-parser')\n  var app = express()\n  // parseapplication/x-www-form-urlencoded\n  app.use(bodyParser.urlencoded({ extended: false }))\n  // parse application/json\n  app.use(bodyParser.json()) app.use(function (req, res) {  res.setHeader('Content-Type', 'text/plain')  res.write('you posted:\\n')  res.end(JSON.stringify(req.body, null, 2))})<script>\nconst bodyParser = require(\"body-parser\");\n\napp.use(bodyParser.urlencoded({extended:true}));\n  \napp.post(\"/\", function(req, res){\n  let firstName = req.body.fNAME;\n  \n});\n</script>\n\n<input type=\"text\" name=\"fNAME\" placeholder=\"First Name\">/** @format */\n\nconst express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst bodyParser = require(\"body-parser\");\nconst PORT = process.env.PORT || 3000;\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// parse application/json\napp.use(bodyParser.json());\n\n//connecting to db\ntry {\n    mongoose.connect('mongodb://localhost/YOUR_DB_NAME', {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      \tuseCreateIndex: true,\n      }, () =>\n      console.log(\"connected\"));\n  } catch (error) {\n    console.log(\"could not connect\");\n  }\n\napp.get(\"/\", (req, res) => {\n  res.send(\"home\");\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n\n",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 57,
    "keyword": null,
    "link": null,
    "title": "express  express bodyparser deprecated",
    "description": "The package bodyParser is deprecated. You will get this warning with these lines of code:\n\napp.use(bodyparser.json()); \napp.use(bodyParser.urlencoded({extended: true}));\n\nIf you are using Express 4.16+ you can now replace those lines with:\n\napp.use(express.json()); \napp.use(express.urlencoded()); //Parse URL-encoded bodies//body-parser package is depreciated, to parse express now you just need these\napp.use(express.json()); //Used to parse JSON bodies\napp.use(express.urlencoded()); //Parse URL-encoded bodiesIf you are using the latest express module use this:\n\napp.use(express.json())\napp.use(express.urlencoded({extended: true}))body-parser has been deprecated from express v4.* \nUse body-parser package instead.\nnpm i body-parser\n\nimport bodyParser from \"body-parser\";//for typscript code only, use require for js\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));const express = require('express');\n\napp.use(express.urlencoded({ extended: true }));app.use(bodyParser.urlencoded());\n\napp.use(bodyParser.json());",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 58,
    "keyword": null,
    "link": null,
    "title": "express  express bodyparser multipart/form-data",
    "description": "var express = require('express');\nvar bodyParser = require('body-parser');\nvar multer = require('multer');\nvar upload = multer();\nvar app = express();\n\napp.get('/', function(req, res){\n   res.render('form');\n});\n\napp.set('view engine', 'pug');\napp.set('views', './views');\n\n// for parsing application/json\napp.use(bodyParser.json()); \n\n// for parsing application/xwww-\napp.use(bodyParser.urlencoded({ extended: true })); \n//form-urlencoded\n\n// for parsing multipart/form-data\napp.use(upload.any()); \napp.use(express.static('public'));\n\napp.post('/', function(req, res){\n   console.log(req.body);\n   res.send(\"recieved your request!\");\n});\napp.listen(3000);",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 59,
    "keyword": null,
    "link": null,
    "title": "express  express case sensitive routing",
    "description": "// express case sensitive routing\napp.enable('case sensitive routing');",
    "reg_date": "2021-10-22T11:18:27.000Z"
  },
  {
    "id": 60,
    "keyword": null,
    "link": null,
    "title": "express  express check if object is empty",
    "description": "if(Object.keys(obj).length === 0) {\n\n}//when this.state.errors object is empty \nif (Object.keys(this.state.errors).length == 0) {\n  this.props.updateUser(user);\n  this.props.navigation.goBack();\n}",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 61,
    "keyword": null,
    "link": null,
    "title": "express  express command not found mac",
    "description": "sudo npm install -g express-generator\n",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 62,
    "keyword": null,
    "link": null,
    "title": "express  express cors error",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})// CORS (Cross-Origin Resource Sharing) headers to support Cross-site HTTP requests\n\napp.all('*', function(req, res, next) {\n       res.header(\"Access-Control-Allow-Origin\", \"*\");\n       res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n       res.header('Access-Control-Allow-Headers', 'Content-Type');\n       next();\n});\n//install\nnpm install cors\n//use\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar allowedOrigins = ['http://localhost:3000',\n                      'http://yourapp.com'];\napp.use(cors({  \n  origin: function(origin, callback){\n    // allow requests with no origin     \n    // (like mobile apps or curl requests)    \n    if(!origin) \n      return callback(null, true);    \n    if(allowedOrigins.indexOf(origin) === -1){\n      var msg = 'The CORS policy for this site does not ' +                \n          'allow access from the specified Origin.';      \n      return callback(new Error(msg), false);    \n    }    \n    return callback(null, true);  \n  }\n}));$ npm install cors\n",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 63,
    "keyword": null,
    "link": null,
    "title": "express  express cors policy",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n\napp.get('/', function(req, res, next) {\n  // Handle the get for this route\n});\n\napp.post('/', function(req, res, next) {\n // Handle the post for this route\n});//install\nnpm install cors\n//use\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n$ npm install cors\n",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 64,
    "keyword": null,
    "link": null,
    "title": "express  express cors policy no 'access-control-allow-origin'",
    "description": "$ npm install cors\n",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 65,
    "keyword": null,
    "link": null,
    "title": "express  express database",
    "description": "Some Databases : \n\n1.https://pouchdb.com/ - Light Weight - Alot of Functions\n2.https://dbdb.io/db/nedb - Light Weight - Easy To Use \n3.https://www.mongodb.com/ - Best DB - Complex To Usevar MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', function (err, client) {\n  if (err) throw err\n\n  var db = client.db('animals')\n\n  db.collection('mammals').find().toArray(function (err, result) {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\nvar mysql = require('mysql')\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\n",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 66,
    "keyword": null,
    "link": null,
    "title": "express  express delete image",
    "description": "const router = express.Router();\nconst path = require(\"path\");\nconst fs = require('fs');\nvar multer = require('multer')\nvar upload = multer({ dest: 'uploads/' })\n\nrouter.get('/:folder/:id', async (req, res) => {\n    let filepath = path.join(__dirname + `/../images/${req.params.folder}/${req.params.id}.png`);\n    res.sendFile(filepath);\n});\n\nconst upload = async (image, folder, id) => {\n\n    let dir = `images`;\n\n    if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir);\n    }\n\n    dir = `images/${folder}`;\n\n    if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir);\n    }\n\n    await image.mv(`images/${folder}/${id}.png`);\n\n    return `${config.DOMAIN}/images/${folder}/${id}`;\n}\n\nrouter.post('/:folder/:id', upload.single('file'), async (req, res) => {\n    try {\n\n        let image = req.files.image;\n\n        if (!image)\n            return res.status(400).send({ message: 'Image not provided!' });\n\n        const imageUrl = await upload(image, req.params.folder, req.params.id);\n\n        if (imageUrl)\n            res.status(201).send({ message: \"Image uploaded\", url: imageUrl });\n\n    } catch (e) {\n        res.status(400).send({ message: \"Error uploading image!\", error: e.toString(), req: req.body });\n    }\n});\n\nrouter.delete('/:folder/:id', async (req, res) => {\n    try {\n        fs.unlinkSync(`images/${req.params.folder}/${req.params.id}.png`);\n\n        res.status(201).send({ message: \"Image deleted\" });\n\n    } catch (e) {\n        res.status(400).send({ message: \"Error deleting image!\", error: e.toString(), req: req.body });\n    }\n});\n\nmodule.exports = router;",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 67,
    "keyword": null,
    "link": null,
    "title": "express  express download file",
    "description": "app.get((req, res, next) => {\n  res.download('/file/to/be/downloaded.ext');\n  res.status(200);\n});",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 68,
    "keyword": null,
    "link": null,
    "title": "express  express error handling",
    "description": "app.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\napp.get('/', function (req, res) {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\napp.get('/', function (req, res, next) {\n  fs.readFile('/file-does-not-exist', function (err, data) {\n    if (err) {\n      next(err) // Pass errors to Express.\n    } else {\n      res.send(data)\n    }\n  })\n})\n",
    "reg_date": "2021-10-22T11:18:28.000Z"
  },
  {
    "id": 69,
    "keyword": null,
    "link": null,
    "title": "express  express error middleware",
    "description": "app.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\nfunction errorHandler (err, req, res, next) {\n  if (res.headersSent) {\n    return next(err)\n  }\n  res.status(500)\n  res.render('error', { error: err })\n}\napp.get('/', function (req, res) {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\n",
    "reg_date": "2021-10-22T11:18:29.000Z"
  },
  {
    "id": 70,
    "keyword": null,
    "link": null,
    "title": "express  express example using puppeteer",
    "description": "require('dotenv/config')\nconst puppeteer = require('puppeteer')\n\n(async () => {\n\ttry {\n\t\tconst browser = await puppeteer.launch({\n\t\t\theadless: false,\n\t\t\targs: [\n\t\t\t\t'--allow-external-pages',\n\t\t\t\t'--allow-third-party-modules',\n\t\t\t\t'--data-reduction-proxy-http-proxies',\n\t\t\t\t'--no-sandbox'\n\t\t\t]\n\t\t})\n\t\tconst context = await browser.createIncognitoBrowserContext()\n\t\tconst page = await context.newPage()\n\t\tawait page.goto('https://medium.com', { waitUntil: 'networkidle2' })\n\t\tawait page.setUserAgent(process.env.USER_AGENT)\n\t\t// await page.setViewport({ width: 1920, height: 1080 })\n\t\tawait page.evaluate(() => window.scrollBy(0, 1000))\n\t\tawait page.waitForTimeout()\n\t\tawait page.click('.qw a')\n\t\tawait page.waitForNavigation({ waitUntil: 'networkidle2', delay: 1000 })\n\t\tawait page.click('a[aria-label=\"Search\"]')\n\t\tawait page.waitForNavigation({ waitUntil: 'networkidle2', delay: 1000 })\n\t\tawait page.focus('.js-searchInput')\n\t\tawait page.type('.js-searchInput', 'react', { delay: 100 })\n\t\tawait page.waitForSelector('.js-searchInput', { timeout: 1000 })\n\t\tawait page.keyboard.press(String.fromCharCode(13))\n\t\tawait page.waitForSelector('.js-postListHandle', { timeout: 1000 })\n\t\tawait page.screenshot({ path: 'screnshoot.jpg', quality: 80 })\n\n\t\tawait browser.close()\n\t} catch (err) {\n\t\tconsole.log(`'Puppeteer Error Detencted -> ${err}'`)\n\t}\n})()\n",
    "reg_date": "2021-10-22T11:18:29.000Z"
  },
  {
    "id": 71,
    "keyword": null,
    "link": null,
    "title": "express  express file upload mv",
    "description": "app.post('/upload-avatar', async (req, res) => {\n    try {\n        if(!req.files) {\n            res.send({\n                status: false,\n                message: 'No file uploaded'\n            });\n        } else {\n            //Use the name of the input field (i.e. \"avatar\") to retrieve the uploaded file\n            let avatar = req.files.avatar;\n            \n            //Use the mv() method to place the file in upload directory (i.e. \"uploads\")\n            avatar.mv('./uploads/' + avatar.name);\n\n            //send response\n            res.send({\n                status: true,\n                message: 'File is uploaded',\n                data: {\n                    name: avatar.name,\n                    mimetype: avatar.mimetype,\n                    size: avatar.size\n                }\n            });\n        }\n    } catch (err) {\n        res.status(500).send(err);\n    }\n});\n",
    "reg_date": "2021-10-22T11:18:29.000Z"
  },
  {
    "id": 72,
    "keyword": null,
    "link": null,
    "title": "express  express formidable",
    "description": "// make this a middleware function, \n// then put it on the route like you used jwt,\n// then get the value with req.users.\n\nconst { IncomingForm } = require('formidable')\nconst { resolve } = require('path')\nconst { existsSync, writeFileSync } = require('fs')\n\nmodule.exports = (req, res, next) => {\n  const form = new IncomingForm({\n    maxFileSize: 1 * 1024 * 1024,\n    keepExtensions: true\n  })\n\n  form.parse(req, (error, fields, file) => {\n    if (error) return next(error)\n    const patternFile = /\\.(jpg|jpeg|png|svg|gif|raw|webp)$/gi.test(file.productImage.name)\n\n    if (patternFile) {\n      const pathFile = resolve(process.cwd(), 'servers/uploads/', file.productImage.name)\n      const fileExits = existsSync(pathFile)\n      if (!fileExits) {\n        writeFileSync(pathFile)\n        req.users = JSON.parse(JSON.stringify({ fields, file }))\n        return next()\n      }\n      req.users = JSON.parse(JSON.stringify({ fields, file }))\n      return next()\n    }\n  })\n}\nconst express = require('express');const formidable = require('formidable'); const app = express(); app.get('/', (req, res) => {  res.send(`    <h2>With <code>\"express\"</code> npm package</h2>    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">      <div>Text field title: <input type=\"text\" name=\"title\" /></div>      <div>File: <input type=\"file\" name=\"someExpressFiles\" multiple=\"multiple\" /></div>      <input type=\"submit\" value=\"Upload\" />    </form>  `);}); app.post('/api/upload', (req, res, next) => {  const form = formidable({ multiples: true });   form.parse(req, (err, fields, files) => {    if (err) {      next(err);      return;    }    res.json({ fields, files });  });}); app.listen(3000, () => {  console.log('Server listening on http://localhost:3000 ...');});",
    "reg_date": "2021-10-22T11:18:29.000Z"
  },
  {
    "id": 73,
    "keyword": null,
    "link": null,
    "title": "express  express generator",
    "description": "$ npm install express-generator -g\nnpx express-generator --view=no-view my-app# You can run the application generator with the npx command (available in Node.js 8.2.0).\n$ npx express-generator\n# For earlier Node versions, install the application generator as a global npm package and then launch it:\n$ npm install -g express-generator\n# For example, the following creates an Express app named myapp. The app will be created in a folder named myapp in the current working directory and the view engine will be set to Pug:\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/bin\n   create : myapp/bin/www\n# Then install dependencies:\n$ cd myapp\nnpm install\n# On MacOS or Linux, run the app with this command:\n$ DEBUG=myapp:* npm start\n# On Windows Command Prompt, use this command:\n$ set DEBUG=myapp:* & npm start\n# On Windows PowerShell, use this command:\n$env:DEBUG='myapp:*'; npm start## Command\n$ npx express-generator\n\n: 'For earlier Node versions, install the application generator as a global\nnpm package and then launch it':\n$ npm install -g express-generator\n$ express\n\n## Display the command options with the -h option:\n$ express -h$ npm install -g express-generator$ express -h\n\n  Usage: express [options][dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n        --no-view       generate without view engine\n    -v, --view <engine> add view <engine> support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory",
    "reg_date": "2021-10-22T11:18:29.000Z"
  },
  {
    "id": 74,
    "keyword": null,
    "link": null,
    "title": "express  express generator ejs",
    "description": "npx express-generator$ npx express-generator\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/bin\n   create : myapp/bin/www\n",
    "reg_date": "2021-10-22T11:18:29.000Z"
  },
  {
    "id": 75,
    "keyword": null,
    "link": null,
    "title": "express  express generator error handling",
    "description": "app.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\napp.get('/', function (req, res) {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\n",
    "reg_date": "2021-10-22T11:18:29.000Z"
  },
  {
    "id": 76,
    "keyword": null,
    "link": null,
    "title": "express  express get",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressapp.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});var express = require('express');\nvar router = express.Router();\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now());\n  next();\n});\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page');\n});\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds');\n});\n\nmodule.exports = router;app.get('/', function (req, res) {\n  res.send('Hello World!')\n})\napp.get('/index', (req, res) => {\n    res.render('index')\n})",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 77,
    "keyword": null,
    "link": null,
    "title": "express  express get all endpoints",
    "description": "const routes = {}\nfunction routerRecursion(middleware, pointer, currentName) {\n  if (middleware.route) { // routes registered directly on the app\n    if (!Array.isArray(pointer['routes'])) {\n      pointer['routes'] = []\n    }\n    const routeObj = {\n      path: middleware.route.path,\n      method: middleware.route.stack[0].method\n    }\n    pointer['routes'].push(routeObj)\n  } else if (middleware.name === 'router') { // inside router\n    const current = middleware.regexp.toString().replace(/\\/\\^\\\\\\//, '').replace(/\\\\\\/\\?\\(\\?\\=\\\\\\/\\|\\$\\)\\/\\i/, '')\n    pointer[current] = {}\n    middleware.handle.stack.forEach(function (handler) {\n      routerRecursion(handler, pointer[current], current)\n    });\n  }\n}\napp._router.stack.forEach(function (middleware) {\n  routerRecursion(middleware, routes, 'main')\n});\nconsole.log(routes);",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 78,
    "keyword": null,
    "link": null,
    "title": "express  express get all routes and methods",
    "description": "const listEndpoints = require(\"express-list-endpoints\"); // npm i express-list-endpoints\nconsole.log(listEndpoints(app)); // where app = express();function print (path, layer) {\n  if (layer.route) {\n    layer.route.stack.forEach(print.bind(null, path.concat(split(layer.route.path))))\n  } else if (layer.name === 'router' && layer.handle.stack) {\n    layer.handle.stack.forEach(print.bind(null, path.concat(split(layer.regexp))))\n  } else if (layer.method) {\n    console.log('%s /%s',\n      layer.method.toUpperCase(),\n      path.concat(split(layer.regexp)).filter(Boolean).join('/'))\n  }\n}\n\nfunction split (thing) {\n  if (typeof thing === 'string') {\n    return thing.split('/')\n  } else if (thing.fast_slash) {\n    return ''\n  } else {\n    var match = thing.toString()\n      .replace('\\\\/?', '')\n      .replace('(?=\\\\/|$)', '$')\n      .match(/^\\/\\^((?:\\\\[.*+?^${}()|[\\]\\\\\\/]|[^.*+?^${}()|[\\]\\\\\\/])*)\\$\\//)\n    return match\n      ? match[1].replace(/\\\\(.)/g, '$1').split('/')\n      : '<complex:' + thing.toString() + '>'\n  }\n}\n\napp._router.stack.forEach(print.bind(null, []))",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 79,
    "keyword": null,
    "link": null,
    "title": "express  express get cookie",
    "description": "const cookieParser = require('cookie-parser');\nconst express = require('express');\nconst app = express();\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n  console.log('Cookies: ', req.cookies);\n  console.log('Signed Cookies: ', req.signedCookies);\n});\n\napp.listen(3000);",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 80,
    "keyword": null,
    "link": null,
    "title": "express  express get params after ?",
    "description": "GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})\n\nreq.params refers to items with a ':' in the URL and req.query refers to items associated with the '?app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 81,
    "keyword": null,
    "link": null,
    "title": "express  express get port from request",
    "description": "const proxyHost = req.headers[\"x-forwarded-host\"];\nconst host ? proxyHost : req.headers.host;\n",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 82,
    "keyword": null,
    "link": null,
    "title": "express  express get query params from url",
    "description": "GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})app.get(\"/users/:id\",(req,res)=>{ // https://domain.com/users/817178\n  const id = req.params.id ; //  817178\n})\napp.get(\"/users?name=anas\",(req,res)=> { // https://domain.com/users?name=anas\nconst name  = req.query.name ; //anas\n})        var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n  res.send('id: ' + req.query.id);\n});\n\napp.listen(3000);// GET /search?q=tobi+ferret\nconsole.dir(req.query.q)\n// => 'tobi ferret'\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nconsole.dir(req.query.order)\n// => 'desc'\n\nconsole.dir(req.query.shoe.color)\n// => 'blue'\n\nconsole.dir(req.query.shoe.type)\n// => 'converse'\n\n// GET /shoes?color[]=blue&color[]=black&color[]=red\nconsole.dir(req.query.color)\n// => ['blue', 'black', 'red']\n",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 83,
    "keyword": null,
    "link": null,
    "title": "express  express get raw path",
    "description": "const url = require('url');\nconst express = require('express');\n\nconst app = express();\napp.use((req, res, next) => {\n  const path = url.parse(req.url).path;\n  // Do something...\n});\n\nconst port = 3000;\napp.listen(port, console.log(`Listening on port ${port}.`));",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 84,
    "keyword": null,
    "link": null,
    "title": "express  express get raw query",
    "description": "const url = require('url');\nconst express = require('express');\n\nconst app = express();\napp.use((req, res, next) => {\n  const query = url.parse(req.url).query;\n  // Do something...\n});\n\nconst port = 3000;\napp.listen(port, console.log(`Listening on port ${port}.`));",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 85,
    "keyword": null,
    "link": null,
    "title": "express  express get request origin",
    "description": "app.use((req, res, next) => {\n  const host = req.get('host');\n  const origin = req.get('origin');\n});",
    "reg_date": "2021-10-22T11:18:30.000Z"
  },
  {
    "id": 86,
    "keyword": null,
    "link": null,
    "title": "express  express get slash value",
    "description": "app.get('/new/:url(.*)', (req, res) => {\n  console.log(req.params.url) // will output 'https://www.google.com'\n// --- OR ---\napp.get('/new/:url(*)', (req, res) => {\n  console.log(req.params.url) // will output 'https://www.google.com'",
    "reg_date": "2021-10-22T11:18:31.000Z"
  },
  {
    "id": 87,
    "keyword": null,
    "link": null,
    "title": "express  express get url parameters",
    "description": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});app.get(\"/users/:id\",(req,res)=>{ // https://domain.com/users/817178\n  const id = req.params.id ; //  817178\n})\napp.get(\"/users?name=anas\",(req,res)=> { // https://domain.com/users?name=anas\nconst name  = req.query.name ; //anas\n})        // http://localhost:8080/api/1\napp.get('/api/:version', function(req, res) {\n    res.send(req.params.version);\n});Route path: /users/:userId/books/:bookId\nRequest URL: http://localhost:3000/users/34/books/8989\nreq.params: { \"userId\": \"34\", \"bookId\": \"8989\" }\nURL Parameters\nThese are information that are passed through the URL like so:\n\nhttp://example.com/api/users?id=4&token=sdfa3&geo=us",
    "reg_date": "2021-10-22T11:18:31.000Z"
  },
  {
    "id": 88,
    "keyword": null,
    "link": null,
    "title": "express  express getting options instead of post",
    "description": "// 'OPTIONS' is a standard request send by browsers BEFORE your request\n// Your server needs to handle these requests appropriately\n// Please see source and upvote the answer I got this from to share credit\n\nvar express = require('express')\n  , cors = require('cors')\n  , app = express();\nconst corsOptions = {\n  origin: true,\n  credentials: true\n}\napp.options('*', cors(corsOptions)); // preflight OPTIONS; put before other routes\napp.listen(80, function(){\n  console.log('CORS-enabled web server listening on port 80');\n});",
    "reg_date": "2021-10-22T11:18:31.000Z"
  },
  {
    "id": 89,
    "keyword": null,
    "link": null,
    "title": "express  express grpc example",
    "description": "example express grpc using typescript easy to understand, before starting using grpc, please read this article below\n\nhttps://github.com/restuwahyu13/express-grpc-rest-api\n\nwhat is grpc : https://bit.ly/3c892HO\nwhat is protocol buffer: https://bit.ly/3qPTxZw",
    "reg_date": "2021-10-22T11:18:31.000Z"
  },
  {
    "id": 90,
    "keyword": null,
    "link": null,
    "title": "express  express handlebars",
    "description": "$ npm install express-handlebars$ npm install --save express express-handlebars\n$ npm install express-handlebarsconst express = require('express')\nconst path = require('path')\n**const Handlebars = require('handlebars')**\n**const hbs = require('express-handlebars');**\nconst bodyParser = require('body-parser');\n\n**const { allowInsecurePrototypeAccess } = require('@handlebars/allow-prototype-access');**\nconst employeeController = require('./controller/employeeController')\n\nconst app = express()\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(bodyParser.json())\n\napp.set('views', path.join(__dirname, '/views/'))\napp.engine('hbs', hbs({ extname: 'hbs', defaultLayout: 'mainLayout', layoutsDir: __dirname + '/views/layouts/', **handlebars: allowInsecurePrototypeAccess(Handlebars)** }))\napp.set('view engine', 'hbs')\n\napp.listen(3000, () => {\n    console.log('Server started at port 3000')\n})\n\napp.use(employeeController)\nrouter.get('/list', (req, res) => {\nEmployee.find((err, docs) => {\n    if (!err) {\n        res.render(\"employee/list\", {\n            list: docs,\n        });\n    }\n    else {\n        console.log('Error in retrieving employee list :' + err);\n    }\n})**.lean()**; // It is prevent the warning when trying to display records\n",
    "reg_date": "2021-10-22T11:18:31.000Z"
  },
  {
    "id": 91,
    "keyword": null,
    "link": null,
    "title": "express  express hello world",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst cors = require('cors')\nconst bcrypt = require('bcrypt')\nconst jwt = require('jsonwebtoken')\n\n//connecting to my cluster database online\nmongoose.connect('mongodb+srv://username:password@clustername.elei8.mongodb.net/databasename?retryWrites=true&w=majority', {useUnifiedTopology: true, useNewUrlParser: true, useCreateIndex: true });\n\n//initializing the app \nconst app = express()\n\n//required middlware\napp.use(cors())\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\n\n//Setting default port for the backend server\nconst PORT = process.env.PORT || 3333\n// run in the terminal : export PORT=3333 {{justincase}}\n\n\n//Test server page running\napp.get('/', (req, res) => {\n    res.send(`Hello World ,,,, backend is running on port ${PORT}`)\n})\n\n// Console log for terminal for server listening\napp.listen(PORT, (err) => {\n    if(err) return console.log(err);\n    console.log(`Server listening on port ${PORT}`)\n})\nconst express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)// create directory\n\n//npm init -y\n//npm i express --save\n\n//create public directory\n//create server.js\n\n// <---- In the server js file --->\n\n'use strict';\n\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));// to connect with frontend html\napp.use(express.json());//body parse\n\napp.get('/', function(req,res){\n\tres.send('This is the Homepage');\n  \t//res.sendFile('index.html');\n});\n\napp.listen(3000);\n",
    "reg_date": "2021-10-22T11:18:31.000Z"
  },
  {
    "id": 92,
    "keyword": null,
    "link": null,
    "title": "express  express hello world example",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst cors = require('cors')\nconst bcrypt = require('bcrypt')\nconst jwt = require('jsonwebtoken')\n\n//connecting to my cluster database online\nmongoose.connect('mongodb+srv://username:password@clustername.elei8.mongodb.net/databasename?retryWrites=true&w=majority', {useUnifiedTopology: true, useNewUrlParser: true, useCreateIndex: true });\n\n//initializing the app \nconst app = express()\n\n//required middlware\napp.use(cors())\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\n\n//Setting default port for the backend server\nconst PORT = process.env.PORT || 3333\n// run in the terminal : export PORT=3333 {{justincase}}\n\n\n//Test server page running\napp.get('/', (req, res) => {\n    res.send(`Hello World ,,,, backend is running on port ${PORT}`)\n})\n\n// Console log for terminal for server listening\napp.listen(PORT, (err) => {\n    if(err) return console.log(err);\n    console.log(`Server listening on port ${PORT}`)\n})\nconst express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)",
    "reg_date": "2021-10-22T11:18:31.000Z"
  },
  {
    "id": 93,
    "keyword": null,
    "link": null,
    "title": "express  express http to https",
    "description": "const fs = require('fs');\nconst https = require('https');\n\nconst app = require('express')();\napp.get('*', (req, res) => res.send('<h1>Hello, World</h1>'));\n\nconst server = https.createServer({\n  key: fs.readFileSync(`${__dirname}/localhost-key.pem`, 'utf8'),\n  cert: fs.readFileSync(`${__dirname}/localhost.pem`, 'utf8')\n}, app);\n\nawait server.listen(443);var express = require('express');var app = express(); var redirectToHTTPS = require('express-http-to-https').redirectToHTTPS // Don't redirect if the hostname is `localhost:port` or the route is `/insecure`app.use(redirectToHTTPS([/localhost:(\\d{4})/], [/\\/insecure/], 301)); app.get('/', function (req, res) {  res.send('Hello World!');}); app.get('/insecure', function (req, res) {  res.send('Dangerous!');}); app.listen(3000, function () {  console.log('Example app listening on port 3000!');}); app.listen(8080, function () {  console.log('Example app listening on port 8080 insecurely!');});",
    "reg_date": "2021-10-22T11:18:31.000Z"
  },
  {
    "id": 94,
    "keyword": null,
    "link": null,
    "title": "express  express import",
    "description": "// app.js\nimport express from 'express';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport logger from 'morgan';\nimport indexRouter from './routes/index';\nimport usersRouter from './routes/users';\nvar app = express();\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, '../public')));\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\nexport default app;",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 95,
    "keyword": null,
    "link": null,
    "title": "express  express in node js",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n$ npm install express --no-save\nbasic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           $ npm init --y //add the package.json file\n\n$ npm install express --no-save\n\nconst express = require('express')\nconst app = express()\n\n//cors to fix cors origin, body-parser to fix the post value on the server\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\napp.use(cors());\napp.use(bodyParser.json());\n\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\nrouter.get('/admin/:id?', (req, res) => {\n  let id = req.params.id;\n}\n\napp.post('/admin', (req, res) => {\n  const user = req.body.user;\n  res.send('Hello World!', user)\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 96,
    "keyword": null,
    "link": null,
    "title": "express  express install",
    "description": "npm i express$ npm install express --no-save\nnpm install express@4$ npx express-generator\n",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 97,
    "keyword": null,
    "link": null,
    "title": "express  express js",
    "description": "$ npm install express --no-save\nnpm init -y\nnpm i express\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n});\n\napp.listen(port, () => {\n  console.log(`App listening at http://localhost:${port}`)\n});Express is a minimal and flexible Node.js web application framework\nthat provides a robust set of features for web and mobile\napplications.Express.js, or simply Express, is a web application framework for Node.js,\nreleased as free and open-source software under the MIT License.\n\nIt is designed for building web applications and APIs.\nIt has been called the de facto standard server framework for Node.js.",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 98,
    "keyword": null,
    "link": null,
    "title": "express  express js continous GET /json/version",
    "description": "probably you are using chrome, if so,\ngoto: chrome://inspect/#devices\nclick on \"Open dedicated DevTools for Node\"\nremove your locahost:[port] from listening\n",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 99,
    "keyword": null,
    "link": null,
    "title": "express  express js cors",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})// CORS (Cross-Origin Resource Sharing) headers to support Cross-site HTTP requests\n\napp.all('*', function(req, res, next) {\n       res.header(\"Access-Control-Allow-Origin\", \"*\");\n       res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n       res.header('Access-Control-Allow-Headers', 'Content-Type');\n       next();\n});\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});//install\nnpm install cors\n//use\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n//Cors = Cross-origin resource sharing\n\nvar express = require('express');\nvar cors = require('cors');\nvar app = express();\n\napp.use(cors());\n\nvar corsOptions = {\n  origin: 'http://example.com',\n  optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n}\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 100,
    "keyword": null,
    "link": null,
    "title": "express  express js delete request",
    "description": "app.delete('/user', function (req, res) {\n  res.send('Got a DELETE request at /user')\n})\n",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 101,
    "keyword": null,
    "link": null,
    "title": "express  express js example",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\nbasic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           const express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)var express=require('express');\nvar app=express();\n\napp.get('/',function(req,res){\n\tres.send(\"Hello World!\");\n});\n\nvar server=app.listen(3000,function() {});\n",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 102,
    "keyword": null,
    "link": null,
    "title": "express  express js jump to above directory",
    "description": "(path.join(__dirname , 'views' ,'main.html')) -> will return Root:/views/main.html\n",
    "reg_date": "2021-10-22T11:18:32.000Z"
  },
  {
    "id": 103,
    "keyword": null,
    "link": null,
    "title": "express  express js limit access based on rate",
    "description": "const rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  max: 100,\n  windowMs: 60 * 60 * 1000,\n  message: 'too many requests sent by this ip, please try again in an hour !'\n});\n\napp.use('<routes>', limiter);  // eg: app.use('/api', limiter);",
    "reg_date": "2021-10-22T11:18:33.000Z"
  },
  {
    "id": 104,
    "keyword": null,
    "link": null,
    "title": "express  express js list all routes",
    "description": "const listEndpoints = require(\"express-list-endpoints\"); // npm i express-list-endpoints\nconsole.log(listEndpoints(app)); // where app = express();function print (path, layer) {\n  if (layer.route) {\n    layer.route.stack.forEach(print.bind(null, path.concat(split(layer.route.path))))\n  } else if (layer.name === 'router' && layer.handle.stack) {\n    layer.handle.stack.forEach(print.bind(null, path.concat(split(layer.regexp))))\n  } else if (layer.method) {\n    console.log('%s /%s',\n      layer.method.toUpperCase(),\n      path.concat(split(layer.regexp)).filter(Boolean).join('/'))\n  }\n}\n\nfunction split (thing) {\n  if (typeof thing === 'string') {\n    return thing.split('/')\n  } else if (thing.fast_slash) {\n    return ''\n  } else {\n    var match = thing.toString()\n      .replace('\\\\/?', '')\n      .replace('(?=\\\\/|$)', '$')\n      .match(/^\\/\\^((?:\\\\[.*+?^${}()|[\\]\\\\\\/]|[^.*+?^${}()|[\\]\\\\\\/])*)\\$\\//)\n    return match\n      ? match[1].replace(/\\\\(.)/g, '$1').split('/')\n      : '<complex:' + thing.toString() + '>'\n  }\n}\n\napp._router.stack.forEach(print.bind(null, []))",
    "reg_date": "2021-10-22T11:18:33.000Z"
  },
  {
    "id": 105,
    "keyword": null,
    "link": null,
    "title": "express  express js npm",
    "description": "$ npm install express// npm install express\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res)=> {\n  res.send('Hello World');\n}) \n\napp.listen(3000,()=>{\n console.log(\"starting...\");\n});$ npm install express --no-save\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res)=> {\n  res.send('Hello World');\n}) \n\napp.listen(3000,()=>{\n console.log(\"starting...\");\n});",
    "reg_date": "2021-10-22T11:18:33.000Z"
  },
  {
    "id": 106,
    "keyword": null,
    "link": null,
    "title": "express  express js params",
    "description": "app.get('/path/:name', function(req, res) { // url: /path/test\n  console.log(req.params.name);  // result: test\n});\n\n// OR\n\napp.get('/path', function(req, res) {  // url: /path?name='test'\n  console.log(req.query['name']);  // result: test\n});GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})\n\nreq.params refers to items with a ':' in the URL and req.query refers to items associated with the '?app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.tagId);\n});\n\n// GET /p/5\n// tagId is set to 5\napp.get('/users/:userId/books/:bookId', function (req, res) {\n  res.send(req.params)\n})\nRoute path: /users/:userId/books/:bookId\nRequest URL: http://localhost:3000/users/34/books/8989\nreq.params: { \"userId\": \"34\", \"bookId\": \"8989\" }\n",
    "reg_date": "2021-10-22T11:18:33.000Z"
  },
  {
    "id": 107,
    "keyword": null,
    "link": null,
    "title": "express  express js redirect to url",
    "description": "window.location.href = \"http://mywebsite.com/home.html\";app.get('/', (req, res) => {\n  res.redirect('/about');\n})res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\nconst app = require('express')();\n\n// The `res.redirect()` function sends back an HTTP 302 by default.\n// When an HTTP client receives a response with status 302, it will send\n// an HTTP request to the URL in the response, in this case `/to`\napp.get('/from', (req, res) => {\n  res.redirect('/to');\n});\napp.get('/to', (req, res) => res.send('Hello, World!'));\napp.all('/secret', function (req, res, next) {\n  console.log('Accessing the secret section ...')\n  next() // pass control to the next handler\n})\n// GET method route\napp.get('/', function (req, res) {\n  res.send('GET request to the homepage')\n})\n\n// POST method route\napp.post('/', function (req, res) {\n  res.send('POST request to the homepage')\n})\n",
    "reg_date": "2021-10-22T11:18:33.000Z"
  },
  {
    "id": 108,
    "keyword": null,
    "link": null,
    "title": "express  express js sample project",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)var express=require('express');\nvar app=express();\n\napp.get('/',function(req,res){\n\tres.send(\"Hello World!\");\n});\n\nvar server=app.listen(3000,function() {});\n",
    "reg_date": "2021-10-22T11:18:33.000Z"
  },
  {
    "id": 109,
    "keyword": null,
    "link": null,
    "title": "express  express js server",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\nconst express = require(\"express\")\n\nconst app = express()\n\napp.listen(5000, () => {\n\tconsole.log(\"Server has started!\")\n})const express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)",
    "reg_date": "2021-10-22T11:18:33.000Z"
  },
  {
    "id": 110,
    "keyword": null,
    "link": null,
    "title": "express  express json body",
    "description": "$ npm install body-parser\nvar bodyParser = require('body-parser')\n",
    "reg_date": "2021-10-22T11:18:33.000Z"
  },
  {
    "id": 111,
    "keyword": null,
    "link": null,
    "title": "express  express jwt",
    "description": "expressJwt({ secret:  process.env.JWT_SECRET, algorithms: ['RS256'] });\njwt({ secret: publicKey, requestProperty: 'auth' });// JWT MIDDLEWARE\nconst jwt = require('jsonwebtoken')\nconst httpError = require('http-errors')\n\nmodule.exports = (req, res, next) => {\n  try {\n    const tokenHeader = req.headers.authorization.split('Bearer ')[1]\n    const decoded = jwt.verify(tokenHeader, process.env.ACCESS_TOKEN_SECRET)\n    req.user = decoded\n    next()\n  } catch (err) {\n    next(httpError(401))\n  }\n}\n\n// ROUTE LOGIN\napp.get('/protect', authJwt, (req, res) => {\n  console.log(req.user)\n  res.send('aim in proteced route')\n})\n\napp.post('/login', (req, res) => {\n  const bodyPayload = {\n    id: Date.now(),\n    username: req.body.username\n  }\n  const token = signAccessToken(res, bodyPayload)\n  return res.status(200).json(token)\n})\n\napp.post('/refresh-token', (req, res) => {\n  const refreshToken = signRefreshToken(req)\n  res.status(200).json(refreshToken)\n  res.end()\n})\n\n// JWT HELPER\nconst jwt = require('jsonwebtoken')\nconst httpError = require('http-errors')\n\nexports.signAccessToken = (res, payload) => {\n  try {\n    if (payload) {\n      const accessToken = jwt.sign({ ...payload }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1m' })\n      const refreshToken = jwt.sign({ ...payload }, process.env.REFRESH_TOKEN_SECRET, { expiresIn: '90d' })\n      res.cookie('refreshToken', `${refreshToken}`, { expired: 86400 * 90 })\n      return { accessToken, refreshToken }\n    }\n  } catch (err) {\n    return httpError(500, err)\n  }\n}\n\nexports.signRefreshToken = (req) => {\n  try {\n    const getToken = req.cookies.refreshToken\n    if (getToken) {\n      const { id, username } = jwt.verify(getToken, process.env.REFRESH_TOKEN_SECRET)\n      const accesssToken = jwt.sign({ id, username }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1m' })\n      return { accesssToken }\n    }\n  } catch (err) {\n    return httpError(401, err)\n  }\n}\n$ npm install express-jwt\n",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 112,
    "keyword": null,
    "link": null,
    "title": "express  express limit based on ip",
    "description": "const rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  max: 100,\n  windowMs: 60 * 60 * 1000,\n  message: 'too many requests sent by this ip, please try again in an hour !'\n});\n\napp.use('<routes>', limiter);  // eg: app.use('/api', limiter);\n",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 113,
    "keyword": null,
    "link": null,
    "title": "express  express load a page",
    "description": "const express = require('express');\nconst app = express();\nconst path = require('path');\nconst router = express.Router();\n\nrouter.get('/',function(req,res){\n  res.sendFile(path.join(__dirname, '/index.html'));\n  //__dirname : It will resolve to your project folder.\n});\n\n// To go back a folder from __dirname\nrouter.get('/about',function(req,res){\n  res.sendFile(path.join(__dirname, '../somefolder/about.html'));\n});",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 114,
    "keyword": null,
    "link": null,
    "title": "express  express messages",
    "description": "app.use(require('connect-flash')());\napp.use(function (req, res, next) {\n  res.locals.messages = require('express-messages')(req, res);\n  next();\n});",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 115,
    "keyword": null,
    "link": null,
    "title": "express  express middleware status code always 200",
    "description": "wrap your code with event\n\nres.on('finish', () => {\n// do some thing here\n\n})",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 116,
    "keyword": null,
    "link": null,
    "title": "express  express minify html",
    "description": " var express    = require('express');\nvar minifyHTML = require('express-minify-html');\nvar app = express();\napp.use(minifyHTML({\n  override:      true,\n  exception_url: false,\n  htmlMinifier: {\n    removeComments:            true,\n    collapseWhitespace:        true,\n    collapseBooleanAttributes: true,\n    removeAttributeQuotes:     true,\n    removeEmptyAttributes:     true,\n    minifyJS:                  true \n  }\n}));\napp.get('hello', function (req, res, next) {\n  res.render('helloTemplate', { hello : 'world'}, function(err, html) {\n    // The output is minified, huzzah!\n    console.log(html);\n    res.send(html);\n  })\n}); ",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 117,
    "keyword": null,
    "link": null,
    "title": "express  express mongodb",
    "description": "//IMPORTS\nimport express from \"express\";\nimport mongoose from \"mongoose\";\n\nconst app = express();\n\n//MIDDLEWARES\napp.use(\"/\");\n\n//MIDDLEWARE TO TRANSFER DATA\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json({ limit: \"30mb\", extended: true }));\n\n//CONSTANTS\nconst CONNECTION_PORT = \"YOUR_MONGODB_CONNECTION_LINK_HERE\";\nconst PORT = process.env.PORT || 5000;\n\n//CONNECTION WITH MONGOOSE DB AND LISTENING TO PORT\nmongoose\n  .connect(CONNECTION_PORT, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  })\n  .then(() => {\n    app.listen(PORT, () => {\n      console.log(`Server Running on port ${PORT}`);\n    });\n  })\n  .catch((err) => {\n    console.log(err);\n  });var MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', function (err, client) {\n  if (err) throw err\n\n  var db = client.db('animals')\n\n  db.collection('mammals').find().toArray(function (err, result) {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\nvar mysql = require('mysql')\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\napp.post('/quotes', (req, res) => { console.log(req.body) })You should be able to get an object similar to the following in your command line:{name: 'pdp',quotes: 'pdp psr pdp'}",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 118,
    "keyword": null,
    "link": null,
    "title": "express  express mounting router",
    "description": "var express = require('express')\nvar router = express.Router()\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds')\n})\n\nmodule.exports = router\napp.get(/a/, function (req, res) {\n  res.send('/a/')\n})\n",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 119,
    "keyword": null,
    "link": null,
    "title": "express  express multer",
    "description": "const multer = require('multer')\nconst { extname, resolve } = require('path')\n\nconst diskStorage = multer.diskStorage({\n\tdestination: (req, file, done) => {\n\t\tif (!file) return done(new Error('Upload file error'), null)\n\t\treturn done(null, resolve(process.cwd(), 'src/images'))\n\t},\n\tfilename: (req, file, done) => {\n\t\tif (file) {\n\t\t\tconst imagePattern = /(jpg|jpeg|png|gif|svg)/gi\n\t\t\tconst mathExt = extname(file.originalname).replace('.', '')\n\n\t\t\tif (!imagePattern.test(mathExt)) {\n\t\t\t\treturn new TypeError('File format is not valid')\n\t\t\t}\n\n\t\t\treq.file = file.originalname\n\t\t\treturn done(null, file.originalname)\n\t\t}\n\t}\n})\n\nconst fileUpload = multer({ storage: diskStorage, limits: 1000000 })\n\nmodule.exports = { fileUpload }$ npm install --save multer\n\nvar express = require(\"express\");\nvar multer = require('multer');\nvar upload = multer({dest:'uploads/'});import { Request } from 'express'\nimport multer, { StorageEngine, Multer } from 'multer'\nimport { resolve } from 'path'\n\nconst diskStorage: StorageEngine = multer.diskStorage({\n\tdestination: (req: Request, file: Express.Multer.File, done): void => {\n\t\tif (!file) {\n\t\t\tdone(new Error('Upload file error'), null)\n\t\t} else {\n\t\t\tdone(null, resolve(process.cwd(), 'src/images'))\n\t\t}\n\t},\n\tfilename: (req: any, file: Express.Multer.File, done): void => {\n\t\tdone(null, file.originalname)\n\t}\n})\n\nconst fileValidator = (req: any, file: Express.Multer.File, done): void => {\n\tconst extFile = file.originalname.replace('.', '')\n\tconst extPattern = /(jpg|jpeg|png|gif|svg|doc)/gi.test(extFile)\n\n\tif (!extPattern) {\n\t\tdone(new TypeError('File format is not valid'), null)\n\t} else {\n\t\tdone(null, true)\n\t}\n}\n\nexport const fileUpload = multer({ storage: diskStorage, limits: { fileSize: 1000000 }, fileFilter: fileValidator }) as Multerconst multer = require('multer')\nconst { resolve } = require('path')\nconst { existsSync, unlink } = require('fs')\n\nconst diskStorage = multer.diskStorage({\n\tdestination: (req, file, done) => {\n\t\tif (!file) return done(new Error('Upload file error'), null)\n\n\t\tconst fileExits = existsSync(resolve(process.cwd(), `src/images/${file.originalname}`))\n\t\tif (!fileExits) return done(null, resolve(process.cwd(), 'src/images'))\n\n\t\tunlink(resolve(process.cwd(), `src/images/${file.originalname}`), (error) => {\n\t\t\tif (error) return done(error)\n\t\t\treturn done(null, resolve(process.cwd(), 'src/images'))\n\t\t})\n\t},\n\tfilename: (req, file, done) => {\n\t\tif (file) {\n\t\t\tconst extFile = file.originalname.replace('.', '')\n\t\t\tconst extPattern = /(jpg|jpeg|png|gif|svg)/gi.test(extFile)\n\t\t\tif (!extPattern) return done(new TypeError('File format is not valid'), null)\n\t\t\treq.photo = file.originalname\n\t\t\treturn done(null, file.originalname)\n\t\t}\n\t}\n})\n\nconst fileUpload = multer({ storage: diskStorage, limits: 1000000 })\n\nmodule.exports = { fileUpload }var multer = require('multer');\nvar upload = multer({dest:'uploads/'});$ npm install --save multer file upload node ",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 120,
    "keyword": null,
    "link": null,
    "title": "express  express multer example",
    "description": "const multer = require('multer')\nconst { extname, resolve } = require('path')\n\nconst diskStorage = multer.diskStorage({\n\tdestination: (req, file, done) => {\n\t\tif (!file) return done(new Error('Upload file error'), null)\n\t\treturn done(null, resolve(process.cwd(), 'src/images'))\n\t},\n\tfilename: (req, file, done) => {\n\t\tif (file) {\n\t\t\tconst imagePattern = /(jpg|jpeg|png|gif|svg)/gi\n\t\t\tconst mathExt = extname(file.originalname).replace('.', '')\n\n\t\t\tif (!imagePattern.test(mathExt)) {\n\t\t\t\treturn new TypeError('File format is not valid')\n\t\t\t}\n\n\t\t\treq.file = file.originalname\n\t\t\treturn done(null, file.originalname)\n\t\t}\n\t}\n})\n\nconst fileUpload = multer({ storage: diskStorage, limits: 1000000 })\n\nmodule.exports = { fileUpload }var multer = require('multer')\nvar upload = multer().single('avatar')\n\napp.post('/profile', function (req, res) {\n  upload(req, res, function (err) {\n    if (err instanceof multer.MulterError) {\n      // A Multer error occurred when uploading.\n    } else if (err) {\n      // An unknown error occurred when uploading.\n    }\n\n    // Everything went fine.\n  })\n})\n$ npm install --save multer\n\nvar express = require(\"express\");\nvar multer = require('multer');\nvar upload = multer({dest:'uploads/'});import { Request } from 'express'\nimport multer, { StorageEngine, Multer } from 'multer'\nimport { resolve } from 'path'\n\nconst diskStorage: StorageEngine = multer.diskStorage({\n\tdestination: (req: Request, file: Express.Multer.File, done): void => {\n\t\tif (!file) {\n\t\t\tdone(new Error('Upload file error'), null)\n\t\t} else {\n\t\t\tdone(null, resolve(process.cwd(), 'src/images'))\n\t\t}\n\t},\n\tfilename: (req: any, file: Express.Multer.File, done): void => {\n\t\tdone(null, file.originalname)\n\t}\n})\n\nconst fileValidator = (req: any, file: Express.Multer.File, done): void => {\n\tconst extFile = file.originalname.replace('.', '')\n\tconst extPattern = /(jpg|jpeg|png|gif|svg|doc)/gi.test(extFile)\n\n\tif (!extPattern) {\n\t\tdone(new TypeError('File format is not valid'), null)\n\t} else {\n\t\tdone(null, true)\n\t}\n}\n\nexport const fileUpload = multer({ storage: diskStorage, limits: { fileSize: 1000000 }, fileFilter: fileValidator }) as Multerconst multer = require('multer')\nconst { resolve } = require('path')\nconst { existsSync, unlink } = require('fs')\n\nconst diskStorage = multer.diskStorage({\n\tdestination: (req, file, done) => {\n\t\tif (!file) return done(new Error('Upload file error'), null)\n\n\t\tconst fileExits = existsSync(resolve(process.cwd(), `src/images/${file.originalname}`))\n\t\tif (!fileExits) return done(null, resolve(process.cwd(), 'src/images'))\n\n\t\tunlink(resolve(process.cwd(), `src/images/${file.originalname}`), (error) => {\n\t\t\tif (error) return done(error)\n\t\t\treturn done(null, resolve(process.cwd(), 'src/images'))\n\t\t})\n\t},\n\tfilename: (req, file, done) => {\n\t\tif (file) {\n\t\t\tconst extFile = file.originalname.replace('.', '')\n\t\t\tconst extPattern = /(jpg|jpeg|png|gif|svg)/gi.test(extFile)\n\t\t\tif (!extPattern) return done(new TypeError('File format is not valid'), null)\n\t\t\treq.photo = file.originalname\n\t\t\treturn done(null, file.originalname)\n\t\t}\n\t}\n})\n\nconst fileUpload = multer({ storage: diskStorage, limits: 1000000 })\n\nmodule.exports = { fileUpload }var multer = require('multer');\nvar upload = multer({dest:'uploads/'});",
    "reg_date": "2021-10-22T11:18:34.000Z"
  },
  {
    "id": 121,
    "keyword": null,
    "link": null,
    "title": "express  express nodejs",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express$ npm install expressconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\nFast, unopinionated, minimalist web framework for Node.js",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 122,
    "keyword": null,
    "link": null,
    "title": "express  express octet stream",
    "description": "app.get((req, res, next) => {\n  res.setHeader('Content-Type', 'application/octet-stream');\n  res.sendFile('/file/to/be/downloaded.ext');\n  res.status(200);\n});",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 123,
    "keyword": null,
    "link": null,
    "title": "express  express orm",
    "description": "$ npm install knex --save\n\n# Then add one of the following (adding a --save) flag:\n$ npm install pg\n$ npm install sqlite3\n$ npm install mysql\n$ npm install mysql2\n$ npm install oracledb\n$ npm install tedious",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 124,
    "keyword": null,
    "link": null,
    "title": "express  express param in url",
    "description": "app.get('/path/:name', function(req, res) { // url: /path/test\n  console.log(req.params.name);  // result: test\n});\n\n// OR\n\napp.get('/path', function(req, res) {  // url: /path?name='test'\n  console.log(req.query['name']);  // result: test\n});app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.tagId);\n});\n\n// GET /p/5\n// tagId is set to 5\n// http://localhost:8080/api/1\napp.get('/api/:version', function(req, res) {\n    res.send(req.params.version);\n});// GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 125,
    "keyword": null,
    "link": null,
    "title": "express  express passport js",
    "description": "// my github https://github.com/restuwahyu13\nconst { AuthSchema } = require('../models/model.auth')\nconst passport = require('passport')\nconst JwtStrategy = require('passport-jwt').Strategy\nconst ExtractJwt = require('passport-jwt').ExtractJwt\nconst LocalStrategy = require('passport-local').Strategy\n\nexports.passportSerialize = () => {\n  return passport.serializeUser(async (user, done) => {\n    if (user) {\n      const { _id } = user\n      const result = await AuthSchema.findById(_id).lean()\n      if (!result) return done(null, false)\n      return done(null, result._id)\n    }\n    return done(null, false)\n  })\n}\n\nexports.passportDeserialize = () => {\n  return passport.deserializeUser(async (id, done) => {\n    if (id) {\n      const user = await AuthSchema.findById(id).lean()\n      if (!user) return done(null, false)\n      return done(null, user)\n    }\n    return done(null, false)\n  })\n}\n\n// passport local\nexports.passportLocalStrategy = () => {\n  passport.use(\n    'local',\n    new LocalStrategy(async (username, password, done) => {\n      if (username && password) {\n        const user = await AuthSchema.find({ $or: [{ username }, { email: username }] }).lean()\n        const verify = AuthSchema.verifyPassword(password, user[0].password)\n\n        if (!verify) return done(null, false)\n        return done(null, user[0])\n      }\n      return done(null, false)\n    })\n  )\n}\n\n// passport jwt\nexports.passportJwtStrategy = () => {\n  passport.use(\n    'jwt',\n    new JwtStrategy(\n      {\n        secretOrKey: process.env.JWT_SECRET,\n        jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken()\n      },\n      async ({ _id }, done) => {\n        try {\n          const user = await AuthSchema.findById(_id).lean()\n          if (!user) done(null, false)\n          done(null, user)\n        } catch (err) {\n          done(err, false)\n        }\n      }\n    )\n  )\n}// my github https://github.com/restuwahyu13\n\nconst { AuthSchema } = require('../models/model.auth')\nconst GoogleStrategy = require('passport-google-oauth20').Strategy\nconst FacebookStrategy = require('passport-facebook').Strategy\nconst GithubStrategy = require('passport-github').Strategy\n\n// passport facebook\nexports.passportFacebook = () => {\n   return passport.use(\n      new FacebookStrategy(\n         {\n            clientID: process.env.FACEBOOK_ID,\n            clientSecret: process.env.FACEBOOK_SECRET,\n            callbackURL: \"http://localhost:3000/auth/facebook/callback\",\n            profileFields: [\"id\", \"displayName\", \"gender\", \"email\", \"photos\"],\n            enableProof: true,\n         },\n         (accessToken, refreshToken, profile, done) => {\n            authSocialSchema.findOne({idSocial: profile.id}, (err, user) => {\n               if (err) return done(err, false);\n               if (!user) {\n                  authSocialSchema.findOrCreate(\n                     {\n                        idSocial: profile.id,\n                        fullname: profile.displayName,\n                        email: profile.email,\n                        gender: profile.gende,\n                        avatar: profile.photos[0][\"value\"],\n                        provider: profile.provider,\n                        created_at: Date.now(),\n                     },\n                     (err, user) => {\n                        if (err) return done(err, false);\n                        return done(null, user);\n                     }\n                  );\n               } else {\n                  return done(null, user);\n               }\n            });\n         }\n      )\n   );\n}\n\n// passport google\nexports.passportGoogle = () => {\n   return passport.use(\n      new GoogleStrategy(\n         {\n            clientID: process.env.GOOGLE_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: \"http://localhost:3000/auth/google/callback\",\n         },\n         (accessToken, refreshToken, profile, done) => {\n            authSocialSchema.findOne({idSocial: profile.id}, (err, user) => {\n               if (err) return done(err, false);\n               if (!user) {\n                  authSocialSchema.findOrCreate(\n                     {\n                        idSocial: profile.id,\n                        fullname: profile.displayName,\n                        email: profile.emails[0][\"value\"],\n                        avatar: profile.photos[0][\"value\"],\n                        provider: profile.provider,\n                        created_at: Date.now(),\n                     },\n                     (err, user) => {\n                        if (err) return done(err, false);\n                        return done(null, user);\n                     }\n                  );\n               } else {\n                  return done(null, user);\n               }\n            });\n         }\n      )\n   );\n}\n\n// passport passport github\nexports.passportGithub = () => {\n   return passport.use(\n      new GithubStrategy(\n         {\n            clientID: process.env.GITHUB_ID,\n            clientSecret: process.env.GITHUB_SECRET,\n            callbackURL: \"http://localhost:3000/auth/github/callback\",\n         },\n         (accessToken, refreshToken, profile, done) => {\n            authSocialSchema.findOne({idSocial: profile.id}, (err, user) => {\n               if (err) return done(err, false);\n               if (!user) {\n                  authSocialSchema.findOrCreate(\n                     {\n                        idSocial: profile.id,\n                        username: profile.username,\n                        fullname: profile.displayName,\n                        avatar: profile.photos[0][\"value\"],\n                        provider: profile.provider,\n                        created_at: Date.now(),\n                     },\n                     (err, user) => {\n                        if (err) return done(err, false);\n                        return done(null, user);\n                     }\n                  );\n               } else {\n                  return done(null, user);\n               }\n            });\n         }\n      )\n   );\n}var GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n    clientID: GOOGLE_CLIENT_ID,\n    clientSecret: GOOGLE_CLIENT_SECRET,\n    callbackURL: \"http://www.example.com/auth/google/callback\"\n  },\n  function(accessToken, refreshToken, profile, cb) {\n    User.findOrCreate({ googleId: profile.id }, function (err, user) {\n      return cb(err, user);\n    });\n  }\n));\n",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 126,
    "keyword": null,
    "link": null,
    "title": "express  express payloadtoolarge request entity too large bodyParser raw-body hydra-express",
    "description": "GOTO node_modules\\hydra-express\\node_modules\\raw-body\\index.js\n\nfunction readStream(stream, encoding, length, limit, callback) {\n\n  \tlimit = 999999999999; //ADD THIS LINE HERE (TO OVERWRITE THE LIMIT)\n    \n    if (limit !== null && length !== null && length > limit) {\n      return done(createError(413, 'request entity too large', {\n        expected: length,\n        length: length,\n        limit: limit,\n        type: 'entity.too.large'\n      }))\n    }\n    \n   ... \n   \n}",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 127,
    "keyword": null,
    "link": null,
    "title": "express  express plus",
    "description": "NodeJs\n\nimport { Service , Router } from '@ulvimemmeedov/expressjsplus';\n\nRouter.get(\"/\",(request,response) => response.json(\"Hello Express.Js Plus\"));\n\nService.use(Router).listen(port,calback);        NodeJs \n    import { Service , Router }  from '@ulvimemmeedov/expressjsplus';\n\n    Router.get(\"/\",(request,response) => response.json(\"Hello Express.Js Plus\"));\n\n    Service.use(Router).listen(port,calback);\n  \n    \n      ",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 128,
    "keyword": null,
    "link": null,
    "title": "express  express plus make router",
    "description": "        NodeJs \n    import { Service , Router }  from '@ulvimemmeedov/expressjsplus';\n\n    Router.get(\"/\",(request,response) => response.json(\"Hello Express.Js Plus\"));\n\n    Service.use(Router).listen(port,calback);\n  \n    \n              NodeJs \n    import { Service , Router }  from '@ulvimemmeedov/expressjsplus';\n\n    Router.get(\"/\",(request,response) => response.json(\"Hello Express.Js Plus\");\n\n    Service.use(Router).listen(port,calback);\n  \n    \n      ",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 129,
    "keyword": null,
    "link": null,
    "title": "express  express post body undefined",
    "description": "var bodyParser = require('body-parser')\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())// If you are using Express 4.16+ you don't have to import body-parser anymore. \n// You can do it just like this:\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.json()) // To parse the incoming requests with JSON payloadsnpm install body-parser\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})\n/* USE:\n\nnpm i body-parser\n*/\n\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})",
    "reg_date": "2021-10-22T11:18:35.000Z"
  },
  {
    "id": 130,
    "keyword": null,
    "link": null,
    "title": "express  express post request body undefined",
    "description": "var bodyParser = require('body-parser')\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())// If you are using Express 4.16+ you don't have to import body-parser anymore. \n// You can do it just like this:\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.json()) // To parse the incoming requests with JSON payloadsnpm install body-parser\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})\n/* USE:\n\nnpm i body-parser\n*/\n\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 131,
    "keyword": null,
    "link": null,
    "title": "express  express pourquoi mettre bodyparser avant router",
    "description": "// Vous devez vous assurer que vous définissez toutes les configurations \n// AVANT de définir les itinéraires. Si vous le faites, \n// vous pouvez continuer à utiliser express.bodyParser().\n\nvar express = require('express'),\n    app     = express(),\n    port    = parseInt(process.env.PORT, 10) || 8080;\n\napp.configure(function(){\n  app.use(express.bodyParser());\n  app.use(app.router);\n});\n\napp.listen(port);\n\napp.post(\"/someRoute\", function(req, res) {\n  console.log(req.body);\n  res.send({ status: 'SUCCESS' });\n});\n",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 132,
    "keyword": null,
    "link": null,
    "title": "express  express project structure",
    "description": "       ├─ .env\n       ├─ .gitignore\n       ├─ config\n       │  ├─ config.js\n       │  ├─ database.js\n       │  ├─ routes.js\n       │  └─ server.js\n       ├─ index.js\n       ├─ package.json\n       └─ src\n          ├─ controllers\n          │  ├─ AuthController.js\n          │  ├─ Controller.js\n          │  ├─ MediaController.js\n          │  └─ PostController.js\n          ├─ helpers\n          │  ├─ HttpError.js\n          │  ├─ HttpResponse.js\n          │  └─ Utility.js\n          ├─ models\n          │  ├─ Auth.js\n          │  ├─ Media.js\n          │  ├─ Post.js\n          │  └─ User.js\n          ├─ routes\n          │  ├─ auth.js\n          │  ├─ index.js\n          │  ├─ media.js\n          │  └─ post.js\n          └─ services\n             ├─ AuthService.js\n             ├─ MediaService.js\n             ├─ PostService.js\n             ├─ Service.js\n             └─ UserService.js\n",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 133,
    "keyword": null,
    "link": null,
    "title": "express  express proxy",
    "description": "//example reverse proxy using http proxy middleware without nginx\nhttps://github.com/restuwahyu13/express-reverse-proxy",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 134,
    "keyword": null,
    "link": null,
    "title": "express  express public folder",
    "description": "// projectDirectory/src/index.js\nconst path = require('path')\nconst publicDirectoryPath = path.join(__dirname, '../public')\napp.use(express.static(publicDirectoryPath))\n\n// projectDirectory/public -> create index.html\n// localhost:3000/index.html -> Here you go..\n\n// dependencies\nconst path = require('path');\n\n// set static folder\napp.set(express.static(path.join(__dirname, 'public')));app.use(express.static('public'))\napp.use(express.static('files'))\n",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 135,
    "keyword": null,
    "link": null,
    "title": "express  express rate limit redis",
    "description": "import { Request, Response, NextFunction } from 'express'\nimport IORedis from 'ioredis'\nimport ip from 'request-ip'\n\nlet io = new IORedis({\n\thost: process.env.REDIS_HOST || 'localhost',\n\tport: parseInt(process.env.REDIS_PORT || '')\n})\n\nexport async function rateLimiterById(req: Request, res: Response, next: NextFunction): Promise<any> {\n\t// store id to redis\n\tawait io.set(`redis-id:${req.payload.uid}`, req.payload.uid)\n\t// get request by id\n\tconst getId = await io.get(`redis-id:${req.payload.uid}`)\n\t// counter count request\n\tconst maxCounterRequest = await io.incrby(`counter-id:${req.payload.uid}`, 1)\n\n\tif (getId === req.payload.uid && maxCounterRequest <= 50) {\n\t\tawait io.expire(`counter-id:${req.payload.uid}`, 10)\n\t} else {\n\t\tawait io.del(`redis-id:${req.payload.uid}`)\n\t\treturn res.status(429).json({\n\t\t\tstatus: 'ERROR TO MANY REQUEST',\n\t\t\tcode: 'AX2AC5R',\n\t\t\tmessage: 'cannot access this endpoint, after 10 second is over'\n\t\t})\n\t}\n\n\tnext()\n}\n\nexport async function rateLimiterByIp(req: Response, res: Response, next: NextFunction): Promise<any> {\n\tconst getIp = ip.getClientIp(req)\n\t// store id to redis\n\tawait io.set(`redis-ip:${getIp}`, `${getIp}`)\n\t// get request by id\n\tconst getStoreIp = await io.get(`redis-ip:${getIp}`)\n\t// counter count request\n\tconst maxCounterRequest = await io.incrby(`counter-ip:${getIp}`, 1)\n\n\tif (getStoreIp === getIp && maxCounterRequest <= 50) {\n\t\tawait io.expire(`counter-ip:${getIp}`, 10)\n\t} else {\n\t\tawait io.del(`redis-ip:${getIp}`)\n\t\treturn res.status(429).json({\n\t\t\tstatus: 'ERROR TO MANY REQUEST',\n\t\t\tcode: 'AX2AC5R',\n\t\t\tmessage: 'cannot access this endpoint, after 10 second is over'\n\t\t})\n\t}\n\n\tnext()\n}",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 136,
    "keyword": null,
    "link": null,
    "title": "express  express receive post data",
    "description": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));const express = require('express');\n\nconst app = express();\n\napp.use(express.json({extended: false})); //This is the line that you want to add\n\napp.post('/postroute', (req, res) => {\n    console.log('body :', req.body);\n    res.sendStatus(200);\n});const { id } = req.body;",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 137,
    "keyword": null,
    "link": null,
    "title": "express  express redirect",
    "description": "window.location.href = \"http://mywebsite.com/home.html\";app.get('/', (req, res) => {\n  res.redirect('/about');\n})app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});res.redirect('https://google.com')res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\nconst app = require('express')();\n\n// The `res.redirect()` function sends back an HTTP 302 by default.\n// When an HTTP client receives a response with status 302, it will send\n// an HTTP request to the URL in the response, in this case `/to`\napp.get('/from', (req, res) => {\n  res.redirect('/to');\n});\napp.get('/to', (req, res) => res.send('Hello, World!'));\n",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 138,
    "keyword": null,
    "link": null,
    "title": "express  express redirect with post data",
    "description": "app.post('/', function(req, res) {\n  res.redirect(307, '/test');\n});",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 139,
    "keyword": null,
    "link": null,
    "title": "express  express render",
    "description": "// send the rendered view to the client\nres.render('index')\n\n// if a callback is specified, the rendered HTML string has to be sent explicitly\nres.render('index', function (err, html) {\n  res.send(html)\n})\n\n// pass a local variable to the view\nres.render('user', { name: 'Tobi' }, function (err, html) {\n  // ...\n})\n// here you set that all templates are located in `/views` directory\napp.set('views', __dirname + '/views');\n\n// here you set that you're using `ejs` template engine, and the\n// default extension is `ejs`\napp.set('view engine', 'ejs');\n\n// here you render `orders` template\nresponse.render(\"orders\", {orders: orders_json});\nnpm install request@2.81.0\n",
    "reg_date": "2021-10-22T11:18:36.000Z"
  },
  {
    "id": 140,
    "keyword": null,
    "link": null,
    "title": "express  express req body",
    "description": "var bodyParser = require('body-parser')\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\napp.get('/user/:id', (req, res) => {\n  console.log(req.params.id) // \"1234562134654\"\n})\nor\napp.get('/user/:user_id', (req, res) => {\n  console.log(req.params.user_id) // \"1234562134654\"\n})app.post('/login', (req, res) => {\n  console.log(req.body.email) // \"user@example.com\"\n  console.log(req.body.password) // \"helloworld\"\n})export const app = express();\napp.use(express.json());\n",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 141,
    "keyword": null,
    "link": null,
    "title": "express  express req get json",
    "description": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.post('*', (req, res) => {\n  req.body;\t// The json object sent to the server\n});\nconst port = 3000;\napp.listen(port, () => console.log(`Listening on port ${port}.`));\n",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 142,
    "keyword": null,
    "link": null,
    "title": "express  express req ip address",
    "description": "const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 143,
    "keyword": null,
    "link": null,
    "title": "express  express request body undefined",
    "description": "var bodyParser = require('body-parser')\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())// If you are using Express 4.16+ you don't have to import body-parser anymore. \n// You can do it just like this:\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.json()) // To parse the incoming requests with JSON payloadsnpm install body-parser\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})\n/* USE:\n\nnpm i body-parser\n*/\n\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 144,
    "keyword": null,
    "link": null,
    "title": "express  express request path",
    "description": "// GET 'http://www.example.com/admin/new?a=b'\napp.get('/admin', (req, res, next) => {\n  req.originalUrl; // '/admin/new?a=b' (full path with query string)\n  req.baseUrl; // '/admin'\n  req.path; // '/new'\n  req.baseUrl + req.path; // '/admin/new' (full path without query string)\n});res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\n// send the rendered view to the client\nres.render('index')\n\n// if a callback is specified, the rendered HTML string has to be sent explicitly\nres.render('index', function (err, html) {\n  res.send(html)\n})\n\n// pass a local variable to the view\nres.render('user', { name: 'Tobi' }, function (err, html) {\n  // ...\n})\nnpm install request@2.81.0\n",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 145,
    "keyword": null,
    "link": null,
    "title": "express  express request url ignores hash",
    "description": "The part of the URL starting with the # symbol is never sent to the server.\n\nThe # symbol in an URL is to introduce the fragment identifier. \nThis is used to link to a specific part of the page. If a browser loads \n/#some/url, it will effectively load /, and skip to the HTML element \nwith id=\"some/url\" (if present). The fragment identifier is only relevant \nto the browser, so it is not sent with the HTTP request.\n\nWhat you however can do, is using client side Javascript to read out the \nvalue of window.location.hash and send it to the server using \nan XMLHttpRequest.",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 146,
    "keyword": null,
    "link": null,
    "title": "express  express response-time",
    "description": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst responseTime = require('response-time')\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(responseTime((req, res, time) => {\n  console.log(`${req.method} ${req.url} ${time}`);\n}))\napp.get('/', (req, res) => {\n  res.send('foo');\n});\napp.listen(3000);\n\n// Logs something like:  GET / 0.9935419999999997",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 147,
    "keyword": null,
    "link": null,
    "title": "express  express route parameters",
    "description": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});app.get('/users/:userId/books/:bookId', function (req, res) {\n  res.send(req.params)\n})\nRoute path: /users/:userId/books/:bookId\nRequest URL: http://localhost:3000/users/34/books/8989\nreq.params: { \"userId\": \"34\", \"bookId\": \"8989\" }\napp.get('/',function(req,res)\n{\n    res.send(\"Route path at base address\");\n});Route path: /flights/:from-:to\nRequest URL: http://localhost:3000/flights/LAX-SFO\nreq.params: { \"from\": \"LAX\", \"to\": \"SFO\" }\nvar express = require('express');\nvar http = require('http');\nvar app = express();",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 148,
    "keyword": null,
    "link": null,
    "title": "express  express router add middleware",
    "description": "router.get('/route', middleware1, middleware2, ..., middlewareX)\nvar app = require(\"express\")();\n\n//This is the middleware function which will be called before any routes get hit which are defined after this point, i.e. in your index.js\napp.use(function (req, res, next) {\n\n  var authorised = false;\n  //Here you would check for the user being authenticated\n\n  //Unsure how you're actually checking this, so some psuedo code below\n  if (authorised) {\n    //Stop the user progressing any further\n    return res.status(403).send(\"Unauthorised!\");\n  }\n  else {\n    //Carry on with the request chain\n    next();\n  }\n});\n\n//Define/include your controllers\n",
    "reg_date": "2021-10-22T11:18:37.000Z"
  },
  {
    "id": 149,
    "keyword": null,
    "link": null,
    "title": "express  express router file",
    "description": "var express = require('express');\nvar router = express.Router();\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now());\n  next();\n});\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page');\n});\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds');\n});\n\nmodule.exports = router;",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 150,
    "keyword": null,
    "link": null,
    "title": "express  express send image bufffer",
    "description": "res.contentType('image/jpeg');\nres.send(data);",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 151,
    "keyword": null,
    "link": null,
    "title": "express  express send pdf to view",
    "description": "res.setHeader('Content-Type', 'application/pdf')\nres.setHeader('Content-Disposition', 'inline;filename=yolo.pdf')",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 152,
    "keyword": null,
    "link": null,
    "title": "express  express serve node module",
    "description": "app.use('/css', express.static(__dirname + '/css'));\napp.use('/js', express.static(__dirname + '/node_modules/mod/dist'));\n",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 153,
    "keyword": null,
    "link": null,
    "title": "express  express serve static",
    "description": "app.use('/', express.static('public'));app.use('/static', express.static(__dirname + '/public'));\n\napp.use(express.static('public'))\napp.use(express.static('files'))\nconst path = require('path')\napp.use('/static', express.static(path.join(__dirname, 'public')))\napp.use(express.static('public'))\n",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 154,
    "keyword": null,
    "link": null,
    "title": "express  express server replit",
    "description": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(express.static('public'));\n\napp.get('/', (req, res) => {\n\tres.send('Hello Express app');\n});\n\napp.listen(3000, () => console.log('server started'));",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 155,
    "keyword": null,
    "link": null,
    "title": "express  express set response code",
    "description": "res.status(400);\nres.send('None shall pass');",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 156,
    "keyword": null,
    "link": null,
    "title": "express  express signed cookies",
    "description": "var express = require('express');\nvar cookieParser = require('cookie-parser');\n\nvar app = express();\napp.use(cookieParser('YOUR-SECRET-SALT'));\n\napp.get('/', (req, res, next) => {\n  res.cookie('name', 'value', { signed: true });\n  res.send('Success');\n});\n\napp.get('/test', (req, res, next) => {\n  req.signedCookies.name; // 'value'\n});",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 157,
    "keyword": null,
    "link": null,
    "title": "express  express static auth",
    "description": "app.use(function(req, res, next) {\n    if (req.user == null && req.path.indexOf('/admin') === 0)\n    {\n        res.redirect('/login');\n    }\n    next(); \n});\n",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 158,
    "keyword": null,
    "link": null,
    "title": "express  express static serve",
    "description": "app.use(express.static('public'))\napp.use(express.static('files'))\nconst path = require('path')\napp.use('/static', express.static(path.join(__dirname, 'public')))\napp.use(express.static('public'))\n",
    "reg_date": "2021-10-22T11:18:38.000Z"
  },
  {
    "id": 159,
    "keyword": null,
    "link": null,
    "title": "express  express unique validator for the owner",
    "description": "schmea.post('save', function(error, doc, next) {\n  if (error.name === 'MongoError' && error.code === 11000) {\n    next(new Error('email must be unique'));\n  } else {\n    next(error);\n  }\n});\n",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 160,
    "keyword": null,
    "link": null,
    "title": "express  express url redirect",
    "description": "window.location.href = \"http://mywebsite.com/home.html\";const app = require('express')();\n\n// The `res.redirect()` function sends back an HTTP 302 by default.\n// When an HTTP client receives a response with status 302, it will send\n// an HTTP request to the URL in the response, in this case `/to`\napp.get('/from', (req, res) => {\n  res.redirect('/to');\n});\napp.get('/to', (req, res) => res.send('Hello, World!'));\n// GET method route\napp.get('/', function (req, res) {\n  res.send('GET request to the homepage')\n})\n\n// POST method route\napp.post('/', function (req, res) {\n  res.send('POST request to the homepage')\n})\n",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 161,
    "keyword": null,
    "link": null,
    "title": "express  express urlencoded",
    "description": "// GET 'http://www.example.com/admin/new?a=b'\napp.get('/admin', (req, res, next) => {\n  req.originalUrl; // '/admin/new?a=b' (full path with query string)\n  req.baseUrl; // '/admin'\n  req.path; // '/new'\n  req.baseUrl + req.path; // '/admin/new' (full path without query string)\n});var express = require('express')\n\nvar app = express()\n\napp.use(express.json()) // for parsing application/json\napp.use(express.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded\n\napp.post('/profile', function (req, res, next) {\n  console.log(req.body)\n  res.json(req.body)\n})\napp.use(express.urlencoded({ extended: true }))npm install request@2.81.0\n",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 162,
    "keyword": null,
    "link": null,
    "title": "express  express validator",
    "description": "// this method create custom express validator using middleware\n\nconst { validationResult, check } = require('express-validator')\n\nexports.resultsValidator = (req) => {\n  const messages = []\n  if (!validationResult(req).isEmpty()) {\n    const errors = validationResult(req).array()\n    for (const i of errors) {\n      messages.push(i)\n    }\n  }\n  return messages\n}\n\nexports.registerValidator = () => {\n  return [\n    check('username')\n      .notEmpty()\n      .withMessage('username is required')\n      .not()\n      .custom((val) => /[^A-za-z0-9\\s]/g.test(val))\n      .withMessage('Username not use uniq characters'),\n    check('password')\n      .notEmpty()\n      .withMessage('password is required')\n      .isLength({ min: 8 })\n      .withMessage('password must be 8 characters')\n  ]\n}\n\nexports.loginValidator = () => {\n  return [\n    check('username').notEmpty().withMessage('username or email is required'),\n    check('password').notEmpty().withMessage('password is required')\n  ]\n}\n\n// how to use express validator in controller for results message\nconst errors = resultsValidator(req)\n  if (errors.length > 0) {\n    return res.status(400).json({\n      method: req.method,\n      status: res.statusCode,\n      error: errors\n    })\n  }\n\n// how to use express validator in route\nroute.post('/login', loginValidator(), (req, res) => {\n   return res.status(200).send('Login Sucessfuly');\n});\n\nroute.post('/register', registerValidator(), (req, res) => {\n   return res.status(200).send('Register Sucessfuly');\n});npm install --save express-validator\nimport { Request } from 'express'\nimport { check, validationResult, ValidationError, ValidationChain, Result, Meta } from 'express-validator'\n\nexport const expressValidator = (req: Request): ValidationError[] => {\n\tconst errors: Result<ValidationError> = validationResult(req)\n\n\tconst messages: ValidationError[] = []\n\tif (!errors.isEmpty()) {\n\t\tfor (const i of errors.array()) {\n\t\t\tmessages.push(i)\n\t\t}\n\t}\n\treturn messages\n}\n\nexport const registerValidator = (): ValidationChain[] => [\n\tcheck('firstName').notEmpty().withMessage('firstName is required'),\n\tcheck('firstName')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('firstName cannot include unique character'),\n\tcheck('lastName').notEmpty().withMessage('lastName is required'),\n\tcheck('lastName')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('lastName cannot include unique character'),\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid'),\n\tcheck('password').notEmpty().withMessage('password is required'),\n\tcheck('password').isLength({ min: 8 }).withMessage('password must be at least 8 characters'),\n\tcheck('location').notEmpty().withMessage('location is required'),\n\tcheck('location')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('location cannot include unique character'),\n\tcheck('phone').notEmpty().withMessage('phone is required'),\n\tcheck('phone').isLength({ min: 10 }).withMessage('phone number must be at least 10 characters'),\n\tcheck('phone').isLength({ max: 12 }).withMessage('phone number must be at least 12 characters'),\n\tcheck('phone').isMobilePhone('id-ID').withMessage('phone number is not valid')\n]\n\nexport const loginValidator = (): ValidationChain[] => [\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid'),\n\tcheck('password').notEmpty().withMessage('pasword is required')\n]\n\nexport const emailValidator = (): ValidationChain[] => [\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid')\n]\n\nexport const tokenValidator = (): ValidationChain[] => [\n\tcheck('token').notEmpty().withMessage('token is required'),\n\tcheck('token').isBase64().withMessage('token is not valid')\n]\n\nexport const passwordValidator = (): ValidationChain[] => [\n\tcheck('password').notEmpty().withMessage('password is required'),\n\tcheck('password').isLength({ min: 8 }).withMessage('password must be at least 8 characters'),\n\tcheck('password')\n\t\t.not()\n\t\t.custom((value: string, { req }: Meta) => req.body.cpassword !== value)\n\t\t.withMessage('confirm password is not match with password'),\n\tcheck('cpassword').notEmpty().withMessage('cpassword is required'),\n\tcheck('cpassword').isLength({ min: 8 }).withMessage('cpassword must be at least 8 characters')\n]app.post('/form', [\n  check('name').isLength({ min: 3 }),\n  check('email').isEmail(),\n  check('age').isNumeric()\n], (req, res) => {\n  const errors = validationResult(req)\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() })\n  }\n\n  const name  = req.body.name\n  const email = req.body.email\n  const age   = req.body.age\n})\nconst { check } = require('express-validator');\n\napp.post(\n  '/user',\n  // ...some other validations...\n  check('password')\n    .isLength({ min: 5 })\n    .withMessage('must be at least 5 chars long')\n    .matches(/\\d/)\n    .withMessage('must contain a number'),\n  (req, res) => {\n    // Handle the request somehow\n  },\n);\n// ...rest of the initial code omitted for simplicity.\nconst { body, validationResult } = require('express-validator');\n\napp.post('/user', [\n  // username must be an email\n  body('username').isEmail(),\n  // password must be at least 5 chars long\n  body('password').isLength({ min: 5 })\n], (req, res) => {\n  // Finds the validation errors in this request and wraps them in an object with handy functions\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() });\n  }\n\n  User.create({\n    username: req.body.username,\n    password: req.body.password\n  }).then(user => res.json(user));\n});\n",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 163,
    "keyword": null,
    "link": null,
    "title": "express  express validator check vs body",
    "description": "Same as check([fields, message]), but only checking req.body.// ...rest of the initial code omitted for simplicity.\nconst { body, validationResult } = require('express-validator');\n\napp.post('/user', [\n  // username must be an email\n  body('username').isEmail(),\n  // password must be at least 5 chars long\n  body('password').isLength({ min: 5 })\n], (req, res) => {\n  // Finds the validation errors in this request and wraps them in an object with handy functions\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() });\n  }\n\n  User.create({\n    username: req.body.username,\n    password: req.body.password\n  }).then(user => res.json(user));\n});\n",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 164,
    "keyword": null,
    "link": null,
    "title": "express  express validator example",
    "description": "// this method create custom express validator using middleware\n\nconst { validationResult, check } = require('express-validator')\n\nexports.resultsValidator = (req) => {\n  const messages = []\n  if (!validationResult(req).isEmpty()) {\n    const errors = validationResult(req).array()\n    for (const i of errors) {\n      messages.push(i)\n    }\n  }\n  return messages\n}\n\nexports.registerValidator = () => {\n  return [\n    check('username')\n      .notEmpty()\n      .withMessage('username is required')\n      .not()\n      .custom((val) => /[^A-za-z0-9\\s]/g.test(val))\n      .withMessage('Username not use uniq characters'),\n    check('password')\n      .notEmpty()\n      .withMessage('password is required')\n      .isLength({ min: 8 })\n      .withMessage('password must be 8 characters')\n  ]\n}\n\nexports.loginValidator = () => {\n  return [\n    check('username').notEmpty().withMessage('username or email is required'),\n    check('password').notEmpty().withMessage('password is required')\n  ]\n}\n\n// how to use express validator in controller for results message\nconst errors = resultsValidator(req)\n  if (errors.length > 0) {\n    return res.status(400).json({\n      method: req.method,\n      status: res.statusCode,\n      error: errors\n    })\n  }\n\n// how to use express validator in route\nroute.post('/login', loginValidator(), (req, res) => {\n   return res.status(200).send('Login Sucessfuly');\n});\n\nroute.post('/register', registerValidator(), (req, res) => {\n   return res.status(200).send('Register Sucessfuly');\n});npm install --save express-validator\nimport { Request } from 'express'\nimport { check, validationResult, ValidationError, ValidationChain, Result, Meta } from 'express-validator'\n\nexport const expressValidator = (req: Request): ValidationError[] => {\n\tconst errors: Result<ValidationError> = validationResult(req)\n\n\tconst messages: ValidationError[] = []\n\tif (!errors.isEmpty()) {\n\t\tfor (const i of errors.array()) {\n\t\t\tmessages.push(i)\n\t\t}\n\t}\n\treturn messages\n}\n\nexport const registerValidator = (): ValidationChain[] => [\n\tcheck('firstName').notEmpty().withMessage('firstName is required'),\n\tcheck('firstName')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('firstName cannot include unique character'),\n\tcheck('lastName').notEmpty().withMessage('lastName is required'),\n\tcheck('lastName')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('lastName cannot include unique character'),\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid'),\n\tcheck('password').notEmpty().withMessage('password is required'),\n\tcheck('password').isLength({ min: 8 }).withMessage('password must be at least 8 characters'),\n\tcheck('location').notEmpty().withMessage('location is required'),\n\tcheck('location')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('location cannot include unique character'),\n\tcheck('phone').notEmpty().withMessage('phone is required'),\n\tcheck('phone').isLength({ min: 10 }).withMessage('phone number must be at least 10 characters'),\n\tcheck('phone').isLength({ max: 12 }).withMessage('phone number must be at least 12 characters'),\n\tcheck('phone').isMobilePhone('id-ID').withMessage('phone number is not valid')\n]\n\nexport const loginValidator = (): ValidationChain[] => [\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid'),\n\tcheck('password').notEmpty().withMessage('pasword is required')\n]\n\nexport const emailValidator = (): ValidationChain[] => [\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid')\n]\n\nexport const tokenValidator = (): ValidationChain[] => [\n\tcheck('token').notEmpty().withMessage('token is required'),\n\tcheck('token').isBase64().withMessage('token is not valid')\n]\n\nexport const passwordValidator = (): ValidationChain[] => [\n\tcheck('password').notEmpty().withMessage('password is required'),\n\tcheck('password').isLength({ min: 8 }).withMessage('password must be at least 8 characters'),\n\tcheck('password')\n\t\t.not()\n\t\t.custom((value: string, { req }: Meta) => req.body.cpassword !== value)\n\t\t.withMessage('confirm password is not match with password'),\n\tcheck('cpassword').notEmpty().withMessage('cpassword is required'),\n\tcheck('cpassword').isLength({ min: 8 }).withMessage('cpassword must be at least 8 characters')\n]app.post('/form', [\n  check('name').isLength({ min: 3 }),\n  check('email').isEmail(),\n  check('age').isNumeric()\n], (req, res) => {\n  const errors = validationResult(req)\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() })\n  }\n\n  const name  = req.body.name\n  const email = req.body.email\n  const age   = req.body.age\n})\nconst { check } = require('express-validator');\n\napp.post(\n  '/user',\n  // ...some other validations...\n  check('password')\n    .isLength({ min: 5 })\n    .withMessage('must be at least 5 chars long')\n    .matches(/\\d/)\n    .withMessage('must contain a number'),\n  (req, res) => {\n    // Handle the request somehow\n  },\n);\n// ...rest of the initial code omitted for simplicity.\nconst { body, validationResult } = require('express-validator');\n\napp.post('/user', [\n  // username must be an email\n  body('username').isEmail(),\n  // password must be at least 5 chars long\n  body('password').isLength({ min: 5 })\n], (req, res) => {\n  // Finds the validation errors in this request and wraps them in an object with handy functions\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() });\n  }\n\n  User.create({\n    username: req.body.username,\n    password: req.body.password\n  }).then(user => res.json(user));\n});\n",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 165,
    "keyword": null,
    "link": null,
    "title": "express  express validator form data value undefined",
    "description": "// working\nrouter.post(\"/\", upload.upload('image').single('categoryLogo'), validate, categoryController);\n\n// not working\nrouter.post(\"/\", validate, upload.upload('image').single('categoryLogo'), categoryController);",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 166,
    "keyword": null,
    "link": null,
    "title": "express  express view engine', 'ejs",
    "description": "app.set(\"view engine\", \"ejs\");\napp.set(\"views\", path.join(__dirname, \"views\"));",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 167,
    "keyword": null,
    "link": null,
    "title": "express  expressjs",
    "description": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\nbasic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           // node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\nExpress is a minimal and flexible Node.js web application framework\nthat provides a robust set of features for web and mobile\napplications.\nExpress is a minimal and flexible Node.js web application framework\nthat provides a robust set of features for web and mobile\napplications.var express = require('express')\nvar app = express()\n",
    "reg_date": "2021-10-22T11:18:39.000Z"
  },
  {
    "id": 168,
    "keyword": null,
    "link": null,
    "title": "express  expressjs4 async",
    "description": "app.post('/signup', async(req, res, next) => {\n  async function runAsync () {\n    await firstThing()\n    await secondThing()\n  }\n\n  runAsync()\n    .catch(next)\n})\n",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 169,
    "keyword": null,
    "link": null,
    "title": "express  expressjs async await",
    "description": "function doRequest(url) {\n  return new Promise(function (resolve, reject) {\n    request(url, function (error, res, body) {\n      if (!error && res.statusCode == 200) {\n        resolve(body);\n      } else {\n        reject(error);\n      }\n    });\n  });\n}\n\n// Usage:\n\nasync function main() {\n  let res = await doRequest(url);\n  console.log(res);\n}\n\nmain();app.post('/signup', async(req, res) => {\n  try {\n    const { email, firstName } = req.body\n    const user = new User({ email, firstName })\n    const ret = await user.save()\n    res.json(ret)\n  } catch (error) {\n    console.log(error)\n  }\n})\napp.post('/signup', async(req, res, next) => {\n  async function runAsync () {\n    await firstThing()\n    await secondThing()\n  }\n\n  runAsync()\n    .catch(next)\n})\n",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 170,
    "keyword": null,
    "link": null,
    "title": "express  expressjs cheat sheet",
    "description": "app.set('x', 'yyy')\napp.get('x') //=> 'yyy'\n\napp.enable('trust proxy')\napp.disable('trust proxy')\n\napp.enabled('trust proxy') //=> true\n",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 171,
    "keyword": null,
    "link": null,
    "title": "express  expressjs create encrypted password",
    "description": "// To encrypt passwords use bcrypt\n\n>> npm install bcrypt\n\nconst bcrypt = require('bcrypt');\n\nbcrypt.hash('somePassowrd', 12).then(hash => {\n    console.log(hash);\n});",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 172,
    "keyword": null,
    "link": null,
    "title": "express  expressjs hello world",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\nbasic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           const express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 173,
    "keyword": null,
    "link": null,
    "title": "express  expressjs path optional parameters",
    "description": "use the '?' character \n  \n/articles/:year?/:month?/:day?",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 174,
    "keyword": null,
    "link": null,
    "title": "express  expressjs post endpoint",
    "description": "const express = require('express')\nconst app = express()\n\n// POST method route\napp.post('/', function (req, res) {\n  // req.body\n  res.send('POST request to the homepage')\n})",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 175,
    "keyword": null,
    "link": null,
    "title": "express  expressjs post route",
    "description": "const express = require('express')\nconst app = express()\n\n// POST method route\napp.post('/', function (req, res) {\n  // req.body\n  res.send('POST request to the homepage')\n})",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 176,
    "keyword": null,
    "link": null,
    "title": "express  expressjs query params",
    "description": "app.get('/path/:name', function(req, res) { // url: /path/test\n  console.log(req.params.name);  // result: test\n});\n\n// OR\n\napp.get('/path', function(req, res) {  // url: /path?name='test'\n  console.log(req.query['name']);  // result: test\n});GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n  res.send('id: ' + req.query.id);\n});\n\napp.listen(3000);// GET /search?q=tobi+ferret\nconsole.dir(req.query.q)\n// => 'tobi ferret'\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nconsole.dir(req.query.order)\n// => 'desc'\n\nconsole.dir(req.query.shoe.color)\n// => 'blue'\n\nconsole.dir(req.query.shoe.type)\n// => 'converse'\n\n// GET /shoes?color[]=blue&color[]=black&color[]=red\nconsole.dir(req.query.color)\n// => ['blue', 'black', 'red']\n//get query¶ms in express\n\n//etc. example.com/user/000000?sex=female\n\napp.get('/user/:id', function(req, res) {\n  const query = req.query;// query = {sex:\"female\"}\n  const params = req.params; //params = {id:\"000000\"}\n\n})\nnpm install request@2.81.0\n",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 177,
    "keyword": null,
    "link": null,
    "title": "express  expressjs receive url parameter",
    "description": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});URL Parameters\nThese are information that are passed through the URL like so:\n\nhttp://example.com/api/users?id=4&token=sdfa3&geo=us",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 178,
    "keyword": null,
    "link": null,
    "title": "express  expressjs server",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})// this is your code\n// ZDev1#4511 on discord if you want more help!\n// first you should install express in the terminal\n// `npm i express`.\nconst express = require('express');\nconst app = express();\n\n// route\napp.get('/', (req,res)=>{\n  // Sending This is the home page! in the page\n  res.send('This is the home page!');\n});\n\n// Listening to the port\nlet PORT = 3000;\napp.listen(PORT)\n\n// FINISH!const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n// npm init\n// npm i express\n\nconst express = require('express');\nconst server = express();\n\nconst PORT = 3000;\n\n// Body parser\nserver.use(express.json());\n\n// Homme page\nserver.get('/', (req, res) => {\n  return res.send(\"<h1 style='text-align: center;'>Hello,<br />from the Express.js server!</h1>\");\n})\n\n// About page\nserver.get('/about', (req, res) => {\n  return res.send('<h2 style=\"text-align:center\">About us</h2>');\n})\n\n// 404 page\nserver.use((req, res, next) =>{\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile(__dirname + '/error404.html');\n    return;\n  }\n  // respond with json\n  else if (req.accepts('json')){\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  // respond with text\n  else {\n    res.type('txt').send('Error 404 - Not found');\n  }\n});\n\n// Listening to the port\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n\n// Running the server: node server.js",
    "reg_date": "2021-10-22T11:18:40.000Z"
  },
  {
    "id": 179,
    "keyword": null,
    "link": null,
    "title": "express  expressjs swagger yaml",
    "description": "// To load your swagger specification yaml file you need to use a module able to convert \n// yaml to json; for instance yamljs.\n\n>> npm install --save yamljs\n\nconst express = require('express');\nconst app = express();\nconst swaggerUi = require('swagger-ui-express');\nconst YAML = require('yamljs');\nconst swaggerDocument = YAML.load('./swagger.yaml');\n\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 180,
    "keyword": null,
    "link": null,
    "title": "express  fetch api with express",
    "description": "const url ='https://example.com';\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  \"client_id\": \"1001125\",\n  \"client_secret\": \"876JHG76UKFJYGVHf867rFUTFGHCJ8JHV\"\n}\nconst data = {\n  \"name\": \"Wade Wilson\",\n  \"occupation\": \"Murderer\",\n  \"age\": \"30 (forever)\"\n}\n\nfetch(url, { method: 'POST', headers: headers, body: data})\n  .then((res) => {\n     return res.json()\n})\n.then((json) => {\n   // Do something with the returned data.\n  console.log(json);\n\n});",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 181,
    "keyword": null,
    "link": null,
    "title": "express  forgotten password express",
    "description": "extends layout\n\nblock content\n  form(method='POST')\n    legend Login\n    .form-group\n      label(for='username') Username\n      input.form-control(type='text', name='username', autofocus)\n    .form-group\n      label(for='password') Password\n      input.form-control(type='password', name='password')\n    button.btn.btn-primary(type='submit') Login\n    a.btn.btn-link(href='/forgot') Forgot Password?\n",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 182,
    "keyword": null,
    "link": null,
    "title": "express  formidable express",
    "description": "// make this a middleware function, \n// then put it on the route like you used jwt,\n// then get the value with req.users.\n\nconst { IncomingForm } = require('formidable')\nconst { resolve } = require('path')\nconst { existsSync, writeFileSync } = require('fs')\n\nmodule.exports = (req, res, next) => {\n  const form = new IncomingForm({\n    maxFileSize: 1 * 1024 * 1024,\n    keepExtensions: true\n  })\n\n  form.parse(req, (error, fields, file) => {\n    if (error) return next(error)\n    const patternFile = /\\.(jpg|jpeg|png|svg|gif|raw|webp)$/gi.test(file.productImage.name)\n\n    if (patternFile) {\n      const pathFile = resolve(process.cwd(), 'servers/uploads/', file.productImage.name)\n      const fileExits = existsSync(pathFile)\n      if (!fileExits) {\n        writeFileSync(pathFile)\n        req.users = JSON.parse(JSON.stringify({ fields, file }))\n        return next()\n      }\n      req.users = JSON.parse(JSON.stringify({ fields, file }))\n      return next()\n    }\n  })\n}\nconst express = require('express');const formidable = require('formidable'); const app = express(); app.get('/', (req, res) => {  res.send(`    <h2>With <code>\"express\"</code> npm package</h2>    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">      <div>Text field title: <input type=\"text\" name=\"title\" /></div>      <div>File: <input type=\"file\" name=\"someExpressFiles\" multiple=\"multiple\" /></div>      <input type=\"submit\" value=\"Upload\" />    </form>  `);}); app.post('/api/upload', (req, res, next) => {  const form = formidable({ multiples: true });   form.parse(req, (err, fields, files) => {    if (err) {      next(err);      return;    }    res.json({ fields, files });  });}); app.listen(3000, () => {  console.log('Server listening on http://localhost:3000 ...');});",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 183,
    "keyword": null,
    "link": null,
    "title": "express  formidable express example",
    "description": "// make this a middleware function, \n// then put it on the route like you used jwt,\n// then get the value with req.users.\n\nconst { IncomingForm } = require('formidable')\nconst { resolve } = require('path')\nconst { existsSync, writeFileSync } = require('fs')\n\nmodule.exports = (req, res, next) => {\n  const form = new IncomingForm({\n    maxFileSize: 1 * 1024 * 1024,\n    keepExtensions: true\n  })\n\n  form.parse(req, (error, fields, file) => {\n    if (error) return next(error)\n    const patternFile = /\\.(jpg|jpeg|png|svg|gif|raw|webp)$/gi.test(file.productImage.name)\n\n    if (patternFile) {\n      const pathFile = resolve(process.cwd(), 'servers/uploads/', file.productImage.name)\n      const fileExits = existsSync(pathFile)\n      if (!fileExits) {\n        writeFileSync(pathFile)\n        req.users = JSON.parse(JSON.stringify({ fields, file }))\n        return next()\n      }\n      req.users = JSON.parse(JSON.stringify({ fields, file }))\n      return next()\n    }\n  })\n}\n",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 184,
    "keyword": null,
    "link": null,
    "title": "express  generate express app",
    "description": "npm i express -g\n\nexpress --view=pug myappconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n## Command\n$ npx express-generator\n\n: 'For earlier Node versions, install the application generator as a global\nnpm package and then launch it':\n$ npm install -g express-generator\n$ express\n\n## Display the command options with the -h option:\n$ express -hnpx express-generator$ npx express-generator\n",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 185,
    "keyword": null,
    "link": null,
    "title": "express  generate express js project",
    "description": "npm i express -g\n\nexpress --view=pug myapp$ npx express-generator\nvar express=require('express');\nvar app=express();\n\napp.get('/',function(req,res){\n\tres.send(\"Hello World!\");\n});\n\nvar server=app.listen(3000,function() {});\n",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 186,
    "keyword": null,
    "link": null,
    "title": "express  get express variable",
    "description": "app.get('/user/:id', function(req, res) {\n  res.send('user' + req.params.id);    \n});",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 187,
    "keyword": null,
    "link": null,
    "title": "express  get in expressjs",
    "description": "const express = require('express');\nconst app = express();\napp.get('/', async (req, res)=>{\n  req.(\"request is sent\");\nres.send(\"Message here...\");\n})",
    "reg_date": "2021-10-22T11:18:41.000Z"
  },
  {
    "id": 188,
    "keyword": null,
    "link": null,
    "title": "express  get post request content express",
    "description": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.post('/', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));\n",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 189,
    "keyword": null,
    "link": null,
    "title": "express  get url params in express",
    "description": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})app.get(\"/users/:id\",(req,res)=>{ // https://domain.com/users/817178\n  const id = req.params.id ; //  817178\n})\napp.get(\"/users?name=anas\",(req,res)=> { // https://domain.com/users?name=anas\nconst name  = req.query.name ; //anas\n})        // http://localhost:8080/api/1\napp.get('/api/:version', function(req, res) {\n    res.send(req.params.version);\n});",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 190,
    "keyword": null,
    "link": null,
    "title": "express  graphql upload express",
    "description": "//resolvers.js\nexport default {\n\tQuery: {\n\t\tusersActivation() {\n\t\t\treturn 'Hello Wordl'\n\t\t}\n\t},\n\tMutation: {\n\t\tuploadFile: async (parent, { file }) => {\n\t\t\tconst { filename, createReadStream } = await file.promise\n\t\t\tfileUpload({ filename, stream: createReadStream() })\n\t\t\treturn true\n\t\t}\n\t}\n}\n\n//typedefs.js\nexport default gql(`\n\t scalar Upload\n\n\t type Query {\n\t\thelloWordl : String!\n\t }\n\n\ttype Mutation {\n\t\tuploadFile(file: Upload!): Boolean\n\t  }\n\t`)\n\n// util.upload.js\nconst uploadFile = ({ filename, stream }) => {\n\tstream\n\t\t.pipe(createWriteStream(resolve(process.cwd(), `src/images/${filename}`)))\n\t\t.on('finish', () => Promise.resolve())\n\t\t.on('error', Promise.reject)\n}\n\nconst validateFile = ({ filename, stream }) => {\n\tconst extFile = filename.replace('.', '')\n    \n\tconst extPattern = /(jpg|jpeg|png|gif|svg)/gi.test(extFile)\n\tif (!extPattern) throw new TypeError('Image format is not valid')\n\n\tconst fileExits = existsSync(resolve(process.cwd(), `src/images/${filename}`))\n\tif (!fileExits) return uploadFile({ filename, stream })\n\n\tunlink(resolve(process.cwd(), `src/images/${filename}`), (error) => {\n\t\tif (error) throw error\n\t\treturn uploadFile({ filename, stream })\n\t})\n}\n\nexport const fileUpload = ({ filename, stream }) =>\n\tfilename ? validateFile({ filename, stream }) : new Error('Image is required')\n\n\n// request query playground\nmutation UPLOAD_FILE($file: Upload!) {\n  uploadFile(file: $file)\n}",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 191,
    "keyword": null,
    "link": null,
    "title": "express  hello world expressjs",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 192,
    "keyword": null,
    "link": null,
    "title": "express  how can i use sessions in express js",
    "description": "const express = require('express')\nconst session = require('express-session')\n\nconst app = express()\napp.use(session({\n  'secret': '343ji43j4n3jn4jk3n'\n}))\n",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 193,
    "keyword": null,
    "link": null,
    "title": "express  how express serve public folder",
    "description": "// projectDirectory/src/index.js\nconst path = require('path')\nconst publicDirectoryPath = path.join(__dirname, '../public')\napp.use(express.static(publicDirectoryPath))\n\n// projectDirectory/public -> create index.html\n// localhost:3000/index.html -> Here you go..\n\napp.use('/', express.static('public'));",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 194,
    "keyword": null,
    "link": null,
    "title": "express  how to access a database in express",
    "description": "var MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', function (err, client) {\n  if (err) throw err\n\n  var db = client.db('animals')\n\n  db.collection('mammals').find().toArray(function (err, result) {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\nvar mysql = require('mysql')\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\n",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 195,
    "keyword": null,
    "link": null,
    "title": "express  how to change Mime type of a file express",
    "description": "express.static.mime.define({'text/plain': ['md']});\n",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 196,
    "keyword": null,
    "link": null,
    "title": "express  how to create server in node js using express",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000// this is your code\n// ZDev1#4511 on discord if you want more help!\n// first you should install express in the terminal\n// `npm i express`.\nconst express = require('express');\nconst app = express();\n\n// route\napp.get('/', (req,res)=>{\n  // Sending This is the home page! in the page\n  res.send('This is the home page!');\n});\n\n// Listening to the port\nlet PORT = 3000;\napp.listen(PORT)\n\n// FINISH!const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));// npm init\n// npm i express\n\nconst express = require('express');\nconst server = express();\n\nconst PORT = 3000;\n\n// Body parser\nserver.use(express.json());\n\n// Homme page\nserver.get('/', (req, res) => {\n  return res.send(\"<h1 style='text-align: center;'>Hello,<br />from the Express.js server!</h1>\");\n})\n\n// About page\nserver.get('/about', (req, res) => {\n  return res.send('<h2 style=\"text-align:center\">About us</h2>');\n})\n\n// 404 page\nserver.use((req, res, next) =>{\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile(__dirname + '/error404.html');\n    return;\n  }\n  // respond with json\n  else if (req.accepts('json')){\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  // respond with text\n  else {\n    res.type('txt').send('Error 404 - Not found');\n  }\n});\n\n// Listening to the port\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});You can run the application generator with the npx command (available in Node.js 8.2.0).\n$ npx express-generator\nFor earlier Node versions, install the application generator as a global npm package and then launch it:\n$ npm install -g express-generator\nFor example, the following creates an Express app named myapp. The app will be created in a folder named myapp in the current working directory and the view engine will be set to Pug:\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/bin\n   create : myapp/bin/www\nThen install dependencies:\n$ cd myapp\n$ npm install\nOn MacOS or Linux, run the app with this command:\n$ DEBUG=myapp:* npm start\nOn Windows Command Prompt, use this command:\n> set DEBUG=myapp:* & npm start\nOn Windows PowerShell, use this command:\nPS> $env:DEBUG='myapp:*'; npm start\nThen load http://localhost:3000/ in your browser to access the app.\nThe generated app has the following directory structure:\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\nThe app structure created by the generator is just one of many ways to structure Express apps. Feel free to use this structure or modify it to best suit your needs.const http = require('http')\nconst express = require('express')\n\nconst app = express()\nconst server = http.Server(app)\napp.set('port', 8888)\nserver.listen(8888)\n\napp.get('/', (req, res) => {\n  res.json({teste: true})\n})\n",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 197,
    "keyword": null,
    "link": null,
    "title": "express  how to filter array objesct in express node js",
    "description": "var data = [\n  // the array to be filtered\n];\n\nvar filteredArray = data.filter(item => (item.name === req.query.q));\n",
    "reg_date": "2021-10-22T11:18:42.000Z"
  },
  {
    "id": 198,
    "keyword": null,
    "link": null,
    "title": "express  how to get data send from a form express",
    "description": "const express = require('express')\nconst app = express()\n\napp.use(express.urlencoded())\n",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 199,
    "keyword": null,
    "link": null,
    "title": "express  how to handle all error of all router in express",
    "description": "// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n    app.use(function (err, req, res, next) {\n        res.status(err.status || 500);\n        res.render('error.ejs', {\n            message: err.message,\n            error: err\n        });\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function (err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n        message: err.message,\n        error: {}\n    });\n});\nvar router = express.Router();\n\nrouter.get('/req1', handleErrorAsync(async (req, res, next) => {\n   let result = await someAsyncFunction1();\n   if(result){\n       // res.send whatever\n   }\n}));\nrouter.post('/req2', handleErrorAsync(async (req, res, next) => {\n    let result = await someAsyncFunction2(req.body.param1);\n    if(result){\n        // res.send whatever\n    }\n}));\nrouter.post('/req3', handleErrorAsync(async (req, res, next) => {\n    let result = await someAsyncFunction3(req.body.param1, req.body.param2);\n    if(result){\n        // res.send whatever\n    }\n}));\n\nmodule.exports = router;\nconst handleErrorAsync = func => (req, res, next) => {\n    func(req, res, next).catch((error) => next(error));\n};\n",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 200,
    "keyword": null,
    "link": null,
    "title": "express  how to integrate vuejs with nodejs and express",
    "description": "const Joi = require('joi');\nconst db = require('./connection');\n \nconst schema = Joi.object().keys({\n    username: Joi.string().alphanum().required(),\n    subject: Joi.string().required(),\n    message: Joi.string().max(500).required(),\n    imageURL: Joi.string().uri({\n        scheme: [\n            /https?/\n        ]\n    })\n});\n \nconst messages = db.get('messages');\n \nfunction getAll() {\n    return messages.find();\n}\n \nfunction create(message) {\n    if (!message.username) message.username = 'Anonymous';\n \n    const result = Joi.validate(message, schema);\n    if (result.error == null) {\n        message.created = new Date();\n        return messages.insert(message);\n    } else {\n        return Promise.reject(result.error);\n    }\n}\n \nmodule.exports = {\n    create,\n    getAll\n};\n",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 201,
    "keyword": null,
    "link": null,
    "title": "express  how to parse using express without body parser",
    "description": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n\nconst express = require('express')\n\nconst app = express()\n\napp.use(express.json())\napp.use(express.urlencoded())",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 202,
    "keyword": null,
    "link": null,
    "title": "express  how to render a new page in node js through express",
    "description": "app.get('/renderHTML', (req, res) => {\n    res.sendFile('FileName.html', {\n        root: path.join(__dirname, './') // <= you might have to write '/foldername/\n    })\n})",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 203,
    "keyword": null,
    "link": null,
    "title": "express  how to send response in express js",
    "description": "(req, res) => res.send('Hello World!')\n//Use end() to send an empty response\nres.end()\nres.status(404).end()// for not found pages\n//use either\n//res.status(404).send('File not found') === res.sendStatus(404)",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 204,
    "keyword": null,
    "link": null,
    "title": "express  how to set up an express api nodejs",
    "description": "const express = require('express')\n\nconst app = express() \n\napp.get('/', (req, res, next) => {\n\tres.json({\n      message: 'This is my JSON api'\n    });\n});\n\napp.listen(your-port-here, () => {\n\tconsole.log(`listening on http://localhost:${the-port-goes-here}`)\n});\n\n/*\nWombleWoo7547 @ https://github.com/WombleWoo7547 https://replit.com/@WombleWoo7547\n*/",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 205,
    "keyword": null,
    "link": null,
    "title": "express  how to set view engine in express",
    "description": "app.set(\"view engine\", \"ejs\");\napp.set(\"views\", path.join(__dirname, \"views\"));",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 206,
    "keyword": null,
    "link": null,
    "title": "express  how to use custom stylesheets express node",
    "description": "app.use(express.static(__dirname + '/public'));\n\n<link rel='stylesheet' href='/style.css' />",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 207,
    "keyword": null,
    "link": null,
    "title": "express  https with express",
    "description": "const fs = require('fs');\nconst https = require('https');\n\nconst app = require('express')();\napp.get('*', (req, res) => res.send('<h1>Hello, World</h1>'));\n\nconst server = https.createServer({\n  key: fs.readFileSync(`${__dirname}/localhost-key.pem`, 'utf8'),\n  cert: fs.readFileSync(`${__dirname}/localhost.pem`, 'utf8')\n}, app);\n\nawait server.listen(443);var express = require('express');var app = express(); var redirectToHTTPS = require('express-http-to-https').redirectToHTTPS // Don't redirect if the hostname is `localhost:port` or the route is `/insecure`app.use(redirectToHTTPS([/localhost:(\\d{4})/], [/\\/insecure/], 301)); app.get('/', function (req, res) {  res.send('Hello World!');}); app.get('/insecure', function (req, res) {  res.send('Dangerous!');}); app.listen(3000, function () {  console.log('Example app listening on port 3000!');}); app.listen(8080, function () {  console.log('Example app listening on port 8080 insecurely!');});",
    "reg_date": "2021-10-22T11:18:43.000Z"
  },
  {
    "id": 208,
    "keyword": null,
    "link": null,
    "title": "express  iis express gzip",
    "description": "//Start command prompt \n//Go to IIS Express installation folder (%PROGRAMFILES%\\IIS Express)\n//Run following command:\nappcmd set config -section:urlCompression /doDynamicCompression:true",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 209,
    "keyword": null,
    "link": null,
    "title": "express  javascript express server",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\nconst express = require(\"express\")\n\nconst app = express()\n\napp.listen(5000, () => {\n\tconsole.log(\"Server has started!\")\n})There are several steps for setting up a basic Express Server:\n\n1. Run npm init -y\n2. Install your dependencies (express)\n3. Create a .gitignore file\n4. Add node_modules to your .gitignore\n5. Create the server directory\n6. Create your index file\n7. Require your dependencies\n8. Declare your app variable\n9. Declare your listen port\n10. invoke the listen method and add a console log to the callback\n11. run nodemon server/index.js in your terminal\n12. success\n\n",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 210,
    "keyword": null,
    "link": null,
    "title": "express  joi in node and express",
    "description": "npm init -y\nnpm install --save express body-parser morgan joi lodash\n",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 211,
    "keyword": null,
    "link": null,
    "title": "express  js express server",
    "description": "const http = require('http')\nconst express = require('express')\n\nconst app = express()\nconst server = http.Server(app)\napp.set('port', 8888)\nserver.listen(8888)\n\napp.get('/', (req, res) => {\n  res.json({teste: true})\n})\n",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 212,
    "keyword": null,
    "link": null,
    "title": "express  jsdoc for express routes",
    "description": "/** Express router providing user related routes\n * @module routers/users\n * @requires express\n */\n\n/**\n * express module\n * @const\n */\nconst express = require('express');\n\n/**\n * Express router to mount user related functions on.\n * @type {object}\n * @const\n * @namespace usersRouter\n */\nconst router = express.Router();\n\n/**\n * Route serving login form.\n * @name get/login\n * @function\n * @memberof module:routers/users~usersRouter\n * @inner\n * @param {string} path - Express path\n * @param {callback} middleware - Express middleware.\n */\nrouter.get('/login', function(req, res, next) {\n  res.render('login', {title: 'Login', message: 'You must login'});\n});\n",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 213,
    "keyword": null,
    "link": null,
    "title": "express  list pci express version command line",
    "description": "lspci\n \n# PCI device details\nlspci -vv",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 214,
    "keyword": null,
    "link": null,
    "title": "express  manage favicon with express app",
    "description": "var express = require('express')\nvar favicon = require('serve-favicon')\nvar path = require('path')\n\nvar app = express()\napp.use(favicon(path.join(__dirname, 'public', 'favicon.ico')))\n\n// Add your routes here, etc.\n\napp.listen(3000)\n",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 215,
    "keyword": null,
    "link": null,
    "title": "express  mongodbClint express",
    "description": "Some Databases : \n\n1.https://pouchdb.com/ - Light Weight - Alot of Functions\n2.https://dbdb.io/db/nedb - Light Weight - Easy To Use \n3.https://www.mongodb.com/ - Best DB - Complex To Usevar mysql = require('mysql')\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\nvar MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', function (err, db) {\n  if (err) throw err\n\n  db.collection('mammals').find().toArray(function (err, result) {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\n",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 216,
    "keyword": null,
    "link": null,
    "title": "express  mongoose express js post",
    "description": "const express = require(\"express\");\nconst route = express.Router();\nconst mongoose = require(\"mongoose\");\nconst Schema = mongoose.Schema;\n\nconst noteSchema = new Schema({\n\tnote: {\n\t\ttype: String,\n\t\trequired: true\n\t},\n\n});\nconst noteModels = mongoose.model(\"note\", noteSchema);\n\nroute.post(\"/\", async (req, res) => {\n    const note = new noteModels({\n      note: req.body.note,\n    });\n\n    const saveNote = await note.save();\n    res.json(saveNote);\n  })\n \nmodule.exports = route;",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 217,
    "keyword": null,
    "link": null,
    "title": "express  ngingx proxy express get real ip",
    "description": "1) app.set('trust proxy', true) in your Express app.\n2) Add proxy_set_header X-Forwarded-For $remote_addr in\n  the Nginx configuration for your server block.\n// sudo nano /etc/nginx/sites-available/default",
    "reg_date": "2021-10-22T11:18:44.000Z"
  },
  {
    "id": 218,
    "keyword": null,
    "link": null,
    "title": "express  no special characters express validator",
    "description": "body.check(\"password\", \"...\").matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/, \"i\");\n",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 219,
    "keyword": null,
    "link": null,
    "title": "express  node.js express",
    "description": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n$ npm install express --no-save\nbasic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 220,
    "keyword": null,
    "link": null,
    "title": "express  node.js express post query string",
    "description": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// POST /somepost/?name=somename\napp.post('/somepost', (req, res) => {\n    console.log('Name:', req.query.name);\n    res.status(200);\n});// GET /search?q=tobi+ferret\nconsole.dir(req.query.q)\n// => 'tobi ferret'\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nconsole.dir(req.query.order)\n// => 'desc'\n\nconsole.dir(req.query.shoe.color)\n// => 'blue'\n\nconsole.dir(req.query.shoe.type)\n// => 'converse'\n\n// GET /shoes?color[]=blue&color[]=black&color[]=red\nconsole.dir(req.query.color)\n// => ['blue', 'black', 'red']\n",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 221,
    "keyword": null,
    "link": null,
    "title": "express  node express",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express$ npm install expressconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n$ npm install express --no-save\nnpm install express --save",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 222,
    "keyword": null,
    "link": null,
    "title": "express  node express app.listen at specific port & host",
    "description": "const express = require('express');\nconst app = express();\napp.listen('9000','0.0.0.0',()=>{\n      console.log(\"server is listening on 9000 port\");\n})\n",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 223,
    "keyword": null,
    "link": null,
    "title": "express  node express cors headers",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});$ npm install cors\n",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 224,
    "keyword": null,
    "link": null,
    "title": "express  node express post request json",
    "description": "var express = require('express');\n\nvar app = express();\n\napp.use(express.json()); // built-in middleware for express\n\napp.post('/', function(request, response){\n \tlet myJson = request.body;      // your JSON\n\tlet myValue = request.body.myKey;\t// a value from your JSON\n\tresponse.send(myJson);\t // echo the result back\n});\n\napp.listen(3000);",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 225,
    "keyword": null,
    "link": null,
    "title": "express  node express server static files",
    "description": "var express = require('express');\nvar app = express();\nvar path = require('path');\n\n//app.use(express.static(__dirname)); // Current directory is root\napp.use(express.static(path.join(__dirname, 'public'))); //  \"public\" off of current is root\n\napp.listen(80);\nconsole.log('Listening on port 80');",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 226,
    "keyword": null,
    "link": null,
    "title": "express  node express setup",
    "description": "npm i expressnpm init -y\nnpm i express\nnpm install express@4$ npx express-generator\nyarn add express \nyarn add --dev @types/express",
    "reg_date": "2021-10-22T11:18:45.000Z"
  },
  {
    "id": 227,
    "keyword": null,
    "link": null,
    "title": "express  node express table view",
    "description": "<table>\n  <tr>\n    <th>id</th><th>Name</th>\n  </tr>\n\n  <% for (var i = 0; i < data.length; i++) { %>\n    <tr>\n      <td><%= data[i].id %></td>\n      <td><%= data[i].name %></td>\n    </tr>    \n  <% } %>\n</table>\n",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 228,
    "keyword": null,
    "link": null,
    "title": "express  node express verify account link api",
    "description": "var emailRegex = /^[-!#$%&'*+\\/0-9=?A-Z^_a-z{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\n\nfunction isEmailValid(email) {\n    if (!email)\n        return false;\n\n    if(email.length>254)\n        return false;\n\n    var valid = emailRegex.test(email);\n    if(!valid)\n        return false;\n\n    // Further checking of some things regex can't handle\n    var parts = email.split(\"@\");\n    if(parts[0].length>64)\n        return false;\n\n    var domainParts = parts[1].split(\".\");\n    if(domainParts.some(function(part) { return part.length>63; }))\n        return false;\n\n    return true;\n}\n",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 229,
    "keyword": null,
    "link": null,
    "title": "express  node js express",
    "description": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n$ npm install express --no-save\nbasic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 230,
    "keyword": null,
    "link": null,
    "title": "express  node js express session expiration",
    "description": "const express = require('express')\nconst session = require('express-session')\n\nconst app = express()\napp.use(session({\n  'secret': '343ji43j4n3jn4jk3n'\n}))\n$ npm install express-sessionapp.use(express.session(\n  { secret: \"secret\", store: new MemoryStore(), expires: new Date(Date.now() + (30 * 86400 * 1000)) \n  }));\n",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 231,
    "keyword": null,
    "link": null,
    "title": "express  node js express url parameters",
    "description": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.tagId);\n});\n\n// GET /p/5\n// tagId is set to 5\n",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 232,
    "keyword": null,
    "link": null,
    "title": "express  node js http request express",
    "description": "res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\nnpm install request@2.81.0\n",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 233,
    "keyword": null,
    "link": null,
    "title": "express  nodejs express api",
    "description": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})const express = require('express')\n\nconst app = express() \n\napp.get('/', (req, res, next) => {\n\tres.json({\n      message: 'This is my JSON api'\n    });\n});\n\napp.listen(your-port-here, () => {\n\tconsole.log(`listening on http://localhost:${the-port-goes-here}`)\n});\n\n/*\nWombleWoo7547 @ https://github.com/WombleWoo7547 https://replit.com/@WombleWoo7547\n*/app.render('email', function (err, html) {\n  // ...\n})\n\napp.render('email', { name: 'Tobi' }, function (err, html) {\n  // ...\n})\n",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 234,
    "keyword": null,
    "link": null,
    "title": "express  nodejs express hot reload",
    "description": "$ npm install nodemon -g\n$ nodemon app.js",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 235,
    "keyword": null,
    "link": null,
    "title": "express  nodejs express return image",
    "description": "var filepath = '~/path/to/file.png'\n\napp.get('/path/for/site', function (req, res) {\n    res.sendFile(filepath);\n})",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 236,
    "keyword": null,
    "link": null,
    "title": "express  nodejs express routing",
    "description": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});var express = require('express')\nvar router = express.Router()\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds')\n})\n\nmodule.exports = router\nconst express = require('express');\nconst mysql = require('mysql');\n\n// Connecting with database\nconst db = mysql.createConnection({\n  host: 'localhost',\t\t\t\t\t// The host you're using\n  user: 'yourusername',\t\t\t\t\t// The username you use to enter database\n  password: 'yourpassword'\t\t\t\t// Your password to your username\n});\n\ndb.connect((error) => {\n  if(error) {\n    throw error;\n  }\n  console.log('MySQL Connected');\n});\n\nconst app = express();\n\napp.get('yourroute', (request, response) => {\n  let sql = 'SELECT * FROM yourtable';\n  let query = db.query(sql, (error, result) => {\n    if(error) {\n      throw error;\n    }\n    console.log(result)\t\t\t\t\t// Use the result you get back here\n  })\n});\n\napp.listen('3000', () => {\n  console.log('Server is listening on port 3000');\n});\n\n// You need to install the following packages\nnpm install --save mysql express\n// And if you don't want to restart your server after every little change\nnpm install -g nodemon",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 237,
    "keyword": null,
    "link": null,
    "title": "express  nodejs express routing get",
    "description": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});var express = require('express')\nvar router = express.Router()\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds')\n})\n\nmodule.exports = router\nconst express = require('express');\nconst mysql = require('mysql');\n\n// Connecting with database\nconst db = mysql.createConnection({\n  host: 'localhost',\t\t\t\t\t// The host you're using\n  user: 'yourusername',\t\t\t\t\t// The username you use to enter database\n  password: 'yourpassword'\t\t\t\t// Your password to your username\n});\n\ndb.connect((error) => {\n  if(error) {\n    throw error;\n  }\n  console.log('MySQL Connected');\n});\n\nconst app = express();\n\napp.get('yourroute', (request, response) => {\n  let sql = 'SELECT * FROM yourtable';\n  let query = db.query(sql, (error, result) => {\n    if(error) {\n      throw error;\n    }\n    console.log(result)\t\t\t\t\t// Use the result you get back here\n  })\n});\n\napp.listen('3000', () => {\n  console.log('Server is listening on port 3000');\n});\n\n// You need to install the following packages\nnpm install --save mysql express\n// And if you don't want to restart your server after every little change\nnpm install -g nodemon",
    "reg_date": "2021-10-22T11:18:46.000Z"
  },
  {
    "id": 238,
    "keyword": null,
    "link": null,
    "title": "express  npm express",
    "description": "$ npm install express// npm install express\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res)=> {\n  res.send('Hello World');\n}) \n\napp.listen(3000,()=>{\n console.log(\"starting...\");\n});npm install --save express mongoose ejs dotenv$ npm install express --no-save\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res)=> {\n  res.send('Hello World');\n}) \n\napp.listen(3000,()=>{\n console.log(\"starting...\");\n});",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 239,
    "keyword": null,
    "link": null,
    "title": "express  nuxt looks for npm modules on express",
    "description": "I found Nuxt build will not bundle files in node_modules,\nso if you want to bundle all dependencies into .nuxt, you should use:\n________________________\nnuxt build --standalone |\n________________________|\nsee here: https://github.com/nuxt/nuxt.js/issues/4292",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 240,
    "keyword": null,
    "link": null,
    "title": "express  parse json express",
    "description": "// Update for Express 4.16+\n// Starting with release 4.16.0, a new express.json() middleware is available.\nvar express = require('express');\nvar app = express();\n\napp.use(express.json());\n\napp.post('/', function(request, response){\n  console.log(request.body);      // your JSON\n   response.send(request.body);    // echo the result back\n});\n\napp.listen(3000);$ npm install body-parser\n// parse application/json\napp.use(bodyParser.json())\n",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 241,
    "keyword": null,
    "link": null,
    "title": "express  passing variable in table row delete button node js express",
    "description": "<button class=\"delete-button\" onclick=\"deleting(<%= item._id %>)\">X</button>\nfunction deleting(value){\nfetch('/delete', { method: 'POST', data: {buttonId: value} })\n  .then(function (response) {\n    if (response.ok) {\n      console.log('Delete was recorded')\n      return\n    }\n    throw new Error('Request failed.')\n  })\n  .catch(function (error) {\n    console.log(error)\n  })\n",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 242,
    "keyword": null,
    "link": null,
    "title": "express  post express node js input",
    "description": "<form method=\"POST\" action=\"/submit-form\">\n  <input type=\"text\" name=\"username\" />\n  <input type=\"submit\" />\n</form>const express = require('express')\nconst app = express()\n\napp.use(express.urlencoded({\n  extended: true\n}))\napp.post('/submit-form', (req, res) => {\n  const username = req.body.username\n  //...\n  res.end()\n})\n",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 243,
    "keyword": null,
    "link": null,
    "title": "express  public static expressjs",
    "description": "app.use('/', express.static('public'));//please read the expressjs docs\n//  https://expressjs.com/en/starter/static-files.htmlapp.use('/static', express.static(__dirname + '/public'));\n\nconst path = require('path')\napp.use('/static', express.static(path.join(__dirname, 'public')))\n",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 244,
    "keyword": null,
    "link": null,
    "title": "express  pug node js express",
    "description": "app.set('view engine', 'pug')npm install pug\n\n",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 245,
    "keyword": null,
    "link": null,
    "title": "express  put route error express",
    "description": "//don't forget the \"/\" in the route targeted URL : \napp.put(\"/collection/:id\", (req, res)=>{\n\t//route content\n})",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 246,
    "keyword": null,
    "link": null,
    "title": "express  refresh after delete in express",
    "description": "  // Reloading the page\n    location.reload();",
    "reg_date": "2021-10-22T11:18:47.000Z"
  },
  {
    "id": 247,
    "keyword": null,
    "link": null,
    "title": "express  relaod the page in express",
    "description": "  // Reloading the page\n    location.reload();",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 248,
    "keyword": null,
    "link": null,
    "title": "express  req.query express",
    "description": "for (const key in req.query) {\n  console.log(key, req.query[key])\n}\nconst express = require('express')\nconst app = express()\n\napp.get('/', (req, res) => {\n  console.log(req.query)\n})\n\napp.listen(8080)\nnpm install request@2.81.0\n",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 249,
    "keyword": null,
    "link": null,
    "title": "express  req body express",
    "description": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\nvar express = require('express')\n\nvar app = express()\n\napp.use(express.json()) // for parsing application/json\napp.use(express.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded\n\napp.post('/profile', function (req, res, next) {\n  console.log(req.body)\n  res.json(req.body)\n})\nvar bodyParser = require('body-parser')\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\napp.get('/user/:id', (req, res) => {\n  console.log(req.params.id) // \"1234562134654\"\n})\nor\napp.get('/user/:user_id', (req, res) => {\n  console.log(req.params.user_id) // \"1234562134654\"\n})app.post('/login', (req, res) => {\n  console.log(req.body.email) // \"user@example.com\"\n  console.log(req.body.password) // \"helloworld\"\n})export const app = express();\napp.use(express.json());\n",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 250,
    "keyword": null,
    "link": null,
    "title": "express  request entity too large express",
    "description": "app.use(bodyParser.json({\n  limit: '50mb'\n}));\n\napp.use(bodyParser.urlencoded({\n  limit: '50mb',\n  parameterLimit: 100000,\n  extended: true \n}));\napp.use(express.json({limit: '50mb'}));\napp.use(express.urlencoded({limit: '50mb'}));axios({\n  url: url,\n  method: \"POST\", <- PUT, DELETE, UPDATE, PATCH\n  data: fromData, <- the form data the include the large file\n  maxContentLength: \"infinity\", <- for large content, base64\n  maxBodyLength: \"infinity\", <- do the same above\n})",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 251,
    "keyword": null,
    "link": null,
    "title": "express  require express",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)const express = require('express')",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 252,
    "keyword": null,
    "link": null,
    "title": "express  router vs app express",
    "description": "var express = require('express'),\n    dogs    = require('./routes/dogs'),\n    cats    = require('./routes/cats'),\n    birds   = require('./routes/birds');\n\nvar app = express();\n\napp.use('/dogs',  dogs);\napp.use('/cats',  cats);\napp.use('/birds', birds);\n\napp.listen(3000);\n",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 253,
    "keyword": null,
    "link": null,
    "title": "express  sample express app",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n$ npx express-generator\nconst express = require('express')const app = express() app.get('/', function (req, res) {  res.send('Hello World')}) app.listen(3000)var express=require('express');\nvar app=express();\n\napp.get('/',function(req,res){\n\tres.send(\"Hello World!\");\n});\n\nvar server=app.listen(3000,function() {});\n",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 254,
    "keyword": null,
    "link": null,
    "title": "express  sendfile express syntax",
    "description": "var express = require('express');\nvar app = express();\nvar path = require('path');\n\n// viewed at http://localhost:8080\napp.get('/', function(req, res) {\n    res.sendFile(path.join(__dirname + '/index.html'));\n});\n\napp.listen(8080);app.get('/', function(req, res){\n  res.sendFile('index.html');\n}); \n",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 255,
    "keyword": null,
    "link": null,
    "title": "express  serve a file in express",
    "description": "const express = require('express')\nconst app = express()\n\napp.use(express.static(__dirname + '/dist'))\n\napp.get('/', (_, res) => {\n    res.sendFile('index.html')\n})\n\napp.listen(3000)",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 256,
    "keyword": null,
    "link": null,
    "title": "express  serve public folder express without file extension",
    "description": "// projectDirectory/src/index.js\nconst path = require('path')\nconst publicDirectoryPath = path.join(__dirname, '../public')\napp.use(express.static(publicDirectoryPath))\n\n// projectDirectory/public -> create index.html\n// localhost:3000/index.html -> Here you go..\n\napp.use(express.static(path.join(__dirname, 'public'),{index:false,extensions:['html']}));\n",
    "reg_date": "2021-10-22T11:18:48.000Z"
  },
  {
    "id": 257,
    "keyword": null,
    "link": null,
    "title": "express  serve static files from express",
    "description": "var express = require('express');\nvar app = express();\nvar path = require('path');\n\n//app.use(express.static(__dirname)); // Current directory is root\napp.use(express.static(path.join(__dirname, 'public'))); //  \"public\" off of current is root\n\napp.listen(80);\nconsole.log('Listening on port 80');app.use('/', express.static('public'));const path = require('path')\napp.use('/static', express.static(path.join(__dirname, 'public')))\n",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 258,
    "keyword": null,
    "link": null,
    "title": "express  set 404 handling via express in node",
    "description": "// Dopo tutte le altre route\n\napp.get('*', function(req, res, next) {\n    var err = new Error();\n    err.status = 404;\n    next(err);\n});\n\napp.use(function(err, req, res, next) {\n    if (err.status === 404) {\n        var data = {\n            title: '404 Not Found',\n            content: 'Oops, page not found!';\n        };\n        res.render('pages/404', data);\n    } else {\n        return next();\n    }\n});\n\napp.use(function(req, res, next){\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.render('404', { url: req.url });\n    return;\n  }\n\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({ error: 'Not found' });\n    return;\n  }\n\n  // default to plain-text. send()\n  res.type('txt').send('Not found');\n});",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 259,
    "keyword": null,
    "link": null,
    "title": "express  set up background process in express app",
    "description": "//app.js\nvar populateDatabase = require(\"./listen\");\nsetInterval(60 * 1000, populateDatabase);\n// rest of app setup/start codefunction populateDatabase() {\n  //connect to streaming API\n  //populate database\n}\n\nmodule.exports = populateDatabase;",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 260,
    "keyword": null,
    "link": null,
    "title": "express  setup ejs views directory in express",
    "description": "app.set('views', path.join(__dirname, '../views'))\n",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 261,
    "keyword": null,
    "link": null,
    "title": "express  setup node js express basic setup",
    "description": "npm init -y\nnpm i express\nyarn add express \nyarn add --dev @types/express",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 262,
    "keyword": null,
    "link": null,
    "title": "express  share link in express js",
    "description": "app.get('/download', function(req, res, next) {\n  // Get the download sid\n  var downloadSid = req.query.sid;\n\n  // Get the download file path\n  getDownloadFilePath(downloadSid, function(err, path) {\n    if (err) return res.end('Error');\n\n    // Read and send the file here...\n\n    // Finally, delete the download session to invalidate the link\n    deleteDownload(downloadSid, function(err) {\n      // ...\n    });\n  });\n});",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 263,
    "keyword": null,
    "link": null,
    "title": "express  simple express server",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express// this is your code\n// ZDev1#4511 on discord if you want more help!\n// first you should install express in the terminal\n// `npm i express`.\nconst express = require('express');\nconst app = express();\n\n// route\napp.get('/', (req,res)=>{\n  // Sending This is the home page! in the page\n  res.send('This is the home page!');\n});\n\n// Listening to the port\nlet PORT = 3000;\napp.listen(PORT)\n\n// FINISH!const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\nconst express = require('express');\nconst app = express();\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\nconst PORT = process.env.PORT || 3000;\n\napp.use(bodyParser.json());\n\n//connecting to db\ntry {\n    mongoose.connect('mongodb://localhost/YOUR_DB_NAME', {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      \tuseCreateIndex: true,\n      }, () =>\n      console.log(\"connected\"));\n  } catch (error) {\n    console.log(\"could not connect\");\n  }\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\n\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 264,
    "keyword": null,
    "link": null,
    "title": "express  social login in node js and express js",
    "description": "passport.use('twitter', new TwitterStrategy({\n    consumerKey     : twitterConfig.apikey,\n    consumerSecret  : twitterConfig.apisecret,\n    callbackURL     : twitterConfig.callbackURL\n  },\n  function(token, tokenSecret, profile, done) {\n    // make the code asynchronous\n    // User.findOne won't fire until we have all our data back from Twitter\n    process.nextTick(function() { \n \n      User.findOne({ 'twitter.id' : profile.id }, \n        function(err, user) {\n          // if there is an error, stop everything and return that\n          // ie an error connecting to the database\n          if (err)\n            return done(err);\n \n            // if the user is found then log them in\n            if (user) {\n               return done(null, user); // user found, return that user\n            } else {\n               // if there is no user, create them\n               var newUser                 = new User();\n \n               // set all of the user data that we need\n               newUser.twitter.id          = profile.id;\n               newUser.twitter.token       = token;\n               newUser.twitter.username = profile.username;\n               newUser.twitter.displayName = profile.displayName;\n               newUser.twitter.lastStatus = profile._json.status.text;\n \n               // save our user into the database\n               newUser.save(function(err) {\n                 if (err)\n                   throw err;\n                 return done(null, newUser);\n               });\n            }\n         });\n      });\n    })\n);\n// Load HTTP module\nconst http = require(\"http\");\n\nconst hostname = \"127.0.0.1\";\nconst port = 8000;\n\n// Create HTTP server \nconst server = http.createServer((req, res) => {\n\n   // Set the response HTTP header with HTTP status and Content type\n   res.writeHead(200, {'Content-Type': 'text/plain'});\n   \n   // Send the response body \"Hello World\"\n   res.end('Hello World\\n');\n});\n\n// Prints a log once the server starts listening\nserver.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n})\n",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 265,
    "keyword": null,
    "link": null,
    "title": "express  socket.io with express",
    "description": "// npm i socket.io\nconst http = require('http')\nconst express = require('express')\nconst socketio = require('socket.io')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = socketio(server)\n\nconst port = process.env.PORT || 3000\n\nserver.listen(port, () => {\n  console.log(`Server is up on port ${port}!`)\n})var app = require('express')();\nvar http = require('http').createServer(app);\nvar io = require('socket.io')(http);\n\napp.get('/', (req, res) => {\n  // Ran when a GET request to path '/'\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', (socket) => {\n  // Ran when a socket connected\n});\n\nhttp.listen(3000, () => {\n  // Ran when server is ready to take requestes\n});<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n  const socket = io();\n</script>const express = require(\"express\");\nconst http = require(\"http\");\nconst socketIo = require(\"socket.io\");\nconst port = process.env.PORT || 8001;\nconst index = require(\"./routes/index\");\nconst app = express();\napp.use(index);\nconst server = http.createServer(app);\nconst io = socketIo(server); // < Interesting!\nconst getApiAndEmit = \"TODO\";const socket = io('ws://localhost:3000');\nsocket.on('connect', () => {  \n  // either with send()  \n  socket.send('Hello!');\n  // or with emit() and custom event names  \n  socket.emit('salutations', 'Hello!', { 'mr': 'john' }, Uint8Array.from([1, 2, 3, 4]));});\n// handle the event sent with socket.send()\nsocket.on('message', data => {\n  console.log(data);\n});\n// handle the event sent with socket.emit()\nsocket.on('greetings', (elem1, elem2, elem3) => {\n  console.log(elem1, elem2, elem3);\n});npm install socket.io",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 266,
    "keyword": null,
    "link": null,
    "title": "express  socket io express",
    "description": "// npm i socket.io\nconst http = require('http')\nconst express = require('express')\nconst socketio = require('socket.io')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = socketio(server)\n\nconst port = process.env.PORT || 3000\n\nserver.listen(port, () => {\n  console.log(`Server is up on port ${port}!`)\n})var app = require('express')();\nvar http = require('http').createServer(app);\nvar io = require('socket.io')(http);\n\napp.get('/', (req, res) => {\n  // Ran when a GET request to path '/'\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', (socket) => {\n  // Ran when a socket connected\n});\n\nhttp.listen(3000, () => {\n  // Ran when server is ready to take requestes\n});<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n  const socket = io();\n</script>const express = require(\"express\");\nconst http = require(\"http\");\nconst socketIo = require(\"socket.io\");\nconst port = process.env.PORT || 8001;\nconst index = require(\"./routes/index\");\nconst app = express();\napp.use(index);\nconst server = http.createServer(app);\nconst io = socketIo(server); // < Interesting!\nconst getApiAndEmit = \"TODO\";const socket = io('ws://localhost:3000');\nsocket.on('connect', () => {  \n  // either with send()  \n  socket.send('Hello!');\n  // or with emit() and custom event names  \n  socket.emit('salutations', 'Hello!', { 'mr': 'john' }, Uint8Array.from([1, 2, 3, 4]));});\n// handle the event sent with socket.send()\nsocket.on('message', data => {\n  console.log(data);\n});\n// handle the event sent with socket.emit()\nsocket.on('greetings', (elem1, elem2, elem3) => {\n  console.log(elem1, elem2, elem3);\n});const app = require(\"express\")();const httpServer = require(\"http\").createServer(app);const options = { /* ... */ };const io = require(\"socket.io\")(httpServer, options);io.on(\"connection\", socket => { /* ... */ });httpServer.listen(3000);// WARNING !!! app.listen(3000); will not work here, as it creates a new HTTP server",
    "reg_date": "2021-10-22T11:18:49.000Z"
  },
  {
    "id": 267,
    "keyword": null,
    "link": null,
    "title": "express  static folder express",
    "description": "app.use('/', express.static('public'));// dependencies\nconst path = require('path');\n\n// set static folder\napp.set(express.static(path.join(__dirname, 'public')));app.use(express.static('public'))\napp.use(express.static('files'))\n",
    "reg_date": "2021-10-22T11:18:50.000Z"
  },
  {
    "id": 268,
    "keyword": null,
    "link": null,
    "title": "express  swagger ui express",
    "description": "// To load your swagger specification yaml file you need to use a module able to convert \n// yaml to json; for instance yamljs.\n\n>> npm install --save yamljs\n\nconst express = require('express');\nconst app = express();\nconst swaggerUi = require('swagger-ui-express');\nconst YAML = require('yamljs');\nconst swaggerDocument = YAML.load('./swagger.yaml');\n\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));npm install --save yamljs\nldksf",
    "reg_date": "2021-10-22T11:18:50.000Z"
  },
  {
    "id": 269,
    "keyword": null,
    "link": null,
    "title": "express  typescript express next middleware type",
    "description": "import * as express from 'express'\nnext: express.NextFunction",
    "reg_date": "2021-10-22T11:18:50.000Z"
  },
  {
    "id": 270,
    "keyword": null,
    "link": null,
    "title": "express  urlencoded json express",
    "description": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\nvar express = require('express')\n\nvar app = express()\n\napp.use(express.json()) // for parsing application/json\napp.use(express.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded\n\napp.post('/profile', function (req, res, next) {\n  console.log(req.body)\n  res.json(req.body)\n})\n// parse application/json\napp.use(bodyParser.json())\n",
    "reg_date": "2021-10-22T11:18:50.000Z"
  },
  {
    "id": 271,
    "keyword": null,
    "link": null,
    "title": "express  user property in express jwt",
    "description": "jwt({ secret: publicKey, requestProperty: 'auth' });// JWT MIDDLEWARE\nconst jwt = require('jsonwebtoken')\nconst httpError = require('http-errors')\n\nmodule.exports = (req, res, next) => {\n  try {\n    const tokenHeader = req.headers.authorization.split('Bearer ')[1]\n    const decoded = jwt.verify(tokenHeader, process.env.ACCESS_TOKEN_SECRET)\n    req.user = decoded\n    next()\n  } catch (err) {\n    next(httpError(401))\n  }\n}\n\n// ROUTE LOGIN\napp.get('/protect', authJwt, (req, res) => {\n  console.log(req.user)\n  res.send('aim in proteced route')\n})\n\napp.post('/login', (req, res) => {\n  const bodyPayload = {\n    id: Date.now(),\n    username: req.body.username\n  }\n  const token = signAccessToken(res, bodyPayload)\n  return res.status(200).json(token)\n})\n\napp.post('/refresh-token', (req, res) => {\n  const refreshToken = signRefreshToken(req)\n  res.status(200).json(refreshToken)\n  res.end()\n})\n\n// JWT HELPER\nconst jwt = require('jsonwebtoken')\nconst httpError = require('http-errors')\n\nexports.signAccessToken = (res, payload) => {\n  try {\n    if (payload) {\n      const accessToken = jwt.sign({ ...payload }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1m' })\n      const refreshToken = jwt.sign({ ...payload }, process.env.REFRESH_TOKEN_SECRET, { expiresIn: '90d' })\n      res.cookie('refreshToken', `${refreshToken}`, { expired: 86400 * 90 })\n      return { accessToken, refreshToken }\n    }\n  } catch (err) {\n    return httpError(500, err)\n  }\n}\n\nexports.signRefreshToken = (req) => {\n  try {\n    const getToken = req.cookies.refreshToken\n    if (getToken) {\n      const { id, username } = jwt.verify(getToken, process.env.REFRESH_TOKEN_SECRET)\n      const accesssToken = jwt.sign({ id, username }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1m' })\n      return { accesssToken }\n    }\n  } catch (err) {\n    return httpError(401, err)\n  }\n}\n",
    "reg_date": "2021-10-22T11:18:50.000Z"
  },
  {
    "id": 272,
    "keyword": null,
    "link": null,
    "title": "express  using multiparty with node js express",
    "description": "var express = require('express');\nvar multiparty = require('connect-multiparty'),\n    multipartyMiddleware = multiparty({ uploadDir: './imagesPath' });\n\nvar router = express.Router();\n\nrouter.post('/', multipartyMiddleware, function(req, res) {\n  console.log(req.body, req.files);\n  var file = req.files.file;\n  console.log(file.name);\n  console.log(file.type);\n  res.status(200).send('OK');\n});\n\nmodule.exports = router;",
    "reg_date": "2021-10-22T11:18:50.000Z"
  },
  {
    "id": 273,
    "keyword": null,
    "link": null,
    "title": "express  using multiple http verbs on express path request",
    "description": "app.route('/book')\n  .get(function (req, res) {\n    res.send('Get a random book')\n  })\n  .post(function (req, res) {\n    res.send('Add a book')\n  })\n  .put(function (req, res) {\n    res.send('Update the book')\n  })\n",
    "reg_date": "2021-10-22T11:18:50.000Z"
  },
  {
    "id": 274,
    "keyword": null,
    "link": null,
    "title": "express  uuid use in express",
    "description": "const uuid= require('uuid/v4');\n",
    "reg_date": "2021-10-22T11:18:51.000Z"
  },
  {
    "id": 275,
    "keyword": null,
    "link": null,
    "title": "express  view engine setup express",
    "description": "// 'ejs' view engine setup in express.js application\napp.set(\"view engine\", \"ejs\");\napp.set(\"views\", path.join(__dirname, \"views\"));",
    "reg_date": "2021-10-22T11:18:51.000Z"
  },
  {
    "id": 276,
    "keyword": null,
    "link": null,
    "title": "express  what is template engine in express",
    "description": "A template engine enables you to use static template files in your application. \nAt runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client.",
    "reg_date": "2021-10-22T11:18:51.000Z"
  },
  {
    "id": 277,
    "keyword": null,
    "link": null,
    "title": "express  widlicard in express router",
    "description": "//This route path will match acd and abcd.\napp.get('/ab?cd', function (req, res) {\n  res.send('ab?cd')\n})\n//This route path will match abcd, abbcd, abbbcd, and so on.\napp.get('/ab+cd', function (req, res) {\n  res.send('ab+cd')\n})\n//This route path will match abcd, abxcd, abRANDOMcd, ab123cd, and so on.\napp.get('/ab*cd', function (req, res) {\n  res.send('ab*cd')\n})\n//This route path will match /abe and /abcde.\napp.get('/ab(cd)?e', function (req, res) {\n  res.send('ab(cd)?e')\n})\n//This route path will match anything with an “a” in it.\napp.get(/a/, function (req, res) {\n  res.send('/a/')\n})\n//This route path will match butterfly and dragonfly, \n//but not butterflyman, dragonflyman, and so on.\napp.get(/.*fly$/, function (req, res) {\n  res.send('/.*fly$/')\n})",
    "reg_date": "2021-10-22T11:18:51.000Z"
  }
]