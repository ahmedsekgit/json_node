[
  {
    "id": 1,
    "keyword": null,
    "link": "                        ",
    "title": "  LOG  ERR                          ",
    "description": "ONG: name too long, open '/home/sea/programs/javascript/nodejs/Crawling/Example3/node_q_r/__code-examples__javascript__frameworks__nodejs__node_:_The_term_'node'_is_not_recognized_as_the_name_of_a_cmdlet,_function,_script_file,_or_operable_program._Check_the_spelling_of_the_name,_or_if_a_path_was_included,_verify_that_the_path_is_correct_and_try_again..txt'Error: ENAMETOOLONG: name too long, open '/home/sea/programs/javascript/nodejs/Crawling/Example3/node_q_r/__code-examples__javascript__frameworks__nodejs__Node_temp_=_new_Node(6,_head,_head.getNext());\r\n    _head.setNext(temp);\r\n    _temp.getNext().setPrev(temp);\r\n    _Node_temp1_=_tail.getPrev();\r\n    _tail.setPrev(temp1.getPrev());\r\n    _temp1.getPrev().setNext(tail);\r\n    .txt'\r\n                    ",
    "reg_date": "2021-11-01T14:49:43.000Z"
  },
  {
    "id": 2,
    "keyword": null,
    "link": null,
    "title": "  code-examples  15  run typescript node",
    "description": "npx ts-node src/foo.ts",
    "reg_date": "2021-10-14T19:39:40.000Z"
  },
  {
    "id": 3,
    "keyword": null,
    "link": null,
    "title": "  code-examples  15  ts-node call function from command line",
    "description": "npx ts-node src/foo.ts",
    "reg_date": "2021-10-14T19:39:40.000Z"
  },
  {
    "id": 4,
    "keyword": null,
    "link": null,
    "title": "  code-examples  1  install node js ubuntu",
    "description": "sudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n# Check node version\nnode -v \n# v13.9.0\n# Also, check the npm version\nnpm -v \n# 6.13.7sudo apt install curl\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo bash -\nsudo apt install -y nodejssudo apt update\nsudo apt install nodejs\nsudo apt install npmcurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install nodejs\nsudo apt install npm\nsudo apt updatesudo apt install nodejs//Author: Mohammad Arman Khan\n//How To Install Node.js on Ubuntu\n1: sudo apt-get update\n2: sudo apt-get install nodejs\n3: sudo apt-get install npm\n4: nodejs -v",
    "reg_date": "2021-10-14T19:39:41.000Z"
  },
  {
    "id": 5,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:39:41.000Z"
  },
  {
    "id": 6,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  : not foundram Files/nodejs/npm: 3:",
    "description": "$ export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n$ # ... do node things\n",
    "reg_date": "2021-10-14T19:39:41.000Z"
  },
  {
    "id": 7,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  : not foundram Files/nodejs/npm: 3: : not foundram Files/nodejs/npm: 5:",
    "description": "sudo apt-get install nodejs\nsudo apt-get install npm\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n",
    "reg_date": "2021-10-14T19:39:41.000Z"
  },
  {
    "id": 8,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  [Object] node js output",
    "description": "",
    "reg_date": "2021-10-14T19:39:41.000Z"
  },
  {
    "id": 9,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  “new Set” is returning an empty set in nodejs",
    "description": "Instead of:\nconst set = new Set(['foo', 'bar', 'baz', 'foo']); // Set(3) { 'foo', 'bar', 'baz' }\nconst result = [...set] // []\n\nDo:\nconst set = new Set(['foo', 'bar', 'baz', 'foo']); // Set(3) { 'foo', 'bar', 'baz' }\nconst result = Array.from(set) // ['foo', 'bar', 'baz']",
    "reg_date": "2021-10-14T19:39:41.000Z"
  },
  {
    "id": 10,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  .env file make in nodejs",
    "description": "// server.jsconsole.log(`Your port is ${process.env.PORT}`); // undefinedconst dotenv = require('dotenv');dotenv.config();console.log(`Your port is ${process.env.PORT}`); // 8626",
    "reg_date": "2021-10-14T19:39:42.000Z"
  },
  {
    "id": 11,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  .env file node js",
    "description": "require('dotenv').config();\n\nconsole.log(process.env.MY_ENV_VAR);// .env\nyour_args = your_secret\n\n// your_file.js\n\nrequire(\"dotenv\").config();\nconst your_args = process.env.your_args;\n// OR\nconst your_args = process.env[\"your_args\"];\n$ npm install dotenv\n\n//--------------------\n\non file .env \n//--------------------\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=s1mpl3\nDB_NAME=banco_de_dados\nDB_PORT=3306\n//--------------------\n\nimport the config from .env file \n//--------------------\n\nrequire('dotenv').config()\nmodule.exports = {\n    username:process.env.DB_USER,\n    password:process.env.DB_PASS,\n    database:process.env.DB_NAME,\n    host:process.env.DB_HOST,\n    dialect:\"mysql\"\n}\n// P.S. You must install dotenv\n// npm install dotenv\n// yarn add dotenv\n// pnpm add dotenv\n\n// .env\nyour_args = your_secret\n\n// your_file.js\n\nrequire(\"dotenv\").config();\nconst your_args = process.env.your_args;\n// OR\nconst your_args = process.env[\"your_args\"];\n// server.jsconsole.log(`Your port is ${process.env.PORT}`); // undefinedconst dotenv = require('dotenv');dotenv.config();console.log(`Your port is ${process.env.PORT}`); // 8626",
    "reg_date": "2021-10-14T19:39:42.000Z"
  },
  {
    "id": 12,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  .gitignore nodejs",
    "description": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\ngitignore node js# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*",
    "reg_date": "2021-10-14T19:39:42.000Z"
  },
  {
    "id": 13,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  .ignore file nodejs",
    "description": "node_modules\nbuild\nnpm-debug.log\n.nyc\n.env\n.DS_Store",
    "reg_date": "2021-10-14T19:39:42.000Z"
  },
  {
    "id": 14,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  ",
    "description": "",
    "reg_date": "2021-10-14T19:39:42.000Z"
  },
  {
    "id": 15,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  413 payload too large nodejs",
    "description": "app.use(express.json({limit: '50mb'}));\napp.use(express.urlencoded({limit: '50mb'}));var bodyParser = require('body-parser');\napp.use(bodyParser.json({limit: \"50mb\"}));\napp.use(bodyParser.urlencoded({limit: \"50mb\", extended: true, parameterLimit:50000}));\napp.use(express.json({limit: '50mb'}));\napp.use(express.urlencoded({limit: '50mb'}));\n",
    "reg_date": "2021-10-14T19:39:42.000Z"
  },
  {
    "id": 16,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  API version control v1 v2 in NodeJs (loosely coupled)",
    "description": "import * as express from 'express';\n\n// v1/get-ride.js\nconst router = express.Router();\nrouter.post('/rides/:id', dep.verifyToken(), (req, res) => {\n    // Your code\n});\napp.use('/v1', router);\n\n\n// v2/get-ride.js\nconst router = express.Router();\nrouter.post('/rides/:id', dep.verifyToken(), (req, res) => {\n    // Your code\n});\napp.use('/v2', router);\n",
    "reg_date": "2021-10-14T19:39:43.000Z"
  },
  {
    "id": 17,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Access to XMLHttpRequest has been blocked by CORS policy node js",
    "description": "/*\nnpm i cors\nor\n yarn add cors\nthen in your node app\n*/\nconst cors = require('cors');\nconst corsOptions ={\n    origin:'http://localhost:3000', \n    credentials:true,            //access-control-allow-credentials:true\n    optionSuccessStatus:200\n}\napp.use(cors(corsOptions));",
    "reg_date": "2021-10-14T19:39:43.000Z"
  },
  {
    "id": 18,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Append text into a file nodejs",
    "description": "const fs = require('fs');\n\nfs.appendFile('message.txt', 'data to append', function (err) {\n  if (err) throw err;\n  console.log('Saved!');\n});\n\nIf message.txt doesnt exist, It will gonna create that too\nSynchronously\n\nconst fs = require('fs');\n\nfs.appendFileSync('message.txt', 'data to append');\n",
    "reg_date": "2021-10-14T19:39:43.000Z"
  },
  {
    "id": 19,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Cannot find namespace 'NodeJS'.",
    "description": "{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../out-tsc/app\",\n    \"module\": \"es6\",\n    \"baseUrl\": \"\",\n    \"types\": [\"node\"] --> ADD THIS\n  },\n  \"exclude\": [\n    \"test.ts\",\n    \"**/*.spec.ts\"\n  ]\n} in tsconfig file which should be:\n\"module\": \"commonjs\"\n",
    "reg_date": "2021-10-14T19:39:43.000Z"
  },
  {
    "id": 20,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  File type node js",
    "description": "const FileType = require('file-type');\n\n(async () => {\n\tconsole.log(await FileType.fromFile('Unicorn.png'));\n\t//=> {ext: 'png', mime: 'image/png'}\n})();",
    "reg_date": "2021-10-14T19:39:43.000Z"
  },
  {
    "id": 21,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  GET / - - ms - - node js",
    "description": "req.on('abort', function (err) {\n   if (err)\n       console.error(error.message);\n\n   // your code here\n});\n",
    "reg_date": "2021-10-14T19:39:43.000Z"
  },
  {
    "id": 22,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Get home directory in nodejs windows",
    "description": "process.env['USERPROFILE']",
    "reg_date": "2021-10-14T19:39:43.000Z"
  },
  {
    "id": 23,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  HOW WRITE AND SAVE JSON FILE IN NODEJS",
    "description": "'use strict';\n\nconst fs = require('fs');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nlet data = JSON.stringify(student, null, 2);\n\nfs.writeFile('student-3.json', data, (err) => {\n    if (err) throw err;\n    console.log('Data written to file');\n});\n\nconsole.log('This is after the write call');\nconst fs = require('fs');\nconst path = require('path');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nfs.writeFileSync(path.resolve(__dirname, 'student.json'), JSON.stringify(student));\n",
    "reg_date": "2021-10-14T19:39:43.000Z"
  },
  {
    "id": 24,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  How can I check whether a variable is defined in Node Js",
    "description": "if (query){\n   doStuff();\n}",
    "reg_date": "2021-10-14T19:39:44.000Z"
  },
  {
    "id": 25,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  How to change htm h1 from nodejs",
    "description": "<html>\n<head></head>\n<body>  \n    <h1></h1>\n<script src='test.js'></script>     \n</body>\n</html>\nlet h1 = document.getElementsByTagName('h1')[0];\nh1.innerHTML = \"Hello\";\n",
    "reg_date": "2021-10-14T19:39:44.000Z"
  },
  {
    "id": 26,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  How to get unix timestamp from tomorrow nodejs",
    "description": "var d = new Date();\nd.setDate(d.getDay() - 1);\nd.setHours(0, 0, 0);\nd.setMilliseconds(0);\nconsole.log(d/1000|0)",
    "reg_date": "2021-10-14T19:39:45.000Z"
  },
  {
    "id": 27,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  How to parse POST requests with express nodejs",
    "description": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));",
    "reg_date": "2021-10-14T19:39:45.000Z"
  },
  {
    "id": 28,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  How to uninstall npm modules in node js?",
    "description": "The command is simply npm uninstall <name>\n// Here are different options:\n// - removes the module from node_modules but \n//   does NOT update package.json\nnpm uninstall <name>\n\n// - removes it from dependencies in package.json aswell\nnpm uninstall <name> --save\n\n// - removes it from devDependencies in package.json aswell\nnpm uninstall <name> --save-dev\n\n// -  also removes it globally \nnpm uninstall -g <name> --save \n\n//    If you're removing a global package, however, any applications \n//    referencing it will crash.\n\n// A local install will be in the node_modules/ directory of your \n//  application. This won't affect the application if a module remains\n//  there with no references to it.\n\n// The Node.js documents https://npmjs.org/doc/ have all the commands\n// that you need to know with npm.npm uninstall <package_name>Simply use below command in cmd and change module_name with different modules\n\n>npm uninstall <module_name>",
    "reg_date": "2021-10-14T19:39:45.000Z"
  },
  {
    "id": 29,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  INSTALL NODE JS",
    "description": "sudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n# Check node version\nnode -v \n# v13.9.0\n# Also, check the npm version\nnpm -v \n# 6.13.7npm install -g node-modules\nsudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n\nnode -v    #to check if its installed# Through nodesource\ncurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\nsudo apt install nodejscurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n\nsudo apt install nodejs\n\nnode --version\nnpm --version1.Enable the NodeSource repository by running the following curl command as a user with sudo privileges :\n\n$ curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\n\nThe command will add the NodeSource signing key to your system, create an apt sources repository file, install all necessary packages and refresh the apt cache.\n\nIf you need to install another version, for example 14.x, just change setup_12.x with setup_14.x\n\n2. Once the NodeSource repository is enabled, install Node.js and npm by typing:\n\n$ sudo apt install nodejs\n\nThe nodejs package contains both the node and npm binaries.\n\n3. Verify that the Node.js and npm were successfully installed by printing their versions:\n\n$ node --version\n\nv12.16.3\n\n$ npm --version\n\n6.14.4\n\nUninstall Node.js\n\n$ sudo apt remove nodejs npm",
    "reg_date": "2021-10-14T19:39:45.000Z"
  },
  {
    "id": 30,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  JSON Web Token (JWT) set expire time in node js",
    "description": " var token = jwt.sign({email_id:'123@gmail.com'}, \"Stack\", {\n        expiresIn: \"10h\" // it will be expired after 10 hours\n        //expiresIn: \"20d\" // it will be expired after 20 days\n        //expiresIn: 120 // it will be expired after 120ms\n        //expiresIn: \"120s\" // it will be expired after 120s\n });\nvar token = jwt.sign({email_id:'123@gmail.com'}, \"Stack\", {\n\n                        expiresIn: '24h' // expires in 24 hours\n\n                         });",
    "reg_date": "2021-10-14T19:39:45.000Z"
  },
  {
    "id": 31,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Load Balance 4 instances of api.js node js",
    "description": "pm2 start api.js -i 4",
    "reg_date": "2021-10-14T19:39:45.000Z"
  },
  {
    "id": 32,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  MIME type Error CSS in nodejs Express",
    "description": "app.use(express.static(__dirname + '/public'));\n",
    "reg_date": "2021-10-14T19:39:46.000Z"
  },
  {
    "id": 33,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  MongooseError: Operation `users.insertOne()` buffering timed out after 10000ms node js",
    "description": "npm i -E config@3.3.1\nor\n\nyarn add -E config@3.3.1mongoose \n .connect(process.env.MONGO_PROD_URI, {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useCreateIndex: true,   })   \n .then(() => console.log(\"Database connected!\"))\n .catch(err => console.log(err));\n",
    "reg_date": "2021-10-14T19:39:46.000Z"
  },
  {
    "id": 34,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Monitor in production node js",
    "description": "pm2 monitor",
    "reg_date": "2021-10-14T19:39:46.000Z"
  },
  {
    "id": 35,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  NodeJS: Good way to write Multiple API Calls in serial",
    "description": "  var request = require('request');\n\n  request('http://www.test.com/api1', function (error, response, body) {\n    if (!error && response.statusCode == 200) {\n\n      request('http://www.test.com/api1', function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n\n          request('http://www.test.com/api1', function (error, response, body) {\n            if (!error && response.statusCode == 200) {\n\n              //And so on...\n\n            }\n          })\n\n        }\n      })\n\n    }\n  })\n\n\n//2 Next Solution\nDepending on which version of node you are using, promises should be native...\n\nhttps://nodejs.org/en/blog/release/v4.0.0/\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\nvar request = require('request');\n\ngetRequest('http://www.test.com/api1').then(function (body1) {\n    // do something with body1\n    return getRequest('http://www.test.com/api2');\n}).then(function (body2) {\n    // do something with body2\n    return getRequest('http://www.test.com/api3');\n}).then(function (body3) {\n    // do something with body3\n    //And so on...\n});\n\nfunction getRequest(url) {\n    return new Promise(function (success, failure) {\n        request(url, function (error, response, body) {\n            if (!error && response.statusCode == 200) {\n                success(body);\n            } else {\n                failure(error);\n            }\n        });\n    });\n} ",
    "reg_date": "2021-10-14T19:39:46.000Z"
  },
  {
    "id": 36,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  NodeJS get rootpath of our project",
    "description": "import path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n",
    "reg_date": "2021-10-14T19:39:46.000Z"
  },
  {
    "id": 37,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node Folder or file exists",
    "description": "const { exists } = require(\"fs\");  \nvar fs = require( 'fs' ),\n    path = require( 'path' ),\n    expect = require( 'expect' ),\n\n  exists(path.join(__dirname, \"\\\\node_modules\\\\.bin\\\\\"), (e) => {\n    console.log(e ? \"\\\\node_modules\\\\.bin\\\\ exists\" : \"\\nInstall missing packages\\n\");\n  });",
    "reg_date": "2021-10-14T19:39:46.000Z"
  },
  {
    "id": 38,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node Js templates",
    "description": "$ npm i vue vuex vue-loader css-loader vue-template-compiler node-sass sass-loader postcss-loader postcss-loader webpack-node-externals webpack-merge webpack babel-core babel-loader babel-plugin-transform-object-rest-spread babel-preset-env --save",
    "reg_date": "2021-10-14T19:39:47.000Z"
  },
  {
    "id": 39,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node Locking",
    "description": "Node-locked licensing is a software licensing approach in which a license for a software application is assigned to one or more hardware devices. Typically any numbers of instances are allowed to execute for such license",
    "reg_date": "2021-10-14T19:39:47.000Z"
  },
  {
    "id": 40,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node Sass could not find a binding for your current environment: Linux 64-bit with Node.js 10.x",
    "description": "npm rebuild node-sass\nThis usually happens because your environment has changed since running `npm install`.\nRun `npm rebuild node-sass` to download the binding for your current environment.",
    "reg_date": "2021-10-14T19:39:47.000Z"
  },
  {
    "id": 41,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node Sass could not find a binding for your current environment",
    "description": "",
    "reg_date": "2021-10-14T19:39:47.000Z"
  },
  {
    "id": 42,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node Sass version 5.0.0 is incompatible with ^4.0.0.",
    "description": "with npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn remove node-sass@4.14.1with npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn add node-sass@4.14.1with npm =>\n1. npm uninstall node-sass\n2. npm install node-sass@4.14.1\nwith yarn => \n1. yarn remove node-sass\n2. yarn add node-sass@4.14.1\n\n// ^ Update to MR J's post    npm uninstall node-sass\n    npm install node-sass@4.14.1\n\nOr, if using yarn (default in newer CRA versions)\n\n    yarn remove node-sass\n    yarn add node-sass@4.14.1npm uninstall node-sass\nnpm install node-sass@4.14.1\n\nOr, if using yarn (default in newer CRA versions)\n\nyarn remove node-sass\nyarn add node-sass@4.14.1npm uninstall node-sass\nnpm install node-sass@4.14.1",
    "reg_date": "2021-10-14T19:39:47.000Z"
  },
  {
    "id": 43,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node Sass version 6.0.0 is incompatible with ^4.0.0 || ^5.0.0",
    "description": "with npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn remove node-sass@4.14.1with npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn add node-sass@4.14.1with npm =>\n1. npm uninstall node-sass\n2. npm install node-sass@4.14.1\nwith yarn => \n1. yarn remove node-sass\n2. yarn add node-sass@4.14.1\n\n// ^ Update to MR J's post    npm uninstall node-sass\n    npm install node-sass@4.14.1\n\nOr, if using yarn (default in newer CRA versions)\n\n    yarn remove node-sass\n    yarn add node-sass@4.14.1npm uninstall node-sass\nnpm install node-sass@4.14.1\n\nOr, if using yarn (default in newer CRA versions)\n\nyarn remove node-sass\nyarn add node-sass@4.14.1//this is modifed solution from  Mr J solution \nwith npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn add node-sass@4.14.1",
    "reg_date": "2021-10-14T19:39:47.000Z"
  },
  {
    "id": 44,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node assert",
    "description": "import assert from 'assert/strict';\n\nassert.match('Success!  Unenrolled  profile  with new NPID', /Success/);\n\n// OK",
    "reg_date": "2021-10-14T19:39:47.000Z"
  },
  {
    "id": 45,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Node require module",
    "description": "// Use require.main.require to get a module from the root folder.\nconst Globals = require.main.require(\"./globals.js\");\nconst YourCustomModule = require(\"./yourmodule.js\");\n\nconsole.log(YourCustomModule.message);\n\n// --- yourmodule.js ---\nmodule.exports = {\n\tmessage: \"Hello World!\",\n\totherData: \"Hello Grepper!\"\n};npm install --save ../path/to/mymodule\n",
    "reg_date": "2021-10-14T19:39:48.000Z"
  },
  {
    "id": 46,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Nodejs - non-flowing data stream",
    "description": "import { createReadStream, ReadStream } from 'fs';\n\nvar readStream: ReadStream = createReadStream('./data.txt');\n\nsetTimeout(() => {\n  const data = readStream.read(10);\n  console.log(data);\n}, 10);\n",
    "reg_date": "2021-10-14T19:39:48.000Z"
  },
  {
    "id": 47,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Nodejs hash with secret key",
    "description": "require(\"crypto\").createHmac(\"sha256\", \"password\")\n  .update(\"If you love node so much why don't you marry it?\")\n  .digest(\"hex\");\n",
    "reg_date": "2021-10-14T19:39:48.000Z"
  },
  {
    "id": 48,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Razorpay generate Signature in the node js",
    "description": "const crypto = require(\"crypto\");\nconst hmac = crypto.createHmac('sha256', RAZORPAY_KEY_SECRET);\n\nhmac.update(razorpayOrderId + \"|\" + razorpayPaymentId);\nlet generatedSignature = hmac.digest('hex');\n\nlet isSignatureValid = generatedSignature == payload.razorpay_signature;\n",
    "reg_date": "2021-10-14T19:39:48.000Z"
  },
  {
    "id": 49,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Reached heap limit Allocation failed - JavaScript heap out of memory nodejs",
    "description": "create swap memory\n\nhttps://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/\n\nAfter that set the environment variable\n\nexport NODE_OPTIONS=--max_old_space_size=4096\n",
    "reg_date": "2021-10-14T19:39:48.000Z"
  },
  {
    "id": 50,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  ReferenceError: fs is not defined node js",
    "description": "// Define the `fs` at the beginning of the script\nconst fs = require('fs');",
    "reg_date": "2021-10-14T19:39:48.000Z"
  },
  {
    "id": 51,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Start and Daemonize any application nodejs",
    "description": "pm2 start app.js",
    "reg_date": "2021-10-14T19:39:48.000Z"
  },
  {
    "id": 52,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  SyntaxError: Cannot use import statement outside a module node js",
    "description": "// Note: \"import\" should generally be used for modules/package projects, otherwise use\n// \"require\"\n// In your NodeJS project's package.json add the following \"type\" field to allow use of \"import\":\n{\n  \"type\": \"module\"\n}<script type=\"module\" src=\"source.js\"></script>",
    "reg_date": "2021-10-14T19:39:49.000Z"
  },
  {
    "id": 53,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Texto unitário no node js",
    "description": "textos unitários no node js?",
    "reg_date": "2021-10-14T19:39:49.000Z"
  },
  {
    "id": 54,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  The \"chunk\" argument must be one of type string or Buffer. Received type object nodejs",
    "description": "//change res.end() to res.send()",
    "reg_date": "2021-10-14T19:39:49.000Z"
  },
  {
    "id": 55,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  Travis ci configuration for node js react project",
    "description": "language: node_js\nnode_js:\n  - node\nenv:\n  global:\n    # include $HOME/.local/bin for `aws`\n    - PATH=$HOME/.local/bin:$PATH\nbefore_install:\n  - pyenv global 3.7.1\n  - pip install -U pip\n  - pip install awscli\nscript:\n  - yarn build\n  - echo \"Commit sha - $TRAVIS_COMMIT\"\n  - mkdir -p dist/@thawkin3/root-config/$TRAVIS_COMMIT\n  - mv dist/*.* dist/@thawkin3/root-config/$TRAVIS_COMMIT/\ndeploy:\n  provider: s3\n  access_key_id: \"$AWS_ACCESS_KEY_ID\"\n  secret_access_key: \"$AWS_SECRET_ACCESS_KEY\"\n  bucket: \"single-spa-demo\"\n  region: \"us-west-2\"\n  cache-control: \"max-age=31536000\"\n  acl: \"public_read\"\n  local_dir: dist\n  skip_cleanup: true\n  on:\n    branch: master\nafter_deploy:\n  - chmod +x after_deploy.sh\n  - \"./after_deploy.sh\"",
    "reg_date": "2021-10-14T19:39:49.000Z"
  },
  {
    "id": 56,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  access-control-allow-origin nodejs express",
    "description": "// Add headers\napp.use(function (req, res, next) {\n\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true);\n\n    // Pass to next layer of middleware\n    next();\n});app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})",
    "reg_date": "2021-10-14T19:39:49.000Z"
  },
  {
    "id": 57,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  access to static file nodejs",
    "description": "app.use(express.static(__dirname + '/public'));\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\" />\n",
    "reg_date": "2021-10-14T19:39:49.000Z"
  },
  {
    "id": 58,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  add express and cors to nodejs app",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n/*index.js*/                                                         \nconst express = require( 'express' );                                                             \nconst cors = require( 'cors' );\nconst app = express();                                                                                          const port = 3030;\n//cors is enabled through out the entire app                                                                                  \napp.use( cors() );\napp.get( '/users', (request, response, next) => {                                                                                                                                                                                                                                                                            res.json( { info: 'cors is enabled' }});\napp.listen( port, () => {                                                              \n  console.log(`App is running on ${port}`)                                                      \n  });",
    "reg_date": "2021-10-14T19:39:49.000Z"
  },
  {
    "id": 59,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  add games on  node js",
    "description": "mkdir multiplayer-card-project\ncd multiplayer-card-project",
    "reg_date": "2021-10-14T19:39:49.000Z"
  },
  {
    "id": 60,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  add numbers from array nodejs",
    "description": "console.log(\n  [].reduce((a, b) => a + b)\n)//these are the values//\nvar values = [\n\t'1',\n  \t'2'\n]\n//makes a variable named total, adding together the values\nvar total = values[0] + values[1]\n\n//prints out the variable named total\nconsole.log(total);",
    "reg_date": "2021-10-14T19:39:50.000Z"
  },
  {
    "id": 61,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  addingbackground image in nodejs",
    "description": "body.style.backgroundimage = \"url('photo-1579546929518-9e396f3cc809.jpg')\";",
    "reg_date": "2021-10-14T19:39:50.000Z"
  },
  {
    "id": 62,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  aes 256 file encryption node js",
    "description": "$ npm install aes256var fs = require('fs');\nvar crypto = require('crypto');\n\nvar key = '14189dc35ae35e75ff31d7502e245cd9bc7803838fbfd5c773cdcd79b8a28bbd';\nvar cipher = crypto.createCipher('aes-256-cbc', key);\nvar input = fs.createReadStream('test.txt');\nvar output = fs.createWriteStream('test.txt.enc');\n\ninput.pipe(cipher).pipe(output);\n\noutput.on('finish', function() {\n  console.log('Encrypted file written to disk!');\n});\nvar aes256 = require('aes256'); var key = 'my passphrase';var plaintext = 'my plaintext message'; var encrypted = aes256.encrypt(key, plaintext);var decrypted = aes256.decrypt(key, encrypted); // plaintext === decrypted",
    "reg_date": "2021-10-14T19:39:50.000Z"
  },
  {
    "id": 63,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  aes 256 nodejs",
    "description": "$ npm install aes256var fs = require('fs');\nvar crypto = require('crypto');\n\nvar key = '14189dc35ae35e75ff31d7502e245cd9bc7803838fbfd5c773cdcd79b8a28bbd';\nvar cipher = crypto.createCipher('aes-256-cbc', key);\nvar input = fs.createReadStream('test.txt');\nvar output = fs.createWriteStream('test.txt.enc');\n\ninput.pipe(cipher).pipe(output);\n\noutput.on('finish', function() {\n  console.log('Encrypted file written to disk!');\n});\nvar aes256 = require('aes256'); var key = 'my passphrase';var plaintext = 'my plaintext message'; var encrypted = aes256.encrypt(key, plaintext);var decrypted = aes256.decrypt(key, encrypted); // plaintext === decrypted",
    "reg_date": "2021-10-14T19:39:50.000Z"
  },
  {
    "id": 64,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  allow cross origin node",
    "description": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n",
    "reg_date": "2021-10-14T19:39:50.000Z"
  },
  {
    "id": 65,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  an error occurred while applying security settings node js",
    "description": "Open Command Prompt (cmd.exe) as administrator and type:\n\nnet localgroup /add \"Authenticated Users\"\n\nThen click the \"Retry\" button or run the installation file again.",
    "reg_date": "2021-10-14T19:39:50.000Z"
  },
  {
    "id": 66,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  api uber eat node js",
    "description": "uber.searchRestaurants((searchQuery = 'Indian'));uber.getStoreDetails(storeUuid);uber.getRestaurants();const UberEats = require('node-ubereats');\nconst uber = new UberEats({\n  latitude: 48.8563148,\n  longitude: 2.3227369,\n  formattedAddress: '16 Rue de Rochechouart, 75009 Paris'\n});npm install --save node-ubereats",
    "reg_date": "2021-10-14T19:39:51.000Z"
  },
  {
    "id": 67,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  archiver compressed file in nodejs",
    "description": "npm install archiver --save\n\n// require modules\nvar fs = require('fs');\nvar archiver = require('archiver');\n\n// create a file to stream archive data to.\nvar output = fs.createWriteStream(__dirname + '/example.zip');\n//Set the compression format to zip\nvar archive = archiver('zip', {\n    zlib: { level: 9 } // Sets the compression level.\n});\n\n// listen for all archive data to be written\n// 'close' event is fired only when a file descriptor is involved\noutput.on('close', function() {\n    console.log(archive.pointer() + ' total bytes');\n    console.log('archiver has been finalized and the output file descriptor has closed.');\n});\n\n// This event is fired when the data source is drained no matter what was the data source.\n// It is not part of this library but rather from the NodeJS Stream API.\n// @see:   https://nodejs.org/api/stream.html#stream_event_end\noutput.on('end', function() {\n    console.log('Data has been drained');\n});\n\n// good practice to catch this error explicitly\narchive.on('error', function(err) {\n    throw err;\n});\n// pipe archive data to the file\narchive.pipe(output);\n// append a file from stream\nvar file1 = __dirname + '/file1.txt';\narchive.append(fs.createReadStream(file1), { name: 'file1.txt' });\n\n// append a file from string\narchive.append('string cheese!', { name: 'file2.txt' });\n// append a file from buffer\nvar buffer3 = Buffer.from('buff it!');\narchive.append(buffer3, { name: 'file3.txt' });\n\n// append a file\narchive.file('file1.txt', { name: 'file4.txt' });\n\n// append files from a sub-directory and naming it `new-subdir` within the archive\narchive.directory('subdir/', 'new-subdir');\n\n// append files from a sub-directory, putting its contents at the root of archive\narchive.directory('subdir/', false);\n\n// append files from a glob pattern\narchive.glob('subdir/*.txt');\n\n// finalize the archive (ie we are done appending files but streams have to finish yet)\n// 'close', 'end' or 'finish' may be fired right after calling this method so register to them beforehand\narchive.finalize();\n",
    "reg_date": "2021-10-14T19:39:51.000Z"
  },
  {
    "id": 68,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  async file read node js",
    "description": "function firstFunction(_callback) {\n    // do some asynchronous work\n    // and when the asynchronous stuff is complete\n    const fs = require('fs');\n    let jsonData;\n    fs.readFile(\"industriesByCat.txt\", 'utf8', function (err, data) {\n        if (err) throw err;\n        jsonData = JSON.parse(data);\n        console.log(jsonData);\n      \t\n      \t//This is important for callback\n        _callback();\n    });\n\n}\n\nfunction secondFunction() {\n    // call first function and pass in a callback function which\n    // first function runs when it has completed\n    firstFunction(function () {\n        console.log('huzzah, I\\'m done!');\n    });\n}\nsecondFunction();",
    "reg_date": "2021-10-14T19:39:51.000Z"
  },
  {
    "id": 69,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  atob nodejs",
    "description": "// If you need to convert to Base64 you could do so using Buffer:\nconsole.log(Buffer.from('Hello World!').toString('base64'));\n// Reverse (assuming the content you're decoding is a utf8 string):\nconsole.log(Buffer.from(b64Encoded, 'base64').toString());Buffer.from('Hello world!', 'binary').toString('base64')(function () {\n  \"use strict\";\n\n  var atob = require('atob');\n  var b64 = \"SGVsbG8sIFdvcmxkIQ==\";\n  var bin = atob(b64);\n\n  console.log(bin); // \"Hello, World!\"\n}());\n",
    "reg_date": "2021-10-14T19:39:51.000Z"
  },
  {
    "id": 70,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  auto increment in mongoose + nodejs",
    "description": "...\nvar bookSchema = new Schema({\n    author: { type: Schema.Types.ObjectId, ref: 'Author' },\n    title: String,\n    genre: String,\n    publishDate: Date\n});\n\nbookSchema.plugin(autoIncrement.plugin, 'Book');\nvar Book = connection.model('Book', bookSchema);\n````\n\nThat's it. Now you can create book entities at will and they will have an `_id` field added of type `Number` and will automatically\n increment with each new document. Even declaring references is easy, just remember to change the reference property's type\n to `Number` instead of `ObjectId` if the referenced model is also using the plugin.\n\n````js\nvar authorSchema = new mongoose.Schema({\n...",
    "reg_date": "2021-10-14T19:39:51.000Z"
  },
  {
    "id": 71,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  automatic compile nodejs when edit",
    "description": "$ npm install nodemon -g\n$ nodemon app.js",
    "reg_date": "2021-10-14T19:39:51.000Z"
  },
  {
    "id": 72,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  await in node js",
    "description": "const data = async ()  => {\n  const got = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n  \n  console.log(await got.json())\n}\n\ndata();// server.js\n\nfunction square(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(Math.pow(x, 2));\n    }, 2000);\n  });\n}\n\nasync function layer(x)\n{\n  const value = await square(x);\n  console.log(value);\n}\n\nlayer(10);/* Notes:\n\t1. written like synchronous code\n    2. compatible with try/catch blocks\n    3. avoids chaining .then statements\n    4. async functions always return a promise\n    5. function pauses on each await expression\n    6. A non promise value is converted to \n       Promise.resolve(value) and then resolved\n*/\n\n// Syntax\n// Function Declaration\nasync function myFunction(){\n  await ... // some code goes here\n}\n  \n// Arrow Declaration\nconst myFunction2 = async () => {\n  await ... // some code goes here\n}\n  \n // OBJECT METHODS\n\nconst obj = {\n\tasync getName() {\n\t\treturn fetch('https://www.example.com');\n\t}\n}\n\n// IN A CLASS\n\nclass Obj {\n\t// getters and setter CANNOT be async\n\tasync getResource {\n\t\treturn fetch('https://www.example.com');\n\t}\n}\n  // Normal Function\nfunction add(a,b){\n  return a + b;\n}\n// Async Function\nasync function add(a,b){\n  return a + b;\n}// server.js\n\nfunction square(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(Math.pow(x, 2));\n    }, 2000);\n  });\n}\n\nsquare(10).then(data => {\n  console.log(data);\n});",
    "reg_date": "2021-10-14T19:39:51.000Z"
  },
  {
    "id": 73,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  aws lambda dynamodb nodejs scan",
    "description": "export const scanTable = async (tableName) => {\n    const params = {\n        TableName: tableName,\n    };\n\n    let scanResults = [];\n    let items;\n    do{\n        items =  await documentClient.scan(params).promise();\n        items.Items.forEach((item) => scanResults.push(item));\n        params.ExclusiveStartKey  = items.LastEvaluatedKey;\n    }while(typeof items.LastEvaluatedKey != \"undefined\");\n\n    return scanResults;\n\n};var docClient = new AWS.DynamoDB.DocumentClient();\n\nvar params = {\n    TableName: \"users\",\n    FilterExpression: \"#user_status = :user_status_val\",\n    ExpressionAttributeNames: {\n        \"#user_status\": \"user_status\",\n    },\n    ExpressionAttributeValues: { \":user_status_val\": 'somestatus' }\n\n};\n\ndocClient.scan(params, onScan);\nvar count = 0;\n\nfunction onScan(err, data) {\n    if (err) {\n        console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {        \n        console.log(\"Scan succeeded.\");\n        data.Items.forEach(function(itemdata) {\n           console.log(\"Item :\", ++count,JSON.stringify(itemdata));\n        });\n\n        // continue scanning if we have more items\n        if (typeof data.LastEvaluatedKey != \"undefined\") {\n            console.log(\"Scanning for more...\");\n            params.ExclusiveStartKey = data.LastEvaluatedKey;\n            docClient.scan(params, onScan);\n        }\n    }\n}",
    "reg_date": "2021-10-14T19:39:51.000Z"
  },
  {
    "id": 74,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  aws lambda function setup for node js",
    "description": "var AWS = require('aws-sdk');\nAWS.config.region = 'eu-west-1';\nvar lambda = new AWS.Lambda();\n\nexports.handler = function(event, context) {\n  var params = {\n    FunctionName: 'Lambda_B', // the lambda function we are going to invoke\n    InvocationType: 'RequestResponse',\n    LogType: 'Tail',\n    Payload: '{ \"name\" : \"Alex\" }'\n  };\n\n  lambda.invoke(params, function(err, data) {\n    if (err) {\n      context.fail(err);\n    } else {\n      context.succeed('Lambda_B said '+ data.Payload);\n    }\n  })\n};\n// first install serverless\n$  npm install -g serverless\n// create basic template\n$  serverless create --template aws-nodejs --name candidate\n// configure aws and genrate client id and client secret\nserverless config credentials --provider aws --key <your_access_key_id> --secret <your_access_key_secret>\n // deploy\n  serverless deploy",
    "reg_date": "2021-10-14T19:39:52.000Z"
  },
  {
    "id": 75,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  axios node js set user agent",
    "description": "axios\n    .get(`url`, \n{ headers: { 'User-Agent': 'YOUR-SERVICE-NAME' }  } )\n    .then(response => {\n      \n      // here will be cheerio scraping\n    })\n    .catch(function(e) {\n      console.log(e);\n    });",
    "reg_date": "2021-10-14T19:39:52.000Z"
  },
  {
    "id": 76,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  babel, babel nodejs, config babel,",
    "description": "@babel/core: A fundamental package to run any babel setup/configuration.\n@babel/cli:A built-in CLI which can be used to compile files from the command line/terminal.\n@babel/node:is a CLI that works the same as the Node.js CLI, with the added benefit of compiling with Babel presets and plugins before running it.\n@babel/preset-env(dev): is a smart preset that allows you to use the latest JavaScript .\n@babel/plugin-transform-runtime(dev):A plugin that enables the re-use of Babel's injected helper code to save on code size.\n@babel/runtime(save): a package to be installed production dependency to avoid duplication across your compiled output.\n  \n// yarn add \n@babel/node @babel/preset-env @babel/plugin-transform-runtime @babel/runtime\n    \n// .babelrc\n{\n  \"presets\": [\"@babel/preset-env\"],\n  \"plugins\": [\n    [\"@babel/plugin-transform-runtime\"]\n  ]\n}\n\n// package.json\n\"scripts\": {\n    \"start\": \"npm run build && node ./build/src/server.js\",\n    \"dev\": \"nodemon --exec babel-node ./src/server.js\",\n    \"clean\": \"rm -rf build && mkdir build\",\n    \"build-babel\": \"babel ./src -d ./build/src\",\n    \"build\": \"npm run clean && npm run build-babel\"\n}// yarn add @babel/cli @babel/core @babel/node @babel/plugin-transform-runtime @babel/preset-env --dev\n// yarn add @babel/runtime \n\"dependencies\": {\n    \"@babel/runtime\": \"^7.15.4\" //a package to be installed production dependency to avoid duplication across your compiled output.\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.15.7\", // A built-in CLI which can be used to compile files from the command line/terminal.\n    \"@babel/core\": \"^7.15.5\", // a fundamental package to run any babel setup/configuration\n    \"@babel/node\": \"^7.15.4\", //babel-node is a CLI that works the same as the Node.js CLI, with the added benefit of compiling with Babel presets and plugins before running it.\n    \"@babel/plugin-transform-runtime\": \"^7.15.0\", // A plugin that enables the re-use of Babel's injected helper code to save on code size.\n    \"@babel/preset-env\": \"^7.15.6\" //  is a smart preset that allows you to use the latest JavaScript without needing to micromanage which syntax transforms (and optionally, browser polyfills) are needed by your target environment(s).\n  }\n\n// package.json\n\"scripts\": {\n    \"start\": \"yarn run build && node ./build/src/index.js\",\n    \"start:dev\": \"/node_modules/.bin/babel-node ./src/index.js\",\n    \"clean\": \"rm -rf build && mkdir build\",\n    \"build-babel\": \"babel ./src -d ./build/src\",\n    \"build\": \"yarn run clean && yarn run build-babel\"\n  }\n\n// .babelrc\n{\n  \"presets\": [\"@babel/preset-env\"],\n  \"plugins\": [\n    [\"@babel/plugin-transform-runtime\"]\n  ]\n}\n\n",
    "reg_date": "2021-10-14T19:39:52.000Z"
  },
  {
    "id": 77,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  base64 encode node js",
    "description": "> console.log(Buffer.from(\"Hello World\").toString('base64'));\nSGVsbG8gV29ybGQ=\n> console.log(Buffer.from(\"SGVsbG8gV29ybGQ=\", 'base64').toString('ascii'))\nHello World'use strict';\n\nlet data = 'stackabuse.com';\nlet buff = new Buffer(data);\nlet base64data = buff.toString('base64');\n\nconsole.log('\"' + data + '\" converted to Base64 is \"' + base64data + '\"');\n",
    "reg_date": "2021-10-14T19:39:52.000Z"
  },
  {
    "id": 78,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  bash commands in node",
    "description": "const { exec } = require(\"child_process\");\nexec(\"cat index.js\", (error, data, getter) => {\n\tif(error){\n\t\tconsole.log(\"error\",error.message);\n\t\treturn;\n\t}\n\tif(getter){\n\t\tconsole.log(\"data\",data);\n\t\treturn;\n\t}\n\tconsole.log(\"data\",data);\n\n});\n// You can use 'exec' this way\n// LINUX EXAMPLE\n\nconst { exec } = require(\"child_process\");\n\nexec(\"ls -la\", (error, stdout, stderr) => {\n    if (error) {\n        console.log(`error: ${error.message}`);\n        return;\n    }\n    if (stderr) {\n        console.log(`stderr: ${stderr}`);\n        return;\n    }\n    console.log(`stdout: ${stdout}`);\n});const { exec } = require('child_process');\nexec('ls | grep js', (err, stdout, stderr) => {  \n  if (err) {    \n    //some err occurred    \n    console.error(err)  \n  } else {   \n    // the *entire* stdout and stderr (buffered)   \n    console.log(`stdout: ${stdout}`);   \n    console.log(`stderr: ${stderr}`);  \n  }\n});",
    "reg_date": "2021-10-14T19:39:52.000Z"
  },
  {
    "id": 79,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  bcrypt always return faslse in node js",
    "description": "first thing make sure to increase the length(must be greater than 60/70) in database and then checkout",
    "reg_date": "2021-10-14T19:39:52.000Z"
  },
  {
    "id": 80,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  begin transaction in node js using pool query",
    "description": "module.exports = {\n  creatUser: (req) => {\n    return new Promise((resolve, reject) => {\n      pool.getConnection(function (err, connection) {\n        connection.beginTransaction(function (err) {\n          if (err) {\n            //Transaction Error (Rollback and release connection)\n            connection.rollback(function () {\n              connection.release();\n            });\n\n            return reject(err);\n          } else {\n            connection.query(\n              `insert into ?? (name, email) values (?,?)`,\n              [\n                \"user\",\n                req.name.trim(),\n                req.email.trim()\n              ],\n\n              function (err, uResults) {\n                if (err) {\n                  //Query Error (Rollback and release connection)\n                  connection.rollback(function () {\n                    connection.release();\n                  });\n                  return reject(err);\n                } else {\n                  let values = [];\n                  req.departmentId.forEach(function (result) {\n                    let l = [uResults.insertId, result];\n                    values.push(l);\n                  });\n                  console.log(\"vale\", values);\n                  connection.query(\n                    `insert into u_dep (u_id, dep_id) values ?`,\n                    [values],\n                    function (err, results) {\n                      if (err) {\n                         connection.rollback(function () {\n                          connection.release();\n                        });\n                        return reject(err);\n                      } else {\n                        connection.commit(function (err) {\n                          if (err) {\n                            connection.rollback(function () {\n                              connection.release();\n                            });\n                            return reject(err);\n                          } else {\n                            connection.release();\n                            return resolve(uResults);\n                          }\n                        });\n                      }\n                    }\n                  );\n                }\n              }\n            );\n          }\n        });\n      });\n    });\n  },\n};",
    "reg_date": "2021-10-14T19:39:52.000Z"
  },
  {
    "id": 81,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  begins with node js AWS dynamodb sort key",
    "description": "let AWS = require('aws-sdk');\nlet util = require('util');\n\nAWS.config.update({\n    region: 'us-east-1'\n});\n\nlet connection = new AWS.DynamoDB.DocumentClient();\n\nlet params = {\n    TableName: 'user_details',\n    KeyConditionExpression: 'user_id = :user_id and user_relation begins_with :user_relation',\n    ExpressionAttributeValues: {\n        ':user_id': \"1234\",\n        ':user_relation': \"followed-by\"\n    }\n};\n\nconsole.log('getQuery Params => ', params);\nlet dynamoDb = util.promisify(connection.query).bind(connection);\nlet results = await dynamoDb(params);\nconsole.log('results => ', results);\nconst params = {\n  TableName: 'user_details',\n  KeyConditionExpression: '#user_id = :user_id and begins_with(#user_relation, :user_relation)',\n  ExpressionAttributeNames:{\n    \"#user_id\": \"user_id\",\n    \"#user_relation\": 'user_relation'\n  },\n  ExpressionAttributeValues: {\n    \":user_id\": \"1234\",\n    \":user_relation\": \"followed-by\"\n  }\n}\n",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 82,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  buffer to image nodejs",
    "description": "var request = require('request').defaults({ encoding: null });\nrequest.get(s3Url, function (err, res, body) {\n      //process exif here\n});function toBase64(arr) {\n   //arr = new Uint8Array(arr) if it's an ArrayBuffer\n   return btoa(\n      arr.reduce((data, byte) => data + String.fromCharCode(byte), '')\n   );\n}\n\n$('#two').prepend($('<img>',{id:'theImg2',src:`data:image/png;base64,${toBase64( selected[0].image2.data)}`}))\n\n",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 83,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  build an api in nodejs using express to send emails using the gmail rest api without client libraries",
    "description": "def send_message(service, user_id, message):\n  try:\n    message = service.users().messages().send(userId=user_id, body=message).execute()\n\n    print('Message Id: %s' % message['id'])\n\n    return message\n  except Exception as e:\n    print('An error occurred: %s' % e)\n    return None\n\n\ndef create_message_with_attachment(sender, to, subject, message_text, file):\n  message = MIMEMultipart()\n  message['to'] = to\n  message['from'] = sender\n  message['subject'] = subject\n\n  msg = MIMEText(message_text)\n  message.attach(msg)\n\n  content_type, encoding = mimetypes.guess_type(file)\n\n  if content_type is None or encoding is not None:\n    content_type = 'application/octet-stream'\n\n  main_type, sub_type = content_type.split('/', 1)\n\n  if main_type == 'text':\n    fp = open(file, 'rb')\n    msg = MIMEText(fp.read().decode(\"utf-8\"), _subtype=sub_type)\n    fp.close()\n  elif main_type == 'image':\n    fp = open(file, 'rb')\n    msg = MIMEImage(fp.read(), _subtype=sub_type)\n    fp.close()\n  elif main_type == 'audio':\n    fp = open(file, 'rb')\n    msg = MIMEAudio(fp.read(), _subtype=sub_type)\n    fp.close()\n  else:\n    fp = open(file, 'rb')\n    msg = MIMEBase(main_type, sub_type)\n    msg.set_payload(fp.read())\n    fp.close()\n  filename = os.path.basename(file)\n  msg.add_header('Content-Disposition', 'attachment', filename=filename)\n  message.attach(msg)\n\n  raw_message = base64.urlsafe_b64encode(message.as_string().encode(\"utf-8\"))\n  return {'raw': raw_message.decode(\"utf-8\")}/**\n* @param $service Google_Service_Gmail an authorized Gmail API service instance.\n* @param $userId string User's email address or \"me\"\n* @param $message Google_Service_Gmail_Message\n* @return null|Google_Service_Gmail_Message\n*/\nfunction sendMessage($service, $userId, $message) {\n try {\n   $message = $service->users_messages->send($userId, $message);\n   print 'Message with ID: ' . $message->getId() . ' sent.';\n   return $message;\n } catch (Exception $e) {\n   print 'An error occurred: ' . $e->getMessage();\n }\n\n return null;\n}",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 84,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  buildpack for nodejs",
    "description": "heroku buildpacks:set heroku/nodejs",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 85,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  cai nodejs ubuntu",
    "description": "sudo apt install npm",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 86,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  calculate init code hash nodejs",
    "description": "import { INIT_CODE_HASH } from '../src/constants'\n\nimport { bytecode } from '@uniswap/v2-core/build/UniswapV2Pair.json'\nimport { keccak256 } from '@ethersproject/solidity'\n\nconst COMPUTED_INIT_CODE_HASH = keccak256(['bytes'], [`0x${bytecode}`])\n",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 87,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  call node js function from javascript",
    "description": "var io = require('socket.io').listen(80); // initiate socket.io server\n\nio.sockets.on('connection', function (socket) {\n  socket.emit('news', { hello: 'world' }); // Send data to client\n\n  // wait for the event raised by the client\n  socket.on('my other event', function (data) {  \n    console.log(data);\n  });\n});\n<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n  var socket = io.connect('http://localhost'); // connec to server\n  socket.on('news', function (data) { // listen to news event raised by the server\n    console.log(data);\n    socket.emit('my other event', { my: 'data' }); // raise an event on the server\n  });\n</script>\n",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 88,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  cannot get issue in nodejs",
    "description": "app.get('/', function (req, res) {\n  res.render('index', {});\n});",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 89,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  cannot read property 'find' of undefined nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:39:53.000Z"
  },
  {
    "id": 90,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  cantsee auto complete for node jsmodules in vs code",
    "description": "",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 91,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  check given path is valid or not in nodejs",
    "description": "fs.lstatSync(path_string).isDirectory() \n",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 92,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  child process spawn python node js",
    "description": "const path = require('path')\nconst {spawn} = require('child_process')\n/**\n   * Run python myscript, pass in `-u` to not buffer console output\n   * @return {ChildProcess}\n*/\nfunction runScript(){\n   return spawn('python', [\n      \"-u\",\n      path.join(__dirname, 'myscript.py'),\n     \"--foo\", \"some value for foo\",\n   ]);\n}\nconst subprocess = runScript()\n// print output of script\nsubprocess.stdout.on('data', (data) => {\n   console.log(`data:${data}`);\n});\nsubprocess.stderr.on('data', (data) => {\n   console.log(`error:${data}`);\n});\nsubprocess.stderr.on('close', () => {\n   console.log(\"Closed\");\n});#Import library\nimport sys, getopt, time\ndef main(argv):\n   argument = ''\n   usage = 'usage: myscript.py -f <sometext>'\n   # parse incoming arguments\n   try:\n      opts, args = getopt.getopt(argv,\"hf:\",[\"foo=\"])\n   except getopt.GetoptError:\n      print(usage)\n      sys.exit(2)\n   for opt, arg in opts:\n      if opt == '-h':\n         print(usage)\n         sys.exit()\n      elif opt in (\"-f\", \"--foo\"):\n         argument = arg\n   # print output\n   print(\"Start : %s\" % time.ctime())\n   time.sleep( 2 )\n   print('Foo is')\n   time.sleep( 2 )\n   print(argument)\n   print(\"End : %s\" % time.ctime())\nif __name__ == \"__main__\":\nmain(sys.argv[1:])",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 93,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  chocolatey nodejs",
    "description": "// In a powershell terminal opened as admin\nchoco install nodejs --version 15.0.1",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 94,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  clear terminal node js",
    "description": "process.stdout.write('\\x1Bc'); console.clear()console.log('\\033[2J');",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 95,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  cli app nodejs",
    "description": "#!/usr/bin/env node",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 96,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  client.connect is not a function node js mongodb",
    "description": "const { MongoClient } = require(\"mongodb\");\n\nconst uri = \"yourUri...\";\nconst databaseName = \"yourDBName\";\n\nMongoClient.connect(uri, { useNewUrlParser: true }, (error, client) => {\n  if (error) {\n    return console.log(\"Connection failed for some reason\");\n  }\n  console.log(\"Connection established - All well\");\n  const db = client.db(databaseName);\n});\n//Just add this line of code and client.connect and \n//-other dot functions will work\n\nvar mongo = require('mongodb').MongoClient;",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 97,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  colors in node js console",
    "description": "// Second argument is inserted in place of %s\n\nconsole.log('\\x1b[36m%s\\x1b[0m', 'I am cyan');  //cyan\nconsole.log('\\x1b[33m%s\\x1b[0m', stringToMakeYellow);  //yellow\n\nReset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"Reset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 98,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  como actualizar nodejs",
    "description": "npm install -g npm //Windows\nSudo npm install -g npm //Mac",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 99,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  como deletar node js linux",
    "description": "$ sudo apt-get remove nodejs",
    "reg_date": "2021-10-14T19:39:54.000Z"
  },
  {
    "id": 100,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  competitive coding nodejs",
    "description": "/*\nSample addition code\nTest cases file\n\n2\n2 \n10 20\n3\n10 20 30      \n */\n\n//Driver code\n'use strict';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin=>{\n    inputString += inputStdin;\n})\n\nprocess.stdin.on('end', ()=>{\n    inputString = inputString.trim().split(\"\\n\").map(string => {\n        return string.trim();\n    })    \n    main();\n})\n\nfunction readline() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    let t = parseInt(readline());\n    for(let i=0;i<t;i++) {\n        let n = parseInt(readline());\n        let arr = new Array(n);\n        let input_arr = readline().split(\" \").map(x=> parseInt(x));\n        for(let j=0;j<n;j++) {\n            arr[j] = input_arr[j];\n        }\n        let sol = solution(arr);\n        console.log(sol);\n    }\n}\n\n//solution start here\nfunction solution(arr) {\n    let result = 0;\n    for(let i=0;i<arr.length;i++) {\n        result += arr[i];\n    }\n    return result;\n}",
    "reg_date": "2021-10-14T19:39:55.000Z"
  },
  {
    "id": 101,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  concept of node js with react js",
    "description": "app.get(‘/’, function(req, res) {  res.send(‘Hello World’)})",
    "reg_date": "2021-10-14T19:39:55.000Z"
  },
  {
    "id": 102,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  configuration file must specify a supported nodejs10 version that is compatible with the runtime specified in the deployment.",
    "description": "Add this to package.json:\n\"engines\": {\n    \"node\": \">=10.0\"\n  }",
    "reg_date": "2021-10-14T19:39:55.000Z"
  },
  {
    "id": 103,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  connect nodejs to mariadb",
    "description": "const mariadb = require('mariadb');\nconst pool = mariadb.createPool({\n     host: 'mydb.com', \n     user:'myUser', \n     password: 'myPassword',\n     connectionLimit: 5\n});\nasync function asyncFunction() {\n  let conn;\n  try {\n\tconn = await pool.getConnection();\n\tconst rows = await conn.query(\"SELECT 1 as val\");\n\tconsole.log(rows); //[ {val: 1}, meta: ... ]\n\tconst res = await conn.query(\"INSERT INTO myTable value (?, ?)\", [1, \"mariadb\"]);\n\tconsole.log(res); // { affectedRows: 1, insertId: 1, warningStatus: 0 }\n\n  } catch (err) {\n\tthrow err;\n  } finally {\n\tif (conn) return conn.end();\n  }\n}\n",
    "reg_date": "2021-10-14T19:39:55.000Z"
  },
  {
    "id": 104,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  convert base64 to image nodejs",
    "description": "var base64Data = req.rawBody.replace(/^data:image\\/png;base64,/, \"\");\n\nrequire(\"fs\").writeFile(\"out.png\", base64Data, 'base64', function(err) {\n  console.log(err);\n});const fs = require('fs');\nconst contents = fs.readFileSync('/path/to/file.jpg', {encoding: 'base64'});\n",
    "reg_date": "2021-10-14T19:39:55.000Z"
  },
  {
    "id": 105,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  convert excel file to json using node js",
    "description": "let express = require('express'),\n    app = express(),\n    bodyParser = require('body-parser'),\n    multer = require('multer'),\n    crypto = require('crypto'),\n    xlsxtojson = require('xlsx-to-json'),\n    xlstojson = require(\"xls-to-json\");\n\nlet fileExtension = require('file-extension');\n\n    app.use(bodyParser.json());  \n\n    let storage = multer.diskStorage({ //multers disk storage settings\n        destination: function (req, file, cb) {\n            cb(null, './input/')\n        },\n        filename: function (req, file, cb) {\n            crypto.pseudoRandomBytes(16, function (err, raw) {\n                cb(null, raw.toString('hex') + Date.now() + '.' + fileExtension(file.mimetype));\n                });\n        }\n    });\n\n    let upload = multer({storage: storage}).single('file');\n\n    /** Method to handle the form submit */\n    app.post('/sendFile', function(req, res) {\n        let excel2json;\n        upload(req,res,function(err){\n            if(err){\n                 res.json({error_code:401,err_desc:err});\n                 return;\n            }\n            if(!req.file){\n                res.json({error_code:404,err_desc:\"File not found!\"});\n                return;\n            }\n\n            if(req.file.originalname.split('.')[req.file.originalname.split('.').length-1] === 'xlsx'){\n                excel2json = xlsxtojson;\n            } else {\n                excel2json = xlstojson;\n            }\n\n           //  code to convert excel data to json  format\n            excel2json({\n                input: req.file.path,  \n                output: \"output/\"+Date.now()+\".json\", // output json \n                lowerCaseHeaders:true\n            }, function(err, result) {\n                if(err) {\n                  res.json(err);\n                } else {\n                  res.json(result);\n                }\n            });\n\n        })\n\n    });\n    // load index file to upload file on http://localhost:3000/\n    app.get('/',function(req,res){\n        res.sendFile(__dirname + \"/index.html\");\n    });\n\n    app.listen('3000', function(){\n        console.log('Server running on port 3000');\n    });\n",
    "reg_date": "2021-10-14T19:39:55.000Z"
  },
  {
    "id": 106,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  copy directory in nodejs",
    "description": "const fse = require('fs-extra');\n\nconst srcDir = `path/to/file`;\nconst destDir = `path/to/destination/directory`;\n                              \n// To copy a folder or file  \nfse.copySync(srcDir, destDir, function (err) {\n  if (err) {                 ^\n    console.error(err);      |___{ overwrite: true } // add if you want to replace existing folder or file with same name\n  } else {\n    console.log(\"success!\");\n  }\n});\ncopydir.sync(from, to[, options]);",
    "reg_date": "2021-10-14T19:39:55.000Z"
  },
  {
    "id": 107,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  copy folder in nodejs",
    "description": "copydir.sync(from, to[, options]);",
    "reg_date": "2021-10-14T19:39:56.000Z"
  },
  {
    "id": 108,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  cors error in node js express",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n// CORS (Cross-Origin Resource Sharing) headers to support Cross-site HTTP requests\n\napp.all('*', function(req, res, next) {\n       res.header(\"Access-Control-Allow-Origin\", \"*\");\n       res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n       res.header('Access-Control-Allow-Headers', 'Content-Type');\n       next();\n});\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});//Cors = Cross-origin resource sharing\n\nvar express = require('express');\nvar cors = require('cors');\nvar app = express();\n\napp.use(cors());\n\nvar corsOptions = {\n  origin: 'http://example.com',\n  optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n}\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})var cors = require('cors')\n\nvar app = express()\napp.use(cors())",
    "reg_date": "2021-10-14T19:39:56.000Z"
  },
  {
    "id": 109,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create a node js project in with worker",
    "description": "louji",
    "reg_date": "2021-10-14T19:39:56.000Z"
  },
  {
    "id": 110,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create a web server node js w socket.io",
    "description": "var app = require('express')();\nvar http = require('http').createServer(app);\nvar io = require('socket.io')(http);\n\napp.get('/', (req, res) => {\n  // Ran when a GET request to path '/'\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', (socket) => {\n  // Ran when a socket connected\n});\n\nhttp.listen(3000, () => {\n  // Ran when server is ready to take requestes\n});",
    "reg_date": "2021-10-14T19:39:56.000Z"
  },
  {
    "id": 111,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create csv file nodejs",
    "description": "const createCsvWriter = require('csv-writer').createObjectCsvWriter;\nconst csvWriter = createCsvWriter({\n  path: 'out.csv',\n  header: [\n    {id: 'name', title: 'Name'},\n    {id: 'surname', title: 'Surname'},\n    {id: 'age', title: 'Age'},\n    {id: 'gender', title: 'Gender'},\n  ]\n});\n\nconst data = [\n  {\n    name: 'John',\n    surname: 'Snow',\n    age: 26,\n    gender: 'M'\n  }, {\n    name: 'Clair',\n    surname: 'White',\n    age: 33,\n    gender: 'F',\n  }, {\n    name: 'Fancy',\n    surname: 'Brown',\n    age: 78,\n    gender: 'F'\n  }\n];\n\ncsvWriter\n  .writeRecords(data)\n  .then(()=> console.log('The CSV file was written successfully'));\nconst csv = require('csv-parser');\nconst fs = require('fs');\n\nfs.createReadStream('data.csv')\n  .pipe(csv())\n  .on('data', (row) => {\n    console.log(row);\n  })\n  .on('end', () => {\n    console.log('CSV file successfully processed');\n  });\n",
    "reg_date": "2021-10-14T19:39:56.000Z"
  },
  {
    "id": 112,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create directory when writing to file in nodejs",
    "description": "fs.mkdir now accepts a { recursive: true } option like so:\n\n// Creates /tmp/a/apple, regardless of whether `/tmp` and /tmp/a exist.\nfs.mkdir('/tmp/a/apple', { recursive: true }, (err) => {\n  if (err) throw err;\n});",
    "reg_date": "2021-10-14T19:39:56.000Z"
  },
  {
    "id": 113,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create file in nodejs",
    "description": "fs.writeFile('<fileName>',<contenet>, callbackFunction)\n<script> \n// Requiring fs module in which \n// writeFile function is defined. \nconst fs = require('fs') \n  \n// Data which will write in a file. \nlet data = \"Learning how to write in a file.\"\n  \n// Write data in 'Output.txt' . \nfs.writeFile('Output.txt', data, (err) => { \n      \n    // In case of a error throw err. \n    if (err) throw err; \n}) \n</script>   var imagePath = path.join('/images/logo.png', 'logo.png');\n\n  if (fs.statSync(imagePath)) {\n     var bitmap = fs.readFileSync(imagePath);\n     var bufferImage = new Buffer(bitmap);\n\n     Magic = mmm.Magic;\n     var magic = new Magic(mmm.MAGIC_MIME_TYPE);\n     magic.detectFile(imagePath, function(err, result) {\n          if (err) throw err;\n          datas = [{\"buffer\": bufferImage, \"mimetype\": result, \"originalname\": path.basename(imagePath)}];\n          var JsonDatas= JSON.parse(JSON.stringify(datas));\n          log.notice(JsonDatas);\n     });\n }\n",
    "reg_date": "2021-10-14T19:39:56.000Z"
  },
  {
    "id": 114,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create file object node js",
    "description": "  var imagePath = path.join('/images/logo.png', 'logo.png');\n\n  if (fs.statSync(imagePath)) {\n     var bitmap = fs.readFileSync(imagePath);\n     var bufferImage = new Buffer(bitmap);\n\n     Magic = mmm.Magic;\n     var magic = new Magic(mmm.MAGIC_MIME_TYPE);\n     magic.detectFile(imagePath, function(err, result) {\n          if (err) throw err;\n          datas = [{\"buffer\": bufferImage, \"mimetype\": result, \"originalname\": path.basename(imagePath)}];\n          var JsonDatas= JSON.parse(JSON.stringify(datas));\n          log.notice(JsonDatas);\n     });\n }\n",
    "reg_date": "2021-10-14T19:39:56.000Z"
  },
  {
    "id": 115,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create gatsby pages node js",
    "description": "const axios = require('axios');\n\nrequire(\"dotenv\").config({\n  path: `.env.${process.env.NODE_ENV}`\n});\n\nconst getRepositoryData = async () => {\n  console.log(process.env.API_URL);\n  return axios.get(`${process.env.API_URL}/repositories`);\n};\n\nexports.createPages = async ({\n  actions: {\n    createPage\n  }\n}) => {\n  let repositories = await getRepositoryData();\n  repositories = repositories.data;\n\n  // Create a page that lists all repositories.\n  createPage({\n    path: `/`,\n    component: require.resolve('./src/templates/all-repositories.js'),\n    context: {\n      repositories\n    }\n  });\n\n  // Create a page for each repository.\n  repositories.forEach(repository => {\n    createPage({\n      path: `/repository/${repository.owner}/${repository.name}`,\n      component: require.resolve('./src/templates/repository.js'),\n      context: {\n        repository\n      }\n    });\n  });\n};\n",
    "reg_date": "2021-10-14T19:39:57.000Z"
  },
  {
    "id": 116,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create node js server",
    "description": "/* ====== create node.js server with core 'http' module ====== */\n// dependencies\nconst http = require(\"http\");\n\n// PORT\nconst PORT = 3000;\n\n// server create\nconst server = http.createServer((req, res) => {\n   if (req.url === \"/\") {\n      res.write(\"This is home page.\");\n      res.end();\n   } else if (req.url === \"/about\" && req.method === \"GET\") {\n      res.write(\"This is about page.\");\n      res.end();\n   } else {\n      res.write(\"Not Found!\");\n      res.end();\n   }\n});\n\n// server listen port\nserver.listen(PORT);\n\nconsole.log(`Server is running on PORT: ${PORT}`);\n\n/* ========== *** ========== */\n\n/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000var http = require('http'); // Import Node.js core module\n\nvar server = http.createServer(function (req, res) {   //create web server\n    if (req.url == '/') { //check the URL of the current request\n        \n        // set response header\n        res.writeHead(200, { 'Content-Type': 'text/html' }); \n        \n        // set response content    \n        res.write('<html><body><p>This is home Page.</p></body></html>');\n        res.end();\n    \n    }\n    else if (req.url == \"/student\") {\n        \n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write('<html><body><p>This is student Page.</p></body></html>');\n        res.end();\n    \n    }\n    else if (req.url == \"/admin\") {\n        \n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write('<html><body><p>This is admin Page.</p></body></html>');\n        res.end();\n    \n    }\n    else\n        res.end('Invalid Request!');\n\n});\n\nserver.listen(5000); //6 - listen for any incoming requests\n\nconsole.log('Node.js web server at port 5000 is running..')\nconst express = require('express');\nconst server = express();\n\nconst PORT = 3000;\n\n// Homme page\nserver.get('/', (req, res) => {\n  return res.send(\"<h1 style='text-align: center;'>Hello,<br />from the Express.js server!</h1>\");\n})\n\n// About page\nserver.get('/about', (req, res) => {\n  return res.send('<h2 style=\"text-align:center\">About us</h2>');\n})\n\n// 404 page\nserver.use((req, res, next) =>{\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile(__dirname + '/error404.html');\n    return;\n  }\n  // respond with json\n  else if (req.accepts('json')){\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  // respond with text\n  else {\n    res.type('txt').send('Error 404 - Not found');\n  }\n});\n\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n// content of index.js\nconst http = require('http')\nconst port = 3000\n\nconst requestHandler = (request, response) => {\n  console.log(request.url)\n  response.end('Hello Node.js Server!')\n}\n\nconst server = http.createServer(requestHandler)\n\nserver.listen(port, (err) => {\n  if (err) {\n    return console.log('something bad happened', err)\n  }\n\n  console.log(`server is listening on ${port}`)\n})\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});import express from 'express';\nconst server = express();\n\nconst port = 8080;\n\nserver.get('/', (req, res) => {\n  return res.send('Hello, Express.js!');\n})\n\nserver.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});",
    "reg_date": "2021-10-14T19:39:57.000Z"
  },
  {
    "id": 117,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create nodejs new object",
    "description": "class Person {\n  constructor(fname, lname) {\n    this.firstName = fname;\n    this.lastName = lname;\n  }\n}\n\nconst person = new Person('testFirstName', 'testLastName');\n\nconsole.log(person.firstName); // testFirstName\nconsole.log(person.lastName); // testLastName\n\nconst personFactory = (firstName, lastName, email) => {\n    return {\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        info() {\n            return `${this.firstName} ${this.lastName}, ${this.email}`;\n        }\n    };\n};\n\nlet person = personFactory('John', 'Doe', 'jdoe@example.com');\n\nconsole.log(person.info());\nlet Person = function (firstName, lastName, email) {\n\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.email = email;\n}\n\nlet PersonBuilder = function () {\n\n    let firstName;\n    let lastName;\n    let email;\n\n    return {\n        setFirstName: function (firstName) {\n            this.firstName = firstName;\n            return this;\n        },\n        setLastName: function (lastName) {\n            this.lastName = lastName;\n            return this;\n        },\n        setEmail: function (email) {\n            this.email = email;\n            return this;\n        },\n        info: function () {\n            return `${this.firstName} ${this.lastName}, ${this.email}`;\n        },\n        build: function () {\n            return new Person(firstName, lastName, email);\n        }\n    };\n};\n\nvar person = new PersonBuilder().setFirstName('John').setLastName('Doe')\n    .setEmail('jdoe@example.com');\nconsole.log(person.info());\nfunction Person(fname, lname) {\n  this.firstName = fname;\n  this.lastName = lname;\n}",
    "reg_date": "2021-10-14T19:39:57.000Z"
  },
  {
    "id": 118,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create path if not exist node js",
    "description": "var fs = require('fs');\nvar dir = './tmp';\n\nif (!fs.existsSync(dir)){\n    fs.mkdirSync(dir);\n}",
    "reg_date": "2021-10-14T19:39:57.000Z"
  },
  {
    "id": 119,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create server with node js",
    "description": "/* ====== create node.js server with core 'http' module ====== */\n// dependencies\nconst http = require(\"http\");\n\n// PORT\nconst PORT = 3000;\n\n// server create\nconst server = http.createServer((req, res) => {\n   if (req.url === \"/\") {\n      res.write(\"This is home page.\");\n      res.end();\n   } else if (req.url === \"/about\" && req.method === \"GET\") {\n      res.write(\"This is about page.\");\n      res.end();\n   } else {\n      res.write(\"Not Found!\");\n      res.end();\n   }\n});\n\n// server listen port\nserver.listen(PORT);\n\nconsole.log(`Server is running on PORT: ${PORT}`);\n\n/* ========== *** ========== */\n\n/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000const express = require('express');\nconst server = express();\n\nconst PORT = 3000;\n\n// Homme page\nserver.get('/', (req, res) => {\n  return res.send(\"<h1 style='text-align: center;'>Hello,<br />from the Express.js server!</h1>\");\n})\n\n// About page\nserver.get('/about', (req, res) => {\n  return res.send('<h2 style=\"text-align:center\">About us</h2>');\n})\n\n// 404 page\nserver.use((req, res, next) =>{\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile(__dirname + '/error404.html');\n    return;\n  }\n  // respond with json\n  else if (req.accepts('json')){\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  // respond with text\n  else {\n    res.type('txt').send('Error 404 - Not found');\n  }\n});\n\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n// content of index.js\nconst http = require('http')\nconst port = 3000\n\nconst requestHandler = (request, response) => {\n  console.log(request.url)\n  response.end('Hello Node.js Server!')\n}\n\nconst server = http.createServer(requestHandler)\n\nserver.listen(port, (err) => {\n  if (err) {\n    return console.log('something bad happened', err)\n  }\n\n  console.log(`server is listening on ${port}`)\n})\n// code by VARSHITH REDDY SATTI\n// to create a server in node.js you should.\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write(\"write html code to display you test\")\n  res.end();\n}).listen(8080);\n// save this as httpServer.js\n// run this by typing node httpServer.js in the command line\n// to acess your server got to http://localhost:8080import express from 'express';\nconst server = express();\n\nconst port = 8080;\n\nserver.get('/', (req, res) => {\n  return res.send('Hello, Express.js!');\n})\n\nserver.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});//HTTP MODULE NODE.JS\nvar http = require('http');\nvar server = http.createServer(function(req, res){\n  //write code here\n});\nserver.listen(5000); ",
    "reg_date": "2021-10-14T19:39:57.000Z"
  },
  {
    "id": 120,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  create unique transaction ids nodejs",
    "description": "const crypto = require(\"crypto\");\n\nconst id = crypto.randomBytes(16).toString(\"hex\");\n\nconsole.log(id); // => f9b327e70bbcf42494ccb28b2d98e00e",
    "reg_date": "2021-10-14T19:39:57.000Z"
  },
  {
    "id": 121,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  creating function in node js",
    "description": "function functionName(arg1, arg2...) {\n   // function body\n   // optional return; \n} ",
    "reg_date": "2021-10-14T19:39:58.000Z"
  },
  {
    "id": 122,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  creating room in ws node js",
    "description": "const rooms = {};\n\nwss.on(\"connection\", socket => {\n  const uuid = ...; // create here a uuid for this connection\n\n  const leave = room => {\n    // not present: do nothing\n    if(! rooms[room][uuid]) return;\n\n    // if the one exiting is the last one, destroy the room\n    if(Object.keys(rooms[room]).length === 1) delete rooms[room];\n    // otherwise simply leave the room\n    else delete rooms[room][uuid];\n  };\n\n  socket.on(\"message\", data => {\n    const { message, meta, room } = data;\n\n    if(meta === \"join\") {\n      if(! rooms[room]) rooms[room] = {}; // create the room\n      if(! rooms[room][uuid]) rooms[room][uuid] = socket; // join the room\n    }\n    else if(meta === \"leave\") {\n      leave(room);\n    }\n    else if(! meta) {\n      // send the message to all in the room\n      Object.entries(rooms[room]).forEach(([, sock]) => sock.send({ message }));\n    }\n  });\n\n  socket.on(\"close\", () => {\n    // for each room, remove the closed socket\n    Object.keys(rooms).forEach(room => leave(room));\n  });\n});",
    "reg_date": "2021-10-14T19:39:58.000Z"
  },
  {
    "id": 123,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  creating room in ws nodejs",
    "description": "const rooms = {};\n\nwss.on(\"connection\", socket => {\n  const uuid = ...; // create here a uuid for this connection\n\n  const leave = room => {\n    // not present: do nothing\n    if(! rooms[room][uuid]) return;\n\n    // if the one exiting is the last one, destroy the room\n    if(Object.keys(rooms[room]).length === 1) delete rooms[room];\n    // otherwise simply leave the room\n    else delete rooms[room][uuid];\n  };\n\n  socket.on(\"message\", data => {\n    const { message, meta, room } = data;\n\n    if(meta === \"join\") {\n      if(! rooms[room]) rooms[room] = {}; // create the room\n      if(! rooms[room][uuid]) rooms[room][uuid] = socket; // join the room\n    }\n    else if(meta === \"leave\") {\n      leave(room);\n    }\n    else if(! meta) {\n      // send the message to all in the room\n      Object.entries(rooms[room]).forEach(([, sock]) => sock.send({ message }));\n    }\n  });\n\n  socket.on(\"close\", () => {\n    // for each room, remove the closed socket\n    Object.keys(rooms).forEach(room => leave(room));\n  });\n});",
    "reg_date": "2021-10-14T19:39:58.000Z"
  },
  {
    "id": 124,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  cross-origin request blocked the same origin policy disallows reading the remote resource fix in node js node js",
    "description": "app.use(function (req, res, next) {\nres.setHeader('Access-Control-Allow-Origin', '*');\nres.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\nres.setHeader('Access-Control-Allow-Headers', 'Content-Type');\nres.setHeader('Access-Control-Allow-Credentials', true);\nnext();\n});\n",
    "reg_date": "2021-10-14T19:39:58.000Z"
  },
  {
    "id": 125,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  crud mongodb node js github",
    "description": "> db.users.insert({name:\"Mukesh Chapagain\", age:88, email:\"mukesh@example.com\"})\n> db.users.insert({name:\"Raju Sharma\", age:77, email:\"raju@example.com\"})\n> db.users.insert({name:\"Krishna Yadav\", age:65, email:\"krishna@example.com\"})\n",
    "reg_date": "2021-10-14T19:39:58.000Z"
  },
  {
    "id": 126,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  crypto 32 characers encryption node js",
    "description": "const crypto = require('crypto');\nconst algorithm = 'aes-256-cbc';\nconst key = 'pass'; //Here I would get the password of the user\n\nfunction encrypt(text) {\n   const iv = crypto.randomBytes(16);\n   let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);\n   let encrypted = cipher.update(text);\n   encrypted = Buffer.concat([encrypted, cipher.final()]);\n   return { iv: iv.toString('hex'), encryptedData: encrypted.toString('hex') };\n}\n\nfunction decrypt(text) {\n   let iv = Buffer.from(text.iv, 'hex');\n   let encryptedText = Buffer.from(text.encryptedData, 'hex');\n   let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\n   let decrypted = decipher.update(encryptedText);\n   decrypted = Buffer.concat([decrypted, decipher.final()]);\n   return decrypted.toString();\n}",
    "reg_date": "2021-10-14T19:39:58.000Z"
  },
  {
    "id": 127,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  crypto encode decoed nodejs",
    "description": "const crypto = require('crypto')\n\nconst algorithm = 'aes-256-cbc'\nconst initVector = crypto.randomBytes(16)\nconst Securitykey = crypto.randomBytes(32)\n\nexports.encrypt = (data) => {\n\tconst cipher = crypto.createCipheriv(algorithm, Securitykey, initVector)\n\tlet encryptedData = cipher.update(data, 'utf-8', 'hex')\n\tencryptedData += cipher.final('hex')\n\treturn encryptedData\n}\n\nexports.decrypt = (data) => {\n\tconst decipher = crypto.createDecipheriv(algorithm, Securitykey, initVector)\n\tlet decryptedData = decipher.update(data, 'hex', 'utf-8')\n\tdecryptedData += decipher.final('utf-8')\n\treturn decryptedData\n}\n",
    "reg_date": "2021-10-14T19:39:58.000Z"
  },
  {
    "id": 128,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  css errors in node js server",
    "description": "<!doctype>\n ",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 129,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  csv to json nodejs",
    "description": "// npm install --save csvtojson@latest\nconst csv = require(\"csvtojson\");\nconst request = require('request');\n// Convert a csv file with csvtojson\ncsv().fromStream(request.get('https://fileas.csv))\n  \t.then(function(jsonArrayObj){\n  \t\t//when parse finished, result will be emitted here.\n    \tconsole.log(jsonArrayObj); \n \t})// Install\nnpm i csvtojson\n\n// From CSV File to JSON Array\n/** csv file\na,b,c\n1,2,3\n4,5,6\n*/\nconst csvFilePath='<path to csv file>'\nconst csv=require('csvtojson')\ncsv()\n.fromFile(csvFilePath)\n.then((jsonObj)=>{\n    console.log(jsonObj);\n    /**\n     * [\n     * \t{a:\"1\", b:\"2\", c:\"3\"},\n     * \t{a:\"4\", b:\"5\". c:\"6\"}\n     * ]\n     */ \n})const { Parser } = require('json2csv');\n\nconst myCars = [\n  {\n    \"car\": \"Audi\",\n    \"price\": 40000,\n    \"color\": \"blue\"\n  }, {\n    \"car\": \"BMW\",\n    \"price\": 35000,\n    \"color\": \"black\"\n  }, {\n    \"car\": \"Porsche\",\n    \"price\": 60000,\n    \"color\": \"green\"\n  }\n];\n\nconst json2csvParser = new Parser();\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 130,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  custom error nodejs",
    "description": "class Testing extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 131,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  data at transit encrypting nodejs stack overflow",
    "description": "var crypto = require('crypto');\nvar assert = require('assert');\n\nvar algorithm = 'aes256'; // or any other algorithm supported by OpenSSL\nvar key = 'password';\nvar text = 'I love kittens';\n\nvar cipher = crypto.createCipher(algorithm, key);  \nvar encrypted = cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\nvar decipher = crypto.createDecipher(algorithm, key);\nvar decrypted = decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');\n\nassert.equal(decrypted, text);",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 132,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  data not write in file node js",
    "description": "const fs = require('fs');\n\nfs.readFile('file.txt', 'utf-8', (err, data) => {\n    if(err) {\n        throw err;\n    }\n    console.log(data);\n});\n",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 133,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  declare an array nodejs",
    "description": "// Don't need to provide elements directly, but you can\n\n// FIRST OPTION\nvar myArray = new Array(/*elements1, elements2*/);\n\n// SECOND OPTION\nvar mySecondArray = [/*element1, element2*/];var arr1 = new Array();\nvar arr2 = [];",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 134,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  decode jwt token nodejs",
    "description": "import jwt_decode from \"jwt-decode\";\nvar token = \"eyJ0eXAiO...\";\nvar decoded = jwt_decode(token);\nconsole.log(decoded);\n\n/* prints: * { foo: \"bar\", *   exp: 1393286893, *   iat: 1393268893  } */var ca = \"your.jwt.token\";\nvar base64Url = ca.split('.')[1];\nvar decodedValue = JSON.parse(window.atob(base64Url));",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 135,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  define a route with path paramters in nodejs",
    "description": "var users = {\n  'azat': {\n    email: 'hi@azat.co',\n    website: ' http://azat.co ',\n    blog: ' http://webapplog.com '\n  }\n};\n\nvar findUserByUsername = function (username, callback) {\n  // Perform database query that calls callback when it's done\n  // This is our fake database\n  if (!users[username])\n    return callback(new Error(\n      'No user matching '\n       + username\n      )\n    );\n  return callback(null, users[username]);\n};\n\napp.get('/v1/users/:username', function(request, response, next) {\n  var username = request.params.username;\n  findUserByUsername(username, function(error, user) {\n    if (error) return next(error);\n    return response.render('user', user);\n  });\n});\n\napp.get('/v1/admin/:username', function(request, response, next) {\n  var username = request.params.username;\n  findUserByUsername(username, function(error, user) {\n    if (error) return next(error);\n    return response.render('admin', user);\n  });\n}); \nvar express = require('express');\nvar fs  = require('fs');\nvar app= express();\n app.get('/index/profile/:id',function(req,res){\n    //  res.send('profile with id' + req.params.id)\n\n    \n    \n });\napp.listen(3000,'127.0.0.1');\nconsole.log('lsitng');",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 136,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  define a while loop in node js",
    "description": "do {\n  text += \"The number is \" + i;\n  i++;\n}\nwhile (i < 10);while (n < 3) {\n  n++;\n}",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 137,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  define async function in node js",
    "description": "async function name([param[, param[, ...param]]]) {\n   statements\n}",
    "reg_date": "2021-10-14T19:39:59.000Z"
  },
  {
    "id": 138,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  define maxmum size of schema field in nodejs",
    "description": "db.createCollection(\"people\", {\n   validator: {\n      $jsonSchema: {\n         bsonType: \"object\",\n         required: [ \"name\" ],\n         properties: {\n            name: {\n               bsonType: [\"string\"],\n               description: \"must be a string\"\n            },\n            friends: {\n               bsonType: [\"array\"],\n               items : { bsonType: [\"string\"] },\n               minItems: 0,\n               maxItems: 10,\n               description: \"must be a array of string and max is 10\"\n            }\n         }\n      }\n   }\n});",
    "reg_date": "2021-10-14T19:40:00.000Z"
  },
  {
    "id": 139,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  delete all childs in node",
    "description": "while (myNode.firstChild) {\n  myNode.removeChild(myNode.lastChild);\n}var myDiv = document.getElementById(\"myDivID\");\n    myDiv.innerHTML = \"\";//remove all child elements inside of myDiv",
    "reg_date": "2021-10-14T19:40:00.000Z"
  },
  {
    "id": 140,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  delete all files in a folder with nodejs",
    "description": "rmDir = function(dirPath, removeSelf) {\n  try { var files = fs.readdirSync(dirPath); }\n  catch(e) { return; }\n  if (files.length > 0)\n    for (var i = 0; i < files.length; i++) {\n      var filePath = dirPath + '/' + files[i];\n      if (fs.statSync(filePath).isFile())\n        fs.unlinkSync(filePath);\n      else\n        rmDir(filePath);\n    }\n  if (removeSelf)\n    fs.rmdirSync(dirPath);\n};",
    "reg_date": "2021-10-14T19:40:00.000Z"
  },
  {
    "id": 141,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  delete dir nodejs",
    "description": "fs.rmdirSync(dir, { recursive: true });fs.unlink('./node/myText.txt',function(){\n    fs.rmdir('node');\n});",
    "reg_date": "2021-10-14T19:40:01.000Z"
  },
  {
    "id": 142,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  delete single image by using user id in node js mongodb",
    "description": "// User delete his single image by using user id and image id\nconst deleteSingleImageByUserId = async (req, res) => {\n  try {\n    const user = await User.findByIdAndUpdate(\n      req.params.userId,\n      {\n        $pull: {\n          images: {\n            _id: req.params.imageId,\n          },\n        },\n      },\n      { new: true }\n    );\n\n    //console.log(\"req params imageId: \", req.params.imageId + images);\n\n    if (!user) {\n      return res.status(400).send(\"User not found\");\n    }\n\n    await Imageup.findByIdAndDelete(req.params.imageId);\n\n    res.send(\"Image is deleted successfully!\");\n    console.log(\"user user: \", user);\n  } catch (err) {\n    res.status(500).send(\"Something went wrong!\");\n  }\n};// Delete single image\nconst deleteImage = (req, res) => {\n  Imageup.deleteOne({ _id: req.params.id })\n    .then(() => {\n      res.status(200).json({\n        message: \"Image deleted successfully!\",\n      });\n    })\n    .catch((error) => {\n      res.status(400).json({\n        error: error,\n      });\n    });\n};",
    "reg_date": "2021-10-14T19:40:01.000Z"
  },
  {
    "id": 143,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  delete single image in node js mongodb",
    "description": "// Delete single image\nconst deleteImage = (req, res) => {\n  Imageup.deleteOne({ _id: req.params.id })\n    .then(() => {\n      res.status(200).json({\n        message: \"Image deleted successfully!\",\n      });\n    })\n    .catch((error) => {\n      res.status(400).json({\n        error: error,\n      });\n    });\n};// User delete his single image by using user id and image id\nconst deleteSingleImageByUserId = async (req, res) => {\n  try {\n    const user = await User.findByIdAndUpdate(\n      req.params.userId,\n      {\n        $pull: {\n          images: {\n            _id: req.params.imageId,\n          },\n        },\n      },\n      { new: true }\n    );\n\n    //console.log(\"req params imageId: \", req.params.imageId + images);\n\n    if (!user) {\n      return res.status(400).send(\"User not found\");\n    }\n\n    await Imageup.findByIdAndDelete(req.params.imageId);\n\n    res.send(\"Image is deleted successfully!\");\n    console.log(\"user user: \", user);\n  } catch (err) {\n    res.status(500).send(\"Something went wrong!\");\n  }\n};",
    "reg_date": "2021-10-14T19:40:01.000Z"
  },
  {
    "id": 144,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  detect nodejs",
    "description": "(function () {\n\n    // Establish the root object, `window` in the browser, or `global` on the server.\n    var root = this; \n\n    // Create a reference to this\n    var _ = new Object();\n\n    var isNode = false;\n\n    // Export the Underscore object for **CommonJS**, with backwards-compatibility\n    // for the old `require()` API. If we're not in CommonJS, add `_` to the\n    // global object.\n    if (typeof module !== 'undefined' && module.exports) {\n            module.exports = _;\n            root._ = _;\n            isNode = true;\n    } else {\n            root._ = _;\n    }\n})();\n",
    "reg_date": "2021-10-14T19:40:02.000Z"
  },
  {
    "id": 145,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  determine location of ip address nodejs",
    "description": "/**\n * Determine location of ip address [NODEJS]\n*/\n\n//freegeoip.net/{format}/{IP_or_hostname}\n//Sample GET http://freegeoip.net/json/207.97.227.239 :\n\n{\n  ip: \"207.97.227.239\",\n  country_code: \"US\",\n  country_name: \"United States\",\n  region_code: \"TX\",\n  region_name: \"Texas\",\n  city: \"San Antonio\",\n  zip_code: \"78218\",\n  time_zone: \"America/Chicago\",\n  latitude: 29.4889,\n  longitude: -98.3987,\n  metro_code: 641\n}\n",
    "reg_date": "2021-10-14T19:40:02.000Z"
  },
  {
    "id": 146,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  difference between ajax and node js",
    "description": "AJAX is client side programming technology and it executes in the browser.\nwhereas\nNodeJs is server-side scripting language and it executes on the server.",
    "reg_date": "2021-10-14T19:40:02.000Z"
  },
  {
    "id": 147,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  difference between synchronous and asynchronous in node js",
    "description": "// Example 1 - Synchronous (blocks)\nvar result = database.query(\"SELECT * FROM hugetable\");\nconsole.log(\"Query finished\");\nconsole.log(\"Next line\");\n\n\n// Example 2 - Asynchronous (doesn't block) \ndatabase.query(\"SELECT * FROM hugetable\", function(result) {\n    console.log(\"Query finished\");\n});\nconsole.log(\"Next line\");",
    "reg_date": "2021-10-14T19:40:02.000Z"
  },
  {
    "id": 148,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  django or node js",
    "description": "Please answer this questionNode JS is based on JavaScript and used on the client-side of web applications. ... On the other hand, Django works with Python applications within a framework of the deadline to help web developers build applications in real-time and more quickly.",
    "reg_date": "2021-10-14T19:40:02.000Z"
  },
  {
    "id": 149,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  dockerfile for nodejs",
    "description": "FROM node:10-alpine\n\nRUN mkdir -p /home/node/app/node_modules && chown -R node:node /home/node/app\n\nWORKDIR /home/node/app\n\nCOPY package*.json ./\n\nUSER node\n\nRUN npm install\n\nCOPY --chown=node:node . .\n\nEXPOSE 8080\n\nCMD [ \"node\", \"index.js\" ]FROM node:12-alpine\nWORKDIR /app\nCOPY package.json yarn.lock ./\nRUN yarn install --production\nCOPY . .\nCMD [\"node\", \"/app/src/index.js\"]# Choose the Image which has Node installed already\nFROM node:alpine\n\n# COPY all the files from Current Directory into the Container\nCOPY ./ ./\n\n# Install the Project Dependencies like Express Framework\nRUN npm install\n\n# Tell that this image is going to Open a Port \nEXPOSE 8080\n\n# Default Command to launch the Application\nCMD [\"npm\", \"start\"]FROM node:12\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\n\nRUN npm install\n# If you are building your code for production\n# RUN npm ci --only=production\n\n# Bundle app source\nCOPY . .\n\nEXPOSE 8080\nCMD [ \"node\", \"server.js\" ]FROM node:boron\n\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY package.json /usr/src/app/\nRUN npm install\n\nCOPY . /usr/src/app\n\nEXPOSE 3000\n\nCMD [\"npm\",\"start\"]\n\n{\n  \"name\": \"docker_web_app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node.js on Docker\",\n  \"author\": \"First Last <first.last@example.com>\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.16.1\"\n  }\n}",
    "reg_date": "2021-10-14T19:40:02.000Z"
  },
  {
    "id": 150,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  dockerfile nodejs",
    "description": "FROM node:10-alpine\n\nRUN mkdir -p /home/node/app/node_modules && chown -R node:node /home/node/app\n\nWORKDIR /home/node/app\n\nCOPY package*.json ./\n\nUSER node\n\nRUN npm install\n\nCOPY --chown=node:node . .\n\nEXPOSE 8080\n\nCMD [ \"node\", \"index.js\" ]FROM node:12-alpine\nWORKDIR /app\nCOPY package.json yarn.lock ./\nRUN yarn install --production\nCOPY . .\nCMD [\"node\", \"/app/src/index.js\"]# Choose the Image which has Node installed already\nFROM node:alpine\n\n# COPY all the files from Current Directory into the Container\nCOPY ./ ./\n\n# Install the Project Dependencies like Express Framework\nRUN npm install\n\n# Tell that this image is going to Open a Port \nEXPOSE 8080\n\n# Default Command to launch the Application\nCMD [\"npm\", \"start\"]FROM node:12\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\n\nRUN npm install\n# If you are building your code for production\n# RUN npm ci --only=production\n\n# Bundle app source\nCOPY . .\n\nEXPOSE 8080\nCMD [ \"node\", \"server.js\" ]FROM node:boron\n\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY package.json /usr/src/app/\nRUN npm install\n\nCOPY . /usr/src/app\n\nEXPOSE 3000\n\nCMD [\"npm\",\"start\"]\n\n{\n  \"name\": \"docker_web_app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node.js on Docker\",\n  \"author\": \"First Last <first.last@example.com>\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.16.1\"\n  }\n}",
    "reg_date": "2021-10-14T19:40:03.000Z"
  },
  {
    "id": 151,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  dotenv nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:03.000Z"
  },
  {
    "id": 152,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  dotenv not loading process.env in node",
    "description": "Rename your file to just .env, removing any prefix\nrequire it as early as possible in your application with the code snippet below\nrequire('dotenv').config();",
    "reg_date": "2021-10-14T19:40:03.000Z"
  },
  {
    "id": 153,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  download a file nodejs",
    "description": "const http = require('http');\nconst fs = require('fs');\n\nconst url = 'www.example.com/image.png'; // link to file you want to download\nconst path = 'app/assets/my_image_name.xlsx' // where to save a file\n\nconst request = http.get(url, function(response) {\n    if (response.statusCode === 200) {\n        var file = fs.createWriteStream(path);\n        response.pipe(file);\n    }\n    request.setTimeout(60000, function() { // if after 60s file not downlaoded, we abort a request \n        request.abort();\n    });\n});const http = require('http');\nconst fs = require('fs');\n\nconst file = fs.createWriteStream(\"file.jpg\");\nconst request = http.get(\"http://i3.ytimg.com/vi/J---aiyznGQ/mqdefault.jpg\", function(response) {\n  response.pipe(file);\n});\n",
    "reg_date": "2021-10-14T19:40:03.000Z"
  },
  {
    "id": 154,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  download file axios nodejs",
    "description": "axios.get('https://xxx/my.pdf', {responseType: 'blob'}).then(response => {\n    fs.writeFile('/temp/my.pdf', response.data, (err) => {\n        if (err) throw err;\n        console.log('The file has been saved!');\n    });\n});\nexport async function downloadFile(fileUrl: string, outputLocationPath: string) {\n  const writer = createWriteStream(outputLocationPath);\n\n  return Axios({\n    method: 'get',\n    url: fileUrl,\n    responseType: 'stream',\n  }).then(response => {\n\n    //ensure that the user can call `then()` only when the file has\n    //been downloaded entirely.\n\n    return new Promise((resolve, reject) => {\n      response.data.pipe(writer);\n      let error = null;\n      writer.on('error', err => {\n        error = err;\n        writer.close();\n        reject(err);\n      });\n      writer.on('close', () => {\n        if (!error) {\n          resolve(true);\n        }\n        //no need to call the reject here, as it will have been called in the\n        //'error' stream;\n      });\n    });\n  });\n}\nThis way, you can call downloadFile(), call then() on the returned promise, and making sure that the downloaded file will have completed processing.\n\nOr, if you use a more modern version of NodeJS, you can try this instead:\n\nimport * as stream from 'stream';\nimport { promisify } from 'util';\n\nconst finished = promisify(stream.finished);\n\nexport async function downloadFile(fileUrl: string, outputLocationPath: string): Promise<any> {\n  const writer = createWriteStream(outputLocationPath);\n  return Axios({\n    method: 'get',\n    url: fileUrl,\n    responseType: 'stream',\n  }).then(async response => {\n    response.data.pipe(writer);\n    return finished(writer); //this is a Promise\n  });\n}",
    "reg_date": "2021-10-14T19:40:03.000Z"
  },
  {
    "id": 155,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  download file nodejs",
    "description": "const http = require('http');\nconst fs = require('fs');\n\nconst url = 'www.example.com/image.png'; // link to file you want to download\nconst path = 'app/assets/my_image_name.xlsx' // where to save a file\n\nconst request = http.get(url, function(response) {\n    if (response.statusCode === 200) {\n        var file = fs.createWriteStream(path);\n        response.pipe(file);\n    }\n    request.setTimeout(60000, function() { // if after 60s file not downlaoded, we abort a request \n        request.abort();\n    });\n});const http = require('http');\nconst fs = require('fs');\n\nconst file = fs.createWriteStream(\"file.jpg\");\nconst request = http.get(\"http://i3.ytimg.com/vi/J---aiyznGQ/mqdefault.jpg\", function(response) {\n  response.pipe(file);\n});\nvar http = require('http');\nvar fs = require('fs');\n\nvar download = function(url, dest, cb) {\n  var file = fs.createWriteStream(dest);\n  var request = http.get(url, function(response) {\n    response.pipe(file);\n    file.on('finish', function() {\n      file.close(cb);  // close() is async, call cb after close completes.\n    });\n  }).on('error', function(err) { // Handle errors\n    fs.unlink(dest); // Delete the file async. (But we don't check the result)\n    if (cb) cb(err.message);\n  });\n};const http = require('http'); // or 'https' for https:// URLs\nconst fs = require('fs');\n\nconst file = fs.createWriteStream(\"file.jpg\");\nconst request = http.get(\"http://i3.ytimg.com/vi/J---aiyznGQ/mqdefault.jpg\", function(response) {\n  response.pipe(file);\n});",
    "reg_date": "2021-10-14T19:40:03.000Z"
  },
  {
    "id": 156,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  download image in nodejs",
    "description": "const request = require('request');\nconst fs = require('fs');\n\nasync function download(url, dest) {\n\n    /* Create an empty file where we can save data */\n    const file = fs.createWriteStream(dest);\n\n    /* Using Promises so that we can use the ASYNC AWAIT syntax */\n    await new Promise((resolve, reject) => {\n      request({\n        /* Here you should specify the exact link to the file you are trying to download */\n        uri: url,\n        gzip: true,\n      })\n          .pipe(file)\n          .on('finish', async () => {\n            console.log(`The file is finished downloading.`);\n            resolve();\n          })\n          .on('error', (error) => {\n            reject(error);\n          });\n    })\n        .catch((error) => {\n          console.log(`Something happened: ${error}`);\n        });\n}\n\n// example\n\n(async () => {\n  \tconst data = await download('https://random.dog/vh7i79y2qhhy.jpg', './images/image.jpg');\n  \tconsole.log(data); // The file is finished downloading.\n})();var fs = require('fs'),\n    request = require('request');\n\nvar download = function(uri, filename, callback){\n  request.head(uri, function(err, res, body){\n    console.log('content-type:', res.headers['content-type']);\n    console.log('content-length:', res.headers['content-length']);\n\n    request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);\n  });\n};\n\ndownload('https://www.google.com/images/srpr/logo3w.png', 'google.png', function(){\n  console.log('done');\n});",
    "reg_date": "2021-10-14T19:40:04.000Z"
  },
  {
    "id": 157,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  dummy servers using nodejs",
    "description": "npm i node-mock-server",
    "reg_date": "2021-10-14T19:40:04.000Z"
  },
  {
    "id": 158,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  dynamodb get all items nodejs",
    "description": "export const scanTable = async (tableName) => {\n    const params = {\n        TableName: tableName,\n    };\n\n    let scanResults = [];\n    let items;\n    do{\n        items =  await documentClient.scan(params).promise();\n        items.Items.forEach((item) => scanResults.push(item));\n        params.ExclusiveStartKey  = items.LastEvaluatedKey;\n    }while(typeof items.LastEvaluatedKey != \"undefined\");\n\n    return scanResults;\n\n};var docClient = new AWS.DynamoDB.DocumentClient();\n\nvar params = {\n    TableName: \"users\",\n    FilterExpression: \"#user_status = :user_status_val\",\n    ExpressionAttributeNames: {\n        \"#user_status\": \"user_status\",\n    },\n    ExpressionAttributeValues: { \":user_status_val\": 'somestatus' }\n\n};\n\ndocClient.scan(params, onScan);\nvar count = 0;\n\nfunction onScan(err, data) {\n    if (err) {\n        console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {        \n        console.log(\"Scan succeeded.\");\n        data.Items.forEach(function(itemdata) {\n           console.log(\"Item :\", ++count,JSON.stringify(itemdata));\n        });\n\n        // continue scanning if we have more items\n        if (typeof data.LastEvaluatedKey != \"undefined\") {\n            console.log(\"Scanning for more...\");\n            params.ExclusiveStartKey = data.LastEvaluatedKey;\n            docClient.scan(params, onScan);\n        }\n    }\n}",
    "reg_date": "2021-10-14T19:40:05.000Z"
  },
  {
    "id": 159,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  dynamodb pagination nodejs",
    "description": "const getAllData = async (params) => { \n\n    console.log(\"Querying Table\");\n    let data = await docClient.query(params).promise();\n\n    if(data['Items'].length > 0) {\n        allData = [...allData, ...data['Items']];\n    }\n\n    if (data.LastEvaluatedKey) {\n        params.ExclusiveStartKey = data.LastEvaluatedKey;\n        return await getAllData(params);\n\n    } else {\n        return data;\n    }\n}\n",
    "reg_date": "2021-10-14T19:40:05.000Z"
  },
  {
    "id": 160,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  ec2 yum nodejs",
    "description": "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n. ~/.nvm/nvm.sh\nnvm install node\n",
    "reg_date": "2021-10-14T19:40:05.000Z"
  },
  {
    "id": 161,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  edit a json file in nodejs",
    "description": "const fs = require('fs');\nconst path = require('path');\n\nlet rawdata = fs.readFileSync(path.resolve(__dirname, 'student.json'));\nlet student = JSON.parse(rawdata);\nconsole.log(student);//Using edit-json-file for NodeJS, based off the NPM documentation for edit-file-json\nconst editJsonFile = require(\"edit-json-file\");\nlet file = editJsonFile(`${__dirname}/filename.json`);\nfile.set(\"name\", \"value\");\nfile.save();\nfile = editJsonFile(`${__dirname}/filename.json`, {\n    autosave: true\n});const fs = require('fs');\nconst path = require('path');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nfs.writeFileSync(path.resolve(__dirname, 'student.json'), JSON.stringify(student));\n//inistall ciql-json : npm i ciql-json\n\nconst ciqlJson = require(\"ciql-json\")\n\nciqlJson\n    .open(\"file.json\")\n    .set(\"address\", {town : \"\", city : \"\"})\n    .save()",
    "reg_date": "2021-10-14T19:40:05.000Z"
  },
  {
    "id": 162,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  edit json via nodejs",
    "description": "//Using edit-json-file for NodeJS, based off the NPM documentation for edit-file-json\nconst editJsonFile = require(\"edit-json-file\");\nlet file = editJsonFile(`${__dirname}/filename.json`);\nfile.set(\"name\", \"value\");\nfile.save();\nfile = editJsonFile(`${__dirname}/filename.json`, {\n    autosave: true\n});",
    "reg_date": "2021-10-14T19:40:05.000Z"
  },
  {
    "id": 163,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  encrypt and decrypt in nodejs",
    "description": "const Cryptr = require('cryptr');const cryptr = new Cryptr('myTotalySecretKey'); const encryptedString = cryptr.encrypt('bacon');const decryptedString = cryptr.decrypt(encryptedString); console.log(encryptedString); // e7b75a472b65bc4a42e7b3f78833a4d00040beba796062bf7c13d9533b149e5ec3784813dc20348fdf248d28a2982df85b83d1109623bce45f08238f6ea9bd9bb5f406427b2a40f969802635b8907a0a57944f2c12f334bd081d5143a357c173a611e1b64aconsole.log(decryptedString); // bacon",
    "reg_date": "2021-10-14T19:40:05.000Z"
  },
  {
    "id": 164,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  end code nodejs",
    "description": "process.exit()",
    "reg_date": "2021-10-14T19:40:05.000Z"
  },
  {
    "id": 165,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  enumerate node js",
    "description": "const foobar = ['A', 'B', 'C'];\n\nfor (const [index, element] of foobar.entries()) {\n  console.log(index, element);\n}",
    "reg_date": "2021-10-14T19:40:06.000Z"
  },
  {
    "id": 166,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  error handling in call back function in nodejs",
    "description": "fs.readFile('/foo.txt', function(err, data) {\n  // TODO: Error Handling Still Needed!\n  console.log(data);\n});\n",
    "reg_date": "2021-10-14T19:40:06.000Z"
  },
  {
    "id": 167,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  error handling in node js",
    "description": "FactoryController.prototype.create = function (callback) {\n    //The throw is working, and the exception is returned.\n    throw new Error('An error occurred'); //outside callback \n    try {\n        this.check(function (check_result) {\n            callback(check_result);\n        });\n    } catch (ex) {\n        throw new Error(ex.toString());\n    }\n}\n\nFactoryController.prototype.create = function (callback) {\n    try {\n        this.check(function (check_result) {\n            //The throw is not working on this case to return the exception to the caller(parent)\n            throw new Error('An error occurred'); //inside callback \n        });\n    } catch (ex) {\n        throw new Error(ex.toString());\n    }\n}app.get('/', function (req, res, next) {\n  Promise.resolve().then(function () {\n    throw new Error('BROKEN')\n  }).catch(next) // Errors will be passed to Express.\n})\n",
    "reg_date": "2021-10-14T19:40:06.000Z"
  },
  {
    "id": 168,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  event emmiter in node js stackoverflow",
    "description": "const events = require('events'); \n\nconst eventEmitter = new events.EventEmitter();\n\neventEmitter.on('scream', function() {\n    console.log(\"Screaming\");\n});\n\neventEmitter.on('scream', function(name) {\n    console.log(name+\" is screaming\");\n});\n\neventEmitter.emit('scream', 'Bob');\n",
    "reg_date": "2021-10-14T19:40:06.000Z"
  },
  {
    "id": 169,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  event module in node js",
    "description": "const EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter {\n  foo() {\n    this.emit('test');\n  }\n}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('test', () => console.log('Yay, it works!'));\n\nmyEmitter.foo();\t// Yay it works!const myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.on('event', () => {\n  console.log(++m);\n});\nmyEmitter.emit('event');\n// Prints: 1\nmyEmitter.emit('event');\n// Prints: 2",
    "reg_date": "2021-10-14T19:40:06.000Z"
  },
  {
    "id": 170,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  eventemitter nodejs",
    "description": "const EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter {\n  foo() {\n    this.emit('test');\n  }\n}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('test', () => console.log('Yay, it works!'));\n\nmyEmitter.foo();\t// Yay it works!const myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.on('event', () => {\n  console.log(++m);\n});\nmyEmitter.emit('event');\n// Prints: 1\nmyEmitter.emit('event');\n// Prints: 2const { EventEmitter } = require('eventemitter3')\nconst util = require('util')\nconst zlib = require('zlib')\n\n/**\n * @description Create owner custom costructor for inhertitance event emitter data\n */\nfunction DataDriven() {\n\tEventEmitter.call(this)\n}\n\n/**\n * @description Inheritance all event core method to DataDriven Function\n */\nutil.inherits(DataDriven, EventEmitter)\n\nDataDriven.prototype.pub = function (eventName, data) {\n\tconst compress = zlib.brotliCompressSync(JSON.stringify({ data }), {\n\t\tchunkSize: 999999999,\n\t\tmaxOutputLength: 999999999\n\t})\n\n\tconst decompress = zlib.brotliDecompressSync(compress, {\n\t\tchunkSize: 999999999,\n\t\tmaxOutputLength: 999999999\n\t})\n\n\tthis.emit(eventName, decompress.toString('utf-8'))\n}\n\nDataDriven.prototype.sub = function (eventName, callback) {\n\tthis.on(eventName, function (data) {\n\t\tcallback(JSON.parse(data).data)\n\t})\n}\n\nconst dataDriven = new DataDriven()\n\nexports.event = {\n\tpub(eventName, data) {\n\t\tdataDriven.pub(eventName, data)\n\t},\n\tsub(eventName) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tdataDriven.sub(eventName, (res) => resolve(res))\n\t\t})\n\t}\n}myEmitter.on('status', (code, msg)=> console.log(`Got ${code} and ${msg}`));",
    "reg_date": "2021-10-14T19:40:06.000Z"
  },
  {
    "id": 171,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  execute terminal command nodejs",
    "description": "// You can use 'exec' this way\n\nconst { exec } = require(\"child_process\");\n\nexec(\"ls -la\", (error, stdout, stderr) => {\n    if (error) {\n        console.log(`error: ${error.message}`);\n        return;\n    }\n    if (stderr) {\n        console.log(`stderr: ${stderr}`);\n        return;\n    }\n    console.log(`stdout: ${stdout}`);\n});\nconst { exec } = require(\"child_process\");\nexec(\"cat index.js\", (error, data, getter) => {\n\tif(error){\n\t\tconsole.log(\"error\",error.message);\n\t\treturn;\n\t}\n\tif(getter){\n\t\tconsole.log(\"data\",data);\n\t\treturn;\n\t}\n\tconsole.log(\"data\",data);\n\n});\n// You can use 'exec' this way\n// LINUX EXAMPLE\n\nconst { exec } = require(\"child_process\");\n\nexec(\"ls -la\", (error, stdout, stderr) => {\n    if (error) {\n        console.log(`error: ${error.message}`);\n        return;\n    }\n    if (stderr) {\n        console.log(`stderr: ${stderr}`);\n        return;\n    }\n    console.log(`stdout: ${stdout}`);\n});// Run a command asynchronously\nconst { spawn } = require('child_process');\nconst dir = spawn('cmd', ['/c', 'dir']);\n\ndir.stdout.on('data', data => console.log(`Stdout: ${data}`));\ndir.stderr.on('data', data => console.log(`Stderr: ${data}`));\ndir.on('close', code => console.log(`Exit code: ${code}`));\n\n// Run a command synchronously\nconst { spawnSync } = require( 'child_process' );\nconst dir = spawnSync('cmd', ['/c', 'dir']);\n\nconsole.log(`Stdout: ${dir.stdout.toString()}`);\nconsole.log(`Stderr: ${dir.stderr.toString()}`);",
    "reg_date": "2021-10-14T19:40:07.000Z"
  },
  {
    "id": 172,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  exit application node js",
    "description": "process.exit(this);",
    "reg_date": "2021-10-14T19:40:07.000Z"
  },
  {
    "id": 173,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  express in node js",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install expressconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n$ npm install express --no-save\nbasic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           $ npm init --y //add the package.json file\n\n$ npm install express --no-save\n\nconst express = require('express')\nconst app = express()\n\n//cors to fix cors origin, body-parser to fix the post value on the server\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\napp.use(cors());\napp.use(bodyParser.json());\n\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\nrouter.get('/admin/:id?', (req, res) => {\n  let id = req.params.id;\n}\n\napp.post('/admin', (req, res) => {\n  const user = req.body.user;\n  res.send('Hello World!', user)\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})",
    "reg_date": "2021-10-14T19:40:07.000Z"
  },
  {
    "id": 174,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  express nodejs",
    "description": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express$ npm install expressconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\nFast, unopinionated, minimalist web framework for Node.js",
    "reg_date": "2021-10-14T19:40:07.000Z"
  },
  {
    "id": 175,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  extract data from pdf nodejs",
    "description": "// Installation\n// npm install pdf-parse\n\n// Basic Usage\nconst fs = require('fs');\nconst pdf = require('pdf-parse'); \nlet dataBuffer = fs.readFileSync('path to PDF file...'); \npdf(dataBuffer).then(function(data) {\n     /*  number of pages    \n\tconsole.log(data.numpages);     \n\tnumber of rendered pages    \n\tconsole.log(data.numrender);     \n\tPDF info    \n\tconsole.log(data.info);     \n\tPDF metadata    \n\tconsole.log(data.metadata);      \n\tPDF.js version     \n\tcheck https://mozilla.github.io/pdf.js/getting_started/    \n\tconsole.log(data.version);     PDF text    console.log(data.text);  */ \n});",
    "reg_date": "2021-10-14T19:40:08.000Z"
  },
  {
    "id": 176,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  extract uppercase words nodejs",
    "description": "const str = \"HERE'S AN UPPERCASE PART of the string\";\nconst upperCaseWords = str.match(/(\\b[A-Z][A-Z]+|\\b[A-Z]\\b)/g);\n\nconsole.log(upperCaseWords);",
    "reg_date": "2021-10-14T19:40:08.000Z"
  },
  {
    "id": 177,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  fetch data from external url nodejs",
    "description": "const fetch   = require('node-fetch');\n \napp.get('/', function (req, res) {\n    var url = 'https://api.darksky.net/forecast/<API KEY>/37.8267,-122.4233';\n     \n    fetch(url)\n    .then(res => res.json())\n    .then(data => {\n        res.send({ data });\n    })\n    .catch(err => {\n        res.send(err);\n    });\n});",
    "reg_date": "2021-10-14T19:40:08.000Z"
  },
  {
    "id": 178,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  find date range btween start date to end date in node js",
    "description": "var daylist = getDaysArray(new Date(\"2018-05-01\"),new Date(\"2018-07-01\"));\ndaylist.map((v)=>v.toISOString().slice(0,10)).join(\"\")\n/*\nOutput: \n    \"2018-05-01\n    2018-05-02\n    2018-05-03\n    ...\n    2018-06-30\n    2018-07-01\"\n*/\n",
    "reg_date": "2021-10-14T19:40:08.000Z"
  },
  {
    "id": 179,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  find last element in array nodejs",
    "description": "var foods = [\"kiwi\",\"apple\",\"banana\"];\nvar banana = foods[foods.length - 1]; // Getting last elementvar a = loc_array.slice(-1)[0]//why was this a ad",
    "reg_date": "2021-10-14T19:40:09.000Z"
  },
  {
    "id": 180,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  firebase admin node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:09.000Z"
  },
  {
    "id": 181,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  firestore return the content of an aarray Nodejs",
    "description": "admin.firestore().collection(\"User\").doc(uid_player_1).collection(\"User Info\").doc(\"UsernameToken\").get().then(queryResult =>{\n\n console.log(queryResult.data());\n\n});\n",
    "reg_date": "2021-10-14T19:40:09.000Z"
  },
  {
    "id": 182,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  follow and unfollow node js button",
    "description": "<% if(isLoggedIn) { %>\n                       <% if(user && user._id != currentUser._id) { %>\n                       <% const following = user.following;\n                          const action = following.includes(currentUser._id) ? 'unfollow' : 'follow';\n                       %>\n                        <button class=\"btn btn-primary ml-4\" data-action=\"<%= action %>\" data-follower=\"<%= user._id %>\" data-following=\"<%= currentUser._id %>\" id=\"follow-btn\">Follow</button>\n                       <% } %>  \n                    <% } %> \n",
    "reg_date": "2021-10-14T19:40:09.000Z"
  },
  {
    "id": 183,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  forget mot de passe api nodejs mongodb example",
    "description": "const mongoose = require('mongoose');\n\n\nconst resettokenSchema = new mongoose.Schema({\n_userId: { type: mongoose.Schema.Types.ObjectId, required: true, ref: 'User' },\nresettoken: { type: String, required: true },\ncreatedAt: { type: Date, required: true, default: Date.now, expires: 43200 },\n});\n\n\nmodule.exports = mongoose.model('passwordResetToken', resettokenSchema);",
    "reg_date": "2021-10-14T19:40:10.000Z"
  },
  {
    "id": 184,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  formidable form node js",
    "description": "// make this a middleware function, \n// then put it on the route like you used jwt,\n// then get the value with req.users.\n\nconst { IncomingForm } = require('formidable')\nconst { resolve } = require('path')\nconst { existsSync, writeFileSync } = require('fs')\n\nmodule.exports = (req, res, next) => {\n  const form = new IncomingForm({\n    maxFileSize: 1 * 1024 * 1024,\n    keepExtensions: true\n  })\n\n  form.parse(req, (error, fields, file) => {\n    if (error) return next(error)\n    const patternFile = /\\.(jpg|jpeg|png|svg|gif|raw|webp)$/gi.test(file.productImage.name)\n\n    if (patternFile) {\n      const pathFile = resolve(process.cwd(), 'servers/uploads/', file.productImage.name)\n      const fileExits = existsSync(pathFile)\n      if (!fileExits) {\n        writeFileSync(pathFile)\n        req.users = JSON.parse(JSON.stringify({ fields, file }))\n        return next()\n      }\n      req.users = JSON.parse(JSON.stringify({ fields, file }))\n      return next()\n    }\n  })\n}\nconst http = require('http');const formidable = require('formidable'); const server = http.createServer((req, res) => {  if (req.url === '/api/upload' && req.method.toLowerCase() === 'post') {    // parse a file upload    const form = formidable({ multiples: true });     form.parse(req, (err, fields, files) => {      res.writeHead(200, { 'content-type': 'application/json' });      res.end(JSON.stringify({ fields, files }, null, 2));    });     return;  }   // show a file upload form  res.writeHead(200, { 'content-type': 'text/html' });  res.end(`    <h2>With Node.js <code>\"http\"</code> module</h2>    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">      <div>Text field title: <input type=\"text\" name=\"title\" /></div>      <div>File: <input type=\"file\" name=\"multipleFiles\" multiple=\"multiple\" /></div>      <input type=\"submit\" value=\"Upload\" />    </form>  `);}); server.listen(8080, () => {  console.log('Server listening on http://localhost:8080/ ...');});",
    "reg_date": "2021-10-14T19:40:10.000Z"
  },
  {
    "id": 185,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  formidable nodejs example",
    "description": "// make this a middleware function, \n// then put it on the route like you used jwt,\n// then get the value with req.users.\n\nconst { IncomingForm } = require('formidable')\nconst { resolve } = require('path')\nconst { existsSync, writeFileSync } = require('fs')\n\nmodule.exports = (req, res, next) => {\n  const form = new IncomingForm({\n    maxFileSize: 1 * 1024 * 1024,\n    keepExtensions: true\n  })\n\n  form.parse(req, (error, fields, file) => {\n    if (error) return next(error)\n    const patternFile = /\\.(jpg|jpeg|png|svg|gif|raw|webp)$/gi.test(file.productImage.name)\n\n    if (patternFile) {\n      const pathFile = resolve(process.cwd(), 'servers/uploads/', file.productImage.name)\n      const fileExits = existsSync(pathFile)\n      if (!fileExits) {\n        writeFileSync(pathFile)\n        req.users = JSON.parse(JSON.stringify({ fields, file }))\n        return next()\n      }\n      req.users = JSON.parse(JSON.stringify({ fields, file }))\n      return next()\n    }\n  })\n}\nconst http = require('http');const formidable = require('formidable'); const server = http.createServer((req, res) => {  if (req.url === '/api/upload' && req.method.toLowerCase() === 'post') {    // parse a file upload    const form = formidable({ multiples: true });     form.parse(req, (err, fields, files) => {      res.writeHead(200, { 'content-type': 'application/json' });      res.end(JSON.stringify({ fields, files }, null, 2));    });     return;  }   // show a file upload form  res.writeHead(200, { 'content-type': 'text/html' });  res.end(`    <h2>With Node.js <code>\"http\"</code> module</h2>    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">      <div>Text field title: <input type=\"text\" name=\"title\" /></div>      <div>File: <input type=\"file\" name=\"multipleFiles\" multiple=\"multiple\" /></div>      <input type=\"submit\" value=\"Upload\" />    </form>  `);}); server.listen(8080, () => {  console.log('Server listening on http://localhost:8080/ ...');});",
    "reg_date": "2021-10-14T19:40:10.000Z"
  },
  {
    "id": 186,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  framework7 node js",
    "description": "    var express = require('express');// express.js \n    var app = express();\n    var path = require('path');\n\n\n   app.use('/app', express.static(__dirname + '/app')); //Run Framework7 app\n   app.get('/', function (req, res) {\n\n        res.sendFile(path.join(__dirname + '/app/index.html')); \n  \n    });\n\n    var routes = require('./scripts/routes');  //RESTful APIs\n    routes(app); \n\n    app.listen(8080);\n\n    console.log('-> Port : 8080');",
    "reg_date": "2021-10-14T19:40:10.000Z"
  },
  {
    "id": 187,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  front end display data frmo database nodejs html",
    "description": "<!doctype html>\n<html ng-app>\n  <head>\n    <title>My AngularJS App</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js\"></script>\n  </head>\n  <body>\n  <div ng-controller=\"MyCtrl\">\n    <table>\n      <thead>\n        <tr>\n          <th>\n            <p>Name</p>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr ng-repeat=\"user in users\">\n          <td> \n            <p>{{user}}</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n   </div>\n    <script>\n     var myApp = angular.module('myApp',[]);\n     function MyCtrl($scope, $http) {\n     //This method will call your server, with the GET method and the url /show\n     $http.get(\"http://localhost:3000/show\").then(function(success){\n      if(success.data.length>0)\n      {\n         $scope.users=success.data;\n      }\n     });\n     }\n   </script>\n  </body>\n </html>\n",
    "reg_date": "2021-10-14T19:40:11.000Z"
  },
  {
    "id": 188,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  fs.readdirSync nodejs",
    "description": "The fs.readdirSync() method is used to synchronously read the contents\nof a given directory.\nThe method returns an array with all the file names \nor objects in the directory. The options argument can be used to change the\nformat in which the files are returned from the method.\n\nfs.readdirSync( path, options )fs.readFile('/etc/passwd', 'utf8', callback);\n",
    "reg_date": "2021-10-14T19:40:11.000Z"
  },
  {
    "id": 189,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  function and returns node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:11.000Z"
  },
  {
    "id": 190,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  generate a jwt token secret in node js",
    "description": "const jwt = require('jsonwebtoken');\n\nconst jwt_secret = require('crypto').randomBytes(64).toString('hex');\n\n// preferably store and use jwt_secret as an environment variable rather than generating it at runtime\njwt.sign({ _id: emailExist._id }, jwt_secret);",
    "reg_date": "2021-10-14T19:40:12.000Z"
  },
  {
    "id": 191,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  generate random number nodejs",
    "description": "function getRandomNumberBetween(min,max){\n    return Math.floor(Math.random()*(max-min+1)+min);\n}/**\n* Gets random int\n* @param min \n* @param max \n* @returns random int - min & max inclusive\n*/\ngetRandomInt(min, max) : number{\n\tmin = Math.ceil(min);\n\tmax = Math.floor(max);\n\treturn Math.floor(Math.random() * (max - min + 1)) + min; \n}",
    "reg_date": "2021-10-14T19:40:12.000Z"
  },
  {
    "id": 192,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  geolib nodejs",
    "description": "getDistance(    { latitude: 51.5103, longitude: 7.49347 },    { latitude: \"51° 31' N\", longitude: \"7° 28' E\" });",
    "reg_date": "2021-10-14T19:40:12.000Z"
  },
  {
    "id": 193,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get api json example nodejs",
    "description": "router.get('/students',function(req,res,next){    Student.find({}).then(function(students){        res.send(students);    }).catch(next);});",
    "reg_date": "2021-10-14T19:40:12.000Z"
  },
  {
    "id": 194,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get data from mongodb node js using mongoose",
    "description": "// find all athletes that play tennis\nvar query = Athlete.find({ 'sport': 'Tennis' });\n\n// selecting the 'name' and 'age' fields\nquery.select('name age');\n\n// limit our results to 5 items\nquery.limit(5);\n\n// sort by age\nquery.sort({ age: -1 });\n\n// execute the query at a later time\nquery.exec(function (err, athletes) {\n  if (err) return handleError(err);\n  // athletes contains an ordered list of 5 athletes who play Tennis\n})//Require Mongoose\nvar mongoose = require('mongoose');\n\n//Define a schema\nvar Schema = mongoose.Schema;\n\nvar SomeModelSchema = new Schema({\n  a_string: String,\n  a_date: Date\n});\nAthlete.\n  find().\n  where('sport').equals('Tennis').\n  where('age').gt(17).lt(50).  //Additional where query\n  limit(5).\n  sort({ age: -1 }).\n  select('name age').\n  exec(callback); // where callback is the name of our callback function.// Define schema\nvar Schema = mongoose.Schema;\n\nvar SomeModelSchema = new Schema({\n  a_string: String,\n  a_date: Date\n});\n\n// Compile model from schema\nvar SomeModel = mongoose.model('SomeModel', SomeModelSchema );var schema = new Schema(\n{\n  name: String,\n  binary: Buffer,\n  living: Boolean,\n  updated: { type: Date, default: Date.now() },\n  age: { type: Number, min: 18, max: 65, required: true },\n  mixed: Schema.Types.Mixed,\n  _someId: Schema.Types.ObjectId,\n  array: [],\n  ofString: [String], // You can also have an array of each of the other types too.\n  nested: { stuff: { type: String, lowercase: true, trim: true } }\n})",
    "reg_date": "2021-10-14T19:40:15.000Z"
  },
  {
    "id": 195,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get file name nodejs",
    "description": "const fs = require('fs')\n\nconst dir = '/Users/flavio/folder'\nconst files = fs.readdirSync(dir)\n\nfor (const file of files) {\n  console.log(file)\n}\nvar path = require('path');\nvar scriptName = path.basename(__filename);\nconst path = require('path')\n\n//...\n\n//inside the `for` loop\nconst stat = fs.lstatSync(path.join(dir, file))\n",
    "reg_date": "2021-10-14T19:40:15.000Z"
  },
  {
    "id": 196,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get full url nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:16.000Z"
  },
  {
    "id": 197,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get if there is a value in an array node js",
    "description": "myArray = Array(/*element1, element2, etc...*/);\n\n// If the array 'myArray' contains the element 'valueWeSearch'\nif(myArray.includes(valueWeSearch))\n{\n \t// Do something\n}",
    "reg_date": "2021-10-14T19:40:19.000Z"
  },
  {
    "id": 198,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get image center pixels nodejs",
    "description": "mdasdfsfsfasdfasdfaf",
    "reg_date": "2021-10-14T19:40:19.000Z"
  },
  {
    "id": 199,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get ini file with node js",
    "description": "var fs = require('fs')\n  , ini = require('ini')\n\nvar config = ini.parse(fs.readFileSync('./config.ini', 'utf-8'))\n\nconfig.scope = 'local'\nconfig.database.database = 'use_another_database'\nconfig.paths.default.tmpdir = '/tmp'\ndelete config.paths.default.datadir\nconfig.paths.default.array.push('fourth value')\n\nfs.writeFileSync('./config_modified.ini', ini.stringify(config, { section: 'section' }))\n",
    "reg_date": "2021-10-14T19:40:19.000Z"
  },
  {
    "id": 200,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get input in terminal nodejs",
    "description": "const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreadline.question('Who are you?', name => {\n  console.log(`Hey there ${name}!`);\n  readline.close();\n});",
    "reg_date": "2021-10-14T19:40:20.000Z"
  },
  {
    "id": 201,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get ip of user in node js",
    "description": "//In your request object there is a property called connection, \n//which is a net.Socket object. The net.Socket object has a property \n//remoteAddress, therefore you should be able to get the IP with this call:\n\nrequest.connection.remoteAddress",
    "reg_date": "2021-10-14T19:40:20.000Z"
  },
  {
    "id": 202,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get lines as list from file node js",
    "description": "const fs = require('fs');\n\nfs.readFile('file.txt', function(err, data) {\n    if(err) throw err;\n\n    const arr = data.toString().replace(/\\r\\n/g,'\\n').split('\\n');\n\n    for(let i of arr) {\n        console.log(i);\n    }\n});\n",
    "reg_date": "2021-10-14T19:40:20.000Z"
  },
  {
    "id": 203,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get parameter from url server side node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:20.000Z"
  },
  {
    "id": 204,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get query string javascript nodejs",
    "description": "const querystring = require('querystring');\nconst url = \"http://example.com/index.html?code=string&key=12&id=false\";\nconst qs = \"code=string&key=12&id=false\";\n\nconsole.log(querystring.parse(qs));\n// > { code: 'string', key: '12', id: 'false' }\n\nconsole.log(querystring.parse(url));",
    "reg_date": "2021-10-14T19:40:20.000Z"
  },
  {
    "id": 205,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get string before specific character nodejs",
    "description": "var streetaddress = addy.split(',')[0];\n",
    "reg_date": "2021-10-14T19:40:20.000Z"
  },
  {
    "id": 206,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  get value from path variable node js",
    "description": "exports.doIt = function(req, res, next) {\n    var group = new Group(req.body);\n\n    console.log(req.params);\n\n    group.userId = req.params.userId;\n\n    group.save(new dataCallbacks(req, res, next, \"Group\").insert());\n});",
    "reg_date": "2021-10-14T19:40:21.000Z"
  },
  {
    "id": 207,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  go over each line in text nodejs",
    "description": "require('fs'). readFileSync('file.txt', 'utf-8'). split(/\\r?\\n/). forEach(function(line){\n  console. log(line);\n})\n",
    "reg_date": "2021-10-14T19:40:21.000Z"
  },
  {
    "id": 208,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  google-api-nodejs-client",
    "description": "const {google} = require('googleapis');\n\n// Each API may support multiple version. With this sample, we're getting\n// v3 of the blogger API, and using an API key to authenticate.\nconst blogger = google.blogger({\n  version: 'v3',\n  auth: 'YOUR API KEY'\n});\n\nconst params = {\n  blogId: '3213900'\n};\n\n// get the blog details\nblogger.blogs.get(params, (err, res) => {\n  if (err) {\n    console.error(err);\n    throw err;\n  }\n  console.log(`The blog url is ${res.data.url}`);\n});",
    "reg_date": "2021-10-14T19:40:21.000Z"
  },
  {
    "id": 209,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  gps nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:21.000Z"
  },
  {
    "id": 210,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  has property node js",
    "description": "const object1 = {};\nobject1.property1 = 42;\n\nconsole.log(object1.hasOwnProperty('property1'));\n// expected output: true\n\nconsole.log(object1.hasOwnProperty('toString'));\n// expected output: false\n\nconsole.log(object1.hasOwnProperty('hasOwnProperty'));\n// expected output: false\n",
    "reg_date": "2021-10-14T19:40:22.000Z"
  },
  {
    "id": 211,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  hashing in node js",
    "description": "const crypto = require('crypto');\n\nconst secret = 'abcdefg';\nconst hash = crypto.createHmac('sha256', secret)\n                   .update('I love cupcakes')\n                   .digest('hex');\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\nrequire(\"crypto\")\n  .createHash(\"sha256\")\n  .update(\"Man oh man do I love node!\")\n  .digest(\"hex\");\nfunction HashTable(obj)\n{\n    this.length = 0;\n    this.items = {};\n    for (var p in obj) {\n        if (obj.hasOwnProperty(p)) {\n            this.items[p] = obj[p];\n            this.length++;\n        }\n    }\n\n    this.setItem = function(key, value)\n    {\n        var previous = undefined;\n        if (this.hasItem(key)) {\n            previous = this.items[key];\n          \treturn previous;\n        }\n        else {\n            this.length++;\n        }\n        this.items[key] = value;\n        return previous;\n    }\n\n    this.getItem = function(key) {\n        return this.hasItem(key) ? this.items[key] : undefined;\n    }\n\n    this.hasItem = function(key)\n    {\n        return this.items.hasOwnProperty(key);\n    }\n   \n    this.removeItem = function(key)\n    {\n        if (this.hasItem(key)) {\n            previous = this.items[key];\n            this.length--;\n            delete this.items[key];\n            return previous;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    this.keys = function()\n    {\n        var keys = [];\n        for (var k in this.items) {\n            if (this.hasItem(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    }\n\n    this.values = function()\n    {\n        var values = [];\n        for (var k in this.items) {\n            if (this.hasItem(k)) {\n                values.push(this.items[k]);\n            }\n        }\n        return values;\n    }\n\n    this.each = function(fn) {\n        for (var k in this.items) {\n            if (this.hasItem(k)) {\n                fn(k, this.items[k]);\n            }\n        }\n    }\n\n    this.clear = function()\n    {\n        this.items = {}\n        this.length = 0;\n    }\n}\n        ",
    "reg_date": "2021-10-14T19:40:22.000Z"
  },
  {
    "id": 212,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  heroku failed to run files from static folder in node",
    "description": "{\n    \"name\": \"bla\",\n    \"version\": \"0.0.1\",\n    \"dependencies\": {\n        \"express\": \"3.2.6\"\n    },\n    \"engines\": {\n        \"node\": \"0.10.11\",\n        \"npm\": \"1.2.25\"\n    } \n}",
    "reg_date": "2021-10-14T19:40:22.000Z"
  },
  {
    "id": 213,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  heroku node js h21 backend connection refused",
    "description": "2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H21 desc=\"Backend connection refused\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=1ms service= status=503 bytes=\n",
    "reg_date": "2021-10-14T19:40:22.000Z"
  },
  {
    "id": 214,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  hex string to buffer nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:22.000Z"
  },
  {
    "id": 215,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  hh:mm:ss AM to 24 hour time convert in node js",
    "description": "function tConvert (time) {\n  // Check correct time format and split into components\n  time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n  if (time.length > 1) { // If time format correct\n    time = time.slice (1);  // Remove full string match value\n    time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n    time[0] = +time[0] % 12 || 12; // Adjust hours\n  }\n  return time.join (''); // return adjusted time or original string\n}\n\ntConvert ('18:00:00');var suffix = hour >= 12 ? \"PM\":\"AM\";\nvar hours = ((hour + 11) % 12 + 1) + suffix18:43:25",
    "reg_date": "2021-10-14T19:40:22.000Z"
  },
  {
    "id": 216,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  hot to set file views in nodejs",
    "description": "app.set('views', path.join(__dirname, '/yourViewDirectory'));\n",
    "reg_date": "2021-10-14T19:40:23.000Z"
  },
  {
    "id": 217,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how can node js file be serve",
    "description": "var fs = require('fs'),\n    http = require('http');\n\nhttp.createServer(function (req, res) {\n  fs.readFile(__dirname + req.url, function (err,data) {\n    if (err) {\n      res.writeHead(404);\n      res.end(JSON.stringify(err));\n      return;\n    }\n    res.writeHead(200);\n    res.end(data);\n  });\n}).listen(8080);",
    "reg_date": "2021-10-14T19:40:23.000Z"
  },
  {
    "id": 218,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how create array with names of files in folder nodejs",
    "description": "var fs = require('fs');   \nvar fileNames = fs.readdirSync(dirPath);\n//Do something with fileNames here\n",
    "reg_date": "2021-10-14T19:40:23.000Z"
  },
  {
    "id": 219,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how many threads does node js use",
    "description": "Node.js runs JavaScript code in the Event Loop (initialization and callbacks), and offers a Worker Pool to handle expensive tasks like file I/O. Node.js scales well, sometimes better than more heavyweight approaches like Apache. The secret to the scalability of Node.js is that it uses a small number of threads to handle many clients. If Node.js can make do with fewer threads, then it can spend more of your system's time and memory working on clients rather than on paying space and time overheads for threads (memory, context-switching). But because Node.js has only a few threads, you must structure your application to use them wisely.\n\nHere's a good rule of thumb for keeping your Node.js server speedy: Node.js is fast when the work associated with each client at any given time is \"small\".\n\nThis applies to callbacks on the Event Loop and tasks on the Worker Pool.Example 2: Partitioned average, each of the n asynchronous steps costs O(1).\n\nfunction asyncAvg(n, avgCB) {\n  // Save ongoing sum in JS closure.\n  var sum = 0;\n  function help(i, cb) {\n    sum += i;\n    if (i == n) {\n      cb(sum);\n      return;\n    }\n\n    // \"Asynchronous recursion\".\n    // Schedule next operation asynchronously.\n    setImmediate(help.bind(null, i+1, cb));\n  }\n\n  // Start the helper, with CB to call avgCB.\n  help(1, function(sum){\n      var avg = sum/n;\n      avgCB(avg);\n  });\n}\n\nasyncAvg(n, function(avg){\n  console.log('avg of 1-n: ' + avg);\n});\nYou can apply this principle to array iterations and so forth.",
    "reg_date": "2021-10-14T19:40:23.000Z"
  },
  {
    "id": 220,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how ot send user agent in nodejs https header",
    "description": "const options = {\n  hostname: 'www.panda.tv',\n  path: 'ajax_chatinfo?roomid=89757',\n  headers: { 'User-Agent': 'Mozilla/5.0' }\n};\n\nhttp.get(options, function(res) {\n  res.on('data', function(chunk) { console.log(chunk) });\n});http.get({ url: 'http://www.panda.tv/ajax_chatinfo?roomid=89757',\n    agent: 'Mozilla/5.0' }, function(res) {\n    res.on('data', function(chunk) {\n        doSomething();\n    });\n});",
    "reg_date": "2021-10-14T19:40:23.000Z"
  },
  {
    "id": 221,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to access css and js with nodejs",
    "description": "app.use(express.static(path.join(__dirname, 'public')));\nvar express = require('express');\nvar path = require('path');\n",
    "reg_date": "2021-10-14T19:40:24.000Z"
  },
  {
    "id": 222,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to access node js server from another computer",
    "description": "/* \nChange the host so you're not listening on localhost(127.0.0.1)\n*/\nconst port = 3000;\nconst host = '0.0.0.0';\n\napp.listen(port, host, () => {\n  console.log('Listening on port ' + port);\n});",
    "reg_date": "2021-10-14T19:40:24.000Z"
  },
  {
    "id": 223,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to add shadow to text in canvas nodejs",
    "description": "const { createCanvas } = require('canvas')\nconst width = 400\nconst height = 400\nconst canvas = createCanvas(width, height);\n\nvar context = canvas.getContext('2d');\n\tcontext.shadowColor = \"black\";\n    context.shadowBlur = 5;\n    context.shadowOffsetX = 3;\n    context.shadowOffsetY = 3;\n    context.font = '20px Arial'\n    context.fillStyle = '#fff'\n    context.fillText('Awesome! I did it.', width / 2 , 100)\n\n",
    "reg_date": "2021-10-14T19:40:24.000Z"
  },
  {
    "id": 224,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to change function name while exporting in node",
    "description": "",
    "reg_date": "2021-10-14T19:40:24.000Z"
  },
  {
    "id": 225,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to check file extension in node js",
    "description": "  var path = require('path');\n\nvar ext = path.extname('/Users/Refsnes/demo_path.js');\n\n  console.log(ext); ",
    "reg_date": "2021-10-14T19:40:24.000Z"
  },
  {
    "id": 226,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to check if a folder exists in node js",
    "description": "const fs = require(\"fs\")\n\nfs.access(\"./directory-name\", function(error) {\n  if (error) {\n    console.log(\"Directory does not exist.\")\n  } else {\n    console.log(\"Directory exists.\")\n  }\n})",
    "reg_date": "2021-10-14T19:40:24.000Z"
  },
  {
    "id": 227,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to check if sqlite table exists in nodejs",
    "description": "const sqlite3 = require( 'sqlite3' );\nconst db = new sqlite3.Database( './db.sqlite' );\n\ndb.get( 'SELECT name FROM sqlite_master WHERE type=table AND name=?', tbl, ( err, row ) => {\n  if ( err ) { console.error( err ); }\n} );const sqlite3 = require( 'sqlite3' );\nconst db = new sqlite3.Database( './db.sqlite' );\n\ndb.get( 'SELECT name FROM sqlite_master WHERE type=table AND name=?', tbl, ( err, row ) => {\n\tif ( err ) { console.error( err ); }\n} );",
    "reg_date": "2021-10-14T19:40:25.000Z"
  },
  {
    "id": 228,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to check platform in nodejs",
    "description": "var isWin = process.platform === \"win32\";\n",
    "reg_date": "2021-10-14T19:40:25.000Z"
  },
  {
    "id": 229,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to check record successfully delete in mongodb node js",
    "description": "Model.remove({ _id: req.body.id }, function(err) {\n    if (!err) {\n            message.type = 'notification!';\n    }\n    else {\n            message.type = 'error';\n    }\n});\n",
    "reg_date": "2021-10-14T19:40:25.000Z"
  },
  {
    "id": 230,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to clear nodejs terminal in vs code",
    "description": "for PC, use ctrl + l",
    "reg_date": "2021-10-14T19:40:25.000Z"
  },
  {
    "id": 231,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to collect multiple fields using busboy nodejs",
    "description": "app.post('/somewhere', (req, res) => {\n\n  let formData = new Map();\n  req.busboy.on('field', function(fieldname, val) {\n    formData.set(fieldname, val);\n  });\n\n  req.busboy.on(\"finish\", function() {\n\n    console.log(formData) // Map { 'name' => 'hi', 'number' => '4' }\n    // here you can do \n    formData.get('name') //  'hi'\n    formData.get('number') //  '4'\n\n    // any other logic with formData here\n\n    res.end()\n  });\n});",
    "reg_date": "2021-10-14T19:40:25.000Z"
  },
  {
    "id": 232,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to connect mongodb and nodejs",
    "description": "//with mongoose \n\nconst mongoose = require('mongoose');\n\nmongoose.connect(\n    mongoURI,\n    {\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n    },\n    (err) => {\n        if (err) console.log(err);\n        app.listen(3000);\n    }\n);\n/********************************************************************/\n// with mongodb lib\nconst mongodb = require('mongodb');\n\nconst MongoClient = mongodb.MongoClient;\n\nlet _db;\n// you can replace test with any database name that you want\nconst mongoConnect = (cb) => {\n  MongoClient.connect('mongodb://127.0.0.1:27017/test')\n    .then((client) => {\n      _db = client.db();\n      cb()\n      console.log('Connected to MongoDb');\n    }).catch((err) => {\n      console.log(err);\n    });\n}\n//after your server started you can use getDb to access mongo Database\nconst getDb = () => {\n  if (_db) return _db;\n  throw 'No database found';\n}\n\nexports.mongoConnect = mongoConnect;\nexports.getDb = getDb;async function main(){\n    /**\n     * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.\n     * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details\n     */\n    const uri = \"mongodb+srv://<username>:<password>@<your-cluster-url>/test?retryWrites=true&w=majority\";\n \n\n    const client = new MongoClient(uri);\n \n    try {\n        // Connect to the MongoDB cluster\n        await client.connect();\n \n        // Make the appropriate DB calls\n        await  listDatabases(client);\n \n    } catch (e) {\n        console.error(e);\n    } finally {\n        await client.close();\n    }\n}\n\nmain().catch(console.error);\nconst {MongoClient} = require('mongodb');\n",
    "reg_date": "2021-10-14T19:40:25.000Z"
  },
  {
    "id": 233,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to connect mongodb with node js",
    "description": "//with mongoose \n\nconst mongoose = require('mongoose');\n\nmongoose.connect(\n    mongoURI,\n    {\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n    },\n    (err) => {\n        if (err) console.log(err);\n        app.listen(3000);\n    }\n);\n/********************************************************************/\n// with mongodb lib\nconst mongodb = require('mongodb');\n\nconst MongoClient = mongodb.MongoClient;\n\nlet _db;\n// you can replace test with any database name that you want\nconst mongoConnect = (cb) => {\n  MongoClient.connect('mongodb://127.0.0.1:27017/test')\n    .then((client) => {\n      _db = client.db();\n      cb()\n      console.log('Connected to MongoDb');\n    }).catch((err) => {\n      console.log(err);\n    });\n}\n//after your server started you can use getDb to access mongo Database\nconst getDb = () => {\n  if (_db) return _db;\n  throw 'No database found';\n}\n\nexports.mongoConnect = mongoConnect;\nexports.getDb = getDb;//connect with mongodb\nmongoose.connect('mongodb://localhost:27017/your_db_name', {useNewUrlParser: true});\n//you can also specify with user and pass\nmongoose.connect('mongodb://username:password@host:port/database?options...', {useNewUrlParser: true});\n//or goto docs https://mongoosejs.com/docs/connections.html// create folder config and create two files below mentioned...\n\n// default.json \n{\n  \"mongoURI\": \"add_your_key =_here\"\n}\n\n/// db.js\nconst mongoose = require(\"mongoose\");\nconst config = require(\"config\");\nconst db = config.get(\"mongoURI\");\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(db, {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n    });\n    console.log(\"MongoDB connected...\");\n  } catch (err) {\n    console.log(err.message);\n    process.exit(1);\n  }\n};\n\n# DONE ✅\n\n// dependencies\n  npm i express bcryptjs jsonwebtoken config express-validator mongoose\n\n// dev-dependencies\n  npm i -D nodemon concurrentlyasync function main(){\n    /**\n     * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.\n     * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details\n     */\n    const uri = \"mongodb+srv://<username>:<password>@<your-cluster-url>/test?retryWrites=true&w=majority\";\n \n\n    const client = new MongoClient(uri);\n \n    try {\n        // Connect to the MongoDB cluster\n        await client.connect();\n \n        // Make the appropriate DB calls\n        await  listDatabases(client);\n \n    } catch (e) {\n        console.error(e);\n    } finally {\n        await client.close();\n    }\n}\n\nmain().catch(console.error);\nconst {MongoClient} = require('mongodb');\n",
    "reg_date": "2021-10-14T19:40:26.000Z"
  },
  {
    "id": 234,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to craete a shopping cart  in node js",
    "description": "// run this as nod.js\nvar http = require('http');\nvar url = require('url');\nvar MongoClient = require('mongodb').MongoClient;\nvar mongourl = \"mongodb://localhost:27017/\";\n\nhttp.createServer(function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n    var urlQuery = url.parse(req.url, true).query;\n    addItem(urlQuery.itemToAdd);\n    removeItem(urlQuery.itemToRemove);\n    res.end();\n}).listen(8080);\n\n\n\nfunction removeItem(remove) {\n    if (remove !== undefined) {\n        MongoClient.connect(mongourl, function (err, db) {\n            if (err) throw err;\n            var dbo = db.db(\"mydb\");\n            var myquery = { itemName: remove };\n            dbo.collection(\"shoppingCart\").deleteOne(myquery, function (err, obj) {\n                if (err) throw err;\n                console.log(\"deleted:\" + myquery);\n                db.close();\n            });\n        });\n    }\n}\n\nfunction addItem(create) {\n    if (create !== undefined) {\n        MongoClient.connect(mongourl, function (err, db) {\n            if (err) throw err;\n            var dbo = db.db(\"mydb\");\n            var myobj = { itemName: create };\n            dbo.collection(\"shoppingCart\").insertOne(myobj, function (err, res) {\n                if (err) throw err;\n                console.log(\"document inserted:\" + myobj);\n                db.close();\n            });\n        });\n    }\n}",
    "reg_date": "2021-10-14T19:40:26.000Z"
  },
  {
    "id": 235,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create a folder in node js",
    "description": "var fs = require('fs');\n\nconst dir = './database/temp';\nif (!fs.existsSync(dir)) {\n\tfs.mkdirSync(dir, {\n\t\trecursive: true\n\t});\n}var fs = require('fs');\nvar dir = './tmp';\nif (!fs.existsSync(dir)){\n    fs.mkdirSync(dir);\n}\n\n// or if complains about existence and nesting doesn't matter:\n\nvar shell = require('shelljs');\nshell.mkdir('-p', 'root/parent/tmp');//Include fs module\nconst fs = require('fs');\n\nconst dir = './dir'\nfs.mkdir(dir);const fs = require(\"fs\");\n\nif (!fs.existsSync(dirName)) fs.mkdirSync(dirName, { recursive: true });\n",
    "reg_date": "2021-10-14T19:40:26.000Z"
  },
  {
    "id": 236,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create a folder using fs in node js",
    "description": "var fs = require('fs');\n\nconst dir = './database/temp';\nif (!fs.existsSync(dir)) {\n\tfs.mkdirSync(dir, {\n\t\trecursive: true\n\t});\n}var fs = require('fs');\nvar dir = './tmp';\nif (!fs.existsSync(dir)){\n    fs.mkdirSync(dir);\n}\n\n// or if complains about existence and nesting doesn't matter:\n\nvar shell = require('shelljs');\nshell.mkdir('-p', 'root/parent/tmp');//Include fs module\nconst fs = require('fs');\n\nconst dir = './dir'\nfs.mkdir(dir);const fs = require(\"fs\");\n\nif (!fs.existsSync(dirName)) fs.mkdirSync(dirName, { recursive: true });\n",
    "reg_date": "2021-10-14T19:40:26.000Z"
  },
  {
    "id": 237,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create a server in node js",
    "description": "/* ====== create node.js server with core 'http' module ====== */\n// dependencies\nconst http = require(\"http\");\n\n// PORT\nconst PORT = 3000;\n\n// server create\nconst server = http.createServer((req, res) => {\n   if (req.url === \"/\") {\n      res.write(\"This is home page.\");\n      res.end();\n   } else if (req.url === \"/about\" && req.method === \"GET\") {\n      res.write(\"This is about page.\");\n      res.end();\n   } else {\n      res.write(\"Not Found!\");\n      res.end();\n   }\n});\n\n// server listen port\nserver.listen(PORT);\n\nconsole.log(`Server is running on PORT: ${PORT}`);\n\n/* ========== *** ========== */\n\n/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000const express = require('express');\nconst server = express();\n\nconst PORT = 3000;\n\n// Homme page\nserver.get('/', (req, res) => {\n  return res.send(\"<h1 style='text-align: center;'>Hello,<br />from the Express.js server!</h1>\");\n})\n\n// About page\nserver.get('/about', (req, res) => {\n  return res.send('<h2 style=\"text-align:center\">About us</h2>');\n})\n\n// 404 page\nserver.use((req, res, next) =>{\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile(__dirname + '/error404.html');\n    return;\n  }\n  // respond with json\n  else if (req.accepts('json')){\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  // respond with text\n  else {\n    res.type('txt').send('Error 404 - Not found');\n  }\n});\n\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n// code by VARSHITH REDDY SATTI\n// to create a server in node.js you should.\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write(\"write html code to display you test\")\n  res.end();\n}).listen(8080);\n// save this as httpServer.js\n// run this by typing node httpServer.js in the command line\n// to acess your server got to http://localhost:8080import express from 'express';\nconst server = express();\n\nconst port = 8080;\n\nserver.get('/', (req, res) => {\n  return res.send('Hello, Express.js!');\n})\n\nserver.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});//HTTP MODULE NODE.JS\nvar http = require('http');\nvar server = http.createServer(function(req, res){\n  //write code here\n});\nserver.listen(5000); const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n",
    "reg_date": "2021-10-14T19:40:26.000Z"
  },
  {
    "id": 238,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create alias in populate moongoose + nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:26.000Z"
  },
  {
    "id": 239,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create an array in node js",
    "description": "// Don't need to provide elements directly, but you can\n\n// FIRST OPTION\nvar myArray = new Array(/*elements1, elements2*/);\n\n// SECOND OPTION\nvar mySecondArray = [/*element1, element2*/];let myVar = [\"1\",\"2\",\"3\"];\n\nvar colors = [ \"red\", \"orange\", \"yellow\", \"green\", \"blue\" ]; //Array\n\nconsole.log(colors); //Should give the whole array\nconsole.log(colors[0]); //should say \"red\"\nconsole.log(colors[1]); //should say \"orange\"\nconsole.log(colors[4]); //should say \"blue\"\n\ncolors[4] = \"dark blue\" //changes \"blue\" value to \"dark blue\"\nconsole.log(colors[4]); //should say \"dark blue\"\n//I hope this helped :)let first = fruits[0]\n// Apple\n\nlet last = fruits[fruits.length - 1]\n// Banana\n",
    "reg_date": "2021-10-14T19:40:26.000Z"
  },
  {
    "id": 240,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create an async function from a string in node js",
    "description": "// Shim for allowing async function creation via new Function\nconst AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\n// Usage\nconst fetchPage = new AsyncFunction(\"url\", \"return await fetch(url);\");\nfetchPage(\"/\").then(response => { ... });",
    "reg_date": "2021-10-14T19:40:26.000Z"
  },
  {
    "id": 241,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create multiple folders at once in node js",
    "description": "'use strict';\n\nconst { mkdir } = require('fs').promises;\n\n(async function main() {\n  try {\n    const parent = '.';\n    const dirnames  = ['pdfs', 'fonts', 'err/or', 'users'];\n\n    await Promise.all(\n      dirnames.map(dirname => mkdir(`${parent}/${dirname}`).catch(console.error))\n    );\n\n    // All dirs are created here or errors reported.\n  } catch (err) {\n    console.error(err);\n  }\n})();",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 242,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create node js server",
    "description": "/* ====== create node.js server with core 'http' module ====== */\n// dependencies\nconst http = require(\"http\");\n\n// PORT\nconst PORT = 3000;\n\n// server create\nconst server = http.createServer((req, res) => {\n   if (req.url === \"/\") {\n      res.write(\"This is home page.\");\n      res.end();\n   } else if (req.url === \"/about\" && req.method === \"GET\") {\n      res.write(\"This is about page.\");\n      res.end();\n   } else {\n      res.write(\"Not Found!\");\n      res.end();\n   }\n});\n\n// server listen port\nserver.listen(PORT);\n\nconsole.log(`Server is running on PORT: ${PORT}`);\n\n/* ========== *** ========== */\n\n/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000var http = require('http'); // Import Node.js core module\n\nvar server = http.createServer(function (req, res) {   //create web server\n    if (req.url == '/') { //check the URL of the current request\n        \n        // set response header\n        res.writeHead(200, { 'Content-Type': 'text/html' }); \n        \n        // set response content    \n        res.write('<html><body><p>This is home Page.</p></body></html>');\n        res.end();\n    \n    }\n    else if (req.url == \"/student\") {\n        \n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write('<html><body><p>This is student Page.</p></body></html>');\n        res.end();\n    \n    }\n    else if (req.url == \"/admin\") {\n        \n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write('<html><body><p>This is admin Page.</p></body></html>');\n        res.end();\n    \n    }\n    else\n        res.end('Invalid Request!');\n\n});\n\nserver.listen(5000); //6 - listen for any incoming requests\n\nconsole.log('Node.js web server at port 5000 is running..')\n// content of index.js\nconst http = require('http')\nconst port = 3000\n\nconst requestHandler = (request, response) => {\n  console.log(request.url)\n  response.end('Hello Node.js Server!')\n}\n\nconst server = http.createServer(requestHandler)\n\nserver.listen(port, (err) => {\n  if (err) {\n    return console.log('something bad happened', err)\n  }\n\n  console.log(`server is listening on ${port}`)\n})\n// code by VARSHITH REDDY SATTI\n// to create a server in node.js you should.\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write(\"write html code to display you test\")\n  res.end();\n}).listen(8080);\n// save this as httpServer.js\n// run this by typing node httpServer.js in the command line\n// to acess your server got to http://localhost:8080const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))//HTTP MODULE NODE.JS\nvar http = require('http');\nvar server = http.createServer(function(req, res){\n  //write code here\n});\nserver.listen(5000); ",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 243,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create response time router node js",
    "description": "module.exports = function responseTime(){\n  return function(req, res, next){\n    var start = new Date;\n\n    if (res._responseTime) return next();\n    res._responseTime = true;\n\n    res.on('header', function(){\n      var duration = new Date - start;\n      res.setHeader('X-Response-Time', duration + 'ms');\n    });\n\n    next();\n  };\n};const app = require('express')();\n const bodyParser = require('body-parser');\n const { EventEmitter } = require('events');\n \n // Aggregate all profiler results into an event emitter to make\n // handling the results generic\n const profiles = new EventEmitter();\n \n profiles.on('middleware', ({ req, name, elapsedMS }) => {\n   console.log(req.method, req.url, ':', name, `${elapsedMS}ms`);\n });\n \n app.use(wrap(function block(req, res, next) {\n   setTimeout(() => next(), 1000);\n }));\n \n app.use(wrap(bodyParser.json()));\n \n app.post('*', function(req, res) {\n   res.send('Hello, world!');\n });\n \n app.listen(3000);\n \n function wrap(fn) {\n   return function(req, res, next) {\n     const start = Date.now();\n     fn(req, res, function() {\n       profiles.emit('middleware', {\n         req,\n         name: fn.name,\n         elapsedMS: Date.now() - start\n       });\n \n       next.apply(this, arguments);\n     });\n   };\n }",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 244,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to create server in node js using express",
    "description": "",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 245,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to debug node js file in webpack",
    "description": "\"debugthis\": \"node --inspect --inspect-brk <name of your file>\"\n\n\n\"\"angle brackets are just for showing name \ndo not  use it in command pallette..\"\"\n  ",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 246,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to delay execution in nodejs",
    "description": "function sayHello() {\n  console.log(\"hello\");\n}\n\n// calls the sayHello function after 1000 milisecends\nsetTimeout(sayHello, 1000);\n\"scripts\": {  \"test:system\": \"npm-run-all build -p -r serve test\",  \"build\": \"webpack\",  \"serve\": \"serve -p 8000\",  \"test\": \"wait-on http://localhost:8001 && npm run test:codecept\",  \"test:codecept\": \"codecept\",}",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 247,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to delete a folder using node js",
    "description": "fs.rmdirSync(dir, { recursive: true });const fs = require('fs');\n\n// directory path\nconst dir = 'temp';\n\n// delete directory recursively\ntry {\n    fs.rmdirSync(dir, { recursive: true });\n\n    console.log(`${dir} is deleted!`);\n} catch (err) {\n    console.error(`Error while deleting ${dir}.`);\n}fs.unlink('./node/myText.txt',function(){\n    fs.rmdir('node');\n});",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 248,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to delete all json files in a directory nodejs",
    "description": "// delete all json files in same directory as nodejs script, or subdirectory.\n\nconst directoryPath = path.join(__dirname, \"sub_directory_if_needed\");\n\nfunction DeleteFiles() {\n    //passsing directoryPath and callback function\n    fs.readdir(directoryPath, function (err, files) {\n        //handling error\n        if (err) {\n            return console.log('Unable to scan directory: ' + err);\n        } \n        //listing all files using forEach\n        files.forEach(function (file) {\n            // Do whatever you want to do with the file\n            if (file !== \"package.json\") { // Making sure not to delete package.json, as it should not be deleted\n                if (file.endsWith(\".json\")) {\n                    fs.unlink(`${directoryPath}/${file}`, function(err) {\n                        if (err) throw err\n                        console.log(file, \"deleted\")\n                    })\n                }\n            }\n        });\n    });\n}\n\nDeleteFiles()",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 249,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to delete cookie node js",
    "description": "function deleteCookie(name) {\n  document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n}cookies.set('testtoken', {expires: Date.now()});",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 250,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to delete the last part of a string in node js",
    "description": "str = \"hello I'm McDown...\";\nnewStr = str.substring(0, str.length - 3); // Returns \"hello I'm McDown\"",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 251,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to detech ctrl+C exist in nodejs",
    "description": "export const detectKeyboard = () => {\n\tprocess.openStdin().on('keypress', function (_, key) {\n\t\tif (key && key.name === 'c' && key.ctrl) {\n\t\t\tdeleteData()\n\t\t\tprocess.exit()\n\t\t}\n\t})\n}\n",
    "reg_date": "2021-10-14T19:40:27.000Z"
  },
  {
    "id": 252,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to do crud operation in node js",
    "description": "npm install --save express body-parser mongoose// Update a note identified by the noteId in the request\nexports.update = (req, res) => {\n    // Validate Request\n    if(!req.body.content) {\n        return res.status(400).send({\n            message: \"Note content can not be empty\"\n        });\n    }\n\n    // Find note and update it with the request body\n    Note.findByIdAndUpdate(req.params.noteId, {\n        title: req.body.title || \"Untitled Note\",\n        content: req.body.content\n    }, {new: true})\n    .then(note => {\n        if(!note) {\n            return res.status(404).send({\n                message: \"Note not found with id \" + req.params.noteId\n            });\n        }\n        res.send(note);\n    }).catch(err => {\n        if(err.kind === 'ObjectId') {\n            return res.status(404).send({\n                message: \"Note not found with id \" + req.params.noteId\n            });                \n        }\n        return res.status(500).send({\n            message: \"Error updating note with id \" + req.params.noteId\n        });\n    });\n};\n",
    "reg_date": "2021-10-14T19:40:28.000Z"
  },
  {
    "id": 253,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to download array of files from aws s3 using aws sdk in nodejs",
    "description": "const exec = require('child_process').exec;\nexec('aws s3 sync s3://yourbucket .', (err, stdout, stderr) => {});function listFiles(cb) {\n    s3.stuff(params, cb);\n}\nfunction downlaodFile(key, cb) {\n    s3.stuff(key, cb);\n}\nlistFiles(function (err, fileKeys) {\n    if (err) {\n        throw err;//don't really but this is just an example\n    }\n    async.each(fileKeys, downloadFile, function done(err) {\n        if (err) {\n            throw err;\n        }\n    });\n});",
    "reg_date": "2021-10-14T19:40:28.000Z"
  },
  {
    "id": 254,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to export a class in node js",
    "description": "module.exports = class Person {\n\tconstructor(firstName, lastName) {\n\t\tthis.firstName = firstName;\n\t\tthis.lastName = lastName;\n\t}\n\n\tdisplay() {\n\t\tconsole.log(this.firstName + \" \" + this.lastName);\n\t}\n}class TestClass {\n  \n}\n\nmodule.exports.TestClass = TestClass;\nmodule.exports ={\n //functions\n}",
    "reg_date": "2021-10-14T19:40:28.000Z"
  },
  {
    "id": 255,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to export module in node js",
    "description": "function foo() {}\nfunction bar() {}\n\n// To export above functions:\nmodule.exports = foo;\nmodule.exports = bar;\n\n// And in the file you want to use these functions,\n// import them like this:\nconst foo = require('./module/path');\nconst bar = require('./module/path');\n\nmodule.exports ={\n //functions\n}",
    "reg_date": "2021-10-14T19:40:28.000Z"
  },
  {
    "id": 256,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to fetch first 10 characters of a string in node js",
    "description": "var str = '12345678value';\nvar strshortened = str.slice(0,8);",
    "reg_date": "2021-10-14T19:40:28.000Z"
  },
  {
    "id": 257,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to filter array objesct in express node js",
    "description": "var data = [\n  // the array to be filtered\n];\n\nvar filteredArray = data.filter(item => (item.name === req.query.q));\n",
    "reg_date": "2021-10-14T19:40:28.000Z"
  },
  {
    "id": 258,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to generate a random salt in nodejs",
    "description": "var buf = crypto.randomBytes(16);",
    "reg_date": "2021-10-14T19:40:28.000Z"
  },
  {
    "id": 259,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to generate random string in node js",
    "description": "var crypto = require(\"crypto\");\nvar id = crypto.randomBytes(20).toString('hex');\n\n// \"bb5dc8842ca31d4603d6aa11448d1654\"function getRandomString(length) {\n    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var result = '';\n    for ( var i = 0; i < length; i++ ) {\n        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n    }\n    return result;\n}\n\n//usage: getRandomString(20); // pass desired length of random stringconst string_length = 10\n[...Array(string_length)].map(i=>(~~(Math.random()*36)).toString(36)).join('')",
    "reg_date": "2021-10-14T19:40:28.000Z"
  },
  {
    "id": 260,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get a particular line from a file in nodejs",
    "description": "$ npm install --save line-reader\nlineReader.eachLine('path/to/file', function(line) {\n    console.log(line);\n    if (line.includes('STOP') {\n        return false; // stop reading\n    }\n});\nlineReader.open('/path/to/file', function(reader) {\n    if (reader.hasNextLine()) {\n        reader.nextLine(function(line) {\n            console.log(line);\n        });\n    }\n});\n",
    "reg_date": "2021-10-14T19:40:29.000Z"
  },
  {
    "id": 261,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get all the divs in page in node js",
    "description": " // Get the element with id=\"myDIV\" (a div), then get all elements inside div with class=\"example\"\nvar x = document.getElementById(\"myDIV\").querySelectorAll(\".example\");  \n\n\n // Set the background color of the first element with class=\"example\" (index 0) in div\n\n x[0].style.backgroundColor = \"red\";   ",
    "reg_date": "2021-10-14T19:40:29.000Z"
  },
  {
    "id": 262,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get current year in nodejs",
    "description": "var currentYear= new Date().getFullYear(); const todaysDate = new Date()\nconst currentYear = todaysDate.getFullYear()\n// 2020",
    "reg_date": "2021-10-14T19:40:29.000Z"
  },
  {
    "id": 263,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get cwd nodejs",
    "description": "process.cwd()",
    "reg_date": "2021-10-14T19:40:29.000Z"
  },
  {
    "id": 264,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get data from api in node js",
    "description": "const request = require(\"request\");\nconst url = \"<a href=\"https://my-json-server.typicode.com/edurekaDemo/noderequest/db\">https://my-json-server.typicode.com/edurekaDemo/noderequest/db</a>\";\nrequest.get(url, (error, response, body) => {\nlet json = JSON.parse(body);\nconsole.log(body);\n});\nlet request = require('request')\n\nconst formData = {\n  // Pass a simple key-value pair\n  my_field: 'my_value',\n  // Pass data via Buffers\n  my_buffer: Buffer.from([1, 2, 3]),\n  // Pass data via Streams\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n  // Pass multiple values /w an Array\n  attachments: [\n    fs.createReadStream(__dirname + '/attachment1.jpg'),\n    fs.createReadStream(__dirname + '/attachment2.jpg')\n  ],\n  // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}\n  // Use case: for some types of streams, you'll need to provide \"file\"-related information manually.\n  // See the `form-data` README for more information about options: https://github.com/form-data/form-data\n  custom_file: {\n    value:  fs.createReadStream('/dev/urandom'),\n    options: {\n      filename: 'topsecret.jpg',\n      contentType: 'image/jpeg'\n    }\n  }\n};\nrequest.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});const https = require('https');\n\nhttps.get('https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY', (resp) => {\n  let data = '';\n\n  // A chunk of data has been received.\n  resp.on('data', (chunk) => {\n    data += chunk;\n  });\n\n  // The whole response has been received. Print out the result.\n  resp.on('end', () => {\n    console.log(JSON.parse(data).explanation);\n  });\n\n}).on(\"error\", (err) => {\n  console.log(\"Error: \" + err.message);\n});",
    "reg_date": "2021-10-14T19:40:29.000Z"
  },
  {
    "id": 265,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get datetime in nodejs",
    "description": "// new Date object\nlet date_ob = new Date();\n",
    "reg_date": "2021-10-14T19:40:29.000Z"
  },
  {
    "id": 266,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get file name in directory node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:29.000Z"
  },
  {
    "id": 267,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get file size in node js",
    "description": "var fs = require(\"fs\"); //Load the filesystem module\nvar stats = fs.statSync(\"myfile.txt\")\nvar fileSizeInBytes = stats[\"size\"]\n//Convert the file size to megabytes (optional)\nvar fileSizeInMegabytes = fileSizeInBytes / 1000000.0var fs = require(\"fs\"); //Load the filesystem module\nvar stats = fs.statSync(\"myfile.txt\")\nvar fileSizeInBytes = stats.size;\n// Convert the file size to megabytes (optional)\nvar fileSizeInMegabytes = fileSizeInBytes / (1024*1024);\n",
    "reg_date": "2021-10-14T19:40:29.000Z"
  },
  {
    "id": 268,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get file tree of specific folder in node js",
    "description": "$ npm install directory-tree",
    "reg_date": "2021-10-14T19:40:30.000Z"
  },
  {
    "id": 269,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to get input from user in nodejs",
    "description": "const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n \nreadline.question('who are you: ', name => {\n\tconsole.log(`hello, hi there ${name}`);\n\treadline.close();\n})const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreadline.question('Who are you?', name => {\n  console.log(`Hey there ${name}!`);\n  readline.close();\n});const readline = require('readline').createInterface({  input: process.stdin,  output: process.stdout}); readline.question('Who are you?', name => {  console.log(`Hey there ${name}!`);  readline.close();});",
    "reg_date": "2021-10-14T19:40:30.000Z"
  },
  {
    "id": 270,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to hash password in node js",
    "description": "npm i bcrypt\n\nconst bcrypt = require('bcrypt');\nasync function hashIt(password){\n  const salt = await bcrypt.genSalt(6);\n  const hashed = await bcrypt.hash(password, salt);\n}\nhashIt(password);\n// compare the password user entered with hashed pass.\nasync function compareIt(password){\n  const validPassword = await bcrypt.compare(password, hashedPassword);\n}\ncompareIt(password);",
    "reg_date": "2021-10-14T19:40:30.000Z"
  },
  {
    "id": 271,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to host node js application on godaddy",
    "description": "Yes this is possible. Somehow I have never seen anyone actually answer this question correctly. This works with the most basic shared hosting plans. I have successfully been able to set it up a couple different ways. I think the second is probably what you want :\n\n1. cgi-node http://www.cgi-node.org/home\n\nBasically this replaces PHP on the lamp stack. You can run javascript through node like you would run PHP. This has all the same functionality of node js but is only really geared towards template rendering.\n\n    <html>\n    <body>\n     <?\n       var helloWorld = 'Hello World!'; \n       write(helloWorld + '<br/>'); \n     ?>\n     <?= helloWorld ?>\n    <br/>\n    <b>I can count to 10: </b>\n\n    <?\n      for (var index= 0; index <= 10; index++) write(index + ' ');  \n    ?>\n      <br/>\n      <b>Or even this: </b>\n    <?  \n      for (var index= 0; index <= 10; index++) { \n    ?>\n        <?= index ?> \n    <? } ?>\n\n    </body>\n</html>\nOR\n\n2. Standalone Server (this works with NameCheap hosting and GoDaddy shared hosting)\n\nIn your shared hosting account you will need SSH in order to do this. So you may need to upgrade or request SSH access from their customer support. Download the latest NodeJS https://nodejs.org/en/download/. The shared hosting is probably in linux 64 bit. You can check this on linux or unix by running :\n\nuname -a\nDownload the Linux binaries and put the bin/node (and the bin/npm file if you want to use npm on the server) file from the download in /home/username/bin/ (create the bin folder if it doesn't exist) on the server. Put permissions 755 on the node binary. So you should have a new file here :\n\n/home/username/bin/node\n\nOpen up the .htaccess file in /home/username/public_html and add the following lines :\n\nRewriteEngine on\nRewriteRule  (.*)  http://localhost:3000/$1  [P,L] \nCreate a file in /home/username/public_html and just call it app.js. Add the following lines in that file :\n\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('NodeJS server running on Shared Hosting\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\nSSH into the server run these commands :\n\ncd /home/username/public_html\nwhich node # this should return ~/bin/node\nnode app.js & # This will create a background process with the server running\nIf you can get this set up right this will save you a ton of money in the long run as opposed to using something like AWS or Heroku etc.",
    "reg_date": "2021-10-14T19:40:30.000Z"
  },
  {
    "id": 272,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to implement redis pub sub model using nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:30.000Z"
  },
  {
    "id": 273,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to import in node",
    "description": "",
    "reg_date": "2021-10-14T19:40:30.000Z"
  },
  {
    "id": 274,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to include build script in node js",
    "description": "{\n      \"name\": \"to-do-app\",\n      \"version\": \"1.0.0\",\n      \"description\": \"A basic to-do app created using JavaScript.\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"put test command here\",  // example \"test\": \"mocha test.js\"\n         \"build\" : \"put build command here\"\n      },\n      \"author\": \"Sahil Silare\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.19.0\",\n        \"build\": \"^0.1.4\",\n        \"ejs\": \"^2.7.1\",\n        \"express\": \"^4.17.1\",\n        \"npm-build\": \"0.0.1\"\n      },\n      \"devDependencies\": {},\n      \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/sahil9001/to-do-app.git\"\n      },\n      \"keywords\": [\n        \"todo\",\n        \"app\"\n      ],\n      \"bugs\": {\n        \"url\": \"https://github.com/sahil9001/to-do-app/issues\"\n      },\n      \"homepage\": \"https://github.com/sahil9001/to-do-app#readme\"\n    }\n",
    "reg_date": "2021-10-14T19:40:30.000Z"
  },
  {
    "id": 275,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install chalk in node js",
    "description": "npm install chalkconst chalk = require('chalk');const log = console.log; // Combine styled and normal stringslog(chalk.blue('Hello') + ' World' + chalk.red('!')); // Compose multiple styles using the chainable APIlog(chalk.blue.bgRed.bold('Hello world!')); // Pass in multiple argumentslog(chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz')); // Nest styleslog(chalk.red('Hello', chalk.underline.bgBlue('world') + '!')); // Nest styles of the same type even (color, underline, background)log(chalk.green(    'I am a green line ' +    chalk.blue.underline.bold('with a blue substring') +    ' that becomes green again!')); // ES2015 template literallog(`CPU: ${chalk.red('90%')}RAM: ${chalk.green('40%')}DISK: ${chalk.yellow('70%')}`); // ES2015 tagged template literallog(chalk`CPU: {red ${cpu.totalPercent}%}RAM: {green ${ram.used / ram.total * 100}%}DISK: {rgb(255,131,0) ${disk.used / disk.total * 100}%}`); // Use RGB colors in terminal emulators that support it.log(chalk.keyword('orange')('Yay for orange colored text!'));log(chalk.rgb(123, 45, 67).underline('Underlined reddish color'));log(chalk.hex('#DEADED').bold('Bold gray!'));",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 276,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install mongodb in node js",
    "description": "npm install mongodb --savenpm install mongodb --savenpm install -g mongodb\n\nnpm install -g mongoose",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 277,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install node js 14 on ubuntu",
    "description": "sudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n# Check node version\nnode -v \n# v13.9.0\n# Also, check the npm version\nnpm -v \n# 6.13.7sudo apt install curl\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo bash -\nsudo apt install -y nodejscurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install nodejs\nsudo apt install npm\nsudo apt updatesudo apt update && apt install nodejs npm# Using Ubuntu\ncurl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Using Debian, as root\ncurl -fsSL https://deb.nodesource.com/setup_16.x | bash -\napt-get install -y nodejs# See for the latest version https://github.com/nodesource/distributions/blob/master/README.md#debinstall\n# assuming you have curl installed\ncurl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt-get install -y nodejs",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 278,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install node js in plesk",
    "description": "(node:7464) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.\nHRESULT: 0x2\nHTTP status: 500\nHTTP subStatus: 1001\nHTTP reason: Internal Server Error",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 279,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install node js in ubuntu",
    "description": "sudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n# Check node version\nnode -v \n# v13.9.0\n# Also, check the npm version\nnpm -v \n# 6.13.7sudo apt install curl\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo bash -\nsudo apt install -y nodejssudo apt update\nsudo apt install nodejs\nsudo apt install npmcurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install nodejs\nsudo apt install npm\nsudo apt updatesudo apt install nodejs//Author: Mohammad Arman Khan\n//How To Install Node.js on Ubuntu\n1: sudo apt-get update\n2: sudo apt-get install nodejs\n3: sudo apt-get install npm\n4: nodejs -v",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 280,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install nodejs latest version",
    "description": "curl -sL install-node.now.sh/lts | bash# Make a new folder for node\nmkdir node\ncd node\n# Download and unzip node\ncurl -O https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.gz\ntar -xvzf node-v10.15.3-linux-x64.tar.gz --strip-components=1\n# Add node and npm it to PATH (and do so for future sessions too)\nexport PATH=$HOME/node/bin:$PATH\necho 'export PATH=$HOME/node/bin:$PATH' >> ~/.bashrccurl -O https://nodejs.org/dist/v14.16.1/node-v14.16.1-linux-x64.tar.gz\ntar -xvzf node-v14.16.1-linux-x64.tar.gz --strip-components=1\n# Add node and npm it to PATH (and do so for future sessions too)\nexport PATH=$HOME/node/bin:$PATH\necho 'export PATH=$HOME/node/bin:$PATH' >> ~/.bashrc",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 281,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install nodejs on ubuntu 20.04",
    "description": "sudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n# Check node version\nnode -v \n# v13.9.0\n# Also, check the npm version\nnpm -v \n# 6.13.7sudo apt update\nsudo apt install nodejs npmInstall Nodejs using NVM\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nsource ~/.bashrc\nnvm install v14.17.1# install nodejs 10.x version \nsudo apt update\ncd ~\ncurl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh\n# not important, but can be done\nnano nodesource_setup.sh\nsudo bash nodesource_setup.sh\nsudo apt install nodejs\nnode install npm -g\nnode --version\nnpm --version$ sudo apt install nodejs\n//installing node from the terminal\nsudo apt install nodejs\n\n//installing npm\nsudo apt install npm",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 282,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install package.json in node js",
    "description": "  npm init\nnpm install (with no args, in package dir)\nnpm install [<@scope>/]<name>\nnpm install [<@scope>/]<name>@<tag>\nnpm install [<@scope>/]<name>@<version>\nnpm install [<@scope>/]<name>@<version range>\nnpm install <git-host>:<git-user>/<repo-name>\nnpm install <git repo url>\nnpm install <tarball file>\nnpm install <tarball url>\nnpm install <folder>\n\naliases: npm i, npm add\ncommon options: [-P|--save-prod|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [-B|--save-bundle] [--no-save] [--dry-run]\ncd /path/to/package\nnpm init",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 283,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to install request module in node js",
    "description": "npm install requestconst request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  console.error('error:', error); // Print the error if one occurred\n  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n  console.log('body:', body); // Print the HTML for the Google homepage.\n});",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 284,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to integrate vuejs with nodejs and express",
    "description": "const Joi = require('joi');\nconst db = require('./connection');\n \nconst schema = Joi.object().keys({\n    username: Joi.string().alphanum().required(),\n    subject: Joi.string().required(),\n    message: Joi.string().max(500).required(),\n    imageURL: Joi.string().uri({\n        scheme: [\n            /https?/\n        ]\n    })\n});\n \nconst messages = db.get('messages');\n \nfunction getAll() {\n    return messages.find();\n}\n \nfunction create(message) {\n    if (!message.username) message.username = 'Anonymous';\n \n    const result = Joi.validate(message, schema);\n    if (result.error == null) {\n        message.created = new Date();\n        return messages.insert(message);\n    } else {\n        return Promise.reject(result.error);\n    }\n}\n \nmodule.exports = {\n    create,\n    getAll\n};\n",
    "reg_date": "2021-10-14T19:40:31.000Z"
  },
  {
    "id": 285,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to list all collections from a database in mongodb node js",
    "description": "var mongo = require('mongodb').MongoClient;\n\nasync function connect(){\n    /**\n     * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.\n     * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details\n     */\n    const uri = \"yourUri\";\n \n\n    const client = new mongo(uri);\n \n    try {\n        // Connect to the MongoDB cluster\n        await client.connect();\n        \n        // Make the appropriate DB calls\n        const db = client.db(\"testDatabase\");\n       \n        const collections = await db.collections();\n        collections.forEach (c=>console.log(c.collectionName));\n        \n \n       \n       \n \n    } catch (e) {\n        console.error(e);\n    } finally {\n        await client.close();\n    }\n}\n\nconnect().catch(console.error);\n",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 286,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to load and parse the json data in node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 287,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to load image from dir nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 288,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to make an image like canvas in node js",
    "description": "const { createCanvas, loadImage } = require('canvas')\nconst canvas = createCanvas(200, 200)\nconst ctx = canvas.getContext('2d')\n\n// Write \"Awesome!\"\nctx.font = '30px Impact'\nctx.rotate(0.1)\nctx.fillText('Awesome!', 50, 100)\n\n// Draw line under text\nvar text = ctx.measureText('Awesome!')\nctx.strokeStyle = 'rgba(0,0,0,0.5)'\nctx.beginPath()\nctx.lineTo(50, 102)\nctx.lineTo(50 + text.width, 102)\nctx.stroke()\n\n// Draw cat with lime helmet\nloadImage('examples/images/lime-cat.jpg').then((image) => {\n  ctx.drawImage(image, 50, 0, 70, 70)\n\n  console.log('<img src=\"' + canvas.toDataURL() + '\" />')\n})",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 289,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to make pages from list in nodejs",
    "description": "function paginate(array, page_size, page_number) {\n  // human-readable page numbers usually start with 1, so we reduce 1 in the first argument\n  return array.slice((page_number - 1) * page_size, page_number * page_size);\n}\n\nconsole.log(paginate([1, 2, 3, 4, 5, 6], 2, 2));\nconsole.log(paginate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4, 1));",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 290,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to make use of nodejs single thread to read files and attach data",
    "description": "var mailer = require('nodemailer');\nmailer.SMTP = {\n    host: 'host.com', \n    port:587,\n    use_authentication: true, \n    user: 'you@example.com', \n    pass: 'xxxxxx'\n};\n\nThen read a file and send an email :\n\nfs.readFile(\"./attachment.txt\", function (err, data) {\n\n    mailer.send_mail({       \n        sender: 'sender@sender.com',\n        to: 'dest@dest.com',\n        subject: 'Attachment!',\n        body: 'mail content...',\n        attachments: [{'filename': 'attachment.txt', 'content': data}]\n    }), function(err, success) {\n        if (err) {\n            // Handle error\n        }\n\n    }\n});",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 291,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to manage logging using winston for production and development in node js \"github\"",
    "description": "const winston = require('winston');\nconst { createLogger, format, transports } = require('winston');\n\nconst dotenv = require('dotenv');\ndotenv.config();\n\nvar logger = createLogger({\n    level: 'info',\n    format: format.combine(\n        format.timestamp({\n            format: 'YYYY-MM-DD HH:mm:ss',\n        }),\n        format.printf((info) =>\n            JSON.stringify({\n                t: info.timestamp,\n                l: info.level,\n                m: info.message,\n                s: info.splat !== undefined ? `${info.splat}` : '',\n            }) + ','\n        )\n    ),\n});\n\nif (process.env.NODE_ENV !== 'PRODUCTION') {\n    logger.add(new transports.Console({ format: winston.format.cli() }));\n\n    // Turn these on to create logs as if it were production\n    // logger.add(new transports.File({ filename: 'log/output/error.log', level: 'error' }));\n    // logger.add(new transports.File({ filename: 'log/output/warn.log', level: 'warn' }));\n    // logger.add(new transports.File({ filename: 'log/output/info.log', level: 'info' }));\n} else {\n    logger.add(new transports.File({ filename: 'log/output/error.log', level: 'error' }));\n    logger.add(new transports.File({ filename: 'log/output/warn.log', level: 'warn' }));\n    logger.add(new transports.File({ filename: 'log/output/info.log', level: 'info' }));\n}\n\nmodule.exports = {\n    logger,\n};\n",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 292,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to play around with backend node js and frontend react",
    "description": "//add this at the end of your players.js :\nmodule.exports = router\n//To make this url work without problem\nhttp://localhost:3001/players/list http://localhost:3001/players/list/3",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 293,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to prevent xss attacks in node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:32.000Z"
  },
  {
    "id": 294,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to project specific field mongodb nodejs",
    "description": "db.inventory.find( { status: \"A\" }, { item: 1, status: 1 } )db.inventory.find( { status: \"A\" }, { item: 1, status: 1 } )\n//1 to show and 0 to hide\n//_id always included need to be set to 0 if not needed\ndb.inventory.find( { age: \"10\" }, { _id: 0 ,  age: 1, user: { name: 1 } } )",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 295,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to proxy enable in server nodejs",
    "description": "$ npm config set proxy http://localhost:3128\n$ npm config set https-proxy http://localhost:3128\nproxy=http://username:password@host:port\nhttps-proxy=http://username:password@host:port\nhttps_proxy=http://username:password@host:port\nno_proxy=127.0.0.1,localhost.*.mtn.co.za\nvar fs = require('fs');\n\nvar http = require('http'),\n\nvar https = require('https'),\n\nvar httpProxy = require('http-proxy');\n\nisHttps = true;\n\nvar options = {\n\n  ssl: {\n\n    key: fs.readFileSync('valid-key.pem'),\n\n    cert: fs.readFileSync('valid-cert.pem')\n\n  }\n\n};\n\nproxyServer = proxy.createProxyServer({target:'http://127.0.0.1:9000'});\n\nproxyServer.listen(8000);\n\nif (isHttps){\n\n   server = https.createServer(options.ssl, function(req, res) {\n\n     console.log(“https request”);\n\n     proxyServer.web(req, res, { target: req.url });\n\n     proxyServer.on('error', function(e) {\n\n  console.log(\"Error in proxy call\");\n\n     });\n\n     proxyServer.listen(443);\n\n   });\n\n}else{\n\n  server = http.createServer(function (req, res) {\n\n  console.log(req.url);\n\n  proxyServer.web(req, res, { target: req.url });\n\n  proxyServer.on('error', function(e) {\n\n   console.log(\"Error in proxy call\");\n\n  });\n\n    });\n\n }\n\n server.listen(9000);\n",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 296,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to read a csv file in nodejs",
    "description": "const createCsvWriter = require('csv-writer').createObjectCsvWriter;\nconst csvWriter = createCsvWriter({\n  path: 'out.csv',\n  header: [\n    {id: 'name', title: 'Name'},\n    {id: 'surname', title: 'Surname'},\n    {id: 'age', title: 'Age'},\n    {id: 'gender', title: 'Gender'},\n  ]\n});\n\nconst data = [\n  {\n    name: 'John',\n    surname: 'Snow',\n    age: 26,\n    gender: 'M'\n  }, {\n    name: 'Clair',\n    surname: 'White',\n    age: 33,\n    gender: 'F',\n  }, {\n    name: 'Fancy',\n    surname: 'Brown',\n    age: 78,\n    gender: 'F'\n  }\n];\n\ncsvWriter\n  .writeRecords(data)\n  .then(()=> console.log('The CSV file was written successfully'));\nconst csv = require('csv-parser');\nconst fs = require('fs');\n\nfs.createReadStream('data.csv')\n  .pipe(csv())\n  .on('data', (row) => {\n    console.log(row);\n  })\n  .on('end', () => {\n    console.log('CSV file successfully processed');\n  });\nconst fs = require('fs')\nconst csv = require('csv-parser')\nconst randomWords = require('random-words')\nconst users = [];\nfunction generateUsername(firstname, surname) {\n    return `${firstname[0]}-${surname}`.toLowerCase();\n}\nfs.createReadStream('input.csv')\n  .pipe(csv())\n  .on('data', function (row) {\n    const username = generateUsername(row.Firstname, row.Surname);\n    const password = randomWords(3).join(\"-\");\n    \n    const user = {\n        username,\n        firstname: row.Firstname,\n        surname: row.Surname,\n        roles: row.Roles,\n        password\n    }\n    users.push(user)\n  })\n  .on('end', function () {\n      console.table(users)\n      // TODO: SAVE users data to another file\n    })\n$ npm i -s csv-parser\n$ npm i -s csv-parse\n",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 297,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to read all files in a folder in node js",
    "description": "fs.readdir('./', (err, files) => {\n    files.forEach(file => {\n    //   console.log(file);\n})});fs.readdir('./', (err, files) => {\n        files.forEach(file => {\n        //   console.log(file);\n        }});",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 298,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to read environment variable in node js",
    "description": "var myEnvVariable = process.env.ENV_VARIABLE_NAME",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 299,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to read file extension in a folder in node js",
    "description": "fs.readdir('./', (err, files) => {\n        files.forEach(file => {\n        //   console.log(file);\n         // read extension\n          const extension = file.split(\".\").pop();\n          });\n      })",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 300,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to remove only green background from video using ffmeg nodejs",
    "description": "ffmpeg -i bg.jpg -i input.mp4 -filter_complex \"[1:v]chromakey=0x3BBD1E:0.1:0.2[ckout];[0:v][ckout]overlay[o]\" -map [o] -map 1:a output.mp4\n",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 301,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to rename zip file nodejs",
    "description": "var AdmZip = require('adm-zip');\n\n//create a zip object to hold the new zip files\nvar newZip = new AdmZip();\n\n// reading archives\nvar zip = new AdmZip('somePath/download.zip');\nvar zipEntries = zip.getEntries(); // an array of ZipEntry records\n\nzipEntries.forEach(function(zipEntry) {\n    var fileName = zipEntry.entryName;\n    var fileContent = zip.readAsText(fileName)\n    //Here remove the top level directory\n    var newFileName = fileName.substring(fileName.indexOf(\"/\") + 1);\n\n    newZip.addFile(newFileName, fileContent, '', 0644 << 16);        \n});\n\nnewZip.writeZip('somePath/upload.zip');  //write the new zip \n",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 302,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to render a new page in node js through express",
    "description": "app.get('/renderHTML', (req, res) => {\n    res.sendFile('FileName.html', {\n        root: path.join(__dirname, './') // <= you might have to write '/foldername/\n    })\n})",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 303,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to return when child process is complete in node js",
    "description": "var child = require('child_process').exec('python celulas.py')\nchild.stdout.pipe(process.stdout)\nchild.on('exit', function() {\n  process.exit()\n})var execSync = require('exec-sync');\n\nvar user = execSync('python celulas.py');",
    "reg_date": "2021-10-14T19:40:33.000Z"
  },
  {
    "id": 304,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to right plain text format file in node js",
    "description": "var fs = require('fs')\nvar logger = fs.createWriteStream('log.txt', {\n  flags: 'a' // 'a' means appending (old data will be preserved)\n})\n\nlogger.write('some data') // append string to your file\nlogger.write('more data') // again\nlogger.write('and more') // againvar fs = require('fs')\nfs.appendFile('log.txt', 'new data', function (err) {\n  if (err) {\n    // append failed\n  } else {\n    // done\n  }\n})",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 305,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to run a js file in node",
    "description": "Save your .js file in the same folder as node.js,\nFor windows , Usually location is- \"C:\\Program Files\\nodejs\"\nOpen 'Command prompt and locate node.js folder' OR directly open 'Node.js command prompt' and type \n>> node (file_name).js  C:\\Users\\Your Name>node myfirst.js\nconst inNode = new Function('try{return this===global;}catch(err){return false;}')();",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 306,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to run node js on mac",
    "description": "brew install node #Homebrew required// 1. Install Homebrew on a Mac by first installing Xcode \n// 2. Install Xcode at \n\t  https://apps.apple.com/us/app/xcode/id497799835?ls=1&mt=12 \n// 3. Open the Terminal app.\n// 4. Type: \n      ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n// 5. Open the Terminal app and type: \n      brew update\n//    This updates Homebrew with a list of the latest version of Node.\n// 6. Type: \n      brew install node\n// 7. Sit back and wait. Homebrew has to download some files and install them. But that’s it.\n// 8. Test Node. To see if Node is installed, type: \n      node -v \n//  in Terminal. This should print the version number so you’ll see something like this v0.10.31.\n// 9. Test NPM. To see if NPM is installed, type:\n      npm -v \n//    in Terminal. This should print the version number so you’ll see something like this 1.4.27\n// 10. Test node\n       node test-node.jsnode test-node.js",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 307,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to run node js with proxy",
    "description": "$ npm config set proxy http://localhost:3128\n$ npm config set https-proxy http://localhost:3128\n$ npm config delete http-proxy\n$ npm config delete https-proxy\n",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 308,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to sanitize request body in node js",
    "description": "export const registrationSchema = {\n    \"email\": {\n        notEmpty: true,\n        isEmail: {\n            errorMessage: \"Invalid Email\"\n        }\n    },\n    \"password\": {\n        notEmpty: true,\n        isLength: {\n            options: [{min: 12}],\n            errorMessage: \"Must be at least 12 characters\"\n        },\n        matches: {\n            options: [\"(?=.*[a-zA-Z])(?=.*[0-9]+).*\", \"g\"],\n            errorMessage: \"Password must be alphanumeric.\"\n        },\n        errorMessage: \"Invalid password\"\n    },\n    \"firstName\": {\n        notEmpty: false,\n        isLength: {\n            options: [{max: 200}],\n            errorMessage: \"The first name must be under 200 characters\"\n        },\n        matches: {\n            options: [\"^[a-z ,.'-]+$\", \"i\"],\n            errorMessage: \"The first name can only contain letters and the characters (,.'-)\"\n        }\n    },\n    \"lastName\": {\n        notEmpty: false,\n        isLength: {\n            options: [{max: 200}],\n            errorMessage: \"The last name must be under 200 characters\"\n        },\n        matches: {\n            options: [\"^[a-z ,.'-]+$\", \"i\"],\n            errorMessage: \"The last name can only contain letters and the characters (,.'-)\"\n        }\n    }\n};\n",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 309,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to send address of mathods call of solidaty in node",
    "description": "Owner Address: Property ID: Price: District: Latitude: Longitude: For Sale: Verified:",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 310,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to send message to specific client using ws node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 311,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to send sendgrid email with dynamic template nodejs",
    "description": "const sgMail = require('@sendgrid/mail');\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst msg = {\n  to: 'recipient@example.org',\n  from: 'sender@example.org',\n  templateId: 'd-f43daeeaef504760851f727007e0b5d0',\n  dynamic_template_data: {\n    subject: 'Testing Templates',\n    name: 'Some One',\n    city: 'Denver',\n  },\n};\nsgMail.send(msg);sendgrid dynamic template nodejs",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 312,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to set expire time of jwt token in node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 313,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to set time with jwt token in node js",
    "description": "var token = jwt.sign({email_id:'123@gmail.com'}, \"Stack\", {\n\n                        expiresIn: '24h' // expires in 24 hours\n\n                         }); var token = jwt.sign({email_id:'123@gmail.com'}, \"Stack\", {\n        expiresIn: \"10h\" // it will be expired after 10 hours\n        //expiresIn: \"20d\" // it will be expired after 20 days\n       //expiresIn: 120 // it will be expired after 120ms\n });",
    "reg_date": "2021-10-14T19:40:34.000Z"
  },
  {
    "id": 314,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to set up an express api nodejs",
    "description": "const express = require('express')\n\nconst app = express() \n\napp.get('/', (req, res, next) => {\n\tres.json({\n      message: 'This is my JSON api'\n    });\n});\n\napp.listen(your-port-here, () => {\n\tconsole.log(`listening on http://localhost:${the-port-goes-here}`)\n});\n\n/*\nWombleWoo7547 @ https://github.com/WombleWoo7547 https://replit.com/@WombleWoo7547\n*/",
    "reg_date": "2021-10-14T19:40:35.000Z"
  },
  {
    "id": 315,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to split a string into chunks nodejs",
    "description": "function chunkString(str, length) {\n  return str.match(new RegExp('.{1,' + length + '}', 'g'));\n}\n",
    "reg_date": "2021-10-14T19:40:35.000Z"
  },
  {
    "id": 316,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to split index.js to routes nodejs",
    "description": "var express = require('express');\nvar router = express.Router();\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now());\n  next();\n});\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page');\n});\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds');\n});\n\nmodule.exports = router;",
    "reg_date": "2021-10-14T19:40:35.000Z"
  },
  {
    "id": 317,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to store and delete s3 image using node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:35.000Z"
  },
  {
    "id": 318,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to understand if nodejs is out of memory",
    "description": "const used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);",
    "reg_date": "2021-10-14T19:40:35.000Z"
  },
  {
    "id": 319,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to uninstall nodejs web server",
    "description": "sudo rm -rf ~/.npm ~/.nvm ~/node_modules ~/.node-gyp ~/.npmrc ~/.node_repl_history",
    "reg_date": "2021-10-14T19:40:35.000Z"
  },
  {
    "id": 320,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to update node js version",
    "description": "sudo npm install npm@latest -g//First, clear the npm cache:\n\tnpm cache clean -f\n\n//Install n, Node’s version manager:\n\tnpm install -g n\n    \n//With the n module installed, you can use it to:\n\tInstall the latest stable version: n stable\n\tInstall the latest release: n latest//check node version\n>node -v\n// let's install a program called n that will let us easily switch \n//between Node versions.\n>npm install -g n\n//Upgrading to the latest stable version\n>n stable \n//Changing to a specific version\n>n 10.16.0\nIn cmd,\n  \nwhere node\n \n$ cd \"C:\\Program Files\\nodejs\\node_modules\\npm\"\n\n$ npm install -g node-gyp@latestnpm cache clean -f\nnpm install -g n\nn stablenvm install v12.16.2",
    "reg_date": "2021-10-14T19:40:35.000Z"
  },
  {
    "id": 321,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to upload file to s3 nodejs",
    "description": "const fs = require('fs');\nconst AWS = require('aws-sdk');\n\nconst s3 = new AWS.S3({\n    accessKeyId: process.env.AWS_ACCESS_KEY,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n});\n\nconst fileName = 'contacts.csv';\n\nconst uploadFile = () => {\n  fs.readFile(fileName, (err, data) => {\n     if (err) throw err;\n     const params = {\n         Bucket: 'testBucket', // pass your bucket name\n         Key: 'contacts.csv', // file will be saved as testBucket/contacts.csv\n         Body: JSON.stringify(data, null, 2)\n     };\n     s3.upload(params, function(s3Err, data) {\n         if (s3Err) throw s3Err\n         console.log(`File uploaded successfully at ${data.Location}`)\n     });\n  });\n};\n\nuploadFile();\n\n",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 322,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use a fixed time zone in nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 323,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use begins with in aws nodejs",
    "description": "KeyConditionExpression: '#user_id = :user_id and begins_with(#user_relation, :user_relation)',",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 324,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use crypto module in nodejs",
    "description": "const crypto = require('crypto');\n\nconst secret = 'abcdefg';\nconst hash = crypto.createHmac('sha256', secret)\n                   .update('I love cupcakes')\n                   .digest('hex');\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\nrequire(\"crypto\").createHmac(\"sha256\", \"password\")\n  .update(\"If you love node so much why don't you marry it?\")\n  .digest(\"hex\");\n",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 325,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use crypto module in nodejs (HMAC)",
    "description": "require(\"crypto\").createHmac(\"sha256\", \"password\")\n  .update(\"If you love node so much why don't you marry it?\")\n  .digest(\"hex\");\n",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 326,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use handlebars in node js",
    "description": "$ npm install express-handlebars$ npm install --save express express-handlebars\n",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 327,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use http in development mode for nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 328,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use json file in nodejs",
    "description": "const fs = require('fs');\nconst path = require('path');\n\nlet rawdata = fs.readFileSync(path.resolve(__dirname, 'student.json'));\nlet student = JSON.parse(rawdata);\nconsole.log(student);D:\\NodeJs>node readsync.js\n *START*\nOutput Content:\n /* content here */\n*EXIT*\n// Define JSON File\n var fs = require(\"fs\");\n console.log(\"\\n *STARTING* \\n\");\n// Get content from file\n var contents = fs.readFileSync(\"jsoncontent.json\");\n// Define to JSON type\n var jsonContent = JSON.parse(contents);\n// Get Value from JSON\n console.log(\"User Name:\", jsonContent.username);\n console.log(\"Email:\", jsonContent.email);\n console.log(\"Password:\", jsonContent.password);\nlog(\"\\n *EXIT* \\n\");\nconfig = require(\"./yourfile.json\"); // Note, \"config\" can be changed to your liking. // Read Synchrously\nvar fs = require(\"fs\");\nconsole.log(\"\\n *START* \\n\");\nvar content = fs.readFileSync(\"content.txt\");\nconsole.log(\"Output Content : \\n\"+ content);\nconsole.log(\"\\n *EXIT* \\n\");\n",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 329,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use of socket io on a route in nodejs",
    "description": "//Using Express 4, in your app.js file you can use\napp.set('socketio', io);\n\n//then in your router you can access it like this\nrouter.post('/getRides', function(req, res, next) {\n    var io = req.app.get('socketio');\n\n    io.to(//socket.id//).emit(\"message\", data);\n\n    db.rides.find(function(err, docs) {\n        res.json(docs);\n    });\n};router.post('/getRides', function(req, res, next) {\n    var io = req.app.get('socketio');\n\n    io.to(//socket.id//).emit(\"message\", data);\n\n    db.rides.find(function(err, docs) {\n        res.json(docs);\n    });\n};",
    "reg_date": "2021-10-14T19:40:36.000Z"
  },
  {
    "id": 330,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use online mysql database with node js",
    "description": "//put these lines in a seperate file\nconst mysql = require('mysql2');\n\nconst connection = mysql.createPool({\n    host: \"localhost\",\n    user: \"\",\n    password: \"\",\n    database: \"\"\n    // here you can set connection limits and so on\n});\n\nmodule.exports = connection;\n\n//put these on destination page\nconst connection = require('../util/connection');\n\nasync function getAll() {\n    const sql = \"SELECT * FROM tableName\";\n    const [rows] = await connection.promise().query(sql);\n    return rows;\n} \nexports.getAll = getAll;Connected",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 331,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use static file node js",
    "description": "app.use(express.static(__dirname + '/public'));\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\" />\napp.use(express.static('public'))\napp.use(express.static('files'))\n",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 332,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to use trim in node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 333,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to validate email in node js",
    "description": "var emailRegex = /^[-!#$%&'*+\\/0-9=?A-Z^_a-z{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\n\nfunction isEmailValid(email) {\n    if (!email)\n        return false;\n\n    if(email.length>254)\n        return false;\n\n    var valid = emailRegex.test(email);\n    if(!valid)\n        return false;\n\n    // Further checking of some things regex can't handle\n    var parts = email.split(\"@\");\n    if(parts[0].length>64)\n        return false;\n\n    var domainParts = parts[1].split(\".\");\n    if(domainParts.some(function(part) { return part.length>63; }))\n        return false;\n\n    return true;\n}\n",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 334,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to wait for an exec command to fininsh in nodejs",
    "description": "const exec = require('child_process').exec;\n\nfunction os_func() {\n    this.execCommand = function(cmd, callback) {\n        exec(cmd, (error, stdout, stderr) => {\n            if (error) {\n                console.error(`exec error: ${error}`);\n                return;\n            }\n\n            callback(stdout);\n        });\n    }\n}\nvar os = new os_func();\n\nos.execCommand('SomeCommand', function (returnvalue) {\n    // Here you can get the return value\n});",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 335,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  how to write to a file with javascript without nodejs",
    "description": "// fs_write.js\n\nconst fs = require('fs');\n\n// specify the path to the file, and create a buffer with characters we want to write\nlet path = 'ghetto_gospel.txt';\nlet buffer = new Buffer('Those who wish to follow me\\nI welcome with my hands\\nAnd the red sun sinks at last');\n\n// open the file in writing mode, adding a callback function where we do the actual writing\nfs.open(path, 'w', function(err, fd) {\n    if (err) {\n        throw 'could not open file: ' + err;\n    }\n\n    // write the contents of the buffer, from position 0 to the end, to the file descriptor returned in opening our file\n    fs.write(fd, buffer, 0, buffer.length, null, function(err) {\n        if (err) throw 'error writing file: ' + err;\n        fs.close(fd, function() {\n            console.log('wrote the file successfully');\n        });\n    });\n});function convertToJSON() {\n  var firstname = document.getElementById('firstname').value;\n  var lastname = document.getElementById('lastname').value;\n  var email = document.getElementById('email').value;\n\n  var jsonObject = {\n    \"FirstName\": firstname,\n    \"LastName\": lastname,\n    \"email\": email\n  }\n\n  document.getElementById('output').value = JSON.stringify(jsonObject)\n}\n\nfunction saveToFile() {\n  convertToJSON();\n  var jsonObjectAsString = document.getElementById('output').value;\n\n  var blob = new Blob([jsonObjectAsString], {\n    //type: 'application/json'\n    type: 'octet/stream'\n  });\n  console.log(blob);\n\n  var anchor = document.createElement('a')\n  anchor.download = \"user.json\";\n  anchor.href = window.URL.createObjectURL(blob);\n  anchor.innerHTML = \"download\"\n  anchor.click();\n\n  console.log(anchor);\n\n  document.getElementById('output').append(anchor)\n\n\n}",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 336,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  html to pdf node js background color",
    "description": "It works if you set printBackground: true to the options",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 337,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  http module in nodejs",
    "description": "/* ====== create node.js server with core 'http' module ====== */\n// dependencies\nconst http = require(\"http\");\n\n// PORT\nconst PORT = 3000;\n\n// server create\nconst server = http.createServer((req, res) => {\n   if (req.url === \"/\") {\n      res.write(\"This is home page.\");\n      res.end();\n   } else if (req.url === \"/about\" && req.method === \"GET\") {\n      res.write(\"This is about page.\");\n      res.end();\n   } else {\n      res.write(\"Not Found!\");\n      res.end();\n   }\n});\n\n// server listen port\nserver.listen(PORT);\n\nconsole.log(`Server is running on PORT: ${PORT}`);\n\n/* ========== *** ========== */\n\n/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000//HTTP MODULE NODE.JS\nvar http = require('http');\nvar server = http.createServer(function(req, res){\n  //write code here\n});\nserver.listen(5000); var http = require('http');\n\n//create a server object:\nhttp.createServer(function (req, res) {\n  res.write('Hello World!'); //write a response to the client\n  res.end(); //end the response\n}).listen(8080); //the server object listens on port 8080",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 338,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  http module nodejs",
    "description": "const https = require('https')\nconst options = {\n  hostname: 'whatever.com',\n  port: 443,\n  path: '/todos',\n  method: 'GET'\n}\n\nconst req = https.request(options, res => {\n  console.log(`statusCode: ${res.statusCode}`)\n\n  res.on('data', d => {\n    process.stdout.write(d)\n  })\n})\n\nreq.on('error', error => {\n  console.error(error)\n})\n\nreq.end()//HTTP MODULE NODE.JS\nvar http = require('http');\nvar server = http.createServer(function(req, res){\n  //write code here\n});\nserver.listen(5000); var http = require('http');\n\n//create a server object:\nhttp.createServer(function (req, res) {\n  res.write('Hello World!'); //write a response to the client\n  res.end(); //end the response\n}).listen(8080); //the server object listens on port 8080",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 339,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  https.get module in nodejs",
    "description": "const https = require('https')\nconst options = {\n  hostname: 'whatever.com',\n  port: 443,\n  path: '/todos',\n  method: 'GET'\n}\n\nconst req = https.request(options, res => {\n  console.log(`statusCode: ${res.statusCode}`)\n\n  res.on('data', d => {\n    process.stdout.write(d)\n  })\n})\n\nreq.on('error', error => {\n  console.error(error)\n})\n\nreq.end()",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 340,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  icon api node js to browser",
    "description": "",
    "reg_date": "2021-10-14T19:40:37.000Z"
  },
  {
    "id": 341,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  image compression in nodejs",
    "description": "Install npm install browser-image-compression --save",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 342,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  image downloader extension in nodejs",
    "description": "const download = require('image-downloader') const options = {  url: 'http://someurl.com/image.jpg',  dest: '/path/to/dest'                // will be saved to /path/to/dest/image.jpg} download.image(options)  .then(({ filename }) => {    console.log('Saved to', filename)  // saved to /path/to/dest/image.jpg  })  .catch((err) => console.error(err))",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 343,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  implementing node js app on server and runing npm",
    "description": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 344,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  index export in nodejs",
    "description": "// index.js\nmodule.exports = {\n  signIn: require('./signIn')\n, signOut: require('./signOut')\n};",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 345,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  infinite image slider with react and node js",
    "description": "git clone https://github.com/g787543/infinite-react-carousel.git\ncd infinite-react-carousel",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 346,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  input in node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 347,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  insertMany mongodb nodejs",
    "description": "//CRUD\n\nconst mongodb = require('mongodb');\nconst MongoClient = mongodb.MongoClient;\n\nconst connectionURl = 'mongodb://127.0.0.1:27017';\nconst databaseName = 'task-manager';\n\nMongoClient.connect(\n\tconnectionURl,\n\t{ useNewUrlParser: true },\n\t(error, client) => {\n\t\tif (error) {\n\t\t\treturn console.log('unable to connect to database');\n\t\t}\n\n\t\tconst db = client.db(databaseName);\n\n\t\tdb.collection('users').insertOne({\n\t\t\tname: 'user',\n\t\t\tage: 24,\n\t\t});\n\t}\n);\nconst { MongoClient } = require(\"mongodb\");\n// Replace the uri string with your MongoDB deployment's connection string.\nconst uri =\n  \"mongodb+srv://<user>:<password>@<cluster-url>?writeConcern=majority\";\nconst client = new MongoClient(uri);\nasync function run() {\n  try {\n    await client.connect();\n    const database = client.db(\"sample_mflix\");\n    const movies = database.collection(\"movies\");\n    // create an array of documents to insert\n    const docs = [\n      { name: \"Red\", town: \"Kanto\" },\n      { name: \"Blue\", town: \"Kanto\" },\n      { name: \"Leon\", town: \"Galar\" }\n    ];\n    // this option prevents additional documents from being inserted if one fails\n    const options = { ordered: true };\n    const result = await movies.insertMany(docs, options);\n    console.log(`${result.insertedCount} documents were inserted`);\n  } finally {\n    await client.close();\n  }\n}\nrun().catch(console.dir);var MongoClient = require('mongodb').MongoClient;\nvar url = 'mongodb://localhost:27017/test';\nvar data1={\n    name:'Data1',\n    work:'student',\n    No:4355453,\n    Date_of_birth:new Date(1996,10,17)\n};\n\nvar data2={\n    name:'Data2',\n    work:'student',\n    No:4355453,\n    Date_of_birth:new Date(1996,10,17)\n};\n\nMongoClient.connect(url, function(err, db) {\n    if(err!=null){\n        return console.log(err.message)\n    }\n\n    //insertOne\n    db.collection(\"App\").insertOne(data1,function (err,data) {\n\n        if(err!=null){\n            return console.log(err);\n        }\n        console.log(data.ops[0]);\n    });\n\n    //insertMany\n\nvar Data=[data1,data2];\n\ndb.collection(\"App\").insertMany(Data,forceServerObjectId=true,function (err,data) {\n\n        if(err!=null){\n            return console.log(err);\n        }\n        console.log(data.ops);\n    });\n    db.close();\n});",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 348,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  insert into mongodb node js",
    "description": "//CRUD\n\nconst mongodb = require('mongodb');\nconst MongoClient = mongodb.MongoClient;\n\nconst connectionURl = 'mongodb://127.0.0.1:27017';\nconst databaseName = 'task-manager';\n\nMongoClient.connect(\n\tconnectionURl,\n\t{ useNewUrlParser: true },\n\t(error, client) => {\n\t\tif (error) {\n\t\t\treturn console.log('unable to connect to database');\n\t\t}\n\n\t\tconst db = client.db(databaseName);\n\n\t\tdb.collection('users').insertOne({\n\t\t\tname: 'user',\n\t\t\tage: 24,\n\t\t});\n\t}\n);\n",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 349,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install ejs nodejs",
    "description": "Open your project folder in shell and write :  \n$  npm install ejs$ npm install ejs",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 350,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install node js 14",
    "description": "sudo apt update\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo bash -\nsudo apt -y install nodejs\nnode  -v\n\n# Install Node Development tools\nsudo apt -y install gcc g++ make\n\n# Install Yarn\ncurl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update && sudo apt install yarn",
    "reg_date": "2021-10-14T19:40:38.000Z"
  },
  {
    "id": 351,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install node js command",
    "description": "# Make a new folder for node\nmkdir node\ncd node\n# Download and unzip node\ncurl -O https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.gz\ntar -xvzf node-v10.15.3-linux-x64.tar.gz --strip-components=1\n# Add node and npm it to PATH (and do so for future sessions too)\nexport PATH=$HOME/node/bin:$PATH\necho 'export PATH=$HOME/node/bin:$PATH' >> ~/.bashrc",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 352,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install node js in manjaro",
    "description": "pacman -S nodejs npmpamac install nodejspacman -S nodejs npm\n",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 353,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install node js lts ubuntu 18.04",
    "description": "// Enabling NodeSource Repository\n// replace %V% with desired major version\ncurl -sL https://deb.nodesource.com/setup_%V%.x | sudo bash -\n// Install using apt-get\nsudo apt-get install -y nodejs\n// check installed node version\nnode --version",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 354,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install node js ubuntu 20.04",
    "description": "// Enabling NodeSource Repository\n// replace %V% with desired major version\ncurl -sL https://deb.nodesource.com/setup_%V%.x | sudo bash -\n// Install using apt-get\nsudo apt-get install -y nodejs\n// check installed node version\nnode --versionInstall Nodejs using NVM\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nsource ~/.bashrc\nnvm install v14.17.1# install nodejs 10.x version \nsudo apt update\ncd ~\ncurl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh\n# not important, but can be done\nnano nodesource_setup.sh\nsudo bash nodesource_setup.sh\nsudo apt install nodejs\nnode install npm -g\nnode --version\nnpm --version$ sudo apt install nodejs\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -Copy//installing node from the terminal\nsudo apt install nodejs\n\n//installing npm\nsudo apt install npm",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 355,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install node js using nvm ubuntu",
    "description": "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm. Now you can use nvmcurl -sL https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh -o install_nvm.sh\nbash install_nvm.sh\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo bash -sudo bash nodesource_setup.sh\ncd ~\ncurl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh\n",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 356,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install nodejs command line to cpnel",
    "description": "",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 357,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install nodejs from ubuntu 18.04",
    "description": "// Enabling NodeSource Repository\n// replace %V% with desired major version\ncurl -sL https://deb.nodesource.com/setup_%V%.x | sudo bash -\n// Install using apt-get\nsudo apt-get install -y nodejs\n// check installed node version\nnode --versionsudo bash nodesource_setup.sh\ncd ~\ncurl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh\n",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 358,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install nodejs latest version ubuntu",
    "description": "sudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n# Check node version\nnode -v \n# v13.9.0\n# Also, check the npm version\nnpm -v \n# 6.13.7//STEP 1:install using curl (PPA)\nsudo apt update && sudo apt install curl -y\n//STEP 2:install latest version (replace 14.x with requird one(i.e 15.x))\ncurl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -\nsudo apt install nodejs\nnodejs -v\nv15.3.0",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 359,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install nodejs ubuntu",
    "description": "sudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n# Check node version\nnode -v \n# v13.9.0\n# Also, check the npm version\nnpm -v \n# 6.13.7sudo apt update\nsudo apt install nodejs\nsudo apt install npmcurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install nodejs\nsudo apt install npm\nsudo apt update# Using Ubuntu\ncurl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Using Debian, as root\ncurl -fsSL https://deb.nodesource.com/setup_14.x | bash -\napt-get install -y nodejs# Using Ubuntu\ncurl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Using Debian, as root\ncurl -fsSL https://deb.nodesource.com/setup_16.x | bash -\napt-get install -y nodejscurl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -\nsudo apt-get install nodejs",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 360,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  install nodejs ubuntu 19.04",
    "description": "",
    "reg_date": "2021-10-14T19:40:39.000Z"
  },
  {
    "id": 361,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  intall node js and npm",
    "description": "// index.js \n\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\n\n// generate token for another API to use in req.header\napp.post('/login', (req, res) => {\n    const user = {\n        id: 1,\n        username: 'abhishek',\n        email: \"abhishek@gmail.com\"\n    }\n    let token = jwt.sign({ user: user }, 'shhhhh');\n    res.send(token);\n})\n\n// verifyToken is a function that is used for check in API that token exist or not\n// it can be put in between n number of API to check that authoriZed user loggedin or not.\napp.get('/api', verifyToken, (req, res) => {\n    try {\n        jwt.verify(req.token, 'shhhhh', (error, authData) => {\n            if (error) {\n                res.send(\"not logged in\")\n            }\n            res.json({\n                message: \"post Created\",\n                authData\n            })\n        })\n    } catch (error) {\n        res.send(error)\n    }\n})\n\n// This funtion is middleware. \nfunction verifyToken(req, res, next) {\n    try {\n        const bearerHeader = req.headers['authorization'];\n        if (typeof bearerHeader !== 'undefined') {\n            const bearerToken = bearerHeader.split(' ')[1];\n            req.token = bearerToken;\n            next();\n        }\n        else {\n            res.send(\"Not logged-in\")\n        }\n    }\n    catch {\n        res.send(\"something went wrong\")\n    }\n}\n\napp.listen(3000, () => {\n    console.log(\"server is runing\")\n})\n",
    "reg_date": "2021-10-14T19:40:40.000Z"
  },
  {
    "id": 362,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  invoke lambda nodejs",
    "description": "var AWS = require('aws-sdk');\nAWS.config.region = 'eu-west-1';\nvar lambda = new AWS.Lambda();\n\nexports.handler = function(event, context) {\n  var params = {\n    FunctionName: 'Lambda_B', // the lambda function we are going to invoke\n    InvocationType: 'RequestResponse',\n    LogType: 'Tail',\n    Payload: '{ \"name\" : \"Alex\" }'\n  };\n\n  lambda.invoke(params, function(err, data) {\n    if (err) {\n      context.fail(err);\n    } else {\n      context.succeed('Lambda_B said '+ data.Payload);\n    }\n  })\n};\n// first install serverless\n$  npm install -g serverless\n// create basic template\n$  serverless create --template aws-nodejs --name candidate\n// configure aws and genrate client id and client secret\nserverless config credentials --provider aws --key <your_access_key_id> --secret <your_access_key_secret>\n // deploy\n  serverless deploy",
    "reg_date": "2021-10-14T19:40:40.000Z"
  },
  {
    "id": 363,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  is knex built into node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:40.000Z"
  },
  {
    "id": 364,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  is node js faster than python",
    "description": "Node. js is a better choice if your focus is on web applications and website \ndevelopment. Python is an ideal platform to do multiple things - web\napplications, integration with back-end applications, numerical computations,\nmachine learning, and network programming.\n\nBut all in all, Node is slightly faster than Python.",
    "reg_date": "2021-10-14T19:40:40.000Z"
  },
  {
    "id": 365,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  is nodejs code visible client side",
    "description": "",
    "reg_date": "2021-10-14T19:40:40.000Z"
  },
  {
    "id": 366,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  isodate mongodb nodejs",
    "description": "Ticket.aggregate([\n    {\n      $match: {\n        createdAt: {\n          $gte: new moment().startOf('month').toDate()\n        }\n      }\n    }\n  ]).then(results => {\n    // do something\n  })",
    "reg_date": "2021-10-14T19:40:40.000Z"
  },
  {
    "id": 367,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  javascript farbige konsole in node",
    "description": "",
    "reg_date": "2021-10-14T19:40:40.000Z"
  },
  {
    "id": 368,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  javascript find diff in nested objects node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 369,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  joi validation custom message in node",
    "description": "const Joi = require('Joi');\n\nconst schema = Joi.object({\n    username: Joi.string()\n      .min(2)\n      .max(30)\n      .required()\n      .pattern(new RegExp(/^(?!.*\\.\\.)(?!.*\\.$)[^\\W][\\w.]{0,29}$/))\n      .message({\"string.pattern.base\":\"Invalid username\",\n                \"string.min\":\"minimum 2 character required\",\n                \"string.max\":\"maximum 30 characters allowed\"})\n});\n//\nmessages: {\n      'any.custom': [Object],\n      'any.default': [Object],\n      'any.failover': [Object],\n      'any.invalid': [Object],\n      'any.only': [Object],\n      'any.ref': [Object],\n      'any.required': [Object],\n      'any.unknown': [Object],\n      'string.alphanum': [Object],\n      'string.base': [Object],\n      'string.base64': [Object],\n      'string.creditCard': [Object],\n      'string.dataUri': [Object],\n      'string.domain': [Object],\n      'string.email': [Object],\n      'string.empty': [Object],\n      'string.guid': [Object],\n      'string.hex': [Object],\n      'string.hexAlign': [Object],\n      'string.hostname': [Object],\n      'string.ip': [Object],\n      'string.ipVersion': [Object],\n      'string.isoDate': [Object],\n      'string.isoDuration': [Object],\n      'string.length': [Object],\n      'string.lowercase': [Object],\n      'string.max': [Object],\n      'string.min': [Object],\n      'string.normalize': [Object],\n      'string.token': [Object],\n      'string.pattern.base': [Object],\n      'string.pattern.name': [Object],\n      'string.pattern.invert.base': [Object],\n      'string.pattern.invert.name': [Object],\n      'string.trim': [Object],\n      'string.uri': [Object],\n      'string.uriCustomScheme': [Object],\n      'string.uriRelativeOnly': [Object],\n      'string.uppercase': [Object]\n}\n//$uj@y",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 370,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  jwt implementation in node js",
    "description": "// index.js \n\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\n\n// generate token for another API to use in req.header\napp.post('/login', (req, res) => {\n    const user = {\n        id: 1,\n        username: 'abhishek',\n        email: \"abhishek@gmail.com\"\n    }\n    let token = jwt.sign({ user: user }, 'shhhhh');\n    res.send(token);\n})\n\n// verifyToken is a function that is used for check in API that token exist or not\n// it can be put in between n number of API to check that authoriZed user loggedin or not.\napp.get('/api', verifyToken, (req, res) => {\n    try {\n        jwt.verify(req.token, 'shhhhh', (error, authData) => {\n            if (error) {\n                res.send(\"not logged in\")\n            }\n            res.json({\n                message: \"post Created\",\n                authData\n            })\n        })\n    } catch (error) {\n        res.send(error)\n    }\n})\n\n// This funtion is middleware. \nfunction verifyToken(req, res, next) {\n    try {\n        const bearerHeader = req.headers['authorization'];\n        if (typeof bearerHeader !== 'undefined') {\n            const bearerToken = bearerHeader.split(' ')[1];\n            req.token = bearerToken;\n            next();\n        }\n        else {\n            res.send(\"Not logged-in\")\n        }\n    }\n    catch {\n        res.send(\"something went wrong\")\n    }\n}\n\napp.listen(3000, () => {\n    console.log(\"server is runing\")\n})\nconst jwt = require(\"jsonwebtoken\")\n\nconst jwtKey = \"my_secret_key\"\nconst jwtExpirySeconds = 300\n\nconst users = {\n\tuser1: \"password1\",\n\tuser2: \"password2\",\n}\n\nconst signIn = (req, res) => {\n\t// Get credentials from JSON body\n\tconst { username, password } = req.body\n\tif (!username || !password || users[username] !== password) {\n\t\t// return 401 error is username or password doesn't exist, or if password does\n\t\t// not match the password in our records\n\t\treturn res.status(401).end()\n\t}\n\n\t// Create a new token with the username in the payload\n\t// and which expires 300 seconds after issue\n\tconst token = jwt.sign({ username }, jwtKey, {\n\t\talgorithm: \"HS256\",\n\t\texpiresIn: jwtExpirySeconds,\n\t})\n\tconsole.log(\"token:\", token)\n\n\t// set the cookie as the token string, with a similar max age as the token\n\t// here, the max age is in milliseconds, so we multiply by 1000\n\tres.cookie(\"token\", token, { maxAge: jwtExpirySeconds * 1000 })\n\tres.end()\n}function authenticateToken(req, res, next) {\n  // Gather the jwt access token from the request header\n  const authHeader = req.headers['authorization']\n  const token = authHeader && authHeader.split(' ')[1]\n  if (token == null) return res.sendStatus(401) // if there isn't any token\n\n  jwt.verify(token, process.env.ACCESS_TOKEN_SECRET as string, (err: any, user: any) => {\n    console.log(err)\n    if (err) return res.sendStatus(403)\n    req.user = user\n    next() // pass the execution off to whatever request the client intended\n  })\n}",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 371,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  jwt in node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 372,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  jwt token example in node js",
    "description": "function authenticateToken(req, res, next) {\n  // Gather the jwt access token from the request header\n  const authHeader = req.headers['authorization']\n  const token = authHeader && authHeader.split(' ')[1]\n  if (token == null) return res.sendStatus(401) // if there isn't any token\n\n  jwt.verify(token, process.env.ACCESS_TOKEN_SECRET as string, (err: any, user: any) => {\n    console.log(err)\n    if (err) return res.sendStatus(403)\n    req.user = user\n    next() // pass the execution off to whatever request the client intended\n  })\n}",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 373,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  jwt token expire time in node js",
    "description": " var token = jwt.sign({email_id:'123@gmail.com'}, \"Stack\", {\n        expiresIn: \"10h\" // it will be expired after 10 hours\n        //expiresIn: \"20d\" // it will be expired after 20 days\n        //expiresIn: 120 // it will be expired after 120ms\n        //expiresIn: \"120s\" // it will be expired after 120s\n });\n",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 374,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  jwt verify nodejs",
    "description": "jwt.verify(token, 'shhhhh', function(err, decoded) {\n  console.log(decoded.foo) // bar\n});",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 375,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  kick members node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 376,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  libuv nodejs",
    "description": "Another important dependency is libuv, a C library that is used to abstract non-blocking I/O operations to a consistent interface across all supported platforms. It provides mechanisms to handle file system, DNS, network, child processes, pipes, signal handling, polling and streaming. It also includes a thread pool for offloading work for some things that can't be done asynchronously at the operating system level.",
    "reg_date": "2021-10-14T19:40:41.000Z"
  },
  {
    "id": 377,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  like dislike node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 378,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  linkedin api nodejs tutorial",
    "description": "",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 379,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  login middleware node js jwt",
    "description": "const jwt = require('jsonwebtoken');\n\nmodule.exports = (req, res, next) => {\n  try {\n    const token = req.headers.authorization.split(' ')[1];\n    const decodedToken = jwt.verify(token, 'RANDOM_TOKEN_SECRET');\n    const userId = decodedToken.userId;\n    if (req.body.userId && req.body.userId !== userId) {\n      throw 'Invalid user ID';\n    } else {\n      next();\n    }\n  } catch {\n    res.status(401).json({\n      error: new Error('Invalid request!')\n    });\n  }\n};\nconst jwt = require('jsonwebtoken');\n\nmodule.exports = (req, res, next) => {\n  try {\n    const token = req.headers.authorization.split(' ')[1];\n    const decodedToken = jwt.verify(token, 'RANDOM_TOKEN_SECRET');\n    const userId = decodedToken.userId;\n    if (req.body.userId && req.body.userId !== userId) {\n      throw 'Invalid user ID';\n    } else {\n      next();\n    }\n  } catch {\n    res.status(401).json({\n      error: new Error('Invalid request!')\n    });\n  }\n};",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 380,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  microservices nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 381,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  middleware in node js",
    "description": "var express = require('express')\nvar app = express()\n\nvar myLogger = function (req, res, next) {\n  console.log('LOGGED')\n  next()\n}\n\napp.use(myLogger)\n\napp.get('/', function (req, res) {\n  res.send('Hello World!')\n})\n\napp.listen(3000)\n//app.get will see only exact match ex.> \"/book\" here app.get will not allow /book/1, etc \n//but app.use is different see below\n\n//what is difference between app.use and app.all\n//app.use takes only 1 callback while app.all takes multiple callbacks\n//app.use will only see whether url starts with specified path But, app.all() will match the complete path\n\napp.use( \"/book\" , middleware);\n// will match /book\n// will match /book/author\n// will match /book/subject\n\napp.all( \"/book\" , handler);\n// will match /book\n// won't match /book/author   \n// won't match /book/subject    \n\napp.all( \"/book/*\" , handler);\n// won't match /book        \n// will match /book/author\n// will match /book/subjectNotice the call above to next(). Calling this function invokes the next middleware function in the app. The next() function is not a part of the Node.js or Express API, but is the third argument that is passed to the middleware function. The next() function could be named anything, but by convention it is always named “next”. To avoid confusion, always use this convention.\n",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 382,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mocha test cases in node js example",
    "description": "",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 383,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mock sqs.sendMessage node js",
    "description": "import sendMessage from './';\nimport AWS from 'aws-sdk';\n\njest.mock('aws-sdk', () => {\n  const SQSMocked = {\n    sendMessage: jest.fn().mockReturnThis(),\n    promise: jest.fn()\n  };\n  return {\n    SQS: jest.fn(() => SQSMocked)\n  };\n});\n\nconst sqs = new AWS.SQS({\n  region: 'us-east-1'\n});\n\ndescribe.only('Test case for SQS SendMessage', () => {\n  beforeEach(() => {\n    (sqs.sendMessage().promise as jest.MockedFunction<any>).mockReset();\n  });\n  it('should return the UserEvent', async () => {\n    expect(jest.isMockFunction(sqs.sendMessage)).toBeTruthy();\n    expect(jest.isMockFunction(sqs.sendMessage().promise)).toBeTruthy();\n    (sqs.sendMessage().promise as jest.MockedFunction<any>).mockResolvedValueOnce('mocked data');\n    const actualValue = await sendMessage('testURL', 'data');\n    expect(actualValue).toEqual('mocked data');\n    expect(sqs.sendMessage).toBeCalledWith({ MessageBody: '\"testURL\"', QueueUrl: 'data' });\n    expect(sqs.sendMessage().promise).toBeCalledTimes(1);\n  });\n\n  it('should throw an error when send message error', async () => {\n    const sendMessageErrorMessage = 'network error';\n    (sqs.sendMessage().promise as jest.MockedFunction<any>).mockRejectedValueOnce(sendMessageErrorMessage);\n    await expect(sendMessage('testURL', 'data')).rejects.toThrowError(new Error(sendMessageErrorMessage));\n    expect(sqs.sendMessage).toBeCalledWith({ MessageBody: '\"testURL\"', QueueUrl: 'data' });\n    expect(sqs.sendMessage().promise).toBeCalledTimes(1);\n  });\n});",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 384,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  modulos nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 385,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mongo query by object id node js",
    "description": "",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 386,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mongodb atlas node js mongoose",
    "description": "",
    "reg_date": "2021-10-14T19:40:42.000Z"
  },
  {
    "id": 387,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mongodb bulkwrite nodejs",
    "description": "const { MongoClient } = require(\"mongodb\");\n// Replace the uri string with your MongoDB deployment's connection string.\nconst uri =\n  \"mongodb+srv://<user>:<password>@<cluster-url>?writeConcern=majority\";\nconst client = new MongoClient(uri);\nasync function run() {\n  try {\n    await client.connect();\n    const database = client.db(\"sample_mflix\");\n    const theaters = database.collection(\"theaters\");\n    const result = await theaters.bulkWrite([\n      { insertOne:\n        {\n          \"document\": {\n            location: {\n              address: { street1: '3 Main St.', city: 'Anchorage', state: 'AK', zipcode: '99501' },\n            }\n          }\n        }\n      },\n      { insertOne:\n        {\n          \"document\": {\n            location: {\n              address: { street1: '75 Penn Plaza', city: 'New York', state: 'NY', zipcode: '10001' },\n            }\n          }\n        }\n      },\n      { updateMany:\n        {\n          \"filter\": { \"location.address.zipcode\" : \"44011\" },\n          \"update\": { $set : { \"street2\" : \"25th Floor\" } },\n          \"upsert\": true\n        }\n      },\n      { deleteOne :\n        { \"filter\" : { \"location.address.street1\" : \"221b Baker St\"} }\n      },\n    ]);\n    console.log(result);\n  } finally {\n    await client.close();\n  }\n}\nrun().catch(console.dir)",
    "reg_date": "2021-10-14T19:40:43.000Z"
  },
  {
    "id": 388,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mongodb nodejs connect localhost",
    "description": "//with mongoose \n\nconst mongoose = require('mongoose');\n\nmongoose.connect(\n    mongoURI,\n    {\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n    },\n    (err) => {\n        if (err) console.log(err);\n        app.listen(3000);\n    }\n);\n/********************************************************************/\n// with mongodb lib\nconst mongodb = require('mongodb');\n\nconst MongoClient = mongodb.MongoClient;\n\nlet _db;\n// you can replace test with any database name that you want\nconst mongoConnect = (cb) => {\n  MongoClient.connect('mongodb://127.0.0.1:27017/test')\n    .then((client) => {\n      _db = client.db();\n      cb()\n      console.log('Connected to MongoDb');\n    }).catch((err) => {\n      console.log(err);\n    });\n}\n//after your server started you can use getDb to access mongo Database\nconst getDb = () => {\n  if (_db) return _db;\n  throw 'No database found';\n}\n\nexports.mongoConnect = mongoConnect;\nexports.getDb = getDb;\"mongodb://localhost:27017/MyDb\"",
    "reg_date": "2021-10-14T19:40:43.000Z"
  },
  {
    "id": 389,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mongoose connection increase timeout in node js",
    "description": "mongoose.connect(uri, {\n  useUnifiedTopology: true,\n  serverSelectionTimeoutMS: 1*1000, // 1s timeout\n})",
    "reg_date": "2021-10-14T19:40:43.000Z"
  },
  {
    "id": 390,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mongoose connection nodejs",
    "description": "const mongoose = require('mongoose');\n\nconst connectDB = async () => {\n    mongoose\n        .connect('mongodb://localhost:27017/playground', {\n            useCreateIndex: true,\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            useFindAndModify: false\n        })\n        .then(() => console.log('Connected Successfully'))\n        .catch((err) => console.error('Not Connected'));\n}\n\nmodule.exports = connectDB;mongoose.connect('mongodb://localhost:27017/test', {\n  useMongoClient: true,\n  connectTimeoutMS: 1000\n})mongoose.connect('mongodb://username:password@host:port/database?options...', {useNewUrlParser: true});",
    "reg_date": "2021-10-14T19:40:43.000Z"
  },
  {
    "id": 391,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mongoose node js",
    "description": "const mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/test', {useNewUrlParser: true, useUnifiedTopology: true});\n\nconst Cat = mongoose.model('Cat', { name: String });\n\nconst kitty = new Cat({ name: 'Zildjian' });\nkitty.save().then(() => console.log('meow'));var db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  // we're connected!\n});// getting-started.js\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/test', {useNewUrlParser: true});await mongoose.connect('mongodb://localhost/my_database', {  useNewUrlParser: true,  useUnifiedTopology: true});// getting-started.js\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/test', {useNewUrlParser: true});\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  // we're connected!\n});const db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  // we're connected!\n});",
    "reg_date": "2021-10-14T19:40:43.000Z"
  },
  {
    "id": 392,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  morgan nodejs github",
    "description": "NodeJS Dev Logging using Morgan",
    "reg_date": "2021-10-14T19:40:43.000Z"
  },
  {
    "id": 393,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  most popular company with nodejs",
    "description": "// Netflix",
    "reg_date": "2021-10-14T19:40:43.000Z"
  },
  {
    "id": 394,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  move file from one folder to another in aws s3 nodejs",
    "description": "var AWS = require('aws-sdk');\nAWS.config.update({\n     accessKeyId: 'xxx',\n     secretAccessKey: 'xxx'\n    });\nvar s3 = new AWS.S3();\nvar params = {\n    Bucket : 'bucketname', /* Another bucket working fine */ \n    CopySource : 'bucketname/externall/1.txt', /* required */\n    Key : \"1.txt\", /* required */\n    ACL : 'public-read',\n};\ns3.copyObject(params, function(err, data) {\n    if (err)\n        console.log(err, err); // an error occurred\n    else {\n        console.log(data); // successful response\n    }\n});",
    "reg_date": "2021-10-14T19:40:44.000Z"
  },
  {
    "id": 395,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mssql query node js",
    "description": "const sql = require('mssql')\nconst query=`select * from table`;\nconfig = {\n    database: \"dbname\",\n  // can keep these option required with latest version of mssql npm package\n    options: {\n      enableArithAbort: true,\n      encrypt: true,\n      rowCollectionOnRequestCompletion: false,\n    },\n    parseJSON: true,\n    password: \"password\",\n    port: port, // if youe database running on difrent port then 1433\n    server: \"server ip or name\",\n    user: \"usenme\",\n  };\n\n \nsql.on('error', err => {\n    // ... error handler\n})\n \nsql.connect(config).then(pool => {\n    return pool.request()\n        .query(query)\n}).then(result => {\n    console.log(result.recordset)\n}).catch(err => {\n    console.log(err)\n});\n",
    "reg_date": "2021-10-14T19:40:44.000Z"
  },
  {
    "id": 396,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  mysql node js github",
    "description": "",
    "reg_date": "2021-10-14T19:40:44.000Z"
  },
  {
    "id": 397,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  new node js project vs code",
    "description": "npm install -g express-generator",
    "reg_date": "2021-10-14T19:40:44.000Z"
  },
  {
    "id": 398,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  next js shared hosting without node js",
    "description": "const { createServer } = require(\"http\");\nconst { parse } = require(\"url\");\nconst next = require(\"next\");\nconst dev = process.env.NODE_ENV !== \"production\";\n\nconst port = !dev ? process.env.PORT : 3000;\n\n// Create the Express-Next App\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\napp\n  .prepare()\n  .then(() => {\n    createServer((req, res) => {\n      const parsedUrl = parse(req.url, true);\n      const { pathname, query } = parsedUrl;\n      handle(req, res, parsedUrl);\n      console.log(\"pathname\", pathname);\n    }).listen(port, (err) => {\n      if (err) throw err;\n      console.log(`> Ready on http://localhost:${port}`);\n    });\n  })\n  .catch((ex) => {\n    console.error(ex.stack);\n    process.exit(1);\n  });",
    "reg_date": "2021-10-14T19:40:44.000Z"
  },
  {
    "id": 399,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nginx reverse proxy node js",
    "description": ". . .\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}",
    "reg_date": "2021-10-14T19:40:44.000Z"
  },
  {
    "id": 400,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodeJS rest api",
    "description": "// My dependencies\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n\n// App configurations\nconst app = express();\n// Let the app be able to see the html file that called the server\napp.use(bodyParser.urlencoded({ extended: true })); \n\n// A RESTFul GET API\napp.get(\"/\", (req, res) => {\n    res.send(\"Hello World\");\n});\n\n// Another RESTFul GET API\napp.get(\"/api/course\", (req, res) => {\n  res.send([1,2,3]);\n});\n\n// My parameters input RESTFul API\napp.get(\"/test/:year/:month\", (req, res) => {\n  // http://localhost:55555/test/2020/5\n  res.send(req.params);\n});\n\n// My parameters input POST RESTFul API\napp.post(\"/test2/:year/:month\", (req, res) => {\n  // Same as the above one but with POST method\n  res.send(req.params);\n});\n\n// Starting up the server\nconst port = 55555;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});",
    "reg_date": "2021-10-14T19:40:44.000Z"
  },
  {
    "id": 401,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node --trace-deprecation in webpack",
    "description": "node --trace-deprecation node_modules/webpack/bin/webpack.js",
    "reg_date": "2021-10-14T19:40:45.000Z"
  },
  {
    "id": 402,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node 10 form data",
    "description": "import FormData from 'form-data'\n//or\nvar FormData = require('form-data');",
    "reg_date": "2021-10-14T19:40:45.000Z"
  },
  {
    "id": 403,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node alternative to btoa",
    "description": "console.log(Buffer.from('Hello World!').toString('base64'));\nconsole.log(Buffer.from(b64Encoded, 'base64').toString());\n",
    "reg_date": "2021-10-14T19:40:45.000Z"
  },
  {
    "id": 404,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node and bash together",
    "description": "$ npm install shelljs\nnode\n>var shell = require('shelljs');\n>shell.ls();\n>shell.exec('ls');",
    "reg_date": "2021-10-14T19:40:45.000Z"
  },
  {
    "id": 405,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node and mailgun",
    "description": "npm version mailgun-js",
    "reg_date": "2021-10-14T19:40:45.000Z"
  },
  {
    "id": 406,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node app create",
    "description": "#1. server.js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.status(200).send('Hello World!');\n});\n\nvar port = process.env.PORT || 3000;\n\nvar server = app.listen(port, function() {\n  console.log('Express server listening on port ' + port);\n});\n\nopen cmd run server.js\n\"node server.js\"\nlog:Express server listening on port 3000\n\n& then\n\nopen link \"http://localhost:3000/\" in your browser and show result.using command line >>> \n\nnpm init\n\nopen text editor create a js file. for example like index.js and paste following code.\n\n>>> \n  \nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n\n----\n\nrun using \nnode app.js",
    "reg_date": "2021-10-14T19:40:45.000Z"
  },
  {
    "id": 407,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node app html generate",
    "description": "const generatePage = (name, github) => {\n  return `\n  <!DOCTYPE html> \n  <html lang=\"en\"> \n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Portfolio Demo</title>\n  </head>\n\n  <body>\n    <h1>${name}</h1>\n    <h2><a href=\"https://github.com/${github}\">Github</a></h2>\n  </body>\n  </html>\n  `;\n};",
    "reg_date": "2021-10-14T19:40:45.000Z"
  },
  {
    "id": 408,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node app not visible in browser aws ec2",
    "description": "    var express = require('express');\nvar app = express();\n\napp.listen(3000, ()=>  {\n    console.log('listening');\n});\n\napp.get('/',(req,res)=>  {\n    res.send('hi');\n});\n",
    "reg_date": "2021-10-14T19:40:46.000Z"
  },
  {
    "id": 409,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node appendFile sync",
    "description": "pas de reponse",
    "reg_date": "2021-10-14T19:48:05.000Z"
  },
  {
    "id": 410,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node base64 to audio",
    "description": "fs.writeFileSync('file.ogg', Buffer.from(base64data.replace('data:audio/ogg; codecs=opus;base64,', ''), 'base64'));\n",
    "reg_date": "2021-10-14T19:40:46.000Z"
  },
  {
    "id": 411,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node biology definition",
    "description": " A point in a plant stem at which one or more leaves are attached",
    "reg_date": "2021-10-14T19:40:46.000Z"
  },
  {
    "id": 412,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node buffer size",
    "description": "var buf = Buffer.from('abc');\n\nconsole.log(buf.length);",
    "reg_date": "2021-10-14T19:40:46.000Z"
  },
  {
    "id": 413,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node change version windows",
    "description": "npm install -g node@<version>nvm use --delete-prefix $NODE_VERSION\n\nexample:\nnvm use --delete-prefix v8.9.4",
    "reg_date": "2021-10-14T19:40:46.000Z"
  },
  {
    "id": 414,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node check if file exists",
    "description": "const fs = require(\"fs\"); // Or `import fs from \"fs\";` with ESM\nif (fs.existsSync(path)) {\n    // Do something\n}const fs = require(\"fs\"); // Or `import fs from \"fs\";` with ESM\nif (fs.existsSync(path)) {\n    // Do something\n}\nconst fs = require('fs')\n// We will convert sync function into a promise function\n// so when is ready will provide the result without blocking.\nconst exists = async (path) => {\n\treturn await new Promise((resolve) => {\n\t\tresolve(fs.existsSync(path));\n\t});\n};\n// If you have a file name samples on same root it will result true.\nexists('./samples.txt').then(res => console.log(res))\nconsole.log(`I'm not blocked as I'll show up on first`)const fs = require('fs');\n\nlet file = '../path/to/chad_warden.mpeg';\n\n// async\nconst fileExists = (file) => {\n    return new Promise((resolve) => {\n        fs.access(file, fs.constants.F_OK, (err) => {\n            err ? resolve(false) : resolve(true)\n        });\n    })\n}\n\n// sync\nconst fileExistsSync = (file) => {\n    try {\n        fs.accessSync(file, fs.constants.R_OK | fs.constants.W_OK);\n        return true;\n      } catch (err) {\n        return false;\n      }\n}",
    "reg_date": "2021-10-14T19:40:46.000Z"
  },
  {
    "id": 415,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node check if running on localhost?",
    "description": "var os = require('os');\nvar database_uri;\n\nif(os.hostname().indexOf(\"local\") > -1)\n  // Server running on Localhost\n  database_uri = \"mongodb://localhost/database\";\nelse\n  // Server running on remote server\n  database_uri = \"mongodb://remotehost/database\";\n\n",
    "reg_date": "2021-10-14T19:40:46.000Z"
  },
  {
    "id": 416,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node close rabbitmq connection",
    "description": "  async sendMsg(msg) {\n    const channel = await this.initChannel();\n\n    const sendResult = channel.sendToQueue(this.queue, Buffer.from(msg), {\n      persistent: true,\n    });\n\n    if (!sendResult) {\n      await new Promise((resolve) => channel.once('drain', () => resolve));\n    }\n  }\n\n  async close() {\n    if (this.channel) await this.channel.close();\n    await this.conn.close();\n  }",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 417,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node closes once you open app react-native",
    "description": "",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 418,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node cluster",
    "description": "",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 419,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node code comment process real time",
    "description": "",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 420,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node code to read json file",
    "description": "const fs = require('fs');\nconst path = require('path');\n\nlet rawdata = fs.readFileSync(path.resolve(__dirname, 'student.json'));\nlet student = JSON.parse(rawdata);\nconsole.log(student);D:\\NodeJs>node readsync.js\n *START*\nOutput Content:\n /* content here */\n*EXIT*\n// Define JSON File\n var fs = require(\"fs\");\n console.log(\"\\n *STARTING* \\n\");\n// Get content from file\n var contents = fs.readFileSync(\"jsoncontent.json\");\n// Define to JSON type\n var jsonContent = JSON.parse(contents);\n// Get Value from JSON\n console.log(\"User Name:\", jsonContent.username);\n console.log(\"Email:\", jsonContent.email);\n console.log(\"Password:\", jsonContent.password);\nlog(\"\\n *EXIT* \\n\");\nconst ciqlJson = require(\"ciql-json\")\n\nciqlJson\n    .open(\"file.json\")\n    .set(\"address\", {town : \"\", city : \"\"})\n    .save()// Read Synchrously\nvar fs = require(\"fs\");\nconsole.log(\"\\n *START* \\n\");\nvar content = fs.readFileSync(\"content.txt\");\nconsole.log(\"Output Content : \\n\"+ content);\nconsole.log(\"\\n *EXIT* \\n\");\n",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 421,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node colors log",
    "description": "Reset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"\n",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 422,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node command get to much time",
    "description": "OLDPATH=\"$PATH\"\nPATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\n",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 423,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node console color",
    "description": "// Second argument is inserted in place of %s\n\nconsole.log('\\x1b[36m%s\\x1b[0m', 'I am cyan');  //cyan\nconsole.log('\\x1b[33m%s\\x1b[0m', stringToMakeYellow);  //yellow\n\nReset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"Reset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"const Colors = {\n  Reset: \"\\x1b[0m\",\n  Bright: \"\\x1b[1m\",\n  Dim: \"\\x1b[2m\",\n  Underscore: \"\\x1b[4m\",\n  Blink: \"\\x1b[5m\",\n  Reverse: \"\\x1b[7m\",\n  Hidden: \"\\x1b[8m\",\n\n  black: \"\\x1b[30m\",\n  red: \"\\x1b[31m\",\n  green: \"\\x1b[32m\",\n  yellow: \"\\x1b[33m\",\n  blue: \"\\x1b[34m\",\n  magenta: \"\\x1b[35m\",\n  cyan: \"\\x1b[36m\",\n  white: \"\\x1b[37m\",\n\n  BgBlack: \"\\x1b[40m\",\n  BgRed: \"\\x1b[41m\",\n  BgGreen: \"\\x1b[42m\",\n  BgYellow: \"\\x1b[43m\",\n  BgBlue: \"\\x1b[44m\",\n  BgMagenta: \"\\x1b[45m\",\n  BgCyan: \"\\x1b[46m\",\n  BgWhite: \"\\x1b[47m\",\n};\n/**\n* Colorize a string of text!\n* @param {String} text The string text to colorize\n* @param {String} options Strings of options (like \"white\", \"red\", \"BgWhite\", \"BgRed\", \"Bold\", \"Dim\", etc.)\n* @returns {String} Colored String\n*/\nfunction colorize(text = \"\", ...options) {\n  let opts = \"\";\n  options = options ?? \"white\";\n  options.forEach((opt) => {\n    opts += Colors[opt] ?? Colors.white;\n  });\n  return `${opts}${text}${Colors.Reset}`;\n}",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 424,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node console showing object object",
    "description": "const util = require('util')\n\nconsole.log(util.inspect(myObject, {showHidden: false, depth: null}))\n\n// alternative shortcut\nconsole.log(util.inspect(myObject, false, null, true /* enable colors */))",
    "reg_date": "2021-10-14T19:40:47.000Z"
  },
  {
    "id": 425,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node create buffer",
    "description": "// if the buffers contain text\nbuffer.toString(encoding) // encoding = 'utf-8'\n\n// if you know how many bytes the buffer contains then\nbuffer.toString(encoding, 0, numberOfBytes) // numberOfBytes = 12\nconst Stream = require('stream')\n\nconst readableStream = new Stream.Readable()\nconst writableStream = new Stream.Writable()",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 426,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node cron every second",
    "description": "",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 427,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node cron install",
    "description": "",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 428,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node cron schedule specific time",
    "description": "const CronJob = require('../lib/cron.js').CronJob;\n\nconsole.log('Before job instantiation');\nlet date = new Date();\ndate.setSeconds(date.getSeconds()+2);\nconst job = new CronJob(date, function() {\n\tconst d = new Date();\n\tconsole.log('Specific date:', date, ', onTick at:', d);\n});\nconsole.log('After job instantiation');\njob.start();",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 429,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node dotenv",
    "description": "require('dotenv').config();\n\nconsole.log(process.env.MY_ENV_VAR);$ npm install dotenv\n\n//--------------------\n\non file .env \n//--------------------\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=s1mpl3\nDB_NAME=banco_de_dados\nDB_PORT=3306\n//--------------------\n\nimport the config from .env file \n//--------------------\n\nrequire('dotenv').config()\nmodule.exports = {\n    username:process.env.DB_USER,\n    password:process.env.DB_PASS,\n    database:process.env.DB_NAME,\n    host:process.env.DB_HOST,\n    dialect:\"mysql\"\n}\n// Terminal/CMD\nnpm i dotenv\n\n//In .env file\nspecial_key = 0000000 //whatever the key\n\n//In JS file - 2 point usage\n//1 - initialisation\nrequire('dotenv').config();\n//2 - using the special key\nconst specialKey = process.env.special_key\nconsole.log(specialKey);npm install dotenv// when yours .env is in other place then default, you can set path to it\n\nconst path = require('path')\nrequire('dotenv').config({ path: path.resolve(__dirname, '../../.env') }); //use as many '../' as you needRename your file to just .env, removing any prefix\nrequire it as early as possible in your application with the code snippet below\nrequire('dotenv').config();",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 430,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node downgrade windows",
    "description": "npm install -g node@<version>$ npm install -g n\n$ n 6.10.3For window\nnvm install v0.10.33 \nnvm use v0.10.33   ",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 431,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node download s3 file",
    "description": "const AWS = require('aws-sdk');\nAWS.config.update(\n  {\n    accessKeyId: \"....\",\n    secretAccessKey: \"...\",\n    region: 'ap-southeast-1'\n  }\n);\nconst s3 = new AWS.S3();\nconst options = {\n  Bucket    : '/bucket-url',\n  Key    : fileKey,\n};\nconst fileStream = s3.getObject(options).createReadStream();\nfileStream.pipe(res);",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 432,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node environment",
    "description": "var http = require(\"http\");\n\nhttp.createServer(function (request, response) {\n   // Send the HTTP header \n   // HTTP Status: 200 : OK\n   // Content Type: text/plain\n   response.writeHead(200, {'Content-Type': 'text/plain'});\n   \n   // Send the response body as \"Hello World\"\n   response.end('Hello World\\n');\n}).listen(8081);\n\n// Console will print the message\nconsole.log('Server running at http://127.0.0.1:8081/');",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 433,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node eslint",
    "description": "$ npm install eslint --save-dev\n$ ./node_modules/.bin/eslint --init// package.json\n\"devDependencies\": {\n    \"eslint\": \"^7.2.0\",\n\t\"eslint-plugin-node\": \"^11.1.0\"\n}\n\n// .eslintrc.json\n{\n   \"extends\": [\n      \"eslint:recommended\",\n      \"plugin:node/recommended\"\n   ],\n   \"parserOptions\": {\n      // Only ESLint 6.2.0 and later support ES2020.\n      \"ecmaVersion\": 2020\n   },\n   \"rules\": {\n      \"node/exports-style\": [\"error\", \"module.exports\"],\n      \"node/file-extension-in-import\": [\"error\", \"always\"],\n      \"node/prefer-global/buffer\": [\"error\", \"always\"],\n      \"node/prefer-global/console\": [\"error\", \"always\"],\n      \"node/prefer-global/process\": [\"error\", \"always\"],\n      \"node/prefer-global/url-search-params\": [\"error\", \"always\"],\n      \"node/prefer-global/url\": [\"error\", \"always\"],\n      \"node/prefer-promises/dns\": \"error\",\n      \"node/prefer-promises/fs\": \"error\"\n   }\n}",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 434,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node exec",
    "description": "// You can use 'exec' this way\n\nconst { exec } = require(\"child_process\");\n\nexec(\"ls -la\", (error, stdout, stderr) => {\n    if (error) {\n        console.log(`error: ${error.message}`);\n        return;\n    }\n    if (stderr) {\n        console.log(`stderr: ${stderr}`);\n        return;\n    }\n    console.log(`stdout: ${stdout}`);\n});\n// Async\nconst { exec } = require(\"child_process\"); // import { exec } from \"child_process\"\n\nexec(\"ls -la\", (error, stdout, stderr) => {\n    if (error) {\n        console.log(`error: ${error.message}`);\n        return;\n    }\n    if (stderr) {\n        console.log(`stderr: ${stderr}`);\n        return;\n    }\n    console.log(`stdout: ${stdout}`);\n});\n\n// Sync\nconst { execSync } = require(\"child_process\"); // import { execSync } from \"child_process\"\n\nconst result = execSync(\"ls -la\")\nconsole.log(result.toString())const { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\nvar child = require('child_process').exec('python celulas.py')\nchild.stdout.pipe(process.stdout)\nchild.on('exit', function() {\n  process.exit()\n})// OR...\nconst { exec, spawn } = require('child_process');\nexec('my.bat', (err, stdout, stderr) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n\n// Script with spaces in the filename:\nconst bat = spawn('\"my script.cmd\"', ['a', 'b'], { shell: true });\n// or:\nexec('\"my script.cmd\" a b', (err, stdout, stderr) => {\n  // ...\n});\nvar execSync = require('exec-sync');\n\nvar user = execSync('python celulas.py');",
    "reg_date": "2021-10-14T19:40:48.000Z"
  },
  {
    "id": 435,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node execute shell commands",
    "description": "const { exec } = require(\"child_process\");\nexec(\"cat index.js\", (error, data, getter) => {\n\tif(error){\n\t\tconsole.log(\"error\",error.message);\n\t\treturn;\n\t}\n\tif(getter){\n\t\tconsole.log(\"data\",data);\n\t\treturn;\n\t}\n\tconsole.log(\"data\",data);\n\n});\n",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 436,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express",
    "description": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express$ npm install expressconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n$ npm install express --no-save\nnpm install express --save",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 437,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express app.listen at specific port & host",
    "description": "const express = require('express');\nconst app = express();\napp.listen('9000','0.0.0.0',()=>{\n      console.log(\"server is listening on 9000 port\");\n})\n",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 438,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express chat app",
    "description": "",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 439,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express cors headers",
    "description": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\nvar express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});$ npm install cors\n",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 440,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express dynamic route and error handler",
    "description": "app.use(function (req, res, next) {\n  res.status(404).send(\"Sorry can't find that!\")\n})\n",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 441,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express js set server timeout",
    "description": "const PORT = 3000;\nconst server = app.listen(PORT);\n\nconst timeout = 50*1000; // example timeout of 50 seconds\nserver.setTimeout(timeout);",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 442,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express mongo boilerplate with jwt",
    "description": "git clone https://github.com/hagopj13/node-express-mongoose-boilerplate.git",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 443,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express post request json",
    "description": "var express = require('express');\n\nvar app = express();\n\napp.use(express.json()); // built-in middleware for express\n\napp.post('/', function(request, response){\n \tlet myJson = request.body;      // your JSON\n\tlet myValue = request.body.myKey;\t// a value from your JSON\n\tresponse.send(myJson);\t // echo the result back\n});\n\napp.listen(3000);",
    "reg_date": "2021-10-14T19:40:49.000Z"
  },
  {
    "id": 444,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express send header",
    "description": "res.set('Content-Type', 'text/plain');\n",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 445,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express server static files",
    "description": "var express = require('express');\nvar app = express();\nvar path = require('path');\n\n//app.use(express.static(__dirname)); // Current directory is root\napp.use(express.static(path.join(__dirname, 'public'))); //  \"public\" off of current is root\n\napp.listen(80);\nconsole.log('Listening on port 80');",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 446,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express setup",
    "description": "npm i expressnpm init -y\nnpm i express\n$ npx express-generator\nnpm install express@4yarn add express \nyarn add --dev @types/express",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 447,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express start code",
    "description": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 448,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express table view",
    "description": "<table>\n  <tr>\n    <th>id</th><th>Name</th>\n  </tr>\n\n  <% for (var i = 0; i < data.length; i++) { %>\n    <tr>\n      <td><%= data[i].id %></td>\n      <td><%= data[i].name %></td>\n    </tr>    \n  <% } %>\n</table>\n",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 449,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node express verify account link api",
    "description": "var emailRegex = /^[-!#$%&'*+\\/0-9=?A-Z^_a-z{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\n\nfunction isEmailValid(email) {\n    if (!email)\n        return false;\n\n    if(email.length>254)\n        return false;\n\n    var valid = emailRegex.test(email);\n    if(!valid)\n        return false;\n\n    // Further checking of some things regex can't handle\n    var parts = email.split(\"@\");\n    if(parts[0].length>64)\n        return false;\n\n    var domainParts = parts[1].split(\".\");\n    if(domainParts.some(function(part) { return part.length>63; }))\n        return false;\n\n    return true;\n}\n",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 450,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node fetch",
    "description": "const fetch = require('node-fetch');\t//npm install node-fetch\n\nfetch('https://httpbin.org/post', {\n  method: 'POST',\n  body: 'a=1'\n})\n  .then(res => res.json())\n  .then(json => {\n\t// Do something...\n  })\n  .catch(err => console.log(err));$ npm install node-fetch --save//Plain text or HTML\nfetch('https://github.com/').then(res => res.text()).then(body => console.log(body));\n\n//JSON\nfetch('https://api.github.com/users/github')\n    .then(res => res.json())\n    .then(json => console.log(json));\n\n//Simple Post\nfetch('https://httpbin.org/post', { method: 'POST', body: 'a=1' })\n    .then(res => res.json()) // expecting a json response\n    .then(json => console.log(json));\n\n//Post with JSON\nconst body = { a: 1 };\n \nfetch('https://httpbin.org/post', {\n        method: 'post',\n        body:    JSON.stringify(body),\n        headers: { 'Content-Type': 'application/json' },\n    })\n    .then(res => res.json())\n    .then(json => console.log(json));\n//Post with form parameters\n\nconst { URLSearchParams } = require('url');\n \nconst params = new URLSearchParams();\nparams.append('a', 1);\n \nfetch('https://httpbin.org/post', { method: 'POST', body: params })\n    .then(res => res.json())\n    .then(json => console.log(json));const fetch = require('node-fetch');",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 451,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node fetch response body",
    "description": "const fetch = require('node-fetch');\t//npm install node-fetch\n\nfetch('https://httpbin.org/post', {\n  method: 'POST',\n  body: 'a=1'\n})\n  .then(res => res.json())\n  .then(json => {\n\t// Do something...\n  })\n  .catch(err => console.log(err)); fetch('https://api.github.com/users/github')    \n   .then(res => res.json())    \n   .then(json => console.log(json));",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 452,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node file change event listener",
    "description": "",
    "reg_date": "2021-10-14T19:40:50.000Z"
  },
  {
    "id": 453,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node filesystem change directory of a file",
    "description": "",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 454,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node format variable in string",
    "description": "let a = `hello ${name}`    // NOTE!!!!!!!! ` not ' or \"\n",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 455,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node fs",
    "description": "const fs = require('fs')\n\ntry {\n  const data = fs.readFileSync('/Users/joe/test.txt', 'utf8')\n  console.log(data)\n} catch (err) {\n  console.error(err)\n}const fs = require('fs');\n\nfs.writeFile(\"/tmp/test\", \"Hey there!\", function(err) {\n    if(err) {\n        return console.log(err);\n    }\n    console.log(\"The file was saved!\");\n}); \n\n// Or\nfs.writeFileSync('/tmp/test-sync', 'Hey there!');const fs = require('fs');\n\nfs.readFile('/Users/joe/test.txt', 'utf8' , (err, data) => {\n  if (err) {\n    console.error(err);\n    return\n  }\n  console.log(data);\n});import fs from \"fs\";let myFile = \"./myText.txt\";\nconst fs = require(\"fs\");\n\t\t\napp.all('/test', async (req, res) => {\n\ttry {\n\t\tconst readData = fs.readFileSync(myFile, 'utf8');\n\t\tif (readData) {\n\t\t\tres.send(readData)\n\t\t}\n\t} catch (error) {\n\t\tres.send(\"something is wrong\", error)\n\t}\n})JScopieddoneconst fs = require('fs')\n",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 456,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node fs exists",
    "description": "const fs = require('fs');\n\nfs.writeFile(\"/tmp/test\", \"Hey there!\", function(err) {\n    if(err) {\n        return console.log(err);\n    }\n    console.log(\"The file was saved!\");\n}); \n\n// Or\nfs.writeFileSync('/tmp/test-sync', 'Hey there!');const { promises: Fs } = require('fs')\n\nasync function exists (path) {  \n  try {\n    await Fs.access(path)\n    return true\n  } catch {\n    return false\n  }\n}\n\n// Example:\nconst Path = require('path')  \nconst path = Path.join(__dirname, \"existing-file.txt\")\n\nawait exists(path)  \n// true\n",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 457,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node fs full path",
    "description": "var path = require(\"path\");\nvar absolutePath = path.resolve(\"Relative file path\");\n",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 458,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node fs remove file sync",
    "description": "",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 459,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node fs stream pipe promise",
    "description": "",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 460,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node get absolute path",
    "description": "",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 461,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node get all files in folder",
    "description": "fs.readdir('./', (err, files) => {\n    files.forEach(file => {\n    //   console.log(file);\n})});//requiring path and fs modules\nconst path = require('path');\nconst fs = require('fs');\n//joining path of directory \nconst directoryPath = path.join(__dirname, 'Documents');\n//passsing directoryPath and callback function\nfs.readdir(directoryPath, function (err, files) {\n    //handling error\n    if (err) {\n        return console.log('Unable to scan directory: ' + err);\n    } \n    //listing all files using forEach\n    files.forEach(function (file) {\n        // Do whatever you want to do with the file\n        console.log(file); \n    });\n});const path = require('path');\nconst fs = require('fs');\n\nfs.readdir(\n  path.resolve(__dirname, 'MyFolder'),\n  (err, files) => {\n    if (err) throw err;\n    \n    for (let file of files) {\n      console.log(file);\n    }\n  }\n);fs.readdir('./', (err, files) => {\n        files.forEach(file => {\n        //   console.log(file);\n        }});",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 462,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node get current url",
    "description": "var fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;const fullUrl = `${req.protocol}://${req.get(\"host\")}${req.originalUrl}`;const https = require(\"https\"); //First require the module \n\nconst url = https://url.com \n//good practice is to assign the url to a const named url//\n\napp.get(\"/\", function(req, res){\n    https.get(url, function(res){\n        console.log(res);//if you wish to console log the respone from the server\n    });",
    "reg_date": "2021-10-14T19:40:51.000Z"
  },
  {
    "id": 463,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node get path of current file",
    "description": "module.filename",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 464,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node get root directory",
    "description": "",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 465,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node get unix timestamp",
    "description": "var currentTimeInSeconds=Math.floor(Date.now()/1000); //unix timestamp in seconds\nvar currentTimeInMilliseconds=Date.now(); // unix timestamp in millisecondsMath.floor(new Date() / 1000) // in secondsMath.floor(+new Date() / 1000)\nfunction getUnixTime() {\n  return (Date.now() / 1000) | 0;  \n}",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 466,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node get value from map",
    "description": "let myMap = new Map();\n\nmyMap.set(\"key1\", \"value1\");\nmyMap.set(\"key2\", \"value2\");\n\nconsole.log(myMap.has(\"key1\")); // true\nconsole.log(myMap.has(\"key2\")); // true\n\nconsole.log(myMap.get(\"key1\")); // value1\nconsole.log(myMap.get(\"key2\")); // value2\n\n// NOTE: DO NOT try to access map values using [].\n// myMap[\"key1\"] = \"value1\";",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 467,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node gitignore",
    "description": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\ngitignore node js# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 468,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node global directory windows",
    "description": "C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\node_modules\n\nOr run:\n\nnpm config ls -l | grep prefix\n; prefix = \"C:\\\\Program Files\\\\nodejs\" (overridden)\nprefix = \"C:\\\\Users\\\\bjorn\\\\AppData\\\\Roaming\\\\npm\"",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 469,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node google client api to get user profile with already fetched token",
    "description": "var google = require('googleapis').google;\nvar OAuth2 = google.auth.OAuth2;\nvar oauth2Client = new OAuth2();\noauth2Client.setCredentials({access_token: 'ACCESS TOKEN HERE'});\nvar oauth2 = google.oauth2({\n  auth: oauth2Client,\n  version: 'v2'\n});\noauth2.userinfo.get(\n  function(err, res) {\n    if (err) {\n       console.log(err);\n    } else {\n       console.log(res);\n    }\n});\n",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 470,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node how to set environment variable",
    "description": "",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 471,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node http2 post",
    "description": "     let res = \"\";\n      let postbody = JSON.stringify({\n       key: value\n      });\n      let baseurl = 'baseurl'\n      let path = '/any-path'\n      const client = http2.connect(baseurl);\n      const req = client.request({\n       \":method\": \"POST\",\n       \":path\": path,\n       \"content-type\": \"application/json\",\n       \"content-length\": Buffer.byteLength(postbody),\n      });\n\n\n      req.on(\"response\", (headers, flags) => {\n       for (const name in headers) {\n        console.log(`${name}: ${headers[name]}`);\n       }\n\n      });\n      req.on(\"data\", chunk => {\n       res = res + chunk;\n      });\n      req.on(\"end\", () => {\n       client.close();\n      });\n\n   req.end(postbody)\n",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 472,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node http request",
    "description": "/* ====== create node.js server with core 'http' module ====== */\n// dependencies\nconst http = require(\"http\");\n\n// PORT\nconst PORT = 3000;\n\n// server create\nconst server = http.createServer((req, res) => {\n   if (req.url === \"/\") {\n      res.write(\"This is home page.\");\n      res.end();\n   } else if (req.url === \"/about\" && req.method === \"GET\") {\n      res.write(\"This is about page.\");\n      res.end();\n   } else {\n      res.write(\"Not Found!\");\n      res.end();\n   }\n});\n\n// server listen port\nserver.listen(PORT);\n\nconsole.log(`Server is running on PORT: ${PORT}`);\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000const https = require('https')\nconst options = {\n  hostname: 'whatever.com',\n  port: 443,\n  path: '/todos',\n  method: 'GET'\n}\n\nconst req = https.request(options, res => {\n  console.log(`statusCode: ${res.statusCode}`)\n\n  res.on('data', d => {\n    process.stdout.write(d)\n  })\n})\n\nreq.on('error', error => {\n  console.error(error)\n})\n\nreq.end()let request = require('request')\n\nconst formData = {\n  // Pass a simple key-value pair\n  my_field: 'my_value',\n  // Pass data via Buffers\n  my_buffer: Buffer.from([1, 2, 3]),\n  // Pass data via Streams\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n  // Pass multiple values /w an Array\n  attachments: [\n    fs.createReadStream(__dirname + '/attachment1.jpg'),\n    fs.createReadStream(__dirname + '/attachment2.jpg')\n  ],\n  // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}\n  // Use case: for some types of streams, you'll need to provide \"file\"-related information manually.\n  // See the `form-data` README for more information about options: https://github.com/form-data/form-data\n  custom_file: {\n    value:  fs.createReadStream('/dev/urandom'),\n    options: {\n      filename: 'topsecret.jpg',\n      contentType: 'image/jpeg'\n    }\n  }\n};\nrequest.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});const request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  console.error('error:', error); // Print the error if one occurred\n  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n  console.log('body:', body); // Print the HTML for the Google homepage.\n});",
    "reg_date": "2021-10-14T19:40:52.000Z"
  },
  {
    "id": 473,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node https",
    "description": "const https = require('https');\n\nhttps.get('https://encrypted.google.com/', (res) => {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n\n}).on('error', (e) => {\n  console.error(e);\n});",
    "reg_date": "2021-10-14T19:40:53.000Z"
  },
  {
    "id": 474,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node if file exists",
    "description": "const fs = require(\"fs\"); // Or `import fs from \"fs\";` with ESM\nif (fs.existsSync(path)) {\n    // Do something\n}const fs = require(\"fs\"); // Or `import fs from \"fs\";` with ESM\nif (fs.existsSync(path)) {\n    // Do something\n}\nconst fs = require('fs');\n\nlet file = '../path/to/chad_warden.mpeg';\n\n// async\nconst fileExists = (file) => {\n    return new Promise((resolve) => {\n        fs.access(file, fs.constants.F_OK, (err) => {\n            err ? resolve(false) : resolve(true)\n        });\n    })\n}\n\n// sync\nconst fileExistsSync = (file) => {\n    try {\n        fs.accessSync(file, fs.constants.R_OK | fs.constants.W_OK);\n        return true;\n      } catch (err) {\n        return false;\n      }\n}function executeIfFileExist(src, callback) {\n    var xhr = new XMLHttpRequest()\n    xhr.onreadystatechange = function() {\n        if (this.readyState === this.DONE) {\n            callback()\n        }\n    }\n    xhr.open('HEAD', src)\n}",
    "reg_date": "2021-10-14T19:40:53.000Z"
  },
  {
    "id": 475,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node if path exists",
    "description": "const fs = require(\"fs\"); // Or `import fs from \"fs\";` with ESM\nif (fs.existsSync(path)) {\n    // Do something\n}",
    "reg_date": "2021-10-14T19:40:53.000Z"
  },
  {
    "id": 476,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node import all functions from file",
    "description": "//we are in ./utils/dbHelper.js, here we have some helper functions\nfunction connect() {\n  // connect do db...\n}\n\nfunction closeConnection() {\n  // close connection to DB...\n}\n\n//let's export this function to show them to the world outside\nmodule.exports = {\n  connect(),\n    closeConnection()\n};\n\n// now we are in ./main.js and we want use helper functions from dbHelper.js\nconst DbHelper = require ('./utils/dbHelper'); // import all file and name it DbHelper\nDbHelper.connect(); // use function from './utils/dbHelper' using dot(.)\n\n// or we can import only chosen function(s)\nconst { connect, closeConnection } = require ('./utils/dbHelper');\nconnect(); // use function from class without dot",
    "reg_date": "2021-10-14T19:40:53.000Z"
  },
  {
    "id": 477,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node import fs",
    "description": "import {fs} from 'fs';\nimport fs from \"fs\";let myFile = \"./myText.txt\";\nconst fs = require(\"fs\");\n\t\t\napp.all('/test', async (req, res) => {\n\ttry {\n\t\tconst readData = fs.readFileSync(myFile, 'utf8');\n\t\tif (readData) {\n\t\t\tres.send(readData)\n\t\t}\n\t} catch (error) {\n\t\tres.send(\"something is wrong\", error)\n\t}\n})",
    "reg_date": "2021-10-14T19:40:53.000Z"
  },
  {
    "id": 478,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node import inside function",
    "description": "require() is on-demand loading. Once a module has been \nloaded it won't be reloaded if the require() call is\nrun again. By putting it inside a function instead of\nyour top level module code, you can delay its loading\nor potentially avoid it if you never actually invoke\nthat function. However, require() is synchronous and\nloads the module from disk so best practice is to load\nany modules you need at application start before your \napplication starts serving requests which then ensures \nthat only asynchronous IO happens while your\napplication is operational.\n\nNode is single threaded so the memory footprint \nof loading a module is not per-connection, \n  it's per-process. Loading a module is a\none-off to get it into memory.\n\nJust stick with the convention here and \nrequire the modules you need at the top \nlevel scope of your app before you start\nprocessing requests. I think this is a \ncase of, if you have to ask whether you need to write\nyour code in an unusual way, you don't need to write your\ncode in an unusual way.\n\n",
    "reg_date": "2021-10-14T19:40:53.000Z"
  },
  {
    "id": 479,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node input",
    "description": "const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n \nreadline.question('who are you: ', name => {\n\tconsole.log(`hello, hi there ${name}`);\n\treadline.close();\n})const readline = require(\"readline\");\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question(\"What is your name ? \", function saveInput(name) {\n  console.log(`His name is ${name}`);\n  rl.close();\n});\n\nrl.on(\"close\", function saveInput() {\n    console.log(\"\\nBYE BYE !!!\");\n    process.exit(0);\n});const readline = require('readline').createInterface({  input: process.stdin,  output: process.stdout}); readline.question('Who are you?', name => {  console.log(`Hey there ${name}!`);  readline.close();});",
    "reg_date": "2021-10-14T19:40:53.000Z"
  },
  {
    "id": 480,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node ja sap concur",
    "description": "",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 481,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js",
    "description": "NodeJs is Runtime environment for executing Js code, Outside Of Browser.\nit is build upon Chrome v8 engine using c++.\n\nUses of Node:\n\n-can build back-end services like API which can be used as backend for \ndiferent platform Apps(Website, MobileApp, Desktop App).\n\n-is Asynchronous by default means Single thread handle all the request\nand response, thereby providing more speed, highly scalable, built time half \ncompare to other tech in market, 33% few line of code, 40% fewer files,\ncan handle 2times more requests/secs, 35% fast response time.\n// Hope you like the short Description.// \n// Great choice for web development\n// Download: https://nodejs.org/en/download/\n// Node js allows you to run javascript outside of your browser\nex: you are able to run it on your terminalconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\nNode.js = Runtime Environment + JavaScript Library\ndfgdgfdfg",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 482,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js + mongoose",
    "description": "// getting-started.js\nconst mongoose = require('mongoose');\nmongoose.connect(\"mongodb://localhost:27017/name\", { useUnifiedTopology: true, useNewUrlParser: true });var db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  // we're connected!\n});// getting-started.js\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/test', {useNewUrlParser: true});await mongoose.connect('mongodb://localhost/my_database', {  useNewUrlParser: true,  useUnifiedTopology: true});const db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  // we're connected!\n});",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 483,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js arabic number to english number",
    "description": "npm install persianjs",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 484,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js ask for user input",
    "description": "const readline = require(\"readline\");\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question(\"What is your name ? \", function saveInput(name) {\n  console.log(`His name is ${name}`);\n  rl.close();\n});\n\nrl.on(\"close\", function saveInput() {\n    console.log(\"\\nBYE BYE !!!\");\n    process.exit(0);\n});const readline = require(\"readline\");\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question(\"What is your name ? \", function(name) {\n    rl.question(\"Where do you live ? \", function(country) {\n        console.log(`${name}, is a citizen of ${country}`);\n        rl.close();\n    });\n});\n\nrl.on(\"close\", function() {\n    console.log(\"\\nBYE BYE !!!\");\n    process.exit(0);\n});",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 485,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js async delay",
    "description": "const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n(async () => {\n  console.log('1');\n  await delay(1000);\n  console.log('2');\n})();const { promisify } = require('util');\n\nconst delay = promisify(setTimeout);\n\n// Usage:\n(async () => {\n  console.log('1');\n  await delay(1000);\n  console.log('2');\n})();",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 486,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js callback",
    "description": "function processData (callback) {\n  fetchData(function (err, data) {\n    if (err) {\n      console.log(\"An error has occurred. Abort everything!\");\n      return callback(err);\n    }\n    data += 1;\n    callback(null, data);\n  });\n}\n\nprocessData(function (err, data) {\n  if (err) {\n      console.err(err);\n  } else {\n    console.log(\"Data: \" + data);\n  }\n});",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 487,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js catch any  errors",
    "description": "process.on('uncaughtException', function(err) {\n  console.log('Caught exception: ' + err);\n});",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 488,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js change text color",
    "description": "",
    "reg_date": "2021-10-14T19:40:54.000Z"
  },
  {
    "id": 489,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js check if a user exists in mysql",
    "description": "",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 490,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js check if called from command line",
    "description": "",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 491,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js check if called from module",
    "description": "if (require.main === module) {\n    console.log('called directly');\n} else {\n    console.log('required as a module');\n}",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 492,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js check ram usage",
    "description": "const arr = [1, 2, 3, 4, 5, 6, 9, 7, 8, 9, 10];\narr.reverse();\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);const Discord = require('discord.js');\nconst client = new Discord.Client();\nconst config = require(\"./config.json\")\n\n\n\n\nclient.on(\"ready\", () => {\n    console.log(`Bot Foi Iniciado, com ${client.users.cache.size} usuários, em ${client.channels.cache.size} canais, em ${client.guilds.cache.size} servidores.`);\n    client.user.setActivity(`Dinheiro Na Putaria`);\n    client.user.setUsername('Hidrz')\n});\nconst prefix = \"!\";\n\nclient.on(\"message\", async message => {\n\n    if (message.author.bot) return;\n    if (message.channel.type == 'dm') return;\n    if (!message.guild) return;\n    if (!message.content.toLowerCase().startsWith(config.prefix.toLowerCase())) return;\n    if (message.content.startsWith(`<@!${client.user.id}>`) || message.content.startsWith(`<@${client.user.id}>`)) return;\n\n   const args = message.content\n       .trim().slice(config.prefix.length)\n       .split(/ +/g);\n   const command = args.shift().toLowerCase();\n\n   try {\n       const commandFile = require(`./commands/${command}.js`)\n       commandFile.run(client, message, args);\n   } catch (err) {\n   console.error('Erro:' + err);\n   }\n    \n   \n    \n\n    \n});\n   \n\n\n\nclient.login(config.token)\n",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 493,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js check type of variable",
    "description": "var foo = \"Hello\";\nconsole.log(typeof foo); // stringif (typeof i != \"number\") {\n    console.log('This is not number');\n}// You can use the built-in method 'typeof' in order to check the variable datatype\n\n//examples:\n\ntypeof \"hello\" // \"string\"\n\n//or\nvar a = 1;\ntypeof(a);\n//the output will be > 'number'",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 494,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js child process read stdout",
    "description": "//Prints stdout of childprocess(here: from spawning a python script) \n// line by line, the rest (like errors) as whole:\n\nconst { spawn } = require(\"child_process\");\nconst { chunksToLinesAsync, chomp } = require('@rauschma/stringio');\n\nconst file = require.resolve('./dummyData.py');\n\nasync function main() {\n    const ls = spawn(\"python\" , [file]);\n\n    await echoStdout(ls.stdout); \n\n    async function echoStdout(readable) {\n        for await (const line of chunksToLinesAsync(readable)) { // (C)\n        console.log('LINE: '+chomp(line))\n        }\n    }\n\n    ls.stdout.on(\"data\", data => {\n        console.log(`stdout: ${data}`);\n    });\n    \n    ls.stderr.on(\"data\", data => {\n        console.log(`stderr: ${data}`);\n    });\n    \n    ls.on('error', (error) => {\n        console.log(`error: ${error.message}`);\n    });\n    \n    ls.on(\"close\", code => {\n        console.log(`child process exited with code ${code}`);\n    }); \n}\n\nmain();",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 495,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js class",
    "description": "",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 496,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js code for saving first middle and last name",
    "description": "var studentFullName=\"John Smith\";\nvar details=[]\nvar details=studentFullName.split(' ');\nconsole.log(\"StudentFirstName=\"+details[0])\nconsole.log(\"StudentLastName=\"+details[1]);",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 497,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js colors",
    "description": "",
    "reg_date": "2021-10-14T19:40:55.000Z"
  },
  {
    "id": 498,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js connect to mongodb using mongoose",
    "description": "",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 499,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js console.table",
    "description": "// an object whose properties are strings\n\nfunction Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nvar me = new Person(\"John\", \"Smith\");\n\nconsole.table(me);",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 500,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js console colors",
    "description": "// Second argument is inserted in place of %s\n\nconsole.log('\\x1b[36m%s\\x1b[0m', 'I am cyan');  //cyan\nconsole.log('\\x1b[33m%s\\x1b[0m', stringToMakeYellow);  //yellow\n\nReset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"Reset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"const Colors = {\n  Reset: \"\\x1b[0m\",\n  Bright: \"\\x1b[1m\",\n  Dim: \"\\x1b[2m\",\n  Underscore: \"\\x1b[4m\",\n  Blink: \"\\x1b[5m\",\n  Reverse: \"\\x1b[7m\",\n  Hidden: \"\\x1b[8m\",\n\n  black: \"\\x1b[30m\",\n  red: \"\\x1b[31m\",\n  green: \"\\x1b[32m\",\n  yellow: \"\\x1b[33m\",\n  blue: \"\\x1b[34m\",\n  magenta: \"\\x1b[35m\",\n  cyan: \"\\x1b[36m\",\n  white: \"\\x1b[37m\",\n\n  BgBlack: \"\\x1b[40m\",\n  BgRed: \"\\x1b[41m\",\n  BgGreen: \"\\x1b[42m\",\n  BgYellow: \"\\x1b[43m\",\n  BgBlue: \"\\x1b[44m\",\n  BgMagenta: \"\\x1b[45m\",\n  BgCyan: \"\\x1b[46m\",\n  BgWhite: \"\\x1b[47m\",\n};\n/**\n* Colorize a string of text!\n* @param {String} text The string text to colorize\n* @param {String} options Strings of options (like \"white\", \"red\", \"BgWhite\", \"BgRed\", \"Bold\", \"Dim\", etc.)\n* @returns {String} Colored String\n*/\nfunction colorize(text = \"\", ...options) {\n  let opts = \"\";\n  options = options ?? \"white\";\n  options.forEach((opt) => {\n    opts += Colors[opt] ?? Colors.white;\n  });\n  return `${opts}${text}${Colors.Reset}`;\n}",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 501,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js createHash",
    "description": "require(\"crypto\")\n  .createHash(\"sha256\")\n  .update(\"Man oh man do I love node!\")\n  .digest(\"hex\");\n",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 502,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js createHmac",
    "description": "require(\"crypto\").createHmac(\"sha256\", \"password\")\n  .update(\"If you love node so much why don't you marry it?\")\n  .digest(\"hex\");\n",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 503,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js create folder",
    "description": "var fs = require('fs');\n\nconst dir = './database/temp';\nif (!fs.existsSync(dir)) {\n\tfs.mkdirSync(dir, {\n\t\trecursive: true\n\t});\n}var fs = require('fs');\nvar dir = './tmp';\nif (!fs.existsSync(dir)){\n    fs.mkdirSync(dir);\n}\n\n// or if complains about existence and nesting doesn't matter:\n\nvar shell = require('shelljs');\nshell.mkdir('-p', 'root/parent/tmp');//Include fs module\nconst fs = require('fs');\n\nconst dir = './dir'\nfs.mkdir(dir);const fs = require(\"fs\");\n\nif (!fs.existsSync(dirName)) fs.mkdirSync(dirName, { recursive: true });\n",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 504,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js create or check directory",
    "description": "//Synchronously\nfs.mkdirSync('./path/to/my/directory', { recursive: true })\n\n//Asynchronously\nawait fs.promise.mkdir('./path/to/my/directory', { recursive: true })\n",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 505,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js create pdf from html",
    "description": "The problem with using PDF converter libraries available on NPM like pdfkit is that, you gonna have to recreate the page structures again in your html templates to get the desired output.\n\nOne of the best approach to rendering html and convert to pdf is by using Puppeteer on NodeJs. Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. It can be used to generate screenshots and PDFs of html pages in your case.app.use('/pdf', express.static(__dirname + '/pathToPDF'));\n",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 506,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js creating server",
    "description": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n",
    "reg_date": "2021-10-14T19:40:56.000Z"
  },
  {
    "id": 507,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js crud operation",
    "description": "npm install --save express body-parser mongoose// Update a note identified by the noteId in the request\nexports.update = (req, res) => {\n    // Validate Request\n    if(!req.body.content) {\n        return res.status(400).send({\n            message: \"Note content can not be empty\"\n        });\n    }\n\n    // Find note and update it with the request body\n    Note.findByIdAndUpdate(req.params.noteId, {\n        title: req.body.title || \"Untitled Note\",\n        content: req.body.content\n    }, {new: true})\n    .then(note => {\n        if(!note) {\n            return res.status(404).send({\n                message: \"Note not found with id \" + req.params.noteId\n            });\n        }\n        res.send(note);\n    }).catch(err => {\n        if(err.kind === 'ObjectId') {\n            return res.status(404).send({\n                message: \"Note not found with id \" + req.params.noteId\n            });                \n        }\n        return res.status(500).send({\n            message: \"Error updating note with id \" + req.params.noteId\n        });\n    });\n};\n",
    "reg_date": "2021-10-14T19:40:57.000Z"
  },
  {
    "id": 508,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js delete folder with files",
    "description": "const fs = require('fs');\n\n// directory path\nconst dir = 'temp';\n\n// delete directory recursively\ntry {\n    fs.rmdirSync(dir, { recursive: true });\n\n    console.log(`${dir} is deleted!`);\n} catch (err) {\n    console.error(`Error while deleting ${dir}.`);\n}fs.unlink('./node/myText.txt',function(){\n    fs.rmdir('node');\n});",
    "reg_date": "2021-10-14T19:40:57.000Z"
  },
  {
    "id": 509,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js do request",
    "description": "",
    "reg_date": "2021-10-14T19:40:57.000Z"
  },
  {
    "id": 510,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js download file to folder",
    "description": "var http = require('http');\nvar fs = require('fs');\n\nvar download = function(url, dest, cb) {\n  var file = fs.createWriteStream(dest);\n  var request = http.get(url, function(response) {\n    response.pipe(file);\n    file.on('finish', function() {\n      file.close(cb);  // close() is async, call cb after close completes.\n    });\n  }).on('error', function(err) { // Handle errors\n    fs.unlink(dest); // Delete the file async. (But we don't check the result)\n    if (cb) cb(err.message);\n  });\n};",
    "reg_date": "2021-10-14T19:40:57.000Z"
  },
  {
    "id": 511,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js download image from url as buffer",
    "description": "var request = require('request').defaults({ encoding: null });\nrequest.get(s3Url, function (err, res, body) {\n      //process exif here\n});",
    "reg_date": "2021-10-14T19:40:57.000Z"
  },
  {
    "id": 512,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js else",
    "description": "If - Else Statements\nif (condition) {\n// what to do if condition is met\n} else {\n// what to do if condition is not met\n}\n//if(args[0] === \"hi\"){\n// console.log(\"Hello!\"); \n//}\nelse {\n  //Your code here\n}",
    "reg_date": "2021-10-14T19:40:57.000Z"
  },
  {
    "id": 513,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js error",
    "description": "FactoryController.prototype.create = function (callback) {\n    //The throw is working, and the exception is returned.\n    throw new Error('An error occurred'); //outside callback \n    try {\n        this.check(function (check_result) {\n            callback(check_result);\n        });\n    } catch (ex) {\n        throw new Error(ex.toString());\n    }\n}\n\nFactoryController.prototype.create = function (callback) {\n    try {\n        this.check(function (check_result) {\n            //The throw is not working on this case to return the exception to the caller(parent)\n            throw new Error('An error occurred'); //inside callback \n        });\n    } catch (ex) {\n        throw new Error(ex.toString());\n    }\n}TypeError: res.send is not a function    at C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\app.js:6:9    at Layer.handle [as handle_request] (C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\router\\layer.js:95:5)    at next (C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\router\\route.js:137:13)    at Route.dispatch (C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\router\\route.js:112:3)    at Layer.handle [as handle_request] (C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\router\\layer.js:95:5)    at C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\router\\index.js:281:22    at Function.process_params (C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\router\\index.js:335:12)    at next (C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\router\\index.js:275:10)    at expressInit (C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\middleware\\init.js:40:5)    at Layer.handle [as handle_request] (C:\\Users\\ARAZ\\Desktop\\H\\REact\\nodeJS-Practice\\node-express-course\\02-express-tutorial\\node_modules\\express\\lib\\router\\layer.js:95:5)",
    "reg_date": "2021-10-14T19:40:57.000Z"
  },
  {
    "id": 514,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js event emitter",
    "description": "",
    "reg_date": "2021-10-14T19:40:58.000Z"
  },
  {
    "id": 515,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js exit with error code",
    "description": "process.exit(code)\n",
    "reg_date": "2021-10-14T19:40:58.000Z"
  },
  {
    "id": 516,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js express",
    "description": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n$ npm install express --no-save\nbasic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n",
    "reg_date": "2021-10-14T19:40:58.000Z"
  },
  {
    "id": 517,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js express session expiration",
    "description": "const express = require('express')\nconst session = require('express-session')\n\nconst app = express()\napp.use(session({\n  'secret': '343ji43j4n3jn4jk3n'\n}))\napp.use(express.session(\n  { secret: \"secret\", store: new MemoryStore(), expires: new Date(Date.now() + (30 * 86400 * 1000)) \n  }));\n$ npm install express-session",
    "reg_date": "2021-10-14T19:40:58.000Z"
  },
  {
    "id": 518,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js express url parameters",
    "description": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.tagId);\n});\n\n// GET /p/5\n// tagId is set to 5\n// http://localhost:8080/api/1\napp.get('/api/:version', function(req, res) {\n    res.send(req.params.version);\n});URL Parameters\nThese are information that are passed through the URL like so:\n\nhttp://example.com/api/users?id=4&token=sdfa3&geo=usapp.get('/',function(req,res)\n{\n    res.send(\"Route path at base address\");\n});",
    "reg_date": "2021-10-14T19:40:58.000Z"
  },
  {
    "id": 519,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js favicon.ico",
    "description": "",
    "reg_date": "2021-10-14T19:40:58.000Z"
  },
  {
    "id": 520,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js fetch",
    "description": "",
    "reg_date": "2021-10-14T19:40:58.000Z"
  },
  {
    "id": 521,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js fetch data from url",
    "description": "var http = require('http');\n\nvar options = {\n    host: 'google.com',\n    path: '/'\n}\nvar request = http.request(options, function (res) {\n    var data = '';\n    res.on('data', function (chunk) {\n        data += chunk;\n    });\n    res.on('end', function () {\n        console.log(data);\n\n    });\n});\nrequest.on('error', function (e) {\n    console.log(e.message);\n});\nrequest.end();const fetch   = require('node-fetch');\n \napp.get('/', function (req, res) {\n    var url = 'https://api.darksky.net/forecast/<API KEY>/37.8267,-122.4233';\n     \n    fetch(url)\n    .then(res => res.json())\n    .then(data => {\n        res.send({ data });\n    })\n    .catch(err => {\n        res.send(err);\n    });\n});",
    "reg_date": "2021-10-14T19:40:59.000Z"
  },
  {
    "id": 522,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js ffmpeg image to video",
    "description": "const frames = ['frame1.jpg', 'frame2.jpg', ...]\n\nconst conv = ffmpeg() // create converter\nconst input = conv.input({f: 'image2pipe', r: 30}) // create input writable stream\nconv.output('out.mp4', {vcodec: 'libx264', pix_fmt: 'yuv420p'}) // output to file\n\n// for every frame create a function that returns a promise\nframes.map(filename => () =>\n  new Promise((fulfill, reject) =>\n    s3\n      .getObject({Bucket: '...', Key: filename})\n      .createReadStream()\n      .on('end', fulfill) // fulfill promise on frame end\n      .on('error', reject) // reject promise on error\n      .pipe(input, {end: false}) // pipe to converter, but don't end the input yet\n  )\n)\n// reduce into a single promise, run sequentially\n.reduce((prev, next) => prev.then(next), Promise.resolve())\n// end converter input\n.then(() => input.end())\n\nconv.run()",
    "reg_date": "2021-10-14T19:40:59.000Z"
  },
  {
    "id": 523,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js fibonacci series",
    "description": "var fib = function(n) {\n  if (n === 1) {\n    return [0, 1];\n  } else {\n    var arr = fib(n - 1);\n    arr.push(arr[arr.length - 1] + arr[arr.length - 2]);\n    return arr;\n  }\n};\n\nconsole.log(fib(8));const fibo = (n, memo = {}) => memo[n] || (n <= 2 ? 1 : (memo[n] = fibo(n - 1, memo) + fibo(n - 2, memo)));\n\n// Examples\nfibo(6);    // 8",
    "reg_date": "2021-10-14T19:40:59.000Z"
  },
  {
    "id": 524,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js file.download",
    "description": "const http = require('http'); // or 'https' for https:// URLs\nconst fs = require('fs');\n\nconst file = fs.createWriteStream(\"file.jpg\");\nconst request = http.get(\"http://i3.ytimg.com/vi/J---aiyznGQ/mqdefault.jpg\", function(response) {\n  response.pipe(file);\n});",
    "reg_date": "2021-10-14T19:40:59.000Z"
  },
  {
    "id": 525,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js file dowload progress bar",
    "description": "function download(url, callback, encoding){\n        var request = http.get(url, function(response) {\n            if (encoding){\n                response.setEncoding(encoding);\n            }\n            var len = parseInt(response.headers['content-length'], 10);\n            var body = \"\";\n            var cur = 0;\n            var obj = document.getElementById('js-progress');\n            var total = len / 1048576; //1048576 - bytes in  1Megabyte\n\n            response.on(\"data\", function(chunk) {\n                body += chunk;\n                cur += chunk.length;\n                obj.innerHTML = \"Downloading \" + (100.0 * cur / len).toFixed(2) + \"% \" + (cur / 1048576).toFixed(2) + \" mb\\r\" + \".<br/> Total size: \" + total.toFixed(2) + \" mb\";\n            });\n\n            response.on(\"end\", function() {\n                callback(body);\n                obj.innerHTML = \"Downloading complete\";\n            });\n\n            request.on(\"error\", function(e){\n                console.log(\"Error: \" + e.message);\n            });\n\n        });\n    };\n",
    "reg_date": "2021-10-14T19:40:59.000Z"
  },
  {
    "id": 526,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js file extension",
    "description": "  var path = require('path');\n\nvar ext = path.extname('/Users/Refsnes/demo_path.js');\n\n  console.log(ext); filename.split('.').slice(0, -1).join('.')\nscript.json",
    "reg_date": "2021-10-14T19:40:59.000Z"
  },
  {
    "id": 527,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js find directory change directory",
    "description": "// get current directory \nvar cur_dir = process.cwd();\nconsole.log(cur_dir);\n// change current directory\n\nprocess.chdir('C:\\\\Projects\\\\experiments');\nconsole.log(process.cwd()); \n\n// path.join for cross-platform paths:\nconst path = require('path');\nprocess.chdir(path.join('C:', 'Projects', 'experiments'));\nconsole.log(process.cwd()); \nprocess.exit();",
    "reg_date": "2021-10-14T19:41:00.000Z"
  },
  {
    "id": 528,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js firebird example",
    "description": "var { GDSCode } = require('node-firebird/lib/gdscodes');/*...*/db.query('insert into my_table(id, name) values (?, ?)', [1, 'John Doe'],    function (err) {        if(err.gdscode == GDSCode.UNIQUE_KEY_VIOLATION){            console.log('constraint name:'+ err.gdsparams[0]);            console.log('table name:'+ err.gdsparams[0]);            /*...*/        }        /*...*/    }); Firebird.attach(options, function(err, db) {     if (err)        throw err;     // db = DATABASE    db.query('SELECT * FROM TABLE', function(err, result) {        // IMPORTANT: close the connection        db.detach();    }); });AuthServer = Srp, Legacy_AuthWireCrypt = DisabledUserManager = Legacy_UserManagerFirebird.attach(options, function(err, db) {     if (err)        throw err;     // db = DATABASE    // INSERT STREAM as BLOB    db.query('INSERT INTO USERS (ID, ALIAS, FILE) VALUES(?, ?, ?)', [1, 'Peter', fs.createReadStream('/users/image.jpg')], function(err, result) {        // IMPORTANT: close the connection        db.detach();    });});Firebird.attach(options, function(err, db) {     if (err)        throw err;     db.on('row', function(row, index, isObject) {        // index === Number        // isObject === is row object or array?    });     db.on('result', function(result) {        // result === Array    });     db.on('attach', function() {     });     db.on('detach', function(isPoolConnection) {        // isPoolConnection == Boolean    });     db.on('reconnect', function() {     });     db.on('error', function(err) {     });     db.on('transaction', function(isolation) {        // isolation === Number    });     db.on('commit', function() {     });     db.on('rollback', function() {     });     db.detach();});const config = {...}; // Classic configuration with manager = trueconst RESTORE_OPTS = {    database: 'database.fdb',    files: ['backup.fbk']}; Firebird.attach(config, (err, srv) => {    srv.restore(RESTORE_OPTS, (err, data) => {        data.on('data', () => {});        data.on('end', () =>            srv.detach();        });    });});// each row : fctname : [params], typeofreturnvar fbsvc = {    \"backup\" : { [ \"options\"], \"stream\" },    \"nbackup\" : { [ \"options\"], \"stream\" },    \"restore\" : { [ \"options\"], \"stream\" },    \"nrestore\" : { [ \"options\"], \"stream\" },    \"setDialect\": { [ \"database\",\"dialect\"], \"stream\" },    \"setSweepinterval\": { [ \"database\",\"sweepinterval\"], \"stream\" },    \"setCachebuffer\" : { [ \"database\",\"nbpagebuffers\"], \"stream\" },    \"BringOnline\" : { [ \"database\"], \"stream\" },    \"Shutdown\" : { [ \"database\",\"shutdown\",\"shutdowndelay\",\"shutdownmode\"], \"stream\" },    \"setShadow\" : { [ \"database\",\"activateshadow\"], \"stream\" },    \"setForcewrite\" : { [ \"database\",\"forcewrite\"], \"stream\" },    \"setReservespace\" : { [ \"database\",\"reservespace\"], \"stream\" },    \"setReadonlyMode\" : { [ \"database\"], \"stream\" },    \"setReadwriteMode\" : { [ \"database\"], \"stream\" },    \"validate\" : { [ \"options\"], \"stream\" },    \"commit\" : { [ \"database\", \"transactid\"], \"stream\" },    \"rollback\" : { [ \"database\", \"transactid\"], \"stream\" },    \"recover\" : { [ \"database\", \"transactid\"], \"stream\" },    \"getStats\" : { [ \"options\"], \"stream\" },    \"getLog\" : { [ \"options\"], \"stream\" },    \"getUsers\" : { [ \"username\"], \"object\" },    \"addUser\" : { [ \"username\", \"password\", \"options\"], \"stream\" },    \"editUser\" : { [ \"username\", \"options\"], \"stream\" },    \"removeUser\" : { [ \"username\",\"rolename\"], \"stream\" },    \"getFbserverInfos\" : { [ \"options\", \"options\"], \"object\" },    \"startTrace\" : { [ \"options\"], \"stream\" },    \"suspendTrace\" : { [ \"options\"], \"stream\" },    \"resumeTrace\" : { [ \"options\"], \"stream\" },    \"stopTrace\" : { [ \"options\"], \"stream\" },    \"getTraceList\" : { [ \"options\"], \"stream\" },    \"hasActionRunning\" : { [ \"options\"], \"object\"}} // 5 = the number is count of opened socketsvar pool = Firebird.pool(5, options); // Get a free poolpool.get(function(err, db) {     if (err)        throw err;     // db = DATABASE    db.query('SELECT * FROM TABLE', function(err, result) {        // IMPORTANT: release the pool connection        db.detach();    });}); // Destroy poolpool.destroy();Firebird.attach(options, function(err, db) {     if (err)        throw err;     // db = DATABASE    db.sequentially('SELECT * FROM BIGTABLE', function(row, index) {         // EXAMPLE        stream.write(JSON.stringify(row));     }, function(err) {        // END        // IMPORTANT: close the connection        db.detach();    });});Firebird.attach(options, function(err, db) {     if (err)        throw err;     // db = DATABASE    // INSERT BUFFER as BLOB    db.query('INSERT INTO USERS (ID, ALIAS, FILE) VALUES(?, ?, ?)', [1, 'Peter', fs.readFileSync('/users/image.jpg')], function(err, result) {        // IMPORTANT: close the connection        db.detach();    });});",
    "reg_date": "2021-10-14T19:41:00.000Z"
  },
  {
    "id": 529,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js function infinite parameters",
    "description": "function print(...args) {\n  args.forEach((arg, index) => {\n    console.log(arg);\n  });\n}\n\nprint('hello', true, new Date());",
    "reg_date": "2021-10-14T19:41:00.000Z"
  },
  {
    "id": 530,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js get file name without extension",
    "description": "filename.split('.').slice(0, -1).join('.')\n",
    "reg_date": "2021-10-14T19:41:00.000Z"
  },
  {
    "id": 531,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js get files in dir",
    "description": "//requiring path and fs modules\nconst path = require('path');\nconst fs = require('fs');\n//joining path of directory \nconst directoryPath = path.join(__dirname, 'Documents');\n//passsing directoryPath and callback function\nfs.readdir(directoryPath, function (err, files) {\n    //handling error\n    if (err) {\n        return console.log('Unable to scan directory: ' + err);\n    } \n    //listing all files using forEach\n    files.forEach(function (file) {\n        // Do whatever you want to do with the file\n        console.log(file); \n    });\n});const path = require('path');\nconst fs = require('fs');\n\nfs.readdir(\n  path.resolve(__dirname, 'MyFolder'),\n  (err, files) => {\n    if (err) throw err;\n    \n    for (let file of files) {\n      console.log(file);\n    }\n  }\n);",
    "reg_date": "2021-10-14T19:41:00.000Z"
  },
  {
    "id": 532,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js get time in timezone",
    "description": "// Javascript timestamps are specified in milliseconds\nlet ts = 1581338765000;\n\nlet nz_date_string = new Date(ts).toLocaleString(\"en-US\", { timeZone: \"Pacific/Chatham\" });\n\n// rest of the code",
    "reg_date": "2021-10-14T19:41:02.000Z"
  },
  {
    "id": 533,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js get url from request",
    "description": "",
    "reg_date": "2021-10-14T19:41:03.000Z"
  },
  {
    "id": 534,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js github actions with mongodb",
    "description": "",
    "reg_date": "2021-10-14T19:41:03.000Z"
  },
  {
    "id": 535,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js gitignore",
    "description": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\ngitignore node js# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*",
    "reg_date": "2021-10-14T19:41:03.000Z"
  },
  {
    "id": 536,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js how to basic auth to specific urk",
    "description": "var request = require('request')\nvar username = 'fooUsername'\nvar password = 'fooPassword'\nvar options = {\n  url: 'http://localhost:1234/api/res/xyz',\n  auth: {\n    user: username,\n    password: password\n  }\n}\n\nrequest(options, function (err, res, body) {\n  if (err) {\n    console.dir(err)\n    return\n  }\n  console.dir('headers', res.headers)\n  console.dir('status code', res.statusCode)\n  console.dir(body)\n})",
    "reg_date": "2021-10-14T19:41:03.000Z"
  },
  {
    "id": 537,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js http request express",
    "description": "",
    "reg_date": "2021-10-14T19:41:03.000Z"
  },
  {
    "id": 538,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js http request get parameters",
    "description": "var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n  res.send('id: ' + req.query.id);\n});\n\napp.listen(3000);const http = require('http');\nconst url = require('url');\n\nhttp.createServer(function (req, res) {\n  const queryObject = url.parse(req.url,true).query;\n  console.log(queryObject);\n\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.end('Feel free to add query parameters to the end of the url');\n}).listen(8080);",
    "reg_date": "2021-10-14T19:41:04.000Z"
  },
  {
    "id": 539,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js if",
    "description": "if (condition) {\n\t//what is done\n}if (condition1) {\n  // code to be executed if condition1 is true\n} else if (condition2) {\n  // code to be executed if the condition1 is false and condition2 is true\n} else {\n  // code to be executed if the condition1 is false and condition2 is false\n}if (5 < 10) {\n\tconsole.log(\"5 is less than 10\");\n} else {\n\tconsole.log(\"5 is now bigger than 10\")\n}if (pros < 10) {\n  console.log(\"LESS THAN 10 PROS!\");\n}\nelse if (pros < 5) {\n  console.log(\"LESS THAN 5 PROS!\");\n}\nelse {\n  console.log(\"How many pros are there?\");\n}if(){ //Note, you cant leave if() empty. You have to put something in it, for exmaple, if(args[0] === \"hi\")\n\t//Your code here   \t\n}",
    "reg_date": "2021-10-14T19:41:05.000Z"
  },
  {
    "id": 540,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js if no arguments",
    "description": "let arguments = args.slice(0).join(' ');\nif(!arguments) return;\n//You don't have to keep \"return;\", you can return anything, for example, a message",
    "reg_date": "2021-10-14T19:41:08.000Z"
  },
  {
    "id": 541,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js install ubuntu",
    "description": "",
    "reg_date": "2021-10-14T19:41:08.000Z"
  },
  {
    "id": 542,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js install wbm",
    "description": "npm install wbm",
    "reg_date": "2021-10-14T19:41:08.000Z"
  },
  {
    "id": 543,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js interview questions",
    "description": "What is Node.js? What is it used for?\n\nQ2. What is Event-driven programming?\n\nQ3. What is Event loop in Node.js work? And How does it work?\n\nQ4. What is REPL in Node.js?\nQ5. What is the purpose of module.exports in Node.js?\n\nQ6. What is the difference between Asynchronous and Non-blocking?\n\nQ7. What is Tracing in Node.js?\n\nQ8. How will you debug an application in Node.js?\n\nQ9. Difference between setImmediate() vs setTimeout()\n\nQ10. What is process.nextTick()\nvent loop continues.\nQ11. What is package.json? What is it used for?\n\nQ12. What is libuv?\nlibuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by Node.js, but it’s also used by Luvit, Julia, pyuv, and others.\nWhen the node.js project began in 2009 as a JavaScript environment decoupled from the browser, it is using Google’s V8 and Marc Lehmann’s libev, node.js combined a model of I/O – evented – with a language that was well suited to the style of programming; due to the way it had been shaped by browsers. As node.js grew in popularity, it was important to make it work on Windows, but libev ran only on Unix. libuv was an abstraction around libev or IOCP depending on the platform, providing users an API based on libev. In the node-v0.9.0 version of libuv libev was removed.\nSome of the features of libuv are:\nFull-featured event loop backed by epoll, kqueue, IOCP, event ports.\nAsynchronous TCP and UDP sockets\nAsynchronous file and file system operations\nChild processes\nFile system events\nQ13. What are some of the most popular modules of Node.js?\nThere are many most popular, most starred or most downloaded modules in Node.js. Some of them are:\nexpress\nasync\nbrowserify\nsocket.io\nbower\ngulp\ngrunt\nQ14. What is EventEmitter in Node.js?\nAll objects that emit events are instances of the EventEmitter class. These objects expose an eventEmitter.on() function that allows one or more functions to be attached to named events emitted by the object.\nWhen the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously.\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addNode</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">var</span> newP = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"p\"</span>);\n\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-keyword\">var</span> textNode = <span class=\"hljs-built_in\">document</span>.createTextNode(<span class=\"hljs-string\">\" This is a new text node\"</span>);\n\t\t\t\t\t\t\t\t\t\tnewP.appendChild(textNode); <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"firstP\"</span>).appendChild(newP); }\n\nwhat is a monolith server\t\t\t\t\t\t\nwhat does mean by async and sync in javascript\t\t\t\thttps://youtu.be/h0ZUpPiV1ac?t=569\t\t\nA higher order function which takes function as an argument\t\t\t\t\t\t\n\"handlebars is a template engine like Jade.\nVash.\nEJS.\nMustache.\nDust.js.\nNunjucks.\nHandlebars.\natpl\"\t\t\t\t\t\t\nES6 features\t\t\t\t\t\t\nOOP programming in nodejs\t\t\t\t\t\t\nhow to allow cors in nodejs server using express and http module and cors module\t\t\t\t\t\t\nwhat is refrential transparency\t\t\thttps://www.google.com/search?q=referential+transparency&oq=refrential+tra&aqs=chrome.1.69i57j0i10l7.5812j0j1&sourceid=chrome&ie=UTF-8\t\t\t\nWhat is difference between REST API and RESTful API?\t\t\t\t\t\thoistedVariable = 3;\nconsole.log(hoistedVariable); // outputs 3 even when the variable is declared after it is initialized\t\nvar hoistedVariable;\n",
    "reg_date": "2021-10-14T19:41:09.000Z"
  },
  {
    "id": 544,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js interview questions interviewbit",
    "description": "What is Node.js? What is it used for?\n\nQ2. What is Event-driven programming?\n\nQ3. What is Event loop in Node.js work? And How does it work?\n\nQ4. What is REPL in Node.js?\nQ5. What is the purpose of module.exports in Node.js?\n\nQ6. What is the difference between Asynchronous and Non-blocking?\n\nQ7. What is Tracing in Node.js?\n\nQ8. How will you debug an application in Node.js?\n\nQ9. Difference between setImmediate() vs setTimeout()\n\nQ10. What is process.nextTick()\nvent loop continues.\nQ11. What is package.json? What is it used for?\n\nQ12. What is libuv?\nlibuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by Node.js, but it’s also used by Luvit, Julia, pyuv, and others.\nWhen the node.js project began in 2009 as a JavaScript environment decoupled from the browser, it is using Google’s V8 and Marc Lehmann’s libev, node.js combined a model of I/O – evented – with a language that was well suited to the style of programming; due to the way it had been shaped by browsers. As node.js grew in popularity, it was important to make it work on Windows, but libev ran only on Unix. libuv was an abstraction around libev or IOCP depending on the platform, providing users an API based on libev. In the node-v0.9.0 version of libuv libev was removed.\nSome of the features of libuv are:\nFull-featured event loop backed by epoll, kqueue, IOCP, event ports.\nAsynchronous TCP and UDP sockets\nAsynchronous file and file system operations\nChild processes\nFile system events\nQ13. What are some of the most popular modules of Node.js?\nThere are many most popular, most starred or most downloaded modules in Node.js. Some of them are:\nexpress\nasync\nbrowserify\nsocket.io\nbower\ngulp\ngrunt\nQ14. What is EventEmitter in Node.js?\nAll objects that emit events are instances of the EventEmitter class. These objects expose an eventEmitter.on() function that allows one or more functions to be attached to named events emitted by the object.\nWhen the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously.\nwhat is a monolith server\t\t\t\t\t\t\nwhat does mean by async and sync in javascript\t\t\t\thttps://youtu.be/h0ZUpPiV1ac?t=569\t\t\nA higher order function which takes function as an argument\t\t\t\t\t\t\n\"handlebars is a template engine like Jade.\nVash.\nEJS.\nMustache.\nDust.js.\nNunjucks.\nHandlebars.\natpl\"\t\t\t\t\t\t\nES6 features\t\t\t\t\t\t\nOOP programming in nodejs\t\t\t\t\t\t\nhow to allow cors in nodejs server using express and http module and cors module\t\t\t\t\t\t\nwhat is refrential transparency\t\t\thttps://www.google.com/search?q=referential+transparency&oq=refrential+tra&aqs=chrome.1.69i57j0i10l7.5812j0j1&sourceid=chrome&ie=UTF-8\t\t\t\nWhat is difference between REST API and RESTful API?\t\t\t\t\t\thoistedVariable = 3;\nconsole.log(hoistedVariable); // outputs 3 even when the variable is declared after it is initialized\t\nvar hoistedVariable;\n",
    "reg_date": "2021-10-14T19:41:10.000Z"
  },
  {
    "id": 545,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js kill port",
    "description": "npx kill-port 3000\nsudo pkill nodetaskkill /f /im node.exe",
    "reg_date": "2021-10-14T19:41:10.000Z"
  },
  {
    "id": 546,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js kill process",
    "description": "killall node\nThe Difference Between kill and pkill\nThe kill command is a wrapper to the kill system call, which knows only about process IDs. pkill can determine the process ID based on things like, process name, owner of the process or session id.\n\nSyntax:\n$ kill 1234\n$ pkill -f node\nprocess.kill(process.pid, 'SIGINT');ps aux | grep node\nkill -9 PROCESS_IDprocess.exit()\n\n//or\n\nif (condition){process.exit()}\n\n//or\n\nsetTimeout((function() {\n    return process.exit();\n}), 5000);\n// kill server after 5000ms\n\n//source :\n//https://stackabuse.com/how-to-exit-in-node-js/",
    "reg_date": "2021-10-14T19:41:10.000Z"
  },
  {
    "id": 547,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js list all installed modules",
    "description": "",
    "reg_date": "2021-10-14T19:41:11.000Z"
  },
  {
    "id": 548,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js load css file",
    "description": "app.use(express.static(path.join(__dirname, 'public')));\n",
    "reg_date": "2021-10-14T19:41:12.000Z"
  },
  {
    "id": 549,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js middleware for parsing formdata",
    "description": "npm install -S express-formidable\n",
    "reg_date": "2021-10-14T19:41:12.000Z"
  },
  {
    "id": 550,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js module export class",
    "description": "module.exports = class Person {\n\tconstructor(firstName, lastName) {\n\t\tthis.firstName = firstName;\n\t\tthis.lastName = lastName;\n\t}\n\n\tdisplay() {\n\t\tconsole.log(this.firstName + \" \" + this.lastName);\n\t}\n}class TestClass {\n  \n}\n\nmodule.exports.TestClass = TestClass;\n",
    "reg_date": "2021-10-14T19:41:13.000Z"
  },
  {
    "id": 551,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js module require multiple functions from one node",
    "description": "//In module\nexports.method = function() {};\nexports.otherMethod = function() {};\n// OR:\nmodule.exports = {\n    method: function() {},\n    otherMethod: function() {},\n};\n\n//In file that import functions from modules\nconst myModule = require('./myModule.js');\n\nconst method = myModule.method;\nconst otherMethod = myModule.otherMethod;\n// OR:\nconst {method, otherMethod} = require('./myModule.js');\nmodule.exports = function(firstParam) { console.log(\"You did it\"); },\nmodule.exports = function(secondParam) { console.log(\"Yes you did it\"); }, \n// This may contain more functions",
    "reg_date": "2021-10-14T19:41:13.000Z"
  },
  {
    "id": 552,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js mongodb update nested object",
    "description": "//just read documentaion in source and see how to  use the $ sign !! \nmyDataBase.updateOne({ 'project': 'test2', 'issues._id': new ObjectID('61006f2409a2524514d877ce') }, { $set: { 'issues.$.open': true, 'issues.$.updated_on': new Date() } })\n//for  mongodb 4+ \nconst ObjectId = require('mongodb').ObjectId;\n",
    "reg_date": "2021-10-14T19:41:14.000Z"
  },
  {
    "id": 553,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js mongoose text index",
    "description": "mongoose.set('useCreateIndex', true)\n// ...\nschema.index({ title: 'text' })var schema = new Schema({\n  name: String,\n  email: String,\n  profile: {\n    something: String,\n    somethingElse: String\n  }\n});\nschema.index({name: 'text', 'profile.something': 'text'});",
    "reg_date": "2021-10-14T19:41:14.000Z"
  },
  {
    "id": 554,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js mysql escape string",
    "description": "// Escape values:\n\nlet escaped = mysql.escape('myString');\n\n// or\n\nmysql.query(\n  \"SELECT * FROM `table` WHERE `str1`=? AND `str2`=?\",\n  ['myString1', 'myString2'],\n  (err, result)=>{}\n);\n\n// Escape identifiers:\n\nmysql.query(\n  \"SELECT * FROM ??\",\t// note the double ?\n  ['tablename'],\n  (err, result)=>{}\n);",
    "reg_date": "2021-10-14T19:41:14.000Z"
  },
  {
    "id": 555,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js mysql starter github",
    "description": "# clone it\ngit clone git@github.com:dainiusgliebus/nodejs-express-rest-mysql-starter\ncd nodejs-express-rest-mysql-starter\n\n# Make it your own\nrm -rf .git && git init && npm init\n\n# Install dependencies\nnpm install\n\n# Create mysql database and copy sql to database from sql/users.sql\n# Copy .env.example to .env and update with local parameters\ncp .env.example .env\n\n# Run test\nnpm run test\n\n# Run test-reload\nnpm run test-watch\n\n# Start development live-reload server\nnpm run dev\n\n# Start production server:\nnpm startWelcome to my github\n",
    "reg_date": "2021-10-14T19:41:15.000Z"
  },
  {
    "id": 556,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js on ctrl c",
    "description": "process.on('SIGINT', function() {\n    console.log(\"Caught interrupt signal\");\n\n    if (i_should_exit)\n        process.exit();\n});",
    "reg_date": "2021-10-14T19:41:15.000Z"
  },
  {
    "id": 557,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js parse large csv files",
    "description": "// npm i papaparse\n\n// Parse CSV string\nvar data = Papa.parse(csv);\n\n// Convert back to CSV\nvar csv = Papa.unparse(data);\n\n// Parse local CSV file\nPapa.parse(file, {\n\tcomplete: function(results) {\n\t\tconsole.log(\"Finished:\", results.data);\n\t}\n});\n\n// Stream big file in worker thread\nPapa.parse(bigFile, {\n\tworker: true,\n\tstep: function(results) {\n\t\tconsole.log(\"Row:\", results.data);\n\t}\n});",
    "reg_date": "2021-10-14T19:41:16.000Z"
  },
  {
    "id": 558,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js post multipart/form-data",
    "description": "var jsonUpload = {  };\nvar formData = {\n    'file': fs.createReadStream(fileName),\n    'jsonUpload': JSON.stringify(jsonUpload)\n};\nvar uploadOptions = {\n    \"url\": \"https://upload/url\",\n    \"method\": \"POST\",\n    \"headers\": {\n        \"Authorization\": \"Bearer \" + accessToken\n    },\n    \"formData\": formData\n}\nvar req = request(uploadOptions, function(err, resp, body) {\n    if (err) {\n        console.log('Error ', err);\n    } else {\n        console.log('upload successful', body)\n    }\n});\n",
    "reg_date": "2021-10-14T19:41:16.000Z"
  },
  {
    "id": 559,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js postgresql query",
    "description": "//connect to postgres database in node\n\nconst Pool = require('pg').Pool;\n\nconst pool = new Pool({\n    user: '',\n    host: 'localhost',\n    database:  '',\n    password: '',\n    port:5432,\n  })\n\n//query example\n\napp.get('/users',async(req,res)=>{\n  \n  try{\n     let resp=await pool.query('SELECT * FROM users');\n  }catch(err){\n     res.status(200).send(resp.rows);\n  }\n})\n// callback\nclient.query('SELECT NOW() as now', (err, res) => {\n  if (err) {\n    console.log(err.stack)\n  } else {\n    console.log(res.rows[0])\n  }\n})\n// promise\nclient\n  .query('SELECT NOW() as now')\n  .then(res => console.log(res.rows[0]))\n  .catch(e => console.error(e.stack))",
    "reg_date": "2021-10-14T19:41:16.000Z"
  },
  {
    "id": 560,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js printing",
    "description": "console.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to stderr\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderrconsole.log([data][, ...])",
    "reg_date": "2021-10-14T19:41:17.000Z"
  },
  {
    "id": 561,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js procfile heroku starter",
    "description": "web: node app.js\n\n//where app.js is the name of your js server file",
    "reg_date": "2021-10-14T19:41:18.000Z"
  },
  {
    "id": 562,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js quit",
    "description": "process.exit();process.exit()",
    "reg_date": "2021-10-14T19:41:18.000Z"
  },
  {
    "id": 563,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js read file stream line by line",
    "description": "const readline = require('readline');\nconst fs = require('fs');\n\n// create instance of readline\n// each instance is associated with single input stream\nlet rl = readline.createInterface({\n    input: fs.createReadStream('products.txt')\n});\n\nlet line_no = 0;\n\n// event is emitted after each line\nrl.on('line', function(line) {\n    line_no++;\n    console.log(line);\n});\n\n// end\nrl.on('close', function(line) {\n    console.log('Total lines : ' + line_no);\n});\n",
    "reg_date": "2021-10-14T19:41:19.000Z"
  },
  {
    "id": 564,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js read files recursively",
    "description": "var fs = require('fs');\nvar path = require('path');\nvar walk = function(dir, done) {\n  var results = [];\n  fs.readdir(dir, function(err, list) {\n    if (err) return done(err);\n    var i = 0;\n    (function next() {\n      var file = list[i++];\n      if (!file) return done(null, results);\n      file = path.resolve(dir, file);\n      fs.stat(file, function(err, stat) {\n        if (stat && stat.isDirectory()) {\n          walk(file, function(err, res) {\n            results = results.concat(res);\n            next();\n          });\n        } else {\n          results.push(file);\n          next();\n        }\n      });\n    })();\n  });\n};\n\n\nAnd to test it out on your home directory (WARNING: the results list will be huge if you have a lot of stuff in your home directory):\n\nwalk(process.env.HOME, function(err, results) {\n  if (err) throw err;\n  console.log(results);\n});var fs = require('fs');\nvar path = require('path');\nvar walk = function(dir, done) {\n  var results = [];\n  fs.readdir(dir, function(err, list) {\n    if (err) return done(err);\n    var i = 0;\n    (function next() {\n      var file = list[i++];\n      if (!file) return done(null, results);\n      file = path.resolve(dir, file);\n      fs.stat(file, function(err, stat) {\n        if (stat && stat.isDirectory()) {\n          walk(file, function(err, res) {\n            results = results.concat(res);\n            next();\n          });\n        } else {\n          results.push(file);\n          next();\n        }\n      });\n    })();\n  });\n};\n\nAnd to test it out on your home directory (WARNING: the results list will be huge if you have a lot of stuff in your home directory):\n\nwalk(process.env.HOME, function(err, results) {\n  if (err) throw err;\n  console.log(results);\n});",
    "reg_date": "2021-10-14T19:41:21.000Z"
  },
  {
    "id": 565,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js request async await",
    "description": "function doRequest(url) {\n  return new Promise(function (resolve, reject) {\n    request(url, function (error, res, body) {\n      if (!error && res.statusCode == 200) {\n        resolve(body);\n      } else {\n        reject(error);\n      }\n    });\n  });\n}\n\n// Usage:\n\nasync function main() {\n  let res = await doRequest(url);\n  console.log(res);\n}\n\nmain();",
    "reg_date": "2021-10-14T19:41:23.000Z"
  },
  {
    "id": 566,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js request download file",
    "description": "",
    "reg_date": "2021-10-14T19:41:24.000Z"
  },
  {
    "id": 567,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js require all function from another file",
    "description": "const { func1, func2, func3 } = require(\"./lib\");",
    "reg_date": "2021-10-14T19:41:24.000Z"
  },
  {
    "id": 568,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js require file in parent directory",
    "description": "var configData = require('./../common/config.js');",
    "reg_date": "2021-10-14T19:41:24.000Z"
  },
  {
    "id": 569,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js response header",
    "description": "response.setHeader(\"Content-Type\", \"text/html\");",
    "reg_date": "2021-10-14T19:41:25.000Z"
  },
  {
    "id": 570,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js return ID in postgres insert",
    "description": "INSERT INTO foo (name) VALUES ('baz') RETURNING *",
    "reg_date": "2021-10-14T19:41:25.000Z"
  },
  {
    "id": 571,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js return json",
    "description": "server.get('/', (req, res) => {\n  const user = { name: 'Hero', isLearning: true, level: 'apprentice' };\n  return res.json(user);\n})var http = require('http');\n\nvar app = http.createServer(function(req,res){\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({ a: 1 }));\n});\napp.listen(3000);\n\n// > {\"a\":1}",
    "reg_date": "2021-10-14T19:41:25.000Z"
  },
  {
    "id": 572,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js reuire json shows onject",
    "description": "var readJson = (path, cb) => {\n  fs.readFile(require.resolve(path), (err, data) => {\n    if (err)\n      cb(err)\n    else\n      cb(null, JSON.parse(data))\n  })\n}\n",
    "reg_date": "2021-10-14T19:41:25.000Z"
  },
  {
    "id": 573,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js run bat file",
    "description": "require('child_process').exec('cmd /c batfile.bat', function(){\n   // …your callback code may run here…\n});",
    "reg_date": "2021-10-14T19:41:26.000Z"
  },
  {
    "id": 574,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js send confirmation email",
    "description": "var nodemailer = require('nodemailer');\n\nvar transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'youremail@gmail.com',\n    pass: 'yourpassword'\n  }\n});\n\nvar mailOptions = {\n  from: 'youremail@gmail.com',\n  to: 'myfriend@yahoo.com',\n  subject: 'Sending Email using Node.js',\n  text: 'That was easy!'\n};\n\ntransporter.sendMail(mailOptions, function(error, info){\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});Node Js comformation Email",
    "reg_date": "2021-10-14T19:41:26.000Z"
  },
  {
    "id": 575,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js send fcm",
    "description": "    var FCM = require('fcm-node')\n    var serverKey = require('path/to/privatekey.json') //put the generated private key path here            \n    var fcm = new FCM(serverKey)     \n    var message = { //this may vary according to the message type (single recipient, multicast, topic, et cetera)        \n      to: 'registration_token',         \n      collapse_key: 'your_collapse_key',                \n      notification: {            \n        title: 'Title of your push notification',             \n        body: 'Body of your push notification'         \n      },                \n      data: {  //you can send only notification or only data(or include both)            \n        my_key: 'my value',            \n        my_another_key: 'my another value'        \n      }    \n    }        \n    fcm.send(message, function(err, response){        \n      if (err) {            \n        console.log(\"Something has gone wrong!\")        \n      } else {            \n        console.log(\"Successfully sent with response: \", response)        \n      }    \n    })",
    "reg_date": "2021-10-14T19:41:26.000Z"
  },
  {
    "id": 576,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js send javascript",
    "description": "const fs = require(\"fs\");\nconst hostname = \"127.0.0.1\";\nconst port = 3000;\n\n// use createReadStream instead to save memory\nconst index = fs.readFileSync(\"index.html\");\nconst java = fs.readFileSync(\"javascript.js\");\n\n// this is our request handler\nconst server = http.createServer((req, res) => {\n if (req.url === \"/\") {\n   res.setHeader(\"Content-Type\", \"text/html\");\n   res.write(index);\n }\n if (req.url === \"/javascript.js\") {\n   res.setHeader(\"Content-Type\", \"text/javascript\");\n   res.write(java);\n }\n res.statusCode = 200;\n //   res.writeHead(200, java);\n res.end();\n});\n\nserver.listen(port, hostname, () => {\n console.log(`Server running at http://${hostname}:${port}/`);\n});",
    "reg_date": "2021-10-14T19:41:26.000Z"
  },
  {
    "id": 577,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js sendgrid",
    "description": "const sgMail = require('@sendgrid/mail');\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst msg = {\n  to: 'test@example.com',\n  from: 'test@example.com',\n  subject: 'Sending with SendGrid is Fun',\n  text: 'and easy to do anywhere, even with Node.js',\n};\nsgMail.send(msg).catch(err => {\n  console.log(err);\n});\nconst sgMail = require('@sendgrid/mail');\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\nconst fs = require(\"fs\");\n\npathToAttachment = `${__dirname}/attachment.pdf`;\nattachment = fs.readFileSync(pathToAttachment).toString(\"base64\");\n\nconst msg = {\n  to: test@example.com',\n  from: 'test@example.com',\n  subject: 'Sending with SendGrid is Fun',\n  text: 'and easy to do anywhere, even with Node.js',\n};\nsgMail.send(msg).catch(err => {\n  console.log(err);\n});\nnpm install @sendgrid/mail\nconst sgMail = require('@sendgrid/mail');\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\nconst fs = require(\"fs\");\n\npathToAttachment = `${__dirname}/attachment.pdf`;\nattachment = fs.readFileSync(pathToAttachment).toString(\"base64\");\n\nconst msg = {\n  to: test@example.com',\n  from: 'test@example.com',\n  subject: 'Sending with SendGrid is Fun',\n  text: 'and easy to do anywhere, even with Node.js',\n  attachments: [\n    {\n      content: attachment,\n      filename: \"attachment.pdf\",\n      type: \"application/pdf\",\n      disposition: \"attachment\"\n    }\n  ]\n};\n\nsgMail.send(msg).catch(err => {\n  console.log(err);\n});\n",
    "reg_date": "2021-10-14T19:41:27.000Z"
  },
  {
    "id": 578,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js serve pdf file",
    "description": "The problem with using PDF converter libraries available on NPM like pdfkit is that, you gonna have to recreate the page structures again in your html templates to get the desired output.\n\nOne of the best approach to rendering html and convert to pdf is by using Puppeteer on NodeJs. Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. It can be used to generate screenshots and PDFs of html pages in your case.app.use('/pdf', express.static(__dirname + '/pathToPDF'));\nres.setHeader('Content-Type', 'application/pdf')res.setHeader('Content-Disposition', 'inline;filename=yolo.pdf')res.setHeader('Content-Type', 'application/pdf')\nres.setHeader('Content-Disposition', 'inline;filename=yolo.pdf')app.use('/pdf', express.static(__dirname + '/pathToPDF'));",
    "reg_date": "2021-10-14T19:41:27.000Z"
  },
  {
    "id": 579,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js server",
    "description": "/* ====== create node.js server with core 'http' module ====== */\n// dependencies\nconst http = require(\"http\");\n\n// PORT\nconst PORT = 3000;\n\n// server create\nconst server = http.createServer((req, res) => {\n   if (req.url === \"/\") {\n      res.write(\"This is home page.\");\n      res.end();\n   } else if (req.url === \"/about\" && req.method === \"GET\") {\n      res.write(\"This is about page.\");\n      res.end();\n   } else {\n      res.write(\"Not Found!\");\n      res.end();\n   }\n});\n\n// server listen port\nserver.listen(PORT);\n\nconsole.log(`Server is running on PORT: ${PORT}`);\n\n/* ========== *** ========== */\n\n/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000hola amigoconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});// code by VARSHITH REDDY SATTI\n// to create a server in node.js you should.\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write(\"write html code to display you test\")\n  res.end();\n}).listen(8080);\n// save this as httpServer.js\n// run this by typing node httpServer.js in the command line\n// to acess your server got to http://localhost:8080const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))import express from 'express';\nconst server = express();\n\nconst port = 8080;\n\nserver.get('/', (req, res) => {\n  return res.send('Hello, Express.js!');\n})\n\nserver.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});",
    "reg_date": "2021-10-14T19:41:27.000Z"
  },
  {
    "id": 580,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js sleep between axios",
    "description": "const bluebird = require('bluebird')\n\nasync function makeRequests (lines) {\n  await bluebird.map(\n    lines,\n    async (line) => {\n      const encodedLink = encodeURI(line.link)\n      const response = await axios.get(encodedLink)\n      // ...your response handling code here...\n    },\n    { concurrency: 3 }\n  )\n}\n\nmakeRequests(jsonParsed)\n",
    "reg_date": "2021-10-14T19:41:27.000Z"
  },
  {
    "id": 581,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js split",
    "description": "str.split([separator[, limit]])function splitString(stringToSplit, separator) {\n  var arrayOfStrings = stringToSplit.split(separator);\n\n  console.log('The original string is: \"' + stringToSplit + '\"');\n  console.log('The separator is: \"' + separator + '\"');\n  console.log('The array has ' + arrayOfStrings.length + ' elements: ' + arrayOfStrings.join(' / '));\n}\n\nvar tempestString = 'Oh brave new world that has such people in it.';\nvar monthString = 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec';\n\nvar space = ' ';\nvar comma = ',';\n\nsplitString(tempestString, space);\nsplitString(tempestString);\nsplitString(monthString, comma);",
    "reg_date": "2021-10-14T19:41:27.000Z"
  },
  {
    "id": 582,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js sqlite3",
    "description": "var sqlite3 = require('sqlite3').verbose();\nvar db = new sqlite3.Database(':memory:');\n\ndb.serialize(function() {\n  db.run(\"CREATE TABLE lorem (info TEXT)\");\n\n  var stmt = db.prepare(\"INSERT INTO lorem VALUES (?)\");\n  for (var i = 0; i < 10; i++) {\n      stmt.run(\"Ipsum \" + i);\n  }\n  stmt.finalize();\n\n  db.each(\"SELECT rowid AS id, info FROM lorem\", function(err, row) {\n      console.log(row.id + \": \" + row.info);\n  });\n});\n\ndb.close();",
    "reg_date": "2021-10-14T19:41:28.000Z"
  },
  {
    "id": 583,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js starter template",
    "description": "const http = require(\"http\");\nconst port = 4040;\n\nconst server = http.createServer((req, res) => {\n  if (req.url === \"/\") {\n    res.end(\"hello worrld\");\n  } else {\n    res.end(\"404 not found\");\n  }\n});\nserver.listen(port, function () {\n  console.log(`http://localhost:${port}`);\n});\n",
    "reg_date": "2021-10-14T19:41:28.000Z"
  },
  {
    "id": 584,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js stop",
    "description": "process.exit();",
    "reg_date": "2021-10-14T19:41:28.000Z"
  },
  {
    "id": 585,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js store add values in file",
    "description": "var fs = require('fs');\n\nvar myOptions = {\n  name: 'Avian',\n  dessert: 'cake'\n  flavor: 'chocolate',\n  beverage: 'coffee'\n};\n\nvar data = JSON.stringify(myOptions);\n\nfs.writeFile('./config.json', data, function (err) {\n  if (err) {\n    console.log('There has been an error saving your configuration data.');\n    console.log(err.message);\n    return;\n  }\n  console.log('Configuration saved successfully.')\n});const fs = require('fs');\n\nlet obj = {\n    table: []\n};\n\nfs.exists('myjsonfile.json', function(exists) {\n\n    if (exists) {\n      \n        fs.readFile('myjsonfile.json', function readFileCallback(err, data) {\n\n            if (err) {\n                console.log(err);\n            } else {\n                obj = JSON.parse(data);\n\n              \t//Data that you want add to the file\n                for (i = 0; i < 5; i++) {\n                    obj.table.push({\n                        id: i,\n                        square: i * i\n                    });\n                }\n\n                let json = JSON.stringify(obj);\n                fs.writeFile('myjsonfile.json', json);\n            }\n        });\n    } else {\n      \n        console.log(\"file not exists\");\n      \t\n      \t//Data that you want add to the file\n        for (i = 0; i < 5; i++) {\n            obj.table.push({\n                id: i,\n                square: i * i\n            });\n        }\n\n        let json = JSON.stringify(obj);\n        fs.writeFile('myjsonfile.json', json);\n    }\n});",
    "reg_date": "2021-10-14T19:41:28.000Z"
  },
  {
    "id": 586,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js store values in file",
    "description": "var fs = require('fs');\n\nvar myOptions = {\n  name: 'Avian',\n  dessert: 'cake'\n  flavor: 'chocolate',\n  beverage: 'coffee'\n};\n\nvar data = JSON.stringify(myOptions);\n\nfs.writeFile('./config.json', data, function (err) {\n  if (err) {\n    console.log('There has been an error saving your configuration data.');\n    console.log(err.message);\n    return;\n  }\n  console.log('Configuration saved successfully.')\n});const fs = require('fs');\n\nlet obj = {\n    table: []\n};\n\nfs.exists('myjsonfile.json', function(exists) {\n\n    if (exists) {\n      \n        fs.readFile('myjsonfile.json', function readFileCallback(err, data) {\n\n            if (err) {\n                console.log(err);\n            } else {\n                obj = JSON.parse(data);\n\n              \t//Data that you want add to the file\n                for (i = 0; i < 5; i++) {\n                    obj.table.push({\n                        id: i,\n                        square: i * i\n                    });\n                }\n\n                let json = JSON.stringify(obj);\n                fs.writeFile('myjsonfile.json', json);\n            }\n        });\n    } else {\n      \n        console.log(\"file not exists\");\n      \t\n      \t//Data that you want add to the file\n        for (i = 0; i < 5; i++) {\n            obj.table.push({\n                id: i,\n                square: i * i\n            });\n        }\n\n        let json = JSON.stringify(obj);\n        fs.writeFile('myjsonfile.json', json);\n    }\n});",
    "reg_date": "2021-10-14T19:41:28.000Z"
  },
  {
    "id": 587,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js sublime text",
    "description": "{\n    \"cmd\": [\"/usr/bin/node\", \"$file\"],\n    \"selector\": \"source.js\"\n}\n",
    "reg_date": "2021-10-14T19:41:29.000Z"
  },
  {
    "id": 588,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js throw error",
    "description": "",
    "reg_date": "2021-10-14T19:41:29.000Z"
  },
  {
    "id": 589,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js to check 32 bit",
    "description": "{\n    \"data\": [\n        {\n            \"x\": [\n                \"giraffes\",\n                \"orangutans\",\n                \"monkeys\"\n            ],\n            \"y\": [\n                20,\n                14,\n                23\n            ],\n            \"type\": \"bar\"\n        }\n    ]\n}\nCopy to Clipboard!!",
    "reg_date": "2021-10-14T19:41:29.000Z"
  },
  {
    "id": 590,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js try catch",
    "description": "try {\n  nonExistentFunction();\n} catch (error) {\n  console.error(error);\n  // expected output: ReferenceError: nonExistentFunction is not defined\n  // Note - error messages will vary depending on browser\n}var someNumber = 1;\ntry {\n  someNumber.replace(\"-\",\"\"); //You can't replace a int\n} catch(err) {\n console.log(err);\n}",
    "reg_date": "2021-10-14T19:41:29.000Z"
  },
  {
    "id": 591,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js type error",
    "description": "TypeError: res.status is not a function\n    at C:\\Users\\lenovo\\Desktop\\MERN\\backend\\app.js:16:8\n    at Layer.handle_error (C:\\Users\\lenovo\\Desktop\\MERN\\backend\\node_modules\\express\\lib\\router\\layer.js:71:5)\n    at trim_prefix (C:\\Users\\lenovo\\Desktop\\MERN\\backend\\node_modules\\express\\lib\\router\\index.js:315:13)\n    at C:\\Users\\lenovo\\Desktop\\MERN\\backend\\node_modules\\express\\lib\\router\\index.js:284:7\n    at Function.process_params (C:\\Users\\lenovo\\Desktop\\MERN\\backend\\node_modules\\express\\lib\\router\\index.js:335:12)\n    at Immediate.next (C:\\Users\\lenovo\\Desktop\\MERN\\backend\\node_modules\\express\\lib\\router\\index.js:275:10)\n    at Immediate.<anonymous> (C:\\Users\\lenovo\\Desktop\\MERN\\backend\\node_modules\\express\\lib\\router\\index.js:635:15)\n    at processImmediate (internal/timers.js:458:21)\n\n\nreason:-(error,res,req,next)  order of argument is incorrect req after before res\nsolution:-(error,req,res,next)\n",
    "reg_date": "2021-10-14T19:41:29.000Z"
  },
  {
    "id": 592,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js unix timestamp",
    "description": "Math.round(new Date().getTime() / 1000).toString()var s = new Date(1504095567183).toLocaleDateString(\"en-US\")\n// expected output \"8/30/2017\"  \nconsole.log(s);Math.floor(new Date() / 1000) // in secondsMath.floor(+new Date() / 1000)\nfunction getUnixTime() {\n  return (Date.now() / 1000) | 0;  \n}Math.floor(new Date() / 1000)",
    "reg_date": "2021-10-14T19:41:29.000Z"
  },
  {
    "id": 593,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js url download",
    "description": "export async function downloadFile(fileUrl: string, outputLocationPath: string) {\n  const writer = createWriteStream(outputLocationPath);\n\n  return Axios({\n    method: 'get',\n    url: fileUrl,\n    responseType: 'stream',\n  }).then(response => {\n\n    //ensure that the user can call `then()` only when the file has\n    //been downloaded entirely.\n\n    return new Promise((resolve, reject) => {\n      response.data.pipe(writer);\n      let error = null;\n      writer.on('error', err => {\n        error = err;\n        writer.close();\n        reject(err);\n      });\n      writer.on('close', () => {\n        if (!error) {\n          resolve(true);\n        }\n        //no need to call the reject here, as it will have been called in the\n        //'error' stream;\n      });\n    });\n  });\n}",
    "reg_date": "2021-10-14T19:41:30.000Z"
  },
  {
    "id": 594,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js utf8 encode",
    "description": "//install using 'npm install utf8'\nconst utf8 = require('utf8');\nutf8.encode(string)",
    "reg_date": "2021-10-14T19:41:30.000Z"
  },
  {
    "id": 595,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js util promisify",
    "description": "const util = require('util');\nconst fs = require('fs');\n\nconst stat = util.promisify(fs.stat);\n\nasync function callStat() {\n  const stats = await stat('.');\n  console.log(`This directory is owned by ${stats.uid}`);\n}\n",
    "reg_date": "2021-10-14T19:41:30.000Z"
  },
  {
    "id": 596,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js variable inside string",
    "description": "",
    "reg_date": "2021-10-14T19:41:30.000Z"
  },
  {
    "id": 597,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js variables in string",
    "description": "",
    "reg_date": "2021-10-14T19:41:30.000Z"
  },
  {
    "id": 598,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js version",
    "description": "node --version  \n//or\nnode -v\n\n//v12.15.0sudo npm cache clean -f \nsudo npm install -g n\nsudo n stable/lts node -v\n\nOR\n\nnode --versionNode js allows you to run javascript outside of your browser\nex: you are able to run it on your terminal",
    "reg_date": "2021-10-14T19:41:30.000Z"
  },
  {
    "id": 599,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js version 14",
    "description": "sudo apt update\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo bash -\nsudo apt -y install nodejs\nnode  -v\n\n# Install Node Development tools\nsudo apt -y install gcc g++ make\n\n# Install Yarn\ncurl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update && sudo apt install yarnsudo apt update\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo bash -\nsudo apt -y install nodejs\nnode  -v",
    "reg_date": "2021-10-14T19:41:30.000Z"
  },
  {
    "id": 600,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js with express medium",
    "description": "npm install express --save",
    "reg_date": "2021-10-14T19:41:30.000Z"
  },
  {
    "id": 601,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js write file",
    "description": "// writefile.js\n\nconst fs = require('fs');\n\nlet lyrics = 'But still I\\'m having memories of high speeds when the cops crashed\\n' + \n             'As I laugh, pushin the gas while my Glocks blast\\n' + \n             'We was young and we was dumb but we had heart';\n\n// write to a new file named 2pac.txt\nfs.writeFile('2pac.txt', lyrics, (err) => {\n    // throws an error, you could also catch it here\n    if (err) throw err;\n\n    // success case, the file was saved\n    console.log('Lyric saved!');\n});\n// fs_write.js\n\nconst fs = require('fs');\n\n// specify the path to the file, and create a buffer with characters we want to write\nlet path = 'ghetto_gospel.txt';\nlet buffer = new Buffer('Those who wish to follow me\\nI welcome with my hands\\nAnd the red sun sinks at last');\n\n// open the file in writing mode, adding a callback function where we do the actual writing\nfs.open(path, 'w', function(err, fd) {\n    if (err) {\n        throw 'could not open file: ' + err;\n    }\n\n    // write the contents of the buffer, from position 0 to the end, to the file descriptor returned in opening our file\n    fs.write(fd, buffer, 0, buffer.length, null, function(err) {\n        if (err) throw 'error writing file: ' + err;\n        fs.close(fd, function() {\n            console.log('wrote the file successfully');\n        });\n    });\n});// write_stream.js\n\nconst fs = require('fs');\n\nlet writeStream = fs.createWriteStream('secret.txt');\n\n// write some data with a base64 encoding\nwriteStream.write('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n\n// the finish event is emitted when all data has been flushed from the stream\nwriteStream.on('finish', () => {\n    console.log('wrote all data to file');\n});\n\n// close the stream\nwriteStream.end();\n// append_file.js\n\nconst fs = require('fs');\n\n// add a line to a lyric file, using appendFile\nfs.appendFile('empirestate.txt', '\\nRight there up on Broadway', (err) => {\n    if (err) throw err;\n    console.log('The lyrics were updated!');\n});\nfs.writeFile('2pac.txt', 'Some other lyric', 'ascii', callback);\nvar fs = require('fs');  \nvar txt = '\\n' + tkn_psid_id + ':' + assetUrl;\nvar folderName = '/duplicates/bugging/videobug/' + tkn_psid_id + '.txt';\nfs.appendFile(folderName, txt, function (err) {\n       if (err) {\n                console.log('Append Error');\n           } else {\n                   console.log('DuplicateFolder' + folder);\n            }\n      });",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 602,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node js write read string to file",
    "description": "fs = require('fs');\nfs.writeFile(filename, data, [encoding], [callback])\n// basic read-write string from-to file with node.js \nvar fs = require('fs');\nvar opath = 'test.txt'; \nvar ostring = 'Hello!'\nfs.writeFileSync(opath, ostring, 'utf8');\nvar istring = fs.readFileSync('test.txt').toString();\nconsole.log(istring);\n\n// with error handling and logging:  \nfs.readFile('test.txt', 'utf8' , (err, data) => {\n    if (err) {\n        console.error(err)\n        return\n    }\n    console.log(data)\n  });\n\n// or fs.readFileSync() or use streams for large files\n// for better memory consumption and execution speed\n// https://nodejs.dev/learn/reading-files-with-nodejs",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 603,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node json stringify",
    "description": "let data = {\n  name: \"John Smith\",\n  age: 30,\n  hobbies: [\"Programming\", \"Video Games\"]\n};\n\n// {name:\"John Smith\",age:30,hobbies:[\"Programming\",\"Video Games\"]}\nlet miny = JSON.stringify(data);\n\n// The 4 parameter signifys 4 spaces. You can also use \"\\t\".\n/* {\n *     name: \"John Smith\",\n *     age: 30,\n *     ...\n */\nlet pretty = JSON.stringify(data, null, 4);var person={\"first_name\":\"Tony\",\"last_name\":\"Hawk\",\"age\":31};\nvar personJSONString=JSON.stringify(person); var obj = JSON.parse(\"{no:'u',my:'sql'}\");//returnes {no:'u',my:'sql'}var Num=[1,2,3,4,5,6]\nconsole.log(\"The Numbers Are \"+JSON.stringify(Num))\n//output= The Number Are [1,2,3,4,5,6]\n",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 604,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node list files in directory",
    "description": "const testFolder = './tests/';\nconst fs = require('fs');\n\nfs.readdir(testFolder, (err, files) => {\n  files.forEach(file => {\n    console.log(file);\n  });\n});\n//requiring path and fs modules\nconst path = require('path');\nconst fs = require('fs');\n//joining path of directory \nconst directoryPath = path.join(__dirname, 'Documents');\n//passsing directoryPath and callback function\nfs.readdir(directoryPath, function (err, files) {\n    //handling error\n    if (err) {\n        return console.log('Unable to scan directory: ' + err);\n    } \n    //listing all files using forEach\n    files.forEach(function (file) {\n        // Do whatever you want to do with the file\n        console.log(file); \n    });\n});const path = require('path');\nconst fs = require('fs');\n\nfs.readdir(\n  path.resolve(__dirname, 'MyFolder'),\n  (err, files) => {\n    if (err) throw err;\n    \n    for (let file of files) {\n      console.log(file);\n    }\n  }\n);const path = require('path')\n\n//...\n\n//inside the `for` loop\nconst stat = fs.lstatSync(path.join(dir, file))\n",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 605,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node load file",
    "description": "const fs = require(\"fs\");\n\n// __dirname means relative to script. Use \"./data.txt\" if you want it relative to execution path.\nfs.readFile(__dirname + \"/data.txt\", (error, data) => {\n    if(error) {\n        throw error;\n    }\n    console.log(data.toString());\n});",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 606,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node load string from file",
    "description": "",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 607,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node load testing-01",
    "description": "$ loadtest http://localhost:7357/ -t 20 -c 10 --rps 1000\n...\nRequests: 4551, requests per second: 910, mean latency: 0 ms\nRequests: 9546, requests per second: 1000, mean latency: 0 ms\nRequests: 14549, requests per second: 1000, mean latency: 20 ms\n...\nPercentage of the requests served within a certain time\n  50%      1 ms\n  90%      2 ms\n  95%      8 ms\n  99%      133 ms\n 100%      1246 ms (longest request)\n",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 608,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node load testing-basic",
    "description": "$ loadtest http://localhost:7357/ -t 20 -c 10\n...\nRequests: 9589, requests per second: 1915, mean latency: 10 ms\nRequests: 16375, requests per second: 1359, mean latency: 10 ms\nRequests: 16375, requests per second: 0, mean latency: 0 ms\n...\nCompleted requests:  16376\nRequests per second: 368\nTotal time:          44.503181166000005 s\n\nPercentage of the requests served within a certain time\n  50%      4 ms\n  90%      5 ms\n  95%      6 ms\n  99%      14 ms\n 100%      35997 ms (longest request)\n",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 609,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node load testing-check",
    "description": "$ loadtest http://localhost:7357/ -t 20 -c 10 --keepalive --rps 2000\n...\nRequests per second: 1950\n\nPercentage of the requests served within a certain time\n  50%      1 ms\n  90%      2 ms\n  95%      2 ms\n  99%      7 ms\n 100%      20 ms (longest request)\n",
    "reg_date": "2021-10-14T19:41:31.000Z"
  },
  {
    "id": 610,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node log centered",
    "description": "// Center text horizontally\nfunction logXCentered(s) {\n  console.log(' '.repeat(process.stdout.columns / 2 - s.length / 2) + s);\n}\nlogXCentered('This text is centered horizontally.');\n\n// Center text both, horizontally and vertically\nfunction logCentered(s) {\n  console.log(\n    '\\n'.repeat(process.stdout.rows / 2) +\n      ' '.repeat(process.stdout.columns / 2 - s.length / 2) +\n      s +\n      '\\n'.repeat(process.stdout.rows / 2 - 1)\n  );\n}\nlogCentered('This text is centered.');",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 611,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node log docker",
    "description": "No result Found",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 612,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node loop files and push to array to display on screen with nunjucks",
    "description": "<!-- Nunjucks to loop the array and show each file in a list -->\n<ul>\n  {% for file in fileList %}\n  \t<li>{{ file }}</li>\n  {% endfor %}\n</ul>const directoryPath = './path/to/dir/';\n\n// loop files in directory and push to an array and pass to rendered screen\nrouter.get('/slug', (req, res) => {\n    let fileList = [];\n    fs.readdir(directoryPath, (err, file) => {\n        if (err) {\n            return console.log('Unable to scan directory: ' + err);\n        } \n        file.forEach((file) => {\n            fileList.push(file);\n        });\n      \t// Passing the array to the rendered screen\n        res.render('rendered/screen', {fileList});\n    });\n});",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 613,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node mailer office 365",
    "description": "{ \n    host: 'smtp.office365.com',\n    port: '587',\n    auth: { user: 'xxxx', pass: 'xxxx' },\n    secureConnection: false,\n    tls: { ciphers: 'SSLv3' }\n}",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 614,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node main",
    "description": "// main.js / main.ts (the filename doesn't matter)\n\nfunction main() {\n  console.log(\"Hello world\");\n}\n\nif (require.main === module) {\n  main();\n}",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 615,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node map has value",
    "description": "",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 616,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node middle code for server",
    "description": "const server = http.createServer((req, res)=>{\nres.writeHead(200, {‘Content-type’ : ‘text/html’}); \nres.end(fileContent)",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 617,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node minimal db example",
    "description": "",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 618,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node module export multiple functions",
    "description": "//Inside lib file declare functions\nconst animalName = (name) => {\n\tconsole.log(name)\n}\nconst animalSound = (sound) => {\n\tconsole.log(sound)\n}\n//Export these both as JSON\nmodule.exports = {animalName, animalSound}\n\n//Navigate to file you want to use them and import\nconst animalLib = require('./location_of_file.js')\n\n//To access the function\nanimalLib.animalName(\"zebra\")function foo() { console.log('foo') }\nfunction bar() { console.log('bar') }\nfunction baz() { foo(); bar() }\n\nexport default {foo, bar, baz}module.exports = function(firstParam) { console.log(\"You did it\"); },\nmodule.exports = function(secondParam) { console.log(\"Yes you did it\"); }, \n// This may contain more functions",
    "reg_date": "2021-10-14T19:41:32.000Z"
  },
  {
    "id": 619,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node mon",
    "description": "# Install nodemon\nnpm install nodemon\n\n# Install nodemon globally on your machine\nnpm install -g nodemon\n\n# Install nodemon on your project as dev-dependency\nnpm install nodemon --save-devnpm install nodemon --save-devnpm install -g nodemonnpm install -g nodemonnodemon --exec npm run dev:testnpm install --save-dev nodemon",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 620,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node mon install",
    "description": "npm install -g nodemonnodemon --exec npm run dev:testnpm install --save-dev nodemon",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 621,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node mongoose save document",
    "description": "const Person = mongoose.model('Person', Schema({\n  name: String,\n  rank: String\n}));\n\nconst doc = new Person({\n  name: 'Will Riker',\n  rank: 'Commander'\n});\n// Inserts a new document with `name = 'Will Riker'` and\n// `rank = 'Commander'`\nawait doc.save();\n\nconst person = await Person.findOne();\nperson.name; // 'Will Riker'// Example for a model called Person with two properties, e.g. name, surname\n// Values to be saved\nconst person = { name: Jane, surname: Doe};\n// you can access the _id property from savedPerson variable (savedPerson._id)\nsavedPerson = await new Person(person).save()",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 622,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node open file",
    "description": "// load fs\nconst fs = require(\"fs\");\n// read the file\nconst content = fs.readFileSync(\"./my_file.txt\");\n// print it\nconsole.log(content.toString());const fs = require(\"fs\");\n\n// __dirname means relative to script. Use \"./data.txt\" if you want it relative to execution path.\nfs.readFile(__dirname + \"/data.txt\", (error, data) => {\n    if(error) {\n        throw error;\n    }\n    console.log(data.toString());\n});const fs = require('fs');\n\nfs.readFile('my-file.txt', 'utf8', function(err, data) {\n    if (err) throw err;\n    console.log(data);\n});fs = require('fs')\nfs.readFile('/etc/hosts', 'utf8', function (err,data) {\n  if (err) {\n    return console.log(err);\n  }\n  console.log(data);\n});",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 623,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node package.json type module",
    "description": "",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 624,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node parameter add memory",
    "description": "node --max-old-space-size=8192 server.js  \n",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 625,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node pg array in",
    "description": "client.query(\n\t\"SELECT * FROM stooges WHERE name = ANY ($1)\", [\n\t\t['larry', 'curly', 'moe']\n\t]\n);",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 626,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node print command",
    "description": "const x = 'x'\nconst y = 'y'\nconsole.log(x, y)",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 627,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node print stdin",
    "description": "const process = require(\"process\")\nprocess.stdin.on('data', data => {\n    console.log(data.toString())\n})\n",
    "reg_date": "2021-10-14T19:41:33.000Z"
  },
  {
    "id": 628,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node print variable",
    "description": "const x = 'x'\nconst y = 'y'\nconsole.log(x, y)",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 629,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node promisify without err",
    "description": "function promisify(func, callbackPos) {\n  return (...args) => {\n    return new Promise((resolve) => {\n      const cb = (...args) => {\n        resolve(args);\n      };\n      args.splice(callbackPos ? callbackPos : args.length, 0, cb);\n      func(...args);\n    });\n  };\n};function promisify(func, callbackPos) {\n  return (...args) => {\n    return new Promise((resolve) => {\n      const cb = (...args) => {\n        resolve(args);\n      };\n      args.splice(callbackPos ? callbackPos : args.length, 0, cb);\n      func(...args);\n    });\n  };\n};\n\n// Example:\n\n// Import readline\nconst readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n// Promisify rl.question\nconst asyncQuestion = promisify(rl.question.bind(rl));\n\n(async () => {\n  // Call asyncQuestion (Get some input from the user)\n  // Here we get all params back in an array\n  const input = (await asyncQuestion('Type something: '))[0];\n  console.log('You typed: ' + input);\n  \n  // We can also use this syntax\n  [someOtherInput] = await asyncQuestion('Another input: ');\n  console.log('You typed: ' + someOtherInput);\n})();",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 630,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node proxy nginx digital",
    "description": "server {\n...\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 631,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node random string",
    "description": "var crypto = require(\"crypto\");\nvar id = crypto.randomBytes(20).toString('hex');\n\n// \"bb5dc8842ca31d4603d6aa11448d1654\"function getRandomString(length) {\n    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var result = '';\n    for ( var i = 0; i < length; i++ ) {\n        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n    }\n    return result;\n}\n\n//usage: getRandomString(20); // pass desired length of random stringfunction randomString(length) {\n\t\tvar result           = '';\n\t\tvar characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~!@#$%^&*()_+=-';\n\t\tvar charactersLength = characters.length;\n\t\tfor ( var i = 0; i < length; i++ ) {\n\t\t   result += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t\t}\n\t\treturn result;\n\t }\nrandomString(4);function makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * \n charactersLength));\n   }\n   return result;\n}\n\nconsole.log(makeid(5));function makeid(length) {\n    var result           = [];\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n      result.push(characters.charAt(Math.floor(Math.random() * \n charactersLength)));\n   }\n   return result.join('');\n}\n\nconsole.log(makeid(5));const string_length = 10\n[...Array(string_length)].map(i=>(~~(Math.random()*36)).toString(36)).join('')",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 632,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node readFileSync json",
    "description": "const fs = require('fs');\n\nlet rawdata = fs.readFileSync('student.json');\nlet student = JSON.parse(rawdata);\nconsole.log(student);\n",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 633,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node read file line",
    "description": "",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 634,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node read file stream",
    "description": "const fs = require('fs');\nconst server = require('http').createServer();\n\nserver.on('request', (req, res) => {\n  const src = fs.createReadStream('./big.file');\n  src.pipe(res);\n});\n\nserver.listen(8000);",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 635,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node read file sync",
    "description": "",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 636,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node red admin password setting",
    "description": "httpNodeAuth: {user:\"fred\",pass:\"$2a$04$3gkGX/Q4VZ//F37kWvSU9eE9EM1WO2rdWk1oj/kfXIbeBON5eA56S\"},",
    "reg_date": "2021-10-14T19:41:34.000Z"
  },
  {
    "id": 637,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node red debug to console",
    "description": "//NODE-RED Show message in debug window\n\nnode.warn(\"msg\"); \nnode.error(\"msg\");",
    "reg_date": "2021-10-14T19:41:35.000Z"
  },
  {
    "id": 638,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node red flow.set",
    "description": "flow.set(“fred”,1);",
    "reg_date": "2021-10-14T19:41:35.000Z"
  },
  {
    "id": 639,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node red http post request data",
    "description": "msg.headers = {};\nmsg.headers={ \n    'Authorization':  'whatever',\n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nmsg.payload = {};\nmsg.payload={ \n    'key': 'whatever_value'\n};\n\nreturn msg",
    "reg_date": "2021-10-14T19:41:35.000Z"
  },
  {
    "id": 640,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node red json array",
    "description": "[{\"id\":\"187967a.a95e618\",\"type\":\"inject\",\"z\":\"4484ee28.caa3c\",\"name\":\"\",\"props\":[{\"p\":\"payload\"},{\"p\":\"object\",\"v\":\"{\\\"1\\\":1,\\\"2\\\":2}\",\"vt\":\"str\"}],\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"onceDelay\":0.1,\"topic\":\"\",\"payload\":\"[1,2,3]\",\"payloadType\":\"json\",\"x\":130,\"y\":500,\"wires\":[[\"4119a2a6.a337dc\"]]},{\"id\":\"4119a2a6.a337dc\",\"type\":\"change\",\"z\":\"4484ee28.caa3c\",\"name\":\"\",\"rules\":[{\"t\":\"set\",\"p\":\"payload\",\"pt\":\"msg\",\"to\":\"$append(payload, [object])\",\"tot\":\"jsonata\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":340,\"y\":500,\"wires\":[[\"269a25ff.79887a\"]]},{\"id\":\"269a25ff.79887a\",\"type\":\"debug\",\"z\":\"4484ee28.caa3c\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":590,\"y\":360,\"wires\":[]}]\n",
    "reg_date": "2021-10-14T19:41:35.000Z"
  },
  {
    "id": 641,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node red push to array",
    "description": "var array = flow.get('array') || [];\narray.push(msg.payload);\nflow.set(\"array\", array);\nreturn msg;",
    "reg_date": "2021-10-14T19:41:35.000Z"
  },
  {
    "id": 642,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node red reverse proxy for ui to root",
    "description": "Server {\n  Servername example.com\n  \n  location / {\n  ProxyPass example.com:1880/ui\n  }\n}",
    "reg_date": "2021-10-14T19:41:35.000Z"
  },
  {
    "id": 643,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node red using tcp request",
    "description": "[{\"id\":\"a3ef18b7.a999c\",\"type\":\"inject\",\"z\":\"b202007e.d90a8\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"onceDelay\":0.1,\"x\":480,\"y\":200,\"wires\":[[\"c51694de.595b3\"]]},{\"id\":\"903ca0e4.9bea1\",\"type\":\"debug\",\"z\":\"b202007e.d90a8\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"false\",\"x\":970,\"y\":260,\"wires\":[]},{\"id\":\"69515a20.c2559c\",\"type\":\"tcp request\",\"z\":\"b202007e.d90a8\",\"server\":\"\",\"port\":\"\",\"out\":\"sit\",\"splitc\":\" \",\"name\":\"\",\"x\":790,\"y\":260,\"wires\":[[\"903ca0e4.9bea1\"]]},{\"id\":\"c51694de.595b3\",\"type\":\"function\",\"z\":\"b202007e.d90a8\",\"name\":\"1012\",\"func\":\"msg.host = \\\"192.168.178.2\\\";\\nmsg.port = 1012;\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"x\":630,\"y\":200,\"wires\":[[\"69515a20.c2559c\",\"9ab87057.0de5a8\"]]},{\"id\":\"298f72a8.db23fe\",\"type\":\"function\",\"z\":\"b202007e.d90a8\",\"name\":\"1015\",\"func\":\"msg.host = \\\"192.168.178.2\\\";\\nmsg.port = 1015;\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"x\":630,\"y\":320,\"wires\":[[\"69515a20.c2559c\",\"44c039e4.3a0dc8\"]]},{\"id\":\"eb52f817.2df93\",\"type\":\"inject\",\"z\":\"b202007e.d90a8\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"onceDelay\":0.1,\"x\":480,\"y\":320,\"wires\":[[\"298f72a8.db23fe\"]]},{\"id\":\"9ab87057.0de5a8\",\"type\":\"debug\",\"z\":\"b202007e.d90a8\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"false\",\"x\":790,\"y\":200,\"wires\":[]},{\"id\":\"44c039e4.3a0dc8\",\"type\":\"debug\",\"z\":\"b202007e.d90a8\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"false\",\"x\":790,\"y\":320,\"wires\":[]}]\n",
    "reg_date": "2021-10-14T19:41:35.000Z"
  },
  {
    "id": 644,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node require fs not found",
    "description": "module.exports = {\n  webpack: (config, { isServer }) => {\n    // Fixes npm packages that depend on `fs` module\n    if (!isServer) {\n      config.node = {\n        fs: 'empty'\n      }\n    }\n\n    return config\n  }\n}",
    "reg_date": "2021-10-14T19:41:35.000Z"
  },
  {
    "id": 645,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node require is not defined",
    "description": "app.on('ready', () => {\n    mainWindow = new BrowserWindow({\n        webPreferences: {\n            nodeIntegration: true\n        }\n    });\n});// use import instead\nimport { createRequire } from 'module';",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 646,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node run command",
    "description": "// You can use 'exec' this way\n\nconst { exec } = require(\"child_process\");\n\nexec(\"ls -la\", (error, stdout, stderr) => {\n    if (error) {\n        console.log(`error: ${error.message}`);\n        return;\n    }\n    if (stderr) {\n        console.log(`stderr: ${stderr}`);\n        return;\n    }\n    console.log(`stdout: ${stdout}`);\n});\nconst { exec } = require(\"child_process\");\nexec(\"cat index.js\", (error, data, getter) => {\n\tif(error){\n\t\tconsole.log(\"error\",error.message);\n\t\treturn;\n\t}\n\tif(getter){\n\t\tconsole.log(\"data\",data);\n\t\treturn;\n\t}\n\tconsole.log(\"data\",data);\n\n});\n// You can use 'exec' this way\n// LINUX EXAMPLE\n\nconst { exec } = require(\"child_process\");\n\nexec(\"ls -la\", (error, stdout, stderr) => {\n    if (error) {\n        console.log(`error: ${error.message}`);\n        return;\n    }\n    if (stderr) {\n        console.log(`stderr: ${stderr}`);\n        return;\n    }\n    console.log(`stdout: ${stdout}`);\n});// Run a command asynchronously\nconst { spawn } = require('child_process');\nconst dir = spawn('cmd', ['/c', 'dir']);\n\ndir.stdout.on('data', data => console.log(`Stdout: ${data}`));\ndir.stderr.on('data', data => console.log(`Stderr: ${data}`));\ndir.on('close', code => console.log(`Exit code: ${code}`));\n\n// Run a command synchronously\nconst { spawnSync } = require( 'child_process' );\nconst dir = spawnSync('cmd', ['/c', 'dir']);\n\nconsole.log(`Stdout: ${dir.stdout.toString()}`);\nconsole.log(`Stderr: ${dir.stderr.toString()}`);",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 647,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node run parameters",
    "description": "var args = process.argv.slice(2);",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 648,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node sass error",
    "description": "You need to do next steps and it should work:\n\nrm -rf node_modules package-lock.json \nnpm install --saveDev node-sass@4.5.3 \nnpm install\nVoila :)npm install --global windows-build-tools //BOOM!",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 649,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node sass how to configure number of spaces",
    "description": "node-sass --indent-width=number inputFilePath outputFilePath",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 650,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node sass version 5.0.0 is incompatible with ^4.0.0",
    "description": "with npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn remove node-sass@4.14.1with npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn add node-sass@4.14.1with npm =>\n1. npm uninstall node-sass\n2. npm install node-sass@4.14.1\nwith yarn => \n1. yarn remove node-sass\n2. yarn add node-sass@4.14.1\n\n// ^ Update to MR J's post    npm uninstall node-sass\n    npm install node-sass@4.14.1\n\nOr, if using yarn (default in newer CRA versions)\n\n    yarn remove node-sass\n    yarn add node-sass@4.14.1npm uninstall node-sass\nnpm install node-sass@4.14.1\n\nOr, if using yarn (default in newer CRA versions)\n\nyarn remove node-sass\nyarn add node-sass@4.14.1$ npm uninstall node-sass\n$ npm install node-sass@4.14.1\n\n# Or, if using yarn (default in newer CRA versions)\n\n$ yarn remove node-sass\n$ yarn add node-sass@4.14.1",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 651,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node sass version 6.0.0 is incompatible with 4.0.0",
    "description": "with npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn remove node-sass@4.14.1with npm =>\n1.npm uninstall node-sass\n2.npm install node-sass@4.14.1\nwith yarn => \n1.yarn remove node-sass\n2.yarn add node-sass@4.14.1[Already Solved] Error: Node Sass version 5.0.0 is incompatible with ^4.0.0\t",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 652,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node sass version react",
    "description": "yarn add node-sass@4.14.1var sass = require('node-sass');\nsass.render({\n  file: scss_filename,\n  [, options..]\n}, function(err, result) { /*...*/ });\n// OR\nvar result = sass.renderSync({\n  data: scss_content\n  [, options..]\n});",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 653,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node save wav base64",
    "description": "fs.writeFileSync('file.ogg', Buffer.from(base64data.replace('data:audio/ogg; codecs=opus;base64,', ''), 'base64'));\n",
    "reg_date": "2021-10-14T19:41:36.000Z"
  },
  {
    "id": 654,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node schedule every minute",
    "description": "var rule = new schedule.RecurrenceRule();\n\nrule.minute = new schedule.Range(0, 59, 5);\n\nschedule.scheduleJob(rule, function(){\n    console.log(rule);\n    console.log('Today is recognized by Rebecca Black!---------------------------');\n});\n",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 655,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node scheduler rules",
    "description": "const job = schedule.scheduleJob('0 1 * * *', function(fireDate){\n  console.log('This job was supposed to run at ' + fireDate + ', but actually ran at ' + new Date());\n});",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 656,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node search filter array of objects",
    "description": "var arr = [1,2,3,4],\n    brr = [2,4],\n    res = arr.filter(f => !brr.includes(f));\nconsole.log(res);sadfsadf",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 657,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node send file",
    "description": "",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 658,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node send post request",
    "description": "const axios = require('axios')\n\naxios\n  .post('https://whatever.com/todos', {\n    todo: 'Buy the milk'\n  })\n  .then(res => {\n    console.log(`statusCode: ${res.statusCode}`)\n    console.log(res)\n  })\n  .catch(error => {\n    console.error(error)\n  })const axios = require('axios');\n\naxios.get('https://jsonplaceholder.typicode.com/users')\n  .then(res => {\n    const headerDate = res.headers && res.headers.date ? res.headers.date : 'no response date';\n    console.log('Status Code:', res.status);\n    console.log('Date in Response header:', headerDate);\n\n    const users = res.data;\n\n    for(user of users) {\n      console.log(`Got user with id: ${user.id}, name: ${user.name}`);\n    }\n  })\n  .catch(err => {\n    console.log('Error: ', err.message);\n  });",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 659,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node serialport isopen",
    "description": "node serialport isopen\n",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 660,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node server start using pm2",
    "description": "pm2 start npm --name \"app name\" -- start\n# only start will make it\npm2 start app.jspm2 start app.js -o \"/dev/null\" -e \"/dev/null\"",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 661,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node silent print to themral",
    "description": "$ npm install node-thermal-printer\n",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 662,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node sleep",
    "description": "// one liner\nawait new Promise(resolve => setTimeout(resolve, 5000));\n\n// or re-usable `sleep` function:\nasync function init() {\n  console.log(1);\n  await sleep(1000);\n  console.log(2);\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}await sleep(1000)\nfunction sleep(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n} ",
    "reg_date": "2021-10-14T19:41:37.000Z"
  },
  {
    "id": 663,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node spawn",
    "description": "const { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\nvar child = require('child_process').exec('python celulas.py')\nchild.stdout.pipe(process.stdout)\nchild.on('exit', function() {\n  process.exit()\n})var execSync = require('exec-sync');\n\nvar user = execSync('python celulas.py');",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 664,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node start is too slow windows 10",
    "description": "\"%ProgramFiles(x86)%\\Symantec\\Symantec Endpoint Protection\\smc.exe\" -stop\n",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 665,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node stdin read char by char",
    "description": "const stdin = process.stdin;\nif (!stdin.isTTY) {\n  console.log('Error: TTY is not available. (Don\\'t start me with nodemon.)');\n  process.exit(1);\n}\nstdin.setRawMode(true);\nstdin.setEncoding('utf8');\nstdin.resume();\n\nstdin.on('data', (key) => {\n  if (key === '\\u0003') {\n    process.exit();\n  } else if (key === '\\b') {\n    process.stdout.write('\\b \\b');\n  } else if (key === '\\r') {\n    process.stdout.write('\\r\\n');\n  } else {\n    process.stdout.write(key);\n  }\n});",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 666,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node string to chars with spaces in between",
    "description": "let str = 'hello'\nstr.split('').join(' '); // \"h e l l o\"",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 667,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node string to json",
    "description": "const json = '{\"result\":true, \"count\":42}';\nconst obj = JSON.parse(json);var jsonPerson = '{\"first_name\":\"billy\", \"age\":23}';\nvar personObject = JSON.parse(jsonPerson); //parse json string into JS object    var str = '[{\"UserName\":\"xxx\",\"Rolename\":\"yyy\"}]'; // your response in a string\n    var parsed = JSON.parse(str); // an *array* that contains the user\n    var user = parsed[0];         // a simple user\n    console.log(user.UserName);   // you'll get xxx\n    console.log(user.Rolename);   // you'll get yyy",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 668,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node sudo nvm",
    "description": "n=$(which node); \\\nn=${n%/bin/node}; \\\nchmod -R 755 $n/bin/*; \\\nsudo cp -r $n/{bin,lib,share} /usr/local",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 669,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node telegram bot api",
    "description": "const TelegramBot = require('node-telegram-bot-api');\n\n// replace the value below with the Telegram token you receive from @BotFather\nconst token = 'YOUR_TELEGRAM_BOT_TOKEN';\n\n// Create a bot that uses 'polling' to fetch new updates\nconst bot = new TelegramBot(token, {polling: true});\n\n// Matches \"/echo [whatever]\"\nbot.onText(/\\/echo (.+)/, (msg, match) => {\n  // 'msg' is the received Message from Telegram\n  // 'match' is the result of executing the regexp above on the text content\n  // of the message\n\n  const chatId = msg.chat.id;\n  const resp = match[1]; // the captured \"whatever\"\n\n  // send back the matched \"whatever\" to the chat\n  bot.sendMessage(chatId, resp);\n});\n\n// Listen for any kind of message. There are different kinds of\n// messages.\nbot.on('message', (msg) => {\n  const chatId = msg.chat.id;\n\n  // send a message to the chat acknowledging receipt of their message\n  bot.sendMessage(chatId, 'Received your message');\n});",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 670,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node terminal readline console",
    "description": "before executing the command node in terminal you have to install\n  :~$ npm install prompt-sync\nif you havent already.\nthen inside node\n  >const prompt = require('prompt-sync')();\n  >name = prompt('What is your name? '); michael\n  >console.log(`Hey there ${name}`);\nHey there michael",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 671,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node test unit",
    "description": "var assert = require('assert');\ndescribe('Array', function() {\n  describe('#indexOf()', function() {\n    it('should return -1 when the value is not present', function() {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});\n",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 672,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node to viewport godot",
    "description": "if node.get_class() == \"Node\":\n",
    "reg_date": "2021-10-14T19:41:38.000Z"
  },
  {
    "id": 673,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node ubutun",
    "description": "sudo apt-get install curl\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install nodejs\n# Check node version\nnode -v \n# v13.9.0\n# Also, check the npm version\nnpm -v \n# 6.13.7sudo apt-get update\nsudo apt-get install nodejs npmwget -qO- https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install -y nodejssudo apt-get install curl sudo chmod +x /usr/local/bin/nsudo curl -o /usr/local/bin/n https://raw.githubusercontent.com/visionmedia/n/master/bin/n",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 674,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node update command npm",
    "description": "npm install -g update-nodenpm update -g <package_name>\nnpm outdated\n",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 675,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node updaten",
    "description": "//First, clear the npm cache:\n\tnpm cache clean -f\n\n//Install n, Node’s version manager:\n\tnpm install -g n\n    \n//With the n module installed, you can use it to:\n\tInstall the latest stable version: n stable\n\tInstall the latest release: n latestnpm cache clean -f\nnpm install -g n\nn stable",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 676,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node uptime monitor",
    "description": "const myMonitor = new Monitor({\n    website: 'https://example.com/',\n    title: 'Example Website',\n    interval: 1,\n    confing: {\n        intervalUnits: 'minutes'\n    },\n    httpOptions: {\n        path: '/users',\n        method: 'get',\n    },\n    expect: {\n        statusCode: 200\n    }\n});\nmyMonitor.on(\"up\", function (res, state) {\n    console.log(`Uptime is Running`)\n})",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 677,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node wait 10 seconds",
    "description": "",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 678,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  node wrangler preview",
    "description": "Simply Ctrl + Shift + Click a node",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 679,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 680,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs 14 in docker",
    "description": "",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 681,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs  css cotent tipe",
    "description": "{'Content-Type': 'text/css'}",
    "reg_date": "2021-10-14T19:41:39.000Z"
  },
  {
    "id": 682,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs add element to array",
    "description": "",
    "reg_date": "2021-10-14T19:41:40.000Z"
  },
  {
    "id": 683,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs add new property array object",
    "description": "const data = [{ name: 'dendi', age: 23 }, { name: 'dhani' }]\nconst result = data.filter((v, i) => {\n\tif (!Object.keys(v).includes('age')) {\n\t\tObject.defineProperty(v, 'age', {\n\t\t\tvalue: 25,\n\t\t\twriteable: true,\n\t\t\tenumerable: true\n\t\t})\n\t}\n\treturn v\n})",
    "reg_date": "2021-10-14T19:41:40.000Z"
  },
  {
    "id": 684,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs add to array",
    "description": "",
    "reg_date": "2021-10-14T19:41:40.000Z"
  },
  {
    "id": 685,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs api to logged in users count on an application",
    "description": "var io = require('socket.io').listen(8080);\nvar count = 0\n\nio.sockets.on('connection', function(socket) {\n    count++;\n    io.sockets.emit('message', { count: count });\n\n    socket.on('disconnect', function(){\n        count--;\n        io.sockets.emit('message', { count: count });\n    })\n});\n",
    "reg_date": "2021-10-14T19:41:40.000Z"
  },
  {
    "id": 686,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs array buffer to buffer",
    "description": "\"From ArrayBuffer to Buffer\" could be done this way:\n\nvar buffer = Buffer.from( new Uint8Array(ab) );",
    "reg_date": "2021-10-14T19:41:40.000Z"
  },
  {
    "id": 687,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs array write to lines file",
    "description": "let arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\nconsole.log(arr); // [ 'a', 'b', 'c', 'd', 'e', 'f' ]\n\nconsole.log(arr.join('\\n'));\n// a\n// b\n// c\n// d\n// e\n// f\n\nlet text = arr.join('\\n');\n\nfs.writeFileSync('modified.txt', text, \"utf8\");\n",
    "reg_date": "2021-10-14T19:41:40.000Z"
  },
  {
    "id": 688,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs atob",
    "description": "// If you need to convert to Base64 you could do so using Buffer:\nconsole.log(Buffer.from('Hello World!').toString('base64'));\n// Reverse (assuming the content you're decoding is a utf8 string):\nconsole.log(Buffer.from(b64Encoded, 'base64').toString());Buffer.from('Hello world!', 'binary').toString('base64')(function () {\n  \"use strict\";\n\n  var atob = require('atob');\n  var b64 = \"SGVsbG8sIFdvcmxkIQ==\";\n  var bin = atob(b64);\n\n  console.log(bin); // \"Hello, World!\"\n}());\nThe atob() and btoa() methods allow authors to transform content to and from the base64 encoding.\n\nIn these APIs, for mnemonic purposes, the \"b\" can be considered to stand for \"binary\", and the \"a\" for \"ASCII\". In practice, though, for primarily historical reasons, both the input and output of these functions are Unicode strings.\n\nFrom : http://www.w3.org/TR/html/webappapis.html#atob",
    "reg_date": "2021-10-14T19:41:40.000Z"
  },
  {
    "id": 689,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs authentication token",
    "description": "Setting up our development environment and initializing our express server.\nCreating our first basic route and controller.\nFleshing out our routes and controllers to add users and login users.\nCreating a route and controller that will handle getting all users.As a first test to ensure that you can connect to your FusionAuth service, create a test.js file, replacing the first parameter in the FusionAuthClient constructor [your API Key here] with a valid API key from your FusionAuth environment. Replace the email address user@example.com with a valid user in your FusionAuth environment. If you just installed FusionAuth there may only be a single user which will be the email address used to complete the Setup Wizard.\n\nIf the request contains the access token, then the server will verify whether it was issued by the server itself using the stored secret. In case the token is expired or recognized as a one not signed by the server, the jsonwebtoken’s verify method will throw an error. We can handle the error to return a 401 error back to the client.",
    "reg_date": "2021-10-14T19:41:41.000Z"
  },
  {
    "id": 690,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs await inside map",
    "description": "",
    "reg_date": "2021-10-14T19:41:41.000Z"
  },
  {
    "id": 691,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs aws s3 bucket delete item",
    "description": "var params = {  Bucket: 'your bucket', Key: 'your object' };\n\ns3.deleteObject(params, function(err, data) {\n  if (err) console.log(err, err.stack);  // error\n  else     console.log();                 // deleted\n});",
    "reg_date": "2021-10-14T19:41:41.000Z"
  },
  {
    "id": 692,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs aws s3 stream upload",
    "description": "inputStream\n  .pipe(uploadFromStream(s3));\n\nfunction uploadFromStream(s3) {\n  var pass = new stream.PassThrough();\n\n  var params = {Bucket: BUCKET, Key: KEY, Body: pass};\n  s3.upload(params, function(err, data) {\n    console.log(err, data);\n  });\n\n  return pass;\n}\n",
    "reg_date": "2021-10-14T19:41:41.000Z"
  },
  {
    "id": 693,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs base64",
    "description": "> console.log(Buffer.from(\"Hello World\").toString('base64'));\nSGVsbG8gV29ybGQ=\n> console.log(Buffer.from(\"SGVsbG8gV29ybGQ=\", 'base64').toString('ascii'))\nHello World//--------------- HOW TO ENCODE BASE64 ON NODEJS ----------------------\n//create a buffer of the text \"Hello World\"\nvar buffer = Buffer.from('Hello World');\n//buffer result is: <Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64>\n\nvar string64 = buffer.toString('base64');\n// .toString('base64') allow to encode it to base64\n// result is: SGVsbG8gV29ybGQ=\n\n// Can be use combined together like these\nconsole.log(Buffer.from('Hello World').toString('base64'));\n// result is: SGVsbG8gV29ybGQ=//--------------- HOW TO DECODE BASE64 ON NODEJS ----------------------\n//create a buffer of the text \"Hello World\"\nvar buffer = Buffer.from('SGVsbG8gV29ybGQ=', 'base64');\n//buffer result is: <Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64>\n\nvar string64 = buffer.toString('base64');\n// .toString('ascii') allow to decode base64\n// result is: \"Hello World\"\n\n// Can be use combined together like these\nconsole.log(Buffer.from('SGVsbG8gV29ybGQ=', 'base64').toString('ascii'));\n// result is: \"Hello World\"\n'use strict';\n\nlet data = 'stackabuse.com';\nlet buff = new Buffer(data);\nlet base64data = buff.toString('base64');\n\nconsole.log('\"' + data + '\" converted to Base64 is \"' + base64data + '\"');\n",
    "reg_date": "2021-10-14T19:41:41.000Z"
  },
  {
    "id": 694,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs binary string to decimal number",
    "description": "var digit = parseInt(binary, 2);\n",
    "reg_date": "2021-10-14T19:41:41.000Z"
  },
  {
    "id": 695,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs bodyparser form data",
    "description": "var bodyParser = require('body-parser');\nvar multer = require('multer');\nvar forms = multer();\n\n// apply them\n\napp.use(bodyParser.json());\napp.use(forms.array()); \napp.use(bodyParser.urlencoded({ extended: true }));\n\n// how to use\n\nrouter.post('/', function(req, res) {\n    console.log(req.body);\n    console.log('received the widget request');\n});\nconst express = require('express')\nconst app = express()\n\napp.use(express.urlencoded())\n",
    "reg_date": "2021-10-14T19:41:41.000Z"
  },
  {
    "id": 696,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs btoa",
    "description": "Buffer.from('Hello world!', 'binary').toString('base64')(function () {\n  \"use strict\";\n\n  var atob = require('atob');\n  var b64 = \"SGVsbG8sIFdvcmxkIQ==\";\n  var bin = atob(b64);\n\n  console.log(bin); // \"Hello, World!\"\n}());\nconsole.log(Buffer.from('Hello World!').toString('base64'));\n",
    "reg_date": "2021-10-14T19:41:41.000Z"
  },
  {
    "id": 697,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs buffer.from base64",
    "description": "//--------------- HOW TO ENCODE BASE64 ON NODEJS ----------------------\n//create a buffer of the text \"Hello World\"\nvar buffer = Buffer.from('Hello World');\n//buffer result is: <Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64>\n\nvar string64 = buffer.toString('base64');\n// .toString('base64') allow to encode it to base64\n// result is: SGVsbG8gV29ybGQ=\n\n// Can be use combined together like these\nconsole.log(Buffer.from('Hello World').toString('base64'));\n// result is: SGVsbG8gV29ybGQ=var buffer = Buffer.from('hello');//create a buffer of the text \"hello\"\n//right now, buffer == <Buffer 68 65 6c 6c 6f>\nvar string64 = buffer.toString('base64');\n//the .toString operator can set encoding\n//string64 == 'aGVsbG8='//--------------- HOW TO DECODE BASE64 ON NODEJS ----------------------\n//create a buffer of the text \"Hello World\"\nvar buffer = Buffer.from('SGVsbG8gV29ybGQ=', 'base64');\n//buffer result is: <Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64>\n\nvar string64 = buffer.toString('base64');\n// .toString('ascii') allow to decode base64\n// result is: \"Hello World\"\n\n// Can be use combined together like these\nconsole.log(Buffer.from('SGVsbG8gV29ybGQ=', 'base64').toString('ascii'));\n// result is: \"Hello World\"",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 698,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs cache data",
    "description": "    npm install node-cache --save",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 699,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs catch uncaught exception",
    "description": "process\n\t.on('uncaughtException', (err) => console.error(err, 'Uncaught Exception'))\n\t.on('unhandledRejection', (reason, promise) =>\n\t\tconsole.error(reason, 'Unhandled Rejection at', promise)\n\t);",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 700,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs chaning env variable at runtime",
    "description": "It isn't possible to modify the env vars \nof a running process. This isn't unique to \nNodeJS processes. It's just how env vars \nwork on UNIX like operating systems.\nThe vars live within the address space of \nthe process. And while they are, typically,\ninitially placed at a well known location\nnear the top of the stack the current vars are \nlikely to be at an arbitrary address in the heap. \nEnv vars are intentionally private to each process. \nSo unless the program provides an API for \nchanging its env vars you can't\nmodify them once the program is running.",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 701,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs check directory exist or not",
    "description": "const fs = require(\"fs\")\n\nfs.access(\"./directory-name\", function(error) {\n  if (error) {\n    console.log(\"Directory does not exist.\")\n  } else {\n    console.log(\"Directory exists.\")\n  }\n})var fs = require('fs');\nif (!fs.existsSync(newDest)) fs.mkdirSync(newDest,'0777', true);\n",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 702,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs check if array has at least 1 value",
    "description": "/**\n * This function checks if the passed param is an array and if it has at least 1 element.\n * \n * @name exists\n * @param {array} input Likely an array but possible for other data types, the data that needs to be checked.\n * @return {boolean} true: input param is an array and has at least 1 element, false: input param is not an array or is an array but with no elements.\n */\n\nArray.exists = input => { return Array.isArray(input) && input.some(e => e) }\n\n// Usage\n\nArray.exists([]) // false\nArray.exists(`Hello World`)// false\nArray.exists([`Hello World`]) // true",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 703,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs check if express started",
    "description": "server.listen(80).on('error', function(err) { });",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 704,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs check if file is running on server or client",
    "description": "const fs = require(\"fs\"); // Or `import fs from \"fs\";` with ESM\nif (fs.existsSync(path)) {\n    // Do something\n}function is_server() {\n   return ! (typeof window != 'undefined' && window.document);\n}\n",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 705,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs check if string matches regex",
    "description": "",
    "reg_date": "2021-10-14T19:41:42.000Z"
  },
  {
    "id": 706,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs check if variable is undefined",
    "description": "if (typeof myVar !== \"undefined\") {\n    console.log(\"myVar is DEFINED\");\n}if(typeof comment === 'undefined') {\n\n  alert('Variable \"comment\" is undefined.');\n\n} else if(comment === null){\n\n  alert('Variable \"comment\" is null.');\n\n}if ( typeof query !== 'undefined' && query )\n{\n  //do stuff if query is defined and not null\n}\nelse\n{\n\n}\nlet foo = undefined\n//will return true\ntypeof foo === 'undefined'",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 707,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs cluster example",
    "description": "const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n\n  console.log(`Worker ${process.pid} started`);\n}import http, { Server } from 'http'\nimport cluster, { Worker } from 'cluster'\nimport { cpus, CpuInfo } from 'os'\nimport consola from 'consola'\nimport chalk from 'chalk'\nimport app from './src/app'\n\nconst coreThread: CpuInfo[] = cpus()\n\nif (cluster.isMaster) {\n\tfor (let i = 0; i < coreThread.length; i++) {\n\t\tcluster.fork()\n\t}\n\n\tconst workersTread: any = []\n\tfor (const id in cluster.workers) {\n\t\tworkersTread.push(id)\n\t}\n\n\tworkersTread.forEach(\n\t\tasync (pid: number, _: number): Promise<void> => {\n\t\t\tawait cluster.workers[pid].send({\n\t\t\t\tfrom: 'isMaster',\n\t\t\t\ttype: 'SIGKILL',\n\t\t\t\tmessage: 'cleanup is worker dead and change to new worker'\n\t\t\t})\n\t\t}\n\t)\n\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tcluster.on('online', (worker: Worker): void => {\n\t\t\tif (worker.isConnected()) {\n\t\t\t\tconsole.info(`${chalk.greenBright('worker active pid')}: ${worker.process.pid}`)\n\t\t\t}\n\t\t})\n\n\t\tcluster.on('exit', (worker: Worker, code: number, signal: string): void => {\n\t\t\tif (worker.isDead()) {\n\t\t\t\tconsole.info(`${chalk.redBright('worker dead pid')}: ${worker.process.pid}`)\n\t\t\t}\n\t\t\tcluster.fork()\n\t\t})\n\t}\n} else {\n\tconst server = http.createServer(app) as Server\n\tconst host: any = process.env.HOST\n\tconst port: any = process.env.PORT\n\tserver.listen(port, host, (): void => consola.success(`server is running on ${port}`))\n}",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 708,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs command line arguments",
    "description": "var myArgs = process.argv.slice(2);\nconsole.log('myArgs: ', myArgs);var args = process.argv.slice(2);",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 709,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs config file",
    "description": "{\n    \"app\": {\n        \"port\": 3000\n    },\n    \"db\": {\n        \"host\": \"localhost\",\n        \"port\": 27017,\n        \"name\": \"ydb\"\n    }\n}\n",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 710,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs connection to localhost refused mysql errno -61",
    "description": "var db = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '',\n    database: 'user_data',\n    port: 3036\n});\ndb.connect();\n",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 711,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs convert buffer to uint8array",
    "description": "npm install buffer-to-uint8array\n make sure you have it installed as a starter\n ",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 712,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs copy and rename file",
    "description": "  var fs = require('fs');\n\nfs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {\n  \n  if (err) throw err;\n  console.log('File Renamed!');\n}); //copy the $file to $dir2\nvar copyFile = (file, dir2)=>{\n  //include the fs, path modules\n  var fs = require('fs');\n  var path = require('path');\n\n  //gets file name and adds it to dir2\n  var f = path.basename(file);\n  var source = fs.createReadStream(file);\n  var dest = fs.createWriteStream(path.resolve(dir2, f));\n\n  source.pipe(dest);\n  source.on('end', function() { console.log('Succesfully copied'); });\n  source.on('error', function(err) { console.log(err); });\n};\n\n//example, copy file1.htm from 'test/dir_1/' to 'test/'\ncopyFile('./test/dir_1/file1.htm', './test/');\n",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 713,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs copy file",
    "description": "const fs = require('fs');\n\n// File destination.txt will be created or overwritten by default.\nfs.copyFile('source.txt', 'destination.txt', (err) => {\n  if (err) throw err;\n  console.log('source.txt was copied to destination.txt');\n});\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst {join} = require('path');\nconst mv = promisify(fs.rename);\n\nconst moveThem = async () => {\n  // Move file ./bar/foo.js to ./baz/qux.js\n  const original = join(__dirname, 'bar/foo.js');\n  const target = join(__dirname, 'baz/qux.js'); \n  await mv(original, target);\n}\n\nmoveThem();\n'use strict';\n\nimport fs from 'fs';\n\nlet fileContent = 'Anything what you want';\nlet message = fs.writeFileSync('message.txt', fileContent);\n\nfunction copyContent(fileName: string, dest: string): boolean {\n  try {\n    fs.copyFileSync(fileName, dest);\n    console.log(dest);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nconsole.log(copyContent('message.txt', 'destination.txt'));",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 714,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs create folder if not exist",
    "description": "var fs = require('fs');\nvar dir = './tmp';\n\nif (!fs.existsSync(dir)){\n    fs.mkdirSync(dir);\n}\nvar fs = require('fs');\n\nconst dir = './database/temp';\nif (!fs.existsSync(dir)) {\n\tfs.mkdirSync(dir, {\n\t\trecursive: true\n\t});\n}var fs = require('fs');\nvar dir = './tmp';\nif (!fs.existsSync(dir)){\n    fs.mkdirSync(dir);\n}\n\n// or if complains about existence and nesting doesn't matter:\n\nvar shell = require('shelljs');\nshell.mkdir('-p', 'root/parent/tmp');//Include fs module\nconst fs = require('fs');\n\nconst dir = './dir'\nfs.mkdir(dir);",
    "reg_date": "2021-10-14T19:41:43.000Z"
  },
  {
    "id": 715,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs create pdf",
    "description": "The problem with using PDF converter libraries available on NPM like pdfkit is that, you gonna have to recreate the page structures again in your html templates to get the desired output.\n\nOne of the best approach to rendering html and convert to pdf is by using Puppeteer on NodeJs. Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. It can be used to generate screenshots and PDFs of html pages in your case.$ npm install pdfkit\n\nconst PDFDocument = require('pdfkit');\nconst fs = require('fs');\n\nvar pdfDoc = new PDFDocument;\npdfDoc.pipe(fs.createWriteStream('SampleDocument.pdf'));\n\npdfDoc.text(\"From Mon-Sat we will have a 10% discount on selected items!\", 150, 150);\npdfDoc\n    .fillColor('red')\n    .fontSize(17)\n    .text(\"20%\", 305, 150);\n\npdfDoc.end();",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 716,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs create stream",
    "description": "",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 717,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs createcipheriv invalid key length",
    "description": "let key = crypto.createHash('sha256').update(String(secret)).digest('base64').substr(0, 32);\n",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 718,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs cronjob",
    "description": "/**\n @description CRONJOB RATE LIMIT REQUEST API MIDDLEWARE\n*/\nconst cron = require('node-schedule')\nconst axios = require('axios')\n\n/**\n @description store ip address  user to array\n*/\nconst IpAddress = []\n\n/**\n @description fetch data from provider isp\n*/\nconst IpGeolocation = async () => {\n  const ip = {}\n  const res = await axios.get('http://ipwhois.app/json/')\n  Object.defineProperty(ip, 'ipv4', { value: res.data.ip, enumerable: true })\n  return ip.ipv4\n}\n\n/**\n @description reset  ip address after 1 minute\n*/\nconst ResetRateLimit = () => {\n  const schedule = new cron.RecurrenceRule()\n  schedule.second = 59\n  schedule.tz = 'asia/jakarta'\n\n  cron.scheduleJob('ResetRateLimit', schedule, () => {\n    IpAddress.splice(0, IpAddress.length)\n  })\n}\n\nmodule.exports = async (req, res, next) => {\n  /**\n @description result current IP Location from provider isp\n*/\n  const myIp = await IpGeolocation()\n\n  /**\n   @description get any request method  from user after sending data or request data\n  */\n  switch (req.method) {\n    case 'GET':\n      if (IpAddress.length < 7) {\n        IpAddress.push(myIp)\n      }\n      break\n    case 'POST':\n      if (IpAddress.length < 7) {\n        IpAddress.push(myIp)\n      }\n      break\n    default:\n      return next()\n  }\n\n  /**\n   @description get total requests from the same ip\n  */\n  const currentIp = IpAddress.filter((v, i) => v === myIp).length\n\n  /**\n   @description if the same ip requests more than 5 throw an error message\n  */\n  if (currentIp > 4) {\n    return res.status(401).json({\n      method: req.method,\n      status: res.statusCode,\n      error: 'Oopss..request method not allowed many to request'\n    })\n  }\n\n  /**\n   @description return to next function if  after reset ip address\n  */\n  ResetRateLimit()\n  return next()\n}",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 719,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs crypto",
    "description": "",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 720,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs csv to json from link",
    "description": "// npm install --save csvtojson@latest\nconst csv = require(\"csvtojson\");\nconst request = require('request');\n// Convert a csv file with csvtojson\ncsv().fromStream(request.get('https://fileas.csv))\n  \t.then(function(jsonArrayObj){\n  \t\t//when parse finished, result will be emitted here.\n    \tconsole.log(jsonArrayObj); \n \t})const { Parser } = require('json2csv');\n\nconst myCars = [\n  {\n    \"car\": \"Audi\",\n    \"price\": 40000,\n    \"color\": \"blue\"\n  }, {\n    \"car\": \"BMW\",\n    \"price\": 35000,\n    \"color\": \"black\"\n  }, {\n    \"car\": \"Porsche\",\n    \"price\": 60000,\n    \"color\": \"green\"\n  }\n];\n\nconst json2csvParser = new Parser();\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 721,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs current timestamp",
    "description": "var timestamp = new Date().getTime();var currentTimeInSeconds=Math.floor(Date.now()/1000); //unix timestamp in seconds\nvar currentTimeInMilliseconds=Date.now(); // unix timestamp in millisecondsnew Date().getTime()\n\nnew Date().valueOf()Math.floor(new Date() / 1000) // in secondsMath.floor(+new Date() / 1000)\nMath.floor(new Date() / 1000)",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 722,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs current timestamp unix",
    "description": "Math.floor(+new Date() / 1000)\n",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 723,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs date add days",
    "description": "function addDays(originalDate, days){\n  cloneDate = new Date(originalDate.valueOf());\n  cloneDate.setDate(cloneDate.getDate() + days);\n  return cloneDate;\n}\n\nlet appointment = new Date(\"February 12, 2021 00:00:00\");\nlet newAppointment = addDays(appointment, 7);\n\nconsole.log(appointment.getDate()); // 12\nconsole.log(newAppointment.getDate()); // 19date.setTime( date.getTime() + days * 86400000 );\n",
    "reg_date": "2021-10-14T19:41:44.000Z"
  },
  {
    "id": 724,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs delete folder recursively",
    "description": "fs.rmdirSync(dir, { recursive: true });\n",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 725,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs delete object key",
    "description": "let person = {\n  firstname: 'John',\n  lastname: 'Doe'\n}\n\nconsole.log(person.firstname);\n// expected output: \"John\"\n\ndelete person.firstname;\n\nconsole.log(person.firstname);\n// expected output: undefinedvar obj = {a: 5, b: 3};\ndelete obj[\"a\"];\nconsole.log(obj); // {b: 3}// Example 1\nvar key = \"Cow\";\ndelete thisIsObject[key]; \n\n// Example 2\ndelete thisIsObject[\"Cow\"];\n\n// Example 3\ndelete thisIsObject.Cow;delete obj.firstname;",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 726,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs dirname",
    "description": "// Source Code: lib/path.js\n// Description: The path module provides utilities for working with file and \n//              directory paths. It can be accessed using:\n\nconst path = require('path')\npath.dirname('/foo/asdf/quux') \n// Returns:  '/foo/asdf'\n/*\t dirname(Value <string>) Returns: <string>\n  The path.dirname() method returns the directory name of a path, \n  similar to the Unix dirname command. Trailing directory separators \n  are ignored, see path.sep. A TypeError is thrown if path is not a string.   *//* The path.dirname() method returns the directory name of a path,\nsimilar to the Unix dirname command. Trailing directory separators\nare ignored, see path.sep. */\n\npath.dirname('/foo/bar/baz/asdf/quux');\n// Returns: '/foo/bar/baz/asdf'",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 727,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs docker",
    "description": "FROM node:10-alpine\n\nRUN mkdir -p /home/node/app/node_modules && chown -R node:node /home/node/app\n\nWORKDIR /home/node/app\n\nCOPY package*.json ./\n\nUSER node\n\nRUN npm install\n\nCOPY --chown=node:node . .\n\nEXPOSE 8080\n\nCMD [ \"node\", \"index.js\" ]FROM node:12-alpine\nWORKDIR /app\nCOPY package.json yarn.lock ./\nRUN yarn install --production\nCOPY . .\nCMD [\"node\", \"/app/src/index.js\"]# Copy and paste to pull this image for the latest \ndocker pull node\n\n# more specific use this line\n# docker pull node:<version>-alpine \ndocker pull node:14.4-alpine3.11# Choose the Image which has Node installed already\nFROM node:alpine\n\n# COPY all the files from Current Directory into the Container\nCOPY ./ ./\n\n# Install the Project Dependencies like Express Framework\nRUN npm install\n\n# Tell that this image is going to Open a Port \nEXPOSE 8080\n\n# Default Command to launch the Application\nCMD [\"npm\", \"start\"]FROM node:12\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\n\nRUN npm install\n# If you are building your code for production\n# RUN npm ci --only=production\n\n# Bundle app source\nCOPY . .\n\nEXPOSE 8080\nCMD [ \"node\", \"server.js\" ]FROM node:boron\n\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY package.json /usr/src/app/\nRUN npm install\n\nCOPY . /usr/src/app\n\nEXPOSE 3000\n\nCMD [\"npm\",\"start\"]\n\n",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 728,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs dotenv path how to set",
    "description": "require('dotenv').config();\n\nconsole.log(process.env.MY_ENV_VAR);// when yours .env is in other place then default, you can set path to it\n\nconst path = require('path')\nrequire('dotenv').config({ path: path.resolve(__dirname, '../../.env') }); //use as many '../' as you need",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 729,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs download image from url",
    "description": "const request = require('request');\nconst fs = require('fs');\n\nasync function download(url, dest) {\n\n    /* Create an empty file where we can save data */\n    const file = fs.createWriteStream(dest);\n\n    /* Using Promises so that we can use the ASYNC AWAIT syntax */\n    await new Promise((resolve, reject) => {\n      request({\n        /* Here you should specify the exact link to the file you are trying to download */\n        uri: url,\n        gzip: true,\n      })\n          .pipe(file)\n          .on('finish', async () => {\n            console.log(`The file is finished downloading.`);\n            resolve();\n          })\n          .on('error', (error) => {\n            reject(error);\n          });\n    })\n        .catch((error) => {\n          console.log(`Something happened: ${error}`);\n        });\n}\n\n// example\n\n(async () => {\n  \tconst data = await download('https://random.dog/vh7i79y2qhhy.jpg', './images/image.jpg');\n  \tconsole.log(data); // The file is finished downloading.\n})();var fs = require('fs'),\n    request = require('request');\n\nvar download = function(uri, filename, callback){\n  request.head(uri, function(err, res, body){\n    console.log('content-type:', res.headers['content-type']);\n    console.log('content-length:', res.headers['content-length']);\n\n    request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);\n  });\n};\n\ndownload('https://www.google.com/images/srpr/logo3w.png', 'google.png', function(){\n  console.log('done');\n});",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 730,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs encrypt text with key",
    "description": "",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 731,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs error  .isNull is not a function",
    "description": "",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 732,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs express api",
    "description": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})const express = require('express')\n\nconst app = express() \n\napp.get('/', (req, res, next) => {\n\tres.json({\n      message: 'This is my JSON api'\n    });\n});\n\napp.listen(your-port-here, () => {\n\tconsole.log(`listening on http://localhost:${the-port-goes-here}`)\n});\n\n/*\nWombleWoo7547 @ https://github.com/WombleWoo7547 https://replit.com/@WombleWoo7547\n*/app.render('email', function (err, html) {\n  // ...\n})\n\napp.render('email', { name: 'Tobi' }, function (err, html) {\n  // ...\n})\n",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 733,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs express hot reload",
    "description": "$ npm install nodemon -g\n$ nodemon app.js",
    "reg_date": "2021-10-14T19:41:45.000Z"
  },
  {
    "id": 734,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs express return image",
    "description": "var filepath = '~/path/to/file.png'\n\napp.get('/path/for/site', function (req, res) {\n    res.sendFile(filepath);\n})",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 735,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs express routing",
    "description": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});var express = require('express')\nvar router = express.Router()\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds')\n})\n\nmodule.exports = router\nconst express = require('express');\nconst mysql = require('mysql');\n\n// Connecting with database\nconst db = mysql.createConnection({\n  host: 'localhost',\t\t\t\t\t// The host you're using\n  user: 'yourusername',\t\t\t\t\t// The username you use to enter database\n  password: 'yourpassword'\t\t\t\t// Your password to your username\n});\n\ndb.connect((error) => {\n  if(error) {\n    throw error;\n  }\n  console.log('MySQL Connected');\n});\n\nconst app = express();\n\napp.get('yourroute', (request, response) => {\n  let sql = 'SELECT * FROM yourtable';\n  let query = db.query(sql, (error, result) => {\n    if(error) {\n      throw error;\n    }\n    console.log(result)\t\t\t\t\t// Use the result you get back here\n  })\n});\n\napp.listen('3000', () => {\n  console.log('Server is listening on port 3000');\n});\n\n// You need to install the following packages\nnpm install --save mysql express\n// And if you don't want to restart your server after every little change\nnpm install -g nodemon",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 736,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs express routing get",
    "description": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});var express = require('express')\nvar router = express.Router()\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds')\n})\n\nmodule.exports = router\nconst express = require('express');\nconst mysql = require('mysql');\n\n// Connecting with database\nconst db = mysql.createConnection({\n  host: 'localhost',\t\t\t\t\t// The host you're using\n  user: 'yourusername',\t\t\t\t\t// The username you use to enter database\n  password: 'yourpassword'\t\t\t\t// Your password to your username\n});\n\ndb.connect((error) => {\n  if(error) {\n    throw error;\n  }\n  console.log('MySQL Connected');\n});\n\nconst app = express();\n\napp.get('yourroute', (request, response) => {\n  let sql = 'SELECT * FROM yourtable';\n  let query = db.query(sql, (error, result) => {\n    if(error) {\n      throw error;\n    }\n    console.log(result)\t\t\t\t\t// Use the result you get back here\n  })\n});\n\napp.listen('3000', () => {\n  console.log('Server is listening on port 3000');\n});\n\n// You need to install the following packages\nnpm install --save mysql express\n// And if you don't want to restart your server after every little change\nnpm install -g nodemon",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 737,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs express server img src",
    "description": "<img src=\"/logo.jpg\" />app.use(express.static(__dirname + '/images'));",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 738,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs extract pdf data",
    "description": "",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 739,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs file exists",
    "description": "",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 740,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs format text",
    "description": "",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 741,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs freeswitch esl server",
    "description": "call_handler = require('seem') ->\n  caller = @data['Channel-Caller-ID-Number']\n  callee = @data['Channel-Destination-Number']\n  new_caller = yield db.getAsync \"new_caller_for_#{caller}\"\n  yield @command 'answer'\n  yield @command 'play-file', 'voicemail/vm-hello'\n  yield @command 'set', \"effective_caller_id_number=#{new_caller}\"\n  yield @command 'bridge', \"sofia/egress/#{callee}@example.net\"\n\nrequire('esl').server(call_handler).listen(7000)\n",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 742,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs fs create file if not exists",
    "description": "fs.exists(filename, function(exists) {\n  if(exists) {\n    // Create a file\n  }\n  else {\n    console.log(\"Deny overwrite existing\", filename);\n  }\n});",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 743,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs fs delete entire folde",
    "description": "",
    "reg_date": "2021-10-14T19:41:46.000Z"
  },
  {
    "id": 744,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs fs delete file",
    "description": "",
    "reg_date": "2021-10-14T19:41:47.000Z"
  },
  {
    "id": 745,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs fs delete non empty directory",
    "description": "fs.rmdirSync(dir, { recursive: true });var rimraf = require(\"rimraf\");\nrimraf(\"/some/directory\", function () { console.log(\"done\"); });\nrimraf.sync(\"/some/directory\");\n",
    "reg_date": "2021-10-14T19:41:47.000Z"
  },
  {
    "id": 746,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs fs directory exists",
    "description": "const fs = require(\"fs\")\n\nfs.access(\"./directory-name\", function(error) {\n  if (error) {\n    console.log(\"Directory does not exist.\")\n  } else {\n    console.log(\"Directory exists.\")\n  }\n})",
    "reg_date": "2021-10-14T19:41:47.000Z"
  },
  {
    "id": 747,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs fs root folder path",
    "description": "global.__basedir = __dirname;",
    "reg_date": "2021-10-14T19:41:47.000Z"
  },
  {
    "id": 748,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs fs writefile base64url",
    "description": "",
    "reg_date": "2021-10-14T19:41:47.000Z"
  },
  {
    "id": 749,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs generate ethereum address",
    "description": "import { ethers } from 'ethers';\nconst randomMnemonic = ethers.Wallet.createRandom().mnemonic;\nconst wallet = ethers.Wallet.fromMnemonic(randomMnemonic.phrase);\n",
    "reg_date": "2021-10-14T19:41:47.000Z"
  },
  {
    "id": 750,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs get all folders in directory",
    "description": "const getAllFromDir = source =>\n      fs.readdirSync(source).map(name => path.join(source, name));\n      console.log(getDirectories(\"C:/\"));const { readdirSync } = require('fs')\n\nconst getDirectories = source =>\n  readdirSync(source, { withFileTypes: true })\n    .filter(dirent => dirent.isDirectory())\n    .map(dirent => dirent.name)",
    "reg_date": "2021-10-14T19:41:47.000Z"
  },
  {
    "id": 751,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs get appdata path",
    "description": "// npm install -S appdata-path\nimport getAppDataPath from \"appdata-path\";\nvar defaultAppData = getAppDataPath();\nvar customAppData = getAppDataPath(\"my-app\");",
    "reg_date": "2021-10-14T19:41:47.000Z"
  },
  {
    "id": 752,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs get current directory",
    "description": "__dirnameprocess.cwd()",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 753,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs get current time",
    "description": "let date_ob = new Date();\n\n// current date\n// adjust 0 before single digit date\nlet date = (\"0\" + date_ob.getDate()).slice(-2);\n\n// current month\nlet month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n// current year\nlet year = date_ob.getFullYear();\n\n// current hours\nlet hours = date_ob.getHours();\n\n// current minutes\nlet minutes = date_ob.getMinutes();\n\n// current seconds\nlet seconds = date_ob.getSeconds();\n\n// prints date in YYYY-MM-DD format\nconsole.log(year + \"-\" + month + \"-\" + date);\n\n// prints date & time in YYYY-MM-DD HH:MM:SS format\nconsole.log(year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds);\n\n// prints time in HH:MM format\nconsole.log(hours + \":\" + minutes);\n// new Date object\nlet date_ob = new Date();\n",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 754,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs get file size",
    "description": "",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 755,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs get params",
    "description": "GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n  res.send('id: ' + req.query.id);\n});\n\napp.listen(3000);const querystring = require('querystring');\nconst url = \"http://example.com/index.html?code=string&key=12&id=false\";\nconst qs = \"code=string&key=12&id=false\";\n\nconsole.log(querystring.parse(qs));\n// > { code: 'string', key: '12', id: 'false' }\n\nconsole.log(querystring.parse(url));const url = require('url');\n\n// new URL object\nconst current_url = new URL('http://usefulangle.com/preview?id=123&type=article');\n\n// get access to URLSearchParams object\nconst search_params = current_url.searchParams;\n\n// get url parameters\nconst id = search_params.get('id');\nconst type = search_params.get('type');\n\n// \"123\"\nconsole.log(id);\n\n// \"article\"\nconsole.log(type);\n",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 756,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs get prosses id",
    "description": "process.pid",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 757,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs get response time",
    "description": "",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 758,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs gitignore",
    "description": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\ngitignore node js# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 759,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs have db connection pool import module",
    "description": "var pool  = mysql.createPool({\n      connectionLimit : 10,\n      host            : 'example.org',\n      user            : 'bobby',\n      password        : 'pass'\n    });\n    \npool.getConnection(function(err, connection){\n    if(err){\n        return cb(err);\n    }\n    connection.changeUser({database : \"firm1\"});\n    connection.query(\"SELECT * from history\", function(err, data){\n        connection.release();\n        cb(err, data);\n    });\n});\n",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 760,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs heap usage",
    "description": "",
    "reg_date": "2021-10-14T19:41:48.000Z"
  },
  {
    "id": 761,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs hello world",
    "description": "alert(\"Hello world\");const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))console.log('Hello, world');// You can use apostrophes, quotation marks or tildees which are `s",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 762,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs how to use await in foreach loop",
    "description": "async function printFiles () {\n  const files = await getFilePaths();\n\n  await Promise.all(files.map(async (file) => {\n    const contents = await fs.readFile(file, 'utf8')\n    console.log(contents)\n  }));\n}async function printFiles () {\n  const files = await getFilePaths();\n\n  for (const file of files) {\n    const contents = await fs.readFile(file, 'utf8');\n    console.log(contents);\n  }\n}\n",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 763,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs how to use dynamic variable after dot",
    "description": "model.car // static way\n\nconst myDynamicVariable = 'car'\nmodel[myDynamicVariable] // works like model.car - here you can dynamicly use a variable after dot",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 764,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs hpp github",
    "description": "node http parameter pollution",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 765,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs http get request to external server",
    "description": "const request = require(\"request\");\nconst url = \"<a href=\"https://my-json-server.typicode.com/edurekaDemo/noderequest/db\">https://my-json-server.typicode.com/edurekaDemo/noderequest/db</a>\";\nrequest.get(url, (error, response, body) => {\nlet json = JSON.parse(body);\nconsole.log(body);\n});\nlet request = require('request')\n\nconst formData = {\n  // Pass a simple key-value pair\n  my_field: 'my_value',\n  // Pass data via Buffers\n  my_buffer: Buffer.from([1, 2, 3]),\n  // Pass data via Streams\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n  // Pass multiple values /w an Array\n  attachments: [\n    fs.createReadStream(__dirname + '/attachment1.jpg'),\n    fs.createReadStream(__dirname + '/attachment2.jpg')\n  ],\n  // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}\n  // Use case: for some types of streams, you'll need to provide \"file\"-related information manually.\n  // See the `form-data` README for more information about options: https://github.com/form-data/form-data\n  custom_file: {\n    value:  fs.createReadStream('/dev/urandom'),\n    options: {\n      filename: 'topsecret.jpg',\n      contentType: 'image/jpeg'\n    }\n  }\n};\nrequest.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 766,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs http server",
    "description": "HttpClient client = HttpClient.newHttpClient();\nHttpRequest request = HttpRequest.newBuilder()\n      .uri(URI.create(\"http://openjdk.java.net/\"))\n      .build();\nclient.sendAsync(request, BodyHandlers.ofString())\n      .thenApply(HttpResponse::body)\n      .thenAccept(System.out::println)\n      .join();var http = require('http'); // Import Node.js core module\n\nvar server = http.createServer(function (req, res) {   //create web server\n    if (req.url == '/') { //check the URL of the current request\n        \n        // set response header\n        res.writeHead(200, { 'Content-Type': 'text/html' }); \n        \n        // set response content    \n        res.write('<html><body><p>This is home Page.</p></body></html>');\n        res.end();\n    \n    }\n    else if (req.url == \"/student\") {\n        \n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write('<html><body><p>This is student Page.</p></body></html>');\n        res.end();\n    \n    }\n    else if (req.url == \"/admin\") {\n        \n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write('<html><body><p>This is admin Page.</p></body></html>');\n        res.end();\n    \n    }\n    else\n        res.end('Invalid Request!');\n\n});\n\nserver.listen(5000); //6 - listen for any incoming requests\n\nconsole.log('Node.js web server at port 5000 is running..')\n/* ====== create node.js server with core 'http' module ====== */\n// dependencies\nconst http = require(\"http\");\n\n// PORT\nconst PORT = 3000;\n\n// server create\nconst server = http.createServer((req, res) => {\n   if (req.url === \"/\") {\n      res.write(\"This is home page.\");\n      res.end();\n   } else if (req.url === \"/about\" && req.method === \"GET\") {\n      res.write(\"This is about page.\");\n      res.end();\n   } else {\n      res.write(\"Not Found!\");\n      res.end();\n   }\n});\n\n// server listen port\nserver.listen(PORT);\n\nconsole.log(`Server is running on PORT: ${PORT}`);\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000// code by VARSHITH REDDY SATTI\n// to create a server in node.js you should.\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write(\"write html code to display you test\")\n  res.end();\n}).listen(8080);\n// save this as httpServer.js\n// run this by typing node httpServer.js in the command line\n// to acess your server got to http://localhost:8080var http = require('http');\nvar fs = require('fs');\nvar path = require('path');\n\nhttp.createServer(function (request, response) {\n    console.log('request ', request.url);\n\n    var filePath = '.' + request.url;\n    if (filePath == './') {\n        filePath = './index.html';\n    }\n\n    var extname = String(path.extname(filePath)).toLowerCase();\n    var mimeTypes = {\n        '.html': 'text/html',\n        '.js': 'text/javascript',\n        '.css': 'text/css',\n        '.json': 'application/json',\n        '.png': 'image/png',\n        '.jpg': 'image/jpg',\n        '.gif': 'image/gif',\n        '.svg': 'image/svg+xml',\n        '.wav': 'audio/wav',\n        '.mp4': 'video/mp4',\n        '.woff': 'application/font-woff',\n        '.ttf': 'application/font-ttf',\n        '.eot': 'application/vnd.ms-fontobject',\n        '.otf': 'application/font-otf',\n        '.wasm': 'application/wasm'\n    };\n\n    var contentType = mimeTypes[extname] || 'application/octet-stream';\n\n    fs.readFile(filePath, function(error, content) {\n        if (error) {\n            if(error.code == 'ENOENT') {\n                fs.readFile('./404.html', function(error, content) {\n                    response.writeHead(404, { 'Content-Type': 'text/html' });\n                    response.end(content, 'utf-8');\n                });\n            }\n            else {\n                response.writeHead(500);\n                response.end('Sorry, check with the site admin for error: '+error.code+' ..\\n');\n            }\n        }\n        else {\n            response.writeHead(200, { 'Content-Type': contentType });\n            response.end(content, 'utf-8');\n        }\n    });\n\n}).listen(8125);\nconsole.log('Server running at http://127.0.0.1:8125/');",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 767,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs if contains",
    "description": "if (your_string.indexOf('hello') > -1)\n{\n  alert(\"hello found inside your_string\");\n}\n",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 768,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs import instead of require",
    "description": "",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 769,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs import module from local file",
    "description": "var myModule = require('./module.js');\n\nmyModule.function('Node.js started');\n",
    "reg_date": "2021-10-14T19:41:49.000Z"
  },
  {
    "id": 770,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs include json file",
    "description": "",
    "reg_date": "2021-10-14T19:41:50.000Z"
  },
  {
    "id": 771,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs increase heap size",
    "description": "",
    "reg_date": "2021-10-14T19:41:50.000Z"
  },
  {
    "id": 772,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs json data serving",
    "description": "",
    "reg_date": "2021-10-14T19:41:50.000Z"
  },
  {
    "id": 773,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs jwt",
    "description": "",
    "reg_date": "2021-10-14T19:41:50.000Z"
  },
  {
    "id": 774,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs kill hidden process",
    "description": "taskkill /f /im node.exe",
    "reg_date": "2021-10-14T19:41:50.000Z"
  },
  {
    "id": 775,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs list modules",
    "description": "cd sample\nnpm -g list\n  /opt/bitnami/nodejs/lib\n+-- coffee-script@1.3.3\n+-- colors@0.6.0-1\n...\n+-- express@2.5.9\n| +-- connect@1.8.7\n| +-- qs@0.4.2\n| +-- cliff@0.1.7\n...\n| | +-- colors@0.6.0-1\n+-- jade@0.26.0\n| +-- commander@0.5.2\n| +-- mkdirp@0.3.0\n+-- node-dev@0.2.3\n+-- npm@1.1.21\n| +-- abbrev@1.0.3\n| +-- node-gyp@0.4.1\n| | +-- ansi@0.0.4\n| +-- uid-number@0.0.3\n| +-- which@1.0.5\n+-- uglify-js@1.2.6\n",
    "reg_date": "2021-10-14T19:41:50.000Z"
  },
  {
    "id": 776,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs log all objects",
    "description": "const util = require('util')\n\nconsole.log(util.inspect(myObject, {showHidden: false, depth: null}))\n\n// alternative shortcut\nconsole.log(util.inspect(myObject, false, null, true /* enable colors */))",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 777,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs make directory",
    "description": "",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 778,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs mocha mock",
    "description": "",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 779,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs multipart/x-mixed-replace; boundary=BoundaryString",
    "description": "const webStream = {\n    get: function (url, callback) {\n        let webClient;\n\n        if (url.startsWith(\"http://\")) {\n            webClient = require(\"http\");\n        } else if (url.startsWith(\"https://\")) {\n            webClient = require(\"https\");\n        } else {\n            throw \"Unsupported protocol.\";\n        }\n\n        let clientRequest = webClient.get(url, function (response) {\n            let context = {\n                url: url,\n                boundary: \"\",\n                contentType: \"\",\n                contentLength: 0\n            };\n\n            let headersCompleted = false;\n            let bodyCompleted = false;\n            let buffer = null;\n            let receivedBodyChunk = 0;\n\n            response.on(\"data\", function (chunk) {\n                if (!headersCompleted) {\n                    let headers = chunk.toString().split(/\\r?\\n/);\n\n                    context.boundary = headers[0].substring(2);\n                    context.contentType = headers[1].split(\":\")[1].trim();\n                    context.contentLength = parseInt(headers[2].split(\":\")[1]);\n\n                    buffer = Buffer.alloc(context.contentLength);\n\n                    headersCompleted = true;\n                } else {\n                    if (!bodyCompleted) {\n                        if (receivedBodyChunk < context.contentLength) {\n                            chunk.copy(buffer, receivedBodyChunk, 0, chunk.byteLength);\n\n                            receivedBodyChunk += chunk.byteLength;\n\n                            if (receivedBodyChunk === context.contentLength) {\n                                bodyCompleted = true;\n                            }\n                        }\n                    }\n\n                    if (bodyCompleted) {\n                        callback(buffer, context);\n\n                        headersCompleted = false;\n                        bodyCompleted = false;\n                        buffer = null;\n                        receivedBodyChunk = 0;\n                    }\n                }\n            });\n        });\n\n        return {\n            url: url,\n            handler: clientRequest,\n            on: function (type, listener) {\n                clientRequest.on(type, listener);\n            },\n            abort: function () {\n                clientRequest.abort();\n            }\n        };\n    }\n};\n\nlet stream = webStream.get(\"http://127.0.0.1:8090/\", function (data, context) {\n    // data: Received content (Buffer)\n    // context: { url, boundary, contentType, contentLength }\n\n    // TODO: Do something here...\n});\n\n// stream.abort();\n\n// stream.on(\"error\", function(e) {\n//     console.log(\"Error: \" + e.message);\n// });\n",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 780,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs mysql connection pool",
    "description": "var pool  = mysql.createPool({\n      connectionLimit : 10,\n      host            : 'example.org',\n      user            : 'bobby',\n      password        : 'pass'\n    });\n    \npool.getConnection(function(err, connection){\n    if(err){\n        return cb(err);\n    }\n    connection.changeUser({database : \"firm1\"});\n    connection.query(\"SELECT * from history\", function(err, data){\n        connection.release();\n        cb(err, data);\n    });\n});\nvar mysql = require('mysql');\n\n// connect to the db\ndbConnectionInfo = {\n  host: \"localhost\",\n  port: \"3306\",\n  user: \"root\",\n  password: \"root\",\n  connectionLimit: 5, //mysql connection pool length\n  database: \"db_name\"\n};\n\n//For mysql single connection\n/* var dbconnection = mysql.createConnection(\n        dbConnectionInfo\n); \n\n dbconnection.connect(function (err) {\n    if (!err) {\n        console.log(\"Database is connected ... nn\");\n    } else {\n        console.log(\"Error connecting database ... nn\");\n    }\n}); \n\n*/\n\n//create mysql connection pool\nvar dbconnection = mysql.createPool(\n  dbConnectionInfo\n);\n\n// Attempt to catch disconnects \ndbconnection.on('connection', function (connection) {\n  console.log('DB Connection established');\n\n  connection.on('error', function (err) {\n    console.error(new Date(), 'MySQL error', err.code);\n  });\n  connection.on('close', function (err) {\n    console.error(new Date(), 'MySQL close', err);\n  });\n\n});\n\n\nmodule.exports = dbconnection;\n",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 781,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs mysql error handling with user example",
    "description": "catch (err) {\n  if (err instanceof Errors.BadRequest)\n    return res.status(HttpStatus.BAD_REQUEST).send({ message: err.message }); // 400\n  if (err instanceof Errors.Forbidden)\n    return res.status(HttpStatus.FORBIDDEN).send({ message: err.message }); // 403\n  if (err instanceof Errors.NotFound)\n    return res.status(HttpStatus.NOT_FOUND).send({ message: err.message }); // 404\n  if (err instanceof Errors.UnprocessableEntity)\n    return res.status(HttpStatus.UNPROCESSABLE_ENTITY).send({ message: err.message }); // 422\n  console.log(err);\n  return res.status(HttpStatus.INTERNAL_SERVER_ERROR).send({ error: err, message: err.message });\n}",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 782,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs oauth2 request",
    "description": "",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 783,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs object object template string",
    "description": "logString = `Description: ${ description }. Properties: ${ JSON.stringify( properties ) }.`\n",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 784,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs open default browser on specific web page",
    "description": "$ npm install opn\n\n//////////////////////////////////////////\n\nvar opn = require('opn');\n\n// opens the url in the default browser \nopn('http://sindresorhus.com');\n\n// specify the app to open in \nopn('http://sindresorhus.com', {app: 'firefox'});",
    "reg_date": "2021-10-14T19:41:51.000Z"
  },
  {
    "id": 785,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs open file",
    "description": "// load fs\nconst fs = require(\"fs\");\n// read the file\nconst content = fs.readFileSync(\"./my_file.txt\");\n// print it\nconsole.log(content.toString());const fs = require('fs');\n\nfs.readFile('my-file.txt', 'utf8', function(err, data) {\n    if (err) throw err;\n    console.log(data);\n});let myFile = \"./myText.txt\";\nconst fs = require(\"fs\");\n\t\t\napp.all('/test', async (req, res) => {\n\ttry {\n\t\tconst readData = fs.readFileSync(myFile, 'utf8');\n\t\tif (readData) {\n\t\t\tres.send(readData)\n\t\t}\n\t} catch (error) {\n\t\tres.send(\"something is wrong\", error)\n\t}\n})fs = require('fs')\nfs.readFile('/etc/hosts', 'utf8', function (err,data) {\n  if (err) {\n    return console.log(err);\n  }\n  console.log(data);\n});fs.readFile('filename', function read(err, data) {\n    if (err) {\n        throw err;\n    }\n    var content = data;\n  \n    console.log(content);  \n   \n});",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 786,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs optimizing compuler try catch",
    "description": "\"Programmers waste enormous amounts of time thinking about,\nor worrying about, the speed of noncritical parts of their\nprograms, and these attempts at efficiency actually have a\nstrong negative impact when debugging and maintenance are\nconsidered. We should forget about small efficiencies,\nsay about 97% of the time: premature optimization is the root\nof all evil. Yet we should not pass up our opportunities in that\ncritical 3%\"- Donald Knuth",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 787,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs parallel async calls -1",
    "description": "",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 788,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs parallel async calls -2",
    "description": "",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 789,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs path",
    "description": "The path module provides utilities for working with file and directory paths. It can be accessed using:\n\nconst path = require('path');const path = require('path');\n\npath.parse('/home/user/dir/file.txt');\n// Returns:\n// { root: '/',\n//   dir: '/home/user/dir',\n//   base: 'file.txt',\n//   ext: '.txt',\n//   name: 'file' }var path = require('path');\nvar scriptName = path.basename(__filename);",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 790,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs postgresql local connection",
    "description": "const pgp = require('pg-promise')(/* initialization options */);\n\nconst cn = {\n    host: 'localhost', // server name or IP address;\n    port: 5432,\n    database: 'myDatabase',\n    user: 'myUser',\n    password: 'myPassword'\n};\n\n// alternative:\n// var cn = 'postgres://username:password@host:port/database';\n\nconst db = pgp(cn); // database instance;\n\n// select and return a single user name from id:\ndb.one('SELECT name FROM users WHERE id = $1', [123])\n    .then(user => {\n        console.log(user.name); // print user name;\n    })\n    .catch(error => {\n        console.log(error); // print the error;\n    });\n\n// alternative - new ES7 syntax with 'await':\n// await db.one('SELECT name FROM users WHERE id = $1', [123]);\n",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 791,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs postgresql scalar query",
    "description": "db.scalar('SELECT 1')",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 792,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs promise async",
    "description": "// server.js\n \nfunction square(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(Math.pow(x, 2));\n    }, 2000);\n  });\n}\n \nasync function layer(x)\n{\n  const value = await square(x);\n  console.log(value);\n}\n \nlayer(10);\n// Normal Function\nfunction add(a,b){\n  return a + b;\n}\n// Async Function\nasync function add(a,b){\n  return a + b;\n}\n",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 793,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs promise then example",
    "description": "",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 794,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs put array in file",
    "description": "",
    "reg_date": "2021-10-14T19:41:52.000Z"
  },
  {
    "id": 795,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs read file to array",
    "description": "",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 796,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs read image as base64",
    "description": "var base64Data = req.rawBody.replace(/^data:image\\/png;base64,/, \"\");\n\nrequire(\"fs\").writeFile(\"out.png\", base64Data, 'base64', function(err) {\n  console.log(err);\n});var fs = require('fs');\n\nvar imageAsBase64 = fs.readFileSync('./your-image.png', 'base64');\nconst fs = require('fs');\nconst contents = fs.readFileSync('/path/to/file.jpg', {encoding: 'base64'});\nconst fs = require('fs').promises;\nconst contents = await fs.readFile('/path/to/file.jpg', {encoding: 'base64'});\n",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 797,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs readdir",
    "description": "const fs = require(\"fs\")\nfs.readdir(\"./myfolder\", (err, data) => {\n\tif(err) throw err\n  \tconsole.log(data)\n})",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 798,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs readfile",
    "description": "const fs = require('fs')\n\ntry {\n  const data = fs.readFileSync('/Users/joe/test.txt', 'utf8')\n  console.log(data)\n} catch (err) {\n  console.error(err)\n}const fs = require('fs');\n\nfs.writeFile(\"/tmp/test\", \"Hey there!\", function(err) {\n    if(err) {\n        return console.log(err);\n    }\n    console.log(\"The file was saved!\");\n}); \n\n// Or\nfs.writeFileSync('/tmp/test-sync', 'Hey there!');const fs = require('fs');\n\nfs.readFile('/Users/joe/test.txt', 'utf8' , (err, data) => {\n  if (err) {\n    console.error(err);\n    return\n  }\n  console.log(data);\n});// macOS, Linux, and Windows\nfs.readFileSync('<directory>');\n// => [Error: EISDIR: illegal operation on a directory, read <directory>]\n\n//  FreeBSD\nfs.readFileSync('<directory>'); // => <data>fs.readFile('filename', function read(err, data) {\n    if (err) {\n        throw err;\n    }\n    var content = data;\n  \n    console.log(content);  \n   \n});",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 799,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs recursively read directory",
    "description": "var fs = require('fs');\nvar path = require('path');\nvar walk = function(dir, done) {\n  var results = [];\n  fs.readdir(dir, function(err, list) {\n    if (err) return done(err);\n    var i = 0;\n    (function next() {\n      var file = list[i++];\n      if (!file) return done(null, results);\n      file = path.resolve(dir, file);\n      fs.stat(file, function(err, stat) {\n        if (stat && stat.isDirectory()) {\n          walk(file, function(err, res) {\n            results = results.concat(res);\n            next();\n          });\n        } else {\n          results.push(file);\n          next();\n        }\n      });\n    })();\n  });\n};\n\n\nAnd to test it out on your home directory (WARNING: the results list will be huge if you have a lot of stuff in your home directory):\n\nwalk(process.env.HOME, function(err, results) {\n  if (err) throw err;\n  console.log(results);\n});var fs = require('fs');\nvar path = require('path');\nvar walk = function(dir, done) {\n  var results = [];\n  fs.readdir(dir, function(err, list) {\n    if (err) return done(err);\n    var i = 0;\n    (function next() {\n      var file = list[i++];\n      if (!file) return done(null, results);\n      file = path.resolve(dir, file);\n      fs.stat(file, function(err, stat) {\n        if (stat && stat.isDirectory()) {\n          walk(file, function(err, res) {\n            results = results.concat(res);\n            next();\n          });\n        } else {\n          results.push(file);\n          next();\n        }\n      });\n    })();\n  });\n};\n\nAnd to test it out on your home directory (WARNING: the results list will be huge if you have a lot of stuff in your home directory):\n\nwalk(process.env.HOME, function(err, results) {\n  if (err) throw err;\n  console.log(results);\n});",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 800,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs redirect to url",
    "description": "// In Express\nrouter.get('*',function(req,res){  \n    res.redirect('http://exmple.com'+req.url)\n})\nresponse.writeHead(301,\n  {Location: 'http://whateverhostthiswillbe:8675/'+newRoom}\n);\nresponse.end();\n",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 801,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs redis setex",
    "description": "async function upsert(table, data) {\n  let key = table;\n  if (data && data.id) {\n    key = key + '_' + data.id;\n  }\n\n  client.setex(key, 10, JSON.stringify(data));\n  return true;\n}\n",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 802,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs remove element from array",
    "description": "//Remove specific value by index\narray.splice(index, 1);var colors = [\"red\",\"blue\",\"car\",\"green\"];\nvar carIndex = colors.indexOf(\"car\");//get  \"car\" index\n//remove car from the colors array\ncolors.splice(carIndex, 1); // colors = [\"red\",\"blue\",\"green\"]// Remove single item\nfunction removeItemOnce(arr, value) {\n   var index = arr.indexOf(value);\n   if (index > -1) {\n      arr.splice(index, 1);\n   }\n   return arr;\n}\n\n// Remove all items\nfunction removeItemAll(arr, value) {\n   var i = 0;\n   while (i < arr.length) {\n      if (arr[i] === value) {\n         arr.splice(i, 1);\n      } else {\n         ++i;\n      }\n   }\n   return arr;\n}\n\n// Usage\nconsole.log(removeItemOnce([2, 5, 9, 1, 5, 8, 5], 5));\nconsole.log(removeItemAll([2, 5, 9, 1, 5, 8, 5], 5));pop - Removes from the End of an Array.\nshift - Removes from the beginning of an Array.\nsplice - removes from a specific Array index.\nfilter - allows you to programatically remove elements from an Array.let arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, ...]]]])    \n    function arrayRemove(arr, value) { \n    \n        return arr.filter(function(ele){ \n            return ele != value; \n        });\n    }\n    \n    var result = arrayRemove(array, 6);\n    // result = [1, 2, 3, 4, 5, 7, 8, 9, 0]\n\n",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 803,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs remove null from object",
    "description": "",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 804,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs remove unsafe string",
    "description": "const str = \"abc's test#s\";\nconsole.log(str.replace(/[^a-zA-Z ]/g, \"\"));",
    "reg_date": "2021-10-14T19:41:53.000Z"
  },
  {
    "id": 805,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs request api",
    "description": "",
    "reg_date": "2021-10-14T19:41:54.000Z"
  },
  {
    "id": 806,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs request post",
    "description": "const axios = require('axios')\n\naxios\n  .post('https://whatever.com/todos', {\n    todo: 'Buy the milk'\n  })\n  .then(res => {\n    console.log(`statusCode: ${res.statusCode}`)\n    console.log(res)\n  })\n  .catch(error => {\n    console.error(error)\n  })const axios = require('axios');\n\naxios.get('https://jsonplaceholder.typicode.com/users')\n  .then(res => {\n    const headerDate = res.headers && res.headers.date ? res.headers.date : 'no response date';\n    console.log('Status Code:', res.status);\n    console.log('Date in Response header:', headerDate);\n\n    const users = res.data;\n\n    for(user of users) {\n      console.log(`Got user with id: ${user.id}, name: ${user.name}`);\n    }\n  })\n  .catch(err => {\n    console.log('Error: ', err.message);\n  });const request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  console.error('error:', error); // Print the error if one occurred\n  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n  console.log('body:', body); // Print the HTML for the Google homepage.\n});",
    "reg_date": "2021-10-14T19:41:54.000Z"
  },
  {
    "id": 807,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs require",
    "description": "// Use require.main.require to get a module from the root folder.\nconst Globals = require.main.require(\"./globals.js\");\nconst YourCustomModule = require(\"./yourmodule.js\");\n\nconsole.log(YourCustomModule.message);\n\n// --- yourmodule.js ---\nmodule.exports = {\n\tmessage: \"Hello World!\",\n\totherData: \"Hello Grepper!\"\n};// The require() method is used to load and cache JavaScript modules.\n// So, if you want to load a local, relative JavaScript module into a Node.js application,\n// you can simply use the require() method.\n\n// Example:\nvar yourModule = require( \"your_module_name\" ); //.js file extension is optional//What is require in Nodejs?\n//Node.js follows the CommonJS module system, and the builtin require \n//function is the easiest way to include modules that exist in separate \n//files. The basic functionality of require is that it reads a JavaScript \n//file, executes the file, and then proceeds to return the exports object.\n",
    "reg_date": "2021-10-14T19:41:54.000Z"
  },
  {
    "id": 808,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs require everything without prefix",
    "description": "// file1.js\nmodule.exports = {foo, bar, baz}\n// file2.js\nconst {foo, bar, baz} = require('./helpers');\nfoo();\nbaz();",
    "reg_date": "2021-10-14T19:41:54.000Z"
  },
  {
    "id": 809,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs response is html not json data",
    "description": "// use this after route not before route\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(resolve(process.cwd(), 'client/build')))\n  app.get('*', (req, res) => {\n    res.sendFile(resolve(process.cwd(), 'client/build/index.html'))\n  })\n}",
    "reg_date": "2021-10-14T19:41:54.000Z"
  },
  {
    "id": 810,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs restart process",
    "description": "Generally process managers are used to (automatically) restart processes, such as monit, PM2, nodemon, forever, etc.\n\nHowever, you could restart from the process itself by simply spawning a detached child process that waits some period of time and then executes the same script. You could do this as a combination of two commands, one to sleep and the other the current command line, or you could simply incorporate the sleep into your script. An example of the latter:\n\nvar spawn = require('child_process').spawn;\n\n(function main() {\n\n  if (process.env.process_restarting) {\n    delete process.env.process_restarting;\n    // Give old process one second to shut down before continuing ...\n    setTimeout(main, 1000);\n    return;\n  }\n\n  // ...\n\n  // Restart process ...\n  spawn(process.argv[0], process.argv.slice(1), {\n    env: { process_restarting: 1 },\n    stdio: 'ignore'\n  }).unref();\n})();\nOn Windows, you may need to add detached: true to your spawn() configuration object though. For *nix, this usually shouldn't be necessary.\n\nOne thing to keep in mind though is that any restarted process won't have access to the terminal anymore, if the original process was started in the foreground.\n\nAlso, you could eliminate the delay and process.env checking if your script does not use any resources that can only be used by at most one process at any given time.\n\nOne final note: if your process crashes abnormally, due to memory exhaustion, triggering a C++ assertion, a V8 bug, etc., your process won't restart obviously (even if you have an 'unhandledException' event handler set for process). To account for these situations you pretty much need some sort of external mechanism to restart the process.",
    "reg_date": "2021-10-14T19:41:54.000Z"
  },
  {
    "id": 811,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs reverse string",
    "description": "function reverseString(s){\n    return s.split(\"\").reverse().join(\"\");\n}\nreverseString(\"Hello\");//\"olleH\"\"this is a test string\".split(\"\").reverse().join(\"\");\n//\"gnirts tset a si siht\"\n\n// Or\nconst reverse = str => [...str].reverse().join('');\n\n// Or\nconst reverse = str => str.split('').reduce((rev, char)=> `${char}${rev}`, '');\n\n// Or\nconst reverse = str => (str === '') ? '' : `${reverse(str.substr(1))}${str.charAt(0)}`;\n\n// Example\nreverse('hello world');     // 'dlrow olleh'function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}\nreverseString(\"hello\");",
    "reg_date": "2021-10-14T19:41:54.000Z"
  },
  {
    "id": 812,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs save blob file",
    "description": "",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 813,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs self quit program",
    "description": "",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 814,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs server code",
    "description": "",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 815,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs server fetch is not defined",
    "description": "npm i node-fetch --save\n",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 816,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs serverless project typescript",
    "description": "$ sls create --template aws-nodejs-typescript --path <PROJECT-NAME>",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 817,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs set dns for request",
    "description": "const { Resolver } = require('dns').promises;\nconst resolver = new Resolver();\nresolver.setServers(['4.4.4.4']);\n\n// This request will use the server at 4.4.4.4, independent of global settings.\nresolver.resolve4('example.org').then((addresses) => {\n  // ...\n});\n\n// Alternatively, the same code can be written using async-await style.\n(async function() {\n  const addresses = await resolver.resolve4('example.org');\n})();",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 818,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs sha512 decrypt",
    "description": "// generate a hash from string\nvar crypto = require('crypto'),\n    text = 'hello bob',\n    key = 'mysecret key'\n\n// create hahs\nvar hash = crypto.createHmac('sha512', key)\nhash.update(text)\nvar value = hash.digest('hex')\n\n// print result\nconsole.log(value);\n",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 819,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs share session",
    "description": "",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 820,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs sharp change image to multiple sizes",
    "description": "// Sharp and FS module needed.\n;(async function(){\n\tlet imgBuffer = await sharp(\"./myimage.jpg\").toBuffer()\n    let thumbnail = await sharp(imgBuffer).resize(100, 100).toBuffer()\n    let image = await sharp(imgBuffer).resize(1600, 900).toBuffer()\n    fs.writeFile(\"./thumbnail.jpg\", thumbnail, err => {\n    \tif(err) console.log(err)\n    })\n    fs.writeFile(\"./image.jpg\", thumbnail, err => {\n      if(err) console.log(err)\n    })\n})",
    "reg_date": "2021-10-14T19:41:55.000Z"
  },
  {
    "id": 821,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs shebang",
    "description": "#!/usr/bin/env node",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 822,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs start server",
    "description": "",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 823,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs store json from web api",
    "description": "// NodeJS\nconst http = require(\"http\");\nvar url = 'https://example.com/file.json'; // Request URL\n\nhttp.get(url, function(res){\n    var body = '';\n\n    res.on('data', function(chunk){\n        body += chunk;\n    });\n\n    res.on('end', function(){\n        var data = JSON.parse(body); \n        console.log(\"Got a response: \", data.value);\n    });\n}).on('error', function(e){\n      console.log(\"Got an error: \", e);\n});",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 824,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs store selected dropdown in variable",
    "description": "var selectedValue = user.schoolType;\n\n<select class=\"form-control\" id=\"schoolType\" name=\"schoolType\" value=\"\n{{user.schoolType}}\">\n\n  <option value=\"none\" selected=\"{{user.schoolType === \nthis.value}}\">None</option>\n<option value=\"public\" selected=\"{{user.schoolType === \nthis.value}}\">Public</option>\n<option value=\"private\" selected=\"{{user.schoolType === \nthis.value}}\">Private</option>\n<option value=\"homeSchool\" selected=\"{{user.schoolType === \nthis.value}}\">Home School</option>\n </select>\n",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 825,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs string to base64",
    "description": "> console.log(Buffer.from(\"Hello World\").toString('base64'));\nSGVsbG8gV29ybGQ=\n> console.log(Buffer.from(\"SGVsbG8gV29ybGQ=\", 'base64').toString('ascii'))\nHello World//--------------- HOW TO DECODE BASE64 ON NODEJS ----------------------\n//create a buffer of the text \"Hello World\"\nvar buffer = Buffer.from('SGVsbG8gV29ybGQ=', 'base64');\n//buffer result is: <Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64>\n\nvar string64 = buffer.toString('base64');\n// .toString('ascii') allow to decode base64\n// result is: \"Hello World\"\n\n// Can be use combined together like these\nconsole.log(Buffer.from('SGVsbG8gV29ybGQ=', 'base64').toString('ascii'));\n// result is: \"Hello World\"\n'use strict';\n\nlet data = 'stackabuse.com';\nlet buff = new Buffer(data);\nlet base64data = buff.toString('base64');\n\nconsole.log('\"' + data + '\" converted to Base64 is \"' + base64data + '\"');\n",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 826,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs string value check === and !==",
    "description": "const c1 = 'e\\u0301';\nconst c2 = 'é';\nconsole.log(c1.normalize() === c2.normalize()); // trueCode language: JavaScript (javascript)",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 827,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs tcp client",
    "description": "// Include Nodejs' net module.\nconst Net = require('net');\n// The port number and hostname of the server.\nconst port = 8080;\nconst host = 'localhost';\n\n// Create a new TCP client.\nconst client = new Net.Socket();\n// Send a connection request to the server.\nclient.connect({ port: port, host: host }), function() {\n    // If there is no error, the server has accepted the request and created a new \n    // socket dedicated to us.\n    console.log('TCP connection established with the server.');\n\n    // The client can now send data to the server by writing to its socket.\n    client.write('Hello, server.');\n});\n\n// The client can also receive data from the server by reading from its socket.\nclient.on('data', function(chunk) {\n    console.log(`Data received from the server: ${chunk.toString()}.`);\n    \n    // Request an end to the connection after the data has been received.\n    client.end();\n});\n\nclient.on('end', function() {\n    console.log('Requested an end to the TCP connection');\n});\n",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 828,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs test app",
    "description": "// index.js\n\nvar express = require('express'); // (npm install --save express)\nvar request = require('supertest');\n\nfunction createApp() {\n  app = express();\n\n  var router = express.Router();\n  router.route('/').get(function(req, res) {\n    return res.json({goodCall: true});\n  });\n\n  app.use(router);\n\n  return app;\n}\n\ndescribe('Our server', function() {\n  var app;\n\n  // Called once before any of the tests in this block begin.\n  before(function(done) {\n    app = createApp();\n    app.listen(function(err) {\n      if (err) { return done(err); }\n      done();\n    });\n  });\n\n  it('should send back a JSON object with goodCall set to true', function() {\n    request(app)\n      .get('/index')\n      .set('Content-Type', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200, function(err, res) {\n        if (err) { return done(err); }\n        callStatus = res.body.goodCall;\n        expect(callStatus).to.equal(true);\n        // Done\n        done();\n      });\n  });\n\n});\n",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 829,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs to exe",
    "description": "npm install -g pkg\npkg exampleApp.js",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 830,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs validate bnb wallet address",
    "description": "",
    "reg_date": "2021-10-14T19:41:56.000Z"
  },
  {
    "id": 831,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs version api",
    "description": "",
    "reg_date": "2021-10-14T19:41:57.000Z"
  },
  {
    "id": 832,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs vs python",
    "description": "Node.Js is a server-side platform built on Google Chrome Javascript Engine whereas Python is an object-oriented, high level, dynamic and multipurpose programming language.\nNode is better for web applications and website development whereas Python is best suitable for back-end applications, numerical computations and machine learning.\nNodejs utilize JavaScript interpreter whereas Python uses CPython as an interpreter.\nNode programming language is best suited for asynchronous programming whereas Python is not the best option for asynchronous programming.\nNode.Js is best suited for small projects while Python is best suited for developing large projects.\nComparing Node.js vs Python, Node is best for memory-intensive activities whereas Python is not advisable for memory-intensive activities.",
    "reg_date": "2021-10-14T19:41:57.000Z"
  },
  {
    "id": 833,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs watermark image",
    "description": "//Install\nnpm install imaginary --save\n\n//Import \nvar fs = require('fs')\nvar imaginary = require('imaginary')\nvar serverUrl = 'localhost:8080'\n\nimaginary('myImage.jpg')\n  .server(serverUrl)\n  .watermark({ text: 'copyright' })\n  .on('error', function (err) {\n    console.error('Cannot resize the image:', err)\n  })\n  .pipe(fs.createWriteStream('markedImage.jpg'))\n",
    "reg_date": "2021-10-14T19:41:57.000Z"
  },
  {
    "id": 834,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs websocket tutorial",
    "description": "/*\nAuthor: Logan Smith - Perkins\n*/\n\n// Importing the http library, used to start servers\nconst http = require('http');\n// Importing the websocket library which is used to interface between webpage and nodejs\nconst WebSocketServer = require('websocket').server;\n// This server is created using the http createServer function, which enables the user to create a http connection with a webpage\nconst server =- http.createServer();\n// The server then listens on the port specified\nserver.listen(7000);\n\n// We then create a new variable which will store the actual server I'll be running\nconst wsServer = new WebSocketServer({\n\t// Then we set the parameter of httpServer to the server variable that we said that would be listening on the port specified\n\thttpServer : server\n});\n\n// Next we check if someome is trying to connect to the server, i.e. the name request, it's requesting access to the server\nwsServer.on('request', function(request){\n\t// We store the actual connection as a variable and we accept that client to connect to this server\n\tconst connection = request.accept(null, request.origin);\n\t// This function is run when this client sends a message to the server.\n\tconnection.on('message', function(message){\n\t\t// We print out to the console the recieved message decoded to utf8\n\t\tconsole.log(\"Recieved Message: \" + message.utf8Data);\n\t\t// Then we send specifically to this connection back a message\n\t\tconnection.sendUTF(\"Hello this is the websocket server.\");\n\t});\n\t// This code is run when the user disconnects from the server.\n\tconnection.on('close', function(reasonCode, description){\n\t\t// We just print to the console that a client has disconnected from the server.\n\t\tconsole.log(\"A client has disconnected.\");\n\t});\n});",
    "reg_date": "2021-10-14T19:41:57.000Z"
  },
  {
    "id": 835,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs write raw buffer to file",
    "description": "",
    "reg_date": "2021-10-14T19:41:57.000Z"
  },
  {
    "id": 836,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs write stream to file",
    "description": "",
    "reg_date": "2021-10-14T19:41:57.000Z"
  },
  {
    "id": 837,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs write to log file",
    "description": "var access = fs.createWriteStream(dir + '/node.access.log', { flags: 'a' })\n      , error = fs.createWriteStream(dir + '/node.error.log', { flags: 'a' });\n\n// redirect stdout / stderr\nproc.stdout.pipe(access);\nproc.stderr.pipe(error);",
    "reg_date": "2021-10-14T19:41:58.000Z"
  },
  {
    "id": 838,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodejs zlib",
    "description": "const zlib = require('zlib')\n\n/**\n * @description custom compression content encoding\n */\n\nmodule.exports = () => {\n  return (req, res, next) => {\n    const compressType = req.headers['accept-encoding'].replace(/[,]/g, '').split(' ')\n\n    if (compressType[0] !== undefined && compressType[0] !== null) {\n      zlib.createGzip({\n        level: zlib.constants.Z_BEST_COMPRESSION,\n        strategy: zlib.constants.Z_RLE,\n        flush: zlib.constants.Z_FULL_FLUSH\n      })\n      return next()\n    }\n\n    if (compressType[1] !== undefined && compressType[1] !== null) {\n      zlib.createDeflate({\n        level: zlib.constants.Z_BEST_COMPRESSION,\n        strategy: zlib.constants.Z_RLE,\n        flush: zlib.constants.Z_FULL_FLUSH\n      })\n      return next()\n    }\n\n    if (compressType[2] !== undefined && compressType[2] !== null) {\n      zlib.createBrotliCompress({\n        flush: zlib.constants.BROTLI_OPERATION_FLUSH\n      })\n      return next()\n    }\n  }\n}",
    "reg_date": "2021-10-14T19:41:59.000Z"
  },
  {
    "id": 839,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nodemon script nodejs",
    "description": "# Install nodemon\nnpm install nodemon\n\n# Install nodemon globally on your machine\nnpm install -g nodemon\n\n# Install nodemon on your project as dev-dependency\nnpm install nodemon --save-dev  \"scripts\": {\n      \"start\": \"node ./bin/www\",\n      \"devstart\": \"nodemon ./bin/www\",\n      \"serverstart\": \"DEBUG=express-locallibrary-tutorial:* npm run devstart\"\n    },",
    "reg_date": "2021-10-14T19:41:59.000Z"
  },
  {
    "id": 840,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  nohup run nodejs",
    "description": "nohup node server.js &",
    "reg_date": "2021-10-14T19:41:59.000Z"
  },
  {
    "id": 841,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  objectid is not defined node js mongodb",
    "description": "var ObjectId = require('mongodb').ObjectID;\n",
    "reg_date": "2021-10-14T19:41:59.000Z"
  },
  {
    "id": 842,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  onclick node js",
    "description": "object.onclick = function() { \nconsole.log(\"Clicked!\");\n};",
    "reg_date": "2021-10-14T19:41:59.000Z"
  },
  {
    "id": 843,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  open folder node js",
    "description": "require('child_process').exec('start \"\" \"c:\\\\test\"');",
    "reg_date": "2021-10-14T19:41:59.000Z"
  },
  {
    "id": 844,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  opencv4nodejs mac install",
    "description": "npm install --save opencv4nodejs",
    "reg_date": "2021-10-14T19:41:59.000Z"
  },
  {
    "id": 845,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  openseamap nodejs github",
    "description": "\nvar OpenSeaMap = L.tileLayer('https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png', {\n\tattribution: 'Map data: © <a href=\"http://www.openseamap.org\">OpenSeaMap</a> contributors'\n});\n",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 846,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  orm for postgres node js",
    "description": "$ npm install sequelize\n$ npm install mysql\n",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 847,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  package.json in node js",
    "description": "npm init //To install package.jsoncd some/node/project\n\n# Get stuff from package.json\nnpe name\nnpe scripts\nnpe scripts.test\nnpe repository.url\nopen $(npe repository.url)\n\n# Set stuff in package.json\nnpe name foo\nnpe scripts.start \"node index.js\"\n\n# Keywords string will be turned into an array\n# If commas are present, they'll be the delimiter. Otherwise spaces.\nnpe keywords \"foo, bar, cheese whiz\"\nnpe keywords \"foo bar baz\"\n\n# The current working directory's package.json is used by default,\n# but you can point to another package file with a flag:\nnpe name --package=some/other/package.json\nnpe name other --package=some/other/package.json\nAll npm packages contain a file, usually in the project root, called package. json - this file holds various metadata relevant to the project. This file is used to give information to npm that allows it to identify the project as well as handle the project's dependencies.",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 848,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  pass data ino pug nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 849,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  passing variable in table row delete button node js express",
    "description": "<button class=\"delete-button\" onclick=\"deleting(<%= item._id %>)\">X</button>\nfunction deleting(value){\nfetch('/delete', { method: 'POST', data: {buttonId: value} })\n  .then(function (response) {\n    if (response.ok) {\n      console.log('Delete was recorded')\n      return\n    }\n    throw new Error('Request failed.')\n  })\n  .catch(function (error) {\n    console.log(error)\n  })\n",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 850,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  passport google authentication node js",
    "description": "var GoogleStrategy = require( 'passport-google-oauth2' ).Strategy;\n\npassport.use(new GoogleStrategy({\n    clientID:     GOOGLE_CLIENT_ID,\n    clientSecret: GOOGLE_CLIENT_SECRET,\n    callbackURL: \"http://yourdomain:3000/auth/google/callback\",\n    passReqToCallback   : true\n  },\n  function(request, accessToken, refreshToken, profile, done) {\n    User.findOrCreate({ googleId: profile.id }, function (err, user) {\n      return done(err, user);\n    });\n  }\n));\n$ npm install passport-google-oauth2\n",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 851,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  path.basename nodejs",
    "description": "/* The path.basename() method returns the last portion of a path,\nsimilar to the Unix basename command. Trailing directory separators\nare ignored, see path.sep. */\n\npath.basename('/foo/bar/baz/asdf/quux.html');\n// Returns: 'quux.html'\n\npath.basename('/foo/bar/baz/asdf/quux.html', '.html');\n// Returns: 'quux'",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 852,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  path.dirname nodejs",
    "description": "/* The path.dirname() method returns the directory name of a path,\nsimilar to the Unix dirname command. Trailing directory separators\nare ignored, see path.sep. */\n\npath.dirname('/foo/bar/baz/asdf/quux');\n// Returns: '/foo/bar/baz/asdf'",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 853,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  path.join nodejs",
    "description": "/* The path.join() method joins all given path segments together using\nthe platform-specific separator as a delimiter, then normalizes the\nresulting path. */\n\npath.join('/foo', 'bar', 'baz/asdf', 'quux', '..');\n// Returns: '/foo/bar/baz/asdf'\n\npath.join('foo', {}, 'bar');\n// Throws 'TypeError: Path must be a string. Received {}'var path = require('path');\nvar scriptName = path.basename(__filename);",
    "reg_date": "2021-10-14T19:42:00.000Z"
  },
  {
    "id": 854,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  payload too large nodejs",
    "description": "app.use(bodyParser.json({\n  limit: '50mb'\n}));\n\napp.use(bodyParser.urlencoded({\n  limit: '50mb',\n  parameterLimit: 100000,\n  extended: true \n}));\napp.use(express.json({limit: '50mb'}));\napp.use(express.urlencoded({limit: '50mb'}));",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 855,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  performance.now nodejs example",
    "description": "const {\n  performance\n} = require('perf_hooks');\n\nconsole.log('performance', performance.now());\n",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 856,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  port already in use node js",
    "description": "### For Linux/Mac OS search (sudo) run this in the terminal:\n$ lsof -i tcp:3000\n$ kill -9 PID\n\n### On Windows:\nnetstat -ano | findstr :3000\ntskill typeyourPIDhere \n\n### change tskill for taskkill in git bash$ lsof -i tcp:3000\n$ kill -9 PIDsudo kill -9 $(sudo lsof -t -i:3000)",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 857,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  post express node js input",
    "description": "<form method=\"POST\" action=\"/submit-form\">\n  <input type=\"text\" name=\"username\" />\n  <input type=\"submit\" />\n</form>const express = require('express')\nconst app = express()\n\napp.use(express.urlencoded({\n  extended: true\n}))\napp.post('/submit-form', (req, res) => {\n  const username = req.body.username\n  //...\n  res.end()\n})\n",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 858,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  post nodejs",
    "description": "const axios = require('axios')\n\naxios\n  .post('https://whatever.com/todos', {\n    todo: 'Buy the milk'\n  })\n  .then(res => {\n    console.log(`statusCode: ${res.statusCode}`)\n    console.log(res)\n  })\n  .catch(error => {\n    console.error(error)\n  })app.post(url,function(res,response){\n  res.sendFile(~);\n});",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 859,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  post xml with axios nodejs",
    "description": "var xmlBodyStr = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n       <req:KnownTrackingRequest xmlns:req=\"http://www.example.com\" \n                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n                xsi:schemaLocation=\"http://www.example.com\n                TrackingRequestKnown.xsd\">\n         <Request>\n           <ServiceHeader>\n              <MessageTime>2002-06-25T11:28:56-08:00</MessageTime>\n              <MessageReference>1234567890123456789012345678</MessageReference>\n              <SiteID>SiteID</SiteID>\n              <Password>Password</Password>\n           </ServiceHeader>\n         </Request>\n         <LanguageCode>en</LanguageCode>\n         <AWBNumber>01234567890</AWBNumber>\n         <LevelOfDetails>LAST_CHECK_POINT_ONLY</LevelOfDetails>`;\n\nvar config = {\n     headers: {'Content-Type': 'text/xml'}\n};\n\naxios.post('https://POST_URL', xmlBodyStr, config); \n",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 860,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  postgresql nodejs",
    "description": "//connect to postgres database in node\n\nconst Pool = require('pg').Pool;\n\nconst pool = new Pool({\n    user: '',\n    host: 'localhost',\n    database:  '',\n    password: '',\n    port:5432,\n  })\n\n//query example\n\napp.get('/users',async(req,res)=>{\n  \n  try{\n     let resp=await pool.query('SELECT * FROM users');\n  }catch(err){\n     res.status(200).send(resp.rows);\n  }\n})\n\n  //connect to postgres database in node\n\nconst Pool = require('pg').Pool;\n\nconst pool = new Pool({\n    user: '',\n    host: 'localhost',\n    database:  '',\n    password: '',\n    port:5432,\n  })\n\n//query example\n\napp.get('/users',async(req,res)=>{\n  \n  try{\n     let resp=await pool.query('SELECT * FROM users');\n  }catch(err){\n     res.status(200).send(resp.rows);\n  }\n})\n// callback\nclient.query('SELECT NOW() as now', (err, res) => {\n  if (err) {\n    console.log(err.stack)\n  } else {\n    console.log(res.rows[0])\n  }\n})\n// promise\nclient\n  .query('SELECT NOW() as now')\n  .then(res => console.log(res.rows[0]))\n  .catch(e => console.error(e.stack))const { Client } = require('pg')const client = new Client();(async () => {  await client.connect()  const res = await client.query('SELECT $1::text as message', ['Hello world!'])  console.log(res.rows[0].message) // Hello world!  await client.end()})()",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 861,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  postmark with nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 862,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  print in node js",
    "description": "console.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to stderr\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderrconsole.log([data][, ...])print(\"Hello world\");",
    "reg_date": "2021-10-14T19:42:01.000Z"
  },
  {
    "id": 863,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  print map object nodejs",
    "description": "import * as util from \"util\";\n\nconst map: Map<string, string> = new Map();\nmap.set(\"test\", \"test\");\n\nconst inspected: string = util.inspect(map);\n\nconsole.log(inspected);\n",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 864,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  print to console without newline nodejs",
    "description": "process.stdout.write(\"hello: \");",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 865,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  process.argv[2] node js",
    "description": ">>node myprogram.js firstarg secondarg\n\nprocess.argv[0] == \"node\"\n\nprocess.argv[1] == \"myprogram.js\"\n\nprocess.argv[2] == \"firstarg\"\n\nprocess.argv[3] == \"secondarg\"\n\n//process.argv[0] same as process.argv.slice(0)\n\n",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 866,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  process.now() nodejs",
    "description": "const {\n  performance\n} = require('perf_hooks');\n\nconsole.log('performance', performance.now());\n",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 867,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  promp node js",
    "description": "const readline = require(\"readline\");\n\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question(\"What is your name ? \", function saveInput(name) {\n  console.log(`His name is ${name}`);\n  rl.close();\n});\n\nrl.on(\"close\", function saveInput() {\n    console.log(\"\\nBYE BYE !!!\");\n    process.exit(0);\n});",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 868,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  pug node js express",
    "description": "",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 869,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  puppeteer example nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 870,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  query mongodb - nodejs",
    "description": "const Books = require(\"Books.js\")\nasync getBooks(req, res, next) {\n    let query;\n\n    // Copy req.query\n    let reqQuery = { ...req.query };\n\n    // Fields to exclude\n    const removeFields = [\"select\", \"sort\"];\n\n    // Loop over removeFields and delete them from reqQuery\n    removeFields.forEach(param => delete reqQuery[param]);\n\n    // Create query string\n    let queryStr = JSON.stringify(reqQuery);\n\n    // Create operators ($gt, $gte, etc)\n    queryStr = queryStr.replace(\n      /\\b(gt|gte|lt|lte|in)\\b/g,\n      match => `$${match}`\n    );\n\n    // Find resource\n    query = Books.findQuery(JSON.parse(queryStr));\n\n    // Select Fields\n    if (req.query.select) {\n      const fields = req.query.select.split(\",\").join(\" \");\n      query = query.select(fields);\n    }\n\n    // Sort\n    if (req.query.sort) {\n      const sortBy = req.query.sort.split(\",\").join(\" \");\n      query = query.sort(sortBy);\n    } else {\n      query = query.sort(\"-createdAt\");\n    }\n\n  \n    // Pagination\n    const page = parseInt(req.query.page, 10) || 1;\n    const limit = parseInt(req.query.limit, 10) || 10;\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const total = await Books.countDocuments();\n    query = query.skip(startIndex).limit(limit);\n  \n    // Executing query\n    let books = await query;\n  \n  \t\n    // Pagination result\n    const pagination = {};\n\n    if (endIndex < total) {\n      pagination.next = {\n        page: page + 1,\n        limit,\n      };\n    }\n\n    if (startIndex > 0) {\n      pagination.prev = {\n        page: page - 1,\n        limit,\n      };\n    }\n\n    res.status(200).json({\n      success: true,\n      count: books.length,\n      pagination,\n      data: books,\n    });\n  \n  \n  }\n",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 871,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  random id number nodejs",
    "description": "const crypto = require(\"crypto\");\n\nconst id = crypto.randomBytes(16).toString(\"hex\");\n\nconsole.log(id); // => f9b327e70bbcf42494ccb28b2d98e00e",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 872,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  random integer in nodejs",
    "description": "//in npm, type npm install random-int\n\nimport randomInteger from 'random-int';\n\nrandomInteger(5);\n//=> 3\n\nrandomInteger(10, 100);\n//=> 54",
    "reg_date": "2021-10-14T19:42:02.000Z"
  },
  {
    "id": 873,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  random string generator node js",
    "description": "var crypto = require(\"crypto\");\nvar id = crypto.randomBytes(20).toString('hex');\n\n// \"bb5dc8842ca31d4603d6aa11448d1654\"function getRandomString(length) {\n    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var result = '';\n    for ( var i = 0; i < length; i++ ) {\n        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n    }\n    return result;\n}\n\n//usage: getRandomString(20); // pass desired length of random stringfunction randomString(length) {\n\t\tvar result           = '';\n\t\tvar characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~!@#$%^&*()_+=-';\n\t\tvar charactersLength = characters.length;\n\t\tfor ( var i = 0; i < length; i++ ) {\n\t\t   result += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t\t}\n\t\treturn result;\n\t }\nrandomString(4);function makeid(length) {\n    var result           = [];\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n      result.push(characters.charAt(Math.floor(Math.random() * \n charactersLength)));\n   }\n   return result.join('');\n}\n\nconsole.log(makeid(5));const string_length = 10\n[...Array(string_length)].map(i=>(~~(Math.random()*36)).toString(36)).join('')",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 874,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  raspberry pi install node js",
    "description": "//Doing this regularly will keep your Raspberry Pi installation up to date.\n\n  //add store\n\tcurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\n  //install node\n    sudo apt install -y nodejs\n  //check version\n    node -v\n    //or\n    node --versionnode --version",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 875,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  react and node js sample project github",
    "description": "    \"webpack-build-logger\": \"^0.0.5\",\n    \"webpack-logging-plugin\": \"^0.1.2\"",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 876,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  react native typescript nodejs timeout",
    "description": "ReturnType<typeof setTimeout>;",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 877,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read a file nodejs",
    "description": "// load fs\nconst fs = require(\"fs\");\n// read the file\nconst content = fs.readFileSync(\"./my_file.txt\");\n// print it\nconsole.log(content.toString());const fs = require(\"fs\");\n\n// __dirname means relative to script. Use \"./data.txt\" if you want it relative to execution path.\nfs.readFile(__dirname + \"/data.txt\", (error, data) => {\n    if(error) {\n        throw error;\n    }\n    console.log(data.toString());\n});const fs = require('fs');\n\nfs.readFile('my-file.txt', 'utf8', function(err, data) {\n    if (err) throw err;\n    console.log(data);\n});let myFile = \"./myText.txt\";\nconst fs = require(\"fs\");\n\t\t\napp.all('/test', async (req, res) => {\n\ttry {\n\t\tconst readData = fs.readFileSync(myFile, 'utf8');\n\t\tif (readData) {\n\t\t\tres.send(readData)\n\t\t}\n\t} catch (error) {\n\t\tres.send(\"something is wrong\", error)\n\t}\n})fs = require('fs')\nfs.readFile('/etc/hosts', 'utf8', function (err,data) {\n  if (err) {\n    return console.log(err);\n  }\n  console.log(data);\n});",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 878,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read and update csv file in nodejs",
    "description": "const fs = require('fs')\nconst csv = require('csv-parser')\nconst randomWords = require('random-words')\nconst users = [];\nfunction generateUsername(firstname, surname) {\n    return `${firstname[0]}-${surname}`.toLowerCase();\n}\nfs.createReadStream('input.csv')\n  .pipe(csv())\n  .on('data', function (row) {\n    const username = generateUsername(row.Firstname, row.Surname);\n    const password = randomWords(3).join(\"-\");\n    \n    const user = {\n        username,\n        firstname: row.Firstname,\n        surname: row.Surname,\n        roles: row.Roles,\n        password\n    }\n    users.push(user)\n  })\n  .on('end', function () {\n      console.table(users)\n      // TODO: SAVE users data to another file\n    })\n$ npm i -s csv-parser\n$ npm i -s csv-parse\n",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 879,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read body of post request nodejs",
    "description": "app.use(express.urlencoded({ extended: true }));\nconsole.log(req.body);",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 880,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read buffer nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 881,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read data from url node js",
    "description": "var http = require('http');\n\nvar options = {\n    host: 'google.com',\n    path: '/'\n}\nvar request = http.request(options, function (res) {\n    var data = '';\n    res.on('data', function (chunk) {\n        data += chunk;\n    });\n    res.on('end', function () {\n        console.log(data);\n\n    });\n});\nrequest.on('error', function (e) {\n    console.log(e.message);\n});\nrequest.end();",
    "reg_date": "2021-10-14T19:42:03.000Z"
  },
  {
    "id": 882,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read directory in node js",
    "description": "",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 883,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read file in nodejs using fs",
    "description": "const fs = require('fs');\n\nfs.readFile('/Users/joe/test.txt', 'utf8' , (err, data) => {\n  if (err) {\n    console.error(err);\n    return\n  }\n  console.log(data);\n});let myFile = \"./myText.txt\";\nconst fs = require(\"fs\");\n\t\t\napp.all('/test', async (req, res) => {\n\ttry {\n\t\tconst readData = fs.readFileSync(myFile, 'utf8');\n\t\tif (readData) {\n\t\t\tres.send(readData)\n\t\t}\n\t} catch (error) {\n\t\tres.send(\"something is wrong\", error)\n\t}\n})",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 884,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read html file node js",
    "description": "const http = require(\"http\");\n//use fs module at first to read file \nconst fs = require(\"fs\");\n\nconst hostname = \"127.0.0.1\";\nconst port = 3000;\n// simple code to read file using fs module\nconst files = fs.readFileSync(\"new.html\");\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  // give correct input for html\n  res.setHeader(\"Content-Type\", \"text/html\");\n  res.end(files);\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n  console.log(\"Done\")\n});\n//simple code to make server and read filelet http = require('http');\nlet fs = require('fs');\n \nlet handleRequest = (request, response) => {\n    response.writeHead(200, {\n        'Content-Type': 'text/html'\n    });\n    fs.readFile('./index.html', null, function (error, data) {\n        if (error) {\n            response.writeHead(404);\n            respone.write('Whoops! File not found!');\n        } else {\n            response.write(data);\n        }\n        response.end();\n    });\n};\n \nhttp.createServer(handleRequest).listen(8000);\n<script> \n// Requiring fs module in which \n// writeFile function is defined. \nconst fs = require('fs') \n  \n// Data which will write in a file. \nlet data = \"Learning how to write in a file.\"\n  \n// Write data in 'Output.txt' . \nfs.writeFile('Output.txt', data, (err) => { \n      \n    // In case of a error throw err. \n    if (err) throw err; \n}) \n</script> ",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 885,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read json file node js",
    "description": "const fs = require('fs');\nconst path = require('path');\n\nlet rawdata = fs.readFileSync(path.resolve(__dirname, 'student.json'));\nlet student = JSON.parse(rawdata);\nconsole.log(student);const fs = require('fs');\nconst path = require('path');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nfs.writeFileSync(path.resolve(__dirname, 'student.json'), JSON.stringify(student));\nfunction readJsonFile(file) {\n    let bufferData = fs.readFileSync(file)\n    let stData = bufferData.toString()\n    let data = JSON.parse(stData)\n    return data\n}D:\\NodeJs>node readsync.js\n *START*\nOutput Content:\n /* content here */\n*EXIT*\n// Define JSON File\n var fs = require(\"fs\");\n console.log(\"\\n *STARTING* \\n\");\n// Get content from file\n var contents = fs.readFileSync(\"jsoncontent.json\");\n// Define to JSON type\n var jsonContent = JSON.parse(contents);\n// Get Value from JSON\n console.log(\"User Name:\", jsonContent.username);\n console.log(\"Email:\", jsonContent.email);\n console.log(\"Password:\", jsonContent.password);\nlog(\"\\n *EXIT* \\n\");\nconfig = require(\"./yourfile.json\"); // Note, \"config\" can be changed to your liking. // Read Synchrously\nvar fs = require(\"fs\");\nconsole.log(\"\\n *START* \\n\");\nvar content = fs.readFileSync(\"content.txt\");\nconsole.log(\"Output Content : \\n\"+ content);\nconsole.log(\"\\n *EXIT* \\n\");\n",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 886,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read json file nodejs",
    "description": "const fs = require('fs');\nconst path = require('path');\n\nlet rawdata = fs.readFileSync(path.resolve(__dirname, 'student.json'));\nlet student = JSON.parse(rawdata);\nconsole.log(student);const fs = require('fs');\nconst path = require('path');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nfs.writeFileSync(path.resolve(__dirname, 'student.json'), JSON.stringify(student));\nfunction readJsonFile(file) {\n    let bufferData = fs.readFileSync(file)\n    let stData = bufferData.toString()\n    let data = JSON.parse(stData)\n    return data\n}D:\\NodeJs>node readsync.js\n *START*\nOutput Content:\n /* content here */\n*EXIT*\n// Define JSON File\n var fs = require(\"fs\");\n console.log(\"\\n *STARTING* \\n\");\n// Get content from file\n var contents = fs.readFileSync(\"jsoncontent.json\");\n// Define to JSON type\n var jsonContent = JSON.parse(contents);\n// Get Value from JSON\n console.log(\"User Name:\", jsonContent.username);\n console.log(\"Email:\", jsonContent.email);\n console.log(\"Password:\", jsonContent.password);\nlog(\"\\n *EXIT* \\n\");\nconfig = require(\"./yourfile.json\"); // Note, \"config\" can be changed to your liking. // Read Synchrously\nvar fs = require(\"fs\");\nconsole.log(\"\\n *START* \\n\");\nvar content = fs.readFileSync(\"content.txt\");\nconsole.log(\"Output Content : \\n\"+ content);\nconsole.log(\"\\n *EXIT* \\n\");\n",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 887,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read qr code from image nodejs",
    "description": "//Importing jimp module\nvar Jimp = require(\"jimp\");\n// Importing filesystem module\nvar fs = require('fs')\n// Importing qrcode-reader module\nvar qrCode = require('qrcode-reader');\n\n// Read the image and create a buffer \n// (Here image.png is our QR code)\nvar buffer = fs.readFileSync(__dirname + '/image.png');\n\n// Parse the image using Jimp.read() method\nJimp.read(buffer, function(err, image) {\n\tif (err) {\n\t\tconsole.error(err);\n\t}\n\t// Creating an instance of qrcode-reader module\n\tlet qrcode = new qrCode();\n\tqrcode.callback = function(err, value) {\n\t\tif (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t\t// Printing the decrypted value\n\t\tconsole.log(value.result);\n\t};\n\t// Decoding the QR code\n\tqrcode.decode(image.bitmap);\n});\n",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 888,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  read txt file in node js",
    "description": "var fs = require('fs');\n\nfs.readFile('my-file.txt', 'utf8', function(err, data) {\n    if (err) throw err;\n    console.log(data);\n});var fs = require('fs');\n\nfs.readFile('my-file.txt', 'utf8', function(err, data) {\n    if (err) throw err;\n    console.log(data);\n});\n",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 889,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  readline node js",
    "description": "//Node.js readline\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question('What do you think of Node.js? ', (answer) => {\n  console.log(`Thank you for your valuable feedback: ${answer}`);\n  rl.close();\n});readline = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout\n})\n\nreadline.on(\"line\", (line) => {\n    if (line === \"\") {\n        // Code\n    }\n    else if (line === \"\") {\n        // Code\n    }\n})",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 890,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  receiving big response node js",
    "description": "const https = require(\"https\");const url = \"https://my-json-server.typicode.com/edurekaDemo/noderequest/db\";https.get(url, res => {res.setEncoding(\"utf8\");let body = \"\";res.on(\"data\", data => {body += data;});res.on(\"end\", () => {body = JSON.parse(body);console.log(body);});});",
    "reg_date": "2021-10-14T19:42:04.000Z"
  },
  {
    "id": 891,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  redis nodejs",
    "description": "async function upsert(table, data) {\n  let key = table;\n  if (data && data.id) {\n    key = key + '_' + data.id;\n  }\n\n  client.setex(key, 10, JSON.stringify(data));\n  return true;\n}\n/* npm install redis */\n\nconst redis = require(\"redis\");\nconst client = redis.createClient();\n\nclient.on(\"error\", function(error) {\n  console.error(error);\n});\n\nclient.set(\"key\", \"value\", redis.print);\nclient.get(\"key\", redis.print);// node-redis to promise, because node-redis not support promise\n\nimport bluebird from 'bluebird'\nimport { Commands, createClient } from 'redis'\n\nconst client = createClient({\n\thost: process.env.REDIS_HOST,\n\tport: parseInt(process.env.REDIS_PORT),\n\tpassword: process.env.REDIS_PASSWORD\n})\n\nlet redisCon: Commands<any>\n;(async (redis) => {\n\tconst redisPromise = await bluebird.resolve<Commands<any>>(redis)\n\tredisCon = redisPromise\n})(client)\n\nexport { redisCon }yarn add redis connect-redis express-session",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 892,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  redis pub or sub nodejs",
    "description": "var redis = require(“redis”);var publisher = redis.createClient();publisher.publish(“notification”, “{\\”message\\”:\\”Hello world from Asgardian!\\”}”, function(){ process.exit(0);});more example redis pub/sub -> https://github.com/restuwahyu13/express-todo-redis// publisher\n\nconst IORedis = require('ioredis')\n\nclass Publisher {\n\tconstructor(configs = { key: '' }) {\n\t\tthis.key = configs.key\n\t\tPublisher.set(configs.key)\n\t}\n\n\tstatic get() {\n\t\treturn this.key\n\t}\n\n\tstatic set(key = '') {\n\t\tthis.key = key\n\t}\n\n\t_redisConnect() {\n\t\tconst ioRedis = new IORedis({\n\t\t\thost: '127.0.0.1',\n\t\t\tport: 6379,\n\t\t\tmaxRetriesPerRequest: 50,\n\t\t\tconnectTimeout: 5000,\n\t\t\tenableReadyCheck: true,\n\t\t\tenableAutoPipelining: true\n\t\t})\n\n\t\treturn ioRedis\n\t}\n\n\tasync setString(keyName = '', data) {\n\t\tconst ioRedis = _redisConnect()\n\t\tawait ioRedis.set(keyName, data)\n\t}\n\n\tasync setMap(keyName = '', data = {}) {\n\t\tconst ioRedis = this._redisConnect()\n\t\tawait ioRedis.hmset(keyName, { ...data })\n\t}\n\n\tasync setArray(keyName = '', data = []) {\n\t\tconst ioRedis = _redisConnect()\n\t\tawait ioRedis.hmset(keyName, JSON.stringify({ data: data }))\n\t}\n\n\tasync setResponse(data = {}) {\n\t\tconst ioRedis = this._redisConnect()\n\t\tawait ioRedis.hmset('message:speaker', { ...data })\n\t}\n}\n\nmodule.exports = { Publisher }// subscriber\n\nconst IORedis = require('ioredis')\nconst chalk = require('chalk')\nconst { Publisher } = require('./util.publisher')\n\nclass Subscriber {\n\tconstructor(configs = { key: '' }) {\n\t\tthis._key = configs.key\n\t\tthis._keyFrom = Publisher.get()\n\t}\n\n\t_redisConnect() {\n\t\tconst ioRedis = new IORedis({\n\t\t\thost: '127.0.0.1',\n\t\t\tport: 6379,\n\t\t\tmaxRetriesPerRequest: 50,\n\t\t\tconnectTimeout: 5000,\n\t\t\tenableReadyCheck: true,\n\t\t\tenableAutoPipelining: true\n\t\t})\n\n\t\treturn ioRedis\n\t}\n\n\tasync getString(keyName) {\n\t\tif (this._key == this._keyFrom) {\n\t\t\tconst ioRedis = this._redisConnect()\n\t\t\tconst response = await ioRedis.get(keyName)\n\t\t\tawait ioRedis.expire(keyName, 60)\n\t\t\tif (response) {\n\t\t\t\treturn Promise.resolve(response)\n\t\t\t}\n\t\t\treturn {}\n\t\t} else {\n\t\t\treturn Promise.reject(chalk.red(new Error(`invalid key Subscriber: ${this._key} and Publisher: ${this._keyFrom}`)))\n\t\t}\n\t}\n\n\tasync getMap(keyName) {\n\t\tif (this._key == this._keyFrom) {\n\t\t\tconst ioRedis = this._redisConnect()\n\t\t\tconst response = await ioRedis.hgetall(keyName)\n\t\t\tawait ioRedis.expire(keyName, 60)\n\t\t\tif (response) {\n\t\t\t\treturn Promise.resolve(response)\n\t\t\t}\n\t\t\treturn {}\n\t\t} else {\n\t\t\treturn Promise.reject(chalk.red(new Error(`invalid key Subscriber: ${this._key} and Publisher: ${this._keyFrom}`)))\n\t\t}\n\t}\n\n\tasync getArray(keyName) {\n\t\tif (this._key == this._keyFrom) {\n\t\t\tconst ioRedis = this._redisConnect()\n\t\t\tconst response = await ioRedis.hgetall(keyName)\n\t\t\tawait ioRedis.expire(keyName, 60)\n\t\t\tif (response) {\n\t\t\t\treturn Promise.resolve(JSON.parser(response).data)\n\t\t\t}\n\t\t\treturn {}\n\t\t} else {\n\t\t\treturn Promise.reject(chalk.red(new Error(`invalid key Subscriber: ${this._key} and Publisher: ${this._keyFrom}`)))\n\t\t}\n\t}\n\n\tasync getResponse() {\n\t\tif (this._key == this._keyFrom) {\n\t\t\tconst ioRedis = this._redisConnect()\n\t\t\tconst response = await ioRedis.hgetall('message:speaker')\n\t\t\tawait ioRedis.expire('message:speaker', 30)\n\t\t\tif (response) {\n\t\t\t\treturn Promise.resolve(response)\n\t\t\t}\n\t\t\treturn {}\n\t\t} else {\n\t\t\treturn Promise.reject(chalk.red(new Error(`invalid key Subscriber: ${this._key} and Publisher: ${this._keyFrom}`)))\n\t\t}\n\t}\n}\n\nmodule.exports = { Subscriber }var redis = require(“redis”);var subscriber = redis.createClient();subscriber.on(“message”, function (channel, message) { console.log(“Message: “ + message + “ on channel: “ + channel + “ is arrive!”);});subscriber.subscribe(“notification”);",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 893,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  redis set expire time node js",
    "description": "client.set(key, value, 'EX', 60 * 60 * 24, callback);\n",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 894,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  referenceerror document is not defined node js",
    "description": "GLOBAL.document = new JSDOM(html).window.document;var jsdom = require(\"jsdom\");\nvar JSDOM = jsdom.JSDOM;",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 895,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  refresh a page in the browser node js",
    "description": "document.location.reload();",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 896,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  refresh after delete in node",
    "description": "  // Reloading the page\n    location.reload();",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 897,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  regex to get part of word nodejs",
    "description": "/\\(\\{#(.*?)#\\})\\)/g.exec(\"({#test#})\")[1] === \"test\"",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 898,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  remove bearer from token in node js",
    "description": "bearerHeader.replace(\"Bearer \",\"\");",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 899,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  render XML in node",
    "description": "app.get('/sitemap.xml', function (req, res) {\n  fs.readFile(\"./path/to/sitemap.xml\", \"utf-8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      return\n    }\n    console.log(data);\n    res.end(data) // Send Data\n  });\n});",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 900,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  render html in node js",
    "description": "let http = require('http');\nlet fs = require('fs');\n \nlet handleRequest = (request, response) => {\n    response.writeHead(200, {\n        'Content-Type': 'text/html'\n    });\n    fs.readFile('./index.html', null, function (error, data) {\n        if (error) {\n            response.writeHead(404);\n            respone.write('Whoops! File not found!');\n        } else {\n            response.write(data);\n        }\n        response.end();\n    });\n};\n \nhttp.createServer(handleRequest).listen(8000);\nrender html in node js\n-----------------------------\n//server.js & index.html keep in same dir\napp.use(express.static('./'));\n\napp.get('/', function(req, res) { \n    res.render('index.html');\n});",
    "reg_date": "2021-10-14T19:42:05.000Z"
  },
  {
    "id": 901,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  req.params.id in nodejs",
    "description": "req.params contains route parameters\n(in the path portion of the URL),\nand req.query contains the URL query parameters\n(after the ? in the URL).\n\nYou can also use req.param(name) to look up a parameter in both places\n(as well as req.body),\nbut this method is now deprecated.req.params.id // It's been like requesting the value 'id' using parameter(params)",
    "reg_date": "2021-10-14T19:42:06.000Z"
  },
  {
    "id": 902,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  request.end request.write node js",
    "description": "const http = require(\"http\")\n\nlet body = JSON.stringify({\n  title: \"Make a request with Node's http module\"\n})\n\nlet options = {\n  hostname: \"postman-echo.com\",\n  path: \"/post\",\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"Content-Length\": Buffer.byteLength(body)\n  }\n}\n\nhttp\n  .request(options, res => {\n    let data = \"\"\n    res.on(\"data\", d => {\n      data += d\n    })\n    res.on(\"end\", () => {\n      console.log(data)\n    })\n  })\n  .on(\"error\", console.error)\n  .end(body)\n",
    "reg_date": "2021-10-14T19:42:06.000Z"
  },
  {
    "id": 903,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  request module nodejs",
    "description": "let request = require('request')\n\nconst formData = {\n  // Pass a simple key-value pair\n  my_field: 'my_value',\n  // Pass data via Buffers\n  my_buffer: Buffer.from([1, 2, 3]),\n  // Pass data via Streams\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n  // Pass multiple values /w an Array\n  attachments: [\n    fs.createReadStream(__dirname + '/attachment1.jpg'),\n    fs.createReadStream(__dirname + '/attachment2.jpg')\n  ],\n  // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}\n  // Use case: for some types of streams, you'll need to provide \"file\"-related information manually.\n  // See the `form-data` README for more information about options: https://github.com/form-data/form-data\n  custom_file: {\n    value:  fs.createReadStream('/dev/urandom'),\n    options: {\n      filename: 'topsecret.jpg',\n      contentType: 'image/jpeg'\n    }\n  }\n};\nrequest.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});const request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  console.error('error:', error); // Print the error if one occurred\n  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n  console.log('body:', body); // Print the HTML for the Google homepage.\n});request  .get('http://google.com/img.png')\n  .on('response', function(response) {\n  console.log(response.statusCode) // 200\n  console.log(response.headers['content-type']) // 'image/png'  }) \n    .pipe(request.put('http://mysite.com/img.png'))",
    "reg_date": "2021-10-14T19:42:06.000Z"
  },
  {
    "id": 904,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  res.write in node js",
    "description": "response.setHeader(\"Content-Type\", \"text/html\");response.write(\"Heyy geeksforgeeks \", 'utf8', () => {\n      console.log(\"Writing string Data...\");\n });\n  \n// Prints Output on the browser in response\n  response.end(' ok');",
    "reg_date": "2021-10-14T19:42:06.000Z"
  },
  {
    "id": 905,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  res : [ Circular ] nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:06.000Z"
  },
  {
    "id": 906,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  res object anatomy nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:06.000Z"
  },
  {
    "id": 907,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  rest api node js with mysql",
    "description": "const express = require('express'),\n  app = express(),\n  bodyParser = require('body-parser');\n  port = process.env.PORT || 3000;\n\n\nconst mysql = require('mysql');\n// connection configurations\nconst mc = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '',\n    database: 'mydb'\n});\n \n// connect to database\nmc.connect();\n\napp.listen(port);\n\nconsole.log('API server started on: ' + port);\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\nvar routes = require('./app/routes/approutes'); //importing route\nroutes(app); //register the route\n",
    "reg_date": "2021-10-14T19:42:06.000Z"
  },
  {
    "id": 908,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  rest api with mongodb and nodejs",
    "description": "//using mongoose\nnpm i mongoose\n\nconst mongoose = require(\"mongoose\");\n\nmongoose\n  .connect(\n    \"your mongodb URI\",\n    {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n      useUnifiedTopology: true,\n    }\n  )\n  .then(() => console.log(\"mongodb connected\"))\n  .catch((err) => {\n    console.err(err.message);\n    process.exit(1);\n  });npm install express --save",
    "reg_date": "2021-10-14T19:42:07.000Z"
  },
  {
    "id": 909,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  retrieve domain from email address node js",
    "description": "",
    "reg_date": "2021-10-14T19:42:07.000Z"
  },
  {
    "id": 910,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  rfid reader nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:07.000Z"
  },
  {
    "id": 911,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  route parameter in node",
    "description": "var express = require('express');\nvar fs  = require('fs');\nvar app= express();\n app.get('/index/profile/:id',function(req,res){\n    //  res.send('profile with id' + req.params.id)\n\n    \n    \n });\napp.listen(3000,'127.0.0.1');\nconsole.log('lsitng');",
    "reg_date": "2021-10-14T19:42:07.000Z"
  },
  {
    "id": 912,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  routes in node js",
    "description": "var express = require('express');\nvar router = express.Router();\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now());\n  next();\n});\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page');\n});\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds');\n});\n\nmodule.exports = router;app.get('/users/:userId/books/:bookId', function (req, res) {\n  res.send(req.params)\n})\nvar express = require('express')\nvar router = express.Router()\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds')\n})\n\nmodule.exports = router\nvar express = require('express'),\n    dogs    = require('./routes/dogs'),\n    cats    = require('./routes/cats'),\n    birds   = require('./routes/birds');\n\nvar app = express();\n\napp.use('/dogs',  dogs);\napp.use('/cats',  cats);\napp.use('/birds', birds);\n\napp.listen(3000);Route path: /flights/:from-:to\nRequest URL: http://localhost:3000/flights/LAX-SFO\nreq.params: { \"from\": \"LAX\", \"to\": \"SFO\" }\nvar express = require('express');\n\nvar router = express.Router();\n\nrouter.get('/', function(req, res) {\n    res.send('GET handler for /dogs route.');\n});\n\nrouter.post('/', function(req, res) {\n    res.send('POST handler for /dogs route.');\n});\n\nmodule.exports = router;",
    "reg_date": "2021-10-14T19:42:07.000Z"
  },
  {
    "id": 913,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  run app node js",
    "description": "{\n  'lister': {\n    'paging': {'count': '20', 'offset': '0'},\n    'query': '',\n    'sort': {'sort': {'sort': ['created_time', 'asc']}},\n    'total_items': '5'\n  },\n  'jobs': [\n    {\n      'attachment_file_url': '',\n      'budget': '5',\n      'buyer_company__name': 'My Company',\n      'buyer_company__reference': '1040945',\n      'buyer_team__name': 'My Company',\n      'buyer_team__reference': '1040945',\n      'cancelled_date': '1380067200000',\n      'category2': 'Web, Mobile & Software Dev',\n      'created_time': '1377423220000',\n      'description': 'Testing some functionality',\n      'duration': '',\n      'end_date': '1380067200000',\n      'filled_date': '',\n      'job_ref_ciphertext': '~12345abcdf',\n      'job_type': 'fixed-price',\n      'keep_open_on_hire': '',\n      'num_active_candidates': '0',\n      'num_candidates': '0',\n      'num_new_candidates': '0',\n      'preference_candidate_type': 'individuals',\n      'public_url': 'https://...',\n      'reference': '~12345abcdf',\n      'skills': '',\n      'start_date': '1377388800000',\n      'status': 'cancelled',\n      'subcategory2': 'Web & Mobile Development',\n      'title': 'Test python-upwork',\n      'visibility': 'invite-only'\n    }\n  ]\n}\n",
    "reg_date": "2021-10-14T19:42:07.000Z"
  },
  {
    "id": 914,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  run node js",
    "description": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))// Run a command asynchronously\nconst { spawn } = require('child_process');\nconst dir = spawn('cmd', ['/c', 'dir']);\n\ndir.stdout.on('data', data => console.log(`Stdout: ${data}`));\ndir.stderr.on('data', data => console.log(`Stderr: ${data}`));\ndir.on('close', code => console.log(`Exit code: ${code}`));\n\n// Run a command synchronously\nconst { spawnSync } = require( 'child_process' );\nconst dir = spawnSync('cmd', ['/c', 'dir']);\n\nconsole.log(`Stdout: ${dir.stdout.toString()}`);\nconsole.log(`Stderr: ${dir.stderr.toString()}`);node name_app.js#1. server.js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.status(200).send('Hello World!');\n});\n\nvar port = process.env.PORT || 3000;\n\nvar server = app.listen(port, function() {\n  console.log('Express server listening on port ' + port);\n});\n\nopen cmd run server.js\n\"node server.js\"\nlog:Express server listening on port 3000\n\n& then\n\nopen link \"http://localhost:3000/\" in your browser and show result.Save your .js file in the same folder as node.js,\nFor windows , Usually location is- \"C:\\Program Files\\nodejs\"\nOpen 'Command prompt and locate node.js folder' OR directly open 'Node.js command prompt' and type \n>> node (file_name).js> node\nWelcome to Node.js <version>.\n\n>'type in javascript'",
    "reg_date": "2021-10-14T19:42:07.000Z"
  },
  {
    "id": 915,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  s3 list objects in folder node js",
    "description": "var AWS = require('aws-sdk');\nAWS.config.update({accessKeyId: 'mykey', secretAccessKey: 'mysecret', region: 'myregion'});\nvar s3 = new AWS.S3();\n\nvar params = { \n Bucket: 'mystore.in',\n Delimiter: '/',\n Prefix: 's/5469b2f5b4292d22522e84e0/ms.files/'\n}\n\ns3.listObjects(params, function (err, data) {\n if(err)throw err;\n console.log(data);\n});",
    "reg_date": "2021-10-14T19:42:08.000Z"
  },
  {
    "id": 916,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  samesite cookie nodejs",
    "description": "// Set a same-site cookie for first-party contexts\nresponse.cookie('cookie1', 'value1', { sameSite: 'lax' });\n// Set a cross-site cookie for third-party contexts\nresponse.cookie('cookie2', 'value2', { sameSite: 'none', secure: true });response.setHeader('set-cookie', [\n  'cookie1=value1; SameSite=Lax',\n  'cookie2=value2; SameSite=None; Secure',\n]);",
    "reg_date": "2021-10-14T19:42:08.000Z"
  },
  {
    "id": 917,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  sanitizer content nodejs",
    "description": "//first install package: npm install sanitize-html --save\nvar sanitizeHtml = require('sanitize-html');\n \nvar dirty = 'This is test <a style=\"opacity: 0.1\" href=\"javascript:void(0)\">Link</a>';\nvar clean = sanitizeHtml(dirty);\nconsole.log(clean);\n//result: This is test <a>Link</a>\n",
    "reg_date": "2021-10-14T19:42:08.000Z"
  },
  {
    "id": 918,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  save text to file nodejs",
    "description": "fs = require('fs');\nfs.writeFile(filename, data, [encoding], [callback])\n",
    "reg_date": "2021-10-14T19:42:08.000Z"
  },
  {
    "id": 919,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  scraping google nodejs",
    "description": "$ npm install google-search-scraper",
    "reg_date": "2021-10-14T19:42:08.000Z"
  },
  {
    "id": 920,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  screen.render is not a function in node",
    "description": "",
    "reg_date": "2021-10-14T19:42:08.000Z"
  },
  {
    "id": 921,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  search with multiple field in node js mongodb",
    "description": "db.test.find({\n$or:[\n    {\n        $and: [\n                {'stocknumber':12346},\n                {'model':'bmx'},\n                {'make':2002},\n                {'rego':'KA01HG6268'},\n                {'adate':'2017-10-01T05:07:10.969Z'},\n                {'cdate':'2017-10-01T05:07:10.969Z'}\n            ]\n    },\n    {\n        $and: [\n                {'stocknumber':12347},\n                {'model':'bmy'},\n                {'make':2003}\n            ]\n\n    }\n]\n}).pretty()> db.test.find({$or: [{Description: {$regex: '^225/65R16'}, Brand: {$regex: '^Hankook'}}]})\n{ \"Description\" : \"225/65R16 71T K715\", \"Brand\" : \"Hankook\", \"Ref\" : 123455 }\n{\"Description\" : \"225/65R16 94T\", \"Brand\" : \"Hankook\", \"Ref\" : 123455 }\n\n> db.test.find({$or: [{Description: {$regex: '^225'}, Brand: {$regex: '^Han'}}]})\n{ \"Description\" : \"225/65R16 71T K715\", \"Brand\" : \"Hankook\", \"Ref\" : 123455 }\n{ \"Description\" : \"225/65R16 94T\", \"Brand\" : \"Hankook\", \"Ref\" : 123455 }",
    "reg_date": "2021-10-14T19:42:09.000Z"
  },
  {
    "id": 922,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  secure random nodejs",
    "description": "// Synchronous\nconst buf = crypto.randomBytes(256);\nconsole.log(\n  `${buf.length} bytes of random data: ${buf.toString('hex')}`);\n",
    "reg_date": "2021-10-14T19:42:09.000Z"
  },
  {
    "id": 923,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  send audio with socket io node js",
    "description": "var constraints = { audio: true };\nnavigator.mediaDevices.getUserMedia(constraints).then(function(mediaStream) {\n    var mediaRecorder = new MediaRecorder(mediaStream);\n    mediaRecorder.onstart = function(e) {\n        this.chunks = [];\n    };\n    mediaRecorder.ondataavailable = function(e) {\n        this.chunks.push(e.data);\n    };\n    mediaRecorder.onstop = function(e) {\n        var blob = new Blob(this.chunks, { 'type' : 'audio/ogg; codecs=opus' });\n        socket.emit('radio', blob);\n    };\n\n    // Start recording\n    mediaRecorder.start();\n\n    // Stop recording after 5 seconds and broadcast it to server\n    setTimeout(function() {\n        mediaRecorder.stop()\n    }, 5000);\n});\n\n// When the client receives a voice message it will play the sound\nsocket.on('voice', function(arrayBuffer) {\n    var blob = new Blob([arrayBuffer], { 'type' : 'audio/ogg; codecs=opus' });\n    var audio = document.createElement('audio');\n    audio.src = window.URL.createObjectURL(blob);\n    audio.play();\n});",
    "reg_date": "2021-10-14T19:42:09.000Z"
  },
  {
    "id": 924,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  send email nodejs",
    "description": "var nodemailer = require('nodemailer');\n\nvar transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'youremail@gmail.com',\n    pass: 'yourpassword'\n  }\n});\n\nvar mailOptions = {\n  from: 'youremail@gmail.com',\n  to: 'myfriend@yahoo.com',\n  subject: 'Sending Email using Node.js',\n  text: 'That was easy!'\n};\n\ntransporter.sendMail(mailOptions, function(error, info){\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});",
    "reg_date": "2021-10-14T19:42:09.000Z"
  },
  {
    "id": 925,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  send mail in node js without password",
    "description": "const sendmail = require('sendmail')();\n\nsendmail({\n  from: 'test@finra.org',\n  to: 'YOUR@gmail.com',\n  subject: 'Hello World',\n  html: 'Mail of test sendmail '\n}, function (err, reply) {\n  console.log(err && err.stack)\n  console.dir(reply)\n})\n",
    "reg_date": "2021-10-14T19:42:09.000Z"
  },
  {
    "id": 926,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  send mail node js",
    "description": "var nodemailer = require('nodemailer');\n\nvar transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'youremail@gmail.com',\n    pass: 'yourpassword'\n  }\n});\n\nvar mailOptions = {\n  from: 'youremail@gmail.com',\n  to: 'myfriend@yahoo.com',\n  subject: 'Sending Email using Node.js',\n  text: 'That was easy!'\n};\n\ntransporter.sendMail(mailOptions, function(error, info){\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});",
    "reg_date": "2021-10-14T19:42:09.000Z"
  },
  {
    "id": 927,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  send multipart form data axios with node js",
    "description": "import React from 'react'\nimport axios, { post } from 'axios';\n\nclass SimpleReactFileUpload extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state ={\n      file:null\n    }\n    this.onFormSubmit = this.onFormSubmit.bind(this)\n    this.onChange = this.onChange.bind(this)\n    this.fileUpload = this.fileUpload.bind(this)\n  }\n\n  onFormSubmit(e){\n    e.preventDefault() // Stop form submit\n    this.fileUpload(this.state.file).then((response)=>{\n      console.log(response.data);\n    })\n  }\n\n  onChange(e) {\n    this.setState({file:e.target.files[0]})\n  }\n\n  fileUpload(file){\n    const url = 'http://example.com/file-upload';\n    const formData = new FormData();\n    formData.append('file',file)\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n    return  post(url, formData,config)\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <h1>File Upload</h1>\n        <input type=\"file\" onChange={this.onChange} />\n        <button type=\"submit\">Upload</button>\n      </form>\n   )\n  }\n}\n\n\n\nexport default SimpleReactFileUpload\nconst axios = require('axios');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n// Second argument  can take Buffer or Stream (lazily read during the request) too.\n// Third argument is filename if you want to simulate a file upload. Otherwise omit.\nform.append('field', 'a,b,c', 'blah.csv');\naxios.post('http://example.org/endpoint', form, {\n  headers: form.getHeaders(),\n}).then(result => {\n  // Handle result…\n  console.log(result.data);\n});",
    "reg_date": "2021-10-14T19:42:09.000Z"
  },
  {
    "id": 928,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  send user actions to admin by socket io in nodejs",
    "description": "socket.emit('message', \"this is a test\"); //sending to sender-client only\nsocket.broadcast.emit('message', \"this is a test\"); //sending to all clients except sender\nsocket.broadcast.to('game').emit('message', 'nice game'); //sending to all clients in 'game' room(channel) except sender\nsocket.to('game').emit('message', 'enjoy the game'); //sending to sender client, only if they are in 'game' room(channel)\nsocket.broadcast.to(socketid).emit('message', 'for your eyes only'); //sending to individual socketid\nio.emit('message', \"this is a test\"); //sending to all clients, include sender\nio.in('game').emit('message', 'cool game'); //sending to all clients in 'game' room(channel), include sender\nio.of('myNamespace').emit('message', 'gg'); //sending to all clients in namespace 'myNamespace', include sender\nsocket.emit(); //send to all connected clients\nsocket.broadcast.emit(); //send to all connected clients except the one that sent the message\nsocket.on(); //event listener, can be called on client to execute on server\nio.sockets.socket(); //for emiting to specific clients\nio.sockets.emit(); //send to all connected clients (same as socket.emit)\nio.sockets.on() ; //initial connection from a client.\n",
    "reg_date": "2021-10-14T19:42:09.000Z"
  },
  {
    "id": 929,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  send variable data from node js to front end javascript",
    "description": "<script>\n   window.app = <%- JSON.stringify(data) %>\n</script>",
    "reg_date": "2021-10-14T19:42:10.000Z"
  },
  {
    "id": 930,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  sendfile in node js",
    "description": "",
    "reg_date": "2021-10-14T19:42:10.000Z"
  },
  {
    "id": 931,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  sendgrid nodejs send email template",
    "description": "const sgMail = require('@sendgrid/mail');\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst msg = {\n  to: 'recipient@example.org',\n  from: 'sender@example.org',\n  templateId: 'd-f43daeeaef504760851f727007e0b5d0',\n  dynamic_template_data: {\n    subject: 'Testing Templates',\n    name: 'Some One',\n    city: 'Denver',\n  },\n};\nsgMail.send(msg);",
    "reg_date": "2021-10-14T19:42:10.000Z"
  },
  {
    "id": 932,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  sequelize mysql node js tutorial",
    "description": "",
    "reg_date": "2021-10-14T19:42:10.000Z"
  },
  {
    "id": 933,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  server sent events node js + github",
    "description": "$ npm install sse-nodejs\n",
    "reg_date": "2021-10-14T19:42:10.000Z"
  },
  {
    "id": 934,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  servers for node js",
    "description": "const num = 256\n\nconsole.log(num)\n",
    "reg_date": "2021-10-14T19:42:10.000Z"
  },
  {
    "id": 935,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  serving html and css with node js",
    "description": "// HTTP Module for Creating Server and Serving Static Files Using Node.js\n// Static Files: HTML, CSS, JS, Images\n// Get Complete Source Code from Pabbly.com\n\nvar http = require('http');\nvar fs = require('fs');\nvar path = require('path');\n\nhttp.createServer(function(req, res){\n\n    if(req.url === \"/\"){\n        fs.readFile(\"./public/index.html\", \"UTF-8\", function(err, html){\n            res.writeHead(200, {\"Content-Type\": \"text/html\"});\n            res.end(html);\n        });\n    }else if(req.url.match(\"\\.css$\")){\n        var cssPath = path.join(__dirname, 'public', req.url);\n        var fileStream = fs.createReadStream(cssPath, \"UTF-8\");\n        res.writeHead(200, {\"Content-Type\": \"text/css\"});\n        fileStream.pipe(res);\n\n    }else if(req.url.match(\"\\.png$\")){\n        var imagePath = path.join(__dirname, 'public', req.url);\n        var fileStream = fs.createReadStream(imagePath);\n        res.writeHead(200, {\"Content-Type\": \"image/png\"});\n        fileStream.pipe(res);\n    }else{\n        res.writeHead(404, {\"Content-Type\": \"text/html\"});\n        res.end(\"No Page Found\");\n    }\n\n}).listen(3000);Copy",
    "reg_date": "2021-10-14T19:42:10.000Z"
  },
  {
    "id": 936,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  set 404 handling via express in node",
    "description": "// Dopo tutte le altre route\n\napp.get('*', function(req, res, next) {\n    var err = new Error();\n    err.status = 404;\n    next(err);\n});\n\napp.use(function(err, req, res, next) {\n    if (err.status === 404) {\n        var data = {\n            title: '404 Not Found',\n            content: 'Oops, page not found!';\n        };\n        res.render('pages/404', data);\n    } else {\n        return next();\n    }\n});\n\napp.use(function(req, res, next){\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.render('404', { url: req.url });\n    return;\n  }\n\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({ error: 'Not found' });\n    return;\n  }\n\n  // default to plain-text. send()\n  res.type('txt').send('Not found');\n});",
    "reg_date": "2021-10-14T19:42:10.000Z"
  },
  {
    "id": 937,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  set cookie in node",
    "description": "res.setHeader('Set-Cookie','visited=true; Max-Age=3000; HttpOnly, Secure');",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 938,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  set in Dynamo DB not properly incrementing nodejs lamnda function",
    "description": "var AWS = require('aws-sdk');\nvar documentClient = new AWS.DynamoDB.DocumentClient({'region': 'eu-central-1'});\n\nexports.handler = function(item, context, callback) {\n\n    var params = {\n        TableName: \"my-table\",\n        Key:{\n            \"id\": item.id\n        },\n        UpdateExpression: \"ADD iteration :iteration SET itemdata = :itemdata\",\n        ExpressionAttributeValues:{\n            ':iteration': 1,\n            ':itemdata' : item.data\n        },\n        ReturnValues:\"NONE\"\n};\n\ndocumentClient.update(params, function(err, data) {\n    if (err) {\n      console.log(\"Error\", err);\n      const errResponse = {\n        statusCode: 500,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n        body: JSON.stringify({ Error: 500, device : \"DynamoDB\", detail : err })\n      };\n      callback(null, errResponse);\n    } else {\n      console.log(\"Success\", params.Items);\n      const response = {\n        statusCode: 200,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n        body: JSON.stringify(\"upsert complete.\")\n      };\n      callback(null, response);\n    }\n  });\n};",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 939,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  set local time in node",
    "description": "const nDate = new Date().toLocaleString('en-US', {\n  timeZone: 'Asia/Calcutta'\n});\n\nconsole.log(nDate);",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 940,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  set path of index html meta tag using node js",
    "description": "",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 941,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  set proxy to use nodejs in angular",
    "description": "",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 942,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  setinterval nodejs",
    "description": "setTimeout(function () {\n    console.log(\"5 secondes\"); \n}, 5000); \nconsole.log(\"now\");setInterval(function () {\n    console.log(\"Every 5 secondes\"); \n}, 5000); \nconsole.log(\"now\");window.setInterval(function() {\n  // do stuff\n}, 1000); // 1000 milliseconds (1 second)var intervalID = setInterval(alert, 1000); // Will alert every second.\n// clearInterval(intervalID); // Will clear the timer.\n\nsetTimeout(alert, 1000); // Will alert once, after a second.\nsetInterval(function(){ \n\tconsole.log(\"Oooo Yeaaa!\");\n}, 2000);//run this thang every 2 seconds",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 943,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  settimeout node js",
    "description": "setTimeout(function () {\n    console.log(\"5 secondes\"); \n}, 5000); \nconsole.log(\"now\");setInterval(function () {\n    console.log(\"Every 5 secondes\"); \n}, 5000); \nconsole.log(\"now\");",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 944,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  settimeout nodejs await",
    "description": "function timeout(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function sleep(fn, ...args) {\n    await timeout(3000);\n    return fn(...args);\n}\n",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 945,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  setup node js express basic setup",
    "description": "npm init -y\nnpm i express\nyarn add express \nyarn add --dev @types/express",
    "reg_date": "2021-10-14T19:42:11.000Z"
  },
  {
    "id": 946,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  sha3 nodejs",
    "description": "let test = crypto.createHmac('sha256', \"key\").update(\"json\").digest(\"base64\");\n",
    "reg_date": "2021-10-14T19:42:12.000Z"
  },
  {
    "id": 947,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  show all collections in mongodb node js",
    "description": "var mongo = require('mongodb').MongoClient;\n\nasync function connect(){\n    /**\n     * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.\n     * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details\n     */\n    const uri = \"yourUri\";\n \n\n    const client = new mongo(uri);\n \n    try {\n        // Connect to the MongoDB cluster\n        await client.connect();\n        \n        // Make the appropriate DB calls\n        const db = client.db(\"testDatabase\");\n       \n        const collections = await db.collections();\n        collections.forEach (c=>console.log(c.collectionName));\n        \n \n       \n       \n \n    } catch (e) {\n        console.error(e);\n    } finally {\n        await client.close();\n    }\n}\n\nconnect().catch(console.error);\nasync function connect(){\n    /**\n     * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.\n     * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details\n     */\n    const uri = \"yourUri\";\n \n\n    const client = new mongo(uri);\n \n    try {\n        // Connect to the MongoDB cluster\n        await client.connect();\n        \n        // Make the appropriate DB calls\n        const db = client.db(\"testDatabase\");\n       \n        const collections = await db.collections();\n        collections.forEach (c=>console.log(c.collectionName));\n\n        }\n        \n        \n \n        // Make the appropriate DB calls\n       \n \n    } catch (e) {\n        console.error(e);\n    } finally {\n        await client.close();\n    }\n}\n\nconnect().catch(console.error);\n",
    "reg_date": "2021-10-14T19:42:12.000Z"
  },
  {
    "id": 948,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  show html file on nodejs code",
    "description": "let http = require('http');\nlet fs = require('fs');\n \nlet handleRequest = (request, response) => {\n    response.writeHead(200, {\n        'Content-Type': 'text/html'\n    });\n    fs.readFile('./index.html', null, function (error, data) {\n        if (error) {\n            response.writeHead(404);\n            respone.write('Whoops! File not found!');\n        } else {\n            response.write(data);\n        }\n        response.end();\n    });\n};\n \nhttp.createServer(handleRequest).listen(8000);\n",
    "reg_date": "2021-10-14T19:42:12.000Z"
  },
  {
    "id": 949,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  simple nodejs dockerfile",
    "description": "FROM node:10-alpine\n\nRUN mkdir -p /home/node/app/node_modules && chown -R node:node /home/node/app\n\nWORKDIR /home/node/app\n\nCOPY package*.json ./\n\nUSER node\n\nRUN npm install\n\nCOPY --chown=node:node . .\n\nEXPOSE 8080\n\nCMD [ \"node\", \"index.js\" ]FROM node:12-alpine\nWORKDIR /app\nCOPY package.json yarn.lock ./\nRUN yarn install --production\nCOPY . .\nCMD [\"node\", \"/app/src/index.js\"]# Choose the Image which has Node installed already\nFROM node:alpine\n\n# COPY all the files from Current Directory into the Container\nCOPY ./ ./\n\n# Install the Project Dependencies like Express Framework\nRUN npm install\n\n# Tell that this image is going to Open a Port \nEXPOSE 8080\n\n# Default Command to launch the Application\nCMD [\"npm\", \"start\"]FROM node:12\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\n\nRUN npm install\n# If you are building your code for production\n# RUN npm ci --only=production\n\n# Bundle app source\nCOPY . .\n\nEXPOSE 8080\nCMD [ \"node\", \"server.js\" ]{\n  \"name\": \"docker_web_app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node.js on Docker\",\n  \"author\": \"First Last <first.last@example.com>\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.16.1\"\n  }\n}",
    "reg_date": "2021-10-14T19:42:12.000Z"
  },
  {
    "id": 950,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  sleep in nodejs?",
    "description": "await sleep(1000)\nfunction sleep(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n} ",
    "reg_date": "2021-10-14T19:42:13.000Z"
  },
  {
    "id": 951,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  social login in node js and express js",
    "description": "",
    "reg_date": "2021-10-14T19:42:15.000Z"
  },
  {
    "id": 952,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  socket.io client send data node js server",
    "description": "var socket = io.connect('http://localhost');\nsocket.emit('my other event', { my: 'data' });\n//server side\nio.sockets.on('connection', function (socket) {\n  socket.on('my other event', function (data) {\n    console.log(data);\n  });\n});\n//sending data from the user via a socket.io\nsocket.on(\"test\", function (data) {\n    data.forEach(obj => {\n        console.log(\"Yer : \" + obj.yer + \", Lat : \" + obj.lat + \", Long : \" + obj.lng);\n    })\n});<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n  const socket = io();\n</script>",
    "reg_date": "2021-10-14T19:42:15.000Z"
  },
  {
    "id": 953,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  socket emit to specific room using nodejs socket.io",
    "description": "socket.emit('message', \"this is a test\"); //sending to sender-client only\nsocket.broadcast.emit('message', \"this is a test\"); //sending to all clients except sender\nsocket.broadcast.to('game').emit('message', 'nice game'); //sending to all clients in 'game' room(channel) except sender\nsocket.to('game').emit('message', 'enjoy the game'); //sending to sender client, only if they are in 'game' room(channel)\nsocket.broadcast.to(socketid).emit('message', 'for your eyes only'); //sending to individual socketid\nio.emit('message', \"this is a test\"); //sending to all clients, include sender\nio.in('game').emit('message', 'cool game'); //sending to all clients in 'game' room(channel), include sender\nio.of('myNamespace').emit('message', 'gg'); //sending to all clients in namespace 'myNamespace', include sender\nsocket.emit(); //send to all connected clients\nsocket.broadcast.emit(); //send to all connected clients except the one that sent the message\nsocket.on(); //event listener, can be called on client to execute on server\nio.sockets.socket(); //for emiting to specific clients\nio.sockets.emit(); //send to all connected clients (same as socket.emit)\nio.sockets.on() ; //initial connection from a client.io.to('room1').to('room2').to('room3').emit('some event');io.on('connect', onConnect);function onConnect(socket){  // sending to the client  socket.emit('hello', 'can you hear me?', 1, 2, 'abc');  // sending to all clients except sender  socket.broadcast.emit('broadcast', 'hello friends!');  // sending to all clients in 'game' room except sender  socket.to('game').emit('nice game', \"let's play a game\");  // sending to all clients in 'game1' and/or in 'game2' room, except sender  socket.to('game1').to('game2').emit('nice game', \"let's play a game (too)\");  // sending to all clients in 'game' room, including sender  io.in('game').emit('big-announcement', 'the game will start soon');  // sending to all clients in namespace 'myNamespace', including sender  io.of('myNamespace').emit('bigger-announcement', 'the tournament will start soon');  // sending to a specific room in a specific namespace, including sender  io.of('myNamespace').to('room').emit('event', 'message');  // sending to individual socketid (private message)  io.to(socketId).emit('hey', 'I just met you');  // WARNING: `socket.to(socket.id).emit()` will NOT work, as it will send to everyone in the room  // named `socket.id` but the sender. Please use the classic `socket.emit()` instead.  // sending with acknowledgement  socket.emit('question', 'do you think so?', function (answer) {});  // sending without compression  socket.compress(false).emit('uncompressed', \"that's rough\");  // sending a message that might be dropped if the client is not ready to receive messages  socket.volatile.emit('maybe', 'do you really need it?');  // specifying whether the data to send has binary data  socket.binary(false).emit('what', 'I have no binaries!');  // sending to all clients on this node (when using multiple nodes)  io.local.emit('hi', 'my lovely babies');  // sending to all connected clients  io.emit('an event sent to all connected clients');};io.on('connection', socket => {  socket.on('say to someone', (id, msg) => {    socket.to(id).emit('my message', msg);  });});Let me make it simpler with socket.io rooms. request a server \nwith a unique identifier to join a server. here we are using \nan email as a unique identifier.\n\nClient Socket.io\nsocket.on('connect', function () {\n  socket.emit('join', {email: user@example.com});\n});\nWhen the user joined a server, create a room for that user\n\nServer Socket.io\nio.on('connection', function (socket) {\n   socket.on('join', function (data) {    \n    socket.join(data.email);\n  });\n});\nNow we are all set with joining. let emit something to from the \nserver to room, so that user can listen.\n\nServer Socket.io\nio.to('user@example.com').emit('message', {msg: 'hello world.'});\n\nLet finalize the topic with listening to message event to the \nclient side\nsocket.on(\"message\", function(data) {\n  alert(data.msg);\n});\n\nThe reference from Socket.io rooms",
    "reg_date": "2021-10-14T19:42:16.000Z"
  },
  {
    "id": 954,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  split and join in node js",
    "description": "var str = \"How are you doing today?\";\nvar res = str.split(\" \");\nvar join = res.join(\",\");",
    "reg_date": "2021-10-14T19:42:16.000Z"
  },
  {
    "id": 955,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  sqlite3 multithreading nodejs",
    "description": "const cluster = require('cluster');\nconst db = new sqlite3.Database(':memory:')\n\nif (cluster.isMaster) {\n    console.log(`Master ${process.pid} is running`);\n    cluster.fork()\n        .on('exit', (worker, code, signal) => {\n            console.log(`worker ${worker.process.pid} died`);\n        });\n    cluster.fork()\n        .on('exit', (worker, code, signal) => {\n            console.log(`worker ${worker.process.pid} died`);\n        });\n\n} else if (cluster.worker.id === 1){\n  db.run(QUERY1);\n} else {\n db.run(QUERY2);\n}\n",
    "reg_date": "2021-10-14T19:42:16.000Z"
  },
  {
    "id": 956,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  ssl configuration in node js",
    "description": "const https = require(\"https\"),\n  fs = require(\"fs\"),\n  helmet = require(\"helmet\");\n\nconst options = {\n  key: fs.readFileSync(\"/srv/www/keys/my-site-key.pem\"),\n  cert: fs.readFileSync(\"/srv/www/keys/chain.pem\")\n};\n\nconst app = express();\n\napp.use(helmet()); // Add Helmet as a middleware\n\napp.use((req, res) => {\n  res.writeHead(200);\n  res.end(\"hello world\\n\");\n});\n\napp.listen(8000);\n\nhttps.createServer(options, app).listen(8080);\n",
    "reg_date": "2021-10-14T19:42:16.000Z"
  },
  {
    "id": 957,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  start nodejs file",
    "description": "",
    "reg_date": "2021-10-14T19:42:17.000Z"
  },
  {
    "id": 958,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  stop python script nodejs",
    "description": "var python_process;\n\nrouter.get('/start_python', function(req, res) {\n    var PythonShell = require('python-shell');\n    var pyshell = new PythonShell('general.py');\n\n    pyshell.end(function (err) {\n        if (err) {\n            console.log(err);\n        }\n    });\n    python_process = pyshell.childProcess;\n\n    res.send('Started.');\n});\n\n// this stops the process\nrouter.get('/stop_python', function(req, res) {\n   python_process.kill('SIGINT');\n   res.send('Stopped');\n});",
    "reg_date": "2021-10-14T19:42:18.000Z"
  },
  {
    "id": 959,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  stream in node js",
    "description": "const { Readable } = require(\"stream\")\n\nconst readable = Readable.from([\"input string\"])\n\nreadable.on(\"data\", (chunk) => {\n  console.log(chunk) // will be called once with `\"input string\"`\n})const fs = require('fs');\nconst r = fs.createReadStream('file.txt');\nconst z = zlib.createGzip();\nconst w = fs.createWriteStream('file.txt.gz');\nr.pipe(z).pipe(w);A stream is an abstract interface for working with streaming data in Node.js. The stream module provides an API for implementing the stream interface.\n\nThere are many stream objects provided by Node.js. For instance, a request to an HTTP server and process.stdout are both stream instances.\n\nStreams can be readable, writable, or both. All streams are instances of EventEmitter.\n\nTo access the stream module\n\nconst stream = require('stream');\nor import stream from 'stream';\n\nThere are four fundamental stream types within Node.js:\nWritable: streams to which data can be written (for example, fs.createWriteStream()).\nReadable: streams from which data can be read (for example, fs.createReadStream()).\nDuplex: streams that are both Readable and Writable (for example, net.Socket).\nTransform: Duplex streams that can modify or transform the data as it is written and read (for example, zlib.createDeflate()).",
    "reg_date": "2021-10-14T19:42:18.000Z"
  },
  {
    "id": 960,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  streami node js",
    "description": "const { Readable } = require(\"stream\")\n\nconst readable = Readable.from([\"input string\"])\n\nreadable.on(\"data\", (chunk) => {\n  console.log(chunk) // will be called once with `\"input string\"`\n})const fs = require('fs');\nconst r = fs.createReadStream('file.txt');\nconst z = zlib.createGzip();\nconst w = fs.createWriteStream('file.txt.gz');\nr.pipe(z).pipe(w);A stream is an abstract interface for working with streaming data in Node.js. The stream module provides an API for implementing the stream interface.\n\nThere are many stream objects provided by Node.js. For instance, a request to an HTTP server and process.stdout are both stream instances.\n\nStreams can be readable, writable, or both. All streams are instances of EventEmitter.\n\nTo access the stream module\n\nconst stream = require('stream');\nor import stream from 'stream';\n\nThere are four fundamental stream types within Node.js:\nWritable: streams to which data can be written (for example, fs.createWriteStream()).\nReadable: streams from which data can be read (for example, fs.createReadStream()).\nDuplex: streams that are both Readable and Writable (for example, net.Socket).\nTransform: Duplex streams that can modify or transform the data as it is written and read (for example, zlib.createDeflate()).",
    "reg_date": "2021-10-14T19:42:18.000Z"
  },
  {
    "id": 961,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  stripe subscription node js",
    "description": "const stripe = require('stripe')('api_key');\n\nstripe.customers.create({ email: 'email_address' }, (error, customer) => {\n\tif (error) {\n      console.error(error);\n    } else {\n      console.log(customer);\n    }\n});var stripe = require('stripe')('sk_test_FceQdct2QZpFfQZC4Wx9hGeo00ghaTeqAc');\n\nstripe.subscriptions.create(\n  {\n    customer: 'cus_HKZRMeUnGPOb66',\n    items: [{price: 'gold'}],\n  },\n  function(err, subscription) {\n    // asynchronously called\n  }\n);import {loadStripe} from '@stripe/stripe-js'; const stripe = await loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');",
    "reg_date": "2021-10-14T19:42:19.000Z"
  },
  {
    "id": 962,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  token authenticate nodejs",
    "description": "Setting up our development environment and initializing our express server.\nCreating our first basic route and controller.\nFleshing out our routes and controllers to add users and login users.\nCreating a route and controller that will handle getting all users.As a first test to ensure that you can connect to your FusionAuth service, create a test.js file, replacing the first parameter in the FusionAuthClient constructor [your API Key here] with a valid API key from your FusionAuth environment. Replace the email address user@example.com with a valid user in your FusionAuth environment. If you just installed FusionAuth there may only be a single user which will be the email address used to complete the Setup Wizard.\n\nIf the request contains the access token, then the server will verify whether it was issued by the server itself using the stored secret. In case the token is expired or recognized as a one not signed by the server, the jsonwebtoken’s verify method will throw an error. We can handle the error to return a 401 error back to the client.",
    "reg_date": "2021-10-14T19:42:19.000Z"
  },
  {
    "id": 963,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  token authentication in nodejs",
    "description": "Setting up our development environment and initializing our express server.\nCreating our first basic route and controller.\nFleshing out our routes and controllers to add users and login users.\nCreating a route and controller that will handle getting all users.If the request contains the access token, then the server will verify whether it was issued by the server itself using the stored secret. In case the token is expired or recognized as a one not signed by the server, the jsonwebtoken’s verify method will throw an error. We can handle the error to return a 401 error back to the client.",
    "reg_date": "2021-10-14T19:42:19.000Z"
  },
  {
    "id": 964,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  transaction commit rollback nodejs",
    "description": "const mysql = require('mysql2/promise')\n\n/** See documentation from original answer */\nasync function transaction(queries, queryValues) {\n    if (queries.length !== queryValues.length) {\n        return Promise.reject(\n            'Number of provided queries did not match the number of provided query values arrays'\n        )\n    }\n    const connection = await mysql.createConnection(databaseConfigs)\n    try {\n        await connection.beginTransaction()\n        const queryPromises = []\n\n        queries.forEach((query, index) => {\n            queryPromises.push(connection.query(query, queryValues[index]))\n        })\n        const results = await Promise.all(queryPromises)\n        await connection.commit()\n        await connection.end()\n        return results\n    } catch (err) {\n        await connection.rollback()\n        await connection.end()\n        return Promise.reject(err)\n    }\n}\n",
    "reg_date": "2021-10-14T19:42:20.000Z"
  },
  {
    "id": 965,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  trim nodejs sentence from spaces",
    "description": "newString = string.replace(/\\s+/g,''); // \"thiscontainsspaces\"\n",
    "reg_date": "2021-10-14T19:42:20.000Z"
  },
  {
    "id": 966,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  tskill nodejs port",
    "description": "For Linux/Mac OS:\n$ lsof -i tcp:3000\n$ kill -9 PID\n\nOn Windows:\nnetstat -ano | findstr :3000\ntskill typeyourPIDhere",
    "reg_date": "2021-10-14T19:42:20.000Z"
  },
  {
    "id": 967,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  ubuntu 18.04 nodejs insatll",
    "description": "// Enabling NodeSource Repository\n// replace %V% with desired major version\ncurl -sL https://deb.nodesource.com/setup_%V%.x | sudo bash -\n// Install using apt-get\nsudo apt-get install -y nodejs\n// check installed node version\nnode --version$ curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -sudo bash nodesource_setup.sh\n",
    "reg_date": "2021-10-14T19:42:22.000Z"
  },
  {
    "id": 968,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  uninstall node js from mac",
    "description": "",
    "reg_date": "2021-10-14T19:42:22.000Z"
  },
  {
    "id": 969,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  update in mongoose node js",
    "description": "app.put('/student/:id', (req, res) => {\n    Student.findByIdAndUpdate(req.params.id, req.body, (err, user) => {\n        if (err) {\n            return res\n                .status(500)\n                .send({error: \"unsuccessful\"})\n        };\n        res.send({success: \"success\"});\n    });\n\n});// Using queries with promise chaining\nModel.findOne({ name: 'Mr. Anderson' }).\n  then(doc => Model.updateOne({ _id: doc._id }, { name: 'Neo' })).\n  then(() => Model.findOne({ name: 'Neo' })).\n  then(doc => console.log(doc.name)); // 'Neo'\n\n// Using queries with async/await\nconst doc = await Model.findOne({ name: 'Neo' });\nconsole.log(doc.name); // 'Neo'var conditions = { name: 'bourne' } \n  , update = { $inc: { visits: 1 }}\n\nModel.update(conditions, update, { multi: true }).then(updatedRows=>{\n  \n}).catch(err=>{\n  console.log(err)\n  \n})router.patch('/:id', (req, res, next) => {\n    const id = req.params.id;\n    Product.findByIdAndUpdate(id, req.body, {\n            new: true\n        },\n        function(err, model) {\n            if (!err) {\n                res.status(201).json({\n                    data: model\n                });\n            } else {\n                res.status(500).json({\n                    message: \"not found any relative data\"\n                })\n            }\n        });\n});\n",
    "reg_date": "2021-10-14T19:42:22.000Z"
  },
  {
    "id": 970,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  update node js",
    "description": "sudo npm install npm@latest -g//First, clear the npm cache:\n\tnpm cache clean -f\n\n//Install n, Node’s version manager:\n\tnpm install -g n\n    \n//With the n module installed, you can use it to:\n\tInstall the latest stable version: n stable\n\tInstall the latest release: n latestsudo n stable\nsudo npm install -g n\nsudo npm cache clean -f\nsudo n 0.8.20\n",
    "reg_date": "2021-10-14T19:42:23.000Z"
  },
  {
    "id": 971,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  update node js mac to latest version",
    "description": "sudo npm cache clean -f \nsudo npm install -g n\nsudo n stable/lts brew update\nbrew upgrade node// Fix node not found first\t\nsudo chown -R `whoami`:admin /usr/local/include/node\n    sudo chown -R `whoami`:admin /usr/local/bin\n    sudo chown -R `whoami`:admin /usr/local/share\n    sudo chown -R `whoami`:admin /usr/local/lib/dtrace \n\n brew link --overwrite node\n \n// Then: \nsudo npm cache clean -f \nsudo npm install -g n \nsudo n stable/lts",
    "reg_date": "2021-10-14T19:42:23.000Z"
  },
  {
    "id": 972,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  update node js version ubuntu",
    "description": "curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt-get install -y nodejs# Using Ubuntu\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Using Debian, as root\ncurl -sL https://deb.nodesource.com/setup_13.x | bash -\napt-get install -y nodejs\nsudo npm cache clean -f\nsudo npm install -g n\nsudo n stable\n# Using Ubuntu\ncurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Using Debian, as root\ncurl -sL https://deb.nodesource.com/setup_12.x | bash -\napt-get install -y nodejs\n",
    "reg_date": "2021-10-14T19:42:23.000Z"
  },
  {
    "id": 973,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  update nodejs",
    "description": "sudo npm install npm@latest -g//First, clear the npm cache:\n\tnpm cache clean -f\n\n//Install n, Node’s version manager:\n\tnpm install -g n\n    \n//With the n module installed, you can use it to:\n\tInstall the latest stable version: n stable\n\tInstall the latest release: n latestsudo npm cache clean -f\nsudo npm install -g n\nsudo n stable//check node version\n>node -v\n// let's install a program called n that will let us easily switch \n//between Node versions.\n>npm install -g n\n//Upgrading to the latest stable version\n>n stable \n//Changing to a specific version\n>n 10.16.0\n# Using Ubuntu\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Using Debian, as root\ncurl -sL https://deb.nodesource.com/setup_13.x | bash -\napt-get install -y nodejs\nnpm cache clean -f\nnpm install -g n\nn stable",
    "reg_date": "2021-10-14T19:42:24.000Z"
  },
  {
    "id": 974,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  update nodejs mac",
    "description": "1 brew update\n2 brew upgrade nodesudo npm cache clean -f \nsudo npm install -g n\nsudo n stable/lts brew update\nbrew upgrade node// Fix node not found first\t\nsudo chown -R `whoami`:admin /usr/local/include/node\n    sudo chown -R `whoami`:admin /usr/local/bin\n    sudo chown -R `whoami`:admin /usr/local/share\n    sudo chown -R `whoami`:admin /usr/local/lib/dtrace \n\n brew link --overwrite node\n \n// Then: \nsudo npm cache clean -f \nsudo npm install -g n \nsudo n stable/lts",
    "reg_date": "2021-10-14T19:42:24.000Z"
  },
  {
    "id": 975,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  update nodejs ubuntu",
    "description": "curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt-get install -y nodejs//First, clear the npm cache:\n\tnpm cache clean -f\n\n//Install n, Node’s version manager:\n\tnpm install -g n\n    \n//With the n module installed, you can use it to:\n\tInstall the latest stable version: n stable\n\tInstall the latest release: n latestsudo npm cache clean -f\nsudo npm install -g n\nsudo n stable# Using Ubuntu\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Using Debian, as root\ncurl -sL https://deb.nodesource.com/setup_13.x | bash -\napt-get install -y nodejs\nsudo npm cache clean -f\nsudo npm install -g n\nsudo n stable\ncurl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -\nsudo apt-get install -y nodejs",
    "reg_date": "2021-10-14T19:42:24.000Z"
  },
  {
    "id": 976,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  update nodejs windows",
    "description": "//First, clear the npm cache:\n\tnpm cache clean -f\n\n//Install n, Node’s version manager:\n\tnpm install -g n\n    \n//With the n module installed, you can use it to:\n\tInstall the latest stable version: n stable\n\tInstall the latest release: n latestSet-ExecutionPolicy Unrestricted -Scope CurrentUser -Force\nnpm install -g npm-windows-upgrade\nnpm-windows-upgrade\n//check node version\n>node -v\n// let's install a program called n that will let us easily switch \n//between Node versions.\n>npm install -g n\n//Upgrading to the latest stable version\n>n stable \n//Changing to a specific version\n>n 10.16.0\nsudo npm cache clean -f \nsudo npm install -g n\nsudo n stable/lts # win\nchoco upgrade nodejs",
    "reg_date": "2021-10-14T19:42:25.000Z"
  },
  {
    "id": 977,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  updating node js ubuntu",
    "description": "curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt-get install -y nodejs",
    "reg_date": "2021-10-14T19:42:25.000Z"
  },
  {
    "id": 978,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  use ca certifcate node js",
    "description": "$ export NODE_EXTRA_CA_CERTS=[your CA certificate file path]\n",
    "reg_date": "2021-10-14T19:42:26.000Z"
  },
  {
    "id": 979,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  use import in node",
    "description": "In the package.json file add \"type\" : \"module\", . Adding this enables ES6 modules.\n\n//This will enable you to use import statements without any errorsimport defaultExport from \"module-name\";\nimport * as name from \"module-name\";\nimport { export1 } from \"module-name\";\nimport { export1 as alias1 } from \"module-name\";\nimport { export1 , export2 } from \"module-name\";\nimport { foo , bar } from \"module-name/path/to/specific/un-exported/file\";\nimport { export1 , export2 as alias2 , [...] } from \"module-name\";\nimport defaultExport, { export1 [ , [...] ] } from \"module-name\";\nimport defaultExport, * as name from \"module-name\";\nimport \"module-name\";\nvar promise = import(\"module-name\");\nrequire() is on-demand loading. Once a module has been \nloaded it won't be reloaded if the require() call is\nrun again. By putting it inside a function instead of\nyour top level module code, you can delay its loading\nor potentially avoid it if you never actually invoke\nthat function. However, require() is synchronous and\nloads the module from disk so best practice is to load\nany modules you need at application start before your \napplication starts serving requests which then ensures \nthat only asynchronous IO happens while your\napplication is operational.\n\nNode is single threaded so the memory footprint \nof loading a module is not per-connection, \n  it's per-process. Loading a module is a\none-off to get it into memory.\n\nJust stick with the convention here and \nrequire the modules you need at the top \nlevel scope of your app before you start\nprocessing requests. I think this is a \ncase of, if you have to ask whether you need to write\nyour code in an unusual way, you don't need to write your\ncode in an unusual way.\n\nconst http = require('http');\nconst { router } = require('./routes');",
    "reg_date": "2021-10-14T19:42:26.000Z"
  },
  {
    "id": 980,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  use node js as backend with angular frontend",
    "description": "1. Create a folder: mkdir project-name\n2. Enter in the folder: cd project-name\n3. Install Angular (you must have npm): npm install -g @angular/cli\n4. Create Angular project: ng new frontend\n5. Create server folder: mkdir server\n6. Enter in the folder: cd server\n7. Init Nodejs: npm init\n8. Create index.js in server\n9. Setup proxy in Angular to use Nodejs",
    "reg_date": "2021-10-14T19:42:27.000Z"
  },
  {
    "id": 981,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  use node js to check if a json file exists",
    "description": "const fs = require(\"fs\"); // Or `import fs from \"fs\";` with ESM\nif (fs.existsSync(path)) {\n    // Do something\n}const fs = require('fs')\n\nconst path = './file.txt'\n\ntry {\n  if (fs.existsSync(path)) {\n    //file exists\n  }\n} catch(err) {\n  console.error(err)\n}\nconst fs = require('fs')\n\nconst path = './file.txt'\n//Async method\nfs.access(path, fs.F_OK, (err) => {\n  if (err) {\n    console.error(err)\n    return\n  }\n\n  //file exists\n})\nfunction executeIfFileExist(src, callback) {\n    var xhr = new XMLHttpRequest()\n    xhr.onreadystatechange = function() {\n        if (this.readyState === this.DONE) {\n            callback()\n        }\n    }\n    xhr.open('HEAD', src)\n}",
    "reg_date": "2021-10-14T19:42:27.000Z"
  },
  {
    "id": 982,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  use static pages nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:28.000Z"
  },
  {
    "id": 983,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  using multiparty with node js express",
    "description": "var express = require('express');\nvar multiparty = require('connect-multiparty'),\n    multipartyMiddleware = multiparty({ uploadDir: './imagesPath' });\n\nvar router = express.Router();\n\nrouter.post('/', multipartyMiddleware, function(req, res) {\n  console.log(req.body, req.files);\n  var file = req.files.file;\n  console.log(file.name);\n  console.log(file.type);\n  res.status(200).send('OK');\n});\n\nmodule.exports = router;",
    "reg_date": "2021-10-14T19:42:30.000Z"
  },
  {
    "id": 984,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  validate password in nodejs",
    "description": "",
    "reg_date": "2021-10-14T19:42:31.000Z"
  },
  {
    "id": 985,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  version control api nodejs best practices",
    "description": "",
    "reg_date": "2021-10-14T19:42:31.000Z"
  },
  {
    "id": 986,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  web scraping node js puppeteer",
    "description": "/*\n    This code comes from Vincent Lab\n    And it has a video version linked here: https://www.youtube.com/watch?v=GAvpZuVzeA8\n*/\n\n// AQI\tAir Pollution Level\tHealth Implications\tCautionary Statement (for PM2.5)\n// 0 - 50\tGood\tAir quality is considered satisfactory, and air pollution poses little or no risk\tNone\n// 51 -100\tModerate\tAir quality is acceptable; however, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution.\tActive children and adults, and people with respiratory disease, such as asthma, should limit prolonged outdoor exertion.\n// 101-150\tUnhealthy for Sensitive Groups\tMembers of sensitive groups may experience health effects. The general public is not likely to be affected.\tActive children and adults, and people with respiratory disease, such as asthma, should limit prolonged outdoor exertion.\n// 151-200\tUnhealthy\tEveryone may begin to experience health effects; members of sensitive groups may experience more serious health effects\tActive children and adults, and people with respiratory disease, such as asthma, should avoid prolonged outdoor exertion; everyone else, especially children, should limit prolonged outdoor exertion\n// 201-300\tVery Unhealthy\tHealth warnings of emergency conditions. The entire population is more likely to be affected.\tActive children and adults, and people with respiratory disease, such as asthma, should avoid all outdoor exertion; everyone else, especially children, should limit outdoor exertion.\n// 300+\tHazardous\tHealth alert: everyone may experience more serious health effects\tEveryone should avoid all outdoor exertion\n\n// Import dependencies\nconst puppeteer = require(\"puppeteer\");\nconst moment = require(\"moment\");\nconst fs = require(\"fs\");\n\n(async () => {\n\n    // The location / URL\n    const url = \"https://aqicn.org/city/denmark/copenhagen/h.c.andersens-boulevard/\";\n\n    // Create the browser\n    const browser = await puppeteer.launch({\n        headless: true\n    });\n\n    // Navigate to the website\n    const page = await browser.newPage();\n    await page.goto(url, { waitUntil: \"load\" });\n\n    // Get the Air quality index\n    const aqi = await page.$(`#aqiwgtvalue`);\n\n    // Extract the index\n    const index = await (await aqi.getProperty(\"textContent\")).jsonValue();\n\n    // Extract the title\n    const title = await (await aqi.getProperty(\"title\")).jsonValue();\n\n    // Extract the location\n    const location = await (await (await page.$(`#aqiwgttitle1`)).getProperty(\"textContent\")).jsonValue();\n\n    // Write the data to a CSV file\n    if (fs.existsSync(\"air-pollution.csv\")) {\n        fs.appendFileSync(\"air-pollution.csv\", `\\n${moment.utc()}, ${index}, ${title}, ${location.replace(/,/g, '')}`)\n    } else {\n        fs.writeFileSync(\"air-pollution.csv\", `datetime, index, title, location\\n${moment.utc()}, ${index}, ${title}, ${location.replace(/,/g, '')}`)\n    }\n\n    // Close the browser\n    await browser.close();\nconst puppeteer = require('puppeteer')\nconst $ = require('cheerio')\n\n(async () => {\n\tconst browser = await puppeteer.launch()\n\tconst page = await browser.newPage()\n\tawait page.goto('https://www.imdb.com/title/tt7126948/?ref_=nv_sr_srsg_0', { waitUntil: 'networkidle0' })\n\n\tconst content = await page.evaluate(() => document.body.innerHTML)\n\tconst data = $('div[class=\"title_wrapper\"]', content).find('h1').text()\n\n\tconsole.log(data)\n\n\tawait browser.close()\n})()",
    "reg_date": "2021-10-14T19:42:32.000Z"
  },
  {
    "id": 987,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  web scraping nodejs",
    "description": "const puppeteer = require('puppeteer')\nconst $ = require('cheerio')\n\n(async () => {\n\tconst browser = await puppeteer.launch()\n\tconst page = await browser.newPage()\n\tawait page.goto('https://www.imdb.com/title/tt7126948/?ref_=nv_sr_srsg_0', { waitUntil: 'networkidle0' })\n\n\tconst content = await page.evaluate(() => document.body.innerHTML)\n\tconst data = $('div[class=\"title_wrapper\"]', content).find('h1').text()\n\n\tconsole.log(data)\n\n\tawait browser.close()\n})()//eventhough deprecated, still able to use\nconst request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  console.error('error:', error); // Print the error if one occurred\n  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n  console.log('body:', body); // Print the HTML for the Google homepage.\n});",
    "reg_date": "2021-10-14T19:42:32.000Z"
  },
  {
    "id": 988,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  what does results.push({}) nodejs mean",
    "description": "const mongoose = require('mongoose');\n    var data = async function () {\n         var array = [];\n         const finalResults = await new Promise((resolve, reject) => {\n            mongoose.connection.collection(\"organizations\").find({}).toArray(function(err, result) {\n              resolve(result);\n           });\n      });\n\n     for(var i = 0; i < finalResults.length; i++)\n     {\n          var a = finalResults[i].name;\n           array.push(a);\n      }\n        return array;\n    };\n\n    module.exports = {\n        data: data,\n    };const mongoose = require('mongoose');\n\nvar data = async function () {\n\n    const array = await mongoose.connection.collection(\"organizations\").find({}).toArray(function(err, result) {\n        if (err) throw err;\n        return result.map(r => r.name);\n    });\n\n    console.log(array); //this shows only [] meaning that the array is now empty.\n                        //this is shown in the log before the first log\n    return array;\n};\n\nmodule.exports = {\n    data: data,\n};",
    "reg_date": "2021-10-14T19:42:32.000Z"
  },
  {
    "id": 989,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  what is @ atsign in first of file path nodejs",
    "description": "  const path = require('path');\n\n  ...\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      ...\n      '@': path.resolve('src'),\n    }\n  },\n  ...\n",
    "reg_date": "2021-10-14T19:42:32.000Z"
  },
  {
    "id": 990,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  what is amqp10 policy nodejs",
    "description": "var AMQPClient = require('amqp10').Client,\n    Promise = require('bluebird');\n\nvar client = new AMQPClient(); // Uses PolicyBase default policy\nclient.connect('amqp://localhost')\n  .then(function() {\n    return Promise.all([\n      client.createReceiver('amq.topic'),\n      client.createSender('amq.topic')\n    ]);\n  })\n  .spread(function(receiver, sender) {\n    receiver.on('errorReceived', function(err) { // check for errors });\n    receiver.on('message', function(message) {\n      console.log('Rx message: ', message.body);\n    });\n\n    return sender.send({ key: \"Value\" });\n  })\n  .error(function(err) {\n    console.log(\"error: \", err);\n  });\n",
    "reg_date": "2021-10-14T19:42:32.000Z"
  },
  {
    "id": 991,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  what is event-driven programming in node js",
    "description": "// event-driven programming in node\n\n-> Event-driven programing: \nIn computer programming, event-driven programming is a programming paradigm \nin which the flow of the program is determined by events such as user actions \n(mouse clicks, key presses), sensor outputs, or message passing from other \nprograms or threads\n\n-> Event-driven programming in node:\n- Node.js uses events heavily and it is also one of the reasons why \nNode.js is pretty fast compared to other similar technologies.\n\n-As soon as Node starts its server, it simply initiates its variables,\ndeclares functions and then simply waits for the event to occur.\n\nIn an event-driven application, there is generally a main loop that\nlistens for events, and then triggers a callback function when one\nof those events is detected.",
    "reg_date": "2021-10-14T19:42:33.000Z"
  },
  {
    "id": 992,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  what is middleware in node js",
    "description": "var express = require('express')\nvar app = express()\n\nvar myLogger = function (req, res, next) {\n  console.log('LOGGED')\n  next()\n}\n\napp.use(myLogger)\n\napp.get('/', function (req, res) {\n  res.send('Hello World!')\n})\n\napp.listen(3000)\n//app.get will see only exact match ex.> \"/book\" here app.get will not allow /book/1, etc \n//but app.use is different see below\n\n//what is difference between app.use and app.all\n//app.use takes only 1 callback while app.all takes multiple callbacks\n//app.use will only see whether url starts with specified path But, app.all() will match the complete path\n\napp.use( \"/book\" , middleware);\n// will match /book\n// will match /book/author\n// will match /book/subject\n\napp.all( \"/book\" , handler);\n// will match /book\n// won't match /book/author   \n// won't match /book/subject    \n\napp.all( \"/book/*\" , handler);\n// won't match /book        \n// will match /book/author\n// will match /book/subjectNotice the call above to next(). Calling this function invokes the next middleware function in the app. The next() function is not a part of the Node.js or Express API, but is the third argument that is passed to the middleware function. The next() function could be named anything, but by convention it is always named “next”. To avoid confusion, always use this convention.\n",
    "reg_date": "2021-10-14T19:42:33.000Z"
  },
  {
    "id": 993,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  what is package.json in node",
    "description": "npm init //To install package.jsonAll npm packages contain a file, usually in the project root, called package. json - this file holds various metadata relevant to the project. This file is used to give information to npm that allows it to identify the project as well as handle the project's dependencies.metadata specific to the project\na web application, Node.js module, or even just a plain JavaScirpt library. \nidentifies the project and acts as a baseline for users and contributors \nto get information about the project.\ncontains a collection of any given project's dependencies\n",
    "reg_date": "2021-10-14T19:42:33.000Z"
  },
  {
    "id": 994,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  what is the meanof using next in nodejs",
    "description": "/*\nSome people always write return next() is to ensure that the execution stops after triggering the callback.\n\nIf you don't do it, you risk triggering the callback a second time later, which usually has devastating results. \n*/\n\napp.get('/users/:id?', function(req, res, next){\n    var id = req.params.id;\n\n    if(!id)\n        return next();\n\n    // do something\n});\n\n",
    "reg_date": "2021-10-14T19:42:33.000Z"
  },
  {
    "id": 995,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  where to create service angularor nodejs",
    "description": "      \n        content_copy\n      \n      ng generate service hero\n      (or)\n\t  ng g s hero\n          \n        content_copy\n      \n      ng generate service hero\n    ",
    "reg_date": "2021-10-14T19:42:34.000Z"
  },
  {
    "id": 996,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  which is more popular nodejs or django",
    "description": "Please answer this questionYou can't use django with nodejs, @Coloful Caterpillar. You have to use some hacky method",
    "reg_date": "2021-10-14T19:42:34.000Z"
  },
  {
    "id": 997,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  width and height with node js",
    "description": "gm = require('gm');\n\n// obtain the size of an image\ngm('test.jpg')\n.size(function (err, size) {\n  if (!err) {\n    console.log('width = ' + size.width);\n    console.log('height = ' + size.height);\n  }\n});\nvar sizeOf = require('image-size');\nsizeOf('images/funny-cats.png', function (err, dimensions) {\n  console.log(dimensions.width, dimensions.height);\n});\n",
    "reg_date": "2021-10-14T19:42:34.000Z"
  },
  {
    "id": 998,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  windows terminal vai kill all node js port",
    "description": "taskkill /f /im node.exe",
    "reg_date": "2021-10-14T19:42:34.000Z"
  },
  {
    "id": 999,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  write buffer to file in node",
    "description": "/*\n\tUsing nodejs' fs module you can create a WriteStream\n    to handle raw stream of bytes and buffers.\n*/\n\nconst path = \"path/to/the/file\";\n\narray = BigInt64Array(0);\nbuffer = Buffer.from(array.buffer)\n\nfs.createWriteStream(path).write(buffer);fs = require('fs');\nfs.writeFile('helloworld.txt', 'Hello World!', function (err) {\n  if (err) return console.log(err);\n  console.log('Hello World > helloworld.txt');\n});\n",
    "reg_date": "2021-10-14T19:42:34.000Z"
  },
  {
    "id": 1000,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  write head node js",
    "description": "",
    "reg_date": "2021-10-14T19:42:35.000Z"
  },
  {
    "id": 1001,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  write json file in node js",
    "description": "'use strict';\n\nconst fs = require('fs');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nlet data = JSON.stringify(student, null, 2);\n\nfs.writeFile('student-3.json', data, (err) => {\n    if (err) throw err;\n    console.log('Data written to file');\n});\n\nconsole.log('This is after the write call');\nfunction writeJsonFile(file, content) {\n  let jsonData = JSON.stringify(content)\n  fs.writeFileSync(file, jsonData)\n}const fs = require('fs');\nconst path = require('path');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nfs.writeFileSync(path.resolve(__dirname, 'student.json'), JSON.stringify(student));\n",
    "reg_date": "2021-10-14T19:42:35.000Z"
  },
  {
    "id": 1002,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  write json file nodejs",
    "description": "const fs = require('fs');\nconst path = require('path');\n\nlet rawdata = fs.readFileSync(path.resolve(__dirname, 'student.json'));\nlet student = JSON.parse(rawdata);\nconsole.log(student);'use strict';\n\nconst fs = require('fs');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nlet data = JSON.stringify(student, null, 2);\n\nfs.writeFile('student-3.json', data, (err) => {\n    if (err) throw err;\n    console.log('Data written to file');\n});\n\nconsole.log('This is after the write call');\nfunction writeJsonFile(file, content) {\n  let jsonData = JSON.stringify(content)\n  fs.writeFileSync(file, jsonData)\n}const fs = require('fs');\nconst path = require('path');\n\nlet student = { \n    name: 'Mike',\n    age: 23, \n    gender: 'Male',\n    department: 'English',\n    car: 'Honda' \n};\n \nfs.writeFileSync(path.resolve(__dirname, 'student.json'), JSON.stringify(student));\n",
    "reg_date": "2021-10-14T19:42:35.000Z"
  },
  {
    "id": 1003,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  writefile in node js",
    "description": "// writefile.js\n\nconst fs = require('fs');\n\nlet lyrics = 'But still I\\'m having memories of high speeds when the cops crashed\\n' + \n             'As I laugh, pushin the gas while my Glocks blast\\n' + \n             'We was young and we was dumb but we had heart';\n\n// write to a new file named 2pac.txt\nfs.writeFile('2pac.txt', lyrics, (err) => {\n    // throws an error, you could also catch it here\n    if (err) throw err;\n\n    // success case, the file was saved\n    console.log('Lyric saved!');\n});\nconst fs = require('fs');\n\nfs.writeFile(\"/tmp/test\", \"Hey there!\", function(err) {\n    if(err) {\n        return console.log(err);\n    }\n    console.log(\"The file was saved!\");\n}); \n\n// Or\nfs.writeFileSync('/tmp/test-sync', 'Hey there!');// write_stream.js\n\nconst fs = require('fs');\n\nlet writeStream = fs.createWriteStream('secret.txt');\n\n// write some data with a base64 encoding\nwriteStream.write('aef35ghhjdk74hja83ksnfjk888sfsf', 'base64');\n\n// the finish event is emitted when all data has been flushed from the stream\nwriteStream.on('finish', () => {\n    console.log('wrote all data to file');\n});\n\n// close the stream\nwriteStream.end();\n// append_file.js\n\nconst fs = require('fs');\n\n// add a line to a lyric file, using appendFile\nfs.appendFile('empirestate.txt', '\\nRight there up on Broadway', (err) => {\n    if (err) throw err;\n    console.log('The lyrics were updated!');\n});\nfs.writeFile('2pac.txt', 'Some other lyric', 'ascii', callback);\n// fs_write.js\n\nconst fs = require('fs');\n\n// specify the path to the file, and create a buffer with characters we want to write\nlet path = 'ghetto_gospel.txt';\nlet buffer = new Buffer('Those who wish to follow me\\nI welcome with my hands\\nAnd the red sun sinks at last');\n\n// open the file in writing mode, adding a callback function where we do the actual writing\nfs.open(path, 'w', function(err, fd) {\n    if (err) {\n        throw 'could not open file: ' + err;\n    }\n\n    // write the contents of the buffer, from position 0 to the end, to the file descriptor returned in opening our file\n    fs.write(fd, buffer, 0, buffer.length, null, function(err) {\n        if (err) throw 'error writing file: ' + err;\n        fs.close(fd, function() {\n            console.log('wrote the file successfully');\n        });\n    });\n});\n",
    "reg_date": "2021-10-14T19:42:35.000Z"
  },
  {
    "id": 1004,
    "keyword": null,
    "link": null,
    "title": " frameworks  nodejs  zerossl not working for node js",
    "description": "// Make sure to include the certificate bundle as well\nconst options = {\n  key: fs.readFileSync(\"/dir/key.key\"),\n  cert: fs.readFileSync(\"/dir/crt.crt\"),\n  ca: fs.readFileSync(\"/dir/ca.ca\"),\n};",
    "reg_date": "2021-10-14T19:42:35.000Z"
  }
]